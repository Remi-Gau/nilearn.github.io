Search.setIndex({"docnames": ["authors", "auto_examples/00_tutorials/index", "auto_examples/00_tutorials/plot_3d_and_4d_niimg", "auto_examples/00_tutorials/plot_decoding_tutorial", "auto_examples/00_tutorials/plot_nilearn_101", "auto_examples/00_tutorials/plot_python_101", "auto_examples/00_tutorials/plot_single_subject_single_run", "auto_examples/00_tutorials/sg_execution_times", "auto_examples/01_plotting/index", "auto_examples/01_plotting/plot_3d_map_to_surface_projection", "auto_examples/01_plotting/plot_atlas", "auto_examples/01_plotting/plot_carpet", "auto_examples/01_plotting/plot_colormaps", "auto_examples/01_plotting/plot_demo_glass_brain", "auto_examples/01_plotting/plot_demo_glass_brain_extensive", "auto_examples/01_plotting/plot_demo_more_plotting", "auto_examples/01_plotting/plot_demo_plotting", "auto_examples/01_plotting/plot_dim_plotting", "auto_examples/01_plotting/plot_haxby_masks", "auto_examples/01_plotting/plot_multiscale_parcellations", "auto_examples/01_plotting/plot_overlay", "auto_examples/01_plotting/plot_prob_atlas", "auto_examples/01_plotting/plot_surf_atlas", "auto_examples/01_plotting/plot_surf_stat_map", "auto_examples/01_plotting/plot_surface_projection_strategies", "auto_examples/01_plotting/plot_visualization", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats", "auto_examples/01_plotting/sg_execution_times", "auto_examples/02_decoding/index", "auto_examples/02_decoding/plot_haxby_anova_svm", "auto_examples/02_decoding/plot_haxby_different_estimators", "auto_examples/02_decoding/plot_haxby_frem", "auto_examples/02_decoding/plot_haxby_full_analysis", "auto_examples/02_decoding/plot_haxby_glm_decoding", "auto_examples/02_decoding/plot_haxby_grid_search", "auto_examples/02_decoding/plot_haxby_multiclass", "auto_examples/02_decoding/plot_haxby_searchlight", "auto_examples/02_decoding/plot_haxby_searchlight_surface", "auto_examples/02_decoding/plot_haxby_stimuli", "auto_examples/02_decoding/plot_mixed_gambles_frem", "auto_examples/02_decoding/plot_miyawaki_encoding", "auto_examples/02_decoding/plot_miyawaki_reconstruction", "auto_examples/02_decoding/plot_oasis_vbm", "auto_examples/02_decoding/plot_oasis_vbm_space_net", "auto_examples/02_decoding/plot_simulated_data", "auto_examples/02_decoding/sg_execution_times", "auto_examples/03_connectivity/index", "auto_examples/03_connectivity/plot_atlas_comparison", "auto_examples/03_connectivity/plot_compare_decomposition", "auto_examples/03_connectivity/plot_data_driven_parcellations", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps", "auto_examples/03_connectivity/plot_group_level_connectivity", "auto_examples/03_connectivity/plot_inverse_covariance_connectome", "auto_examples/03_connectivity/plot_multi_subject_connectome", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation", "auto_examples/03_connectivity/plot_signal_extraction", "auto_examples/03_connectivity/plot_simulated_connectome", "auto_examples/03_connectivity/plot_sphere_based_connectome", "auto_examples/03_connectivity/sg_execution_times", "auto_examples/04_glm_first_level/index", "auto_examples/04_glm_first_level/plot_adhd_dmn", "auto_examples/04_glm_first_level/plot_bids_features", "auto_examples/04_glm_first_level/plot_design_matrix", "auto_examples/04_glm_first_level/plot_fiac_analysis", "auto_examples/04_glm_first_level/plot_fir_model", "auto_examples/04_glm_first_level/plot_first_level_details", "auto_examples/04_glm_first_level/plot_fixed_effects", "auto_examples/04_glm_first_level/plot_hrf", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis", "auto_examples/04_glm_first_level/plot_predictions_residuals", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces", "auto_examples/04_glm_first_level/plot_write_events_file", "auto_examples/04_glm_first_level/sg_execution_times", "auto_examples/05_glm_second_level/index", "auto_examples/05_glm_second_level/plot_oasis", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels", "auto_examples/05_glm_second_level/plot_second_level_association_test", "auto_examples/05_glm_second_level/plot_second_level_design_matrix", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test", "auto_examples/05_glm_second_level/plot_thresholding", "auto_examples/05_glm_second_level/sg_execution_times", "auto_examples/06_manipulating_images/index", "auto_examples/06_manipulating_images/plot_affine_transformation", "auto_examples/06_manipulating_images/plot_compare_mean_image", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps", "auto_examples/06_manipulating_images/plot_mask_computation", "auto_examples/06_manipulating_images/plot_negate_image", "auto_examples/06_manipulating_images/plot_nifti_labels_simple", "auto_examples/06_manipulating_images/plot_nifti_simple", "auto_examples/06_manipulating_images/plot_resample_to_template", "auto_examples/06_manipulating_images/plot_roi_extraction", "auto_examples/06_manipulating_images/plot_smooth_mean_image", "auto_examples/06_manipulating_images/sg_execution_times", "auto_examples/07_advanced/index", "auto_examples/07_advanced/plot_advanced_decoding_scikit", "auto_examples/07_advanced/plot_age_group_prediction_cross_val", "auto_examples/07_advanced/plot_beta_series", "auto_examples/07_advanced/plot_bids_analysis", "auto_examples/07_advanced/plot_haxby_mass_univariate", "auto_examples/07_advanced/plot_ica_neurovault", "auto_examples/07_advanced/plot_ica_resting_state", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods", "auto_examples/07_advanced/plot_localizer_simple_analysis", "auto_examples/07_advanced/plot_neurovault_meta_analysis", "auto_examples/07_advanced/plot_surface_bids_analysis", "auto_examples/07_advanced/sg_execution_times", "auto_examples/08_experimental/index", "auto_examples/08_experimental/plot_surface_image_and_maskers", "auto_examples/08_experimental/sg_execution_times", "auto_examples/index", "bibliography", "building_blocks/index", "building_blocks/manual_pipeline", "building_blocks/neurovault", "changes/0.1.0", "changes/0.1.1", "changes/0.1.2", "changes/0.1.3", "changes/0.1.4", "changes/0.10.0", "changes/0.10.1", "changes/0.10.2", "changes/0.2.0", "changes/0.2.1", "changes/0.2.2", "changes/0.2.3", "changes/0.2.4", "changes/0.2.5", "changes/0.2.6", "changes/0.3.0", "changes/0.3.1", "changes/0.4.0", "changes/0.4.1", "changes/0.4.2", "changes/0.5.0", "changes/0.5.1", "changes/0.5.2", "changes/0.6.0", "changes/0.6.1", "changes/0.6.2", "changes/0.7.0", "changes/0.7.1", "changes/0.8.0", "changes/0.8.1", "changes/0.9.0", "changes/0.9.1", "changes/0.9.2", "changes/latest", "changes/names", "changes/whats_new", "connectivity/connectome_extraction", "connectivity/functional_connectomes", "connectivity/index", "connectivity/parcellating", "connectivity/region_extraction", "connectivity/resting_state_networks", "decoding/decoding_intro", "decoding/estimator_choice", "decoding/frem", "decoding/going_further", "decoding/index", "decoding/searchlight", "decoding/space_net", "developers/group_sparse_covariance", "development", "glm/first_level_model", "glm/glm_intro", "glm/index", "glm/second_level_model", "glossary", "index", "introduction", "maintenance", "manipulating_images/index", "manipulating_images/input_output", "manipulating_images/manipulating_images", "manipulating_images/masker_objects", "modules/connectome", "modules/datasets", "modules/decoding", "modules/decomposition", "modules/experimental", "modules/generated/nilearn.connectome.ConnectivityMeasure", "modules/generated/nilearn.connectome.GroupSparseCovariance", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV", "modules/generated/nilearn.connectome.cov_to_corr", "modules/generated/nilearn.connectome.group_sparse_covariance", "modules/generated/nilearn.connectome.prec_to_partial", "modules/generated/nilearn.connectome.sym_matrix_to_vec", "modules/generated/nilearn.connectome.vec_to_sym_matrix", "modules/generated/nilearn.datasets.fetch_abide_pcp", "modules/generated/nilearn.datasets.fetch_adhd", "modules/generated/nilearn.datasets.fetch_atlas_aal", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009", "modules/generated/nilearn.datasets.fetch_atlas_difumo", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford", "modules/generated/nilearn.datasets.fetch_atlas_juelich", "modules/generated/nilearn.datasets.fetch_atlas_msdl", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux", "modules/generated/nilearn.datasets.fetch_atlas_talairach", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010", "modules/generated/nilearn.datasets.fetch_coords_power_2011", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018", "modules/generated/nilearn.datasets.fetch_development_fmri", "modules/generated/nilearn.datasets.fetch_ds000030_urls", "modules/generated/nilearn.datasets.fetch_fiac_first_level", "modules/generated/nilearn.datasets.fetch_haxby", "modules/generated/nilearn.datasets.fetch_icbm152_2009", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset", "modules/generated/nilearn.datasets.fetch_localizer_button_task", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task", "modules/generated/nilearn.datasets.fetch_localizer_contrasts", "modules/generated/nilearn.datasets.fetch_localizer_first_level", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats", "modules/generated/nilearn.datasets.fetch_mixed_gambles", "modules/generated/nilearn.datasets.fetch_miyawaki2008", "modules/generated/nilearn.datasets.fetch_neurovault", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task", "modules/generated/nilearn.datasets.fetch_neurovault_ids", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task", "modules/generated/nilearn.datasets.fetch_oasis_vbm", "modules/generated/nilearn.datasets.fetch_openneuro_dataset", "modules/generated/nilearn.datasets.fetch_openneuro_dataset_index", "modules/generated/nilearn.datasets.fetch_spm_auditory", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri", "modules/generated/nilearn.datasets.fetch_surf_fsaverage", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced", "modules/generated/nilearn.datasets.get_data_dirs", "modules/generated/nilearn.datasets.load_mni152_brain_mask", "modules/generated/nilearn.datasets.load_mni152_gm_mask", "modules/generated/nilearn.datasets.load_mni152_gm_template", "modules/generated/nilearn.datasets.load_mni152_template", "modules/generated/nilearn.datasets.load_mni152_wm_mask", "modules/generated/nilearn.datasets.load_mni152_wm_template", "modules/generated/nilearn.datasets.load_sample_motor_activation_image", "modules/generated/nilearn.datasets.patch_openneuro_dataset", "modules/generated/nilearn.datasets.select_from_index", "modules/generated/nilearn.decoding.Decoder", "modules/generated/nilearn.decoding.DecoderRegressor", "modules/generated/nilearn.decoding.FREMClassifier", "modules/generated/nilearn.decoding.FREMRegressor", "modules/generated/nilearn.decoding.SearchLight", "modules/generated/nilearn.decoding.SpaceNetClassifier", "modules/generated/nilearn.decoding.SpaceNetRegressor", "modules/generated/nilearn.decomposition.CanICA", "modules/generated/nilearn.decomposition.DictLearning", "modules/generated/nilearn.experimental.surface.FileMesh", "modules/generated/nilearn.experimental.surface.InMemoryMesh", "modules/generated/nilearn.experimental.surface.Mesh", "modules/generated/nilearn.experimental.surface.PolyMesh", "modules/generated/nilearn.experimental.surface.SurfaceImage", "modules/generated/nilearn.experimental.surface.SurfaceLabelsMasker", "modules/generated/nilearn.experimental.surface.SurfaceMasker", "modules/generated/nilearn.experimental.surface.fetch_destrieux", "modules/generated/nilearn.experimental.surface.fetch_nki", "modules/generated/nilearn.experimental.surface.load_fsaverage", "modules/generated/nilearn.glm.ARModel", "modules/generated/nilearn.glm.Contrast", "modules/generated/nilearn.glm.FContrastResults", "modules/generated/nilearn.glm.LikelihoodModelResults", "modules/generated/nilearn.glm.OLSModel", "modules/generated/nilearn.glm.RegressionResults", "modules/generated/nilearn.glm.SimpleRegressionResults", "modules/generated/nilearn.glm.TContrastResults", "modules/generated/nilearn.glm.cluster_level_inference", "modules/generated/nilearn.glm.compute_contrast", "modules/generated/nilearn.glm.compute_fixed_effects", "modules/generated/nilearn.glm.expression_to_contrast_vector", "modules/generated/nilearn.glm.fdr_threshold", "modules/generated/nilearn.glm.first_level.FirstLevelModel", "modules/generated/nilearn.glm.first_level.check_design_matrix", "modules/generated/nilearn.glm.first_level.compute_regressor", "modules/generated/nilearn.glm.first_level.first_level_from_bids", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative", "modules/generated/nilearn.glm.first_level.glover_hrf", "modules/generated/nilearn.glm.first_level.glover_time_derivative", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix", "modules/generated/nilearn.glm.first_level.mean_scaling", "modules/generated/nilearn.glm.first_level.run_glm", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative", "modules/generated/nilearn.glm.first_level.spm_hrf", "modules/generated/nilearn.glm.first_level.spm_time_derivative", "modules/generated/nilearn.glm.second_level.SecondLevelModel", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix", "modules/generated/nilearn.glm.second_level.non_parametric_inference", "modules/generated/nilearn.glm.threshold_stats_img", "modules/generated/nilearn.image.binarize_img", "modules/generated/nilearn.image.clean_img", "modules/generated/nilearn.image.concat_imgs", "modules/generated/nilearn.image.coord_transform", "modules/generated/nilearn.image.copy_img", "modules/generated/nilearn.image.crop_img", "modules/generated/nilearn.image.get_data", "modules/generated/nilearn.image.high_variance_confounds", "modules/generated/nilearn.image.index_img", "modules/generated/nilearn.image.iter_img", "modules/generated/nilearn.image.largest_connected_component_img", "modules/generated/nilearn.image.load_img", "modules/generated/nilearn.image.math_img", "modules/generated/nilearn.image.mean_img", "modules/generated/nilearn.image.new_img_like", "modules/generated/nilearn.image.reorder_img", "modules/generated/nilearn.image.resample_img", "modules/generated/nilearn.image.resample_to_img", "modules/generated/nilearn.image.smooth_img", "modules/generated/nilearn.image.swap_img_hemispheres", "modules/generated/nilearn.image.threshold_img", "modules/generated/nilearn.interfaces.bids.get_bids_files", "modules/generated/nilearn.interfaces.bids.parse_bids_filename", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids", "modules/generated/nilearn.interfaces.fmriprep.load_confounds", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat", "modules/generated/nilearn.maskers.BaseMasker", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker", "modules/generated/nilearn.maskers.MultiNiftiMasker", "modules/generated/nilearn.maskers.NiftiLabelsMasker", "modules/generated/nilearn.maskers.NiftiMapsMasker", "modules/generated/nilearn.maskers.NiftiMasker", "modules/generated/nilearn.maskers.NiftiSpheresMasker", "modules/generated/nilearn.masking.apply_mask", "modules/generated/nilearn.masking.compute_background_mask", "modules/generated/nilearn.masking.compute_brain_mask", "modules/generated/nilearn.masking.compute_epi_mask", "modules/generated/nilearn.masking.compute_multi_background_mask", "modules/generated/nilearn.masking.compute_multi_brain_mask", "modules/generated/nilearn.masking.compute_multi_epi_mask", "modules/generated/nilearn.masking.intersect_masks", "modules/generated/nilearn.masking.unmask", "modules/generated/nilearn.mass_univariate.permuted_ols", "modules/generated/nilearn.plotting.displays.BaseAxes", "modules/generated/nilearn.plotting.displays.BaseSlicer", "modules/generated/nilearn.plotting.displays.CutAxes", "modules/generated/nilearn.plotting.displays.GlassBrainAxes", "modules/generated/nilearn.plotting.displays.LProjector", "modules/generated/nilearn.plotting.displays.LRProjector", "modules/generated/nilearn.plotting.displays.LYRProjector", "modules/generated/nilearn.plotting.displays.LYRZProjector", "modules/generated/nilearn.plotting.displays.LZRProjector", "modules/generated/nilearn.plotting.displays.LZRYProjector", "modules/generated/nilearn.plotting.displays.MosaicSlicer", "modules/generated/nilearn.plotting.displays.OrthoProjector", "modules/generated/nilearn.plotting.displays.OrthoSlicer", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure", "modules/generated/nilearn.plotting.displays.RProjector", "modules/generated/nilearn.plotting.displays.TiledSlicer", "modules/generated/nilearn.plotting.displays.XProjector", "modules/generated/nilearn.plotting.displays.XSlicer", "modules/generated/nilearn.plotting.displays.XZProjector", "modules/generated/nilearn.plotting.displays.XZSlicer", "modules/generated/nilearn.plotting.displays.YProjector", "modules/generated/nilearn.plotting.displays.YSlicer", "modules/generated/nilearn.plotting.displays.YXProjector", "modules/generated/nilearn.plotting.displays.YXSlicer", "modules/generated/nilearn.plotting.displays.YZProjector", "modules/generated/nilearn.plotting.displays.YZSlicer", "modules/generated/nilearn.plotting.displays.ZProjector", "modules/generated/nilearn.plotting.displays.ZSlicer", "modules/generated/nilearn.plotting.displays.get_projector", "modules/generated/nilearn.plotting.displays.get_slicer", "modules/generated/nilearn.plotting.find_cut_slices", "modules/generated/nilearn.plotting.find_parcellation_cut_coords", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords", "modules/generated/nilearn.plotting.find_xyz_cut_coords", "modules/generated/nilearn.plotting.plot_anat", "modules/generated/nilearn.plotting.plot_carpet", "modules/generated/nilearn.plotting.plot_connectome", "modules/generated/nilearn.plotting.plot_contrast_matrix", "modules/generated/nilearn.plotting.plot_design_matrix", "modules/generated/nilearn.plotting.plot_epi", "modules/generated/nilearn.plotting.plot_event", "modules/generated/nilearn.plotting.plot_glass_brain", "modules/generated/nilearn.plotting.plot_img", "modules/generated/nilearn.plotting.plot_img_comparison", "modules/generated/nilearn.plotting.plot_img_on_surf", "modules/generated/nilearn.plotting.plot_markers", "modules/generated/nilearn.plotting.plot_matrix", "modules/generated/nilearn.plotting.plot_prob_atlas", "modules/generated/nilearn.plotting.plot_roi", "modules/generated/nilearn.plotting.plot_stat_map", "modules/generated/nilearn.plotting.plot_surf", "modules/generated/nilearn.plotting.plot_surf_contours", "modules/generated/nilearn.plotting.plot_surf_roi", "modules/generated/nilearn.plotting.plot_surf_stat_map", "modules/generated/nilearn.plotting.show", "modules/generated/nilearn.plotting.view_connectome", "modules/generated/nilearn.plotting.view_img", "modules/generated/nilearn.plotting.view_img_on_surf", "modules/generated/nilearn.plotting.view_markers", "modules/generated/nilearn.plotting.view_surf", "modules/generated/nilearn.regions.HierarchicalKMeans", "modules/generated/nilearn.regions.Parcellations", "modules/generated/nilearn.regions.ReNA", "modules/generated/nilearn.regions.RegionExtractor", "modules/generated/nilearn.regions.connected_label_regions", "modules/generated/nilearn.regions.connected_regions", "modules/generated/nilearn.regions.img_to_signals_labels", "modules/generated/nilearn.regions.img_to_signals_maps", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration", "modules/generated/nilearn.regions.signals_to_img_labels", "modules/generated/nilearn.regions.signals_to_img_maps", "modules/generated/nilearn.reporting.HTMLReport", "modules/generated/nilearn.reporting.get_clusters_table", "modules/generated/nilearn.reporting.make_glm_report", "modules/generated/nilearn.signal.butterworth", "modules/generated/nilearn.signal.clean", "modules/generated/nilearn.signal.high_variance_confounds", "modules/generated/nilearn.surface.load_surf_data", "modules/generated/nilearn.surface.load_surf_mesh", "modules/generated/nilearn.surface.vol_to_surf", "modules/glm", "modules/image", "modules/index", "modules/interfaces", "modules/maskers", "modules/masking", "modules/mass_univariate", "modules/plotting", "modules/regions", "modules/reporting", "modules/signal", "modules/surface", "plotting/index", "quickstart", "user_guide"], "filenames": ["authors.rst", "auto_examples/00_tutorials/index.rst", "auto_examples/00_tutorials/plot_3d_and_4d_niimg.rst", "auto_examples/00_tutorials/plot_decoding_tutorial.rst", "auto_examples/00_tutorials/plot_nilearn_101.rst", "auto_examples/00_tutorials/plot_python_101.rst", "auto_examples/00_tutorials/plot_single_subject_single_run.rst", "auto_examples/00_tutorials/sg_execution_times.rst", "auto_examples/01_plotting/index.rst", "auto_examples/01_plotting/plot_3d_map_to_surface_projection.rst", "auto_examples/01_plotting/plot_atlas.rst", "auto_examples/01_plotting/plot_carpet.rst", "auto_examples/01_plotting/plot_colormaps.rst", "auto_examples/01_plotting/plot_demo_glass_brain.rst", "auto_examples/01_plotting/plot_demo_glass_brain_extensive.rst", "auto_examples/01_plotting/plot_demo_more_plotting.rst", "auto_examples/01_plotting/plot_demo_plotting.rst", "auto_examples/01_plotting/plot_dim_plotting.rst", "auto_examples/01_plotting/plot_haxby_masks.rst", "auto_examples/01_plotting/plot_multiscale_parcellations.rst", "auto_examples/01_plotting/plot_overlay.rst", "auto_examples/01_plotting/plot_prob_atlas.rst", "auto_examples/01_plotting/plot_surf_atlas.rst", "auto_examples/01_plotting/plot_surf_stat_map.rst", "auto_examples/01_plotting/plot_surface_projection_strategies.rst", "auto_examples/01_plotting/plot_visualization.rst", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats.rst", "auto_examples/01_plotting/sg_execution_times.rst", "auto_examples/02_decoding/index.rst", "auto_examples/02_decoding/plot_haxby_anova_svm.rst", "auto_examples/02_decoding/plot_haxby_different_estimators.rst", "auto_examples/02_decoding/plot_haxby_frem.rst", "auto_examples/02_decoding/plot_haxby_full_analysis.rst", "auto_examples/02_decoding/plot_haxby_glm_decoding.rst", "auto_examples/02_decoding/plot_haxby_grid_search.rst", "auto_examples/02_decoding/plot_haxby_multiclass.rst", "auto_examples/02_decoding/plot_haxby_searchlight.rst", "auto_examples/02_decoding/plot_haxby_searchlight_surface.rst", "auto_examples/02_decoding/plot_haxby_stimuli.rst", "auto_examples/02_decoding/plot_mixed_gambles_frem.rst", "auto_examples/02_decoding/plot_miyawaki_encoding.rst", "auto_examples/02_decoding/plot_miyawaki_reconstruction.rst", "auto_examples/02_decoding/plot_oasis_vbm.rst", "auto_examples/02_decoding/plot_oasis_vbm_space_net.rst", "auto_examples/02_decoding/plot_simulated_data.rst", "auto_examples/02_decoding/sg_execution_times.rst", "auto_examples/03_connectivity/index.rst", "auto_examples/03_connectivity/plot_atlas_comparison.rst", "auto_examples/03_connectivity/plot_compare_decomposition.rst", "auto_examples/03_connectivity/plot_data_driven_parcellations.rst", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps.rst", "auto_examples/03_connectivity/plot_group_level_connectivity.rst", "auto_examples/03_connectivity/plot_inverse_covariance_connectome.rst", "auto_examples/03_connectivity/plot_multi_subject_connectome.rst", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction.rst", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation.rst", "auto_examples/03_connectivity/plot_signal_extraction.rst", "auto_examples/03_connectivity/plot_simulated_connectome.rst", "auto_examples/03_connectivity/plot_sphere_based_connectome.rst", "auto_examples/03_connectivity/sg_execution_times.rst", "auto_examples/04_glm_first_level/index.rst", "auto_examples/04_glm_first_level/plot_adhd_dmn.rst", "auto_examples/04_glm_first_level/plot_bids_features.rst", "auto_examples/04_glm_first_level/plot_design_matrix.rst", "auto_examples/04_glm_first_level/plot_fiac_analysis.rst", "auto_examples/04_glm_first_level/plot_fir_model.rst", "auto_examples/04_glm_first_level/plot_first_level_details.rst", "auto_examples/04_glm_first_level/plot_fixed_effects.rst", "auto_examples/04_glm_first_level/plot_hrf.rst", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis.rst", "auto_examples/04_glm_first_level/plot_predictions_residuals.rst", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces.rst", "auto_examples/04_glm_first_level/plot_write_events_file.rst", "auto_examples/04_glm_first_level/sg_execution_times.rst", "auto_examples/05_glm_second_level/index.rst", "auto_examples/05_glm_second_level/plot_oasis.rst", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels.rst", "auto_examples/05_glm_second_level/plot_second_level_association_test.rst", "auto_examples/05_glm_second_level/plot_second_level_design_matrix.rst", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test.rst", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test.rst", "auto_examples/05_glm_second_level/plot_thresholding.rst", "auto_examples/05_glm_second_level/sg_execution_times.rst", "auto_examples/06_manipulating_images/index.rst", "auto_examples/06_manipulating_images/plot_affine_transformation.rst", "auto_examples/06_manipulating_images/plot_compare_mean_image.rst", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image.rst", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas.rst", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps.rst", "auto_examples/06_manipulating_images/plot_mask_computation.rst", "auto_examples/06_manipulating_images/plot_negate_image.rst", "auto_examples/06_manipulating_images/plot_nifti_labels_simple.rst", "auto_examples/06_manipulating_images/plot_nifti_simple.rst", "auto_examples/06_manipulating_images/plot_resample_to_template.rst", "auto_examples/06_manipulating_images/plot_roi_extraction.rst", "auto_examples/06_manipulating_images/plot_smooth_mean_image.rst", "auto_examples/06_manipulating_images/sg_execution_times.rst", "auto_examples/07_advanced/index.rst", "auto_examples/07_advanced/plot_advanced_decoding_scikit.rst", "auto_examples/07_advanced/plot_age_group_prediction_cross_val.rst", "auto_examples/07_advanced/plot_beta_series.rst", "auto_examples/07_advanced/plot_bids_analysis.rst", "auto_examples/07_advanced/plot_haxby_mass_univariate.rst", "auto_examples/07_advanced/plot_ica_neurovault.rst", "auto_examples/07_advanced/plot_ica_resting_state.rst", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods.rst", "auto_examples/07_advanced/plot_localizer_simple_analysis.rst", "auto_examples/07_advanced/plot_neurovault_meta_analysis.rst", "auto_examples/07_advanced/plot_surface_bids_analysis.rst", "auto_examples/07_advanced/sg_execution_times.rst", "auto_examples/08_experimental/index.rst", "auto_examples/08_experimental/plot_surface_image_and_maskers.rst", "auto_examples/08_experimental/sg_execution_times.rst", "auto_examples/index.rst", "bibliography.rst", "building_blocks/index.rst", "building_blocks/manual_pipeline.rst", "building_blocks/neurovault.rst", "changes/0.1.0.rst", "changes/0.1.1.rst", "changes/0.1.2.rst", "changes/0.1.3.rst", "changes/0.1.4.rst", "changes/0.10.0.rst", "changes/0.10.1.rst", "changes/0.10.2.rst", "changes/0.2.0.rst", "changes/0.2.1.rst", "changes/0.2.2.rst", "changes/0.2.3.rst", "changes/0.2.4.rst", "changes/0.2.5.rst", "changes/0.2.6.rst", "changes/0.3.0.rst", "changes/0.3.1.rst", "changes/0.4.0.rst", "changes/0.4.1.rst", "changes/0.4.2.rst", "changes/0.5.0.rst", "changes/0.5.1.rst", "changes/0.5.2.rst", "changes/0.6.0.rst", "changes/0.6.1.rst", "changes/0.6.2.rst", "changes/0.7.0.rst", "changes/0.7.1.rst", "changes/0.8.0.rst", "changes/0.8.1.rst", "changes/0.9.0.rst", "changes/0.9.1.rst", "changes/0.9.2.rst", "changes/latest.rst", "changes/names.rst", "changes/whats_new.rst", "connectivity/connectome_extraction.rst", "connectivity/functional_connectomes.rst", "connectivity/index.rst", "connectivity/parcellating.rst", "connectivity/region_extraction.rst", "connectivity/resting_state_networks.rst", "decoding/decoding_intro.rst", "decoding/estimator_choice.rst", "decoding/frem.rst", "decoding/going_further.rst", "decoding/index.rst", "decoding/searchlight.rst", "decoding/space_net.rst", "developers/group_sparse_covariance.rst", "development.rst", "glm/first_level_model.rst", "glm/glm_intro.rst", "glm/index.rst", "glm/second_level_model.rst", "glossary.rst", "index.rst", "introduction.rst", "maintenance.rst", "manipulating_images/index.rst", "manipulating_images/input_output.rst", "manipulating_images/manipulating_images.rst", "manipulating_images/masker_objects.rst", "modules/connectome.rst", "modules/datasets.rst", "modules/decoding.rst", "modules/decomposition.rst", "modules/experimental.rst", "modules/generated/nilearn.connectome.ConnectivityMeasure.rst", "modules/generated/nilearn.connectome.GroupSparseCovariance.rst", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV.rst", "modules/generated/nilearn.connectome.cov_to_corr.rst", "modules/generated/nilearn.connectome.group_sparse_covariance.rst", "modules/generated/nilearn.connectome.prec_to_partial.rst", "modules/generated/nilearn.connectome.sym_matrix_to_vec.rst", "modules/generated/nilearn.connectome.vec_to_sym_matrix.rst", "modules/generated/nilearn.datasets.fetch_abide_pcp.rst", "modules/generated/nilearn.datasets.fetch_adhd.rst", "modules/generated/nilearn.datasets.fetch_atlas_aal.rst", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011.rst", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015.rst", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012.rst", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_difumo.rst", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford.rst", "modules/generated/nilearn.datasets.fetch_atlas_juelich.rst", "modules/generated/nilearn.datasets.fetch_atlas_msdl.rst", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017.rst", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018.rst", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux.rst", "modules/generated/nilearn.datasets.fetch_atlas_talairach.rst", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011.rst", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset.rst", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010.rst", "modules/generated/nilearn.datasets.fetch_coords_power_2011.rst", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018.rst", "modules/generated/nilearn.datasets.fetch_development_fmri.rst", "modules/generated/nilearn.datasets.fetch_ds000030_urls.rst", "modules/generated/nilearn.datasets.fetch_fiac_first_level.rst", "modules/generated/nilearn.datasets.fetch_haxby.rst", "modules/generated/nilearn.datasets.fetch_icbm152_2009.rst", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask.rst", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset.rst", "modules/generated/nilearn.datasets.fetch_localizer_button_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_contrasts.rst", "modules/generated/nilearn.datasets.fetch_localizer_first_level.rst", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats.rst", "modules/generated/nilearn.datasets.fetch_mixed_gambles.rst", "modules/generated/nilearn.datasets.fetch_miyawaki2008.rst", "modules/generated/nilearn.datasets.fetch_neurovault.rst", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task.rst", "modules/generated/nilearn.datasets.fetch_neurovault_ids.rst", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task.rst", "modules/generated/nilearn.datasets.fetch_oasis_vbm.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset_index.rst", "modules/generated/nilearn.datasets.fetch_spm_auditory.rst", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri.rst", "modules/generated/nilearn.datasets.fetch_surf_fsaverage.rst", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced.rst", "modules/generated/nilearn.datasets.get_data_dirs.rst", "modules/generated/nilearn.datasets.load_mni152_brain_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_template.rst", "modules/generated/nilearn.datasets.load_mni152_template.rst", "modules/generated/nilearn.datasets.load_mni152_wm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_wm_template.rst", "modules/generated/nilearn.datasets.load_sample_motor_activation_image.rst", "modules/generated/nilearn.datasets.patch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.select_from_index.rst", "modules/generated/nilearn.decoding.Decoder.rst", "modules/generated/nilearn.decoding.DecoderRegressor.rst", "modules/generated/nilearn.decoding.FREMClassifier.rst", "modules/generated/nilearn.decoding.FREMRegressor.rst", "modules/generated/nilearn.decoding.SearchLight.rst", "modules/generated/nilearn.decoding.SpaceNetClassifier.rst", "modules/generated/nilearn.decoding.SpaceNetRegressor.rst", "modules/generated/nilearn.decomposition.CanICA.rst", "modules/generated/nilearn.decomposition.DictLearning.rst", "modules/generated/nilearn.experimental.surface.FileMesh.rst", "modules/generated/nilearn.experimental.surface.InMemoryMesh.rst", "modules/generated/nilearn.experimental.surface.Mesh.rst", "modules/generated/nilearn.experimental.surface.PolyMesh.rst", "modules/generated/nilearn.experimental.surface.SurfaceImage.rst", "modules/generated/nilearn.experimental.surface.SurfaceLabelsMasker.rst", "modules/generated/nilearn.experimental.surface.SurfaceMasker.rst", "modules/generated/nilearn.experimental.surface.fetch_destrieux.rst", "modules/generated/nilearn.experimental.surface.fetch_nki.rst", "modules/generated/nilearn.experimental.surface.load_fsaverage.rst", "modules/generated/nilearn.glm.ARModel.rst", "modules/generated/nilearn.glm.Contrast.rst", "modules/generated/nilearn.glm.FContrastResults.rst", "modules/generated/nilearn.glm.LikelihoodModelResults.rst", "modules/generated/nilearn.glm.OLSModel.rst", "modules/generated/nilearn.glm.RegressionResults.rst", "modules/generated/nilearn.glm.SimpleRegressionResults.rst", "modules/generated/nilearn.glm.TContrastResults.rst", "modules/generated/nilearn.glm.cluster_level_inference.rst", "modules/generated/nilearn.glm.compute_contrast.rst", "modules/generated/nilearn.glm.compute_fixed_effects.rst", "modules/generated/nilearn.glm.expression_to_contrast_vector.rst", "modules/generated/nilearn.glm.fdr_threshold.rst", "modules/generated/nilearn.glm.first_level.FirstLevelModel.rst", "modules/generated/nilearn.glm.first_level.check_design_matrix.rst", "modules/generated/nilearn.glm.first_level.compute_regressor.rst", "modules/generated/nilearn.glm.first_level.first_level_from_bids.rst", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.glover_hrf.rst", "modules/generated/nilearn.glm.first_level.glover_time_derivative.rst", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix.rst", "modules/generated/nilearn.glm.first_level.mean_scaling.rst", "modules/generated/nilearn.glm.first_level.run_glm.rst", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.spm_hrf.rst", "modules/generated/nilearn.glm.first_level.spm_time_derivative.rst", "modules/generated/nilearn.glm.second_level.SecondLevelModel.rst", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix.rst", "modules/generated/nilearn.glm.second_level.non_parametric_inference.rst", "modules/generated/nilearn.glm.threshold_stats_img.rst", "modules/generated/nilearn.image.binarize_img.rst", "modules/generated/nilearn.image.clean_img.rst", "modules/generated/nilearn.image.concat_imgs.rst", "modules/generated/nilearn.image.coord_transform.rst", "modules/generated/nilearn.image.copy_img.rst", "modules/generated/nilearn.image.crop_img.rst", "modules/generated/nilearn.image.get_data.rst", "modules/generated/nilearn.image.high_variance_confounds.rst", "modules/generated/nilearn.image.index_img.rst", "modules/generated/nilearn.image.iter_img.rst", "modules/generated/nilearn.image.largest_connected_component_img.rst", "modules/generated/nilearn.image.load_img.rst", "modules/generated/nilearn.image.math_img.rst", "modules/generated/nilearn.image.mean_img.rst", "modules/generated/nilearn.image.new_img_like.rst", "modules/generated/nilearn.image.reorder_img.rst", "modules/generated/nilearn.image.resample_img.rst", "modules/generated/nilearn.image.resample_to_img.rst", "modules/generated/nilearn.image.smooth_img.rst", "modules/generated/nilearn.image.swap_img_hemispheres.rst", "modules/generated/nilearn.image.threshold_img.rst", "modules/generated/nilearn.interfaces.bids.get_bids_files.rst", "modules/generated/nilearn.interfaces.bids.parse_bids_filename.rst", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy.rst", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat.rst", "modules/generated/nilearn.maskers.BaseMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.NiftiMapsMasker.rst", "modules/generated/nilearn.maskers.NiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiSpheresMasker.rst", "modules/generated/nilearn.masking.apply_mask.rst", "modules/generated/nilearn.masking.compute_background_mask.rst", "modules/generated/nilearn.masking.compute_brain_mask.rst", "modules/generated/nilearn.masking.compute_epi_mask.rst", "modules/generated/nilearn.masking.compute_multi_background_mask.rst", "modules/generated/nilearn.masking.compute_multi_brain_mask.rst", "modules/generated/nilearn.masking.compute_multi_epi_mask.rst", "modules/generated/nilearn.masking.intersect_masks.rst", "modules/generated/nilearn.masking.unmask.rst", "modules/generated/nilearn.mass_univariate.permuted_ols.rst", "modules/generated/nilearn.plotting.displays.BaseAxes.rst", "modules/generated/nilearn.plotting.displays.BaseSlicer.rst", "modules/generated/nilearn.plotting.displays.CutAxes.rst", "modules/generated/nilearn.plotting.displays.GlassBrainAxes.rst", "modules/generated/nilearn.plotting.displays.LProjector.rst", "modules/generated/nilearn.plotting.displays.LRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRZProjector.rst", "modules/generated/nilearn.plotting.displays.LZRProjector.rst", "modules/generated/nilearn.plotting.displays.LZRYProjector.rst", "modules/generated/nilearn.plotting.displays.MosaicSlicer.rst", "modules/generated/nilearn.plotting.displays.OrthoProjector.rst", "modules/generated/nilearn.plotting.displays.OrthoSlicer.rst", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure.rst", "modules/generated/nilearn.plotting.displays.RProjector.rst", "modules/generated/nilearn.plotting.displays.TiledSlicer.rst", "modules/generated/nilearn.plotting.displays.XProjector.rst", "modules/generated/nilearn.plotting.displays.XSlicer.rst", "modules/generated/nilearn.plotting.displays.XZProjector.rst", "modules/generated/nilearn.plotting.displays.XZSlicer.rst", "modules/generated/nilearn.plotting.displays.YProjector.rst", "modules/generated/nilearn.plotting.displays.YSlicer.rst", "modules/generated/nilearn.plotting.displays.YXProjector.rst", "modules/generated/nilearn.plotting.displays.YXSlicer.rst", "modules/generated/nilearn.plotting.displays.YZProjector.rst", "modules/generated/nilearn.plotting.displays.YZSlicer.rst", "modules/generated/nilearn.plotting.displays.ZProjector.rst", "modules/generated/nilearn.plotting.displays.ZSlicer.rst", "modules/generated/nilearn.plotting.displays.get_projector.rst", "modules/generated/nilearn.plotting.displays.get_slicer.rst", "modules/generated/nilearn.plotting.find_cut_slices.rst", "modules/generated/nilearn.plotting.find_parcellation_cut_coords.rst", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords.rst", "modules/generated/nilearn.plotting.find_xyz_cut_coords.rst", "modules/generated/nilearn.plotting.plot_anat.rst", "modules/generated/nilearn.plotting.plot_carpet.rst", "modules/generated/nilearn.plotting.plot_connectome.rst", "modules/generated/nilearn.plotting.plot_contrast_matrix.rst", "modules/generated/nilearn.plotting.plot_design_matrix.rst", "modules/generated/nilearn.plotting.plot_epi.rst", "modules/generated/nilearn.plotting.plot_event.rst", "modules/generated/nilearn.plotting.plot_glass_brain.rst", "modules/generated/nilearn.plotting.plot_img.rst", "modules/generated/nilearn.plotting.plot_img_comparison.rst", "modules/generated/nilearn.plotting.plot_img_on_surf.rst", "modules/generated/nilearn.plotting.plot_markers.rst", "modules/generated/nilearn.plotting.plot_matrix.rst", "modules/generated/nilearn.plotting.plot_prob_atlas.rst", "modules/generated/nilearn.plotting.plot_roi.rst", "modules/generated/nilearn.plotting.plot_stat_map.rst", "modules/generated/nilearn.plotting.plot_surf.rst", "modules/generated/nilearn.plotting.plot_surf_contours.rst", "modules/generated/nilearn.plotting.plot_surf_roi.rst", "modules/generated/nilearn.plotting.plot_surf_stat_map.rst", "modules/generated/nilearn.plotting.show.rst", "modules/generated/nilearn.plotting.view_connectome.rst", "modules/generated/nilearn.plotting.view_img.rst", "modules/generated/nilearn.plotting.view_img_on_surf.rst", "modules/generated/nilearn.plotting.view_markers.rst", "modules/generated/nilearn.plotting.view_surf.rst", "modules/generated/nilearn.regions.HierarchicalKMeans.rst", "modules/generated/nilearn.regions.Parcellations.rst", "modules/generated/nilearn.regions.ReNA.rst", "modules/generated/nilearn.regions.RegionExtractor.rst", "modules/generated/nilearn.regions.connected_label_regions.rst", "modules/generated/nilearn.regions.connected_regions.rst", "modules/generated/nilearn.regions.img_to_signals_labels.rst", "modules/generated/nilearn.regions.img_to_signals_maps.rst", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration.rst", "modules/generated/nilearn.regions.signals_to_img_labels.rst", "modules/generated/nilearn.regions.signals_to_img_maps.rst", "modules/generated/nilearn.reporting.HTMLReport.rst", "modules/generated/nilearn.reporting.get_clusters_table.rst", "modules/generated/nilearn.reporting.make_glm_report.rst", "modules/generated/nilearn.signal.butterworth.rst", "modules/generated/nilearn.signal.clean.rst", "modules/generated/nilearn.signal.high_variance_confounds.rst", "modules/generated/nilearn.surface.load_surf_data.rst", "modules/generated/nilearn.surface.load_surf_mesh.rst", "modules/generated/nilearn.surface.vol_to_surf.rst", "modules/glm.rst", "modules/image.rst", "modules/index.rst", "modules/interfaces.rst", "modules/maskers.rst", "modules/masking.rst", "modules/mass_univariate.rst", "modules/plotting.rst", "modules/regions.rst", "modules/reporting.rst", "modules/signal.rst", "modules/surface.rst", "plotting/index.rst", "quickstart.md", "user_guide.rst"], "titles": ["Team", "Basic tutorials", "3D and 4D niimgs: handling and visualizing", "A introduction tutorial to fMRI decoding", "Basic nilearn example: manipulating and looking at data", "Basic numerics and plotting with Python", "Intro to GLM Analysis: a single-session, single-subject fMRI dataset", "Computation times", "Visualization of brain images", "Making a surface plot of a 3D statistical map", "Basic Atlas plotting", "Visualizing global patterns with a carpet plot", "Matplotlib colormaps in Nilearn", "Glass brain plotting in nilearn", "Glass brain plotting in nilearn (all options)", "More plotting tools from nilearn", "Plotting tools in nilearn", "Controlling the contrast of the background when plotting", "Plot Haxby masks", "Visualizing multiscale functional brain parcellations", "Visualizing a probabilistic atlas: the default mode in the MSDL atlas", "Visualizing 4D probabilistic atlas maps", "Loading and plotting of a cortical surface atlas", "Seed-based connectivity on the surface", "Technical point: Illustration of the volume to surface sampling schemes", "NeuroImaging volumes visualization", "Visualizing Megatrawls Network Matrices from Human Connectome Project", "Computation times", "Decoding and predicting from brain images", "Decoding with ANOVA + SVM: face vs house in the Haxby dataset", "Different classifiers in decoding the Haxby dataset", "Decoding with FREM: face vs house vs chair object recognition", "ROI-based decoding analysis in Haxby et al. dataset", "Decoding of a dataset after GLM fit for signal extraction", "Setting a parameter by cross-validation", "The haxby dataset: different multi-class strategies", "Searchlight analysis of face vs house recognition", "Cortical surface-based searchlight decoding", "Show stimuli of Haxby et al. dataset", "FREM on Jimura et al \u201cmixed gambles\u201d dataset", "Encoding models for visual stimuli from Miyawaki et al. 2008", "Reconstruction of visual stimuli from Miyawaki et al. 2008", "Voxel-Based Morphometry on Oasis dataset", "Voxel-Based Morphometry on Oasis dataset with Space-Net prior", "Example of pattern recognition on simulated data", "Computation times", "Functional connectivity", "Comparing connectomes on different reference atlases", "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning", "Clustering methods to learn a brain parcellation from fMRI", "Regions extraction using dictionary learning and functional connectomes", "Classification of age groups using functional connectivity", "Computing a connectome with sparse inverse covariance", "Group Sparse inverse covariance for multi-subject connectome", "Extracting signals of a probabilistic atlas of functional regions", "Producing single subject maps of seed-to-voxel correlation", "Extracting signals from a brain parcellation", "Connectivity structure estimation on simulated data", "Extract signals on spheres and plot a connectome", "Computation times", "GLM: First level analysis", "Default Mode Network extraction of ADHD dataset", "First level analysis of a complete BIDS dataset from openneuro", "Examples of design matrices", "Simple example of two-session fMRI model fitting", "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model", "Understanding parameters of the first-level model", "Example of explicit fixed effects fMRI model fitting", "Example of MRI response functions", "Example of surface-based first-level analysis", "Predicted time series and residuals", "Single-subject data (two sessions) in native space", "Generate an events.tsv file for the NeuroSpin localizer task", "Computation times", "GLM: Second level analysis", "Voxel-Based Morphometry on OASIS dataset", "Second-level fMRI model: true positive proportion in clusters", "Example of generic design in second-level models", "Example of second level design matrix", "Second-level fMRI model: one sample test", "Second-level fMRI model: two-sample test, unpaired and paired", "Statistical testing of a second-level analysis", "Computation times", "Manipulating brain image volumes", "Visualization of affine resamplings", "Comparing the means of 2 images", "Breaking an atlas of labels in separated regions", "Regions Extraction of Default Mode Networks using Smith Atlas", "Region Extraction using a t-statistical map (3D)", "Understanding NiftiMasker and mask computation", "Negating an image with math_img", "Extracting signals from brain regions using the NiftiLabelsMasker", "Simple example of NiftiMasker use", "Resample an image to a template", "Computing a Region of Interest (ROI) mask manually", "Smoothing an image", "Computation times", "Advanced statistical analysis of brain images", "Advanced decoding using scikit learn", "Functional connectivity predicts age group", "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding", "BIDS dataset first and second level analysis", "Massively univariate analysis of face vs house recognition", "NeuroVault cross-study ICA maps", "Multivariate decompositions: Independent component analysis of fMRI", "Massively univariate analysis of a motor task from the Localizer dataset", "Massively univariate analysis of a calculation task from the Localizer dataset", "NeuroVault meta-analysis of stop-go paradigm studies", "Surface-based dataset first and second level analysis of a dataset", "Computation times", "Examples for experimental modules", "A short demo of the surface images &amp; maskers", "Computation times", "Examples", "General bibliography", "<span class=\"section-number\">10. </span>Advanced usage: manual pipelines and scaling up", "<span class=\"section-number\">10.1. </span>Building your own neuroimaging machine-learning pipeline", "<span class=\"section-number\">10.2. </span>Downloading statistical maps from the Neurovault repository", "0.1.0", "0.1.1", "0.1.2", "0.1.3", "0.1.4", "0.10.0", "0.10.1", "0.10.2", "0.2.0", "0.2.1", "0.2.2", "0.2.3", "0.2.4", "0.2.5.1", "0.2.6", "0.3.0", "0.3.1", "0.4.0", "0.4.1", "0.4.2", "0.5.0", "0.5.1", "0.5.2", "0.6.0", "0.6.1", "0.6.2", "0.7.0", "0.7.1", "0.8.0", "0.8.1", "0.9.0", "0.9.1", "0.9.2", "0.11.0.dev", "&lt;no title&gt;", "What\u2019s new", "<span class=\"section-number\">6.2. </span>Connectome extraction: inverse covariance for direct connections", "<span class=\"section-number\">6.1. </span>Extracting times series to build a functional connectome", "<span class=\"section-number\">6. </span>Functional connectivity and resting state", "<span class=\"section-number\">6.5. </span>Clustering to parcellate the brain in regions", "<span class=\"section-number\">6.4. </span>Region Extraction for better brain parcellations", "<span class=\"section-number\">6.3. </span>Extracting functional brain networks: ICA and related", "<span class=\"section-number\">5.1. </span>An introduction to decoding", "<span class=\"section-number\">5.2. </span>Choosing the right predictive model for neuroimaging", "<span class=\"section-number\">5.3. </span>FREM: fast ensembling of regularized models for robust decoding", "<span class=\"section-number\">5.6. </span>Running scikit-learn functions for more control on the analysis", "<span class=\"section-number\">5. </span>Decoding and MVPA: predicting from brain images", "<span class=\"section-number\">5.5. </span>Searchlight : finding voxels containing information", "<span class=\"section-number\">5.4. </span>SpaceNet: decoding with spatial structure for better maps", "<span class=\"section-number\">6.2.3.1. </span>Group-sparse covariance estimation", "Contributing", "<span class=\"section-number\">8.2. </span>First level models", "<span class=\"section-number\">8.1. </span>An introduction to GLMs in fMRI statistical analysis", "<span class=\"section-number\">8. </span>Analyzing fMRI using GLMs", "<span class=\"section-number\">8.3. </span>Second level models", "Glossary", "Nilearn", "<span class=\"section-number\">1. </span>Introduction", "Maintenance", "<span class=\"section-number\">9. </span>Manipulation brain volumes with nilearn", "<span class=\"section-number\">9.1. </span>Input and output: neuroimaging data representation", "<span class=\"section-number\">9.2. </span>Manipulating images: resampling, smoothing, masking, ROIs\u2026", "<span class=\"section-number\">9.3. </span>From neuroimaging volumes to data matrices: the masker objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.connectome</span></code>: Functional Connectivity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.datasets</span></code>: Automatic Dataset Fetching", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decoding</span></code>: Decoding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decomposition</span></code>: Multivariate Decompositions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.experimental</span></code>: Experimental Modules", "nilearn.connectome.ConnectivityMeasure", "nilearn.connectome.GroupSparseCovariance", "nilearn.connectome.GroupSparseCovarianceCV", "nilearn.connectome.cov_to_corr", "nilearn.connectome.group_sparse_covariance", "nilearn.connectome.prec_to_partial", "nilearn.connectome.sym_matrix_to_vec", "nilearn.connectome.vec_to_sym_matrix", "nilearn.datasets.fetch_abide_pcp", "nilearn.datasets.fetch_adhd", "nilearn.datasets.fetch_atlas_aal", "nilearn.datasets.fetch_atlas_allen_2011", "nilearn.datasets.fetch_atlas_basc_multiscale_2015", "nilearn.datasets.fetch_atlas_craddock_2012", "nilearn.datasets.fetch_atlas_destrieux_2009", "nilearn.datasets.fetch_atlas_difumo", "nilearn.datasets.fetch_atlas_harvard_oxford", "nilearn.datasets.fetch_atlas_juelich", "nilearn.datasets.fetch_atlas_msdl", "nilearn.datasets.fetch_atlas_pauli_2017", "nilearn.datasets.fetch_atlas_schaefer_2018", "nilearn.datasets.fetch_atlas_smith_2009", "nilearn.datasets.fetch_atlas_surf_destrieux", "nilearn.datasets.fetch_atlas_talairach", "nilearn.datasets.fetch_atlas_yeo_2011", "nilearn.datasets.fetch_bids_langloc_dataset", "nilearn.datasets.fetch_coords_dosenbach_2010", "nilearn.datasets.fetch_coords_power_2011", "nilearn.datasets.fetch_coords_seitzman_2018", "nilearn.datasets.fetch_development_fmri", "nilearn.datasets.fetch_ds000030_urls", "nilearn.datasets.fetch_fiac_first_level", "nilearn.datasets.fetch_haxby", "nilearn.datasets.fetch_icbm152_2009", "nilearn.datasets.fetch_icbm152_brain_gm_mask", "nilearn.datasets.fetch_language_localizer_demo_dataset", "nilearn.datasets.fetch_localizer_button_task", "nilearn.datasets.fetch_localizer_calculation_task", "nilearn.datasets.fetch_localizer_contrasts", "nilearn.datasets.fetch_localizer_first_level", "nilearn.datasets.fetch_megatrawls_netmats", "nilearn.datasets.fetch_mixed_gambles", "nilearn.datasets.fetch_miyawaki2008", "nilearn.datasets.fetch_neurovault", "nilearn.datasets.fetch_neurovault_auditory_computation_task", "nilearn.datasets.fetch_neurovault_ids", "nilearn.datasets.fetch_neurovault_motor_task", "nilearn.datasets.fetch_oasis_vbm", "nilearn.datasets.fetch_openneuro_dataset", "nilearn.datasets.fetch_openneuro_dataset_index", "nilearn.datasets.fetch_spm_auditory", "nilearn.datasets.fetch_spm_multimodal_fmri", "nilearn.datasets.fetch_surf_fsaverage", "nilearn.datasets.fetch_surf_nki_enhanced", "nilearn.datasets.get_data_dirs", "nilearn.datasets.load_mni152_brain_mask", "nilearn.datasets.load_mni152_gm_mask", "nilearn.datasets.load_mni152_gm_template", "nilearn.datasets.load_mni152_template", "nilearn.datasets.load_mni152_wm_mask", "nilearn.datasets.load_mni152_wm_template", "nilearn.datasets.load_sample_motor_activation_image", "nilearn.datasets.patch_openneuro_dataset", "nilearn.datasets.select_from_index", "nilearn.decoding.Decoder", "nilearn.decoding.DecoderRegressor", "nilearn.decoding.FREMClassifier", "nilearn.decoding.FREMRegressor", "nilearn.decoding.SearchLight", "nilearn.decoding.SpaceNetClassifier", "nilearn.decoding.SpaceNetRegressor", "nilearn.decomposition.CanICA", "nilearn.decomposition.DictLearning", "nilearn.experimental.surface.FileMesh", "nilearn.experimental.surface.InMemoryMesh", "nilearn.experimental.surface.Mesh", "nilearn.experimental.surface.PolyMesh", "nilearn.experimental.surface.SurfaceImage", "nilearn.experimental.surface.SurfaceLabelsMasker", "nilearn.experimental.surface.SurfaceMasker", "nilearn.experimental.surface.fetch_destrieux", "nilearn.experimental.surface.fetch_nki", "nilearn.experimental.surface.load_fsaverage", "nilearn.glm.ARModel", "nilearn.glm.Contrast", "nilearn.glm.FContrastResults", "nilearn.glm.LikelihoodModelResults", "nilearn.glm.OLSModel", "nilearn.glm.RegressionResults", "nilearn.glm.SimpleRegressionResults", "nilearn.glm.TContrastResults", "nilearn.glm.cluster_level_inference", "nilearn.glm.compute_contrast", "nilearn.glm.compute_fixed_effects", "nilearn.glm.expression_to_contrast_vector", "nilearn.glm.fdr_threshold", "nilearn.glm.first_level.FirstLevelModel", "nilearn.glm.first_level.check_design_matrix", "nilearn.glm.first_level.compute_regressor", "nilearn.glm.first_level.first_level_from_bids", "nilearn.glm.first_level.glover_dispersion_derivative", "nilearn.glm.first_level.glover_hrf", "nilearn.glm.first_level.glover_time_derivative", "nilearn.glm.first_level.make_first_level_design_matrix", "nilearn.glm.first_level.mean_scaling", "nilearn.glm.first_level.run_glm", "nilearn.glm.first_level.spm_dispersion_derivative", "nilearn.glm.first_level.spm_hrf", "nilearn.glm.first_level.spm_time_derivative", "nilearn.glm.second_level.SecondLevelModel", "nilearn.glm.second_level.make_second_level_design_matrix", "nilearn.glm.second_level.non_parametric_inference", "nilearn.glm.threshold_stats_img", "nilearn.image.binarize_img", "nilearn.image.clean_img", "nilearn.image.concat_imgs", "nilearn.image.coord_transform", "nilearn.image.copy_img", "nilearn.image.crop_img", "nilearn.image.get_data", "nilearn.image.high_variance_confounds", "nilearn.image.index_img", "nilearn.image.iter_img", "nilearn.image.largest_connected_component_img", "nilearn.image.load_img", "nilearn.image.math_img", "nilearn.image.mean_img", "nilearn.image.new_img_like", "nilearn.image.reorder_img", "nilearn.image.resample_img", "nilearn.image.resample_to_img", "nilearn.image.smooth_img", "nilearn.image.swap_img_hemispheres", "nilearn.image.threshold_img", "nilearn.interfaces.bids.get_bids_files", "nilearn.interfaces.bids.parse_bids_filename", "nilearn.interfaces.bids.save_glm_to_bids", "nilearn.interfaces.fmriprep.load_confounds", "nilearn.interfaces.fmriprep.load_confounds_strategy", "nilearn.interfaces.fsl.get_design_from_fslmat", "nilearn.maskers.BaseMasker", "nilearn.maskers.MultiNiftiLabelsMasker", "nilearn.maskers.MultiNiftiMapsMasker", "nilearn.maskers.MultiNiftiMasker", "nilearn.maskers.NiftiLabelsMasker", "nilearn.maskers.NiftiMapsMasker", "nilearn.maskers.NiftiMasker", "nilearn.maskers.NiftiSpheresMasker", "nilearn.masking.apply_mask", "nilearn.masking.compute_background_mask", "nilearn.masking.compute_brain_mask", "nilearn.masking.compute_epi_mask", "nilearn.masking.compute_multi_background_mask", "nilearn.masking.compute_multi_brain_mask", "nilearn.masking.compute_multi_epi_mask", "nilearn.masking.intersect_masks", "nilearn.masking.unmask", "nilearn.mass_univariate.permuted_ols", "nilearn.plotting.displays.BaseAxes", "nilearn.plotting.displays.BaseSlicer", "nilearn.plotting.displays.CutAxes", "nilearn.plotting.displays.GlassBrainAxes", "nilearn.plotting.displays.LProjector", "nilearn.plotting.displays.LRProjector", "nilearn.plotting.displays.LYRProjector", "nilearn.plotting.displays.LYRZProjector", "nilearn.plotting.displays.LZRProjector", "nilearn.plotting.displays.LZRYProjector", "nilearn.plotting.displays.MosaicSlicer", "nilearn.plotting.displays.OrthoProjector", "nilearn.plotting.displays.OrthoSlicer", "nilearn.plotting.displays.PlotlySurfaceFigure", "nilearn.plotting.displays.RProjector", "nilearn.plotting.displays.TiledSlicer", "nilearn.plotting.displays.XProjector", "nilearn.plotting.displays.XSlicer", "nilearn.plotting.displays.XZProjector", "nilearn.plotting.displays.XZSlicer", "nilearn.plotting.displays.YProjector", "nilearn.plotting.displays.YSlicer", "nilearn.plotting.displays.YXProjector", "nilearn.plotting.displays.YXSlicer", "nilearn.plotting.displays.YZProjector", "nilearn.plotting.displays.YZSlicer", "nilearn.plotting.displays.ZProjector", "nilearn.plotting.displays.ZSlicer", "nilearn.plotting.displays.get_projector", "nilearn.plotting.displays.get_slicer", "nilearn.plotting.find_cut_slices", "nilearn.plotting.find_parcellation_cut_coords", "nilearn.plotting.find_probabilistic_atlas_cut_coords", "nilearn.plotting.find_xyz_cut_coords", "nilearn.plotting.plot_anat", "nilearn.plotting.plot_carpet", "nilearn.plotting.plot_connectome", "nilearn.plotting.plot_contrast_matrix", "nilearn.plotting.plot_design_matrix", "nilearn.plotting.plot_epi", "nilearn.plotting.plot_event", "nilearn.plotting.plot_glass_brain", "nilearn.plotting.plot_img", "nilearn.plotting.plot_img_comparison", "nilearn.plotting.plot_img_on_surf", "nilearn.plotting.plot_markers", "nilearn.plotting.plot_matrix", "nilearn.plotting.plot_prob_atlas", "nilearn.plotting.plot_roi", "nilearn.plotting.plot_stat_map", "nilearn.plotting.plot_surf", "nilearn.plotting.plot_surf_contours", "nilearn.plotting.plot_surf_roi", "nilearn.plotting.plot_surf_stat_map", "nilearn.plotting.show", "nilearn.plotting.view_connectome", "nilearn.plotting.view_img", "nilearn.plotting.view_img_on_surf", "nilearn.plotting.view_markers", "nilearn.plotting.view_surf", "nilearn.regions.HierarchicalKMeans", "nilearn.regions.Parcellations", "nilearn.regions.ReNA", "nilearn.regions.RegionExtractor", "nilearn.regions.connected_label_regions", "nilearn.regions.connected_regions", "nilearn.regions.img_to_signals_labels", "nilearn.regions.img_to_signals_maps", "nilearn.regions.recursive_neighbor_agglomeration", "nilearn.regions.signals_to_img_labels", "nilearn.regions.signals_to_img_maps", "nilearn.reporting.HTMLReport", "nilearn.reporting.get_clusters_table", "nilearn.reporting.make_glm_report", "nilearn.signal.butterworth", "nilearn.signal.clean", "nilearn.signal.high_variance_confounds", "nilearn.surface.load_surf_data", "nilearn.surface.load_surf_mesh", "nilearn.surface.vol_to_surf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.glm</span></code>: Generalized Linear Models", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.image</span></code>: Image Processing and Resampling Utilities", "API References", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.interfaces</span></code>: Loading components from interfaces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.maskers</span></code>: Extracting Signals from Brain Images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.masking</span></code>: Data Masking Utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.mass_univariate</span></code>: Mass-Univariate Analysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.plotting</span></code>: Plotting Brain Data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.regions</span></code>: Operating on Regions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.reporting</span></code>: Reporting Functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.signal</span></code>: Preprocessing Time Series", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.surface</span></code>: Manipulating Surface Data", "<span class=\"section-number\">7. </span>Plotting brain images", "Quickstart", "User guide"], "terms": {"thi": [0, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 115, 116, 117, 124, 125, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 433, 434, 436, 438], "work": [0, 2, 3, 6, 10, 11, 16, 18, 20, 23, 25, 29, 30, 31, 32, 34, 35, 36, 39, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 61, 64, 75, 77, 84, 85, 89, 91, 92, 94, 95, 98, 100, 101, 102, 104, 105, 108, 125, 133, 134, 141, 148, 149, 153, 154, 159, 160, 161, 163, 167, 168, 169, 170, 176, 178, 179, 180, 186, 187, 188, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 322, 326, 327, 328, 329, 330, 331, 332, 333, 374, 380, 385, 404, 405, 406, 407, 416, 425, 427], "i": [0, 2, 4, 6, 9, 10, 11, 14, 15, 16, 18, 20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 111, 114, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 173, 174, 176, 177, 179, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 436, 437, 438], "made": [0, 21, 101, 108, 124, 144, 147, 148, 153, 164, 167, 168, 170, 173, 175, 176, 250, 251, 252, 253, 255, 256, 343, 400, 438], "avail": [0, 3, 15, 23, 24, 31, 39, 42, 62, 75, 80, 89, 94, 101, 106, 108, 117, 124, 141, 146, 153, 155, 158, 161, 163, 167, 169, 172, 175, 176, 194, 198, 201, 207, 215, 224, 226, 228, 233, 255, 256, 390, 395, 423, 437, 438], "commun": [0, 114, 168, 174, 176, 215, 437], "peopl": [0, 6, 135, 138, 139, 140, 141, 142, 143, 153, 167, 168], "which": [0, 3, 6, 9, 12, 14, 15, 21, 22, 23, 25, 29, 30, 32, 33, 34, 36, 37, 40, 42, 44, 47, 49, 51, 58, 61, 66, 68, 69, 70, 75, 76, 79, 84, 89, 91, 94, 98, 100, 108, 116, 117, 122, 123, 124, 126, 131, 132, 135, 136, 137, 138, 139, 141, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 158, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 173, 175, 176, 178, 179, 180, 193, 200, 202, 203, 205, 206, 209, 210, 215, 229, 230, 231, 232, 236, 237, 238, 240, 250, 251, 252, 253, 254, 255, 256, 257, 258, 269, 272, 273, 274, 275, 281, 282, 285, 289, 290, 295, 297, 299, 304, 310, 315, 319, 321, 322, 327, 328, 329, 330, 331, 332, 333, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 396, 397, 400, 405, 407, 408, 409, 415, 417, 423, 436, 437], "origin": [0, 6, 36, 40, 41, 49, 50, 66, 70, 84, 89, 93, 100, 124, 132, 145, 147, 148, 153, 157, 165, 167, 176, 180, 186, 187, 188, 207, 215, 219, 224, 233, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 319, 326, 327, 328, 329, 330, 331, 332, 333, 379, 394, 396, 397, 401, 403, 404, 405, 406, 407, 419], "from": [0, 4, 6, 8, 9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 99, 101, 102, 103, 104, 107, 108, 109, 111, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 128, 131, 134, 135, 138, 139, 141, 146, 147, 148, 150, 153, 154, 156, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 182, 186, 187, 188, 190, 195, 196, 198, 200, 201, 202, 203, 205, 206, 207, 209, 210, 212, 214, 215, 216, 218, 219, 220, 222, 223, 224, 226, 228, 229, 230, 231, 232, 233, 234, 239, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 264, 265, 271, 272, 273, 274, 275, 276, 279, 281, 282, 285, 289, 295, 296, 297, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 378, 379, 381, 383, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 403, 404, 405, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 423, 429, 431, 436, 437, 438], "inria": [0, 114, 166, 204, 407], "mind": [0, 51, 160, 161, 168, 173], "project": [0, 8, 9, 15, 23, 24, 27, 42, 58, 75, 108, 111, 113, 114, 131, 133, 135, 143, 147, 148, 153, 167, 169, 174, 194, 199, 226, 233, 239, 257, 258, 300, 347, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 385, 388, 390, 394, 395, 396, 397, 398, 399, 402, 419, 423, 436], "grew": 0, "much": [0, 3, 24, 40, 42, 51, 77, 79, 99, 100, 138, 153, 160, 167, 168, 170, 175, 212, 304, 315, 423], "further": [0, 14, 15, 55, 66, 70, 84, 94, 115, 154, 162, 164, 167, 176, 178, 182, 229, 282, 295, 323, 357, 428, 429, 436, 438], "an": [0, 2, 3, 4, 11, 14, 15, 16, 20, 21, 22, 23, 25, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 54, 55, 56, 60, 62, 63, 66, 68, 69, 70, 71, 73, 75, 79, 80, 83, 84, 88, 89, 91, 92, 94, 96, 100, 101, 102, 103, 105, 108, 113, 114, 116, 117, 123, 124, 125, 126, 129, 130, 131, 133, 134, 135, 136, 138, 141, 143, 144, 145, 146, 148, 150, 153, 154, 155, 156, 158, 161, 162, 163, 164, 165, 166, 167, 169, 171, 172, 173, 175, 176, 178, 179, 180, 186, 187, 188, 192, 196, 199, 200, 204, 210, 215, 224, 225, 227, 229, 231, 233, 234, 244, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 269, 271, 272, 273, 274, 275, 278, 282, 289, 291, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 309, 310, 311, 312, 314, 315, 316, 317, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 415, 417, 419, 420, 421, 423, 425, 438], "up": [0, 3, 6, 33, 36, 47, 84, 86, 89, 94, 98, 103, 114, 123, 125, 138, 139, 141, 146, 148, 153, 157, 163, 164, 166, 167, 169, 170, 171, 173, 180, 234, 269, 272, 296, 343, 379, 404, 423, 438], "date": [0, 147, 153, 197, 200, 219, 229, 231], "list": [0, 2, 3, 6, 9, 14, 15, 16, 21, 30, 33, 44, 47, 48, 49, 51, 53, 55, 61, 62, 64, 67, 71, 72, 75, 76, 79, 80, 85, 94, 99, 100, 101, 103, 108, 111, 116, 117, 123, 125, 126, 129, 131, 132, 133, 137, 138, 141, 147, 148, 150, 151, 153, 154, 160, 168, 175, 176, 178, 179, 180, 186, 187, 188, 190, 192, 193, 194, 196, 197, 200, 202, 203, 204, 205, 206, 208, 209, 211, 212, 215, 216, 218, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 264, 277, 279, 280, 282, 284, 285, 289, 295, 296, 297, 298, 300, 301, 309, 310, 312, 315, 317, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 381, 384, 387, 388, 390, 391, 394, 395, 396, 397, 402, 403, 405, 407, 408, 409, 410, 411, 416, 417, 419, 421, 422, 423, 437], "can": [0, 2, 3, 4, 6, 9, 11, 12, 14, 15, 20, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 61, 62, 64, 65, 66, 68, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 86, 88, 89, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 114, 115, 116, 117, 123, 124, 126, 129, 131, 133, 138, 139, 141, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 178, 179, 180, 187, 188, 190, 193, 194, 197, 200, 201, 202, 203, 204, 205, 206, 210, 224, 226, 229, 233, 250, 251, 252, 253, 254, 255, 256, 272, 274, 275, 282, 284, 285, 289, 295, 297, 300, 301, 302, 307, 310, 311, 312, 315, 316, 319, 320, 323, 324, 329, 332, 335, 336, 337, 338, 339, 340, 342, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 381, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 405, 407, 408, 409, 415, 416, 417, 418, 419, 423, 436, 437, 438], "seen": [0, 3, 14, 41, 49, 116, 155, 157, 161, 163, 165, 170, 175, 176, 405, 436], "github": [0, 23, 33, 36, 49, 52, 53, 58, 62, 75, 77, 111, 146, 150, 153, 168, 175, 176, 194, 206, 219, 324, 401, 436, 437], "addit": [0, 14, 15, 55, 63, 66, 69, 70, 79, 86, 89, 101, 116, 117, 119, 124, 133, 138, 144, 153, 160, 163, 167, 169, 173, 175, 176, 196, 218, 228, 250, 251, 252, 253, 257, 258, 270, 282, 289, 295, 297, 320, 323, 324, 326, 329, 332, 404, 405, 406, 415, 436], "credit": 0, "goe": [0, 14, 40, 86, 94, 100, 167, 187, 190], "michael": [0, 114, 118, 122, 126, 138, 153, 166, 197, 205, 239, 324], "hank": [0, 122, 126, 153], "yaroslav": [0, 135, 138, 153], "halchenko": [0, 135, 138, 153], "data": [0, 1, 2, 7, 18, 24, 26, 28, 31, 34, 36, 43, 45, 46, 50, 51, 53, 58, 59, 60, 63, 65, 68, 70, 73, 76, 77, 78, 79, 80, 81, 84, 86, 90, 91, 92, 95, 99, 101, 102, 104, 105, 106, 108, 111, 113, 114, 115, 117, 123, 124, 125, 128, 131, 132, 133, 134, 135, 136, 138, 139, 141, 144, 145, 146, 148, 149, 150, 153, 155, 156, 158, 161, 162, 164, 166, 167, 168, 169, 171, 172, 173, 174, 175, 177, 186, 187, 188, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 250, 251, 252, 253, 254, 255, 256, 257, 258, 263, 264, 265, 267, 269, 272, 273, 282, 289, 290, 291, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 378, 379, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 417, 419, 421, 423, 424, 425, 427, 436, 438], "packag": [0, 3, 4, 9, 10, 11, 14, 16, 18, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 71, 72, 77, 78, 79, 84, 86, 91, 92, 94, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111, 121, 122, 123, 124, 138, 141, 146, 148, 153, 168, 170, 175, 176, 178, 202, 203, 436], "The": [0, 2, 3, 11, 14, 15, 17, 18, 19, 20, 21, 22, 23, 28, 29, 30, 32, 33, 34, 36, 40, 41, 42, 43, 45, 47, 48, 49, 51, 52, 54, 55, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 75, 76, 77, 79, 80, 81, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 106, 108, 111, 113, 114, 116, 117, 119, 120, 121, 123, 124, 126, 128, 129, 130, 131, 132, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 205, 206, 207, 209, 210, 215, 216, 218, 219, 220, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 238, 239, 250, 251, 252, 253, 254, 255, 256, 257, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 284, 285, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 302, 306, 310, 311, 312, 313, 314, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 423, 427, 428, 432, 436, 437, 438], "ar": [0, 2, 3, 4, 6, 9, 10, 14, 19, 20, 21, 23, 24, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 86, 87, 89, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 116, 117, 121, 123, 124, 125, 131, 133, 134, 136, 138, 139, 141, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 178, 179, 180, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 269, 272, 273, 274, 275, 278, 279, 282, 284, 285, 289, 291, 295, 297, 299, 300, 304, 306, 312, 314, 315, 316, 317, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 413, 414, 415, 416, 417, 419, 421, 422, 423, 431, 436, 437], "alexi": [0, 114, 123, 124, 138, 141, 146, 148, 150, 153, 239], "thual": [0, 123, 124, 146, 148, 150, 153], "bertrand": [0, 49, 114, 118, 121, 125, 126, 131, 135, 138, 139, 141, 148, 149, 153, 162, 166, 186, 187, 201, 204, 224, 252, 253, 257, 258, 406, 407, 412], "thirion": [0, 49, 72, 114, 118, 121, 125, 126, 131, 135, 138, 139, 141, 148, 149, 153, 157, 162, 166, 186, 187, 201, 204, 224, 252, 253, 257, 258, 406, 407, 412], "elizabeth": [0, 114, 135, 139, 141, 142, 143, 153, 274, 275], "dupr": [0, 135, 139, 141, 142, 143, 153], "hao": [0, 123, 124, 125, 145, 146, 148, 150, 153], "ting": [0, 123, 124, 125, 145, 146, 148, 150, 153], "wang": [0, 114, 123, 124, 125, 145, 146, 148, 150, 151, 153, 233], "jerom": [0, 125, 131, 135, 137, 138, 139, 141, 142, 150, 153], "dock": [0, 125, 131, 135, 137, 138, 139, 141, 142, 150, 153], "nicola": [0, 114, 145, 146, 147, 148, 149, 150, 153, 207, 226], "gensollen": [0, 145, 146, 147, 148, 149, 150, 153], "r\u00e9mi": [0, 124, 125, 135, 151, 153], "gau": [0, 124, 125, 151, 153], "taylor": [0, 114, 123, 124, 125, 145, 148, 149, 150, 153, 166], "salo": [0, 123, 124, 125, 145, 148, 149, 150, 153], "yasmin": [0, 123, 124, 125, 150, 151, 153, 175], "mzayek": [0, 123, 124, 125, 150, 151, 153], "some": [0, 3, 6, 14, 15, 30, 40, 41, 43, 48, 49, 56, 66, 68, 69, 71, 80, 84, 86, 92, 98, 103, 104, 111, 116, 117, 125, 131, 138, 144, 147, 148, 150, 153, 160, 161, 163, 165, 167, 168, 170, 172, 175, 176, 178, 179, 180, 186, 187, 188, 194, 200, 202, 203, 205, 206, 209, 229, 250, 251, 252, 253, 254, 255, 256, 257, 258, 272, 282, 295, 298, 300, 322, 326, 327, 328, 329, 330, 331, 332, 333, 385, 386, 389, 392, 393, 400, 404, 405, 406, 407, 410, 416, 419, 436, 437], "past": [0, 56, 116, 155, 324], "present": [0, 3, 6, 40, 41, 54, 56, 65, 69, 70, 101, 108, 116, 124, 134, 153, 158, 159, 160, 167, 169, 170, 171, 176, 178, 180, 190, 200, 218, 250, 251, 252, 253, 257, 258, 310, 323, 324, 328, 329, 330, 331, 332, 404, 405, 406, 410], "ahmad": [0, 123, 124, 125, 147, 148, 150, 153], "chamma": [0, 123, 124, 125, 147, 148, 150, 153], "saclai": [0, 168], "franc": [0, 168], "aina": [0, 126, 153], "frau": [0, 126, 153], "pascual": [0, 126, 153], "alex": [0, 56, 114, 135, 138, 153, 165, 219, 324], "rothberg": [0, 135, 138, 153], "free": [0, 114, 161, 168, 170, 173, 297, 343], "agenc": 0, "new": [0, 2, 3, 10, 11, 20, 36, 49, 66, 72, 79, 84, 86, 94, 98, 102, 107, 111, 114, 116, 122, 132, 133, 134, 135, 136, 149, 160, 161, 162, 163, 168, 173, 175, 176, 179, 180, 186, 187, 188, 192, 193, 198, 201, 203, 206, 208, 209, 214, 215, 216, 220, 229, 231, 239, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 274, 275, 282, 291, 295, 297, 299, 300, 309, 310, 311, 312, 313, 314, 315, 316, 319, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 343, 378, 379, 380, 381, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 404, 405, 406, 407, 408, 409, 415, 416, 419, 423, 436, 437], "york": [0, 114, 274, 275], "usa": 0, "alexandr": [0, 49, 114, 118, 119, 121, 122, 125, 126, 128, 131, 138, 140, 141, 153, 166, 187, 204, 407], "abadi": [0, 126, 128, 131, 138, 153], "pari": [0, 168], "abraham": [0, 114, 118, 119, 121, 122, 126, 128, 131, 141, 153, 158, 323, 324, 407], "bazemont": 0, "\u00eele": 0, "de": [0, 114, 138, 141, 153, 274, 275, 290], "gramfort": [0, 49, 114, 118, 121, 140, 141, 153, 166, 187, 204], "meta": [0, 3, 14, 97, 100, 103, 109, 113, 117, 186, 187, 188, 231, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 305, 310, 311, 313, 326, 327, 328, 329, 330, 331, 332, 333, 385, 393, 398, 404, 405, 406, 407], "savio": [0, 118, 153], "cionca": [0, 125, 153], "centr": 0, "hospitali": 0, "universitair": 0, "vaudois": 0, "lausann": 0, "switzerland": 0, "alisha": [0, 125, 153], "kodibagkar": [0, 125, 153], "mit": [0, 114, 206, 207, 233], "mcgovern": 0, "institut": [0, 170, 173, 196], "cambridg": 0, "massachusett": 0, "unit": [0, 6, 15, 55, 57, 114, 158, 160, 166, 167, 168, 180, 254, 274, 275, 297, 300, 327, 328, 329, 330, 331, 332, 333, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 419], "state": [0, 2, 23, 30, 32, 48, 49, 50, 54, 56, 66, 85, 87, 89, 92, 100, 114, 125, 133, 144, 146, 153, 154, 155, 157, 158, 159, 161, 166, 170, 173, 175, 176, 195, 197, 198, 226, 239, 250, 251, 252, 253, 254, 257, 258, 282, 291, 297, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 405, 407, 419, 438], "amadeu": [0, 47, 131, 153], "kanaan": [0, 47, 131, 153], "ana": [0, 141, 145, 147, 153], "luisa": [0, 141, 145, 147, 153], "pinho": [0, 141, 145, 147, 153], "western": 0, "univers": [0, 173, 175], "london": [0, 114, 173, 216, 234], "ontario": 0, "canada": 0, "andr\u00e9": [0, 114, 141, 153, 162, 200, 252, 253], "hoyo": [0, 49, 114, 141, 153, 162, 252, 253, 406, 412], "idrobo": [0, 49, 114, 141, 153, 162, 252, 253, 406, 412], "rakuten": 0, "ann": [0, 114, 124, 153, 212, 213], "sophi": [0, 124, 153], "kiesling": [0, 124, 153], "max": [0, 11, 30, 34, 42, 44, 49, 53, 55, 57, 58, 70, 80, 84, 88, 102, 103, 105, 111, 114, 146, 153, 167, 186, 315, 316, 343, 347, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 378, 379, 383, 385, 386, 388, 391, 392, 393, 394, 396, 397, 400, 401, 403], "planck": 0, "human": [0, 8, 22, 23, 27, 31, 32, 39, 40, 41, 43, 58, 68, 113, 114, 117, 165, 168, 173, 194, 199, 200, 205, 206, 208, 209, 210, 213, 226, 228, 229, 231, 238, 300, 324, 390, 398, 419], "cognit": [0, 72, 100, 103, 114, 160, 170, 173, 175, 180, 207, 216, 224, 227, 233, 234], "brain": [0, 2, 3, 4, 6, 9, 12, 15, 20, 21, 22, 23, 27, 31, 32, 36, 39, 41, 43, 44, 46, 52, 54, 55, 59, 64, 66, 67, 69, 70, 76, 78, 79, 80, 85, 89, 92, 94, 96, 98, 100, 104, 107, 114, 116, 117, 124, 126, 129, 131, 132, 133, 135, 136, 138, 139, 141, 144, 146, 147, 153, 154, 156, 160, 161, 162, 163, 165, 166, 168, 169, 170, 173, 174, 175, 178, 180, 186, 187, 194, 196, 198, 199, 201, 202, 204, 205, 207, 209, 212, 213, 214, 215, 219, 220, 226, 228, 229, 231, 232, 233, 238, 241, 244, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 277, 300, 302, 305, 307, 312, 323, 324, 326, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 343, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377, 380, 383, 385, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 408, 409, 410, 415, 419, 429, 437, 438], "scienc": [0, 3, 23, 38, 48, 58, 98, 114, 159, 162, 165, 166, 186, 196, 198, 201, 204, 207, 208, 212, 214, 215, 218, 219, 224, 226, 227, 228, 239, 244, 252, 253, 254, 323, 324, 343, 379, 420, 438], "leipzig": 0, "germnai": 0, "ariel": [0, 126, 138, 153], "rokem": [0, 126, 138, 153], "washington": 0, "psychologi": 0, "seattl": 0, "98107": 0, "arthur": [0, 48, 114, 122, 126, 128, 131, 153, 159, 201, 258], "mensch": [0, 48, 114, 122, 126, 128, 131, 153, 159, 201, 258], "aswin": [0, 125, 153], "vijayan": [0, 125, 153], "audrei": [0, 123, 153], "duran": [0, 123, 153], "therapanacea": 0, "ben": [0, 56, 114, 118, 119, 121, 126, 128, 153, 324], "cipollini": [0, 118, 119, 121, 126, 128, 153], "facebook": 0, "hayward": 0, "california": 0, "binh": [0, 141, 144, 146, 153], "nguyen": [0, 141, 144, 146, 153], "caglar": [0, 150, 153], "cakan": [0, 150, 153], "technisch": 0, "universit\u00e4t": 0, "berlin": [0, 114, 186, 204, 219], "germani": [0, 114, 166], "chri": [0, 118, 126, 141, 153], "gorgolewski": [0, 114, 117, 118, 126, 153, 201, 216, 229, 231, 234], "googl": 0, "llc": 0, "markiewicz": [0, 141, 153], "stanford": [0, 114, 166], "christian": [0, 114, 124, 135, 138, 153, 207, 226, 323, 324], "horea": [0, 135, 138, 153], "dartmouth": 0, "colleg": [0, 173], "pb": 0, "hanov": 0, "hampshir": 0, "gerloff": [0, 124, 153], "colin": [0, 141, 153], "reining": [0, 141, 153], "denver": 0, "colorado": 0, "connor": [0, 150, 153], "lane": [0, 114, 150, 153, 343], "child": [0, 51, 215], "baltimor": 0, "md": [0, 206], "czarina": [0, 125, 153], "sy": [0, 41, 125, 153], "c\u00e9line": [0, 141, 153], "delettr": [0, 141, 153], "dan": [0, 114, 138, 141, 153, 209], "gale": [0, 138, 141, 153], "neurosci": [0, 23, 49, 66, 72, 114, 157, 165, 173, 175, 194, 197, 207, 224, 226, 233, 239, 438], "studi": [0, 2, 6, 9, 31, 33, 40, 42, 56, 66, 71, 75, 97, 99, 109, 113, 114, 117, 156, 161, 163, 164, 166, 167, 170, 174, 178, 198, 219, 229, 231, 233, 241, 244, 254, 305, 310, 311, 313, 317, 323, 324, 326, 332, 385, 393, 398, 438], "queen": 0, "kingston": 0, "daniel": [0, 56, 114, 138, 141, 147, 150, 153, 226, 229, 231, 233, 239, 323, 324], "gomez": [0, 138, 141, 147, 150, 153], "danilo": [0, 118, 119, 121, 122, 126, 128, 153], "bzdok": [0, 118, 119, 121, 122, 126, 128, 153], "mcgill": [0, 219], "mila": 0, "quebec": 0, "ai": 0, "montr\u00e9al": [0, 175], "david": [0, 56, 114, 117, 150, 153, 200, 207, 226, 229, 231, 239, 323, 324, 343], "g": [0, 6, 9, 14, 22, 24, 30, 31, 40, 42, 43, 47, 48, 49, 55, 61, 64, 67, 68, 94, 99, 100, 105, 114, 117, 124, 146, 150, 153, 155, 159, 165, 167, 168, 169, 170, 172, 173, 175, 179, 180, 186, 187, 188, 199, 209, 226, 233, 250, 251, 252, 253, 254, 255, 256, 257, 258, 274, 275, 282, 289, 295, 299, 302, 319, 323, 326, 327, 328, 329, 330, 331, 332, 333, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 380, 388, 391, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 407, 410, 411, 413, 423, 436], "elli": [0, 150, 153], "nebraska": 0, "medic": [0, 114, 158, 166, 186, 204, 219, 407], "center": [0, 14, 36, 47, 50, 51, 55, 58, 61, 79, 99, 105, 106, 139, 150, 153, 155, 158, 180, 186, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 377, 379, 404, 405, 407, 416, 423], "demian": [0, 114, 121, 138, 153, 201], "wassermann": [0, 114, 121, 138, 153, 201], "derek": [0, 141, 153], "pisner": [0, 141, 153], "st": 0, "petersburg": 0, "fl": 0, "dimitri": [0, 114, 123, 126, 138, 153, 167, 168, 187, 190, 224, 407], "papadopoulo": [0, 114, 123, 126, 138, 153, 168, 224], "orfano": [0, 114, 123, 126, 138, 153, 168, 224], "neurospin": [0, 60, 65, 73, 113, 168, 169, 384], "cea": 0, "universit\u00e9": [0, 168], "gif": [0, 168], "sur": [0, 168], "yvett": [0, 168], "elvi": [0, 49, 114, 118, 121, 126, 128, 131, 153, 166, 407, 433], "dohmatob": [0, 49, 114, 118, 121, 126, 128, 131, 153, 166, 407, 433], "research": [0, 173, 178, 180, 215, 324], "fair": [0, 114, 159, 212], "eric": [0, 114, 135, 138, 139, 141, 153, 200, 208, 212], "larson": [0, 135, 138, 139, 141, 153], "evan": [0, 114, 146, 153, 198, 206, 209, 219, 244], "edmond": [0, 146, 153], "oxford": [0, 21, 91, 114, 155, 202, 274, 275, 375, 376], "uk": [0, 114, 166, 207, 236, 237], "fabian": [0, 114, 118, 153, 204], "pedregosa": [0, 114, 118, 153, 204], "geneva": 0, "franz": [0, 55, 139, 141, 143, 153], "liem": [0, 55, 139, 141, 143, 153], "fran\u00e7oi": [0, 125, 153], "paugam": [0, 125, 153], "gael": [0, 49, 114, 118, 119, 121, 122, 126, 128, 131, 135, 138, 139, 140, 141, 143, 153, 186, 187, 204, 229, 231, 257, 258, 406, 407, 412], "varoquaux": [0, 48, 49, 56, 114, 117, 118, 119, 121, 122, 126, 128, 131, 135, 138, 139, 140, 141, 143, 153, 154, 155, 159, 160, 162, 166, 175, 186, 187, 201, 204, 229, 231, 252, 253, 257, 258, 406, 407, 412], "gill": [0, 138, 141, 153], "holland": [0, 138, 141, 153], "vrije": 0, "universiteit": 0, "amsterdam": 0, "netherland": 0, "greg": [0, 138, 141, 153], "kiar": [0, 141, 153], "greydon": [0, 146, 153], "gilmor": [0, 146, 153], "depart": [0, 173], "mathemat": [0, 129, 153, 173, 311, 425], "toronto": 0, "guillaum": [0, 138, 141, 153], "lemaitr": [0, 138, 141, 153], "geriatr": 0, "criugm": 0, "himanshu": 0, "aggarw": 0, "ian": [0, 141, 153], "aben": [0, 141, 153], "jake": [0, 141, 153], "vogel": [0, 114, 141, 153, 212, 213], "clinic": [0, 51, 99, 161, 175], "scilifelab": 0, "lund": 0, "sweden": 0, "jan": [0, 114, 118, 153, 323, 324], "margeta": [0, 118, 153], "kardiom": 0, "nova": 0, "dubnica": 0, "slovakia": 0, "jaqu": [0, 118, 153], "grobler": [0, 118, 153], "anylin": 0, "gmbh": 0, "vienna": 0, "austria": 0, "jason": [0, 118, 138, 153], "gor": [0, 118, 138, 153], "insight": [0, 56, 147, 153, 154], "mountain": 0, "view": [0, 6, 13, 14, 16, 22, 23, 33, 37, 42, 52, 54, 58, 61, 62, 64, 66, 71, 75, 84, 102, 124, 125, 135, 144, 146, 150, 153, 160, 165, 167, 175, 180, 250, 251, 252, 253, 257, 258, 315, 329, 332, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 380, 383, 385, 386, 388, 389, 391, 392, 393, 394, 396, 397, 399, 400, 402, 405, 436, 438], "javier": [0, 146, 153], "rasero": [0, 146, 153], "school": 0, "virginia": 0, "viginia": 0, "jean": [0, 49, 114, 118, 135, 138, 153, 167, 187, 190, 224, 229, 231, 257], "kossaifi": [0, 118, 153], "imperi": 0, "king": [0, 114, 135, 138, 153, 239], "cnr": [0, 196], "jell": [0, 114, 123, 124, 153, 277], "roelof": [0, 123, 124, 153], "dalenberg": [0, 123, 124, 153], "groningen": 0, "jeremi": [0, 146, 153], "lefort": [0, 146, 153], "besnard": [0, 146, 153], "renn": 0, "origami": 0, "lab": 0, "chevali": [0, 138, 141, 153], "emerton": 0, "johann": [0, 141, 153], "wiesner": [0, 141, 153], "central": [0, 91], "mental": [0, 66, 69, 72, 81, 224, 230], "health": 0, "mannheim": 0, "jon": [0, 143, 153], "haitz": [0, 143, 153], "legarreta": [0, 143, 153], "gorrono": [0, 143, 153], "brigham": 0, "women": 0, "": [0, 2, 3, 4, 6, 9, 16, 23, 29, 30, 33, 34, 37, 40, 41, 44, 49, 50, 55, 56, 64, 65, 66, 67, 68, 69, 71, 72, 75, 77, 78, 79, 80, 86, 91, 93, 94, 100, 102, 103, 108, 114, 117, 131, 138, 148, 149, 154, 157, 161, 164, 165, 167, 168, 170, 171, 172, 173, 175, 176, 178, 179, 180, 186, 187, 188, 196, 198, 199, 207, 209, 210, 212, 213, 219, 224, 226, 229, 231, 233, 250, 251, 252, 253, 254, 255, 256, 257, 258, 272, 274, 275, 282, 295, 299, 300, 309, 311, 315, 316, 317, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 379, 380, 388, 389, 394, 395, 396, 397, 399, 401, 403, 404, 405, 406, 407, 417, 419, 436, 438], "hospit": 0, "mass": [0, 58, 79, 150, 153, 297, 343, 375, 416], "gener": [0, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 111, 113, 116, 123, 125, 138, 139, 141, 143, 144, 146, 148, 151, 153, 160, 161, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 198, 199, 201, 224, 234, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 272, 274, 275, 282, 289, 295, 297, 298, 299, 300, 305, 311, 312, 322, 323, 324, 327, 328, 329, 330, 331, 332, 341, 343, 384, 388, 393, 394, 395, 396, 397, 398, 404, 405, 407, 415, 419, 427, 436, 437], "harvard": [0, 21, 91, 155, 202, 210, 375, 376], "boston": 0, "jona": [0, 114, 135, 153, 406, 412], "sassenhagen": [0, 135, 153], "joshua": [0, 114, 143, 153, 206, 210], "teve": [0, 143, 153], "julia": [0, 126, 141, 153], "huntenburg": [0, 126, 141, 153], "intern": [0, 34, 114, 166, 167, 168, 170, 188, 198, 257, 258, 309, 311], "laboratori": 0, "julio": [0, 124, 153], "A": [0, 1, 5, 6, 7, 11, 15, 16, 21, 23, 40, 41, 42, 47, 48, 49, 56, 61, 64, 67, 69, 71, 75, 76, 79, 80, 84, 86, 89, 98, 100, 102, 105, 106, 110, 112, 113, 114, 117, 124, 133, 134, 138, 141, 147, 153, 154, 156, 157, 159, 161, 163, 164, 165, 167, 168, 169, 171, 173, 175, 176, 178, 179, 180, 186, 187, 188, 197, 199, 200, 205, 207, 209, 212, 213, 214, 216, 218, 226, 227, 229, 230, 231, 232, 234, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 273, 274, 275, 278, 281, 282, 285, 291, 295, 300, 301, 307, 312, 313, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 343, 354, 355, 359, 375, 376, 379, 383, 388, 390, 392, 394, 395, 398, 400, 404, 405, 406, 407, 408, 409, 414, 415, 417, 418, 419, 420, 436, 438], "peraza": [0, 124, 153], "florida": 0, "miami": 0, "kamalakar": [0, 121, 126, 128, 131, 135, 136, 138, 141, 145, 153], "reddi": [0, 121, 126, 128, 131, 135, 136, 137, 138, 141, 145, 153], "daddi": [0, 121, 126, 128, 131, 135, 136, 138, 141, 145, 153], "kevin": [0, 124, 153], "sitek": [0, 124, 153], "northwestern": 0, "evanston": 0, "ilinoi": 0, "koen": [0, 150, 153], "helwegen": [0, 150, 153], "dutch": 0, "connectom": [0, 8, 12, 22, 27, 46, 48, 49, 51, 54, 56, 57, 59, 99, 111, 113, 114, 119, 126, 130, 131, 135, 138, 139, 141, 144, 146, 153, 156, 158, 159, 173, 174, 175, 180, 194, 201, 204, 210, 212, 213, 215, 226, 257, 258, 307, 324, 326, 327, 328, 330, 331, 333, 356, 375, 376, 377, 378, 380, 389, 390, 391, 393, 398, 399, 400, 402, 407, 438], "vu": 0, "konrad": [0, 125, 153], "wagstyl": [0, 125, 153], "konstantin": [0, 118, 153], "shmelkov": [0, 118, 153], "kshitij": [0, 138, 139, 140, 141, 142, 143, 144, 153], "chawla": [0, 138, 139, 140, 141, 142, 143, 144, 153], "duke": 0, "system": [0, 6, 23, 42, 43, 114, 160, 167, 168, 176, 178, 197, 238, 240], "kun": [0, 150, 153], "chen": [0, 37, 114, 150, 153, 226], "macau": 0, "china": 0, "leonard": [0, 148, 153], "sass": [0, 148, 153], "loic": [0, 118, 119, 121, 122, 126, 128, 131, 141, 153], "est\u00e8v": [0, 118, 119, 121, 122, 126, 128, 131, 153], "tetrel": [0, 141, 153], "luz": 0, "paz": 0, "manon": [0, 150, 153], "pietrantoni": [0, 150, 153], "martin": [0, 114, 126, 131, 145, 153, 197, 219, 238, 300, 419, 433], "perez": [0, 126, 131, 153, 433], "guevara": [0, 126, 131, 153, 433], "criteo": 0, "wegrzyn": [0, 145, 153], "bielefeld": 0, "mathia": [0, 124, 153], "goncalv": [0, 124, 153], "mathieu": [0, 125, 153], "dugr\u00e9": [0, 125, 153], "concordia": 0, "matthia": [0, 118, 153], "ekman": [0, 118, 153], "donder": 0, "nijmegen": 0, "matthieu": [0, 150, 153], "joulot": [0, 150, 153], "arami": 0, "maximilian": [0, 125, 153], "cosmo": [0, 125, 153], "sitter": [0, 125, 153], "mehdi": [0, 118, 122, 126, 135, 141, 153], "rahim": [0, 118, 122, 126, 135, 141, 153], "air": 0, "liquid": 0, "mia": [0, 151, 153], "zwalli": [0, 151, 153], "dsst": 0, "nation": [0, 114, 165, 207, 226, 254, 324], "eickenberg": [0, 114, 118, 153, 166], "flatiron": 0, "psychoinformat": 0, "forschungszentrum": 0, "j\u00fclich": 0, "notter": [0, 138, 153], "am": [0, 114, 200], "osram": 0, "martigni": 0, "waskom": [0, 118, 153], "michel": [0, 44, 49, 114, 118, 124, 125, 151, 153, 166, 204, 224, 239], "mohammad": [0, 124, 125, 153], "torabi": [0, 124, 125, 153], "moritz": [0, 135, 138, 141, 153], "boo": [0, 135, 138, 141, 153], "myeong": [0, 148, 153], "seop": [0, 148, 153], "song": [0, 148, 153], "natasha": [0, 123, 153], "clark": [0, 114, 123, 153, 165, 197], "simexp": [0, 436], "neelai": [0, 148, 153], "shah": [0, 148, 153], "intellig": [0, 49, 84], "nikhil": [0, 151, 153], "krish": [0, 151, 153], "texa": 0, "austin": 0, "oliv": [0, 70, 114, 125, 153, 165, 198], "warrington": [0, 125, 153], "wellcom": [0, 173], "neuroimag": [0, 2, 8, 22, 23, 27, 37, 48, 56, 62, 76, 94, 100, 101, 102, 113, 114, 115, 117, 138, 153, 154, 155, 159, 160, 162, 164, 165, 166, 168, 173, 174, 177, 182, 196, 198, 200, 201, 204, 208, 214, 218, 219, 224, 229, 231, 244, 250, 251, 252, 253, 254, 255, 256, 257, 258, 277, 282, 295, 297, 300, 301, 304, 305, 306, 307, 308, 309, 310, 312, 314, 315, 316, 317, 318, 320, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 378, 379, 383, 385, 386, 388, 391, 392, 393, 398, 400, 401, 405, 407, 410, 411, 413, 414, 417, 420, 423, 427, 436, 438], "ucl": [0, 114, 166, 236, 237], "oscar": [0, 138, 153], "esteban": [0, 138, 153], "patrick": [0, 125, 153], "sadil": [0, 125, 153], "biostatist": [0, 154], "john": [0, 114, 135, 153, 165, 167, 197, 212, 233, 239, 343], "hopkin": 0, "bloomberg": 0, "public": [0, 2, 62, 100, 117, 123, 125, 148, 150, 153, 168, 173, 233], "paul": [0, 114, 123, 153, 199, 226], "bogdan": [0, 123, 153], "paula": [0, 141, 153], "sanz": [0, 141, 153], "leon": [0, 141, 153], "brisban": 0, "australia": 0, "peer": [0, 138, 153], "herholz": [0, 138, 153], "philipp": [0, 114, 118, 153, 224, 257], "gervai": [0, 118, 153], "zurich": 0, "pierr": [0, 114, 135, 137, 138, 139, 153, 186, 198], "bellec": [0, 114, 138, 139, 153, 198], "glaser": [0, 137, 153], "gatsbi": 0, "comput": [0, 3, 6, 9, 15, 16, 22, 25, 29, 30, 31, 33, 39, 40, 41, 43, 44, 46, 47, 48, 49, 51, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 77, 79, 81, 83, 85, 90, 92, 95, 98, 99, 100, 101, 102, 103, 104, 108, 113, 114, 115, 117, 125, 126, 138, 144, 145, 146, 148, 153, 156, 157, 159, 160, 161, 162, 163, 165, 166, 167, 170, 171, 173, 174, 175, 177, 178, 181, 186, 188, 190, 204, 215, 218, 228, 238, 250, 251, 252, 253, 254, 255, 256, 257, 258, 270, 272, 274, 275, 278, 279, 281, 282, 284, 289, 291, 295, 297, 298, 305, 306, 307, 310, 311, 312, 313, 317, 319, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 377, 380, 383, 390, 391, 392, 393, 398, 399, 401, 404, 405, 406, 407, 415, 417, 418, 420, 423, 429, 436, 438], "olivi": [0, 135, 153], "quirion": [0, 135, 153], "canadian": 0, "genom": 0, "calcul": [0, 3, 31, 41, 47, 48, 58, 92, 97, 109, 113, 124, 139, 153, 169, 223, 224, 250, 251, 252, 253, 257, 258, 272, 274, 275, 290, 297, 305, 323, 326, 329, 332, 336, 339, 343, 354, 371, 378, 383, 386, 391, 392, 393, 398, 400, 405, 417], "qu\u00e9bec": 0, "pradeep": [0, 137, 153], "raamana": [0, 137, 153], "pittsburgh": 0, "pa": [0, 285], "rahul": [0, 125, 153], "brito": [0, 125, 153], "raphael": [0, 123, 145, 146, 147, 148, 149, 150, 153], "meudec": [0, 123, 145, 146, 147, 148, 149, 150, 153], "robert": [0, 114, 123, 124, 146, 153, 167, 197, 219, 244], "luke": [0, 146, 153], "agencyenterpris": 0, "melbourn": 0, "williamson": [0, 123, 124, 153], "roberto": [0, 114, 131, 141, 153, 207], "guidotti": [0, 131, 141, 153], "d": [0, 26, 37, 41, 50, 51, 56, 58, 64, 67, 71, 100, 114, 117, 158, 167, 168, 196, 207, 212, 213, 216, 219, 229, 231, 234, 244, 270, 277, 300, 323, 324, 379, 390, 419, 425], "annunzio": 0, "chieti": 0, "pescara": 0, "san": 0, "benedetto": 0, "del": [0, 44], "tronto": 0, "itali": 0, "ronald": [0, 118, 153], "phlypo": [0, 118, 153], "lyon": 0, "area": [0, 23, 32, 64, 67, 80, 94, 146, 153, 158, 160, 165, 169, 170, 173, 174, 180, 209, 219, 238, 304, 344, 346, 347, 356, 359, 394, 397, 403], "ryan": [0, 114, 141, 153, 214], "hammond": [0, 141, 153], "uc": 0, "diego": [0, 114, 226], "sachin": [0, 150, 153], "patalasingh": [0, 150, 153], "sage": [0, 150, 153], "hahn": [0, 150, 153], "deephealth": 0, "salma": [0, 118, 121, 126, 128, 135, 138, 139, 153], "bougacha": [0, 118, 121, 126, 128, 135, 138, 139, 153], "sam": [0, 124, 153], "buck": [0, 124, 153], "johnson": [0, 124, 153], "sami": [0, 150, 153], "jawhar": [0, 150, 153], "simon": [0, 56, 114, 138, 143, 153, 206, 207, 323, 324], "steinkamp": [0, 138, 143, 153], "danish": 0, "magnet": [0, 170, 173, 198, 224], "reson": [0, 170, 173, 198, 224], "copenhagen": 0, "amag": 0, "hvidovr": 0, "denmark": 0, "sourav": [0, 138, 153], "singh": [0, 138, 153], "steven": [0, 114, 124, 153, 197, 212, 213, 214, 323, 324], "meisler": [0, 124, 153], "divis": [0, 91], "technologi": 0, "sylvain": [0, 135, 138, 141, 153], "lan": [0, 135, 138, 153], "takerkart": [0, 141, 153], "la": 0, "timon": 0, "marseil": 0, "tarun": [0, 125, 153], "samanta": [0, 125, 153], "acharya": 0, "prafulla": 0, "chandra": 0, "lifespan": 0, "informat": 0, "pennsylvania": 0, "thoma": [0, 114, 117, 141, 144, 147, 148, 153, 161, 175, 197, 206, 210, 226, 229, 231, 297, 323, 324, 343, 420], "bazeil": [0, 141, 144, 147, 148, 153], "tom": [0, 114, 146, 153, 197], "vanass": [0, 146, 153], "wisconsin": 0, "sleep": 0, "conscious": 0, "vasco": [0, 150, 153], "diogo": [0, 150, 153], "vincent": [0, 49, 114, 118, 153, 166, 197, 204, 224, 239, 324], "http": [0, 18, 22, 23, 34, 49, 56, 62, 64, 67, 71, 72, 98, 101, 102, 114, 117, 146, 150, 153, 158, 161, 162, 165, 166, 167, 168, 170, 175, 176, 187, 190, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 244, 250, 251, 252, 253, 257, 269, 273, 274, 275, 297, 300, 323, 324, 343, 379, 401, 402, 406, 407, 412, 419, 420, 436, 437], "www": [0, 64, 67, 102, 114, 117, 162, 165, 166, 194, 195, 196, 197, 198, 199, 201, 204, 207, 208, 214, 218, 219, 220, 224, 226, 227, 228, 229, 231, 233, 236, 237, 239, 244, 252, 253, 300, 323, 324, 343, 379, 419, 420], "logilab": 0, "fr": [0, 49, 114, 166, 196, 204, 407], "virgil": [0, 118, 153], "fritsch": [0, 118, 153], "zvi": [0, 143, 153], "baratz": [0, 143, 153], "tel": 0, "aviv": 0, "israel": 0, "\u00f3scar": [0, 118, 121, 126, 128, 153], "n\u00e1jera": [0, 118, 121, 126, 128, 153], "checkmk": 0, "paid": 0, "grant": 0, "chan": 0, "zuckerberg": 0, "initi": [0, 3, 12, 48, 49, 50, 67, 69, 94, 100, 125, 153, 158, 166, 169, 178, 180, 188, 190, 257, 258, 269, 273, 327, 328, 330, 331, 333, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 404, 407], "were": [0, 6, 18, 23, 40, 49, 62, 64, 66, 67, 79, 91, 94, 98, 101, 107, 108, 116, 121, 123, 141, 144, 148, 149, 150, 153, 160, 167, 168, 170, 229, 231, 300, 330, 333, 419], "niconnect": 0, "french": [0, 175], "investiss": 0, "avenir": 0, "wa": [0, 3, 40, 64, 67, 69, 91, 102, 105, 106, 116, 117, 123, 125, 138, 145, 146, 147, 148, 149, 153, 160, 162, 165, 167, 170, 205, 206, 255, 256, 257, 258, 289, 295, 297, 379, 388, 394, 396, 397, 401, 403, 410], "previous": [0, 3, 23, 98, 116, 141, 144, 148, 150, 153, 160, 170], "hbp": 0, "also": [0, 3, 4, 11, 14, 15, 16, 17, 22, 23, 29, 31, 34, 39, 40, 41, 42, 43, 49, 50, 51, 55, 56, 62, 63, 66, 68, 70, 71, 72, 75, 77, 79, 86, 89, 91, 93, 94, 95, 98, 108, 116, 117, 121, 123, 125, 126, 131, 132, 134, 138, 141, 144, 147, 148, 150, 153, 154, 155, 158, 159, 161, 162, 163, 165, 167, 168, 169, 170, 172, 173, 175, 176, 178, 179, 180, 181, 188, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 250, 251, 252, 253, 255, 256, 282, 284, 289, 295, 307, 311, 315, 320, 321, 323, 334, 335, 336, 337, 338, 339, 340, 378, 379, 383, 384, 386, 391, 392, 393, 394, 396, 405, 408, 409, 413, 414, 417, 436, 438], "support": [0, 9, 15, 29, 32, 33, 34, 35, 44, 98, 105, 111, 116, 121, 123, 124, 133, 134, 135, 138, 139, 140, 141, 145, 146, 148, 149, 150, 151, 153, 160, 161, 163, 165, 170, 173, 174, 250, 251, 252, 253, 270, 322, 323, 327, 330, 394, 396, 397, 413, 423, 437], "digicosm": 0, "dataia": 0, "If": [0, 2, 9, 14, 15, 24, 32, 34, 35, 36, 40, 41, 42, 43, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 70, 75, 79, 84, 86, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 116, 117, 125, 138, 145, 146, 148, 153, 154, 158, 160, 161, 163, 165, 167, 168, 170, 173, 175, 176, 178, 179, 180, 186, 187, 188, 190, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 205, 207, 212, 213, 214, 215, 219, 220, 222, 223, 224, 227, 229, 231, 233, 234, 239, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 269, 272, 273, 274, 275, 278, 279, 282, 285, 289, 291, 295, 296, 297, 298, 299, 300, 301, 305, 306, 310, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 415, 416, 417, 418, 419, 423, 436, 437], "you": [0, 2, 4, 6, 9, 14, 15, 22, 23, 24, 32, 35, 36, 39, 40, 41, 42, 43, 44, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 66, 70, 75, 79, 86, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 114, 116, 117, 133, 134, 138, 141, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 166, 168, 172, 173, 175, 176, 178, 179, 180, 186, 187, 188, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 210, 215, 218, 219, 220, 222, 223, 224, 227, 228, 229, 233, 234, 239, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 284, 289, 295, 326, 327, 328, 329, 330, 331, 332, 333, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 380, 383, 385, 386, 389, 391, 392, 393, 394, 396, 397, 400, 401, 403, 404, 405, 406, 407, 423, 436, 437, 438], "want": [0, 2, 6, 9, 14, 15, 42, 49, 54, 66, 71, 72, 78, 86, 94, 98, 100, 113, 116, 117, 154, 161, 163, 167, 168, 170, 179, 180, 229, 231, 255, 256, 315, 324, 396, 403, 436, 437], "we": [0, 2, 3, 4, 6, 9, 11, 14, 18, 19, 20, 22, 23, 24, 25, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 115, 116, 117, 123, 125, 131, 139, 140, 141, 146, 148, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 167, 169, 170, 173, 175, 176, 177, 178, 179, 180, 193, 202, 203, 220, 229, 231, 255, 256, 257, 272, 274, 275, 295, 299, 307, 311, 319, 320, 321, 335, 337, 338, 340, 347, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 382, 407, 409, 436, 437], "suggest": [0, 6, 86, 148, 153, 157, 175, 178, 300, 335, 337, 338, 340, 419], "do": [0, 3, 6, 9, 22, 24, 25, 30, 31, 34, 40, 42, 49, 50, 51, 57, 61, 64, 65, 66, 67, 68, 70, 75, 77, 79, 80, 94, 98, 100, 101, 108, 111, 116, 135, 139, 144, 148, 153, 154, 158, 159, 160, 161, 163, 165, 167, 170, 175, 176, 178, 179, 180, 186, 196, 220, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 291, 295, 297, 300, 312, 327, 328, 329, 330, 331, 332, 333, 338, 339, 340, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 405, 419, 423, 436], "us": [0, 1, 2, 4, 6, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 26, 29, 30, 31, 32, 33, 36, 38, 40, 41, 42, 43, 44, 46, 47, 49, 52, 53, 54, 55, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 89, 90, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 113, 114, 115, 116, 123, 124, 125, 126, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 156, 159, 161, 162, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 176, 179, 180, 185, 187, 189, 190, 191, 192, 193, 194, 196, 199, 205, 206, 209, 211, 214, 235, 242, 243, 245, 246, 248, 255, 259, 260, 261, 268, 269, 271, 272, 273, 274, 275, 276, 280, 281, 283, 286, 287, 288, 290, 292, 293, 294, 299, 303, 304, 309, 314, 318, 320, 321, 335, 336, 338, 339, 340, 341, 344, 345, 346, 347, 372, 373, 374, 402, 404, 406, 410, 411, 412, 413, 414, 418, 419, 420, 424, 433, 437, 438], "our": [0, 2, 3, 14, 19, 29, 34, 40, 49, 51, 56, 58, 66, 68, 94, 98, 101, 116, 117, 138, 148, 153, 155, 160, 167, 168, 170], "zenodo": 0, "doi": [0, 22, 23, 56, 71, 72, 76, 114, 117, 161, 162, 165, 166, 186, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 218, 219, 224, 226, 227, 228, 229, 231, 233, 234, 238, 239, 244, 252, 253, 257, 258, 277, 297, 300, 323, 324, 343, 379, 406, 412, 419, 420], "softwar": [0, 6, 69, 72, 170, 173, 322, 437], "author": [0, 47, 55, 114, 167, 168, 176, 433], "licens": [0, 125, 153, 199], "bsd": 0, "4": [0, 3, 6, 7, 12, 14, 15, 17, 18, 20, 23, 24, 27, 29, 30, 31, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 62, 64, 65, 66, 67, 68, 69, 72, 73, 75, 76, 77, 79, 81, 84, 86, 91, 92, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 114, 118, 126, 131, 134, 138, 139, 140, 141, 146, 158, 160, 165, 166, 167, 175, 188, 194, 209, 213, 216, 226, 227, 233, 234, 235, 238, 250, 251, 252, 253, 255, 256, 257, 258, 295, 300, 315, 316, 323, 324, 335, 337, 338, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 383, 385, 386, 389, 390, 391, 392, 393, 405, 419, 423, 436], "claus": 0, "titl": [0, 3, 6, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 26, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 68, 69, 71, 75, 76, 77, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 98, 100, 101, 102, 103, 105, 106, 107, 108, 111, 116, 125, 141, 142, 147, 150, 153, 158, 160, 168, 176, 180, 282, 295, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 383, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 415, 417, 436], "url": [0, 22, 23, 62, 114, 142, 150, 153, 161, 162, 165, 166, 187, 190, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 218, 219, 222, 223, 224, 226, 227, 228, 229, 231, 233, 234, 235, 238, 239, 244, 249, 252, 253, 257, 269, 273, 274, 275, 297, 300, 323, 324, 343, 379, 406, 407, 412, 419, 420], "com": [0, 23, 114, 150, 153, 162, 165, 166, 168, 196, 198, 199, 200, 201, 204, 206, 208, 209, 214, 219, 224, 226, 227, 228, 238, 244, 252, 253, 300, 323, 324, 343, 379, 419, 420, 436, 437], "org": [0, 18, 22, 23, 34, 36, 49, 52, 53, 56, 58, 62, 71, 72, 75, 77, 98, 114, 117, 162, 165, 166, 167, 168, 170, 175, 176, 187, 190, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 238, 239, 244, 250, 251, 252, 253, 297, 300, 323, 324, 343, 379, 402, 406, 412, 419, 420], "10": [0, 2, 5, 6, 9, 11, 12, 15, 21, 22, 23, 24, 27, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 53, 55, 56, 57, 58, 59, 61, 62, 63, 66, 71, 72, 76, 77, 79, 81, 87, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 108, 111, 114, 117, 122, 138, 148, 154, 157, 160, 161, 162, 165, 166, 167, 169, 170, 186, 187, 190, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 218, 219, 224, 226, 227, 228, 229, 231, 233, 234, 238, 239, 244, 250, 251, 252, 253, 254, 255, 256, 257, 258, 277, 285, 297, 300, 323, 324, 328, 330, 331, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 379, 404, 405, 406, 407, 410, 411, 412, 416, 419, 420, 423, 436], "5281": 0, "8397156": 0, "resourc": [0, 178], "identifi": [0, 29, 30, 32, 33, 50, 58, 62, 94, 114, 123, 148, 153, 158, 166, 169, 170, 172, 196, 278, 282, 284, 289, 291], "rrid": 0, "scr_001362": 0, "There": [0, 4, 21, 66, 157, 160, 161, 162, 168, 173, 204, 272, 274, 275, 296, 323, 414, 436], "paper": [0, 48, 49, 116, 117, 157, 167, 168, 170, 229], "publish": [0, 229, 306, 420], "about": [0, 2, 3, 6, 14, 19, 24, 49, 62, 76, 78, 79, 94, 100, 101, 108, 111, 116, 117, 123, 124, 125, 126, 141, 149, 153, 157, 160, 161, 163, 165, 167, 168, 169, 170, 173, 174, 175, 178, 198, 207, 209, 218, 219, 220, 233, 241, 242, 243, 244, 245, 246, 324, 418, 423], "howev": [0, 48, 49, 66, 67, 70, 86, 94, 100, 154, 160, 163, 167, 170, 180, 196, 315, 322, 324, 438], "pattern": [0, 8, 27, 28, 45, 49, 51, 100, 113, 114, 117, 136, 144, 153, 154, 159, 160, 163, 166, 167, 173, 175, 178, 188, 190, 195, 198, 208, 219, 226, 227, 229, 248, 254, 301, 313, 337, 342, 379, 398, 406, 412], "underli": [0, 89, 170, 173, 175, 180, 357], "have": [0, 2, 3, 6, 9, 11, 15, 16, 18, 24, 29, 31, 32, 33, 39, 41, 42, 43, 44, 49, 52, 54, 55, 56, 57, 61, 62, 64, 65, 66, 67, 71, 75, 85, 86, 93, 94, 98, 100, 101, 103, 108, 111, 113, 116, 117, 123, 124, 125, 126, 128, 130, 131, 132, 135, 136, 137, 138, 141, 144, 145, 146, 148, 149, 151, 153, 154, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 170, 172, 173, 175, 176, 178, 179, 180, 186, 187, 188, 190, 193, 198, 205, 206, 210, 214, 215, 229, 233, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 274, 275, 282, 285, 289, 290, 295, 296, 297, 299, 300, 302, 311, 315, 316, 317, 320, 322, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 342, 343, 379, 384, 394, 396, 397, 401, 404, 405, 406, 407, 413, 414, 416, 417, 419, 436, 437], "been": [0, 6, 10, 11, 32, 36, 39, 42, 47, 49, 52, 54, 55, 61, 66, 71, 72, 75, 79, 81, 85, 86, 89, 91, 93, 94, 104, 108, 111, 123, 124, 126, 128, 131, 132, 138, 140, 141, 143, 144, 146, 147, 148, 149, 150, 153, 159, 166, 167, 168, 169, 172, 173, 176, 180, 187, 198, 229, 233, 282, 295, 297, 306, 335, 336, 337, 339, 340, 343, 411, 420, 423], "describ": [0, 6, 18, 37, 63, 64, 66, 69, 72, 115, 116, 117, 161, 167, 168, 170, 175, 176, 180, 187, 224, 225, 277, 280, 283, 289, 297, 324, 343, 382], "machin": [0, 29, 34, 44, 49, 94, 115, 145, 153, 161, 162, 163, 168, 173, 174, 227, 437, 438], "huge": [0, 66, 68, 138, 153], "amount": [0, 24, 34, 36, 50, 66, 95, 161, 163, 168, 174, 175, 176, 229, 250, 251, 252, 253, 255, 256, 257, 258, 282, 295, 301, 312, 327, 328, 329, 330, 331, 332, 333, 405, 406, 407], "upon": [0, 230, 282, 295, 378, 391, 392, 393, 400, 407, 409, 417], "reli": [0, 6, 30, 66, 92, 94, 125, 131, 147, 153, 157, 167, 170, 173, 178, 220, 423, 436], "heavili": 0, "who": [0, 117, 180, 324], "invest": 0, "time": [0, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 56, 57, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 114, 116, 117, 123, 124, 125, 128, 137, 138, 144, 145, 146, 148, 150, 153, 154, 156, 157, 158, 159, 160, 163, 165, 168, 170, 171, 173, 174, 176, 177, 178, 179, 186, 188, 190, 215, 236, 238, 239, 250, 251, 252, 253, 255, 256, 257, 258, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 297, 300, 301, 312, 315, 317, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 343, 371, 379, 391, 393, 400, 401, 405, 407, 409, 410, 411, 415, 416, 418, 419, 420, 423, 428, 436, 438], "maintain": [0, 123, 141, 147, 153, 168, 176], "deserv": [0, 180], "recognit": [0, 3, 28, 30, 45, 49, 71, 97, 109, 113, 114, 124, 153, 163, 165, 166, 174, 198, 218, 252, 254, 305, 307, 310, 312, 313, 326, 332, 342, 343, 371, 386, 390, 393, 398], "citat": [0, 168], "In": [0, 4, 6, 9, 14, 15, 16, 22, 24, 32, 33, 36, 38, 39, 40, 42, 47, 49, 50, 51, 52, 53, 54, 58, 62, 65, 66, 68, 72, 75, 77, 79, 81, 86, 87, 89, 91, 94, 95, 99, 100, 114, 115, 116, 117, 123, 124, 133, 138, 148, 150, 153, 154, 155, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 173, 175, 176, 177, 178, 179, 180, 186, 193, 196, 198, 202, 203, 204, 219, 226, 229, 231, 233, 250, 251, 252, 253, 255, 256, 257, 258, 269, 272, 274, 275, 282, 284, 289, 295, 297, 298, 315, 316, 317, 319, 337, 343, 379, 380, 391, 404, 413, 416, 423, 436, 437], "need": [0, 2, 3, 6, 9, 16, 20, 30, 31, 33, 41, 42, 48, 49, 50, 51, 55, 56, 63, 66, 69, 75, 77, 78, 79, 80, 81, 84, 89, 91, 92, 98, 99, 100, 103, 104, 108, 116, 117, 138, 141, 148, 153, 154, 158, 160, 161, 162, 163, 168, 170, 172, 173, 176, 178, 179, 180, 193, 269, 272, 273, 317, 322, 323, 327, 328, 330, 339, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 380, 383, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 405, 423, 436, 437], "order": [0, 2, 3, 6, 15, 16, 23, 30, 32, 35, 36, 40, 41, 42, 49, 54, 56, 79, 80, 91, 100, 102, 107, 116, 123, 132, 138, 141, 146, 148, 153, 159, 165, 167, 168, 169, 173, 174, 175, 176, 178, 179, 180, 190, 212, 214, 222, 223, 241, 242, 245, 269, 273, 282, 289, 291, 295, 296, 297, 300, 302, 304, 309, 310, 314, 315, 316, 327, 328, 330, 331, 332, 335, 336, 337, 339, 340, 342, 343, 378, 383, 385, 386, 388, 392, 393, 400, 407, 408, 410, 413, 418, 419, 423, 436, 437], "justifi": 0, "pai": [0, 65], "engin": [0, 9, 125, 148, 153, 175, 180, 357, 394, 396, 397, 436, 437], "To": [0, 2, 3, 4, 6, 15, 21, 22, 23, 31, 33, 37, 39, 40, 42, 43, 48, 49, 50, 51, 52, 54, 55, 62, 66, 68, 70, 76, 77, 79, 80, 87, 89, 94, 98, 101, 104, 108, 116, 117, 133, 138, 150, 153, 154, 155, 157, 160, 161, 162, 163, 165, 168, 169, 170, 172, 176, 178, 179, 205, 206, 229, 272, 274, 275, 282, 291, 295, 299, 311, 323, 391, 392, 393, 394, 396, 397, 400, 404, 417, 436], "guarante": [0, 6, 81, 161, 167, 238, 248, 310, 315, 316, 322, 329], "futur": [0, 6, 132, 138, 144, 150, 153, 167, 173, 178, 180, 270], "toolkit": 0, "pleas": [0, 3, 19, 29, 30, 32, 33, 34, 35, 36, 49, 50, 52, 53, 58, 62, 64, 67, 71, 72, 75, 77, 98, 100, 102, 103, 105, 106, 111, 133, 139, 148, 153, 158, 160, 163, 168, 173, 180, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 437], "see": [0, 3, 6, 8, 9, 12, 13, 14, 15, 16, 20, 21, 22, 23, 26, 28, 30, 31, 34, 36, 39, 40, 41, 43, 46, 48, 49, 50, 51, 52, 54, 55, 56, 60, 64, 67, 71, 72, 74, 80, 83, 86, 89, 94, 99, 100, 102, 103, 106, 107, 113, 116, 117, 119, 125, 126, 132, 138, 139, 141, 145, 146, 148, 150, 153, 154, 155, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 173, 176, 178, 180, 182, 186, 187, 188, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 244, 250, 251, 252, 253, 254, 255, 256, 257, 258, 272, 274, 275, 282, 284, 289, 295, 300, 301, 304, 305, 306, 307, 308, 309, 310, 312, 314, 315, 316, 317, 318, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 378, 379, 385, 386, 388, 391, 392, 393, 400, 401, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 417, 418, 419, 423, 428, 429, 436, 437], "document": [0, 2, 3, 4, 6, 19, 26, 43, 44, 49, 50, 56, 98, 100, 103, 107, 114, 115, 116, 119, 121, 124, 126, 128, 130, 131, 132, 133, 138, 141, 143, 148, 149, 151, 153, 155, 157, 158, 159, 160, 161, 162, 163, 165, 166, 174, 175, 178, 180, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 436, 437], "how": [0, 1, 2, 3, 4, 5, 6, 9, 14, 19, 21, 26, 34, 40, 44, 47, 48, 49, 50, 53, 55, 56, 58, 61, 62, 64, 66, 67, 68, 70, 78, 79, 84, 86, 87, 88, 89, 91, 94, 95, 100, 103, 106, 107, 113, 116, 124, 133, 144, 145, 148, 149, 153, 155, 157, 158, 159, 160, 161, 163, 165, 167, 170, 173, 174, 175, 177, 179, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 437, 438], "introductori": [1, 113, 168], "exampl": [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 65, 66, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 111, 115, 116, 124, 125, 126, 131, 132, 133, 134, 135, 138, 139, 141, 143, 144, 147, 148, 149, 153, 158, 161, 162, 163, 164, 167, 168, 169, 170, 172, 176, 178, 194, 196, 211, 255, 272, 274, 275, 299, 320, 404, 406, 425, 426, 437, 438], "teach": [1, 113, 130, 141, 153, 168], "nilearn": [1, 2, 3, 6, 7, 8, 9, 10, 11, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 115, 116, 117, 118, 122, 123, 124, 125, 126, 128, 129, 131, 132, 133, 136, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 176, 178, 179, 180, 426, 436, 438], "numer": [1, 7, 29, 33, 35, 57, 113, 145, 153, 168, 169, 180, 190, 270, 272, 274, 275, 283, 391, 392, 418], "plot": [1, 2, 4, 7, 8, 19, 20, 21, 23, 25, 26, 27, 29, 30, 33, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 51, 52, 53, 54, 56, 57, 59, 61, 62, 63, 64, 65, 67, 69, 71, 72, 75, 76, 77, 78, 79, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 111, 113, 116, 119, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 158, 159, 160, 165, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 186, 195, 200, 202, 203, 208, 212, 213, 215, 218, 219, 222, 232, 238, 247, 282, 295, 301, 312, 313, 326, 333, 337, 415, 417, 421, 422, 423, 433, 437, 438], "python": [1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 116, 121, 123, 124, 133, 139, 140, 141, 146, 148, 153, 160, 167, 168, 174, 175, 176, 311, 437], "manipul": [1, 7, 55, 66, 89, 116, 133, 153, 175, 178, 317, 386, 398, 438], "look": [1, 6, 7, 23, 29, 32, 40, 44, 56, 65, 66, 69, 70, 72, 104, 113, 117, 138, 139, 149, 153, 160, 168, 169, 170, 175, 176, 180, 229, 231, 240, 317, 386, 398], "3d": [1, 3, 4, 6, 7, 8, 15, 16, 18, 19, 23, 24, 25, 27, 29, 30, 32, 34, 36, 37, 42, 44, 47, 71, 75, 77, 83, 84, 94, 96, 100, 102, 104, 105, 111, 113, 116, 121, 124, 128, 135, 137, 138, 139, 141, 145, 146, 150, 153, 170, 173, 174, 175, 177, 179, 180, 200, 202, 203, 206, 207, 208, 209, 230, 232, 238, 240, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 297, 299, 301, 302, 305, 307, 308, 309, 310, 319, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377, 379, 380, 385, 388, 389, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 408, 409, 413, 421, 423, 438], "4d": [1, 3, 4, 6, 7, 8, 11, 16, 18, 20, 25, 27, 29, 30, 31, 32, 34, 36, 41, 47, 48, 49, 52, 53, 54, 56, 58, 84, 85, 87, 89, 91, 92, 94, 95, 98, 100, 102, 104, 113, 115, 123, 124, 125, 128, 135, 138, 139, 144, 153, 155, 158, 159, 160, 163, 173, 175, 177, 180, 197, 199, 201, 202, 203, 207, 215, 219, 225, 232, 240, 254, 257, 258, 297, 299, 300, 301, 305, 306, 307, 308, 310, 312, 319, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 375, 376, 379, 391, 392, 393, 398, 400, 407, 409, 423, 429, 432, 436, 438], "niimg": [1, 7, 33, 54, 77, 79, 89, 91, 92, 98, 113, 116, 124, 125, 135, 138, 141, 146, 150, 153, 157, 175, 177, 179, 180, 207, 232, 240, 250, 251, 252, 253, 254, 255, 256, 257, 258, 277, 282, 285, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 378, 379, 385, 386, 388, 391, 392, 393, 398, 400, 401, 405, 406, 407, 409, 410, 411, 412, 413, 414, 416, 417, 419, 423, 425, 438], "handl": [1, 7, 49, 64, 113, 124, 125, 128, 134, 150, 153, 160, 175, 178, 179, 180, 207, 232, 240, 270, 274, 301, 307, 308, 309, 310, 315, 321, 323, 382, 393, 398, 406, 412], "visual": [1, 7, 12, 14, 27, 28, 32, 33, 39, 45, 47, 48, 50, 56, 64, 66, 69, 71, 72, 79, 80, 83, 86, 87, 88, 89, 91, 92, 94, 96, 101, 102, 104, 105, 106, 108, 114, 115, 124, 125, 133, 135, 138, 144, 146, 153, 154, 155, 156, 164, 168, 169, 172, 175, 177, 179, 195, 197, 198, 204, 207, 214, 218, 219, 223, 224, 226, 228, 232, 240, 301, 302, 305, 307, 308, 310, 312, 313, 315, 319, 326, 329, 332, 334, 337, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 382, 383, 384, 390, 391, 392, 393, 396, 397, 398, 438], "introduct": [1, 7, 113, 114, 123, 138, 153, 161, 163, 164, 168, 171, 172, 174, 180, 218, 250, 274, 275, 307, 312, 383, 392, 400, 438], "fmri": [1, 7, 15, 23, 25, 30, 31, 32, 33, 36, 40, 41, 44, 46, 55, 56, 59, 60, 61, 62, 63, 66, 70, 71, 73, 74, 81, 82, 85, 89, 91, 94, 97, 100, 101, 102, 108, 109, 113, 114, 116, 117, 129, 136, 141, 153, 157, 158, 159, 161, 163, 166, 167, 169, 172, 173, 174, 175, 178, 179, 180, 198, 199, 201, 207, 212, 215, 217, 218, 224, 225, 236, 250, 254, 257, 258, 277, 279, 282, 291, 295, 297, 298, 300, 301, 305, 307, 308, 311, 312, 323, 324, 326, 332, 337, 340, 343, 355, 363, 370, 378, 379, 381, 382, 383, 385, 386, 391, 392, 393, 398, 400, 405, 407, 415, 416, 417, 419, 420, 424, 438], "decod": [1, 7, 36, 39, 40, 42, 44, 45, 97, 109, 114, 116, 117, 124, 125, 133, 134, 138, 141, 144, 145, 146, 147, 148, 149, 153, 161, 165, 169, 173, 174, 175, 180, 218, 221, 228, 238, 282, 285, 301, 305, 307, 312, 326, 332, 333, 356, 382, 383, 390, 392, 393, 397, 398, 400, 415, 417, 422, 423, 437, 438], "intro": [1, 7, 66, 113, 175, 236, 282, 298, 301, 312, 378, 381, 382, 386, 393, 416], "glm": [1, 7, 28, 32, 42, 45, 61, 62, 63, 65, 66, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 100, 101, 108, 123, 125, 144, 145, 146, 148, 150, 153, 160, 169, 172, 173, 174, 175, 176, 218, 236, 250, 301, 307, 312, 319, 322, 378, 381, 382, 384, 386, 393, 415, 416, 417, 437, 438], "analysi": [1, 7, 15, 23, 28, 29, 34, 45, 48, 49, 63, 66, 68, 71, 73, 77, 78, 79, 80, 82, 95, 98, 109, 114, 115, 117, 154, 155, 159, 161, 164, 166, 171, 172, 173, 174, 175, 179, 180, 198, 201, 215, 216, 218, 221, 223, 224, 225, 227, 231, 234, 236, 238, 249, 250, 254, 257, 269, 270, 273, 274, 275, 278, 282, 285, 289, 291, 295, 298, 301, 305, 307, 310, 311, 312, 313, 319, 322, 323, 324, 325, 326, 332, 343, 356, 371, 378, 381, 382, 385, 386, 387, 388, 392, 393, 397, 398, 407, 415, 416, 417, 423, 433, 437, 438], "singl": [1, 3, 7, 14, 23, 30, 31, 46, 49, 59, 60, 64, 65, 66, 67, 68, 73, 77, 79, 86, 94, 100, 104, 113, 114, 117, 121, 144, 145, 146, 147, 150, 153, 154, 161, 165, 167, 168, 169, 175, 178, 180, 196, 215, 229, 236, 237, 247, 250, 251, 252, 253, 272, 274, 275, 282, 289, 295, 297, 298, 301, 312, 315, 326, 327, 328, 329, 330, 331, 332, 333, 356, 378, 381, 382, 386, 388, 390, 391, 393, 398, 400, 405, 407, 416, 436], "session": [1, 3, 7, 29, 34, 35, 36, 37, 60, 66, 67, 73, 102, 113, 116, 146, 148, 153, 154, 160, 161, 169, 170, 175, 178, 179, 217, 218, 228, 236, 237, 258, 282, 285, 289, 298, 300, 301, 312, 315, 320, 338, 340, 378, 381, 382, 386, 393, 398, 415, 416, 417, 437], "subject": [1, 3, 7, 11, 15, 16, 17, 18, 21, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 59, 60, 64, 65, 66, 69, 73, 75, 77, 78, 80, 85, 91, 94, 95, 99, 100, 101, 102, 104, 105, 106, 108, 110, 111, 113, 114, 116, 117, 123, 124, 125, 129, 131, 132, 141, 144, 151, 153, 155, 156, 157, 158, 160, 167, 169, 170, 172, 175, 177, 178, 179, 181, 184, 185, 186, 187, 188, 190, 194, 195, 196, 198, 204, 215, 218, 223, 224, 226, 227, 233, 236, 237, 238, 239, 249, 257, 258, 282, 285, 289, 295, 296, 298, 301, 312, 315, 320, 323, 324, 326, 327, 328, 329, 331, 332, 333, 338, 340, 356, 376, 378, 380, 381, 382, 386, 390, 393, 398, 405, 416, 436, 438], "dataset": [1, 3, 4, 7, 9, 10, 13, 14, 19, 20, 21, 22, 23, 24, 25, 26, 28, 40, 45, 47, 52, 54, 55, 56, 57, 60, 64, 66, 67, 69, 70, 71, 73, 74, 77, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 107, 109, 113, 114, 116, 117, 124, 125, 128, 129, 133, 137, 138, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 159, 160, 161, 164, 166, 169, 172, 173, 174, 175, 176, 177, 180, 250, 251, 252, 253, 256, 257, 270, 278, 282, 285, 289, 291, 295, 298, 299, 301, 302, 305, 307, 311, 312, 316, 320, 322, 324, 325, 326, 332, 333, 343, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 381, 382, 385, 386, 387, 388, 390, 393, 394, 395, 396, 397, 398, 400, 401, 408, 415, 416, 417, 423, 436, 438], "go": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 113, 115, 117, 134, 153, 154, 160, 164, 168, 172, 175, 176, 180, 231, 305, 310, 311, 313, 380, 385, 389, 393, 398, 400, 438], "end": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 135, 145, 153, 165, 167, 168, 179, 240, 321, 322, 418], "full": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 114, 121, 123, 153, 157, 158, 159, 161, 163, 165, 167, 168, 169, 173, 179, 180, 202, 203, 207, 212, 215, 218, 226, 250, 251, 252, 253, 257, 258, 264, 269, 272, 273, 274, 275, 282, 295, 297, 300, 317, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 390, 405, 407, 409, 415, 419], "code": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 114, 116, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 158, 159, 161, 163, 167, 169, 173, 180, 194, 254, 258, 282, 295, 328, 331, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 389, 407, 415, 417, 431, 433, 437], "run": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 111, 113, 116, 128, 132, 146, 148, 150, 153, 154, 155, 157, 161, 164, 165, 166, 167, 168, 169, 175, 176, 178, 180, 188, 190, 218, 224, 257, 258, 282, 285, 300, 324, 332, 343, 381, 404, 419, 436, 437, 438], "your": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 115, 117, 155, 159, 160, 161, 163, 165, 176, 178, 180, 185, 202, 203, 215, 220, 250, 251, 252, 253, 257, 258, 273, 329, 332, 405, 436, 438], "browser": [2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 138, 141, 143, 153, 180, 282, 295, 357, 399, 400, 401, 402, 403, 415, 417, 436], "via": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 114, 116, 119, 153, 155, 156, 160, 163, 166, 169, 178, 199, 255, 256, 282, 291, 335, 336, 337, 339, 340], "binder": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 143, 153], "here": [2, 3, 4, 6, 9, 14, 15, 19, 20, 23, 29, 30, 31, 32, 33, 34, 35, 36, 42, 43, 44, 48, 49, 54, 55, 56, 58, 61, 63, 64, 65, 66, 67, 69, 70, 75, 88, 89, 92, 94, 95, 98, 100, 101, 103, 104, 108, 114, 116, 117, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 172, 175, 176, 179, 180, 215, 255, 256, 272, 274, 275, 297, 336, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 358, 362, 363, 366, 367, 368, 369, 394, 396], "discov": [2, 168, 174], "come": [2, 3, 6, 16, 42, 52, 54, 58, 75, 80, 94, 116, 124, 153, 155, 160, 161, 167, 168, 175, 176, 179, 180, 215, 436], "function": [2, 3, 4, 6, 8, 9, 11, 13, 14, 15, 17, 18, 21, 22, 25, 26, 27, 29, 30, 32, 34, 35, 36, 43, 48, 49, 52, 53, 55, 56, 58, 59, 60, 64, 65, 66, 67, 69, 71, 72, 73, 74, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 102, 104, 108, 109, 111, 114, 116, 117, 119, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 153, 157, 160, 161, 164, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 266, 267, 268, 269, 270, 273, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 434, 435, 437, 438], "let": [2, 3, 4, 6, 15, 40, 49, 56, 64, 66, 69, 71, 75, 77, 78, 79, 86, 93, 98, 161, 175, 299, 311], "first": [2, 6, 11, 14, 16, 18, 20, 23, 25, 30, 32, 33, 35, 40, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 64, 65, 67, 70, 73, 75, 77, 80, 81, 84, 86, 89, 91, 92, 93, 94, 95, 97, 104, 105, 109, 114, 116, 117, 118, 124, 138, 139, 141, 144, 146, 148, 149, 151, 153, 154, 155, 157, 158, 159, 161, 163, 164, 167, 168, 170, 171, 172, 176, 177, 178, 179, 188, 190, 216, 217, 220, 221, 225, 226, 229, 231, 234, 238, 241, 242, 245, 249, 250, 251, 252, 253, 257, 258, 270, 278, 282, 285, 289, 291, 295, 297, 301, 306, 307, 316, 317, 320, 322, 323, 325, 328, 331, 332, 339, 343, 381, 382, 385, 387, 392, 393, 394, 395, 396, 397, 398, 403, 404, 405, 407, 415, 416, 417, 419, 423, 438], "check": [2, 3, 15, 29, 30, 32, 33, 34, 35, 36, 77, 93, 94, 98, 105, 111, 116, 124, 128, 131, 153, 155, 160, 163, 167, 168, 175, 176, 178, 180, 186, 187, 188, 190, 220, 240, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 283, 295, 310, 323, 326, 327, 328, 329, 330, 331, 332, 333, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 404, 405, 406, 407, 436], "where": [2, 6, 9, 15, 16, 23, 24, 40, 44, 50, 70, 77, 84, 87, 94, 100, 105, 113, 125, 131, 145, 153, 154, 158, 160, 165, 166, 168, 170, 173, 176, 179, 180, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 235, 236, 237, 238, 239, 240, 250, 251, 252, 253, 255, 256, 269, 272, 273, 274, 275, 278, 282, 295, 297, 334, 354, 356, 359, 361, 363, 365, 367, 369, 371, 375, 378, 381, 383, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 403, 407, 409, 416, 417, 423, 436], "disk": [2, 3, 4, 6, 101, 103, 107, 108, 116, 117, 123, 138, 144, 145, 150, 153, 160, 168, 178, 179, 180, 211, 221, 229, 231, 234, 250, 251, 259, 260, 261, 282, 295, 334, 394, 396, 397, 415, 417], "import": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 116, 117, 131, 137, 138, 139, 141, 146, 148, 153, 154, 155, 158, 160, 161, 162, 163, 165, 167, 168, 169, 172, 173, 175, 176, 178, 179, 180, 185, 270, 272, 274, 275, 282, 295, 299, 302, 307, 311, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 389, 417, 423, 436], "print": [2, 3, 4, 6, 9, 10, 11, 16, 18, 20, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 62, 64, 69, 70, 71, 72, 75, 77, 81, 85, 89, 91, 92, 93, 94, 95, 98, 101, 102, 103, 104, 105, 107, 108, 111, 116, 160, 167, 168, 175, 178, 188, 196, 257, 258, 282, 295, 307], "f": [2, 3, 4, 9, 10, 11, 16, 18, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 64, 66, 67, 69, 71, 72, 75, 77, 78, 79, 80, 81, 85, 88, 89, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 114, 125, 151, 153, 158, 160, 163, 165, 166, 169, 196, 207, 212, 214, 216, 219, 226, 234, 250, 251, 252, 253, 270, 271, 272, 274, 275, 278, 282, 283, 295, 315, 316, 322, 323, 324, 334, 342, 410, 413], "store": [2, 3, 26, 29, 44, 49, 50, 51, 52, 54, 70, 94, 101, 108, 117, 158, 160, 165, 168, 202, 203, 240, 259, 260, 272, 274, 275, 313, 334, 343, 387], "get_data_dir": [2, 131, 153, 178, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 235, 236, 237, 238, 239], "r": [2, 4, 9, 14, 15, 24, 30, 34, 40, 41, 47, 51, 56, 71, 94, 108, 114, 125, 141, 148, 153, 169, 176, 194, 199, 204, 206, 207, 210, 212, 216, 234, 255, 256, 282, 295, 300, 322, 323, 324, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 380, 383, 385, 386, 389, 391, 392, 393, 417, 419, 436], "home": [2, 3, 6, 10, 11, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 75, 77, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108, 175, 178, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 235, 236, 237, 238, 239, 240, 310], "runner": [2, 3, 6, 10, 11, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 75, 77, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108], "nilearn_data": [2, 3, 6, 10, 11, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 75, 77, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 235, 236, 237, 238, 239, 240], "now": [2, 3, 6, 14, 16, 20, 22, 25, 29, 40, 44, 49, 50, 51, 55, 56, 63, 65, 66, 71, 79, 81, 84, 86, 92, 93, 94, 100, 101, 103, 104, 108, 111, 116, 121, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 160, 166, 168, 176, 179, 250, 251, 252, 253, 257, 258, 269, 272, 273, 274, 275, 299, 307, 311, 327, 329, 330, 332, 405], "retriev": [2, 20, 22, 44, 48, 90, 91, 92, 116, 148, 153, 155, 160, 163, 174, 178, 180, 210, 236, 237, 240, 323, 324, 372, 373], "motor": [2, 14, 15, 16, 17, 51, 66, 69, 77, 79, 90, 91, 93, 97, 109, 113, 224, 247, 305, 326, 332, 343, 385, 436], "contrast": [2, 6, 8, 14, 15, 27, 33, 64, 65, 67, 68, 71, 75, 76, 77, 78, 79, 80, 81, 88, 90, 93, 101, 105, 106, 108, 113, 124, 125, 131, 135, 136, 145, 148, 151, 153, 159, 165, 170, 171, 172, 173, 222, 223, 224, 230, 232, 271, 272, 274, 275, 276, 278, 279, 280, 282, 295, 297, 322, 378, 381, 391, 392, 393, 398, 400, 404, 417, 436, 438], "neurovault": [2, 97, 109, 113, 114, 115, 134, 141, 146, 150, 153, 173, 229, 230, 231, 232, 241, 305, 310, 311, 313, 317, 326, 332, 385, 393, 398, 438], "repositori": [2, 114, 115, 168, 173, 176, 178, 219, 229, 231, 438], "motor_imag": [2, 436], "fetch_neurovault_motor_task": [2, 14, 138, 153, 230, 436], "imag": [2, 6, 10, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 62, 63, 64, 66, 67, 68, 70, 71, 75, 76, 77, 78, 79, 80, 84, 86, 87, 88, 89, 91, 92, 94, 96, 98, 100, 101, 102, 104, 105, 106, 108, 110, 112, 114, 115, 121, 123, 124, 125, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 145, 146, 147, 148, 149, 150, 151, 153, 155, 157, 158, 159, 160, 161, 165, 166, 168, 170, 173, 175, 177, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 215, 218, 219, 220, 222, 224, 225, 226, 228, 229, 230, 231, 232, 233, 236, 237, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 263, 264, 265, 266, 267, 277, 279, 282, 285, 295, 296, 297, 298, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 416, 417, 419, 420, 423, 429, 438], "collection_658": 2, "image_10426": [2, 14], "nii": [2, 3, 4, 6, 10, 11, 14, 16, 18, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 64, 75, 77, 85, 86, 89, 91, 92, 94, 95, 101, 102, 104, 105, 108, 116, 175, 178, 285, 320, 322, 323, 324, 394, 395, 396, 397, 403, 421], "gz": [2, 3, 4, 6, 10, 11, 14, 16, 18, 22, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 64, 75, 77, 85, 86, 89, 91, 92, 94, 95, 101, 102, 104, 105, 116, 175, 176, 178, 322, 323, 324, 394, 395, 396, 397, 403, 421, 422], "filenam": [2, 3, 4, 10, 15, 50, 55, 61, 94, 116, 131, 141, 148, 149, 151, 153, 155, 158, 159, 168, 178, 179, 202, 203, 234, 248, 250, 251, 252, 253, 255, 256, 259, 260, 261, 310, 322, 326, 329, 332, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 383, 391], "take": [2, 3, 4, 6, 9, 24, 29, 33, 40, 42, 43, 49, 50, 65, 66, 68, 69, 71, 72, 77, 79, 94, 98, 100, 103, 108, 116, 124, 135, 138, 141, 147, 153, 154, 155, 157, 160, 163, 165, 167, 168, 169, 170, 178, 180, 186, 220, 229, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 258, 282, 284, 289, 297, 342, 343, 347, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 405, 407, 409, 423, 434, 436], "tmap_filenam": [2, 88], "0": [2, 3, 4, 5, 6, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 114, 116, 154, 155, 158, 160, 166, 167, 168, 169, 170, 178, 179, 180, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 269, 270, 272, 273, 274, 275, 277, 279, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 306, 307, 309, 310, 311, 312, 313, 315, 316, 317, 319, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 378, 379, 380, 385, 389, 390, 391, 392, 393, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 416, 417, 419, 420, 423, 436, 437], "contain": [2, 3, 4, 6, 10, 11, 22, 23, 36, 40, 49, 52, 55, 62, 64, 69, 72, 79, 84, 86, 91, 94, 101, 106, 107, 108, 116, 117, 124, 125, 128, 133, 138, 141, 150, 153, 154, 160, 161, 164, 167, 168, 170, 173, 176, 178, 180, 186, 187, 188, 190, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 218, 228, 229, 230, 231, 232, 233, 239, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 263, 271, 272, 274, 275, 276, 282, 285, 295, 296, 297, 300, 301, 309, 315, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 343, 388, 389, 394, 395, 396, 397, 401, 403, 404, 405, 406, 407, 408, 410, 411, 415, 417, 419, 421, 422, 423, 428, 438], "easili": [2, 3, 9, 15, 23, 30, 31, 39, 49, 58, 94, 116, 117, 148, 153, 160, 161, 163, 165, 166, 167, 168, 169, 173, 176, 202, 203, 224, 295, 297], "statist": [2, 6, 8, 14, 22, 23, 27, 33, 36, 40, 42, 49, 64, 65, 66, 67, 69, 71, 74, 75, 82, 83, 96, 100, 101, 102, 103, 105, 108, 114, 115, 123, 126, 133, 134, 144, 146, 150, 153, 154, 159, 162, 165, 168, 169, 171, 173, 174, 175, 179, 180, 187, 190, 200, 208, 223, 229, 230, 231, 238, 247, 270, 271, 272, 274, 275, 276, 277, 278, 282, 295, 297, 298, 300, 319, 322, 343, 356, 357, 385, 388, 391, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 407, 409, 416, 417, 419, 421, 423, 432, 437, 438], "map": [2, 3, 8, 11, 14, 15, 19, 20, 22, 23, 27, 33, 37, 39, 44, 46, 50, 51, 52, 53, 54, 56, 59, 61, 62, 64, 66, 67, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 83, 84, 87, 89, 90, 91, 92, 93, 96, 97, 99, 101, 102, 104, 108, 109, 113, 114, 115, 124, 125, 126, 130, 133, 134, 138, 139, 141, 144, 145, 148, 153, 155, 156, 159, 161, 163, 164, 165, 168, 169, 170, 171, 173, 174, 175, 178, 179, 180, 186, 187, 188, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 215, 219, 222, 223, 224, 229, 230, 231, 232, 233, 238, 241, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 277, 278, 282, 291, 295, 297, 298, 300, 302, 308, 317, 319, 322, 326, 327, 328, 329, 330, 331, 332, 333, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 377, 379, 385, 386, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 414, 416, 417, 419, 421, 423, 432, 438], "plot_stat_map": [2, 6, 9, 15, 17, 29, 30, 31, 36, 39, 40, 42, 43, 48, 50, 55, 61, 64, 65, 66, 67, 70, 71, 75, 76, 77, 81, 85, 87, 88, 90, 92, 93, 94, 98, 100, 102, 103, 104, 106, 107, 116, 126, 137, 138, 145, 146, 148, 149, 151, 153, 158, 160, 172, 180, 400, 436], "displai": [2, 3, 4, 6, 10, 11, 13, 16, 17, 18, 20, 21, 22, 23, 25, 26, 39, 40, 42, 47, 48, 49, 50, 51, 55, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 75, 80, 81, 84, 86, 87, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 105, 106, 123, 130, 135, 136, 138, 139, 141, 145, 146, 148, 150, 153, 155, 158, 159, 165, 170, 174, 179, 282, 289, 295, 328, 331, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 407, 415, 417, 438], "_slicer": [2, 3, 4, 6, 9, 10, 15, 16, 17, 25, 39, 48, 49, 50, 64, 67, 70, 75, 81, 86, 88, 89, 92, 94, 98, 148, 153], "orthoslic": [2, 3, 4, 6, 10, 15, 16, 17, 25, 48, 50, 64, 67, 70, 75, 81, 86, 89, 94, 98, 148, 153, 354, 359, 361, 363, 365, 367, 369, 371, 373, 436], "object": [2, 3, 4, 5, 6, 9, 10, 13, 14, 15, 16, 17, 25, 28, 30, 32, 33, 36, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 64, 67, 70, 75, 81, 86, 88, 89, 91, 92, 94, 98, 113, 114, 116, 117, 124, 125, 130, 133, 141, 144, 147, 148, 150, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 165, 167, 168, 169, 173, 174, 175, 177, 179, 186, 187, 188, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 250, 251, 252, 253, 254, 255, 256, 257, 258, 264, 265, 266, 267, 272, 274, 275, 277, 282, 285, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 422, 423, 425, 428, 431, 436, 438], "0x7f651b9a69d0": 2, "better": [2, 3, 30, 33, 42, 43, 49, 66, 94, 100, 103, 114, 122, 124, 125, 129, 132, 138, 146, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 169, 179, 187, 391, 407, 423, 438], "threshold": [2, 3, 9, 13, 14, 16, 17, 23, 30, 33, 36, 37, 39, 40, 42, 48, 49, 50, 54, 55, 56, 61, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77, 79, 80, 81, 87, 88, 89, 90, 93, 94, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 114, 117, 125, 126, 139, 141, 145, 148, 150, 153, 155, 158, 167, 170, 171, 173, 179, 220, 241, 242, 245, 257, 277, 281, 282, 295, 297, 298, 299, 319, 323, 324, 336, 337, 338, 339, 340, 341, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 377, 378, 380, 385, 386, 388, 391, 392, 393, 394, 396, 397, 399, 400, 401, 403, 406, 407, 412, 416, 417, 436, 438], "3": [2, 3, 4, 6, 11, 12, 13, 14, 15, 16, 17, 20, 21, 23, 25, 27, 30, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 51, 52, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 77, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 102, 103, 105, 107, 108, 109, 111, 112, 114, 118, 122, 123, 128, 131, 132, 135, 138, 139, 140, 141, 146, 147, 148, 149, 158, 165, 166, 169, 170, 179, 180, 186, 187, 188, 190, 192, 193, 194, 198, 199, 201, 204, 205, 206, 208, 209, 210, 215, 216, 219, 226, 229, 231, 234, 238, 239, 250, 251, 252, 253, 254, 255, 256, 257, 258, 272, 274, 275, 277, 282, 284, 289, 295, 298, 307, 309, 311, 312, 315, 317, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 337, 338, 340, 342, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 378, 380, 383, 385, 386, 389, 391, 392, 393, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 412, 417, 423, 425, 436, 437], "0x7f651ba7d340": 2, "rest": [2, 3, 6, 21, 23, 30, 32, 33, 35, 41, 48, 50, 54, 55, 56, 62, 70, 85, 87, 89, 92, 98, 100, 111, 114, 125, 129, 133, 153, 157, 158, 159, 163, 167, 168, 173, 175, 178, 195, 197, 198, 207, 226, 239, 249, 258, 321, 323, 324, 332, 390, 407, 438], "network": [2, 8, 19, 20, 21, 27, 46, 47, 48, 51, 54, 55, 60, 72, 73, 83, 86, 94, 96, 101, 113, 114, 117, 130, 144, 150, 153, 154, 155, 156, 158, 168, 169, 173, 174, 175, 180, 195, 197, 198, 204, 206, 207, 210, 212, 213, 214, 224, 226, 282, 289, 307, 323, 324, 326, 331, 333, 356, 377, 389, 390, 391, 393, 398, 407, 415, 417, 436, 438], "smith": [2, 21, 83, 94, 96, 113, 114, 154, 173, 207, 226, 297, 307, 326, 331, 343, 377, 391, 393, 398, 407], "2009": [2, 21, 114, 122, 144, 147, 153, 173, 175, 200, 207, 219, 220, 226, 244, 297, 343], "correspond": [2, 3, 6, 14, 24, 29, 30, 33, 34, 36, 39, 40, 44, 49, 55, 56, 63, 65, 66, 69, 70, 72, 77, 78, 79, 80, 81, 86, 91, 92, 94, 101, 102, 108, 114, 125, 143, 145, 153, 155, 160, 161, 163, 165, 167, 168, 170, 173, 174, 176, 180, 186, 196, 201, 204, 207, 214, 220, 224, 231, 233, 241, 242, 245, 250, 251, 252, 253, 255, 256, 257, 258, 264, 278, 279, 282, 284, 285, 289, 291, 295, 296, 297, 311, 312, 315, 320, 327, 329, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 343, 372, 373, 378, 379, 383, 386, 387, 389, 391, 392, 393, 395, 405, 407, 408, 410, 411, 413, 416, 417, 423], "between": [2, 6, 9, 22, 23, 24, 30, 40, 42, 49, 50, 51, 55, 62, 66, 69, 71, 72, 75, 77, 79, 80, 86, 89, 92, 99, 100, 102, 105, 126, 133, 138, 141, 144, 147, 153, 154, 155, 156, 158, 160, 161, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 194, 206, 226, 244, 252, 253, 258, 282, 285, 295, 300, 337, 343, 344, 346, 347, 374, 378, 380, 385, 387, 389, 391, 392, 393, 394, 396, 397, 400, 401, 403, 405, 416, 417, 419, 423], "task": [2, 3, 17, 29, 30, 31, 34, 39, 48, 49, 60, 62, 66, 69, 73, 77, 81, 89, 92, 97, 103, 109, 113, 114, 138, 149, 153, 159, 160, 161, 164, 167, 169, 170, 173, 174, 175, 176, 180, 187, 190, 218, 221, 223, 224, 249, 282, 285, 301, 305, 320, 326, 332, 333, 343, 356, 371, 382, 384, 385, 393, 398], "rsn": [2, 21, 87, 133, 153, 197, 207], "fetch_atlas_smith_2009": [2, 21, 87, 124, 125, 153], "true": [2, 6, 9, 13, 14, 15, 16, 21, 22, 23, 25, 26, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 64, 67, 69, 70, 71, 74, 75, 77, 79, 80, 81, 82, 86, 87, 89, 91, 92, 94, 98, 99, 100, 101, 102, 103, 105, 108, 111, 113, 116, 117, 125, 133, 136, 141, 148, 153, 155, 158, 160, 163, 165, 167, 170, 172, 173, 180, 186, 187, 188, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 212, 213, 214, 215, 218, 219, 220, 222, 223, 224, 226, 227, 228, 229, 231, 233, 239, 250, 251, 252, 253, 254, 255, 256, 257, 258, 277, 282, 285, 295, 297, 298, 300, 301, 304, 306, 310, 315, 316, 319, 320, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 413, 416, 418, 419, 420, 436], "dimens": [2, 15, 21, 29, 33, 34, 40, 47, 49, 66, 87, 94, 116, 146, 151, 153, 164, 170, 173, 179, 180, 186, 192, 193, 201, 207, 226, 233, 250, 251, 252, 253, 257, 258, 270, 272, 274, 275, 282, 297, 300, 301, 307, 308, 311, 312, 317, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 376, 379, 390, 391, 405, 407, 419, 438], "smith_2009": 2, "pnas_smith09_rsn10": 2, "It": [2, 3, 6, 9, 14, 15, 16, 22, 34, 41, 42, 44, 48, 51, 61, 65, 66, 71, 75, 77, 81, 86, 89, 94, 98, 100, 101, 108, 115, 116, 117, 121, 128, 131, 132, 134, 145, 146, 147, 148, 153, 154, 155, 160, 161, 163, 164, 165, 167, 168, 170, 173, 174, 175, 176, 178, 179, 180, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 437], "nifti": [2, 4, 10, 11, 16, 18, 25, 29, 30, 32, 34, 35, 36, 41, 47, 48, 49, 52, 53, 54, 56, 58, 77, 79, 84, 86, 89, 91, 92, 94, 95, 102, 104, 105, 116, 126, 144, 150, 151, 153, 155, 159, 160, 168, 177, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 210, 215, 218, 222, 223, 224, 227, 228, 233, 250, 251, 255, 256, 257, 258, 301, 302, 305, 309, 310, 311, 315, 318, 383, 405, 408, 423, 436, 438], "load": [2, 4, 6, 8, 9, 21, 23, 27, 49, 52, 53, 54, 58, 61, 62, 64, 67, 69, 70, 77, 88, 89, 91, 93, 102, 103, 104, 105, 106, 107, 108, 113, 115, 123, 124, 125, 131, 133, 136, 138, 147, 148, 150, 153, 156, 159, 163, 164, 167, 168, 175, 177, 179, 194, 195, 198, 200, 202, 203, 204, 207, 208, 212, 213, 214, 215, 218, 219, 220, 223, 224, 227, 228, 229, 231, 233, 238, 239, 241, 242, 243, 244, 245, 246, 247, 257, 258, 259, 266, 267, 268, 285, 299, 310, 311, 313, 323, 324, 380, 396, 398, 399, 403, 421, 422, 428, 436, 438], "memori": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 130, 138, 139, 153, 157, 158, 167, 179, 180, 187, 238, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 270, 275, 282, 285, 295, 301, 305, 315, 316, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 401, 405, 406, 407, 418, 436], "its": [2, 3, 15, 19, 26, 29, 30, 31, 32, 33, 34, 35, 36, 40, 44, 56, 66, 69, 84, 88, 89, 90, 92, 94, 98, 100, 108, 116, 117, 130, 133, 141, 144, 146, 148, 150, 153, 154, 157, 159, 160, 161, 163, 165, 166, 167, 168, 170, 172, 173, 176, 180, 193, 206, 208, 218, 229, 230, 231, 232, 250, 251, 252, 253, 255, 256, 257, 258, 269, 273, 282, 284, 289, 295, 296, 297, 299, 310, 378, 379, 380, 383, 385, 386, 389, 391, 392, 393, 394, 395, 396, 397, 404, 405, 406, 407, 432], "shape": [2, 3, 20, 23, 25, 40, 41, 43, 47, 49, 50, 51, 53, 54, 55, 56, 58, 61, 64, 65, 66, 67, 68, 69, 71, 84, 91, 93, 94, 98, 100, 102, 103, 105, 106, 107, 108, 111, 116, 146, 147, 153, 155, 157, 158, 160, 163, 169, 170, 173, 175, 177, 180, 186, 187, 188, 190, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 227, 233, 250, 251, 252, 253, 255, 256, 257, 258, 263, 264, 265, 269, 270, 272, 273, 274, 275, 278, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 300, 301, 302, 305, 306, 307, 311, 312, 315, 316, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 380, 381, 389, 399, 402, 404, 405, 406, 407, 410, 411, 412, 413, 414, 419, 420, 438], "load_img": [2, 36, 93, 94, 107, 131, 153, 178, 179], "91": [2, 30, 33, 42, 43, 44, 56, 72, 77, 91, 102, 147, 153, 196, 207], "109": [2, 33, 41, 43, 56, 91, 147, 153, 196, 207], "note": [2, 3, 4, 6, 14, 15, 20, 23, 42, 43, 44, 48, 49, 52, 54, 55, 56, 58, 64, 65, 66, 67, 69, 70, 75, 76, 79, 84, 86, 91, 94, 95, 101, 102, 104, 108, 114, 116, 117, 124, 148, 153, 154, 155, 159, 165, 166, 167, 168, 169, 170, 176, 178, 179, 180, 186, 187, 188, 193, 194, 196, 197, 198, 201, 206, 207, 210, 215, 218, 219, 220, 222, 223, 226, 228, 229, 230, 231, 232, 233, 234, 240, 241, 242, 245, 250, 251, 252, 253, 254, 255, 256, 257, 258, 269, 272, 273, 274, 275, 282, 295, 298, 300, 306, 309, 311, 312, 315, 318, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 378, 379, 383, 385, 392, 393, 404, 405, 406, 407, 408, 419, 420, 423, 436], "index": [2, 6, 12, 20, 22, 23, 33, 40, 41, 50, 55, 56, 64, 65, 66, 69, 72, 87, 88, 100, 101, 103, 130, 148, 153, 158, 196, 197, 205, 206, 208, 216, 235, 249, 250, 251, 252, 253, 272, 274, 275, 289, 307, 315, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 395, 407, 409, 419, 423], "start": [2, 3, 6, 30, 40, 49, 56, 58, 69, 71, 84, 91, 94, 150, 153, 160, 167, 168, 173, 174, 176, 180, 198, 199, 207, 209, 279, 282, 284, 289, 326, 327, 328, 329, 330, 331, 332, 333, 343, 407, 423], "first_rsn": 2, "index_img": [2, 3, 20, 29, 30, 31, 32, 33, 34, 36, 37, 49, 50, 87, 89, 92, 98, 102, 104, 155, 158, 179, 180, 301, 308], "0x7f651db8c160": 2, "iter_img": [2, 48, 179, 307], "them": [2, 3, 6, 14, 19, 30, 32, 39, 42, 44, 49, 50, 54, 55, 58, 62, 64, 65, 67, 69, 71, 72, 79, 80, 86, 89, 94, 100, 103, 104, 108, 113, 116, 117, 121, 125, 126, 138, 144, 145, 147, 150, 153, 154, 155, 159, 161, 163, 168, 170, 173, 174, 175, 178, 180, 185, 196, 229, 231, 285, 342, 343, 405, 436], "Then": [2, 3, 14, 30, 40, 42, 50, 51, 55, 62, 63, 69, 94, 95, 158, 160, 162, 163, 168, 179, 180, 186, 188, 220, 404], "give": [2, 3, 4, 9, 14, 15, 16, 24, 29, 33, 42, 49, 52, 54, 55, 56, 58, 69, 84, 91, 94, 98, 103, 116, 124, 131, 133, 148, 153, 154, 155, 157, 159, 160, 161, 162, 163, 165, 167, 175, 179, 180, 222, 223, 231, 250, 251, 252, 253, 254, 257, 258, 269, 277, 282, 284, 289, 295, 297, 312, 317, 320, 327, 328, 329, 330, 331, 332, 333, 334, 341, 390, 395, 396, 404, 405, 407, 409, 413, 414, 423], "few": [2, 14, 15, 25, 39, 40, 49, 77, 81, 91, 102, 136, 137, 153, 159, 161, 164, 166, 168, 169, 176, 179, 405, 423, 438], "argument": [2, 6, 9, 14, 15, 17, 43, 48, 55, 68, 70, 80, 89, 92, 94, 117, 124, 125, 130, 131, 133, 134, 135, 136, 138, 139, 141, 144, 145, 146, 147, 148, 150, 151, 153, 160, 161, 163, 165, 167, 168, 169, 172, 178, 190, 194, 202, 203, 229, 240, 250, 251, 252, 253, 254, 285, 295, 297, 300, 311, 314, 324, 327, 328, 329, 330, 331, 332, 333, 339, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 384, 386, 388, 390, 396, 397, 401, 419, 436], "more": [2, 3, 4, 6, 8, 9, 13, 14, 16, 19, 21, 22, 23, 26, 27, 28, 29, 31, 33, 39, 40, 42, 43, 46, 48, 49, 50, 52, 54, 55, 56, 58, 60, 61, 62, 64, 66, 69, 70, 71, 74, 75, 77, 79, 80, 83, 86, 89, 91, 94, 98, 100, 101, 102, 103, 105, 107, 108, 113, 115, 116, 117, 119, 123, 124, 125, 127, 131, 133, 135, 137, 138, 141, 143, 147, 148, 149, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 173, 175, 176, 178, 179, 180, 187, 194, 196, 197, 198, 199, 204, 206, 207, 209, 210, 215, 218, 219, 220, 224, 226, 229, 231, 233, 238, 241, 242, 244, 245, 247, 249, 250, 251, 252, 253, 255, 256, 257, 258, 270, 272, 274, 275, 282, 295, 297, 301, 312, 320, 324, 327, 328, 329, 330, 331, 332, 333, 343, 354, 356, 359, 361, 363, 365, 367, 369, 371, 378, 391, 392, 393, 398, 400, 401, 404, 405, 406, 407, 409, 416, 418, 423, 426, 436, 437, 438], "compact": [2, 94, 179, 220], "img": [2, 4, 6, 10, 50, 62, 71, 77, 79, 84, 90, 101, 105, 111, 133, 141, 153, 158, 168, 178, 254, 257, 258, 264, 265, 295, 297, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 326, 327, 328, 329, 330, 331, 332, 333, 334, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 377, 379, 386, 387, 405, 407, 410, 411, 413, 414, 416, 423, 436], "display_mod": [2, 6, 9, 13, 14, 15, 18, 30, 31, 36, 39, 40, 42, 43, 48, 49, 53, 58, 62, 65, 66, 70, 71, 75, 76, 79, 87, 88, 92, 101, 102, 105, 106, 107, 116, 131, 148, 153, 282, 295, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 378, 380, 383, 385, 386, 389, 391, 392, 393, 417, 436], "z": [2, 13, 14, 15, 18, 24, 30, 33, 36, 40, 42, 43, 48, 52, 54, 58, 61, 62, 65, 66, 67, 69, 70, 71, 75, 76, 79, 80, 81, 84, 87, 88, 94, 101, 102, 105, 106, 108, 114, 133, 135, 139, 150, 153, 168, 170, 173, 176, 179, 180, 204, 229, 259, 270, 277, 279, 281, 282, 295, 298, 302, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 343, 344, 346, 347, 351, 352, 353, 354, 355, 362, 363, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 383, 385, 386, 389, 391, 392, 393, 394, 395, 396, 397, 400, 403, 407, 408, 416, 417, 419, 436], "cut_coord": [2, 6, 9, 15, 16, 17, 18, 20, 30, 31, 36, 39, 40, 42, 43, 48, 49, 50, 55, 61, 65, 66, 67, 70, 71, 75, 77, 79, 81, 86, 87, 88, 90, 92, 93, 94, 100, 102, 105, 106, 107, 123, 126, 153, 158, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 378, 383, 386, 391, 392, 393, 400, 417, 436], "1": [2, 3, 5, 6, 9, 10, 11, 12, 15, 18, 19, 22, 23, 24, 27, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 114, 116, 117, 123, 125, 126, 128, 132, 133, 135, 138, 140, 141, 148, 150, 154, 158, 160, 161, 162, 163, 165, 166, 167, 168, 170, 176, 178, 180, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 267, 269, 270, 272, 273, 274, 275, 277, 282, 285, 289, 291, 295, 297, 299, 300, 304, 307, 309, 312, 315, 317, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 379, 380, 385, 387, 389, 390, 391, 392, 394, 396, 397, 400, 401, 403, 404, 405, 406, 407, 412, 414, 416, 419, 420, 423, 436, 437], "colorbar": [2, 6, 9, 14, 20, 21, 23, 25, 26, 36, 37, 40, 48, 50, 51, 54, 57, 58, 62, 69, 70, 75, 76, 77, 79, 80, 86, 87, 88, 94, 101, 103, 105, 108, 121, 123, 130, 133, 138, 139, 141, 145, 146, 147, 148, 149, 153, 158, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 381, 383, 385, 386, 388, 389, 390, 391, 392, 393, 394, 396, 397, 399, 400, 401, 403, 436], "fals": [2, 6, 9, 14, 15, 17, 18, 20, 21, 22, 33, 34, 36, 37, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 62, 70, 72, 75, 76, 77, 79, 80, 81, 86, 87, 88, 89, 91, 92, 94, 99, 101, 102, 103, 105, 106, 117, 125, 141, 144, 145, 146, 148, 150, 153, 158, 165, 169, 170, 173, 180, 186, 187, 188, 190, 192, 194, 200, 201, 202, 203, 212, 213, 214, 215, 218, 224, 227, 229, 231, 233, 250, 251, 252, 253, 254, 255, 256, 257, 258, 277, 279, 282, 285, 295, 297, 298, 300, 301, 304, 313, 315, 316, 319, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 378, 380, 381, 383, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 413, 414, 416, 417, 418, 419, 436], "slice": [2, 3, 6, 9, 16, 36, 89, 94, 105, 116, 124, 137, 144, 146, 153, 165, 178, 180, 282, 285, 295, 307, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 386, 417, 438], "constructor": [2, 117, 274, 275, 307], "desir": [2, 62, 176, 180, 257, 258, 281, 282, 284, 289, 295, 298, 320, 372, 373, 381, 405], "afterward": [2, 167, 176], "ll": [2, 6, 49, 58, 255, 256], "follow": [2, 4, 9, 14, 18, 21, 22, 29, 32, 34, 35, 36, 40, 41, 42, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 66, 70, 72, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 111, 113, 116, 117, 135, 138, 139, 140, 141, 142, 143, 147, 153, 154, 155, 158, 159, 165, 168, 169, 170, 173, 175, 176, 178, 233, 238, 240, 300, 306, 320, 322, 323, 324, 328, 331, 335, 336, 337, 339, 340, 401, 407, 419, 420, 436, 437], "same": [2, 3, 6, 14, 15, 21, 23, 34, 37, 40, 41, 47, 49, 50, 55, 58, 63, 64, 66, 69, 70, 71, 84, 86, 88, 94, 98, 100, 101, 102, 108, 117, 125, 126, 133, 138, 144, 145, 146, 147, 148, 153, 154, 155, 158, 159, 160, 161, 165, 167, 168, 170, 172, 173, 178, 179, 180, 186, 187, 188, 190, 202, 203, 212, 214, 219, 220, 238, 250, 251, 252, 253, 255, 256, 257, 258, 282, 285, 295, 297, 300, 302, 311, 313, 315, 320, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 339, 341, 343, 349, 350, 351, 352, 353, 362, 363, 366, 367, 368, 369, 374, 378, 380, 381, 383, 385, 386, 390, 391, 392, 393, 401, 404, 405, 408, 413, 414, 416, 417, 419], "formula": [2, 129, 153, 167, 295, 297, 311, 381], "befor": [2, 15, 49, 55, 56, 89, 94, 98, 103, 116, 123, 125, 138, 141, 144, 146, 148, 150, 153, 157, 158, 160, 161, 163, 168, 169, 170, 172, 175, 176, 178, 179, 180, 190, 229, 231, 257, 258, 282, 284, 289, 300, 304, 306, 323, 324, 327, 328, 330, 331, 333, 379, 394, 396, 397, 401, 403, 405, 410, 411, 419, 420, 436], "selected_volum": 2, "5": [2, 3, 4, 6, 12, 18, 20, 22, 23, 24, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 79, 81, 88, 89, 91, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 114, 123, 128, 135, 141, 146, 147, 148, 149, 154, 158, 160, 165, 166, 167, 170, 179, 180, 197, 199, 202, 203, 205, 206, 209, 214, 215, 218, 219, 220, 224, 226, 228, 241, 244, 255, 256, 272, 274, 275, 300, 306, 307, 310, 323, 324, 336, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 391, 392, 394, 396, 397, 399, 401, 402, 403, 418, 419, 420, 423, 436], "re": [2, 6, 21, 23, 40, 65, 66, 69, 71, 84, 117, 147, 153, 168, 229, 241, 242, 243, 244, 245, 246, 272, 274, 275, 285, 408], "thing": [2, 3, 56, 66, 124, 153, 157, 166, 167, 168, 176, 180, 272, 300, 419, 436], "base": [2, 8, 20, 27, 28, 29, 34, 45, 47, 48, 49, 55, 60, 61, 66, 67, 71, 73, 74, 81, 82, 88, 89, 91, 92, 97, 98, 105, 109, 113, 114, 117, 123, 125, 129, 133, 141, 144, 146, 149, 153, 154, 155, 156, 157, 159, 160, 163, 165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 180, 187, 190, 195, 200, 206, 208, 215, 218, 219, 220, 221, 224, 225, 226, 229, 231, 233, 236, 237, 238, 239, 250, 251, 252, 253, 254, 256, 257, 258, 270, 278, 282, 285, 289, 291, 295, 297, 298, 299, 300, 301, 305, 307, 311, 316, 319, 322, 323, 324, 326, 332, 333, 337, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 382, 391, 392, 393, 396, 397, 398, 400, 404, 405, 407, 408, 409, 415, 417, 419, 420, 421, 422, 423, 436, 437, 438], "confirm": [2, 29, 125, 153, 168], "match": [2, 6, 15, 117, 124, 125, 141, 145, 146, 148, 153, 159, 165, 168, 173, 177, 180, 196, 207, 229, 249, 250, 251, 252, 253, 255, 256, 257, 258, 282, 285, 295, 297, 301, 310, 312, 315, 320, 322, 327, 328, 330, 331, 335, 337, 338, 340, 391, 405, 408, 438], "previou": [2, 9, 14, 41, 49, 54, 62, 66, 77, 94, 147, 148, 153, 154, 157, 161, 163, 167, 170, 190, 250, 251, 252, 253, 257, 258, 329, 332, 405], "abov": [2, 3, 4, 14, 21, 33, 42, 48, 49, 56, 66, 69, 86, 94, 100, 117, 133, 153, 154, 155, 157, 159, 160, 165, 167, 168, 169, 173, 178, 179, 180, 196, 220, 241, 242, 245, 250, 251, 252, 253, 255, 256, 269, 272, 273, 274, 275, 315, 316, 323, 327, 328, 329, 330, 331, 332, 333, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 391, 399, 401, 403, 405, 407, 418, 419], "show": [2, 4, 6, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 116, 133, 139, 144, 146, 148, 153, 154, 155, 158, 160, 161, 163, 165, 168, 170, 172, 179, 180, 218, 230, 247, 269, 282, 295, 354, 356, 357, 359, 361, 363, 365, 367, 369, 371, 395, 399, 402, 407, 417, 436], "forc": [2, 94, 111, 128, 153, 167, 180, 198, 207, 229, 230, 231, 232], "figur": [2, 4, 9, 12, 14, 15, 18, 22, 23, 24, 25, 30, 31, 32, 34, 35, 36, 40, 41, 42, 43, 44, 48, 49, 51, 52, 56, 57, 61, 62, 65, 66, 68, 70, 79, 84, 91, 94, 99, 100, 101, 105, 106, 108, 111, 125, 135, 144, 145, 148, 149, 150, 153, 168, 169, 170, 179, 322, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 436], "when": [2, 3, 4, 8, 9, 16, 24, 27, 54, 66, 67, 68, 69, 75, 89, 91, 92, 94, 100, 102, 105, 106, 113, 116, 117, 123, 124, 125, 126, 128, 132, 133, 134, 136, 139, 141, 144, 145, 148, 149, 150, 153, 154, 155, 157, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 172, 173, 176, 179, 186, 196, 199, 205, 206, 222, 224, 229, 231, 250, 251, 252, 253, 254, 255, 256, 270, 271, 275, 276, 279, 282, 295, 297, 315, 317, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 343, 344, 346, 347, 375, 381, 385, 386, 391, 392, 393, 394, 396, 397, 398, 400, 401, 403, 405, 410, 417, 418, 419, 423, 436], "outsid": [2, 4, 16, 66, 150, 153, 168, 175, 180, 315, 316, 330, 394, 396, 397, 403, 410, 411, 416, 423], "ipython": [2, 4, 16, 160, 175, 437], "recap": [2, 4], "call": [2, 4, 6, 14, 15, 16, 33, 43, 48, 49, 50, 52, 53, 56, 58, 66, 69, 72, 76, 81, 87, 89, 91, 94, 98, 104, 116, 117, 141, 151, 153, 154, 155, 157, 158, 160, 161, 165, 167, 168, 169, 170, 172, 173, 178, 180, 184, 186, 188, 190, 198, 210, 229, 231, 234, 256, 258, 271, 276, 282, 295, 300, 310, 327, 328, 329, 330, 331, 332, 333, 339, 379, 380, 389, 405, 419, 436], "differ": [2, 6, 9, 15, 19, 20, 21, 22, 23, 28, 29, 45, 46, 51, 52, 54, 55, 58, 59, 63, 66, 67, 68, 69, 70, 71, 72, 75, 79, 80, 81, 89, 91, 94, 98, 99, 100, 102, 103, 113, 114, 116, 123, 125, 139, 145, 147, 153, 155, 156, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 173, 177, 178, 186, 188, 201, 210, 215, 218, 241, 242, 243, 244, 245, 246, 250, 252, 253, 255, 256, 274, 275, 278, 282, 284, 285, 289, 291, 295, 301, 305, 307, 312, 320, 323, 326, 327, 328, 330, 331, 332, 342, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 378, 380, 383, 385, 386, 390, 391, 392, 393, 398, 405, 407, 416, 417, 423, 438], "flavor": 2, "onli": [2, 3, 6, 13, 14, 19, 29, 31, 32, 33, 34, 36, 37, 40, 42, 43, 49, 51, 52, 54, 55, 58, 66, 69, 75, 79, 81, 84, 86, 91, 94, 98, 99, 100, 101, 103, 104, 108, 116, 117, 124, 131, 136, 141, 146, 148, 149, 153, 154, 155, 157, 158, 160, 161, 162, 163, 165, 167, 168, 170, 172, 173, 177, 178, 179, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 436, 438], "multipl": [2, 6, 19, 42, 47, 77, 79, 81, 101, 124, 144, 145, 153, 156, 161, 163, 165, 168, 171, 173, 177, 178, 179, 198, 199, 207, 249, 272, 290, 295, 297, 307, 310, 311, 329, 343, 354, 356, 359, 373, 378, 383, 386, 388, 391, 392, 393, 400, 436, 438], "detail": [2, 3, 8, 9, 12, 14, 15, 16, 19, 22, 23, 26, 28, 29, 31, 33, 39, 46, 48, 50, 52, 54, 58, 60, 62, 64, 67, 71, 72, 74, 81, 83, 95, 100, 101, 102, 103, 107, 113, 116, 117, 119, 133, 138, 141, 150, 153, 154, 157, 158, 160, 161, 162, 163, 165, 166, 167, 168, 171, 176, 177, 178, 180, 182, 186, 194, 198, 202, 203, 206, 215, 220, 224, 226, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 257, 258, 275, 282, 295, 300, 304, 312, 317, 318, 324, 326, 327, 328, 329, 330, 331, 332, 333, 343, 401, 404, 405, 407, 409, 428, 429, 436, 437], "input": [2, 3, 4, 6, 9, 14, 15, 23, 32, 43, 48, 49, 54, 55, 57, 64, 67, 68, 71, 76, 77, 79, 80, 85, 88, 89, 92, 94, 98, 108, 116, 124, 125, 127, 128, 131, 132, 133, 134, 136, 137, 138, 141, 145, 147, 148, 149, 150, 153, 157, 160, 163, 165, 167, 168, 169, 173, 177, 179, 180, 186, 187, 188, 189, 190, 191, 192, 193, 198, 199, 207, 225, 226, 250, 251, 252, 253, 254, 255, 256, 257, 258, 277, 279, 281, 282, 284, 289, 290, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 378, 379, 385, 386, 388, 391, 392, 393, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 419, 423, 436, 438], "format": [2, 49, 100, 116, 124, 125, 145, 148, 150, 153, 168, 169, 180, 186, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 383, 385, 386, 392, 393, 394, 395, 396, 397, 402, 403, 404, 405, 406, 407, 421, 422, 423, 427], "given": [2, 3, 9, 14, 16, 44, 47, 50, 53, 54, 64, 65, 66, 69, 71, 79, 84, 86, 94, 95, 100, 104, 124, 130, 132, 136, 141, 150, 153, 154, 157, 160, 161, 163, 165, 166, 167, 168, 170, 173, 175, 176, 180, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 202, 203, 223, 224, 226, 227, 233, 239, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 269, 270, 272, 273, 274, 275, 278, 279, 282, 285, 289, 295, 296, 297, 299, 301, 306, 309, 312, 315, 317, 319, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 380, 383, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 420], "section": [2, 3, 4, 14, 39, 47, 48, 49, 56, 70, 94, 98, 100, 114, 115, 116, 124, 133, 138, 148, 153, 154, 155, 157, 158, 160, 161, 163, 165, 168, 170, 172, 176, 177, 180, 182, 229, 233, 344, 374, 378, 380, 383, 385, 386, 389, 391, 392, 393, 404, 415, 428, 429, 436], "name": [2, 3, 4, 6, 11, 14, 21, 22, 23, 26, 30, 32, 44, 51, 58, 62, 65, 72, 75, 76, 77, 79, 80, 91, 94, 100, 101, 103, 108, 116, 123, 125, 130, 139, 141, 146, 148, 150, 153, 157, 161, 165, 168, 169, 173, 175, 176, 177, 180, 186, 187, 188, 196, 197, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 212, 214, 224, 229, 231, 234, 235, 236, 237, 238, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 280, 282, 283, 284, 285, 289, 295, 297, 300, 311, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 404, 405, 406, 407, 408, 410, 417, 419, 438], "accept": [2, 3, 47, 65, 123, 124, 132, 133, 135, 138, 139, 141, 144, 145, 146, 147, 148, 149, 150, 153, 168, 169, 178, 295, 297, 298, 320, 334, 335, 336, 337, 338, 339, 340, 378, 388, 390, 391, 392, 393, 400, 402, 413, 414], "either": [2, 4, 9, 32, 35, 36, 39, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 116, 138, 145, 147, 153, 155, 157, 168, 169, 172, 173, 178, 180, 205, 206, 207, 210, 218, 272, 274, 275, 282, 295, 298, 299, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 378, 379, 380, 383, 384, 385, 388, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 403, 407, 417, 421, 422, 423, 436, 437], "hand": [2, 66, 69, 94, 167, 168, 178, 180, 239], "break": [2, 83, 96, 111, 113, 133, 153, 157, 165, 168, 210, 392, 398, 408], "down": [2, 70, 103, 157, 167, 168, 252], "other": [2, 4, 14, 23, 24, 31, 33, 36, 39, 40, 48, 56, 66, 69, 70, 94, 98, 100, 103, 104, 115, 116, 124, 138, 141, 145, 153, 154, 155, 160, 161, 162, 164, 165, 167, 168, 169, 173, 176, 178, 180, 186, 187, 188, 215, 229, 235, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 272, 274, 275, 282, 284, 285, 289, 295, 297, 320, 321, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 339, 343, 398, 404, 405, 406, 407, 436, 438], "concat_img": [2, 6, 11, 70, 71, 100, 132, 153, 179, 307], "group": [2, 3, 6, 29, 30, 32, 33, 46, 57, 58, 59, 62, 74, 76, 77, 78, 79, 80, 97, 98, 101, 104, 105, 109, 113, 114, 135, 141, 153, 155, 156, 159, 160, 165, 170, 172, 173, 174, 175, 186, 187, 188, 198, 199, 204, 212, 214, 215, 226, 232, 250, 251, 252, 253, 254, 257, 258, 308, 320, 323, 326, 331, 343, 376, 379, 380, 390, 391, 393, 398, 412, 438], "total": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 156, 158, 160, 166, 205, 215, 256, 264, 265, 337, 338, 340, 391, 408, 438], "script": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 147, 153, 162, 168, 178, 179, 180, 436, 437], "minut": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 170, 224], "15": [2, 6, 7, 24, 30, 33, 36, 42, 43, 44, 48, 49, 50, 51, 59, 61, 62, 66, 72, 77, 78, 84, 91, 94, 102, 103, 105, 107, 114, 118, 122, 125, 134, 138, 148, 153, 186, 196, 208, 330, 331, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 379, 410, 411], "037": [2, 7, 41, 114], "second": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 111, 114, 125, 153, 157, 158, 166, 167, 168, 170, 171, 173, 180, 221, 223, 224, 238, 250, 251, 252, 253, 255, 256, 270, 277, 278, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 300, 305, 311, 319, 322, 327, 328, 329, 330, 331, 332, 333, 343, 355, 356, 370, 379, 382, 385, 387, 393, 394, 395, 396, 397, 398, 403, 405, 407, 415, 416, 417, 418, 419, 423, 438], "estim": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 63, 65, 68, 70, 71, 72, 75, 78, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 102, 103, 104, 105, 106, 107, 108, 111, 113, 114, 116, 123, 125, 136, 144, 145, 150, 151, 153, 154, 159, 162, 164, 165, 168, 170, 172, 173, 175, 176, 185, 186, 187, 188, 190, 206, 210, 226, 233, 250, 251, 252, 253, 254, 255, 256, 257, 258, 269, 270, 272, 273, 274, 275, 278, 279, 282, 295, 297, 301, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 343, 390, 398, 404, 405, 406, 407, 430, 438], "usag": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 132, 141, 145, 150, 153, 154, 168, 169, 172, 175, 176, 177, 226, 233, 238, 401, 426, 438], "128": [2, 33, 41, 48, 63, 66, 69, 84, 92, 104, 105, 108, 145, 153, 201], "mb": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112], "sourc": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 154, 155, 159, 167, 168, 176, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 437], "plot_3d_and_4d_niimg": [2, 7], "py": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 124, 125, 141, 146, 147, 148, 150, 153, 168, 176, 180], "jupyt": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 139, 141, 153, 160, 175, 180, 282, 295, 399, 400, 401, 402, 403, 415, 417, 436], "notebook": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 126, 138, 141, 153, 160, 175, 180, 282, 295, 324, 399, 400, 401, 402, 403, 415, 417, 436], "ipynb": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111], "galleri": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 125, 126, 128, 132, 133, 135, 153, 168, 436], "sphinx": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 126, 128, 132, 133, 135, 153, 168], "simpl": [3, 5, 25, 29, 31, 35, 37, 40, 47, 56, 60, 65, 67, 71, 73, 75, 76, 77, 79, 80, 83, 84, 87, 89, 91, 94, 96, 98, 100, 101, 113, 114, 116, 117, 131, 133, 138, 148, 153, 154, 155, 161, 163, 164, 167, 168, 169, 172, 173, 175, 179, 180, 186, 187, 188, 215, 217, 224, 250, 251, 252, 253, 254, 255, 256, 257, 258, 270, 273, 282, 295, 307, 312, 324, 326, 327, 328, 329, 330, 331, 332, 333, 379, 392, 393, 398, 404, 405, 406, 407, 415, 417, 438], "reproduc": [3, 32, 40, 41, 48, 51, 72, 98, 100, 114, 174, 224, 252, 253], "2001": [3, 31, 38, 98, 102, 114, 116, 164, 174, 178, 196, 218, 343, 438], "v": [3, 6, 24, 28, 35, 45, 51, 65, 66, 76, 79, 80, 89, 97, 98, 109, 113, 114, 124, 153, 160, 161, 165, 167, 168, 174, 176, 209, 214, 218, 219, 222, 224, 229, 231, 232, 244, 250, 252, 254, 256, 305, 307, 310, 312, 313, 323, 326, 332, 343, 371, 386, 390, 393, 398, 400, 420], "discrimin": [3, 29, 31, 51, 94, 99, 116, 160, 174, 175], "mask": [3, 8, 15, 23, 27, 29, 30, 31, 33, 34, 35, 39, 40, 42, 43, 44, 47, 48, 49, 54, 55, 56, 64, 67, 70, 75, 77, 79, 83, 91, 92, 96, 102, 104, 105, 106, 111, 113, 115, 117, 123, 124, 131, 132, 133, 135, 138, 141, 144, 146, 147, 148, 151, 153, 157, 161, 164, 166, 174, 175, 177, 178, 187, 215, 218, 219, 220, 224, 228, 229, 241, 242, 245, 250, 251, 252, 253, 255, 256, 257, 258, 277, 279, 282, 295, 297, 298, 299, 300, 305, 306, 307, 310, 312, 313, 317, 319, 323, 326, 327, 328, 329, 330, 331, 332, 333, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 377, 378, 379, 383, 385, 387, 388, 392, 393, 398, 405, 406, 407, 409, 410, 411, 412, 415, 417, 419, 423, 428, 436, 438], "ventral": [3, 16, 22, 32, 33, 38, 94, 98, 114, 116, 160, 174, 180, 218, 394, 396, 397], "stream": [3, 32, 116, 174, 180], "j": [3, 22, 23, 37, 41, 47, 49, 56, 68, 71, 76, 84, 98, 100, 102, 114, 117, 135, 138, 147, 153, 161, 162, 165, 166, 198, 200, 201, 204, 205, 206, 208, 209, 213, 214, 216, 219, 224, 226, 227, 228, 229, 231, 234, 244, 252, 253, 257, 277, 297, 300, 323, 324, 343, 379, 419, 420, 436], "et": [3, 22, 23, 28, 44, 45, 48, 51, 58, 66, 72, 98, 99, 100, 102, 113, 133, 138, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 166, 180, 196, 205, 208, 212, 213, 214, 218, 227, 228, 250, 253, 256, 300, 302, 307, 319, 326, 329, 332, 343, 371, 393, 398], "al": [3, 22, 23, 28, 44, 45, 48, 51, 58, 66, 72, 98, 99, 100, 102, 113, 133, 138, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 166, 180, 196, 205, 208, 212, 213, 214, 218, 227, 228, 250, 253, 256, 300, 302, 307, 319, 326, 329, 332, 343, 371, 393, 398], "distribut": [3, 6, 14, 15, 22, 23, 32, 38, 48, 49, 55, 79, 94, 98, 114, 145, 149, 153, 160, 165, 167, 170, 173, 208, 218, 270, 297, 343, 387], "overlap": [3, 32, 38, 54, 58, 89, 91, 92, 98, 114, 123, 125, 153, 168, 173, 180, 218, 226, 327, 328, 330, 331, 333, 391], "represent": [3, 16, 32, 33, 36, 38, 52, 53, 56, 58, 62, 75, 77, 84, 94, 98, 100, 104, 114, 116, 156, 159, 165, 173, 177, 179, 214, 218, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 300, 301, 304, 305, 306, 307, 308, 309, 310, 312, 314, 315, 316, 317, 318, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 378, 379, 385, 386, 388, 391, 392, 393, 400, 401, 405, 407, 410, 411, 413, 414, 417, 423, 438], "tempor": [3, 6, 16, 32, 33, 38, 51, 55, 66, 68, 91, 94, 98, 101, 103, 114, 116, 138, 146, 153, 159, 160, 173, 177, 199, 218, 258, 282, 286, 287, 288, 289, 291, 292, 293, 294, 300, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 407, 419, 438], "cortex": [3, 23, 32, 33, 38, 55, 58, 61, 69, 71, 75, 79, 80, 91, 98, 114, 158, 160, 165, 169, 170, 200, 206, 210, 212, 218, 226, 228], "vol": [3, 48, 49, 98, 159, 254], "293": [3, 33, 41, 66, 72, 98, 114, 218], "p": [3, 6, 37, 42, 48, 62, 64, 67, 72, 75, 76, 77, 79, 80, 81, 94, 98, 101, 102, 105, 106, 108, 114, 145, 153, 159, 165, 167, 170, 186, 187, 190, 194, 199, 207, 209, 219, 226, 269, 270, 278, 282, 295, 297, 298, 300, 322, 343, 416, 417, 419], "2425": [3, 98, 114, 218], "2430": [3, 98, 102, 114, 218], "meant": [3, 6, 104, 111, 193, 270, 415], "variou": [3, 20, 30, 31, 39, 48, 105, 106, 141, 144, 148, 153, 160, 162, 163, 168, 170, 173, 179, 198, 252, 253, 324, 405, 423], "step": [3, 11, 20, 33, 35, 37, 42, 44, 47, 49, 50, 55, 58, 61, 62, 64, 65, 66, 69, 79, 80, 89, 94, 98, 101, 108, 116, 123, 136, 144, 150, 153, 154, 157, 158, 159, 160, 162, 163, 165, 167, 168, 173, 176, 177, 178, 179, 188, 195, 220, 233, 242, 245, 252, 253, 257, 258, 282, 285, 297, 324, 326, 329, 332, 335, 336, 337, 339, 340, 405, 419, 438], "minimalist": 3, "strive": 3, "didact": [3, 131, 153, 161, 163, 168], "copi": [3, 33, 36, 40, 53, 88, 100, 111, 113, 116, 141, 153, 167, 168, 178, 233, 234, 257, 258, 303, 304, 305, 315, 316, 319, 326, 329, 332, 418], "analyz": [3, 33, 49, 60, 74, 94, 113, 159, 168, 170, 173, 175, 177, 343, 438], "mani": [3, 10, 11, 15, 23, 36, 38, 39, 41, 42, 43, 48, 49, 51, 56, 71, 79, 86, 94, 98, 99, 100, 106, 117, 146, 153, 156, 157, 158, 160, 161, 162, 163, 166, 167, 168, 170, 173, 176, 179, 180, 188, 229, 231, 250, 251, 252, 253, 254, 297, 304, 343, 388, 413, 414, 423, 436], "unnecessari": [3, 275], "fetch_haxbi": [3, 15, 16, 18, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 94, 98, 102, 116, 132, 153, 160, 168, 178], "directori": [3, 6, 62, 64, 94, 101, 108, 113, 157, 168, 178, 187, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 249, 250, 251, 252, 253, 255, 256, 257, 258, 282, 285, 295, 301, 320, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 387, 405, 406, 407], "while": [3, 4, 6, 48, 55, 56, 66, 84, 94, 98, 100, 101, 103, 108, 116, 123, 125, 126, 136, 138, 153, 159, 160, 165, 167, 168, 169, 175, 179, 180, 198, 250, 251, 252, 253, 289, 343], "310": [3, 33, 36, 41, 42, 44, 102], "mo": 3, "internet": [3, 49, 159, 177, 182, 438], "By": [3, 14, 15, 25, 29, 33, 35, 70, 71, 145, 153, 161, 168, 176, 180, 187, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 235, 236, 237, 238, 239, 240, 250, 251, 252, 253, 255, 256, 257, 258, 282, 295, 301, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 378, 383, 386, 387, 389, 391, 392, 393, 400, 405, 406, 407, 410, 436], "default": [3, 8, 9, 14, 15, 23, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 42, 55, 56, 60, 62, 66, 73, 79, 83, 89, 94, 96, 102, 103, 113, 117, 123, 124, 125, 126, 128, 131, 132, 137, 138, 139, 141, 144, 145, 146, 147, 148, 150, 153, 160, 161, 165, 167, 168, 169, 178, 179, 180, 186, 187, 188, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 264, 269, 270, 272, 273, 274, 275, 277, 278, 279, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 304, 306, 307, 310, 312, 313, 314, 315, 316, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 423, 436], "2nd": [3, 25, 29, 30, 32, 33, 34, 35, 36, 37, 218], "fetch": [3, 9, 14, 19, 24, 29, 30, 32, 34, 35, 36, 37, 41, 58, 71, 85, 86, 87, 88, 91, 94, 103, 117, 124, 132, 133, 135, 137, 141, 153, 156, 159, 168, 177, 194, 201, 207, 215, 216, 219, 222, 223, 224, 227, 229, 230, 231, 232, 233, 236, 238, 438], "haxby_dataset": [3, 15, 16, 18, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 94, 98, 102, 116, 160, 178, 180], "func": [3, 6, 11, 15, 16, 18, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 64, 65, 66, 67, 70, 85, 89, 91, 92, 94, 95, 98, 99, 100, 101, 102, 104, 108, 116, 146, 153, 158, 168, 169, 178, 180, 195, 215, 218, 228, 236, 320, 323, 324], "one": [3, 4, 6, 9, 14, 15, 16, 20, 24, 29, 30, 31, 33, 35, 36, 40, 44, 47, 48, 49, 55, 56, 57, 58, 64, 66, 69, 70, 71, 72, 74, 77, 78, 80, 81, 82, 86, 91, 92, 94, 100, 101, 103, 105, 108, 113, 116, 117, 123, 124, 130, 132, 135, 144, 146, 147, 148, 153, 154, 155, 158, 159, 160, 161, 165, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 180, 186, 188, 194, 198, 199, 205, 206, 207, 214, 220, 224, 227, 238, 250, 251, 252, 253, 255, 257, 258, 264, 270, 282, 284, 285, 289, 291, 295, 296, 297, 300, 301, 302, 304, 305, 307, 311, 315, 320, 322, 327, 330, 332, 342, 343, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 380, 381, 385, 388, 389, 390, 391, 395, 396, 398, 400, 401, 405, 409, 410, 416, 419, 423, 437, 438], "each": [3, 6, 14, 15, 20, 21, 22, 24, 29, 34, 36, 37, 39, 40, 47, 48, 49, 50, 51, 55, 56, 58, 61, 62, 64, 70, 71, 78, 80, 86, 88, 94, 98, 99, 100, 101, 102, 105, 108, 117, 133, 138, 139, 141, 144, 146, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 173, 175, 176, 178, 179, 180, 186, 187, 188, 190, 197, 208, 214, 215, 226, 229, 231, 239, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 264, 265, 272, 274, 275, 282, 284, 285, 289, 295, 297, 300, 306, 312, 317, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 338, 340, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 378, 380, 383, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 404, 405, 406, 407, 408, 409, 410, 411, 413, 417, 419, 420, 422, 423, 436], "fmri_filenam": [3, 36, 37, 56, 94, 98, 116], "basic": [3, 7, 8, 11, 15, 16, 18, 25, 27, 29, 30, 32, 34, 35, 36, 41, 42, 48, 49, 52, 53, 56, 58, 69, 71, 75, 77, 85, 89, 91, 92, 94, 95, 98, 100, 102, 104, 105, 106, 167, 169, 170, 173, 175, 176, 180, 202, 203, 295, 297, 317, 323, 324, 381, 386, 392, 398], "inform": [3, 6, 9, 11, 16, 18, 21, 23, 25, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 48, 49, 51, 52, 53, 58, 61, 62, 66, 68, 72, 75, 77, 78, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108, 114, 116, 117, 121, 124, 135, 139, 149, 153, 154, 155, 158, 159, 160, 162, 164, 167, 168, 169, 172, 173, 175, 176, 178, 180, 186, 187, 188, 196, 197, 198, 199, 204, 206, 207, 209, 210, 218, 219, 226, 227, 228, 229, 231, 233, 241, 242, 244, 245, 250, 251, 252, 253, 254, 255, 256, 257, 258, 275, 282, 295, 297, 309, 315, 321, 322, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407, 417, 418, 419, 426, 437, 438], "haxby2001": [3, 16, 18, 25, 29, 30, 32, 34, 35, 36, 94, 102, 116, 178, 218], "subj2": [3, 16, 18, 25, 29, 30, 32, 34, 35, 36, 94, 102, 116], "bold": [3, 6, 16, 18, 25, 29, 30, 32, 34, 35, 36, 48, 65, 66, 76, 79, 94, 100, 101, 102, 108, 114, 116, 117, 125, 141, 145, 153, 159, 160, 169, 171, 173, 178, 201, 218, 228, 285, 320, 323, 324, 420, 438], "One": [3, 6, 14, 34, 35, 48, 49, 56, 64, 71, 79, 146, 153, 154, 155, 160, 161, 165, 167, 169, 170, 172, 176, 178, 180, 282, 315, 324, 328, 329, 331, 410], "wai": [3, 6, 33, 61, 62, 64, 66, 75, 76, 84, 98, 108, 114, 116, 117, 145, 146, 148, 153, 154, 156, 159, 160, 161, 163, 166, 167, 168, 169, 170, 173, 178, 180, 231, 252, 253, 272, 274, 275, 320, 379, 404, 436, 437], "plot_epi": [3, 25, 49, 89, 94, 95, 145, 148, 153, 393, 436], "becaus": [3, 6, 11, 15, 18, 30, 31, 32, 36, 39, 42, 43, 44, 54, 66, 70, 71, 79, 84, 101, 102, 123, 141, 153, 155, 160, 165, 167, 168, 170, 176, 229, 255, 256, 388, 394, 396, 397, 401, 403, 423], "thei": [3, 6, 24, 39, 42, 44, 49, 65, 66, 69, 71, 94, 98, 108, 111, 116, 117, 124, 148, 150, 153, 159, 162, 163, 165, 167, 168, 170, 173, 175, 176, 178, 180, 210, 218, 229, 234, 282, 285, 295, 297, 301, 315, 333, 381, 408, 436], "consist": [3, 6, 34, 40, 44, 66, 69, 108, 116, 124, 125, 131, 137, 138, 139, 148, 153, 160, 161, 164, 165, 167, 168, 170, 173, 188, 198, 226, 256, 285, 327, 330, 404, 406, 409], "epi": [3, 6, 11, 15, 25, 30, 31, 92, 94, 95, 104, 173, 175, 179, 180, 250, 251, 252, 253, 257, 258, 329, 332, 337, 383, 393, 405, 436], "cannot": [3, 9, 10, 11, 36, 48, 49, 51, 56, 79, 86, 92, 94, 102, 117, 138, 150, 153, 154, 160, 163, 168, 180, 188, 400, 401, 403], "directli": [3, 6, 32, 33, 47, 48, 51, 64, 86, 89, 108, 130, 134, 136, 138, 153, 157, 160, 163, 168, 170, 178, 180, 229, 285, 343, 391], "just": [3, 4, 6, 14, 16, 21, 40, 42, 44, 49, 50, 51, 56, 58, 65, 66, 71, 75, 76, 77, 79, 81, 87, 91, 98, 100, 101, 111, 116, 130, 153, 158, 160, 167, 170, 175, 176, 180, 282, 295, 300, 317, 320, 323, 391, 392, 393, 400, 417, 419, 423, 436], "mean_img": [3, 6, 15, 16, 18, 25, 30, 31, 33, 36, 49, 64, 67, 70, 71, 85, 89, 92, 94, 95, 102, 104, 111, 179, 311], "view_img": [3, 29, 138, 139, 147, 150, 153, 160, 436], "none": [3, 14, 15, 32, 33, 36, 40, 43, 44, 49, 52, 53, 54, 56, 58, 62, 66, 68, 77, 79, 89, 91, 92, 94, 95, 100, 103, 107, 111, 117, 124, 128, 138, 141, 145, 150, 153, 168, 180, 186, 187, 188, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 264, 265, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 282, 284, 285, 289, 291, 295, 296, 297, 298, 299, 300, 301, 306, 310, 312, 313, 314, 315, 317, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 423, 436], "usr": [3, 4, 9, 10, 11, 14, 16, 18, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 71, 72, 77, 78, 79, 84, 86, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111, 202, 203], "share": [3, 4, 9, 10, 11, 14, 16, 18, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 71, 72, 77, 78, 79, 84, 86, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111, 114, 117, 144, 153, 154, 159, 168, 178, 190, 199, 202, 203, 224, 229, 231], "miniconda3": [3, 4, 9, 10, 11, 14, 16, 18, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 71, 72, 77, 78, 79, 84, 86, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111], "env": [3, 4, 9, 10, 11, 14, 16, 18, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 71, 72, 77, 78, 79, 84, 86, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111], "testenv": [3, 4, 9, 10, 11, 14, 16, 18, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 71, 72, 77, 78, 79, 84, 86, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111], "lib": [3, 4, 9, 10, 11, 14, 16, 18, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 71, 72, 77, 78, 79, 84, 86, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111], "python3": [3, 4, 9, 10, 11, 14, 16, 18, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 71, 72, 77, 78, 79, 84, 86, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111, 139, 141, 153, 168, 437], "9": [3, 4, 5, 6, 7, 9, 10, 11, 14, 15, 16, 17, 18, 19, 21, 22, 23, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 114, 116, 117, 118, 121, 135, 144, 146, 173, 206, 215, 216, 229, 231, 233, 235, 269, 273, 282, 291, 297, 313, 319, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 379, 394, 396, 397, 413, 416, 436, 437], "site": [3, 4, 9, 10, 11, 14, 16, 18, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 71, 72, 77, 78, 79, 84, 86, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111, 194, 195], "numpi": [3, 5, 6, 9, 10, 11, 12, 14, 16, 22, 23, 24, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 77, 79, 80, 84, 86, 87, 89, 94, 98, 100, 102, 103, 104, 105, 106, 108, 111, 121, 123, 125, 129, 133, 135, 138, 141, 144, 146, 148, 153, 157, 158, 160, 167, 168, 176, 178, 179, 186, 187, 188, 189, 190, 191, 192, 193, 200, 201, 206, 208, 212, 213, 214, 215, 250, 251, 252, 253, 255, 256, 257, 258, 260, 264, 265, 272, 274, 275, 278, 282, 284, 289, 291, 295, 297, 300, 301, 302, 305, 306, 307, 311, 312, 313, 315, 317, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 342, 343, 347, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 375, 376, 378, 380, 381, 383, 385, 387, 389, 390, 393, 394, 395, 396, 397, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423], "core": [3, 16, 29, 42, 43, 58, 167, 168, 176, 188, 437], "fromnumer": [3, 16, 29], "771": [3, 16, 29], "userwarn": [3, 9, 10, 11, 16, 18, 21, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 61, 62, 64, 71, 72, 77, 78, 79, 84, 86, 91, 92, 94, 95, 98, 100, 101, 103, 108, 111], "warn": [3, 9, 11, 16, 29, 71, 103, 123, 124, 125, 138, 139, 141, 146, 148, 150, 153, 160, 168, 198, 199, 207, 279, 285, 289, 302, 326, 327, 328, 329, 330, 331, 332, 333, 398, 407], "partit": [3, 16, 29, 40], "ignor": [3, 16, 21, 29, 48, 50, 71, 103, 139, 144, 153, 186, 187, 188, 229, 231, 235, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 289, 295, 297, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 388, 404, 405, 406, 407, 423], "maskedarrai": [3, 16, 29], "kth": [3, 16], "axi": [3, 11, 12, 16, 22, 23, 25, 30, 31, 34, 38, 40, 41, 44, 47, 50, 58, 84, 85, 94, 103, 104, 107, 111, 125, 148, 150, 153, 158, 179, 198, 250, 251, 252, 253, 255, 256, 282, 290, 315, 317, 344, 346, 347, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 374, 378, 380, 381, 383, 385, 386, 389, 391, 392, 393], "kind": [3, 16, 47, 50, 54, 56, 58, 79, 111, 116, 134, 153, 154, 158, 161, 167, 173, 186, 423, 436], "These": [3, 4, 6, 15, 55, 58, 60, 72, 74, 77, 79, 81, 89, 94, 107, 110, 113, 116, 141, 144, 145, 148, 153, 160, 163, 164, 166, 167, 168, 172, 173, 180, 201, 212, 214, 248, 431, 436, 437], "realli": [3, 70, 139, 153, 160, 324], "love": 3, "learn": [3, 21, 34, 36, 44, 46, 52, 53, 56, 57, 58, 59, 94, 97, 102, 104, 109, 113, 114, 115, 117, 121, 123, 126, 131, 133, 134, 135, 136, 138, 141, 146, 148, 153, 154, 155, 156, 157, 160, 161, 162, 164, 165, 167, 168, 173, 174, 176, 181, 186, 187, 190, 204, 215, 218, 227, 250, 251, 252, 253, 254, 257, 258, 264, 265, 305, 307, 308, 312, 326, 327, 328, 329, 330, 331, 332, 333, 356, 363, 376, 377, 378, 380, 383, 390, 391, 392, 393, 398, 405, 407, 437, 438], "matric": [3, 8, 27, 41, 47, 50, 51, 56, 60, 64, 67, 71, 73, 80, 99, 113, 126, 131, 134, 135, 145, 146, 148, 153, 154, 155, 156, 167, 169, 177, 178, 179, 181, 186, 187, 188, 190, 193, 226, 272, 274, 275, 282, 289, 315, 382, 390, 394, 396, 398, 434, 438], "actual": [3, 6, 42, 66, 68, 71, 77, 86, 105, 125, 153, 167, 168, 170, 173, 178, 188, 233, 282, 295, 298, 417], "fortun": [3, 68], "later": [3, 6, 9, 22, 23, 40, 62, 69, 71, 91, 100, 101, 103, 170, 178, 200, 202, 203, 304, 375, 378, 383, 385, 386, 388, 392, 393, 394, 396, 397, 415, 436], "automat": [3, 15, 16, 19, 22, 23, 33, 34, 40, 54, 89, 92, 94, 114, 115, 121, 124, 131, 133, 145, 146, 147, 153, 158, 165, 168, 178, 179, 180, 200, 208, 250, 251, 252, 253, 255, 256, 257, 258, 282, 295, 297, 315, 322, 328, 331, 343, 354, 374, 378, 383, 386, 391, 392, 393, 400, 405, 407, 409, 417, 436, 438], "transform": [3, 23, 24, 40, 41, 48, 49, 50, 51, 53, 54, 66, 69, 71, 84, 91, 92, 94, 98, 99, 100, 103, 108, 111, 114, 116, 134, 135, 139, 141, 143, 144, 145, 146, 148, 150, 153, 157, 158, 163, 170, 173, 177, 178, 186, 209, 227, 250, 251, 252, 253, 257, 258, 264, 265, 279, 282, 295, 298, 302, 313, 315, 323, 326, 327, 328, 329, 330, 331, 332, 333, 344, 404, 405, 406, 407, 419, 423, 438], "all": [3, 4, 6, 8, 15, 19, 23, 27, 30, 32, 35, 36, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 66, 67, 69, 70, 71, 72, 76, 77, 79, 80, 87, 89, 91, 92, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 116, 117, 123, 124, 125, 126, 131, 138, 141, 144, 146, 148, 149, 153, 154, 155, 157, 158, 159, 161, 163, 165, 167, 168, 170, 172, 175, 176, 178, 179, 180, 187, 188, 190, 194, 195, 197, 198, 199, 215, 223, 224, 227, 229, 232, 233, 234, 239, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 277, 282, 285, 291, 295, 296, 297, 300, 301, 306, 311, 312, 315, 316, 317, 320, 321, 322, 323, 324, 327, 328, 329, 331, 332, 333, 338, 339, 340, 341, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 378, 380, 381, 383, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 403, 405, 407, 410, 417, 419, 423, 434, 436, 437], "defin": [3, 6, 9, 21, 23, 29, 30, 32, 33, 36, 37, 42, 47, 49, 54, 58, 61, 64, 66, 67, 69, 71, 72, 76, 77, 80, 81, 91, 98, 101, 114, 123, 124, 145, 146, 147, 148, 153, 155, 157, 158, 159, 160, 165, 168, 169, 170, 172, 173, 176, 179, 180, 196, 200, 214, 226, 228, 250, 251, 252, 253, 255, 256, 269, 273, 277, 282, 284, 289, 315, 323, 379, 388, 407, 408, 409, 410, 411, 413, 414, 430], "vt": [3, 18, 94], "mask_filenam": [3, 30, 32, 35, 39, 98, 102, 116, 160], "mask_vt": [3, 15, 16, 18, 30, 32, 94, 98, 116, 160, 178, 218], "anatom": [3, 6, 9, 11, 15, 17, 18, 22, 23, 25, 30, 32, 36, 94, 102, 114, 117, 134, 153, 158, 165, 173, 180, 196, 198, 200, 208, 215, 218, 219, 222, 224, 229, 323, 378, 391, 393, 400, 436], "background": [3, 6, 8, 14, 15, 16, 22, 23, 27, 30, 31, 40, 44, 49, 56, 69, 91, 92, 94, 104, 113, 116, 124, 129, 131, 133, 134, 135, 136, 138, 141, 144, 150, 153, 168, 173, 179, 180, 196, 202, 203, 205, 206, 209, 210, 222, 228, 250, 251, 252, 253, 257, 258, 282, 295, 327, 329, 330, 332, 335, 338, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 378, 380, 383, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 403, 405, 408, 410, 411, 417, 436, 438], "plot_roi": [3, 10, 17, 19, 25, 49, 66, 86, 89, 92, 94, 137, 144, 145, 150, 153, 155, 179, 180, 391, 436], "bg_img": [3, 6, 16, 17, 29, 30, 33, 36, 40, 42, 64, 67, 70, 71, 75, 88, 93, 116, 135, 141, 147, 153, 160, 180, 282, 295, 386, 391, 392, 393, 400, 417], "anat": [3, 6, 15, 16, 17, 18, 25, 29, 30, 32, 42, 43, 94, 116, 160, 178, 180, 210, 218, 222, 224, 236, 237, 320], "cmap": [3, 9, 11, 12, 14, 19, 20, 22, 23, 31, 35, 36, 38, 40, 41, 42, 44, 50, 53, 76, 77, 79, 80, 81, 86, 102, 105, 106, 111, 125, 139, 141, 150, 153, 158, 222, 223, 224, 378, 379, 383, 384, 385, 388, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 403, 436], "pair": [3, 74, 82, 86, 98, 113, 117, 160, 161, 172, 224, 227, 229, 250, 251, 252, 253, 255, 256, 295, 321, 322, 323, 324, 355, 382, 385, 390, 394, 396, 397, 398, 406, 423], "0x7f651d95d220": 3, "convert": [3, 6, 10, 11, 36, 42, 49, 66, 79, 86, 94, 98, 107, 108, 116, 141, 146, 148, 150, 153, 158, 160, 165, 173, 179, 280, 301, 302, 310, 327, 328, 329, 330, 331, 332, 333], "appli": [3, 29, 31, 32, 42, 44, 50, 56, 61, 64, 66, 69, 79, 80, 89, 92, 94, 98, 100, 101, 103, 104, 115, 117, 123, 125, 129, 131, 135, 138, 141, 146, 147, 148, 153, 154, 155, 156, 159, 161, 162, 163, 165, 169, 172, 173, 177, 186, 194, 229, 249, 250, 251, 252, 253, 257, 258, 273, 282, 295, 297, 298, 299, 300, 311, 317, 319, 320, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 378, 388, 391, 392, 393, 394, 396, 397, 400, 401, 403, 404, 405, 406, 407, 409, 410, 411, 416, 418, 419, 423, 428, 438], "instanc": [3, 4, 6, 15, 31, 49, 51, 66, 68, 86, 135, 141, 148, 153, 154, 155, 157, 159, 160, 168, 169, 170, 172, 173, 175, 178, 179, 186, 187, 188, 193, 250, 251, 252, 253, 254, 255, 256, 257, 258, 269, 270, 272, 273, 274, 275, 278, 279, 282, 289, 291, 295, 297, 301, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 390, 394, 395, 396, 397, 404, 405, 406, 407, 437], "csv": [3, 6, 29, 40, 47, 55, 116, 128, 153, 155, 160, 194, 195, 225, 233, 257, 258, 282, 300, 326, 327, 328, 329, 330, 331, 332, 333, 405, 407, 419], "file": [3, 6, 7, 9, 14, 22, 23, 27, 30, 32, 33, 34, 35, 36, 40, 45, 47, 48, 49, 51, 53, 55, 59, 60, 62, 64, 66, 73, 82, 86, 91, 92, 94, 96, 98, 100, 101, 108, 109, 112, 113, 114, 116, 117, 125, 126, 128, 133, 137, 138, 139, 140, 141, 144, 148, 149, 150, 153, 154, 155, 157, 158, 160, 168, 169, 176, 177, 180, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 248, 250, 251, 257, 258, 259, 260, 261, 282, 285, 295, 300, 310, 311, 313, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 401, 402, 403, 405, 407, 415, 417, 419, 421, 422, 423, 437, 438], "separ": [3, 34, 48, 50, 64, 66, 67, 83, 88, 94, 96, 100, 113, 131, 148, 150, 153, 158, 159, 161, 165, 168, 170, 173, 176, 178, 179, 193, 210, 312, 323, 344, 346, 347, 374, 390, 392, 398, 407, 408, 409], "space": [3, 6, 15, 22, 23, 28, 40, 45, 48, 51, 55, 60, 62, 66, 69, 73, 84, 99, 101, 108, 113, 116, 117, 124, 131, 133, 135, 138, 141, 146, 153, 155, 168, 169, 170, 172, 173, 180, 197, 199, 204, 206, 208, 210, 212, 213, 214, 229, 231, 233, 237, 239, 256, 257, 258, 282, 285, 289, 300, 301, 302, 312, 315, 326, 329, 332, 333, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 378, 379, 380, 383, 385, 386, 389, 391, 392, 393, 398, 399, 400, 402, 404, 406, 419, 423], "panda": [3, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 94, 98, 100, 102, 116, 117, 123, 135, 138, 144, 146, 148, 149, 151, 153, 160, 186, 194, 200, 201, 212, 213, 214, 222, 223, 224, 233, 257, 258, 282, 283, 285, 289, 295, 296, 297, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 381, 382, 384, 404, 405, 406, 407, 416, 419], "arrai": [3, 5, 9, 10, 11, 22, 23, 26, 33, 34, 36, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 55, 56, 58, 61, 68, 70, 79, 84, 86, 87, 89, 94, 98, 102, 105, 106, 108, 115, 133, 135, 141, 144, 147, 148, 150, 153, 154, 157, 158, 160, 163, 167, 177, 178, 180, 186, 187, 188, 190, 192, 193, 200, 201, 206, 212, 213, 214, 226, 227, 239, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 269, 270, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 300, 305, 307, 315, 316, 319, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 338, 340, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 378, 380, 381, 383, 385, 389, 393, 394, 395, 396, 397, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 417, 419, 420, 421, 422, 423, 429, 438], "pd": [3, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 63, 64, 65, 66, 67, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 94, 98, 102, 116, 178, 219], "read_csv": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 94, 98, 102, 116, 178], "session_target": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 94, 98, 102, 116, 178, 218], "delimit": [3, 40, 41, 98, 100, 116, 178], "chunk": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 98, 102], "2": [3, 6, 7, 9, 11, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 113, 114, 117, 119, 121, 122, 123, 133, 135, 136, 138, 139, 146, 147, 148, 158, 161, 165, 166, 167, 168, 170, 175, 176, 179, 180, 186, 187, 188, 192, 193, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 215, 216, 217, 218, 219, 220, 224, 226, 229, 231, 233, 235, 237, 238, 239, 241, 242, 244, 245, 250, 251, 252, 253, 254, 255, 256, 257, 258, 269, 272, 273, 274, 275, 282, 284, 289, 291, 295, 297, 298, 300, 306, 307, 310, 311, 312, 313, 316, 317, 319, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 380, 387, 389, 390, 391, 392, 393, 394, 396, 398, 400, 406, 407, 409, 410, 411, 413, 416, 419, 420, 423, 436, 437], "1447": [3, 98], "11": [3, 6, 20, 33, 36, 42, 43, 44, 49, 53, 56, 58, 62, 65, 66, 72, 79, 81, 82, 91, 92, 96, 98, 102, 103, 114, 118, 126, 135, 138, 139, 140, 148, 187, 199, 200, 226, 227, 228, 235], "1448": [3, 98], "1449": [3, 98], "1450": [3, 42, 98, 102], "1451": [3, 98], "1452": [3, 94, 98], "row": [3, 6, 40, 56, 66, 72, 98, 100, 117, 145, 153, 173, 229, 231, 272, 273, 274, 275, 282, 295, 296, 297, 354, 356, 359, 373, 378, 383, 386, 388, 390, 391, 392, 393, 404, 416, 423], "x": [3, 6, 9, 13, 14, 15, 24, 31, 33, 35, 37, 40, 41, 44, 52, 54, 56, 58, 62, 64, 66, 67, 70, 84, 91, 92, 94, 101, 103, 114, 125, 128, 133, 135, 141, 146, 148, 150, 153, 160, 165, 168, 173, 176, 179, 180, 186, 198, 204, 226, 227, 250, 251, 252, 253, 255, 256, 257, 258, 259, 269, 272, 273, 274, 275, 282, 291, 295, 302, 323, 326, 327, 329, 330, 332, 333, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 380, 383, 385, 386, 389, 391, 392, 393, 394, 395, 396, 397, 400, 403, 404, 406, 407, 408, 412, 416, 417, 418, 434, 436], "column": [3, 6, 56, 62, 65, 66, 69, 70, 71, 72, 75, 76, 77, 79, 80, 81, 98, 100, 101, 102, 105, 106, 108, 117, 125, 145, 151, 153, 170, 187, 188, 190, 250, 251, 252, 253, 269, 272, 273, 274, 275, 280, 282, 289, 295, 296, 297, 300, 315, 323, 324, 325, 343, 354, 356, 359, 373, 378, 381, 382, 383, 384, 386, 390, 391, 392, 393, 414, 416, 418, 419, 420], "denot": [3, 6, 15, 138, 153, 170, 178, 179, 180, 323, 324, 354, 376, 392, 407, 408, 409, 410], "experiment": [3, 63, 64, 65, 66, 69, 71, 80, 94, 111, 123, 125, 144, 145, 148, 153, 160, 167, 170, 179, 201, 282, 285, 289, 394, 396, 397], "condit": [3, 6, 29, 30, 31, 33, 35, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 80, 94, 98, 101, 102, 108, 116, 145, 148, 150, 153, 154, 160, 167, 173, 176, 179, 201, 226, 282, 284, 289, 295, 297, 381], "type": [3, 6, 15, 18, 21, 29, 34, 42, 49, 63, 65, 66, 69, 72, 88, 94, 100, 102, 111, 117, 123, 125, 127, 130, 132, 135, 138, 141, 147, 148, 149, 150, 153, 162, 165, 168, 169, 170, 173, 178, 194, 198, 202, 203, 209, 226, 254, 268, 270, 278, 282, 295, 300, 304, 305, 307, 309, 310, 312, 313, 317, 318, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 339, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 391, 392, 405, 407, 408, 409, 416, 417, 418, 419], "try": [3, 4, 9, 21, 36, 39, 40, 49, 52, 53, 56, 57, 58, 62, 63, 65, 66, 75, 77, 78, 89, 98, 103, 117, 150, 153, 154, 155, 160, 161, 166, 167, 168, 176, 180, 437], "length": [3, 15, 55, 68, 77, 158, 168, 201, 204, 250, 251, 252, 253, 255, 256, 269, 273, 274, 275, 286, 287, 288, 292, 293, 294, 301, 326, 329, 332, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 378, 383, 386, 389, 390, 391, 392, 393, 405, 417, 423], "dtype": [3, 10, 11, 23, 33, 36, 40, 41, 44, 49, 52, 53, 54, 56, 58, 68, 77, 79, 86, 89, 91, 92, 94, 101, 103, 132, 133, 134, 138, 139, 153, 178, 283, 286, 287, 288, 292, 293, 294, 299, 301, 309, 310, 313, 315, 327, 328, 329, 330, 331, 332, 333, 334, 404, 406, 413], "As": [3, 15, 34, 36, 44, 49, 52, 54, 66, 79, 81, 92, 94, 95, 98, 101, 103, 116, 123, 141, 153, 154, 155, 157, 159, 160, 161, 165, 167, 168, 170, 172, 178, 285, 323, 324], "target": [3, 29, 33, 40, 84, 89, 94, 98, 100, 124, 138, 153, 160, 161, 165, 167, 168, 173, 176, 177, 218, 228, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 297, 315, 316, 326, 329, 332, 336, 339, 343, 404, 406, 407, 438], "experi": [3, 6, 29, 33, 34, 41, 66, 70, 94, 114, 115, 164, 169, 170, 173, 438], "consequ": [3, 15, 86, 180], "quit": [3, 6, 66, 158, 167, 224], "big": [3, 41, 49, 138, 153, 157, 160, 168, 178, 180, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423], "Not": [3, 64, 66, 67, 202, 203, 347, 404, 406], "ha": [3, 6, 10, 11, 29, 30, 32, 33, 34, 35, 36, 42, 47, 49, 51, 52, 54, 58, 66, 68, 70, 72, 75, 79, 81, 86, 89, 91, 94, 98, 100, 104, 117, 123, 124, 125, 126, 128, 132, 135, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 159, 161, 162, 165, 167, 168, 170, 172, 176, 180, 186, 187, 188, 196, 197, 198, 200, 205, 209, 229, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 289, 295, 297, 306, 309, 310, 312, 315, 316, 320, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 343, 345, 385, 388, 393, 397, 398, 404, 405, 406, 407, 411, 418, 420, 423, 436], "interest": [3, 6, 14, 15, 16, 23, 35, 42, 49, 51, 55, 68, 70, 71, 83, 96, 98, 99, 100, 101, 104, 107, 113, 117, 126, 144, 153, 154, 160, 162, 163, 165, 167, 168, 169, 170, 173, 175, 179, 180, 195, 201, 204, 206, 215, 218, 219, 222, 223, 224, 227, 228, 233, 236, 237, 238, 239, 272, 274, 275, 305, 310, 312, 313, 317, 320, 326, 330, 383, 392, 393, 395, 398, 407, 438], "u": [3, 4, 15, 24, 40, 55, 58, 63, 66, 77, 79, 89, 94, 111, 114, 160, 161, 163, 168, 212, 214, 256, 274, 275, 437], "so": [3, 6, 10, 11, 14, 22, 33, 36, 40, 43, 49, 52, 64, 66, 67, 69, 70, 72, 76, 79, 80, 81, 86, 89, 94, 100, 101, 103, 108, 117, 125, 146, 153, 165, 166, 167, 168, 170, 176, 178, 180, 186, 187, 188, 196, 202, 203, 210, 229, 234, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 285, 295, 297, 320, 321, 326, 327, 328, 329, 330, 331, 332, 333, 343, 388, 394, 396, 397, 401, 403, 404, 405, 406, 407, 423], "keep": [3, 31, 33, 34, 36, 50, 51, 54, 58, 66, 69, 70, 84, 86, 94, 98, 102, 103, 117, 121, 124, 138, 145, 153, 158, 160, 161, 162, 165, 166, 168, 229, 233, 249, 255, 256, 257, 300, 306, 319, 321, 335, 336, 337, 338, 339, 340, 341, 407, 408, 419, 420], "signal": [3, 6, 28, 43, 44, 45, 46, 48, 49, 50, 52, 55, 57, 59, 61, 64, 66, 67, 68, 70, 71, 78, 83, 86, 94, 96, 100, 107, 113, 114, 122, 123, 124, 125, 137, 139, 141, 145, 146, 150, 153, 154, 156, 157, 158, 159, 160, 162, 165, 167, 170, 173, 177, 179, 186, 187, 188, 190, 194, 201, 202, 204, 212, 213, 215, 218, 226, 250, 251, 252, 253, 254, 255, 256, 257, 258, 264, 265, 282, 295, 297, 300, 306, 307, 312, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 343, 375, 379, 380, 389, 390, 398, 399, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 417, 438], "creat": [3, 6, 10, 11, 20, 23, 33, 36, 40, 41, 42, 47, 48, 49, 55, 62, 64, 66, 67, 69, 71, 72, 75, 79, 84, 86, 94, 98, 100, 107, 108, 115, 116, 123, 130, 138, 150, 153, 154, 155, 159, 160, 161, 163, 168, 169, 170, 173, 174, 176, 177, 178, 180, 229, 231, 249, 257, 258, 282, 285, 295, 296, 307, 313, 322, 345, 354, 355, 356, 359, 378, 379, 380, 381, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 413, 414, 415, 416, 436, 437, 438], "sampl": [3, 8, 23, 27, 31, 34, 36, 40, 49, 58, 63, 66, 69, 71, 74, 75, 77, 78, 81, 82, 84, 94, 101, 105, 108, 113, 114, 116, 144, 146, 147, 153, 155, 160, 165, 167, 169, 170, 172, 180, 186, 187, 188, 190, 215, 224, 239, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 283, 284, 286, 287, 288, 289, 292, 293, 294, 295, 297, 300, 304, 305, 311, 327, 328, 329, 330, 331, 332, 333, 342, 343, 355, 370, 379, 382, 385, 388, 397, 398, 404, 405, 406, 407, 418, 419, 420, 423, 434], "belong": [3, 30, 32, 148, 153, 160, 173, 180], "classif": [3, 30, 31, 32, 33, 35, 43, 46, 49, 59, 98, 100, 113, 114, 116, 144, 153, 154, 159, 160, 164, 165, 166, 173, 174, 175, 186, 194, 204, 215, 250, 251, 252, 253, 255, 324, 326, 331, 380, 390, 398, 437, 438], "becom": [3, 66, 117, 161, 162, 163, 170], "smaller": [3, 6, 32, 81, 128, 138, 146, 150, 153, 157, 165, 166, 167, 170, 173, 178, 202, 203, 256, 298, 311, 319, 404], "e": [3, 6, 15, 22, 24, 29, 39, 40, 44, 47, 48, 56, 66, 76, 86, 88, 94, 100, 103, 105, 114, 116, 117, 124, 126, 144, 146, 147, 150, 153, 155, 158, 160, 163, 165, 166, 167, 168, 169, 170, 172, 173, 175, 179, 180, 186, 187, 188, 190, 199, 200, 207, 212, 213, 214, 216, 226, 229, 231, 234, 250, 251, 252, 253, 254, 255, 256, 257, 258, 272, 274, 275, 282, 289, 295, 297, 298, 299, 300, 301, 302, 304, 319, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 380, 388, 391, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 411, 413, 419, 423, 436], "shorter": [3, 66, 167, 323], "condition_mask": [3, 29, 30, 31, 34, 36, 37, 98, 102, 116], "isin": [3, 29, 31, 34, 36, 37, 98, 102, 116, 117, 229], "larg": [3, 30, 31, 36, 39, 41, 43, 48, 49, 54, 56, 65, 70, 71, 72, 92, 114, 117, 139, 153, 157, 160, 161, 162, 163, 165, 167, 168, 170, 173, 174, 175, 178, 180, 224, 229, 231, 282, 284, 289, 328, 331, 335, 336, 337, 339, 340, 374, 405], "split": [3, 30, 31, 32, 34, 36, 39, 40, 41, 42, 43, 44, 49, 51, 86, 94, 99, 100, 144, 153, 158, 160, 162, 167, 168, 173, 179, 202, 203, 250, 251, 252, 253], "fmri_niimg": [3, 30, 34, 98, 160], "valu": [3, 4, 6, 9, 14, 15, 17, 23, 24, 30, 31, 33, 40, 42, 44, 47, 52, 54, 55, 58, 61, 66, 69, 70, 72, 77, 79, 88, 89, 90, 91, 92, 94, 98, 100, 101, 102, 103, 105, 106, 107, 108, 111, 117, 121, 123, 124, 126, 130, 133, 134, 138, 141, 145, 146, 148, 153, 154, 157, 158, 161, 162, 164, 165, 166, 168, 170, 172, 173, 175, 178, 180, 186, 187, 188, 190, 192, 194, 196, 198, 199, 200, 202, 203, 205, 206, 207, 209, 210, 220, 224, 229, 233, 235, 238, 241, 242, 245, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 269, 270, 272, 273, 274, 275, 278, 282, 283, 285, 291, 295, 297, 298, 299, 300, 301, 304, 306, 315, 316, 317, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 377, 378, 379, 380, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 400, 401, 403, 404, 405, 406, 407, 409, 410, 411, 415, 416, 417, 418, 419, 420, 423, 436], "216": [3, 30, 33, 41], "classifi": [3, 28, 32, 33, 36, 41, 45, 51, 98, 99, 113, 141, 144, 145, 153, 160, 161, 162, 163, 164, 173, 174, 175, 218, 250, 252, 253, 254, 255, 305, 307, 312, 393, 398, 438], "linear": [3, 6, 29, 33, 34, 35, 37, 44, 66, 69, 98, 102, 114, 135, 153, 160, 164, 169, 170, 171, 173, 174, 179, 180, 190, 229, 250, 251, 252, 253, 255, 256, 257, 258, 272, 274, 275, 282, 295, 300, 314, 315, 316, 324, 343, 387, 419, 423, 430, 437, 438], "kernel": [3, 29, 33, 34, 35, 44, 55, 94, 98, 160, 251, 253, 256, 286, 287, 288, 292, 293, 294], "svc": [3, 29, 30, 31, 32, 33, 34, 35, 116, 141, 153, 160, 161, 163, 250, 252, 254], "standard": [3, 6, 9, 11, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 66, 69, 70, 72, 75, 89, 91, 92, 94, 98, 99, 101, 104, 105, 106, 108, 114, 116, 124, 125, 138, 141, 145, 147, 148, 153, 155, 158, 160, 161, 165, 168, 169, 170, 173, 178, 179, 180, 186, 208, 233, 250, 251, 252, 253, 255, 256, 257, 258, 274, 275, 282, 284, 285, 289, 300, 320, 323, 327, 328, 329, 330, 331, 332, 333, 379, 405, 407, 419, 437], "zscore_sampl": [3, 11, 29, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 91, 92, 98, 99, 100, 104, 124, 153, 158, 160, 327, 328, 329, 330, 331, 332, 333, 419], "fit": [3, 6, 28, 30, 32, 35, 36, 37, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 65, 66, 69, 71, 73, 75, 76, 77, 79, 80, 81, 87, 89, 91, 92, 94, 98, 99, 100, 103, 111, 113, 116, 125, 138, 146, 148, 150, 153, 154, 156, 157, 158, 160, 161, 163, 165, 167, 170, 171, 173, 174, 175, 180, 186, 187, 188, 210, 217, 218, 250, 251, 252, 253, 254, 255, 256, 257, 258, 264, 265, 269, 272, 273, 274, 275, 279, 282, 285, 291, 295, 297, 307, 312, 326, 327, 328, 329, 330, 331, 332, 333, 339, 343, 356, 359, 381, 393, 398, 404, 405, 406, 407, 410, 415, 417, 438], "train": [3, 31, 32, 34, 39, 40, 41, 42, 43, 44, 51, 98, 99, 144, 153, 160, 161, 162, 165, 167, 173, 175, 180, 187, 250, 251, 252, 253, 255, 256, 404, 406, 412], "without": [3, 6, 14, 23, 48, 50, 66, 78, 81, 84, 94, 110, 111, 113, 117, 124, 125, 132, 141, 150, 153, 155, 158, 164, 166, 167, 173, 178, 180, 199, 298, 304, 324, 326, 329, 332, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 379, 386, 391, 436, 438], "resampl": [3, 9, 11, 29, 30, 32, 33, 34, 35, 36, 43, 48, 49, 52, 53, 54, 56, 66, 71, 75, 83, 91, 92, 96, 98, 113, 116, 124, 130, 131, 134, 135, 141, 145, 147, 148, 153, 177, 229, 231, 233, 243, 244, 246, 247, 250, 251, 252, 253, 255, 256, 257, 258, 295, 301, 305, 310, 312, 314, 315, 316, 327, 328, 329, 330, 331, 332, 335, 337, 338, 339, 340, 385, 386, 392, 393, 398, 400, 405, 410, 423, 438], "491": [3, 29, 30, 32, 33, 34, 35, 36, 98], "provid": [3, 5, 6, 9, 29, 30, 32, 33, 34, 35, 36, 44, 47, 48, 49, 52, 54, 56, 62, 64, 66, 67, 68, 71, 75, 76, 77, 79, 80, 84, 91, 94, 98, 101, 105, 111, 115, 116, 117, 125, 128, 136, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 153, 154, 156, 157, 159, 160, 167, 168, 169, 170, 172, 173, 174, 175, 176, 178, 180, 185, 186, 187, 188, 190, 193, 194, 196, 197, 198, 199, 206, 207, 210, 218, 229, 233, 250, 251, 252, 253, 254, 255, 256, 257, 258, 269, 273, 282, 283, 284, 288, 289, 294, 295, 297, 300, 306, 315, 320, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 377, 379, 381, 382, 389, 391, 395, 404, 405, 406, 407, 408, 415, 419, 423, 436, 437], "sform": [3, 29, 30, 32, 33, 34, 35, 36, 98, 150, 153], "header": [3, 11, 29, 30, 32, 33, 34, 35, 36, 94, 98, 101, 121, 125, 139, 141, 149, 153, 178, 300, 303, 313, 379, 419], "result": [3, 6, 14, 15, 23, 24, 30, 33, 34, 35, 36, 40, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 64, 65, 66, 67, 69, 71, 72, 75, 77, 78, 79, 84, 86, 87, 88, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 108, 114, 115, 117, 124, 125, 131, 138, 141, 144, 149, 150, 153, 154, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 178, 179, 180, 194, 196, 206, 224, 229, 231, 238, 250, 251, 254, 271, 272, 274, 275, 276, 282, 291, 295, 297, 300, 310, 311, 312, 315, 322, 330, 331, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 394, 396, 401, 410, 411, 416, 423, 433, 436, 438], "mai": [3, 17, 29, 30, 32, 33, 34, 35, 36, 43, 49, 56, 66, 72, 80, 86, 98, 100, 103, 111, 114, 116, 117, 121, 139, 141, 149, 153, 154, 160, 161, 163, 168, 170, 173, 178, 180, 186, 224, 229, 256, 270, 285, 297, 315, 322, 324, 328, 330, 331, 343, 394, 396, 397, 410, 416, 423], "expect": [3, 6, 29, 30, 32, 33, 34, 35, 36, 61, 66, 78, 79, 81, 95, 98, 101, 102, 105, 106, 117, 126, 141, 150, 153, 158, 165, 168, 170, 173, 176, 179, 180, 256, 282, 284, 289, 295, 297, 301, 320], "both": [3, 9, 15, 24, 39, 47, 49, 51, 58, 69, 79, 80, 89, 94, 100, 105, 108, 117, 125, 141, 148, 153, 154, 157, 159, 165, 166, 168, 169, 173, 178, 179, 180, 186, 193, 205, 215, 263, 264, 265, 268, 282, 284, 289, 297, 298, 300, 319, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 385, 388, 390, 393, 397, 409, 419, 423, 437], "class": [3, 11, 28, 32, 42, 43, 45, 49, 51, 54, 56, 91, 94, 98, 99, 113, 122, 123, 124, 126, 128, 134, 135, 136, 139, 141, 144, 146, 147, 148, 150, 153, 159, 160, 164, 167, 168, 169, 172, 180, 181, 183, 184, 185, 186, 187, 188, 218, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 269, 270, 271, 272, 273, 274, 275, 276, 282, 295, 301, 313, 323, 326, 327, 328, 329, 330, 331, 332, 333, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 390, 398, 404, 405, 406, 407, 408, 409, 415, 424, 426, 428, 431, 432, 433, 438], "number": [3, 6, 29, 31, 33, 34, 39, 42, 43, 48, 49, 50, 53, 54, 55, 58, 65, 66, 69, 72, 77, 79, 86, 89, 92, 94, 98, 100, 103, 104, 105, 117, 126, 138, 141, 144, 145, 146, 148, 151, 153, 154, 157, 158, 160, 161, 162, 165, 168, 170, 173, 175, 176, 180, 186, 187, 188, 190, 194, 195, 198, 201, 202, 203, 206, 207, 209, 215, 218, 220, 223, 224, 227, 229, 233, 239, 242, 245, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 264, 265, 273, 278, 282, 291, 295, 297, 298, 300, 302, 304, 306, 312, 319, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 338, 339, 340, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 378, 379, 380, 381, 383, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 416, 417, 418, 419, 420, 436], "problem": [3, 6, 31, 33, 39, 43, 48, 92, 94, 114, 160, 161, 162, 165, 166, 167, 168, 170, 173, 175, 176, 190, 255, 256, 258, 269, 272, 273, 274, 275, 297, 343], "balanc": [3, 49, 148, 153, 157], "perform": [3, 30, 33, 34, 43, 44, 48, 51, 62, 66, 71, 79, 80, 89, 91, 92, 94, 95, 99, 100, 101, 102, 105, 106, 111, 116, 117, 124, 144, 145, 146, 148, 153, 154, 159, 161, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 178, 179, 180, 190, 220, 233, 242, 245, 250, 251, 252, 253, 255, 256, 257, 258, 264, 265, 282, 284, 291, 295, 297, 314, 315, 316, 317, 318, 319, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 343, 354, 356, 359, 361, 363, 365, 367, 369, 371, 373, 378, 380, 383, 385, 386, 389, 391, 392, 393, 400, 404, 405, 406, 407, 410, 412, 417, 418, 419, 423, 438], "done": [3, 6, 34, 41, 48, 49, 51, 53, 57, 58, 64, 66, 94, 103, 116, 117, 148, 150, 153, 154, 155, 157, 160, 161, 163, 165, 167, 170, 176, 179, 187, 188, 250, 251, 252, 253, 255, 256, 257, 258, 282, 295, 300, 301, 309, 319, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 405, 406, 407, 419], "sum": [3, 41, 42, 49, 58, 65, 68, 77, 79, 84, 101, 102, 105, 106, 107, 141, 153, 167, 255, 256, 269, 273, 274, 306, 327, 330, 410, 420], "float": [3, 40, 41, 43, 68, 75, 141, 144, 153, 187, 188, 190, 194, 220, 241, 242, 245, 250, 251, 252, 253, 254, 255, 256, 257, 258, 269, 270, 272, 273, 274, 275, 277, 281, 282, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 297, 298, 299, 300, 304, 306, 315, 316, 319, 323, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 377, 378, 379, 380, 383, 385, 386, 388, 389, 391, 392, 393, 394, 396, 397, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 412, 415, 416, 417, 418, 419, 420, 423], "len": [3, 12, 22, 30, 32, 33, 34, 47, 48, 51, 62, 63, 64, 65, 66, 68, 69, 76, 79, 91, 94, 98, 103, 111, 117, 190, 250, 251, 252, 253, 255, 256, 272, 274, 275, 279, 295, 312, 315, 335, 337, 338, 340, 405], "meaningless": [3, 160, 170, 298], "why": [3, 94, 167, 180], "proper": [3, 34, 148, 153, 167, 205, 206, 437], "error": [3, 6, 42, 43, 66, 76, 79, 81, 84, 94, 103, 123, 125, 128, 135, 138, 141, 150, 153, 155, 160, 161, 165, 168, 170, 173, 186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 272, 274, 282, 289, 295, 297, 298, 300, 301, 322, 326, 327, 328, 329, 330, 331, 332, 333, 339, 404, 405, 406, 407, 437], "rate": [3, 6, 66, 81, 128, 153, 167, 170, 173, 180, 277, 297], "test": [3, 29, 31, 34, 36, 40, 42, 43, 44, 51, 53, 66, 71, 74, 77, 78, 82, 99, 101, 102, 105, 106, 111, 113, 114, 123, 125, 137, 145, 148, 153, 160, 162, 163, 165, 166, 167, 170, 171, 172, 173, 176, 179, 188, 194, 195, 196, 197, 198, 199, 200, 204, 207, 208, 210, 218, 219, 222, 223, 224, 227, 228, 233, 239, 250, 251, 252, 253, 254, 255, 256, 270, 295, 297, 298, 305, 311, 315, 316, 319, 322, 343, 355, 356, 370, 382, 385, 393, 398, 400, 430, 437], "30": [3, 6, 32, 33, 36, 40, 42, 43, 44, 48, 51, 57, 62, 63, 68, 91, 99, 102, 103, 105, 107, 114, 128, 138, 153, 166, 195, 252, 253, 272, 274, 275, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 415], "last": [3, 6, 33, 35, 40, 55, 72, 140, 153, 170, 175, 176, 192, 193, 300, 307, 321, 436, 437], "point": [3, 4, 8, 15, 22, 23, 27, 54, 55, 84, 86, 91, 94, 113, 116, 138, 141, 150, 153, 158, 160, 167, 170, 175, 176, 177, 178, 188, 250, 251, 252, 253, 282, 315, 316, 326, 329, 332, 337, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 380, 383, 386, 389, 391, 392, 393, 397, 398, 400, 410, 411, 417, 423, 438], "dure": [3, 6, 55, 56, 65, 94, 100, 101, 114, 116, 138, 145, 153, 160, 161, 167, 168, 170, 173, 180, 188, 190, 207, 295, 297, 335, 336, 337, 339, 340, 388, 404], "fmri_niimgs_train": 3, "fmri_niimgs_test": 3, "conditions_train": 3, "conditions_test": 3, "hasn": [3, 167], "t": [3, 5, 6, 9, 16, 22, 24, 33, 37, 41, 55, 56, 58, 62, 66, 67, 68, 69, 71, 72, 75, 76, 77, 79, 80, 83, 90, 92, 93, 94, 96, 99, 100, 102, 103, 104, 105, 107, 108, 113, 114, 117, 144, 151, 153, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 178, 179, 185, 196, 197, 206, 207, 209, 210, 216, 224, 229, 230, 231, 234, 255, 256, 270, 272, 273, 274, 275, 276, 278, 282, 295, 297, 319, 322, 323, 324, 337, 343, 388, 391, 393, 398, 409, 417, 420, 423, 436], "examin": [3, 114, 173, 216, 234], "well": [3, 6, 15, 44, 48, 51, 58, 66, 68, 70, 79, 89, 100, 131, 138, 145, 147, 153, 154, 155, 157, 158, 160, 161, 163, 166, 168, 170, 173, 175, 186, 187, 188, 201, 207, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 301, 315, 324, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "predicton_accuraci": 3, "3f": [3, 6, 34, 44, 48, 55, 98], "767": 3, "set": [3, 6, 14, 15, 16, 21, 22, 28, 29, 30, 31, 33, 36, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 65, 66, 70, 79, 80, 81, 89, 94, 95, 98, 99, 101, 113, 114, 117, 123, 124, 125, 131, 135, 141, 144, 145, 147, 148, 150, 151, 153, 154, 155, 158, 160, 162, 164, 167, 169, 170, 171, 172, 173, 174, 178, 180, 186, 187, 188, 194, 200, 201, 212, 213, 214, 218, 222, 223, 224, 229, 231, 233, 250, 251, 252, 253, 254, 255, 256, 257, 258, 272, 274, 275, 281, 282, 284, 289, 295, 296, 298, 300, 307, 319, 320, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 400, 401, 403, 404, 405, 406, 407, 409, 412, 417, 419, 423, 436, 438], "repetit": [3, 6, 33, 63, 64, 67, 71, 137, 153, 170, 173, 215, 220, 242, 245, 250, 251, 252, 253, 255, 256, 282, 285, 286, 287, 288, 292, 293, 294, 300, 327, 328, 329, 330, 331, 332, 333, 379, 405, 407, 419], "strategi": [3, 24, 28, 45, 48, 49, 66, 88, 89, 91, 92, 99, 113, 114, 124, 141, 145, 146, 148, 153, 158, 161, 164, 165, 167, 170, 177, 188, 218, 250, 251, 252, 253, 254, 257, 258, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 339, 379, 390, 391, 398, 405, 410, 419, 423, 438], "scikit": [3, 34, 49, 94, 97, 102, 104, 109, 113, 115, 121, 123, 126, 131, 133, 134, 135, 138, 141, 146, 148, 153, 154, 157, 160, 161, 162, 164, 165, 167, 168, 174, 175, 176, 218, 250, 251, 252, 253, 254, 264, 265, 307, 326, 327, 328, 329, 330, 331, 332, 333, 393, 405, 437, 438], "sklearn": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 57, 58, 92, 94, 98, 99, 102, 103, 104, 105, 106, 111, 138, 141, 145, 146, 153, 154, 160, 161, 163, 167, 180, 186, 187, 188, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 218, 219, 225, 229, 231, 236, 237, 238, 239, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 291, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "model_select": [3, 29, 30, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 51, 98, 99, 138, 153, 160, 163, 250, 251, 252, 253], "cv": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 44, 51, 58, 98, 99, 111, 135, 153, 160, 165, 188, 250, 251, 252, 253, 254, 255, 256], "n_split": [3, 34, 36, 37, 40, 44, 51, 99], "fold": [3, 29, 31, 34, 36, 40, 51, 69, 94, 98, 99, 160, 161, 163, 165, 167, 180, 188, 250, 251, 252, 253, 254, 255, 256], "enumer": [3, 12, 22, 34, 40, 47, 48, 51, 57, 64, 65, 66, 68, 69, 71, 79, 94, 100, 101, 102, 103, 105], "01d": 3, "886": [3, 85, 96], "698": [3, 33, 96], "744": [3, 33], "return": [3, 4, 9, 14, 15, 31, 33, 39, 40, 41, 44, 47, 56, 64, 66, 68, 80, 84, 94, 100, 107, 111, 116, 117, 124, 125, 130, 134, 141, 144, 146, 148, 149, 150, 153, 155, 160, 162, 165, 167, 168, 173, 175, 176, 178, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 264, 265, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 381, 382, 384, 387, 388, 390, 394, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 431, 436], "paramet": [3, 6, 14, 15, 21, 23, 24, 28, 29, 32, 42, 44, 45, 49, 51, 54, 56, 60, 71, 73, 89, 91, 92, 94, 95, 104, 105, 106, 108, 113, 116, 117, 123, 124, 125, 132, 135, 138, 139, 141, 145, 146, 147, 148, 149, 150, 151, 153, 155, 157, 158, 159, 160, 162, 164, 165, 166, 167, 168, 169, 170, 173, 175, 177, 178, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 269, 270, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 436, 438], "n_fold": [3, 188, 250, 251, 252, 253, 255, 256], "pipelin": [3, 35, 37, 39, 40, 41, 42, 44, 75, 98, 99, 114, 144, 153, 159, 160, 161, 164, 165, 166, 173, 179, 186, 187, 188, 194, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 300, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407, 419, 438], "found": [3, 6, 49, 52, 55, 81, 100, 101, 103, 107, 108, 116, 117, 138, 153, 154, 157, 158, 159, 160, 161, 162, 163, 165, 167, 168, 175, 176, 179, 180, 229, 231, 233, 300, 302, 320, 334, 337, 378, 392, 393, 419, 436], "websit": [3, 42, 75, 126, 138, 153, 168, 194, 207, 228], "best": [3, 34, 42, 43, 44, 95, 144, 150, 153, 160, 161, 162, 165, 167, 168, 170, 179, 250, 251, 252, 253, 255, 256, 322, 356, 359, 404, 405], "per": [3, 6, 30, 31, 33, 40, 48, 57, 66, 78, 94, 101, 102, 108, 146, 153, 154, 160, 168, 180, 188, 208, 227, 250, 251, 252, 253, 255, 256, 258, 270, 279, 282, 283, 285, 289, 296, 320, 323, 327, 328, 329, 331, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 381, 418], "cv_params_": [3, 34, 124, 125, 153, 250, 251, 252, 253], "c": [3, 34, 37, 40, 41, 42, 43, 44, 49, 56, 64, 67, 70, 98, 99, 100, 102, 111, 114, 117, 161, 165, 166, 168, 187, 190, 198, 200, 207, 209, 212, 213, 219, 220, 226, 228, 229, 231, 233, 244, 274, 275, 300, 315, 316, 323, 324, 343, 410, 413, 419], "100": [3, 15, 31, 33, 34, 36, 40, 41, 42, 43, 44, 49, 55, 63, 75, 86, 89, 102, 105, 117, 161, 170, 177, 188, 194, 206, 226, 229, 250, 251, 252, 253, 255, 256, 279, 282, 290, 291, 299, 306, 319, 420, 436, 438], "speed": [3, 36, 37, 47, 77, 89, 98, 105, 114, 125, 153, 157, 163, 166, 167, 179, 180, 343, 404, 423], "cpu": [3, 42, 102, 105, 163, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 291, 295, 297, 312, 327, 328, 329, 338, 339, 340, 343, 405], "n_job": [3, 33, 36, 37, 42, 43, 44, 47, 48, 77, 79, 98, 99, 102, 105, 163, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 285, 291, 295, 297, 312, 327, 328, 329, 338, 339, 340, 343, 405], "respect": [3, 62, 108, 141, 150, 153, 154, 168, 170, 173, 176, 180, 212, 214, 250, 251, 252, 253, 282, 284, 285, 289, 295, 304, 315, 316, 407, 409], "structur": [3, 6, 23, 39, 41, 43, 46, 49, 51, 58, 59, 63, 66, 113, 114, 154, 160, 162, 163, 164, 165, 167, 173, 178, 188, 196, 198, 207, 210, 218, 219, 224, 233, 255, 256, 269, 272, 320, 335, 336, 337, 339, 340, 390, 398, 401, 406, 412, 438], "acquisit": [3, 6, 30, 32, 63, 66, 71, 101, 114, 165, 170, 173, 224, 289, 379], "select": [3, 6, 14, 15, 19, 20, 23, 29, 32, 33, 34, 35, 41, 42, 55, 56, 66, 76, 89, 94, 100, 105, 114, 115, 125, 131, 132, 133, 135, 143, 144, 146, 148, 153, 155, 158, 161, 162, 163, 164, 165, 166, 167, 179, 180, 187, 188, 198, 215, 216, 226, 229, 231, 233, 235, 249, 250, 251, 252, 253, 255, 256, 295, 297, 307, 319, 323, 324, 385, 388, 391, 393, 394, 396, 397, 404, 405, 407, 423, 436, 438], "session_label": [3, 29, 30, 32, 33, 98, 160], "acquir": [3, 6, 66, 68, 116, 170, 173, 175], "nois": [3, 6, 34, 44, 56, 64, 67, 69, 70, 94, 95, 100, 103, 108, 114, 123, 146, 153, 155, 161, 163, 167, 170, 173, 180, 272, 274, 275, 289, 323, 324, 379, 391, 392, 420], "autocorrel": [3, 69, 108], "henc": [3, 56, 58, 72, 75, 86, 144, 153, 165, 168, 170], "across": [3, 6, 15, 16, 47, 50, 51, 56, 64, 65, 66, 80, 94, 98, 99, 100, 103, 114, 124, 141, 147, 153, 154, 155, 158, 159, 160, 161, 163, 165, 170, 173, 186, 204, 238, 250, 251, 252, 253, 255, 256, 257, 258, 318, 334, 379, 405, 407, 423, 436], "pass": [3, 4, 9, 10, 11, 24, 29, 36, 42, 43, 49, 51, 54, 55, 56, 58, 79, 86, 89, 94, 102, 105, 106, 116, 117, 123, 125, 134, 136, 138, 141, 146, 148, 150, 151, 153, 160, 161, 165, 167, 168, 169, 178, 179, 180, 186, 187, 188, 194, 229, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 284, 289, 295, 297, 300, 314, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 337, 338, 340, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 400, 401, 404, 405, 406, 407, 409, 417, 418, 419, 423], "leaveonegroupout": [3, 29, 30, 32, 33, 98, 135, 153, 160, 163, 165, 250, 251, 252, 253], "cv_scores_": [3, 29, 30, 32, 33, 34, 42, 111, 160, 188, 250, 251, 252, 253, 255, 256], "9629629629629629": 3, "8518518518518519": 3, "9753086419753086": 3, "40740740740740744": 3, "9876543209876543": 3, "9259259259259259": 3, "8765432098765432": 3, "final": [3, 4, 6, 14, 15, 30, 41, 48, 53, 55, 56, 57, 63, 69, 84, 93, 94, 100, 146, 153, 154, 161, 167, 168, 169, 175, 176, 179, 180, 188, 295, 320, 327, 328, 330, 331, 436], "coef_": [3, 40, 44, 98, 111, 116, 250, 251, 252, 253, 255, 256], "89377291e": 3, "02": [3, 27, 30, 33, 36, 44, 45, 53, 59, 62, 73, 78, 82, 96, 109, 114, 165, 198, 257, 323, 324], "87168298e": 3, "23027329e": 3, "88748213e": 3, "18696453e": 3, "10743665e": 3, "69998701e": 3, "50955717e": 3, "94205071e": 3, "51226341e": 3, "08511506e": 3, "28797512e": 3, "54677070e": 3, "78907704e": 3, "69169971e": 3, "28087804e": 3, "6": [3, 6, 7, 20, 23, 24, 27, 30, 31, 33, 34, 36, 38, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 58, 62, 63, 64, 66, 72, 80, 82, 91, 94, 96, 99, 100, 102, 103, 105, 106, 107, 109, 111, 114, 118, 121, 123, 131, 133, 135, 138, 139, 140, 146, 147, 148, 158, 165, 166, 167, 169, 179, 194, 212, 215, 218, 239, 257, 323, 324, 328, 331, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 393, 399, 400, 407, 409, 437], "56421732e": 3, "03": [3, 27, 30, 32, 33, 41, 44, 45, 53, 56, 59, 73, 91, 96, 114, 165, 297, 323, 324, 343], "7": [3, 6, 15, 22, 24, 25, 27, 31, 33, 36, 42, 43, 44, 45, 48, 49, 52, 53, 54, 57, 58, 62, 63, 64, 66, 70, 71, 72, 73, 86, 88, 91, 94, 102, 103, 107, 114, 117, 118, 121, 123, 126, 128, 133, 135, 138, 139, 141, 146, 148, 166, 178, 179, 194, 198, 200, 201, 206, 210, 272, 274, 275, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 380, 385, 389, 391, 392, 394, 396, 397, 401, 403, 406, 412, 436], "65753146e": 3, "67105274e": 3, "8": [3, 6, 7, 9, 12, 14, 24, 27, 30, 33, 34, 36, 38, 40, 42, 43, 45, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 61, 62, 64, 66, 72, 73, 76, 79, 82, 86, 89, 91, 92, 96, 99, 100, 101, 102, 103, 104, 106, 107, 109, 111, 114, 117, 121, 126, 131, 139, 141, 143, 149, 157, 158, 166, 199, 203, 209, 218, 220, 229, 231, 238, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 255, 256, 257, 258, 282, 295, 299, 304, 323, 326, 327, 328, 329, 330, 331, 332, 333, 336, 339, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 405, 407, 416, 417, 419], "02147487e": 3, "29514200e": 3, "17595327e": 3, "36991601e": 3, "41325251e": 3, "59874591e": 3, "22602324e": 3, "77311218e": 3, "22197444e": 3, "53204689e": 3, "76045961e": 3, "14299195e": 3, "14229186e": 3, "03667777e": 3, "89275765e": 3, "89029216e": 3, "35116044e": 3, "21397305e": 3, "73146110e": 3, "37415473e": 3, "41273790e": 3, "81650453e": 3, "65405912e": 3, "70785088e": 3, "56857184e": 3, "21662882e": 3, "47673504e": 3, "13276302e": 3, "60956648e": 3, "52763050e": 3, "02913165e": 3, "28099498e": 3, "08009518e": 3, "09948694e": 3, "72430398e": 3, "77392668e": 3, "03858480e": 3, "38237116e": 3, "48879571e": 3, "43028240e": 3, "47419298e": 3, "01": [3, 6, 7, 12, 27, 30, 32, 33, 36, 42, 45, 48, 51, 53, 55, 58, 59, 61, 71, 73, 82, 96, 99, 100, 101, 108, 109, 111, 114, 188, 200, 204, 282, 285, 289, 320, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "34044167e": 3, "87113353e": 3, "65860070e": 3, "07604083e": 3, "22033793e": 3, "95632638e": 3, "22091833e": 3, "04053401e": 3, "15346421e": 3, "12248248e": 3, "93777472e": 3, "30542770e": 3, "42975168e": 3, "23065699e": 3, "88148413e": 3, "69389850e": 3, "78948532e": 3, "00277192e": 3, "99186528e": 3, "52169168e": 3, "06155201e": 3, "31954963e": 3, "21523781e": 3, "23348266e": 3, "42561783e": 3, "53123762e": 3, "98226568e": 3, "32638147e": 3, "55123985e": 3, "41589108e": 3, "79200458e": 3, "80911910e": 3, "70159964e": 3, "71450637e": 3, "98949038e": 3, "20156260e": 3, "35438799e": 3, "37626590e": 3, "04261625e": 3, "68460255e": 3, "19385938e": 3, "94180147e": 3, "07292144e": 3, "48931966e": 3, "43560946e": 3, "09026957e": 3, "67698189e": 3, "73788725e": 3, "96432727e": 3, "09420799e": 3, "57925608e": 3, "16717878e": 3, "00106507e": 3, "40259074e": 3, "82612357e": 3, "12099527e": 3, "45402051e": 3, "32176815e": 3, "49995892e": 3, "47552368e": 3, "56643400e": 3, "83882850e": 3, "19956570e": 3, "72172857e": 3, "25511877e": 3, "58654887e": 3, "79164599e": 3, "51829040e": 3, "31722246e": 3, "35335771e": 3, "76992889e": 3, "40836555e": 3, "20590282e": 3, "35702949e": 3, "68302363e": 3, "92570241e": 3, "24495067e": 3, "30220448e": 3, "00013659e": 3, "17136694e": 3, "92625830e": 3, "33222948e": 3, "80298102e": 3, "75292294e": 3, "17794973e": 3, "09952585e": 3, "43034471e": 3, "06831845e": 3, "84814981e": 3, "71508973e": 3, "72568898e": 3, "76642356e": 3, "09243148e": 3, "04": [3, 27, 30, 32, 33, 44, 45, 53, 109, 114, 167, 204, 300, 323, 324, 419, 420], "00770870e": 3, "53997875e": 3, "25624704e": 3, "82605607e": 3, "50556031e": 3, "61202149e": 3, "16472133e": 3, "95405982e": 3, "57885892e": 3, "89304367e": 3, "82974591e": 3, "23919117e": 3, "13673342e": 3, "68752113e": 3, "66514647e": 3, "35522195e": 3, "80215045e": 3, "46410957e": 3, "53245879e": 3, "67292079e": 3, "62252898e": 3, "86831480e": 3, "39666175e": 3, "21709326e": 3, "73611960e": 3, "01698395e": 3, "17097451e": 3, "91414765e": 3, "37777245e": 3, "84696626e": 3, "22624809e": 3, "82637617e": 3, "13779782e": 3, "80777141e": 3, "79689410e": 3, "78879047e": 3, "11430839e": 3, "65020799e": 3, "89087169e": 3, "42851404e": 3, "22347955e": 3, "92870173e": 3, "89847183e": 3, "39534189e": 3, "65270091e": 3, "65323947e": 3, "58039351e": 3, "93379867e": 3, "13630883e": 3, "09404754e": 3, "50177281e": 3, "38817282e": 3, "12613540e": 3, "41483908e": 3, "10216777e": 3, "33811522e": 3, "12339949e": 3, "37416545e": 3, "13075922e": 3, "64225026e": 3, "22398238e": 3, "31920159e": 3, "98653745e": 3, "29727685e": 3, "28091318e": 3, "89709497e": 3, "13476119e": 3, "28714010e": 3, "71051351e": 3, "34906218e": 3, "04373946e": 3, "26795092e": 3, "71216683e": 3, "29128390e": 3, "33450586e": 3, "77913027e": 3, "74666735e": 3, "76482250e": 3, "38274671e": 3, "28051162e": 3, "78033258e": 3, "32696453e": 3, "22690121e": 3, "28028981e": 3, "57414125e": 3, "03623616e": 3, "90244366e": 3, "15035032e": 3, "81419385e": 3, "12296696e": 3, "17434721e": 3, "23479341e": 3, "54743967e": 3, "73679113e": 3, "53965178e": 3, "06521029e": 3, "21985749e": 3, "98729771e": 3, "85520789e": 3, "05701854e": 3, "02838686e": 3, "10048659e": 3, "42457692e": 3, "93848918e": 3, "01770546e": 3, "09409845e": 3, "49253829e": 3, "92748947e": 3, "05317736e": 3, "07538739e": 3, "84058648e": 3, "48717129e": 3, "00655171e": 3, "63102492e": 3, "64689287e": 3, "90209758e": 3, "04857715e": 3, "68079479e": 3, "36717578e": 3, "08854362e": 3, "10241873e": 3, "41964251e": 3, "16497622e": 3, "98672088e": 3, "61631042e": 3, "96236024e": 3, "03901100e": 3, "56492856e": 3, "98920376e": 3, "13046642e": 3, "21952467e": 3, "14990949e": 3, "31276991e": 3, "67253798e": 3, "14427240e": 3, "67104041e": 3, "28703388e": 3, "20150433e": 3, "68523824e": 3, "25602079e": 3, "04616740e": 3, "10341807e": 3, "85357079e": 3, "81666358e": 3, "48441549e": 3, "18823655e": 3, "18500938e": 3, "10846405e": 3, "11779242e": 3, "63468558e": 3, "25926797e": 3, "12229345e": 3, "57665227e": 3, "70200952e": 3, "32375590e": 3, "06445604e": 3, "23380302e": 3, "27355744e": 3, "33882590e": 3, "75530980e": 3, "88844616e": 3, "45133916e": 3, "03298897e": 3, "16785283e": 3, "32221455e": 3, "17562873e": 3, "40061012e": 3, "31133800e": 3, "17556399e": 3, "75889283e": 3, "18128665e": 3, "15884993e": 3, "34028213e": 3, "22782642e": 3, "00229870e": 3, "74915823e": 3, "12760091e": 3, "98718054e": 3, "04068639e": 3, "65059250e": 3, "03004323e": 3, "05738914e": 3, "80742864e": 3, "75453540e": 3, "72590792e": 3, "00662468e": 3, "46099892e": 3, "46870953e": 3, "13409833e": 3, "81705476e": 3, "40978936e": 3, "14638242e": 3, "63833747e": 3, "66532167e": 3, "15670668e": 3, "45094392e": 3, "35866535e": 3, "34599075e": 3, "81059118e": 3, "15344964e": 3, "39361583e": 3, "07246689e": 3, "15468846e": 3, "15425110e": 3, "88768207e": 3, "60262151e": 3, "09701578e": 3, "29172822e": 3, "59462815e": 3, "60400076e": 3, "64628380e": 3, "12881436e": 3, "17266951e": 3, "51637721e": 3, "82890473e": 3, "42549576e": 3, "47013265e": 3, "63032404e": 3, "17309001e": 3, "24183712e": 3, "17987709e": 3, "85681035e": 3, "23657379e": 3, "86600946e": 3, "54628446e": 3, "50516881e": 3, "20607981e": 3, "19789297e": 3, "59525924e": 3, "12134779e": 3, "93191443e": 3, "54329776e": 3, "23478074e": 3, "03927781e": 3, "37294551e": 3, "82794136e": 3, "98743777e": 3, "66896202e": 3, "23290519e": 3, "10332577e": 3, "18106868e": 3, "18719458e": 3, "63538061e": 3, "05280157e": 3, "84618614e": 3, "36093712e": 3, "65204712e": 3, "49398774e": 3, "49353457e": 3, "11599455e": 3, "69092414e": 3, "00058821e": 3, "99013788e": 3, "01872233e": 3, "09867096e": 3, "11779442e": 3, "72051129e": 3, "16426429e": 3, "55501123e": 3, "27700923e": 3, "95493739e": 3, "48751995e": 3, "19935782e": 3, "88652165e": 3, "61421679e": 3, "77020431e": 3, "90073051e": 3, "58286993e": 3, "31740048e": 3, "24913058e": 3, "36175966e": 3, "07356670e": 3, "08861753e": 3, "12811808e": 3, "63144144e": 3, "04802897e": 3, "07013372e": 3, "89177313e": 3, "71612950e": 3, "13383113e": 3, "10364301e": 3, "23255627e": 3, "50403283e": 3, "85904615e": 3, "04965473e": 3, "41704930e": 3, "18518526e": 3, "83203093e": 3, "82244371e": 3, "17678692e": 3, "03260464e": 3, "09182030e": 3, "23391290e": 3, "19383329e": 3, "53769024e": 3, "21212649e": 3, "55619793e": 3, "93485256e": 3, "92529437e": 3, "76694054e": 3, "67991606e": 3, "76553421e": 3, "38161949e": 3, "60399404e": 3, "50401121e": 3, "27425852e": 3, "29243054e": 3, "06665838e": 3, "81934193e": 3, "77511935e": 3, "64243907e": 3, "coeffici": [3, 6, 23, 39, 40, 44, 51, 98, 99, 134, 150, 153, 154, 160, 161, 162, 166, 167, 170, 173, 186, 188, 255, 256, 271, 273, 276, 282, 291, 295, 417], "voxel": [3, 15, 25, 28, 33, 36, 37, 39, 40, 41, 44, 45, 46, 49, 50, 59, 66, 69, 70, 74, 79, 81, 82, 84, 87, 89, 90, 92, 98, 100, 102, 105, 108, 113, 114, 116, 124, 128, 131, 132, 133, 139, 148, 150, 153, 157, 158, 160, 162, 163, 164, 166, 169, 170, 171, 173, 174, 175, 178, 180, 202, 203, 210, 215, 219, 220, 233, 251, 254, 255, 256, 257, 258, 270, 277, 278, 282, 291, 295, 297, 298, 299, 300, 302, 304, 305, 306, 315, 316, 319, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 340, 343, 356, 371, 374, 379, 382, 387, 393, 398, 404, 405, 406, 407, 408, 409, 413, 414, 415, 416, 417, 423, 436, 438], "464": [3, 33, 98], "get": [3, 6, 14, 21, 22, 33, 35, 40, 41, 51, 52, 56, 58, 62, 66, 68, 69, 71, 75, 78, 81, 86, 88, 100, 101, 104, 108, 117, 133, 138, 153, 155, 158, 159, 160, 165, 167, 169, 172, 174, 180, 186, 187, 188, 196, 202, 203, 205, 206, 231, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 272, 274, 275, 282, 295, 297, 305, 310, 314, 326, 327, 328, 329, 330, 331, 332, 333, 343, 344, 346, 347, 374, 404, 405, 406, 407, 415, 437], "coef_img_": [3, 29, 30, 31, 39, 42, 43, 111, 160, 180, 250, 251, 252, 253, 255, 256], "coef_img": [3, 30, 43, 111, 116], "niftiimag": [3, 155, 168, 169, 178, 179], "save": [3, 6, 9, 14, 21, 23, 29, 42, 43, 48, 49, 50, 51, 61, 66, 72, 86, 91, 92, 94, 98, 99, 100, 103, 107, 117, 125, 139, 148, 153, 158, 167, 178, 179, 180, 229, 231, 255, 256, 259, 260, 261, 275, 282, 295, 322, 327, 328, 330, 331, 332, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 415, 417, 438], "to_filenam": [3, 4, 6, 29, 48, 49, 55, 64, 86, 94, 179], "haxby_svc_weight": 3, "dim": [3, 21, 23, 29, 47, 56, 91, 129, 131, 135, 153, 160, 270, 272, 274, 275, 378, 391, 392, 393, 400], "doe": [3, 6, 29, 49, 66, 68, 75, 102, 116, 117, 128, 137, 141, 150, 153, 160, 161, 165, 167, 168, 169, 170, 175, 180, 196, 206, 218, 271, 273, 276, 285, 306, 318, 320, 322, 339, 347, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 404, 420, 436], "than": [3, 4, 6, 15, 31, 32, 35, 36, 39, 40, 41, 42, 43, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 64, 66, 67, 69, 70, 77, 79, 81, 86, 88, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 111, 115, 116, 117, 128, 131, 132, 133, 134, 135, 137, 141, 146, 148, 151, 153, 154, 157, 159, 160, 161, 162, 163, 165, 167, 168, 170, 173, 176, 178, 179, 180, 202, 203, 229, 231, 235, 250, 251, 252, 253, 257, 258, 282, 291, 297, 298, 299, 306, 311, 319, 320, 323, 324, 326, 328, 329, 331, 332, 343, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 374, 379, 380, 385, 388, 389, 393, 397, 398, 399, 401, 403, 407, 416, 418, 420, 423], "answer": [3, 437], "question": [3, 51, 65, 66, 99, 157, 175, 176, 180, 215, 437], "random": [3, 40, 41, 44, 51, 55, 63, 98, 99, 102, 111, 133, 145, 153, 157, 158, 159, 160, 167, 168, 199, 257, 258, 272, 274, 275, 282, 291, 297, 343, 404, 405, 407, 409], "compar": [3, 6, 30, 31, 33, 35, 39, 41, 46, 51, 56, 58, 59, 64, 66, 77, 79, 80, 83, 86, 94, 96, 99, 113, 114, 117, 119, 141, 153, 155, 156, 159, 160, 161, 162, 163, 164, 167, 169, 170, 173, 180, 186, 188, 201, 204, 210, 215, 311, 312, 326, 327, 328, 329, 330, 331, 332, 333, 375, 376, 380, 387, 393, 398, 419, 436, 438], "dummi": [3, 99, 146, 153, 160, 161, 163, 168, 250, 251, 252, 253, 289], "replac": [3, 4, 30, 32, 35, 36, 40, 41, 42, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 70, 77, 79, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 111, 116, 123, 124, 125, 132, 133, 138, 141, 144, 145, 146, 147, 148, 153, 163, 167, 168, 176, 233, 300, 317, 323, 334, 337, 419], "dummy_decod": 3, "dummy_classifi": [3, 32, 250, 252], "simpli": [3, 64, 66, 67, 68, 69, 89, 101, 103, 105, 108, 117, 170, 180, 198, 299, 311, 317, 391, 392, 393], "mean": [3, 6, 14, 15, 16, 18, 21, 22, 23, 25, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 49, 50, 51, 55, 56, 58, 61, 64, 66, 67, 70, 71, 77, 83, 89, 91, 92, 94, 95, 96, 98, 102, 103, 104, 111, 113, 117, 131, 135, 138, 141, 145, 147, 153, 154, 157, 158, 160, 167, 168, 170, 173, 175, 179, 180, 186, 187, 188, 190, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 250, 251, 252, 253, 254, 255, 256, 257, 258, 272, 274, 275, 282, 290, 291, 295, 297, 298, 299, 301, 306, 311, 312, 323, 324, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 343, 378, 379, 391, 392, 393, 394, 396, 398, 400, 404, 405, 406, 407, 409, 410, 413, 414, 417, 419, 420], "over": [3, 20, 48, 49, 51, 69, 71, 89, 116, 124, 144, 145, 153, 159, 160, 165, 166, 167, 172, 176, 179, 201, 258, 264, 282, 308, 312, 323, 344, 346, 347, 391, 395, 423, 436], "38888888888888895": 3, "6111111111111112": [3, 29], "anova": [3, 28, 35, 42, 45, 105, 106, 113, 133, 153, 164, 165, 166, 173, 180, 218, 250, 251, 252, 253, 255, 256, 307, 393, 398, 400, 438], "hous": [3, 18, 28, 32, 33, 45, 94, 97, 109, 113, 124, 153, 165, 174, 178, 179, 218, 250, 252, 254, 305, 307, 310, 312, 313, 326, 332, 343, 371, 386, 390, 393, 398, 400], "For": [3, 6, 9, 14, 15, 19, 23, 24, 29, 30, 32, 34, 35, 36, 40, 41, 48, 50, 51, 63, 64, 66, 67, 69, 71, 72, 79, 80, 86, 89, 98, 100, 103, 105, 108, 116, 117, 138, 148, 153, 154, 155, 157, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 172, 173, 175, 176, 178, 179, 180, 186, 193, 196, 197, 198, 202, 203, 205, 206, 207, 209, 210, 219, 229, 231, 233, 244, 249, 250, 251, 252, 253, 255, 256, 257, 258, 272, 273, 274, 275, 282, 289, 295, 297, 312, 320, 323, 324, 328, 330, 331, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 378, 383, 386, 388, 391, 392, 393, 394, 395, 396, 397, 405, 407, 408, 409, 415, 416, 417, 418, 423, 436, 437], "precomput": [3, 256], "frem": [3, 28, 45, 113, 114, 124, 144, 153, 160, 161, 164, 166, 173, 174, 218, 227, 252, 253, 256, 307, 312, 390, 393, 398, 438], "fast": [3, 31, 39, 48, 49, 65, 66, 72, 100, 114, 141, 144, 153, 157, 159, 160, 161, 164, 167, 168, 173, 174, 224, 231, 252, 253, 258, 317, 405, 406, 412, 438], "ensembl": [3, 31, 39, 42, 114, 160, 161, 164, 166, 173, 174, 252, 253, 438], "regular": [3, 31, 39, 56, 66, 91, 94, 114, 117, 144, 153, 160, 161, 164, 166, 167, 173, 174, 175, 179, 187, 188, 190, 252, 253, 255, 256, 310, 437, 438], "robust": [3, 31, 39, 94, 114, 143, 153, 158, 160, 164, 173, 252, 253, 323, 324, 438], "spacenet": [3, 131, 153, 160, 161, 162, 164, 173, 255, 256, 438], "spatial": [3, 6, 31, 39, 43, 46, 49, 50, 54, 59, 69, 86, 94, 95, 98, 104, 108, 113, 114, 124, 144, 148, 153, 157, 159, 160, 163, 164, 170, 173, 174, 177, 180, 196, 199, 204, 206, 215, 226, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 297, 308, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 391, 393, 398, 405, 407, 409, 438], "38": [3, 7, 33, 42, 43, 48, 62, 77, 91, 102, 111, 138, 153], "051": [3, 7, 41], "916": [3, 7, 15, 18, 27, 29, 34, 36, 37, 45, 98, 109], "plot_decoding_tutori": [3, 7, 141, 153, 160, 168], "download": [4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 114, 115, 128, 129, 131, 132, 134, 138, 141, 144, 145, 147, 153, 154, 155, 157, 160, 168, 175, 182, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 249, 438], "exist": [4, 6, 20, 48, 64, 72, 102, 158, 165, 168, 179, 186, 187, 188, 229, 231, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 309, 326, 327, 328, 329, 330, 331, 332, 333, 390, 404, 405, 406, 407, 436], "ship": [4, 12, 94, 138, 153, 436], "mni152_file_path": [4, 175], "variabl": [4, 6, 14, 39, 42, 43, 44, 56, 69, 75, 77, 94, 100, 101, 108, 114, 125, 130, 148, 150, 153, 155, 160, 161, 162, 164, 165, 167, 168, 170, 173, 178, 180, 195, 240, 250, 251, 252, 253, 254, 255, 256, 269, 273, 282, 295, 311, 323], "path": [4, 6, 15, 62, 64, 72, 86, 94, 101, 108, 115, 116, 117, 125, 130, 141, 147, 149, 150, 153, 160, 166, 167, 168, 176, 177, 180, 187, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 247, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 282, 285, 295, 301, 310, 320, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 357, 405, 406, 407, 415, 419, 421, 422, 423, 438], "mni152": [4, 93, 123, 147, 153, 170, 197, 199, 206, 210, 219, 220, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 255, 256, 257, 258, 307, 329, 332, 336, 339, 391, 392, 393, 400, 405], "templat": [4, 16, 22, 23, 48, 69, 75, 83, 96, 108, 113, 114, 123, 126, 131, 136, 141, 144, 147, 150, 153, 158, 170, 173, 175, 179, 180, 196, 198, 210, 219, 220, 233, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 257, 258, 310, 315, 316, 324, 329, 332, 336, 339, 378, 391, 392, 393, 398, 400, 405, 415], "mni_icbm152_t1_tal_nlin_sym_09a_convert": [4, 175], "quickli": [4, 33, 61, 62, 64, 75, 154, 157, 167, 168, 176], "plot_img": [4, 6, 36, 125, 141, 148, 153, 175, 354, 356, 359, 361, 363, 365, 367, 369, 371, 436], "0x7f651dca89a0": 4, "veri": [4, 30, 31, 32, 35, 36, 39, 40, 42, 44, 49, 54, 66, 75, 76, 77, 79, 86, 94, 103, 116, 141, 153, 154, 155, 157, 160, 161, 162, 163, 166, 167, 168, 170, 173, 176, 180, 252, 253, 328, 331, 374, 391, 418], "pretti": [4, 103], "simplest": [4, 71, 98, 117, 163, 167, 436], "possibl": [4, 6, 14, 15, 16, 44, 69, 71, 80, 81, 84, 86, 94, 100, 116, 117, 131, 148, 150, 153, 154, 157, 160, 165, 167, 168, 170, 173, 175, 176, 179, 180, 186, 187, 188, 194, 250, 251, 252, 253, 254, 255, 256, 257, 258, 270, 272, 274, 275, 282, 285, 295, 297, 304, 315, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 373, 374, 380, 385, 389, 404, 405, 406, 407, 417, 436], "whole": [4, 6, 14, 42, 48, 50, 70, 89, 94, 114, 117, 125, 147, 153, 165, 166, 168, 169, 174, 179, 180, 199, 219, 229, 231, 241, 244, 250, 251, 252, 253, 257, 258, 329, 332, 336, 339, 343, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 391, 405, 407, 436], "make": [4, 6, 8, 15, 22, 23, 27, 30, 31, 36, 41, 47, 49, 51, 56, 58, 66, 68, 69, 70, 71, 75, 77, 79, 80, 84, 98, 104, 113, 114, 117, 123, 125, 126, 127, 132, 138, 147, 148, 150, 153, 158, 160, 161, 165, 166, 169, 172, 173, 174, 175, 178, 180, 200, 208, 218, 229, 233, 238, 247, 250, 251, 252, 253, 255, 256, 270, 315, 347, 348, 349, 350, 351, 352, 353, 355, 357, 358, 360, 362, 364, 366, 368, 370, 385, 388, 393, 395, 397, 398, 399, 400, 401, 403, 404, 421, 423, 436, 437], "prettier": 4, "exercis": [4, 175], "own": [4, 6, 49, 58, 100, 115, 117, 160, 163, 168, 185, 220, 438], "noth": [4, 165, 188, 257, 258, 271, 273, 276, 282, 295, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 386, 388, 391, 392, 393, 400], "stringshould": [4, 6, 14, 15, 32, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 66, 68, 69, 70, 79, 88, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 116, 117, 134, 135, 145, 148, 149, 153, 158, 159, 160, 161, 163, 167, 168, 170, 175, 176, 180, 186, 187, 188, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 235, 236, 237, 238, 239, 240, 250, 251, 252, 253, 254, 255, 256, 257, 258, 279, 282, 284, 285, 289, 290, 295, 296, 298, 299, 300, 310, 311, 313, 316, 318, 319, 321, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 343, 344, 377, 378, 380, 383, 385, 386, 388, 391, 392, 393, 394, 395, 397, 401, 404, 405, 406, 407, 408, 409, 413, 415, 416, 417, 419, 434, 436, 437], "volum": [4, 8, 16, 27, 31, 32, 36, 39, 43, 54, 56, 61, 64, 69, 79, 87, 91, 100, 111, 114, 116, 123, 125, 135, 138, 146, 153, 165, 166, 173, 174, 175, 178, 196, 198, 201, 218, 228, 233, 250, 251, 252, 253, 255, 256, 257, 258, 282, 304, 312, 315, 316, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 344, 346, 347, 379, 383, 388, 392, 397, 398, 400, 407, 408, 409, 413, 419, 423, 436, 437, 438], "smooth_img": [4, 70, 94, 95, 103, 135, 141, 153, 178, 179, 180], "mm": [4, 15, 33, 37, 55, 84, 87, 91, 95, 138, 153, 158, 179, 201, 206, 214, 282, 295, 323, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 407, 408, 409, 417, 423], "smooth_anat_img": 4, "fwhm": [4, 66, 94, 95, 103, 105, 135, 141, 153, 173, 175, 179, 180, 317], "nibabel": [4, 33, 36, 44, 49, 52, 56, 62, 75, 81, 84, 91, 123, 124, 132, 133, 135, 141, 146, 148, 150, 153, 167, 178, 179, 257, 258, 301, 302, 303, 310, 315, 316, 317, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 405, 407, 408, 409, 413, 414], "nifti1": [4, 33, 36, 49, 52, 56, 75, 81, 91, 141, 153, 317, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 405, 407, 408, 409, 413, 414], "nifti1imag": [4, 33, 36, 40, 43, 44, 48, 49, 52, 56, 75, 81, 84, 91, 133, 134, 136, 141, 153, 158, 178, 200, 202, 203, 205, 206, 209, 220, 227, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 257, 258, 277, 279, 282, 295, 297, 298, 299, 301, 303, 307, 308, 310, 311, 312, 315, 316, 317, 318, 319, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 354, 359, 361, 365, 371, 375, 376, 377, 405, 407, 408, 409, 413, 414], "0x7f651dd15190": 4, "0x7f651dc4c580": 4, "could": [4, 6, 36, 49, 58, 66, 69, 70, 79, 85, 86, 93, 100, 105, 116, 117, 128, 144, 148, 149, 153, 160, 163, 165, 167, 168, 170, 175, 180, 270, 392, 423], "more_smooth_anat_img": 4, "0x7f651ba447f0": 4, "ani": [4, 6, 49, 56, 58, 75, 80, 81, 100, 103, 104, 110, 113, 116, 123, 142, 144, 150, 153, 155, 157, 160, 161, 164, 165, 167, 168, 169, 170, 173, 180, 194, 218, 229, 231, 235, 302, 307, 311, 317, 320, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 388, 391, 407, 411, 416, 419, 423, 436, 437, 438], "necessari": [4, 62, 89, 92, 101, 108, 123, 141, 148, 153, 154, 157, 160, 168, 169, 176, 180, 196, 229, 231, 250, 251, 252, 253, 275, 282, 295, 332, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 415], "tool": [4, 8, 10, 11, 20, 23, 27, 32, 36, 48, 49, 79, 86, 87, 94, 100, 104, 113, 116, 131, 150, 153, 156, 161, 168, 169, 172, 174, 175, 177, 178, 180, 181, 183, 218, 247, 312, 354, 356, 359, 361, 363, 365, 367, 369, 371, 378, 383, 385, 392, 393, 398, 400, 427, 436, 437], "659": [4, 7, 33], "257": [4, 33, 41, 72], "plot_nilearn_101": [4, 7], "modul": [5, 19, 26, 32, 34, 35, 36, 40, 41, 42, 47, 50, 51, 52, 53, 54, 55, 56, 58, 61, 87, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 103, 104, 105, 106, 111, 114, 116, 117, 123, 124, 125, 126, 133, 135, 136, 144, 148, 150, 153, 163, 168, 171, 175, 176, 180, 184, 229, 233, 250, 251, 252, 253, 272, 274, 275, 289, 297, 299, 309, 311, 427, 431, 432, 433, 434, 436], "np": [5, 6, 9, 11, 12, 14, 22, 23, 24, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 77, 79, 80, 84, 85, 87, 89, 94, 98, 100, 102, 103, 104, 105, 106, 107, 108, 111, 150, 153, 158, 168, 178, 179, 186, 206, 233, 271, 272, 273, 274, 275, 276, 301, 311, 343, 404, 406], "linspac": [5, 49, 61, 68], "2000": [5, 42, 49, 102, 114, 141, 144, 153, 157, 178, 209], "matplotlib": [5, 6, 8, 9, 11, 15, 18, 24, 25, 27, 30, 32, 35, 38, 40, 41, 42, 43, 44, 48, 49, 51, 52, 54, 55, 56, 57, 58, 61, 62, 63, 65, 66, 68, 70, 72, 78, 79, 80, 84, 91, 94, 99, 100, 101, 102, 105, 106, 111, 113, 121, 125, 128, 133, 135, 136, 138, 141, 143, 148, 149, 153, 155, 160, 179, 328, 331, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 436, 437], "pyplot": [5, 6, 11, 12, 15, 18, 24, 25, 30, 32, 34, 35, 38, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 63, 65, 66, 68, 70, 72, 78, 79, 80, 84, 91, 94, 99, 100, 101, 102, 105, 106, 111, 155, 179, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 397, 398, 436], "scientif": [5, 114, 145, 148, 153, 168, 175, 205, 216, 224, 234, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 383, 385, 386, 392, 393, 394, 396, 397], "plt": [5, 6, 11, 12, 15, 18, 24, 25, 30, 32, 34, 35, 38, 40, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 63, 65, 66, 68, 70, 72, 78, 79, 80, 84, 91, 94, 99, 100, 101, 102, 105, 106, 111, 179, 378, 379, 380, 383, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400], "co": [5, 24, 84, 114, 169, 209, 238], "line": [5, 9, 14, 21, 24, 48, 51, 91, 160, 167, 168, 233, 300, 399, 419, 423, 437], "line2d": [5, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380], "0x7f65239c0400": 5, "194": [5, 7, 33, 41, 94, 96], "plot_python_101": [5, 7], "tutori": [6, 7, 66, 98, 128, 138, 153, 160, 168, 173, 174, 175, 180, 218, 250, 307, 312, 383, 392, 400], "model": [6, 23, 28, 31, 32, 33, 34, 39, 41, 44, 45, 48, 50, 51, 60, 61, 63, 69, 71, 72, 73, 74, 75, 81, 82, 97, 98, 102, 104, 105, 108, 109, 113, 114, 123, 124, 135, 141, 144, 146, 148, 149, 150, 153, 154, 156, 158, 160, 164, 165, 166, 167, 168, 171, 173, 174, 175, 180, 181, 186, 187, 190, 217, 220, 221, 224, 225, 226, 228, 239, 250, 251, 252, 253, 255, 256, 257, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 282, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 301, 302, 305, 306, 311, 312, 316, 319, 322, 323, 324, 326, 329, 332, 333, 343, 355, 356, 370, 371, 381, 382, 385, 392, 393, 398, 415, 417, 430, 437, 438], "period": [6, 41, 66, 69, 108, 250, 251, 252, 253, 255, 256, 286, 287, 288, 292, 293, 294, 300, 327, 328, 329, 330, 331, 332, 333, 379, 405, 407, 419], "auditori": [6, 66, 69, 72, 77, 103, 105, 170, 214, 223, 224, 230, 236], "stimul": [6, 72, 160], "versu": [6, 66, 69, 79, 80, 94, 98, 160, 161, 173], "analys": [6, 100, 114, 125, 153, 160, 165, 169, 170, 171, 172, 173, 174, 178, 180, 227, 424, 437], "nativ": [6, 60, 73, 113, 124, 134, 153, 169, 237, 282, 289, 301, 309, 312, 315, 333, 393, 398], "scan": [6, 23, 33, 36, 55, 58, 63, 65, 66, 68, 94, 100, 114, 146, 153, 157, 165, 173, 178, 224, 257, 258, 282, 284, 289, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 379, 405, 407, 410, 411, 413, 419], "preprocess": [6, 11, 23, 29, 34, 37, 40, 41, 44, 89, 92, 99, 101, 104, 108, 111, 114, 115, 124, 133, 153, 158, 159, 165, 166, 170, 173, 180, 194, 195, 215, 233, 239, 282, 285, 300, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 407, 419, 427, 438], "sensit": [6, 40, 48, 56, 114, 170, 173, 300, 324, 343, 419], "would": [6, 9, 14, 42, 50, 58, 64, 66, 67, 75, 78, 103, 111, 117, 125, 146, 150, 153, 160, 167, 168, 169, 170, 176, 249, 250, 251, 252, 253, 255, 256, 258, 282, 284, 285, 289, 295, 297, 320, 334, 339, 379], "like": [6, 10, 11, 16, 34, 36, 40, 47, 49, 54, 56, 66, 79, 81, 86, 89, 91, 92, 94, 100, 117, 125, 141, 145, 148, 149, 150, 153, 166, 167, 168, 169, 170, 172, 173, 176, 177, 179, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 269, 272, 273, 274, 275, 277, 279, 282, 284, 285, 295, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 378, 379, 383, 385, 386, 388, 389, 391, 392, 393, 394, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 423, 425, 436, 438], "obtain": [6, 15, 22, 42, 43, 49, 54, 58, 63, 66, 69, 75, 77, 91, 94, 102, 105, 148, 153, 154, 155, 157, 159, 160, 162, 165, 167, 170, 173, 180, 188, 197, 199, 207, 219, 224, 241, 242, 245, 249, 255, 256, 299, 304, 315, 319, 330, 331, 333, 343, 357, 384, 407], "correct": [6, 42, 43, 48, 56, 75, 77, 79, 81, 92, 101, 102, 105, 106, 114, 123, 124, 141, 144, 150, 153, 154, 165, 168, 170, 171, 173, 176, 234, 248, 250, 251, 252, 253, 255, 256, 297, 298, 323, 324, 343, 379, 420, 438], "normal": [6, 24, 31, 37, 44, 55, 58, 69, 70, 101, 104, 108, 111, 116, 128, 153, 160, 167, 168, 169, 170, 173, 187, 190, 196, 222, 233, 274, 275, 423], "smooth": [6, 29, 34, 42, 44, 48, 49, 55, 70, 75, 81, 83, 94, 96, 101, 105, 113, 114, 134, 135, 153, 157, 159, 160, 161, 167, 175, 177, 178, 215, 250, 251, 252, 253, 257, 258, 282, 295, 297, 312, 317, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 343, 383, 394, 396, 398, 404, 405, 407, 409, 438], "conduct": [6, 32, 117, 170], "fil": [6, 236, 237], "geraint": 6, "ree": 6, "under": [6, 9, 102, 150, 153, 160, 161, 165, 166, 167, 168, 169, 170, 173, 176, 254, 304, 315, 316, 321, 336, 339, 343], "direct": [6, 15, 40, 51, 94, 98, 114, 135, 144, 153, 155, 156, 168, 176, 180, 201, 207, 233, 239, 250, 251, 282, 295, 317, 319, 320, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 360, 362, 363, 364, 366, 367, 368, 369, 370, 373, 374, 378, 380, 383, 385, 386, 389, 391, 392, 393, 408, 417, 436, 438], "karl": 6, "friston": [6, 114, 300, 419], "method": [6, 14, 15, 26, 31, 36, 39, 44, 46, 48, 58, 59, 86, 89, 91, 92, 94, 100, 105, 113, 114, 115, 117, 124, 125, 126, 130, 134, 138, 141, 144, 145, 146, 148, 150, 153, 154, 155, 157, 161, 162, 166, 167, 168, 173, 174, 175, 178, 179, 180, 186, 187, 188, 198, 209, 215, 226, 229, 231, 250, 251, 252, 253, 254, 255, 256, 257, 258, 272, 273, 274, 275, 277, 282, 295, 297, 302, 305, 306, 307, 312, 315, 316, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 383, 392, 399, 401, 402, 403, 404, 405, 406, 407, 415, 419, 420, 436, 438], "develop": [6, 47, 55, 56, 85, 89, 91, 92, 114, 136, 141, 153, 154, 155, 157, 159, 167, 168, 175, 176, 188, 209, 215, 379], "spm": [6, 10, 11, 36, 49, 61, 66, 68, 71, 79, 86, 94, 114, 149, 150, 153, 164, 169, 173, 178, 196, 236, 237, 282, 284, 289, 292, 293, 294, 311, 438], "accord": [6, 41, 44, 69, 94, 100, 108, 123, 133, 134, 135, 138, 144, 146, 150, 153, 158, 165, 168, 187, 194, 206, 248, 250, 251, 252, 253, 255, 256, 269, 300, 320, 343, 388, 389, 394, 396, 397, 401, 403, 406, 407, 418, 419, 436], "96": [6, 30, 32, 33, 36, 42, 43, 44, 49, 52, 72, 84, 102, 105], "tr": [6, 11, 23, 25, 33, 63, 68, 71, 108, 124, 137, 149, 153, 170, 173, 179, 215, 286, 287, 288, 292, 293, 294], "altern": [6, 9, 16, 20, 22, 52, 54, 58, 66, 156, 157, 165, 173, 180, 272, 274, 275, 343, 438], "42": [6, 24, 33, 36, 42, 43, 49, 62, 91, 92, 100, 102, 104, 436], "block": [6, 33, 51, 56, 58, 63, 100, 101, 115, 125, 153, 160, 167, 179, 390, 425], "bi": 6, "syllab": 6, "word": [6, 14, 77, 94, 103, 105, 117, 160, 161, 168, 229, 231], "binaur": 6, "60": [6, 15, 33, 36, 40, 41, 42, 43, 44, 48, 63, 99, 102, 105, 107, 114, 228, 436], "fm00223_004": 6, "2t": 6, "siemen": 6, "magnetom": 6, "vision": 6, "64": [6, 10, 11, 19, 21, 33, 34, 36, 42, 43, 44, 47, 49, 66, 79, 84, 86, 94, 102, 145, 150, 153, 178, 194, 197, 198, 201], "contigu": [6, 157, 167, 343], "64x64x64": 6, "3mm": 6, "took": [6, 43, 48, 92], "05": [6, 7, 12, 27, 30, 32, 33, 44, 45, 51, 53, 75, 76, 77, 79, 81, 82, 99, 170, 195, 196, 199, 204, 205, 206, 209, 210, 233, 236, 237, 239, 272, 274, 275, 277], "repeat": [6, 58, 66, 68, 160, 170], "arbitrarili": [6, 256], "subject_data": [6, 70, 71, 169], "abid": [6, 114, 132, 153, 168, 194], "bid": [6, 60, 72, 73, 97, 100, 109, 113, 123, 125, 141, 144, 146, 148, 150, 153, 169, 173, 211, 216, 221, 234, 235, 248, 249, 282, 285, 295, 323, 324, 325, 332, 381, 385, 387, 398, 415, 416, 417], "organ": [6, 58, 114, 128, 141, 147, 149, 153, 168, 173, 175, 206, 210, 213, 297, 324, 343, 359, 422, 423, 437], "fetch_spm_auditori": [6, 70], "sep": [6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 72, 94, 102, 158, 178, 344, 346, 347], "n": [6, 14, 26, 41, 42, 49, 51, 56, 57, 58, 62, 70, 71, 77, 79, 80, 84, 91, 94, 99, 100, 102, 103, 105, 106, 107, 114, 118, 119, 121, 122, 126, 128, 131, 153, 161, 167, 168, 170, 196, 205, 212, 215, 216, 226, 234, 257, 258, 269, 273, 274, 275, 282, 291, 323, 324, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 389, 407, 410, 411, 419, 437], "spm_auditori": [6, 236], "sub001": [6, 236, 237], "fm00223": 6, "fm00223_005": 6, "fm00223_006": 6, "fm00223_007": 6, "fm00223_008": 6, "anatomi": [6, 42, 69, 75, 210], "plot_anat": [6, 15, 18, 50, 148, 153, 158, 393, 436], "cbar_tick_format": [6, 25, 145, 148, 153, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 383, 385, 386, 392, 393, 394, 396, 397], "0x7f651d96a220": 6, "next": [6, 14, 54, 55, 58, 63, 64, 65, 66, 69, 70, 75, 78, 79, 80, 81, 108, 136, 139, 148, 153, 155, 166, 167, 168, 170, 176], "concaten": [6, 37, 47, 49, 53, 57, 100, 154, 179, 301, 307, 323, 407], "averag": [6, 9, 24, 30, 37, 49, 51, 70, 94, 114, 144, 147, 153, 157, 161, 162, 172, 173, 219, 227, 238, 244, 250, 251, 264, 312, 317, 323, 390, 394, 396, 405, 423], "activ": [6, 14, 15, 16, 30, 32, 40, 41, 49, 64, 66, 69, 70, 71, 76, 77, 79, 80, 81, 100, 108, 114, 116, 154, 155, 158, 159, 160, 164, 165, 167, 168, 169, 170, 172, 173, 175, 176, 180, 188, 196, 204, 207, 226, 227, 228, 247, 277, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 377, 407, 409, 437], "fmri_img": [6, 34, 36, 37, 64, 65, 66, 67, 69, 70, 71, 94, 108, 169], "must": [6, 34, 72, 94, 150, 153, 160, 161, 163, 165, 167, 168, 169, 170, 176, 178, 180, 187, 188, 190, 196, 218, 250, 251, 252, 253, 254, 255, 256, 257, 269, 273, 282, 295, 296, 297, 300, 306, 312, 315, 317, 322, 323, 326, 327, 329, 330, 332, 335, 337, 338, 339, 340, 341, 342, 343, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 384, 391, 393, 394, 395, 396, 397, 399, 401, 403, 405, 410, 413, 414, 416, 417, 419, 420, 423, 436], "descript": [6, 58, 115, 117, 123, 125, 144, 148, 153, 168, 176, 178, 179, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 226, 229, 230, 231, 232, 239, 284, 297, 300, 304, 312, 317, 318, 324, 343, 438], "typic": [6, 72, 78, 79, 100, 157, 159, 161, 165, 168, 170, 173, 178, 179, 180, 240, 252, 253, 256, 272, 322, 333, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 391, 392, 393, 400, 405, 436], "event": [6, 60, 62, 63, 65, 66, 68, 69, 70, 71, 73, 100, 101, 108, 113, 114, 125, 144, 145, 153, 160, 170, 171, 225, 282, 283, 284, 289, 384, 437, 438], "tsv": [6, 47, 52, 53, 55, 56, 58, 60, 62, 73, 101, 108, 113, 125, 153, 169, 215, 322, 323, 324, 384], "read_tabl": [6, 65, 66, 69, 70, 71], "onset": [6, 33, 63, 65, 66, 68, 72, 100, 125, 144, 153, 169, 237, 282, 283, 284, 286, 287, 288, 289, 292, 293, 294, 384], "durat": [6, 33, 63, 66, 68, 72, 125, 153, 169, 170, 178, 284, 289, 384], "trial_typ": [6, 33, 63, 65, 66, 72, 100, 101, 289, 384], "84": [6, 30, 33, 36, 42, 43, 91, 100, 102, 114, 302, 323], "126": [6, 7, 33, 41, 43, 56, 67, 91, 147, 153], "168": [6, 33, 41, 54, 55, 56, 58, 77, 89, 91, 158], "210": [6, 22, 33, 36, 41, 42, 44, 72, 102, 114, 219, 300, 419], "252": [6, 33, 41, 94], "294": [6, 33, 41], "336": [6, 33, 41], "378": [6, 33], "420": [6, 33, 36, 41, 42, 44, 45, 102], "462": [6, 33, 87, 96], "12": [6, 16, 25, 27, 32, 33, 36, 40, 41, 42, 43, 44, 48, 49, 55, 56, 59, 62, 63, 67, 68, 70, 73, 75, 77, 78, 80, 91, 101, 102, 103, 105, 107, 109, 114, 118, 121, 123, 124, 126, 128, 144, 149, 150, 153, 166, 167, 179, 180, 196, 198, 205, 207, 215, 285, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 407], "504": [6, 33, 62], "13": [6, 33, 36, 42, 43, 44, 56, 62, 69, 71, 73, 77, 91, 102, 103, 105, 107, 114, 118, 124, 126, 153, 157, 165, 186, 198, 199, 207, 214, 233, 269, 273, 279, 330, 331, 343, 379, 410, 411], "546": [6, 33], "14": [6, 18, 30, 33, 36, 41, 42, 43, 52, 56, 59, 62, 70, 77, 89, 91, 96, 102, 103, 114, 119, 121, 131, 133, 134, 135, 138, 141, 153, 165, 200, 206, 396], "588": [6, 33], "630": [6, 33, 36, 42, 102], "firstlevelmodel": [6, 61, 64, 65, 66, 67, 70, 71, 100, 146, 148, 150, 153, 169, 285, 295, 297, 322, 417], "design": [6, 33, 41, 44, 60, 61, 62, 64, 65, 67, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 101, 105, 108, 113, 114, 124, 144, 145, 146, 148, 153, 160, 163, 167, 168, 170, 171, 172, 173, 224, 269, 272, 273, 274, 275, 280, 282, 283, 289, 291, 295, 296, 297, 298, 305, 311, 322, 325, 381, 382, 393, 398, 417, 438], "matrix": [6, 22, 33, 37, 40, 41, 44, 47, 50, 51, 53, 61, 62, 63, 64, 66, 69, 70, 71, 74, 75, 76, 77, 79, 80, 81, 82, 84, 91, 92, 100, 101, 103, 105, 108, 113, 123, 124, 136, 141, 144, 153, 157, 158, 160, 161, 167, 170, 171, 172, 173, 174, 175, 178, 179, 180, 186, 187, 188, 189, 190, 191, 193, 229, 231, 250, 251, 252, 253, 255, 256, 257, 258, 269, 272, 273, 274, 275, 280, 282, 283, 289, 291, 295, 296, 297, 302, 312, 313, 315, 318, 322, 325, 326, 329, 332, 335, 337, 338, 340, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 381, 382, 390, 404, 405, 406, 417, 438], "first_level": [6, 33, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 78, 100, 101, 108, 125, 146, 148, 150, 153, 169, 384, 417], "level": [6, 9, 14, 15, 18, 33, 39, 48, 49, 51, 56, 63, 70, 71, 73, 75, 82, 97, 104, 105, 109, 114, 123, 124, 125, 144, 145, 150, 153, 156, 157, 161, 164, 167, 168, 170, 171, 173, 176, 178, 184, 186, 187, 188, 190, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 270, 272, 274, 275, 277, 278, 282, 285, 289, 291, 295, 296, 297, 298, 300, 305, 306, 311, 316, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 341, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 380, 381, 382, 385, 387, 391, 392, 393, 394, 395, 396, 397, 398, 400, 404, 405, 406, 407, 412, 415, 416, 417, 419, 423, 436, 438], "t_r": [6, 11, 33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 62, 65, 66, 69, 70, 89, 91, 92, 99, 100, 108, 138, 149, 153, 180, 250, 251, 252, 253, 255, 256, 257, 258, 282, 284, 285, 289, 300, 327, 328, 329, 330, 331, 332, 333, 379, 405, 407, 419], "noise_model": [6, 33, 66, 282, 285, 291], "ar1": [6, 33, 66, 282, 285, 291], "covari": [6, 42, 46, 57, 58, 59, 61, 64, 69, 102, 113, 114, 134, 153, 155, 156, 158, 174, 186, 187, 188, 189, 190, 204, 215, 226, 269, 271, 272, 273, 274, 275, 326, 331, 343, 376, 380, 390, 398, 399, 438], "lag": [6, 47, 65, 66], "depend": [6, 14, 15, 39, 66, 89, 95, 100, 102, 105, 114, 123, 128, 133, 138, 141, 153, 161, 165, 167, 168, 170, 173, 176, 178, 194, 198, 199, 202, 203, 207, 210, 215, 226, 250, 251, 252, 253, 255, 256, 257, 258, 269, 273, 282, 295, 297, 298, 305, 329, 332, 342, 343, 391, 405, 416, 417, 436], "rescal": [6, 23, 33, 40, 80, 124, 147, 153, 344, 346, 347, 382, 394, 396, 397, 403], "seri": [6, 33, 46, 47, 51, 56, 60, 66, 73, 92, 94, 95, 97, 109, 113, 114, 116, 123, 128, 145, 149, 151, 153, 154, 156, 158, 160, 165, 170, 171, 177, 178, 179, 186, 221, 233, 234, 236, 239, 248, 257, 258, 269, 282, 285, 295, 297, 300, 301, 312, 317, 323, 326, 330, 331, 332, 333, 334, 337, 356, 371, 379, 382, 393, 409, 410, 411, 416, 420, 428, 438], "varianc": [6, 33, 40, 42, 48, 55, 56, 57, 58, 66, 70, 80, 141, 144, 145, 153, 160, 165, 167, 173, 180, 186, 190, 250, 251, 252, 253, 257, 258, 270, 272, 274, 275, 278, 279, 282, 291, 295, 300, 306, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 379, 405, 407, 410, 419, 420], "hrf_model": [6, 33, 61, 63, 65, 66, 69, 71, 108, 282, 284, 285, 289], "canon": [6, 50, 66, 71, 84, 131, 153, 173, 184, 257], "hrf": [6, 65, 66, 68, 69, 108, 148, 150, 153, 160, 171, 173, 282, 284, 286, 287, 288, 289, 292, 293, 294, 438], "dispers": [6, 66, 68, 169, 272, 274, 275, 282, 284, 286, 289, 292], "deriv": [6, 46, 59, 62, 68, 69, 71, 100, 101, 104, 108, 113, 125, 145, 147, 148, 153, 159, 167, 169, 173, 174, 180, 194, 215, 257, 258, 282, 284, 285, 286, 288, 289, 292, 294, 295, 297, 308, 320, 321, 322, 323, 324, 344, 345, 372, 379, 391, 393, 394, 396, 398, 405], "drift_model": [6, 33, 63, 66, 70, 71, 169, 282, 285, 289], "cosin": [6, 33, 66, 69, 70, 71, 108, 123, 125, 146, 153, 282, 285, 289, 323, 419], "drift": [6, 69, 70, 71, 100, 108, 282, 289, 323, 419], "slow": [6, 36, 44, 66, 166, 167, 168, 180, 436], "oscil": [6, 66, 114], "high_pass": [6, 33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 66, 71, 89, 91, 92, 99, 100, 138, 153, 180, 250, 251, 252, 253, 255, 256, 257, 258, 282, 285, 289, 300, 323, 324, 327, 328, 329, 330, 331, 332, 333, 405, 407, 418, 419], "hz": [6, 33, 66, 71, 180, 282, 289], "cutoff": [6, 66, 69, 71, 89, 108, 146, 153, 177, 250, 251, 252, 253, 255, 256, 300, 327, 328, 329, 330, 331, 332, 333, 405, 407, 418, 419, 438], "frequenc": [6, 66, 121, 153, 180, 250, 251, 252, 253, 255, 256, 282, 289, 300, 323, 327, 328, 329, 330, 331, 332, 333, 405, 407, 418, 419], "invers": [6, 46, 58, 59, 98, 113, 143, 153, 155, 156, 160, 167, 174, 177, 188, 193, 204, 215, 272, 274, 275, 279, 326, 331, 376, 380, 389, 390, 398, 399, 404, 438], "fmri_glm": [6, 64, 67, 70, 71, 169], "inspect": [6, 40, 48, 55, 66, 67, 70, 89, 92, 155, 160, 175, 282, 295], "repres": [6, 15, 20, 33, 35, 51, 52, 54, 55, 69, 76, 79, 94, 114, 133, 145, 153, 154, 155, 158, 159, 168, 170, 172, 173, 178, 179, 180, 198, 201, 215, 243, 244, 246, 282, 295, 304, 315, 326, 327, 328, 329, 330, 331, 332, 333, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 375, 380, 385, 389, 407, 410, 417, 421, 423, 436], "predictor": [6, 40, 169, 170, 274, 275, 324], "design_matrix": [6, 41, 61, 62, 65, 66, 69, 70, 71, 75, 76, 77, 78, 79, 80, 81, 108, 283, 289, 295, 296, 297, 325, 381, 382], "design_matrices_": [6, 65, 66, 70, 100], "formal": 6, "taken": [6, 66, 100, 161, 167, 285, 295, 297, 316, 327, 328, 330, 331, 333, 407], "implictili": 6, "plot_design_matrix": [6, 63, 65, 66, 73, 75, 78, 80, 100, 169, 172], "write": [6, 41, 64, 113, 117, 123, 148, 150, 153, 167, 168, 176, 259, 260, 261, 322, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 415], "o": [6, 40, 41, 62, 64, 86, 100, 101, 108, 114, 128, 153, 168, 194, 196, 206, 213, 226, 323], "outdir": [6, 72], "mkdir": [6, 64, 72], "join": [6, 62, 64, 86, 103, 108, 168, 423, 437], "output_fil": [6, 15, 23, 357, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397, 436], "png": [6, 9, 15, 23, 61, 174, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397, 436], "respons": [6, 60, 70, 71, 72, 73, 79, 80, 113, 148, 153, 160, 169, 170, 173, 175, 176, 225, 282, 284, 286, 287, 288, 289, 292, 294, 381, 382, 393], "profil": [6, 167, 168, 269, 273], "region": [6, 10, 15, 16, 19, 23, 40, 42, 43, 44, 46, 48, 49, 52, 55, 56, 58, 59, 66, 70, 71, 83, 96, 99, 113, 114, 123, 125, 126, 130, 132, 133, 136, 141, 144, 146, 148, 153, 154, 156, 159, 160, 166, 169, 170, 173, 175, 177, 179, 186, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 218, 227, 230, 257, 258, 264, 265, 305, 307, 310, 312, 313, 317, 319, 324, 326, 327, 328, 330, 331, 333, 356, 374, 375, 376, 377, 378, 380, 383, 390, 391, 392, 393, 395, 396, 398, 399, 415, 436, 438], "xlabel": [6, 25, 30, 32, 34, 42, 48, 49, 51, 55, 58, 68, 99, 179], "access": [6, 33, 48, 56, 61, 62, 64, 66, 75, 114, 116, 124, 148, 153, 155, 159, 167, 168, 169, 177, 178, 180, 195, 196, 199, 204, 205, 206, 209, 210, 233, 236, 237, 239, 270, 357, 427, 438], "beta": [6, 26, 39, 42, 66, 71, 97, 109, 113, 114, 149, 169, 173, 221, 226, 250, 251, 252, 253, 269, 272, 273, 274, 275, 282, 285, 301, 326, 332, 333, 356, 382, 393], "role": [6, 148, 153], "potenti": [6, 55, 91, 94, 100, 114, 147, 153, 165, 168, 173, 176, 207, 297], "weight": [6, 29, 39, 42, 43, 44, 116, 117, 141, 153, 154, 161, 163, 164, 167, 168, 170, 180, 219, 229, 231, 250, 251, 252, 253, 255, 256, 279, 322, 399, 411, 438], "associ": [6, 14, 47, 72, 75, 77, 105, 123, 153, 160, 165, 168, 170, 172, 173, 196, 234, 254, 270, 297, 323, 324, 343, 416, 423], "nutshel": 6, "combin": [6, 15, 40, 41, 102, 104, 114, 123, 147, 153, 160, 165, 170, 173, 180, 228, 250, 251, 252, 253, 255, 256, 257, 258, 282, 295, 297, 323, 362, 363, 366, 367, 368, 369, 381], "consid": [6, 32, 39, 48, 53, 54, 55, 66, 68, 80, 92, 94, 102, 104, 116, 128, 141, 148, 153, 165, 168, 210, 250, 251, 252, 253, 255, 256, 257, 258, 269, 273, 282, 284, 285, 289, 295, 297, 304, 310, 321, 328, 329, 331, 332, 337, 340, 343, 347, 392, 405, 408, 410, 411], "two": [6, 14, 24, 25, 34, 40, 48, 55, 56, 58, 60, 66, 67, 73, 74, 77, 82, 86, 88, 89, 94, 98, 100, 101, 102, 108, 113, 117, 123, 133, 136, 141, 144, 145, 153, 154, 157, 159, 160, 162, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 178, 179, 180, 188, 192, 198, 217, 224, 237, 250, 251, 252, 253, 257, 258, 272, 274, 275, 282, 289, 295, 296, 297, 301, 307, 312, 315, 323, 324, 328, 331, 333, 343, 355, 382, 385, 387, 388, 393, 394, 395, 396, 397, 398, 403, 405, 407, 408, 409, 415, 416, 417, 422, 423, 436, 438], "isol": [6, 70, 71, 100, 160, 170], "zero": [6, 9, 14, 20, 22, 23, 31, 36, 39, 44, 47, 53, 54, 64, 67, 70, 77, 79, 94, 121, 141, 145, 149, 151, 153, 154, 158, 160, 161, 165, 166, 167, 170, 173, 179, 180, 186, 187, 188, 190, 233, 250, 251, 252, 253, 255, 256, 257, 269, 274, 275, 289, 295, 297, 300, 304, 317, 319, 323, 327, 328, 329, 330, 331, 332, 333, 334, 337, 340, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 392, 393, 395, 396, 405, 406, 407, 410, 411, 413, 414, 419], "16": [6, 7, 25, 30, 32, 33, 34, 36, 39, 42, 43, 44, 48, 49, 54, 58, 59, 62, 66, 68, 76, 77, 79, 80, 82, 84, 91, 102, 103, 105, 139, 146, 153, 167, 179, 205, 328, 331, 407, 436], "active_minus_rest": 6, "plot_contrast_matrix": [6, 62, 65, 66], "ax": [6, 9, 11, 18, 21, 22, 23, 24, 31, 38, 40, 49, 51, 57, 61, 63, 65, 66, 70, 75, 78, 79, 80, 84, 91, 100, 101, 105, 108, 111, 135, 145, 146, 153, 314, 315, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397], "label": [6, 9, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 47, 49, 52, 53, 54, 58, 61, 65, 66, 68, 69, 83, 91, 94, 96, 98, 100, 102, 103, 108, 111, 113, 114, 116, 123, 124, 130, 133, 138, 141, 145, 146, 148, 150, 153, 155, 157, 160, 161, 163, 165, 168, 173, 178, 179, 180, 196, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 214, 218, 228, 250, 251, 252, 253, 254, 255, 256, 264, 278, 282, 285, 289, 291, 296, 320, 323, 324, 327, 330, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 378, 379, 380, 383, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 421], "below": [6, 9, 16, 20, 22, 39, 44, 49, 52, 54, 58, 65, 70, 94, 114, 133, 153, 157, 160, 161, 165, 167, 168, 169, 170, 172, 176, 179, 180, 187, 188, 190, 194, 215, 250, 251, 252, 253, 255, 256, 258, 320, 327, 328, 329, 330, 331, 332, 333, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 385, 386, 388, 392, 393, 394, 397, 400, 405, 407, 418, 419, 436], "account": [6, 66, 76, 94, 165, 176, 180, 323, 327, 328, 330, 331, 333, 407], "eff_map": 6, "compute_contrast": [6, 33, 61, 62, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77, 79, 80, 81, 100, 101, 108, 123, 151, 153, 169, 282, 295, 297, 417], "output_typ": [6, 61, 64, 65, 66, 67, 70, 71, 75, 76, 77, 79, 80, 81, 100, 105, 282, 295, 343], "effect_s": [6, 67, 80, 100, 173, 270, 282, 295], "form": [6, 33, 40, 44, 49, 72, 105, 154, 155, 157, 158, 170, 173, 178, 186, 187, 188, 234, 235, 250, 251, 252, 253, 254, 255, 256, 257, 258, 277, 282, 285, 289, 295, 297, 298, 320, 321, 326, 327, 328, 329, 330, 331, 332, 333, 343, 387, 400, 404, 405, 406, 407, 416, 417], "scale": [6, 15, 41, 49, 54, 61, 68, 70, 71, 72, 94, 114, 117, 131, 138, 148, 153, 161, 165, 180, 198, 224, 229, 231, 243, 244, 246, 255, 256, 269, 272, 273, 274, 275, 277, 282, 290, 295, 297, 298, 327, 328, 329, 330, 331, 332, 333, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 404, 405, 406, 416, 417, 419, 423, 438], "gaussian": [6, 44, 79, 94, 114, 154, 167, 170, 180, 181, 187, 190, 317], "z_map": [6, 33, 61, 62, 64, 65, 66, 70, 71, 75, 76, 77, 79, 81, 101, 282, 295], "z_score": [6, 61, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77, 79, 80, 81, 108, 270, 282, 295], "top": [6, 12, 15, 17, 25, 44, 56, 103, 144, 153, 168, 175, 179, 249, 380, 385, 386, 389, 391, 392, 393, 400, 436], "axial": [6, 14, 94, 282, 295, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 378, 380, 383, 385, 386, 389, 391, 392, 393, 417], "black_bg": [6, 13, 14, 36, 71, 147, 153, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 380, 383, 385, 386, 389, 391, 392, 393, 400, 401, 403], "minu": [6, 117, 170], "worri": [6, 24, 116], "valid": [6, 28, 32, 33, 36, 37, 40, 42, 44, 45, 51, 99, 102, 105, 106, 107, 113, 124, 125, 128, 131, 144, 148, 149, 153, 154, 156, 161, 164, 168, 180, 188, 198, 201, 207, 218, 226, 250, 251, 252, 253, 254, 255, 256, 282, 283, 284, 289, 300, 304, 307, 312, 317, 318, 323, 324, 327, 330, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 403, 410, 416, 421, 422, 423, 438], "procedur": [6, 31, 76, 77, 79, 84, 87, 102, 155, 160, 165, 170, 172, 173, 224, 281, 297, 343, 419, 432], "arbitrari": [6, 48, 65, 76, 170, 254, 295, 297], "risk": [6, 185], "aka": [6, 66, 108, 157, 170, 277], "control": [6, 8, 9, 11, 14, 15, 20, 23, 27, 33, 38, 40, 48, 56, 76, 79, 98, 113, 114, 124, 126, 134, 135, 139, 141, 145, 153, 154, 158, 159, 160, 161, 164, 165, 167, 168, 170, 173, 177, 186, 194, 222, 229, 231, 258, 277, 281, 282, 295, 298, 301, 312, 319, 323, 324, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 383, 385, 386, 392, 393, 394, 396, 397, 398, 404, 417, 423, 436, 438], "posit": [6, 9, 14, 16, 17, 24, 48, 51, 58, 66, 71, 74, 79, 80, 81, 82, 84, 94, 99, 113, 114, 116, 144, 148, 153, 160, 165, 167, 170, 172, 173, 180, 187, 190, 194, 224, 226, 277, 282, 295, 297, 298, 319, 343, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 377, 378, 380, 383, 385, 386, 388, 389, 391, 392, 393, 397, 398, 400, 401, 416, 417, 423, 436], "fpr": [6, 33, 81, 172, 173, 282, 295, 298, 417], "alpha": [6, 15, 23, 24, 37, 39, 40, 44, 48, 57, 68, 75, 76, 77, 81, 106, 150, 154, 159, 166, 170, 187, 188, 190, 255, 256, 258, 272, 274, 275, 277, 281, 282, 295, 298, 319, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 380, 385, 389, 391, 392, 394, 396, 397, 417, 436], "certain": [6, 56, 138, 153, 160, 168, 170, 229, 315, 391], "001": [6, 41, 43, 44, 62, 76, 79, 80, 81, 101, 170, 187, 188, 190, 255, 256, 282, 295, 298, 417], "chanc": [6, 33, 37, 51, 77, 79, 145, 153, 164, 165, 170, 438], "declar": [6, 168, 170, 187, 190], "inact": [6, 170], "threshold_stats_img": [6, 75, 77, 81, 172, 319], "_": [6, 22, 30, 36, 37, 42, 44, 49, 51, 57, 62, 67, 75, 77, 80, 94, 98, 100, 101, 102, 105, 106, 108, 123, 146, 150, 151, 153, 160, 168, 234, 235, 285, 322], "height_control": [6, 75, 77, 81, 282, 295, 298, 417], "uncorrect": [6, 62, 76, 79, 80, 81, 101], "291": [6, 33, 41, 66, 72], "n_voxel": [6, 55, 77, 79, 92, 98, 160, 163, 170, 257, 270, 272, 274, 275, 278, 282, 290, 291, 407], "ten": [6, 81, 405], "hundr": [6, 49, 405], "conserv": [6, 77, 79, 102, 165, 170, 187, 192], "solut": [6, 65, 66, 154, 155, 161, 166, 167, 175, 178, 258], "famili": [6, 81, 102, 123, 124, 135, 150, 153, 165, 168, 173, 297, 343, 407, 409], "wise": [6, 15, 40, 47, 55, 81, 94, 100, 102, 123, 150, 153, 165, 169, 173, 180, 250, 251, 252, 253, 297, 343], "probabl": [6, 11, 21, 31, 32, 39, 43, 48, 61, 66, 77, 79, 81, 92, 94, 155, 165, 167, 170, 173, 175, 176, 202, 203, 233], "sai": [6, 65, 70, 98, 117, 168, 170, 272], "bonferroni": [6, 81, 102, 105, 106, 165, 170, 173, 282, 295, 298, 417], "934": 6, "inde": [6, 42, 49, 86, 154, 155, 163, 170, 283, 436], "popular": [6, 48, 174, 178, 250, 251], "proport": [6, 49, 51, 70, 74, 82, 99, 113, 158, 170, 172, 173, 224, 274, 277, 295, 389, 393, 398], "discoveri": [6, 23, 76, 77, 79, 81, 114, 170, 173, 175, 239, 277], "among": [6, 79, 124, 153, 170, 173, 198, 250, 251, 252, 253], "fdr": [6, 75, 77, 81, 172, 173, 281, 282, 295, 298, 417], "904": [6, 9, 27], "discard": [6, 117, 170, 193, 229, 249, 285, 320, 337, 340, 423], "small": [6, 18, 49, 51, 58, 65, 86, 99, 102, 103, 127, 129, 130, 153, 157, 158, 165, 167, 168, 175, 176, 254, 270, 300, 391, 392, 405, 408, 419, 423, 436], "cluster": [6, 19, 31, 32, 33, 39, 46, 59, 62, 74, 79, 81, 82, 86, 91, 113, 114, 123, 124, 141, 144, 148, 149, 150, 153, 156, 162, 163, 165, 170, 172, 173, 174, 175, 198, 199, 215, 224, 252, 253, 277, 282, 291, 295, 297, 298, 305, 307, 312, 319, 330, 343, 363, 383, 390, 392, 393, 398, 404, 405, 406, 410, 412, 413, 416, 417, 438], "remov": [6, 30, 32, 33, 35, 40, 41, 42, 48, 50, 77, 86, 89, 103, 104, 105, 106, 114, 116, 121, 123, 125, 128, 132, 133, 134, 136, 138, 139, 141, 143, 144, 146, 148, 153, 161, 166, 167, 176, 177, 179, 186, 233, 235, 282, 298, 300, 304, 306, 317, 319, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 343, 379, 391, 407, 408, 410, 411, 415, 418, 419, 420, 438], "cluster_threshold": [6, 61, 70, 81, 148, 153, 282, 295, 298, 319, 416, 417], "clean_map": 6, "zscore": [6, 124, 125, 141, 153, 186, 257, 327, 328, 329, 330, 331, 332, 333, 379, 419], "active_vs_rest_z_map": 6, "active_vs_rest_eff_map": 6, "furthermor": [6, 42, 55], "extract": [6, 22, 28, 30, 32, 40, 43, 45, 46, 48, 49, 59, 60, 62, 72, 73, 83, 86, 92, 94, 96, 98, 100, 101, 104, 113, 117, 122, 123, 124, 126, 133, 134, 136, 137, 138, 139, 145, 149, 150, 153, 156, 157, 160, 163, 171, 173, 175, 176, 177, 186, 195, 201, 202, 204, 207, 212, 213, 215, 218, 226, 230, 233, 250, 251, 252, 253, 254, 257, 258, 264, 265, 282, 289, 295, 296, 297, 306, 307, 309, 312, 319, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 338, 340, 356, 375, 376, 377, 378, 380, 389, 390, 391, 393, 398, 399, 401, 405, 407, 408, 409, 410, 411, 413, 415, 417, 420, 423, 432, 436, 438], "report": [6, 49, 52, 53, 54, 56, 70, 89, 91, 92, 103, 114, 141, 146, 148, 150, 151, 153, 170, 171, 176, 180, 209, 277, 282, 295, 327, 328, 329, 330, 331, 332, 343, 394, 396, 397, 407, 437], "tabl": [6, 33, 62, 70, 91, 101, 124, 149, 153, 324, 416], "get_clusters_t": [6, 62, 70, 124, 145, 149, 150, 153], "stat_threshold": [6, 70, 416], "20": [6, 21, 24, 33, 36, 39, 42, 43, 44, 48, 50, 52, 53, 54, 57, 58, 62, 70, 72, 78, 81, 91, 94, 100, 102, 103, 105, 106, 114, 121, 126, 131, 153, 154, 158, 160, 198, 207, 226, 250, 251, 252, 253, 255, 256, 257, 258, 423], "id": [6, 33, 62, 70, 71, 103, 107, 117, 124, 153, 194, 196, 205, 206, 209, 229, 231, 239, 282, 416], "y": [6, 14, 15, 24, 31, 33, 34, 35, 36, 37, 40, 41, 44, 52, 54, 58, 62, 70, 71, 84, 92, 94, 101, 102, 105, 106, 111, 117, 133, 135, 138, 150, 153, 160, 161, 165, 168, 173, 176, 179, 180, 186, 187, 188, 204, 227, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 264, 265, 269, 272, 273, 274, 275, 282, 290, 291, 295, 297, 302, 326, 327, 328, 329, 330, 331, 332, 333, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 380, 383, 385, 386, 389, 391, 392, 393, 394, 395, 396, 397, 400, 403, 404, 405, 406, 407, 408, 416, 417, 436], "peak": [6, 33, 62, 64, 67, 70, 161, 163, 167, 374, 407, 409, 416], "stat": [6, 23, 33, 62, 64, 68, 76, 79, 94, 101, 103, 107, 108, 114, 150, 153, 171, 179, 187, 190, 270, 279, 282, 295, 319, 322, 397, 401, 403, 416, 417, 436], "size": [6, 9, 15, 22, 23, 26, 33, 40, 44, 48, 49, 53, 62, 69, 77, 79, 80, 81, 84, 91, 94, 102, 103, 105, 108, 111, 125, 128, 138, 139, 141, 148, 153, 158, 165, 166, 167, 170, 226, 233, 282, 295, 297, 298, 319, 327, 328, 330, 331, 335, 338, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 380, 389, 390, 394, 396, 397, 399, 402, 404, 405, 406, 407, 408, 409, 416, 417, 418, 423], "mm3": [6, 33, 62, 91, 407, 409, 416], "811979": 6, "4050": [6, 102], "1a": [6, 33, 62], "63": [6, 32, 33, 36, 42, 43, 44, 62, 93, 102, 114, 197, 205], "36": [6, 15, 16, 17, 33, 36, 42, 43, 62, 90, 91, 93, 96, 99, 102, 109, 111, 135, 138, 153, 198, 436], "601922": 6, "1b": [6, 62], "435063": 6, "1c": [6, 62], "48": [6, 20, 33, 35, 36, 42, 43, 44, 45, 53, 62, 64, 72, 73, 91, 102, 105, 197, 202, 204, 227, 302], "39": [6, 15, 33, 36, 42, 43, 44, 51, 54, 72, 77, 82, 91, 102, 126, 128, 131, 153, 197, 204, 215], "364058": 6, "605128": 6, "1512": 6, "2a": [6, 62], "45": [6, 32, 33, 34, 42, 43, 45, 55, 62, 91, 102, 105, 106, 108, 109], "590200": 6, "27": [6, 14, 15, 16, 17, 27, 30, 33, 36, 42, 43, 44, 62, 64, 67, 71, 73, 75, 82, 90, 91, 93, 94, 96, 102, 103, 105, 114, 324, 407, 409, 436], "253889": 6, "972": 6, "3a": [6, 62, 114, 209, 238], "51": [6, 9, 30, 33, 36, 42, 43, 48, 53, 62, 102, 114, 159, 198, 257], "968355": 6, "3b": 6, "54": [6, 33, 36, 42, 43, 44, 62, 91, 100, 102, 114, 198, 219, 244], "565609": 6, "087451": 6, "1188": 6, "18": [6, 25, 27, 33, 36, 42, 43, 44, 55, 58, 62, 72, 91, 102, 103, 107, 114, 119, 131, 138, 148, 153, 180, 215, 226, 254, 394, 396, 397, 436], "807510": 6, "594": [6, 33], "5a": [6, 33, 62], "21": [6, 32, 33, 36, 40, 42, 43, 45, 54, 62, 66, 77, 82, 91, 98, 102, 103, 109, 128, 146, 153, 239], "646352": 6, "5b": [6, 33, 62], "33": [6, 33, 36, 41, 42, 43, 44, 62, 72, 91, 102, 111, 112, 114, 199, 215], "416271": 6, "57": [6, 31, 33, 42, 43, 44, 62, 91, 102, 114, 118, 121, 138, 153, 198], "710963": 6, "702": [6, 33], "6a": [6, 62], "633746": 6, "6b": 6, "66": [6, 16, 17, 33, 36, 42, 43, 62, 90, 92, 93, 102], "796135": 6, "6c": 6, "69": [6, 11, 33, 36, 42, 43, 44, 72, 79, 102], "254544": 6, "17": [6, 13, 27, 30, 32, 33, 36, 41, 42, 43, 47, 49, 61, 62, 73, 77, 80, 91, 102, 103, 114, 138, 153, 167, 196, 206, 210, 226], "93": [6, 30, 32, 33, 36, 42, 43, 44, 77, 91, 102, 200], "522477": 6, "621": [6, 33], "7a": [6, 33, 62], "99": [6, 12, 30, 32, 33, 42, 43, 44, 58, 93, 102, 147, 153, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "713852": 6, "19": [6, 10, 12, 21, 23, 27, 33, 36, 42, 43, 44, 53, 62, 77, 91, 102, 103, 114, 123, 126, 128, 141, 153, 195, 196, 204, 205, 206, 209, 210, 233, 236, 237, 274, 275], "7b": 6, "90": [6, 9, 12, 22, 30, 32, 33, 36, 42, 43, 44, 47, 50, 53, 56, 63, 77, 79, 91, 102, 103, 105, 114, 126, 139, 147, 153, 158, 323, 324, 394, 396, 397, 400, 420, 436], "270733": 6, "7c": 6, "085568": 6, "24": [6, 33, 36, 42, 43, 44, 45, 51, 62, 70, 73, 91, 102, 103, 105, 109, 125, 146, 153, 282, 284, 285, 289, 323], "331806": 6, "648": [6, 33, 62], "22": [6, 33, 36, 42, 43, 44, 62, 79, 91, 102, 103, 107, 114, 128, 139, 148, 153, 200, 302], "8a": [6, 33], "700088": 6, "23": [6, 33, 36, 42, 43, 44, 59, 62, 72, 91, 100, 102, 103, 114, 198, 207, 256], "8b": 6, "037845": 6, "8c": 6, "527477": 6, "25": [6, 15, 23, 29, 30, 32, 33, 36, 40, 41, 42, 43, 44, 45, 62, 77, 91, 94, 95, 98, 102, 103, 105, 109, 118, 153, 155, 226, 272, 274, 275, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 391, 399, 401, 402, 403], "835099": 6, "837": [6, 86], "26": [6, 15, 27, 33, 36, 42, 43, 44, 45, 49, 61, 62, 72, 75, 91, 102, 103, 131, 153, 408], "9a": 6, "615642": 6, "9b": 6, "091568": 6, "to_csv": [6, 72], "baselin": [6, 30, 32, 114, 144, 145, 153, 161, 163, 197, 270, 290], "anoth": [6, 39, 66, 69, 79, 89, 130, 135, 153, 160, 167, 168, 170, 175, 177, 178, 186, 255, 256, 301, 302, 321, 415, 436, 438], "seek": [6, 77, 105, 159, 391], "whether": [6, 9, 70, 89, 94, 102, 139, 153, 160, 168, 170, 176, 180, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 215, 218, 219, 220, 224, 226, 227, 228, 229, 231, 233, 239, 257, 258, 279, 297, 298, 304, 319, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 343, 344, 346, 347, 385, 388, 393, 394, 395, 397, 405, 407, 416, 417, 419, 420], "possibli": [6, 66, 180], "three": [6, 14, 19, 24, 32, 40, 49, 63, 65, 66, 75, 89, 94, 114, 139, 147, 153, 167, 168, 176, 178, 215, 282, 295, 315, 317, 354, 356, 359, 373, 378, 380, 383, 384, 385, 386, 389, 391, 392, 393, 417, 423], "higher": [6, 64, 67, 116, 133, 153, 154, 165, 170, 187, 207, 250, 251, 252, 253, 255, 256, 257, 258, 282, 295, 301, 312, 327, 328, 329, 330, 331, 332, 333, 405, 406, 407, 418], "dimension": [6, 26, 49, 71, 94, 128, 145, 150, 153, 167, 175, 192, 193, 201, 207, 226, 257, 258, 270, 301, 342, 404, 405, 406], "explain": [6, 40, 42, 48, 56, 66, 70, 144, 153, 157, 160, 168, 170, 175, 180, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423], "might": [6, 34, 61, 104, 159, 163, 165, 170, 173, 176, 178, 200, 215, 289, 318, 324, 335, 336, 337, 339, 340, 403], "specif": [6, 14, 15, 16, 17, 30, 32, 33, 48, 49, 61, 62, 63, 64, 65, 66, 67, 69, 71, 76, 79, 80, 84, 94, 101, 108, 114, 115, 120, 131, 144, 150, 153, 154, 157, 158, 159, 160, 161, 163, 165, 168, 170, 172, 173, 175, 176, 177, 180, 216, 226, 231, 234, 235, 270, 272, 274, 275, 296, 300, 320, 322, 328, 331, 343, 375, 394, 395, 396, 397, 403, 407, 419, 421, 422, 423, 436, 438], "exactli": [6, 84, 94, 98, 108, 167, 168, 250, 251, 252, 253, 254, 320, 400, 423], "effects_of_interest": [6, 64, 70, 71], "vstack": [6, 40, 41, 58, 70, 71, 75, 80, 103], "easier": [6, 23, 66, 127, 132, 147, 153, 159, 160, 167, 168], "oop": 6, "lot": [6, 65, 71, 86, 121, 138, 141, 153, 154, 160, 161, 167, 168, 175, 190], "non": [6, 14, 15, 39, 42, 50, 56, 65, 66, 68, 77, 79, 91, 94, 102, 103, 115, 134, 138, 141, 145, 146, 148, 149, 153, 154, 158, 159, 165, 166, 167, 168, 172, 173, 175, 180, 199, 226, 233, 250, 251, 252, 253, 257, 272, 274, 275, 282, 300, 304, 309, 315, 317, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 378, 388, 392, 393, 394, 396, 397, 401, 403, 407, 413, 419, 436, 438], "neural": [6, 68, 114, 159, 170, 173, 175, 180, 216, 234, 254], "ventricl": 6, "arteri": 6, "276": [6, 7, 33, 41], "plot_single_subject_single_run": [6, 7], "067": [7, 41], "execut": [7, 21, 27, 45, 59, 73, 82, 87, 96, 109, 112, 113, 168, 180, 315, 394, 396, 436, 437], "auto_examples_00_tutori": 7, "00": [7, 27, 30, 32, 33, 36, 42, 44, 45, 48, 53, 59, 73, 82, 89, 96, 102, 105, 109, 112], "127": [7, 33, 41, 88, 96, 135, 153], "256": [7, 33, 41, 65, 81, 82, 84, 145, 153, 201, 210], "glass": [8, 9, 27, 47, 61, 107, 113, 131, 132, 133, 135, 136, 141, 144, 153, 174, 232, 247, 282, 295, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 385, 389, 393, 398, 399, 402, 417, 436], "megatrawl": [8, 27, 113, 114, 128, 153, 226, 390, 398], "probabilist": [8, 27, 46, 51, 59, 99, 113, 114, 124, 125, 138, 149, 153, 156, 173, 179, 180, 186, 197, 199, 201, 202, 203, 204, 205, 207, 215, 219, 307, 326, 331, 356, 375, 376, 380, 390, 391, 392, 393, 398, 399, 411, 415, 436, 438], "atla": [8, 11, 27, 46, 48, 50, 59, 83, 91, 94, 96, 113, 114, 117, 122, 124, 125, 129, 130, 132, 133, 134, 135, 138, 141, 144, 145, 146, 147, 149, 150, 153, 156, 158, 167, 173, 179, 180, 186, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 215, 219, 229, 238, 264, 266, 307, 319, 326, 327, 328, 330, 331, 356, 375, 376, 377, 379, 380, 390, 391, 392, 393, 396, 398, 399, 400, 401, 403, 407, 408, 409, 410, 411, 415, 422, 432, 436, 438], "mode": [8, 14, 16, 21, 27, 55, 60, 73, 83, 94, 96, 113, 114, 131, 136, 139, 145, 150, 153, 168, 169, 174, 179, 180, 195, 201, 204, 207, 226, 229, 231, 277, 282, 289, 307, 326, 331, 333, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 377, 388, 391, 393, 398, 407, 415, 417, 438], "msdl": [8, 21, 27, 52, 54, 113, 155, 179, 204, 307, 356, 375, 391, 393, 398, 436], "multiscal": [8, 27, 40, 41, 113, 114, 124, 129, 153, 198, 228, 392, 398], "parcel": [8, 9, 22, 23, 27, 46, 59, 113, 114, 117, 124, 129, 133, 136, 137, 138, 141, 148, 150, 151, 153, 156, 173, 174, 175, 180, 186, 196, 198, 199, 200, 202, 203, 204, 206, 208, 210, 215, 226, 229, 305, 307, 312, 323, 324, 326, 330, 363, 375, 376, 380, 383, 390, 392, 398, 407, 408, 436, 438], "colormap": [8, 14, 19, 21, 23, 27, 86, 113, 133, 136, 137, 138, 139, 141, 146, 153, 210, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 378, 379, 380, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 438], "global": [8, 27, 113, 114, 144, 153, 167, 168, 178, 194, 195, 206, 219, 240, 257, 258, 301, 313, 323, 324, 337, 379, 405], "carpet": [8, 27, 113, 144, 153, 195, 219, 301, 313, 337, 379], "haxbi": [8, 15, 16, 27, 28, 45, 94, 102, 113, 114, 116, 132, 133, 153, 164, 166, 174, 178, 180, 218, 250, 305, 307, 312, 326, 332, 371, 378, 390, 393, 398, 400, 436, 438], "technic": [8, 27, 64, 67, 100, 113, 154, 166, 167, 226, 233, 269, 273, 397, 398, 423], "illustr": [8, 27, 49, 66, 67, 68, 85, 90, 93, 101, 108, 113, 160, 168, 179, 180, 397, 398, 423], "surfac": [8, 12, 27, 28, 45, 55, 60, 73, 97, 109, 110, 112, 113, 114, 116, 124, 125, 133, 135, 137, 138, 139, 141, 144, 145, 148, 150, 153, 171, 173, 174, 175, 186, 200, 208, 218, 221, 225, 238, 239, 247, 250, 270, 278, 285, 289, 291, 307, 343, 357, 380, 385, 388, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 438], "scheme": [8, 27, 29, 33, 36, 37, 98, 113, 144, 153, 154, 160, 161, 163, 167, 188, 250, 251, 252, 253, 343, 397, 398, 423], "cortic": [8, 23, 24, 27, 28, 45, 55, 64, 67, 69, 113, 114, 133, 135, 138, 144, 153, 155, 169, 174, 200, 208, 210, 214, 218, 219, 238, 307, 380, 396, 397, 398, 399, 400, 401, 402, 403, 422, 423, 438], "seed": [8, 27, 46, 48, 59, 100, 113, 138, 150, 153, 169, 177, 208, 215, 238, 239, 252, 253, 282, 289, 291, 326, 332, 333, 343, 356, 393, 396, 397, 398, 399, 402, 407, 409, 421, 436, 438], "connect": [8, 22, 26, 27, 49, 50, 58, 59, 88, 94, 97, 109, 114, 126, 131, 133, 134, 141, 144, 149, 153, 155, 157, 159, 168, 169, 170, 173, 174, 175, 179, 186, 187, 188, 194, 198, 204, 206, 207, 208, 210, 215, 221, 226, 238, 239, 282, 285, 298, 301, 309, 319, 323, 324, 326, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 356, 377, 380, 382, 390, 393, 396, 397, 398, 399, 405, 408, 409, 421, 436, 437, 438], "option": [8, 9, 13, 15, 21, 23, 27, 42, 51, 56, 68, 72, 89, 102, 111, 113, 116, 121, 123, 124, 125, 131, 133, 134, 135, 136, 141, 144, 145, 146, 147, 148, 150, 153, 155, 160, 162, 168, 169, 173, 176, 178, 180, 186, 187, 188, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 269, 270, 272, 273, 274, 275, 277, 278, 279, 282, 284, 285, 289, 295, 297, 298, 300, 301, 310, 312, 313, 314, 315, 317, 319, 320, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 417, 418, 419, 420, 423, 436], "onto": [9, 16, 23, 40, 50, 69, 133, 153, 158, 168, 174, 178, 336, 339, 382, 391, 436], "vol_to_surf": [9, 37, 69, 108, 135, 144, 146, 153, 169, 388, 394, 395, 396, 397, 401, 436], "plot_surf_stat_map": [9, 23, 24, 27, 37, 69, 108, 133, 135, 137, 141, 144, 148, 149, 150, 153, 169, 388, 394, 395, 438], "add": [9, 14, 15, 20, 31, 40, 41, 50, 56, 63, 69, 102, 117, 122, 123, 124, 125, 131, 133, 134, 136, 138, 141, 146, 150, 151, 153, 158, 160, 163, 165, 168, 173, 176, 188, 205, 206, 229, 231, 248, 300, 323, 332, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 399, 401, 403, 418, 419, 436], "contour": [9, 15, 18, 21, 87, 88, 125, 133, 141, 144, 146, 150, 153, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 391, 392, 395, 438], "plot_surf_contour": [9, 125, 144, 153], "stat_img": [9, 13, 14, 15, 16, 90, 93, 277, 282, 295, 298, 416, 417], "load_sample_motor_activation_imag": [9, 13, 14, 15, 16, 90, 93, 124, 153], "fsaverag": [9, 22, 23, 24, 37, 62, 69, 108, 124, 125, 138, 146, 153, 238, 268, 388, 401, 423, 436], "fetch_surf_fsaverag": [9, 22, 23, 37, 69, 108, 124, 138, 144, 146, 150, 153, 169, 208, 388, 394, 395, 396, 397, 401, 423, 436], "curvatur": [9, 23, 124, 153, 238], "inflat": [9, 22, 23, 37, 69, 238, 388, 394, 395, 396, 397, 401, 403, 422, 423], "hemispher": [9, 22, 23, 37, 58, 79, 86, 94, 108, 131, 132, 136, 153, 158, 179, 200, 208, 209, 238, 239, 263, 264, 265, 268, 282, 295, 318, 344, 352, 375, 378, 380, 383, 385, 386, 388, 389, 391, 392, 393, 394, 396, 397, 401, 417, 436], "whose": [9, 69, 167, 173, 187, 188, 190, 273, 307, 423], "vertex": [9, 24, 208, 259, 261, 394, 395, 396, 397, 423], "neg": [9, 14, 17, 42, 51, 58, 66, 77, 79, 80, 90, 102, 106, 114, 145, 148, 153, 165, 170, 173, 194, 226, 256, 297, 298, 315, 319, 343, 385, 388, 393, 397, 416, 423, 436], "curv_right": [9, 238], "load_surf_data": [9, 23, 133, 153], "curv_right_sign": 9, "sign": [9, 14, 23, 42, 102, 103, 124, 153, 165, 178, 255, 256, 299, 319, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 385, 391, 399, 401, 403], "textur": [9, 69, 108, 423], "pial_right": [9, 69, 108, 238, 388, 401, 436], "fig": [9, 11, 18, 24, 38, 40, 41, 42, 49, 57, 61, 63, 65, 68, 79, 91, 100, 101, 105, 106, 111, 388, 394, 436], "infl_right": [9, 69, 108, 238, 388, 401], "hemi": [9, 22, 23, 37, 69, 108, 394, 396, 397, 436], "right": [9, 12, 18, 20, 22, 25, 32, 40, 44, 50, 58, 65, 66, 69, 72, 76, 79, 80, 86, 94, 98, 108, 131, 136, 141, 144, 146, 153, 157, 158, 164, 168, 175, 179, 194, 200, 202, 203, 208, 222, 224, 232, 238, 239, 252, 253, 282, 295, 296, 314, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 378, 380, 381, 383, 385, 386, 388, 389, 390, 391, 392, 393, 394, 396, 397, 401, 417, 436, 438], "bg_map": [9, 22, 23, 37, 69, 108, 388, 394, 396, 397, 401, 403, 436], "recent": [9, 132, 135, 136, 138, 148, 153, 159, 176], "version": [9, 19, 20, 22, 32, 35, 36, 40, 41, 42, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 61, 64, 67, 70, 71, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 116, 121, 123, 126, 128, 131, 132, 133, 134, 135, 136, 138, 140, 141, 144, 146, 147, 148, 149, 150, 153, 166, 167, 168, 176, 178, 180, 186, 187, 188, 192, 193, 194, 196, 198, 199, 201, 203, 205, 206, 207, 208, 209, 210, 214, 215, 216, 220, 229, 231, 233, 234, 235, 238, 239, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 279, 282, 285, 291, 295, 297, 299, 300, 304, 309, 310, 311, 316, 319, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 336, 339, 343, 379, 390, 391, 394, 396, 397, 404, 405, 406, 407, 409, 410, 411, 413, 416, 419, 423, 436], "instal": [9, 113, 123, 133, 138, 141, 148, 149, 153, 175, 176, 202, 203, 302, 328, 331, 394, 396, 397, 407, 436], "configur": [9, 15, 124, 125, 153, 168, 176, 179, 180, 186, 257, 258, 282, 295, 324, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "instead": [9, 14, 32, 35, 36, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 66, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 116, 123, 124, 126, 128, 131, 132, 134, 135, 136, 138, 141, 145, 147, 148, 149, 150, 153, 166, 167, 168, 169, 179, 180, 186, 187, 188, 233, 250, 251, 252, 253, 254, 255, 256, 257, 258, 272, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 343, 404, 405, 406, 407], "graph_object": 9, "noqa": [9, 58, 72, 98, 206, 385], "f401": 9, "except": [9, 49, 52, 53, 57, 58, 63, 72, 78, 100, 103, 145, 148, 153, 166, 168, 256, 310, 343], "importerror": [9, 52, 53, 57, 58, 63, 78, 141, 153], "bg_on_data": [9, 22, 23, 388, 394, 396, 397, 401, 403], "specifi": [9, 14, 15, 32, 56, 61, 62, 66, 69, 71, 75, 78, 79, 80, 81, 84, 86, 89, 94, 95, 101, 107, 108, 117, 122, 125, 135, 138, 139, 141, 144, 145, 146, 147, 148, 150, 153, 154, 155, 165, 167, 169, 170, 176, 178, 179, 180, 202, 203, 207, 229, 230, 232, 234, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 255, 256, 257, 258, 272, 274, 275, 278, 282, 285, 289, 290, 291, 295, 296, 300, 304, 312, 315, 317, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 383, 385, 386, 388, 390, 391, 392, 393, 394, 396, 397, 400, 401, 402, 403, 405, 407, 417, 418, 419, 423, 436], "js_plotting_util": [9, 138, 153], "81": [9, 33, 36, 42, 43, 44, 102, 119, 153], "vmin": [9, 14, 31, 36, 40, 44, 49, 50, 52, 53, 54, 56, 57, 58, 80, 84, 111, 121, 125, 139, 141, 151, 153, 158, 378, 379, 383, 385, 386, 388, 391, 392, 393, 394, 396, 397, 400, 401, 403], "chosen": [9, 22, 34, 66, 100, 167, 186, 394, 397, 400, 401, 403, 423], "symmetr": [9, 19, 47, 79, 134, 153, 167, 192, 193, 198, 202, 203, 219, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 388, 393, 394, 397, 399, 400, 401, 403], "matplolib": 9, "With": [9, 14, 32, 56, 78, 89, 163, 167, 170, 187, 190, 278, 324, 419, 422, 437], "custom": [9, 15, 22, 23, 47, 68, 124, 138, 146, 148, 153, 165, 177, 282, 284, 289, 357, 394, 396, 397, 415, 436, 438], "plotlysurfacefigur": [9, 148, 153, 394], "similar": [9, 23, 24, 30, 48, 55, 79, 94, 100, 101, 116, 126, 138, 139, 141, 148, 153, 154, 157, 159, 161, 162, 165, 172, 173, 180, 252, 253, 324], "api": [9, 44, 104, 111, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 134, 135, 136, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 168, 176, 186, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 339, 404, 405, 406, 407, 438], "static": [9, 345, 400], "requir": [9, 20, 36, 42, 47, 55, 63, 68, 69, 72, 75, 78, 93, 117, 126, 131, 133, 135, 144, 148, 149, 153, 155, 158, 163, 165, 167, 168, 170, 173, 175, 176, 178, 179, 180, 188, 233, 298, 318, 323, 324, 328, 331, 343, 407, 408, 436, 437], "kaleido": [9, 148, 153, 394, 396, 397, 436, 437], "uncom": [9, 16, 22, 52, 54, 58], "savefig": [9, 15, 41, 55, 61, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 380, 383, 385, 386, 389, 391, 392, 393, 436], "right_hemispher": 9, "plot_glass_brain": [9, 13, 14, 62, 79, 80, 101, 105, 107, 131, 141, 149, 150, 151, 153, 172, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 393, 436], "plot_ab": [9, 14, 62, 79, 80, 101, 105, 347, 385, 436], "rang": [9, 14, 23, 41, 44, 47, 49, 53, 55, 57, 62, 68, 70, 78, 79, 80, 91, 95, 100, 102, 105, 131, 135, 145, 153, 167, 168, 187, 190, 201, 299, 319, 385, 388, 393, 397, 399, 400, 401, 403], "xslicer": [9, 15, 365, 371, 373], "0x7f65239eaf10": 9, "destrieux_atla": [9, 22, 23], "fetch_atlas_surf_destrieux": [9, 22, 23, 125, 133, 153, 436], "map_right": [9, 208], "regions_dict": 9, "b": [9, 14, 15, 23, 30, 40, 41, 49, 56, 58, 72, 91, 114, 117, 168, 176, 196, 200, 206, 207, 210, 216, 226, 234, 238, 273, 323, 324, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 436], "g_postcentr": 9, "postcentr": [9, 91], "gyru": [9, 91, 209], "g_precentr": 9, "precentr": [9, 91], "indic": [9, 23, 30, 32, 41, 50, 54, 66, 72, 79, 86, 130, 133, 138, 153, 158, 165, 168, 173, 176, 178, 194, 196, 197, 200, 202, 203, 205, 206, 209, 210, 218, 229, 236, 237, 250, 251, 252, 253, 255, 256, 257, 258, 282, 285, 301, 313, 315, 316, 318, 326, 328, 329, 331, 332, 333, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 383, 386, 391, 392, 393, 394, 395, 396, 397, 400, 401, 403, 407, 409, 416], "regions_indic": 9, "sulc_right": [9, 69, 108, 238, 388, 401, 436], "legend": [9, 18, 30, 32, 34, 42, 43, 49, 58, 61, 68, 91, 395], "color": [9, 14, 15, 18, 21, 24, 30, 32, 34, 49, 50, 51, 70, 86, 88, 139, 141, 144, 146, 150, 153, 157, 158, 168, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 383, 384, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 436], "k": [9, 18, 22, 30, 32, 34, 35, 41, 42, 49, 51, 68, 81, 84, 91, 98, 111, 114, 160, 163, 165, 167, 188, 216, 226, 234, 250, 251, 252, 253, 255, 256, 274, 275, 282, 291, 300, 323, 324, 330, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 380, 383, 385, 386, 389, 391, 392, 393, 404, 419], "low": [9, 42, 66, 71, 94, 104, 138, 144, 153, 160, 166, 167, 168, 170, 176, 178, 179, 180, 238, 250, 251, 252, 253, 255, 256, 300, 323, 327, 328, 329, 330, 331, 332, 333, 388, 401, 405, 407, 418, 419], "fsaverage5": [9, 22, 23, 24, 37, 69, 108, 133, 138, 153, 208, 238, 239, 268, 388, 401, 423], "high": [9, 31, 39, 49, 56, 65, 66, 89, 94, 114, 138, 144, 145, 146, 153, 161, 162, 167, 168, 170, 173, 175, 176, 179, 180, 196, 205, 226, 238, 250, 251, 252, 253, 255, 256, 270, 282, 289, 300, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 388, 401, 405, 407, 418, 419], "finer": [9, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "big_fsaverag": 9, "big_textur": 9, "fine": [9, 89, 114, 132, 153, 155, 180, 201, 254, 257, 258, 323, 329, 332, 405, 436], "470x400": [9, 23, 108], "plot_img_on_surf": [9, 125, 144, 146, 153], "choic": [9, 19, 66, 68, 71, 111, 128, 153, 154, 155, 161, 163, 164, 167, 168, 188, 199, 255, 256, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 407, 438], "orient": [9, 141, 144, 153, 167, 168, 314], "surf_mesh": [9, 388, 394, 395, 396, 397, 401, 403, 422, 423, 436], "freesurf": [9, 22, 23, 69, 108, 133, 138, 150, 153, 169, 208, 238, 259, 394, 395, 396, 397, 403, 421, 422, 423], "medial": [9, 23, 37, 58, 91, 114, 165, 388, 394, 396, 397], "left": [9, 12, 20, 22, 23, 25, 34, 37, 40, 44, 49, 50, 51, 58, 65, 66, 68, 72, 76, 77, 79, 80, 86, 94, 101, 105, 108, 131, 132, 136, 141, 144, 146, 153, 158, 175, 179, 194, 200, 202, 203, 208, 222, 224, 232, 238, 239, 282, 295, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 378, 379, 380, 383, 385, 386, 388, 389, 390, 391, 392, 393, 394, 396, 397, 401, 417], "view_surf": [9, 22, 138, 141, 153, 399, 400, 401, 402, 438], "view_img_on_surf": [9, 138, 139, 141, 146, 153, 399, 400, 402, 403, 438], "atlas": [9, 10, 22, 46, 58, 59, 113, 114, 117, 145, 146, 153, 156, 159, 170, 173, 178, 179, 180, 186, 201, 202, 203, 210, 215, 219, 244, 326, 327, 328, 330, 331, 375, 376, 380, 391, 392, 395, 396, 398, 399, 400, 402, 438], "output": [9, 16, 22, 33, 34, 36, 41, 44, 51, 52, 54, 56, 58, 66, 67, 69, 80, 94, 108, 115, 116, 123, 124, 130, 136, 148, 150, 151, 153, 154, 159, 164, 168, 173, 175, 177, 179, 180, 186, 187, 189, 190, 191, 192, 193, 250, 251, 252, 253, 254, 255, 256, 257, 258, 264, 265, 272, 274, 275, 279, 282, 295, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 314, 315, 316, 317, 318, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 378, 379, 385, 386, 388, 391, 392, 393, 400, 401, 404, 405, 406, 407, 410, 411, 413, 414, 416, 417, 423, 436, 438], "cell": [9, 16, 22, 36, 49, 52, 53, 54, 58, 62, 75, 77, 170, 173], "open": [9, 16, 22, 52, 54, 58, 89, 91, 92, 98, 108, 114, 123, 153, 167, 168, 173, 174, 175, 177, 182, 215, 233, 270, 282, 295, 335, 336, 337, 338, 339, 340, 399, 400, 401, 402, 403, 406, 415, 417, 436, 437, 438], "open_in_brows": [9, 16, 22, 33, 52, 54, 58, 61, 62, 64, 75, 91, 92, 138, 153, 180, 399, 400, 401, 402, 403, 415, 417, 436], "don": [9, 24, 33, 66, 81, 117, 168, 175, 176, 229, 231, 388, 423, 436], "ourselv": 9, "vol_to_surf_kwarg": [9, 146, 153, 401], "allow": [9, 20, 24, 40, 48, 51, 58, 63, 89, 99, 100, 101, 102, 116, 124, 125, 132, 134, 139, 141, 145, 146, 149, 150, 151, 153, 154, 160, 167, 168, 169, 171, 173, 180, 186, 187, 188, 216, 224, 235, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 285, 295, 297, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 390, 404, 405, 406, 407], "grain": [9, 70, 114, 201, 254], "interpol": [9, 24, 40, 41, 44, 52, 66, 75, 84, 130, 153, 229, 314, 315, 316, 385, 386, 392, 393, 400, 419, 423], "volumetr": [9, 23, 169, 178, 343], "avoid": [9, 52, 53, 54, 58, 71, 136, 141, 150, 153, 165, 167, 168, 170, 178, 250, 251, 252, 253, 270, 295, 297, 304, 309, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 418, 436], "neighbor": [9, 37, 49, 94, 141, 153, 174, 254, 385, 386, 392, 393, 400, 405, 406, 412, 423], "nearest": [9, 40, 41, 44, 49, 66, 75, 84, 114, 141, 150, 153, 173, 229, 314, 315, 316, 385, 386, 392, 393, 400, 406, 412, 416, 423], "radiu": [9, 36, 37, 44, 55, 58, 61, 100, 128, 153, 164, 169, 173, 180, 214, 254, 333, 423, 438], "achiev": [9, 15, 55, 71, 93, 160, 167, 175, 179, 180, 190], "destrieux": [9, 22, 23, 111, 114, 122, 125, 133, 144, 153, 200, 208, 266, 436], "fetch_atlas_destrieux_2009": [9, 155], "legacy_format": [9, 17, 21, 42, 43, 47, 58, 75, 76, 77, 79, 80, 81, 105, 106, 148, 153, 194, 200, 201, 212, 213, 214, 222, 223, 224, 233], "n_sampl": [9, 44, 47, 77, 81, 102, 105, 106, 186, 187, 188, 250, 251, 252, 253, 255, 256, 257, 258, 282, 295, 300, 326, 329, 332, 343, 404, 406, 412, 418, 419, 423], "symmetric_cmap": [9, 22, 125, 139, 153, 394, 399, 400, 401, 403, 436], "40": [9, 20, 27, 33, 36, 42, 43, 44, 53, 63, 91, 94, 102, 105, 195, 204, 229, 423], "413": [9, 33], "plot_3d_map_to_surface_project": [9, 27, 146, 153, 401], "refer": [10, 19, 46, 48, 59, 66, 69, 78, 93, 94, 98, 106, 113, 114, 115, 116, 123, 124, 125, 126, 131, 139, 146, 148, 149, 150, 153, 160, 164, 168, 169, 170, 172, 173, 178, 179, 180, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 436, 438], "dataset_ho": 10, "fetch_atlas_harvard_oxford": [10, 21, 56, 91, 128, 149, 153, 155, 168, 203, 408], "cort": [10, 21, 56, 91, 155, 202, 203], "maxprob": [10, 56, 91, 156, 202, 203, 438], "thr25": [10, 56, 91, 155, 202, 203], "2mm": [10, 21, 56, 91, 123, 147, 153, 155, 165, 201, 202, 203], "dataset_ju": 10, "fetch_atlas_juelich": [10, 147, 149, 153, 202], "thr0": [10, 202, 203], "1mm": [10, 123, 147, 153, 202, 203, 206, 243, 244, 246, 336], "atlas_ho_filenam": 10, "atlas_ju_filenam": 10, "roi": [10, 17, 21, 23, 25, 28, 33, 45, 56, 58, 83, 86, 88, 91, 96, 99, 113, 114, 117, 125, 133, 141, 144, 153, 160, 175, 177, 200, 206, 212, 213, 214, 218, 229, 250, 305, 307, 310, 312, 313, 317, 318, 326, 330, 332, 383, 385, 392, 393, 395, 396, 398, 436, 438], "locat": [10, 15, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 47, 49, 52, 53, 54, 55, 56, 58, 70, 75, 77, 89, 91, 92, 94, 95, 101, 102, 105, 108, 138, 147, 153, 167, 170, 176, 178, 180, 187, 190, 196, 212, 214, 215, 230, 232, 254, 255, 256, 257, 258, 282, 285, 295, 301, 327, 328, 329, 330, 331, 332, 333, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 405, 407, 436], "fsl": [10, 11, 36, 49, 62, 79, 86, 94, 147, 148, 150, 153, 178, 202, 203, 311], "harvardoxford": 10, "0x7f651d37b9d0": 10, "0x7f651db22730": 10, "view_typ": [10, 50, 87, 88, 144, 153, 158, 391, 392], "img_plot": 10, "607": [10, 33, 86], "bit": [10, 11, 36, 41, 49, 65, 66, 75, 79, 86, 94, 102, 126, 139, 150, 153, 154, 166, 178, 179, 220], "int": [10, 11, 23, 36, 40, 41, 42, 48, 49, 50, 57, 62, 68, 77, 78, 79, 84, 86, 94, 95, 100, 101, 103, 105, 150, 153, 158, 168, 187, 190, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 269, 270, 272, 274, 275, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 301, 306, 312, 323, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 378, 379, 380, 383, 385, 386, 389, 391, 392, 393, 394, 395, 396, 397, 399, 401, 402, 403, 404, 405, 406, 407, 412, 415, 416, 417, 418, 420, 423], "due": [10, 11, 14, 34, 36, 39, 49, 66, 71, 79, 86, 94, 123, 141, 147, 148, 149, 150, 153, 157, 161, 163, 168, 170, 194, 255, 256, 436], "deal": [10, 11, 36, 49, 68, 79, 86, 94, 116, 121, 144, 153, 170, 329], "int64": [10, 11, 36, 49, 79, 86, 94, 101, 150, 153, 178, 404, 406], "compat": [10, 11, 36, 49, 72, 79, 86, 94, 111, 124, 128, 148, 150, 153, 163, 168, 169, 202, 203, 264, 265, 282, 295, 297, 307, 322, 326, 327, 328, 329, 330, 331, 332, 333, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 381, 407, 419], "int32": [10, 11, 36, 49, 79, 84, 86, 94, 150, 153, 178, 310, 327, 328, 329, 330, 331, 332, 333], "new_img_lik": [10, 11, 36, 94, 107, 125, 141, 150, 153, 179], "roi_img": [10, 70, 392], "affin": [10, 40, 43, 49, 56, 71, 83, 89, 91, 93, 94, 96, 113, 132, 147, 153, 173, 177, 180, 250, 251, 252, 253, 255, 256, 257, 258, 282, 295, 300, 301, 302, 303, 305, 310, 311, 312, 313, 314, 315, 316, 318, 327, 328, 329, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 344, 346, 347, 398, 405, 410, 413, 414, 423, 425, 438], "318": [10, 27, 33, 41], "451": [10, 27, 33], "plot_atla": [10, 27], "common": [11, 49, 66, 68, 71, 94, 100, 133, 141, 147, 149, 153, 154, 160, 163, 165, 167, 168, 170, 172, 177, 179, 190, 199, 307, 315, 316, 320, 329, 338, 340, 438], "qualiti": [11, 62, 70, 77, 105, 114, 138, 153, 168, 169, 170, 176, 180, 194, 226, 327, 330, 379, 405], "mri": [11, 41, 56, 60, 73, 94, 100, 113, 114, 116, 148, 153, 168, 169, 170, 171, 173, 175, 178, 194, 196, 206, 215, 219, 233, 284, 323, 324], "known": [11, 33, 34, 100, 144, 160, 161, 165, 168, 170, 206, 272, 274, 275, 282, 379], "power": [11, 56, 58, 75, 77, 79, 114, 116, 122, 132, 144, 153, 154, 161, 162, 166, 173, 178, 180, 212, 213, 323, 324, 379], "grayplot": [11, 144, 153, 379], "plot_carpet": [11, 27, 125, 144, 145, 149, 150, 153, 436], "adhd_dataset": [11, 61, 169], "fetch_adhd": [11, 61, 128, 153], "n_subject": [11, 23, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 75, 76, 77, 78, 79, 80, 81, 85, 89, 91, 92, 95, 99, 104, 105, 106, 128, 132, 153, 158, 167, 180, 186, 187, 188, 190, 194, 195, 215, 223, 224, 227, 233, 239, 249, 267], "infer": [11, 49, 62, 65, 76, 79, 84, 100, 102, 114, 168, 170, 172, 173, 277, 285, 297, 315, 322, 343, 379], "often": [11, 30, 32, 35, 36, 43, 48, 86, 92, 94, 116, 159, 160, 161, 165, 170, 173, 175, 178, 179, 180, 272, 274, 275], "overwrit": [11, 56, 229, 231, 344, 346, 347], "particular": [11, 15, 33, 66, 87, 98, 117, 127, 148, 153, 155, 163, 165, 167, 175, 176, 178, 231, 250, 251, 252, 253, 272, 274, 275, 289, 320, 423], "field": [11, 44, 117, 141, 153, 170, 173, 178, 229, 250, 251, 252, 253, 257, 258, 283, 285, 315, 320, 321, 329, 332, 405, 422, 423], "explicit": [11, 48, 60, 72, 73, 113, 141, 147, 153, 168, 173, 175, 217, 231, 279, 282, 298, 312, 324, 393, 398, 419], "0010042": 11, "0010042_rest_tshift_rpi_voreg_mni": 11, "build": [11, 18, 21, 41, 46, 49, 50, 51, 58, 71, 100, 113, 115, 123, 124, 125, 133, 153, 156, 161, 163, 165, 170, 178, 180, 282, 405, 438], "mask_img": [11, 25, 29, 32, 33, 34, 35, 36, 39, 40, 41, 44, 49, 52, 53, 54, 56, 58, 64, 66, 67, 70, 75, 89, 91, 92, 98, 102, 103, 116, 125, 135, 139, 143, 144, 148, 153, 160, 165, 168, 179, 180, 241, 254, 265, 277, 282, 285, 295, 298, 299, 300, 306, 319, 327, 328, 329, 330, 331, 332, 333, 334, 341, 342, 377, 379, 388, 406, 407, 409, 410, 411, 412, 413, 414, 423], "compute_epi_mask": [11, 25, 70, 89, 179, 180, 250, 251, 252, 253, 257, 258, 329, 332, 405], "grai": [11, 38, 40, 41, 42, 43, 75, 89, 138, 153, 165, 172, 174, 233, 250, 251, 252, 253, 257, 258, 329, 332, 378, 379, 405, 423], "matter": [11, 24, 42, 43, 56, 66, 75, 89, 131, 144, 147, 153, 160, 165, 167, 168, 172, 174, 179, 180, 215, 219, 220, 233, 242, 243, 244, 245, 246, 250, 251, 252, 253, 257, 258, 323, 329, 332, 336, 339, 405, 423], "white": [11, 24, 40, 42, 56, 66, 75, 89, 129, 144, 146, 147, 153, 167, 179, 180, 215, 219, 233, 238, 243, 244, 245, 246, 250, 251, 252, 253, 257, 258, 323, 329, 332, 336, 339, 394, 395, 396, 397, 400, 401, 403, 405, 422, 423], "cerebrospin": [11, 56, 219, 323], "fluid": [11, 56, 219, 323], "icbm152": [11, 147, 153, 173, 219, 220, 243, 244, 246], "fetch_icbm152_2009": [11, 21, 75, 220, 244], "atlas_img": [11, 53], "gm": [11, 21, 89, 147, 153, 180, 219, 220, 250, 251, 252, 253, 257, 258, 329, 332, 336, 339, 405], "wm": [11, 21, 56, 89, 147, 153, 180, 219, 250, 251, 252, 253, 257, 258, 324, 329, 332, 336, 339, 405], "csf": [11, 21, 56, 215, 219, 323, 324], "map_label": 11, "atlas_data": [11, 20], "get_fdata": [11, 80, 141, 153, 178], "discrete_vers": 11, "argmax": 11, "discrete_atlas_img": 11, "01_plot": [11, 146, 153, 401], "subplot": [11, 12, 24, 38, 40, 41, 43, 44, 49, 51, 57, 63, 65, 66, 68, 70, 79, 80, 94, 100, 101, 105, 111, 123, 153, 384, 394, 395, 396, 397], "figsiz": [11, 12, 15, 18, 25, 30, 34, 35, 40, 42, 44, 48, 51, 57, 61, 62, 63, 65, 66, 68, 72, 79, 91, 94, 99, 100, 101, 105, 106, 111, 179, 390], "mask_label": [11, 379], "589": [11, 33, 84], "cast": [11, 84, 128, 141, 153, 180, 196, 313], "float32": [11, 33, 84, 180, 301, 310, 327, 328, 329, 330, 331, 332, 333], "aux": 11, "coerc": 11, "atlas_valu": 11, "076": [11, 27, 41], "987": [11, 79], "hcp": [12, 26, 114, 226], "workbench": 12, "cm": [12, 19, 20, 38, 41, 42, 44, 50, 53, 58, 102, 125, 138, 153, 158, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 383, 389, 390, 391, 392, 393, 399, 400, 401, 403, 436], "_cmap_d": 12, "nilearn_cmap": 12, "nmap": 12, "outer": [12, 89, 423], "arang": [12, 22, 30, 32, 33, 34, 48, 51, 63, 66, 69, 71, 94, 108], "ones": [12, 33, 44, 63, 66, 75, 79, 81, 100, 103, 105, 106, 124, 153, 162, 163, 165, 167, 255, 256, 289, 343, 404], "subplots_adjust": [12, 25, 40, 44, 49, 57, 68, 179], "bottom": [12, 15, 25, 40, 68, 179, 390], "imshow": [12, 38, 40, 41, 44, 84, 155, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 383, 385, 386, 388, 390, 391, 392, 393, 394, 397], "off": [12, 14, 38, 40, 41, 66, 72, 115, 123, 131, 153, 167, 168, 252, 253, 282, 295, 335, 336, 337, 339, 340, 391, 392, 393, 400, 417], "fontsiz": [12, 25, 40, 49, 63, 75, 78, 80, 105, 139, 141, 153, 179, 344, 346, 347, 399, 401, 402, 403], "va": 12, "rotat": [12, 32, 63, 84, 94, 180, 323], "deprecated_cmap": 12, "vega10": 12, "vega20": 12, "vega20b": 12, "vega20c": 12, "spectral": [12, 23, 114, 199], "m_cmap": 12, "m": [12, 30, 37, 40, 41, 49, 64, 66, 67, 71, 75, 100, 102, 114, 131, 153, 165, 166, 168, 176, 196, 200, 205, 206, 207, 209, 210, 212, 213, 216, 218, 226, 234, 238, 272, 274, 275, 297, 343, 437], "datad": 12, "endswith": 12, "_r": 12, "sort": [12, 21, 30, 31, 35, 42, 43, 62, 116, 146, 153, 168, 176, 178, 216, 235, 249, 295, 297, 310, 343], "get_cmap": 12, "aspect": [12, 40, 137, 153, 163, 167, 180, 282, 295, 323, 417], "auto": [12, 131, 146, 153, 180, 257, 258, 310, 327, 328, 329, 330, 331, 332, 333, 345, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 374, 378, 380, 383, 385, 386, 388, 389, 391, 392, 393, 394, 396, 397, 399, 400, 402, 423], "335": [12, 27, 33, 41], "plot_colormap": [12, 27], "_projector": [13, 14, 16, 47, 50, 51, 52, 58, 148, 153], "orthoprojector": [13, 14, 16, 47, 50, 51, 52, 58, 148, 153, 372], "0x7f651ba0f100": 13, "On": [13, 36, 49, 52, 53, 56, 58, 62, 66, 69, 75, 77, 114, 139, 153, 155, 167, 175, 179, 180, 187, 190], "xz": [13, 14, 15, 49, 282, 295, 362, 363, 372, 373, 378, 380, 383, 385, 386, 389, 391, 392, 393, 417, 436], "xzprojector": [13, 14, 366, 368, 372], "0x7f651d47c1c0": 13, "lyrz": [13, 14, 58, 282, 295, 351, 372, 380, 385, 389, 417, 436], "516": [13, 27, 33], "plot_demo_glass_brain": [13, 27], "part": [14, 15, 49, 51, 55, 69, 89, 91, 111, 114, 123, 141, 147, 150, 153, 161, 167, 168, 169, 174, 179, 186, 192, 193, 202, 203, 219, 224, 250, 251, 252, 253, 257, 258, 297, 298, 319, 320, 321, 323, 329, 332, 335, 336, 337, 339, 340, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 390, 405], "through": [14, 31, 39, 42, 48, 51, 56, 64, 75, 91, 100, 123, 124, 145, 146, 148, 153, 154, 160, 161, 162, 165, 168, 173, 175, 229, 233, 252, 253, 282, 295, 297, 323, 324, 327, 330, 339, 344, 346, 347, 349, 350, 351, 352, 353, 360, 362, 364, 366, 368, 370, 404, 410, 415, 423], "includ": [14, 37, 39, 42, 43, 54, 58, 63, 66, 70, 77, 79, 80, 91, 100, 101, 105, 108, 111, 121, 124, 125, 131, 141, 143, 144, 148, 150, 153, 158, 160, 165, 166, 168, 169, 173, 175, 176, 178, 184, 186, 193, 196, 197, 198, 205, 206, 215, 220, 234, 241, 242, 245, 250, 251, 252, 253, 264, 265, 269, 273, 282, 295, 297, 307, 321, 322, 323, 327, 328, 329, 330, 331, 332, 335, 336, 337, 339, 340, 343, 380, 416, 427, 432], "ortho": [14, 15, 62, 282, 295, 355, 356, 372, 373, 378, 380, 383, 385, 386, 389, 391, 392, 393, 417, 436], "equival": [14, 81, 105, 123, 153, 165, 167, 170, 176, 224, 250, 251, 252, 253, 257, 258, 311, 327, 328, 329, 330, 331, 332, 335, 336, 337, 339, 340, 398, 405], "sagitt": [14, 94, 282, 295, 352, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 378, 380, 383, 385, 386, 389, 391, 392, 393, 417], "cut": [14, 49, 66, 94, 126, 136, 138, 139, 150, 153, 174, 282, 295, 336, 339, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 378, 380, 383, 385, 386, 389, 391, 392, 393, 400, 417, 436], "0x7f6504940c10": 14, "produc": [14, 24, 46, 59, 62, 64, 79, 100, 105, 113, 148, 150, 153, 170, 173, 180, 215, 248, 324, 326, 327, 328, 329, 330, 331, 332, 333, 356, 393, 407, 423, 436], "0x7f651dcb8f10": 14, "black": [14, 40, 104, 124, 125, 153, 168, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 380, 383, 385, 386, 389, 391, 392, 393, 400, 401, 403], "0x7f651cc679a0": 14, "addition": [14, 15, 58, 70, 147, 153, 168, 172, 176, 179, 180, 343, 416], "coron": [14, 94, 282, 295, 344, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 378, 380, 383, 385, 386, 389, 391, 392, 393, 417], "yz": [14, 15, 31, 39, 282, 295, 368, 369, 372, 373, 378, 380, 383, 385, 386, 389, 391, 392, 393, 417, 436], "yzprojector": [14, 362, 366, 372], "0x7f651d3c1190": 14, "yx": [14, 15, 116, 282, 295, 366, 367, 372, 373, 378, 380, 383, 385, 386, 389, 391, 392, 393, 417, 436], "yxprojector": [14, 362, 368, 372], "0x7f651db025b0": 14, "limit": [14, 42, 75, 88, 124, 153, 155, 165, 167, 168, 229, 324, 379], "vmax": [14, 40, 44, 49, 50, 52, 53, 54, 55, 56, 57, 58, 76, 79, 80, 84, 90, 100, 102, 105, 107, 111, 121, 123, 141, 153, 158, 378, 379, 383, 385, 386, 388, 391, 392, 393, 394, 396, 397, 399, 400, 401, 403, 436], "diverg": 14, "sinc": [14, 19, 33, 39, 58, 64, 66, 75, 77, 81, 101, 108, 116, 123, 146, 153, 167, 170, 186, 196, 202, 203, 235, 285, 320, 321, 330, 331, 343, 347, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 379, 410, 411, 436], "around": [14, 24, 34, 84, 86, 111, 137, 139, 153, 167, 168, 188, 297, 304, 315, 333, 344, 346, 347, 423], "symmetric_cbar": [14, 125, 153, 385, 388, 393, 397], "viridi": [14, 146, 153], "0x7f651c4fb4f0": 14, "lose": [14, 95, 436], "colour": [14, 170], "0x7f651c4cddf0": 14, "saw": 14, "lzr": [14, 53, 282, 295, 352, 372, 380, 385, 389, 417, 436], "enabl": [14, 79, 104, 125, 144, 148, 153, 160, 163, 174, 180, 185, 323, 348, 349, 350, 351, 352, 353, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 437], "lzrprojector": [14, 350, 372], "0x7f651ce07e50": 14, "lyrzprojector": [14, 353, 372], "0x7f651d0b38b0": 14, "xprojector": [14, 364, 370, 372], "yprojector": [14, 360, 370, 372], "zprojector": [14, 360, 364, 372], "l": [14, 37, 41, 51, 56, 70, 71, 76, 94, 114, 125, 141, 148, 153, 161, 166, 194, 196, 206, 207, 209, 210, 212, 213, 214, 218, 226, 233, 282, 295, 323, 324, 344, 346, 347, 348, 349, 350, 351, 352, 353, 372, 378, 380, 383, 385, 386, 389, 391, 392, 393, 417, 436], "lprojector": [14, 358, 372], "rprojector": [14, 348, 372], "0x7f651d276f40": 14, "inherit": [14, 273, 415], "customis": [14, 56, 155, 324], "focu": [14, 79, 155, 157, 167, 407], "add_contour": [14, 18, 134, 141, 153, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 436], "lzryprojector": [14, 351, 372], "empti": [14, 102, 108, 117, 125, 141, 149, 153, 168, 202, 203, 218, 250, 251, 252, 253, 320, 330, 331, 377, 390, 410, 411], "lzry": [14, 282, 295, 353, 372, 380, 385, 389, 417, 436], "choos": [14, 15, 24, 33, 34, 44, 47, 87, 163, 164, 170, 180, 250, 251, 252, 253, 282, 295, 324, 378, 380, 383, 385, 386, 389, 391, 392, 393, 404, 405, 417, 423, 438], "red": [14, 15, 18, 40, 51, 139, 153, 169, 170, 173, 436], "demonstr": [14, 39, 40, 56, 62, 65, 94, 104, 149, 153, 159, 160, 343, 436], "insid": [14, 21, 24, 34, 49, 55, 98, 163, 168, 186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 300, 306, 320, 326, 327, 328, 329, 330, 331, 332, 333, 379, 391, 392, 395, 396, 404, 405, 406, 407, 423], "kei": [14, 43, 54, 58, 66, 79, 111, 116, 117, 125, 153, 155, 168, 175, 178, 196, 197, 198, 199, 202, 203, 207, 210, 219, 225, 229, 250, 251, 252, 253, 269, 273, 278, 282, 289, 291, 295, 297, 321, 322, 343, 354, 379, 388, 401], "vari": [14, 34, 66, 94, 95, 147, 153, 157, 163, 167, 175, 187, 188, 190, 301], "lr": [14, 16, 282, 295, 349, 372, 380, 385, 389, 417, 436], "lrprojector": [14, 372], "ad": [14, 15, 20, 21, 30, 40, 68, 69, 84, 123, 124, 125, 134, 135, 145, 147, 148, 149, 150, 153, 163, 167, 169, 176, 186, 205, 206, 250, 251, 252, 253, 255, 256, 297, 304, 315, 319, 321, 322, 326, 327, 328, 329, 330, 331, 332, 333, 343, 344, 346, 347, 378, 379, 380, 383, 385, 386, 389, 391, 392, 393, 400, 407, 438], "chang": [14, 19, 40, 42, 51, 62, 68, 102, 105, 106, 110, 111, 113, 119, 161, 163, 167, 168, 170, 176, 177, 186, 187, 188, 238, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 285, 290, 295, 309, 313, 315, 318, 319, 326, 327, 328, 329, 330, 331, 332, 333, 334, 343, 388, 394, 396, 397, 401, 403, 404, 405, 406, 407, 410, 411, 413, 416, 419, 437, 438], "lyr": [14, 282, 295, 350, 372, 380, 385, 389, 417, 436], "lyrprojector": [14, 352, 372], "draw": [14, 15, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 382, 423], "thick": [14, 47, 146, 153, 210, 238, 391, 392, 394, 397, 403, 421, 423], "width": [14, 32, 51, 66, 94, 173, 180, 250, 251, 252, 253, 257, 258, 282, 295, 297, 317, 327, 328, 329, 330, 331, 332, 333, 334, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 383, 385, 386, 389, 390, 391, 392, 393, 399, 405, 407, 409, 415, 417], "linewidth": [14, 18, 21, 42, 43, 48, 50, 61, 91, 391, 392, 399], "enough": [14, 58, 160, 167, 175, 180, 315], "unlik": [14, 20, 165, 170, 178, 324], "upper": [14, 40, 167, 272, 274, 275, 337, 340, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 383, 385, 386, 388, 389, 391, 392, 393, 394, 397, 401, 403], "bound": [14, 84, 89, 134, 141, 153, 179, 257, 315, 344, 346, 347, 378, 379, 383, 385, 386, 388, 389, 391, 392, 393, 394, 397, 401, 403], "kept": [14, 117, 125, 153, 168, 192, 202, 203, 250, 251, 252, 253, 299, 300, 317, 335, 336, 337, 338, 339, 340, 341, 407, 409, 419], "infin": 14, "inf": [14, 54, 103, 300, 328, 331, 334, 337, 419], "646": [14, 27, 33], "plot_demo_glass_brain_extens": [14, 27], "techniqu": [15, 44, 114, 158, 159, 160, 161, 162, 163, 167, 173, 175, 180, 407], "essenti": [15, 68, 80, 173], "what": [15, 56, 66, 108, 149, 161, 167, 171, 176, 178, 180, 187, 269, 273, 306, 320, 420, 436, 438], "shown": [15, 21, 40, 54, 66, 70, 94, 117, 146, 153, 154, 159, 160, 169, 170, 207, 324, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 388, 389, 392, 399, 401, 403], "subclass": [15, 168, 373], "implement": [15, 48, 49, 56, 66, 68, 98, 126, 133, 135, 141, 144, 145, 148, 149, 153, 154, 157, 158, 159, 161, 163, 165, 166, 167, 168, 173, 175, 176, 181, 202, 203, 250, 251, 254, 255, 256, 270, 272, 277, 282, 284, 286, 287, 288, 289, 292, 293, 294, 295, 297, 306, 323, 324, 343, 344, 345, 347, 357, 394, 396, 397, 407, 419, 420, 433], "interact": [15, 22, 47, 52, 54, 58, 100, 138, 139, 143, 148, 153, 156, 158, 168, 173, 174, 175, 399, 400, 402, 438], "precis": [15, 41, 52, 57, 61, 91, 124, 153, 154, 157, 158, 167, 175, 180, 186, 187, 188, 190, 191, 224, 250, 252, 272, 274, 275, 297, 343], "overlai": [15, 20, 21, 50, 158, 179, 400, 438], "tile": [15, 139, 153, 359, 373, 378, 383, 386, 391, 392, 393, 417, 436], "mosaic": [15, 145, 153, 354, 373, 378, 383, 386, 391, 392, 393, 417, 436], "wherea": [15, 49, 147, 153, 157, 161, 179, 338, 340, 341, 405], "mni": [15, 48, 52, 54, 66, 69, 93, 101, 108, 114, 117, 131, 141, 144, 150, 153, 155, 172, 173, 175, 179, 180, 196, 198, 204, 212, 213, 214, 219, 243, 244, 246, 250, 251, 252, 253, 302, 333, 336, 339, 378, 380, 383, 385, 386, 391, 392, 393, 399, 400, 402, 417, 436], "accordingli": [15, 148, 153, 320], "help": [15, 33, 58, 67, 94, 134, 138, 139, 153, 155, 161, 169, 180, 190, 437, 438], "haxby_anat_filenam": [15, 16], "haxby_mask_filenam": [15, 16], "haxby_func_filenam": [15, 16], "xyz": [15, 314, 354, 359, 361, 365, 371], "integ": [15, 84, 94, 128, 132, 141, 145, 148, 150, 153, 173, 178, 180, 188, 190, 194, 196, 198, 200, 202, 203, 205, 206, 209, 210, 229, 231, 255, 256, 257, 258, 282, 301, 335, 336, 337, 339, 340, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 383, 385, 386, 391, 392, 393, 395, 396, 408, 413, 414, 417], "0x7f651ceb9ca0": 15, "zslicer": [15, 70, 88, 361, 365, 373], "rather": [15, 54, 66, 94, 100, 117, 131, 133, 135, 137, 141, 146, 148, 153, 154, 167, 178, 179, 187, 196, 229, 231, 257, 258, 297, 328, 331, 416], "impli": [15, 145, 153, 167, 186, 315, 334], "maximum": [15, 48, 66, 79, 89, 92, 94, 104, 141, 153, 165, 173, 180, 186, 187, 188, 190, 195, 202, 203, 229, 239, 250, 251, 252, 253, 257, 258, 269, 270, 273, 282, 291, 295, 297, 299, 317, 319, 327, 328, 329, 330, 331, 332, 333, 334, 347, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 385, 405, 407, 409, 410, 436], "0x7f651c5dd460": 15, "0x7f651dbbe9d0": 15, "yslicer": [15, 92, 361, 371, 373], "again": [15, 49, 91, 103, 116, 168, 172, 175, 229, 231], "0x7f651cdb1610": 15, "ncolorbar": 15, "0x7f651d3d1970": 15, "stand": [15, 44, 141, 153, 173, 179, 436], "thu": [15, 31, 34, 39, 102, 104, 155, 160, 161, 162, 165, 166, 167, 173, 179, 180, 252, 253, 254, 255, 256, 270, 304, 324, 343], "xzslicer": [15, 49, 367, 369, 373], "0x7f651d0bc310": 15, "similarli": [15, 55, 94, 178], "yxslicer": [15, 363, 369], "assign": [15, 86, 94, 157, 158, 170, 202, 203, 212, 214, 407, 408, 412], "0x7f651d348df0": 15, "yzslicer": [15, 39, 363, 367, 373], "0x7f651db40970": 15, "case": [15, 23, 34, 40, 43, 48, 49, 50, 54, 62, 65, 66, 68, 72, 84, 89, 91, 92, 101, 108, 117, 131, 141, 144, 153, 154, 155, 157, 160, 161, 165, 167, 175, 176, 178, 193, 196, 200, 202, 203, 250, 251, 252, 253, 255, 256, 282, 284, 289, 295, 297, 298, 307, 315, 316, 317, 318, 321, 329, 330, 331, 332, 333, 337, 375, 378, 379, 380, 383, 385, 386, 388, 391, 392, 393, 400, 416, 417, 423, 436], "tiledslic": [15, 354, 356, 373], "0x7f65219513a0": 15, "situat": [15, 58, 154, 160, 161, 178, 317], "mosaicslic": [15, 356, 359, 373], "0x7f651ce98130": 15, "still": [15, 49, 66, 79, 91, 111, 117, 125, 148, 153, 165, 167, 176, 180, 229, 436], "0x7f651dcb8e20": 15, "tupl": [15, 180, 197, 204, 239, 250, 251, 252, 253, 255, 256, 257, 258, 272, 274, 275, 282, 285, 295, 304, 312, 315, 317, 320, 323, 329, 332, 335, 337, 338, 340, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 383, 386, 390, 391, 392, 393, 400, 405, 410, 417, 422, 423], "0x7f651b94c910": 15, "interpret": [15, 51, 70, 114, 156, 165, 166, 167, 170, 196, 200, 202, 203, 206, 207, 210, 311, 343, 436, 438], "process": [15, 16, 32, 36, 39, 42, 44, 50, 53, 62, 91, 94, 101, 102, 105, 114, 115, 116, 126, 153, 155, 158, 159, 160, 163, 167, 168, 170, 172, 173, 175, 176, 178, 179, 180, 187, 204, 219, 220, 224, 250, 251, 252, 253, 255, 256, 257, 258, 282, 295, 300, 301, 306, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 405, 406, 407, 413, 414, 419], "mean_haxby_img": [15, 16], "coregistr": [15, 130, 153, 173], "edg": [15, 47, 52, 54, 58, 94, 141, 153, 154, 155, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 380, 390, 399, 438], "being": [15, 89, 94, 123, 124, 125, 138, 141, 148, 153, 154, 167, 168, 170, 173, 257, 289, 322, 328, 331, 338, 340, 379, 394, 396, 397, 401, 403, 407], "outlin": [15, 48, 89, 92, 159, 168, 395, 436], "manual": [15, 16, 19, 32, 34, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 81, 83, 89, 91, 92, 96, 98, 99, 100, 102, 103, 104, 105, 106, 113, 116, 154, 160, 175, 177, 180, 205, 206, 218, 257, 258, 305, 310, 312, 313, 317, 326, 330, 383, 392, 393, 394, 396, 397, 398, 436, 438], "34": [15, 33, 36, 42, 43, 44, 62, 91, 102, 105, 114, 165], "blue": [15, 18, 40, 49, 70, 86], "fill": [15, 21, 62, 68, 94, 101, 108, 133, 141, 147, 153, 167, 180, 315, 316, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 391, 392, 415, 438], "transpar": [15, 23, 125, 141, 153, 180, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 380, 385, 386, 388, 389, 391, 392, 393, 394, 397, 399, 400, 401, 402, 403], "contourf": [15, 21, 48, 50, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "sphere": [15, 36, 37, 46, 55, 59, 113, 143, 146, 153, 164, 180, 186, 212, 213, 215, 238, 326, 333, 375, 380, 389, 390, 394, 395, 396, 397, 398, 399, 403, 422, 423, 436, 438], "marker_color": [15, 40, 55, 61, 100, 139, 141, 153, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 402, 436], "yellow": 15, "third": [15, 66, 81, 158, 291], "marker_s": [15, 40, 55, 61, 100, 139, 141, 153, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 402, 436], "coord": [15, 37, 40, 50, 52, 54, 58, 70, 87, 100, 139, 141, 153, 158, 344, 346, 347, 375, 376, 380, 394, 395, 396, 397, 403, 436], "alter": [15, 145, 153], "bar": [15, 42, 102, 105, 138, 153, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 438], "scalebar": [15, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 436], "scale_": 15, "keyword": [15, 98, 117, 141, 153, 163, 167, 180, 188, 194, 229, 240, 300, 311, 324, 327, 328, 329, 330, 331, 332, 333, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 384, 386, 388, 390, 396, 397, 401, 419], "arg": [15, 111, 250, 251, 252, 253, 261, 326], "scale_s": [15, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "scale_unit": [15, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "built": [15, 33, 42, 48, 124, 153, 170, 176, 250, 251, 252, 253, 405], "extens": [15, 133, 147, 153, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397], "pdf": [15, 55, 68, 102, 114, 125, 150, 153, 165, 166, 199, 200, 206, 207, 209, 212, 218, 226, 233, 238, 300, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397, 419], "svg": [15, 62, 125, 153, 322, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397], "plot_stat_map_from_displai": 15, "sure": [15, 94, 113, 123, 153, 165, 168, 176, 255, 256, 437], "close": [15, 23, 37, 40, 49, 86, 148, 153, 154, 161, 167, 168, 170, 173, 220, 250, 251, 252, 253, 335, 336, 337, 339, 340, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397, 412, 436], "633": [15, 27, 33], "plot_demo_more_plot": [15, 27], "easi": [16, 61, 69, 75, 94, 116, 117, 158, 159, 161, 164, 168, 169, 173, 175, 180, 323, 438], "coordin": [16, 19, 22, 23, 40, 49, 52, 54, 70, 94, 100, 114, 116, 122, 130, 133, 135, 136, 138, 144, 148, 150, 153, 156, 158, 167, 169, 170, 180, 204, 212, 213, 214, 238, 258, 259, 260, 261, 302, 315, 333, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 377, 378, 379, 380, 383, 385, 386, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 402, 403, 416, 417, 422, 423, 436, 438], "flip": [16, 103, 132, 153, 198], "radiolog": [16, 125, 153, 344, 346, 347, 378, 380, 383, 385, 386, 389, 391, 392, 393], "0x7f651dce9eb0": 16, "web": [16, 114, 117, 138, 141, 153, 168, 229, 231, 282, 295, 399, 401, 402, 403, 417, 436], "alwai": [16, 100, 160, 163, 167, 168, 170, 180, 256, 272, 274, 275, 279, 323, 400, 401, 403, 436], "fix": [16, 30, 58, 60, 64, 71, 73, 113, 120, 167, 168, 176, 179, 217, 269, 270, 273, 279, 282, 285, 312, 393, 398], "0x7f651b997280": 16, "0x7f651da7c6d0": 16, "overlaid": [16, 71, 89, 92, 144, 146, 153, 391], "0x7f65239b3760": 16, "voxel_wis": 16, "reduc": [16, 29, 33, 34, 44, 49, 66, 79, 87, 94, 100, 137, 138, 141, 145, 153, 162, 166, 167, 168, 173, 180, 188, 233, 252, 253, 257, 258, 323, 324, 327, 330, 394, 396, 397, 401, 403, 404, 405, 406, 410], "0x7f651d151a60": 16, "ie": [16, 150, 153, 154, 159, 178, 272, 274, 275, 328, 331, 333], "697": [16, 27, 33], "976": [16, 27], "plot_demo_plot": [16, 27], "modifi": [17, 49, 58, 94, 103, 131, 148, 153, 168, 180, 229, 231, 315, 316, 319, 394, 396, 397, 403, 418, 419], "leav": [17, 29, 33, 160, 165, 304], "unchang": [17, 66, 165, 186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "localizer_dataset": [17, 77, 81, 105, 106], "fetch_localizer_button_task": [17, 131, 153, 223, 224, 436], "localizer_tmap_filenam": 17, "tmap": [17, 79, 222, 224, 436], "localizer_anat_filenam": 17, "0x7f651d76bd90": 17, "0x7f651d46f4f0": 17, "0x7f651db5ad60": 17, "505": [17, 27, 33], "plot_dim_plot": [17, 27], "func_filenam": [18, 25, 30, 31, 32, 33, 35, 48, 50, 53, 55, 58, 91, 92, 102, 104, 158, 179], "z_slice": [18, 42, 105], "facecolor": [18, 32, 40, 42, 106, 125, 153, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 380, 383, 385, 386, 389, 391, 392, 393], "mask_vt_filenam": [18, 94], "mask_house_filenam": 18, "mask_hous": [18, 32, 116, 178, 218], "mask_face_filenam": 18, "mask_fac": [18, 32, 116, 178, 218], "limegreen": 18, "zip": [18, 20, 30, 32, 34, 38, 41, 50, 51, 53, 58, 88, 99, 101, 103, 108, 111, 113, 158, 176, 204, 219], "antialias": 18, "trick": [18, 175], "user": [18, 29, 34, 39, 58, 66, 68, 100, 106, 111, 117, 123, 124, 125, 135, 138, 139, 141, 142, 146, 148, 149, 150, 153, 167, 168, 169, 170, 173, 174, 176, 177, 180, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 428, 429, 437], "legend_guid": 18, "html": [18, 29, 33, 34, 36, 49, 52, 53, 54, 56, 58, 61, 62, 64, 75, 77, 98, 138, 142, 146, 148, 153, 160, 168, 171, 180, 197, 209, 218, 250, 251, 252, 253, 282, 295, 324, 328, 331, 399, 400, 401, 402, 403, 407, 415, 417, 436, 437], "patch": [18, 40, 41, 49, 176], "rectangl": [18, 40, 49, 84], "p_v": 18, "fc": 18, "p_h": 18, "p_f": 18, "face": [18, 28, 32, 33, 38, 45, 71, 94, 97, 98, 100, 109, 113, 114, 116, 124, 133, 146, 153, 160, 165, 169, 174, 178, 179, 180, 218, 219, 237, 250, 252, 254, 259, 260, 261, 305, 307, 310, 312, 313, 326, 332, 343, 371, 386, 390, 393, 394, 395, 396, 397, 398, 400, 403, 422, 423], "loc": [18, 32, 34, 42, 43, 49, 61, 68, 70, 91, 100, 344, 346, 347], "lower": [18, 31, 32, 39, 51, 70, 77, 89, 94, 128, 153, 159, 162, 166, 167, 173, 179, 186, 192, 193, 250, 251, 252, 253, 272, 274, 275, 337, 340, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 377, 378, 379, 383, 385, 386, 388, 389, 390, 391, 392, 393, 394, 397, 418], "_ax": [18, 21, 48, 50], "74": [18, 21, 30, 33, 36, 42, 43, 44, 48, 50, 91, 102], "kwarg": [18, 58, 111, 124, 141, 151, 153, 194, 261, 300, 324, 326, 327, 328, 329, 330, 331, 332, 333, 339, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 380, 383, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 419], "im": [18, 21, 31, 107], "getattr": [18, 21], "340": [18, 27, 33, 36, 41, 42, 44, 102], "plot_haxby_mask": [18, 27], "fetch_atlas_basc_multiscale_2015": [19, 124, 125, 129, 153], "sym": [19, 193, 198], "resolut": [19, 21, 75, 76, 93, 103, 114, 116, 123, 124, 134, 146, 147, 153, 158, 177, 196, 198, 201, 205, 206, 207, 215, 238, 241, 242, 243, 244, 245, 246, 277, 332, 336, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 388, 401, 407, 438], "197": [19, 33, 41, 96, 108, 109, 198, 307], "444": [19, 33, 47, 59, 198], "networks_64": 19, "networks_197": 19, "networks_444": 19, "itself": [19, 34, 66, 157, 186, 187, 188, 257, 258, 305, 405, 423], "bwr": [19, 53, 139, 153, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 399], "bwr_r": 19, "404": [19, 27, 33], "plot_multiscale_parcel": [19, 27], "compos": [20, 98, 173, 179, 180, 213, 250, 251, 252, 253], "node": [20, 23, 24, 58, 108, 139, 141, 144, 146, 153, 155, 180, 205, 238, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 388, 389, 399, 401, 402, 423, 436], "constitut": [20, 159], "leverag": [20, 144, 153, 174, 175, 250, 251, 405, 437], "less": [20, 48, 49, 50, 56, 66, 69, 77, 79, 88, 94, 100, 111, 117, 138, 139, 146, 153, 165, 167, 168, 170, 176, 273, 319, 374, 438], "fetch_atlas_msdl": [20, 21, 51, 52, 53, 54, 99, 130, 153, 155], "atlas_filenam": [20, 52, 54, 56, 155], "pcc": [20, 23, 51, 55], "dmn": [20, 51, 61], "acc": 20, "pariet": [20, 58, 91, 103, 204], "black_blu": 20, "black_green": 20, "black_pink": 20, "3rd": [20, 385, 386, 392, 393, 400], "4th": [20, 94, 114, 166, 173, 179, 274, 275, 312, 315, 391], "5th": 20, "6th": 20, "dmn_node": 20, "35": [20, 22, 27, 30, 33, 36, 42, 43, 44, 45, 53, 72, 91, 102, 105, 118, 153, 204, 229], "55": [20, 33, 36, 42, 43, 44, 68, 102, 105, 131, 153], "29": [20, 33, 36, 42, 43, 62, 72, 75, 81, 91, 100, 102, 103, 109, 126, 153], "064": [20, 27, 41, 114, 323, 324], "plot_overlai": [20, 27], "delin": 21, "filled_contour": [21, 50, 158, 391], "continu": [21, 39, 43, 52, 56, 155, 160, 161, 162, 166, 168, 173, 180, 229, 310, 314, 315, 316, 327, 328, 329, 330, 331, 332, 333, 385, 386, 391, 392, 393, 400, 408, 409], "plot_prob_atla": [21, 27, 48, 50, 87, 88, 128, 135, 136, 145, 153, 158, 159, 392, 436], "pick": [21, 158, 167, 170, 173, 220], "randomli": [21, 165], "alreadi": [21, 22, 33, 34, 49, 64, 89, 94, 101, 103, 107, 108, 117, 141, 148, 153, 158, 160, 161, 168, 175, 180, 229, 231, 295, 297, 316, 343, 407], "know": [21, 84, 117, 167, 170, 173, 193, 231], "tune": [21, 31, 32, 34, 39, 43, 89, 132, 153, 155, 160, 161, 163, 167, 170, 257, 258, 323, 329, 332, 405, 436], "allen": [21, 114, 133, 153, 197], "fetch_atlas_allen_2011": [21, 133, 153], "icbm": [21, 66, 75, 138, 153, 219], "tissu": [21, 173, 209], "ica": [21, 46, 50, 54, 59, 87, 92, 97, 104, 109, 113, 114, 117, 126, 153, 155, 156, 173, 174, 175, 184, 197, 207, 215, 226, 229, 241, 257, 258, 308, 317, 323, 324, 326, 331, 332, 391, 393, 398, 411, 436, 438], "brainmap": [21, 207], "smith_bm20": 21, "rsn28": [21, 197], "allen2011": 21, "smith2009": 21, "local": [21, 40, 41, 49, 60, 65, 66, 73, 76, 77, 79, 80, 81, 88, 97, 100, 101, 103, 107, 108, 109, 113, 114, 141, 142, 150, 153, 168, 169, 170, 173, 176, 178, 180, 202, 203, 206, 211, 221, 222, 223, 224, 225, 228, 229, 231, 254, 305, 317, 320, 326, 332, 343, 371, 384, 385, 393, 398], "harvard_oxford": 21, "prob": [21, 202, 203, 205, 391], "harvard_oxford_sub": 21, "sub": [21, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 78, 85, 91, 92, 95, 100, 101, 104, 108, 146, 153, 186, 187, 188, 202, 203, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 320, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407, 417], "smith_rsn10": 21, "smith_rsn20": 21, "smith_rsn70": 21, "70": [21, 30, 32, 33, 36, 42, 43, 44, 63, 102, 105, 114, 165, 207], "smith_bm10": 21, "smith_bm70": 21, "multi": [21, 28, 41, 42, 43, 45, 46, 48, 58, 59, 100, 113, 114, 154, 155, 156, 158, 164, 167, 175, 178, 179, 180, 181, 187, 188, 190, 198, 204, 215, 218, 237, 257, 282, 326, 329, 331, 332, 376, 380, 390, 398, 438], "dictionari": [21, 23, 33, 46, 59, 66, 69, 101, 104, 108, 113, 114, 117, 145, 153, 156, 160, 161, 173, 174, 180, 186, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 250, 251, 252, 253, 257, 258, 282, 295, 297, 307, 308, 321, 322, 326, 331, 343, 354, 356, 376, 377, 378, 379, 380, 388, 390, 391, 393, 398, 401, 407, 438], "pauli": [21, 114, 205], "subcort": [21, 114, 138, 153, 202, 203, 205, 214], "subcortex": [21, 114, 214], "fetch_atlas_pauli_2017": [21, 138, 141, 153], "difumo": [21, 47, 145, 153, 201], "fetch_atlas_difumo": [21, 47, 145, 153], "resolution_mm": [21, 47, 201, 206], "atlas_typ": 21, "pauli2017": 21, "item": [21, 64, 65, 66, 69, 71, 100, 105, 117, 229, 230, 231, 232, 285, 329, 338, 340], "372": [21, 27, 33], "424": [21, 27, 33], "2010": [22, 23, 48, 58, 102, 114, 133, 153, 154, 159, 161, 186, 187, 198, 208, 212, 219, 244, 257], "plot_surf_roi": [22, 23, 125, 133, 135, 137, 141, 145, 153, 394, 436], "pial": [22, 23, 24, 37, 144, 150, 153, 238, 388, 394, 395, 396, 397, 401, 403, 422, 423], "gyri": [22, 23, 114, 208], "sulci": [22, 23, 114, 208], "nomenclatur": [22, 23, 114, 208], "53": [22, 23, 33, 36, 42, 43, 44, 61, 82, 91, 93, 102, 114, 197, 198, 208], "1016": [22, 23, 56, 76, 114, 161, 162, 165, 166, 198, 200, 201, 204, 208, 213, 214, 219, 224, 227, 228, 244, 252, 253, 257, 274, 275, 277, 297, 323, 324, 343, 379, 420], "06": [22, 23, 32, 33, 36, 45, 59, 73, 91, 96, 114, 198, 208, 254, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 393, 400], "010": [22, 23, 41, 114, 208, 257], "map_left": [22, 23, 208, 436], "sulcal": [22, 23, 114, 200, 238, 388, 394, 396, 397, 401, 403], "depth": [22, 23, 24, 114, 144, 153, 200, 238, 388, 394, 396, 397, 401, 403, 423], "shade": [22, 394, 396, 397, 403], "pial_left": [22, 23, 69, 108, 238, 388, 401, 423], "infl_left": [22, 23, 69, 108, 238, 388, 401, 436], "sulc_left": [22, 23, 69, 108, 238, 388, 401], "gii": [22, 23, 323, 324, 394, 395, 396, 397, 403, 421, 422, 423], "roi_map": [22, 23, 395, 396], "dark": [22, 23, 125, 153, 168, 394, 396, 397, 401, 403], "400x400": [22, 23], "posterior": [22, 23, 55, 58, 61, 91, 103, 135, 153, 169, 212, 214, 394, 396, 397], "explicitli": [22, 66, 67, 107, 138, 150, 153, 160, 168, 229, 322, 324, 405], "angl": [22, 24, 84, 124, 153, 258, 394, 396, 397], "elev": [22, 394, 396, 397], "azim": [22, 394, 396, 397], "appropri": [22, 100, 111, 114, 168, 180, 196, 215, 219, 244, 282, 284, 289, 322, 408], "ot": [22, 165], "convent": [22, 72, 123, 125, 150, 153, 168, 176, 248, 318, 320, 321, 378, 383, 385, 393, 404, 406], "vertic": [22, 37, 41, 66, 72, 80, 125, 133, 153, 154, 224, 259, 264, 265, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 394, 395, 396, 397, 403], "vert": 22, "map_": 22, "rr": 22, "load_surf_mesh": [22, 37, 133, 150, 153, 436], "pial_": [22, 37], "unknown": [22, 56, 91, 160, 196, 197, 210], "str": [22, 77, 79, 100, 111, 147, 153, 168, 186, 187, 188, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 282, 284, 285, 289, 295, 296, 297, 299, 300, 311, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 413, 415, 419, 421, 422, 423], "omit": 22, "append": [22, 33, 34, 40, 41, 44, 50, 51, 53, 64, 71, 72, 100, 103, 107, 108, 158], "synthet": [22, 57, 84, 168], "n_parcel": [22, 49, 405], "corr": [22, 387], "n_parcels_hemi": 22, "plot_connectom": [22, 47, 50, 51, 52, 53, 54, 58, 119, 121, 123, 130, 131, 136, 139, 141, 150, 153, 155, 158, 399, 402, 436], "edge_threshold": [22, 47, 50, 53, 54, 58, 139, 141, 153, 158, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 399, 436], "gist_ncar": [22, 111, 137, 153, 379, 392, 396, 436], "view_connectom": [22, 52, 54, 58, 138, 139, 141, 146, 153, 400, 402, 436], "273": [22, 27, 33, 41, 114, 196], "plot_surf_atla": [22, 27], "subset": [23, 36, 44, 94, 161, 165, 168, 249, 272, 285, 307, 323], "enhanc": [23, 64, 66, 67, 68, 114, 173, 176, 239, 267, 270, 297, 343], "nki": [23, 111, 114, 133, 153, 239, 267], "rockland": [23, 114, 239], "fcon_1000": [23, 195, 239], "nitrc": [23, 195, 199, 207, 239], "indi": [23, 195, 239], "nooner": [23, 114, 239], "2012": [23, 44, 100, 114, 150, 153, 155, 160, 166, 167, 175, 199, 227, 239, 323, 324], "645m": 23, "102": [23, 33, 40, 41, 43, 114, 239, 324], "fliem": 23, "nki_nilearn": 23, "dale": [23, 114, 200, 208, 238], "1999": [23, 114, 219, 238], "fischl": [23, 114, 200, 206, 208, 210, 238], "cingul": [23, 55, 58, 61, 91, 169], "pearson": [23, 114, 269, 273, 387], "product": [23, 55, 79, 167], "moment": [23, 116], "correl": [23, 26, 42, 43, 46, 47, 52, 59, 61, 71, 99, 100, 111, 113, 114, 158, 160, 167, 170, 173, 180, 186, 189, 191, 193, 215, 226, 257, 323, 324, 326, 332, 333, 356, 387, 393, 436], "acceler": [23, 114, 239], "pace": [23, 114, 239], "psychiatri": [23, 114, 239], "frontier": [23, 49, 114, 157, 194, 197, 229, 231, 239], "152": [23, 33, 41, 56, 114, 173, 239], "3389": [23, 114, 117, 194, 197, 229, 231, 239], "fnin": [23, 114, 239], "00152": [23, 114, 239], "segment": [23, 56, 114, 158, 173, 204, 210, 219, 233, 323, 407, 409, 423], "reconstruct": [23, 28, 40, 45, 113, 114, 180, 186, 193, 228, 257, 258, 326, 329, 332, 398, 413, 414], "1006": [23, 114, 196], "nimg": [23, 114, 196], "1998": [23, 196], "0395": 23, "ii": [23, 114, 224, 324], "flatten": [23, 24, 40, 41, 70, 186, 192, 193], "0396": 23, "nki_dataset": 23, "fetch_surf_nki_enhanc": [23, 133, 141, 153], "fsaverag5": 23, "func_left": [23, 239], "flat_left": [23, 238], "curv_left": [23, 238], "nki_enhanced_surfac": 23, "a00028185": 23, "a00028185_left_preprocessed_fwhm6": 23, "timeseri": [23, 26, 48, 50, 58, 89, 104, 132, 145, 153, 154, 158, 201, 226, 300, 324, 327, 328, 329, 330, 331, 332, 333, 419, 420], "pcc_region": 23, "g_cingul": 23, "post": [23, 51, 66, 94, 114, 126, 153, 179, 186, 220, 407], "dorsal": [23, 394, 396, 397], "pcc_label": 23, "seed_timeseri": 23, "scipi": [23, 44, 56, 62, 68, 76, 79, 94, 101, 103, 107, 108, 121, 123, 131, 135, 136, 138, 141, 146, 148, 150, 153, 167, 179, 220, 242, 245, 309, 319, 335, 336, 337, 339, 340, 390, 418], "stat_map": [23, 298, 388, 396, 397], "pearsonr": 23, "wall": [23, 167], "_stats_pi": 23, "4781": 23, "constantinputwarn": 23, "constant": [23, 31, 66, 111, 167, 179, 250, 251, 252, 253, 255, 256, 297, 343, 418, 436], "pcc_map": 23, "flat": [23, 41, 124, 153, 179, 238], "mesh": [23, 37, 69, 108, 111, 124, 133, 138, 141, 146, 150, 153, 169, 174, 238, 259, 260, 262, 263, 264, 265, 268, 388, 394, 395, 396, 397, 401, 403, 421, 422, 423, 438], "read": [23, 44, 66, 69, 77, 81, 101, 103, 105, 107, 114, 117, 144, 153, 166, 168, 174, 175, 222, 223, 224, 334], "yield": [23, 31, 39, 49, 77, 79, 84, 117, 141, 144, 148, 153, 159, 160, 161, 162, 165, 166, 169, 170, 229, 254, 258, 278, 282, 284, 289, 298, 319, 404], "75": [23, 33, 36, 40, 42, 43, 66, 72, 91, 102, 105, 111, 114, 197, 343], "nicer": 23, "bg_map_resc": 23, "unthreshold": [23, 81, 114, 117, 173, 197, 229, 231], "slightli": [23, 48, 49, 66, 84, 115, 135, 153, 161, 186, 188, 315, 316], "captur": [23, 51, 58, 66, 103, 155, 156, 157, 160, 186, 224], "half": [23, 49, 66, 94, 141, 153, 167, 173, 180, 250, 251, 252, 253, 257, 258, 282, 295, 297, 317, 327, 328, 329, 330, 331, 332, 333, 334, 394, 396, 397, 401, 403, 405, 407, 409], "after": [23, 28, 32, 34, 40, 45, 50, 56, 66, 67, 77, 94, 98, 100, 105, 113, 149, 153, 157, 158, 160, 165, 167, 168, 170, 173, 176, 179, 180, 190, 218, 250, 251, 252, 253, 257, 282, 290, 291, 295, 300, 304, 307, 312, 323, 324, 331, 332, 408, 411, 415, 416, 417], "466": [23, 27, 33], "370": [23, 33, 36, 42, 44, 102], "measur": [24, 29, 34, 48, 49, 51, 58, 66, 77, 99, 100, 105, 114, 134, 144, 153, 154, 155, 157, 158, 164, 165, 167, 170, 173, 175, 180, 226, 324, 387, 389, 404, 423, 436, 438], "toi": [24, 104], "drawn": [24, 66, 94, 282, 295, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 383, 386, 391, 392, 393, 400, 417, 423], "spread": [24, 98, 163, 334], "nest": [24, 29, 42, 144, 153, 163, 186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407, 423], "along": [24, 25, 66, 84, 86, 100, 124, 141, 146, 153, 159, 166, 168, 173, 179, 180, 255, 256, 282, 290, 315, 317, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 344, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 358, 359, 360, 362, 364, 366, 368, 370, 373, 374, 378, 383, 386, 387, 391, 392, 393, 407, 408, 419, 423, 436], "ball": [24, 122, 153, 165, 167, 173, 254, 423], "too": [24, 34, 38, 40, 42, 52, 54, 56, 71, 86, 117, 161, 167, 229, 231, 436], "almost": [24, 39, 49, 104, 167, 180], "ident": [24, 69, 80, 167, 300, 317, 409, 419], "most": [24, 33, 40, 42, 43, 49, 61, 75, 94, 100, 125, 135, 138, 153, 160, 161, 162, 163, 165, 167, 168, 170, 176, 179, 180, 282, 284, 289, 394, 396, 397, 403, 405, 407, 409, 436], "recommend": [24, 89, 92, 100, 103, 123, 139, 140, 141, 146, 148, 150, 153, 160, 165, 170, 175, 178, 180, 323, 407, 419, 423, 437], "n_z": 24, "n_t": 24, "mgrid": [24, 84], "triangul": 24, "tri": [24, 51, 161, 229, 378, 390, 404], "pi": [24, 84, 269, 273], "sin": [24, 84], "asarrai": [24, 41, 51, 103, 271, 276], "triangl": [24, 261, 423], "inner_mesh": [24, 423], "nested_sample_point": 24, "_sample_locations_between_surfac": 24, "ey": [24, 41, 44, 64, 65, 66, 69, 71, 80, 84, 89, 168, 175, 219], "line_sample_point": 24, "_line_sample_loc": 24, "segment_half_width": 24, "n_point": 24, "ball_sample_point": 24, "_ball_sample_loc": 24, "ball_radiu": 24, "view_init": 24, "67": [24, 33, 36, 42, 43, 44, 102, 121, 153, 197], "plot_trisurf": 24, "scatter": [24, 94, 150, 153, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 389], "sample_point": 24, "092": [24, 27, 41], "plot_surface_projection_strategi": [24, 27], "mean_haxbi": [25, 179], "0x7f651cffd100": 25, "0x7f651d6f3100": 25, "apply_mask": [25, 179, 329, 332], "masked_data": [25, 99, 111, 179], "timepoint": [25, 179], "150": [25, 33, 36, 41, 42, 44, 102, 105, 114, 179, 379], "And": [25, 41, 154, 169, 176, 179], "ylabel": [25, 30, 32, 42, 48, 49, 55, 57, 58, 65, 66, 179], "intens": [25, 50, 70, 81, 88, 94, 178, 179, 257, 299, 319, 323, 378, 379, 385, 391, 392, 393, 400, 407, 423, 436], "xlim": [25, 30, 179], "95": [25, 30, 33, 36, 42, 43, 91, 93, 102, 105, 147, 153, 179, 272, 274, 275], "212": [25, 27, 33, 41, 43, 72, 205], "1370": [25, 42, 102, 136, 153], "plot_visu": [25, 27], "releas": [26, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 198, 206, 219, 220, 226, 239, 300], "fetch_megatrawls_netmat": 26, "partial": [26, 48, 52, 99, 154, 158, 186, 191, 226, 324], "300": [26, 33, 36, 41, 42, 44, 55, 61, 70, 100, 102, 206, 214, 226], "eigen": [26, 226], "regress": [26, 30, 31, 39, 40, 44, 55, 56, 114, 116, 125, 128, 138, 144, 145, 146, 150, 153, 155, 160, 164, 165, 166, 168, 169, 170, 173, 194, 250, 251, 252, 253, 256, 258, 269, 274, 275, 282, 295, 323, 324, 327, 328, 329, 330, 331, 332, 333, 419, 438], "netmat": [26, 128, 153], "eigen_regress": [26, 226], "partial_correl": [26, 58, 191, 226], "correlation_matric": [26, 47, 51, 226], "util": [26, 43, 44, 48, 50, 87, 88, 102, 105, 106, 126, 133, 137, 144, 148, 153, 158, 168, 186, 187, 188, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 235, 236, 237, 238, 239, 240, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 320, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407, 431], "plot_matrix": [26, 31, 35, 50, 51, 52, 53, 54, 56, 57, 58, 111, 135, 136, 141, 153, 158], "572": [26, 27, 33], "plot_visualize_megatrawls_netmat": [26, 27], "44": [27, 30, 33, 36, 42, 43, 44, 72, 86, 91, 96, 102, 114, 121, 153, 297, 343], "427": [27, 33], "auto_examples_01_plot": 27, "412": [27, 33, 39, 45], "369": [27, 33], "1369": 27, "09": [27, 30, 32, 33, 44, 45, 73, 109, 114, 200, 213, 219, 224, 233, 244, 282, 295, 300, 417, 419], "986": 27, "07": [27, 30, 32, 33, 36, 44, 45, 49, 76, 91, 96, 114, 161, 206, 219, 244, 277, 406, 412], "mvpa": [28, 113, 173, 175, 438], "stimuli": [28, 30, 32, 33, 45, 66, 80, 98, 113, 154, 155, 157, 158, 160, 170, 175, 178, 180, 218, 228, 302, 319, 326, 329, 332, 371, 393, 398], "jimura": [28, 45, 113, 114, 227, 253, 256, 393], "mix": [28, 44, 45, 113, 164, 166, 194, 227, 253, 255, 256, 393, 438], "gambl": [28, 45, 113, 164, 166, 227, 253, 256, 393, 438], "morphometri": [28, 45, 74, 82, 113, 160, 171, 173, 174, 175, 219, 220, 233, 251, 256, 295, 298, 305, 316, 326, 332, 343, 371, 382, 393, 398, 415, 417, 438], "oasi": [28, 45, 74, 82, 113, 114, 166, 172, 174, 219, 220, 233, 251, 256, 295, 298, 305, 316, 326, 332, 343, 371, 382, 393, 398, 415, 417], "net": [28, 44, 45, 113, 166, 233, 250, 251, 255, 256, 393, 398], "prior": [28, 45, 48, 54, 66, 91, 111, 113, 114, 146, 153, 154, 166, 169, 187, 206, 233, 250, 251, 255, 256, 282, 295, 330, 331, 333, 379, 393, 398], "searchlight": [28, 44, 45, 113, 114, 132, 135, 138, 144, 153, 160, 164, 173, 174, 175, 218, 238, 305, 307, 310, 312, 313, 326, 332, 386, 393, 397, 398, 422, 423, 438], "svm": [28, 34, 35, 39, 42, 44, 45, 51, 99, 113, 116, 133, 153, 162, 164, 166, 173, 180, 218, 250, 307, 393, 398, 400, 438], "chair": [28, 30, 32, 33, 45, 113, 124, 153, 178, 218, 252, 307, 312, 390, 393, 398], "cross": [28, 32, 33, 36, 37, 40, 42, 44, 45, 51, 55, 97, 99, 109, 113, 114, 117, 124, 125, 144, 153, 154, 161, 164, 188, 218, 229, 233, 241, 250, 251, 252, 253, 254, 255, 256, 307, 317, 326, 332, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 378, 383, 386, 391, 392, 393, 398, 400, 436, 438], "simul": [28, 45, 46, 59, 63, 68, 100, 113, 156, 165, 188, 254, 342, 390, 398, 438], "encod": [28, 41, 45, 71, 75, 84, 113, 114, 161, 162, 180, 228, 252, 253, 302, 319, 326, 329, 332, 371, 393], "miyawaki": [28, 45, 113, 114, 180, 228, 302, 319, 326, 329, 332, 371, 393, 398], "2008": [28, 45, 113, 114, 180, 228, 297, 302, 319, 326, 329, 332, 343, 371, 393, 398], "effici": [29, 66, 114, 125, 153, 159, 161, 167, 168, 187, 190, 229, 252, 253], "featur": [29, 31, 32, 33, 34, 35, 42, 44, 49, 51, 66, 94, 99, 103, 104, 110, 111, 113, 114, 116, 136, 138, 139, 144, 148, 161, 162, 163, 164, 165, 166, 167, 168, 175, 176, 180, 185, 187, 188, 190, 250, 251, 252, 253, 254, 255, 256, 257, 270, 342, 404, 406, 407, 409, 419, 420, 434, 437, 438], "func_img": [29, 160], "restrict": [29, 30, 31, 89, 91, 94, 102, 138, 153, 160, 165, 180, 194, 249], "place": [29, 98, 135, 153, 229, 291, 319, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 379, 386, 423], "uniqu": [29, 30, 31, 32, 33, 35, 49, 51, 58, 65, 86, 94, 100, 102, 133, 153, 154, 162, 178, 196, 202, 203, 289, 327, 330, 407, 408, 409], "aim": [29, 34, 128, 153, 160, 168, 173, 255, 256], "act": [29, 34, 114, 134, 153, 173, 192, 193, 274, 275, 345], "sever": [29, 31, 33, 34, 49, 51, 61, 62, 64, 66, 75, 86, 94, 99, 103, 116, 124, 132, 138, 153, 154, 162, 164, 165, 167, 168, 170, 173, 176, 178, 179, 180, 188, 268, 282, 300, 311, 338, 340, 341, 381, 391, 405, 419, 438], "niftimask": [29, 32, 34, 35, 36, 40, 41, 42, 43, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 83, 91, 94, 96, 98, 99, 100, 102, 103, 104, 105, 106, 111, 113, 116, 124, 138, 141, 144, 145, 146, 147, 148, 153, 160, 163, 177, 215, 228, 250, 251, 252, 253, 255, 256, 257, 258, 279, 282, 295, 297, 307, 312, 323, 324, 326, 327, 328, 330, 331, 333, 337, 343, 383, 387, 392, 393, 398, 405, 415, 428, 438], "relev": [29, 34, 49, 56, 66, 69, 104, 117, 146, 150, 153, 160, 161, 167, 168, 176, 179, 180, 186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 297, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 343, 404, 405, 406, 407], "classic": [29, 34, 94, 161, 178], "univari": [29, 33, 34, 97, 109, 113, 114, 162, 164, 166, 218, 223, 224, 250, 251, 252, 253, 255, 256, 305, 307, 312, 326, 332, 343, 371, 385, 393, 398, 438], "vector": [29, 32, 33, 34, 35, 40, 44, 51, 64, 84, 98, 99, 102, 105, 106, 116, 134, 153, 160, 161, 163, 173, 186, 250, 251, 252, 253, 269, 272, 273, 274, 275, 278, 280, 389, 423], "screening_percentil": [29, 32, 33, 34, 42, 43, 111, 160, 250, 251, 252, 253, 255, 256], "percent": [29, 34, 41, 42, 43, 141, 153, 160, 290, 299, 319, 327, 328, 329, 330, 331, 332, 333, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 391, 399, 401, 403, 419], "smoothing_fwhm": [29, 33, 34, 35, 42, 49, 50, 52, 53, 54, 55, 56, 58, 62, 66, 67, 75, 76, 77, 79, 89, 91, 92, 98, 100, 101, 102, 104, 105, 106, 134, 153, 158, 160, 180, 250, 251, 252, 253, 257, 258, 282, 285, 295, 297, 327, 328, 329, 330, 331, 332, 333, 334, 405, 407, 409], "accuraci": [29, 30, 31, 32, 33, 35, 37, 41, 51, 98, 99, 145, 153, 164, 165, 173, 175, 250, 252, 254, 255, 438], "y_pred": [29, 31, 34, 41, 43, 160, 250, 251, 252, 253, 255, 256], "out": [29, 33, 34, 40, 44, 51, 53, 54, 55, 56, 57, 58, 64, 69, 100, 106, 116, 117, 138, 141, 145, 153, 155, 160, 161, 163, 165, 167, 168, 169, 173, 179, 219, 250, 251, 252, 253, 255, 256, 307, 315, 327, 328, 329, 330, 331, 332, 333, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 388, 405, 407, 408, 418, 419, 423, 436], "9444444444444444": 29, "weight_img": [29, 42, 98, 160, 180], "Or": [29, 117, 160, 205, 206, 436], "dynam": [29, 114, 160, 324], "viewer": [29, 138, 153, 160, 179, 400, 436], "haxby_face_vs_hous": 29, "173": [29, 33, 41, 45, 58, 72], "plot_haxby_anova_svm": [29, 45, 133, 153], "fetcher": [30, 32, 125, 128, 129, 130, 133, 138, 141, 142, 145, 147, 148, 149, 150, 153, 169, 194, 200, 201, 212, 213, 214, 215, 222, 223, 224, 233, 237], "get_data": [30, 36, 42, 49, 77, 79, 84, 94, 102, 105, 106, 107, 133, 141, 153, 178, 310], "abl": [30, 32, 168, 176, 320, 394, 396, 397, 436], "resting_st": 30, "task_mask": [30, 32], "logical_not": [30, 36, 77, 105], "find": [30, 32, 44, 50, 56, 71, 79, 100, 121, 153, 158, 159, 160, 162, 164, 167, 168, 170, 173, 176, 180, 190, 198, 302, 337, 338, 340, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 377, 378, 400, 404, 406, 412, 436, 437, 438], "remain": [30, 32, 36, 40, 42, 44, 56, 89, 100, 102, 105, 144, 151, 153, 165, 168, 423], "categori": [30, 32, 33, 98, 102, 116, 160, 162, 168, 178, 218], "tag": [30, 32, 69, 108, 117, 168, 176, 320, 321], "classification_target": [30, 32], "svc_l2": [30, 161, 250, 252], "svc_l1": [30, 32, 161, 250, 252], "logistic_l1": [30, 161, 250, 252], "logistic_l2": [30, 161, 250, 252], "ridge_classifi": [30, 161, 250, 252], "predict": [30, 31, 33, 39, 40, 44, 51, 58, 60, 73, 97, 109, 114, 116, 145, 146, 148, 153, 162, 163, 165, 166, 168, 170, 171, 173, 174, 175, 186, 204, 212, 215, 226, 236, 250, 251, 252, 253, 254, 255, 256, 274, 275, 282, 295, 300, 301, 312, 317, 326, 331, 333, 337, 371, 393, 416, 437, 438], "score": [30, 32, 37, 41, 42, 44, 48, 51, 80, 98, 99, 102, 103, 105, 106, 107, 111, 144, 145, 153, 160, 161, 163, 164, 166, 175, 188, 233, 250, 251, 252, 253, 254, 255, 256, 257, 258, 270, 295, 299, 319, 323, 327, 328, 329, 330, 331, 332, 333, 343, 379, 405, 407, 419, 438], "classifiers_data": 30, "classifier_nam": 30, "roc_auc": [30, 32, 98, 163, 250, 252], "t0": [30, 41], "2f": [30, 32, 41, 42, 43, 44, 49, 57, 89], "std": [30, 32, 44, 51, 89, 104, 327, 328, 329, 330, 331, 332, 333, 419], "auc": [30, 32, 160, 173], "______________________________________________________________________": 30, "scissor": [30, 32, 33, 178], "37": [30, 33, 36, 41, 42, 43, 44, 81, 91, 94, 102, 114, 121, 153, 323, 324, 420], "cat": [30, 32, 33, 98, 116, 160, 174, 178], "shoe": [30, 32, 33, 34, 178], "scrambledpix": [30, 32, 33, 94, 178], "98": [30, 32, 33, 36, 42, 43, 44, 87, 91, 93, 102, 114, 147, 153, 297, 343], "bottl": [30, 32, 33, 34, 178], "305": [30, 33, 41], "08": [30, 32, 33, 36, 49, 114, 226, 304, 323, 379], "97": [30, 33, 36, 42, 43, 44, 88, 102], "82": [30, 32, 33, 36, 42, 43, 89, 102, 105], "87": [30, 32, 33, 36, 42, 43, 44, 72, 91, 102, 114], "94": [30, 33, 36, 42, 43, 44, 77, 91, 102, 105, 106, 223, 224], "89": [30, 32, 33, 36, 42, 43, 44, 72, 77, 102, 105], "92": [30, 32, 33, 36, 42, 43, 44, 77, 102, 114, 343], "47": [30, 33, 36, 38, 42, 43, 45, 48, 91, 98, 102, 114, 194, 199, 200, 219, 244], "rudimentari": 30, "diagram": [30, 170], "all_categori": 30, "hstack": [30, 64, 67, 77, 80, 272, 274, 275], "tick_posit": [30, 32], "ytick": [30, 44, 48, 51, 99], "height": [30, 33, 51, 99, 141, 153, 282, 295, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 379, 380, 383, 385, 386, 389, 390, 391, 392, 393, 399, 401, 403, 415, 417], "score_mean": [30, 32], "barh": [30, 48, 51, 99], "xmin": [30, 378, 379, 380, 383, 385, 386, 389, 391, 392, 393], "ncol": [30, 63, 79, 100, 101, 105], "bbox_to_anchor": 30, "tight_layout": [30, 31, 32, 48, 51, 55, 58, 70, 78, 80, 99], "penalti": [30, 34, 39, 43, 161, 166, 173, 250, 251, 252, 255, 256], "logist": [30, 31, 114, 161, 162, 166, 250, 252, 255, 256], "main": [30, 56, 66, 67, 68, 71, 94, 119, 150, 153, 160, 165, 168, 169, 173, 176, 178, 180, 196, 282, 284, 289, 320, 338, 340, 345], "ell_1": 30, "ell_2": 30, "spars": [30, 39, 40, 46, 48, 49, 57, 58, 59, 113, 114, 155, 156, 158, 159, 161, 166, 173, 174, 181, 187, 188, 190, 204, 215, 250, 251, 252, 253, 255, 256, 257, 258, 326, 331, 376, 380, 390, 394, 396, 398, 399, 407, 438], "intra": [30, 32], "logical_or": 30, "assert": [30, 111], "fmri_niimgs_condit": 30, "mean_epi_img": 30, "ab": [30, 43, 44, 53, 58, 81, 84, 102, 103, 104, 114, 167, 187, 190, 199, 209, 238, 300, 343, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 419], "1e": [30, 39, 40, 49, 111, 187, 188, 190, 233, 255, 256, 270, 304, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 393, 396, 400, 406, 412], "880": [30, 42, 45, 102], "1337": 30, "plot_haxby_different_estim": [30, 45, 141, 153], "implicit": [31, 39, 144, 153, 162, 173, 252, 253], "aggreg": [31, 39, 58, 144, 153, 162, 173, 197, 252, 253], "cost": [31, 39, 53, 79, 144, 153, 157, 161, 162, 166, 167, 168, 173, 180, 252, 253], "data_fil": 31, "behavior": [31, 34, 35, 75, 77, 98, 114, 116, 124, 125, 128, 135, 145, 150, 153, 160, 161, 163, 164, 168, 173, 177, 180, 186, 198, 199, 207, 226, 326, 327, 328, 329, 330, 331, 332, 333, 379, 407, 438], "condition_mask_train": 31, "condition_mask_test": 31, "x_train": [31, 41, 44], "x_test": [31, 41, 44, 250, 251, 252, 253, 254], "y_train": [31, 34, 41, 44], "y_test": [31, 34, 41, 44, 250, 251, 252, 253, 254], "background_img": [31, 43], "fremclassifi": [31, 144, 145, 153, 161, 162, 250, 253], "_util": [31, 32, 39, 47, 49, 52, 54, 57, 62, 77, 79, 111, 124, 128, 147, 150, 153, 167, 168], "param_valid": [31, 32, 39, 111, 133, 153], "214": [31, 32, 33, 39, 41], "bigger": [31, 39, 43], "feature_select": [31, 35, 36, 41, 42, 44, 94, 98, 102, 105, 106, 111, 163], "_univariate_select": [31, 111], "112": [31, 33, 41, 43, 93, 111, 114, 323, 324], "15809": 31, "113": [31, 33, 41, 43, 49, 59, 111], "runtimewarn": [31, 58, 77, 79, 111], "invalid": [31, 58, 111, 123, 128, 153, 331, 411], "encount": [31, 58, 77, 79, 111, 394, 396, 397], "divid": [31, 55, 76, 77, 79, 111, 131, 153, 161, 170, 173, 192, 405], "7778": 31, "metric": [31, 35, 40, 41, 51, 79, 141, 153, 160, 161, 165, 173, 250, 251, 252, 253], "confusion_matrix": [31, 35, 161], "hot_r": [31, 35], "set_ylabel": [31, 43, 70, 75, 78], "set_xlabel": [31, 43, 70], "adjust": [31, 66, 68, 123, 136, 153, 324, 345, 356, 359], "get_figur": 31, "coef": [31, 44, 98, 282, 291], "50": [31, 33, 36, 42, 43, 44, 49, 52, 57, 58, 59, 62, 66, 93, 98, 102, 105, 114, 117, 165, 167, 180, 188, 190, 226, 227, 252, 253, 270, 284, 286, 287, 288, 289, 292, 293, 294, 302, 323, 324, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 405, 407, 409, 436], "improv": [31, 75, 114, 123, 124, 125, 131, 134, 137, 138, 141, 148, 149, 150, 153, 160, 161, 162, 166, 167, 168, 170, 173, 178, 180, 214, 219, 300, 327, 330, 404, 419], "mechan": [31, 160, 186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "reason": [31, 43, 48, 66, 92, 117, 161, 163, 165, 167, 168, 170, 176, 423], "even": [31, 42, 49, 50, 58, 65, 79, 100, 117, 125, 141, 146, 153, 167, 168, 175, 229, 231, 418], "heavier": 31, "l2": [31, 34, 161, 162, 250, 252, 404, 405, 406], "ridg": [31, 40, 44, 111, 161, 162, 166, 250, 251, 252, 253], "fremregressor": [31, 39, 144, 145, 153, 161, 162, 251, 252], "solv": [31, 39, 167, 168, 175, 176, 258, 343], "32": [31, 33, 34, 36, 40, 42, 43, 44, 45, 51, 53, 58, 59, 66, 73, 84, 87, 91, 96, 102, 180, 286, 287, 288, 292, 293, 294, 436], "533": [31, 33, 45, 75, 82], "2021": [31, 145, 146, 147, 153, 195, 196, 199, 204, 205, 206, 209, 210, 233, 236, 237, 239], "plot_haxby_frem": [31, 45], "older": [32, 35, 36, 40, 41, 42, 47, 48, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 114, 116, 133, 134, 135, 136, 153, 168, 178, 233, 302], "upgrad": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 116, 123, 133, 135, 141, 146, 148, 153], "masker": [32, 33, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 110, 112, 113, 116, 122, 123, 124, 125, 126, 141, 144, 145, 146, 147, 148, 150, 153, 155, 157, 160, 163, 168, 169, 177, 179, 186, 250, 251, 252, 253, 255, 256, 257, 258, 262, 263, 264, 265, 266, 267, 282, 295, 297, 323, 324, 343, 387, 390, 394, 398, 405, 407, 410, 411, 413, 414, 438], "input_data": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 116, 148, 153], "That": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 116, 145, 153, 173, 269, 273, 282, 284, 289], "occurr": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 116, 165], "practic": [32, 51, 69, 99, 154, 157, 161, 163, 165, 167, 168, 169, 170, 172, 175, 178, 179], "unmask": [32, 33, 44, 115, 124, 133, 136, 153, 177, 179, 257, 258, 326, 329, 332, 438], "task_data": 32, "mask_nam": 32, "mask_scor": 32, "mask_chance_scor": 32, "758": 32, "screen": [32, 114, 166, 250, 251, 252, 253, 255, 256], "rais": [32, 63, 78, 94, 123, 124, 125, 128, 135, 137, 138, 141, 148, 150, 153, 178, 186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 285, 289, 295, 297, 298, 301, 310, 314, 315, 326, 327, 328, 329, 330, 331, 332, 333, 339, 404, 405, 406, 407, 437], "clustering_percentil": [32, 252, 253], "76": [32, 33, 42, 43, 44, 61, 66, 72, 102, 200, 208], "73": [32, 33, 36, 42, 43, 91, 102], "71": [32, 33, 36, 42, 43, 44, 72, 102], "68": [32, 33, 42, 43, 58, 102, 105, 180, 436], "83": [32, 33, 36, 42, 43, 44, 72, 102, 114, 118, 153, 297, 343], "86": [32, 33, 36, 42, 43, 102], "xtick": [32, 34, 35, 44, 94], "rgb": [32, 402], "score_ch": 32, "edgecolor": [32, 40, 125, 153, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 380, 383, 385, 386, 389, 391, 392, 393], "ylim": 32, "768": [32, 45], "1345": [32, 45], "plot_haxby_full_analysi": [32, 45, 141, 153], "record": [33, 40, 66, 160, 170, 173], "unique_sess": 33, "datafram": [33, 62, 63, 64, 66, 67, 72, 75, 76, 77, 78, 79, 80, 81, 100, 101, 117, 125, 144, 148, 149, 153, 186, 194, 200, 201, 212, 213, 214, 222, 223, 224, 233, 257, 258, 282, 283, 285, 289, 295, 296, 297, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 381, 382, 384, 404, 405, 406, 407, 416, 419], "conditions_sess": 33, "frame": [33, 63, 69, 89, 180, 284, 307, 323, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 415], "n_scan": [33, 61, 63, 69, 71, 108, 170, 284], "frame_tim": [33, 63, 68, 69, 71, 108, 169, 283, 284, 289], "events_": 33, "insert": [33, 205, 206, 282, 295, 399, 400, 401, 402, 403, 415, 417, 436], "togeth": [33, 48, 68, 69, 70, 80, 154, 162, 163, 170, 173, 212, 214, 249, 252, 253, 257, 285, 300, 407], "conditions_label": 33, "008": [33, 41], "nilearn_cach": [33, 35, 36, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 92, 98, 99, 100, 102, 103, 104, 105, 106, 158], "grab": [33, 47, 48, 49, 65, 100, 117], "fmri_sess": 33, "condition_": 33, "________________________________________________________________________________": [33, 43, 48, 49, 52, 53, 56, 58], "nifti_mask": [33, 35, 36, 42, 92, 102, 105, 106, 116, 168], "_filter_and_mask": 33, "0x7f651cd4f6d0": 33, "0x7f651dc2a790": 33, "clean_kwarg": [33, 49, 52, 53, 56, 58], "detrend": [33, 40, 41, 49, 51, 52, 53, 54, 55, 56, 58, 61, 89, 91, 92, 94, 99, 100, 116, 121, 138, 146, 148, 153, 179, 180, 257, 258, 300, 306, 327, 328, 329, 330, 331, 332, 333, 379, 405, 407, 419, 420], "high_variance_confound": [33, 49, 52, 53, 54, 56, 58, 66, 89, 91, 92, 128, 145, 153, 180, 327, 328, 329, 330, 331, 332, 333], "low_pass": [33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 89, 91, 92, 99, 100, 138, 153, 180, 250, 251, 252, 253, 255, 256, 257, 258, 300, 327, 328, 329, 330, 331, 332, 333, 405, 407, 418, 419], "standardize_confound": [33, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 89, 91, 92, 99, 148, 153, 158, 180, 257, 327, 328, 329, 330, 331, 332, 333, 407, 419], "target_affin": [33, 49, 52, 53, 56, 84, 89, 92, 179, 180, 250, 251, 252, 253, 255, 256, 257, 258, 282, 285, 295, 312, 315, 329, 332, 335, 337, 338, 339, 340, 405], "target_shap": [33, 49, 52, 53, 56, 84, 89, 92, 179, 180, 250, 251, 252, 253, 255, 256, 257, 258, 282, 285, 295, 312, 315, 329, 332, 335, 337, 338, 340, 405], "memory_level": [33, 35, 36, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 89, 91, 92, 98, 99, 100, 102, 103, 104, 105, 106, 158, 180, 187, 250, 251, 252, 253, 255, 256, 257, 258, 282, 285, 295, 301, 327, 328, 329, 330, 331, 332, 333, 405, 406, 407], "joblib": [33, 43, 48, 49, 52, 53, 54, 56, 58, 92, 123, 141, 144, 148, 153, 157, 187, 250, 251, 252, 253, 255, 256, 257, 258, 282, 295, 301, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 405, 406, 407], "verbos": [33, 35, 36, 42, 43, 44, 48, 49, 52, 53, 54, 55, 56, 57, 58, 61, 89, 91, 92, 98, 99, 100, 102, 105, 138, 153, 180, 187, 188, 190, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 250, 251, 252, 253, 254, 255, 256, 257, 258, 277, 282, 285, 291, 295, 297, 301, 312, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 343, 404, 405, 406, 407, 412], "confound": [33, 47, 49, 50, 51, 52, 53, 54, 55, 58, 62, 77, 78, 99, 100, 101, 105, 108, 114, 116, 121, 124, 125, 128, 138, 144, 145, 146, 148, 150, 153, 155, 158, 159, 160, 167, 173, 177, 179, 186, 195, 215, 257, 258, 282, 295, 296, 297, 300, 306, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 343, 405, 407, 419, 420, 427, 438], "sample_mask": [33, 49, 52, 53, 56, 58, 66, 123, 125, 146, 148, 150, 153, 282, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 407, 419], "__________________________________________________filter_and_mask": 33, "0min": [33, 48, 49, 52, 53, 54, 56, 58], "run_glm": [33, 69, 108, 146, 150, 153], "114769": 33, "149296": 33, "367151": 33, "779998": 33, "bin": [33, 49, 168, 282, 291, 437], "random_st": [33, 36, 42, 43, 44, 48, 49, 50, 51, 92, 99, 103, 104, 150, 153, 158, 250, 252, 257, 258, 282, 291, 297, 343, 404, 405], "__________________________________________________________run_glm": 33, "44475": 33, "379275": 33, "___________________________________________________________unmask": 33, "013524": 33, "844135": 33, "217486": 33, "430348": 33, "106474": 33, "182434": 33, "747494": 33, "660679": 33, "080159": 33, "32614": 33, "253894": 33, "452682": 33, "240914": 33, "244136": 33, "0x7f651d8d9580": 33, "0x7f650649b880": 33, "660587": 33, "536042": 33, "254408": 33, "842804": 33, "871458": 33, "990755": 33, "627194": 33, "290147": 33, "153013": 33, "320123": 33, "15748": 33, "082416": 33, "997775": 33, "754066": 33, "109412": 33, "330079": 33, "030863": 33, "731439": 33, "559734": 33, "720924": 33, "0x7f651db67c10": 33, "0x7f651dc2a1c0": 33, "205584": 33, "587189": 33, "836576": 33, "676956": 33, "695564": 33, "455092": 33, "457214": 33, "537178": 33, "803925": 33, "570463": 33, "614932": 33, "232909": 33, "527175": 33, "062723": 33, "126756": 33, "274819": 33, "635166": 33, "395548": 33, "250365": 33, "364311": 33, "0x7f651ba0f4c0": 33, "0x7f650649ba00": 33, "026206": 33, "974948": 33, "616334": 33, "104535": 33, "503142": 33, "639351": 33, "271132": 33, "047089": 33, "318104": 33, "724813": 33, "073279": 33, "316956": 33, "380183": 33, "690685": 33, "631912": 33, "753286": 33, "155784": 33, "065658": 33, "186135": 33, "69267": 33, "0x7f651d605f70": 33, "0x7f6506485250": 33, "033577": 33, "45955": 33, "57195": 33, "994713": 33, "158342": 33, "068131": 33, "396497": 33, "424937": 33, "091867": 33, "463109": 33, "054041": 33, "122921": 33, "025223": 33, "562991": 33, "001653": 33, "968729": 33, "274665": 33, "667": 33, "564329": 33, "496068": 33, "0x7f651c3beb50": 33, "150482": 33, "81308": 33, "204891": 33, "417917": 33, "987059": 33, "41717": 33, "24774": 33, "674399": 33, "731234": 33, "341998": 33, "714869": 33, "182988": 33, "222674": 33, "480354": 33, "366899": 33, "091153": 33, "2708": 33, "247146": 33, "251249": 33, "413063": 33, "0x7f651c4fbd60": 33, "0x7f651dc2a520": 33, "129": [33, 41, 67, 121, 153], "51173": 33, "279282": 33, "911755": 33, "839058": 33, "290412": 33, "609221": 33, "090297": 33, "822602": 33, "747918": 33, "108861": 33, "095788": 33, "376995": 33, "807425": 33, "826947": 33, "017351": 33, "622242": 33, "625042": 33, "231224": 33, "056424": 33, "672737": 33, "0x7f65064859d0": 33, "0x7f6506485a90": 33, "915996": 33, "07737": 33, "981215": 33, "372383": 33, "200737": 33, "008536": 33, "066075": 33, "168487": 33, "636238": 33, "145684": 33, "932773": 33, "580823": 33, "455655": 33, "685537": 33, "715791": 33, "245273": 33, "099707": 33, "79538": 33, "913842": 33, "519925": 33, "629218": 33, "0x7f6506485220": 33, "0x7f6506485190": 33, "292987": 33, "392956": 33, "935719": 33, "602484": 33, "425611": 33, "348025": 33, "31867": 33, "408223": 33, "534932": 33, "150519": 33, "149007": 33, "640215": 33, "640699": 33, "50369": 33, "246384": 33, "346316": 33, "162243": 33, "519251": 33, "203695": 33, "335337": 33, "0x7f651c4fbb50": 33, "223948": 33, "959582": 33, "677519": 33, "024363": 33, "034515": 33, "612397": 33, "62798": 33, "160445": 33, "506632": 33, "459388": 33, "261016": 33, "747236": 33, "231796": 33, "098904": 33, "148582": 33, "999934": 33, "548262": 33, "09934": 33, "222824": 33, "318977": 33, "0x7f651c5fcd90": 33, "66533": 33, "299562": 33, "647343": 33, "331865": 33, "175763": 33, "429485": 33, "146358": 33, "947626": 33, "806852": 33, "720554": 33, "008926": 33, "4544": 33, "279543": 33, "828183": 33, "463642": 33, "26599": 33, "058735": 33, "191442": 33, "390268": 33, "112207": 33, "0x7f651c5c97c0": 33, "0x7f65064853a0": 33, "095605": 33, "449202": 33, "59974": 33, "179998": 33, "340751": 33, "056108": 33, "043261": 33, "144442": 33, "517954": 33, "611394": 33, "797134e": 33, "317655e": 33, "398581": 33, "488427": 33, "714396": 33, "869941": 33, "924894": 33, "723724": 33, "145297": 33, "821272": 33, "summari": [33, 62, 64, 91, 146, 168, 270], "make_glm_report": [33, 61, 62, 64, 75, 123, 145, 148, 153], "mean_img_": [33, 64, 67], "drift_ord": [33, 63, 66, 169, 282, 285, 289], "fir_delai": [33, 63, 65, 282, 284, 285, 289], "glover": [33, 63, 66, 68, 69, 108, 169, 282, 284, 285, 286, 287, 288, 289], "scaling_axi": [33, 100, 148, 153, 282], "signal_sc": [33, 70, 100, 148, 153, 282, 285], "slice_time_ref": [33, 61, 66, 69, 71, 124, 125, 153, 282, 285], "subject_label": [33, 62, 78, 101, 282, 295, 296, 297], "\u03b1": 33, "minimum": [33, 77, 79, 89, 121, 123, 126, 131, 133, 134, 135, 138, 141, 144, 146, 148, 153, 158, 282, 295, 299, 319, 327, 330, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 374, 380, 400, 407, 408, 409, 410, 416, 417], "distanc": [33, 255, 256, 282, 295, 374, 416, 417, 423], "46": [33, 36, 42, 43, 44, 58, 62, 91, 93, 102, 107, 118, 153, 180, 197, 199, 436], "88": [33, 36, 42, 43, 81, 89, 91, 102, 114, 343], "147": [33, 41, 70, 73], "62": [33, 36, 42, 43, 44, 62, 72, 100, 102, 105, 107, 114, 135, 153, 203], "393": 33, "196": [33, 41], "43": [33, 36, 42, 43, 44, 91, 101, 102, 109, 114, 126, 153, 199, 343], "2264": 33, "31": [33, 36, 40, 42, 43, 44, 91, 102, 109, 114, 166, 207], "77": [33, 36, 42, 43, 66, 72, 102], "28": [33, 36, 42, 43, 44, 45, 62, 89, 91, 102, 103, 114, 118, 138, 153, 197, 206], "246": [33, 41, 72], "541": 33, "59": [33, 36, 42, 43, 44, 49, 52, 72, 91, 100, 102, 109, 114, 118, 153, 197, 323, 324], "344": [33, 41], "61": [33, 36, 42, 43, 44, 68, 77, 79, 102], "492": 33, "12a": 33, "58": [33, 36, 42, 43, 58, 59, 91, 102, 138, 153], "1132": 33, "639": 33, "984": [33, 102, 109], "16a": 33, "49": [33, 36, 42, 43, 45, 67, 86, 91, 100, 101, 102, 108, 114, 138, 153], "787": 33, "23a": 33, "65": [33, 36, 42, 43, 44, 91, 102, 105, 126, 153], "27a": 33, "295": [33, 41, 96, 114, 209], "590": [33, 36, 42, 102], "31a": 33, "31b": 33, "41": [33, 36, 42, 43, 44, 49, 62, 72, 73, 91, 102, 105, 114, 406, 412], "41a": 33, "2214": [33, 141, 153], "42a": 33, "42b": 33, "442": 33, "43a": 33, "52": [33, 36, 39, 42, 43, 44, 45, 55, 58, 91, 102, 180, 198, 436], "56": [33, 36, 37, 42, 43, 44, 72, 102, 114, 161, 199], "58a": 33, "64a": 33, "67a": 33, "72": [33, 36, 42, 43, 44, 56, 58, 62, 91, 93, 102, 114, 147, 153, 166, 213], "80": [33, 36, 42, 43, 44, 47, 54, 65, 66, 72, 84, 102, 103, 105, 114, 168, 204, 299, 319, 354, 359, 361, 365, 371, 377, 423], "79": [33, 36, 42, 43, 66, 72, 91, 102], "78": [33, 36, 42, 43, 44, 49, 52, 53, 66, 72, 93, 102, 114, 165], "85": [33, 36, 42, 43, 44, 47, 91, 102, 105, 126, 153, 337, 338, 340], "96a": 33, "101": [33, 40, 41, 43, 114, 323, 324, 420], "103": [33, 41, 43, 114, 165, 254], "104": [33, 41, 43, 105, 201], "105": [33, 41, 43], "106": [33, 41, 43, 114, 206, 207, 210, 226], "107": [33, 41, 43], "108": [33, 41, 43, 72], "110": [33, 36, 41, 42, 43, 44, 86, 102, 105, 114, 209, 216, 234], "111": [33, 41, 43, 53, 61, 91, 105], "114": [33, 41, 43, 44, 85, 96, 138, 153], "115": [33, 41, 43, 138, 153], "116": [33, 41, 43, 72, 196], "117": [33, 41, 43, 93, 147, 153, 196], "118": [33, 41, 43], "119": [33, 41, 43, 56, 72, 105, 126, 153], "120": [33, 36, 41, 42, 43, 44, 84, 99, 102, 105, 114, 209], "121": [33, 41, 66], "122": [33, 41, 66, 72, 92, 118, 153, 198, 215], "123": [33, 41, 201], "124": [33, 40, 41, 79, 82], "124a": 33, "125": [33, 40, 41, 72, 100, 114], "130": [33, 36, 41, 42, 44, 72, 73, 102, 105], "131": [33, 41, 72, 114, 209], "132": [33, 41, 49, 52], "133": [33, 41], "134": [33, 41, 93, 147, 153], "135": [33, 41, 72], "136": [33, 41, 73], "137": [33, 41, 72], "138": [33, 41], "139": [33, 41, 45], "140": [33, 36, 40, 41, 42, 44, 72, 102, 105], "141": [33, 41, 72, 87, 96, 122, 153, 209], "142": [33, 41, 95, 96, 105, 126, 153], "143": [33, 41, 72], "144": [33, 41, 114, 224], "144a": 33, "145": [33, 41], "146": [33, 41, 72, 129, 153], "146a": 33, "148": [33, 41], "149": [33, 41, 72], "151": [33, 41, 107], "153": [33, 41, 72], "154": [33, 41, 56, 114, 323, 324, 379], "155": [33, 41, 215], "156": [33, 41, 72], "157": [33, 41], "158": [33, 41, 44, 114, 379], "159": [33, 41, 72, 105, 109], "160": [33, 36, 41, 42, 44, 58, 84, 102, 105, 114, 162, 212, 252, 253, 423], "161": [33, 41], "162": [33, 41, 72], "163": [33, 41, 56], "164": [33, 41, 56, 72], "165": [33, 41, 56], "166": [33, 41, 56], "167": [33, 41, 56, 72, 82, 157], "169": [33, 41], "170": [33, 36, 41, 42, 44, 72, 102, 105, 109], "171": [33, 41, 56, 103, 114, 324], "172": [33, 41, 114, 162, 209, 252, 253], "174": [33, 41, 56, 114, 323, 324], "175": [33, 41], "176": [33, 41, 61, 72], "177": [33, 41], "178": [33, 41], "179": [33, 41], "180": [33, 36, 41, 42, 44, 84, 102, 105, 114, 138, 153, 162, 252, 253, 394, 396, 397], "181": [33, 41, 76, 114, 277], "182": [33, 41, 202, 203, 206], "183": [33, 41], "184": [33, 41], "185": [33, 41], "186": [33, 41], "187": [33, 41, 56, 114, 323, 324], "188": [33, 41, 72, 100, 101, 109], "189": [33, 41, 114, 300, 307, 419], "190": [33, 36, 41, 42, 44, 47, 102, 105], "191": [33, 41, 72], "192": [33, 41, 84], "193": [33, 41, 205], "195": [33, 41, 72], "198": [33, 41, 43, 72, 95, 104, 205], "199": [33, 41], "200": [33, 36, 41, 42, 43, 44, 94, 102, 103, 105, 114, 186, 198, 206, 226, 255, 256], "201": [33, 41, 72], "202": [33, 41], "203": [33, 41, 51, 59, 72], "204": [33, 41, 56, 59], "738": 33, "204a": 33, "205": [33, 41], "206": [33, 41, 114, 214], "207": [33, 41, 72], "208": [33, 41, 114, 186], "209": [33, 41, 69, 73, 95], "211": [33, 41, 43], "213": [33, 41], "215": [33, 41, 72], "217": [33, 41, 196], "218": [33, 41, 72, 202, 203, 206], "219": [33, 41], "220": [33, 36, 41, 42, 44, 102], "221": [33, 41, 72, 114, 201], "222": [33, 41], "223": [33, 41, 99, 109, 114, 219], "224": [33, 41, 72], "225": [33, 41], "226": [33, 41], "227": [33, 41, 72], "228": [33, 41], "229": [33, 41, 205], "230": [33, 36, 41, 42, 44, 72, 102], "231": [33, 41], "232": [33, 41], "233": [33, 41, 307], "234": [33, 41, 72], "235": [33, 41], "236": [33, 41, 72], "237": [33, 41, 61, 73], "238": [33, 41, 114, 209], "239": [33, 41], "240": [33, 36, 41, 42, 44, 47, 49, 52, 54, 102], "241": [33, 41], "242": [33, 41, 114, 209], "243": [33, 41], "244": [33, 41], "245": [33, 41], "247": [33, 41], "248": [33, 41, 72], "249": [33, 41], "250": [33, 36, 41, 42, 44, 66, 102, 114], "251": [33, 41, 72], "253": [33, 41], "254": [33, 41, 72, 118, 153], "255": [33, 41, 73, 147, 153], "258": [33, 41], "259": [33, 41], "260": [33, 36, 41, 42, 44, 72, 102], "261": [33, 41, 114, 165], "262": [33, 41, 114], "263": [33, 41, 205], "264": [33, 41, 58, 72, 213], "265": [33, 41], "266": [33, 41, 72], "267": [33, 41, 57, 114, 323, 324], "268": [33, 41], "269": [33, 41, 72, 114, 165], "270": [33, 36, 41, 42, 44, 102, 394, 396, 397], "271": [33, 41], "272": [33, 41, 114, 238], "274": [33, 41], "275": [33, 41, 72], "277": [33, 41, 114, 323, 324], "278": [33, 41, 72], "279": [33, 41, 66, 73], "280": [33, 36, 41, 42, 44, 102], "281": [33, 41], "282": [33, 41, 94], "283": [33, 41], "284": [33, 41, 66, 72, 114, 238], "285": [33, 41], "286": [33, 41], "287": [33, 41], "288": [33, 41, 48, 66, 72, 114, 159, 257], "289": [33, 41, 114, 196], "290": [33, 36, 41, 42, 44, 102], "292": [33, 41, 114, 343], "296": [33, 41, 66, 72, 89], "297": [33, 39, 41], "297a": 33, "298": [33, 41, 114, 238, 343], "299": [33, 41, 48, 114, 159, 257], "301": [33, 41], "302": [33, 41, 118, 153], "303": [33, 41], "304": [33, 41, 114, 166], "306": [33, 41], "307": [33, 41], "308": [33, 41], "309": [33, 41, 114, 224], "311": [33, 41], "312": [33, 41], "313": [33, 41, 94, 114, 219, 244], "314": [33, 41, 114, 224], "315": [33, 41, 91], "316": [33, 41], "317": [33, 41], "319": [33, 41, 94], "320": [33, 36, 41, 42, 44, 102, 114, 323], "321": [33, 41, 114, 166], "322": [33, 41], "323": [33, 41], "324": [33, 41], "325": [33, 41, 198], "326": [33, 41], "327": [33, 41, 114, 219, 244], "328": [33, 41, 44], "329": [33, 41, 58, 114, 212], "330": [33, 36, 41, 42, 44, 102], "331": [33, 41], "332": [33, 41], "333": [33, 41], "334": [33, 41], "337": [33, 41], "338": [33, 41], "339": [33, 41], "341": [33, 41, 59, 114, 323], "342": [33, 41, 54], "343": [33, 41], "345": [33, 41, 44], "346": [33, 41], "347": [33, 41], "348": [33, 41, 56, 91], "349": [33, 41], "350": [33, 36, 41, 42, 44, 102], "351": [33, 41], "352": [33, 41], "353": [33, 41], "354": [33, 41], "355": [33, 41], "356": [33, 41], "357": [33, 41], "358": [33, 41], "359": [33, 41], "360": [33, 36, 41, 42, 44, 62, 64, 67, 102], "361": [33, 41], "362": 33, "363": 33, "364": 33, "365": 33, "366": 33, "367": [33, 64, 73], "368": 33, "371": [33, 64, 67], "373": [33, 55, 59], "373a": 33, "374": 33, "375": 33, "376": 33, "377": 33, "379": 33, "380": [33, 36, 42, 44, 102], "381": [33, 36, 114, 343], "382": 33, "383": [33, 64, 71], "384": 33, "385": 33, "386": 33, "387": 33, "388": 33, "389": 33, "390": [33, 36, 42, 44, 102], "391": 33, "392": 33, "394": 33, "395": 33, "396": 33, "397": [33, 114, 343], "398": 33, "399": 33, "400": [33, 36, 42, 44, 102, 114, 161, 206], "401": 33, "402": 33, "403": 33, "405": [33, 114, 204], "406": [33, 58, 59], "407": 33, "408": 33, "409": 33, "410": [33, 36, 42, 44, 102, 114, 161], "411": 33, "414": 33, "415": [33, 56, 114, 204, 324], "416": [33, 45, 84, 96, 233], "417": [33, 40, 41], "418": 33, "419": 33, "421": 33, "422": 33, "423": 33, "425": 33, "426": 33, "428": 33, "429": 33, "430": [33, 36, 42, 44, 102], "431": [33, 43, 45], "432": [33, 44, 62], "433": 33, "434": 33, "435": 33, "436": [33, 56, 68, 73, 114, 324], "437": 33, "438": 33, "439": 33, "440": [33, 36, 42, 102], "441": [33, 78, 82], "443": 33, "445": 33, "446": 33, "447": 33, "448": 33, "449": 33, "450": [33, 36, 42, 89, 96, 102], "452": 33, "453": 33, "454": 33, "455": 33, "456": [33, 108, 109], "457": 33, "458": [33, 56, 59], "459": 33, "460": [33, 36, 42, 102], "461": [33, 226], "463": [33, 196], "465": 33, "467": [33, 91, 96], "468": [33, 57, 59, 62, 196], "469": 33, "470": [33, 36, 42, 102], "471": 33, "472": 33, "473": 33, "474": 33, "475": 33, "476": [33, 66, 73], "477": 33, "478": [33, 86, 96], "479": 33, "480": [33, 36, 42, 44, 45, 102], "481": 33, "482": 33, "483": [33, 118, 153], "484": 33, "485": [33, 49], "486": 33, "487": [33, 52, 59], "488": [33, 101, 109], "489": 33, "490": [33, 36, 42, 102], "493": [33, 100, 109], "494": 33, "495": 33, "496": 33, "497": 33, "498": 33, "499": 33, "500": [33, 35, 36, 41, 42, 49, 79, 98, 102, 111, 206], "501": 33, "502": [33, 98], "503": 33, "506": 33, "507": [33, 78], "508": 33, "509": 33, "510": [33, 36, 42, 91, 96, 102], "511": 33, "512": [33, 84, 145, 153, 201], "513": 33, "514": 33, "515": 33, "517": 33, "518": 33, "519": 33, "520": [33, 36, 42, 62, 73, 102], "521": 33, "522": 33, "523": 33, "524": 33, "525": 33, "526": 33, "527": 33, "528": [33, 44], "529": 33, "530": [33, 36, 42, 102], "531": 33, "532": 33, "534": 33, "535": 33, "536": 33, "537": 33, "538": [33, 48], "539": 33, "540": [33, 36, 42, 62, 102], "542": 33, "543": [33, 53, 59], "544": [33, 114, 227], "545": 33, "547": 33, "548": [33, 67, 73], "549": [33, 114, 165], "550": [33, 36, 42, 102], "551": [33, 102, 109], "552": [33, 89, 114, 227], "553": 33, "554": 33, "555": 33, "556": 33, "557": 33, "558": 33, "559": [33, 114, 165], "560": [33, 36, 37, 42, 45, 102], "561": 33, "562": [33, 114, 204], "563": 33, "564": 33, "565": 33, "566": 33, "567": [33, 34, 45], "568": 33, "569": 33, "570": [33, 36, 42, 102], "571": 33, "573": [33, 114, 204], "574": 33, "575": 33, "576": 33, "577": [33, 58, 59], "578": 33, "579": 33, "580": [33, 36, 42, 102], "581": 33, "582": [33, 37], "583": 33, "584": 33, "585": 33, "586": [33, 61, 73], "587": 33, "591": 33, "592": [33, 37], "593": 33, "595": 33, "596": 33, "597": 33, "598": 33, "599": [33, 114, 194], "600": [33, 36, 42, 49, 102, 118, 153, 206], "601": 33, "602": [33, 67, 73], "603": 33, "604": 33, "605": [33, 77, 82, 105, 109], "606": 33, "608": 33, "609": 33, "610": [33, 36, 42, 102], "611": 33, "612": 33, "613": 33, "614": 33, "615": 33, "616": 33, "617": [33, 90, 96], "618": 33, "619": 33, "620": [33, 36, 42, 102], "622": 33, "623": 33, "624": 33, "625": 33, "626": 33, "627": 33, "628": 33, "629": 33, "631": 33, "632": 33, "634": 33, "635": 33, "636": 33, "637": 33, "638": 33, "640": [33, 36, 42, 82, 102], "641": 33, "642": [33, 55, 238, 401], "643": 33, "644": 33, "645": 33, "647": 33, "649": 33, "650": [33, 36, 42, 102], "651": 33, "652": 33, "653": 33, "654": 33, "655": 33, "656": 33, "657": 33, "658": [33, 48, 50], "660": [33, 36, 42, 102], "661": [33, 53, 59], "662": 33, "663": 33, "664": 33, "665": [33, 58, 114, 117, 213, 229, 231], "666": 33, "668": 33, "669": [33, 49, 114, 406, 412], "670": [33, 36, 42, 102, 114, 117, 229, 231], "671": 33, "672": 33, "673": 33, "674": 33, "675": 33, "676": 33, "677": 33, "678": [33, 58, 114, 213], "679": 33, "680": [33, 36, 42, 92, 96, 102], "681": [33, 49, 114, 406, 412], "682": 33, "683": 33, "684": 33, "685": 33, "686": 33, "687": 33, "688": 33, "689": 33, "690": [33, 36, 42, 102], "691": 33, "692": 33, "693": [33, 48], "694": 33, "695": 33, "696": 33, "699": [33, 48, 59], "700": [33, 36, 42, 102, 141, 153, 206], "701": 33, "703": 33, "704": 33, "705": 33, "706": 33, "707": 33, "708": 33, "709": 33, "710": [33, 36, 42, 73, 102], "711": [33, 70], "712": 33, "713": 33, "714": 33, "715": 33, "716": 33, "717": 33, "718": 33, "719": 33, "720": [33, 36, 42, 102], "721": [33, 92, 96], "722": 33, "723": 33, "724": 33, "725": 33, "726": 33, "727": 33, "728": 33, "729": 33, "730": [33, 36, 42, 102], "731": 33, "732": 33, "733": 33, "734": 33, "735": 33, "736": 33, "737": 33, "739": [33, 36], "740": [33, 42, 102], "741": 33, "742": 33, "743": 33, "745": 33, "746": 33, "13a": 33, "32a": 33, "bug": [33, 121, 124, 125, 131, 132, 133, 137, 150, 175, 176, 394, 396, 397], "request": [33, 100, 128, 141, 153, 157, 167, 173, 186, 187, 188, 201, 202, 203, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 297, 319, 320, 326, 327, 328, 329, 330, 331, 332, 333, 343, 372, 373, 400, 404, 405, 406, 407, 436, 437], "save_as_html": [33, 61, 62, 64, 75, 91, 92, 180, 399, 400, 401, 402, 403, 415, 417, 436], "although": [33, 39, 49, 79, 161, 173, 176, 180], "usual": [33, 48, 77, 79, 94, 148, 153, 159, 161, 162, 163, 168, 170, 173, 175, 176, 179, 196, 252, 253, 263, 269, 272, 337, 389, 405], "classification_accuraci": [33, 98], "chance_level": 33, "4f": [33, 34, 98], "7173": 33, "919": 33, "plot_haxby_glm_decod": [33, 45], "approach": [34, 40, 41, 48, 49, 66, 69, 114, 138, 153, 156, 159, 160, 161, 165, 167, 168, 169, 170, 174, 254, 300, 323, 324, 419, 423, 437, 438], "maxim": [34, 173, 272, 274, 275, 304, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "signific": [34, 49, 66, 75, 80, 114, 160, 165, 167, 170, 173, 297, 343, 416], "optimist": [34, 160], "lead": [34, 47, 48, 57, 84, 123, 125, 144, 153, 166, 167, 168, 170, 173, 188, 270, 328, 331, 418, 436], "overfit": [34, 161, 165], "loop": [34, 44, 71, 100, 144, 153, 160, 167, 179, 250, 251, 252, 253], "judg": [34, 86], "never": [34, 160, 167, 175, 315, 316, 415], "grid": [34, 51, 68, 79, 84, 99, 161, 166, 173, 179, 188, 229, 231, 250, 251, 252, 253, 286, 287, 288, 292, 293, 294, 315, 354, 356, 359, 373, 378, 383, 386, 390, 391, 392, 393, 436], "difficulti": 34, "composit": 34, "hyperparamet": [34, 42], "param_grid": [34, 99, 111, 124, 153, 161, 250, 251, 252, 253], "sensibl": [34, 160, 163, 187, 190], "dual": [34, 51, 53, 98, 99, 114, 167, 187, 250, 252], "1000": [34, 42, 49, 77, 94, 102, 157, 170, 206, 404], "l1": [34, 43, 114, 161, 162, 166, 187, 190, 250, 251, 252, 255, 256], "800": [34, 42, 87, 102, 206, 282, 295, 379, 417], "complet": [34, 60, 73, 94, 113, 116, 117, 141, 153, 154, 160, 162, 169, 176, 179, 180, 216, 218, 234, 249, 282, 285, 322, 325, 332, 343, 378, 379, 380, 381, 383, 385, 386, 387, 389, 390, 391, 392, 393, 405, 415, 416, 417], "stabl": [34, 48, 56, 98, 114, 123, 138, 153, 159, 161, 162, 167, 175, 198, 238, 250, 251, 252, 253, 257, 258, 323, 401, 423, 437], "cross_valid": [34, 98, 138, 153, 163, 250, 251, 252, 253], "excel": 34, "explan": [34, 84, 102, 160, 161, 162, 163, 168, 178, 180, 195], "best_c": [34, 250, 251, 252, 253], "best_penalti": 34, "best_dual": 34, "cv_score": [34, 98], "9297520661157024": 34, "9177489177489176": 34, "803030303030303": 34, "7575757575757576": 34, "735930735930736": 34, "screening_percentile_rang": 34, "val_scor": 34, "sp": 34, "sreen": 34, "000": [34, 42, 79, 94, 165], "8215": 34, "5556": 34, "8493": 34, "3889": 34, "8433": 34, "4444": 34, "8767": 34, "8644": 34, "5000": [34, 49, 55, 98, 102], "9037": 34, "kfold": [34, 36, 37, 40, 44, 255, 256], "nested_cv_scor": 34, "_base": [34, 39, 48], "1250": [34, 42, 102], "convergencewarn": [34, 39, 48, 92, 104], "liblinear": [34, 250, 252], "fail": [34, 103, 123, 124, 141, 150, 153, 167, 168, 229, 231, 407], "converg": [34, 48, 92, 104, 167, 187, 190, 255, 256, 404], "increas": [34, 43, 44, 48, 66, 70, 79, 89, 92, 103, 104, 124, 135, 153, 164, 165, 167, 170, 173, 179, 190, 297, 324, 337, 343, 378, 391, 392, 393, 400, 405, 418, 438], "iter": [34, 48, 53, 69, 71, 92, 104, 141, 153, 160, 165, 187, 188, 190, 250, 251, 252, 253, 255, 256, 257, 258, 301, 305, 308, 309, 312, 317, 374, 405, 406, 412], "6713": 34, "tight": [34, 167], "axhlin": [34, 354, 356, 359, 361, 363, 365, 367, 369, 371], "frameon": [34, 344, 346, 347], "plot_haxby_grid_search": [34, 45], "overal": [35, 66, 70, 124, 153, 167, 168, 255, 256], "non_rest": 35, "unique_condit": 35, "return_index": 35, "appear": [35, 54, 89, 282, 295, 297, 381, 416], "argsort": [35, 42, 43, 103], "fit_transform": [35, 36, 42, 47, 49, 50, 51, 52, 54, 55, 56, 58, 61, 70, 89, 92, 98, 99, 100, 102, 103, 104, 105, 106, 111, 116, 125, 153, 155, 158, 169, 180, 186, 257, 258, 264, 265, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "selectkbest": [35, 41, 111, 133, 153], "f_classif": [35, 36, 41, 94, 98, 163], "multiclass": [35, 161], "onevsoneclassifi": [35, 161], "onevsrestclassifi": [35, 161], "svc_ovo": 35, "svc_ova": 35, "cross_val_scor": [35, 98, 163], "cv_scores_ovo": 35, "cv_scores_ova": 35, "ovo": 35, "ova": 35, "601855088049469": 35, "6712058072321548": 35, "boxplot": [35, 94], "text": [35, 75, 94, 98, 105, 114, 160, 168, 177, 210, 218, 228, 269, 273, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 438], "y_pred_ovo": 35, "y_pred_ova": 35, "961": [35, 45], "3105": [35, 45, 123, 153, 168], "plot_haxby_multiclass": [35, 45], "intrins": [36, 114, 157, 206, 207, 210, 324], "process_mask_img": [36, 44, 165, 254], "back": [36, 41, 42, 48, 55, 98, 100, 102, 104, 116, 126, 134, 135, 153, 157, 165, 168, 180, 257, 258, 264, 265, 326, 329, 332, 342, 374, 404, 405, 406], "astyp": [36, 40, 41, 43, 44, 68, 75, 84, 94], "process_mask": [36, 44, 132, 153], "picked_slic": 36, "02_decod": 36, "plot_haxby_searchlight": [36, 45], "parallel": [36, 43, 47, 48, 79, 123, 153, 167, 170, 297, 329, 343], "thread": 36, "progress": [36, 42, 102, 105, 128, 153, 282], "mess": 36, "onc": [36, 49, 57, 117, 148, 153, 154, 159, 160, 167, 169, 170, 172, 173, 176, 180, 404, 423], "job": [36, 42, 44, 79, 102, 105, 117, 282, 295, 297, 343], "1812400817871": 36, "46201534624453": 36, "07134422077024": 36, "31586574685985": 36, "20075777233638": 36, "200662271310875": 36, "05223716890871": 36, "848936765976916": 36, "633703756860754": 36, "26984027767025": 36, "99147437892838": 36, "559416555589245": 36, "17531923237693": 36, "74381215251122": 36, "33752914114512": 36, "83367764303837": 36, "39423612634249": 36, "916891046192337": 36, "44023612997998": 36, "935963956171875": 36, "466863027080638": 36, "925337892112218": 36, "447216289252452": 36, "93336891208639": 36, "43141841418638": 36, "90578600375779": 36, "410528139338837": 36, "898919282875625": 36, "37805889325458": 36, "874916600160276": 36, "34052980592098": 36, "94705079053667": 36, "415727733189186": 36, "89817111462789": 36, "35429776981846": 36, "83133886472599": 36, "310714992598765": 36, "772273269984353": 36, "249490952964702": 36, "709848864954573": 36, "178401654735193": 36, "64227780680392": 36, "116253636450956": 36, "57382655582143": 36, "04714013010934": 36, "518198163780717": 36, "975079489520276": 36, "445740504834637": 36, "90912535816454": 36, "37325117067053": 36, "835838538106998": 36, "304278292045817": 36, "759666524591372": 36, "232915294549349": 36, "693411396419988": 36, "159067975100378": 36, "620302519089755": 36, "082278276160583": 36, "548619523568496": 36, "004575408293391": 36, "471203896165085": 36, "932462628886574": 36, "393864454614957": 36, "855839426566429": 36, "321626487009522": 36, "7794505910149185": 36, "243390832365379": 36, "7076651722343996": 36, "1665893755537424": 36, "631085213417794": 36, "0931231367426957": 36, "5525660485054043": 36, "0167848762393545": 36, "48176779812660026": 36, "shuffl": [36, 37, 48, 252, 253], "lt": [36, 75, 89, 91, 92], "0x7f651d0b32b0": 36, "gt": [36, 75, 89, 91, 92], "0x7f651c4ca940": 36, "environ": [36, 49, 52, 53, 58, 62, 75, 77, 138, 139, 141, 148, 153, 160, 175, 178, 240, 400, 437], "rerun": [36, 49, 52, 53, 58, 62, 75, 77], "trust": [36, 49, 52, 53, 58, 62, 75, 77, 170], "unabl": [36, 49, 52, 53, 58, 62, 70, 75, 77, 141, 153], "render": [36, 49, 52, 53, 58, 62, 75, 77, 125, 139, 153, 168, 357, 385, 387, 394, 396, 397, 399, 401, 402, 403], "page": [36, 49, 52, 53, 58, 62, 75, 77, 114, 138, 142, 148, 149, 150, 153, 157, 161, 165, 167, 168, 170, 176, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423], "nbviewer": [36, 49, 52, 53, 58, 62, 75, 77], "searchlightsearchlight": 36, "fmri_mask": [36, 92, 98, 102, 105, 106, 116], "p_valu": [36, 44, 77, 79, 94, 107, 145, 153, 270, 282, 295], "log10": [36, 42, 44, 77, 79, 94, 102, 105, 106, 297, 343, 416], "p_unmask": 36, "inverse_transform": [36, 40, 42, 49, 55, 92, 98, 100, 102, 103, 104, 105, 106, 111, 115, 124, 134, 141, 150, 153, 157, 186, 257, 258, 264, 265, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407, 438], "surrog": [36, 102], "mean_fmri": 36, "searchlight_img": 36, "scores_": [36, 44, 165], "hot": 36, "f_score": [36, 164, 438], "p_ma": 36, "ma": [36, 40, 64, 106], "f_score_img": 36, "034": [36, 41, 45], "demo": [37, 100, 101, 108, 110, 112, 113, 116, 144, 148, 153, 168, 186, 221, 250, 262, 263, 264, 265, 266, 267, 390, 394, 398], "namburi": 37, "elliott": [37, 56, 114, 323, 324], "heinzl": 37, "soon": [37, 71, 176], "chee": 37, "w": [37, 44, 106, 114, 186, 188, 206, 209, 210, 212, 216, 226, 234, 255, 256], "hayn": [37, 114, 165], "2011": [37, 49, 58, 114, 117, 122, 133, 153, 154, 161, 165, 166, 197, 204, 206, 207, 210, 213, 219, 227, 229, 231, 244, 323, 324], "coars": 37, "pial_mesh": 37, "term": [37, 54, 66, 89, 92, 115, 149, 153, 159, 161, 167, 170, 173, 175, 178, 179, 226, 229, 255, 256, 269, 285, 289, 323, 419], "within": [37, 47, 55, 66, 68, 79, 88, 100, 102, 141, 144, 150, 153, 157, 159, 165, 169, 172, 250, 251, 254, 279, 282, 284, 289, 295, 299, 300, 319, 327, 328, 329, 330, 331, 332, 333, 341, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 379, 380, 405, 408, 417, 419], "adjac": [37, 141, 153, 259], "nearbi": 37, "infl_mesh": 37, "infl_": 37, "nn": 37, "nearestneighbor": 37, "radius_neighbors_graph": 37, "tolil": 37, "linear_model": [37, 40, 41, 44, 111, 258], "ridgeclassifi": 37, "make_pipelin": [37, 40, 44, 111], "standardscal": [37, 39, 40, 41, 44, 111], "search_light": [37, 254], "preced": [37, 168, 180, 282], "search": [37, 89, 124, 153, 168, 176, 188, 250, 251, 252, 253, 320], "light": [37, 133, 139, 141, 153, 168, 297], "sulc_": 37, "plot_haxby_searchlight_surfac": [37, 45], "overview": [38, 165, 167, 175], "fetch_stimuli": [38, 218], "stimulus_inform": 38, "stim_typ": 38, "skip": [38, 49, 56, 125, 153, 395, 398], "file_nam": [38, 415], "suptitl": [38, 40, 42, 43, 44, 66, 79, 100, 101, 105], "img_path": [38, 321], "ravel": [38, 41, 43, 44, 102, 105, 106], "imread": 38, "809": [38, 45], "plot_haxby_stimuli": [38, 45], "gain": [39, 66, 162, 167, 227], "fetch_mixed_gambl": [39, 149, 153], "zmap_filenam": 39, "zmap": [39, 101, 227], "behavioral_target": 39, "svr": [39, 42, 44, 141, 153, 161, 251, 253, 254], "solver": [39, 114, 166, 250, 252, 255, 256], "termin": [39, 160, 168, 437], "earli": [39, 111, 114, 166, 229, 231, 300, 404, 419], "max_it": [39, 40, 43, 48, 50, 57, 187, 188, 190, 250, 251, 252, 253, 255, 256], "10000": [39, 42, 49, 55, 102, 105, 297, 343], "pre": [39, 64, 67, 94, 101, 124, 133, 138, 150, 153, 170, 180, 273], "minmaxscal": 39, "0x7f651cc9b1c0": 39, "observ": [39, 44, 58, 61, 63, 66, 71, 79, 80, 81, 102, 161, 165, 169, 170, 173, 175, 180, 273, 404], "learnt": 39, "impos": [39, 126, 153], "relat": [39, 46, 49, 50, 63, 64, 65, 66, 67, 68, 69, 71, 81, 100, 106, 113, 114, 117, 132, 133, 153, 155, 156, 158, 160, 161, 164, 167, 168, 173, 174, 175, 176, 180, 186, 215, 220, 241, 242, 245, 257, 258, 270, 282, 306, 320, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 405, 407, 420, 437, 438], "guid": [39, 123, 153, 168, 172, 174, 175, 180, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 428, 429, 437], "unstructur": 39, "graph_net": 39, "heavi": [39, 42, 154, 168], "spacenetregressor": [39, 43, 166, 255], "regressor": [39, 43, 56, 61, 62, 63, 66, 100, 101, 105, 108, 123, 144, 145, 149, 153, 155, 161, 169, 226, 251, 253, 256, 278, 282, 284, 289, 297, 323, 324, 343], "tv_l1": 39, "ep": [39, 43, 255, 256], "prefer": [39, 51, 99, 157, 168, 178], "1800": [39, 42, 45, 102], "plot_mixed_gambles_frem": [39, 45], "partli": [40, 42, 167, 170, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 215, 218, 219, 220, 224, 226, 227, 228, 233, 239], "uchida": [40, 41, 114, 228], "h": [40, 41, 56, 65, 114, 200, 209, 216, 233, 234, 238, 269, 273, 323, 324], "yamashita": [40, 41, 114, 228], "sato": [40, 41, 114, 228], "morito": [40, 41, 114, 228], "tanab": [40, 41, 114, 228], "kamitani": [40, 41, 114, 228], "neuron": [40, 41, 58, 114, 165, 213, 228], "915": [40, 41, 65, 73, 114, 228], "929": [40, 41, 114, 228], "sound": [40, 170], "real": [40, 160, 165, 167, 170, 178, 180], "world": [40, 178, 180, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 377, 380, 389], "stimulu": [40, 41, 65, 100, 170], "particip": [40, 56, 66, 111, 114, 168, 170, 173, 323, 324], "10x10": [40, 41], "binari": [40, 41, 66, 75, 123, 150, 153, 173, 176, 180, 220, 250, 251, 252, 253, 255, 256, 392, 416, 419], "pixel": [40, 41, 170, 282, 295, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 399, 402, 417], "fetch_miyawaki2008": [40, 41, 89], "fmri_random_runs_filenam": 40, "stimuli_random_runs_filenam": 40, "multiniftimask": [40, 41, 48, 49, 145, 147, 151, 153, 177, 250, 251, 252, 253, 255, 256, 257, 258, 295, 297, 343, 405, 438], "clean": [40, 43, 48, 49, 52, 53, 56, 58, 70, 103, 114, 123, 124, 131, 137, 138, 141, 145, 146, 148, 153, 176, 179, 180, 186, 257, 258, 282, 300, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 379, 405, 407], "fmri_data": [40, 94, 282, 295], "wiht": 40, "stimulus_shap": 40, "stimulus_run": 40, "reshap": [40, 41, 44, 50, 68, 77, 105, 134, 151, 153, 158, 186], "loadtxt": [40, 41], "pylab": [40, 390], "wspace": [40, 44], "stack": [40, 51, 58, 146, 153, 173, 193], "offset": [40, 51, 84, 144, 153, 179, 205, 206, 315], "begin": [40, 62, 66, 71, 144, 153, 168, 173, 418], "fmri_run": 40, "stimuli_run": 40, "2860": [40, 102], "5438": 40, "proce": [40, 55, 65, 116], "independ": [40, 48, 66, 97, 109, 113, 126, 153, 157, 159, 160, 165, 167, 170, 173, 180, 215, 250, 251, 252, 253, 257, 300, 307, 312, 323, 324, 326, 332, 343, 393, 398, 419], "hold": [40, 78, 167, 168, 176, 257, 258, 289, 343, 354, 405], "held": [40, 165, 168, 250, 251, 252, 253, 437], "10th": 40, "r2_score": [40, 256], "multioutput": [40, 256], "raw_valu": 40, "threshold_img": [40, 81, 88, 124, 126, 148, 153, 298, 299], "cut_scor": 40, "bring": [40, 48, 162, 168, 175, 342], "score_map_img": 40, "thresholded_score_map_img": 40, "mark": [40, 56, 100, 114, 226, 323, 324], "four": [40, 44, 66, 148, 153, 180], "coord_transform": [40, 135, 153], "def": [40, 41, 44, 47, 53, 64, 66, 68, 100, 107, 111, 168, 394, 396], "index_to_xy_coord": 40, "newaxi": [40, 44, 80, 84], "xy_indices_of_special_voxel": 40, "marker": [40, 139, 141, 144, 146, 153, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 380, 389, 399, 400, 402, 407, 409, 438], "add_mark": [40, 55, 61, 70, 100, 130, 136, 139, 153, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 436], "magenta": [40, 70, 436], "lw": [40, 70], "construct": [40, 52, 54, 98, 156, 159, 165, 168, 169, 174, 175, 269, 270, 273, 296, 415], "gcf": 40, "set_size_inch": [40, 70], "closer": [40, 49, 167, 416], "presenc": [40, 66, 102, 407, 409], "lasso": [40, 57, 58, 154, 161, 166, 167, 251, 253, 255, 256, 258], "lassolarscv": 40, "sparsiti": [40, 48, 114, 126, 153, 154, 158, 159, 161, 162, 166, 167, 173, 188, 190, 255, 256, 258, 407], "marked_pixel": 40, "gridspec": [40, 146, 153], "gs1": 40, "1780": [40, 42, 102], "1951": [40, 141, 153], "2131": [40, 141, 153], "rf": [40, 68], "named_step": [40, 44, 98], "zeros_lik": [40, 68, 84, 102], "ax_im": 40, "masked_less": [40, 106], "green": [40, 49, 89, 92, 114, 146, 153, 214, 269, 273], "add_patch": 40, "updat": [40, 93, 100, 123, 124, 125, 128, 132, 133, 138, 141, 147, 148, 150, 153, 176, 186, 187, 188, 206, 229, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "1935": [40, 114], "rdpu": 40, "0x7f651c3fc9a0": 40, "rel": [40, 49, 65, 66, 91, 168, 170, 173, 176, 250, 251, 252, 253, 254, 255, 256, 282, 284, 289, 304, 399, 401, 403], "roughli": [40, 161, 168, 170], "relationship": [40, 42, 75, 165, 172, 174, 175, 226, 343], "998": [40, 45], "plot_miyawaki_encod": [40, 45], "elabor": [41, 126, 153, 436], "articl": [41, 64, 67, 114, 162, 165, 166, 167, 175, 194, 196, 197, 198, 200, 201, 204, 206, 207, 208, 214, 219, 224, 226, 227, 228, 229, 231, 233, 239, 244, 252, 253, 323, 324, 343, 379, 420], "stderr": 41, "miyawaki_dataset": [41, 89], "x_random_filenam": 41, "x_figure_filenam": 41, "y_random_filenam": 41, "y_figure_filenam": 41, "y_shape": 41, "miyawaki2008": [41, 89], "data_figure_run01": [41, 89], "n_featur": [41, 47, 57, 167, 186, 187, 188, 190, 192, 250, 251, 252, 253, 255, 256, 257, 258, 269, 282, 295, 404, 406, 412], "list_of_2d_arrai": 41, "squar": [41, 43, 49, 66, 100, 102, 105, 114, 155, 161, 166, 167, 169, 186, 256, 269, 272, 273, 274, 282, 295, 306, 322, 323, 328, 331, 343, 404, 405, 406, 420], "y_row": 41, "y_col": 41, "height_tf": 41, "width_tf": 41, "yt_tall": 41, "dot": [41, 44, 55, 100, 103, 167, 272, 273, 274, 275, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "yt_larg": 41, "yt_big": 41, "r_": 41, "orthogonalmatchingpursuit": 41, "omp": 41, "clf": [41, 135, 153], "n_clf": 41, "scl": 41, "n_nonzero_coef": 41, "03d": [41, 100], "002": 41, "003": 41, "004": [41, 114, 228], "005": [41, 114, 162, 252, 253], "006": [41, 114, 213], "007": [41, 114, 204, 227], "009": [41, 114, 379], "011": 41, "012": 41, "013": 41, "014": 41, "015": 41, "016": [41, 66], "017": 41, "018": [41, 114, 323, 324], "019": 41, "020": [41, 56, 114, 323, 324], "021": 41, "022": 41, "023": 41, "024": 41, "025": 41, "026": 41, "027": 41, "028": 41, "029": 41, "030": 41, "031": 41, "032": 41, "033": [41, 114, 219, 244], "035": 41, "036": 41, "038": 41, "039": 41, "040": 41, "041": [41, 114, 165], "042": [41, 114, 323, 324, 420], "043": 41, "044": 41, "045": 41, "046": 41, "047": 41, "048": [41, 114, 323], "049": 41, "050": 41, "052": [41, 114, 224], "053": 41, "054": [41, 114, 165], "055": 41, "056": 41, "057": 41, "058": [41, 64, 73], "059": 41, "060": [41, 76, 114, 277, 343], "061": [41, 114, 297, 343], "062": [41, 114, 166], "063": 41, "065": 41, "066": 41, "068": 41, "069": 41, "070": 41, "071": 41, "072": 41, "073": [41, 56, 114, 161, 324], "074": 41, "075": 41, "077": 41, "078": 41, "079": 41, "080": [41, 114], "081": 41, "082": [41, 114, 198], "083": 41, "084": 41, "085": 41, "086": 41, "087": 41, "088": 41, "089": 41, "090": 41, "091": 41, "093": 41, "094": 41, "095": 41, "096": 41, "097": 41, "098": 41, "099": 41, "split_multi_scal": 41, "multi_scal": 41, "yw": 41, "yh": 41, "split_index": 41, "tall": 41, "y_pred_tal": 41, "1x2": 41, "applic": [41, 146, 153, 155, 161, 167, 174, 282, 295, 329, 343, 410, 411, 417, 436, 437, 438], "calculu": 41, "height_tf_i": 41, "y_pred_larg": 41, "2x1": 41, "width_tf_i": 41, "y_pred_big": 41, "2x2": [41, 139, 153, 354, 356, 359, 373, 378, 383, 386, 391, 392, 393, 436], "accuracy_scor": [41, 51], "f1_score": 41, "precision_scor": 41, "recall_scor": 41, "recal": [41, 250, 252], "zero_divis": 41, "f1": [41, 160, 250, 252], "801208": 41, "413969": 41, "572388": 41, "465973": 41, "six": 41, "ground": [41, 44, 57, 160], "truth": [41, 44, 57, 160], "sp1": 41, "sp2": 41, "sp3": 41, "binar": [41, 94, 147, 153, 299], "miyawaki2008_reconstruction_": 41, "plot_miyawaki_reconstruct": [41, 45], "densiti": [42, 57, 75, 167, 172, 174, 219, 233], "agre": [42, 75, 168, 233, 295, 297], "agreement": [42, 62, 75, 233], "spm8": [42, 75, 196, 233], "newseg": [42, 75], "ran": 42, "prepar": [42, 58, 94, 99, 101, 108, 116, 128, 153, 164, 177, 264, 265, 327, 328, 329, 330, 331, 333, 407, 438], "impact": [42, 66, 78, 148, 153, 165, 168, 176, 180, 282, 295, 324], "significantli": [42, 66, 138, 153, 165, 167], "noisi": [42, 92, 154], "detriment": [42, 324], "permut": [42, 77, 79, 102, 105, 114, 123, 144, 153, 163, 165, 170, 297, 314, 343, 430], "exact": [42, 165, 168, 170, 219, 220, 436], "comparison": [42, 49, 51, 57, 62, 66, 81, 93, 99, 100, 102, 114, 117, 154, 157, 164, 165, 166, 171, 173, 197, 438], "clearer": [42, 168], "oasis_dataset": [42, 75], "fetch_oasis_vbm": [42, 43, 75], "gray_matter_map_filenam": [42, 75], "gray_matter_map": [42, 43, 75, 233], "ext_var": [42, 43, 75, 77, 79, 105, 233], "train_test_split": [42, 43], "gm_imgs_train": [42, 43], "gm_imgs_test": [42, 43], "age_train": [42, 43], "age_test": [42, 43], "train_siz": [42, 43], "white_matter_map": [42, 75, 233], "oasis1": [42, 43, 75], "oas1_0001_mr1": [42, 43, 75], "mwrc1oas1_0001_mr1_mpr_anon_fslswapdim_bet": [42, 43, 75], "mwrc2oas1_0001_mr1_mpr_anon_fslswapdim_bet": [42, 75], "cach": [42, 43, 49, 54, 56, 102, 122, 126, 153, 157, 187, 250, 251, 252, 253, 255, 256, 257, 258, 282, 295, 301, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 405, 406, 407, 423], "gm_maps_mask": 42, "variancethreshold": 42, "variance_threshold": 42, "get_support": 42, "decoderregressor": [42, 141, 144, 145, 153, 161, 250, 253], "benefit": [42, 49, 56, 66, 141, 153, 168, 179], "some_high_valu": [42, 43], "advantag": [42, 43, 69, 167, 180], "neg_mean_absolute_error": [42, 251, 253], "trend": [42, 43, 89, 180], "etc": [42, 43, 80, 89, 92, 94, 117, 166, 169, 173, 178, 226, 250, 251, 252, 253, 255, 256, 274, 332], "perm": [42, 43], "age_pr": 42, "prediction_scor": 42, "670599": 42, "bg_filenam": 42, "absolut": [42, 43, 58, 111, 141, 153, 165, 167, 168, 211, 221, 234, 304, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 377, 378, 380, 385, 386, 388, 392, 393, 394, 397, 400, 401, 403, 436], "year": [42, 43, 114, 167, 176, 215, 233], "0x7f651ce3ae50": 42, "mass_univari": [42, 79, 102, 105, 144, 150, 153, 165, 172], "permuted_ol": [42, 79, 102, 105, 123, 124, 144, 149, 150, 153, 165, 172, 297], "neg_log_pv": [42, 77, 79, 102], "t_scores_original_data": [42, 102], "intercept": [42, 75, 76, 77, 79, 80, 81, 102, 106, 124, 153, 165, 250, 251, 252, 253, 255, 256, 296, 297, 343], "n_perm": [42, 77, 79, 102, 105, 297, 343], "signed_neg_log_pv": [42, 102], "signed_neg_log_pvals_unmask": [42, 102], "rdbu_r": [42, 44, 102, 390], "log_": [42, 102, 105, 106], "parametr": [42, 65, 66, 77, 79, 102, 105, 106, 114, 165, 172, 173, 270, 271, 276, 300, 419], "n_detect": [42, 102, 105], "detect": [42, 68, 77, 79, 89, 100, 102, 106, 114, 165, 170, 173, 180, 186, 323, 324, 404, 436], "6075668334961": 42, "122734546661377": 42, "013694763183594": 42, "53615212440491": 42, "998690366744995": 42, "089404106140137": 42, "72325134277344": 42, "4079578604017": 42, "226957321166992": 42, "007273965411716": 42, "79234290122986": 42, "578001824292272": 42, "399171113967896": 42, "364144545335037": 42, "200200864246916": 42, "0285005569458": 42, "853304266929626": 42, "684576567481546": 42, "53145877520243": 42, "39260765125877": 42, "23275637626648": 42, "168554703394573": 42, "010067636316474": 42, "848776371582694": 42, "694356282552082": 42, "55110478401184": 42, "395081043243408": 42, "24404091305203": 42, "171825681413925": 42, "023751217743445": 42, "871209859848022": 42, "722069032730595": 42, "572367429733276": 42, "427400328896262": 42, "304645482231592": 42, "164019550595967": 42, "088079293568928": 42, "05888355100477": 42, "913385190461813": 42, "77633460974082": 42, "631175994873047": 42, "486189365386963": 42, "338590871720086": 42, "231314232183056": 42, "08306511965665": 42, "93583122889201": 42, "789017563280854": 42, "64694698313449": 42, "518305102984108": 42, "379480089460102": 42, "250629425048828": 42, "14834272627737": 42, "004105677971474": 42, "859854122377794": 42, "719520833757187": 42, "57408343661915": 42, "467945098876953": 42, "353571615721048": 42, "276443645871918": 42, "14703449556383": 42, "01533619562785": 42, "885617529759642": 42, "7494145747154": 42, "613262297615172": 42, "476155430078506": 42, "35317430129418": 42, "212012832814995": 42, "0701436462687": 42, "931105683831607": 42, "79011262672535": 42, "644879749843053": 42, "505538792677328": 42, "367710537380642": 42, "25264244536831": 42, "10945313685649": 42, "750": [42, 102], "970691680908203": 42, "760": [42, 102], "8344270932047": 42, "770": [42, 102], "695173932360365": 42, "780": [42, 102], "553403016848442": 42, "790": [42, 98, 102, 109], "412997556638114": 42, "271838784217834": 42, "810": [42, 102], "165821773034555": 42, "820": [42, 102], "0427451598935": 42, "830": [42, 102], "901978797223194": 42, "840": [42, 102], "761179083869571": 42, "850": [42, 102], "618487007477706": 42, "860": [42, 102], "4795184745345": 42, "870": [42, 102], "34149969309226": 42, "214120518077504": 42, "890": [42, 102], "074140170986732": 42, "900": [42, 102, 141, 153, 206], "936768982145523": 42, "910": [42, 102], "796989061020232": 42, "920": [42, 102], "661420759947404": 42, "930": [42, 102], "521490197027884": 42, "940": [42, 102], "38279201629314": 42, "950": [42, 102], "243942235645497": 42, "960": [42, 102], "11979955434799": 42, "970": [42, 54, 59, 102], "981966075208998": 42, "980": [42, 102], "842233988703514": 42, "990": [42, 102], "706468810938825": 42, "565856456756592": 42, "1010": [42, 102], "428956664434754": 42, "1020": [42, 102], "289646756415275": 42, "1030": [42, 102], "167328982677274": 42, "1040": [42, 102], "030075219961313": 42, "1050": [42, 102], "892321745554606": 42, "1060": [42, 102], "754409736057498": 42, "1070": [42, 102], "615882242951438": 42, "1080": [42, 102, 114, 343], "477310339609781": 42, "1090": [42, 48, 102], "339223037072278": 42, "1100": [42, 102], "200225504961882": 42, "1110": [42, 102], "074144283930462": 42, "1120": [42, 102], "93645259312221": 42, "1130": [42, 102], "799044912895269": 42, "1140": [42, 102], "662942840341936": 42, "1150": [42, 102], "52500441799993": 42, "1160": [42, 102], "387034539518686": 42, "1170": [42, 102], "250260966455835": 42, "1180": [42, 102, 114, 257], "120680946414755": 42, "1190": [42, 102], "984415795622754": 42, "1200": [42, 102], "847898960113525": 42, "1210": [42, 102], "711594246635753": 42, "1220": [42, 102], "574973118109781": 42, "1230": [42, 102], "440220363740998": 42, "1240": [42, 102], "304444982159522": 42, "168380832672119": 42, "1260": [42, 102], "038959389641171": 42, "1270": [42, 102], "902680250603382": 42, "1280": [42, 102], "766747936606407": 42, "1290": [42, 102], "630711512972217": 42, "1300": [42, 102], "495180735221275": 42, "1310": [42, 102], "362843906606427": 42, "1320": [42, 102], "226923993139556": 42, "1330": [42, 102], "096987190103173": 42, "1340": [42, 102, 114, 166], "960610193992729": 42, "1350": [42, 50, 102, 158, 407, 409], "824447181489733": 42, "1360": [42, 102], "690891602460075": 42, "553965697323319": 42, "1380": [42, 102], "417729260264963": 42, "1390": [42, 102], "281695878762992": 42, "1400": [42, 102], "148445129394531": 42, "1410": [42, 102], "015017915279307": 42, "1420": [42, 102], "87834232625827": 42, "1430": [42, 102], "742295872081409": 42, "1440": [42, 102], "606136851840549": 42, "4690886201529665": 42, "1460": [42, 102], "332598725410357": 42, "1470": [42, 102], "202065070470175": 42, "1480": [42, 102], "0749257126369995": 42, "1490": [42, 102], "938701394420343": 42, "1500": [42, 88, 102], "80217440923055": 42, "1510": [42, 102], "666197863635638": 42, "1520": [42, 102], "5300656368857934": 42, "1530": [42, 102], "393791469873167": 42, "1540": [42, 102], "257618811223414": 42, "1550": [42, 102], "125752848963584": 42, "1560": [42, 102], "989410926134158": 42, "1570": [42, 102], "852897647080148": 42, "1580": [42, 102], "715917886057986": 42, "1590": [42, 102], "579160285445879": 42, "1600": [42, 102, 282, 295, 417], "442171335220337": 42, "1610": [42, 102], "305256348959408": 42, "1620": [42, 102], "168642261881887": 42, "1630": [42, 102], "034709545732276": 42, "1640": [42, 102], "898126067184821": 42, "1650": [42, 102], "761784502954194": 42, "1660": [42, 102], "625454868178769": 42, "1670": [42, 102], "488733098892395": 42, "1680": [42, 102], "352525574820382": 42, "1690": [42, 102], "2159196554556395": 42, "1700": [42, 102], "081886866513421": 42, "1710": [42, 102], "945274796402245": 42, "1720": [42, 102], "8087372336276744": 42, "1730": [42, 102], "6723055109123277": 42, "1740": [42, 102], "5361000422773694": 42, "1750": [42, 102], "400185142244611": 42, "1760": [42, 102], "2638984810222276": 42, "1770": [42, 102], "1275686557683566": 42, "9925005864561274": 42, "1790": [42, 102], "856180032538302": 42, "720469209882948": 42, "1810": [42, 102], "5842433344593365": 42, "1820": [42, 102], "448056978183788": 42, "1830": [42, 102], "3117458507662914": 42, "1840": [42, 102], "1755097016044282": 42, "1850": [42, 102], "0404326013616614": 42, "1860": [42, 102], "9042883124402774": 42, "1870": [42, 102], "7683844413349334": 42, "1880": [42, 102], "6339495334219425": 42, "1890": [42, 102], "4976854740627228": 42, "1900": [42, 102], "3614398052817895": 42, "1910": [42, 102], "2251292273636265": 42, "1920": [42, 102], "089398354291916": 42, "1930": [42, 102], "9530785577902521": 42, "1940": [42, 102], "8168300746642437": 42, "1950": [42, 102], "6806424030890831": 42, "1960": [42, 102], "5444737989075329": 42, "1970": [42, 102], "40832974462944843": 42, "1980": [42, 102], "27219972706804374": 42, "1990": [42, 102], "13608894635684526": 42, "1975": 42, "755": [42, 45], "plot_oasis_vbm": [42, 45, 141, 153], "ag": [43, 46, 59, 78, 97, 109, 113, 114, 141, 153, 154, 161, 162, 166, 172, 173, 174, 175, 186, 194, 204, 215, 219, 226, 233, 239, 244, 250, 251, 252, 253, 255, 256, 326, 331, 380, 390, 398], "concentr": [43, 168, 170, 173], "ram": 43, "box": [43, 84, 98, 104, 134, 153, 161, 168, 179, 315], "dataset_fil": 43, "gm_img": 43, "check_random_st": [43, 44], "rng": [43, 168], "intermedi": [43, 69, 163, 175], "graph": [43, 47, 53, 57, 154, 156, 166, 167, 173, 174, 250, 251, 255, 256, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 389, 438], "beauti": 43, "tv": [43, 114, 166, 250, 251, 255, 256], "expens": 43, "longer": [43, 104, 121, 123, 124, 125, 135, 139, 141, 144, 146, 148, 150, 153, 170], "runtim": [43, 150, 153, 168, 255, 256], "mse": [43, 255, 256, 274], "oas1_0003_mr1": 43, "mwrc1oas1_0003_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0086_mr1": 43, "mwrc1oas1_0086_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0052_mr1": 43, "mwrc1oas1_0052_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0211_mr1": 43, "mwrc1oas1_0211_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0216_mr1": 43, "mwrc1oas1_0216_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0096_mr1": 43, "mwrc1oas1_0096_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0182_mr1": 43, "mwrc1oas1_0182_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0041_mr1": 43, "mwrc1oas1_0041_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0214_mr1": 43, "mwrc1oas1_0214_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0069_mr1": 43, "mwrc1oas1_0069_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0025_mr1": 43, "mwrc1oas1_0025_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0159_mr1": 43, "mwrc1oas1_0159_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0113_mr1": 43, "mwrc1oas1_0113_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0038_mr1": 43, "mwrc1oas1_0038_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0013_mr1": 43, "mwrc1oas1_0013_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0220_mr1": 43, "mwrc1oas1_0220_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0180_mr1": 43, "mwrc1oas1_0180_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0007_mr1": 43, "mwrc1oas1_0007_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0031_mr1": 43, "mwrc1oas1_0031_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0135_mr1": 43, "mwrc1oas1_0135_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0005_mr1": 43, "mwrc1oas1_0005_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0037_mr1": 43, "mwrc1oas1_0037_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0160_mr1": 43, "mwrc1oas1_0160_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0163_mr1": 43, "mwrc1oas1_0163_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0123_mr1": 43, "mwrc1oas1_0123_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0162_mr1": 43, "mwrc1oas1_0162_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0012_mr1": 43, "mwrc1oas1_0012_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0070_mr1": 43, "mwrc1oas1_0070_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0126_mr1": 43, "mwrc1oas1_0126_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0164_mr1": 43, "mwrc1oas1_0164_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0188_mr1": 43, "mwrc1oas1_0188_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0226_mr1": 43, "mwrc1oas1_0226_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0173_mr1": 43, "mwrc1oas1_0173_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0078_mr1": 43, "mwrc1oas1_0078_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0138_mr1": 43, "mwrc1oas1_0138_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0072_mr1": 43, "mwrc1oas1_0072_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0050_mr1": 43, "mwrc1oas1_0050_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0184_mr1": 43, "mwrc1oas1_0184_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0032_mr1": 43, "mwrc1oas1_0032_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0045_mr1": 43, "mwrc1oas1_0045_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0121_mr1": 43, "mwrc1oas1_0121_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0176_mr1": 43, "mwrc1oas1_0176_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0177_mr1": 43, "mwrc1oas1_0177_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0029_mr1": 43, "mwrc1oas1_0029_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0026_mr1": 43, "mwrc1oas1_0026_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0208_mr1": 43, "mwrc1oas1_0208_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0165_mr1": 43, "mwrc1oas1_0165_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0091_mr1": 43, "mwrc1oas1_0091_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0044_mr1": 43, "mwrc1oas1_0044_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0190_mr1": 43, "mwrc1oas1_0190_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0053_mr1": 43, "mwrc1oas1_0053_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0106_mr1": 43, "mwrc1oas1_0106_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0174_mr1": 43, "mwrc1oas1_0174_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0049_mr1": 43, "mwrc1oas1_0049_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0155_mr1": 43, "mwrc1oas1_0155_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0004_mr1": 43, "mwrc1oas1_0004_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0117_mr1": 43, "mwrc1oas1_0117_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0060_mr1": 43, "mwrc1oas1_0060_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0148_mr1": 43, "mwrc1oas1_0148_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0204_mr1": 43, "mwrc1oas1_0204_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0202_mr1": 43, "mwrc1oas1_0202_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0209_mr1": 43, "mwrc1oas1_0209_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0055_mr1": 43, "mwrc1oas1_0055_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0090_mr1": 43, "mwrc1oas1_0090_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0039_mr1": 43, "mwrc1oas1_0039_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0009_mr1": 43, "mwrc1oas1_0009_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0124_mr1": 43, "mwrc1oas1_0124_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0103_mr1": 43, "mwrc1oas1_0103_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0094_mr1": 43, "mwrc1oas1_0094_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0200_mr1": 43, "mwrc1oas1_0200_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0205_mr1": 43, "mwrc1oas1_0205_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0101_mr1": 43, "mwrc1oas1_0101_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0010_mr1": 43, "mwrc1oas1_0010_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0015_mr1": 43, "mwrc1oas1_0015_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0067_mr1": 43, "mwrc1oas1_0067_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0193_mr1": 43, "mwrc1oas1_0193_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0146_mr1": 43, "mwrc1oas1_0146_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0019_mr1": 43, "mwrc1oas1_0019_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0080_mr1": 43, "mwrc1oas1_0080_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0199_mr1": 43, "mwrc1oas1_0199_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0150_mr1": 43, "mwrc1oas1_0150_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0189_mr1": 43, "mwrc1oas1_0189_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0207_mr1": 43, "mwrc1oas1_0207_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0071_mr1": 43, "mwrc1oas1_0071_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0061_mr1": 43, "mwrc1oas1_0061_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0120_mr1": 43, "mwrc1oas1_0120_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0056_mr1": 43, "mwrc1oas1_0056_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0223_mr1": 43, "mwrc1oas1_0223_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0065_mr1": 43, "mwrc1oas1_0065_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0054_mr1": 43, "mwrc1oas1_0054_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0099_mr1": 43, "mwrc1oas1_0099_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0023_mr1": 43, "mwrc1oas1_0023_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0064_mr1": 43, "mwrc1oas1_0064_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0181_mr1": 43, "mwrc1oas1_0181_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0217_mr1": 43, "mwrc1oas1_0217_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0144_mr1": 43, "mwrc1oas1_0144_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0042_mr1": 43, "mwrc1oas1_0042_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0178_mr1": 43, "mwrc1oas1_0178_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0218_mr1": 43, "mwrc1oas1_0218_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0002_mr1": 43, "mwrc1oas1_0002_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0059_mr1": 43, "mwrc1oas1_0059_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0167_mr1": 43, "mwrc1oas1_0167_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0145_mr1": 43, "mwrc1oas1_0145_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0169_mr1": 43, "mwrc1oas1_0169_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0115_mr1": 43, "mwrc1oas1_0115_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0111_mr1": 43, "mwrc1oas1_0111_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0131_mr1": 43, "mwrc1oas1_0131_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0098_mr1": 43, "mwrc1oas1_0098_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0082_mr1": 43, "mwrc1oas1_0082_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0136_mr1": 43, "mwrc1oas1_0136_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0227_mr1": 43, "mwrc1oas1_0227_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0022_mr1": 43, "mwrc1oas1_0022_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0212_mr1": 43, "mwrc1oas1_0212_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0079_mr1": 43, "mwrc1oas1_0079_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0119_mr1": 43, "mwrc1oas1_0119_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0016_mr1": 43, "mwrc1oas1_0016_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0104_mr1": 43, "mwrc1oas1_0104_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0203_mr1": 43, "mwrc1oas1_0203_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0114_mr1": 43, "mwrc1oas1_0114_mr1_mpr_anon_fslswapdim_bet": 43, "transform_single_img": [43, 48, 49, 52, 53, 56, 58, 326, 327, 328, 329, 330, 331, 332, 333, 407], "space_net": 43, "937": 43, "path_scor": 43, "_graph_net_squared_loss": 43, "0x7f651b9fb5e0": 43, "tol": [43, 187, 188, 190, 255, 256], "0001": [43, 255, 256], "n_alpha": [43, 188, 255, 256], "is_classif": 43, "debia": [43, 255, 256], "2652228933482088": 43, "1792": 43, "persist": [43, 48, 92], "happen": [43, 48, 92, 165, 180, 423], "caus": [43, 48, 49, 84, 92, 126, 153, 318], "wrap": [43, 48, 49, 52, 56, 92, 160, 415], "_____________________________________________________path_scor": 43, "3min": 43, "elaps": [43, 48], "68305325508118": 43, "3113842209180198": 43, "ax1": [43, 63, 387], "ax2": [43, 63, 387], "2487": [43, 45], "plot_oasis_vbm_space_net": [43, 45], "sketch": 44, "mathbf": 44, "opposit": [44, 71, 165], "corner": [44, 131, 153, 168, 317], "middl": [44, 66, 91, 114, 138, 146, 153, 233, 321], "__doc__": [44, 71, 72], "linalg": [44, 167], "ndimag": [44, 94, 179, 220, 242, 245, 309, 335, 336, 337, 339, 340], "gaussian_filt": 44, "f_regress": [44, 102, 105, 106, 111], "create_simulation_data": 44, "snr": [44, 173, 300, 419], "roi_siz": 44, "smooth_x": 44, "xx": 44, "randn": [44, 63], "xi": [44, 114, 206], "norm_nois": 44, "norm": [44, 55, 62, 76, 79, 101, 107, 108, 186, 192, 250, 251, 252, 253, 255, 256, 257, 258, 282, 379, 404, 405, 406, 407], "exp": 44, "noise_coef": 44, "log": [44, 49, 53, 77, 79, 94, 128, 153, 165, 167, 269, 272, 273, 274, 275, 311, 387], "1f": [44, 394, 397], "db": [44, 114, 274, 275], "plot_slic": 44, "hspace": [44, 49, 57], "bool": [44, 94, 103, 186, 187, 188, 190, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 212, 213, 214, 215, 218, 219, 220, 222, 223, 224, 226, 227, 228, 229, 231, 233, 239, 250, 251, 252, 253, 254, 255, 256, 257, 258, 277, 279, 282, 295, 297, 298, 300, 304, 306, 310, 313, 315, 316, 319, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 378, 379, 380, 381, 382, 383, 385, 386, 388, 389, 390, 391, 392, 393, 394, 396, 397, 399, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 416, 417, 418, 419, 420], "uint8": [44, 56, 91, 150, 153, 313], "recov": [44, 58, 134, 153, 154], "elast": 44, "bayesian": [44, 170], "metaprior": 44, "ridgecv": [44, 124, 153, 250, 251, 252, 253], "elasticnetcv": 44, "bayesian_ridg": 44, "bayesianridg": 44, "enet_cv": 44, "l1_ratio": [44, 255, 256], "ridge_cv": 44, "r2": [44, 145, 153, 251, 253, 274], "expos": [44, 49, 117, 125, 130, 134, 135, 153, 168, 178, 229, 230, 231, 232], "fairli": [44, 161, 170], "attribut": [44, 48, 49, 50, 84, 89, 116, 117, 125, 136, 145, 146, 148, 149, 150, 153, 154, 157, 158, 159, 165, 168, 178, 180, 186, 187, 188, 195, 199, 201, 204, 215, 218, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 250, 251, 252, 253, 255, 256, 257, 258, 264, 272, 273, 274, 275, 282, 302, 310, 323, 324, 327, 328, 329, 330, 331, 332, 333, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 394, 396, 397, 404, 405, 406, 407, 422, 423], "t1": [44, 75, 147, 153, 196, 219, 241, 243, 244, 246, 378, 436], "els": [44, 47, 68, 70, 72, 94, 100, 227, 250, 251, 252, 253, 255, 256, 395], "elapsed_tim": 44, "__class__": [44, 48, 49], "__name__": [44, 48, 49], "isnan": [44, 77, 94, 102, 105, 106], "90121459960938": 44, "65884325101778": 44, "626608546300274": 44, "750692619026909": 44, "760673187721368": 44, "7489677882956975": 44, "447062296177347": 44, "472103657545866": 44, "434158882363569": 44, "181430607304457": 44, "932134413049751": 44, "796119726462711": 44, "602565900982499": 44, "342023696642692": 44, "150422479149296": 44, "9348710846791075": 44, "7059697296398": 44, "490557363102972": 44, "294577726563705": 44, "09136480426398": 44, "8745069158772414": 44, "6819000072965795": 44, "492237749957346": 44, "2980804511427784": 44, "1079152507521073": 44, "9317636795564703": 44, "7546806025691244": 44, "5785501480102537": 44, "405682242187043": 44, "242079623566288": 44, "0882579472757157": 44, "9237797010436632": 44, "7659652219282826": 44, "6146938585770008": 44, "458707930020789": 44, "3008325742633515": 44, "1459687564977576": 44, "992681866978179": 44, "8333364020916162": 44, "6777843306114254": 44, "5157937139114969": 44, "355586452662989": 44, "19367389216930192": 44, "032019941112662736": 44, "exercic": 44, "recurs": [44, 49, 98, 114, 141, 153, 157, 163, 173, 174, 405, 406, 412], "elimin": [44, 98, 163, 166, 391, 392], "rfe": [44, 98, 163], "tip": [44, 175], "plot_simulated_data": [44, 45], "922": 45, "auto_examples_02_decod": 45, "1336": [45, 141, 153], "2020": [45, 102, 114, 142, 143, 144, 153, 201, 214], "918": 45, "1889": 45, "turn": [47, 66, 84, 155, 157, 167, 180, 282, 295, 335, 336, 337, 339, 340, 391, 392, 393, 400, 417], "find_parcellation_cut_coord": [47, 58, 138, 148, 153, 155, 376, 380], "find_probabilistic_atlas_cut_coord": [47, 50, 53, 138, 153, 155, 158, 375, 380], "intermediari": 47, "multiniftilabelsmask": [47, 123, 125, 153, 177, 438], "multiniftimapsmask": [47, 123, 125, 153, 177, 438], "connectivitymeasur": [47, 50, 51, 54, 56, 58, 99, 111, 125, 126, 128, 131, 134, 144, 153, 154, 155, 158], "fetch_atlas_yeo_2011": [47, 86, 155], "liber": [47, 79], "thick_17": [47, 210], "yeo_2011": 47, "yeo_jneurophysiol11_mni152": 47, "yeo2011_17networks_mni152_freesurferconformed1mm_liberalmask": 47, "fetch_development_fmri": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 85, 89, 91, 92, 95, 99, 104, 141, 153, 154, 155, 157, 158, 175, 180], "counfound": 47, "development_fmri": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "pixar123_task": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "pixar_spac": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "mni152nlin2009casym_desc": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "preproc_bold": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 100, 101, 104, 108], "pixar_desc": [47, 52, 53, 55, 56, 58], "reducedconfounds_regressor": [47, 52, 53, 55, 56, 58], "conenctivitymeasur": 47, "connectome_measur": [47, 50, 158], "labels_img": [47, 49, 56, 91, 94, 111, 155, 264, 327, 330, 375, 408, 410, 413], "time_seri": [47, 51, 52, 54, 56, 58, 154, 155], "mean_correlation_matrix": [47, 51], "mean_": [47, 51, 111, 154, 186], "strength": [47, 141, 144, 153, 317, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 436], "0x7f6511b99070": 47, "latter": [47, 161, 167, 186, 187, 188, 202, 203, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "lag_correl": 47, "lag_cor": 47, "corrcoef": 47, "lag_correlation_matrix": 47, "adjacency_matrix": [47, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 399], "maps_img": [47, 52, 53, 54, 155, 180, 327, 328, 330, 331, 376, 391, 407, 409, 411, 414], "cache_mixin": [47, 49, 52, 54], "current": [47, 49, 52, 54, 64, 68, 86, 150, 153, 165, 167, 168, 173, 176, 180, 190, 198, 199, 207, 233, 234, 270, 320, 322, 326, 327, 328, 329, 330, 331, 332, 333, 394, 396, 397, 400, 407], "1688": [47, 59], "plot_atlas_comparison": [47, 59], "fmr": 48, "exhibit": [48, 170, 180], "fluctuat": [48, 66, 167, 170, 173], "decomposit": [48, 50, 92, 97, 103, 109, 113, 114, 124, 126, 133, 136, 144, 150, 153, 158, 159, 174, 215, 306, 307, 312, 326, 329, 332, 393, 398, 407, 420], "simultan": [48, 167, 190], "priori": 48, "children": [48, 99, 141, 153, 174, 215], "young": [48, 114, 174, 198, 226, 233], "adult": [48, 51, 99, 114, 141, 153, 174, 215, 233], "watch": [48, 49, 50, 52, 54, 55, 85, 89, 92, 104, 141, 153, 156, 174, 175, 180, 215, 438], "movi": [48, 49, 50, 52, 54, 55, 85, 89, 92, 104, 141, 153, 156, 174, 175, 180, 215, 438], "algorithm": [48, 49, 89, 92, 94, 102, 104, 105, 116, 154, 157, 158, 159, 162, 163, 165, 173, 180, 181, 183, 187, 190, 233, 257, 258, 306, 338, 340, 404, 407, 409, 420], "preprint": 48, "rest_dataset": [48, 50, 53, 158], "faster": [48, 49, 104, 135, 153, 166, 167, 168, 229, 258, 315, 316, 385, 386, 392, 393, 400, 423], "n_compon": [48, 50, 92, 103, 104, 158, 257, 258, 412], "mask_strategi": [48, 89, 92, 104, 141, 147, 153, 180, 250, 251, 252, 253, 257, 258, 329, 332, 405], "compon": [48, 50, 54, 66, 92, 94, 97, 109, 113, 114, 126, 133, 134, 136, 144, 153, 155, 156, 157, 158, 170, 173, 178, 179, 186, 187, 188, 197, 207, 215, 226, 250, 251, 252, 253, 254, 255, 256, 257, 258, 272, 274, 275, 282, 295, 307, 309, 312, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 377, 393, 398, 404, 405, 406, 407, 408, 409, 420, 438], "components_img_": [48, 50, 136, 153, 158, 159, 257, 258], "canica_components_img": 48, "components_img": [48, 50, 158], "canica_resting_st": 48, "pixar124_task": 48, "pixar125_task": 48, "pixar126_task": 48, "pixar127_task": 48, "pixar128_task": 48, "pixar001_task": [48, 53, 85], "pixar002_task": [48, 53], "pixar003_task": [48, 53], "pixar004_task": 48, "pixar005_task": 48, "pixar006_task": 48, "pixar007_task": 48, "pixar008_task": 48, "pixar009_task": 48, "pixar010_task": 48, "pixar011_task": 48, "pixar012_task": 48, "pixar013_task": 48, "pixar014_task": 48, "pixar015_task": 48, "pixar016_task": 48, "pixar017_task": 48, "pixar018_task": 48, "pixar019_task": 48, "pixar020_task": 48, "pixar021_task": 48, "pixar022_task": 48, "pixar023_task": 48, "pixar024_task": 48, "self": [48, 49, 94, 168, 186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 269, 272, 273, 274, 275, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "functool": 48, "compute_multi_brain_mask": [48, 123, 147, 153, 329], "0x7f651df28a60": 48, "mask_typ": [48, 336, 339], "887": 48, "extmath": 48, "randomized_svd": 48, "003659": 48, "013254": 48, "012477": 48, "002881": 48, "transpos": [48, 144, 153, 167], "n_iter": [48, 49, 50, 220, 242, 245, 405, 406, 412], "___________________________________________________randomized_svd": 48, "_fastica": [48, 92, 104], "fastica": [48, 92, 103, 104, 257], "004071": 48, "000497": 48, "005856": 48, "004765": 48, "whiten": [48, 269, 273, 274, 275], "fun": 48, "cube": [48, 180, 416], "209652396": 48, "did": [48, 56, 92, 104, 132, 148, 153, 170], "toler": [48, 53, 92, 104, 167, 187, 188, 190, 255, 256, 304], "_________________________________________________________fastica": 48, "2min": [48, 56], "398764591": 48, "__________________________________________________________fastica": 48, "1min": [48, 53], "924231285": 48, "1478610112": 48, "441365315": 48, "1537364731": 48, "192771779": 48, "1491434855": 48, "1819583497": 48, "530702035": 48, "0x7f651c453ca0": 48, "cur_img": [48, 87], "ic": [48, 103], "natur": [48, 114, 117, 173, 215, 226, 229, 231], "cleaner": [48, 66, 138, 153], "compress": [48, 114, 138, 153, 156, 159, 178, 258, 438], "onlin": [48, 114, 159, 168, 258, 437], "isbi": [48, 114, 159, 257, 258], "2016": [48, 100, 114, 128, 129, 130, 131, 132, 153, 159, 216, 234, 258, 379], "lectur": [48, 114, 159, 175, 186], "dictlearn": [48, 50, 124, 126, 136, 153, 158, 159], "dict_learn": [48, 50, 158], "n_epoch": [48, 258], "umask": 48, "dictlearning_components_img": 48, "dictionary_learning_resting_st": 48, "001315": 48, "004387": 48, "011243": 48, "004194": 48, "00289": 48, "002135": 48, "005107": 48, "012507": 48, "_compute_load": 48, "006976": 48, "000354": 48, "001071": 48, "014515": 48, "622651": 48, "322742": 48, "777205": 48, "743122": 48, "_________________________________________________compute_load": 48, "_dict_learn": [48, 50], "dict_learning_onlin": 48, "batch_siz": [48, 258, 404], "cd": [48, 176, 258], "dict_init": [48, 258], "100168": 48, "223721": 48, "010031": 48, "327727": 48, "return_cod": 48, "futurewarn": [48, 50], "deprec": [48, 50, 111, 123, 124, 125, 128, 132, 133, 134, 135, 136, 138, 139, 141, 143, 144, 146, 148, 150, 153, 168, 176, 185, 186, 198, 199, 207, 235, 250, 251, 252, 253, 257, 258, 285, 326, 327, 328, 329, 330, 331, 332, 333, 343, 379, 405, 407, 410, 411], "_____________________________________________dict_learning_onlin": 48, "0x7f651c40ed90": 48, "comp": [48, 197], "per_compon": [48, 144, 153, 257, 258, 405], "ticker": [48, 49], "formatstrformatt": 48, "gca": [48, 51, 99], "xaxi": [48, 49], "set_major_formatt": [48, 49], "_explained_vari": 48, "227098e": 48, "322679e": 48, "977029e": 48, "807597e": 48, "______________________________________________explained_vari": 48, "2559": [48, 59], "plot_compare_decomposit": [48, 59, 141, 153], "constrain": [49, 50, 114, 157, 174, 199, 204, 405], "agglomer": [49, 114, 173, 174, 252, 253, 404, 405, 406, 412], "regim": 49, "subsequ": [49, 84, 180, 229, 231, 233, 323, 324], "empir": [49, 157, 164, 165, 166, 167, 187, 190, 324, 438], "baptist": [49, 114, 187, 224, 229, 231, 257], "polin": [49, 64, 67, 114, 117, 187, 224, 229, 231, 257, 300, 419], "good": [49, 56, 65, 66, 116, 133, 153, 154, 157, 159, 161, 162, 163, 164, 166, 167, 168, 169, 176, 178, 180, 229, 252, 253, 374, 438], "2014": [49, 100, 102, 114, 157, 158, 165, 166, 226, 323, 343, 407], "supervis": [49, 161, 163, 164, 173, 175], "evelyn": [49, 114, 166], "eger": [49, 114, 166], "christin": [49, 114, 239], "keribin": 49, "elsevi": 49, "pictur": [49, 116, 157, 165, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423], "discuss": [49, 56, 111, 138, 153, 157, 160, 163, 165, 170, 172, 176, 179, 324, 343, 437], "long": [49, 117, 168, 170, 323, 324, 379], "agglom": [49, 141, 153, 157, 405], "_estimator_fit": 49, "005457": 49, "005033": 49, "009986": 49, "000234": 49, "agglomerativeclust": [49, 405], "24256x24256": 49, "162682": 49, "element": [49, 131, 150, 153, 159, 165, 173, 186, 192, 193, 196, 250, 251, 252, 253, 254, 264, 265, 300, 317, 326, 327, 328, 329, 330, 331, 332, 333, 339, 388, 407, 413, 419, 423], "n_cluster": [49, 404, 406, 412], "_agglom": 49, "ward_tre": 49, "return_dist": 49, "________________________________________________________ward_tre": 49, "____________________________________________________estimator_fit": 49, "966": [49, 79], "labels_img_": [49, 157, 327, 330, 405], "ward_labels_img": 49, "ward_parcel": 49, "first_plot": 49, "effect": [49, 53, 60, 61, 64, 66, 69, 70, 71, 73, 75, 79, 80, 89, 95, 100, 102, 113, 114, 125, 137, 153, 159, 161, 165, 167, 169, 170, 180, 186, 187, 188, 202, 203, 217, 230, 250, 251, 252, 253, 254, 255, 256, 257, 258, 270, 271, 272, 274, 275, 276, 278, 279, 282, 285, 295, 297, 312, 324, 326, 327, 328, 329, 330, 331, 332, 333, 343, 378, 391, 392, 393, 398, 400, 404, 405, 406, 407], "approxim": [49, 64, 71, 114, 157, 274, 275, 322, 406, 412], "mask_img_": [49, 66, 77, 79, 89, 92, 116, 180, 250, 251, 252, 253, 255, 256, 257, 258, 265, 327, 329, 330, 332], "original_voxel": 49, "mean_func_img": [49, 92], "min": [49, 53, 55, 58, 102, 103, 146, 147, 153, 315, 316, 378, 379, 383, 385, 386, 388, 389, 391, 392, 393, 394, 396, 397, 400, 401, 403], "opportun": 49, "fmri_reduc": 49, "fmri_compress": 49, "60000": 49, "base_mask": [49, 52, 53, 56, 58, 92], "_filter_and_extract": [49, 52, 53, 54, 56, 58], "0x7f651d27caf0": 49, "nifti_labels_mask": [49, 56, 91], "_extractionfunctor": [49, 52, 53, 56, 58], "0x7f651a043ee0": 49, "background_label": [49, 56, 91, 180, 327, 330, 375, 410, 413], "keep_masked_label": [49, 56, 91, 125, 153, 330, 410], "0x7f651c4cdaf0": 49, "0x7f651c4cdfa0": 49, "niftilabelsmask": [49, 54, 56, 83, 94, 96, 113, 125, 138, 139, 141, 144, 145, 146, 148, 150, 153, 155, 177, 202, 215, 326, 327, 328, 331, 410, 413, 415, 438], "_______________________________________________filter_and_extract": [49, 52, 53, 56, 58], "0x7f651d928a90": 49, "But": [49, 80, 98, 158, 167, 170, 180], "10mm": 49, "ON": 49, "002844": 49, "000787": 49, "00577": 49, "000616": 49, "minibatchkmean": [49, 404, 405], "n_init": [49, 257, 404], "kmeans_labels_img": 49, "kmeans_parcel": 49, "grow": [49, 154], "unbalanc": 49, "singleton": [49, 326, 327, 328, 329, 330, 331, 332, 333, 407], "tailor": [49, 69, 157], "enforc": [49, 89, 150, 153, 154, 167, 168, 255, 256, 282], "root": [49, 167, 186, 202, 203, 273, 323, 404, 405, 406], "piec": [49, 178, 438], "adapt": [49, 65, 116, 158, 161, 168, 282, 291, 323], "hierarchical_kmean": [49, 148, 153, 405], "hkmean": 49, "hierarchicalkmean": [49, 148, 153], "x27": [49, 62, 89, 91], "parcellationsparcel": 49, "hkmeans_labels_img": 49, "hierarchical_kmeans_parcel": 49, "count": [49, 101, 125, 153, 229, 231, 272], "kmeans_count": 49, "return_count": 49, "hkmeans_count": 49, "voxel_ratio": 49, "round": [49, 394, 397], "3000": [49, 102], "nrow": [49, 63, 79, 100, 101], "sharex": 49, "gridspec_kw": [49, 80, 100], "height_ratio": 49, "semilogx": 49, "hist": [49, 70, 387], "set_ylim": 49, "scalarformatt": 49, "yaxi": 49, "set_label_coord": 49, "ec": 49, "0x7f651a4f2220": 49, "thousand": [49, 180, 405], "properti": [49, 71, 163, 167, 170, 173, 180, 259, 282, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "notabl": [49, 155], "constraint": [49, 157, 167, 320], "kahn": [49, 114, 406, 412], "ieee": [49, 114, 166, 257, 258, 406, 412], "transact": [49, 114, 166], "pp": 49, "march": [49, 120, 136, 145, 153, 254], "2019": [49, 51, 99, 114, 139, 140, 141, 153, 214, 406, 412], "hal": [49, 114, 166, 407], "archiv": [49, 233], "ouvert": 49, "01366651": 49, "0x7f651a294c40": 49, "rena_clust": [49, 123, 153], "recursive_neighbor_agglomer": [49, 123, 153], "_________________________________recursive_neighbor_agglomer": 49, "0x7f651d1dd9a0": 49, "0x7f651d7723a0": 49, "0x7f650ff1eaf0": 49, "0x7f650ff1ea60": 49, "rena_labels_img": 49, "rena_parcel": 49, "0x7f651a04dee0": 49, "fmri_reduced_rena": 49, "compressed_img_rena": 49, "0x7f65126a9460": 49, "0x7f651b8364c0": 49, "0x7f65126a9ac0": 49, "0x7f65126a9f70": 49, "0x7f6512911ca0": 49, "notic": [49, 58, 66, 101, 108, 110, 111, 113, 320], "accur": [49, 58, 66, 69, 141, 149, 153, 165, 169, 170], "said": [49, 170], "2195": [49, 59, 141, 153], "plot_data_driven_parcel": [49, 59], "regionextractor": [50, 87, 126, 128, 134, 139, 153, 158, 408, 409], "decompos": [50, 154, 158, 170, 407], "inspir": [50, 166, 168, 176], "idea": [50, 88, 94, 160, 167, 170], "canica": [50, 123, 124, 136, 147, 153, 156, 173, 258, 329, 438], "instanti": [50, 51, 91, 148, 153, 254, 354, 356, 359, 361, 363, 365, 367, 369, 371], "0x7f651a44faf0": 50, "nomin": 50, "nonzero": [50, 317, 407], "surviv": [50, 145, 153, 270, 407], "extractor": [50, 87, 158, 407, 409], "thresholding_strategi": [50, 87, 158, 407], "ratio_n_voxel": [50, 158, 407], "local_region": [50, 158, 407, 409], "min_region_s": [50, 87, 88, 158, 407, 409], "regions_img_": [50, 87, 158, 407], "regions_extracted_img": [50, 158, 409], "index_": [50, 87, 158, 407], "regions_index": [50, 158], "n_regions_extract": [50, 158], "neach": [50, 158], "0x7f65061f43a0": 50, "those": [50, 62, 66, 69, 71, 80, 89, 108, 148, 153, 159, 161, 163, 167, 168, 170, 176, 229, 319, 322, 330, 379, 401, 407, 410, 413, 414, 423], "timeseries_each_subject": [50, 158], "mean_correl": [50, 158], "regions_img": [50, 87, 158], "coords_connectom": [50, 158], "0x7f6506ac7d00": 50, "find_xyz_cut_coord": [50, 87, 128, 135, 153, 158], "side": [50, 53, 63, 66, 94, 102, 123, 145, 153, 165, 229, 270, 335, 338, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 379, 387, 388, 416, 417], "nice": [50, 158], "regions_indices_of_map3": [50, 158], "rgbcmyk": [50, 158], "each_index_of_map3": [50, 158], "add_overlai": [50, 121, 153, 158, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 436], "alpha_cmap": [50, 158], "964": [50, 59], "1147": [50, 59], "plot_extract_regions_dictlearning_map": [50, 59], "tangent": [51, 99, 134, 153, 158, 186], "embed": [51, 99, 415], "outperform": [51, 99, 154, 159], "dadi": [51, 99, 114, 201], "care": [51, 99, 116, 160, 161, 163, 167, 205, 206, 269], "development_dataset": [51, 99], "msdl_data": [51, 99], "msdl_coord": [51, 99], "region_coord": [51, 52, 54, 99, 130, 153, 204], "n_region": [51, 91], "aud": 51, "striat": 51, "occ": 51, "att": 51, "basal": 51, "vi": 51, "sec": [51, 215], "salienc": [51, 214], "languag": [51, 64, 67, 100, 101, 108, 117, 211, 221, 224], "cereb": [51, 71], "dor": 51, "cing": 51, "Ins": 51, "ant": 51, "ip": 51, "niftimapsmask": [51, 52, 53, 54, 91, 99, 120, 125, 138, 145, 148, 153, 155, 177, 328, 330, 407, 411, 414, 438], "filter": [51, 55, 56, 58, 66, 68, 94, 103, 115, 116, 121, 123, 124, 138, 141, 146, 148, 150, 153, 160, 173, 177, 179, 194, 229, 231, 233, 249, 250, 251, 252, 253, 255, 256, 257, 258, 282, 285, 300, 317, 319, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 405, 407, 418, 419, 438], "band": [51, 58, 150, 153, 194, 323, 418], "resampling_target": [51, 53, 54, 91, 94, 99, 180, 327, 328, 330, 331], "phenotyp": [51, 62, 99, 149, 153, 160, 164, 177, 194, 195, 215, 239, 438], "pooled_subject": 51, "func_fil": 51, "confound_fil": 51, "child_adult": [51, 99], "simpler": 51, "commonli": [51, 157, 169, 173, 175, 180, 324], "margin": [51, 315], "pairwis": [51, 154], "correlation_measur": [51, 54, 56], "individu": [51, 58, 62, 66, 69, 72, 76, 78, 79, 80, 81, 94, 100, 101, 108, 114, 154, 159, 172, 173, 175, 177, 180, 186, 187, 212, 224, 297, 341, 395, 438], "2d": [51, 54, 84, 91, 92, 98, 103, 115, 150, 153, 160, 163, 177, 180, 187, 188, 189, 190, 191, 257, 258, 269, 278, 302, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 344, 346, 347, 348, 349, 350, 351, 352, 353, 358, 360, 362, 364, 366, 368, 370, 385, 404, 405, 406, 407, 413, 414, 421, 423, 429, 438], "reflect": [51, 101, 154, 168, 170, 198, 391, 392], "visibl": [51, 79, 147, 153, 159, 315, 388, 394, 396, 397, 401, 403, 436], "0x7f651a4f2d90": 51, "reveal": [51, 101, 102, 165], "partial_correlation_measur": 51, "partial_correlation_matric": 51, "weaker": [51, 66, 79], "0x7f6506cdf940": 51, "tangent_measur": 51, "deviat": [51, 154, 250, 251, 252, 253, 255, 256], "tangent_matric": 51, "perturb": 51, "anticorrel": [51, 114, 324], "distinguish": [51, 94, 98, 99, 161, 165, 170, 174, 178], "stratifiedshufflesplit": [51, 99], "preserv": [51, 58, 99, 305, 317, 388, 404, 405, 406], "linearsvc": [51, 98, 99, 165, 250, 252], "return_invers": 51, "test_siz": [51, 99], "1d": [51, 102, 105, 106, 116, 150, 153, 178, 180, 186, 254, 272, 274, 275, 278, 284, 300, 322, 326, 327, 328, 329, 330, 331, 332, 333, 354, 361, 365, 371, 374, 407, 408, 413, 418, 419, 421, 423], "mean_scor": [51, 99], "scores_std": [51, 99], "align": [51, 56, 91, 99, 316, 318, 385], "xerr": [51, 99], "set_axisbelow": [51, 99], "axvlin": 51, "linestyl": 51, "showcas": [51, 60, 74, 76, 99, 110, 113, 157, 162, 168], "larger": [51, 75, 80, 86, 99, 159, 161, 165, 167, 168, 170, 255, 256, 378, 391, 392, 393, 400], "cohort": [51, 99], "1189": [51, 59], "plot_group_level_connect": [51, 59, 134, 141, 153], "link": [52, 114, 117, 125, 131, 138, 143, 153, 156, 160, 163, 168, 170, 173, 176, 196, 201, 226, 239, 345, 355, 356, 380, 438], "negat": [52, 83, 96, 113, 247, 311, 393, 398], "dens": [52, 54, 154, 167, 337], "highest": [52, 54, 250, 251, 252, 253, 285, 306, 420], "resample_img": [52, 54, 71, 84, 89, 93, 124, 135, 141, 150, 153, 179, 180, 229, 257, 258, 282, 295, 314, 316, 329, 332, 335, 337, 338, 340, 405], "0x7f651d192d60": 52, "_____________________________________________________resample_img": 52, "nifti_maps_mask": [52, 53], "0x7f651d192400": 52, "allow_overlap": [52, 53, 54, 58, 328, 331, 333], "keep_masked_map": [52, 53, 54, 125, 153, 331, 411], "msdl_atla": [52, 53, 54], "msdl_roi": [52, 53, 54, 204], "graphicallassocv": [52, 53, 57, 58, 154, 167, 188], "scitkit": [52, 53, 57, 58], "v0": [52, 53, 57, 58, 138, 141, 146, 148, 153, 206], "graphlassocv": [52, 53, 57, 58], "graphicallassocvgraphicallassocv": [52, 53, 58], "covariance_": [52, 53, 58, 154], "axesimag": [52, 54, 56], "0x7f651c4cab50": 52, "0x7f651d186b50": 52, "precision_": [52, 53, 57, 154], "0x7f6506897c10": 52, "1187": [52, 59, 99], "plot_inverse_covariance_connectom": [52, 59], "plot_matric": 53, "cov": [53, 272, 274, 275, 437], "prec": [53, 167], "put": [53, 54, 64, 67, 71, 98, 121, 153, 168, 186, 250, 251, 252, 253, 257, 258, 282, 327, 328, 329, 330, 331, 332, 333, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 379, 405, 407, 419], "diagon": [53, 54, 56, 58, 86, 131, 153, 167, 179, 186, 190, 192, 193, 314, 315, 374, 390, 408], "clariti": 53, "span": [53, 71, 170, 378, 391, 392, 393, 400], "msdl_atlas_dataset": 53, "subject_time_seri": 53, "confound_filenam": [53, 55], "region_t": 53, "__________________________________________high_variance_confound": 53, "0x7f651c48e0d0": 53, "174325": 53, "048779": 53, "044073": 53, "155444": 53, "0x7f651db13f10": 53, "151677": 53, "057023": 53, "206928": 53, "102714": 53, "0x7f651d70dcd0": 53, "127944": 53, "087084": 53, "015679": 53, "02587": 53, "0x7f651db13ac0": 53, "089762": 53, "062316": 53, "065223": 53, "022868": 53, "groupsparsecovariancecv": [53, 57, 154, 167], "gsc": [53, 57], "gl": [53, 57], "likelihood": [53, 167, 170, 186, 269, 272, 273, 274, 275], "decreas": [53, 66, 95, 167, 168, 378, 391, 392, 393, 400], "stop": [53, 97, 109, 113, 114, 117, 166, 187, 190, 229, 231, 305, 310, 311, 313, 385, 393, 398, 404], "refin": [53, 57, 58, 188], "optim": [53, 57, 100, 114, 141, 145, 153, 161, 163, 166, 167, 188, 190, 201, 315, 316], "reach": [53, 167, 168, 170, 175, 229, 323], "841e": 53, "graphical_lasso": 53, "68e": 53, "gap": [53, 187, 190], "123e": 53, "664e": 53, "158e": 53, "389e": 53, "530e": 53, "318e": 53, "844e": 53, "atlas_region_coord": [53, 155], "graphicallasso": [53, 154], "edge_vmax": [53, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380], "edge_vmin": [53, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380], "groupsparsecovari": [53, 154, 167, 188], "precisions_": [53, 57, 154, 187, 188], "covariances_": [53, 154, 187, 188], "plot_multi_subject_connectom": [53, 59], "________________________________________resample_img": 54, "__________________________________filter_and_extract": [54, 56], "generate_report": [54, 89, 91, 92, 125, 148, 151, 153, 180, 282, 295, 327, 328, 329, 330, 331, 332, 407], "displayed_map": [54, 328, 331, 407], "contrarili": [54, 91, 330, 331], "summar": [54, 91, 160, 168, 274, 330, 331, 333, 416], "pca": [54, 257, 331], "nan": [54, 56, 91, 94, 103, 121, 125, 128, 133, 141, 145, 153, 233, 300, 315, 328, 331, 334, 337, 388, 394, 396, 397, 401, 403, 419, 423], "miss": [54, 77, 84, 125, 147, 153, 168, 173, 289, 328, 331, 337, 340], "correlation_matrix": [54, 56, 436], "major": [54, 94, 168, 175], "fill_diagon": [54, 56], "0x7f651d6f3850": 54, "plot_probabilistic_atlas_extract": [54, 59], "depict": [55, 168, 179], "advanc": [55, 109, 114, 160, 162, 163, 168, 169, 175, 179, 218, 250, 252, 253, 307, 326, 332, 379, 393, 438], "lie": [55, 187, 190, 330, 410], "1st": 55, "hard": [55, 155, 167, 173, 178], "drive": 55, "wide": [55, 71, 105, 114, 160, 161, 163, 167, 168, 216, 234, 254], "pcc_coord": [55, 61, 169], "niftispheresmask": [55, 58, 61, 70, 100, 122, 126, 128, 139, 143, 145, 153, 169, 177, 438], "bandpass": 55, "seed_mask": [55, 61, 100, 169], "seed_time_seri": [55, 61, 169], "brain_mask": [55, 100], "brain_time_seri": 55, "n_volum": 55, "32504": 55, "exemplarili": 55, "seed_to_voxel_correl": 55, "954": 55, "extrem": [55, 121, 153, 416], "seed_to_voxel_correlations_img": 55, "marker_coord": [55, 61, 100, 139, 141, 153, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 402], "At": [55, 63, 65, 69, 77, 80, 91, 158, 175, 176, 295, 297], "pcc_seed_correl": 55, "seed_to_voxel_correlations_fisher_z": 55, "arctanh": 55, "762": [55, 104, 109], "874f": 55, "eventu": [55, 436], "seed_to_voxel_correlations_fisher_z_img": 55, "pcc_seed_correlation_z": 55, "765": [55, 59], "plot_seed_to_voxel_correl": [55, 59, 139, 153], "movement": [56, 175, 180], "load_confound": [56, 66, 124, 125, 148, 153, 155, 180, 324], "flexibli": 56, "guidelin": [56, 94, 123, 147, 150, 153, 160, 176], "en": [56, 170, 196, 324, 327], "craddock": [56, 114, 150, 153, 154, 155, 199, 204, 239], "2013": [56, 114, 141, 153, 154, 155, 165, 166, 194, 198, 204, 323], "reorder": [56, 136, 153, 314, 374, 390], "reduce_confound": [56, 215], "reduced_confound": 56, "preselect": 56, "metadata": [56, 91, 117, 124, 141, 153, 179, 186, 187, 188, 229, 230, 231, 232, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 322, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "nifti1head": [56, 91], "endian": [56, 91, 134, 153, 309, 315], "sizeof_hdr": [56, 91], "data_typ": [56, 91], "db_name": [56, 91], "extent": [56, 91, 95, 173, 356, 359], "session_error": [56, 91], "dim_info": [56, 91], "intent_p1": [56, 91], "intent_p2": [56, 91], "intent_p3": [56, 91], "intent_cod": [56, 91], "datatyp": [56, 91], "bitpix": [56, 91], "slice_start": [56, 91], "pixdim": [56, 91], "vox_offset": [56, 91], "scl_slope": [56, 91], "scl_inter": [56, 91], "slice_end": [56, 91], "slice_cod": [56, 91], "xyzt_unit": [56, 91], "cal_max": [56, 91], "cal_min": [56, 91], "slice_dur": [56, 91], "toffset": [56, 91], "glmax": [56, 91], "glmin": [56, 91], "descrip": [56, 91], "aux_fil": [56, 91], "qform_cod": [56, 91], "sform_cod": [56, 91], "quatern_b": [56, 91], "quatern_c": [56, 91], "quatern_d": [56, 91], "qoffset_x": [56, 91], "qoffset_i": [56, 91], "qoffset_z": [56, 91], "srow_x": [56, 91], "srow_i": [56, 91], "srow_z": [56, 91], "intent_nam": [56, 91], "magic": [56, 91, 378, 385, 386, 388, 392, 393], "0x7f6519dc7ac0": 56, "0x7f6519e1db80": 56, "0x7f6519ee9c10": 56, "cover": [56, 168, 180, 212, 214, 374], "firstli": 56, "bad": [56, 105, 167, 168], "No": [56, 66, 77, 91, 105, 167, 168, 316], "0x7f651c4ac1c0": 56, "0x7f6519f8d5e0": 56, "ensur": [56, 58, 100, 138, 145, 153, 165, 167, 168, 170, 176, 234, 270, 295, 297, 330, 344, 346, 347, 410], "steadi": [56, 66, 146, 153, 282, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 407, 419], "correctli": [56, 66, 93, 139, 141, 142, 150, 151, 153, 163, 170, 176, 282, 323, 324, 437], "confounds_simpl": 56, "wm_csf": [56, 323, 324], "cosine00": 56, "cosine01": 56, "cosine02": 56, "cosine03": 56, "rot_x": 56, "rot_i": 56, "rot_z": 56, "trans_x": 56, "trans_i": 56, "trans_z": 56, "white_matt": 56, "0x7f651b699d30": 56, "109104": 56, "109090": 56, "109066": 56, "026078": 56, "055006": 56, "876886": 56, "108937": 56, "108723": 56, "027587": 56, "049458": 56, "418909": 56, "108990": 56, "108632": 56, "108038": 56, "019085": 56, "075787": 56, "540842": 56, "108875": 56, "108176": 56, "107012": 56, "023900": 56, "053022": 56, "922085": 56, "107567": 56, "105651": 56, "033396": 56, "077764": 56, "843388": 56, "064873": 56, "022169": 56, "221217": 56, "064266": 56, "042248": 56, "237783": 56, "053241": 56, "029500": 56, "590905": 56, "081559": 56, "034236": 56, "122246": 56, "069287": 56, "007294": 56, "000828": 56, "0x7f651d429ee0": 56, "exceed": [56, 135, 153], "framewis": [56, 215, 323], "displac": [56, 215, 323], "standardis": 56, "dvar": [56, 323], "five": [56, 66, 405], "percentag": [56, 160, 250, 251, 252, 253], "volumn": [56, 323], "suitabl": [56, 69, 138, 153, 161, 165, 180, 227, 324], "confounds_scrub": 56, "fd_threshold": [56, 323, 324], "std_dvars_threshold": [56, 323, 324], "0x7f651ccb7370": 56, "097319": 56, "110228": 56, "100980": 56, "024472": 56, "048861": 56, "796008": 56, "097281": 56, "110075": 56, "100637": 56, "025982": 56, "043313": 56, "338031": 56, "097205": 56, "109770": 56, "099952": 56, "017480": 56, "069643": 56, "459963": 56, "097090": 56, "109313": 56, "098926": 56, "022294": 56, "046877": 56, "841207": 56, "096938": 56, "108705": 56, "097565": 56, "031791": 56, "071620": 56, "762509": 56, "120508": 56, "113737": 56, "066478": 56, "028314": 56, "302095": 56, "120661": 56, "115099": 56, "062660": 56, "048393": 56, "318661": 56, "120775": 56, "116124": 56, "054846": 56, "035645": 56, "671784": 56, "120851": 56, "116809": 56, "079953": 56, "040381": 56, "203124": 56, "120889": 56, "117152": 56, "070892": 56, "013439": 56, "081706": 56, "0x7f651ba3ba90": 56, "grand": [56, 282], "physiolog": [56, 66, 70, 324], "artifact": [56, 114, 180, 300, 323, 324, 419], "minim": [56, 62, 168, 173, 282, 284, 289, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 391], "degre": [56, 68, 100, 107, 170, 270, 273, 279, 324, 394, 396, 397], "freedom": [56, 100, 107, 155, 170, 270, 273, 279, 324], "downsid": [56, 66], "confounds_minimal_no_gsr": 56, "global_sign": [56, 323, 324], "gsr": 56, "0x7f651c3ec7f0": 56, "0x7f651db02370": 56, "load_confounds_strategi": [56, 148, 153, 155, 180, 323], "benchmark": [56, 114, 166, 323, 324], "compcor": [56, 66, 114, 148, 153, 155, 215, 306, 323, 324, 420], "ica_aroma": [56, 148, 153, 323, 324], "denoise_strategi": [56, 324], "rastko": [56, 114, 323, 324], "ciric": [56, 114, 323, 324], "wolf": [56, 58, 114, 167, 323, 324], "jonathan": [56, 58, 114, 166, 206, 210, 212, 213, 277, 323, 324, 379], "roalf": [56, 114, 323, 324], "graham": [56, 114, 323, 324], "baum": [56, 114, 323, 324], "kosha": [56, 114, 323, 324], "ruparel": [56, 114, 323, 324], "russel": [56, 100, 114, 117, 175, 227, 229, 231, 239, 274, 275, 323, 324], "shinohara": [56, 114, 323, 324], "eickhoff": [56, 114, 206, 207, 323, 324], "christo": [56, 114, 323, 324], "davatziko": [56, 114, 323, 324], "ruben": [56, 114, 323, 324], "gur": [56, 114, 323, 324], "raquel": [56, 114, 323, 324], "bassett": [56, 114, 323, 324], "theodor": [56, 114, 323, 324], "satterthwait": [56, 114, 323, 324], "2017": [56, 114, 133, 134, 135, 153, 160, 162, 205, 206, 224, 252, 253, 323, 324, 379, 433], "linden": [56, 114, 324], "park": [56, 114, 324], "fulcher": [56, 114, 324], "murat": [56, 114, 324], "y\u00fccel": [56, 114, 324], "fornito": [56, 114, 324], "evalu": [56, 114, 163, 167, 173, 209, 250, 251, 252, 253, 269, 273, 324, 416, 417], "efficaci": [56, 114, 324], "reliabl": [56, 114, 138, 153, 170, 224, 324], "2018": [56, 76, 114, 136, 137, 138, 153, 162, 205, 206, 215, 252, 253, 277, 300, 324, 406, 412, 419], "plot_signal_extract": [56, 59, 180], "data_gen": [57, 124, 150, 153, 167], "generate_group_sparse_gaussian_graph": [57, 167], "n_displai": 57, "min_n_sampl": 57, "max_n_sampl": 57, "max_precis": 57, "alpha_": [57, 188], "group_sparse_cov": 57, "instabl": [57, 66, 167, 418], "plot_simulated_connectom": [57, 59], "spheric": 58, "nardo": [58, 114, 212], "matur": [58, 114, 212], "1358": [58, 114, 212], "1361": [58, 114, 212], "dmn_coord": [58, 180, 436], "temporopariet": 58, "junction": 58, "prefront": 58, "sequenc": [58, 61, 64, 66, 69, 79, 111, 125, 153, 160, 169, 173, 178, 180, 224, 250, 251, 252, 253, 272, 274, 275, 282, 295, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 394, 396, 397, 399, 417, 418, 423], "clean__butterworth__padtyp": 58, "butterworth": [58, 123, 124, 146, 150, 153, 300, 327, 328, 329, 330, 331, 332, 333, 419], "confounds_filenam": 58, "nifti_spheres_mask": 58, "0x7f651c7aee80": 58, "butterworth__padtyp": 58, "Its": [58, 154, 162, 167, 254, 275, 282, 295, 298, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 417], "ledoit": [58, 167], "connectivity_measur": 58, "partial_correlation_matrix": 58, "0x7f651a6487f0": 58, "suppli": [58, 254, 255, 256, 289, 323, 330, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 410, 419], "fetch_coords_power_2011": 58, "dict_kei": 58, "collect": [58, 100, 103, 107, 114, 115, 168, 173, 229, 230, 231, 232, 323, 438], "spheres_mask": 58, "exce": [58, 188], "graphic": [58, 114, 154, 167, 168, 181, 187, 190], "covariance_estim": 58, "_method": 58, "subtract": [58, 66, 101, 175, 230], "tweak": [58, 89, 158], "strongest": 58, "node_s": [58, 139, 141, 148, 153, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 389, 399], "0x7f651cea8700": 58, "sometim": [58, 66, 80, 117, 121, 125, 153, 160, 168, 173, 269, 273], "overwhelm": 58, "plot_mark": [58, 144, 148, 150, 153, 436], "node_strength": 58, "0x7f651c550580": 58, "clip": [58, 84, 315, 316], "positive_edg": 58, "negative_edg": 58, "node_strength_posit": 58, "node_strength_neg": 58, "node_cmap": [58, 389], "ylorrd": 58, "pubu": 58, "0x7f6512f9b460": 58, "fetch_coords_dosenbach_2010": [58, 129, 132, 153], "0x7f6510ae9a00": 58, "cerebellum": [58, 114, 212, 214, 226], "cingulo": 58, "opercular": [58, 91], "fronto": [58, 101], "occipit": [58, 91], "sensorimotor": 58, "plot_sphere_based_connectom": [58, 59, 141, 153], "992": 59, "auto_examples_03_connect": 59, "focus": [60, 74, 98, 110, 113, 116, 130, 136, 153, 161, 164, 165, 168], "adhd": [60, 73, 85, 113, 141, 150, 153, 154, 169, 195, 282, 289, 326, 333, 356, 393, 415, 417], "finit": [60, 73, 77, 79, 103, 113, 134, 153, 169, 173, 225, 282, 284, 289, 300, 317, 334, 337, 378, 381, 382, 392, 393, 419], "impul": [60, 73, 113, 225, 282, 381, 382, 393], "fir": [60, 63, 73, 113, 169, 173, 225, 282, 284, 289, 381, 382, 393], "residu": [60, 62, 73, 113, 148, 153, 165, 171, 236, 256, 269, 270, 273, 274, 275, 282, 295, 300, 301, 312, 317, 326, 333, 337, 371, 393, 416, 438], "openneuro": [60, 73, 113, 169, 215, 216, 234, 235, 249, 282, 285, 322, 325, 332, 381, 385, 387, 415, 416, 417], "understand": [60, 73, 83, 96, 113, 132, 153, 161, 163, 168, 175, 177, 215, 220, 222, 223, 225, 228, 282, 306, 307, 312, 316, 323, 326, 332, 337, 381, 382, 383, 392, 393, 398, 415, 438], "workflow": [61, 168, 324], "determin": [61, 79, 94, 100, 101, 102, 107, 165, 167, 168, 188, 256, 285, 296, 320, 335, 336, 337, 338, 339, 340, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 385, 386, 388, 392, 393, 400, 404, 423], "make_first_level_design_matrix": [61, 63, 69, 71, 108, 148, 153, 169], "frametim": 61, "add_subplot": [61, 91], "set_titl": [61, 63, 70, 75, 78, 79, 80, 91, 100, 105], "add_reg": [61, 63, 108, 169, 289], "add_reg_nam": [61, 63, 289], "pcc_seed": 61, "dmn_contrast": 61, "seed_based_glm": 61, "setup": [61, 69, 108, 124, 149, 153, 172, 194, 195, 196, 197, 198, 199, 200, 204, 207, 208, 210, 218, 219, 222, 223, 224, 227, 228, 233, 239, 407, 437], "first_level_model": [61, 65, 66], "run_img": [61, 101, 108, 282], "design_matric": [61, 62, 64, 67, 71, 100, 169, 282], "snapshot": 61, "dmn_z_map": 61, "portabl": [61, 75, 180], "readi": [61, 75, 116, 132, 153, 159, 168, 176], "pertin": [61, 75], "min_dist": [61, 282, 295, 416, 417], "plot_typ": [61, 282, 295, 417], "plot_adhd_dmn": [61, 73], "exploit": [62, 159, 167], "io": [62, 101, 146, 153, 158, 194, 201, 205, 215, 224, 401, 437], "s3": 62, "bucket": 62, "assur": 62, "nistat": [62, 123, 127, 144, 153], "against": [62, 160, 169, 173, 229, 297, 343, 390], "stopsign": 62, "ds000030": [62, 216], "v4": 62, "emploi": [62, 172, 173, 416, 417], "fetch_ds000030_url": [62, 150, 153, 234], "fetch_openneuro_dataset": 62, "select_from_index": 62, "exclusion_pattern": 62, "mriqc": 62, "parameter_plot": 62, "physio_plot": 62, "t1w": 62, "dwi": 62, "beh": 62, "bart": 62, "scap": 62, "exclusion_filt": [62, 249], "data_dir": [62, 100, 101, 108, 147, 153, 178, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240], "subject_id": [62, 101, 108, 236, 237], "moreov": [62, 101, 108, 111, 150, 153, 168, 175, 320], "task_label": [62, 101, 108, 285], "space_label": [62, 285], "folder": [62, 86, 94, 101, 108, 148, 153, 168, 176, 178, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 235, 236, 237, 238, 239, 240, 285, 310, 320], "fmriprep": [62, 66, 125, 148, 150, 153, 155, 159, 170, 173, 180, 215, 219, 220, 244, 285], "app": [62, 114, 226, 285], "first_level_from_bid": [62, 100, 101, 108, 124, 125, 153, 384], "mni152nlin2009casym": 62, "derivatives_fold": [62, 285], "models_run_img": [62, 100, 101, 108, 285], "models_ev": [62, 101, 108, 285], "models_confound": [62, 100, 101, 108, 285], "minimize_memori": [62, 64, 67, 70, 169, 282, 285, 295], "overrid": [62, 100, 145, 153, 194, 195, 196, 197, 198, 199, 200, 204, 207, 208, 210, 218, 219, 222, 223, 224, 227, 228, 233, 239, 405], "interfac": [62, 100, 101, 108, 144, 148, 153, 159, 167, 168, 173, 250, 251], "get_design_from_fslmat": [62, 148, 153], "fsl_design_matrix_path": [62, 325], "feat": 62, "mat": [62, 325, 390], "column_nam": [62, 325], "stopsuccess": 62, "definit": [62, 94, 125, 153, 155, 163, 164, 167, 168, 169, 173, 177, 201, 264, 322, 327, 330, 333, 381, 410, 411, 413, 414, 438], "design_column": [62, 280], "cond_": 62, "10159": 62, "firstlevelmodelfirstlevelmodel": 62, "nib": 62, "fsl_z_map": 62, "zstat12": 62, "isf": [62, 76, 79, 101, 107, 108], "unc": [62, 79, 80, 101], "plot_img_comparison": 62, "masker_": [62, 66, 77, 79, 250, 251, 252, 253, 255, 256, 257, 258, 405], "ref_label": [62, 387], "src_label": [62, 387], "latex": [62, 123, 153, 176], "purpos": [62, 64, 67, 69, 71, 79, 101, 108, 116, 167, 172, 180, 215, 282, 295, 345, 417, 436], "to_latex": 62, "tabular": 62, "llrrrrl": 62, "toprul": 62, "midrul": 62, "000000": [62, 66], "307532": 62, "6300": [62, 102], "668929": 62, "534376": 62, "254210": 62, "918703": 62, "2520": [62, 102], "715845": 62, "2b": 62, "683343": 62, "2c": 62, "587956": 62, "692869": 62, "664250": 62, "461193": 62, "257986": 62, "078390": 62, "815609": 62, "5c": 62, "798387": 62, "208105": 62, "348351": 62, "190472": 62, "385929": 62, "163956": 62, "079389": 62, "056165": 62, "792": [62, 107, 109], "10a": 62, "726486": 62, "10b": 62, "710553": 62, "043724": 62, "950054": 62, "937283": 62, "906274": 62, "756": [62, 100, 114], "14a": 62, "882906": 62, "776293": 62, "bottomrul": 62, "save_glm_to_bid": [62, 123, 150, 153], "contrast_typ": [62, 69, 108, 270, 278, 322], "out_dir": [62, 322], "nilearn_glm": 62, "prefix": [62, 300, 322, 327, 328, 329, 330, 331, 332, 333, 419], "_task": [62, 285], "stopsuccessminusgo": 62, "r_squar": [62, 70, 148, 153, 274, 282, 295], "glob": [62, 126, 136, 153, 177, 301, 320, 438], "dataset_descript": [62, 322], "json": [62, 100, 101, 108, 117, 285, 320, 322, 323, 324], "10159_task": 62, "stopsignal_contrast": 62, "stopsuccessminusgo_design": 62, "stopsuccessminusgo_stat": 62, "effect_statmap": [62, 322], "p_statmap": 62, "t_statmap": 62, "variance_statmap": [62, 322], "z_statmap": 62, "stopsignal_design": 62, "stopsignal_stat": 62, "errorts_statmap": [62, 322], "rsquare_statmap": [62, 322], "stopsignal_statmap": 62, "752": [62, 73, 100, 114], "plot_bids_featur": [62, 73], "runtimeerror": [63, 78], "librari": [63, 78, 94, 111, 116, 138, 153, 163, 168, 175, 179, 427, 436, 437], "compris": [63, 66, 86, 408, 416], "trial": [63, 66, 72, 114, 125, 153, 160, 169, 173, 227], "c0": 63, "c1": 63, "c3": 63, "motion": [63, 66, 70, 101, 114, 146, 153, 169, 215, 282, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 407, 419], "jointli": [63, 168, 312, 388, 394, 396, 397, 401, 403], "cumsum": 63, "translat": [63, 141, 153, 179, 282, 295, 298, 323, 417], "rigid": 63, "bodi": [63, 415], "tx": 63, "ty": 63, "tz": 63, "rx": 63, "ry": 63, "rz": 63, "varieti": [63, 100, 159, 160, 161, 162, 163, 168, 173], "x1": [63, 94, 423], "polynomi": [63, 66, 169, 282, 289], "x2": [63, 94], "x3": 63, "ax3": 63, "751": [63, 73], "fiac": [64, 217], "dehaen": [64, 67, 114, 224], "lambertz": [64, 67], "anton": [64, 67], "jl": [64, 67], "campagn": [64, 67], "ciuciu": [64, 67, 114, 257], "denghien": [64, 67], "jobert": [64, 67, 114, 224], "lebihan": [64, 67], "sigman": [64, 67], "pallier": [64, 67], "jb": [64, 67], "segreg": [64, 67], "sentenc": [64, 65, 66, 67, 69, 72, 81, 101, 224], "hum": [64, 67], "mapp": [64, 67], "2006": [64, 67, 114, 165, 175, 254, 274, 275], "ncbi": [64, 67, 114, 161, 257, 323, 324], "nlm": [64, 67, 114, 161, 257, 323, 324], "nih": [64, 67, 114, 161, 257, 323, 324], "gov": [64, 67, 114, 161, 257, 323, 324], "pmc": [64, 67], "pmc6871319": [64, 67], "subdirectori": [64, 229, 231], "getcwd": 64, "write_dir": 64, "fetch_fiac_first_level": [64, 67], "func1": [64, 67, 71, 237], "func2": [64, 67, 71, 237], "design_fil": [64, 67], "design_matrix1": [64, 67], "design_matrix2": [64, 67], "df": [64, 67, 100, 107, 416], "n_column": [64, 67, 170, 193], "pad_vector": 64, "contrast_": 64, "sstssp_minus_dstdsp": 64, "dstdsp_minus_sstssp": 64, "dst_minus_sst": [64, 67], "dsp_minus_ssp": 64, "dst_minus_sst_for_dsp": 64, "dsp_minus_ssp_for_dst": 64, "deactiv": 64, "contrast_id": [64, 65, 66, 67, 69, 71], "contrast_v": [64, 65, 66, 67, 69, 71], "contast": 64, "implicitli": [64, 66, 69, 80, 102, 108, 160, 167], "z_image_path": 64, "_z_map": 64, "794": [64, 71], "assum": [64, 66, 71, 78, 79, 165, 170, 176, 193, 234, 235, 272, 273, 274, 275, 279, 282, 295, 297, 300, 315, 318, 342, 381, 390, 418, 419], "0x7f651d8a5be0": 64, "0x7f6511b903a0": 64, "unexpectedli": [64, 67], "ratio": [64, 67, 94, 137, 153, 173, 215, 255, 257, 258, 405, 407], "plot_fiac_analysi": [64, 73], "hemodyam": 65, "audio_comput": [65, 66, 69], "audio_left_hand_button_press": [65, 66, 69], "audio_right_hand_button_press": [65, 66, 69], "horizontal_checkerboard": [65, 66], "sentence_listen": [65, 66, 69], "sentence_read": [65, 66, 69], "vertical_checkerboard": [65, 66], "visual_comput": [65, 66, 69], "visual_left_hand_button_press": [65, 66, 69], "visual_right_hand_button_press": [65, 66, 69], "fetch_localizer_first_level": [65, 66, 69], "epi_img": [65, 66, 69, 89, 180, 225, 337, 340, 383], "events_fil": [65, 66, 69], "impuls": [65, 68, 169, 170, 173, 282, 284, 289], "behind": 65, "concret": [65, 168, 170], "interv": [65, 66, 100, 250, 251, 252, 253, 255, 256, 272, 274, 275, 406, 412, 423], "character": [65, 66, 114, 175, 323], "hairi": 65, "sorri": 65, "price": [65, 165], "flexibl": [65, 127, 153], "contrast_matrix": [65, 66, 69, 71], "audio": [65, 66, 69], "video": [65, 168], "breath": [65, 66], "ask": [65, 117, 138, 141, 153, 168, 176], "yet": [65, 80, 104, 114, 148, 153, 160, 168, 175, 391], "plot_fir_model": [65, 73], "clarifi": [66, 146, 153], "exploratori": 66, "increment": [66, 95, 175, 176], "outcom": [66, 173, 324], "reader": [66, 175, 438], "familiar": [66, 168, 175], "concept": [66, 98, 141, 153, 160, 161, 168, 173, 177, 438], "paradigm": [66, 69, 71, 97, 109, 113, 117, 160, 170, 231, 289, 305, 310, 311, 313, 385, 393, 398], "pinel": [66, 72, 114, 224, 257], "bmc": [66, 72, 114, 224], "2007": [66, 72, 114, 154, 224, 233, 306, 323, 324, 420], "probe": [66, 69, 164, 173], "button": [66, 69, 72, 76, 77, 79, 80, 105, 148, 153, 168, 170, 222, 224, 232], "press": [66, 69, 72, 76, 77, 79, 80, 105, 114, 170, 222, 224, 232, 274, 275], "horizont": [66, 72, 80, 224, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "checkerboard": [66, 72, 80, 224], "listen": [66, 69, 81, 224], "short": [66, 100, 110, 112, 113, 117, 167, 168, 173, 186, 205, 206, 209, 229, 230, 231, 232, 250, 262, 263, 264, 265, 266, 267, 390, 394, 398], "epoch": [66, 258], "100m": 66, "male": [66, 194], "voic": 66, "instruct": [66, 69, 72, 113, 123, 149, 153, 168, 174, 230, 437], "passiv": 66, "verifi": [66, 101, 168, 180], "understood": [66, 229], "flash": 66, "narr": [66, 81, 168], "400000": 66, "700000": 66, "399994": 66, "700012": 66, "make_localizer_contrast": 66, "involv": [66, 69, 71, 100, 170], "differenti": [66, 71], "content": [66, 69, 84, 114, 125, 153, 164, 165, 168, 175, 207, 212, 218, 226, 300, 419], "stori": [66, 69, 114, 227], "comptat": 66, "encapsul": [66, 186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "plot_contrast": 66, "discret": [66, 71, 123, 145, 146, 153, 282, 291, 310, 323, 327, 328, 329, 330, 331, 332, 333, 419], "spuriou": [66, 114, 158, 168, 323, 324, 408], "heart": 66, "scanner": [66, 170, 173, 323], "01hz": [66, 194], "longest": 66, "multipli": [66, 84, 90, 131, 153, 165, 167, 193, 269, 272, 274, 275, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 388, 394, 396, 397, 401, 403], "shall": 66, "wors": [66, 256], "poorli": [66, 94, 180], "mayb": [66, 117, 343], "useless": 66, "haven": [66, 103], "basi": [66, 69, 108, 169, 282, 284, 289, 323], "undershoot": 66, "strong": [66, 89, 167, 168], "seem": [66, 75, 98, 167], "someth": 66, "inclus": [66, 249], "sole": [66, 117, 167, 264, 265, 327, 328, 329, 330, 331, 332], "discount": 66, "misspecif": 66, "hint": [66, 154, 155], "misfit": 66, "valuabl": [66, 168], "shift": [66, 144, 150, 153, 327, 328, 329, 330, 331, 332, 333, 419], "mi": 66, "sake": [66, 79, 105], "simplic": [66, 69, 160], "readabl": [66, 124, 153], "drop": [66, 70, 100, 133, 134, 135, 139, 153, 168, 175, 176], "far": [66, 108, 167, 315, 321], "autoregress": [66, 282, 291], "ordinari": [66, 102, 105, 273, 343], "least": [66, 68, 100, 102, 103, 105, 114, 160, 166, 168, 258, 269, 273, 282, 291, 295, 296, 297, 328, 331, 333, 337, 343, 374, 437], "recomput": [66, 98, 165, 279], "obviou": 66, "stick": 66, "arguabl": 66, "greater": [66, 100, 146, 148, 153, 170, 282, 291, 299, 306, 319, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 385, 388, 389, 393, 397, 399, 401, 403, 416, 420, 423], "complex": [66, 77, 87, 114, 117, 160, 162, 165, 168, 172, 175, 180], "ar3": [66, 291], "wish": [66, 79, 105, 148, 153, 168, 173, 176, 219, 220, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 380, 383, 385, 386, 389, 391, 392, 393], "computation": [66, 161, 165], "problemat": 66, "uncontrol": 66, "spike": 66, "phenomena": 66, "respir": 66, "blood": [66, 170, 173], "oxygen": [66, 170, 173], "themselv": [66, 117, 180], "routin": [66, 89, 178, 227, 436], "percentil": [66, 87, 88, 98, 250, 251, 252, 253, 255, 256, 299, 306, 319, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 364, 365, 366, 368, 370, 371, 377, 380, 391, 399, 400, 401, 403, 407, 420], "kill": 66, "somewhat": 66, "colinear": 66, "scrub": [66, 123, 146, 148, 153, 155, 282, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 407, 419], "scenario": [66, 169, 170, 180], "exclud": [66, 117, 408], "unwant": 66, "discrep": [66, 167], "drawback": 66, "bias": 66, "mild": 66, "5mm": [66, 95, 175], "smoother": 66, "firstlevemodel": 66, "grei": [66, 89, 131, 141, 147, 153, 179, 180, 219, 220, 242, 243, 244, 246, 336, 339], "fetch_icbm152_brain_gm_mask": [66, 75, 131, 153, 219], "data_mask": [66, 104], "icbm_mask": 66, "driven": [66, 159, 168, 175, 198, 289], "resample_to_img": [66, 75, 93, 130, 153, 179, 180, 315], "resampled_icbm_mask": 66, "spot": 66, "interestingli": 66, "resili": 66, "reassur": 66, "plot_first_level_detail": [66, 73], "summary_statistics_session1": 67, "0x7f651d21a430": 67, "summary_statistics_session2": 67, "0x7f651981ab50": 67, "compute_fixed_effect": 67, "contrast_img": [67, 279], "variance_img": [67, 279], "effect_vari": [67, 80, 270, 282, 295], "fixed_fx_stat": 67, "0x7f651dc5e550": 67, "plot_fixed_effect": [67, 73], "hemodynam": [68, 71, 160, 173], "propos": [68, 100, 168, 169, 176, 337], "primat": 68, "agent": 68, "mion": 68, "monkei": 68, "coupl": [68, 111, 154, 176], "metabol": [68, 170, 173], "phenomenolog": 68, "framework": [68, 154, 215], "whenev": [68, 161, 298], "uncertainti": [68, 76, 79, 167, 169, 170, 173], "issu": [68, 133, 134, 135, 136, 137, 145, 147, 148, 150, 167, 168, 170, 172, 173, 304, 309], "occur": [68, 126, 153, 170, 173, 437], "time_length": [68, 286, 287, 288, 292, 293, 294], "amplitud": [68, 284, 289, 399, 401, 403], "exp_condit": [68, 284], "stim": 68, "oversampl": [68, 282, 284, 286, 287, 288, 289, 292, 293, 294], "gamma": [68, 150, 153, 169], "mion_response_funct": 68, "factor": [68, 70, 100, 104, 135, 153, 162, 173, 272, 274, 275, 284, 286, 287, 288, 289, 292, 293, 294, 298, 378, 391, 392, 393, 400], "response_funct": 68, "dt": 68, "time_stamp": 68, "rint": 68, "delai": [68, 176, 282, 284, 289], "mion_time_deriv": 68, "drf": 68, "derived_response_funct": 68, "rf_model": 68, "main_deriv": 68, "compute_regressor": [68, 124, 148, 153, 169], "model_titl": 68, "convolut": [68, 170, 284, 289], "_label": 68, "con_id": [68, 284], "plot_hrf": [68, 73], "capabl": [69, 148, 153, 180], "coregist": 69, "obvious": 69, "geometri": [69, 114, 311, 388, 394, 395, 396, 397, 403, 422, 423], "resort": 69, "basic_contrast": [69, 71, 169], "dict": [69, 89, 105, 117, 125, 153, 186, 187, 188, 197, 198, 199, 207, 229, 230, 231, 232, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 269, 273, 278, 282, 291, 295, 297, 300, 321, 322, 326, 327, 328, 329, 330, 331, 332, 333, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 379, 380, 388, 389, 396, 397, 401, 404, 405, 406, 407, 415, 417, 419], "Of": 69, "cours": [69, 157, 170, 173, 328, 331], "impress": 69, "littl": [69, 75, 160, 161, 168], "844": [69, 73], "plot_localizer_surface_analysi": [69, 73], "assess": [70, 78, 114, 160, 167, 168, 169, 194, 254, 343, 379], "clean_img": [70, 131, 133, 138, 148, 151, 153, 179, 419], "0x7f65061e5850": 70, "set_index": 70, "head": [70, 282, 295, 323, 415, 417], "real_timeseri": 70, "predicted_timeseri": [70, 169], "navi": 70, "purpl": 70, "teal": 70, "fig1": 70, "axs1": 70, "labelpad": 70, "resid": [70, 150, 153, 323, 324], "fig2": 70, "axs2": 70, "002374945330077797": 70, "0016934773463629742": 70, "01850990756587915": 70, "0704987065734594": 70, "031008074173832483": 70, "7689553525694162e": 70, "markedli": 70, "deep": [70, 186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "awai": [70, 167, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "receiv": [70, 100, 160, 173, 387], "coil": 70, "salt": 70, "necessarili": [70, 158, 170], "influenc": [70, 167, 256], "0x7f651dacc3a0": 70, "tell": [70, 86, 114, 167, 227], "everywher": [70, 166], "z_map_ftest": 70, "stat_typ": [70, 282], "0x7f651c9cecd0": 70, "plot_predictions_residu": [70, 73], "percept": [71, 141, 153, 170, 224], "realign": [71, 227], "scrambl": [71, 94, 169], "supposedli": 71, "henson": [71, 100, 114], "goshen": 71, "gottstein": 71, "ganel": 71, "otten": 71, "quayl": 71, "rugg": 71, "electrophysiolog": 71, "haemodynam": [71, 169, 170, 173], "prime": 71, "2003": [71, 114, 269, 273], "jul": 71, "793": [71, 126, 153], "805": 71, "1093": [71, 114, 200, 206, 226], "cercor": [71, 114, 200, 206, 226], "multimodal_fac": 71, "fetch_spm_multimodal_fmri": [71, 169], "catch_warn": [71, 103], "simplefilt": [71, 103], "auto_resampl": [71, 301], "mean_imag": 71, "idx": [71, 206], "revious": 71, "tail": [71, 272, 274, 275, 416], "tcontrast": [71, 272, 274, 275], "sophist": [71, 98, 163], "implic": [71, 100, 114], "portion": 71, "sparser": [71, 94, 159, 255, 256, 407, 409], "anterior": [71, 91, 103, 135, 153, 212, 214, 314, 394, 396, 397], "frontal": [71, 91, 114, 165, 378, 383, 385, 386, 392, 393], "lobe": [71, 209], "788": [71, 73], "936": [71, 73], "plot_spm_multimodal_fac": [71, 73], "protocol": [72, 173, 224], "archi": 72, "meriaux": [72, 114, 224], "identif": [72, 94, 114, 173, 224], "databas": [72, 103, 114, 224, 229], "1186": [72, 109], "1471": 72, "2202": 72, "hardcod": [72, 123, 153, 248], "fmt": 72, "trial_type_idx": 72, "condition_id": 72, "instantan": 72, "null_duration_tri": 72, "export": [72, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397], "pathlib": [72, 125, 147, 153, 178, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 235, 236, 237, 238, 239, 240, 250, 251, 252, 253, 255, 256, 282, 285, 295, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 405, 406, 407, 419, 421, 422, 423], "tsvfile": 72, "localizer_ev": 72, "plot_ev": [72, 144, 153, 169], "experimental_paradigm": [72, 125, 153], "null": [72, 79, 149, 153, 160, 165, 170, 173, 270, 297, 343], "plot_write_events_fil": [72, 73], "auto_examples_04_glm_first_level": 73, "unpair": [74, 82, 113, 172, 224, 295, 355, 382, 385, 398], "sex": [75, 78, 172, 194, 226, 239, 250, 251, 252, 253, 255, 256], "mf": [75, 114, 226], "gm_mask": 75, "adequ": 75, "000000000000007": 75, "second_level": [75, 76, 77, 78, 79, 80, 81, 101, 150, 153, 172, 417], "secondlevelmodel": [75, 76, 77, 79, 80, 81, 101, 148, 151, 153, 172, 282, 322, 417], "second_level_model": [75, 76, 79, 81, 101], "0x7f651a04d040": 75, "secondlevelmodelsecondlevelmodel": [75, 77], "second_level_contrast": [75, 77, 79, 282, 295, 297, 417], "03g": 75, "40175": 75, "0x7f651cc9b130": 75, "icbm152_2009": 75, "1423": [75, 82], "plot_oasi": [75, 82], "circular": 76, "rosenblatt": [76, 114, 277], "jd": 76, "fino": [76, 114, 277], "weeda": [76, 114, 277], "wd": 76, "solari": [76, 114, 277], "goeman": [76, 114, 277], "jj": 76, "nov": [76, 114, 213], "786": [76, 114, 277], "796": [76, 114, 277], "fetch_localizer_contrast": [76, 77, 79, 80, 105, 131, 153, 222, 223], "get_tmap": [76, 79, 80, 224], "second_level_input": [76, 79, 80, 101, 148, 150, 153, 295, 297], "p_val": [76, 77, 79], "p001_uncorrect": 76, "cluster_level_infer": [76, 148, 153, 172], "proportion_true_discoveries_img": [76, 277], "911": [76, 82], "plot_proportion_activated_voxel": [76, 82], "cue": [77, 105, 223, 224], "variat": [77, 101, 105, 106, 114, 124, 153, 165, 166, 173, 233, 281, 297, 343], "pseudo": [77, 105, 257, 258, 274, 297, 299, 405], "brainomics_loc": [77, 105], "brainomics_data": [77, 105], "s01": [77, 105], "cmaps_leftauditoryclick": [77, 105], "tested_var": [77, 105, 106, 343], "float64": 77, "worth": 77, "aualiti": 77, "mask_quality_check": [77, 105], "contrast_map_filenam": [77, 105], "ones_lik": 77, "fluenci": 77, "math_img": [77, 79, 83, 85, 96, 107, 113, 129, 153, 179, 247, 312, 393, 398], "logarithm": [77, 79, 297], "equal": [77, 98, 141, 148, 150, 153, 163, 199, 204, 205, 206, 210, 250, 251, 252, 253, 255, 256, 270, 295, 312, 315, 319, 335, 337, 338, 340, 400, 401, 403, 405], "fwer": [77, 81, 172, 173, 297], "non_parametric_infer": [77, 79, 123, 124, 148, 150, 153, 172], "neg_log_pvals_permuted_ols_unmask": [77, 105], "model_intercept": [77, 79, 105, 297, 343], "two_sided_test": [77, 79, 102, 165, 297, 343], "cap": [77, 79], "1e3": 77, "plot_second_level_association_test": [77, 82], "characterist": [78, 160, 173, 324], "subjects_label": [78, 296], "extra": [78, 117, 162, 176, 177, 194, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 384, 386, 390, 436, 438], "extra_info_subject": 78, "make_second_level_design_matrix": [78, 172], "attent": [78, 289], "singular": [78, 272, 274, 275, 306, 420], "aberr": 78, "plot_second_level_design_matrix": [78, 82], "elicit": 79, "participant_id": 79, "tolist": [79, 100], "cidx": 79, "p001_unc": [79, 101], "nonparametr": 79, "pend": 79, "reformat": [79, 124, 153], "assumpt": [79, 165, 170], "out_dict": 79, "ideal": [79, 105, 157, 170, 176, 198], "permuted_least_squar": [79, 150, 153], "tend": [79, 100, 162, 167, 178], "itertool": 79, "logp_max_t": [79, 105, 297, 343], "logp_max_s": [79, 297, 343], "logp_max_mass": [79, 297, 343], "img_count": 79, "i_row": 79, "j_col": 79, "plot_second_level_one_sample_test": [79, 82], "retinotop": 80, "distinct": [80, 100, 114, 167, 200, 226], "border": [80, 304, 335, 338, 344, 346, 347], "primari": [80, 168, 282, 295, 417], "sample_vert": 80, "sample_horizont": 80, "s1": 80, "s2": 80, "condition_effect": 80, "doesn": [80, 103, 168], "subject_effect": 80, "02d": 80, "assembl": [80, 115, 170], "unpaired_design_matrix": 80, "paired_design_matrix": 80, "ax_unpair": 80, "ax_pair": 80, "width_ratio": [80, 100], "second_level_model_unpair": 80, "second_level_model_pair": 80, "stat_maps_unpair": 80, "stat_maps_pair": 80, "992007221626409e": 80, "unsurprisingli": 80, "769": [80, 82], "plot_second_level_two_sample_test": [80, 82], "bunch": [81, 116, 133, 153, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239], "oppos": [81, 179, 180], "fetch_localizer_calculation_task": [81, 106, 222, 224], "statstic": 81, "cmap_filenam": [81, 106], "trivial": 81, "two_sid": [81, 145, 148, 153, 298, 319, 416, 417], "0x7f651cd346d0": 81, "thresholded_map1": 81, "threshold1": 81, "thresholded_map2": 81, "threshold2": 81, "3g": 81, "thresholded_map3": 81, "threshold3": 81, "raw": [81, 92, 101, 108, 145, 153, 160, 178, 180, 201, 250, 251, 252, 253, 257, 258, 329, 332, 393, 405, 415], "0x7f6511a5d580": 81, "0x7f651c3fcfd0": 81, "fourth": [81, 84, 146, 153, 282, 297, 307, 308, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 376, 407, 419], "0x7f6505f90370": 81, "plot_threshold": [81, 82], "auto_examples_05_glm_second_level": 82, "4x4": [84, 179, 250, 251, 252, 253, 255, 256, 257, 258, 282, 295, 302, 312, 313, 315, 329, 332, 335, 337, 338, 340, 346, 347, 405], "millimet": [84, 165, 180, 250, 251, 252, 253, 254, 257, 258, 282, 295, 297, 317, 327, 328, 329, 330, 331, 332, 333, 334, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 405, 407, 409, 416], "entri": [84, 123, 125, 153, 168, 176, 250, 251, 252, 253, 272, 274, 275, 304, 395, 423], "3x3": [84, 179, 250, 251, 252, 253, 255, 256, 257, 258, 282, 295, 312, 315, 329, 332, 335, 337, 338, 340, 405], "closest": [84, 315], "union": [84, 338, 340, 341], "messag": [84, 128, 153, 176, 187, 190, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 232, 233, 234, 235, 236, 237, 239, 250, 251, 252, 253, 254, 255, 256, 295, 297, 301, 312, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 343, 405, 406, 407], "circl": 84, "diamond": 84, "source_affin": 84, "rotation_matrix": 84, "0mm": [84, 175], "img_in_mm_spac": 84, "target_affine_3x3": 84, "target_affine_4x4": 84, "img_3d_affin": 84, "img_4d_affin": 84, "target_affine_mm_space_offset_chang": 84, "img_3d_affine_in_mm_spac": 84, "img_4d_affine_in_mm_spac": 84, "anchor": 84, "plot_affine_transform": [84, 96], "goal": [85, 90, 93, 116, 167, 168], "result_img": [85, 178, 311], "img1": [85, 311], "img2": [85, 311], "plot_compare_mean_imag": [85, 96], "connected_label_region": [86, 133, 153, 157, 179, 407, 409], "oper": [86, 89, 91, 94, 104, 116, 146, 153, 160, 167, 168, 170, 173, 177, 178, 180, 186, 187, 220, 249, 282, 295, 297, 309, 311, 312, 335, 336, 337, 339, 340, 381, 425, 429, 438], "atlas_yeo_2011": 86, "atlas_yeo": 86, "thick_7": [86, 210], "0x7f651c9bdbe0": 86, "apart": [86, 133, 153, 157, 158, 167], "region_label": 86, "region_extractor": [86, 148, 153], "0x7f650b12a5b0": 86, "difficult": [86, 154, 161, 166, 180], "eg": [86, 89, 135, 138, 144, 153, 154, 155, 160, 179, 180, 375, 376, 415], "broken": [86, 131, 139, 153, 165], "relabeled_yeo_atla": 86, "folder_path": 86, "connect_diag": [86, 408], "region_labels_not_diag": 86, "0x7f651af5dee0": 86, "100mm": 86, "region_labels_min_s": 86, "plot_extract_regions_labels_imag": [86, 96], "atlas_network": 87, "dmn_network": 87, "regions_indices_network3": 87, "blob": [87, 94, 159, 179, 206], "network3": 87, "plot_extract_rois_smith_atla": [87, 96], "fetch_neurovault_auditory_computation_task": [88, 138, 153, 232], "foreground": [88, 158], "connected_region": [88, 126, 139, 153, 158, 179, 407, 408], "scoreatpercentil": [88, 103, 319], "threshold_percentile_img": 88, "threshold_value_img": 88, "0x7f651d6d3790": 88, "regions_percentile_img": 88, "regions_value_img": 88, "plot_extract_rois_statistical_map": [88, 96], "li": [89, 114, 239], "homogen": [89, 151, 153, 157, 179, 199, 250, 251, 252, 253, 257, 258, 315, 329, 332, 405], "miyawaki_filenam": [89, 180], "miyawaki_mean_img": [89, 180], "0x7f650b13fbe0": 89, "0x7f651ca33e20": 89, "mask_arg": [89, 92, 180, 257, 258, 329, 332, 405], "uniform": 89, "epi_filenam": [89, 180], "0x7f651ca19610": 89, "eros": [89, 173, 220, 242, 245, 335, 336, 337, 339, 340], "dilat": [89, 94, 173, 179, 220, 242, 245, 335, 336, 337, 339, 340], "layer": 89, "skull": [89, 219, 335, 336, 337, 339, 340], "lower_cutoff": [89, 337, 340], "upper_cutoff": [89, 337, 338, 340], "bright": 89, "hover": 89, "trended_data": 89, "detrended_data": 89, "plot_mask_comput": [89, 96, 180], "negative_stat_img": 90, "plot_negate_imag": [90, 96], "output_filepath": [91, 92, 180], "mni152templ": [91, 282, 295, 378, 391, 392, 393, 417], "ward": [91, 157, 173, 174, 330, 405], "pole": 91, "123176": 91, "insular": 91, "18728": 91, "superior": [91, 103, 166, 314], "40640": 91, "42528": 91, "inferior": 91, "par": 91, "triangulari": 91, "8824": 91, "operculari": 91, "11072": 91, "68584": 91, "37688": 91, "4168": 91, "14640": 91, "6784": 91, "20200": 91, "temporooccipit": 91, "16032": 91, "5176": 91, "15536": 91, "11760": 91, "55160": 91, "lobul": 91, "23264": 91, "supramargin": 91, "13936": 91, "18072": 91, "angular": 91, "19272": 91, "78232": 91, "32712": 91, "intracalcarin": 91, "11208": 91, "7808": 91, "juxtaposit": 91, "formerli": [91, 138, 153], "supplementari": [91, 116, 165], "11872": 91, "subcallos": 91, "9136": 91, "paracingul": 91, "23552": 91, "20736": 91, "19296": 91, "precun": 91, "44984": 91, "cuneal": 91, "9816": 91, "orbit": 91, "25184": 91, "parahippocamp": 91, "9984": 91, "5680": [91, 102], "lingual": 91, "27048": 91, "fusiform": [91, 165], "4880": [91, 102], "12752": 91, "11752": 91, "14448": 91, "5496": 91, "15088": 91, "8952": 91, "planum": [91, 103], "polar": 91, "5992": 91, "heschl": 91, "h1": 91, "h2": 91, "4832": 91, "temporal": [91, 103], "7616": 91, "supracalcarin": 91, "2088": 91, "42208": 91, "quot": 91, "niftilablesmask": 91, "n_time_point": [91, 92, 290, 291], "label_idx": 91, "plot_nifti_labels_simpl": [91, 96], "0x7f650d2c1be0": 92, "components_mask": [92, 104], "revers": [92, 134, 141, 153], "plot_nifti_simpl": [92, 96, 180], "load_mni152_templ": [93, 147, 153, 219, 220, 241, 243, 246, 299, 302, 307, 311, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 423], "resampled_stat_img": 93, "tmap_img": 93, "original_shap": 93, "original_affin": 93, "resampled_shap": 93, "resampled_affin": 93, "template_img": 93, "template_shap": 93, "template_affin": 93, "831": [93, 96], "plot_resample_to_templ": [93, 96], "allevi": 94, "curs": 94, "aris": [94, 114, 170, 323, 324], "context": [94, 100, 114, 125, 153, 168, 173], "chain": [94, 179, 186, 187], "clear": [94, 117, 123, 141, 150, 153, 168, 250, 251, 252, 253, 257, 258, 329, 332, 405], "student": [94, 170, 179, 270, 438], "haxby_label": 94, "txt": [94, 233], "especi": [94, 139, 148, 153, 154, 160, 178, 401, 438], "Such": [94, 154, 320], "4mm": [94, 158, 165, 215, 258], "12mm": 94, "anisotropi": 94, "indent": 94, "analog": 94, "0x7f651dbf2370": 94, "brief": [94, 168, 170], "motiv": 94, "realm": 94, "ttest_ind": [94, 179], "establish": [94, 166, 168], "log_p_valu": 94, "log_p_values_img": 94, "0x7f6511a5d430": 94, "extend": [94, 125, 144, 149, 153, 170, 180, 315], "annot": [94, 115, 125, 133, 144, 153, 206, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 380, 383, 385, 386, 389, 391, 392, 393, 394, 395, 396, 397, 400, 403, 421, 436, 438], "0x7f6505130700": 94, "intersect": [94, 179, 338, 340, 341, 411], "investig": [94, 98, 159, 254], "bin_p_valu": 94, "boolean": [94, 117, 145, 150, 153, 192, 194, 218, 224, 233, 254, 257, 258, 282, 301, 313, 326, 335, 336, 337, 339, 340, 378, 383, 385, 387, 392, 395, 400, 413, 414, 419], "logic": [94, 117, 168, 249], "logical_and": [94, 102], "jargon": 94, "AND": [94, 117], "conjunct": 94, "bin_p_values_and_vt": 94, "otherwis": [94, 102, 103, 138, 153, 170, 176, 186, 187, 188, 192, 194, 200, 201, 212, 213, 214, 222, 223, 224, 226, 233, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 285, 295, 310, 314, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 388, 391, 394, 396, 397, 400, 401, 403, 404, 405, 406, 407, 408, 423], "bin_p_values_and_vt_img": 94, "06_manipulating_imag": 94, "plot_roi_extract": [94, 96], "0x7f650eee6ca0": 94, "consolid": [94, 149, 153], "toward": [94, 148, 153, 186, 310, 327, 328, 329, 330, 331, 332, 333, 438], "morpholog": [94, 179, 335, 336, 337, 339, 340], "forget": [94, 168], "hole": 94, "binary_dil": [94, 179, 335, 336, 337, 339, 340], "dil_bin_p_values_and_vt": 94, "dil_bin_p_values_and_vt_img": 94, "0x7f651a7303d0": 94, "immedi": [94, 324], "first_roi_data": 94, "second_roi_data": 94, "first_roi_img": 94, "second_roi_img": 94, "0x7f651da47220": 94, "suit": [94, 100, 155, 161, 175, 198], "condition_nam": [94, 100], "n_cond_img": 94, "n_cond": 94, "gather": [94, 111, 168, 170], "cond": [94, 100, 284], "cond_map": 94, "mask_data": 94, "mask_atla": 94, "2267": 94, "first_epi_fil": 95, "mean_func": 95, "20mm": [95, 175], "smoothed_img": [95, 178], "plot_smooth_mean_imag": [95, 96], "auto_examples_06_manipulating_imag": 96, "836": 96, "2266": 96, "massiv": [97, 109, 113, 164, 218, 223, 224, 305, 307, 312, 326, 332, 343, 371, 385, 393, 398, 430, 438], "multivari": [97, 109, 113, 114, 159, 173, 174, 175, 197, 215, 307, 312, 326, 332, 393, 398, 437], "bridg": 98, "integr": [98, 126, 141, 153, 168, 179, 329], "usecas": [98, 157, 161, 163, 168], "pointer": [98, 163], "unclear": 98, "n_timepoint": [98, 160, 163], "meaning": [98, 100, 128, 138, 141, 153, 168, 170, 300, 419], "stipul": 98, "823": 98, "processor": [98, 163], "858": 98, "dummyclassifi": [98, 99, 146, 153, 163, 250, 251, 252, 253], "pure": [98, 102, 255, 256], "slower": [98, 163, 167, 315], "permutation_test_scor": [98, 163], "null_cv_scor": 98, "selectpercentil": [98, 133, 153], "linear_svc": 98, "anova_svc": 98, "return_estim": 98, "fitted_pipelin": 98, "test_scor": 98, "801": 98, "first_pipelin": 98, "svc_coef": 98, "invert": [98, 104, 125, 144, 153, 167, 180, 186, 272, 274, 275, 326, 329, 332, 344, 378, 380, 383, 385, 386, 389, 391, 392, 393], "full_coef": 98, "0x7f651c61ac10": 98, "fisher": [98, 114, 270], "lda": 98, "discriminant_analysi": 98, "lineardiscriminantanalysi": 98, "anova_lda": 98, "n_condit": 98, "8009": 98, "principl": [98, 157, 160, 164, 166, 173, 254, 438], "fanci": 98, "n_features_to_select": 98, "rfe_svc": 98, "awar": [98, 188, 418], "plot_advanced_decoding_scikit": [98, 109], "gridsearchcv": [99, 163], "pipe": 99, "most_frequ": 99, "connectivity__kind": 99, "labelencod": 99, "pheno": 99, "refit": 99, "cv_results_": 99, "mean_test_scor": 99, "std_test_scor": 99, "candid": 99, "param_connectivity__kind": 99, "plot_age_group_prediction_cross_v": [99, 109, 141, 153], "substitut": [100, 415], "psychophysiolog": 100, "ppi": 100, "cisler": [100, 114], "everyth": [100, 176], "systemat": [100, 114, 128, 153, 224, 323, 324], "incorpor": [100, 159], "literatur": [100, 155, 194, 306, 324, 420], "mention": [100, 123, 125, 153, 168, 169, 170], "abdulrahman": [100, 114], "decis": [100, 114, 161, 165, 250, 251, 252, 253, 255, 256, 270], "inter": [100, 105, 155, 179, 180, 338, 340], "mumford": [100, 114, 160, 175, 216, 234], "primarili": 100, "fetch_language_localizer_demo_dataset": [100, 101, 108, 169], "events_df": 100, "languageloc": [100, 101, 108], "img_filt": [100, 101, 108, 285], "desc": [100, 101, 108, 285, 323, 324], "preproc": [100, 101, 108, 285], "standard_glm": 100, "fmri_fil": 100, "glm_paramet": 100, "get_param": [100, 186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "queri": [100, 101, 107, 108, 229, 231, 249], "starttim": [100, 101, 108], "01_task": [100, 101, 108], "languagelocalizer_desc": [100, 101, 108], "highlight": [100, 176], "lsa_events_df": 100, "condition_count": 100, "i_trial": 100, "iterrow": 100, "trial_condit": 100, "__": [100, 186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "shouldn": [100, 176, 196], "trial_nam": 100, "lsa_glm": 100, "lsa_beta_map": 100, "trialwise_condit": 100, "beta_map": 100, "relabel": [100, 408], "lss_transform": 100, "row_numb": 100, "compliant": [100, 124, 153, 168, 180, 234, 248, 324], "trial_type_seri": 100, "trial_type_list": 100, "trial_numb": 100, "left_001": 100, "track": [100, 103, 167, 176], "lss_beta_map": 100, "lss_design_matric": 100, "lss_events_df": 100, "lss_glm": 100, "dm_titl": 100, "i_ax": 100, "though": [100, 104, 160, 273, 394, 396, 418], "vastli": 100, "quick": [100, 175], "neurosynth": [100, 103, 115, 229, 231, 438], "lang_seed_beta_seri": 100, "lang_beta_seri": 100, "lang_corr": 100, "language_connectivity_img": 100, "string_seed_beta_seri": 100, "string_beta_seri": 100, "string_corr": 100, "string_connectivity_img": 100, "josh": [100, 114], "keith": [100, 114], "bush": [100, 114], "scott": [100, 114, 214], "steel": [100, 114], "1042": [100, 114], "1052": [100, 114], "jess": [100, 114], "rissman": [100, 114], "adam": [100, 114], "gazzalei": [100, 114], "esposito": [100, 114], "stage": [100, 114, 168, 175], "763": [100, 114], "2004": [100, 114, 200, 274, 275], "jeanett": [100, 114, 175], "benjamin": [100, 114, 214], "turner": [100, 114, 197, 207], "gregori": [100, 114], "ashbi": [100, 114], "poldrack": [100, 114, 117, 175, 216, 227, 229, 231, 234], "deconvolv": [100, 114, 160], "multivoxel": [100, 114, 160, 227], "2636": [100, 114], "2643": [100, 114, 145, 153], "spatiotempor": [100, 114], "rapid": [100, 114], "1429": [100, 114], "1438": [100, 114], "hunar": [100, 114], "richard": [100, 114], "766": [100, 114], "plot_beta_seri": [100, 109], "consult": 101, "simplifi": [101, 108, 116, 131, 141, 149, 153, 180, 222, 223], "basenam": 101, "09_task": 101, "rotx": 101, "roti": 101, "rotz": 101, "conson": 101, "value_count": 101, "scalar": [101, 165, 180, 269, 270, 272, 273, 274, 275, 317, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 380, 389], "concurr": [101, 108], "model_and_arg": 101, "midx": 101, "8mm": 101, "first_level_contrast": [101, 148, 153, 295, 297], "plot_bids_analysi": [101, 109], "behav": [102, 282, 284, 289], "exchang": [102, 104, 194], "winkler": [102, 114, 226, 343], "anderson": [102, 114, 194, 226, 343], "robinson": [102, 114, 226, 343], "australian": [102, 114, 343], "zealand": [102, 114, 343], "journal": [102, 114, 165, 206, 207, 210, 233, 343], "uvm": 102, "edu": [102, 114, 207, 210, 233, 269, 273], "statdhtx": 102, "fundamentals9": 102, "supplement": [102, 114, 200, 219, 244], "randomizationtestswithr": 102, "permut2": 102, "conditions_encod": 102, "func_reduc": 102, "n_session": 102, "conditions_per_sess": 102, "grouped_fmri_mask": 102, "grouped_conditions_encod": 102, "session_mask": 102, "session_house_mask": 102, "session_face_mask": 102, "ol": [102, 105, 272, 274, 275, 282, 291, 343, 430], "tracepvals_bonferroni": 102, "neg_log_pvals_bonferroni": 102, "neg_log_pvals_bonferroni_unmask": 102, "1183": [102, 105, 106], "dataconversionwarn": [102, 105, 106], "mean_fmri_img": 102, "neg_log_pvals_bonferroni_data": 102, "plot_haxby_mass_univari": [102, 109], "fetch_neurovault": [103, 107, 117, 134, 141, 145, 153, 230, 231, 232], "load_mni152_brain_mask": [103, 131, 147, 153, 219], "nv_data": [103, 107], "max_imag": [103, 107, 117, 229], "fetch_neurosynth_word": [103, 117, 229, 231], "term_weight": 103, "word_frequ": [103, 117, 229, 231], "vocabulari": [103, 117, 173, 175, 229, 231], "total_scor": 103, "ntop": 103, "term_idx": 103, "1307": 103, "insula": 103, "nreshap": 103, "deprecationwarn": [103, 198, 199, 207, 279, 326, 327, 328, 329, 330, 331, 332, 333, 407], "failur": [103, 133, 153, 168, 337], "is_us": 103, "image_path": 103, "images_meta": [103, 107, 117, 229, 230, 231, 232], "collection_id": [103, 107, 117, 229, 231], "fast_ica": 103, "ica_map": 103, "term_weights_for_compon": 103, "components_": [103, 136, 153, 257, 258], "ic_map": 103, "ic_term": 103, "ic_threshold": 103, "ic_img": 103, "important_term": 103, "neurolog": [103, 170, 173, 196], "999": [103, 109], "plot_ica_neurovault": [103, 109], "advis": [104, 168, 178, 220, 337, 405], "unsupervis": [104, 173, 257, 258, 282, 295, 404, 406], "latent": [104, 173], "sens": [104, 160, 175, 250, 251, 252, 253, 272, 274, 275, 347, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370], "component_img": 104, "plot_ica_resting_st": [104, 109], "pvals_anova": [105, 106], "neg_log_pvals_anova": [105, 106], "neg_log_pvals_anova_unmask": [105, 106], "fwe": [105, 343], "tfce": [105, 123, 150, 153, 173, 297, 343], "ols_output": 105, "neg_log_pvals_tfce_unmask": 105, "logp_max_tfc": [105, 297, 343], "6833": 105, "739280700684": 105, "41237258911133": 105, "57266330718994": 105, "45195619265239": 105, "54648113250732": 105, "07431888580322": 105, "86512589454651": 105, "81714596067157": 105, "8249546289444": 105, "91499098141989": 105, "97622632980347": 105, "04802881587636": 105, "11009931564331": 105, "20955248979421": 105, "306732245853965": 105, "41017158826192": 105, "52614176273346": 105, "641590987934787": 105, "75979987780253": 105, "878838074834722": 105, "amax": 105, "images_to_plot": 105, "i_col": 105, "new_titl": 105, "sig": 105, "plot_localizer_mass_univariate_method": [105, 106, 109], "plotted_slic": 106, "masked_pv": 106, "941": [106, 109], "plot_localizer_simple_analysi": [106, 109], "fetch_neurovault_id": [107, 117, 134, 153, 229, 230, 232], "stop_go_image_id": 107, "3041": 107, "3042": [107, 148, 153], "2676": 107, "2675": 107, "2818": 107, "2834": 107, "cognitive_paradigm_cogatla": 107, "contrast_definit": 107, "succ": 107, "map_typ": [107, 229], "image_id": [107, 117, 231], "nplot": 107, "absolute_path": 107, "t_to_z": 107, "t_score": 107, "deg_of_freedom": 107, "sf": 107, "z_valu": 107, "z_img": 107, "current_collect": 107, "ncomput": 107, "this_meta": 107, "ncollect": 107, "t_img": 107, "number_of_subject": 107, "meta_analysis_img": 107, "sqrt": [107, 131, 153, 192, 193, 274, 275], "plot_neurovault_meta_analysi": [107, 109], "downsampl": [108, 158, 179, 215, 379], "10k": 108, "sidecar": 108, "json_fil": 108, "repetitiontim": 108, "z_scores_right": 108, "z_scores_left": 108, "contrast_valu": 108, "accumul": [108, 436], "z_score_left": 108, "az_scores_right": 108, "popul": [108, 114, 154, 169, 187, 226, 327, 328, 329, 330, 331, 332, 333, 419], "ttest_1samp": 108, "pval_left": 108, "pval_right": 108, "z_val_left": 108, "z_val_right": 108, "plot_surface_bids_analysi": [108, 109], "841": 109, "auto_examples_07_advanc": 109, "sandbox": 111, "tent": 111, "incomplet": [111, 125, 153], "cycl": [111, 124, 125, 153, 185], "plot_surf_img": 111, "surfaceimag": [111, 264, 265], "polymesh": 111, "subplot_kw": [111, 394, 395, 396, 397], "mesh_part": 111, "plot_surf": [111, 123, 133, 135, 141, 145, 146, 147, 148, 153, 168, 169, 396, 397, 436], "isinst": 111, "fetch_nki": 111, "surfacemask": 111, "mean_data": 111, "__init__": [111, 168, 186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 269, 270, 271, 272, 273, 274, 275, 276, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 404, 405, 406, 407, 415], "feedback": [111, 138, 153, 168, 176], "prototyp": [111, 168], "backward": [111, 135, 148, 153, 168, 202, 203], "thoroughli": [111, 168], "895": 111, "20484": 111, "label_nam": [111, 264], "fetch_destrieux": 111, "avg_method": [111, 125, 146, 153, 394, 396], "median": [111, 141, 153, 327, 330, 394, 396, 410], "labels_mask": 111, "label_names_": [111, 264], "disabl": [111, 117, 125, 139, 141, 145, 153, 167, 404], "monkeypatch_masker_check": 111, "adjust_screening_percentil": 111, "check_embedded_nifti_mask": 111, "_check_embedded_nifti_mask": 111, "randomst": [111, 257, 258, 282, 291, 297, 343, 404, 405], "20206": 111, "20207": 111, "20208": 111, "4991939095387371": 111, "5115891053391053": 111, "4847132034632034": 111, "score_func": 111, "atleast_2d": 111, "dp": 111, "cold_hot": [111, 137, 153, 388, 393, 397, 400, 401, 403], "778": [111, 112], "1559": [111, 112], "plot_surface_image_and_mask": [111, 112], "auto_examples_08_experiment": 112, "permiss": [113, 141, 153], "auto_examples_python": 113, "auto_examples_jupyt": 113, "arrang": [114, 139, 153, 354, 356, 359, 373, 378, 383, 386, 391, 392, 393, 436], "alphabet": [114, 141, 153, 178], "bib": 114, "samara": [114, 167, 187, 190, 407], "septemb": [114, 125, 132, 147, 153, 407], "01093944": [114, 407], "elena": [114, 197], "erik": [114, 197], "erhardt": [114, 197], "eswar": [114, 197], "damaraju": [114, 197], "william": [114, 197, 226, 239, 269, 273], "gruner": [114, 197], "judith": [114, 197], "segal": [114, 197], "roger": [114, 197, 238], "silva": [114, 197], "havlicek": [114, 197], "sriniva": [114, 197], "rachakonda": [114, 197], "jill": [114, 197, 200, 226], "fri": [114, 197], "ravi": [114, 197], "kalyanam": [114, 197], "andrew": [114, 194, 197, 199, 219], "arvind": [114, 197], "caprihan": [114, 197], "jessica": [114, 197, 207, 212, 213], "eichel": [114, 197], "adelsheim": [114, 197], "angela": [114, 197, 207], "bryan": [114, 197], "juan": [114, 197], "bustillo": [114, 197], "sarah": [114, 197], "feldstein": [114, 197], "ew": [114, 197], "francesca": [114, 197], "filbei": [114, 197], "corei": [114, 197], "ford": [114, 197], "kent": [114, 197], "hutchison": [114, 197], "rex": [114, 197], "jung": [114, 197], "kiehl": [114, 197], "piyadasa": [114, 197], "kodituwakku": [114, 197], "yuko": [114, 197], "komesu": [114, 197], "mayer": [114, 197], "godfrei": [114, 197], "pearlson": [114, 197], "phillip": [114, 197], "joseph": [114, 197, 212], "sadek": [114, 197], "ursina": [114, 197], "teuscher": [114, 197], "vinc": [114, 197], "calhoun": [114, 197, 239], "frontiersin": [114, 194, 197, 229, 231, 239], "fnsy": [114, 197], "00002": [114, 197], "marti": [114, 209, 343], "onlinelibrari": [114, 199, 209, 238, 300, 343, 419], "wilei": [114, 199, 209, 238, 274, 275, 300, 343, 419], "1111": [114, 343], "1467": [114, 343], "842x": [114, 343], "00156": [114, 343], "arxiv": [114, 165, 167, 187, 190, 199, 200, 206, 207, 209, 210, 212, 218, 226, 233, 238, 300, 343, 419], "luca": [114, 166], "baldassarr": [114, 166], "janaina": [114, 166], "mourao": [114, 166, 175], "miranda": [114, 166, 175], "massimiliano": [114, 166], "pontil": [114, 166], "workshop": [114, 166, 198], "www0": [114, 166], "ac": [114, 166, 207, 219, 236, 237, 244], "staff": [114, 166], "neurosparse_prni": [114, 166], "1109": [114, 166, 198, 257, 258, 406, 412], "prni": [114, 166, 198], "yashar": [114, 323, 324, 420], "behzadi": [114, 306, 323, 324, 420], "khale": [114, 323, 324, 420], "restom": [114, 323, 324, 420], "joi": [114, 323, 324, 420], "liau": [114, 323, 324, 420], "liu": [114, 206, 210, 323, 324, 420], "perfus": [114, 323, 324, 420], "sciencedirect": [114, 162, 165, 166, 196, 198, 201, 204, 208, 214, 219, 224, 227, 228, 244, 252, 253, 323, 324, 343, 379, 420], "pii": [114, 162, 165, 166, 196, 198, 201, 204, 208, 214, 219, 224, 227, 228, 244, 252, 253, 323, 324, 343, 379, 420], "s1053811907003837": [114, 323, 324, 420], "mine": [114, 175, 198], "hierarchi": [114, 198], "pedro": [114, 198], "rosa": [114, 198], "neto": [114, 198], "lyttelton": [114, 198], "habib": [114, 198], "benali": [114, 198], "alan": [114, 198, 219, 244], "bootstrap": [114, 198], "1126": [114, 198, 212, 218], "1139": [114, 198], "s1053811910002697": [114, 198], "lorrain": [114, 165], "tyler": [114, 165], "semant": [114, 146, 148, 153, 165], "perirhin": [114, 165], "4766": [114, 165], "4775": [114, 165], "jneurosci": [114, 165], "1523": [114, 135, 153, 165], "2828": [114, 165], "loui": [114, 219, 244], "collin": [114, 196, 219, 244], "zijdenbo": [114, 219], "wim": [114, 219], "baar": [114, 219], "\u00e9": [114, 219, 224], "anim": [114, 219], "insect": [114, 219], "attila": [114, 219], "kuba": [114, 219], "\u0161": [114, 219], "\u00e1": [114, 219], "amal": [114, 219], "todd": [114, 165, 219], "pokropek": [114, 219], "editor": [114, 186, 219], "heidelberg": [114, 186, 204, 219], "springer": [114, 186, 204, 219], "cameron": [114, 199, 204, 239], "jame": [114, 199, 218, 274, 275], "holtzheim": [114, 199], "iii": [114, 199], "xiaop": [114, 199], "hu": [114, 199], "helen": [114, 199], "mayberg": [114, 199], "1914": [114, 199], "1928": [114, 199], "1002": [114, 199, 209, 238, 300, 419], "hbm": [114, 199, 300, 419], "21333": [114, 199], "kamalak": [114, 201], "ga\u00ebl": [114, 162, 201, 204, 252, 253, 257], "antonia": [114, 201], "machlouzarid": [114, 201], "shalit": [114, 201], "krzysztof": [114, 201, 229, 231], "117126": [114, 201], "s1053811920306121": [114, 201], "davidson": [114, 274, 275], "mackinnon": [114, 274, 275], "econometr": [114, 269, 273, 274, 275], "theori": [114, 173, 227, 274, 275], "univ": [114, 274, 275], "ny": [114, 274, 275], "isbn": [114, 269, 273, 274, 275], "978": [114, 274, 275], "512372": [114, 274, 275], "gso": [114, 274, 275], "gbv": [114, 274, 275], "cmd": [114, 274, 275], "srcha": [114, 274, 275], "srt": [114, 274, 275], "yop": [114, 274, 275], "ikt": [114, 274, 275], "trm": [114, 274, 275], "ppn": [114, 274, 275], "393847152": [114, 274, 275], "sourceid": [114, 274, 275], "fbw_bibsonomi": [114, 274, 275], "halgren": [114, 200, 208], "cerebr": [114, 170, 200, 206, 210, 212, 224, 226], "s151": [114, 200], "s1053": [114, 200, 219, 244], "8119": [114, 200, 219, 244], "71561": [114, 200], "christoph": [114, 135, 138, 153, 200, 208], "bruce": [114, 200, 206, 208, 210, 238], "ander": [114, 200, 208, 238], "s1053811910008542": [114, 208], "ga": [114, 166], "\u00eb": [114, 166], "graphnet": [114, 166], "june": [114, 131, 134, 137, 146, 153, 166, 167], "2015": [114, 117, 118, 119, 120, 121, 122, 126, 127, 153, 166, 187, 190, 204, 224, 226, 229, 231, 323, 324], "01147731": [114, 166], "\u00fc": [114, 166], "bingen": [114, 166], "00991743": [114, 166], "nico": [114, 212, 214], "dosenbach": [114, 129, 153, 212, 214], "binyam": [114, 212], "alexand": [114, 194, 206, 212, 213], "cohen": [114, 212, 213], "damien": [114, 212], "church": [114, 212, 213], "nelson": [114, 212, 213], "gagan": [114, 212, 213], "wig": [114, 212, 213], "alecia": [114, 212, 213], "christina": [114, 212], "lessov": [114, 212], "schlaggar": [114, 212, 213, 214, 323, 324], "kelli": [114, 212, 213, 219, 239, 244, 323, 324], "barn": [114, 212, 213, 323, 324], "dubi": [114, 212], "feczko": [114, 212], "rebecca": [114, 212, 215], "coalson": [114, 212], "pruett": [114, 212], "deanna": [114, 212, 214, 226], "barch": [114, 212, 226], "petersen": [114, 212, 213, 214, 323, 324], "bradlei": [114, 212, 213, 214, 226, 323, 324], "5997": [114, 212], "sciencemag": [114, 212, 218], "1194144": [114, 212], "duchi": [114, 167], "stephen": [114, 167, 207, 226, 239, 297, 343], "gould": [114, 167], "daphn": [114, 167], "koller": [114, 167], "subgradi": [114, 167], "1206": [114, 167], "3249": [114, 167], "joset": [114, 165], "etzel": [114, 165], "jeffrei": [114, 165, 194], "zack": [114, 165], "braver": [114, 165], "promis": [114, 165], "pitfal": [114, 160, 165], "s1053811913002917": [114, 165], "filippini": [114, 207, 226], "macintosh": [114, 226], "morgan": [114, 226], "hough": [114, 226], "gui": [114, 226], "goodwin": [114, 226], "giovanni": [114, 226], "frisoni": [114, 226], "matthew": [114, 226, 239, 343], "beckmann": [114, 207, 226, 323, 324], "clare": [114, 207, 226, 239], "mackai": [114, 207, 226], "carrier": [114, 226], "apo": [114, 226], "\u03b54": [114, 226], "allel": [114, 226], "proceed": [114, 165, 169, 207, 226, 254, 324], "academi": [114, 165, 207, 226, 254, 324], "7209": [114, 226], "7214": [114, 226], "pna": [114, 165, 207, 226, 324], "1073": [114, 165, 207, 226, 324], "0811879106": [114, 226], "sereno": [114, 238], "tootel": [114, 238], "intersubject": [114, 238], "28sici": [114, 209, 238], "291097": [114, 209, 238], "0193": [114, 209, 238], "281999": [114, 238], "3a4": [114, 209, 238], "3c272": [114, 238], "3aaid": [114, 209, 238], "hbm10": [114, 238], "3e3": [114, 209, 238], "3b2": [114, 209, 238], "sici": [114, 209, 238], "1097": [114, 209, 238], "aid": [114, 209, 238], "van": [114, 117, 200, 226, 229, 231, 323, 324], "der": [114, 200], "kouw": [114, 200], "florent": [114, 200], "s\u00e9gonn": [114, 200], "salat": [114, 200], "evelina": [114, 200], "busa": [114, 200], "larri": [114, 200], "seidman": [114, 200], "goldstein": [114, 200], "kennedi": [114, 200], "vern": [114, 200], "cavi": [114, 200], "niko": [114, 200], "makri": [114, 200], "rosen": [114, 200], "bhg087": [114, 200], "academ": [114, 200, 206, 226], "oup": [114, 200, 206, 226], "1193353": [114, 200], "boyd": 114, "edinburgh": 114, "fletcher": [114, 194], "sarang": 114, "joshi": 114, "riemannian": 114, "diffus": [114, 160, 173], "tensor": 114, "s0165168406001691": 114, "sigpro": 114, "2005": [114, 324], "vladimir": [114, 219, 244], "fonov": [114, 219, 244], "botteron": [114, 219, 244], "almli": [114, 219, 244], "mckinstri": [114, 219, 244], "unbias": [114, 160, 219, 244], "pediatr": [114, 219, 244], "s1053811910010062": [114, 219, 244], "rc": [114, 219, 244], "cr": [114, 219, 244], "dl": [114, 219, 244], "nonlinear": [114, 219, 244], "birth": [114, 219, 244], "adulthood": [114, 219, 244], "s102": [114, 219, 244], "70884": [114, 219, 244], "fox": [114, 207, 209, 324], "snyder": [114, 323, 324], "justin": [114, 324], "maurizio": [114, 324], "corbetta": [114, 324], "essen": [114, 117, 226, 229, 231, 324], "marcu": [114, 165, 226, 233, 324], "raichl": [114, 324], "9673": [114, 324], "9678": [114, 324], "juli": [114, 122, 153, 167, 324], "0504136102": [114, 324], "freedman": [114, 343], "nonstochast": [114, 343], "busi": [114, 343], "econom": [114, 343], "1983": [114, 343], "tandfonlin": [114, 343], "07350015": [114, 343], "10509354": [114, 343], "holm": [114, 206, 300, 419], "worslei": [114, 300, 419], "frith": [114, 300, 419], "frackowiak": [114, 300, 419], "1994": [114, 300, 419], "460020402": [114, 300, 419], "gabriel": [114, 229, 231], "rivera": [114, 117, 229, 231], "yannick": [114, 118, 153, 162, 224, 229, 231, 252, 253], "schwarz": [114, 229, 231], "satrajit": [114, 229, 231], "ghosh": [114, 117, 229, 231], "camil": [114, 229, 231], "maumet": [114, 117, 229, 231], "vanessa": [114, 229, 231], "sochat": [114, 117, 229, 231], "nichol": [114, 117, 173, 175, 226, 229, 231, 297, 337, 343], "tal": [114, 117, 180, 229, 231, 333], "yarkoni": [114, 117, 229, 231], "marguli": [114, 117, 229, 231], "neuroinformat": [114, 229, 231], "fninf": [114, 117, 229, 231], "00008": [114, 117, 229, 231], "philadelphia": [114, 166], "00839984": [114, 166], "educ": [114, 226, 233, 269, 273, 400], "fifth": [114, 220, 269, 273], "edit": [114, 146, 153, 168, 176, 269, 273], "066189": [114, 269, 273], "stern": [114, 269, 273], "nyu": [114, 125, 153, 269, 273], "wgreen": [114, 269, 273], "econometricanalysi": [114, 269, 273], "htm": [114, 269, 273], "logan": [114, 166], "grosenick": [114, 166], "brad": [114, 166], "klingenberg": [114, 166], "kiefer": [114, 166], "katovich": [114, 166], "brian": [114, 166, 239, 300, 419], "knutson": [114, 166], "s1053811912012487": [114, 166], "ida": [114, 218], "gobbini": [114, 218], "maura": [114, 218], "furei": [114, 218], "alumit": [114, 218], "ishai": [114, 218], "jennif": [114, 218], "schouten": [114, 218], "pietro": [114, 218], "pietrini": [114, 218], "5539": [114, 218], "1063736": [114, 218], "honorio": [114, 167, 187, 190], "tommi": [114, 187, 190], "jaakkola": [114, 187, 190], "1207": [114, 167, 187, 190], "4255": [114, 167, 187, 190], "andr": [114, 406, 412], "rena": [114, 141, 153, 157, 162, 173, 174, 252, 253, 405, 412], "tran": [114, 196, 406, 412], "anal": [114, 406, 412], "mach": [114, 406, 412], "intel": [114, 406, 412], "tpami": [114, 406, 412], "2815524": [114, 406, 412], "schwartz": [114, 117, 118, 153, 162, 224, 252, 253], "scalabl": [114, 162, 252, 253], "s1053811917308182": [114, 162, 252, 253], "koji": [114, 227], "complementari": [114, 227], "neuropsychologia": [114, 227], "s0028393211005070": [114, 227], "thorsten": [114, 165], "kahnt": [114, 165], "grueschow": [114, 165], "speck": [114, 165], "dylan": [114, 165, 239], "perceptu": [114, 165], "s0896627311002960": [114, 165], "nikolau": [114, 165, 254], "kriegeskort": [114, 165, 175, 254], "rainer": [114, 165, 254], "goebel": [114, 165, 254], "peter": [114, 165, 207, 209, 254], "bandettini": [114, 165, 254], "3863": [114, 165, 254], "3868": [114, 165, 254], "0600244103": [114, 165], "laird": [114, 207], "mickl": [114, 207], "kimberli": [114, 207], "rai": [114, 207], "rees": [114, 207], "mckai": [114, 207], "glahn": [114, 207], "4022": [114, 207], "4037": [114, 207], "1162": [114, 207, 233], "jocn": [114, 207, 233], "_a": [114, 207], "_00077": [114, 207], "1777164": [114, 207], "jocn_a_00077": [114, 207], "lancast": [114, 209], "rainei": [114, 209], "summerlin": [114, 209], "freita": [114, 209], "toga": [114, 209], "mazziotta": [114, 209], "autom": [114, 117, 196, 209, 229, 231], "preliminari": [114, 209], "forward": [114, 209], "1997": [114, 141, 153, 209], "281997": [114, 209], "3c238": [114, 209], "hbm6": [114, 209], "jack": [114, 161, 209], "woldorff": [114, 209], "lawrenc": [114, 209], "parson": [114, 209], "mario": [114, 209], "liotti": [114, 209], "catarina": [114, 209], "laci": [114, 209], "kochunov": [114, 209], "nickerson": [114, 209], "shawn": [114, 209], "mikiten": [114, 209], "talairach": [114, 135, 153, 172, 209], "28200007": [114, 209], "3a3": [114, 209], "3c120": [114, 209], "hbm30": [114, 209], "200007": [114, 209], "lindquist": [114, 138, 153, 300, 419], "stephan": [114, 300, 419], "geuter": [114, 300, 419], "tor": [114, 117, 229, 231, 300, 419], "wager": [114, 117, 229, 231, 300, 419], "caffo": [114, 300, 419], "modular": [114, 168, 300, 419], "reintroduc": [114, 300, 419], "biorxiv": [114, 300, 419], "407676": [114, 300, 419], "1101": [114, 300, 419], "traci": [114, 233], "jami": [114, 233], "parker": [114, 233], "csernanski": [114, 233], "morri": [114, 233], "randi": [114, 206, 210, 233], "buckner": [114, 206, 210, 233], "nondement": [114, 233], "dement": [114, 233], "1498": [114, 233], "1507": [114, 233], "1756878": [114, 233], "13th": [114, 258], "symposium": [114, 257, 258], "biomed": [114, 257, 258], "1282": [114, 258], "1285": [114, 258], "7493501": [114, 258], "behaviour": [114, 126, 138, 145, 150, 153, 166, 180, 226], "1328": [114, 166], "februari": [114, 118, 119, 124, 128, 129, 133, 143, 153, 166], "00563468": [114, 166], "tmi": [114, 166], "2113378": [114, 166], "yoichi": [114, 228], "hajim": [114, 228], "okito": [114, 228], "masa": [114, 228], "aki": [114, 138, 153, 228], "yusuk": [114, 228], "hiroki": [114, 228], "norihiro": [114, 228], "sadato": [114, 228], "yukiyasu": [114, 228], "s0896627308009586": [114, 228], "dougla": [114, 274, 275], "montgomeri": [114, 274, 275], "peck": [114, 274, 275], "geoffrei": [114, 274, 275], "vine": [114, 274, 275], "ed": [114, 274, 275], "son": [114, 274, 275], "0471754951": [114, 274, 275], "naselari": [114, 161], "kendrick": [114, 161], "kai": [114, 161], "shinji": [114, 161], "nishimoto": [114, 161], "gallant": [114, 161], "20691790": [114, 161], "pmid": [114, 161, 206, 210], "pubm": [114, 161, 196, 257, 323, 324], "jare": [114, 194], "nielsen": [114, 194], "brandon": [114, 194], "zielinski": [114, 194], "nichola": [114, 194], "lang": [114, 194, 196], "erin": [114, 194], "bigler": [114, 194], "janet": [114, 194], "lainhart": [114, 194], "multisit": [114, 194], "autism": [114, 194], "fnhum": [114, 194], "00599": [114, 194], "kate": [114, 207, 239], "stanlei": [114, 239], "colcomb": [114, 239], "tobe": [114, 239], "maarten": [114, 239, 323, 324], "menn": [114, 239, 323, 324], "melissa": [114, 239], "benedict": [114, 239], "moreno": [114, 224, 239], "laura": [114, 239], "panek": [114, 239], "shaquanna": [114, 239], "brown": [114, 239], "zavitz": [114, 239], "qingyang": [114, 239], "sharad": [114, 239], "sikka": [114, 239], "gutman": [114, 239], "saroja": [114, 239], "bangaru": [114, 239], "rochel": [114, 239], "tziona": [114, 239], "schlachter": [114, 239], "stephani": [114, 239], "kamiel": [114, 239], "ayesha": [114, 239], "anwar": [114, 239], "caitlin": [114, 239], "hinz": [114, 239], "kaplan": [114, 239], "anna": [114, 239], "rachlin": [114, 239], "samantha": [114, 239], "adelsberg": [114, 239], "cheung": [114, 239], "ranjit": [114, 239], "khanuja": [114, 239], "chaogan": [114, 239], "yan": [114, 239], "courtnei": [114, 239], "margaret": [114, 239], "wood": [114, 239], "cox": [114, 239], "adriana": [114, 239], "dimartino": [114, 239], "eva": [114, 239], "petkova": [114, 239], "philip": [114, 239], "reiss": [114, 239], "nanci": [114, 239], "duan": [114, 239], "dawn": [114, 239], "thompsen": [114, 239], "bharat": [114, 239], "biswal": [114, 239], "barbara": [114, 239], "coffei": [114, 239], "hoptman": [114, 239], "javitt": [114, 239], "nunzio": [114, 239], "pomara": [114, 239], "sidti": [114, 239], "harold": [114, 239], "koplewicz": [114, 239], "francisco": [114, 239], "castellano": [114, 239], "bennett": [114, 239], "leventh": [114, 239], "milham": [114, 239], "reilli": [114, 226], "valentina": [114, 226], "tomassini": [114, 226], "narend": [114, 226], "ramnani": [114, 226], "heidi": [114, 226], "johansen": [114, 226], "berg": [114, 226], "zone": [114, 226], "953": [114, 226], "965": [114, 226], "bhp157": [114, 226], "17303287": [114, 226], "wolfgang": [114, 205], "amanda": [114, 205], "nili": [114, 205], "tyszka": [114, 205], "vivo": [114, 205], "nuclei": [114, 205], "180063": [114, 205], "apr": [114, 205], "1038": [114, 205, 216, 234], "sdata": [114, 205, 216, 234], "bastien": [114, 224], "antoinett": [114, 224], "julien": [114, 224], "serr": [114, 224], "deni": [114, 224], "le": [114, 224], "bihan": [114, 224], "stanisla": [114, 224], "congdon": [114, 216, 234], "triplett": [114, 216, 234], "karlsgodt": [114, 216, 234], "sabb": [114, 216, 234], "freimer": [114, 216, 234], "cannon": [114, 216, 234], "bilder": [114, 216, 234], "phenom": [114, 216, 234], "160110": [114, 216, 234], "decemb": [114, 126, 127, 141, 153, 216, 234], "mitig": [114, 379], "s1053811916303871": [114, 379], "2142": [114, 323, 324], "2154": [114, 323, 324], "22019881": [114, 323, 324], "pubmedcentr": [114, 323, 324], "articlerend": [114, 323, 324], "fcgi": [114, 323, 324], "artid": [114, 323, 324], "pmc3254728": [114, 323, 324], "timothi": [114, 206, 213, 226, 323], "laumann": [114, 206, 213, 323], "fran": [114, 213], "miezin": [114, 213], "anish": [114, 323], "mitra": [114, 323], "s1053811913009117": [114, 323], "raimon": [114, 323, 324], "pruim": [114, 323, 324], "daan": [114, 323, 324], "rooij": [114, 323, 324], "alberto": [114, 323, 324], "llera": [114, 323, 324], "buitelaar": [114, 323, 324], "aroma": [114, 155, 323, 324], "hilari": [114, 215], "richardson": [114, 215], "grace": [114, 215], "lisandrelli": [114, 215], "alexa": [114, 215], "riobueno": [114, 215], "naylor": [114, 215], "sax": [114, 215], "social": [114, 215], "twelv": [114, 215], "livio": [114, 277], "wouter": [114, 277], "aldo": [114, 277], "novemb": [114, 135, 138, 141, 144, 153, 277], "schaefer": [114, 206], "ru": [114, 206], "kong": [114, 206], "gordon": [114, 206], "nian": [114, 206], "zuo": [114, 206], "avram": [114, 206], "yeo": [114, 206, 210, 375], "3095": [114, 206], "3114": [114, 206], "bhx179": [114, 206], "25696344": [114, 206], "_schaeferfullsupp": [114, 206], "seitzman": [114, 141, 153, 214], "caterina": [114, 214], "gratton": [114, 214], "marek": [114, 214], "raut": [114, 214], "116290": [114, 214], "s105381191930881x": [114, 214], "zarrar": 114, "shehzad": 114, "gee": 114, "kristin": 114, "gotim": 114, "lucina": 114, "q": [114, 170, 176, 187, 278, 282, 295, 298, 417], "uddin": 114, "sang": 114, "han": 114, "lee": 114, "ami": 114, "krain": 114, "xavier": 114, "unconstrain": 114, "2209": 114, "2229": 114, "bhn256": 114, "17300841": 114, "sm": [114, 226], "glasser": [114, 226], "salimi": [114, 226], "khorshidi": [114, 226], "duff": [114, 226], "dc": [114, 226], "mw": [114, 226], "woolrich": [114, 226], "jenkinson": [114, 226], "cf": [114, 180, 226], "rfmri": [114, 226], "ohbm": [114, 137, 153, 226], "annual": [114, 226], "meet": [114, 150, 153, 226, 437], "address": [114, 170, 172, 176, 297, 343], "localis": [114, 297, 343], "vidaurr": [114, 226], "ej": [114, 226], "behren": [114, 226], "kamil": [114, 226], "ugurbil": [114, 226], "karla": [114, 207, 226], "miller": [114, 207, 226], "demograph": [114, 226], "1565": [114, 226], "1567": [114, 226], "watkin": [114, 207], "toro": [114, 207], "textquoteright": [114, 207], "architectur": [114, 157, 207], "13040": [114, 207], "13045": [114, 207], "0905267106": [114, 207], "mccarthi": [114, 226], "emma": [114, 226], "clair": [114, 226], "xu": [114, 226], "horton": [114, 226], "eugen": [114, 226], "\u00e2": [114, 226], "mil": [114, 226], "u\u011furbil": [114, 226], "humanconnectom": [114, 226], "storag": [114, 180, 226, 230, 232], "media": [114, 226], "s500": [114, 226], "hcp500_megatrawl_april2015": [114, 226], "fenna": [114, 206, 210], "krienen": [114, 206, 210], "jorg": [114, 206, 210], "sepulcr": [114, 206, 210], "mert": [114, 206, 210], "sabuncu": [114, 206, 210], "danial": [114, 206, 210], "lashkari": [114, 206, 210], "marisa": [114, 206, 210], "hollinshead": [114, 206, 210], "roffman": [114, 206, 210], "jordan": [114, 206, 210], "smoller": [114, 206, 210], "lilla": [114, 206, 210], "z\u00f6llei": [114, 206, 210], "polimeni": [114, 206, 210], "hesheng": [114, 206, 210], "neurophysiologi": [114, 206, 210], "1125": [114, 206, 210], "1165": [114, 206, 210], "21653723": [114, 206, 210], "1152": [114, 206, 210], "jn": [114, 206, 210], "00338": [114, 206, 210], "tzourio": [114, 196], "mazoy": [114, 196], "landeau": [114, 196], "papathanassi": [114, 196], "crivello": [114, 196], "etard": [114, 196], "delcroix": [114, 196], "joliot": [114, 196], "macroscop": [114, 196], "2002": [114, 196], "s1053811901909784": [114, 196], "0978": [114, 196], "flore": [114, 186], "baronnet": [114, 186], "andrea": [114, 186, 257], "kleinschmidt": [114, 186, 257], "fillard": [114, 186], "stroke": [114, 186], "patient": [114, 173, 186], "tianzi": [114, 186], "jiang": [114, 186], "nassir": [114, 186], "navab": [114, 186], "josien": [114, 186], "pluim": [114, 186], "viergev": [114, 186], "assist": [114, 186], "intervent": [114, 186], "miccai": [114, 154, 186], "cn2h9c": [114, 186], "spontan": [114, 204], "1008": [114, 187], "5071": [114, 187], "bio": [114, 187], "sepideh": [114, 257], "sadaghiani": [114, 257], "20153834": [114, 257], "s1053811913003340": [114, 204], "merlin": [114, 257], "keller": [114, 257], "recoveri": [114, 257], "nano": [114, 257], "macro": [114, 257], "1177": [114, 257], "5490204": [114, 257], "gerard": [114, 343], "ridgwai": [114, 343], "webster": [114, 343], "s1053811914000913": [114, 343], "synthesi": [114, 117, 167, 229, 231], "adelstein": 114, "donald": 114, "klein": 114, "retest": 114, "2163": 114, "2177": [114, 141, 153], "s1053811909011525": 114, "di": 114, "martino": 114, "1432": 114, "1445": 114, "s1053811909010167": 114, "antonio": [114, 224], "frouin": [114, 224], "brainom": [114, 138, 153, 224], "s1053811915008745": [114, 224], "abstract": [115, 326], "knowledg": [115, 155, 170, 333], "beaten": 115, "mask_face_littl": [116, 178, 218], "mask_house_littl": [116, 178, 218], "comfort": [116, 168], "plenti": 116, "hesit": [116, 168], "rarr": [116, 180], "tube": 116, "clever": [116, 167], "resp": 116, "brighter": 116, "scratch": 116, "elementari": 116, "brows": [117, 148, 153], "introduc": [117, 131, 141, 150, 153, 160, 161, 165, 168, 180, 186, 187, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "upload": 117, "modal": [117, 160, 168, 237, 320], "went": 117, "webpag": 117, "click": [117, 170, 180, 224, 436], "brainpedia": 117, "1952": [117, 141, 153], "brainpedia_subset": 117, "32015": 117, "32016": 117, "criteria": [117, 168, 173, 194, 229], "collection_term": [117, 229], "collection_metadata": [117, 229], "everi": [117, 154, 155, 159, 160, 161, 165, 167, 168, 170, 176, 180, 188, 202, 203, 229, 328, 331, 378, 383, 386, 391, 392, 393, 395, 410, 411, 417, 437], "image_term": [117, 229], "snippet": 117, "wait": [117, 167], "is_valid": [117, 141, 153], "treat": 117, "cbf": 117, "cbv": 117, "express": [117, 123, 126, 153, 173, 178, 229, 255, 256, 280, 282, 285, 310, 391], "ignorecas": 117, "special": [117, 124, 141, 153, 168], "isnul": [117, 229], "notnul": [117, 229], "notequ": [117, 229], "greaterorequ": [117, 229], "greaterthan": [117, 229], "lessorequ": [117, 229], "lessthan": [117, 229], "notin": [117, 229], "notcontain": [117, 229], "resultfilt": [117, 229], "OR": 117, "xor": 117, "NOT": 117, "conveni": [117, 179, 180, 215], "collection_filt": [117, 229], "callabl": [117, 148, 153, 190, 229, 250, 251, 252, 253, 254], "image_filt": [117, 229], "anyth": [117, 167, 168], "lambda": 117, "rewritten": 117, "suppos": [117, 167, 176, 178, 180, 274, 275], "weird": 117, "small_meta_imag": 117, "collections_meta": [117, 229, 230, 231, 232], "platform": [117, 134, 153, 176], "unless": [117, 167, 168, 234, 297, 343, 388, 419], "vectorize_word": [117, 229, 231], "kj": 117, "ss": 117, "vv": 117, "te": 117, "ra": [117, 314], "front": [117, 269, 272], "neuroinform": 117, "contributor": [118, 119, 121, 122, 168, 176], "git": [118, 119, 121, 122, 126, 128, 131, 153, 168, 176], "shortlog": [118, 119, 121, 122, 126, 128, 131, 153], "bugfix": [120, 121, 127, 128, 131, 149, 153, 168], "minor": [121, 134, 136, 153, 160], "rewamp": [121, 153], "brok": [121, 153], "maint": [122, 123, 124, 125, 126, 128, 131, 132, 133, 135, 138, 141, 143, 146, 147, 148, 149, 150, 153, 168], "obei": [122, 153], "debian": [122, 153], "rule": [122, 153, 160, 161, 168, 250, 251, 252, 253], "januari": [123, 142, 148, 153], "2023": [123, 124, 125, 153], "bump": [123, 138, 141, 146, 147, 148, 153, 161, 163, 176], "v1": [123, 138, 146, 148, 153], "v3": [123, 153], "3237": [123, 153], "doc": [123, 124, 125, 126, 131, 133, 134, 138, 141, 143, 144, 147, 148, 149, 150, 151, 153, 168, 176], "theme": [123, 150, 153], "furo": [123, 150, 153], "3125": [123, 150, 153], "3196": [123, 150, 153], "3181": [123, 150, 153], "2715": [123, 150, 153], "tick": [123, 153, 168, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 383, 385, 386, 392, 393, 394, 396, 397, 399, 401, 403], "3374": [123, 153], "valueerror": [123, 153, 310, 314, 327, 328, 330, 331, 423], "3385": [123, 153], "compute_multi_epi_mask": [123, 153, 179, 329], "3412": [123, 153], "3403": [123, 153], "test_cluster_level_parameters_smok": [123, 153], "3436": [123, 153], "creation": [123, 141, 153, 257, 258, 282, 295, 417], "3453": [123, 153], "imput": [123, 153], "cubic": [123, 153, 180, 190, 419], "spline": [123, 153, 385, 386, 392, 393, 400, 419], "friendli": [123, 153, 437], "rework": [123, 128, 134, 141, 147, 153], "deploi": [123, 153], "3426": [123, 153], "3439": [123, 153], "contribut": [123, 135, 138, 139, 140, 141, 142, 143, 147, 148, 150, 153, 161, 170, 176, 437], "changelog": [123, 133, 176], "whatsnew": [123, 153], "3446": [123, 153], "3452": [123, 153], "privat": [123, 125, 150, 153], "weighted_connectivity_graph": [123, 153], "nearest_neighbor_group": [123, 153], "renam": [123, 134, 138, 153, 176], "3347": [123, 153], "alias": [123, 153], "builtin": [123, 153], "3422": [123, 153], "compute_multi_gray_matter_mask": [123, 153], "3427": [123, 153], "3424": [123, 153], "3429": [123, 153], "_safe_cach": [123, 153], "deem": [123, 153], "outdat": [123, 132, 153], "anymor": [123, 150, 153], "3375": [123, 153], "3433": [123, 153], "docstr": [123, 124, 139, 144, 147, 150, 153, 168, 272, 274, 275], "migrat": [123, 153], "nistats_migr": [123, 153], "rst": [123, 153, 168, 176], "3449": [123, 153], "april": [124, 130, 133, 139, 140, 149, 153], "3498": [124, 153], "3444": [124, 153], "predefin": [124, 153], "3259": [124, 153], "3605": [124, 153], "refactor": [124, 125, 132, 146, 148, 150, 153, 176], "create_fake_bids_dataset": [124, 153], "3525": [124, 153], "3362": [124, 153], "3531": [124, 153], "_standard": [124, 153], "3474": [124, 153], "3563": [124, 153], "confus": [124, 153, 161, 318], "3483": [124, 153], "3173": [124, 153], "sub_label": [124, 153, 285, 320], "3351": [124, 153], "ridgeclassifiercv": [124, 153, 250, 251, 252, 253], "3626": [124, 153], "3631": [124, 153], "3414": [124, 153], "fetch_atlas_craddock_2012": [124, 125, 153, 155], "3353": [124, 153], "3548": [124, 125, 153], "pep8": [124, 125, 153, 168, 176], "3549": [124, 153], "3551": [124, 153], "3552": [124, 153], "3553": [124, 153], "3554": [124, 153], "3555": [124, 153], "helper": [124, 126, 133, 134, 153, 168, 182, 229], "img_to_signals_label": [124, 138, 141, 153, 411, 413], "signals_to_img_label": [124, 153, 410, 414], "img_to_signals_map": [124, 153, 410, 414], "signals_to_img_map": [124, 153, 411, 413], "3523": [124, 153], "move": [124, 125, 126, 133, 146, 153], "setuptool": [124, 153], "backend": [124, 128, 138, 143, 148, 153, 258, 398], "pyproject": [124, 153, 168, 176, 437], "toml": [124, 153, 168, 176, 437], "hatchl": [124, 153, 176], "met": [124, 153], "3635": [124, 153], "3557": [124, 153], "bibtex": [124, 150, 153], "3558": [124, 153], "restor": [124, 153], "spatialimag": [124, 153, 178, 303], "3462": [124, 153], "3465": [124, 153], "3445": [124, 153], "3478": [124, 153], "3477": [124, 153], "3485": [124, 153], "3491": [124, 153], "3484": [124, 153], "3172": [125, 153], "logisticregressioncv": [125, 153, 250, 251, 252, 253], "3736": [125, 153], "lassocv": [125, 153, 250, 251, 252, 253], "3781": [125, 153], "3873": [125, 153], "3203": [125, 153], "facilit": [125, 153, 175, 180], "downstream": [125, 153], "3856": [125, 153], "transform_img": [125, 153, 327, 328, 329], "3971": [125, 153], "surf_plot": [125, 133, 153], "_plot_surf_matplotlib": [125, 153], "prevent": [125, 153, 315, 316, 335, 336, 337, 339, 340], "3942": [125, 153], "3644": [125, 153], "gifti": [125, 153, 238, 239, 259, 260, 261], "3819": [125, 153], "3879": [125, 153], "entiti": [125, 153], "3742": [125, 153], "throw": [125, 153, 333], "3811": [125, 153], "fitter": [125, 153], "had": [125, 137, 153], "grid_param": [125, 153], "3733": [125, 153], "3794": [125, 153], "3797": [125, 153], "2804": [125, 153], "relax": [125, 153], "3816": [125, 153], "3723": [125, 153], "3897": [125, 153], "plotli": [125, 148, 153, 357, 394, 396, 397, 436, 437], "3945": [125, 153], "clearli": [125, 148, 153, 168], "3973": [125, 153], "3987": [125, 153], "3857": [125, 153], "3597": [125, 153], "3774": [125, 153], "3994": [125, 153], "check_ev": [125, 153], "3943": [125, 153], "old": [125, 141, 147, 148, 153], "cobr": [125, 129, 133, 153], "3743": [125, 153], "isort": [125, 153, 168], "complianc": [125, 153, 168], "codebas": [125, 153, 168], "3538": [125, 153], "3566": [125, 153], "3556": [125, 153], "3601": [125, 153], "3609": [125, 153], "3646": [125, 153], "3647": [125, 153], "3615": [125, 153], "3614": [125, 153], "3648": [125, 153], "3651": [125, 153], "finish": [125, 153, 167, 168, 299, 319, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 391, 399, 401, 403], "3836": [125, 153], "3833": [125, 153], "3827": [125, 153], "3803": [125, 153], "3802": [125, 153], "3795": [125, 153], "3783": [125, 153], "3777": [125, 153], "meanwhil": [125, 153], "3722": [125, 153], "3732": [125, 153], "3838": [125, 153], "3753": [125, 153], "one_mesh_info": [125, 153], "full_brain_info": [125, 153], "_one_mesh_info": [125, 153], "_full_brain_info": [125, 153], "3847": [125, 153], "manag": [125, 153, 168, 176, 437], "3854": [125, 153], "BY": [125, 153], "_compute_facecolors_matplotlib": [125, 153], "html_surfac": [125, 153], "_get_vertexcolor": [125, 153], "gh": [125, 153, 168], "3855": [125, 153], "doctest": [125, 153], "3681": [125, 153], "_mix_colormap": [125, 153], "3919": [125, 153], "decor": [125, 147, 153, 168], "3921": [125, 153], "3927": [125, 153], "shorten": [125, 150, 153], "3934": [125, 153], "sym_to_vec": [126, 131, 134, 146, 153], "modernis": [126, 153], "style": [126, 148, 153, 249], "784": [126, 153], "copy_img": [126, 153], "indexerror": [126, 148, 153], "fast_abs_percentil": [126, 153], "875": [126, 153], "group_sparse_covari": [126, 153, 167, 188], "n_cut": [126, 153, 374], "find_cut_slic": [126, 133, 153], "822": [126, 153], "targett": [127, 153], "renew": [128, 153], "flake8": [128, 150, 153, 168], "pull": [128, 150, 153, 173, 175], "symmetric_split": [128, 153, 202, 203], "mac": [128, 153], "numpy_convers": [128, 153], "csv_to_arrai": [128, 153], "refresh": [128, 153], "sparsifi": [128, 153], "circleci": [128, 133, 153], "brainhack": [129, 134, 153], "fetch_cobr": [129, 133, 144, 148, 153], "basc": [129, 153, 198], "expand": [130, 153, 173, 178, 310, 404, 406], "homedir": [130, 153], "uniformli": [130, 153, 161, 388, 394, 396, 397, 401, 403], "aal": [130, 153, 196], "fetch_atlas_a": [130, 149, 153], "august": [131, 138, 150, 153], "wrong": [131, 149, 153, 170], "ivan": [131, 138, 153], "gonzalez": [131, 138, 153], "resolv": [132, 142, 153], "1238": [132, 153], "get_affin": [132, 153, 178, 302], "checkout": [133, 153, 168, 176], "latest": [133, 153, 168, 176, 324], "_get_mask_volum": [133, 153], "_adjust_screening_percentil": [133, 153], "uncompress": [133, 137, 153], "tar": [133, 153, 176], "set_axis_bgcolor": [133, 153], "fast_svd": [133, 153], "switch": [133, 140, 153, 168, 176, 385], "lapack": [133, 153, 167], "svd": [133, 153, 258, 306, 405, 420], "heurist": [133, 153, 166, 167, 188, 337, 378, 391, 392, 393, 400, 436], "pip": [133, 138, 141, 153, 168, 176, 437], "_safe_get_data": [133, 153], "safe": [133, 153], "ensure_finit": [133, 153, 300, 334, 337, 419], "cov_to_corr": [133, 153], "prec_to_parti": [133, 153], "qualit": [133, 153], "fetch_surf_fsaverage5": [133, 138, 153], "schizophrenia": [133, 153, 173], "coveral": [133, 153], "codecov": [133, 153], "sym_matrix_to_vec": [134, 153, 193], "largest_connected_compon": [134, 153], "workaround": [134, 153], "vec_to_sym_matrix": [134, 153], "plot_connectivity_measur": [134, 153], "tighter": [134, 153, 167], "largest_connected_component_img": [134, 153], "largest": [134, 153, 167, 309, 335, 336, 337, 338, 339, 340, 341, 377], "joe": [135, 153], "necu": [135, 153], "fetch_atlas_talairach": [135, 153], "resampling_interpol": [135, 153, 385, 386, 392, 393, 400], "incompat": [135, 153, 282], "cautious": [135, 153], "anat_img": [135, 153, 378], "jeff": [135, 153], "chiang": [135, 153], "analu": [135, 138, 153], "madhyastha": [135, 138, 153], "meghana": [135, 138, 153], "sfvnmac": [135, 138, 153], "bedetti": [135, 138, 153], "griffith": [135, 153], "lannuzel": [135, 138, 153], "1536": [136, 153], "usabl": [136, 153, 165, 167, 228, 254], "node_color": [136, 146, 153, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 399], "1595": [136, 153], "nifti2imag": [136, 153], "confer": [137, 153], "lock": [137, 153], "whitespac": [137, 153], "attributeerror": [137, 153], "httperror": [137, 153], "view_mark": [138, 139, 141, 146, 153, 399, 400, 436], "orthogon": [138, 153, 173, 282, 284, 289, 295, 300, 345, 354, 355, 356, 359, 373, 378, 380, 383, 385, 386, 389, 391, 392, 393, 417, 419], "view_stat_map": [138, 153], "python2": [138, 139, 140, 141, 153], "layout": [138, 153, 254, 345], "navig": [138, 153], "anaconda": [138, 153, 437], "feel": [138, 153, 168], "shout": [138, 153], "pbellec": [138, 153], "great": [138, 153], "awesom": [138, 153], "sportingli": [138, 153], "accommod": [138, 153], "thank": [138, 153, 168, 295, 296, 297], "miykael": [138, 153], "brainsprit": [138, 139, 153, 436], "himanshupathak21061998": [138, 139, 153], "octob": [138, 141, 153], "uniti": [138, 153], "channel": [138, 153], "life": [138, 153], "remi": [138, 153], "akshai": [138, 153], "erramuzp": [138, 153], "foucault": [138, 153], "jehan": [138, 153], "nikolaidi": [138, 153], "dillon": [138, 153], "plunkett": [138, 153], "operto": [138, 153], "dtyulman": [138, 153], "0a0": 138, "1705": [138, 153], "grid_search": [138, 153, 250, 251, 252, 253], "menuet": [138, 153], "romuald": [138, 153], "consum": [139, 153, 163, 167, 176, 178], "noteworthi": [139, 153, 161], "fetch_atlas_schaefer_2018": [139, 141, 153], "fetch_coords_seitzman_2018": [139, 153], "node_coord": [139, 141, 153, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 389, 399], "edge_cmap": [139, 141, 153, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 399], "load_niimg": [139, 153], "silent": [139, 148, 153], "book": [139, 153], "signatur": [139, 153, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423], "mgz": [139, 140, 153, 394, 395, 396, 397, 403, 421], "mne": [139, 140, 153], "lowest": [140, 153], "broke": [140, 153], "v2": [141, 146, 153], "viewabl": [141, 153], "vscode": [141, 153], "biap8": [141, 153], "input_output": [141, 153], "2172": [141, 153], "giant": [141, 153], "plot_connectome_strength": [141, 144, 148, 153], "2028": [141, 153], "pad": [141, 151, 153, 179, 180, 304, 315, 316, 337, 340, 344, 346, 347, 418], "2025": [141, 153], "1953": [141, 153], "ticklabel": [141, 153], "psc": [141, 145, 153, 327, 328, 329, 330, 331, 332, 333, 419], "standard_devi": [141, 153, 327, 330, 410], "2221": [141, 153], "2057": [141, 153], "2157": [141, 153], "truncat": [141, 153], "det": [141, 153, 205], "2235": [141, 153], "2255": [141, 153], "ndarrai": [141, 153, 186, 187, 188, 189, 190, 191, 192, 193, 206, 208, 212, 214, 215, 226, 227, 250, 251, 252, 253, 255, 256, 257, 258, 264, 265, 269, 272, 273, 274, 275, 278, 282, 295, 297, 300, 302, 305, 306, 312, 313, 315, 317, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 381, 387, 390, 394, 395, 396, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423], "2107": [141, 153], "attempt": [141, 153, 285], "2212": [141, 153], "nose": [141, 153], "2231": [141, 153], "2248": [141, 153], "2169": [141, 153], "05_advanc": [141, 153], "03_connect": [141, 153], "2063": [141, 153], "merg": [141, 153, 157, 168, 173, 176, 179, 406], "plot_adhd_spher": [141, 153], "duplic": [141, 153], "review": [141, 153, 165, 176], "plot_canica_analysi": [141, 153], "plot_haxby_decod": [141, 153], "2166": [141, 153], "unsuit": [141, 153], "redund": [141, 153, 168], "crash": [141, 153], "1888": [141, 153], "2083": [141, 153], "2052": [141, 153], "2118": [141, 153], "2138": [141, 153], "faulti": [141, 153], "2272": [142, 153], "developmental_fmri": [142, 153], "launch": [143, 153, 160], "2429": [143, 153], "2302": [143, 153], "typo": [143, 153], "2312": [143, 153], "fetch_nyu_rest": [143, 146, 153], "2308": [143, 153], "2299": [144, 153], "2304": [144, 153], "2307": [144, 153], "2509": [144, 153], "2327": [144, 153], "art": [144, 153, 161, 250, 251, 252, 253], "nodal": [144, 153, 389, 436], "decim": [144, 153, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 386], "interchang": [144, 153], "compute_brain_mask": [144, 147, 153, 179, 250, 251, 252, 253, 257, 258, 332, 339, 405], "compute_gray_matter_mask": [144, 148, 153], "regard": [144, 153, 166, 220, 244, 324], "erron": [144, 153, 206], "readm": [144, 153], "serv": [145, 153, 168, 176, 201, 215], "1024": [145, 153, 201], "2619": [145, 153], "2622": [145, 153], "2684": [145, 153], "2702": [145, 153], "one_minus_pvalu": [145, 153, 270], "stabil": [145, 153, 159, 252, 253, 270], "cumul": [145, 153, 270], "2567": [145, 153], "2674": [145, 153], "2553": [145, 153], "arm": [145, 153], "2606": [145, 153], "whatev": [145, 153], "2669": [145, 153], "notat": [145, 148, 153, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 383, 385, 386, 392, 393, 394, 396, 397], "2697": [145, 153], "2712": [145, 153], "handi": [145, 153, 169], "2696": [145, 153], "2714": [145, 153], "2719": [145, 153], "2707": [146, 153], "2858": [146, 153], "inher": [146, 153], "basemask": [146, 153], "fsaverage3": [146, 153, 238, 401], "fsaverage4": [146, 153, 238, 401], "fsaverage6": [146, 153, 238, 401], "2815": [146, 153], "curv": [146, 153, 160, 161, 163, 167, 173, 394, 397, 403, 421], "2532": [146, 153], "struct": [146, 153], "footcit": [146, 148, 150, 153], "footbibliographi": [146, 148, 150, 153], "2806": [146, 153], "2732": [146, 153], "_get_voxelwise_model_attribut": [146, 153], "2792": [146, 153], "ascend": [146, 153, 310], "1155": [146, 153], "2831": [146, 153], "zoom": [146, 153], "surround": [146, 153, 423], "2798": [146, 153], "inconsist": [146, 153, 295, 297], "2767": [146, 153], "2826": [146, 153], "marker_label": [146, 153, 402], "2745": [146, 153], "auto_exampl": [146, 153, 168, 401], "2805": [146, 153], "flow": [146, 153, 170, 173], "2821": [146, 148, 153], "butterwoth": [146, 153], "stratifi": [146, 153, 160, 250, 252, 254], "2869": [146, 153], "2867": [146, 153], "2868": [146, 153], "juelich": [147, 153, 203], "2723": [147, 153], "load_mni152_gm_templ": [147, 153, 219, 242, 244, 245, 246], "load_mni152_wm_templ": [147, 153, 219, 243, 244, 245], "load_mni152_gm_mask": [147, 153, 219], "load_mni152_wm_mask": [147, 153, 219], "2738": [147, 153], "2755": [147, 153], "binarize_img": [147, 153], "skullstrip": [147, 153, 173, 244], "2904": [147, 153], "compute_multi_grey_matter_mask": [147, 153], "2876": [147, 153], "2941": [147, 153], "preset": [147, 148, 153, 324, 436], "nevertheless": [147, 153], "8339": [147, 153], "fill_doc": [147, 153], "2875": [147, 153], "affect": [147, 153, 170, 173], "2928": [147, 153], "jqueri": [147, 153], "vulner": [147, 153], "2944": [147, 153], "2022": [148, 149, 150, 153], "2902": [148, 153], "3061": [148, 153], "2946": [148, 153], "3016": [148, 153], "kmean": [148, 150, 153, 157, 174, 179, 282, 291, 404, 405], "2282": [148, 153], "3065": [148, 153], "mainten": [148, 153], "encourag": [148, 153, 168], "3026": [148, 153], "submodul": [148, 150, 153, 168], "3126": [148, 153], "get_bids_fil": [148, 153], "parse_bids_filenam": [148, 153], "subpart": [148, 153], "3036": [148, 153], "3009": [148, 153], "3013": [148, 153], "threw": [148, 153], "typeerror": [148, 153, 310], "3035": [148, 153], "3078": [148, 153], "3111": [148, 153], "hommel": [148, 153], "3109": [148, 153], "benjamini": [148, 153, 170, 281], "hocheberg": [148, 153], "3137": [148, 153], "3135": [148, 153], "retain": [148, 153, 160, 161, 170, 186, 187, 188, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 323, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407, 410, 411], "2965": [148, 153], "demean": [148, 153, 323, 324], "3003": [148, 153], "triag": [148, 153], "polici": [148, 153], "spm_hrf": [148, 153, 282, 284, 289], "2942": [148, 153], "3008": [148, 153], "test_img_plot": [148, 153], "reorgan": [148, 153, 168], "3015": [148, 153], "3033": [148, 153], "3077": [148, 153], "2859": [148, 153], "3106": [148, 153], "3081": [148, 153], "3082": [148, 153], "3093": [148, 153], "3133": [148, 153], "cond_id": [148, 153], "ex": [148, 153, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 383, 385, 386, 392, 393, 394, 396, 397], "3025": [148, 153], "3039": [148, 153], "slicer": [148, 153, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 436], "projector": [148, 153, 372], "3073": [148, 153], "byte": [148, 153, 168, 309, 315], "therefor": [148, 153, 159, 165, 167, 196, 198], "2655": [148, 153], "recarrai": [148, 153, 194, 200, 201, 212, 213, 214, 222, 223, 224, 233], "2829": [148, 153], "h0_fmax": [149, 153, 343], "3184": [149, 153], "fetch_abide_pcp": [149, 153], "func_preproc": [149, 153, 194], "3174": [149, 153], "3179": [149, 153], "_apply_cluster_size_threshold": [149, 153], "cluster_s": [149, 153], "3201": [149, 153], "beyond": [149, 153], "newest": [149, 153, 229], "3188": [149, 153], "3098": [149, 153], "3127": [149, 153], "3165": [149, 153], "determinist": [149, 153, 173, 196, 198, 200, 202, 203, 205, 206, 208, 209, 210, 404], "glossari": [149, 153], "3152": [149, 153], "3207": [149, 153], "3178": [149, 153], "cfg": [149, 153], "2953": [149, 153], "_neurovault_base_url": [150, 153], "_neurosynth_fetch_words_url": [150, 153], "3281": [150, 153], "3222": [150, 153], "3233": [150, 153], "3241": [150, 153], "3255": [150, 153], "c_ra": [150, 153], "3235": [150, 153], "_check_second_level_input": [150, 153], "flm_object": [150, 153], "3283": [150, 153], "3284": [150, 153], "_gamma_difference_hrf": [150, 153], "hemodynamic_model": [150, 153], "slight": [150, 153], "distort": [150, 153, 323], "3297": [150, 153], "0rc1": [150, 153], "wn": [150, 153], "unfilt": [150, 153], "3293": [150, 153], "3306": [150, 153], "3312": [150, 153], "typograph": [150, 153], "3337": [150, 153], "censor": [150, 153, 419], "3193": [150, 153], "3185": [150, 153], "conform": [150, 153, 170], "3262": [150, 153], "fall": [150, 153, 168, 388, 423], "3292": [150, 153], "n_elements_": [150, 153, 327, 328, 329, 330, 331, 332, 333], "3311": [150, 153], "filesystem": [150, 153], "branch": [150, 153, 168, 176], "diff": [150, 153], "3317": [150, 153], "3333": [150, 153], "3322": [150, 153], "carpet_plot": [150, 153], "deleg": [150, 153], "cmap_label": [150, 153, 379], "3209": [150, 153], "fsaverage5_spher": [150, 153], "3229": [150, 153], "regressionresult": [150, 153, 269, 273, 278, 282, 291], "simpleregressionresult": [150, 153, 282], "olsmodel": [150, 153, 272, 274, 275], "likelihoodmodelresult": [150, 153, 274, 275], "df_resid": [150, 153], "wdesign": [150, 153], "wresid": [150, 153], "norm_resid": [150, 153], "wy": [150, 153], "fetch_openneuro_dataset_index": [150, 153], "favor": [150, 153], "3216": [150, 153], "afni": [150, 153], "nipi": [150, 153, 168, 174], "1046": [150, 153], "pr": [150, 153, 176], "1082": [150, 153], "overflow": [150, 153], "3227": [150, 153], "pars": [150, 153, 321], "3274": [150, 153], "charact": [150, 153, 291], "3141": [150, 153], "3302": [150, 153], "int8": [150, 153, 313], "3286": [150, 153], "4001": [151, 153], "clean__sample_mask": [151, 153], "4051": [151, 153], "backslash": [151, 153], "4042": [151, 153], "3993": [151, 153], "fewer": [151, 153, 167, 379], "4067": [151, 153], "focuss": 154, "naturalist": [154, 155, 157, 158], "indirect": [154, 155], "friedman": 154, "time_series_1": 154, "time_series_2": 154, "challeng": 154, "toll": 154, "stronger": 154, "nip": 154, "geometr": [154, 186], "group_connect": 154, "heterogen": 154, "easiest": [155, 160, 161], "frmi_fil": 155, "confounds_datafram": 155, "imperfect": 155, "boundari": [155, 165, 179, 391, 392, 394, 396], "registr": [155, 170, 316, 436], "csv_file": 155, "consider": [155, 161, 297, 343], "readili": [155, 160, 163, 175, 178, 179, 407], "zaleski": 155, "rise": 157, "debat": 157, "cite": [157, 204, 215, 224], "quicker": [157, 168], "loss": [157, 162, 255, 324], "downsiz": 157, "hierarch": [157, 173, 174, 404], "neighborhood": 157, "tree": [157, 206], "admittedli": 157, "isotrop": 158, "publicli": 158, "osf": [158, 201, 205, 215, 224], "5hju4": [158, 215], "walker": [158, 407, 409], "likewis": 158, "sphinx_gallery_dummy_imag": [158, 179], "newer": [159, 229, 231], "arriv": 159, "consensu": [159, 168], "explor": [159, 163, 167, 169, 174, 175, 188, 216, 229, 235, 250, 251, 252, 253], "resembl": 159, "coactiv": 159, "neuro": [159, 173, 250, 318], "offer": [159, 169, 171, 436], "articul": 160, "diagnost": [160, 164], "statu": [160, 173, 233], "vbm": [160, 173, 175], "fa": 160, "unusu": 160, "rich": 160, "strongli": [160, 168, 173], "recfromcsv": 160, "seemingli": 160, "misleadingli": 160, "chose": 160, "Be": [160, 161, 168, 188, 269, 418], "got": [160, 168], "thumb": [160, 168], "advic": 160, "worst": 160, "caveat": 160, "entir": [160, 165, 180, 330, 410], "imbalanc": 160, "domin": [160, 239], "roc": [160, 173], "guess": [160, 167, 335, 400], "notion": [160, 165, 321, 389], "00_tutori": 160, "tackl": [161, 176], "extern": [161, 164, 233], "trait": 161, "userguid": 161, "categor": [161, 176], "harder": 161, "vote": 161, "costli": [161, 165, 297, 343], "former": [161, 167, 229, 385, 388, 393, 397], "penal": [161, 167, 188, 255, 256], "variant": [161, 184], "counterpart": 161, "ridge_regressor": [161, 251, 253], "lasso_regressor": [161, 251, 253], "dummy_regressor": [161, 251, 253], "lunch": 161, "insensit": 161, "cheap": 161, "ill": 161, "importantli": [161, 163, 168], "ugli": 161, "nuisanc": [161, 173, 195, 269, 272, 273, 274, 324, 419], "hyper": [161, 162], "computationnali": 161, "bia": [161, 250, 251, 252, 253, 255, 256], "cancel": 161, "hood": [161, 166], "promot": [161, 162, 176], "memor": [162, 170], "versatil": [163, 174, 437], "mimic": [163, 202, 203], "unfortun": [163, 167], "prognosi": [164, 175], "reduct": [164, 258, 405, 438], "bag": [164, 255, 256, 438], "briefli": 165, "critic": [165, 167], "lorocv": 165, "properli": [165, 180, 380, 385], "isovoxel": 165, "volunt": 165, "theoret": 165, "hypothesi": [165, 170, 254, 270, 297, 343], "swap": [165, 179, 233, 318], "descriptor": [165, 283, 343], "herebi": 165, "rank": [165, 272, 273, 274, 275, 319, 343], "phenomenon": 165, "statistician": 165, "crucial": 165, "symmetri": [165, 167], "adopt": [165, 173], "spacenetclassifi": [166, 250, 251, 256], "tvl1": 166, "blobbi": 166, "mainli": 167, "devis": 167, "descent": [167, 258], "innermost": 167, "hoc": 167, "histori": 167, "prove": [167, 180], "amplifi": 167, "mandatori": [167, 300], "_update_submatrix": 167, "perfect": 167, "newton": 167, "raphson": 167, "debug": [167, 168, 175, 188, 190], "kern": 167, "bottleneck": 167, "overhead": 167, "neglig": [167, 304], "evenli": [167, 300, 419], "highli": [167, 168], "serial": 167, "boil": 167, "written": [167, 415], "inlin": [167, 415], "naiv": 167, "clock": 167, "nr": 167, "loos": 167, "fortran": [167, 315, 316, 343], "couldn": 167, "weren": 167, "ubuntu": 167, "synthes": 167, "wasn": 167, "hopefulli": 167, "topologi": 167, "govern": 167, "hardest": 167, "unrealist": 167, "perfectli": 167, "spectrum": 167, "decorrel": 167, "whatsoev": 167, "mostli": [167, 319], "weakli": 167, "optimum": 167, "wast": 167, "convex": 167, "group_sparse_covariance_cost": 167, "feasibl": 167, "semi": 167, "primal": 167, "satisfi": [167, 176], "quantiti": [167, 270], "lost": 167, "rapidli": 167, "prohibit": 167, "slowli": 167, "tricki": 167, "paragraph": 167, "dwindl": 167, "speedup": 167, "complic": [167, 178, 272, 274, 275], "program": [167, 436], "earlystopprob": 167, "unpen": 167, "fastest": 167, "fulli": [167, 170, 437], "compute_alpha_max": 167, "straightforward": [167, 270], "sequenti": [167, 178, 391], "trajectori": 167, "smallest": 167, "fact": [167, 170, 173], "energi": 167, "brute": 167, "slowest": 167, "hardwar": 167, "commod": 167, "moder": 167, "sought": [167, 173], "push": [167, 168, 176], "stress": 167, "rare": 167, "spent": 167, "early_stop": [167, 188], "team": [168, 175, 176, 204, 437], "neurostar": [168, 175, 176], "forum": 168, "weekli": [168, 175], "hour": [168, 175, 176, 297, 343], "wednesdai": [168, 437], "4pm": [168, 437], "5pm": [168, 437], "utc": [168, 437], "troubleshoot": 168, "appreci": [168, 178], "topic": [168, 176], "burn": 168, "board": 168, "welcom": [168, 176, 437], "think": [168, 170, 180], "runnabl": 168, "ongo": 168, "comment": [168, 180], "opinion": 168, "approv": 168, "burden": 168, "member": [168, 176, 437], "expert": [168, 175], "eas": 168, "beginn": [168, 175], "parsimoni": 168, "concern": [168, 173], "sustain": 168, "weigh": 168, "exhaust": [168, 175], "discourag": 168, "intent": 168, "comprehens": [168, 175, 224, 248], "dedic": [168, 233], "host": 168, "templateflow": [168, 219, 220], "neuromap": 168, "neuroparc": 168, "modif": [168, 170, 173], "ultim": [168, 273], "emerg": 168, "effort": [168, 176], "everyon": 168, "send": [168, 404, 406], "infrastructur": [168, 176], "gigabyt": 168, "deploy": 168, "xxxx": 168, "unrel": [168, 180], "numpydoc": 168, "versionad": [168, 176, 285], "versionchang": [168, 176, 313], "dev": [168, 176, 218], "coverag": [168, 437], "mock": 168, "atom": [168, 173], "convei": [168, 343], "smoothen": 168, "wip": 168, "draft": 168, "mrg": 168, "enh": 168, "adher": 168, "badg": [168, 176], "cff": 168, "bdg": 168, "secondari": 168, "success": [168, 170, 180], "info": [168, 229, 231, 388, 394, 395, 396, 397], "danger": [168, 170], "dimitripapadopoulo": 168, "affili": 168, "orcid": 168, "0000": 168, "0002": 168, "1242": 168, "underscor": 168, "a_nice_funct": 168, "parent": 168, "init": [168, 404], "camelcas": 168, "statement": 168, "obj": [168, 199, 207], "enclos": 168, "__all__": 168, "_valid": 168, "check_mask_img": 168, "validationerror": 168, "symbol": [168, 169, 310], "_check_mask_shap": 168, "_check_mask_valu": 168, "_validate_shap": 168, "doubl": [168, 169, 202, 203], "alon": [168, 170, 436], "linter": 168, "autoformatt": 168, "hook": 168, "pytest": [168, 437], "test_imag": 168, "didn": 168, "test_modul": 168, "recogniz": 168, "conftest": 168, "fixur": 168, "default_rng": 168, "test_someth": 168, "my_numb": 168, "he": 168, "plain": 168, "repo": [168, 176, 437], "fork": 168, "clone": 168, "your_usernam": 168, "virtual": [168, 437], "wor": 168, "whichev": 168, "venv": [168, 437], "conda": [168, 437], "__version__": 168, "command": [168, 175, 176, 437], "upstream": [168, 176], "remot": [168, 229, 231], "your_branch": 168, "lint": 168, "path_to_edited_fil": 168, "test_surf_plot": 168, "your_fork": 168, "restructuredtext": 168, "strict": 168, "window": [168, 282, 295, 417, 437], "_build": 168, "doctre": 168, "noplot": 168, "ci": [168, 176, 272, 274, 275], "filename_pattern": 168, "sphinx_gallery_conf": 168, "thorough": 168, "servic": 168, "temporarili": 168, "unavail": [168, 218], "frustrat": 168, "successfulli": 168, "_get_dataset_dir": 168, "_fetch_fil": 168, "server": [168, 229, 231], "fake": 168, "request_mock": 168, "_test": 168, "sender": 168, "essenc": 169, "timecours": [169, 323], "convolv": [169, 284], "plug": [169, 180, 269, 273], "ascertain": 169, "spm_multimodal_fmri": [169, 237], "referenc": 169, "fistlevelmodel": 169, "flag": [169, 323, 324], "observed_timeseri": 169, "oxyhaemoglobin": [170, 173], "carri": [170, 173], "deoxyhaemoglobin": [170, 173], "deliv": [170, 173], "diamagnet": [170, 173], "paramagnet": [170, 173], "mr": 170, "irrespect": [170, 391], "microarchitectur": 170, "regist": [170, 198], "montreal": [170, 173, 196], "nipyp": 170, "action": [170, 224], "sensori": 170, "stimui": 170, "hypothes": [170, 173], "oxi": 170, "deoxi": 170, "haemoglobin": 170, "sluggish": 170, "plai": [170, 180], "remark": 170, "respond": 170, "enter": 170, "conceptu": 170, "physic": [170, 344, 346, 347], "decid": 170, "dof": [170, 270, 279], "_scan": 170, "_column": 170, "quantil": 170, "reject": [170, 173], "frequent": 170, "misconcept": 170, "frequentist": 170, "wikipedia": 170, "wiki": 170, "frequentist_infer": 170, "cumbersom": 170, "absenc": [170, 176, 410], "_voxel": 170, "frac": [170, 256, 269, 273], "truli": 170, "surpass": 170, "proportion": 170, "compromis": [170, 324], "hochberg": [170, 281], "supra": 170, "rational": 170, "primer": [171, 438], "broader": 172, "morphologi": 173, "treatment": [173, 175], "contrari": [173, 321, 327, 328], "fundament": 173, "eeg": 173, "electroencephalographi": 173, "monitor": 173, "electr": 173, "echo": [173, 285], "planar": 173, "incorrect": 173, "unwarp": 173, "submit": [173, 176], "diamet": 173, "tradition": 173, "subcompon": 173, "meg": 173, "magnetoencephalographi": 173, "mni305": 173, "mutli": 173, "pe": 173, "signifi": [173, 250, 251, 252, 253], "soft": 173, "tpr": 173, "unlabel": 173, "emot": 173, "reaction": 173, "iq": [173, 250, 251, 252, 253], "diagnosi": [173, 175], "healthi": [173, 198], "outlier": [173, 233, 323, 324, 326, 329, 332], "magnitud": [173, 382], "benedikt": 173, "ehing": 173, "coher": [173, 175], "neurobiolog": 173, "subgroup": 173, "psychiatr": 173, "disord": 173, "toolbox": [174, 437], "quickstart": 174, "ecosystem": 174, "domain": [175, 258], "ok": 175, "walk": 175, "manner": [175, 385], "dive": 175, "oftentim": 175, "comer": 175, "gentl": 175, "scientififc": 175, "greatli": 175, "visualis": 175, "besid": 175, "transfer": 175, "psycholog": 175, "knop": 175, "despit": 175, "connection": 175, "tracker": 176, "mislabel": 176, "seriou": 176, "dai": 176, "decent": 176, "quantifi": 176, "prioriti": [176, 178, 240], "urgent": 176, "month": 176, "medium": [176, 238, 401], "kindli": 176, "repli": 176, "week": 176, "redirect": 176, "ping": 176, "stall": 176, "hatch": 176, "vc": 176, "sdist": 176, "wheel": 176, "beforehand": 176, "currentmodul": 176, "whats_new": 176, "_latest": 176, "_vx": 176, "commit": 176, "master": [176, 206], "_version": 176, "workspac": 176, "dist": 176, "rm": 176, "twine": 176, "subfold": 176, "packagenam": 176, "packagevers": 176, "pythonvers": 176, "pythoncvers": 176, "whl": 176, "tab": [176, 180], "drag": 176, "dvipng": 176, "texliv": 176, "wget": 176, "mirror": [176, 194, 195, 196, 197, 198, 199, 200, 204, 207, 208, 210, 218, 219, 222, 223, 224, 227, 228, 233, 239], "ctan": 176, "dviwar": 176, "unzip": 176, "linux": 176, "pkg": 176, "bewar": [176, 178], "expans": [177, 438], "resiz": [177, 179, 250, 251, 252, 253, 255, 256, 295, 312, 315, 335, 337, 338, 340, 399, 401, 402, 403, 405, 415, 438], "t_map001": 178, "abbrevi": 178, "subject1": 178, "subject2": 178, "wildcard": [178, 179, 249, 310], "unix": [178, 249], "shell": [178, 249], "subject_01": 178, "subject_03": 178, "subject_": 178, "subj1": 178, "nilearn_shared_data": [178, 240], "get_head": 178, "memoryerror": 178, "decompress": 178, "uncach": 178, "comma": 178, "aren": [178, 185], "chapter": [179, 180], "swap_img_hemispher": 179, "fslview": 179, "crop": [179, 180, 304], "consumpt": [179, 282, 295, 328, 331, 418], "3x3x3": [179, 229, 231, 407, 409], "diag": [179, 390], "compute_background_mask": [179, 250, 251, 252, 253, 257, 258, 329, 332, 405], "compute_multi_background_mask": [179, 329], "intersect_mask": 179, "restructur": 179, "recip": 179, "swiss": 180, "armi": 180, "knive": 180, "intend": [180, 275, 315, 316], "set_config": [180, 186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "print_changed_onli": 180, "fight": 180, "neuroanatomi": 180, "anisotrop": 180, "convers": [180, 196], "loss_pass": 180, "prespecifi": 180, "abrupt": 180, "transient": 180, "acquis": 180, "saniti": 180, "recast": 180, "brought": 180, "represenet": 180, "excerpt": 180, "disadvantag": 180, "nonpres": 180, "linearli": 180, "nor": 180, "5d": 180, "cov_estim": 186, "ledoitwolf": 186, "store_precis": 186, "discard_diagon": [186, 192], "shrunk": 186, "triangular": [186, 192, 193, 390], "cov_estimator_": 186, "whitening_": 186, "connectivitymatrix": 186, "n_confound": [186, 306, 420], "vetor": 186, "get_metadata_rout": [186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "rout": [186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "metadatarequest": [186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "subobject": [186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "param": [186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "set_inverse_transform_request": [186, 257, 258, 327, 328, 330, 331, 333, 404, 405, 406, 407], "enable_metadata_rout": [186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "alia": [186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407, 436], "metadata_rout": [186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "set_output": [186, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "set_param": [186, 187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 326, 327, 328, 329, 330, 331, 332, 333, 404, 405, 406, 407], "set_transform_request": [186, 257, 258, 326, 327, 328, 329, 330, 331, 332, 333, 405, 407], "aggress": [187, 324], "ndarray": 187, "set_fit_request": [187, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 282, 295, 327, 328, 329, 330, 331, 332, 405, 407], "n_refin": 188, "tol_cv": 188, "max_iter_cv": 188, "phase": 188, "cv_alphas_": 188, "probe_funct": 190, "precisions_init": 190, "dualiti": 190, "prematur": 190, "emp_cov": 190, "vec": 193, "encompass": 193, "cpac": 194, "band_pass_filt": 194, "global_signal_regress": 194, "quality_check": 194, "wrt": 194, "pcp": 194, "css": 194, "dparsf": 194, "niak": 194, "cc": 194, "controversi": 194, "1hz": 194, "alff": 194, "degree_binar": 194, "degree_weight": 194, "dual_regress": 194, "eigenvector_binar": 194, "eigenvector_weight": 194, "falff": 194, "func_mask": 194, "func_mean": 194, "lfcd": 194, "reho": 194, "rois_aal": 194, "rois_cc200": 194, "rois_cc400": 194, "rois_dosenbach160": 194, "rois_ez": 194, "rois_ho": 194, "rois_tt": 194, "vmhc": 194, "rater": 194, "sub_id": 194, "50001": 194, "50607": 194, "dx_group": 194, "dsm_iv_tr": 194, "asperg": 194, "ppd": 194, "NOS": 194, "age_at_scan": 194, "femal": 194, "handedness_categori": 194, "ambi": 194, "ambidextr": 194, "handedness_scor": 194, "resum": [195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 215, 218, 219, 220, 224, 226, 227, 228, 233, 239], "ftp": 195, "htdoc": 195, "adhd200": 195, "adhd200_40sub_preprocess": 195, "tgz": 195, "spm12": 196, "med": 196, "consecut": [196, 198, 200, 206, 209, 210, 404], "5021": 196, "lingual_l": 196, "precentral_l": 196, "spm5": 196, "licenc": [196, 197, 199, 206, 210], "gin": 196, "mialab": 197, "rsn_indic": 197, "mrn": 197, "mstep": 198, "asym": 198, "asymmetr": [198, 219, 220], "homotop": 198, "ob": 198, "scale007": 198, "scale012": 198, "scale020": 198, "scale036": 198, "scale064": 198, "scale122": 198, "scale197": 198, "scale325": 198, "scale444": 198, "figshar": 198, "1285615": 198, "grp_mean": 199, "group_mean": 199, "scorr_mean": 199, "emphas": 199, "tcorr_mean": 199, "scorr_2level": 199, "tcorr_2level": 199, "creativ": 199, "commerci": 199, "alik": 199, "creativecommon": 199, "nc": 199, "sa": 199, "cluster_roi": 199, "rec": [200, 212, 213, 214, 285], "pqu9r": 201, "wjvd5": 201, "3vrct": 201, "9b76y": 201, "34792": 201, "atlas_nam": [202, 203], "cortl": 202, "thr50": [202, 203], "strictli": [202, 203], "probabilit": 205, "prepend": [205, 206, 321, 322], "nac": 205, "idx_nac": 205, "r2hvk": 205, "n_roi": 206, "yeo_network": 206, "base_url": 206, "7networks_lh_vis_3": 206, "thomasyeolab": 206, "cbig": 206, "stable_project": 206, "brain_parcel": 206, "schaefer2018_localglob": 206, "update_20190916_readm": 206, "e501": 206, "update_yeo2011_schaefer2018_labelnam": 206, "bandwidth": 207, "rsn20": 207, "rsn10": 207, "bm20": 207, "bm10": 207, "rsn70": 207, "bm70": 207, "fmrib": 207, "ox": 207, "sulco": 208, "gryal": 208, "level_nam": 209, "ba": 209, "brodmann": 209, "thin_7": 210, "thin": 210, "colors_7": 210, "thin_17": 210, "colors_17": 210, "tick_7": 210, "tick_17": 210, "surfer": 210, "nmr": 210, "mgh": 210, "fswiki": 210, "corticalparcellation_yeo2011": 210, "downloaded_fil": [211, 221, 234], "ordered_region": [212, 214], "cerebellar": 214, "cinguloopercular": 214, "defaultmod": 214, "dorsalattent": 214, "frontopariet": 214, "medialtemporallob": 214, "parietomedi": 214, "reward": 214, "somatomotordors": 214, "somatomotorlater": 214, "ventralattent": 214, "cortexl": 214, "cortexr": 214, "thalamu": 214, "hippocampu": 214, "basalganglia": 214, "amygdala": 214, "cortexmid": 214, "age_group": 215, "realist": [215, 394, 396, 397, 403], "gender": [215, 233], "handed": 215, "ds000228": 215, "wjtyq": 215, "ucla": [216, 234], "consortium": [216, 234], "neuropsychiatr": [216, 234], "la5c": [216, 234], "urls_path": [216, 235], "fullbrain": 218, "pymvpa": 218, "datadb": 218, "mni152nlin2009csasym": [219, 220], "t2": [219, 383, 436], "t2_relax": 219, "relaxometri": 219, "proton": 219, "eye_mask": 219, "face_mask": 219, "bic": [219, 272], "ca": 219, "servicesatlas": 219, "icbm152nlin2009": 219, "vfonov": 219, "mni_icbm152_nlin_sym_09a_nifti": 219, "tpl": 219, "mni152nlin2009csym": 219, "binary_clos": [220, 242, 245], "gm_mask_img": [220, 242], "particularli": [220, 407], "caller": [222, 223], "get_mask": 224, "get_anat": 224, "vhtf6": 224, "paardigm": 225, "multiple_spatial_regress": 226, "princip": [226, 324], "full_correl": 226, "return_raw_data": 227, "betamap": 227, "make_xi": 227, "153mb": 228, "brainlin": 228, "number_of_imag": 229, "_empty_filt": 229, "image_typ": 229, "is_threshold": 229, "not_mni": 229, "download_new": [229, 231], "kwarg_image_filt": 229, "until": [229, 343], "skim": 229, "basic_collection_term": 229, "empty_filt": 229, "basic_image_term": 229, "image_metadata": 229, "offlin": [229, 231, 438], "regardless": [229, 231, 255], "countvector": [229, 231], "concis": 229, "_col_filters_available_on_serv": 229, "owner": 229, "modify_d": 229, "auditory_calculation_vs_baselin": 230, "32980": 230, "10426": 232, "dartel_vers": 233, "dartel": 233, "data_usage_agr": 233, "gross": 233, "intracrani": 233, "socioeconom": 233, "dementia": 233, "demand": 233, "openli": 233, "dataset_vers": [234, 235], "ds000030_r1": [234, 235], "patch_openneuro_dataset": 234, "symlink": [234, 248], "data_nam": [236, 237], "ion": [236, 237], "trials_ses1": 237, "trials_ses2": 237, "mmface": 237, "2562": [238, 401], "10242": [238, 388, 401], "40962": [238, 401], "fsaverage7": [238, 401], "163842": [238, 388, 401], "area_left": 238, "area_right": 238, "flat_right": 238, "sphere_left": 238, "sphere_right": 238, "thick_left": 238, "thick_right": 238, "white_left": [238, 423], "white_right": 238, "func_right": 239, "gm_mni152_templ": 243, "mni152_templ": 244, "wm_mask_img": 245, "wm_mni152_templ": 246, "file_list": 248, "inclusion_filt": 249, "exclus": [249, 255, 256], "wrapper": [250, 251, 297], "1e4": [250, 251, 252, 253], "logisticregress": [250, 252], "inbuilt": [250, 251, 252, 253], "model_evalu": [250, 251, 252, 253], "scorer": [250, 251, 252, 253], "hertz": [250, 251, 252, 253, 255, 256, 300, 327, 328, 329, 330, 331, 332, 333, 405, 407, 418, 419], "rough": [250, 251, 252, 253, 255, 256, 257, 258, 282, 295, 301, 327, 328, 329, 330, 331, 332, 333, 405, 406, 407], "decision_funct": [250, 251, 252, 253, 255, 256], "learner": [250, 251, 252, 253, 255, 256], "ye": [250, 251, 252, 253], "leavepgroupsout": [250, 251, 252, 253], "classes_": [250, 251, 252, 253, 255, 256], "screening_percentile_": [250, 251, 252, 253, 255, 256], "n_class": [250, 251, 252, 253, 255, 256], "intercept_": [250, 251, 252, 253, 255, 256], "nclass": [250, 251, 252, 253], "cv_": [250, 251, 252, 253, 255, 256], "std_coef_": [250, 251, 252, 253], "std_coef_img_": [250, 251, 252, 253], "inner": [250, 251, 252, 253, 320, 423], "best_alpha": [250, 251, 252, 253], "scorer_": [250, 251, 252, 253], "misclassif": [250, 251, 252, 253, 255, 256], "n_outputs_": [250, 251, 252, 253], "dummy_output_": [250, 251, 252, 253], "class_prior": [250, 251, 252, 253], "dummyregressor": [250, 251, 252, 253], "confid": [250, 251, 252, 253, 255, 256, 272, 274, 275], "sample_weight": [250, 251, 252, 253, 255, 256], "set_score_request": [250, 251, 252, 253, 255, 256, 257, 258, 405], "neg_mean_squared_error": [251, 253], "trade": [252, 253], "cluster_percentil": [252, 253], "america": 254, "fit_intercept": [255, 256], "hybrid": [255, 256], "mutual": [255, 256], "alpha_min": [255, 256], "alpha_max": [255, 256], "premultipli": 255, "nearli": [255, 256], "debias": [255, 256], "all_coef_": [255, 256], "n_l1_ratio": [255, 256], "alpha_grids_": [255, 256], "best_model_params_": [255, 256], "n_paramet": [255, 256], "n_classes_": 255, "mask_": [255, 256], "memory_": [255, 256], "narrai": [255, 256], "w_": [255, 256], "ymean_": [255, 256], "xmean_": [255, 256], "xstd_": [255, 256], "supported_loss": [255, 256], "supported_penalti": [255, 256], "check_param": [255, 256], "sane": [255, 256], "hyperplan": [255, 256], "qi": [255, 256], "y_true": 256, "disregard": 256, "n_samples_fit": 256, "n_output": [256, 257, 258, 282, 295, 404, 406], "uniform_averag": 256, "multioutputregressor": 256, "do_cca": 257, "6mm": [257, 407], "restart": 257, "fit_param": [257, 258, 282, 295, 326, 329, 332, 404, 406], "x_new": [257, 258, 282, 295, 326, 329, 332, 404, 406], "n_features_new": [257, 258, 282, 295, 326, 329, 332, 404, 406], "reconstructed_img": [257, 258], "decompositionestim": [257, 258, 405], "squeez": [257, 258, 405], "reduction_ratio": 258, "batch": [258, 404], "lar": 258, "lars_path": 258, "file_path": [259, 321], "n_vertic": [259, 260, 261], "to_gifti": [259, 260, 261], "gifti_fil": [259, 260, 261], "labels_data_": 264, "labels_": [264, 282, 404, 406], "unus": [264, 265, 327, 328, 329, 330, 331, 332, 333], "masked_img": [264, 265], "output_dimension_": 265, "mesh_nam": 268, "rho": 269, "likelihoodmodel": [269, 272], "sigma": [269, 272, 273, 274, 275], "whitened_x": [269, 273], "logl": [269, 272, 273, 274, 275], "loglikelihood": [269, 273], "df_model": [269, 272, 273], "loglf": [269, 273], "ell": [269, 273], "hat": [269, 273], "sse": [269, 273, 274, 275], "10000000000": 270, "tini": 270, "dofmax": 270, "breakag": 270, "contrast_dim": 270, "def_dofmax": 270, "def_tini": 270, "underflow": 270, "h0": [270, 343], "df_num": [271, 272, 274, 275], "df_den": [271, 272, 274, 275, 276], "theta": [272, 274, 275], "aic": 272, "llf": 272, "wald": [272, 274, 275], "vcov": [272, 274, 275], "sd": [272, 274, 275, 276], "tcontrastresult": [272, 274, 275], "fcontrast": [272, 274, 275], "invcov": [272, 274, 275], "px": [272, 274, 275], "f_re": [272, 274, 275], "fcontrastresult": [272, 274, 275], "conf_int": [272, 274, 275], "col": [272, 274, 275], "standard_norm": [272, 274, 275], "stan": [272, 274, 275], "confidence_interv": [272, 274, 275], "whitened_design": 273, "calc_beta": 273, "moor": 273, "penros": 273, "pseudoinvers": 273, "normalized_cov_beta": 273, "df_residu": 273, "__init___": 273, "wlsmodel": 273, "armodel": 273, "whitened_i": 274, "whitened_residu": 274, "normalized_residu": [274, 275], "d_i": [274, 275], "e_i": [274, 275], "ms_e": [274, 275], "presum": [277, 298], "regression_result": 278, "con_val": 278, "con": 278, "precision_weight": 279, "return_z_scor": 279, "fixed_fx_z_score_img": 279, "fixed_fx_contrast_img": 279, "fixed_fx_variance_img": 279, "fixed_fx_stat_img": 279, "z_val": 281, "min_onset": [282, 284, 285, 289], "fraction": [282, 285, 337, 338, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 423], "plu": [282, 284, 289], "spm_time_deriv": [282, 284, 289], "idem": [282, 284, 289], "spm_dispersion_deriv": [282, 284, 289], "glover_hrf": [282, 284, 289], "glover_time_deriv": [282, 284, 289], "glover_dispersion_deriv": [282, 284, 289], "dirac": [282, 284, 289], "n_onset": [282, 289], "rid": [282, 295], "results_": 282, "array_lik": [282, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 389], "histogram": [282, 291, 337, 340, 387], "quantif": [282, 291], "contrast_def": [282, 295, 381, 417], "t_map": [282, 295], "n_col": [282, 295, 297, 322, 381], "eval": [282, 295, 297, 381], "report_dim": [282, 295, 417], "htmlreport": [282, 295, 328, 331, 407, 417], "standalon": [282, 295, 417], "ce": [282, 285, 295, 417], "autogener": [282, 295, 417], "subpeak": [282, 295, 416, 417], "report_text": [282, 295, 417], "voxelwis": [282, 295], "triplet": [283, 284, 333, 402], "n_frame": [283, 289], "n_regressor": [283, 291, 297, 343], "n_event": [283, 284, 289], "computed_regressor": 284, "n_reg": 284, "reg_nam": 284, "dataset_path": 285, "_space": 285, "acq": 285, "dir": [285, 320], "den": 285, "dhrf": [286, 288, 292, 294], "n_add_reg": 289, "reg_i": 289, "frames_tim": 289, "map_nam": [295, 297], "effects_map_path": [295, 297], "liter": [295, 297], "second_level_stat_typ": 295, "output_imag": 295, "unsign": [297, 343], "neg_log10_vfwe_pvals_img": 297, "explanatori": [297, 343], "n_descriptor": [297, 343], "thresholded_map": 298, "prescrib": 298, "rigor": 298, "anatomical_imag": [299, 311], "brainmask": 299, "instant": [300, 419], "clean__": [300, 327, 328, 329, 330, 331, 332, 333], "butterworth__": [300, 327, 328, 329, 330, 331, 332, 333, 419], "clean__butterworth__": [300, 327, 328, 329, 330, 331, 332, 333], "ensure_ndim": 301, "img_copi": 303, "rtol": 304, "return_offset": 304, "Will": [304, 348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380], "touch": 304, "croppabl": 304, "toggl": 304, "x1_pre": 304, "x1_post": 304, "x2_pre": 304, "x2_post": 304, "xn_pre": 304, "xn_post": 304, "number_of_scan": 306, "joint_mni_imag": 307, "single_mni_imag": 307, "five_mni_imag": 307, "first_three_imag": 307, "imcal": 311, "fslmath": 311, "log_img": 311, "ref_niimg": 313, "copy_head": 313, "imposs": 314, "fill_valu": [315, 316], "force_resampl": [315, 316], "extrapol": 315, "boundingboxerror": 315, "crop_img": 315, "infinit": 315, "gracefulli": 315, "source_img": 316, "target_img": [316, 336, 339], "cllip": 316, "arr": 317, "normalis": 317, "filtered_img": 317, "synchron": 318, "sagit": 318, "caution": 318, "radio": 318, "main_path": 320, "file_tag": [320, 321], "file_typ": [320, 321], "modality_fold": 320, "sub_fold": 320, "se": 320, "ap": 320, "file_basenam": 321, "file_field": 321, "_tag": 321, "revis": 321, "parser": 321, "statmap": 322, "_stat": 322, "_statmap": 322, "_design": 322, "img_fil": [323, 324], "anat_combin": [323, 324], "n_compcor": [323, 324], "dtseri": [323, 324], "compli": 323, "non_steady_st": 323, "power2": 323, "quadrat": 323, "power2d": 323, "excess": 323, "var": 323, "anat_separ": 323, "temporal_anat_combin": 323, "temporal_anat_separ": 323, "acompcor_combin": 323, "smootharomanonaggr_bold": [323, 324], "nifitmask": 323, "denois": 324, "srub": 324, "physiologi": 324, "suffer": 324, "aggres": 324, "suffix": 324, "mni152nlin6asym": 324, "niprep": 324, "region_sign": [326, 327, 328, 329, 330, 331, 332, 333, 405, 407, 411, 414], "imgs_list": [326, 327, 328, 329, 332], "ddof": [327, 328, 329, 330, 331, 332, 333, 419], "maps_img_": [328, 331], "html_report": [328, 331, 407], "voxel_sign": [328, 331, 333, 407], "multipca": 329, "affine_": [329, 332], "trim": [331, 411], "seeds_": 333, "session_seri": 334, "data_img": [335, 338], "border_s": [335, 338], "binary_eros": [335, 336, 337, 339, 340], "exclude_zero": [337, 338, 340], "reslic": [337, 340], "grp_mask": 341, "ndim": 342, "target_var": 343, "confounding_var": 343, "legaci": 343, "criterion": [343, 406], "amongst": [343, 436], "n_covar": 343, "worker": 343, "pval": 343, "score_orig_data": 343, "h0_max_t": 343, "h0_max_tfc": 343, "h0_max_siz": 343, "h0_max_mass": 343, "mpl": [344, 346, 347], "transform_to_2d": [344, 346, 347], "add_object_bound": [344, 346, 347], "draw_2d": [344, 346, 347], "data_2d": [344, 346, 347], "data_bound": [344, 346, 347], "bounding_box": [344, 346, 347], "get_object_bound": [344, 346, 347], "draw_left_right": [344, 346, 347], "bg_color": [344, 346, 347], "draw_scale_bar": [344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "fontproperti": [344, 346, 347], "borderpad": [344, 346, 347], "size_vert": [344, 346, 347], "label_top": [344, 346, 347], "font": [344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 394, 396, 397], "anchoredoffsetbox": [344, 346, 347], "draw_posit": [344, 346, 347], "brain_color": [345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "frame_ax": [345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "subdivid": [345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "find_cut_coord": [345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "placehold": 345, "classmethod": [345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "init_with_figur": [345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "leave_spac": [345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "bgcolor": [345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "2g": [345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 383, 385, 386, 392, 393, 394, 396, 397], "cbar_vmin": [345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 394], "cbar_vmax": [345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 394], "contour_fil": [345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "add_edg": [345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 436], "n_marker": [345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "left_right": [345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "scale_loc": [345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "leak": [345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "dpi": [345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "inch": [345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "schemat": [347, 380, 385, 389], "glassbrainax": [348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370], "add_graph": [348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370], "linearsegmentedcolormap": [348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 378, 379, 380, 383, 390, 391, 392, 393, 399, 400, 401, 403], "edge_kwarg": [348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380], "node_kwarg": [348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380, 389], "undirect": [348, 349, 350, 351, 352, 353, 355, 358, 360, 362, 364, 366, 368, 370, 380], "draw_cross": [348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 378, 383, 386, 391, 392, 393, 400], "crossbar": [354, 356, 359, 361, 363, 365, 367, 369, 371], "cutax": [361, 363, 365, 367, 369, 371], "baseslic": 373, "img_length": 374, "return_label_nam": 375, "label_hemispher": 375, "n_label": 375, "labels_list": 375, "n_map": 376, "activation_threshold": 377, "tupleof": [378, 379, 380, 383, 385, 386, 389, 391, 392, 393], "ymin": [378, 379, 380, 383, 385, 386, 389, 391, 392, 393], "pronounc": [378, 391, 392, 393, 400], "get_zoom": 379, "matlotlib": 380, "nipy_spectr": 383, "model_ev": 384, "fig_kwarg": 384, "stat_map_img": [385, 393, 400, 401], "destin": [385, 386, 392, 393, 400], "noisier": [385, 386, 392, 393, 400], "ref_img": 387, "src_img": 387, "plot_hist": 387, "output_dir": 387, "superimpos": 387, "nifti_lik": 387, "surf_data": [388, 394, 396, 397, 401, 403, 421, 423], "montag": 388, "node_valu": 389, "listedcolormap": 389, "node_vmin": 389, "node_vmax": 389, "node_threshold": 389, "viridis_r": 389, "auto_fit": 390, "newli": 390, "room": 390, "linkag": 390, "sent": 390, "gist_rainbow": 391, "surf_map": [394, 403], "title_font_s": [394, 396, 397], "orig": [394, 395, 396, 397, 403, 422, 423], "sulc": [394, 397, 403, 421], "underneath": [394, 396, 397, 403], "greyscal": [394, 396, 397, 403], "sharp": [394, 396, 436], "apply_along_axi": [394, 396], "custom_funct": [394, 396], "tab20": 395, "rgba": [395, 402], "agg": 398, "emit": 398, "colorbar_height": [399, 401, 403], "colorbar_fonts": [399, 401, 403], "title_fonts": [399, 401, 402, 403], "n_node": [399, 402], "connectomeview": [399, 402], "opac": 400, "th": 400, "opaqu": 400, "html_view": [400, 436], "plane": 400, "surfaceview": [401, 403], "hex": 402, "gnist_ncar": 403, "max_no_improv": 404, "smart": 404, "k_init": 404, "centroid": 404, "mini": 404, "inertia": 404, "reassign": 404, "sizes_": [404, 406], "x_red": [404, 406], "x_inv": [404, 406], "fit_predict": [404, 406], "connectivity_": 405, "valid_method": 405, "eccentr": [406, 412], "n_clusters_": 406, "27mm": [407, 409], "1350mm": [407, 409], "img_valu": 407, "connected_compon": [407, 409], "ly": 407, "min_siz": 408, "new_labels_img": 408, "new_label": 408, "extract_typ": 409, "_smooth_arrai": 409, "index_of_each_map": 409, "head_tpl": 415, "head_valu": 415, "html_document": 415, "htmldocument": 415, "get_ifram": 415, "get_standalon": 415, "temp_file_lifetim": 415, "temporari": 415, "remove_temp_fil": 415, "return_label_map": 416, "letter": 416, "label_map": 416, "destination_path": 417, "sampling_r": 418, "padtyp": 418, "odd": 418, "padlen": 418, "n_sourc": 418, "decai": 418, "ring": 418, "sharpen": 418, "filtfilt": 418, "inplac": 418, "filtered_sign": 418, "cleaned_sign": 419, "namedtupl": [422, 423], "neighbourhood": 423, "trilinear": 423, "x20": 423, "regularli": 423, "halfwai": 423, "inward": 423, "surface_mesh": 423, "neighbour": 423, "tour": 436, "canni": 436, "purple_green": 436, "pretty_brain": 436, "rememb": 436, "emb": 436, "surface_plot": 436, "cyan": 436, "orang": 436, "offici": 437, "miniconda": 437, "path_to_new_env": 437, "bat": 437, "prompt": 437, "jitsi": 437, "anyon": 437, "engag": 437, "grad": 438, "biologi": 438, "throughout": 438}, "objects": {"nilearn": [[181, 0, 0, "-", "connectome"], [182, 0, 0, "-", "datasets"], [183, 0, 0, "-", "decoding"], [184, 0, 0, "-", "decomposition"], [185, 0, 0, "-", "experimental"], [424, 0, 0, "-", "glm"], [425, 0, 0, "-", "image"], [427, 0, 0, "-", "interfaces"], [428, 0, 0, "-", "maskers"], [429, 0, 0, "-", "masking"], [430, 0, 0, "-", "mass_univariate"], [431, 0, 0, "-", "plotting"], [432, 0, 0, "-", "regions"], [433, 0, 0, "-", "reporting"], [434, 0, 0, "-", "signal"], [435, 0, 0, "-", "surface"]], "nilearn.connectome": [[186, 1, 1, "", "ConnectivityMeasure"], [187, 1, 1, "", "GroupSparseCovariance"], [188, 1, 1, "", "GroupSparseCovarianceCV"], [189, 3, 1, "", "cov_to_corr"], [190, 3, 1, "", "group_sparse_covariance"], [191, 3, 1, "", "prec_to_partial"], [192, 3, 1, "", "sym_matrix_to_vec"], [193, 3, 1, "", "vec_to_sym_matrix"]], "nilearn.connectome.ConnectivityMeasure": [[186, 2, 1, "", "__init__"], [186, 2, 1, "", "fit"], [186, 2, 1, "", "fit_transform"], [186, 2, 1, "", "get_metadata_routing"], [186, 2, 1, "", "get_params"], [186, 2, 1, "", "inverse_transform"], [186, 2, 1, "", "set_inverse_transform_request"], [186, 2, 1, "", "set_output"], [186, 2, 1, "", "set_params"], [186, 2, 1, "", "set_transform_request"], [186, 2, 1, "", "transform"]], "nilearn.connectome.GroupSparseCovariance": [[187, 2, 1, "", "__init__"], [187, 2, 1, "", "fit"], [187, 2, 1, "", "get_metadata_routing"], [187, 2, 1, "", "get_params"], [187, 2, 1, "", "set_fit_request"], [187, 2, 1, "", "set_params"]], "nilearn.connectome.GroupSparseCovarianceCV": [[188, 2, 1, "", "__init__"], [188, 2, 1, "", "fit"], [188, 2, 1, "", "get_metadata_routing"], [188, 2, 1, "", "get_params"], [188, 2, 1, "", "set_fit_request"], [188, 2, 1, "", "set_params"]], "nilearn.datasets": [[194, 3, 1, "", "fetch_abide_pcp"], [195, 3, 1, "", "fetch_adhd"], [196, 3, 1, "", "fetch_atlas_aal"], [197, 3, 1, "", "fetch_atlas_allen_2011"], [198, 3, 1, "", "fetch_atlas_basc_multiscale_2015"], [199, 3, 1, "", "fetch_atlas_craddock_2012"], [200, 3, 1, "", "fetch_atlas_destrieux_2009"], [201, 3, 1, "", "fetch_atlas_difumo"], [202, 3, 1, "", "fetch_atlas_harvard_oxford"], [203, 3, 1, "", "fetch_atlas_juelich"], [204, 3, 1, "", "fetch_atlas_msdl"], [205, 3, 1, "", "fetch_atlas_pauli_2017"], [206, 3, 1, "", "fetch_atlas_schaefer_2018"], [207, 3, 1, "", "fetch_atlas_smith_2009"], [208, 3, 1, "", "fetch_atlas_surf_destrieux"], [209, 3, 1, "", "fetch_atlas_talairach"], [210, 3, 1, "", "fetch_atlas_yeo_2011"], [211, 3, 1, "", "fetch_bids_langloc_dataset"], [212, 3, 1, "", "fetch_coords_dosenbach_2010"], [213, 3, 1, "", "fetch_coords_power_2011"], [214, 3, 1, "", "fetch_coords_seitzman_2018"], [215, 3, 1, "", "fetch_development_fmri"], [216, 3, 1, "", "fetch_ds000030_urls"], [217, 3, 1, "", "fetch_fiac_first_level"], [218, 3, 1, "", "fetch_haxby"], [219, 3, 1, "", "fetch_icbm152_2009"], [220, 3, 1, "", "fetch_icbm152_brain_gm_mask"], [221, 3, 1, "", "fetch_language_localizer_demo_dataset"], [222, 3, 1, "", "fetch_localizer_button_task"], [223, 3, 1, "", "fetch_localizer_calculation_task"], [224, 3, 1, "", "fetch_localizer_contrasts"], [225, 3, 1, "", "fetch_localizer_first_level"], [226, 3, 1, "", "fetch_megatrawls_netmats"], [227, 3, 1, "", "fetch_mixed_gambles"], [228, 3, 1, "", "fetch_miyawaki2008"], [229, 3, 1, "", "fetch_neurovault"], [230, 3, 1, "", "fetch_neurovault_auditory_computation_task"], [231, 3, 1, "", "fetch_neurovault_ids"], [232, 3, 1, "", "fetch_neurovault_motor_task"], [233, 3, 1, "", "fetch_oasis_vbm"], [234, 3, 1, "", "fetch_openneuro_dataset"], [235, 3, 1, "", "fetch_openneuro_dataset_index"], [236, 3, 1, "", "fetch_spm_auditory"], [237, 3, 1, "", "fetch_spm_multimodal_fmri"], [238, 3, 1, "", "fetch_surf_fsaverage"], [239, 3, 1, "", "fetch_surf_nki_enhanced"], [240, 3, 1, "", "get_data_dirs"], [241, 3, 1, "", "load_mni152_brain_mask"], [242, 3, 1, "", "load_mni152_gm_mask"], [243, 3, 1, "", "load_mni152_gm_template"], [244, 3, 1, "", "load_mni152_template"], [245, 3, 1, "", "load_mni152_wm_mask"], [246, 3, 1, "", "load_mni152_wm_template"], [247, 3, 1, "", "load_sample_motor_activation_image"], [248, 3, 1, "", "patch_openneuro_dataset"], [249, 3, 1, "", "select_from_index"]], "nilearn.decoding": [[250, 1, 1, "", "Decoder"], [251, 1, 1, "", "DecoderRegressor"], [252, 1, 1, "", "FREMClassifier"], [253, 1, 1, "", "FREMRegressor"], [254, 1, 1, "", "SearchLight"], [255, 1, 1, "", "SpaceNetClassifier"], [256, 1, 1, "", "SpaceNetRegressor"]], "nilearn.decoding.Decoder": [[250, 2, 1, "", "__init__"], [250, 2, 1, "", "decision_function"], [250, 2, 1, "", "fit"], [250, 2, 1, "", "get_metadata_routing"], [250, 2, 1, "", "get_params"], [250, 2, 1, "", "predict"], [250, 2, 1, "", "score"], [250, 2, 1, "", "set_fit_request"], [250, 2, 1, "", "set_params"], [250, 2, 1, "", "set_score_request"]], "nilearn.decoding.DecoderRegressor": [[251, 2, 1, "", "__init__"], [251, 2, 1, "", "decision_function"], [251, 2, 1, "", "fit"], [251, 2, 1, "", "get_metadata_routing"], [251, 2, 1, "", "get_params"], [251, 2, 1, "", "predict"], [251, 2, 1, "", "score"], [251, 2, 1, "", "set_fit_request"], [251, 2, 1, "", "set_params"], [251, 2, 1, "", "set_score_request"]], "nilearn.decoding.FREMClassifier": [[252, 2, 1, "", "__init__"], [252, 2, 1, "", "decision_function"], [252, 2, 1, "", "fit"], [252, 2, 1, "", "get_metadata_routing"], [252, 2, 1, "", "get_params"], [252, 2, 1, "", "predict"], [252, 2, 1, "", "score"], [252, 2, 1, "", "set_fit_request"], [252, 2, 1, "", "set_params"], [252, 2, 1, "", "set_score_request"]], "nilearn.decoding.FREMRegressor": [[253, 2, 1, "", "__init__"], [253, 2, 1, "", "decision_function"], [253, 2, 1, "", "fit"], [253, 2, 1, "", "get_metadata_routing"], [253, 2, 1, "", "get_params"], [253, 2, 1, "", "predict"], [253, 2, 1, "", "score"], [253, 2, 1, "", "set_fit_request"], [253, 2, 1, "", "set_params"], [253, 2, 1, "", "set_score_request"]], "nilearn.decoding.SearchLight": [[254, 2, 1, "", "__init__"], [254, 2, 1, "", "fit"], [254, 2, 1, "", "get_metadata_routing"], [254, 2, 1, "", "get_params"], [254, 2, 1, "", "set_fit_request"], [254, 2, 1, "", "set_params"]], "nilearn.decoding.SpaceNetClassifier": [[255, 4, 1, "", "SUPPORTED_LOSSES"], [255, 4, 1, "", "SUPPORTED_PENALTIES"], [255, 2, 1, "", "__init__"], [255, 2, 1, "", "check_params"], [255, 2, 1, "", "decision_function"], [255, 2, 1, "", "fit"], [255, 2, 1, "", "get_metadata_routing"], [255, 2, 1, "", "get_params"], [255, 2, 1, "", "predict"], [255, 2, 1, "", "score"], [255, 2, 1, "", "set_fit_request"], [255, 2, 1, "", "set_params"], [255, 2, 1, "", "set_score_request"]], "nilearn.decoding.SpaceNetRegressor": [[256, 4, 1, "", "SUPPORTED_LOSSES"], [256, 4, 1, "", "SUPPORTED_PENALTIES"], [256, 2, 1, "", "__init__"], [256, 2, 1, "", "check_params"], [256, 2, 1, "", "decision_function"], [256, 2, 1, "", "fit"], [256, 2, 1, "", "get_metadata_routing"], [256, 2, 1, "", "get_params"], [256, 2, 1, "", "predict"], [256, 2, 1, "", "score"], [256, 2, 1, "", "set_fit_request"], [256, 2, 1, "", "set_params"], [256, 2, 1, "", "set_score_request"]], "nilearn.decomposition": [[257, 1, 1, "", "CanICA"], [258, 1, 1, "", "DictLearning"]], "nilearn.decomposition.CanICA": [[257, 2, 1, "", "__init__"], [257, 2, 1, "", "fit"], [257, 2, 1, "", "fit_transform"], [257, 2, 1, "", "get_metadata_routing"], [257, 2, 1, "", "get_params"], [257, 2, 1, "", "inverse_transform"], [257, 2, 1, "", "score"], [257, 2, 1, "", "set_fit_request"], [257, 2, 1, "", "set_inverse_transform_request"], [257, 2, 1, "", "set_output"], [257, 2, 1, "", "set_params"], [257, 2, 1, "", "set_score_request"], [257, 2, 1, "", "set_transform_request"], [257, 2, 1, "", "transform"]], "nilearn.decomposition.DictLearning": [[258, 2, 1, "", "__init__"], [258, 2, 1, "", "fit"], [258, 2, 1, "", "fit_transform"], [258, 2, 1, "", "get_metadata_routing"], [258, 2, 1, "", "get_params"], [258, 2, 1, "", "inverse_transform"], [258, 2, 1, "", "score"], [258, 2, 1, "", "set_fit_request"], [258, 2, 1, "", "set_inverse_transform_request"], [258, 2, 1, "", "set_output"], [258, 2, 1, "", "set_params"], [258, 2, 1, "", "set_score_request"], [258, 2, 1, "", "set_transform_request"], [258, 2, 1, "", "transform"]], "nilearn.experimental.surface": [[259, 1, 1, "", "FileMesh"], [260, 1, 1, "", "InMemoryMesh"], [261, 1, 1, "", "Mesh"], [262, 4, 1, "", "PolyMesh"], [263, 1, 1, "", "SurfaceImage"], [264, 1, 1, "", "SurfaceLabelsMasker"], [265, 1, 1, "", "SurfaceMasker"], [266, 3, 1, "", "fetch_destrieux"], [267, 3, 1, "", "fetch_nki"], [268, 3, 1, "", "load_fsaverage"]], "nilearn.experimental.surface.FileMesh": [[259, 2, 1, "", "__init__"], [259, 5, 1, "", "coordinates"], [259, 5, 1, "", "faces"], [259, 4, 1, "", "file_path"], [259, 2, 1, "", "loaded"], [259, 4, 1, "", "n_vertices"], [259, 2, 1, "", "to_gifti"]], "nilearn.experimental.surface.InMemoryMesh": [[260, 2, 1, "", "__init__"], [260, 4, 1, "", "coordinates"], [260, 4, 1, "", "faces"], [260, 4, 1, "", "n_vertices"], [260, 2, 1, "", "to_gifti"]], "nilearn.experimental.surface.Mesh": [[261, 2, 1, "", "__init__"], [261, 4, 1, "", "coordinates"], [261, 4, 1, "", "faces"], [261, 4, 1, "", "n_vertices"], [261, 2, 1, "", "to_gifti"]], "nilearn.experimental.surface.SurfaceImage": [[263, 2, 1, "", "__init__"], [263, 4, 1, "", "data"], [263, 4, 1, "", "mesh"], [263, 4, 1, "", "shape"]], "nilearn.experimental.surface.SurfaceLabelsMasker": [[264, 2, 1, "", "__init__"], [264, 2, 1, "", "fit"], [264, 2, 1, "", "fit_transform"], [264, 2, 1, "", "inverse_transform"], [264, 4, 1, "", "label_names"], [264, 4, 1, "", "label_names_"], [264, 4, 1, "", "labels_"], [264, 4, 1, "", "labels_data_"], [264, 4, 1, "", "labels_img"], [264, 2, 1, "", "transform"]], "nilearn.experimental.surface.SurfaceMasker": [[265, 2, 1, "", "__init__"], [265, 2, 1, "", "fit"], [265, 2, 1, "", "fit_transform"], [265, 2, 1, "", "inverse_transform"], [265, 4, 1, "", "mask_img"], [265, 4, 1, "", "mask_img_"], [265, 4, 1, "", "output_dimension_"], [265, 2, 1, "", "transform"]], "nilearn.glm": [[269, 1, 1, "", "ARModel"], [270, 1, 1, "", "Contrast"], [271, 1, 1, "", "FContrastResults"], [272, 1, 1, "", "LikelihoodModelResults"], [273, 1, 1, "", "OLSModel"], [274, 1, 1, "", "RegressionResults"], [275, 1, 1, "", "SimpleRegressionResults"], [276, 1, 1, "", "TContrastResults"], [277, 3, 1, "", "cluster_level_inference"], [278, 3, 1, "", "compute_contrast"], [279, 3, 1, "", "compute_fixed_effects"], [280, 3, 1, "", "expression_to_contrast_vector"], [281, 3, 1, "", "fdr_threshold"], [424, 0, 0, "-", "first_level"], [424, 0, 0, "-", "second_level"], [298, 3, 1, "", "threshold_stats_img"]], "nilearn.glm.ARModel": [[269, 2, 1, "", "__init__"], [269, 2, 1, "", "fit"], [269, 2, 1, "", "initialize"], [269, 2, 1, "", "logL"], [269, 2, 1, "", "whiten"]], "nilearn.glm.Contrast": [[270, 2, 1, "", "__init__"], [270, 2, 1, "", "effect_size"], [270, 2, 1, "", "effect_variance"], [270, 2, 1, "", "one_minus_pvalue"], [270, 2, 1, "", "p_value"], [270, 2, 1, "", "stat"], [270, 2, 1, "", "z_score"]], "nilearn.glm.FContrastResults": [[271, 2, 1, "", "__init__"]], "nilearn.glm.LikelihoodModelResults": [[272, 2, 1, "", "Fcontrast"], [272, 2, 1, "", "Tcontrast"], [272, 2, 1, "", "__init__"], [272, 2, 1, "", "conf_int"], [272, 2, 1, "", "logL"], [272, 2, 1, "", "t"], [272, 2, 1, "", "vcov"]], "nilearn.glm.OLSModel": [[273, 2, 1, "", "__init__"], [273, 2, 1, "", "fit"], [273, 2, 1, "", "initialize"], [273, 2, 1, "", "logL"], [273, 2, 1, "", "whiten"]], "nilearn.glm.RegressionResults": [[274, 2, 1, "", "Fcontrast"], [274, 2, 1, "", "MSE"], [274, 2, 1, "", "SSE"], [274, 2, 1, "", "Tcontrast"], [274, 2, 1, "", "__init__"], [274, 2, 1, "", "conf_int"], [274, 2, 1, "", "logL"], [274, 2, 1, "", "normalized_residuals"], [274, 2, 1, "", "predicted"], [274, 2, 1, "", "r_square"], [274, 2, 1, "", "residuals"], [274, 2, 1, "", "t"], [274, 2, 1, "", "vcov"]], "nilearn.glm.SimpleRegressionResults": [[275, 2, 1, "", "Fcontrast"], [275, 2, 1, "", "Tcontrast"], [275, 2, 1, "", "__init__"], [275, 2, 1, "", "conf_int"], [275, 2, 1, "", "logL"], [275, 2, 1, "", "normalized_residuals"], [275, 2, 1, "", "predicted"], [275, 2, 1, "", "residuals"], [275, 2, 1, "", "t"], [275, 2, 1, "", "vcov"]], "nilearn.glm.TContrastResults": [[276, 2, 1, "", "__init__"]], "nilearn.glm.first_level": [[282, 1, 1, "", "FirstLevelModel"], [283, 3, 1, "", "check_design_matrix"], [284, 3, 1, "", "compute_regressor"], [285, 3, 1, "", "first_level_from_bids"], [286, 3, 1, "", "glover_dispersion_derivative"], [287, 3, 1, "", "glover_hrf"], [288, 3, 1, "", "glover_time_derivative"], [289, 3, 1, "", "make_first_level_design_matrix"], [290, 3, 1, "", "mean_scaling"], [291, 3, 1, "", "run_glm"], [292, 3, 1, "", "spm_dispersion_derivative"], [293, 3, 1, "", "spm_hrf"], [294, 3, 1, "", "spm_time_derivative"]], "nilearn.glm.first_level.FirstLevelModel": [[282, 2, 1, "", "__init__"], [282, 2, 1, "", "compute_contrast"], [282, 2, 1, "", "fit"], [282, 2, 1, "", "fit_transform"], [282, 2, 1, "", "generate_report"], [282, 2, 1, "", "get_metadata_routing"], [282, 2, 1, "", "get_params"], [282, 2, 1, "", "predicted"], [282, 2, 1, "", "r_square"], [282, 2, 1, "", "residuals"], [282, 5, 1, "", "scaling_axis"], [282, 2, 1, "", "set_fit_request"], [282, 2, 1, "", "set_output"], [282, 2, 1, "", "set_params"]], "nilearn.glm.second_level": [[295, 1, 1, "", "SecondLevelModel"], [296, 3, 1, "", "make_second_level_design_matrix"], [297, 3, 1, "", "non_parametric_inference"]], "nilearn.glm.second_level.SecondLevelModel": [[295, 2, 1, "", "__init__"], [295, 2, 1, "", "compute_contrast"], [295, 2, 1, "", "fit"], [295, 2, 1, "", "fit_transform"], [295, 2, 1, "", "generate_report"], [295, 2, 1, "", "get_metadata_routing"], [295, 2, 1, "", "get_params"], [295, 2, 1, "", "predicted"], [295, 2, 1, "", "r_square"], [295, 2, 1, "", "residuals"], [295, 2, 1, "", "set_fit_request"], [295, 2, 1, "", "set_output"], [295, 2, 1, "", "set_params"]], "nilearn.image": [[299, 3, 1, "", "binarize_img"], [300, 3, 1, "", "clean_img"], [301, 3, 1, "", "concat_imgs"], [302, 3, 1, "", "coord_transform"], [303, 3, 1, "", "copy_img"], [304, 3, 1, "", "crop_img"], [305, 3, 1, "", "get_data"], [306, 3, 1, "", "high_variance_confounds"], [307, 3, 1, "", "index_img"], [308, 3, 1, "", "iter_img"], [309, 3, 1, "", "largest_connected_component_img"], [310, 3, 1, "", "load_img"], [311, 3, 1, "", "math_img"], [312, 3, 1, "", "mean_img"], [313, 3, 1, "", "new_img_like"], [314, 3, 1, "", "reorder_img"], [315, 3, 1, "", "resample_img"], [316, 3, 1, "", "resample_to_img"], [317, 3, 1, "", "smooth_img"], [318, 3, 1, "", "swap_img_hemispheres"], [319, 3, 1, "", "threshold_img"]], "nilearn.interfaces": [[427, 0, 0, "-", "bids"], [427, 0, 0, "-", "fmriprep"], [427, 0, 0, "-", "fsl"]], "nilearn.interfaces.bids": [[320, 3, 1, "", "get_bids_files"], [321, 3, 1, "", "parse_bids_filename"], [322, 3, 1, "", "save_glm_to_bids"]], "nilearn.interfaces.fmriprep": [[323, 3, 1, "", "load_confounds"], [324, 3, 1, "", "load_confounds_strategy"]], "nilearn.interfaces.fsl": [[325, 3, 1, "", "get_design_from_fslmat"]], "nilearn.maskers": [[326, 1, 1, "", "BaseMasker"], [327, 1, 1, "", "MultiNiftiLabelsMasker"], [328, 1, 1, "", "MultiNiftiMapsMasker"], [329, 1, 1, "", "MultiNiftiMasker"], [330, 1, 1, "", "NiftiLabelsMasker"], [331, 1, 1, "", "NiftiMapsMasker"], [332, 1, 1, "", "NiftiMasker"], [333, 1, 1, "", "NiftiSpheresMasker"]], "nilearn.maskers.BaseMasker": [[326, 2, 1, "", "__init__"], [326, 2, 1, "", "fit_transform"], [326, 2, 1, "", "get_metadata_routing"], [326, 2, 1, "", "get_params"], [326, 2, 1, "", "inverse_transform"], [326, 2, 1, "", "set_output"], [326, 2, 1, "", "set_params"], [326, 2, 1, "", "set_transform_request"], [326, 2, 1, "", "transform"], [326, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[327, 2, 1, "", "__init__"], [327, 2, 1, "", "fit"], [327, 2, 1, "", "fit_transform"], [327, 2, 1, "", "generate_report"], [327, 2, 1, "", "get_metadata_routing"], [327, 2, 1, "", "get_params"], [327, 2, 1, "", "inverse_transform"], [327, 2, 1, "", "set_fit_request"], [327, 2, 1, "", "set_inverse_transform_request"], [327, 2, 1, "", "set_output"], [327, 2, 1, "", "set_params"], [327, 2, 1, "", "set_transform_request"], [327, 2, 1, "", "transform"], [327, 2, 1, "", "transform_imgs"], [327, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMapsMasker": [[328, 2, 1, "", "__init__"], [328, 2, 1, "", "fit"], [328, 2, 1, "", "fit_transform"], [328, 2, 1, "", "generate_report"], [328, 2, 1, "", "get_metadata_routing"], [328, 2, 1, "", "get_params"], [328, 2, 1, "", "inverse_transform"], [328, 2, 1, "", "set_fit_request"], [328, 2, 1, "", "set_inverse_transform_request"], [328, 2, 1, "", "set_output"], [328, 2, 1, "", "set_params"], [328, 2, 1, "", "set_transform_request"], [328, 2, 1, "", "transform"], [328, 2, 1, "", "transform_imgs"], [328, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMasker": [[329, 2, 1, "", "__init__"], [329, 2, 1, "", "fit"], [329, 2, 1, "", "fit_transform"], [329, 2, 1, "", "generate_report"], [329, 2, 1, "", "get_metadata_routing"], [329, 2, 1, "", "get_params"], [329, 2, 1, "", "inverse_transform"], [329, 2, 1, "", "set_fit_request"], [329, 2, 1, "", "set_output"], [329, 2, 1, "", "set_params"], [329, 2, 1, "", "set_transform_request"], [329, 2, 1, "", "transform"], [329, 2, 1, "", "transform_imgs"], [329, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiLabelsMasker": [[330, 2, 1, "", "__init__"], [330, 2, 1, "", "fit"], [330, 2, 1, "", "fit_transform"], [330, 2, 1, "", "generate_report"], [330, 2, 1, "", "get_metadata_routing"], [330, 2, 1, "", "get_params"], [330, 2, 1, "", "inverse_transform"], [330, 2, 1, "", "set_fit_request"], [330, 2, 1, "", "set_inverse_transform_request"], [330, 2, 1, "", "set_output"], [330, 2, 1, "", "set_params"], [330, 2, 1, "", "set_transform_request"], [330, 2, 1, "", "transform"], [330, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMapsMasker": [[331, 2, 1, "", "__init__"], [331, 2, 1, "", "fit"], [331, 2, 1, "", "fit_transform"], [331, 2, 1, "", "generate_report"], [331, 2, 1, "", "get_metadata_routing"], [331, 2, 1, "", "get_params"], [331, 2, 1, "", "inverse_transform"], [331, 2, 1, "", "set_fit_request"], [331, 2, 1, "", "set_inverse_transform_request"], [331, 2, 1, "", "set_output"], [331, 2, 1, "", "set_params"], [331, 2, 1, "", "set_transform_request"], [331, 2, 1, "", "transform"], [331, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMasker": [[332, 2, 1, "", "__init__"], [332, 2, 1, "", "fit"], [332, 2, 1, "", "fit_transform"], [332, 2, 1, "", "generate_report"], [332, 2, 1, "", "get_metadata_routing"], [332, 2, 1, "", "get_params"], [332, 2, 1, "", "inverse_transform"], [332, 2, 1, "", "set_fit_request"], [332, 2, 1, "", "set_output"], [332, 2, 1, "", "set_params"], [332, 2, 1, "", "set_transform_request"], [332, 2, 1, "", "transform"], [332, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiSpheresMasker": [[333, 2, 1, "", "__init__"], [333, 2, 1, "", "fit"], [333, 2, 1, "", "fit_transform"], [333, 2, 1, "", "get_metadata_routing"], [333, 2, 1, "", "get_params"], [333, 2, 1, "", "inverse_transform"], [333, 2, 1, "", "set_inverse_transform_request"], [333, 2, 1, "", "set_output"], [333, 2, 1, "", "set_params"], [333, 2, 1, "", "set_transform_request"], [333, 2, 1, "", "transform"], [333, 2, 1, "", "transform_single_imgs"]], "nilearn.masking": [[334, 3, 1, "", "apply_mask"], [335, 3, 1, "", "compute_background_mask"], [336, 3, 1, "", "compute_brain_mask"], [337, 3, 1, "", "compute_epi_mask"], [338, 3, 1, "", "compute_multi_background_mask"], [339, 3, 1, "", "compute_multi_brain_mask"], [340, 3, 1, "", "compute_multi_epi_mask"], [341, 3, 1, "", "intersect_masks"], [342, 3, 1, "", "unmask"]], "nilearn.mass_univariate": [[343, 3, 1, "", "permuted_ols"]], "nilearn.plotting": [[431, 0, 0, "-", "displays"], [374, 3, 1, "", "find_cut_slices"], [375, 3, 1, "", "find_parcellation_cut_coords"], [376, 3, 1, "", "find_probabilistic_atlas_cut_coords"], [377, 3, 1, "", "find_xyz_cut_coords"], [378, 3, 1, "", "plot_anat"], [379, 3, 1, "", "plot_carpet"], [380, 3, 1, "", "plot_connectome"], [381, 3, 1, "", "plot_contrast_matrix"], [382, 3, 1, "", "plot_design_matrix"], [383, 3, 1, "", "plot_epi"], [384, 3, 1, "", "plot_event"], [385, 3, 1, "", "plot_glass_brain"], [386, 3, 1, "", "plot_img"], [387, 3, 1, "", "plot_img_comparison"], [388, 3, 1, "", "plot_img_on_surf"], [389, 3, 1, "", "plot_markers"], [390, 3, 1, "", "plot_matrix"], [391, 3, 1, "", "plot_prob_atlas"], [392, 3, 1, "", "plot_roi"], [393, 3, 1, "", "plot_stat_map"], [394, 3, 1, "", "plot_surf"], [395, 3, 1, "", "plot_surf_contours"], [396, 3, 1, "", "plot_surf_roi"], [397, 3, 1, "", "plot_surf_stat_map"], [398, 3, 1, "", "show"], [399, 3, 1, "", "view_connectome"], [400, 3, 1, "", "view_img"], [401, 3, 1, "", "view_img_on_surf"], [402, 3, 1, "", "view_markers"], [403, 3, 1, "", "view_surf"]], "nilearn.plotting.displays": [[344, 1, 1, "", "BaseAxes"], [345, 1, 1, "", "BaseSlicer"], [346, 1, 1, "", "CutAxes"], [347, 1, 1, "", "GlassBrainAxes"], [348, 1, 1, "", "LProjector"], [349, 1, 1, "", "LRProjector"], [350, 1, 1, "", "LYRProjector"], [351, 1, 1, "", "LYRZProjector"], [352, 1, 1, "", "LZRProjector"], [353, 1, 1, "", "LZRYProjector"], [354, 1, 1, "", "MosaicSlicer"], [355, 1, 1, "", "OrthoProjector"], [356, 1, 1, "", "OrthoSlicer"], [357, 1, 1, "", "PlotlySurfaceFigure"], [358, 1, 1, "", "RProjector"], [359, 1, 1, "", "TiledSlicer"], [360, 1, 1, "", "XProjector"], [361, 1, 1, "", "XSlicer"], [362, 1, 1, "", "XZProjector"], [363, 1, 1, "", "XZSlicer"], [364, 1, 1, "", "YProjector"], [365, 1, 1, "", "YSlicer"], [366, 1, 1, "", "YXProjector"], [367, 1, 1, "", "YXSlicer"], [368, 1, 1, "", "YZProjector"], [369, 1, 1, "", "YZSlicer"], [370, 1, 1, "", "ZProjector"], [371, 1, 1, "", "ZSlicer"], [372, 3, 1, "", "get_projector"], [373, 3, 1, "", "get_slicer"]], "nilearn.plotting.displays.BaseAxes": [[344, 2, 1, "", "__init__"], [344, 2, 1, "", "add_object_bounds"], [344, 2, 1, "", "draw_2d"], [344, 2, 1, "", "draw_left_right"], [344, 2, 1, "", "draw_position"], [344, 2, 1, "", "draw_scale_bar"], [344, 2, 1, "", "get_object_bounds"], [344, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.BaseSlicer": [[345, 2, 1, "", "__init__"], [345, 2, 1, "", "add_contours"], [345, 2, 1, "", "add_edges"], [345, 2, 1, "", "add_markers"], [345, 2, 1, "", "add_overlay"], [345, 2, 1, "", "annotate"], [345, 5, 1, "", "black_bg"], [345, 5, 1, "", "brain_color"], [345, 2, 1, "", "close"], [345, 2, 1, "", "find_cut_coords"], [345, 2, 1, "", "init_with_figure"], [345, 2, 1, "", "savefig"], [345, 2, 1, "", "title"]], "nilearn.plotting.displays.CutAxes": [[346, 2, 1, "", "__init__"], [346, 2, 1, "", "add_object_bounds"], [346, 2, 1, "", "draw_2d"], [346, 2, 1, "", "draw_left_right"], [346, 2, 1, "", "draw_position"], [346, 2, 1, "", "draw_scale_bar"], [346, 2, 1, "", "get_object_bounds"], [346, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.GlassBrainAxes": [[347, 2, 1, "", "__init__"], [347, 2, 1, "", "add_object_bounds"], [347, 2, 1, "", "draw_2d"], [347, 2, 1, "", "draw_left_right"], [347, 2, 1, "", "draw_position"], [347, 2, 1, "", "draw_scale_bar"], [347, 2, 1, "", "get_object_bounds"], [347, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.LProjector": [[348, 2, 1, "", "__init__"], [348, 2, 1, "", "add_contours"], [348, 2, 1, "", "add_edges"], [348, 2, 1, "", "add_graph"], [348, 2, 1, "", "add_markers"], [348, 2, 1, "", "add_overlay"], [348, 2, 1, "", "annotate"], [348, 5, 1, "", "black_bg"], [348, 5, 1, "", "brain_color"], [348, 2, 1, "", "close"], [348, 2, 1, "", "draw_cross"], [348, 2, 1, "", "find_cut_coords"], [348, 2, 1, "", "init_with_figure"], [348, 2, 1, "", "savefig"], [348, 2, 1, "", "title"]], "nilearn.plotting.displays.LRProjector": [[349, 2, 1, "", "__init__"], [349, 2, 1, "", "add_contours"], [349, 2, 1, "", "add_edges"], [349, 2, 1, "", "add_graph"], [349, 2, 1, "", "add_markers"], [349, 2, 1, "", "add_overlay"], [349, 2, 1, "", "annotate"], [349, 5, 1, "", "black_bg"], [349, 5, 1, "", "brain_color"], [349, 2, 1, "", "close"], [349, 2, 1, "", "draw_cross"], [349, 2, 1, "", "find_cut_coords"], [349, 2, 1, "", "init_with_figure"], [349, 2, 1, "", "savefig"], [349, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRProjector": [[350, 2, 1, "", "__init__"], [350, 2, 1, "", "add_contours"], [350, 2, 1, "", "add_edges"], [350, 2, 1, "", "add_graph"], [350, 2, 1, "", "add_markers"], [350, 2, 1, "", "add_overlay"], [350, 2, 1, "", "annotate"], [350, 5, 1, "", "black_bg"], [350, 5, 1, "", "brain_color"], [350, 2, 1, "", "close"], [350, 2, 1, "", "draw_cross"], [350, 2, 1, "", "find_cut_coords"], [350, 2, 1, "", "init_with_figure"], [350, 2, 1, "", "savefig"], [350, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRZProjector": [[351, 2, 1, "", "__init__"], [351, 2, 1, "", "add_contours"], [351, 2, 1, "", "add_edges"], [351, 2, 1, "", "add_graph"], [351, 2, 1, "", "add_markers"], [351, 2, 1, "", "add_overlay"], [351, 2, 1, "", "annotate"], [351, 5, 1, "", "black_bg"], [351, 5, 1, "", "brain_color"], [351, 2, 1, "", "close"], [351, 2, 1, "", "draw_cross"], [351, 2, 1, "", "find_cut_coords"], [351, 2, 1, "", "init_with_figure"], [351, 2, 1, "", "savefig"], [351, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRProjector": [[352, 2, 1, "", "__init__"], [352, 2, 1, "", "add_contours"], [352, 2, 1, "", "add_edges"], [352, 2, 1, "", "add_graph"], [352, 2, 1, "", "add_markers"], [352, 2, 1, "", "add_overlay"], [352, 2, 1, "", "annotate"], [352, 5, 1, "", "black_bg"], [352, 5, 1, "", "brain_color"], [352, 2, 1, "", "close"], [352, 2, 1, "", "draw_cross"], [352, 2, 1, "", "find_cut_coords"], [352, 2, 1, "", "init_with_figure"], [352, 2, 1, "", "savefig"], [352, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRYProjector": [[353, 2, 1, "", "__init__"], [353, 2, 1, "", "add_contours"], [353, 2, 1, "", "add_edges"], [353, 2, 1, "", "add_graph"], [353, 2, 1, "", "add_markers"], [353, 2, 1, "", "add_overlay"], [353, 2, 1, "", "annotate"], [353, 5, 1, "", "black_bg"], [353, 5, 1, "", "brain_color"], [353, 2, 1, "", "close"], [353, 2, 1, "", "draw_cross"], [353, 2, 1, "", "find_cut_coords"], [353, 2, 1, "", "init_with_figure"], [353, 2, 1, "", "savefig"], [353, 2, 1, "", "title"]], "nilearn.plotting.displays.MosaicSlicer": [[354, 2, 1, "", "__init__"], [354, 2, 1, "", "add_contours"], [354, 2, 1, "", "add_edges"], [354, 2, 1, "", "add_markers"], [354, 2, 1, "", "add_overlay"], [354, 2, 1, "", "annotate"], [354, 5, 1, "", "black_bg"], [354, 5, 1, "", "brain_color"], [354, 2, 1, "", "close"], [354, 2, 1, "", "draw_cross"], [354, 2, 1, "", "find_cut_coords"], [354, 2, 1, "", "init_with_figure"], [354, 2, 1, "", "savefig"], [354, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoProjector": [[355, 2, 1, "", "__init__"], [355, 2, 1, "", "add_contours"], [355, 2, 1, "", "add_edges"], [355, 2, 1, "", "add_graph"], [355, 2, 1, "", "add_markers"], [355, 2, 1, "", "add_overlay"], [355, 2, 1, "", "annotate"], [355, 5, 1, "", "black_bg"], [355, 5, 1, "", "brain_color"], [355, 2, 1, "", "close"], [355, 2, 1, "", "draw_cross"], [355, 2, 1, "", "find_cut_coords"], [355, 2, 1, "", "init_with_figure"], [355, 2, 1, "", "savefig"], [355, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoSlicer": [[356, 2, 1, "", "__init__"], [356, 2, 1, "", "add_contours"], [356, 2, 1, "", "add_edges"], [356, 2, 1, "", "add_markers"], [356, 2, 1, "", "add_overlay"], [356, 2, 1, "", "annotate"], [356, 5, 1, "", "black_bg"], [356, 5, 1, "", "brain_color"], [356, 2, 1, "", "close"], [356, 2, 1, "", "draw_cross"], [356, 2, 1, "", "find_cut_coords"], [356, 2, 1, "", "init_with_figure"], [356, 2, 1, "", "savefig"], [356, 2, 1, "", "title"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[357, 2, 1, "", "__init__"], [357, 2, 1, "", "savefig"], [357, 2, 1, "", "show"]], "nilearn.plotting.displays.RProjector": [[358, 2, 1, "", "__init__"], [358, 2, 1, "", "add_contours"], [358, 2, 1, "", "add_edges"], [358, 2, 1, "", "add_graph"], [358, 2, 1, "", "add_markers"], [358, 2, 1, "", "add_overlay"], [358, 2, 1, "", "annotate"], [358, 5, 1, "", "black_bg"], [358, 5, 1, "", "brain_color"], [358, 2, 1, "", "close"], [358, 2, 1, "", "draw_cross"], [358, 2, 1, "", "find_cut_coords"], [358, 2, 1, "", "init_with_figure"], [358, 2, 1, "", "savefig"], [358, 2, 1, "", "title"]], "nilearn.plotting.displays.TiledSlicer": [[359, 2, 1, "", "__init__"], [359, 2, 1, "", "add_contours"], [359, 2, 1, "", "add_edges"], [359, 2, 1, "", "add_markers"], [359, 2, 1, "", "add_overlay"], [359, 2, 1, "", "annotate"], [359, 5, 1, "", "black_bg"], [359, 5, 1, "", "brain_color"], [359, 2, 1, "", "close"], [359, 2, 1, "", "draw_cross"], [359, 2, 1, "", "find_cut_coords"], [359, 2, 1, "", "init_with_figure"], [359, 2, 1, "", "savefig"], [359, 2, 1, "", "title"]], "nilearn.plotting.displays.XProjector": [[360, 2, 1, "", "__init__"], [360, 2, 1, "", "add_contours"], [360, 2, 1, "", "add_edges"], [360, 2, 1, "", "add_graph"], [360, 2, 1, "", "add_markers"], [360, 2, 1, "", "add_overlay"], [360, 2, 1, "", "annotate"], [360, 5, 1, "", "black_bg"], [360, 5, 1, "", "brain_color"], [360, 2, 1, "", "close"], [360, 2, 1, "", "draw_cross"], [360, 2, 1, "", "find_cut_coords"], [360, 2, 1, "", "init_with_figure"], [360, 2, 1, "", "savefig"], [360, 2, 1, "", "title"]], "nilearn.plotting.displays.XSlicer": [[361, 2, 1, "", "__init__"], [361, 2, 1, "", "add_contours"], [361, 2, 1, "", "add_edges"], [361, 2, 1, "", "add_markers"], [361, 2, 1, "", "add_overlay"], [361, 2, 1, "", "annotate"], [361, 5, 1, "", "black_bg"], [361, 5, 1, "", "brain_color"], [361, 2, 1, "", "close"], [361, 2, 1, "", "draw_cross"], [361, 2, 1, "", "find_cut_coords"], [361, 2, 1, "", "init_with_figure"], [361, 2, 1, "", "savefig"], [361, 2, 1, "", "title"]], "nilearn.plotting.displays.XZProjector": [[362, 2, 1, "", "__init__"], [362, 2, 1, "", "add_contours"], [362, 2, 1, "", "add_edges"], [362, 2, 1, "", "add_graph"], [362, 2, 1, "", "add_markers"], [362, 2, 1, "", "add_overlay"], [362, 2, 1, "", "annotate"], [362, 5, 1, "", "black_bg"], [362, 5, 1, "", "brain_color"], [362, 2, 1, "", "close"], [362, 2, 1, "", "draw_cross"], [362, 2, 1, "", "find_cut_coords"], [362, 2, 1, "", "init_with_figure"], [362, 2, 1, "", "savefig"], [362, 2, 1, "", "title"]], "nilearn.plotting.displays.XZSlicer": [[363, 2, 1, "", "__init__"], [363, 2, 1, "", "add_contours"], [363, 2, 1, "", "add_edges"], [363, 2, 1, "", "add_markers"], [363, 2, 1, "", "add_overlay"], [363, 2, 1, "", "annotate"], [363, 5, 1, "", "black_bg"], [363, 5, 1, "", "brain_color"], [363, 2, 1, "", "close"], [363, 2, 1, "", "draw_cross"], [363, 2, 1, "", "find_cut_coords"], [363, 2, 1, "", "init_with_figure"], [363, 2, 1, "", "savefig"], [363, 2, 1, "", "title"]], "nilearn.plotting.displays.YProjector": [[364, 2, 1, "", "__init__"], [364, 2, 1, "", "add_contours"], [364, 2, 1, "", "add_edges"], [364, 2, 1, "", "add_graph"], [364, 2, 1, "", "add_markers"], [364, 2, 1, "", "add_overlay"], [364, 2, 1, "", "annotate"], [364, 5, 1, "", "black_bg"], [364, 5, 1, "", "brain_color"], [364, 2, 1, "", "close"], [364, 2, 1, "", "draw_cross"], [364, 2, 1, "", "find_cut_coords"], [364, 2, 1, "", "init_with_figure"], [364, 2, 1, "", "savefig"], [364, 2, 1, "", "title"]], "nilearn.plotting.displays.YSlicer": [[365, 2, 1, "", "__init__"], [365, 2, 1, "", "add_contours"], [365, 2, 1, "", "add_edges"], [365, 2, 1, "", "add_markers"], [365, 2, 1, "", "add_overlay"], [365, 2, 1, "", "annotate"], [365, 5, 1, "", "black_bg"], [365, 5, 1, "", "brain_color"], [365, 2, 1, "", "close"], [365, 2, 1, "", "draw_cross"], [365, 2, 1, "", "find_cut_coords"], [365, 2, 1, "", "init_with_figure"], [365, 2, 1, "", "savefig"], [365, 2, 1, "", "title"]], "nilearn.plotting.displays.YXProjector": [[366, 2, 1, "", "__init__"], [366, 2, 1, "", "add_contours"], [366, 2, 1, "", "add_edges"], [366, 2, 1, "", "add_graph"], [366, 2, 1, "", "add_markers"], [366, 2, 1, "", "add_overlay"], [366, 2, 1, "", "annotate"], [366, 5, 1, "", "black_bg"], [366, 5, 1, "", "brain_color"], [366, 2, 1, "", "close"], [366, 2, 1, "", "draw_cross"], [366, 2, 1, "", "find_cut_coords"], [366, 2, 1, "", "init_with_figure"], [366, 2, 1, "", "savefig"], [366, 2, 1, "", "title"]], "nilearn.plotting.displays.YXSlicer": [[367, 2, 1, "", "__init__"], [367, 2, 1, "", "add_contours"], [367, 2, 1, "", "add_edges"], [367, 2, 1, "", "add_markers"], [367, 2, 1, "", "add_overlay"], [367, 2, 1, "", "annotate"], [367, 5, 1, "", "black_bg"], [367, 5, 1, "", "brain_color"], [367, 2, 1, "", "close"], [367, 2, 1, "", "draw_cross"], [367, 2, 1, "", "find_cut_coords"], [367, 2, 1, "", "init_with_figure"], [367, 2, 1, "", "savefig"], [367, 2, 1, "", "title"]], "nilearn.plotting.displays.YZProjector": [[368, 2, 1, "", "__init__"], [368, 2, 1, "", "add_contours"], [368, 2, 1, "", "add_edges"], [368, 2, 1, "", "add_graph"], [368, 2, 1, "", "add_markers"], [368, 2, 1, "", "add_overlay"], [368, 2, 1, "", "annotate"], [368, 5, 1, "", "black_bg"], [368, 5, 1, "", "brain_color"], [368, 2, 1, "", "close"], [368, 2, 1, "", "draw_cross"], [368, 2, 1, "", "find_cut_coords"], [368, 2, 1, "", "init_with_figure"], [368, 2, 1, "", "savefig"], [368, 2, 1, "", "title"]], "nilearn.plotting.displays.YZSlicer": [[369, 2, 1, "", "__init__"], [369, 2, 1, "", "add_contours"], [369, 2, 1, "", "add_edges"], [369, 2, 1, "", "add_markers"], [369, 2, 1, "", "add_overlay"], [369, 2, 1, "", "annotate"], [369, 5, 1, "", "black_bg"], [369, 5, 1, "", "brain_color"], [369, 2, 1, "", "close"], [369, 2, 1, "", "draw_cross"], [369, 2, 1, "", "find_cut_coords"], [369, 2, 1, "", "init_with_figure"], [369, 2, 1, "", "savefig"], [369, 2, 1, "", "title"]], "nilearn.plotting.displays.ZProjector": [[370, 2, 1, "", "__init__"], [370, 2, 1, "", "add_contours"], [370, 2, 1, "", "add_edges"], [370, 2, 1, "", "add_graph"], [370, 2, 1, "", "add_markers"], [370, 2, 1, "", "add_overlay"], [370, 2, 1, "", "annotate"], [370, 5, 1, "", "black_bg"], [370, 5, 1, "", "brain_color"], [370, 2, 1, "", "close"], [370, 2, 1, "", "draw_cross"], [370, 2, 1, "", "find_cut_coords"], [370, 2, 1, "", "init_with_figure"], [370, 2, 1, "", "savefig"], [370, 2, 1, "", "title"]], "nilearn.plotting.displays.ZSlicer": [[371, 2, 1, "", "__init__"], [371, 2, 1, "", "add_contours"], [371, 2, 1, "", "add_edges"], [371, 2, 1, "", "add_markers"], [371, 2, 1, "", "add_overlay"], [371, 2, 1, "", "annotate"], [371, 5, 1, "", "black_bg"], [371, 5, 1, "", "brain_color"], [371, 2, 1, "", "close"], [371, 2, 1, "", "draw_cross"], [371, 2, 1, "", "find_cut_coords"], [371, 2, 1, "", "init_with_figure"], [371, 2, 1, "", "savefig"], [371, 2, 1, "", "title"]], "nilearn.regions": [[404, 1, 1, "", "HierarchicalKMeans"], [405, 1, 1, "", "Parcellations"], [406, 1, 1, "", "ReNA"], [407, 1, 1, "", "RegionExtractor"], [408, 3, 1, "", "connected_label_regions"], [409, 3, 1, "", "connected_regions"], [410, 3, 1, "", "img_to_signals_labels"], [411, 3, 1, "", "img_to_signals_maps"], [412, 3, 1, "", "recursive_neighbor_agglomeration"], [413, 3, 1, "", "signals_to_img_labels"], [414, 3, 1, "", "signals_to_img_maps"]], "nilearn.regions.HierarchicalKMeans": [[404, 2, 1, "", "__init__"], [404, 2, 1, "", "fit"], [404, 2, 1, "", "fit_predict"], [404, 2, 1, "", "fit_transform"], [404, 2, 1, "", "get_metadata_routing"], [404, 2, 1, "", "get_params"], [404, 2, 1, "", "inverse_transform"], [404, 2, 1, "", "set_inverse_transform_request"], [404, 2, 1, "", "set_output"], [404, 2, 1, "", "set_params"], [404, 2, 1, "", "transform"]], "nilearn.regions.Parcellations": [[405, 4, 1, "", "VALID_METHODS"], [405, 2, 1, "", "__init__"], [405, 2, 1, "", "fit"], [405, 2, 1, "", "fit_transform"], [405, 2, 1, "", "get_metadata_routing"], [405, 2, 1, "", "get_params"], [405, 2, 1, "", "inverse_transform"], [405, 2, 1, "", "score"], [405, 2, 1, "", "set_fit_request"], [405, 2, 1, "", "set_inverse_transform_request"], [405, 2, 1, "", "set_output"], [405, 2, 1, "", "set_params"], [405, 2, 1, "", "set_score_request"], [405, 2, 1, "", "set_transform_request"], [405, 2, 1, "", "transform"]], "nilearn.regions.ReNA": [[406, 2, 1, "", "__init__"], [406, 2, 1, "", "fit"], [406, 2, 1, "", "fit_predict"], [406, 2, 1, "", "fit_transform"], [406, 2, 1, "", "get_metadata_routing"], [406, 2, 1, "", "get_params"], [406, 2, 1, "", "inverse_transform"], [406, 2, 1, "", "set_inverse_transform_request"], [406, 2, 1, "", "set_output"], [406, 2, 1, "", "set_params"], [406, 2, 1, "", "transform"]], "nilearn.regions.RegionExtractor": [[407, 2, 1, "", "__init__"], [407, 2, 1, "", "fit"], [407, 2, 1, "", "fit_transform"], [407, 2, 1, "", "generate_report"], [407, 2, 1, "", "get_metadata_routing"], [407, 2, 1, "", "get_params"], [407, 2, 1, "", "inverse_transform"], [407, 2, 1, "", "set_fit_request"], [407, 2, 1, "", "set_inverse_transform_request"], [407, 2, 1, "", "set_output"], [407, 2, 1, "", "set_params"], [407, 2, 1, "", "set_transform_request"], [407, 2, 1, "", "transform"], [407, 2, 1, "", "transform_single_imgs"]], "nilearn.reporting": [[415, 1, 1, "", "HTMLReport"], [416, 3, 1, "", "get_clusters_table"], [417, 3, 1, "", "make_glm_report"]], "nilearn.reporting.HTMLReport": [[415, 2, 1, "", "__init__"], [415, 2, 1, "", "get_iframe"], [415, 2, 1, "", "get_standalone"], [415, 2, 1, "", "open_in_browser"], [415, 2, 1, "", "remove_temp_file"], [415, 2, 1, "", "resize"], [415, 2, 1, "", "save_as_html"]], "nilearn.signal": [[418, 3, 1, "", "butterworth"], [419, 3, 1, "", "clean"], [420, 3, 1, "", "high_variance_confounds"]], "nilearn.surface": [[421, 3, 1, "", "load_surf_data"], [422, 3, 1, "", "load_surf_mesh"], [423, 3, 1, "", "vol_to_surf"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"]}, "titleterms": {"team": 0, "core": 0, "develop": [0, 48, 49, 50, 51, 58, 99, 437], "other": [0, 21, 163], "contributor": [0, 126, 128, 131, 135, 138, 139, 140, 141, 142, 143, 153], "fund": 0, "cite": 0, "nilearn": [0, 4, 12, 13, 14, 15, 16, 21, 29, 34, 159, 160, 168, 174, 175, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437], "scikit": [0, 35, 98, 111, 116, 163, 180], "learn": [0, 35, 48, 49, 50, 98, 111, 116, 158, 159, 163, 175, 180], "basic": [1, 4, 5, 10, 66, 113], "tutori": [1, 2, 3, 113], "3d": [2, 9, 22, 52, 54, 58, 88, 178, 436], "4d": [2, 21, 116, 178, 179], "niimg": [2, 178], "handl": 2, "visual": [2, 3, 8, 9, 10, 11, 15, 16, 19, 20, 21, 22, 25, 26, 29, 30, 31, 36, 37, 40, 41, 42, 43, 49, 52, 54, 58, 81, 84, 98, 107, 113, 116, 157, 158, 159, 160, 165, 180, 436], "download": [2, 3, 49, 98, 116, 117, 178], "dataset": [2, 6, 11, 15, 16, 17, 18, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 48, 49, 50, 51, 53, 58, 61, 62, 65, 75, 76, 79, 80, 99, 101, 105, 106, 108, 158, 162, 167, 168, 178, 182, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249], "from": [2, 3, 11, 15, 16, 24, 26, 28, 33, 39, 40, 41, 48, 49, 50, 56, 58, 62, 89, 91, 94, 98, 100, 105, 106, 113, 116, 117, 155, 164, 178, 179, 180, 427, 428], "internet": [2, 178], "file": [2, 4, 15, 29, 56, 72, 178, 436], "one": [2, 50, 62, 79, 179], "volum": [2, 3, 9, 24, 25, 66, 83, 113, 177, 179, 180], "loop": [2, 3], "all": [2, 14, 160], "through": 2, "select": [2, 98, 117, 154, 160], "A": [3, 4, 44, 66, 111, 155, 160, 170], "introduct": [3, 160, 170, 175], "fmri": [3, 6, 35, 48, 49, 51, 58, 64, 65, 67, 69, 76, 79, 80, 98, 99, 104, 154, 155, 160, 170, 171], "decod": [3, 28, 29, 30, 31, 32, 33, 34, 35, 37, 41, 43, 98, 100, 111, 113, 160, 162, 163, 164, 166, 183, 250, 251, 252, 253, 254, 255, 256], "retriev": [3, 6, 10, 15, 16, 17, 19, 23, 29, 52, 54, 56, 58, 66, 98], "load": [3, 13, 14, 18, 22, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 47, 48, 51, 56, 75, 94, 98, 99, 116, 157, 160, 178, 180, 427], "data": [3, 4, 6, 9, 10, 11, 13, 14, 15, 16, 17, 22, 23, 25, 29, 30, 32, 33, 35, 39, 40, 41, 42, 44, 47, 48, 49, 52, 54, 55, 56, 57, 61, 64, 66, 67, 69, 71, 75, 89, 94, 98, 100, 103, 107, 116, 154, 157, 159, 160, 163, 165, 170, 178, 179, 180, 429, 431, 435], "haxbi": [3, 18, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 98, 160, 162], "studi": [3, 51, 98, 103, 107, 108, 162], "first": [3, 4, 15, 41, 60, 61, 62, 66, 69, 98, 100, 101, 108, 113, 160, 169, 175, 180], "featur": [3, 15, 98, 126, 129, 153, 160, 174], "extract": [3, 23, 25, 33, 47, 50, 51, 52, 53, 54, 55, 56, 58, 61, 70, 87, 88, 89, 91, 154, 155, 158, 159, 169, 179, 180, 428], "matrix": [3, 31, 35, 49, 52, 54, 56, 58, 78, 154, 155, 169], "behavior": [3, 29, 33, 178], "label": [3, 11, 56, 86, 176], "restrict": [3, 36, 37], "analysi": [3, 6, 32, 36, 42, 55, 60, 61, 62, 64, 65, 67, 69, 74, 75, 81, 97, 100, 101, 102, 104, 105, 106, 107, 108, 113, 160, 163, 165, 169, 170, 430], "cat": 3, "face": [3, 29, 30, 31, 36, 37, 102], "support": 3, "vector": 3, "machin": [3, 116, 175], "measur": [3, 47, 98, 160, 163], "predict": [3, 28, 29, 34, 35, 41, 42, 43, 70, 98, 99, 113, 160, 161, 164, 169], "score": [3, 6, 29, 34, 35, 36, 40, 165], "us": [3, 9, 15, 34, 35, 39, 48, 50, 51, 56, 87, 88, 91, 92, 98, 111, 117, 157, 158, 160, 163, 171, 175, 178, 186, 188, 195, 197, 198, 200, 201, 202, 203, 204, 207, 208, 210, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 244, 247, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 270, 277, 278, 279, 282, 284, 285, 289, 291, 295, 296, 297, 298, 300, 301, 302, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 342, 343, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 407, 408, 409, 415, 416, 417, 421, 422, 423, 436], "cross": [3, 29, 34, 35, 98, 103, 160, 163, 165, 167], "valid": [3, 29, 34, 35, 98, 158, 160, 163, 165, 167], "manual": [3, 94, 115, 179], "leav": 3, "out": 3, "implement": 3, "kfold": 3, "inspect": 3, "model": [3, 40, 42, 62, 64, 65, 66, 67, 68, 70, 76, 77, 79, 80, 100, 101, 159, 161, 162, 163, 169, 170, 172, 424], "weight": [3, 31, 98, 160], "turn": [3, 49], "nifti": [3, 55, 178, 179], "imag": [3, 4, 8, 9, 16, 17, 28, 69, 81, 83, 85, 90, 93, 95, 97, 103, 107, 111, 113, 116, 117, 164, 178, 179, 180, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 425, 428, 436], "plot": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 24, 31, 32, 34, 35, 44, 47, 50, 55, 58, 66, 68, 70, 80, 107, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 431, 436], "svm": [3, 29, 98, 160, 163], "what": [3, 51, 99, 153, 168, 170, 175], "i": [3, 51, 99, 170, 175, 178, 180], "chanc": [3, 98, 160, 163], "level": [3, 60, 61, 62, 66, 69, 74, 76, 77, 78, 79, 80, 81, 98, 101, 108, 113, 154, 160, 163, 169, 172], "accuraci": [3, 160], "further": [3, 44, 98, 116, 163, 165], "read": [3, 165, 178], "exampl": [4, 33, 39, 44, 63, 64, 67, 68, 69, 77, 78, 92, 101, 108, 110, 113, 117, 154, 155, 157, 159, 160, 165, 166, 174, 175, 179, 180, 186, 188, 195, 197, 198, 200, 201, 202, 203, 204, 207, 208, 210, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 244, 247, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 270, 277, 278, 279, 282, 284, 285, 289, 291, 295, 296, 297, 298, 300, 301, 302, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 342, 343, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 407, 408, 409, 415, 416, 417, 421, 422, 423, 436], "manipul": [4, 83, 113, 177, 179, 435], "look": 4, "step": [4, 175, 180], "our": [4, 41], "simpl": [4, 32, 44, 62, 64, 78, 81, 92, 160], "smooth": [4, 66, 95, 179, 180], "save": [4, 15, 55, 62, 436], "result": [4, 9, 29, 32, 50, 53, 80, 81, 116, 157, 158, 159, 160], "numer": [5, 167], "python": [5, 178], "intro": 6, "glm": [6, 33, 60, 64, 67, 74, 113, 170, 171, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 424], "singl": [6, 15, 55, 71], "session": [6, 33, 64, 71], "subject": [6, 51, 53, 55, 62, 71, 79, 154, 159, 180], "The": [6, 35, 56, 66, 86, 160, 166, 180], "specifi": 6, "experiment": [6, 78, 110, 113, 185, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "paradigm": [6, 78, 107], "perform": [6, 55, 61, 69, 81, 98, 160, 162, 163], "detect": 6, "voxel": [6, 42, 43, 55, 75, 94, 165, 172, 179], "signific": [6, 70], "effect": [6, 67], "threshold": [6, 62, 172], "z": [6, 55, 107], "map": [6, 9, 12, 16, 17, 21, 30, 40, 42, 43, 47, 48, 55, 88, 94, 100, 103, 107, 117, 158, 160, 162, 166, 172, 182, 436], "an": [6, 9, 44, 58, 65, 72, 86, 90, 93, 95, 159, 160, 168, 170, 436], "f": [6, 36, 70], "test": [6, 70, 79, 80, 81, 94, 98, 168], "comput": [7, 27, 34, 35, 36, 37, 45, 50, 52, 53, 56, 58, 59, 73, 82, 89, 94, 96, 107, 109, 112, 116, 154, 155, 158, 169, 179, 180], "time": [7, 11, 23, 25, 27, 45, 52, 54, 55, 58, 59, 61, 66, 70, 73, 82, 89, 96, 109, 112, 155, 167, 169, 175, 180, 434], "brain": [8, 13, 14, 16, 19, 25, 28, 40, 42, 47, 48, 49, 50, 51, 56, 58, 83, 91, 97, 99, 113, 155, 157, 158, 159, 164, 177, 179, 428, 431, 436], "make": [9, 16, 32, 168, 176], "surfac": [9, 22, 23, 24, 37, 69, 108, 111, 169, 185, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 421, 422, 423, 435, 436], "statist": [9, 16, 62, 81, 88, 94, 97, 107, 113, 117, 170, 172, 182, 436], "get": [9, 24, 55, 70, 103, 168], "cortic": [9, 22, 37, 436], "mesh": [9, 24, 261, 436], "sampl": [9, 24, 68, 79, 80], "around": [9, 51, 58], "each": [9, 33], "node": 9, "interact": [9, 16, 154, 155, 431, 436], "plotli": 9, "comparison": [9, 162, 170, 172], "atla": [9, 10, 20, 21, 22, 47, 51, 52, 54, 56, 58, 86, 87, 99, 111, 155, 168], "choos": [9, 100, 160, 161], "region": [9, 50, 51, 53, 54, 61, 86, 87, 88, 91, 94, 155, 157, 158, 180, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 432], "outlin": 9, "displai": [9, 14, 15, 52, 53, 54, 56, 58, 79, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 431, 436], "interest": [9, 94], "top": 9, "higher": [9, 66], "resolut": [9, 179, 180], "multipl": [9, 15, 154, 170, 172, 180], "view": [9, 15], "web": [9, 22, 52, 54, 58], "browser": [9, 22, 52, 54, 58], "impact": [9, 56], "paramet": [9, 34, 61, 63, 64, 66, 67, 68, 69, 86, 98, 100, 154, 161, 163, 180], "harvard": 10, "oxford": 10, "juelich": 10, "contour": [10, 14, 436], "global": [11, 56], "pattern": [11, 44], "carpet": 11, "fetch": [11, 20, 25, 26, 33, 47, 50, 53, 62, 76, 79, 80, 101, 107, 108, 158, 178, 182], "adhd": [11, 61], "deriv": [11, 48, 66, 182], "mask": [11, 16, 18, 25, 32, 36, 41, 66, 89, 94, 98, 103, 116, 160, 163, 165, 179, 180, 334, 335, 336, 337, 338, 339, 340, 341, 342, 429], "over": [11, 47], "base": [11, 23, 32, 37, 42, 43, 56, 69, 75, 100, 108, 158, 169, 172], "separ": [11, 86], "tissu": 11, "type": 11, "matplotlib": [12, 34], "colormap": [12, 436], "color": 12, "glass": [13, 14, 16], "whole": 13, "sagitt": [13, 15], "cut": [13, 15], "black": 13, "background": [13, 17, 89], "hemispher": [13, 14, 69], "option": 14, "demo": [14, 111], "differ": [14, 30, 32, 34, 35, 44, 47, 86, 154, 161, 180, 436], "project": [14, 26, 69, 168, 176], "left": [14, 69], "right": [14, 15, 100, 161], "fill": [14, 436], "both": 14, "more": [15, 17, 163], "tool": [15, 16], "we": [15, 32, 35, 41, 168], "provid": [15, 16], "gener": [15, 16, 33, 44, 61, 62, 64, 72, 75, 77, 103, 114, 182, 424], "purpos": [15, 16], "coron": 15, "axial": 15, "given": [15, 179], "coordin": [15, 47, 58, 155], "number": [15, 167], "5": [15, 17, 131, 138, 139, 140, 153], "onli": [15, 50, 180], "two": [15, 64, 71, 80, 161], "slice": [15, 44, 436], "without": [15, 56, 98, 160, 163], "colorbar": 15, "side": 15, "chang": [15, 17, 66, 98, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 147, 148, 149, 150, 151, 153, 180], "now": [15, 35, 52, 54], "ar": [15, 66], "three": [15, 100], "2x2": 15, "fashion": 15, "along": 15, "row": 15, "column": 15, "anoth": [15, 179], "wai": 15, "limit": 15, "demonstr": 15, "variou": 15, "show": [15, 38, 100, 398], "how": [15, 168, 176, 180], "add_edg": 15, "add_contour": 15, "seed": [15, 23, 55, 58, 61, 168, 180], "add_mark": 15, "annot": [15, 117], "function": [16, 19, 23, 41, 44, 46, 47, 50, 51, 54, 68, 99, 100, 113, 154, 155, 156, 158, 159, 163, 165, 168, 179, 181, 182, 433, 436], "plot_stat_map": [16, 20, 393], "view_img": [16, 400], "plot_glass_brain": [16, 385], "anatom": 16, "plot_anat": [16, 378], "roi": [16, 32, 51, 94, 179], "here": [16, 41], "plot_roi": [16, 392], "epi": [16, 89], "plot_epi": [16, 383], "control": [17, 163, 180], "contrast": [17, 61, 62, 66, 69, 70, 169, 270], "when": [17, 178], "local": [17, 72, 105, 106], "enhanc": [17, 123, 124, 125, 126, 128, 132, 133, 134, 135, 136, 138, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 168], "dim": 17, "0": [17, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153], "decreas": [17, 178], "1": [17, 66, 118, 119, 120, 121, 122, 124, 127, 131, 134, 136, 139, 142, 145, 147, 149, 153], "multiscal": 19, "parcel": [19, 47, 49, 56, 155, 157, 158, 405], "group": [19, 48, 51, 53, 99, 108, 154, 167], "probabilist": [20, 21, 47, 54, 155], "default": [20, 58, 61, 87], "mode": [20, 58, 61, 86, 87, 436], "msdl": [20, 51, 99], "add_overlai": 20, "object": [20, 29, 31, 34, 62, 101, 108, 159, 178, 180], "plot_prob_atla": [20, 391], "atlas": [21, 47, 155, 168, 182, 436], "access": [21, 179], "refer": [22, 23, 47, 49, 56, 58, 100, 102, 117, 154, 155, 157, 158, 159, 161, 162, 165, 166, 175, 426], "fetcher": [22, 168], "connect": [23, 46, 47, 51, 56, 57, 86, 99, 100, 111, 113, 154, 156, 158, 181], "seri": [23, 25, 52, 54, 55, 58, 70, 89, 100, 155, 169, 180, 434], "calcul": [23, 70, 106], "technic": 24, "point": [24, 180], "illustr": 24, "scheme": 24, "build": [24, 33, 35, 40, 54, 94, 116, 155, 168, 176], "cylind": 24, "locat": 24, "which": [24, 157], "vol_to_surf": [24, 423], "would": 24, "draw": 24, "its": 24, "adjust": 24, "neuroimag": [25, 116, 161, 175, 178, 180], "appli": [25, 48, 116, 157, 179, 180], "correspond": [25, 52, 54], "megatrawl": 26, "network": [26, 50, 58, 61, 87, 159], "matric": [26, 53, 63, 100, 158, 180], "human": 26, "connectom": [26, 47, 50, 52, 53, 58, 154, 155, 181, 186, 187, 188, 189, 190, 191, 192, 193, 436], "anova": [29, 34, 98, 160, 163], "v": [29, 30, 31, 36, 102], "hous": [29, 30, 31, 36, 37, 102], "pipelin": [29, 33, 34, 111, 115, 116, 162, 163, 180], "fit": [29, 31, 33, 34, 39, 43, 62, 64, 67, 70, 101, 108, 159, 169, 172], "obtain": [29, 62, 101, 108], "via": 29, "classifi": [30, 165], "train": 30, "frem": [31, 39, 162], "chair": 31, "recognit": [31, 36, 44, 102], "confus": [31, 35], "et": [32, 38, 39, 40, 41], "al": [32, 38, 39, 40, 41], "prepar": [32, 35, 36, 41, 61, 64, 67, 69, 81, 100, 160, 165, 176, 179, 180], "bar": [32, 436], "summar": 32, "after": [33, 89], "signal": [33, 51, 53, 54, 56, 58, 91, 155, 180, 418, 419, 420, 428, 434], "proper": 33, "event": [33, 72, 169], "structur": [33, 57, 166, 168], "instanti": 33, "run": [33, 41, 44, 66, 103, 163], "firstlevelmodel": [33, 62, 101, 108, 282], "report": [33, 61, 62, 64, 75, 168, 415, 416, 417, 433], "set": [34, 161, 163, 165, 168], "respons": [34, 37, 65, 66, 68], "valu": [34, 167], "screen": 34, "percentil": 34, "nest": 34, "multi": [35, 53, 159, 161], "class": [35, 161], "strategi": [35, 56, 160, 180], "barplot": 35, "searchlight": [36, 37, 165, 254], "bold": [37, 170], "stimuli": [38, 40, 41], "jimura": 39, "mix": [39, 162], "gambl": [39, 162], "experi": [39, 116, 160], "tv": 39, "l1": 39, "spacenet": [39, 43, 166], "encod": 40, "miyawaki": [40, 41], "2008": [40, 41], "estim": [40, 44, 57, 58, 61, 62, 64, 66, 67, 69, 76, 77, 79, 80, 98, 101, 160, 161, 163, 167], "recept": 40, "field": 40, "reconstruct": 41, "Then": 41, "defin": [41, 56, 63, 68, 100], "itself": 41, "let": 41, "u": 41, "quantifi": 41, "error": 41, "morphometri": [42, 43, 75, 172], "oasi": [42, 43, 75], "vbm": [42, 43, 75], "bio": 42, "marker": [42, 436], "ag": [42, 51, 75, 99], "mass": [42, 430], "univari": [42, 102, 105, 106, 165, 430], "preprocess": [42, 116, 182, 434], "qualiti": [42, 43, 94], "infer": 42, "massiv": [42, 102, 105, 106, 165], "space": [43, 71, 154], "net": 43, "prior": 43, "simul": [44, 57, 154, 163], "creat": [44, 63, 78, 179], "exercis": [44, 154, 155, 180], "go": [44, 98, 107, 116, 163], "compar": [47, 48, 49, 85, 100, 154, 165], "yeo": [47, 86], "direct": [47, 154], "asymmetr": 47, "iter": [47, 167], "spatial": [48, 162, 166, 179], "ica": [48, 103, 159], "dictionari": [48, 50, 158, 159], "canica": [48, 159, 257], "cluster": [49, 70, 76, 157], "method": [49, 116], "ward": 49, "compress": [49, 157], "represent": [49, 157, 178], "kmean": 49, "hierarch": 49, "those": 49, "rena": [49, 406], "correl": [50, 51, 54, 55, 56, 58, 154, 155], "coeffici": 50, "specif": [50, 117, 179], "classif": [51, 99, 161], "children": 51, "partial": [51, 58], "variabl": 51, "kind": [51, 99], "most": [51, 70, 99], "power": [51, 99], "spars": [52, 53, 154, 167], "invers": [52, 53, 154, 180], "covari": [52, 53, 154, 167], "And": [52, 54], "graph": [52, 54, 58, 155], "precis": 53, "produc": 55, "fisher": 55, "transform": [55, 179, 180], "confound": [56, 66, 180], "remov": [56, 66, 180], "flexibl": 56, "fmriprep": [56, 323, 324, 427], "interfac": [56, 320, 321, 322, 323, 324, 325, 427], "motion": 56, "scrub": 56, "predefin": 56, "sphere": [58, 165], "dmn": 58, "within": 58, "averag": 58, "strength": 58, "dosenbach": 58, "": [58, 61, 98, 153, 160], "see": 58, "also": 58, "cours": 61, "complet": 62, "bid": [62, 101, 108, 320, 321, 322, 427], "openneuro": 62, "automat": [62, 101, 108, 116, 182], "argument": [62, 101, 108, 180], "output": [62, 117, 178], "disk": 62, "design": [63, 66, 77, 78, 100, 169, 180], "finit": 65, "impul": 65, "fir": 65, "understand": [66, 89, 178, 180], "drift": 66, "hemodynam": 66, "ad": [66, 168, 436], "nois": 66, "ol": 66, "order": 66, "censor": 66, "conclus": 66, "explicit": 67, "fix": [67, 121, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153], "mri": 68, "stimulu": 68, "analys": [69, 75], "residu": [70, 169], "import": [70, 437], "modul": [70, 110, 113, 185], "largest": 70, "actual": 70, "6": [70, 132, 141, 142, 143, 153], "distribut": [70, 176], "r": 70, "squar": 70, "nativ": 71, "tsv": 72, "neurospin": 72, "task": [72, 100, 105, 106], "second": [74, 76, 77, 78, 79, 80, 81, 101, 108, 113, 172], "true": 76, "posit": 76, "proport": 76, "t_map": 79, "unpair": 80, "pair": 80, "some": 81, "t": [81, 88], "affin": [84, 178, 179], "resampl": [84, 89, 93, 179, 180, 425], "mean": 85, "2": [85, 120, 125, 126, 127, 128, 129, 130, 131, 132, 137, 140, 143, 150, 153], "break": 86, "origin": 86, "relabel": 86, "min_siz": 86, "smith": 87, "niftimask": [89, 92, 180, 332], "raw": 89, "mni": 89, "templat": [89, 93, 182], "negat": 90, "math_img": [90, 311], "niftilabelsmask": [91, 180, 330], "find": [94, 165, 175], "thi": 94, "improv": 94, "advanc": [97, 98, 113, 115, 180], "tune": 98, "dummi": 98, "permut": 98, "lean": 98, "svc": 98, "discrimin": 98, "engin": 98, "beta": [100, 133, 138, 153, 160], "your": [100, 116, 168], "standard": 100, "lsa": 100, "aggreg": 100, "condit": 100, "lss": 100, "few": [100, 160], "trial": 100, "approach": [100, 154], "applic": [100, 175], "quick": 101, "saniti": 101, "check": [101, 437], "neurovault": [103, 107, 117], "term": 103, "reshap": 103, "compon": [103, 104, 159, 427], "figur": [103, 431], "multivari": [104, 184], "decomposit": [104, 184, 257, 258], "independ": 104, "motor": 105, "meta": 107, "stop": [107, 167], "success": 107, "minu": 107, "like": [107, 178], "protocol": 107, "combin": 107, "short": 111, "masker": [111, 180, 326, 327, 328, 329, 330, 331, 332, 333, 428], "surfacelabelsmask": [111, 264], "bibliographi": 114, "usag": [115, 180], "scale": [115, 436], "up": [115, 165, 168], "own": 116, "non": 116, "descript": [116, 167], "2d": [116, 179], "arrai": [116, 179], "unmask": [116, 180, 342], "inverse_transform": 116, "repositori": 117, "collect": 117, "filter": [117, 180], "neurosynth": 117, "changelog": [118, 119, 120, 121, 126, 127, 129, 153, 168], "3": [121, 129, 133, 134, 153], "4": [122, 130, 135, 136, 137, 153], "highlight": [122, 123, 125, 133, 134, 135, 138, 141, 144, 145, 146, 147, 148, 150, 151, 153], "10": [123, 124, 125, 153], "new": [123, 124, 125, 126, 128, 129, 130, 131, 138, 139, 140, 141, 144, 145, 146, 147, 148, 150, 151, 153], "1rc1": [124, 153], "bug": [126, 129, 136, 153, 168], "api": [126, 153, 175, 426], "summari": [126, 153, 154, 155, 158, 159, 169, 172], "rc": [138, 153], "alpha": [138, 153, 167], "known": [139, 153], "issu": [139, 153, 176], "0rc": [141, 153], "0b0": [141, 153], "0a0": [141, 153], "7": [144, 145, 153], "8": [146, 147, 153], "9": [148, 149, 150, 153], "11": [151, 153], "dev": [151, 153], "page": [154, 155, 158, 159, 169, 172], "full": [154, 155, 160], "rest": [154, 155, 156], "link": [154, 437], "total": 154, "tangent": 154, "maxprob": 155, "state": 156, "movi": [157, 158], "watch": [157, 158], "code": [157, 160, 162, 165, 168, 176, 179, 436], "better": [158, 166, 180], "relat": [159, 166], "interpret": 159, "altern": 159, "2001": 160, "definit": [160, 180], "made": 160, "easi": 160, "good": 160, "choic": 160, "put": 160, "togeth": 160, "dimens": 160, "reduct": 160, "final": 160, "script": 160, "regress": 161, "linear": [161, 424], "bag": 161, "sever": 161, "fast": 162, "ensembl": 162, "regular": 162, "robust": 162, "empir": 162, "increas": 162, "ani": 163, "mvpa": 164, "contain": 165, "inform": 165, "principl": [165, 167], "radiu": 165, "f_score": 165, "spm": 165, "stabil": 167, "execut": 167, "synthet": 167, "criteria": 167, "maximum": 167, "dualiti": 167, "gap": 167, "variat": 167, "norm": 167, "initi": 167, "modifi": 167, "criterion": 167, "algorithm": 167, "bound": 167, "grid": 167, "search": 167, "warm": 167, "restart": 167, "contribut": 168, "conduct": 168, "help": [168, 175], "discuss": 168, "idea": 168, "answer": 168, "question": 168, "review": 168, "pull": [168, 176], "request": [168, 176], "do": 168, "decid": 168, "goe": 168, "scope": 168, "who": 168, "decis": 168, "guidelin": 168, "pr": 168, "style": 168, "privat": 168, "pre": 168, "commit": 168, "fixtur": 168, "document": [168, 176], "environ": 168, "instal": [168, 437], "recommend": 168, "addit": 168, "case": [168, 179], "mainten": [168, 176], "hrf": 169, "primer": 170, "analyz": [171, 178], "correct": 172, "glossari": 173, "organ": 176, "close": 176, "polici": 176, "releas": [176, 437], "upload": 176, "them": 176, "pypi": 176, "deploi": 176, "post": 176, "input": 178, "name": 178, "match": [178, 179], "glob": 178, "user": [178, 438], "path": 178, "expans": 178, "open": [178, 180], "nilearn_data": 178, "where": 178, "store": 178, "format": 178, "shape": [178, 179], "memori": 178, "text": 178, "phenotyp": 178, "csv": 178, "panda": 178, "target": 179, "special": 179, "size": 179, "individu": 179, "oper": [179, 432], "concept": 180, "philosophi": 180, "custom": 180, "100": 180, "extra": 180, "cutoff": 180, "common": 180, "dtype": 180, "tempor": 180, "resiz": 180, "niftimapsmask": [180, 331], "multiniftimask": [180, 329], "multiniftilabelsmask": [180, 327], "multiniftimapsmask": [180, 328], "niftispheresmask": [180, 333], "connectivitymeasur": 186, "groupsparsecovari": 187, "groupsparsecovariancecv": 188, "cov_to_corr": 189, "group_sparse_covari": 190, "prec_to_parti": 191, "sym_matrix_to_vec": 192, "vec_to_sym_matrix": 193, "fetch_abide_pcp": 194, "fetch_adhd": 195, "fetch_atlas_a": 196, "fetch_atlas_allen_2011": 197, "fetch_atlas_basc_multiscale_2015": 198, "fetch_atlas_craddock_2012": 199, "fetch_atlas_destrieux_2009": 200, "fetch_atlas_difumo": 201, "fetch_atlas_harvard_oxford": 202, "fetch_atlas_juelich": 203, "fetch_atlas_msdl": 204, "fetch_atlas_pauli_2017": 205, "fetch_atlas_schaefer_2018": 206, "fetch_atlas_smith_2009": 207, "fetch_atlas_surf_destrieux": 208, "fetch_atlas_talairach": 209, "fetch_atlas_yeo_2011": 210, "fetch_bids_langloc_dataset": 211, "fetch_coords_dosenbach_2010": 212, "fetch_coords_power_2011": 213, "fetch_coords_seitzman_2018": 214, "fetch_development_fmri": 215, "fetch_ds000030_url": 216, "fetch_fiac_first_level": 217, "fetch_haxbi": 218, "fetch_icbm152_2009": 219, "fetch_icbm152_brain_gm_mask": 220, "fetch_language_localizer_demo_dataset": 221, "fetch_localizer_button_task": 222, "fetch_localizer_calculation_task": 223, "fetch_localizer_contrast": 224, "fetch_localizer_first_level": 225, "fetch_megatrawls_netmat": 226, "fetch_mixed_gambl": 227, "fetch_miyawaki2008": 228, "fetch_neurovault": 229, "fetch_neurovault_auditory_computation_task": 230, "fetch_neurovault_id": 231, "fetch_neurovault_motor_task": 232, "fetch_oasis_vbm": 233, "fetch_openneuro_dataset": 234, "fetch_openneuro_dataset_index": 235, "fetch_spm_auditori": 236, "fetch_spm_multimodal_fmri": 237, "fetch_surf_fsaverag": 238, "fetch_surf_nki_enhanc": 239, "get_data_dir": 240, "load_mni152_brain_mask": 241, "load_mni152_gm_mask": 242, "load_mni152_gm_templ": 243, "load_mni152_templ": 244, "load_mni152_wm_mask": 245, "load_mni152_wm_templ": 246, "load_sample_motor_activation_imag": 247, "patch_openneuro_dataset": 248, "select_from_index": 249, "decoderregressor": 251, "fremclassifi": 252, "fremregressor": 253, "spacenetclassifi": 255, "spacenetregressor": 256, "dictlearn": 258, "filemesh": 259, "inmemorymesh": 260, "polymesh": 262, "surfaceimag": 263, "surfacemask": 265, "fetch_destrieux": 266, "fetch_nki": 267, "load_fsaverag": 268, "armodel": 269, "fcontrastresult": 271, "likelihoodmodelresult": 272, "olsmodel": 273, "regressionresult": 274, "simpleregressionresult": 275, "tcontrastresult": 276, "cluster_level_infer": 277, "compute_contrast": 278, "compute_fixed_effect": 279, "expression_to_contrast_vector": 280, "fdr_threshold": 281, "first_level": [282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 424], "check_design_matrix": 283, "compute_regressor": 284, "first_level_from_bid": 285, "glover_dispersion_deriv": 286, "glover_hrf": 287, "glover_time_deriv": 288, "make_first_level_design_matrix": 289, "mean_scal": 290, "run_glm": 291, "spm_dispersion_deriv": 292, "spm_hrf": 293, "spm_time_deriv": 294, "second_level": [295, 296, 297, 424], "secondlevelmodel": 295, "make_second_level_design_matrix": 296, "non_parametric_infer": 297, "threshold_stats_img": 298, "binarize_img": 299, "clean_img": 300, "concat_img": 301, "coord_transform": 302, "copy_img": 303, "crop_img": 304, "get_data": 305, "high_variance_confound": [306, 420], "index_img": 307, "iter_img": 308, "largest_connected_component_img": 309, "load_img": 310, "mean_img": 312, "new_img_lik": 313, "reorder_img": 314, "resample_img": 315, "resample_to_img": 316, "smooth_img": 317, "swap_img_hemispher": 318, "threshold_img": 319, "get_bids_fil": 320, "parse_bids_filenam": 321, "save_glm_to_bid": 322, "load_confound": 323, "load_confounds_strategi": 324, "fsl": [325, 427], "get_design_from_fslmat": 325, "basemask": 326, "apply_mask": 334, "compute_background_mask": 335, "compute_brain_mask": 336, "compute_epi_mask": 337, "compute_multi_background_mask": 338, "compute_multi_brain_mask": 339, "compute_multi_epi_mask": 340, "intersect_mask": 341, "mass_univari": [343, 430], "permuted_ol": 343, "baseax": 344, "baseslic": 345, "cutax": 346, "glassbrainax": 347, "lprojector": 348, "lrprojector": 349, "lyrprojector": 350, "lyrzprojector": 351, "lzrprojector": 352, "lzryprojector": 353, "mosaicslic": 354, "orthoprojector": 355, "orthoslic": 356, "plotlysurfacefigur": 357, "rprojector": 358, "tiledslic": 359, "xprojector": 360, "xslicer": 361, "xzprojector": 362, "xzslicer": 363, "yprojector": 364, "yslicer": 365, "yxprojector": 366, "yxslicer": 367, "yzprojector": 368, "yzslicer": 369, "zprojector": 370, "zslicer": 371, "get_projector": 372, "get_slic": 373, "find_cut_slic": 374, "find_parcellation_cut_coord": 375, "find_probabilistic_atlas_cut_coord": 376, "find_xyz_cut_coord": 377, "plot_carpet": 379, "plot_connectom": 380, "plot_contrast_matrix": 381, "plot_design_matrix": 382, "plot_ev": 384, "plot_img": 386, "plot_img_comparison": 387, "plot_img_on_surf": 388, "plot_mark": 389, "plot_matrix": 390, "plot_surf": 394, "plot_surf_contour": 395, "plot_surf_roi": 396, "plot_surf_stat_map": [397, 436], "view_connectom": 399, "view_img_on_surf": [401, 436], "view_mark": 402, "view_surf": [403, 436], "hierarchicalkmean": 404, "regionextractor": 407, "connected_label_region": 408, "connected_region": 409, "img_to_signals_label": 410, "img_to_signals_map": 411, "recursive_neighbor_agglomer": 412, "signals_to_img_label": 413, "signals_to_img_map": 414, "htmlreport": 415, "get_clusters_t": 416, "make_glm_report": 417, "butterworth": 418, "clean": 419, "load_surf_data": 421, "load_surf_mesh": 422, "process": 425, "util": [425, 429], "avail": 436, "overlai": 436, "edg": 436, "quickstart": 437, "latest": 437, "version": 437, "drop": 437, "hour": 437, "depend": 437, "guid": 438, "tabl": 438, "content": 438}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9, "sphinx": 60}, "alltitles": {"Team": [[0, "team"]], "Core developers": [[0, "core-developers"]], "Other contributors": [[0, "other-contributors"]], "Funding": [[0, "funding"]], "Citing nilearn": [[0, "citing-nilearn"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Basic tutorials": [[1, "basic-tutorials"], [113, "basic-tutorials"]], "3D and 4D niimgs: handling and visualizing": [[2, "d-and-4d-niimgs-handling-and-visualizing"]], "Downloading tutorial datasets from Internet": [[2, "downloading-tutorial-datasets-from-internet"]], "Visualizing a 3D file": [[2, "visualizing-a-3d-file"]], "Visualizing one volume in a 4D file": [[2, "visualizing-one-volume-in-a-4d-file"]], "Looping on all volumes in a 4D file": [[2, "looping-on-all-volumes-in-a-4d-file"]], "Looping through selected volumes in a 4D file": [[2, "looping-through-selected-volumes-in-a-4d-file"]], "A introduction tutorial to fMRI decoding": [[3, "a-introduction-tutorial-to-fmri-decoding"]], "Retrieve and load the fMRI data from the Haxby study": [[3, "retrieve-and-load-the-fmri-data-from-the-haxby-study"], [98, "retrieve-and-load-the-fmri-data-from-the-haxby-study"]], "First download the data": [[3, "first-download-the-data"], [98, "first-download-the-data"]], "Visualizing the fMRI volume": [[3, "visualizing-the-fmri-volume"]], "Feature extraction: from fMRI volumes to a data matrix": [[3, "feature-extraction-from-fmri-volumes-to-a-data-matrix"]], "Load the behavioral labels": [[3, "load-the-behavioral-labels"]], "Restrict the analysis to cats and faces": [[3, "restrict-the-analysis-to-cats-and-faces"]], "Decoding with Support Vector Machine": [[3, "decoding-with-support-vector-machine"]], "Measuring prediction scores using cross-validation": [[3, "measuring-prediction-scores-using-cross-validation"]], "Manually leaving out data": [[3, "manually-leaving-out-data"]], "Implementing a KFold loop": [[3, "implementing-a-kfold-loop"]], "Cross-validation with the decoder": [[3, "cross-validation-with-the-decoder"]], "Inspecting the model weights": [[3, "inspecting-the-model-weights"]], "Turning the weights into a nifti image": [[3, "turning-the-weights-into-a-nifti-image"]], "Plotting the SVM weights": [[3, "plotting-the-svm-weights"]], "What is the chance level accuracy?": [[3, "what-is-the-chance-level-accuracy"]], "Further reading": [[3, "further-reading"]], "Basic nilearn example: manipulating and looking at data": [[4, "basic-nilearn-example-manipulating-and-looking-at-data"]], "A first step: looking at our data": [[4, "a-first-step-looking-at-our-data"]], "Simple image manipulation: smoothing": [[4, "simple-image-manipulation-smoothing"]], "Saving results to a file": [[4, "saving-results-to-a-file"]], "Basic numerics and plotting with Python": [[5, "basic-numerics-and-plotting-with-python"]], "Intro to GLM Analysis: a single-session, single-subject fMRI dataset": [[6, "intro-to-glm-analysis-a-single-session-single-subject-fmri-dataset"]], "The data": [[6, "the-data"]], "Retrieving the data": [[6, "retrieving-the-data"], [23, "retrieving-the-data"], [66, "retrieving-the-data"]], "Specifying the experimental paradigm": [[6, "specifying-the-experimental-paradigm"]], "Performing the GLM analysis": [[6, "performing-the-glm-analysis"]], "Detecting voxels with significant effects": [[6, "detecting-voxels-with-significant-effects"]], "Plot thresholded z scores map": [[6, "plot-thresholded-z-scores-map"]], "Performing an F-test": [[6, "performing-an-f-test"]], "Computation times": [[7, "computation-times"], [27, "computation-times"], [45, "computation-times"], [59, "computation-times"], [73, "computation-times"], [82, "computation-times"], [96, "computation-times"], [109, "computation-times"], [112, "computation-times"]], "Visualization of brain images": [[8, "visualization-of-brain-images"], [113, "visualization-of-brain-images"]], "Making a surface plot of a 3D statistical map": [[9, "making-a-surface-plot-of-a-3d-statistical-map"]], "Get a statistical map": [[9, "get-a-statistical-map"]], "Get a cortical mesh": [[9, "get-a-cortical-mesh"]], "Sample the 3D data around each node of the mesh": [[9, "sample-the-3d-data-around-each-node-of-the-mesh"]], "Plot the result": [[9, "plot-the-result"]], "Interactive plotting with Plotly": [[9, "interactive-plotting-with-plotly"]], "Plot 3D image for comparison": [[9, "plot-3d-image-for-comparison"]], "Use an atlas and choose regions to outline": [[9, "use-an-atlas-and-choose-regions-to-outline"]], "Display outlines of the regions of interest on top of a statistical map": [[9, "display-outlines-of-the-regions-of-interest-on-top-of-a-statistical-map"]], "Plot with higher-resolution mesh": [[9, "plot-with-higher-resolution-mesh"]], "Plot multiple views of the 3D volume on a surface": [[9, "plot-multiple-views-of-the-3d-volume-on-a-surface"]], "3D visualization in a web browser": [[9, "d-visualization-in-a-web-browser"], [22, "d-visualization-in-a-web-browser"], [52, "d-visualization-in-a-web-browser"], [54, "d-visualization-in-a-web-browser"], [58, "d-visualization-in-a-web-browser"]], "Impact of plot parameters on visualization": [[9, "impact-of-plot-parameters-on-visualization"]], "Basic Atlas plotting": [[10, "basic-atlas-plotting"]], "Retrieving the atlas data": [[10, "retrieving-the-atlas-data"]], "Visualizing the Harvard-Oxford atlas": [[10, "visualizing-the-harvard-oxford-atlas"]], "Visualizing the Juelich atlas": [[10, "visualizing-the-juelich-atlas"]], "Visualizing the Harvard-Oxford atlas with contours": [[10, "visualizing-the-harvard-oxford-atlas-with-contours"]], "Visualizing the Juelich atlas with contours": [[10, "visualizing-the-juelich-atlas-with-contours"]], "Visualizing global patterns with a carpet plot": [[11, "visualizing-global-patterns-with-a-carpet-plot"]], "Fetching data from ADHD dataset": [[11, "fetching-data-from-adhd-dataset"]], "Deriving a mask": [[11, "deriving-a-mask"]], "Visualizing global patterns over time": [[11, "visualizing-global-patterns-over-time"]], "Deriving a label-based mask": [[11, "deriving-a-label-based-mask"]], "Visualizing global patterns, separated by tissue type": [[11, "visualizing-global-patterns-separated-by-tissue-type"]], "Matplotlib colormaps in Nilearn": [[12, "matplotlib-colormaps-in-nilearn"]], "Plot color maps": [[12, "plot-color-maps"]], "Plot matplotlib color maps": [[12, "plot-matplotlib-color-maps"]], "Glass brain plotting in nilearn": [[13, "glass-brain-plotting-in-nilearn"]], "Load data": [[13, "load-data"]], "Glass brain plotting: whole brain sagittal cuts": [[13, "glass-brain-plotting-whole-brain-sagittal-cuts"]], "Glass brain plotting: black background": [[13, "glass-brain-plotting-black-background"]], "Glass brain plotting: Hemispheric sagittal cuts": [[13, "glass-brain-plotting-hemispheric-sagittal-cuts"]], "Glass brain plotting in nilearn (all options)": [[14, "glass-brain-plotting-in-nilearn-all-options"]], "Load the data": [[14, "load-the-data"]], "Demo glass brain plotting": [[14, "demo-glass-brain-plotting"]], "Different projections for the left and right hemispheres": [[14, "different-projections-for-the-left-and-right-hemispheres"]], "Demo glass brain plotting with contours and with fillings": [[14, "demo-glass-brain-plotting-with-contours-and-with-fillings"]], "Display contour projections in both hemispheres": [[14, "display-contour-projections-in-both-hemispheres"]], "More plotting tools from nilearn": [[15, "more-plotting-tools-from-nilearn"]], "First, we retrieve data from nilearn provided (general-purpose) datasets": [[15, "first-we-retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Visualizing in - \u2018sagittal\u2019, \u2018coronal\u2019 and \u2018axial\u2019 with given coordinates": [[15, "visualizing-in-sagittal-coronal-and-axial-with-given-coordinates"]], "Visualizing in - single view \u2018axial\u2019 with number of cuts=5": [[15, "visualizing-in-single-view-axial-with-number-of-cuts-5"]], "Visualizing in - single view \u2018sagittal\u2019 with only two slices": [[15, "visualizing-in-single-view-sagittal-with-only-two-slices"]], "Visualizing in - \u2018coronal\u2019 view with single cut": [[15, "visualizing-in-coronal-view-with-single-cut"]], "Visualizing without a colorbar on the right side": [[15, "visualizing-without-a-colorbar-on-the-right-side"]], "Visualize in - two views \u2018sagittal\u2019 and \u2018axial\u2019 with given coordinates": [[15, "visualize-in-two-views-sagittal-and-axial-with-given-coordinates"]], "Changing the views to \u2018coronal\u2019, \u2018sagittal\u2019 views with coordinates": [[15, "changing-the-views-to-coronal-sagittal-views-with-coordinates"]], "Now, views are changed to \u2018coronal\u2019 and \u2018axial\u2019 views with coordinates": [[15, "now-views-are-changed-to-coronal-and-axial-views-with-coordinates"]], "Visualizing three views in 2x2 fashion": [[15, "visualizing-three-views-in-2x2-fashion"]], "Visualizing three views along multiple rows and columns": [[15, "visualizing-three-views-along-multiple-rows-and-columns"]], "Now, changing the number of slices along columns": [[15, "now-changing-the-number-of-slices-along-columns"]], "Now, another way of limiting the number of slices along rows and columns": [[15, "now-another-way-of-limiting-the-number-of-slices-along-rows-and-columns"]], "Demonstrating various display features": [[15, "demonstrating-various-display-features"]], "Showing how to use add_edges": [[15, "showing-how-to-use-add-edges"]], "How to use add_contours": [[15, "how-to-use-add-contours"]], "Plotting seeds using add_markers": [[15, "plotting-seeds-using-add-markers"]], "Annotating plots": [[15, "annotating-plots"]], "Saving plots to file": [[15, "saving-plots-to-file"]], "Plotting tools in nilearn": [[16, "plotting-tools-in-nilearn"]], "Retrieve data from nilearn provided (general-purpose) datasets": [[16, "retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Plotting statistical maps with function plot_stat_map": [[16, "plotting-statistical-maps-with-function-plot-stat-map"]], "Making interactive visualizations with function view_img": [[16, "making-interactive-visualizations-with-function-view-img"]], "Plotting statistical maps in a glass brain with function plot_glass_brain": [[16, "plotting-statistical-maps-in-a-glass-brain-with-function-plot-glass-brain"]], "Plotting anatomical images with function plot_anat": [[16, "plotting-anatomical-images-with-function-plot-anat"]], "Plotting ROIs (here the mask) with function plot_roi": [[16, "plotting-rois-here-the-mask-with-function-plot-roi"]], "Plotting EPI image with function plot_epi": [[16, "plotting-epi-image-with-function-plot-epi"]], "Controlling the contrast of the background when plotting": [[17, "controlling-the-contrast-of-the-background-when-plotting"]], "Retrieve the data: the localizer dataset with contrast maps": [[17, "retrieve-the-data-the-localizer-dataset-with-contrast-maps"]], "Plotting with enhancement of background image with dim=-.5": [[17, "plotting-with-enhancement-of-background-image-with-dim-5"]], "Plotting with no change of contrast in background image with dim=0": [[17, "plotting-with-no-change-of-contrast-in-background-image-with-dim-0"]], "Plotting with decrease of contrast in background image with dim=.5": [[17, "plotting-with-decrease-of-contrast-in-background-image-with-dim-5"]], "Plotting with more decrease in contrast with dim=1": [[17, "plotting-with-more-decrease-in-contrast-with-dim-1"]], "Plot Haxby masks": [[18, "plot-haxby-masks"]], "Load Haxby dataset": [[18, "load-haxby-dataset"], [36, "load-haxby-dataset"], [37, "load-haxby-dataset"]], "Plot the masks": [[18, "plot-the-masks"]], "Visualizing multiscale functional brain parcellations": [[19, "visualizing-multiscale-functional-brain-parcellations"]], "Retrieving multiscale group brain parcellations": [[19, "retrieving-multiscale-group-brain-parcellations"]], "Visualizing brain parcellations": [[19, "visualizing-brain-parcellations"]], "Visualizing a probabilistic atlas: the default mode in the MSDL atlas": [[20, "visualizing-a-probabilistic-atlas-the-default-mode-in-the-msdl-atlas"]], "Fetching Probabilistic atlas - MSDL atlas": [[20, "fetching-probabilistic-atlas-msdl-atlas"]], "Visualizing a probabilistic atlas with plot_stat_map and add_overlay object": [[20, "visualizing-a-probabilistic-atlas-with-plot-stat-map-and-add-overlay-object"]], "Visualizing a probabilistic atlas with plot_prob_atlas": [[20, "visualizing-a-probabilistic-atlas-with-plot-prob-atlas"]], "Visualizing 4D probabilistic atlas maps": [[21, "visualizing-4d-probabilistic-atlas-maps"]], "Other probabilistic atlases accessible with nilearn": [[21, "other-probabilistic-atlases-accessible-with-nilearn"]], "Loading and plotting of a cortical surface atlas": [[22, "loading-and-plotting-of-a-cortical-surface-atlas"]], "References": [[22, "references"], [23, "references"], [49, "references"], [49, "id1"], [56, "references"], [58, "references"], [100, "references"], [102, "references"], [117, "references"], [154, null], [155, null], [155, null], [158, null], [159, null], [159, null], [161, "references"], [162, "references"], [165, "references"], [166, "references"]], "Data fetcher": [[22, "data-fetcher"]], "Visualization": [[22, "visualization"], [25, "visualization"], [26, "visualization"], [30, "visualization"], [36, "visualization"], [37, "visualization"], [42, "visualization"], [165, "visualization"]], "Seed-based connectivity on the surface": [[23, "seed-based-connectivity-on-the-surface"]], "Extracting the seed time series": [[23, "extracting-the-seed-time-series"]], "Calculating seed-based functional connectivity": [[23, "calculating-seed-based-functional-connectivity"]], "Technical point: Illustration of the volume to surface sampling schemes": [[24, "technical-point-illustration-of-the-volume-to-surface-sampling-schemes"]], "Build a mesh (of a cylinder)": [[24, "build-a-mesh-of-a-cylinder"]], "Get the locations from which vol_to_surf would draw its samples": [[24, "get-the-locations-from-which-vol-to-surf-would-draw-its-samples"]], "Plot the mesh and the sample locations": [[24, "plot-the-mesh-and-the-sample-locations"]], "Adjust the sample locations": [[24, "adjust-the-sample-locations"]], "NeuroImaging volumes visualization": [[25, "neuroimaging-volumes-visualization"]], "Fetch data": [[25, "fetch-data"]], "Extracting a brain mask": [[25, "extracting-a-brain-mask"], [179, "extracting-a-brain-mask"]], "Applying the mask to extract the corresponding time series": [[25, "applying-the-mask-to-extract-the-corresponding-time-series"]], "Visualizing Megatrawls Network Matrices from Human Connectome Project": [[26, "visualizing-megatrawls-network-matrices-from-human-connectome-project"]], "Fetching the Megatrawls Network matrices": [[26, "fetching-the-megatrawls-network-matrices"]], "Decoding and predicting from brain images": [[28, "decoding-and-predicting-from-brain-images"], [113, "decoding-and-predicting-from-brain-images"]], "Decoding with ANOVA + SVM: face vs house in the Haxby dataset": [[29, "decoding-with-anova-svm-face-vs-house-in-the-haxby-dataset"]], "Retrieve the files of the Haxby dataset": [[29, "retrieve-the-files-of-the-haxby-dataset"]], "Load the behavioral data": [[29, "load-the-behavioral-data"], [33, "load-the-behavioral-data"]], "ANOVA pipeline with nilearn.decoding.Decoder object": [[29, "anova-pipeline-with-nilearn-decoding-decoder-object"], [34, "anova-pipeline-with-nilearn-decoding-decoder-object"]], "Fit the decoder and predict": [[29, "fit-the-decoder-and-predict"]], "Obtain prediction scores via cross validation": [[29, "obtain-prediction-scores-via-cross-validation"]], "Visualize the results": [[29, "visualize-the-results"], [81, "visualize-the-results"]], "Different classifiers in decoding the Haxby dataset": [[30, "different-classifiers-in-decoding-the-haxby-dataset"]], "Loading the data": [[30, "loading-the-data"], [40, "loading-the-data"], [94, "loading-the-data"]], "Training the decoder": [[30, "training-the-decoder"]], "Visualizing the face vs house map": [[30, "visualizing-the-face-vs-house-map"]], "Decoding with FREM: face vs house vs chair object recognition": [[31, "decoding-with-frem-face-vs-house-vs-chair-object-recognition"]], "Load the Haxby dataset": [[31, "load-the-haxby-dataset"], [34, "load-the-haxby-dataset"]], "Fit FREM": [[31, "fit-frem"], [39, "fit-frem"]], "Plot confusion matrix": [[31, "plot-confusion-matrix"]], "Visualization of FREM weights": [[31, "visualization-of-frem-weights"]], "ROI-based decoding analysis in Haxby et al. dataset": [[32, "roi-based-decoding-analysis-in-haxby-et-al-dataset"]], "Load and prepare the data": [[32, "load-and-prepare-the-data"]], "Decoding on the different masks": [[32, "decoding-on-the-different-masks"]], "We make a simple bar plot to summarize the results": [[32, "we-make-a-simple-bar-plot-to-summarize-the-results"]], "Decoding of a dataset after GLM fit for signal extraction": [[33, "decoding-of-a-dataset-after-glm-fit-for-signal-extraction"]], "Fetch example Haxby dataset": [[33, "fetch-example-haxby-dataset"]], "Build a proper event structure for each session": [[33, "build-a-proper-event-structure-for-each-session"]], "Instantiate and run FirstLevelModel": [[33, "instantiate-and-run-firstlevelmodel"]], "Run the GLM on data from each session": [[33, "run-the-glm-on-data-from-each-session"]], "Generating a report": [[33, "generating-a-report"], [61, "generating-a-report"], [62, "generating-a-report"], [64, "generating-a-report"], [75, "generating-a-report"]], "Build the decoding pipeline": [[33, "build-the-decoding-pipeline"]], "Setting a parameter by cross-validation": [[34, "setting-a-parameter-by-cross-validation"]], "Fit the Decoder and predict the responses": [[34, "fit-the-decoder-and-predict-the-responses"]], "Compute prediction scores with different values of screening percentile": [[34, "compute-prediction-scores-with-different-values-of-screening-percentile"]], "Nested cross-validation": [[34, "nested-cross-validation"]], "Plot the prediction scores using matplotlib": [[34, "plot-the-prediction-scores-using-matplotlib"]], "The haxby dataset: different multi-class strategies": [[35, "the-haxby-dataset-different-multi-class-strategies"]], "Load the Haxby data dataset": [[35, "load-the-haxby-data-dataset"]], "Prepare the fMRI data": [[35, "prepare-the-fmri-data"]], "Build the decoders, using scikit-learn": [[35, "build-the-decoders-using-scikit-learn"]], "Now we compute cross-validation scores": [[35, "now-we-compute-cross-validation-scores"]], "Plot barplots of the prediction scores": [[35, "plot-barplots-of-the-prediction-scores"]], "Plot a confusion matrix": [[35, "plot-a-confusion-matrix"]], "Searchlight analysis of face vs house recognition": [[36, "searchlight-analysis-of-face-vs-house-recognition"]], "Restrict to faces and houses": [[36, "restrict-to-faces-and-houses"], [37, "restrict-to-faces-and-houses"]], "Prepare masks": [[36, "prepare-masks"]], "Searchlight computation": [[36, "searchlight-computation"], [37, "searchlight-computation"]], "F-scores computation": [[36, "f-scores-computation"]], "Cortical surface-based searchlight decoding": [[37, "cortical-surface-based-searchlight-decoding"]], "Surface BOLD response": [[37, "surface-bold-response"]], "Show stimuli of Haxby et al. dataset": [[38, "show-stimuli-of-haxby-et-al-dataset"]], "FREM on Jimura et al \u201cmixed gambles\u201d dataset": [[39, "frem-on-jimura-et-al-mixed-gambles-dataset"]], "Load the data from the Jimura mixed-gamble experiment": [[39, "load-the-data-from-the-jimura-mixed-gamble-experiment"]], "Example use of TV-L1 SpaceNet": [[39, "example-use-of-tv-l1-spacenet"]], "Encoding models for visual stimuli from Miyawaki et al. 2008": [[40, "encoding-models-for-visual-stimuli-from-miyawaki-et-al-2008"]], "Building the encoding models": [[40, "building-the-encoding-models"]], "Mapping the encoding scores on the brain": [[40, "mapping-the-encoding-scores-on-the-brain"]], "Estimating receptive fields": [[40, "estimating-receptive-fields"]], "Reconstruction of visual stimuli from Miyawaki et al. 2008": [[41, "reconstruction-of-visual-stimuli-from-miyawaki-et-al-2008"]], "First we load the Miyawaki dataset": [[41, "first-we-load-the-miyawaki-dataset"]], "Then we prepare and mask the data": [[41, "then-we-prepare-and-mask-the-data"]], "We define our prediction function": [[41, "we-define-our-prediction-function"]], "Here we run the prediction: the decoding itself": [[41, "here-we-run-the-prediction-the-decoding-itself"]], "Let us quantify our prediction error": [[41, "let-us-quantify-our-prediction-error"]], "Voxel-Based Morphometry on Oasis dataset": [[42, "voxel-based-morphometry-on-oasis-dataset"]], "Predictive modeling analysis: VBM bio-markers of aging?": [[42, "predictive-modeling-analysis-vbm-bio-markers-of-aging"]], "Brain mapping with mass univariate": [[42, "brain-mapping-with-mass-univariate"]], "Load Oasis dataset": [[42, "load-oasis-dataset"], [75, "load-oasis-dataset"]], "Preprocess data": [[42, "preprocess-data"]], "Visualize the quality of predictions": [[42, "visualize-the-quality-of-predictions"]], "Inference with massively univariate model": [[42, "inference-with-massively-univariate-model"]], "Voxel-Based Morphometry on Oasis dataset with Space-Net prior": [[43, "voxel-based-morphometry-on-oasis-dataset-with-space-net-prior"]], "Load the Oasis VBM dataset": [[43, "load-the-oasis-vbm-dataset"]], "Fit the SpaceNet and predict with it": [[43, "fit-the-spacenet-and-predict-with-it"]], "Visualize the decoding maps and quality of predictions": [[43, "visualize-the-decoding-maps-and-quality-of-predictions"]], "Example of pattern recognition on simulated data": [[44, "example-of-pattern-recognition-on-simulated-data"]], "A function to generate data": [[44, "a-function-to-generate-data"]], "A simple function to plot slices": [[44, "a-simple-function-to-plot-slices"]], "Create data": [[44, "create-data"]], "Run different estimators": [[44, "run-different-estimators"]], "Run the estimators": [[44, "run-the-estimators"]], "An exercise to go further": [[44, "an-exercise-to-go-further"]], "Functional connectivity": [[46, "functional-connectivity"], [113, "functional-connectivity"]], "Comparing connectomes on different reference atlases": [[47, "comparing-connectomes-on-different-reference-atlases"]], "Load atlases": [[47, "load-atlases"]], "Load functional data": [[47, "load-functional-data"]], "Extract coordinates on Yeo atlas - parcellations": [[47, "extract-coordinates-on-yeo-atlas-parcellations"]], "Plot a directed connectome - asymmetric connectivity measure": [[47, "plot-a-directed-connectome-asymmetric-connectivity-measure"]], "Load probabilistic atlases - extracting coordinates on brain maps": [[47, "load-probabilistic-atlases-extracting-coordinates-on-brain-maps"]], "Iterate over fetched atlases to extract coordinates - probabilistic": [[47, "iterate-over-fetched-atlases-to-extract-coordinates-probabilistic"]], "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning": [[48, "deriving-spatial-maps-from-group-fmri-data-using-ica-and-dictionary-learning"]], "Load brain development fMRI dataset": [[48, "load-brain-development-fmri-dataset"]], "Apply CanICA on the data": [[48, "apply-canica-on-the-data"]], "Compare CanICA to dictionary learning": [[48, "compare-canica-to-dictionary-learning"]], "Clustering methods to learn a brain parcellation from fMRI": [[49, "clustering-methods-to-learn-a-brain-parcellation-from-fmri"]], "Download a brain development fMRI dataset and turn it to a data matrix": [[49, "download-a-brain-development-fmri-dataset-and-turn-it-to-a-data-matrix"]], "Brain parcellations with Ward Clustering": [[49, "brain-parcellations-with-ward-clustering"]], "Visualize: Brain parcellations (Ward)": [[49, "visualize-brain-parcellations-ward"]], "Compressed representation of Ward clustering": [[49, "compressed-representation-of-ward-clustering"]], "Brain parcellations with KMeans Clustering": [[49, "brain-parcellations-with-kmeans-clustering"]], "Visualize: Brain parcellations (KMeans)": [[49, "visualize-brain-parcellations-kmeans"]], "Brain parcellations with Hierarchical KMeans Clustering": [[49, "brain-parcellations-with-hierarchical-kmeans-clustering"]], "Visualize: Brain parcellations (Hierarchical KMeans)": [[49, "visualize-brain-parcellations-hierarchical-kmeans"]], "Compare Hierarchical Kmeans clusters with those from Kmeans": [[49, "compare-hierarchical-kmeans-clusters-with-those-from-kmeans"]], "Brain parcellations with ReNA Clustering": [[49, "brain-parcellations-with-rena-clustering"]], "Visualize: Brain parcellations (ReNA)": [[49, "visualize-brain-parcellations-rena"]], "Compressed representation of ReNA clustering": [[49, "compressed-representation-of-rena-clustering"]], "Regions extraction using dictionary learning and functional connectomes": [[50, "regions-extraction-using-dictionary-learning-and-functional-connectomes"]], "Fetch brain development functional datasets": [[50, "fetch-brain-development-functional-datasets"]], "Extract functional networks with Dictionary learning": [[50, "extract-functional-networks-with-dictionary-learning"]], "Extract regions from networks": [[50, "extract-regions-from-networks"]], "Compute correlation coefficients": [[50, "compute-correlation-coefficients"]], "Plot resulting connectomes": [[50, "plot-resulting-connectomes"]], "Plot regions extracted for only one specific network": [[50, "plot-regions-extracted-for-only-one-specific-network"]], "Classification of age groups using functional connectivity": [[51, "classification-of-age-groups-using-functional-connectivity"]], "Load brain development fMRI dataset and MSDL atlas": [[51, "load-brain-development-fmri-dataset-and-msdl-atlas"], [99, "load-brain-development-fmri-dataset-and-msdl-atlas"]], "Region signals extraction": [[51, "region-signals-extraction"]], "ROI-to-ROI correlations of children": [[51, "roi-to-roi-correlations-of-children"]], "Studying partial correlations": [[51, "studying-partial-correlations"]], "Extract subjects variabilities around a group connectivity": [[51, "extract-subjects-variabilities-around-a-group-connectivity"]], "What kind of connectivity is most powerful for classification?": [[51, "what-kind-of-connectivity-is-most-powerful-for-classification"], [99, "what-kind-of-connectivity-is-most-powerful-for-classification"]], "Computing a connectome with sparse inverse covariance": [[52, "computing-a-connectome-with-sparse-inverse-covariance"]], "Retrieve the atlas and the data": [[52, "retrieve-the-atlas-and-the-data"], [54, "retrieve-the-atlas-and-the-data"], [56, "retrieve-the-atlas-and-the-data"]], "Extract time series": [[52, "extract-time-series"]], "Compute the sparse inverse covariance": [[52, "compute-the-sparse-inverse-covariance"]], "Display the connectome matrix": [[52, "display-the-connectome-matrix"]], "And now display the corresponding graph": [[52, "and-now-display-the-corresponding-graph"], [52, "id1"], [54, "and-now-display-the-corresponding-graph"]], "Display the sparse inverse covariance": [[52, "display-the-sparse-inverse-covariance"]], "Group Sparse inverse covariance for multi-subject connectome": [[53, "group-sparse-inverse-covariance-for-multi-subject-connectome"]], "Fetching datasets": [[53, "fetching-datasets"]], "Extracting region signals": [[53, "extracting-region-signals"]], "Computing group-sparse precision matrices": [[53, "computing-group-sparse-precision-matrices"]], "Displaying results": [[53, "displaying-results"]], "Extracting signals of a probabilistic atlas of functional regions": [[54, "extracting-signals-of-a-probabilistic-atlas-of-functional-regions"]], "Extract the time series": [[54, "extract-the-time-series"]], "Build and display a correlation matrix": [[54, "build-and-display-a-correlation-matrix"]], "Producing single subject maps of seed-to-voxel correlation": [[55, "producing-single-subject-maps-of-seed-to-voxel-correlation"]], "Getting the data": [[55, "getting-the-data"]], "Time series extraction": [[55, "time-series-extraction"]], "Performing the seed-to-voxel correlation analysis": [[55, "performing-the-seed-to-voxel-correlation-analysis"]], "Plotting the seed-to-voxel correlation map": [[55, "plotting-the-seed-to-voxel-correlation-map"]], "Fisher-z transformation and save nifti": [[55, "fisher-z-transformation-and-save-nifti"]], "Extracting signals from a brain parcellation": [[56, "extracting-signals-from-a-brain-parcellation"]], "Extract signals on a parcellation defined by labels": [[56, "extract-signals-on-a-parcellation-defined-by-labels"]], "Compute and display a correlation matrix": [[56, "compute-and-display-a-correlation-matrix"]], "Extract signals and compute a connectivity matrix without confounds removal": [[56, "extract-signals-and-compute-a-connectivity-matrix-without-confounds-removal"]], "Load confounds from file using a flexible strategy with fmriprep interface": [[56, "load-confounds-from-file-using-a-flexible-strategy-with-fmriprep-interface"]], "Motion-based scrubbing": [[56, "motion-based-scrubbing"]], "The impact of global signal removal": [[56, "the-impact-of-global-signal-removal"]], "Using predefined strategies": [[56, "using-predefined-strategies"]], "Connectivity structure estimation on simulated data": [[57, "connectivity-structure-estimation-on-simulated-data"]], "Extract signals on spheres and plot a connectome": [[58, "extract-signals-on-spheres-and-plot-a-connectome"]], "Retrieve the brain development fMRI dataset": [[58, "retrieve-the-brain-development-fmri-dataset"]], "Coordinates of Default Mode Network": [[58, "coordinates-of-default-mode-network"]], "Extracts signal from sphere around DMN seeds": [[58, "extracts-signal-from-sphere-around-dmn-seeds"]], "Display time series": [[58, "display-time-series"]], "Compute partial correlation matrix": [[58, "compute-partial-correlation-matrix"]], "Display connectome": [[58, "display-connectome"]], "Extract signals on spheres from an atlas": [[58, "extract-signals-on-spheres-from-an-atlas"]], "Compute within spheres averaged time-series": [[58, "compute-within-spheres-averaged-time-series"]], "Estimate correlations": [[58, "estimate-correlations"]], "Plot matrix, graph, and strength": [[58, "plot-matrix-graph-and-strength"]], "Connectome extracted from Dosenbach\u2019s atlas": [[58, "connectome-extracted-from-dosenbach-s-atlas"]], "See Also": [[58, "see-also"]], "GLM: First level analysis": [[60, "glm-first-level-analysis"], [113, "glm-first-level-analysis"]], "Default Mode Network extraction of ADHD dataset": [[61, "default-mode-network-extraction-of-adhd-dataset"]], "Prepare data and analysis parameters": [[61, "prepare-data-and-analysis-parameters"], [64, "prepare-data-and-analysis-parameters"], [67, "prepare-data-and-analysis-parameters"], [69, "prepare-data-and-analysis-parameters"], [100, "prepare-data-and-analysis-parameters"]], "Extract the seed region\u2019s time course": [[61, "extract-the-seed-region-s-time-course"]], "Estimate contrasts": [[61, "estimate-contrasts"], [69, "estimate-contrasts"]], "Perform first level analysis": [[61, "perform-first-level-analysis"], [69, "perform-first-level-analysis"]], "First level analysis of a complete BIDS dataset from openneuro": [[62, "first-level-analysis-of-a-complete-bids-dataset-from-openneuro"]], "Fetch openneuro BIDS dataset": [[62, "fetch-openneuro-bids-dataset"]], "Obtain FirstLevelModel objects automatically and fit arguments": [[62, "obtain-firstlevelmodel-objects-automatically-and-fit-arguments"]], "First level model estimation (one subject)": [[62, "first-level-model-estimation-one-subject"]], "Simple statistical report of thresholded contrast": [[62, "simple-statistical-report-of-thresholded-contrast"]], "Saving model outputs to disk": [[62, "saving-model-outputs-to-disk"]], "Examples of design matrices": [[63, "examples-of-design-matrices"]], "Define parameters": [[63, "define-parameters"]], "Create design matrices": [[63, "create-design-matrices"]], "Simple example of two-session fMRI model fitting": [[64, "simple-example-of-two-session-fmri-model-fitting"]], "GLM estimation": [[64, "glm-estimation"], [67, "glm-estimation"]], "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model": [[65, "analysis-of-an-fmri-dataset-with-a-finite-impule-response-fir-model"]], "Understanding parameters of the first-level model": [[66, "understanding-parameters-of-the-first-level-model"]], "Running a basic model": [[66, "running-a-basic-model"]], "A first contrast estimation and plotting": [[66, "a-first-contrast-estimation-and-plotting"]], "Changing the drift model": [[66, "changing-the-drift-model"]], "Changing the hemodynamic response model": [[66, "changing-the-hemodynamic-response-model"]], "Adding a time derivative to the design": [[66, "adding-a-time-derivative-to-the-design"]], "The noise model: ar(1), ols, or higher order ar?": [[66, "the-noise-model-ar-1-ols-or-higher-order-ar"]], "Removing confounds": [[66, "removing-confounds"]], "Volume censoring": [[66, "volume-censoring"]], "Smoothing": [[66, "smoothing"], [180, "smoothing"]], "Masking": [[66, "masking"], [165, "masking"]], "Conclusion": [[66, "conclusion"]], "Example of explicit fixed effects fMRI model fitting": [[67, "example-of-explicit-fixed-effects-fmri-model-fitting"]], "Example of MRI response functions": [[68, "example-of-mri-response-functions"]], "Define stimulus parameters and response models": [[68, "define-stimulus-parameters-and-response-models"]], "Sample and plot response functions": [[68, "sample-and-plot-response-functions"]], "Example of surface-based first-level analysis": [[69, "example-of-surface-based-first-level-analysis"]], "Project the fMRI image to the surface": [[69, "project-the-fmri-image-to-the-surface"]], "Analysing the left hemisphere": [[69, "analysing-the-left-hemisphere"]], "Predicted time series and residuals": [[70, "predicted-time-series-and-residuals"]], "Import modules": [[70, "import-modules"]], "Fit model": [[70, "fit-model"]], "Calculate and plot contrast": [[70, "calculate-and-plot-contrast"]], "Extract the largest clusters": [[70, "extract-the-largest-clusters"]], "Plot predicted and actual time series for 6 most significant clusters": [[70, "plot-predicted-and-actual-time-series-for-6-most-significant-clusters"]], "Get residuals": [[70, "get-residuals"]], "Plot distribution of residuals": [[70, "plot-distribution-of-residuals"]], "Plot R-squared": [[70, "plot-r-squared"]], "Calculate and Plot F-test": [[70, "calculate-and-plot-f-test"]], "Single-subject data (two sessions) in native space": [[71, "single-subject-data-two-sessions-in-native-space"]], "Generate an events.tsv file for the NeuroSpin localizer task": [[72, "generate-an-events-tsv-file-for-the-neurospin-localizer-task"]], "GLM: Second level analysis": [[74, "glm-second-level-analysis"], [113, "glm-second-level-analysis"]], "Voxel-Based Morphometry on OASIS dataset": [[75, "voxel-based-morphometry-on-oasis-dataset"]], "VBM analysis of aging": [[75, "vbm-analysis-of-aging"]], "Analyse data": [[75, "analyse-data"]], "Second-level fMRI model: true positive proportion in clusters": [[76, "second-level-fmri-model-true-positive-proportion-in-clusters"]], "Fetch dataset": [[76, "fetch-dataset"], [79, "fetch-dataset"], [80, "fetch-dataset"]], "Estimate second level model": [[76, "estimate-second-level-model"], [77, "estimate-second-level-model"], [79, "estimate-second-level-model"]], "Example of generic design in second-level models": [[77, "example-of-generic-design-in-second-level-models"]], "Example of second level design matrix": [[78, "example-of-second-level-design-matrix"]], "Create a simple experimental paradigm": [[78, "create-a-simple-experimental-paradigm"]], "Create a second level design matrix": [[78, "create-a-second-level-design-matrix"]], "Second-level fMRI model: one sample test": [[79, "second-level-fmri-model-one-sample-test"]], "Display subject t_maps": [[79, "display-subject-t-maps"]], "Second-level fMRI model: two-sample test, unpaired and paired": [[80, "second-level-fmri-model-two-sample-test-unpaired-and-paired"]], "Estimate second level models": [[80, "estimate-second-level-models"]], "Plot the results": [[80, "plot-the-results"]], "Statistical testing of a second-level analysis": [[81, "statistical-testing-of-a-second-level-analysis"]], "Prepare some images for a simple t test": [[81, "prepare-some-images-for-a-simple-t-test"]], "Perform the second level analysis": [[81, "perform-the-second-level-analysis"]], "Manipulating brain image volumes": [[83, "manipulating-brain-image-volumes"], [113, "manipulating-brain-image-volumes"]], "Visualization of affine resamplings": [[84, "visualization-of-affine-resamplings"]], "Comparing the means of 2 images": [[85, "comparing-the-means-of-2-images"]], "Breaking an atlas of labels in separated regions": [[86, "breaking-an-atlas-of-labels-in-separated-regions"]], "The original Yeo atlas": [[86, "the-original-yeo-atlas"]], "Relabeling the atlas into separated regions": [[86, "relabeling-the-atlas-into-separated-regions"]], "Different connectivity modes": [[86, "different-connectivity-modes"]], "Parameter min_size": [[86, "parameter-min-size"]], "Regions Extraction of Default Mode Networks using Smith Atlas": [[87, "regions-extraction-of-default-mode-networks-using-smith-atlas"]], "Region Extraction using a t-statistical map (3D)": [[88, "region-extraction-using-a-t-statistical-map-3d"]], "Understanding NiftiMasker and mask computation": [[89, "understanding-niftimasker-and-mask-computation"]], "Computing a mask from the background": [[89, "computing-a-mask-from-the-background"]], "Computing a mask from raw EPI data": [[89, "computing-a-mask-from-raw-epi-data"]], "Computing the mask from the MNI template": [[89, "computing-the-mask-from-the-mni-template"]], "Compute and resample a mask": [[89, "compute-and-resample-a-mask"]], "After mask computation: extracting time series": [[89, "after-mask-computation-extracting-time-series"]], "Negating an image with math_img": [[90, "negating-an-image-with-math-img"]], "Extracting signals from brain regions using the NiftiLabelsMasker": [[91, "extracting-signals-from-brain-regions-using-the-niftilabelsmasker"]], "Simple example of NiftiMasker use": [[92, "simple-example-of-niftimasker-use"]], "Resample an image to a template": [[93, "resample-an-image-to-a-template"]], "Computing a Region of Interest (ROI) mask manually": [[94, "computing-a-region-of-interest-roi-mask-manually"]], "Build a statistical test to find voxels of interest": [[94, "build-a-statistical-test-to-find-voxels-of-interest"]], "Build a mask from this statistical map (Improving the quality of the mask)": [[94, "build-a-mask-from-this-statistical-map-improving-the-quality-of-the-mask"]], "Smoothing an image": [[95, "smoothing-an-image"]], "Advanced statistical analysis of brain images": [[97, "advanced-statistical-analysis-of-brain-images"], [113, "advanced-statistical-analysis-of-brain-images"]], "Advanced decoding using scikit learn": [[98, "advanced-decoding-using-scikit-learn"]], "Performing decoding with scikit-learn": [[98, "performing-decoding-with-scikit-learn"], [163, "performing-decoding-with-scikit-learn"]], "Masking the data": [[98, "masking-the-data"]], "Cross-validation with scikit-learn": [[98, "cross-validation-with-scikit-learn"], [163, "cross-validation-with-scikit-learn"]], "Tuning cross-validation parameters": [[98, "tuning-cross-validation-parameters"]], "Measuring the chance level": [[98, "measuring-the-chance-level"], [163, "measuring-the-chance-level"]], "Dummy estimator": [[98, "dummy-estimator"]], "Permutation test": [[98, "permutation-test"]], "Decoding without a mask: Anova-SVM in scikit-lean": [[98, "decoding-without-a-mask-anova-svm-in-scikit-lean"]], "Visualize the ANOVA + SVC\u2019s discriminating weights": [[98, "visualize-the-anova-svc-s-discriminating-weights"]], "Going further with scikit-learn": [[98, "going-further-with-scikit-learn"], [163, "going-further-with-scikit-learn"]], "Changing the prediction engine": [[98, "changing-the-prediction-engine"]], "Changing the feature selection": [[98, "changing-the-feature-selection"]], "Functional connectivity predicts age group": [[99, "functional-connectivity-predicts-age-group"]], "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding": [[100, "beta-series-modeling-for-task-based-functional-connectivity-and-decoding"]], "Choosing the right model for your analysis": [[100, null]], "Define the standard model": [[100, "define-the-standard-model"]], "Define the LSA model": [[100, "define-the-lsa-model"]], "Aggregate beta maps from the LSA model based on condition": [[100, "aggregate-beta-maps-from-the-lsa-model-based-on-condition"]], "Define the LSS models": [[100, "define-the-lss-models"]], "Show the design matrices for the first few trials": [[100, "show-the-design-matrices-for-the-first-few-trials"]], "Compare the three modeling approaches": [[100, "compare-the-three-modeling-approaches"]], "Applications of beta series": [[100, "applications-of-beta-series"]], "BIDS dataset first and second level analysis": [[101, "bids-dataset-first-and-second-level-analysis"]], "Fetch example BIDS dataset": [[101, "fetch-example-bids-dataset"], [108, "fetch-example-bids-dataset"]], "Obtain automatically FirstLevelModel objects and fit arguments": [[101, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"], [108, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"]], "Quick sanity check on fit arguments": [[101, "quick-sanity-check-on-fit-arguments"]], "First level model estimation": [[101, "first-level-model-estimation"]], "Second level model estimation": [[101, "second-level-model-estimation"]], "Massively univariate analysis of face vs house recognition": [[102, "massively-univariate-analysis-of-face-vs-house-recognition"]], "NeuroVault cross-study ICA maps": [[103, "neurovault-cross-study-ica-maps"]], "Get image and term data": [[103, "get-image-and-term-data"]], "Reshape and mask images": [[103, "reshape-and-mask-images"]], "Run ICA and map components to terms": [[103, "run-ica-and-map-components-to-terms"]], "Generate figures": [[103, "generate-figures"]], "Multivariate decompositions: Independent component analysis of fMRI": [[104, "multivariate-decompositions-independent-component-analysis-of-fmri"]], "Massively univariate analysis of a motor task from the Localizer dataset": [[105, "massively-univariate-analysis-of-a-motor-task-from-the-localizer-dataset"]], "Massively univariate analysis of a calculation task from the Localizer dataset": [[106, "massively-univariate-analysis-of-a-calculation-task-from-the-localizer-dataset"]], "NeuroVault meta-analysis of stop-go paradigm studies": [[107, "neurovault-meta-analysis-of-stop-go-paradigm-studies"]], "Fetch images for \u201csuccessful stop minus go\u201d-like protocols.": [[107, "fetch-images-for-successful-stop-minus-go-like-protocols"]], "Visualize the data": [[107, "visualize-the-data"]], "Compute statistics": [[107, "compute-statistics"]], "Plot the combined z maps": [[107, "plot-the-combined-z-maps"]], "Surface-based dataset first and second level analysis of a dataset": [[108, "surface-based-dataset-first-and-second-level-analysis-of-a-dataset"]], "Group study": [[108, "group-study"]], "Examples for experimental modules": [[110, "examples-for-experimental-modules"], [113, "examples-for-experimental-modules"]], "A short demo of the surface images & maskers": [[111, "a-short-demo-of-the-surface-images-maskers"]], "Connectivity with a surface atlas and SurfaceLabelsMasker": [[111, "connectivity-with-a-surface-atlas-and-surfacelabelsmasker"]], "Using the Decoder": [[111, "using-the-decoder"]], "Decoding with a scikit-learn Pipeline": [[111, "decoding-with-a-scikit-learn-pipeline"]], "Examples": [[113, "examples"], [179, null], [180, null], [180, null], [180, null], [180, null], [180, null], [180, null]], "General bibliography": [[114, "general-bibliography"]], "Advanced usage: manual pipelines and scaling up": [[115, "advanced-usage-manual-pipelines-and-scaling-up"]], "Building your own neuroimaging machine-learning pipeline": [[116, "building-your-own-neuroimaging-machine-learning-pipeline"]], "Data loading and preprocessing": [[116, "data-loading-and-preprocessing"]], "Downloading the data": [[116, "downloading-the-data"]], "Loading non image data: experiment description": [[116, "loading-non-image-data-experiment-description"]], "Masking the data: from 4D image to 2D array": [[116, "masking-the-data-from-4d-image-to-2d-array"]], "Applying a mask": [[116, "applying-a-mask"]], "Automatically computing a mask": [[116, "automatically-computing-a-mask"]], "Applying a scikit-learn machine learning method": [[116, "applying-a-scikit-learn-machine-learning-method"]], "Unmasking (inverse_transform)": [[116, "unmasking-inverse-transform"]], "Visualizing results": [[116, "visualizing-results"], [159, "visualizing-results"]], "Going further": [[116, "going-further"]], "Downloading statistical maps from the Neurovault repository": [[117, "downloading-statistical-maps-from-the-neurovault-repository"]], "Specific images or collections": [[117, "specific-images-or-collections"]], "Selection filters": [[117, "selection-filters"]], "Output": [[117, "output"]], "Neurosynth annotations": [[117, "neurosynth-annotations"]], "Examples using Neurovault": [[117, "examples-using-neurovault"]], "0.1.0": [[118, "id1"], [153, "id4726"]], "Changelog": [[118, "changelog"], [119, "changelog"], [120, "changelog"], [121, "changelog"], [126, "changelog"], [127, "changelog"], [129, "changelog"], [153, "changelog"], [153, "id3858"], [153, "id4002"], [153, "id4294"], [153, "id4439"], [153, "id4583"], [153, "id4727"], [168, "changelog"]], "0.1.1": [[119, "id1"], [153, "id4582"]], "0.1.2": [[120, "id1"], [153, "id4438"]], "0.1.3": [[121, "id1"], [153, "id4293"]], "Fixes": [[121, "fixes"], [123, "fixes"], [124, "fixes"], [124, "id2"], [125, "fixes"], [128, "fixes"], [131, "fixes"], [132, "fixes"], [133, "fixes"], [133, "id3"], [134, "fixes"], [135, "fixes"], [137, "fixes"], [138, "fixes"], [139, "fixes"], [140, "fixes"], [141, "id4"], [141, "id9"], [141, "id13"], [142, "fixes"], [143, "fixes"], [144, "fixes"], [145, "fixes"], [146, "fixes"], [147, "fixes"], [148, "fixes"], [149, "fixes"], [150, "fixes"], [151, "fixes"], [153, "fixes"], [153, "id146"], [153, "id293"], [153, "id296"], [153, "id444"], [153, "id594"], [153, "id740"], [153, "id888"], [153, "id1036"], [153, "id1184"], [153, "id1332"], [153, "id1480"], [153, "id1626"], [153, "id1772"], [153, "id1924"], [153, "id1930"], [153, "id1934"], [153, "id2080"], [153, "id2227"], [153, "id2382"], [153, "id2533"], [153, "id2824"], [153, "id2972"], [153, "id3118"], [153, "id3123"], [153, "id3268"], [153, "id3416"], [153, "id3854"], [153, "id4295"]], "0.1.4": [[122, "id1"], [153, "id4149"]], "Highlights": [[122, "highlights"], [133, "highlights"], [134, "highlights"], [135, "highlights"], [138, "highlights"], [138, "id4"], [138, "id8"], [153, "id2376"], [153, "id2380"], [153, "id2385"], [153, "id2822"], [153, "id2970"], [153, "id3121"], [153, "id4150"]], "0.10.0": [[123, "id1"], [153, "id441"]], "HIGHLIGHTS": [[123, "highlights"], [125, "highlights"], [141, "highlights"], [144, "highlights"], [145, "highlights"], [146, "highlights"], [147, "highlights"], [148, "highlights"], [150, "highlights"], [151, "highlights"], [153, "highlights"], [153, "id144"], [153, "id442"], [153, "id590"], [153, "id886"], [153, "id1034"], [153, "id1182"], [153, "id1330"], [153, "id1477"], [153, "id1917"]], "NEW": [[123, "new"], [124, "new"], [125, "new"], [138, "new"], [139, "new"], [140, "new"], [141, "new"], [141, "id2"], [141, "id5"], [141, "id11"], [144, "new"], [145, "new"], [146, "new"], [147, "new"], [148, "new"], [150, "new"], [151, "new"], [153, "new"], [153, "id145"], [153, "id292"], [153, "id443"], [153, "id592"], [153, "id887"], [153, "id1035"], [153, "id1183"], [153, "id1331"], [153, "id1478"], [153, "id1918"], [153, "id1922"], [153, "id1926"], [153, "id1932"], [153, "id2079"], [153, "id2225"], [153, "id2372"]], "Enhancements": [[123, "enhancements"], [124, "enhancements"], [124, "id3"], [125, "enhancements"], [126, "enhancements"], [128, "enhancements"], [132, "enhancements"], [133, "enhancements"], [133, "id4"], [134, "enhancements"], [135, "enhancements"], [136, "enhancements"], [138, "id2"], [138, "id5"], [138, "id9"], [145, "enhancements"], [146, "enhancements"], [147, "enhancements"], [148, "enhancements"], [149, "enhancements"], [150, "enhancements"], [151, "enhancements"], [153, "enhancements"], [153, "id147"], [153, "id294"], [153, "id297"], [153, "id445"], [153, "id595"], [153, "id741"], [153, "id889"], [153, "id1037"], [153, "id1185"], [153, "id1333"], [153, "id2377"], [153, "id2381"], [153, "id2386"], [153, "id2677"], [153, "id2823"], [153, "id2973"], [153, "id3119"], [153, "id3124"], [153, "id3269"], [153, "id3853"], [153, "id4004"]], "Changes": [[123, "changes"], [124, "changes"], [124, "id4"], [125, "changes"], [128, "changes"], [130, "changes"], [131, "changes"], [132, "changes"], [133, "changes"], [133, "id2"], [134, "changes"], [135, "changes"], [136, "changes"], [137, "changes"], [138, "changes"], [138, "id3"], [138, "id6"], [138, "id10"], [139, "changes"], [141, "id3"], [141, "id8"], [141, "id12"], [143, "changes"], [144, "changes"], [146, "changes"], [147, "changes"], [148, "changes"], [149, "changes"], [150, "changes"], [151, "changes"], [153, "changes"], [153, "id148"], [153, "id295"], [153, "id298"], [153, "id446"], [153, "id596"], [153, "id742"], [153, "id890"], [153, "id1038"], [153, "id1186"], [153, "id1481"], [153, "id1627"], [153, "id1923"], [153, "id1929"], [153, "id1933"], [153, "id2226"], [153, "id2374"], [153, "id2378"], [153, "id2383"], [153, "id2387"], [153, "id2532"], [153, "id2678"], [153, "id2825"], [153, "id2971"], [153, "id3117"], [153, "id3122"], [153, "id3270"], [153, "id3414"], [153, "id3564"], [153, "id3855"]], "0.10.1": [[124, "id1"], [153, "id291"]], "0.10.1rc1": [[124, "rc1"], [153, "rc1"]], "0.10.2": [[125, "id1"], [153, "id143"]], "0.2.0": [[126, "id1"], [153, "id4001"]], "New features": [[126, "new-features"], [129, "new-features"], [153, "new-features"], [153, "id4003"]], "Bug fixes": [[126, "bug-fixes"], [129, "bug-fixes"], [136, "bug-fixes"], [153, "bug-fixes"], [153, "id3708"], [153, "id4005"]], "API changes summary": [[126, "api-changes-summary"], [153, "api-changes-summary"]], "Contributors": [[126, "contributors"], [128, "contributors"], [131, "contributors"], [135, "contributors"], [138, "contributors"], [138, "id7"], [138, "id11"], [139, "contributors"], [140, "contributors"], [141, "contributors"], [141, "id10"], [141, "id14"], [142, "contributors"], [143, "contributors"], [153, "contributors"], [153, "id1773"], [153, "id1925"], [153, "id1931"], [153, "id1935"], [153, "id2081"], [153, "id2228"], [153, "id2379"], [153, "id2384"], [153, "id2388"], [153, "id2826"], [153, "id3419"], [153, "id3856"], [153, "id4006"]], "0.2.1": [[127, "id1"], [153, "v0-2-1"]], "0.2.2": [[128, "id1"], [153, "id3851"]], "New": [[128, "new"], [130, "new"], [131, "new"], [131, "id3"], [153, "id3415"], [153, "id3418"], [153, "id3563"], [153, "id3852"]], "0.2.3": [[129, "id1"], [153, "id3707"]], "0.2.4": [[130, "id1"], [153, "id3562"]], "0.2.5.1": [[131, "id1"], [153, "id3413"]], "0.2.5": [[131, "id2"], [153, "id3417"]], "0.2.6": [[132, "id1"], [153, "id3267"]], "0.3.0": [[133, "id1"], [153, "id3116"]], "0.3.0 beta": [[133, "beta"], [153, "id3120"]], "0.3.1": [[134, "id1"], [153, "id2969"]], "0.4.0": [[135, "id1"], [153, "id2821"]], "0.4.1": [[136, "id1"], [153, "id2676"]], "0.4.2": [[137, "id1"], [153, "id2531"]], "0.5.0": [[138, "id1"], [153, "id2371"]], "ENHANCEMENTS": [[138, "enhancements"], [141, "enhancements"], [142, "enhancements"], [143, "enhancements"], [153, "id1625"], [153, "id1771"], [153, "id1919"], [153, "id2373"]], "0.5.0 rc": [[138, "rc"], [153, "id2375"]], "0.5.0 beta": [[138, "beta"], [153, "beta"]], "0.5.0 alpha": [[138, "alpha"], [153, "alpha"]], "0.5.1": [[139, "id1"], [153, "id2224"]], "Known Issues": [[139, "known-issues"], [153, "known-issues"]], "0.5.2": [[140, "id1"], [153, "id2078"]], "0.6.0": [[141, "id1"], [153, "id1916"]], "CHANGES": [[141, "changes"], [153, "id1920"]], "FIXES": [[141, "fixes"], [153, "id1921"]], "0.6.0rc": [[141, "rc"], [153, "rc"]], "0.6.0b0": [[141, "b0"], [153, "b0"]], "0.6.0a0": [[141, "a0"], [153, "a0"]], "0.6.1": [[142, "id1"], [153, "id1770"]], "0.6.2": [[143, "id1"], [153, "id1624"]], "0.7.0": [[144, "id1"], [153, "id1476"]], "0.7.1": [[145, "id1"], [153, "id1329"]], "0.8.0": [[146, "id1"], [153, "id1181"]], "0.8.1": [[147, "id1"], [153, "id1033"]], "0.9.0": [[148, "id1"], [153, "id885"]], "0.9.1": [[149, "id1"], [153, "id739"]], "0.9.2": [[150, "id1"], [153, "id589"]], "0.11.0.dev": [[151, "dev"], [153, "dev"]], "What\u2019s new": [[153, "what-s-new"]], "Connectome extraction: inverse covariance for direct connections": [[154, "connectome-extraction-inverse-covariance-for-direct-connections"]], "Page summary": [[154, null], [155, null], [158, null], [159, null], [169, null], [172, null]], "Sparse inverse covariance for functional connectomes": [[154, "sparse-inverse-covariance-for-functional-connectomes"]], "Parameter selection": [[154, null]], "Full example": [[154, null], [154, null], [154, null], [155, null], [155, null]], "Exercise: computing sparse inverse covariance": [[154, null]], "Reference": [[154, null], [154, null], [154, null], [154, null], [157, null]], "Sparse inverse covariance on multiple subjects": [[154, "sparse-inverse-covariance-on-multiple-subjects"]], "Exercise: computing the correlation matrix of rest fmri": [[154, null], [155, null]], "Comparing the different approaches on simulated data": [[154, "comparing-the-different-approaches-on-simulated-data"]], "Full Example": [[154, null]], "Linking total and direct interactions at the group level": [[154, "linking-total-and-direct-interactions-at-the-group-level"]], "Exercise: computing connectivity in tangent space": [[154, null]], "Extracting times series to build a functional connectome": [[155, "extracting-times-series-to-build-a-functional-connectome"]], "Time-series from a brain parcellation or \u201cMaxProb\u201d atlas": [[155, "time-series-from-a-brain-parcellation-or-maxprob-atlas"]], "Brain parcellations": [[155, "brain-parcellations"]], "Extracting signals on a parcellation": [[155, "extracting-signals-on-a-parcellation"]], "Time-series from a probabilistic atlas": [[155, "time-series-from-a-probabilistic-atlas"]], "Probabilistic atlases": [[155, "probabilistic-atlases"]], "Extracting signals from a probabilistic atlas": [[155, "extracting-signals-from-a-probabilistic-atlas"]], "Exercise: correlation matrix of rest fMRI on probabilistic atlas": [[155, null]], "A functional connectome: a graph of interactions": [[155, "a-functional-connectome-a-graph-of-interactions"]], "A functional connectome: extracting coordinates of regions": [[155, "a-functional-connectome-extracting-coordinates-of-regions"]], "Functional connectivity and resting state": [[156, "functional-connectivity-and-resting-state"]], "Clustering to parcellate the brain in regions": [[157, "clustering-to-parcellate-the-brain-in-regions"]], "Data loading: movie-watching data": [[157, "data-loading-movie-watching-data"]], "Applying clustering": [[157, "applying-clustering"]], "Which clustering to use": [[157, null]], "Using and visualizing the resulting parcellation": [[157, "using-and-visualizing-the-resulting-parcellation"]], "Visualizing the parcellation": [[157, "visualizing-the-parcellation"]], "Compressed representation": [[157, "compressed-representation"]], "Example code": [[157, null], [165, null]], "Region Extraction for better brain parcellations": [[158, "region-extraction-for-better-brain-parcellations"]], "Fetching movie-watching based functional datasets": [[158, "fetching-movie-watching-based-functional-datasets"]], "Brain maps using Dictionary learning": [[158, "brain-maps-using-dictionary-learning"]], "Visualization of Dictionary learning maps": [[158, "visualization-of-dictionary-learning-maps"]], "Region Extraction with Dictionary learning maps": [[158, "region-extraction-with-dictionary-learning-maps"]], "Visualization of Region Extraction results": [[158, "visualization-of-region-extraction-results"]], "Computing functional connectivity matrices": [[158, "computing-functional-connectivity-matrices"]], "Visualization of functional connectivity matrices": [[158, "visualization-of-functional-connectivity-matrices"]], "Validating results": [[158, "validating-results"]], "Extracting functional brain networks: ICA and related": [[159, "extracting-functional-brain-networks-ica-and-related"]], "Multi-subject ICA: CanICA": [[159, "multi-subject-ica-canica"]], "Objective": [[159, "objective"]], "Nilearn data for examples": [[159, null]], "Fitting CanICA model with nilearn": [[159, "fitting-canica-model-with-nilearn"]], "Interpreting such components": [[159, "interpreting-such-components"]], "An alternative to ICA: Dictionary learning": [[159, "an-alternative-to-ica-dictionary-learning"]], "An introduction to decoding": [[160, "an-introduction-to-decoding"]], "Loading and preparing the data": [[160, "loading-and-preparing-the-data"]], "The Haxby 2001 experiment": [[160, "the-haxby-2001-experiment"]], "fMRI: using beta maps of a first-level analysis": [[160, null]], "Loading the data into nilearn": [[160, "loading-the-data-into-nilearn"]], "Full code example": [[160, null]], "Performing a simple decoding analysis": [[160, "performing-a-simple-decoding-analysis"]], "A few definitions": [[160, "a-few-definitions"]], "A first estimator": [[160, "a-first-estimator"]], "Decoding made easy": [[160, "decoding-made-easy"]], "Measuring prediction performance": [[160, "measuring-prediction-performance"]], "Cross-validation": [[160, "cross-validation"]], "Choosing a good cross-validation strategy": [[160, "choosing-a-good-cross-validation-strategy"]], "Choice of the prediction accuracy measure": [[160, "choice-of-the-prediction-accuracy-measure"]], "Prediction accuracy at chance using simple strategies": [[160, "prediction-accuracy-at-chance-using-simple-strategies"]], "Putting it all together": [[160, null]], "Visualizing the decoder\u2019s weights": [[160, "visualizing-the-decoder-s-weights"]], "Decoding without a mask: Anova-SVM": [[160, "decoding-without-a-mask-anova-svm"]], "Dimension reduction with feature selection": [[160, "dimension-reduction-with-feature-selection"]], "Visualizing the results": [[160, "visualizing-the-results"]], "Final script": [[160, null]], "Choosing the right predictive model for neuroimaging": [[161, "choosing-the-right-predictive-model-for-neuroimaging"]], "Predictions: regression, classification and multi-class": [[161, "predictions-regression-classification-and-multi-class"]], "Regression": [[161, "regression"]], "Classification: two classes or multi-class": [[161, "classification-two-classes-or-multi-class"]], "Different linear models": [[161, "different-linear-models"]], "Setting estimator parameters": [[161, "setting-estimator-parameters"], [163, "setting-estimator-parameters"]], "Bagging several models": [[161, "bagging-several-models"]], "FREM: fast ensembling of regularized models for robust decoding": [[162, "frem-fast-ensembling-of-regularized-models-for-robust-decoding"]], "FREM pipeline": [[162, "frem-pipeline"]], "Empirical comparisons": [[162, "empirical-comparisons"]], "Decoding performance increase on Haxby dataset": [[162, "decoding-performance-increase-on-haxby-dataset"]], "Code": [[162, null], [162, null], [179, null]], "Spatial regularization of decoding maps on mixed gambles study": [[162, "spatial-regularization-of-decoding-maps-on-mixed-gambles-study"]], "Running scikit-learn functions for more control on the analysis": [[163, "running-scikit-learn-functions-for-more-control-on-the-analysis"]], "Using scikit-learn estimators": [[163, "using-scikit-learn-estimators"]], "Decoding on simulated data": [[163, null]], "Decoding without a mask: Anova-SVM using scikit-learn": [[163, "decoding-without-a-mask-anova-svm-using-scikit-learn"]], "Using any other model in the pipeline": [[163, "using-any-other-model-in-the-pipeline"]], "Decoding and MVPA: predicting from brain images": [[164, "decoding-and-mvpa-predicting-from-brain-images"]], "Searchlight : finding voxels containing information": [[165, "searchlight-finding-voxels-containing-information"]], "Principle of the Searchlight": [[165, "principle-of-the-searchlight"]], "Further Reading": [[165, null]], "Preparing the data": [[165, "preparing-the-data"]], "Setting up the searchlight": [[165, "setting-up-the-searchlight"]], "Classifier": [[165, "classifier"]], "Score function": [[165, "score-function"]], "Cross validation": [[165, "cross-validation"]], "Sphere radius": [[165, "sphere-radius"]], "Searchlight": [[165, "id6"]], "Comparing to massively univariate analysis: F_score or SPM": [[165, "comparing-to-massively-univariate-analysis-f-score-or-spm"]], "SpaceNet: decoding with spatial structure for better maps": [[166, "spacenet-decoding-with-spatial-structure-for-better-maps"]], "The SpaceNet decoder": [[166, "the-spacenet-decoder"]], "Related example": [[166, "related-example"]], "Group-sparse covariance estimation": [[167, "group-sparse-covariance-estimation"]], "Description": [[167, "description"]], "Numerical stability": [[167, "numerical-stability"]], "Execution time": [[167, "execution-time"]], "Synthetic dataset": [[167, "synthetic-dataset"]], "Stopping criteria": [[167, "stopping-criteria"]], "Maximum number of iterations": [[167, "maximum-number-of-iterations"]], "Duality gap": [[167, "duality-gap"]], "Variation of norm of estimate": [[167, "variation-of-norm-of-estimate"]], "Initial estimate value": [[167, "initial-estimate-value"]], "Modifying the stopping criterion": [[167, "modifying-the-stopping-criterion"]], "Cross-validation algorithm": [[167, "cross-validation-algorithm"]], "Principle of cross-validation": [[167, "principle-of-cross-validation"]], "Bounds on alpha": [[167, "bounds-on-alpha"]], "Iterative grid search": [[167, "iterative-grid-search"]], "Warm restart": [[167, "warm-restart"]], "Stopping criterion": [[167, "stopping-criterion"]], "Contributing": [[168, "contributing"], [168, "id5"]], "Code of Conduct": [[168, "code-of-conduct"]], "How to get help?": [[168, "how-to-get-help"]], "How to help the project?": [[168, "how-to-help-the-project"]], "Report bugs or discuss enhancement ideas": [[168, "report-bugs-or-discuss-enhancement-ideas"]], "Answer questions": [[168, "answer-questions"]], "Review Pull Requests": [[168, "review-pull-requests"]], "Contribute code": [[168, "contribute-code"]], "How do we decide what code goes in?": [[168, "how-do-we-decide-what-code-goes-in"]], "Scope of the project": [[168, "scope-of-the-project"]], "Adding atlases and datasets": [[168, "adding-atlases-and-datasets"]], "Who makes decisions": [[168, "who-makes-decisions"]], "How to contribute to nilearn": [[168, "how-to-contribute-to-nilearn"]], "Contribution Guidelines": [[168, "contribution-guidelines"]], "PR Structure": [[168, "pr-structure"]], "Coding Style": [[168, "coding-style"]], "Guidelines for Private Functions": [[168, "guidelines-for-private-functions"]], "Pre-commit": [[168, "pre-commit"]], "Tests": [[168, "tests"]], "Fixtures": [[168, "fixtures"]], "Seeding": [[168, "seeding"]], "Documentation": [[168, "documentation"]], "Setting up your environment": [[168, "setting-up-your-environment"]], "Installing": [[168, "installing"]], "Recommendation": [[168, null], [168, null]], "Building documentation": [[168, "building-documentation"]], "Additional cases": [[168, "additional-cases"]], "How to contribute an atlas": [[168, "how-to-contribute-an-atlas"]], "How to contribute a dataset fetcher": [[168, "how-to-contribute-a-dataset-fetcher"]], "Maintenance": [[168, "maintenance"], [176, "maintenance"]], "First level models": [[169, "first-level-models"]], "HRF models": [[169, "hrf-models"]], "Design matrix: event-based and time series-based": [[169, "design-matrix-event-based-and-time-series-based"]], "Event-based": [[169, "event-based"]], "Time series-based": [[169, "time-series-based"]], "Fitting a first level model": [[169, "fitting-a-first-level-model"]], "Computing contrasts": [[169, "computing-contrasts"]], "Extracting predicted time series and residuals": [[169, "extracting-predicted-time-series-and-residuals"]], "Surface-based analysis": [[169, "surface-based-analysis"]], "An introduction to GLMs in fMRI statistical analysis": [[170, "an-introduction-to-glms-in-fmri-statistical-analysis"]], "A primer on BOLD-fMRI data analysis": [[170, "a-primer-on-bold-fmri-data-analysis"]], "What is fMRI ?": [[170, "what-is-fmri"]], "fMRI data modelling": [[170, "fmri-data-modelling"]], "fMRI statistical analysis": [[170, "fmri-statistical-analysis"]], "Multiple Comparisons": [[170, "multiple-comparisons"]], "Analyzing fMRI using GLMs": [[171, "analyzing-fmri-using-glms"]], "Second level models": [[172, "second-level-models"]], "Fitting a second level model": [[172, "fitting-a-second-level-model"]], "Thresholding statistical maps": [[172, "thresholding-statistical-maps"]], "Multiple comparisons correction": [[172, "multiple-comparisons-correction"]], "Voxel based morphometry": [[172, "voxel-based-morphometry"]], "Glossary": [[173, "glossary"]], "Nilearn": [[174, "nilearn"]], "Featured examples": [[174, "featured-examples"]], "Introduction": [[175, "introduction"]], "What is nilearn?": [[175, "what-is-nilearn"]], "Using nilearn for the first time": [[175, "using-nilearn-for-the-first-time"]], "First steps with nilearn": [[175, "first-steps-with-nilearn"]], "Learning with the API references": [[175, "learning-with-the-api-references"]], "Learning with examples": [[175, "learning-with-examples"]], "Finding help": [[175, "finding-help"]], "Machine learning applications to Neuroimaging": [[175, "machine-learning-applications-to-neuroimaging"]], "Project Organization": [[176, "project-organization"]], "Issues": [[176, "issues"]], "Labels": [[176, "labels"]], "Closing policy": [[176, "closing-policy"]], "Pull Requests": [[176, "pull-requests"]], "How to make a release?": [[176, "how-to-make-a-release"]], "Prepare code for the release": [[176, "prepare-code-for-the-release"]], "Prepare the release": [[176, "prepare-the-release"]], "Build the distributions and upload them to Pypi": [[176, "build-the-distributions-and-upload-them-to-pypi"]], "Build and deploy the documentation": [[176, "build-and-deploy-the-documentation"]], "Post-release": [[176, "post-release"]], "Manipulation brain volumes with nilearn": [[177, "manipulation-brain-volumes-with-nilearn"]], "Input and output: neuroimaging data representation": [[178, "input-and-output-neuroimaging-data-representation"]], "Inputing data: file names or image objects": [[178, "inputing-data-file-names-or-image-objects"]], "File names and objects, 3D and 4D images": [[178, "file-names-and-objects-3d-and-4d-images"]], "File name matching: \u201cglobbing\u201d and user path expansion": [[178, "file-name-matching-globbing-and-user-path-expansion"]], "Python globbing": [[178, null]], "Fetching open datasets from Internet": [[178, "fetching-open-datasets-from-internet"]], "nilearn_data: Where is the downloaded data stored?": [[178, null]], "Understanding neuroimaging data": [[178, "understanding-neuroimaging-data"]], "Nifti and Analyze data": [[178, "nifti-and-analyze-data"]], "Dataset formatting: data shape": [[178, null]], "Niimg-like objects": [[178, "niimg-like-objects"]], "Image affines": [[178, null]], "Decreasing memory used when loading Nifti images": [[178, null]], "Text files: phenotype or behavior": [[178, "text-files-phenotype-or-behavior"]], "Reading CSV with pandas": [[178, null]], "Manipulating images: resampling, smoothing, masking, ROIs\u2026": [[179, "manipulating-images-resampling-smoothing-masking-rois"]], "Functions for data preparation and image transformation": [[179, "functions-for-data-preparation-and-image-transformation"]], "Resampling images": [[179, "resampling-images"]], "Resampling one image to match another one": [[179, "resampling-one-image-to-match-another-one"]], "Example": [[179, null]], "Resampling to a specific target affine, shape, or resolution": [[179, "resampling-to-a-specific-target-affine-shape-or-resolution"]], "Special case: resampling to a given voxel size": [[179, null]], "Accessing individual volumes in 4D images": [[179, "accessing-individual-volumes-in-4d-images"]], "Computing and applying spatial masks": [[179, "computing-and-applying-spatial-masks"]], "Masking data: from 4D Nifti images to 2D data arrays": [[179, "masking-data-from-4d-nifti-images-to-2d-data-arrays"]], "Image operations: creating a ROI mask manually": [[179, "image-operations-creating-a-roi-mask-manually"]], "From neuroimaging volumes to data matrices: the masker objects": [[180, "from-neuroimaging-volumes-to-data-matrices-the-masker-objects"]], "The concept of \u201cmasker\u201d objects": [[180, "the-concept-of-masker-objects"]], "Advanced: Design philosophy of \u201cMaskers\u201d": [[180, null]], "NiftiMasker: applying a mask to load time-series": [[180, "niftimasker-applying-a-mask-to-load-time-series"]], "Advanced: scikit-learn Pipelines": [[180, null]], "Custom data loading: loading only the first 100 time points": [[180, "custom-data-loading-loading-only-the-first-100-time-points"]], "Controlling how the mask is computed from the data": [[180, "controlling-how-the-mask-is-computed-from-the-data"]], "Visualizing the computed mask": [[180, "visualizing-the-computed-mask"]], "Different masking strategies": [[180, "different-masking-strategies"]], "Extra mask parameters: opening, cutoff\u2026": [[180, "extra-mask-parameters-opening-cutoff"]], "Common data preparation steps: smoothing, filtering, resampling": [[180, "common-data-preparation-steps-smoothing-filtering-resampling"]], "`dtype` argument": [[180, null]], "Temporal Filtering and confound removal": [[180, "temporal-filtering-and-confound-removal"]], "Exercise": [[180, null]], "Resampling: resizing and changing resolutions of images": [[180, "resampling-resizing-and-changing-resolutions-of-images"]], "Inverse transform: unmasking data": [[180, "inverse-transform-unmasking-data"]], "Examples to better understand the NiftiMasker": [[180, null]], "Extraction of signals from regions: NiftiLabelsMasker, NiftiMapsMasker": [[180, "extraction-of-signals-from-regions-niftilabelsmasker-niftimapsmasker"]], "Regions definition": [[180, "regions-definition"]], "NiftiLabelsMasker Usage": [[180, "niftilabelsmasker-usage"]], "NiftiMapsMasker Usage": [[180, "niftimapsmasker-usage"]], "Extraction of signals from regions for multiple subjects: MultiNiftiMasker, MultiNiftiLabelsMasker, MultiNiftiMapsMasker": [[180, "extraction-of-signals-from-regions-for-multiple-subjects-multiniftimasker-multiniftilabelsmasker-multiniftimapsmasker"]], "MultiNiftiMasker Usage": [[180, "multiniftimasker-usage"]], "MultiNiftiLabelsMasker Usage": [[180, "multiniftilabelsmasker-usage"]], "MultiNiftiMapsMasker Usage": [[180, "multiniftimapsmasker-usage"]], "Extraction of signals from seeds: NiftiSpheresMasker": [[180, "extraction-of-signals-from-seeds-niftispheresmasker"]], "nilearn.connectome: Functional Connectivity": [[181, "module-nilearn.connectome"]], "nilearn.datasets: Automatic Dataset Fetching": [[182, "module-nilearn.datasets"]], "Templates": [[182, "templates"]], "Atlases": [[182, "atlases"]], "Preprocessed datasets": [[182, "preprocessed-datasets"]], "Statistical maps/derivatives": [[182, "statistical-maps-derivatives"]], "General functions": [[182, "general-functions"]], "nilearn.decoding: Decoding": [[183, "module-nilearn.decoding"]], "nilearn.decomposition: Multivariate Decompositions": [[184, "module-nilearn.decomposition"]], "nilearn.experimental: Experimental Modules": [[185, "module-nilearn.experimental"]], "nilearn.experimental.surface": [[185, "nilearn-experimental-surface"]], "nilearn.connectome.ConnectivityMeasure": [[186, "nilearn-connectome-connectivitymeasure"]], "Examples using nilearn.connectome.ConnectivityMeasure": [[186, "examples-using-nilearn-connectome-connectivitymeasure"]], "nilearn.connectome.GroupSparseCovariance": [[187, "nilearn-connectome-groupsparsecovariance"]], "nilearn.connectome.GroupSparseCovarianceCV": [[188, "nilearn-connectome-groupsparsecovariancecv"]], "Examples using nilearn.connectome.GroupSparseCovarianceCV": [[188, "examples-using-nilearn-connectome-groupsparsecovariancecv"]], "nilearn.connectome.cov_to_corr": [[189, "nilearn-connectome-cov-to-corr"]], "nilearn.connectome.group_sparse_covariance": [[190, "nilearn-connectome-group-sparse-covariance"]], "nilearn.connectome.prec_to_partial": [[191, "nilearn-connectome-prec-to-partial"]], "nilearn.connectome.sym_matrix_to_vec": [[192, "nilearn-connectome-sym-matrix-to-vec"]], "nilearn.connectome.vec_to_sym_matrix": [[193, "nilearn-connectome-vec-to-sym-matrix"]], "nilearn.datasets.fetch_abide_pcp": [[194, "nilearn-datasets-fetch-abide-pcp"]], "nilearn.datasets.fetch_adhd": [[195, "nilearn-datasets-fetch-adhd"]], "Examples using nilearn.datasets.fetch_adhd": [[195, "examples-using-nilearn-datasets-fetch-adhd"]], "nilearn.datasets.fetch_atlas_aal": [[196, "nilearn-datasets-fetch-atlas-aal"]], "nilearn.datasets.fetch_atlas_allen_2011": [[197, "nilearn-datasets-fetch-atlas-allen-2011"]], "Examples using nilearn.datasets.fetch_atlas_allen_2011": [[197, "examples-using-nilearn-datasets-fetch-atlas-allen-2011"]], "nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[198, "nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "Examples using nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[198, "examples-using-nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "nilearn.datasets.fetch_atlas_craddock_2012": [[199, "nilearn-datasets-fetch-atlas-craddock-2012"]], "nilearn.datasets.fetch_atlas_destrieux_2009": [[200, "nilearn-datasets-fetch-atlas-destrieux-2009"]], "Examples using nilearn.datasets.fetch_atlas_destrieux_2009": [[200, "examples-using-nilearn-datasets-fetch-atlas-destrieux-2009"]], "nilearn.datasets.fetch_atlas_difumo": [[201, "nilearn-datasets-fetch-atlas-difumo"]], "Examples using nilearn.datasets.fetch_atlas_difumo": [[201, "examples-using-nilearn-datasets-fetch-atlas-difumo"]], "nilearn.datasets.fetch_atlas_harvard_oxford": [[202, "nilearn-datasets-fetch-atlas-harvard-oxford"]], "Examples using nilearn.datasets.fetch_atlas_harvard_oxford": [[202, "examples-using-nilearn-datasets-fetch-atlas-harvard-oxford"]], "nilearn.datasets.fetch_atlas_juelich": [[203, "nilearn-datasets-fetch-atlas-juelich"]], "Examples using nilearn.datasets.fetch_atlas_juelich": [[203, "examples-using-nilearn-datasets-fetch-atlas-juelich"]], "nilearn.datasets.fetch_atlas_msdl": [[204, "nilearn-datasets-fetch-atlas-msdl"]], "Examples using nilearn.datasets.fetch_atlas_msdl": [[204, "examples-using-nilearn-datasets-fetch-atlas-msdl"]], "nilearn.datasets.fetch_atlas_pauli_2017": [[205, "nilearn-datasets-fetch-atlas-pauli-2017"]], "nilearn.datasets.fetch_atlas_schaefer_2018": [[206, "nilearn-datasets-fetch-atlas-schaefer-2018"]], "nilearn.datasets.fetch_atlas_smith_2009": [[207, "nilearn-datasets-fetch-atlas-smith-2009"]], "Examples using nilearn.datasets.fetch_atlas_smith_2009": [[207, "examples-using-nilearn-datasets-fetch-atlas-smith-2009"]], "nilearn.datasets.fetch_atlas_surf_destrieux": [[208, "nilearn-datasets-fetch-atlas-surf-destrieux"]], "Examples using nilearn.datasets.fetch_atlas_surf_destrieux": [[208, "examples-using-nilearn-datasets-fetch-atlas-surf-destrieux"]], "nilearn.datasets.fetch_atlas_talairach": [[209, "nilearn-datasets-fetch-atlas-talairach"]], "nilearn.datasets.fetch_atlas_yeo_2011": [[210, "nilearn-datasets-fetch-atlas-yeo-2011"]], "Examples using nilearn.datasets.fetch_atlas_yeo_2011": [[210, "examples-using-nilearn-datasets-fetch-atlas-yeo-2011"]], "nilearn.datasets.fetch_bids_langloc_dataset": [[211, "nilearn-datasets-fetch-bids-langloc-dataset"]], "nilearn.datasets.fetch_coords_dosenbach_2010": [[212, "nilearn-datasets-fetch-coords-dosenbach-2010"]], "Examples using nilearn.datasets.fetch_coords_dosenbach_2010": [[212, "examples-using-nilearn-datasets-fetch-coords-dosenbach-2010"]], "nilearn.datasets.fetch_coords_power_2011": [[213, "nilearn-datasets-fetch-coords-power-2011"]], "Examples using nilearn.datasets.fetch_coords_power_2011": [[213, "examples-using-nilearn-datasets-fetch-coords-power-2011"]], "nilearn.datasets.fetch_coords_seitzman_2018": [[214, "nilearn-datasets-fetch-coords-seitzman-2018"]], "nilearn.datasets.fetch_development_fmri": [[215, "nilearn-datasets-fetch-development-fmri"]], "Examples using nilearn.datasets.fetch_development_fmri": [[215, "examples-using-nilearn-datasets-fetch-development-fmri"]], "nilearn.datasets.fetch_ds000030_urls": [[216, "nilearn-datasets-fetch-ds000030-urls"]], "Examples using nilearn.datasets.fetch_ds000030_urls": [[216, "examples-using-nilearn-datasets-fetch-ds000030-urls"]], "nilearn.datasets.fetch_fiac_first_level": [[217, "nilearn-datasets-fetch-fiac-first-level"]], "Examples using nilearn.datasets.fetch_fiac_first_level": [[217, "examples-using-nilearn-datasets-fetch-fiac-first-level"]], "nilearn.datasets.fetch_haxby": [[218, "nilearn-datasets-fetch-haxby"]], "Examples using nilearn.datasets.fetch_haxby": [[218, "examples-using-nilearn-datasets-fetch-haxby"]], "nilearn.datasets.fetch_icbm152_2009": [[219, "nilearn-datasets-fetch-icbm152-2009"]], "Examples using nilearn.datasets.fetch_icbm152_2009": [[219, "examples-using-nilearn-datasets-fetch-icbm152-2009"]], "nilearn.datasets.fetch_icbm152_brain_gm_mask": [[220, "nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "Examples using nilearn.datasets.fetch_icbm152_brain_gm_mask": [[220, "examples-using-nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "nilearn.datasets.fetch_language_localizer_demo_dataset": [[221, "nilearn-datasets-fetch-language-localizer-demo-dataset"]], "Examples using nilearn.datasets.fetch_language_localizer_demo_dataset": [[221, "examples-using-nilearn-datasets-fetch-language-localizer-demo-dataset"]], "nilearn.datasets.fetch_localizer_button_task": [[222, "nilearn-datasets-fetch-localizer-button-task"]], "Examples using nilearn.datasets.fetch_localizer_button_task": [[222, "examples-using-nilearn-datasets-fetch-localizer-button-task"]], "nilearn.datasets.fetch_localizer_calculation_task": [[223, "nilearn-datasets-fetch-localizer-calculation-task"]], "Examples using nilearn.datasets.fetch_localizer_calculation_task": [[223, "examples-using-nilearn-datasets-fetch-localizer-calculation-task"]], "nilearn.datasets.fetch_localizer_contrasts": [[224, "nilearn-datasets-fetch-localizer-contrasts"]], "Examples using nilearn.datasets.fetch_localizer_contrasts": [[224, "examples-using-nilearn-datasets-fetch-localizer-contrasts"]], "nilearn.datasets.fetch_localizer_first_level": [[225, "nilearn-datasets-fetch-localizer-first-level"]], "Examples using nilearn.datasets.fetch_localizer_first_level": [[225, "examples-using-nilearn-datasets-fetch-localizer-first-level"]], "nilearn.datasets.fetch_megatrawls_netmats": [[226, "nilearn-datasets-fetch-megatrawls-netmats"]], "Examples using nilearn.datasets.fetch_megatrawls_netmats": [[226, "examples-using-nilearn-datasets-fetch-megatrawls-netmats"]], "nilearn.datasets.fetch_mixed_gambles": [[227, "nilearn-datasets-fetch-mixed-gambles"]], "Examples using nilearn.datasets.fetch_mixed_gambles": [[227, "examples-using-nilearn-datasets-fetch-mixed-gambles"]], "nilearn.datasets.fetch_miyawaki2008": [[228, "nilearn-datasets-fetch-miyawaki2008"]], "Examples using nilearn.datasets.fetch_miyawaki2008": [[228, "examples-using-nilearn-datasets-fetch-miyawaki2008"]], "nilearn.datasets.fetch_neurovault": [[229, "nilearn-datasets-fetch-neurovault"]], "Examples using nilearn.datasets.fetch_neurovault": [[229, "examples-using-nilearn-datasets-fetch-neurovault"]], "nilearn.datasets.fetch_neurovault_auditory_computation_task": [[230, "nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "Examples using nilearn.datasets.fetch_neurovault_auditory_computation_task": [[230, "examples-using-nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "nilearn.datasets.fetch_neurovault_ids": [[231, "nilearn-datasets-fetch-neurovault-ids"]], "Examples using nilearn.datasets.fetch_neurovault_ids": [[231, "examples-using-nilearn-datasets-fetch-neurovault-ids"]], "nilearn.datasets.fetch_neurovault_motor_task": [[232, "nilearn-datasets-fetch-neurovault-motor-task"]], "Examples using nilearn.datasets.fetch_neurovault_motor_task": [[232, "examples-using-nilearn-datasets-fetch-neurovault-motor-task"]], "nilearn.datasets.fetch_oasis_vbm": [[233, "nilearn-datasets-fetch-oasis-vbm"]], "Examples using nilearn.datasets.fetch_oasis_vbm": [[233, "examples-using-nilearn-datasets-fetch-oasis-vbm"]], "nilearn.datasets.fetch_openneuro_dataset": [[234, "nilearn-datasets-fetch-openneuro-dataset"]], "Examples using nilearn.datasets.fetch_openneuro_dataset": [[234, "examples-using-nilearn-datasets-fetch-openneuro-dataset"]], "nilearn.datasets.fetch_openneuro_dataset_index": [[235, "nilearn-datasets-fetch-openneuro-dataset-index"]], "nilearn.datasets.fetch_spm_auditory": [[236, "nilearn-datasets-fetch-spm-auditory"]], "Examples using nilearn.datasets.fetch_spm_auditory": [[236, "examples-using-nilearn-datasets-fetch-spm-auditory"]], "nilearn.datasets.fetch_spm_multimodal_fmri": [[237, "nilearn-datasets-fetch-spm-multimodal-fmri"]], "Examples using nilearn.datasets.fetch_spm_multimodal_fmri": [[237, "examples-using-nilearn-datasets-fetch-spm-multimodal-fmri"]], "nilearn.datasets.fetch_surf_fsaverage": [[238, "nilearn-datasets-fetch-surf-fsaverage"]], "Examples using nilearn.datasets.fetch_surf_fsaverage": [[238, "examples-using-nilearn-datasets-fetch-surf-fsaverage"]], "nilearn.datasets.fetch_surf_nki_enhanced": [[239, "nilearn-datasets-fetch-surf-nki-enhanced"]], "Examples using nilearn.datasets.fetch_surf_nki_enhanced": [[239, "examples-using-nilearn-datasets-fetch-surf-nki-enhanced"]], "nilearn.datasets.get_data_dirs": [[240, "nilearn-datasets-get-data-dirs"]], "Examples using nilearn.datasets.get_data_dirs": [[240, "examples-using-nilearn-datasets-get-data-dirs"]], "nilearn.datasets.load_mni152_brain_mask": [[241, "nilearn-datasets-load-mni152-brain-mask"]], "Examples using nilearn.datasets.load_mni152_brain_mask": [[241, "examples-using-nilearn-datasets-load-mni152-brain-mask"]], "nilearn.datasets.load_mni152_gm_mask": [[242, "nilearn-datasets-load-mni152-gm-mask"]], "nilearn.datasets.load_mni152_gm_template": [[243, "nilearn-datasets-load-mni152-gm-template"]], "nilearn.datasets.load_mni152_template": [[244, "nilearn-datasets-load-mni152-template"]], "Examples using nilearn.datasets.load_mni152_template": [[244, "examples-using-nilearn-datasets-load-mni152-template"]], "nilearn.datasets.load_mni152_wm_mask": [[245, "nilearn-datasets-load-mni152-wm-mask"]], "nilearn.datasets.load_mni152_wm_template": [[246, "nilearn-datasets-load-mni152-wm-template"]], "nilearn.datasets.load_sample_motor_activation_image": [[247, "nilearn-datasets-load-sample-motor-activation-image"]], "Examples using nilearn.datasets.load_sample_motor_activation_image": [[247, "examples-using-nilearn-datasets-load-sample-motor-activation-image"]], "nilearn.datasets.patch_openneuro_dataset": [[248, "nilearn-datasets-patch-openneuro-dataset"]], "nilearn.datasets.select_from_index": [[249, "nilearn-datasets-select-from-index"]], "Examples using nilearn.datasets.select_from_index": [[249, "examples-using-nilearn-datasets-select-from-index"]], "nilearn.decoding.Decoder": [[250, "nilearn-decoding-decoder"]], "Examples using nilearn.decoding.Decoder": [[250, "examples-using-nilearn-decoding-decoder"]], "nilearn.decoding.DecoderRegressor": [[251, "nilearn-decoding-decoderregressor"]], "Examples using nilearn.decoding.DecoderRegressor": [[251, "examples-using-nilearn-decoding-decoderregressor"]], "nilearn.decoding.FREMClassifier": [[252, "nilearn-decoding-fremclassifier"]], "Examples using nilearn.decoding.FREMClassifier": [[252, "examples-using-nilearn-decoding-fremclassifier"]], "nilearn.decoding.FREMRegressor": [[253, "nilearn-decoding-fremregressor"]], "Examples using nilearn.decoding.FREMRegressor": [[253, "examples-using-nilearn-decoding-fremregressor"]], "nilearn.decoding.SearchLight": [[254, "nilearn-decoding-searchlight"]], "Examples using nilearn.decoding.SearchLight": [[254, "examples-using-nilearn-decoding-searchlight"]], "nilearn.decoding.SpaceNetClassifier": [[255, "nilearn-decoding-spacenetclassifier"]], "nilearn.decoding.SpaceNetRegressor": [[256, "nilearn-decoding-spacenetregressor"]], "Examples using nilearn.decoding.SpaceNetRegressor": [[256, "examples-using-nilearn-decoding-spacenetregressor"]], "nilearn.decomposition.CanICA": [[257, "nilearn-decomposition-canica"]], "Examples using nilearn.decomposition.CanICA": [[257, "examples-using-nilearn-decomposition-canica"]], "nilearn.decomposition.DictLearning": [[258, "nilearn-decomposition-dictlearning"]], "Examples using nilearn.decomposition.DictLearning": [[258, "examples-using-nilearn-decomposition-dictlearning"]], "nilearn.experimental.surface.FileMesh": [[259, "nilearn-experimental-surface-filemesh"]], "nilearn.experimental.surface.InMemoryMesh": [[260, "nilearn-experimental-surface-inmemorymesh"]], "nilearn.experimental.surface.Mesh": [[261, "nilearn-experimental-surface-mesh"]], "nilearn.experimental.surface.PolyMesh": [[262, "nilearn-experimental-surface-polymesh"]], "Examples using nilearn.experimental.surface.PolyMesh": [[262, "examples-using-nilearn-experimental-surface-polymesh"]], "nilearn.experimental.surface.SurfaceImage": [[263, "nilearn-experimental-surface-surfaceimage"]], "Examples using nilearn.experimental.surface.SurfaceImage": [[263, "examples-using-nilearn-experimental-surface-surfaceimage"]], "nilearn.experimental.surface.SurfaceLabelsMasker": [[264, "nilearn-experimental-surface-surfacelabelsmasker"]], "Examples using nilearn.experimental.surface.SurfaceLabelsMasker": [[264, "examples-using-nilearn-experimental-surface-surfacelabelsmasker"]], "nilearn.experimental.surface.SurfaceMasker": [[265, "nilearn-experimental-surface-surfacemasker"]], "Examples using nilearn.experimental.surface.SurfaceMasker": [[265, "examples-using-nilearn-experimental-surface-surfacemasker"]], "nilearn.experimental.surface.fetch_destrieux": [[266, "nilearn-experimental-surface-fetch-destrieux"]], "Examples using nilearn.experimental.surface.fetch_destrieux": [[266, "examples-using-nilearn-experimental-surface-fetch-destrieux"]], "nilearn.experimental.surface.fetch_nki": [[267, "nilearn-experimental-surface-fetch-nki"]], "Examples using nilearn.experimental.surface.fetch_nki": [[267, "examples-using-nilearn-experimental-surface-fetch-nki"]], "nilearn.experimental.surface.load_fsaverage": [[268, "nilearn-experimental-surface-load-fsaverage"]], "nilearn.glm.ARModel": [[269, "nilearn-glm-armodel"]], "nilearn.glm.Contrast": [[270, "nilearn-glm-contrast"]], "Examples using nilearn.glm.Contrast": [[270, "examples-using-nilearn-glm-contrast"]], "nilearn.glm.FContrastResults": [[271, "nilearn-glm-fcontrastresults"]], "nilearn.glm.LikelihoodModelResults": [[272, "nilearn-glm-likelihoodmodelresults"]], "nilearn.glm.OLSModel": [[273, "nilearn-glm-olsmodel"]], "nilearn.glm.RegressionResults": [[274, "nilearn-glm-regressionresults"]], "nilearn.glm.SimpleRegressionResults": [[275, "nilearn-glm-simpleregressionresults"]], "nilearn.glm.TContrastResults": [[276, "nilearn-glm-tcontrastresults"]], "nilearn.glm.cluster_level_inference": [[277, "nilearn-glm-cluster-level-inference"]], "Examples using nilearn.glm.cluster_level_inference": [[277, "examples-using-nilearn-glm-cluster-level-inference"]], "nilearn.glm.compute_contrast": [[278, "nilearn-glm-compute-contrast"]], "Examples using nilearn.glm.compute_contrast": [[278, "examples-using-nilearn-glm-compute-contrast"]], "nilearn.glm.compute_fixed_effects": [[279, "nilearn-glm-compute-fixed-effects"]], "Examples using nilearn.glm.compute_fixed_effects": [[279, "examples-using-nilearn-glm-compute-fixed-effects"]], "nilearn.glm.expression_to_contrast_vector": [[280, "nilearn-glm-expression-to-contrast-vector"]], "nilearn.glm.fdr_threshold": [[281, "nilearn-glm-fdr-threshold"]], "nilearn.glm.first_level.FirstLevelModel": [[282, "nilearn-glm-first-level-firstlevelmodel"]], "Examples using nilearn.glm.first_level.FirstLevelModel": [[282, "examples-using-nilearn-glm-first-level-firstlevelmodel"]], "nilearn.glm.first_level.check_design_matrix": [[283, "nilearn-glm-first-level-check-design-matrix"]], "nilearn.glm.first_level.compute_regressor": [[284, "nilearn-glm-first-level-compute-regressor"]], "Examples using nilearn.glm.first_level.compute_regressor": [[284, "examples-using-nilearn-glm-first-level-compute-regressor"]], "nilearn.glm.first_level.first_level_from_bids": [[285, "nilearn-glm-first-level-first-level-from-bids"]], "Examples using nilearn.glm.first_level.first_level_from_bids": [[285, "examples-using-nilearn-glm-first-level-first-level-from-bids"]], "nilearn.glm.first_level.glover_dispersion_derivative": [[286, "nilearn-glm-first-level-glover-dispersion-derivative"]], "nilearn.glm.first_level.glover_hrf": [[287, "nilearn-glm-first-level-glover-hrf"]], "nilearn.glm.first_level.glover_time_derivative": [[288, "nilearn-glm-first-level-glover-time-derivative"]], "nilearn.glm.first_level.make_first_level_design_matrix": [[289, "nilearn-glm-first-level-make-first-level-design-matrix"]], "Examples using nilearn.glm.first_level.make_first_level_design_matrix": [[289, "examples-using-nilearn-glm-first-level-make-first-level-design-matrix"]], "nilearn.glm.first_level.mean_scaling": [[290, "nilearn-glm-first-level-mean-scaling"]], "nilearn.glm.first_level.run_glm": [[291, "nilearn-glm-first-level-run-glm"]], "Examples using nilearn.glm.first_level.run_glm": [[291, "examples-using-nilearn-glm-first-level-run-glm"]], "nilearn.glm.first_level.spm_dispersion_derivative": [[292, "nilearn-glm-first-level-spm-dispersion-derivative"]], "nilearn.glm.first_level.spm_hrf": [[293, "nilearn-glm-first-level-spm-hrf"]], "nilearn.glm.first_level.spm_time_derivative": [[294, "nilearn-glm-first-level-spm-time-derivative"]], "nilearn.glm.second_level.SecondLevelModel": [[295, "nilearn-glm-second-level-secondlevelmodel"]], "Examples using nilearn.glm.second_level.SecondLevelModel": [[295, "examples-using-nilearn-glm-second-level-secondlevelmodel"]], "nilearn.glm.second_level.make_second_level_design_matrix": [[296, "nilearn-glm-second-level-make-second-level-design-matrix"]], "Examples using nilearn.glm.second_level.make_second_level_design_matrix": [[296, "examples-using-nilearn-glm-second-level-make-second-level-design-matrix"]], "nilearn.glm.second_level.non_parametric_inference": [[297, "nilearn-glm-second-level-non-parametric-inference"]], "Examples using nilearn.glm.second_level.non_parametric_inference": [[297, "examples-using-nilearn-glm-second-level-non-parametric-inference"]], "nilearn.glm.threshold_stats_img": [[298, "nilearn-glm-threshold-stats-img"]], "Examples using nilearn.glm.threshold_stats_img": [[298, "examples-using-nilearn-glm-threshold-stats-img"]], "nilearn.image.binarize_img": [[299, "nilearn-image-binarize-img"]], "nilearn.image.clean_img": [[300, "nilearn-image-clean-img"]], "Examples using nilearn.image.clean_img": [[300, "examples-using-nilearn-image-clean-img"]], "nilearn.image.concat_imgs": [[301, "nilearn-image-concat-imgs"]], "Examples using nilearn.image.concat_imgs": [[301, "examples-using-nilearn-image-concat-imgs"]], "nilearn.image.coord_transform": [[302, "nilearn-image-coord-transform"]], "Examples using nilearn.image.coord_transform": [[302, "examples-using-nilearn-image-coord-transform"]], "nilearn.image.copy_img": [[303, "nilearn-image-copy-img"]], "nilearn.image.crop_img": [[304, "nilearn-image-crop-img"]], "nilearn.image.get_data": [[305, "nilearn-image-get-data"]], "Examples using nilearn.image.get_data": [[305, "examples-using-nilearn-image-get-data"]], "nilearn.image.high_variance_confounds": [[306, "nilearn-image-high-variance-confounds"]], "Examples using nilearn.image.high_variance_confounds": [[306, "examples-using-nilearn-image-high-variance-confounds"]], "nilearn.image.index_img": [[307, "nilearn-image-index-img"]], "Examples using nilearn.image.index_img": [[307, "examples-using-nilearn-image-index-img"]], "nilearn.image.iter_img": [[308, "nilearn-image-iter-img"]], "Examples using nilearn.image.iter_img": [[308, "examples-using-nilearn-image-iter-img"]], "nilearn.image.largest_connected_component_img": [[309, "nilearn-image-largest-connected-component-img"]], "nilearn.image.load_img": [[310, "nilearn-image-load-img"]], "Examples using nilearn.image.load_img": [[310, "examples-using-nilearn-image-load-img"]], "nilearn.image.math_img": [[311, "nilearn-image-math-img"]], "Examples using nilearn.image.math_img": [[311, "examples-using-nilearn-image-math-img"]], "nilearn.image.mean_img": [[312, "nilearn-image-mean-img"]], "Examples using nilearn.image.mean_img": [[312, "examples-using-nilearn-image-mean-img"]], "nilearn.image.new_img_like": [[313, "nilearn-image-new-img-like"]], "Examples using nilearn.image.new_img_like": [[313, "examples-using-nilearn-image-new-img-like"]], "nilearn.image.reorder_img": [[314, "nilearn-image-reorder-img"]], "nilearn.image.resample_img": [[315, "nilearn-image-resample-img"]], "Examples using nilearn.image.resample_img": [[315, "examples-using-nilearn-image-resample-img"]], "nilearn.image.resample_to_img": [[316, "nilearn-image-resample-to-img"]], "Examples using nilearn.image.resample_to_img": [[316, "examples-using-nilearn-image-resample-to-img"]], "nilearn.image.smooth_img": [[317, "nilearn-image-smooth-img"]], "Examples using nilearn.image.smooth_img": [[317, "examples-using-nilearn-image-smooth-img"]], "nilearn.image.swap_img_hemispheres": [[318, "nilearn-image-swap-img-hemispheres"]], "nilearn.image.threshold_img": [[319, "nilearn-image-threshold-img"]], "Examples using nilearn.image.threshold_img": [[319, "examples-using-nilearn-image-threshold-img"]], "nilearn.interfaces.bids.get_bids_files": [[320, "nilearn-interfaces-bids-get-bids-files"]], "nilearn.interfaces.bids.parse_bids_filename": [[321, "nilearn-interfaces-bids-parse-bids-filename"]], "nilearn.interfaces.bids.save_glm_to_bids": [[322, "nilearn-interfaces-bids-save-glm-to-bids"]], "Examples using nilearn.interfaces.bids.save_glm_to_bids": [[322, "examples-using-nilearn-interfaces-bids-save-glm-to-bids"]], "nilearn.interfaces.fmriprep.load_confounds": [[323, "nilearn-interfaces-fmriprep-load-confounds"]], "Examples using nilearn.interfaces.fmriprep.load_confounds": [[323, "examples-using-nilearn-interfaces-fmriprep-load-confounds"]], "nilearn.interfaces.fmriprep.load_confounds_strategy": [[324, "nilearn-interfaces-fmriprep-load-confounds-strategy"]], "Examples using nilearn.interfaces.fmriprep.load_confounds_strategy": [[324, "examples-using-nilearn-interfaces-fmriprep-load-confounds-strategy"]], "nilearn.interfaces.fsl.get_design_from_fslmat": [[325, "nilearn-interfaces-fsl-get-design-from-fslmat"]], "Examples using nilearn.interfaces.fsl.get_design_from_fslmat": [[325, "examples-using-nilearn-interfaces-fsl-get-design-from-fslmat"]], "nilearn.maskers.BaseMasker": [[326, "nilearn-maskers-basemasker"]], "Examples using nilearn.maskers.BaseMasker": [[326, "examples-using-nilearn-maskers-basemasker"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[327, "nilearn-maskers-multiniftilabelsmasker"]], "Examples using nilearn.maskers.MultiNiftiLabelsMasker": [[327, "examples-using-nilearn-maskers-multiniftilabelsmasker"]], "nilearn.maskers.MultiNiftiMapsMasker": [[328, "nilearn-maskers-multiniftimapsmasker"]], "Examples using nilearn.maskers.MultiNiftiMapsMasker": [[328, "examples-using-nilearn-maskers-multiniftimapsmasker"]], "nilearn.maskers.MultiNiftiMasker": [[329, "nilearn-maskers-multiniftimasker"]], "Examples using nilearn.maskers.MultiNiftiMasker": [[329, "examples-using-nilearn-maskers-multiniftimasker"]], "nilearn.maskers.NiftiLabelsMasker": [[330, "nilearn-maskers-niftilabelsmasker"]], "Examples using nilearn.maskers.NiftiLabelsMasker": [[330, "examples-using-nilearn-maskers-niftilabelsmasker"]], "nilearn.maskers.NiftiMapsMasker": [[331, "nilearn-maskers-niftimapsmasker"]], "Examples using nilearn.maskers.NiftiMapsMasker": [[331, "examples-using-nilearn-maskers-niftimapsmasker"]], "nilearn.maskers.NiftiMasker": [[332, "nilearn-maskers-niftimasker"]], "Examples using nilearn.maskers.NiftiMasker": [[332, "examples-using-nilearn-maskers-niftimasker"]], "nilearn.maskers.NiftiSpheresMasker": [[333, "nilearn-maskers-niftispheresmasker"]], "Examples using nilearn.maskers.NiftiSpheresMasker": [[333, "examples-using-nilearn-maskers-niftispheresmasker"]], "nilearn.masking.apply_mask": [[334, "nilearn-masking-apply-mask"]], "Examples using nilearn.masking.apply_mask": [[334, "examples-using-nilearn-masking-apply-mask"]], "nilearn.masking.compute_background_mask": [[335, "nilearn-masking-compute-background-mask"]], "nilearn.masking.compute_brain_mask": [[336, "nilearn-masking-compute-brain-mask"]], "nilearn.masking.compute_epi_mask": [[337, "nilearn-masking-compute-epi-mask"]], "Examples using nilearn.masking.compute_epi_mask": [[337, "examples-using-nilearn-masking-compute-epi-mask"]], "nilearn.masking.compute_multi_background_mask": [[338, "nilearn-masking-compute-multi-background-mask"]], "nilearn.masking.compute_multi_brain_mask": [[339, "nilearn-masking-compute-multi-brain-mask"]], "nilearn.masking.compute_multi_epi_mask": [[340, "nilearn-masking-compute-multi-epi-mask"]], "nilearn.masking.intersect_masks": [[341, "nilearn-masking-intersect-masks"]], "nilearn.masking.unmask": [[342, "nilearn-masking-unmask"]], "Examples using nilearn.masking.unmask": [[342, "examples-using-nilearn-masking-unmask"]], "nilearn.mass_univariate.permuted_ols": [[343, "nilearn-mass-univariate-permuted-ols"]], "Examples using nilearn.mass_univariate.permuted_ols": [[343, "examples-using-nilearn-mass-univariate-permuted-ols"]], "nilearn.plotting.displays.BaseAxes": [[344, "nilearn-plotting-displays-baseaxes"]], "nilearn.plotting.displays.BaseSlicer": [[345, "nilearn-plotting-displays-baseslicer"]], "nilearn.plotting.displays.CutAxes": [[346, "nilearn-plotting-displays-cutaxes"]], "nilearn.plotting.displays.GlassBrainAxes": [[347, "nilearn-plotting-displays-glassbrainaxes"]], "nilearn.plotting.displays.LProjector": [[348, "nilearn-plotting-displays-lprojector"]], "Examples using nilearn.plotting.displays.LProjector": [[348, "examples-using-nilearn-plotting-displays-lprojector"]], "nilearn.plotting.displays.LRProjector": [[349, "nilearn-plotting-displays-lrprojector"]], "Examples using nilearn.plotting.displays.LRProjector": [[349, "examples-using-nilearn-plotting-displays-lrprojector"]], "nilearn.plotting.displays.LYRProjector": [[350, "nilearn-plotting-displays-lyrprojector"]], "Examples using nilearn.plotting.displays.LYRProjector": [[350, "examples-using-nilearn-plotting-displays-lyrprojector"]], "nilearn.plotting.displays.LYRZProjector": [[351, "nilearn-plotting-displays-lyrzprojector"]], "Examples using nilearn.plotting.displays.LYRZProjector": [[351, "examples-using-nilearn-plotting-displays-lyrzprojector"]], "nilearn.plotting.displays.LZRProjector": [[352, "nilearn-plotting-displays-lzrprojector"]], "Examples using nilearn.plotting.displays.LZRProjector": [[352, "examples-using-nilearn-plotting-displays-lzrprojector"]], "nilearn.plotting.displays.LZRYProjector": [[353, "nilearn-plotting-displays-lzryprojector"]], "Examples using nilearn.plotting.displays.LZRYProjector": [[353, "examples-using-nilearn-plotting-displays-lzryprojector"]], "nilearn.plotting.displays.MosaicSlicer": [[354, "nilearn-plotting-displays-mosaicslicer"]], "Examples using nilearn.plotting.displays.MosaicSlicer": [[354, "examples-using-nilearn-plotting-displays-mosaicslicer"]], "nilearn.plotting.displays.OrthoProjector": [[355, "nilearn-plotting-displays-orthoprojector"]], "Examples using nilearn.plotting.displays.OrthoProjector": [[355, "examples-using-nilearn-plotting-displays-orthoprojector"]], "nilearn.plotting.displays.OrthoSlicer": [[356, "nilearn-plotting-displays-orthoslicer"]], "Examples using nilearn.plotting.displays.OrthoSlicer": [[356, "examples-using-nilearn-plotting-displays-orthoslicer"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[357, "nilearn-plotting-displays-plotlysurfacefigure"]], "Examples using nilearn.plotting.displays.PlotlySurfaceFigure": [[357, "examples-using-nilearn-plotting-displays-plotlysurfacefigure"]], "nilearn.plotting.displays.RProjector": [[358, "nilearn-plotting-displays-rprojector"]], "Examples using nilearn.plotting.displays.RProjector": [[358, "examples-using-nilearn-plotting-displays-rprojector"]], "nilearn.plotting.displays.TiledSlicer": [[359, "nilearn-plotting-displays-tiledslicer"]], "Examples using nilearn.plotting.displays.TiledSlicer": [[359, "examples-using-nilearn-plotting-displays-tiledslicer"]], "nilearn.plotting.displays.XProjector": [[360, "nilearn-plotting-displays-xprojector"]], "Examples using nilearn.plotting.displays.XProjector": [[360, "examples-using-nilearn-plotting-displays-xprojector"]], "nilearn.plotting.displays.XSlicer": [[361, "nilearn-plotting-displays-xslicer"]], "Examples using nilearn.plotting.displays.XSlicer": [[361, "examples-using-nilearn-plotting-displays-xslicer"]], "nilearn.plotting.displays.XZProjector": [[362, "nilearn-plotting-displays-xzprojector"]], "Examples using nilearn.plotting.displays.XZProjector": [[362, "examples-using-nilearn-plotting-displays-xzprojector"]], "nilearn.plotting.displays.XZSlicer": [[363, "nilearn-plotting-displays-xzslicer"]], "Examples using nilearn.plotting.displays.XZSlicer": [[363, "examples-using-nilearn-plotting-displays-xzslicer"]], "nilearn.plotting.displays.YProjector": [[364, "nilearn-plotting-displays-yprojector"]], "Examples using nilearn.plotting.displays.YProjector": [[364, "examples-using-nilearn-plotting-displays-yprojector"]], "nilearn.plotting.displays.YSlicer": [[365, "nilearn-plotting-displays-yslicer"]], "Examples using nilearn.plotting.displays.YSlicer": [[365, "examples-using-nilearn-plotting-displays-yslicer"]], "nilearn.plotting.displays.YXProjector": [[366, "nilearn-plotting-displays-yxprojector"]], "Examples using nilearn.plotting.displays.YXProjector": [[366, "examples-using-nilearn-plotting-displays-yxprojector"]], "nilearn.plotting.displays.YXSlicer": [[367, "nilearn-plotting-displays-yxslicer"]], "Examples using nilearn.plotting.displays.YXSlicer": [[367, "examples-using-nilearn-plotting-displays-yxslicer"]], "nilearn.plotting.displays.YZProjector": [[368, "nilearn-plotting-displays-yzprojector"]], "Examples using nilearn.plotting.displays.YZProjector": [[368, "examples-using-nilearn-plotting-displays-yzprojector"]], "nilearn.plotting.displays.YZSlicer": [[369, "nilearn-plotting-displays-yzslicer"]], "Examples using nilearn.plotting.displays.YZSlicer": [[369, "examples-using-nilearn-plotting-displays-yzslicer"]], "nilearn.plotting.displays.ZProjector": [[370, "nilearn-plotting-displays-zprojector"]], "Examples using nilearn.plotting.displays.ZProjector": [[370, "examples-using-nilearn-plotting-displays-zprojector"]], "nilearn.plotting.displays.ZSlicer": [[371, "nilearn-plotting-displays-zslicer"]], "Examples using nilearn.plotting.displays.ZSlicer": [[371, "examples-using-nilearn-plotting-displays-zslicer"]], "nilearn.plotting.displays.get_projector": [[372, "nilearn-plotting-displays-get-projector"]], "nilearn.plotting.displays.get_slicer": [[373, "nilearn-plotting-displays-get-slicer"]], "nilearn.plotting.find_cut_slices": [[374, "nilearn-plotting-find-cut-slices"]], "nilearn.plotting.find_parcellation_cut_coords": [[375, "nilearn-plotting-find-parcellation-cut-coords"]], "Examples using nilearn.plotting.find_parcellation_cut_coords": [[375, "examples-using-nilearn-plotting-find-parcellation-cut-coords"]], "nilearn.plotting.find_probabilistic_atlas_cut_coords": [[376, "nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "Examples using nilearn.plotting.find_probabilistic_atlas_cut_coords": [[376, "examples-using-nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "nilearn.plotting.find_xyz_cut_coords": [[377, "nilearn-plotting-find-xyz-cut-coords"]], "Examples using nilearn.plotting.find_xyz_cut_coords": [[377, "examples-using-nilearn-plotting-find-xyz-cut-coords"]], "nilearn.plotting.plot_anat": [[378, "nilearn-plotting-plot-anat"]], "Examples using nilearn.plotting.plot_anat": [[378, "examples-using-nilearn-plotting-plot-anat"]], "nilearn.plotting.plot_carpet": [[379, "nilearn-plotting-plot-carpet"]], "Examples using nilearn.plotting.plot_carpet": [[379, "examples-using-nilearn-plotting-plot-carpet"]], "nilearn.plotting.plot_connectome": [[380, "nilearn-plotting-plot-connectome"]], "Examples using nilearn.plotting.plot_connectome": [[380, "examples-using-nilearn-plotting-plot-connectome"]], "nilearn.plotting.plot_contrast_matrix": [[381, "nilearn-plotting-plot-contrast-matrix"]], "Examples using nilearn.plotting.plot_contrast_matrix": [[381, "examples-using-nilearn-plotting-plot-contrast-matrix"]], "nilearn.plotting.plot_design_matrix": [[382, "nilearn-plotting-plot-design-matrix"]], "Examples using nilearn.plotting.plot_design_matrix": [[382, "examples-using-nilearn-plotting-plot-design-matrix"]], "nilearn.plotting.plot_epi": [[383, "nilearn-plotting-plot-epi"]], "Examples using nilearn.plotting.plot_epi": [[383, "examples-using-nilearn-plotting-plot-epi"]], "nilearn.plotting.plot_event": [[384, "nilearn-plotting-plot-event"]], "Examples using nilearn.plotting.plot_event": [[384, "examples-using-nilearn-plotting-plot-event"]], "nilearn.plotting.plot_glass_brain": [[385, "nilearn-plotting-plot-glass-brain"]], "Examples using nilearn.plotting.plot_glass_brain": [[385, "examples-using-nilearn-plotting-plot-glass-brain"]], "nilearn.plotting.plot_img": [[386, "nilearn-plotting-plot-img"]], "Examples using nilearn.plotting.plot_img": [[386, "examples-using-nilearn-plotting-plot-img"]], "nilearn.plotting.plot_img_comparison": [[387, "nilearn-plotting-plot-img-comparison"]], "Examples using nilearn.plotting.plot_img_comparison": [[387, "examples-using-nilearn-plotting-plot-img-comparison"]], "nilearn.plotting.plot_img_on_surf": [[388, "nilearn-plotting-plot-img-on-surf"]], "Examples using nilearn.plotting.plot_img_on_surf": [[388, "examples-using-nilearn-plotting-plot-img-on-surf"]], "nilearn.plotting.plot_markers": [[389, "nilearn-plotting-plot-markers"]], "Examples using nilearn.plotting.plot_markers": [[389, "examples-using-nilearn-plotting-plot-markers"]], "nilearn.plotting.plot_matrix": [[390, "nilearn-plotting-plot-matrix"]], "Examples using nilearn.plotting.plot_matrix": [[390, "examples-using-nilearn-plotting-plot-matrix"]], "nilearn.plotting.plot_prob_atlas": [[391, "nilearn-plotting-plot-prob-atlas"]], "Examples using nilearn.plotting.plot_prob_atlas": [[391, "examples-using-nilearn-plotting-plot-prob-atlas"]], "nilearn.plotting.plot_roi": [[392, "nilearn-plotting-plot-roi"]], "Examples using nilearn.plotting.plot_roi": [[392, "examples-using-nilearn-plotting-plot-roi"]], "nilearn.plotting.plot_stat_map": [[393, "nilearn-plotting-plot-stat-map"]], "Examples using nilearn.plotting.plot_stat_map": [[393, "examples-using-nilearn-plotting-plot-stat-map"]], "nilearn.plotting.plot_surf": [[394, "nilearn-plotting-plot-surf"]], "Examples using nilearn.plotting.plot_surf": [[394, "examples-using-nilearn-plotting-plot-surf"]], "nilearn.plotting.plot_surf_contours": [[395, "nilearn-plotting-plot-surf-contours"]], "Examples using nilearn.plotting.plot_surf_contours": [[395, "examples-using-nilearn-plotting-plot-surf-contours"]], "nilearn.plotting.plot_surf_roi": [[396, "nilearn-plotting-plot-surf-roi"]], "Examples using nilearn.plotting.plot_surf_roi": [[396, "examples-using-nilearn-plotting-plot-surf-roi"]], "nilearn.plotting.plot_surf_stat_map": [[397, "nilearn-plotting-plot-surf-stat-map"]], "Examples using nilearn.plotting.plot_surf_stat_map": [[397, "examples-using-nilearn-plotting-plot-surf-stat-map"]], "nilearn.plotting.show": [[398, "nilearn-plotting-show"]], "Examples using nilearn.plotting.show": [[398, "examples-using-nilearn-plotting-show"]], "nilearn.plotting.view_connectome": [[399, "nilearn-plotting-view-connectome"]], "Examples using nilearn.plotting.view_connectome": [[399, "examples-using-nilearn-plotting-view-connectome"]], "nilearn.plotting.view_img": [[400, "nilearn-plotting-view-img"]], "Examples using nilearn.plotting.view_img": [[400, "examples-using-nilearn-plotting-view-img"]], "nilearn.plotting.view_img_on_surf": [[401, "nilearn-plotting-view-img-on-surf"]], "Examples using nilearn.plotting.view_img_on_surf": [[401, "examples-using-nilearn-plotting-view-img-on-surf"]], "nilearn.plotting.view_markers": [[402, "nilearn-plotting-view-markers"]], "nilearn.plotting.view_surf": [[403, "nilearn-plotting-view-surf"]], "Examples using nilearn.plotting.view_surf": [[403, "examples-using-nilearn-plotting-view-surf"]], "nilearn.regions.HierarchicalKMeans": [[404, "nilearn-regions-hierarchicalkmeans"]], "nilearn.regions.Parcellations": [[405, "nilearn-regions-parcellations"]], "Examples using nilearn.regions.Parcellations": [[405, "examples-using-nilearn-regions-parcellations"]], "nilearn.regions.ReNA": [[406, "nilearn-regions-rena"]], "nilearn.regions.RegionExtractor": [[407, "nilearn-regions-regionextractor"]], "Examples using nilearn.regions.RegionExtractor": [[407, "examples-using-nilearn-regions-regionextractor"]], "nilearn.regions.connected_label_regions": [[408, "nilearn-regions-connected-label-regions"]], "Examples using nilearn.regions.connected_label_regions": [[408, "examples-using-nilearn-regions-connected-label-regions"]], "nilearn.regions.connected_regions": [[409, "nilearn-regions-connected-regions"]], "Examples using nilearn.regions.connected_regions": [[409, "examples-using-nilearn-regions-connected-regions"]], "nilearn.regions.img_to_signals_labels": [[410, "nilearn-regions-img-to-signals-labels"]], "nilearn.regions.img_to_signals_maps": [[411, "nilearn-regions-img-to-signals-maps"]], "nilearn.regions.recursive_neighbor_agglomeration": [[412, "nilearn-regions-recursive-neighbor-agglomeration"]], "nilearn.regions.signals_to_img_labels": [[413, "nilearn-regions-signals-to-img-labels"]], "nilearn.regions.signals_to_img_maps": [[414, "nilearn-regions-signals-to-img-maps"]], "nilearn.reporting.HTMLReport": [[415, "nilearn-reporting-htmlreport"]], "Examples using nilearn.reporting.HTMLReport": [[415, "examples-using-nilearn-reporting-htmlreport"]], "nilearn.reporting.get_clusters_table": [[416, "nilearn-reporting-get-clusters-table"]], "Examples using nilearn.reporting.get_clusters_table": [[416, "examples-using-nilearn-reporting-get-clusters-table"]], "nilearn.reporting.make_glm_report": [[417, "nilearn-reporting-make-glm-report"]], "Examples using nilearn.reporting.make_glm_report": [[417, "examples-using-nilearn-reporting-make-glm-report"]], "nilearn.signal.butterworth": [[418, "nilearn-signal-butterworth"]], "nilearn.signal.clean": [[419, "nilearn-signal-clean"]], "nilearn.signal.high_variance_confounds": [[420, "nilearn-signal-high-variance-confounds"]], "nilearn.surface.load_surf_data": [[421, "nilearn-surface-load-surf-data"]], "Examples using nilearn.surface.load_surf_data": [[421, "examples-using-nilearn-surface-load-surf-data"]], "nilearn.surface.load_surf_mesh": [[422, "nilearn-surface-load-surf-mesh"]], "Examples using nilearn.surface.load_surf_mesh": [[422, "examples-using-nilearn-surface-load-surf-mesh"]], "nilearn.surface.vol_to_surf": [[423, "nilearn-surface-vol-to-surf"]], "Examples using nilearn.surface.vol_to_surf": [[423, "examples-using-nilearn-surface-vol-to-surf"]], "nilearn.glm: Generalized Linear Models": [[424, "module-nilearn.glm"]], "nilearn.glm.first_level": [[424, "module-nilearn.glm.first_level"]], "nilearn.glm.second_level": [[424, "module-nilearn.glm.second_level"]], "nilearn.image: Image Processing and Resampling Utilities": [[425, "module-nilearn.image"]], "API References": [[426, "api-references"]], "nilearn.interfaces: Loading components from interfaces": [[427, "module-nilearn.interfaces"]], "nilearn.interfaces.bids": [[427, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.fmriprep": [[427, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fsl": [[427, "module-nilearn.interfaces.fsl"]], "nilearn.maskers: Extracting Signals from Brain Images": [[428, "module-nilearn.maskers"]], "nilearn.masking: Data Masking Utilities": [[429, "module-nilearn.masking"]], "nilearn.mass_univariate: Mass-Univariate Analysis": [[430, "module-nilearn.mass_univariate"]], "nilearn.plotting: Plotting Brain Data": [[431, "module-nilearn.plotting"]], "nilearn.plotting.displays: Interacting with figures": [[431, "module-nilearn.plotting.displays"]], "nilearn.regions: Operating on Regions": [[432, "module-nilearn.regions"]], "nilearn.reporting: Reporting Functions": [[433, "module-nilearn.reporting"]], "nilearn.signal: Preprocessing Time Series": [[434, "module-nilearn.signal"]], "nilearn.surface: Manipulating Surface Data": [[435, "module-nilearn.surface"]], "Plotting brain images": [[436, "plotting-brain-images"]], "Code examples": [[436, null]], "Different plotting functions": [[436, "different-plotting-functions"]], "Different display modes": [[436, "different-display-modes"]], "Available Colormaps": [[436, "available-colormaps"]], "Adding overlays, edges, contours, contour fillings, markers, scale bar": [[436, "adding-overlays-edges-contours-contour-fillings-markers-scale-bar"]], "Displaying or saving to an image file": [[436, "displaying-or-saving-to-an-image-file"]], "Surface plotting": [[436, "surface-plotting"]], "Interactive plots": [[436, "interactive-plots"]], "3D Plots of statistical maps or atlases on the cortical surface": [[436, "d-plots-of-statistical-maps-or-atlases-on-the-cortical-surface"]], "view_img_on_surf: Surface plot using a 3D statistical map": [[436, "view-img-on-surf-surface-plot-using-a-3d-statistical-map"]], "view_surf: Surface plot using a surface map and a cortical mesh": [[436, "view-surf-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "plot_surf_stat_map: Surface plot using a surface map and a cortical mesh": [[436, "plot-surf-stat-map-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "3D Plots of connectomes": [[436, "d-plots-of-connectomes"]], "3D Plots of markers": [[436, "d-plots-of-markers"]], "Interactive visualization of statistical map slices": [[436, "interactive-visualization-of-statistical-map-slices"]], "Quickstart": [[437, "quickstart"]], "nilearn": [[437, "nilearn"]], "Important links": [[437, "important-links"]], "Install": [[437, "install"]], "Latest release": [[437, "latest-release"]], "Development version": [[437, "development-version"]], "Check installation": [[437, "check-installation"]], "Drop-in Hours": [[437, "drop-in-hours"]], "Dependencies": [[437, "dependencies"]], "Development": [[437, "development"]], "User guide": [[438, "user-guide"]], "Table of contents": [[438, "table-of-contents"]]}, "indexentries": {"anova": [[173, "term-ANOVA"]], "auc": [[173, "term-AUC"]], "bids": [[173, "term-BIDS"]], "bold": [[173, "term-BOLD"]], "beta": [[173, "term-Beta"]], "canica": [[173, "term-CanICA"]], "closing": [[173, "term-Closing"]], "decoding": [[173, "term-Decoding"]], "deterministic atlas": [[173, "term-Deterministic-atlas"]], "dictionary learning": [[173, "term-Dictionary-learning"]], "dilation": [[173, "term-Dilation"]], "eeg": [[173, "term-EEG"]], "epi": [[173, "term-EPI"]], "erosion": [[173, "term-Erosion"]], "fdr correction": [[173, "term-FDR-correction"]], "fir": [[173, "term-FIR"]], "fpr correction": [[173, "term-FPR-correction"]], "frem": [[173, "term-FREM"]], "fwer correction": [[173, "term-FWER-correction"]], "fwhm": [[173, "term-FWHM"]], "glm": [[173, "term-GLM"]], "hrf": [[173, "term-HRF"]], "ica": [[173, "term-ICA"]], "meg": [[173, "term-MEG"]], "mni": [[173, "term-MNI"]], "mvpa": [[173, "term-MVPA"]], "neurovault": [[173, "term-Neurovault"]], "opening": [[173, "term-Opening"]], "parameter estimate": [[173, "term-Parameter-estimate"]], "probabilistic atlas": [[173, "term-Probabilistic-atlas"]], "roc": [[173, "term-ROC"]], "rena": [[173, "term-ReNA"]], "snr": [[173, "term-SNR"]], "spm": [[173, "term-SPM"]], "svm": [[173, "term-SVM"]], "searchlight": [[173, "term-Searchlight"]], "spacenet": [[173, "term-SpaceNet"]], "tfce": [[173, "term-TFCE"]], "tr": [[173, "term-TR"]], "unsupervised learning": [[173, "term-Unsupervised-learning"]], "vbm": [[173, "term-VBM"]], "ward clustering": [[173, "term-Ward-clustering"]], "classification": [[173, "term-classification"]], "contrast": [[173, "term-contrast"]], "fmri": [[173, "term-fMRI"]], "fmriprep": [[173, "term-fMRIPrep"]], "functional connectivity": [[173, "term-functional-connectivity"]], "functional connectome": [[173, "term-functional-connectome"]], "parcellation": [[173, "term-parcellation"]], "predictive modelling": [[173, "term-predictive-modelling"]], "regression": [[173, "term-regression"]], "resting-state": [[173, "term-resting-state"]], "supervised learning": [[173, "term-supervised-learning"]], "voxel": [[173, "term-voxel"]], "module": [[181, "module-nilearn.connectome"], [182, "module-nilearn.datasets"], [183, "module-nilearn.decoding"], [184, "module-nilearn.decomposition"], [185, "module-nilearn.experimental"], [424, "module-nilearn.glm"], [424, "module-nilearn.glm.first_level"], [424, "module-nilearn.glm.second_level"], [425, "module-nilearn.image"], [427, "module-nilearn.interfaces"], [427, "module-nilearn.interfaces.bids"], [427, "module-nilearn.interfaces.fmriprep"], [427, "module-nilearn.interfaces.fsl"], [428, "module-nilearn.maskers"], [429, "module-nilearn.masking"], [430, "module-nilearn.mass_univariate"], [431, "module-nilearn.plotting"], [431, "module-nilearn.plotting.displays"], [432, "module-nilearn.regions"], [433, "module-nilearn.reporting"], [434, "module-nilearn.signal"], [435, "module-nilearn.surface"]], "nilearn.connectome": [[181, "module-nilearn.connectome"]], "nilearn.datasets": [[182, "module-nilearn.datasets"]], "nilearn.decoding": [[183, "module-nilearn.decoding"]], "nilearn.decomposition": [[184, "module-nilearn.decomposition"]], "nilearn.experimental": [[185, "module-nilearn.experimental"]], "connectivitymeasure (class in nilearn.connectome)": [[186, "nilearn.connectome.ConnectivityMeasure"]], "__init__() (nilearn.connectome.connectivitymeasure method)": [[186, "nilearn.connectome.ConnectivityMeasure.__init__"]], "fit() (nilearn.connectome.connectivitymeasure method)": [[186, "nilearn.connectome.ConnectivityMeasure.fit"]], "fit_transform() (nilearn.connectome.connectivitymeasure method)": [[186, "nilearn.connectome.ConnectivityMeasure.fit_transform"]], "get_metadata_routing() (nilearn.connectome.connectivitymeasure method)": [[186, "nilearn.connectome.ConnectivityMeasure.get_metadata_routing"]], "get_params() (nilearn.connectome.connectivitymeasure method)": [[186, "nilearn.connectome.ConnectivityMeasure.get_params"]], "inverse_transform() (nilearn.connectome.connectivitymeasure method)": [[186, "nilearn.connectome.ConnectivityMeasure.inverse_transform"]], "set_inverse_transform_request() (nilearn.connectome.connectivitymeasure method)": [[186, "nilearn.connectome.ConnectivityMeasure.set_inverse_transform_request"]], "set_output() (nilearn.connectome.connectivitymeasure method)": [[186, "nilearn.connectome.ConnectivityMeasure.set_output"]], "set_params() (nilearn.connectome.connectivitymeasure method)": [[186, "nilearn.connectome.ConnectivityMeasure.set_params"]], "set_transform_request() (nilearn.connectome.connectivitymeasure method)": [[186, "nilearn.connectome.ConnectivityMeasure.set_transform_request"]], "transform() (nilearn.connectome.connectivitymeasure method)": [[186, "nilearn.connectome.ConnectivityMeasure.transform"]], "groupsparsecovariance (class in nilearn.connectome)": [[187, "nilearn.connectome.GroupSparseCovariance"]], "__init__() (nilearn.connectome.groupsparsecovariance method)": [[187, "nilearn.connectome.GroupSparseCovariance.__init__"]], "fit() (nilearn.connectome.groupsparsecovariance method)": [[187, "nilearn.connectome.GroupSparseCovariance.fit"]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariance method)": [[187, "nilearn.connectome.GroupSparseCovariance.get_metadata_routing"]], "get_params() (nilearn.connectome.groupsparsecovariance method)": [[187, "nilearn.connectome.GroupSparseCovariance.get_params"]], "set_fit_request() (nilearn.connectome.groupsparsecovariance method)": [[187, "nilearn.connectome.GroupSparseCovariance.set_fit_request"]], "set_params() (nilearn.connectome.groupsparsecovariance method)": [[187, "nilearn.connectome.GroupSparseCovariance.set_params"]], "groupsparsecovariancecv (class in nilearn.connectome)": [[188, "nilearn.connectome.GroupSparseCovarianceCV"]], "__init__() (nilearn.connectome.groupsparsecovariancecv method)": [[188, "nilearn.connectome.GroupSparseCovarianceCV.__init__"]], "fit() (nilearn.connectome.groupsparsecovariancecv method)": [[188, "nilearn.connectome.GroupSparseCovarianceCV.fit"]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariancecv method)": [[188, "nilearn.connectome.GroupSparseCovarianceCV.get_metadata_routing"]], "get_params() (nilearn.connectome.groupsparsecovariancecv method)": [[188, "nilearn.connectome.GroupSparseCovarianceCV.get_params"]], "set_fit_request() (nilearn.connectome.groupsparsecovariancecv method)": [[188, "nilearn.connectome.GroupSparseCovarianceCV.set_fit_request"]], "set_params() (nilearn.connectome.groupsparsecovariancecv method)": [[188, "nilearn.connectome.GroupSparseCovarianceCV.set_params"]], "cov_to_corr() (in module nilearn.connectome)": [[189, "nilearn.connectome.cov_to_corr"]], "group_sparse_covariance() (in module nilearn.connectome)": [[190, "nilearn.connectome.group_sparse_covariance"]], "prec_to_partial() (in module nilearn.connectome)": [[191, "nilearn.connectome.prec_to_partial"]], "sym_matrix_to_vec() (in module nilearn.connectome)": [[192, "nilearn.connectome.sym_matrix_to_vec"]], "vec_to_sym_matrix() (in module nilearn.connectome)": [[193, "nilearn.connectome.vec_to_sym_matrix"]], "fetch_abide_pcp() (in module nilearn.datasets)": [[194, "nilearn.datasets.fetch_abide_pcp"]], "fetch_adhd() (in module nilearn.datasets)": [[195, "nilearn.datasets.fetch_adhd"]], "fetch_atlas_aal() (in module nilearn.datasets)": [[196, "nilearn.datasets.fetch_atlas_aal"]], "fetch_atlas_allen_2011() (in module nilearn.datasets)": [[197, "nilearn.datasets.fetch_atlas_allen_2011"]], "fetch_atlas_basc_multiscale_2015() (in module nilearn.datasets)": [[198, "nilearn.datasets.fetch_atlas_basc_multiscale_2015"]], "fetch_atlas_craddock_2012() (in module nilearn.datasets)": [[199, "nilearn.datasets.fetch_atlas_craddock_2012"]], "fetch_atlas_destrieux_2009() (in module nilearn.datasets)": [[200, "nilearn.datasets.fetch_atlas_destrieux_2009"]], "fetch_atlas_difumo() (in module nilearn.datasets)": [[201, "nilearn.datasets.fetch_atlas_difumo"]], "fetch_atlas_harvard_oxford() (in module nilearn.datasets)": [[202, "nilearn.datasets.fetch_atlas_harvard_oxford"]], "fetch_atlas_juelich() (in module nilearn.datasets)": [[203, "nilearn.datasets.fetch_atlas_juelich"]], "fetch_atlas_msdl() (in module nilearn.datasets)": [[204, "nilearn.datasets.fetch_atlas_msdl"]], "fetch_atlas_pauli_2017() (in module nilearn.datasets)": [[205, "nilearn.datasets.fetch_atlas_pauli_2017"]], "fetch_atlas_schaefer_2018() (in module nilearn.datasets)": [[206, "nilearn.datasets.fetch_atlas_schaefer_2018"]], "fetch_atlas_smith_2009() (in module nilearn.datasets)": [[207, "nilearn.datasets.fetch_atlas_smith_2009"]], "fetch_atlas_surf_destrieux() (in module nilearn.datasets)": [[208, "nilearn.datasets.fetch_atlas_surf_destrieux"]], "fetch_atlas_talairach() (in module nilearn.datasets)": [[209, "nilearn.datasets.fetch_atlas_talairach"]], "fetch_atlas_yeo_2011() (in module nilearn.datasets)": [[210, "nilearn.datasets.fetch_atlas_yeo_2011"]], "fetch_bids_langloc_dataset() (in module nilearn.datasets)": [[211, "nilearn.datasets.fetch_bids_langloc_dataset"]], "fetch_coords_dosenbach_2010() (in module nilearn.datasets)": [[212, "nilearn.datasets.fetch_coords_dosenbach_2010"]], "fetch_coords_power_2011() (in module nilearn.datasets)": [[213, "nilearn.datasets.fetch_coords_power_2011"]], "fetch_coords_seitzman_2018() (in module nilearn.datasets)": [[214, "nilearn.datasets.fetch_coords_seitzman_2018"]], "fetch_development_fmri() (in module nilearn.datasets)": [[215, "nilearn.datasets.fetch_development_fmri"]], "fetch_ds000030_urls() (in module nilearn.datasets)": [[216, "nilearn.datasets.fetch_ds000030_urls"]], "fetch_fiac_first_level() (in module nilearn.datasets)": [[217, "nilearn.datasets.fetch_fiac_first_level"]], "fetch_haxby() (in module nilearn.datasets)": [[218, "nilearn.datasets.fetch_haxby"]], "fetch_icbm152_2009() (in module nilearn.datasets)": [[219, "nilearn.datasets.fetch_icbm152_2009"]], "fetch_icbm152_brain_gm_mask() (in module nilearn.datasets)": [[220, "nilearn.datasets.fetch_icbm152_brain_gm_mask"]], "fetch_language_localizer_demo_dataset() (in module nilearn.datasets)": [[221, "nilearn.datasets.fetch_language_localizer_demo_dataset"]], "fetch_localizer_button_task() (in module nilearn.datasets)": [[222, "nilearn.datasets.fetch_localizer_button_task"]], "fetch_localizer_calculation_task() (in module nilearn.datasets)": [[223, "nilearn.datasets.fetch_localizer_calculation_task"]], "fetch_localizer_contrasts() (in module nilearn.datasets)": [[224, "nilearn.datasets.fetch_localizer_contrasts"]], "fetch_localizer_first_level() (in module nilearn.datasets)": [[225, "nilearn.datasets.fetch_localizer_first_level"]], "fetch_megatrawls_netmats() (in module nilearn.datasets)": [[226, "nilearn.datasets.fetch_megatrawls_netmats"]], "fetch_mixed_gambles() (in module nilearn.datasets)": [[227, "nilearn.datasets.fetch_mixed_gambles"]], "fetch_miyawaki2008() (in module nilearn.datasets)": [[228, "nilearn.datasets.fetch_miyawaki2008"]], "fetch_neurovault() (in module nilearn.datasets)": [[229, "nilearn.datasets.fetch_neurovault"]], "fetch_neurovault_auditory_computation_task() (in module nilearn.datasets)": [[230, "nilearn.datasets.fetch_neurovault_auditory_computation_task"]], "fetch_neurovault_ids() (in module nilearn.datasets)": [[231, "nilearn.datasets.fetch_neurovault_ids"]], "fetch_neurovault_motor_task() (in module nilearn.datasets)": [[232, "nilearn.datasets.fetch_neurovault_motor_task"]], "fetch_oasis_vbm() (in module nilearn.datasets)": [[233, "nilearn.datasets.fetch_oasis_vbm"]], "fetch_openneuro_dataset() (in module nilearn.datasets)": [[234, "nilearn.datasets.fetch_openneuro_dataset"]], "fetch_openneuro_dataset_index() (in module nilearn.datasets)": [[235, "nilearn.datasets.fetch_openneuro_dataset_index"]], "fetch_spm_auditory() (in module nilearn.datasets)": [[236, "nilearn.datasets.fetch_spm_auditory"]], "fetch_spm_multimodal_fmri() (in module nilearn.datasets)": [[237, "nilearn.datasets.fetch_spm_multimodal_fmri"]], "fetch_surf_fsaverage() (in module nilearn.datasets)": [[238, "nilearn.datasets.fetch_surf_fsaverage"]], "fetch_surf_nki_enhanced() (in module nilearn.datasets)": [[239, "nilearn.datasets.fetch_surf_nki_enhanced"]], "get_data_dirs() (in module nilearn.datasets)": [[240, "nilearn.datasets.get_data_dirs"]], "load_mni152_brain_mask() (in module nilearn.datasets)": [[241, "nilearn.datasets.load_mni152_brain_mask"]], "load_mni152_gm_mask() (in module nilearn.datasets)": [[242, "nilearn.datasets.load_mni152_gm_mask"]], "load_mni152_gm_template() (in module nilearn.datasets)": [[243, "nilearn.datasets.load_mni152_gm_template"]], "load_mni152_template() (in module nilearn.datasets)": [[244, "nilearn.datasets.load_mni152_template"]], "load_mni152_wm_mask() (in module nilearn.datasets)": [[245, "nilearn.datasets.load_mni152_wm_mask"]], "load_mni152_wm_template() (in module nilearn.datasets)": [[246, "nilearn.datasets.load_mni152_wm_template"]], "load_sample_motor_activation_image() (in module nilearn.datasets)": [[247, "nilearn.datasets.load_sample_motor_activation_image"]], "patch_openneuro_dataset() (in module nilearn.datasets)": [[248, "nilearn.datasets.patch_openneuro_dataset"]], "select_from_index() (in module nilearn.datasets)": [[249, "nilearn.datasets.select_from_index"]], "decoder (class in nilearn.decoding)": [[250, "nilearn.decoding.Decoder"]], "__init__() (nilearn.decoding.decoder method)": [[250, "nilearn.decoding.Decoder.__init__"]], "decision_function() (nilearn.decoding.decoder method)": [[250, "nilearn.decoding.Decoder.decision_function"]], "fit() (nilearn.decoding.decoder method)": [[250, "nilearn.decoding.Decoder.fit"]], "get_metadata_routing() (nilearn.decoding.decoder method)": [[250, "nilearn.decoding.Decoder.get_metadata_routing"]], "get_params() (nilearn.decoding.decoder method)": [[250, "nilearn.decoding.Decoder.get_params"]], "predict() (nilearn.decoding.decoder method)": [[250, "nilearn.decoding.Decoder.predict"]], "score() (nilearn.decoding.decoder method)": [[250, "nilearn.decoding.Decoder.score"]], "set_fit_request() (nilearn.decoding.decoder method)": [[250, "nilearn.decoding.Decoder.set_fit_request"]], "set_params() (nilearn.decoding.decoder method)": [[250, "nilearn.decoding.Decoder.set_params"]], "set_score_request() (nilearn.decoding.decoder method)": [[250, "nilearn.decoding.Decoder.set_score_request"]], "decoderregressor (class in nilearn.decoding)": [[251, "nilearn.decoding.DecoderRegressor"]], "__init__() (nilearn.decoding.decoderregressor method)": [[251, "nilearn.decoding.DecoderRegressor.__init__"]], "decision_function() (nilearn.decoding.decoderregressor method)": [[251, "nilearn.decoding.DecoderRegressor.decision_function"]], "fit() (nilearn.decoding.decoderregressor method)": [[251, "nilearn.decoding.DecoderRegressor.fit"]], "get_metadata_routing() (nilearn.decoding.decoderregressor method)": [[251, "nilearn.decoding.DecoderRegressor.get_metadata_routing"]], "get_params() (nilearn.decoding.decoderregressor method)": [[251, "nilearn.decoding.DecoderRegressor.get_params"]], "predict() (nilearn.decoding.decoderregressor method)": [[251, "nilearn.decoding.DecoderRegressor.predict"]], "score() (nilearn.decoding.decoderregressor method)": [[251, "nilearn.decoding.DecoderRegressor.score"]], "set_fit_request() (nilearn.decoding.decoderregressor method)": [[251, "nilearn.decoding.DecoderRegressor.set_fit_request"]], "set_params() (nilearn.decoding.decoderregressor method)": [[251, "nilearn.decoding.DecoderRegressor.set_params"]], "set_score_request() (nilearn.decoding.decoderregressor method)": [[251, "nilearn.decoding.DecoderRegressor.set_score_request"]], "fremclassifier (class in nilearn.decoding)": [[252, "nilearn.decoding.FREMClassifier"]], "__init__() (nilearn.decoding.fremclassifier method)": [[252, "nilearn.decoding.FREMClassifier.__init__"]], "decision_function() (nilearn.decoding.fremclassifier method)": [[252, "nilearn.decoding.FREMClassifier.decision_function"]], "fit() (nilearn.decoding.fremclassifier method)": [[252, "nilearn.decoding.FREMClassifier.fit"]], "get_metadata_routing() (nilearn.decoding.fremclassifier method)": [[252, "nilearn.decoding.FREMClassifier.get_metadata_routing"]], "get_params() (nilearn.decoding.fremclassifier method)": [[252, "nilearn.decoding.FREMClassifier.get_params"]], "predict() (nilearn.decoding.fremclassifier method)": [[252, "nilearn.decoding.FREMClassifier.predict"]], "score() (nilearn.decoding.fremclassifier method)": [[252, "nilearn.decoding.FREMClassifier.score"]], "set_fit_request() (nilearn.decoding.fremclassifier method)": [[252, "nilearn.decoding.FREMClassifier.set_fit_request"]], "set_params() (nilearn.decoding.fremclassifier method)": [[252, "nilearn.decoding.FREMClassifier.set_params"]], "set_score_request() (nilearn.decoding.fremclassifier method)": [[252, "nilearn.decoding.FREMClassifier.set_score_request"]], "fremregressor (class in nilearn.decoding)": [[253, "nilearn.decoding.FREMRegressor"]], "__init__() (nilearn.decoding.fremregressor method)": [[253, "nilearn.decoding.FREMRegressor.__init__"]], "decision_function() (nilearn.decoding.fremregressor method)": [[253, "nilearn.decoding.FREMRegressor.decision_function"]], "fit() (nilearn.decoding.fremregressor method)": [[253, "nilearn.decoding.FREMRegressor.fit"]], "get_metadata_routing() (nilearn.decoding.fremregressor method)": [[253, "nilearn.decoding.FREMRegressor.get_metadata_routing"]], "get_params() (nilearn.decoding.fremregressor method)": [[253, "nilearn.decoding.FREMRegressor.get_params"]], "predict() (nilearn.decoding.fremregressor method)": [[253, "nilearn.decoding.FREMRegressor.predict"]], "score() (nilearn.decoding.fremregressor method)": [[253, "nilearn.decoding.FREMRegressor.score"]], "set_fit_request() (nilearn.decoding.fremregressor method)": [[253, "nilearn.decoding.FREMRegressor.set_fit_request"]], "set_params() (nilearn.decoding.fremregressor method)": [[253, "nilearn.decoding.FREMRegressor.set_params"]], "set_score_request() (nilearn.decoding.fremregressor method)": [[253, "nilearn.decoding.FREMRegressor.set_score_request"]], "searchlight (class in nilearn.decoding)": [[254, "nilearn.decoding.SearchLight"]], "__init__() (nilearn.decoding.searchlight method)": [[254, "nilearn.decoding.SearchLight.__init__"]], "fit() (nilearn.decoding.searchlight method)": [[254, "nilearn.decoding.SearchLight.fit"]], "get_metadata_routing() (nilearn.decoding.searchlight method)": [[254, "nilearn.decoding.SearchLight.get_metadata_routing"]], "get_params() (nilearn.decoding.searchlight method)": [[254, "nilearn.decoding.SearchLight.get_params"]], "set_fit_request() (nilearn.decoding.searchlight method)": [[254, "nilearn.decoding.SearchLight.set_fit_request"]], "set_params() (nilearn.decoding.searchlight method)": [[254, "nilearn.decoding.SearchLight.set_params"]], "supported_losses (nilearn.decoding.spacenetclassifier attribute)": [[255, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_LOSSES"]], "supported_penalties (nilearn.decoding.spacenetclassifier attribute)": [[255, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_PENALTIES"]], "spacenetclassifier (class in nilearn.decoding)": [[255, "nilearn.decoding.SpaceNetClassifier"]], "__init__() (nilearn.decoding.spacenetclassifier method)": [[255, "nilearn.decoding.SpaceNetClassifier.__init__"]], "check_params() (nilearn.decoding.spacenetclassifier method)": [[255, "nilearn.decoding.SpaceNetClassifier.check_params"]], "decision_function() (nilearn.decoding.spacenetclassifier method)": [[255, "nilearn.decoding.SpaceNetClassifier.decision_function"]], "fit() (nilearn.decoding.spacenetclassifier method)": [[255, "nilearn.decoding.SpaceNetClassifier.fit"]], "get_metadata_routing() (nilearn.decoding.spacenetclassifier method)": [[255, "nilearn.decoding.SpaceNetClassifier.get_metadata_routing"]], "get_params() (nilearn.decoding.spacenetclassifier method)": [[255, "nilearn.decoding.SpaceNetClassifier.get_params"]], "predict() (nilearn.decoding.spacenetclassifier method)": [[255, "nilearn.decoding.SpaceNetClassifier.predict"]], "score() (nilearn.decoding.spacenetclassifier method)": [[255, "nilearn.decoding.SpaceNetClassifier.score"]], "set_fit_request() (nilearn.decoding.spacenetclassifier method)": [[255, "nilearn.decoding.SpaceNetClassifier.set_fit_request"]], "set_params() (nilearn.decoding.spacenetclassifier method)": [[255, "nilearn.decoding.SpaceNetClassifier.set_params"]], "set_score_request() (nilearn.decoding.spacenetclassifier method)": [[255, "nilearn.decoding.SpaceNetClassifier.set_score_request"]], "supported_losses (nilearn.decoding.spacenetregressor attribute)": [[256, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_LOSSES"]], "supported_penalties (nilearn.decoding.spacenetregressor attribute)": [[256, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_PENALTIES"]], "spacenetregressor (class in nilearn.decoding)": [[256, "nilearn.decoding.SpaceNetRegressor"]], "__init__() (nilearn.decoding.spacenetregressor method)": [[256, "nilearn.decoding.SpaceNetRegressor.__init__"]], "check_params() (nilearn.decoding.spacenetregressor method)": [[256, "nilearn.decoding.SpaceNetRegressor.check_params"]], "decision_function() (nilearn.decoding.spacenetregressor method)": [[256, "nilearn.decoding.SpaceNetRegressor.decision_function"]], "fit() (nilearn.decoding.spacenetregressor method)": [[256, "nilearn.decoding.SpaceNetRegressor.fit"]], "get_metadata_routing() (nilearn.decoding.spacenetregressor method)": [[256, "nilearn.decoding.SpaceNetRegressor.get_metadata_routing"]], "get_params() (nilearn.decoding.spacenetregressor method)": [[256, "nilearn.decoding.SpaceNetRegressor.get_params"]], "predict() (nilearn.decoding.spacenetregressor method)": [[256, "nilearn.decoding.SpaceNetRegressor.predict"]], "score() (nilearn.decoding.spacenetregressor method)": [[256, "nilearn.decoding.SpaceNetRegressor.score"]], "set_fit_request() (nilearn.decoding.spacenetregressor method)": [[256, "nilearn.decoding.SpaceNetRegressor.set_fit_request"]], "set_params() (nilearn.decoding.spacenetregressor method)": [[256, "nilearn.decoding.SpaceNetRegressor.set_params"]], "set_score_request() (nilearn.decoding.spacenetregressor method)": [[256, "nilearn.decoding.SpaceNetRegressor.set_score_request"]], "canica (class in nilearn.decomposition)": [[257, "nilearn.decomposition.CanICA"]], "__init__() (nilearn.decomposition.canica method)": [[257, "nilearn.decomposition.CanICA.__init__"]], "fit() (nilearn.decomposition.canica method)": [[257, "nilearn.decomposition.CanICA.fit"]], "fit_transform() (nilearn.decomposition.canica method)": [[257, "nilearn.decomposition.CanICA.fit_transform"]], "get_metadata_routing() (nilearn.decomposition.canica method)": [[257, "nilearn.decomposition.CanICA.get_metadata_routing"]], "get_params() (nilearn.decomposition.canica method)": [[257, "nilearn.decomposition.CanICA.get_params"]], "inverse_transform() (nilearn.decomposition.canica method)": [[257, "nilearn.decomposition.CanICA.inverse_transform"]], "score() (nilearn.decomposition.canica method)": [[257, "nilearn.decomposition.CanICA.score"]], "set_fit_request() (nilearn.decomposition.canica method)": [[257, "nilearn.decomposition.CanICA.set_fit_request"]], "set_inverse_transform_request() (nilearn.decomposition.canica method)": [[257, "nilearn.decomposition.CanICA.set_inverse_transform_request"]], "set_output() (nilearn.decomposition.canica method)": [[257, "nilearn.decomposition.CanICA.set_output"]], "set_params() (nilearn.decomposition.canica method)": [[257, "nilearn.decomposition.CanICA.set_params"]], "set_score_request() (nilearn.decomposition.canica method)": [[257, "nilearn.decomposition.CanICA.set_score_request"]], "set_transform_request() (nilearn.decomposition.canica method)": [[257, "nilearn.decomposition.CanICA.set_transform_request"]], "transform() (nilearn.decomposition.canica method)": [[257, "nilearn.decomposition.CanICA.transform"]], "dictlearning (class in nilearn.decomposition)": [[258, "nilearn.decomposition.DictLearning"]], "__init__() (nilearn.decomposition.dictlearning method)": [[258, "nilearn.decomposition.DictLearning.__init__"]], "fit() (nilearn.decomposition.dictlearning method)": [[258, "nilearn.decomposition.DictLearning.fit"]], "fit_transform() (nilearn.decomposition.dictlearning method)": [[258, "nilearn.decomposition.DictLearning.fit_transform"]], "get_metadata_routing() (nilearn.decomposition.dictlearning method)": [[258, "nilearn.decomposition.DictLearning.get_metadata_routing"]], "get_params() (nilearn.decomposition.dictlearning method)": [[258, "nilearn.decomposition.DictLearning.get_params"]], "inverse_transform() (nilearn.decomposition.dictlearning method)": [[258, "nilearn.decomposition.DictLearning.inverse_transform"]], "score() (nilearn.decomposition.dictlearning method)": [[258, "nilearn.decomposition.DictLearning.score"]], "set_fit_request() (nilearn.decomposition.dictlearning method)": [[258, "nilearn.decomposition.DictLearning.set_fit_request"]], "set_inverse_transform_request() (nilearn.decomposition.dictlearning method)": [[258, "nilearn.decomposition.DictLearning.set_inverse_transform_request"]], "set_output() (nilearn.decomposition.dictlearning method)": [[258, "nilearn.decomposition.DictLearning.set_output"]], "set_params() (nilearn.decomposition.dictlearning method)": [[258, "nilearn.decomposition.DictLearning.set_params"]], "set_score_request() (nilearn.decomposition.dictlearning method)": [[258, "nilearn.decomposition.DictLearning.set_score_request"]], "set_transform_request() (nilearn.decomposition.dictlearning method)": [[258, "nilearn.decomposition.DictLearning.set_transform_request"]], "transform() (nilearn.decomposition.dictlearning method)": [[258, "nilearn.decomposition.DictLearning.transform"]], "filemesh (class in nilearn.experimental.surface)": [[259, "nilearn.experimental.surface.FileMesh"]], "__init__() (nilearn.experimental.surface.filemesh method)": [[259, "nilearn.experimental.surface.FileMesh.__init__"]], "coordinates (nilearn.experimental.surface.filemesh property)": [[259, "nilearn.experimental.surface.FileMesh.coordinates"]], "faces (nilearn.experimental.surface.filemesh property)": [[259, "nilearn.experimental.surface.FileMesh.faces"]], "file_path (nilearn.experimental.surface.filemesh attribute)": [[259, "nilearn.experimental.surface.FileMesh.file_path"]], "loaded() (nilearn.experimental.surface.filemesh method)": [[259, "nilearn.experimental.surface.FileMesh.loaded"]], "n_vertices (nilearn.experimental.surface.filemesh attribute)": [[259, "nilearn.experimental.surface.FileMesh.n_vertices"]], "to_gifti() (nilearn.experimental.surface.filemesh method)": [[259, "nilearn.experimental.surface.FileMesh.to_gifti"]], "inmemorymesh (class in nilearn.experimental.surface)": [[260, "nilearn.experimental.surface.InMemoryMesh"]], "__init__() (nilearn.experimental.surface.inmemorymesh method)": [[260, "nilearn.experimental.surface.InMemoryMesh.__init__"]], "coordinates (nilearn.experimental.surface.inmemorymesh attribute)": [[260, "nilearn.experimental.surface.InMemoryMesh.coordinates"]], "faces (nilearn.experimental.surface.inmemorymesh attribute)": [[260, "nilearn.experimental.surface.InMemoryMesh.faces"]], "n_vertices (nilearn.experimental.surface.inmemorymesh attribute)": [[260, "nilearn.experimental.surface.InMemoryMesh.n_vertices"]], "to_gifti() (nilearn.experimental.surface.inmemorymesh method)": [[260, "nilearn.experimental.surface.InMemoryMesh.to_gifti"]], "mesh (class in nilearn.experimental.surface)": [[261, "nilearn.experimental.surface.Mesh"]], "__init__() (nilearn.experimental.surface.mesh method)": [[261, "nilearn.experimental.surface.Mesh.__init__"]], "coordinates (nilearn.experimental.surface.mesh attribute)": [[261, "nilearn.experimental.surface.Mesh.coordinates"]], "faces (nilearn.experimental.surface.mesh attribute)": [[261, "nilearn.experimental.surface.Mesh.faces"]], "n_vertices (nilearn.experimental.surface.mesh attribute)": [[261, "nilearn.experimental.surface.Mesh.n_vertices"]], "to_gifti() (nilearn.experimental.surface.mesh method)": [[261, "nilearn.experimental.surface.Mesh.to_gifti"]], "polymesh (in module nilearn.experimental.surface)": [[262, "nilearn.experimental.surface.PolyMesh"]], "surfaceimage (class in nilearn.experimental.surface)": [[263, "nilearn.experimental.surface.SurfaceImage"]], "__init__() (nilearn.experimental.surface.surfaceimage method)": [[263, "nilearn.experimental.surface.SurfaceImage.__init__"]], "data (nilearn.experimental.surface.surfaceimage attribute)": [[263, "nilearn.experimental.surface.SurfaceImage.data"]], "mesh (nilearn.experimental.surface.surfaceimage attribute)": [[263, "nilearn.experimental.surface.SurfaceImage.mesh"]], "shape (nilearn.experimental.surface.surfaceimage attribute)": [[263, "nilearn.experimental.surface.SurfaceImage.shape"]], "surfacelabelsmasker (class in nilearn.experimental.surface)": [[264, "nilearn.experimental.surface.SurfaceLabelsMasker"]], "__init__() (nilearn.experimental.surface.surfacelabelsmasker method)": [[264, "nilearn.experimental.surface.SurfaceLabelsMasker.__init__"]], "fit() (nilearn.experimental.surface.surfacelabelsmasker method)": [[264, "nilearn.experimental.surface.SurfaceLabelsMasker.fit"]], "fit_transform() (nilearn.experimental.surface.surfacelabelsmasker method)": [[264, "nilearn.experimental.surface.SurfaceLabelsMasker.fit_transform"]], "inverse_transform() (nilearn.experimental.surface.surfacelabelsmasker method)": [[264, "nilearn.experimental.surface.SurfaceLabelsMasker.inverse_transform"]], "label_names (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[264, "nilearn.experimental.surface.SurfaceLabelsMasker.label_names"]], "label_names_ (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[264, "nilearn.experimental.surface.SurfaceLabelsMasker.label_names_"]], "labels_ (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[264, "nilearn.experimental.surface.SurfaceLabelsMasker.labels_"]], "labels_data_ (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[264, "nilearn.experimental.surface.SurfaceLabelsMasker.labels_data_"]], "labels_img (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[264, "nilearn.experimental.surface.SurfaceLabelsMasker.labels_img"]], "transform() (nilearn.experimental.surface.surfacelabelsmasker method)": [[264, "nilearn.experimental.surface.SurfaceLabelsMasker.transform"]], "surfacemasker (class in nilearn.experimental.surface)": [[265, "nilearn.experimental.surface.SurfaceMasker"]], "__init__() (nilearn.experimental.surface.surfacemasker method)": [[265, "nilearn.experimental.surface.SurfaceMasker.__init__"]], "fit() (nilearn.experimental.surface.surfacemasker method)": [[265, "nilearn.experimental.surface.SurfaceMasker.fit"]], "fit_transform() (nilearn.experimental.surface.surfacemasker method)": [[265, "nilearn.experimental.surface.SurfaceMasker.fit_transform"]], "inverse_transform() (nilearn.experimental.surface.surfacemasker method)": [[265, "nilearn.experimental.surface.SurfaceMasker.inverse_transform"]], "mask_img (nilearn.experimental.surface.surfacemasker attribute)": [[265, "nilearn.experimental.surface.SurfaceMasker.mask_img"]], "mask_img_ (nilearn.experimental.surface.surfacemasker attribute)": [[265, "nilearn.experimental.surface.SurfaceMasker.mask_img_"]], "output_dimension_ (nilearn.experimental.surface.surfacemasker attribute)": [[265, "nilearn.experimental.surface.SurfaceMasker.output_dimension_"]], "transform() (nilearn.experimental.surface.surfacemasker method)": [[265, "nilearn.experimental.surface.SurfaceMasker.transform"]], "fetch_destrieux() (in module nilearn.experimental.surface)": [[266, "nilearn.experimental.surface.fetch_destrieux"]], "fetch_nki() (in module nilearn.experimental.surface)": [[267, "nilearn.experimental.surface.fetch_nki"]], "load_fsaverage() (in module nilearn.experimental.surface)": [[268, "nilearn.experimental.surface.load_fsaverage"]], "armodel (class in nilearn.glm)": [[269, "nilearn.glm.ARModel"]], "__init__() (nilearn.glm.armodel method)": [[269, "nilearn.glm.ARModel.__init__"]], "fit() (nilearn.glm.armodel method)": [[269, "nilearn.glm.ARModel.fit"]], "initialize() (nilearn.glm.armodel method)": [[269, "nilearn.glm.ARModel.initialize"]], "logl() (nilearn.glm.armodel method)": [[269, "nilearn.glm.ARModel.logL"]], "whiten() (nilearn.glm.armodel method)": [[269, "nilearn.glm.ARModel.whiten"]], "contrast (class in nilearn.glm)": [[270, "nilearn.glm.Contrast"]], "__init__() (nilearn.glm.contrast method)": [[270, "nilearn.glm.Contrast.__init__"]], "effect_size() (nilearn.glm.contrast method)": [[270, "nilearn.glm.Contrast.effect_size"]], "effect_variance() (nilearn.glm.contrast method)": [[270, "nilearn.glm.Contrast.effect_variance"]], "one_minus_pvalue() (nilearn.glm.contrast method)": [[270, "nilearn.glm.Contrast.one_minus_pvalue"]], "p_value() (nilearn.glm.contrast method)": [[270, "nilearn.glm.Contrast.p_value"]], "stat() (nilearn.glm.contrast method)": [[270, "nilearn.glm.Contrast.stat"]], "z_score() (nilearn.glm.contrast method)": [[270, "nilearn.glm.Contrast.z_score"]], "fcontrastresults (class in nilearn.glm)": [[271, "nilearn.glm.FContrastResults"]], "__init__() (nilearn.glm.fcontrastresults method)": [[271, "nilearn.glm.FContrastResults.__init__"]], "fcontrast() (nilearn.glm.likelihoodmodelresults method)": [[272, "nilearn.glm.LikelihoodModelResults.Fcontrast"]], "likelihoodmodelresults (class in nilearn.glm)": [[272, "nilearn.glm.LikelihoodModelResults"]], "tcontrast() (nilearn.glm.likelihoodmodelresults method)": [[272, "nilearn.glm.LikelihoodModelResults.Tcontrast"]], "__init__() (nilearn.glm.likelihoodmodelresults method)": [[272, "nilearn.glm.LikelihoodModelResults.__init__"]], "conf_int() (nilearn.glm.likelihoodmodelresults method)": [[272, "nilearn.glm.LikelihoodModelResults.conf_int"]], "logl() (nilearn.glm.likelihoodmodelresults method)": [[272, "nilearn.glm.LikelihoodModelResults.logL"]], "t() (nilearn.glm.likelihoodmodelresults method)": [[272, "nilearn.glm.LikelihoodModelResults.t"]], "vcov() (nilearn.glm.likelihoodmodelresults method)": [[272, "nilearn.glm.LikelihoodModelResults.vcov"]], "olsmodel (class in nilearn.glm)": [[273, "nilearn.glm.OLSModel"]], "__init__() (nilearn.glm.olsmodel method)": [[273, "nilearn.glm.OLSModel.__init__"]], "fit() (nilearn.glm.olsmodel method)": [[273, "nilearn.glm.OLSModel.fit"]], "initialize() (nilearn.glm.olsmodel method)": [[273, "nilearn.glm.OLSModel.initialize"]], "logl() (nilearn.glm.olsmodel method)": [[273, "nilearn.glm.OLSModel.logL"]], "whiten() (nilearn.glm.olsmodel method)": [[273, "nilearn.glm.OLSModel.whiten"]], "fcontrast() (nilearn.glm.regressionresults method)": [[274, "nilearn.glm.RegressionResults.Fcontrast"]], "mse() (nilearn.glm.regressionresults method)": [[274, "nilearn.glm.RegressionResults.MSE"]], "regressionresults (class in nilearn.glm)": [[274, "nilearn.glm.RegressionResults"]], "sse() (nilearn.glm.regressionresults method)": [[274, "nilearn.glm.RegressionResults.SSE"]], "tcontrast() (nilearn.glm.regressionresults method)": [[274, "nilearn.glm.RegressionResults.Tcontrast"]], "__init__() (nilearn.glm.regressionresults method)": [[274, "nilearn.glm.RegressionResults.__init__"]], "conf_int() (nilearn.glm.regressionresults method)": [[274, "nilearn.glm.RegressionResults.conf_int"]], "logl() (nilearn.glm.regressionresults method)": [[274, "nilearn.glm.RegressionResults.logL"]], "normalized_residuals() (nilearn.glm.regressionresults method)": [[274, "nilearn.glm.RegressionResults.normalized_residuals"]], "predicted() (nilearn.glm.regressionresults method)": [[274, "nilearn.glm.RegressionResults.predicted"]], "r_square() (nilearn.glm.regressionresults method)": [[274, "nilearn.glm.RegressionResults.r_square"]], "residuals() (nilearn.glm.regressionresults method)": [[274, "nilearn.glm.RegressionResults.residuals"]], "t() (nilearn.glm.regressionresults method)": [[274, "nilearn.glm.RegressionResults.t"]], "vcov() (nilearn.glm.regressionresults method)": [[274, "nilearn.glm.RegressionResults.vcov"]], "fcontrast() (nilearn.glm.simpleregressionresults method)": [[275, "nilearn.glm.SimpleRegressionResults.Fcontrast"]], "simpleregressionresults (class in nilearn.glm)": [[275, "nilearn.glm.SimpleRegressionResults"]], "tcontrast() (nilearn.glm.simpleregressionresults method)": [[275, "nilearn.glm.SimpleRegressionResults.Tcontrast"]], "__init__() (nilearn.glm.simpleregressionresults method)": [[275, "nilearn.glm.SimpleRegressionResults.__init__"]], "conf_int() (nilearn.glm.simpleregressionresults method)": [[275, "nilearn.glm.SimpleRegressionResults.conf_int"]], "logl() (nilearn.glm.simpleregressionresults method)": [[275, "nilearn.glm.SimpleRegressionResults.logL"]], "normalized_residuals() (nilearn.glm.simpleregressionresults method)": [[275, "nilearn.glm.SimpleRegressionResults.normalized_residuals"]], "predicted() (nilearn.glm.simpleregressionresults method)": [[275, "nilearn.glm.SimpleRegressionResults.predicted"]], "residuals() (nilearn.glm.simpleregressionresults method)": [[275, "nilearn.glm.SimpleRegressionResults.residuals"]], "t() (nilearn.glm.simpleregressionresults method)": [[275, "nilearn.glm.SimpleRegressionResults.t"]], "vcov() (nilearn.glm.simpleregressionresults method)": [[275, "nilearn.glm.SimpleRegressionResults.vcov"]], "tcontrastresults (class in nilearn.glm)": [[276, "nilearn.glm.TContrastResults"]], "__init__() (nilearn.glm.tcontrastresults method)": [[276, "nilearn.glm.TContrastResults.__init__"]], "cluster_level_inference() (in module nilearn.glm)": [[277, "nilearn.glm.cluster_level_inference"]], "compute_contrast() (in module nilearn.glm)": [[278, "nilearn.glm.compute_contrast"]], "compute_fixed_effects() (in module nilearn.glm)": [[279, "nilearn.glm.compute_fixed_effects"]], "expression_to_contrast_vector() (in module nilearn.glm)": [[280, "nilearn.glm.expression_to_contrast_vector"]], "fdr_threshold() (in module nilearn.glm)": [[281, "nilearn.glm.fdr_threshold"]], "firstlevelmodel (class in nilearn.glm.first_level)": [[282, "nilearn.glm.first_level.FirstLevelModel"]], "__init__() (nilearn.glm.first_level.firstlevelmodel method)": [[282, "nilearn.glm.first_level.FirstLevelModel.__init__"]], "compute_contrast() (nilearn.glm.first_level.firstlevelmodel method)": [[282, "nilearn.glm.first_level.FirstLevelModel.compute_contrast"]], "fit() (nilearn.glm.first_level.firstlevelmodel method)": [[282, "nilearn.glm.first_level.FirstLevelModel.fit"]], "fit_transform() (nilearn.glm.first_level.firstlevelmodel method)": [[282, "nilearn.glm.first_level.FirstLevelModel.fit_transform"]], "generate_report() (nilearn.glm.first_level.firstlevelmodel method)": [[282, "nilearn.glm.first_level.FirstLevelModel.generate_report"]], "get_metadata_routing() (nilearn.glm.first_level.firstlevelmodel method)": [[282, "nilearn.glm.first_level.FirstLevelModel.get_metadata_routing"]], "get_params() (nilearn.glm.first_level.firstlevelmodel method)": [[282, "nilearn.glm.first_level.FirstLevelModel.get_params"]], "predicted() (nilearn.glm.first_level.firstlevelmodel method)": [[282, "nilearn.glm.first_level.FirstLevelModel.predicted"]], "r_square() (nilearn.glm.first_level.firstlevelmodel method)": [[282, "nilearn.glm.first_level.FirstLevelModel.r_square"]], "residuals() (nilearn.glm.first_level.firstlevelmodel method)": [[282, "nilearn.glm.first_level.FirstLevelModel.residuals"]], "scaling_axis (nilearn.glm.first_level.firstlevelmodel property)": [[282, "nilearn.glm.first_level.FirstLevelModel.scaling_axis"]], "set_fit_request() (nilearn.glm.first_level.firstlevelmodel method)": [[282, "nilearn.glm.first_level.FirstLevelModel.set_fit_request"]], "set_output() (nilearn.glm.first_level.firstlevelmodel method)": [[282, "nilearn.glm.first_level.FirstLevelModel.set_output"]], "set_params() (nilearn.glm.first_level.firstlevelmodel method)": [[282, "nilearn.glm.first_level.FirstLevelModel.set_params"]], "check_design_matrix() (in module nilearn.glm.first_level)": [[283, "nilearn.glm.first_level.check_design_matrix"]], "compute_regressor() (in module nilearn.glm.first_level)": [[284, "nilearn.glm.first_level.compute_regressor"]], "first_level_from_bids() (in module nilearn.glm.first_level)": [[285, "nilearn.glm.first_level.first_level_from_bids"]], "glover_dispersion_derivative() (in module nilearn.glm.first_level)": [[286, "nilearn.glm.first_level.glover_dispersion_derivative"]], "glover_hrf() (in module nilearn.glm.first_level)": [[287, "nilearn.glm.first_level.glover_hrf"]], "glover_time_derivative() (in module nilearn.glm.first_level)": [[288, "nilearn.glm.first_level.glover_time_derivative"]], "make_first_level_design_matrix() (in module nilearn.glm.first_level)": [[289, "nilearn.glm.first_level.make_first_level_design_matrix"]], "mean_scaling() (in module nilearn.glm.first_level)": [[290, "nilearn.glm.first_level.mean_scaling"]], "run_glm() (in module nilearn.glm.first_level)": [[291, "nilearn.glm.first_level.run_glm"]], "spm_dispersion_derivative() (in module nilearn.glm.first_level)": [[292, "nilearn.glm.first_level.spm_dispersion_derivative"]], "spm_hrf() (in module nilearn.glm.first_level)": [[293, "nilearn.glm.first_level.spm_hrf"]], "spm_time_derivative() (in module nilearn.glm.first_level)": [[294, "nilearn.glm.first_level.spm_time_derivative"]], "secondlevelmodel (class in nilearn.glm.second_level)": [[295, "nilearn.glm.second_level.SecondLevelModel"]], "__init__() (nilearn.glm.second_level.secondlevelmodel method)": [[295, "nilearn.glm.second_level.SecondLevelModel.__init__"]], "compute_contrast() (nilearn.glm.second_level.secondlevelmodel method)": [[295, "nilearn.glm.second_level.SecondLevelModel.compute_contrast"]], "fit() (nilearn.glm.second_level.secondlevelmodel method)": [[295, "nilearn.glm.second_level.SecondLevelModel.fit"]], "fit_transform() (nilearn.glm.second_level.secondlevelmodel method)": [[295, "nilearn.glm.second_level.SecondLevelModel.fit_transform"]], "generate_report() (nilearn.glm.second_level.secondlevelmodel method)": [[295, "nilearn.glm.second_level.SecondLevelModel.generate_report"]], "get_metadata_routing() (nilearn.glm.second_level.secondlevelmodel method)": [[295, "nilearn.glm.second_level.SecondLevelModel.get_metadata_routing"]], "get_params() (nilearn.glm.second_level.secondlevelmodel method)": [[295, "nilearn.glm.second_level.SecondLevelModel.get_params"]], "predicted() (nilearn.glm.second_level.secondlevelmodel method)": [[295, "nilearn.glm.second_level.SecondLevelModel.predicted"]], "r_square() (nilearn.glm.second_level.secondlevelmodel method)": [[295, "nilearn.glm.second_level.SecondLevelModel.r_square"]], "residuals() (nilearn.glm.second_level.secondlevelmodel method)": [[295, "nilearn.glm.second_level.SecondLevelModel.residuals"]], "set_fit_request() (nilearn.glm.second_level.secondlevelmodel method)": [[295, "nilearn.glm.second_level.SecondLevelModel.set_fit_request"]], "set_output() (nilearn.glm.second_level.secondlevelmodel method)": [[295, "nilearn.glm.second_level.SecondLevelModel.set_output"]], "set_params() (nilearn.glm.second_level.secondlevelmodel method)": [[295, "nilearn.glm.second_level.SecondLevelModel.set_params"]], "make_second_level_design_matrix() (in module nilearn.glm.second_level)": [[296, "nilearn.glm.second_level.make_second_level_design_matrix"]], "non_parametric_inference() (in module nilearn.glm.second_level)": [[297, "nilearn.glm.second_level.non_parametric_inference"]], "threshold_stats_img() (in module nilearn.glm)": [[298, "nilearn.glm.threshold_stats_img"]], "binarize_img() (in module nilearn.image)": [[299, "nilearn.image.binarize_img"]], "clean_img() (in module nilearn.image)": [[300, "nilearn.image.clean_img"]], "concat_imgs() (in module nilearn.image)": [[301, "nilearn.image.concat_imgs"]], "coord_transform() (in module nilearn.image)": [[302, "nilearn.image.coord_transform"]], "copy_img() (in module nilearn.image)": [[303, "nilearn.image.copy_img"]], "crop_img() (in module nilearn.image)": [[304, "nilearn.image.crop_img"]], "get_data() (in module nilearn.image)": [[305, "nilearn.image.get_data"]], "high_variance_confounds() (in module nilearn.image)": [[306, "nilearn.image.high_variance_confounds"]], "index_img() (in module nilearn.image)": [[307, "nilearn.image.index_img"]], "iter_img() (in module nilearn.image)": [[308, "nilearn.image.iter_img"]], "largest_connected_component_img() (in module nilearn.image)": [[309, "nilearn.image.largest_connected_component_img"]], "load_img() (in module nilearn.image)": [[310, "nilearn.image.load_img"]], "math_img() (in module nilearn.image)": [[311, "nilearn.image.math_img"]], "mean_img() (in module nilearn.image)": [[312, "nilearn.image.mean_img"]], "new_img_like() (in module nilearn.image)": [[313, "nilearn.image.new_img_like"]], "reorder_img() (in module nilearn.image)": [[314, "nilearn.image.reorder_img"]], "resample_img() (in module nilearn.image)": [[315, "nilearn.image.resample_img"]], "resample_to_img() (in module nilearn.image)": [[316, "nilearn.image.resample_to_img"]], "smooth_img() (in module nilearn.image)": [[317, "nilearn.image.smooth_img"]], "swap_img_hemispheres() (in module nilearn.image)": [[318, "nilearn.image.swap_img_hemispheres"]], "threshold_img() (in module nilearn.image)": [[319, "nilearn.image.threshold_img"]], "get_bids_files() (in module nilearn.interfaces.bids)": [[320, "nilearn.interfaces.bids.get_bids_files"]], "parse_bids_filename() (in module nilearn.interfaces.bids)": [[321, "nilearn.interfaces.bids.parse_bids_filename"]], "save_glm_to_bids() (in module nilearn.interfaces.bids)": [[322, "nilearn.interfaces.bids.save_glm_to_bids"]], "load_confounds() (in module nilearn.interfaces.fmriprep)": [[323, "nilearn.interfaces.fmriprep.load_confounds"]], "load_confounds_strategy() (in module nilearn.interfaces.fmriprep)": [[324, "nilearn.interfaces.fmriprep.load_confounds_strategy"]], "get_design_from_fslmat() (in module nilearn.interfaces.fsl)": [[325, "nilearn.interfaces.fsl.get_design_from_fslmat"]], "basemasker (class in nilearn.maskers)": [[326, "nilearn.maskers.BaseMasker"]], "__init__() (nilearn.maskers.basemasker method)": [[326, "nilearn.maskers.BaseMasker.__init__"]], "fit_transform() (nilearn.maskers.basemasker method)": [[326, "nilearn.maskers.BaseMasker.fit_transform"]], "get_metadata_routing() (nilearn.maskers.basemasker method)": [[326, "nilearn.maskers.BaseMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.basemasker method)": [[326, "nilearn.maskers.BaseMasker.get_params"]], "inverse_transform() (nilearn.maskers.basemasker method)": [[326, "nilearn.maskers.BaseMasker.inverse_transform"]], "set_output() (nilearn.maskers.basemasker method)": [[326, "nilearn.maskers.BaseMasker.set_output"]], "set_params() (nilearn.maskers.basemasker method)": [[326, "nilearn.maskers.BaseMasker.set_params"]], "set_transform_request() (nilearn.maskers.basemasker method)": [[326, "nilearn.maskers.BaseMasker.set_transform_request"]], "transform() (nilearn.maskers.basemasker method)": [[326, "nilearn.maskers.BaseMasker.transform"]], "transform_single_imgs() (nilearn.maskers.basemasker method)": [[326, "nilearn.maskers.BaseMasker.transform_single_imgs"]], "multiniftilabelsmasker (class in nilearn.maskers)": [[327, "nilearn.maskers.MultiNiftiLabelsMasker"]], "__init__() (nilearn.maskers.multiniftilabelsmasker method)": [[327, "nilearn.maskers.MultiNiftiLabelsMasker.__init__"]], "fit() (nilearn.maskers.multiniftilabelsmasker method)": [[327, "nilearn.maskers.MultiNiftiLabelsMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[327, "nilearn.maskers.MultiNiftiLabelsMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftilabelsmasker method)": [[327, "nilearn.maskers.MultiNiftiLabelsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.multiniftilabelsmasker method)": [[327, "nilearn.maskers.MultiNiftiLabelsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.multiniftilabelsmasker method)": [[327, "nilearn.maskers.MultiNiftiLabelsMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[327, "nilearn.maskers.MultiNiftiLabelsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.multiniftilabelsmasker method)": [[327, "nilearn.maskers.MultiNiftiLabelsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[327, "nilearn.maskers.MultiNiftiLabelsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.multiniftilabelsmasker method)": [[327, "nilearn.maskers.MultiNiftiLabelsMasker.set_output"]], "set_params() (nilearn.maskers.multiniftilabelsmasker method)": [[327, "nilearn.maskers.MultiNiftiLabelsMasker.set_params"]], "set_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[327, "nilearn.maskers.MultiNiftiLabelsMasker.set_transform_request"]], "transform() (nilearn.maskers.multiniftilabelsmasker method)": [[327, "nilearn.maskers.MultiNiftiLabelsMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[327, "nilearn.maskers.MultiNiftiLabelsMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[327, "nilearn.maskers.MultiNiftiLabelsMasker.transform_single_imgs"]], "multiniftimapsmasker (class in nilearn.maskers)": [[328, "nilearn.maskers.MultiNiftiMapsMasker"]], "__init__() (nilearn.maskers.multiniftimapsmasker method)": [[328, "nilearn.maskers.MultiNiftiMapsMasker.__init__"]], "fit() (nilearn.maskers.multiniftimapsmasker method)": [[328, "nilearn.maskers.MultiNiftiMapsMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftimapsmasker method)": [[328, "nilearn.maskers.MultiNiftiMapsMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftimapsmasker method)": [[328, "nilearn.maskers.MultiNiftiMapsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.multiniftimapsmasker method)": [[328, "nilearn.maskers.MultiNiftiMapsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.multiniftimapsmasker method)": [[328, "nilearn.maskers.MultiNiftiMapsMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftimapsmasker method)": [[328, "nilearn.maskers.MultiNiftiMapsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.multiniftimapsmasker method)": [[328, "nilearn.maskers.MultiNiftiMapsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[328, "nilearn.maskers.MultiNiftiMapsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.multiniftimapsmasker method)": [[328, "nilearn.maskers.MultiNiftiMapsMasker.set_output"]], "set_params() (nilearn.maskers.multiniftimapsmasker method)": [[328, "nilearn.maskers.MultiNiftiMapsMasker.set_params"]], "set_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[328, "nilearn.maskers.MultiNiftiMapsMasker.set_transform_request"]], "transform() (nilearn.maskers.multiniftimapsmasker method)": [[328, "nilearn.maskers.MultiNiftiMapsMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[328, "nilearn.maskers.MultiNiftiMapsMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[328, "nilearn.maskers.MultiNiftiMapsMasker.transform_single_imgs"]], "multiniftimasker (class in nilearn.maskers)": [[329, "nilearn.maskers.MultiNiftiMasker"]], "__init__() (nilearn.maskers.multiniftimasker method)": [[329, "nilearn.maskers.MultiNiftiMasker.__init__"]], "fit() (nilearn.maskers.multiniftimasker method)": [[329, "nilearn.maskers.MultiNiftiMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftimasker method)": [[329, "nilearn.maskers.MultiNiftiMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftimasker method)": [[329, "nilearn.maskers.MultiNiftiMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.multiniftimasker method)": [[329, "nilearn.maskers.MultiNiftiMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.multiniftimasker method)": [[329, "nilearn.maskers.MultiNiftiMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftimasker method)": [[329, "nilearn.maskers.MultiNiftiMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.multiniftimasker method)": [[329, "nilearn.maskers.MultiNiftiMasker.set_fit_request"]], "set_output() (nilearn.maskers.multiniftimasker method)": [[329, "nilearn.maskers.MultiNiftiMasker.set_output"]], "set_params() (nilearn.maskers.multiniftimasker method)": [[329, "nilearn.maskers.MultiNiftiMasker.set_params"]], "set_transform_request() (nilearn.maskers.multiniftimasker method)": [[329, "nilearn.maskers.MultiNiftiMasker.set_transform_request"]], "transform() (nilearn.maskers.multiniftimasker method)": [[329, "nilearn.maskers.MultiNiftiMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftimasker method)": [[329, "nilearn.maskers.MultiNiftiMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftimasker method)": [[329, "nilearn.maskers.MultiNiftiMasker.transform_single_imgs"]], "niftilabelsmasker (class in nilearn.maskers)": [[330, "nilearn.maskers.NiftiLabelsMasker"]], "__init__() (nilearn.maskers.niftilabelsmasker method)": [[330, "nilearn.maskers.NiftiLabelsMasker.__init__"]], "fit() (nilearn.maskers.niftilabelsmasker method)": [[330, "nilearn.maskers.NiftiLabelsMasker.fit"]], "fit_transform() (nilearn.maskers.niftilabelsmasker method)": [[330, "nilearn.maskers.NiftiLabelsMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftilabelsmasker method)": [[330, "nilearn.maskers.NiftiLabelsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftilabelsmasker method)": [[330, "nilearn.maskers.NiftiLabelsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftilabelsmasker method)": [[330, "nilearn.maskers.NiftiLabelsMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftilabelsmasker method)": [[330, "nilearn.maskers.NiftiLabelsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.niftilabelsmasker method)": [[330, "nilearn.maskers.NiftiLabelsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[330, "nilearn.maskers.NiftiLabelsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.niftilabelsmasker method)": [[330, "nilearn.maskers.NiftiLabelsMasker.set_output"]], "set_params() (nilearn.maskers.niftilabelsmasker method)": [[330, "nilearn.maskers.NiftiLabelsMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[330, "nilearn.maskers.NiftiLabelsMasker.set_transform_request"]], "transform() (nilearn.maskers.niftilabelsmasker method)": [[330, "nilearn.maskers.NiftiLabelsMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftilabelsmasker method)": [[330, "nilearn.maskers.NiftiLabelsMasker.transform_single_imgs"]], "niftimapsmasker (class in nilearn.maskers)": [[331, "nilearn.maskers.NiftiMapsMasker"]], "__init__() (nilearn.maskers.niftimapsmasker method)": [[331, "nilearn.maskers.NiftiMapsMasker.__init__"]], "fit() (nilearn.maskers.niftimapsmasker method)": [[331, "nilearn.maskers.NiftiMapsMasker.fit"]], "fit_transform() (nilearn.maskers.niftimapsmasker method)": [[331, "nilearn.maskers.NiftiMapsMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftimapsmasker method)": [[331, "nilearn.maskers.NiftiMapsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftimapsmasker method)": [[331, "nilearn.maskers.NiftiMapsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftimapsmasker method)": [[331, "nilearn.maskers.NiftiMapsMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftimapsmasker method)": [[331, "nilearn.maskers.NiftiMapsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.niftimapsmasker method)": [[331, "nilearn.maskers.NiftiMapsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.niftimapsmasker method)": [[331, "nilearn.maskers.NiftiMapsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.niftimapsmasker method)": [[331, "nilearn.maskers.NiftiMapsMasker.set_output"]], "set_params() (nilearn.maskers.niftimapsmasker method)": [[331, "nilearn.maskers.NiftiMapsMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftimapsmasker method)": [[331, "nilearn.maskers.NiftiMapsMasker.set_transform_request"]], "transform() (nilearn.maskers.niftimapsmasker method)": [[331, "nilearn.maskers.NiftiMapsMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftimapsmasker method)": [[331, "nilearn.maskers.NiftiMapsMasker.transform_single_imgs"]], "niftimasker (class in nilearn.maskers)": [[332, "nilearn.maskers.NiftiMasker"]], "__init__() (nilearn.maskers.niftimasker method)": [[332, "nilearn.maskers.NiftiMasker.__init__"]], "fit() (nilearn.maskers.niftimasker method)": [[332, "nilearn.maskers.NiftiMasker.fit"]], "fit_transform() (nilearn.maskers.niftimasker method)": [[332, "nilearn.maskers.NiftiMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftimasker method)": [[332, "nilearn.maskers.NiftiMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftimasker method)": [[332, "nilearn.maskers.NiftiMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftimasker method)": [[332, "nilearn.maskers.NiftiMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftimasker method)": [[332, "nilearn.maskers.NiftiMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.niftimasker method)": [[332, "nilearn.maskers.NiftiMasker.set_fit_request"]], "set_output() (nilearn.maskers.niftimasker method)": [[332, "nilearn.maskers.NiftiMasker.set_output"]], "set_params() (nilearn.maskers.niftimasker method)": [[332, "nilearn.maskers.NiftiMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftimasker method)": [[332, "nilearn.maskers.NiftiMasker.set_transform_request"]], "transform() (nilearn.maskers.niftimasker method)": [[332, "nilearn.maskers.NiftiMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftimasker method)": [[332, "nilearn.maskers.NiftiMasker.transform_single_imgs"]], "niftispheresmasker (class in nilearn.maskers)": [[333, "nilearn.maskers.NiftiSpheresMasker"]], "__init__() (nilearn.maskers.niftispheresmasker method)": [[333, "nilearn.maskers.NiftiSpheresMasker.__init__"]], "fit() (nilearn.maskers.niftispheresmasker method)": [[333, "nilearn.maskers.NiftiSpheresMasker.fit"]], "fit_transform() (nilearn.maskers.niftispheresmasker method)": [[333, "nilearn.maskers.NiftiSpheresMasker.fit_transform"]], "get_metadata_routing() (nilearn.maskers.niftispheresmasker method)": [[333, "nilearn.maskers.NiftiSpheresMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftispheresmasker method)": [[333, "nilearn.maskers.NiftiSpheresMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftispheresmasker method)": [[333, "nilearn.maskers.NiftiSpheresMasker.inverse_transform"]], "set_inverse_transform_request() (nilearn.maskers.niftispheresmasker method)": [[333, "nilearn.maskers.NiftiSpheresMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.niftispheresmasker method)": [[333, "nilearn.maskers.NiftiSpheresMasker.set_output"]], "set_params() (nilearn.maskers.niftispheresmasker method)": [[333, "nilearn.maskers.NiftiSpheresMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftispheresmasker method)": [[333, "nilearn.maskers.NiftiSpheresMasker.set_transform_request"]], "transform() (nilearn.maskers.niftispheresmasker method)": [[333, "nilearn.maskers.NiftiSpheresMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftispheresmasker method)": [[333, "nilearn.maskers.NiftiSpheresMasker.transform_single_imgs"]], "apply_mask() (in module nilearn.masking)": [[334, "nilearn.masking.apply_mask"]], "compute_background_mask() (in module nilearn.masking)": [[335, "nilearn.masking.compute_background_mask"]], "compute_brain_mask() (in module nilearn.masking)": [[336, "nilearn.masking.compute_brain_mask"]], "compute_epi_mask() (in module nilearn.masking)": [[337, "nilearn.masking.compute_epi_mask"]], "compute_multi_background_mask() (in module nilearn.masking)": [[338, "nilearn.masking.compute_multi_background_mask"]], "compute_multi_brain_mask() (in module nilearn.masking)": [[339, "nilearn.masking.compute_multi_brain_mask"]], "compute_multi_epi_mask() (in module nilearn.masking)": [[340, "nilearn.masking.compute_multi_epi_mask"]], "intersect_masks() (in module nilearn.masking)": [[341, "nilearn.masking.intersect_masks"]], "unmask() (in module nilearn.masking)": [[342, "nilearn.masking.unmask"]], "permuted_ols() (in module nilearn.mass_univariate)": [[343, "nilearn.mass_univariate.permuted_ols"]], "baseaxes (class in nilearn.plotting.displays)": [[344, "nilearn.plotting.displays.BaseAxes"]], "__init__() (nilearn.plotting.displays.baseaxes method)": [[344, "nilearn.plotting.displays.BaseAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[344, "nilearn.plotting.displays.BaseAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.baseaxes method)": [[344, "nilearn.plotting.displays.BaseAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.baseaxes method)": [[344, "nilearn.plotting.displays.BaseAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.baseaxes method)": [[344, "nilearn.plotting.displays.BaseAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.baseaxes method)": [[344, "nilearn.plotting.displays.BaseAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[344, "nilearn.plotting.displays.BaseAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.baseaxes method)": [[344, "nilearn.plotting.displays.BaseAxes.transform_to_2d"]], "baseslicer (class in nilearn.plotting.displays)": [[345, "nilearn.plotting.displays.BaseSlicer"]], "__init__() (nilearn.plotting.displays.baseslicer method)": [[345, "nilearn.plotting.displays.BaseSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.baseslicer method)": [[345, "nilearn.plotting.displays.BaseSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.baseslicer method)": [[345, "nilearn.plotting.displays.BaseSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.baseslicer method)": [[345, "nilearn.plotting.displays.BaseSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.baseslicer method)": [[345, "nilearn.plotting.displays.BaseSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.baseslicer method)": [[345, "nilearn.plotting.displays.BaseSlicer.annotate"]], "black_bg (nilearn.plotting.displays.baseslicer property)": [[345, "nilearn.plotting.displays.BaseSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.baseslicer property)": [[345, "nilearn.plotting.displays.BaseSlicer.brain_color"]], "close() (nilearn.plotting.displays.baseslicer method)": [[345, "nilearn.plotting.displays.BaseSlicer.close"]], "find_cut_coords() (nilearn.plotting.displays.baseslicer static method)": [[345, "nilearn.plotting.displays.BaseSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.baseslicer class method)": [[345, "nilearn.plotting.displays.BaseSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.baseslicer method)": [[345, "nilearn.plotting.displays.BaseSlicer.savefig"]], "title() (nilearn.plotting.displays.baseslicer method)": [[345, "nilearn.plotting.displays.BaseSlicer.title"]], "cutaxes (class in nilearn.plotting.displays)": [[346, "nilearn.plotting.displays.CutAxes"]], "__init__() (nilearn.plotting.displays.cutaxes method)": [[346, "nilearn.plotting.displays.CutAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[346, "nilearn.plotting.displays.CutAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.cutaxes method)": [[346, "nilearn.plotting.displays.CutAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.cutaxes method)": [[346, "nilearn.plotting.displays.CutAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.cutaxes method)": [[346, "nilearn.plotting.displays.CutAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.cutaxes method)": [[346, "nilearn.plotting.displays.CutAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[346, "nilearn.plotting.displays.CutAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.cutaxes method)": [[346, "nilearn.plotting.displays.CutAxes.transform_to_2d"]], "glassbrainaxes (class in nilearn.plotting.displays)": [[347, "nilearn.plotting.displays.GlassBrainAxes"]], "__init__() (nilearn.plotting.displays.glassbrainaxes method)": [[347, "nilearn.plotting.displays.GlassBrainAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[347, "nilearn.plotting.displays.GlassBrainAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[347, "nilearn.plotting.displays.GlassBrainAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.glassbrainaxes method)": [[347, "nilearn.plotting.displays.GlassBrainAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.glassbrainaxes method)": [[347, "nilearn.plotting.displays.GlassBrainAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.glassbrainaxes method)": [[347, "nilearn.plotting.displays.GlassBrainAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[347, "nilearn.plotting.displays.GlassBrainAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[347, "nilearn.plotting.displays.GlassBrainAxes.transform_to_2d"]], "lprojector (class in nilearn.plotting.displays)": [[348, "nilearn.plotting.displays.LProjector"]], "__init__() (nilearn.plotting.displays.lprojector method)": [[348, "nilearn.plotting.displays.LProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lprojector method)": [[348, "nilearn.plotting.displays.LProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lprojector method)": [[348, "nilearn.plotting.displays.LProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lprojector method)": [[348, "nilearn.plotting.displays.LProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lprojector method)": [[348, "nilearn.plotting.displays.LProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lprojector method)": [[348, "nilearn.plotting.displays.LProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lprojector method)": [[348, "nilearn.plotting.displays.LProjector.annotate"]], "black_bg (nilearn.plotting.displays.lprojector property)": [[348, "nilearn.plotting.displays.LProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lprojector property)": [[348, "nilearn.plotting.displays.LProjector.brain_color"]], "close() (nilearn.plotting.displays.lprojector method)": [[348, "nilearn.plotting.displays.LProjector.close"]], "draw_cross() (nilearn.plotting.displays.lprojector method)": [[348, "nilearn.plotting.displays.LProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lprojector class method)": [[348, "nilearn.plotting.displays.LProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lprojector class method)": [[348, "nilearn.plotting.displays.LProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lprojector method)": [[348, "nilearn.plotting.displays.LProjector.savefig"]], "title() (nilearn.plotting.displays.lprojector method)": [[348, "nilearn.plotting.displays.LProjector.title"]], "lrprojector (class in nilearn.plotting.displays)": [[349, "nilearn.plotting.displays.LRProjector"]], "__init__() (nilearn.plotting.displays.lrprojector method)": [[349, "nilearn.plotting.displays.LRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lrprojector method)": [[349, "nilearn.plotting.displays.LRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lrprojector method)": [[349, "nilearn.plotting.displays.LRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lrprojector method)": [[349, "nilearn.plotting.displays.LRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lrprojector method)": [[349, "nilearn.plotting.displays.LRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lrprojector method)": [[349, "nilearn.plotting.displays.LRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lrprojector method)": [[349, "nilearn.plotting.displays.LRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lrprojector property)": [[349, "nilearn.plotting.displays.LRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lrprojector property)": [[349, "nilearn.plotting.displays.LRProjector.brain_color"]], "close() (nilearn.plotting.displays.lrprojector method)": [[349, "nilearn.plotting.displays.LRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lrprojector method)": [[349, "nilearn.plotting.displays.LRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lrprojector class method)": [[349, "nilearn.plotting.displays.LRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lrprojector class method)": [[349, "nilearn.plotting.displays.LRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lrprojector method)": [[349, "nilearn.plotting.displays.LRProjector.savefig"]], "title() (nilearn.plotting.displays.lrprojector method)": [[349, "nilearn.plotting.displays.LRProjector.title"]], "lyrprojector (class in nilearn.plotting.displays)": [[350, "nilearn.plotting.displays.LYRProjector"]], "__init__() (nilearn.plotting.displays.lyrprojector method)": [[350, "nilearn.plotting.displays.LYRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lyrprojector method)": [[350, "nilearn.plotting.displays.LYRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lyrprojector method)": [[350, "nilearn.plotting.displays.LYRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lyrprojector method)": [[350, "nilearn.plotting.displays.LYRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lyrprojector method)": [[350, "nilearn.plotting.displays.LYRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lyrprojector method)": [[350, "nilearn.plotting.displays.LYRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lyrprojector method)": [[350, "nilearn.plotting.displays.LYRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lyrprojector property)": [[350, "nilearn.plotting.displays.LYRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lyrprojector property)": [[350, "nilearn.plotting.displays.LYRProjector.brain_color"]], "close() (nilearn.plotting.displays.lyrprojector method)": [[350, "nilearn.plotting.displays.LYRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lyrprojector method)": [[350, "nilearn.plotting.displays.LYRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lyrprojector class method)": [[350, "nilearn.plotting.displays.LYRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lyrprojector class method)": [[350, "nilearn.plotting.displays.LYRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lyrprojector method)": [[350, "nilearn.plotting.displays.LYRProjector.savefig"]], "title() (nilearn.plotting.displays.lyrprojector method)": [[350, "nilearn.plotting.displays.LYRProjector.title"]], "lyrzprojector (class in nilearn.plotting.displays)": [[351, "nilearn.plotting.displays.LYRZProjector"]], "__init__() (nilearn.plotting.displays.lyrzprojector method)": [[351, "nilearn.plotting.displays.LYRZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lyrzprojector method)": [[351, "nilearn.plotting.displays.LYRZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lyrzprojector method)": [[351, "nilearn.plotting.displays.LYRZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lyrzprojector method)": [[351, "nilearn.plotting.displays.LYRZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lyrzprojector method)": [[351, "nilearn.plotting.displays.LYRZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lyrzprojector method)": [[351, "nilearn.plotting.displays.LYRZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lyrzprojector method)": [[351, "nilearn.plotting.displays.LYRZProjector.annotate"]], "black_bg (nilearn.plotting.displays.lyrzprojector property)": [[351, "nilearn.plotting.displays.LYRZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lyrzprojector property)": [[351, "nilearn.plotting.displays.LYRZProjector.brain_color"]], "close() (nilearn.plotting.displays.lyrzprojector method)": [[351, "nilearn.plotting.displays.LYRZProjector.close"]], "draw_cross() (nilearn.plotting.displays.lyrzprojector method)": [[351, "nilearn.plotting.displays.LYRZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lyrzprojector class method)": [[351, "nilearn.plotting.displays.LYRZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lyrzprojector class method)": [[351, "nilearn.plotting.displays.LYRZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lyrzprojector method)": [[351, "nilearn.plotting.displays.LYRZProjector.savefig"]], "title() (nilearn.plotting.displays.lyrzprojector method)": [[351, "nilearn.plotting.displays.LYRZProjector.title"]], "lzrprojector (class in nilearn.plotting.displays)": [[352, "nilearn.plotting.displays.LZRProjector"]], "__init__() (nilearn.plotting.displays.lzrprojector method)": [[352, "nilearn.plotting.displays.LZRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lzrprojector method)": [[352, "nilearn.plotting.displays.LZRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lzrprojector method)": [[352, "nilearn.plotting.displays.LZRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lzrprojector method)": [[352, "nilearn.plotting.displays.LZRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lzrprojector method)": [[352, "nilearn.plotting.displays.LZRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lzrprojector method)": [[352, "nilearn.plotting.displays.LZRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lzrprojector method)": [[352, "nilearn.plotting.displays.LZRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lzrprojector property)": [[352, "nilearn.plotting.displays.LZRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lzrprojector property)": [[352, "nilearn.plotting.displays.LZRProjector.brain_color"]], "close() (nilearn.plotting.displays.lzrprojector method)": [[352, "nilearn.plotting.displays.LZRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lzrprojector method)": [[352, "nilearn.plotting.displays.LZRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lzrprojector class method)": [[352, "nilearn.plotting.displays.LZRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lzrprojector class method)": [[352, "nilearn.plotting.displays.LZRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lzrprojector method)": [[352, "nilearn.plotting.displays.LZRProjector.savefig"]], "title() (nilearn.plotting.displays.lzrprojector method)": [[352, "nilearn.plotting.displays.LZRProjector.title"]], "lzryprojector (class in nilearn.plotting.displays)": [[353, "nilearn.plotting.displays.LZRYProjector"]], "__init__() (nilearn.plotting.displays.lzryprojector method)": [[353, "nilearn.plotting.displays.LZRYProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lzryprojector method)": [[353, "nilearn.plotting.displays.LZRYProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lzryprojector method)": [[353, "nilearn.plotting.displays.LZRYProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lzryprojector method)": [[353, "nilearn.plotting.displays.LZRYProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lzryprojector method)": [[353, "nilearn.plotting.displays.LZRYProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lzryprojector method)": [[353, "nilearn.plotting.displays.LZRYProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lzryprojector method)": [[353, "nilearn.plotting.displays.LZRYProjector.annotate"]], "black_bg (nilearn.plotting.displays.lzryprojector property)": [[353, "nilearn.plotting.displays.LZRYProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lzryprojector property)": [[353, "nilearn.plotting.displays.LZRYProjector.brain_color"]], "close() (nilearn.plotting.displays.lzryprojector method)": [[353, "nilearn.plotting.displays.LZRYProjector.close"]], "draw_cross() (nilearn.plotting.displays.lzryprojector method)": [[353, "nilearn.plotting.displays.LZRYProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lzryprojector class method)": [[353, "nilearn.plotting.displays.LZRYProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lzryprojector class method)": [[353, "nilearn.plotting.displays.LZRYProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lzryprojector method)": [[353, "nilearn.plotting.displays.LZRYProjector.savefig"]], "title() (nilearn.plotting.displays.lzryprojector method)": [[353, "nilearn.plotting.displays.LZRYProjector.title"]], "mosaicslicer (class in nilearn.plotting.displays)": [[354, "nilearn.plotting.displays.MosaicSlicer"]], "__init__() (nilearn.plotting.displays.mosaicslicer method)": [[354, "nilearn.plotting.displays.MosaicSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.mosaicslicer method)": [[354, "nilearn.plotting.displays.MosaicSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.mosaicslicer method)": [[354, "nilearn.plotting.displays.MosaicSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.mosaicslicer method)": [[354, "nilearn.plotting.displays.MosaicSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.mosaicslicer method)": [[354, "nilearn.plotting.displays.MosaicSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.mosaicslicer method)": [[354, "nilearn.plotting.displays.MosaicSlicer.annotate"]], "black_bg (nilearn.plotting.displays.mosaicslicer property)": [[354, "nilearn.plotting.displays.MosaicSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.mosaicslicer property)": [[354, "nilearn.plotting.displays.MosaicSlicer.brain_color"]], "close() (nilearn.plotting.displays.mosaicslicer method)": [[354, "nilearn.plotting.displays.MosaicSlicer.close"]], "draw_cross() (nilearn.plotting.displays.mosaicslicer method)": [[354, "nilearn.plotting.displays.MosaicSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.mosaicslicer class method)": [[354, "nilearn.plotting.displays.MosaicSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.mosaicslicer class method)": [[354, "nilearn.plotting.displays.MosaicSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.mosaicslicer method)": [[354, "nilearn.plotting.displays.MosaicSlicer.savefig"]], "title() (nilearn.plotting.displays.mosaicslicer method)": [[354, "nilearn.plotting.displays.MosaicSlicer.title"]], "orthoprojector (class in nilearn.plotting.displays)": [[355, "nilearn.plotting.displays.OrthoProjector"]], "__init__() (nilearn.plotting.displays.orthoprojector method)": [[355, "nilearn.plotting.displays.OrthoProjector.__init__"]], "add_contours() (nilearn.plotting.displays.orthoprojector method)": [[355, "nilearn.plotting.displays.OrthoProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.orthoprojector method)": [[355, "nilearn.plotting.displays.OrthoProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.orthoprojector method)": [[355, "nilearn.plotting.displays.OrthoProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.orthoprojector method)": [[355, "nilearn.plotting.displays.OrthoProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.orthoprojector method)": [[355, "nilearn.plotting.displays.OrthoProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.orthoprojector method)": [[355, "nilearn.plotting.displays.OrthoProjector.annotate"]], "black_bg (nilearn.plotting.displays.orthoprojector property)": [[355, "nilearn.plotting.displays.OrthoProjector.black_bg"]], "brain_color (nilearn.plotting.displays.orthoprojector property)": [[355, "nilearn.plotting.displays.OrthoProjector.brain_color"]], "close() (nilearn.plotting.displays.orthoprojector method)": [[355, "nilearn.plotting.displays.OrthoProjector.close"]], "draw_cross() (nilearn.plotting.displays.orthoprojector method)": [[355, "nilearn.plotting.displays.OrthoProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.orthoprojector class method)": [[355, "nilearn.plotting.displays.OrthoProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.orthoprojector class method)": [[355, "nilearn.plotting.displays.OrthoProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.orthoprojector method)": [[355, "nilearn.plotting.displays.OrthoProjector.savefig"]], "title() (nilearn.plotting.displays.orthoprojector method)": [[355, "nilearn.plotting.displays.OrthoProjector.title"]], "orthoslicer (class in nilearn.plotting.displays)": [[356, "nilearn.plotting.displays.OrthoSlicer"]], "__init__() (nilearn.plotting.displays.orthoslicer method)": [[356, "nilearn.plotting.displays.OrthoSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.orthoslicer method)": [[356, "nilearn.plotting.displays.OrthoSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.orthoslicer method)": [[356, "nilearn.plotting.displays.OrthoSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.orthoslicer method)": [[356, "nilearn.plotting.displays.OrthoSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.orthoslicer method)": [[356, "nilearn.plotting.displays.OrthoSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.orthoslicer method)": [[356, "nilearn.plotting.displays.OrthoSlicer.annotate"]], "black_bg (nilearn.plotting.displays.orthoslicer property)": [[356, "nilearn.plotting.displays.OrthoSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.orthoslicer property)": [[356, "nilearn.plotting.displays.OrthoSlicer.brain_color"]], "close() (nilearn.plotting.displays.orthoslicer method)": [[356, "nilearn.plotting.displays.OrthoSlicer.close"]], "draw_cross() (nilearn.plotting.displays.orthoslicer method)": [[356, "nilearn.plotting.displays.OrthoSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.orthoslicer class method)": [[356, "nilearn.plotting.displays.OrthoSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.orthoslicer class method)": [[356, "nilearn.plotting.displays.OrthoSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.orthoslicer method)": [[356, "nilearn.plotting.displays.OrthoSlicer.savefig"]], "title() (nilearn.plotting.displays.orthoslicer method)": [[356, "nilearn.plotting.displays.OrthoSlicer.title"]], "plotlysurfacefigure (class in nilearn.plotting.displays)": [[357, "nilearn.plotting.displays.PlotlySurfaceFigure"]], "__init__() (nilearn.plotting.displays.plotlysurfacefigure method)": [[357, "nilearn.plotting.displays.PlotlySurfaceFigure.__init__"]], "savefig() (nilearn.plotting.displays.plotlysurfacefigure method)": [[357, "nilearn.plotting.displays.PlotlySurfaceFigure.savefig"]], "show() (nilearn.plotting.displays.plotlysurfacefigure method)": [[357, "nilearn.plotting.displays.PlotlySurfaceFigure.show"]], "rprojector (class in nilearn.plotting.displays)": [[358, "nilearn.plotting.displays.RProjector"]], "__init__() (nilearn.plotting.displays.rprojector method)": [[358, "nilearn.plotting.displays.RProjector.__init__"]], "add_contours() (nilearn.plotting.displays.rprojector method)": [[358, "nilearn.plotting.displays.RProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.rprojector method)": [[358, "nilearn.plotting.displays.RProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.rprojector method)": [[358, "nilearn.plotting.displays.RProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.rprojector method)": [[358, "nilearn.plotting.displays.RProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.rprojector method)": [[358, "nilearn.plotting.displays.RProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.rprojector method)": [[358, "nilearn.plotting.displays.RProjector.annotate"]], "black_bg (nilearn.plotting.displays.rprojector property)": [[358, "nilearn.plotting.displays.RProjector.black_bg"]], "brain_color (nilearn.plotting.displays.rprojector property)": [[358, "nilearn.plotting.displays.RProjector.brain_color"]], "close() (nilearn.plotting.displays.rprojector method)": [[358, "nilearn.plotting.displays.RProjector.close"]], "draw_cross() (nilearn.plotting.displays.rprojector method)": [[358, "nilearn.plotting.displays.RProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.rprojector class method)": [[358, "nilearn.plotting.displays.RProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.rprojector class method)": [[358, "nilearn.plotting.displays.RProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.rprojector method)": [[358, "nilearn.plotting.displays.RProjector.savefig"]], "title() (nilearn.plotting.displays.rprojector method)": [[358, "nilearn.plotting.displays.RProjector.title"]], "tiledslicer (class in nilearn.plotting.displays)": [[359, "nilearn.plotting.displays.TiledSlicer"]], "__init__() (nilearn.plotting.displays.tiledslicer method)": [[359, "nilearn.plotting.displays.TiledSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.tiledslicer method)": [[359, "nilearn.plotting.displays.TiledSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.tiledslicer method)": [[359, "nilearn.plotting.displays.TiledSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.tiledslicer method)": [[359, "nilearn.plotting.displays.TiledSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.tiledslicer method)": [[359, "nilearn.plotting.displays.TiledSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.tiledslicer method)": [[359, "nilearn.plotting.displays.TiledSlicer.annotate"]], "black_bg (nilearn.plotting.displays.tiledslicer property)": [[359, "nilearn.plotting.displays.TiledSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.tiledslicer property)": [[359, "nilearn.plotting.displays.TiledSlicer.brain_color"]], "close() (nilearn.plotting.displays.tiledslicer method)": [[359, "nilearn.plotting.displays.TiledSlicer.close"]], "draw_cross() (nilearn.plotting.displays.tiledslicer method)": [[359, "nilearn.plotting.displays.TiledSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.tiledslicer class method)": [[359, "nilearn.plotting.displays.TiledSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.tiledslicer class method)": [[359, "nilearn.plotting.displays.TiledSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.tiledslicer method)": [[359, "nilearn.plotting.displays.TiledSlicer.savefig"]], "title() (nilearn.plotting.displays.tiledslicer method)": [[359, "nilearn.plotting.displays.TiledSlicer.title"]], "xprojector (class in nilearn.plotting.displays)": [[360, "nilearn.plotting.displays.XProjector"]], "__init__() (nilearn.plotting.displays.xprojector method)": [[360, "nilearn.plotting.displays.XProjector.__init__"]], "add_contours() (nilearn.plotting.displays.xprojector method)": [[360, "nilearn.plotting.displays.XProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.xprojector method)": [[360, "nilearn.plotting.displays.XProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.xprojector method)": [[360, "nilearn.plotting.displays.XProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.xprojector method)": [[360, "nilearn.plotting.displays.XProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.xprojector method)": [[360, "nilearn.plotting.displays.XProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.xprojector method)": [[360, "nilearn.plotting.displays.XProjector.annotate"]], "black_bg (nilearn.plotting.displays.xprojector property)": [[360, "nilearn.plotting.displays.XProjector.black_bg"]], "brain_color (nilearn.plotting.displays.xprojector property)": [[360, "nilearn.plotting.displays.XProjector.brain_color"]], "close() (nilearn.plotting.displays.xprojector method)": [[360, "nilearn.plotting.displays.XProjector.close"]], "draw_cross() (nilearn.plotting.displays.xprojector method)": [[360, "nilearn.plotting.displays.XProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xprojector class method)": [[360, "nilearn.plotting.displays.XProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xprojector class method)": [[360, "nilearn.plotting.displays.XProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.xprojector method)": [[360, "nilearn.plotting.displays.XProjector.savefig"]], "title() (nilearn.plotting.displays.xprojector method)": [[360, "nilearn.plotting.displays.XProjector.title"]], "xslicer (class in nilearn.plotting.displays)": [[361, "nilearn.plotting.displays.XSlicer"]], "__init__() (nilearn.plotting.displays.xslicer method)": [[361, "nilearn.plotting.displays.XSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.xslicer method)": [[361, "nilearn.plotting.displays.XSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.xslicer method)": [[361, "nilearn.plotting.displays.XSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.xslicer method)": [[361, "nilearn.plotting.displays.XSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.xslicer method)": [[361, "nilearn.plotting.displays.XSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.xslicer method)": [[361, "nilearn.plotting.displays.XSlicer.annotate"]], "black_bg (nilearn.plotting.displays.xslicer property)": [[361, "nilearn.plotting.displays.XSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.xslicer property)": [[361, "nilearn.plotting.displays.XSlicer.brain_color"]], "close() (nilearn.plotting.displays.xslicer method)": [[361, "nilearn.plotting.displays.XSlicer.close"]], "draw_cross() (nilearn.plotting.displays.xslicer method)": [[361, "nilearn.plotting.displays.XSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xslicer class method)": [[361, "nilearn.plotting.displays.XSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xslicer class method)": [[361, "nilearn.plotting.displays.XSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.xslicer method)": [[361, "nilearn.plotting.displays.XSlicer.savefig"]], "title() (nilearn.plotting.displays.xslicer method)": [[361, "nilearn.plotting.displays.XSlicer.title"]], "xzprojector (class in nilearn.plotting.displays)": [[362, "nilearn.plotting.displays.XZProjector"]], "__init__() (nilearn.plotting.displays.xzprojector method)": [[362, "nilearn.plotting.displays.XZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.xzprojector method)": [[362, "nilearn.plotting.displays.XZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.xzprojector method)": [[362, "nilearn.plotting.displays.XZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.xzprojector method)": [[362, "nilearn.plotting.displays.XZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.xzprojector method)": [[362, "nilearn.plotting.displays.XZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.xzprojector method)": [[362, "nilearn.plotting.displays.XZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.xzprojector method)": [[362, "nilearn.plotting.displays.XZProjector.annotate"]], "black_bg (nilearn.plotting.displays.xzprojector property)": [[362, "nilearn.plotting.displays.XZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.xzprojector property)": [[362, "nilearn.plotting.displays.XZProjector.brain_color"]], "close() (nilearn.plotting.displays.xzprojector method)": [[362, "nilearn.plotting.displays.XZProjector.close"]], "draw_cross() (nilearn.plotting.displays.xzprojector method)": [[362, "nilearn.plotting.displays.XZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xzprojector class method)": [[362, "nilearn.plotting.displays.XZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xzprojector class method)": [[362, "nilearn.plotting.displays.XZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.xzprojector method)": [[362, "nilearn.plotting.displays.XZProjector.savefig"]], "title() (nilearn.plotting.displays.xzprojector method)": [[362, "nilearn.plotting.displays.XZProjector.title"]], "xzslicer (class in nilearn.plotting.displays)": [[363, "nilearn.plotting.displays.XZSlicer"]], "__init__() (nilearn.plotting.displays.xzslicer method)": [[363, "nilearn.plotting.displays.XZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.xzslicer method)": [[363, "nilearn.plotting.displays.XZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.xzslicer method)": [[363, "nilearn.plotting.displays.XZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.xzslicer method)": [[363, "nilearn.plotting.displays.XZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.xzslicer method)": [[363, "nilearn.plotting.displays.XZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.xzslicer method)": [[363, "nilearn.plotting.displays.XZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.xzslicer property)": [[363, "nilearn.plotting.displays.XZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.xzslicer property)": [[363, "nilearn.plotting.displays.XZSlicer.brain_color"]], "close() (nilearn.plotting.displays.xzslicer method)": [[363, "nilearn.plotting.displays.XZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.xzslicer method)": [[363, "nilearn.plotting.displays.XZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xzslicer class method)": [[363, "nilearn.plotting.displays.XZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xzslicer class method)": [[363, "nilearn.plotting.displays.XZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.xzslicer method)": [[363, "nilearn.plotting.displays.XZSlicer.savefig"]], "title() (nilearn.plotting.displays.xzslicer method)": [[363, "nilearn.plotting.displays.XZSlicer.title"]], "yprojector (class in nilearn.plotting.displays)": [[364, "nilearn.plotting.displays.YProjector"]], "__init__() (nilearn.plotting.displays.yprojector method)": [[364, "nilearn.plotting.displays.YProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yprojector method)": [[364, "nilearn.plotting.displays.YProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yprojector method)": [[364, "nilearn.plotting.displays.YProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yprojector method)": [[364, "nilearn.plotting.displays.YProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yprojector method)": [[364, "nilearn.plotting.displays.YProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yprojector method)": [[364, "nilearn.plotting.displays.YProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yprojector method)": [[364, "nilearn.plotting.displays.YProjector.annotate"]], "black_bg (nilearn.plotting.displays.yprojector property)": [[364, "nilearn.plotting.displays.YProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yprojector property)": [[364, "nilearn.plotting.displays.YProjector.brain_color"]], "close() (nilearn.plotting.displays.yprojector method)": [[364, "nilearn.plotting.displays.YProjector.close"]], "draw_cross() (nilearn.plotting.displays.yprojector method)": [[364, "nilearn.plotting.displays.YProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yprojector class method)": [[364, "nilearn.plotting.displays.YProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yprojector class method)": [[364, "nilearn.plotting.displays.YProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yprojector method)": [[364, "nilearn.plotting.displays.YProjector.savefig"]], "title() (nilearn.plotting.displays.yprojector method)": [[364, "nilearn.plotting.displays.YProjector.title"]], "yslicer (class in nilearn.plotting.displays)": [[365, "nilearn.plotting.displays.YSlicer"]], "__init__() (nilearn.plotting.displays.yslicer method)": [[365, "nilearn.plotting.displays.YSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yslicer method)": [[365, "nilearn.plotting.displays.YSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yslicer method)": [[365, "nilearn.plotting.displays.YSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yslicer method)": [[365, "nilearn.plotting.displays.YSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yslicer method)": [[365, "nilearn.plotting.displays.YSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yslicer method)": [[365, "nilearn.plotting.displays.YSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yslicer property)": [[365, "nilearn.plotting.displays.YSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yslicer property)": [[365, "nilearn.plotting.displays.YSlicer.brain_color"]], "close() (nilearn.plotting.displays.yslicer method)": [[365, "nilearn.plotting.displays.YSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yslicer method)": [[365, "nilearn.plotting.displays.YSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yslicer class method)": [[365, "nilearn.plotting.displays.YSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yslicer class method)": [[365, "nilearn.plotting.displays.YSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yslicer method)": [[365, "nilearn.plotting.displays.YSlicer.savefig"]], "title() (nilearn.plotting.displays.yslicer method)": [[365, "nilearn.plotting.displays.YSlicer.title"]], "yxprojector (class in nilearn.plotting.displays)": [[366, "nilearn.plotting.displays.YXProjector"]], "__init__() (nilearn.plotting.displays.yxprojector method)": [[366, "nilearn.plotting.displays.YXProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yxprojector method)": [[366, "nilearn.plotting.displays.YXProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yxprojector method)": [[366, "nilearn.plotting.displays.YXProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yxprojector method)": [[366, "nilearn.plotting.displays.YXProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yxprojector method)": [[366, "nilearn.plotting.displays.YXProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yxprojector method)": [[366, "nilearn.plotting.displays.YXProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yxprojector method)": [[366, "nilearn.plotting.displays.YXProjector.annotate"]], "black_bg (nilearn.plotting.displays.yxprojector property)": [[366, "nilearn.plotting.displays.YXProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yxprojector property)": [[366, "nilearn.plotting.displays.YXProjector.brain_color"]], "close() (nilearn.plotting.displays.yxprojector method)": [[366, "nilearn.plotting.displays.YXProjector.close"]], "draw_cross() (nilearn.plotting.displays.yxprojector method)": [[366, "nilearn.plotting.displays.YXProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yxprojector class method)": [[366, "nilearn.plotting.displays.YXProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yxprojector class method)": [[366, "nilearn.plotting.displays.YXProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yxprojector method)": [[366, "nilearn.plotting.displays.YXProjector.savefig"]], "title() (nilearn.plotting.displays.yxprojector method)": [[366, "nilearn.plotting.displays.YXProjector.title"]], "yxslicer (class in nilearn.plotting.displays)": [[367, "nilearn.plotting.displays.YXSlicer"]], "__init__() (nilearn.plotting.displays.yxslicer method)": [[367, "nilearn.plotting.displays.YXSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yxslicer method)": [[367, "nilearn.plotting.displays.YXSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yxslicer method)": [[367, "nilearn.plotting.displays.YXSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yxslicer method)": [[367, "nilearn.plotting.displays.YXSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yxslicer method)": [[367, "nilearn.plotting.displays.YXSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yxslicer method)": [[367, "nilearn.plotting.displays.YXSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yxslicer property)": [[367, "nilearn.plotting.displays.YXSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yxslicer property)": [[367, "nilearn.plotting.displays.YXSlicer.brain_color"]], "close() (nilearn.plotting.displays.yxslicer method)": [[367, "nilearn.plotting.displays.YXSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yxslicer method)": [[367, "nilearn.plotting.displays.YXSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yxslicer class method)": [[367, "nilearn.plotting.displays.YXSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yxslicer class method)": [[367, "nilearn.plotting.displays.YXSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yxslicer method)": [[367, "nilearn.plotting.displays.YXSlicer.savefig"]], "title() (nilearn.plotting.displays.yxslicer method)": [[367, "nilearn.plotting.displays.YXSlicer.title"]], "yzprojector (class in nilearn.plotting.displays)": [[368, "nilearn.plotting.displays.YZProjector"]], "__init__() (nilearn.plotting.displays.yzprojector method)": [[368, "nilearn.plotting.displays.YZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yzprojector method)": [[368, "nilearn.plotting.displays.YZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yzprojector method)": [[368, "nilearn.plotting.displays.YZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yzprojector method)": [[368, "nilearn.plotting.displays.YZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yzprojector method)": [[368, "nilearn.plotting.displays.YZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yzprojector method)": [[368, "nilearn.plotting.displays.YZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yzprojector method)": [[368, "nilearn.plotting.displays.YZProjector.annotate"]], "black_bg (nilearn.plotting.displays.yzprojector property)": [[368, "nilearn.plotting.displays.YZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yzprojector property)": [[368, "nilearn.plotting.displays.YZProjector.brain_color"]], "close() (nilearn.plotting.displays.yzprojector method)": [[368, "nilearn.plotting.displays.YZProjector.close"]], "draw_cross() (nilearn.plotting.displays.yzprojector method)": [[368, "nilearn.plotting.displays.YZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yzprojector class method)": [[368, "nilearn.plotting.displays.YZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yzprojector class method)": [[368, "nilearn.plotting.displays.YZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yzprojector method)": [[368, "nilearn.plotting.displays.YZProjector.savefig"]], "title() (nilearn.plotting.displays.yzprojector method)": [[368, "nilearn.plotting.displays.YZProjector.title"]], "yzslicer (class in nilearn.plotting.displays)": [[369, "nilearn.plotting.displays.YZSlicer"]], "__init__() (nilearn.plotting.displays.yzslicer method)": [[369, "nilearn.plotting.displays.YZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yzslicer method)": [[369, "nilearn.plotting.displays.YZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yzslicer method)": [[369, "nilearn.plotting.displays.YZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yzslicer method)": [[369, "nilearn.plotting.displays.YZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yzslicer method)": [[369, "nilearn.plotting.displays.YZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yzslicer method)": [[369, "nilearn.plotting.displays.YZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yzslicer property)": [[369, "nilearn.plotting.displays.YZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yzslicer property)": [[369, "nilearn.plotting.displays.YZSlicer.brain_color"]], "close() (nilearn.plotting.displays.yzslicer method)": [[369, "nilearn.plotting.displays.YZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yzslicer method)": [[369, "nilearn.plotting.displays.YZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yzslicer class method)": [[369, "nilearn.plotting.displays.YZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yzslicer class method)": [[369, "nilearn.plotting.displays.YZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yzslicer method)": [[369, "nilearn.plotting.displays.YZSlicer.savefig"]], "title() (nilearn.plotting.displays.yzslicer method)": [[369, "nilearn.plotting.displays.YZSlicer.title"]], "zprojector (class in nilearn.plotting.displays)": [[370, "nilearn.plotting.displays.ZProjector"]], "__init__() (nilearn.plotting.displays.zprojector method)": [[370, "nilearn.plotting.displays.ZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.zprojector method)": [[370, "nilearn.plotting.displays.ZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.zprojector method)": [[370, "nilearn.plotting.displays.ZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.zprojector method)": [[370, "nilearn.plotting.displays.ZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.zprojector method)": [[370, "nilearn.plotting.displays.ZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.zprojector method)": [[370, "nilearn.plotting.displays.ZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.zprojector method)": [[370, "nilearn.plotting.displays.ZProjector.annotate"]], "black_bg (nilearn.plotting.displays.zprojector property)": [[370, "nilearn.plotting.displays.ZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.zprojector property)": [[370, "nilearn.plotting.displays.ZProjector.brain_color"]], "close() (nilearn.plotting.displays.zprojector method)": [[370, "nilearn.plotting.displays.ZProjector.close"]], "draw_cross() (nilearn.plotting.displays.zprojector method)": [[370, "nilearn.plotting.displays.ZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.zprojector class method)": [[370, "nilearn.plotting.displays.ZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.zprojector class method)": [[370, "nilearn.plotting.displays.ZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.zprojector method)": [[370, "nilearn.plotting.displays.ZProjector.savefig"]], "title() (nilearn.plotting.displays.zprojector method)": [[370, "nilearn.plotting.displays.ZProjector.title"]], "zslicer (class in nilearn.plotting.displays)": [[371, "nilearn.plotting.displays.ZSlicer"]], "__init__() (nilearn.plotting.displays.zslicer method)": [[371, "nilearn.plotting.displays.ZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.zslicer method)": [[371, "nilearn.plotting.displays.ZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.zslicer method)": [[371, "nilearn.plotting.displays.ZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.zslicer method)": [[371, "nilearn.plotting.displays.ZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.zslicer method)": [[371, "nilearn.plotting.displays.ZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.zslicer method)": [[371, "nilearn.plotting.displays.ZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.zslicer property)": [[371, "nilearn.plotting.displays.ZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.zslicer property)": [[371, "nilearn.plotting.displays.ZSlicer.brain_color"]], "close() (nilearn.plotting.displays.zslicer method)": [[371, "nilearn.plotting.displays.ZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.zslicer method)": [[371, "nilearn.plotting.displays.ZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.zslicer class method)": [[371, "nilearn.plotting.displays.ZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.zslicer class method)": [[371, "nilearn.plotting.displays.ZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.zslicer method)": [[371, "nilearn.plotting.displays.ZSlicer.savefig"]], "title() (nilearn.plotting.displays.zslicer method)": [[371, "nilearn.plotting.displays.ZSlicer.title"]], "get_projector() (in module nilearn.plotting.displays)": [[372, "nilearn.plotting.displays.get_projector"]], "get_slicer() (in module nilearn.plotting.displays)": [[373, "nilearn.plotting.displays.get_slicer"]], "find_cut_slices() (in module nilearn.plotting)": [[374, "nilearn.plotting.find_cut_slices"]], "find_parcellation_cut_coords() (in module nilearn.plotting)": [[375, "nilearn.plotting.find_parcellation_cut_coords"]], "find_probabilistic_atlas_cut_coords() (in module nilearn.plotting)": [[376, "nilearn.plotting.find_probabilistic_atlas_cut_coords"]], "find_xyz_cut_coords() (in module nilearn.plotting)": [[377, "nilearn.plotting.find_xyz_cut_coords"]], "plot_anat() (in module nilearn.plotting)": [[378, "nilearn.plotting.plot_anat"]], "plot_carpet() (in module nilearn.plotting)": [[379, "nilearn.plotting.plot_carpet"]], "plot_connectome() (in module nilearn.plotting)": [[380, "nilearn.plotting.plot_connectome"]], "plot_contrast_matrix() (in module nilearn.plotting)": [[381, "nilearn.plotting.plot_contrast_matrix"]], "plot_design_matrix() (in module nilearn.plotting)": [[382, "nilearn.plotting.plot_design_matrix"]], "plot_epi() (in module nilearn.plotting)": [[383, "nilearn.plotting.plot_epi"]], "plot_event() (in module nilearn.plotting)": [[384, "nilearn.plotting.plot_event"]], "plot_glass_brain() (in module nilearn.plotting)": [[385, "nilearn.plotting.plot_glass_brain"]], "plot_img() (in module nilearn.plotting)": [[386, "nilearn.plotting.plot_img"]], "plot_img_comparison() (in module nilearn.plotting)": [[387, "nilearn.plotting.plot_img_comparison"]], "plot_img_on_surf() (in module nilearn.plotting)": [[388, "nilearn.plotting.plot_img_on_surf"]], "plot_markers() (in module nilearn.plotting)": [[389, "nilearn.plotting.plot_markers"]], "plot_matrix() (in module nilearn.plotting)": [[390, "nilearn.plotting.plot_matrix"]], "plot_prob_atlas() (in module nilearn.plotting)": [[391, "nilearn.plotting.plot_prob_atlas"]], "plot_roi() (in module nilearn.plotting)": [[392, "nilearn.plotting.plot_roi"]], "plot_stat_map() (in module nilearn.plotting)": [[393, "nilearn.plotting.plot_stat_map"]], "plot_surf() (in module nilearn.plotting)": [[394, "nilearn.plotting.plot_surf"]], "plot_surf_contours() (in module nilearn.plotting)": [[395, "nilearn.plotting.plot_surf_contours"]], "plot_surf_roi() (in module nilearn.plotting)": [[396, "nilearn.plotting.plot_surf_roi"]], "plot_surf_stat_map() (in module nilearn.plotting)": [[397, "nilearn.plotting.plot_surf_stat_map"]], "show() (in module nilearn.plotting)": [[398, "nilearn.plotting.show"]], "view_connectome() (in module nilearn.plotting)": [[399, "nilearn.plotting.view_connectome"]], "view_img() (in module nilearn.plotting)": [[400, "nilearn.plotting.view_img"]], "view_img_on_surf() (in module nilearn.plotting)": [[401, "nilearn.plotting.view_img_on_surf"]], "view_markers() (in module nilearn.plotting)": [[402, "nilearn.plotting.view_markers"]], "view_surf() (in module nilearn.plotting)": [[403, "nilearn.plotting.view_surf"]], "hierarchicalkmeans (class in nilearn.regions)": [[404, "nilearn.regions.HierarchicalKMeans"]], "__init__() (nilearn.regions.hierarchicalkmeans method)": [[404, "nilearn.regions.HierarchicalKMeans.__init__"]], "fit() (nilearn.regions.hierarchicalkmeans method)": [[404, "nilearn.regions.HierarchicalKMeans.fit"]], "fit_predict() (nilearn.regions.hierarchicalkmeans method)": [[404, "nilearn.regions.HierarchicalKMeans.fit_predict"]], "fit_transform() (nilearn.regions.hierarchicalkmeans method)": [[404, "nilearn.regions.HierarchicalKMeans.fit_transform"]], "get_metadata_routing() (nilearn.regions.hierarchicalkmeans method)": [[404, "nilearn.regions.HierarchicalKMeans.get_metadata_routing"]], "get_params() (nilearn.regions.hierarchicalkmeans method)": [[404, "nilearn.regions.HierarchicalKMeans.get_params"]], "inverse_transform() (nilearn.regions.hierarchicalkmeans method)": [[404, "nilearn.regions.HierarchicalKMeans.inverse_transform"]], "set_inverse_transform_request() (nilearn.regions.hierarchicalkmeans method)": [[404, "nilearn.regions.HierarchicalKMeans.set_inverse_transform_request"]], "set_output() (nilearn.regions.hierarchicalkmeans method)": [[404, "nilearn.regions.HierarchicalKMeans.set_output"]], "set_params() (nilearn.regions.hierarchicalkmeans method)": [[404, "nilearn.regions.HierarchicalKMeans.set_params"]], "transform() (nilearn.regions.hierarchicalkmeans method)": [[404, "nilearn.regions.HierarchicalKMeans.transform"]], "parcellations (class in nilearn.regions)": [[405, "nilearn.regions.Parcellations"]], "valid_methods (nilearn.regions.parcellations attribute)": [[405, "nilearn.regions.Parcellations.VALID_METHODS"]], "__init__() (nilearn.regions.parcellations method)": [[405, "nilearn.regions.Parcellations.__init__"]], "fit() (nilearn.regions.parcellations method)": [[405, "nilearn.regions.Parcellations.fit"]], "fit_transform() (nilearn.regions.parcellations method)": [[405, "nilearn.regions.Parcellations.fit_transform"]], "get_metadata_routing() (nilearn.regions.parcellations method)": [[405, "nilearn.regions.Parcellations.get_metadata_routing"]], "get_params() (nilearn.regions.parcellations method)": [[405, "nilearn.regions.Parcellations.get_params"]], "inverse_transform() (nilearn.regions.parcellations method)": [[405, "nilearn.regions.Parcellations.inverse_transform"]], "score() (nilearn.regions.parcellations method)": [[405, "nilearn.regions.Parcellations.score"]], "set_fit_request() (nilearn.regions.parcellations method)": [[405, "nilearn.regions.Parcellations.set_fit_request"]], "set_inverse_transform_request() (nilearn.regions.parcellations method)": [[405, "nilearn.regions.Parcellations.set_inverse_transform_request"]], "set_output() (nilearn.regions.parcellations method)": [[405, "nilearn.regions.Parcellations.set_output"]], "set_params() (nilearn.regions.parcellations method)": [[405, "nilearn.regions.Parcellations.set_params"]], "set_score_request() (nilearn.regions.parcellations method)": [[405, "nilearn.regions.Parcellations.set_score_request"]], "set_transform_request() (nilearn.regions.parcellations method)": [[405, "nilearn.regions.Parcellations.set_transform_request"]], "transform() (nilearn.regions.parcellations method)": [[405, "nilearn.regions.Parcellations.transform"]], "rena (class in nilearn.regions)": [[406, "nilearn.regions.ReNA"]], "__init__() (nilearn.regions.rena method)": [[406, "nilearn.regions.ReNA.__init__"]], "fit() (nilearn.regions.rena method)": [[406, "nilearn.regions.ReNA.fit"]], "fit_predict() (nilearn.regions.rena method)": [[406, "nilearn.regions.ReNA.fit_predict"]], "fit_transform() (nilearn.regions.rena method)": [[406, "nilearn.regions.ReNA.fit_transform"]], "get_metadata_routing() (nilearn.regions.rena method)": [[406, "nilearn.regions.ReNA.get_metadata_routing"]], "get_params() (nilearn.regions.rena method)": [[406, "nilearn.regions.ReNA.get_params"]], "inverse_transform() (nilearn.regions.rena method)": [[406, "nilearn.regions.ReNA.inverse_transform"]], "set_inverse_transform_request() (nilearn.regions.rena method)": [[406, "nilearn.regions.ReNA.set_inverse_transform_request"]], "set_output() (nilearn.regions.rena method)": [[406, "nilearn.regions.ReNA.set_output"]], "set_params() (nilearn.regions.rena method)": [[406, "nilearn.regions.ReNA.set_params"]], "transform() (nilearn.regions.rena method)": [[406, "nilearn.regions.ReNA.transform"]], "regionextractor (class in nilearn.regions)": [[407, "nilearn.regions.RegionExtractor"]], "__init__() (nilearn.regions.regionextractor method)": [[407, "nilearn.regions.RegionExtractor.__init__"]], "fit() (nilearn.regions.regionextractor method)": [[407, "nilearn.regions.RegionExtractor.fit"]], "fit_transform() (nilearn.regions.regionextractor method)": [[407, "nilearn.regions.RegionExtractor.fit_transform"]], "generate_report() (nilearn.regions.regionextractor method)": [[407, "nilearn.regions.RegionExtractor.generate_report"]], "get_metadata_routing() (nilearn.regions.regionextractor method)": [[407, "nilearn.regions.RegionExtractor.get_metadata_routing"]], "get_params() (nilearn.regions.regionextractor method)": [[407, "nilearn.regions.RegionExtractor.get_params"]], "inverse_transform() (nilearn.regions.regionextractor method)": [[407, "nilearn.regions.RegionExtractor.inverse_transform"]], "set_fit_request() (nilearn.regions.regionextractor method)": [[407, "nilearn.regions.RegionExtractor.set_fit_request"]], "set_inverse_transform_request() (nilearn.regions.regionextractor method)": [[407, "nilearn.regions.RegionExtractor.set_inverse_transform_request"]], "set_output() (nilearn.regions.regionextractor method)": [[407, "nilearn.regions.RegionExtractor.set_output"]], "set_params() (nilearn.regions.regionextractor method)": [[407, "nilearn.regions.RegionExtractor.set_params"]], "set_transform_request() (nilearn.regions.regionextractor method)": [[407, "nilearn.regions.RegionExtractor.set_transform_request"]], "transform() (nilearn.regions.regionextractor method)": [[407, "nilearn.regions.RegionExtractor.transform"]], "transform_single_imgs() (nilearn.regions.regionextractor method)": [[407, "nilearn.regions.RegionExtractor.transform_single_imgs"]], "connected_label_regions() (in module nilearn.regions)": [[408, "nilearn.regions.connected_label_regions"]], "connected_regions() (in module nilearn.regions)": [[409, "nilearn.regions.connected_regions"]], "img_to_signals_labels() (in module nilearn.regions)": [[410, "nilearn.regions.img_to_signals_labels"]], "img_to_signals_maps() (in module nilearn.regions)": [[411, "nilearn.regions.img_to_signals_maps"]], "recursive_neighbor_agglomeration() (in module nilearn.regions)": [[412, "nilearn.regions.recursive_neighbor_agglomeration"]], "signals_to_img_labels() (in module nilearn.regions)": [[413, "nilearn.regions.signals_to_img_labels"]], "signals_to_img_maps() (in module nilearn.regions)": [[414, "nilearn.regions.signals_to_img_maps"]], "htmlreport (class in nilearn.reporting)": [[415, "nilearn.reporting.HTMLReport"]], "__init__() (nilearn.reporting.htmlreport method)": [[415, "nilearn.reporting.HTMLReport.__init__"]], "get_iframe() (nilearn.reporting.htmlreport method)": [[415, "nilearn.reporting.HTMLReport.get_iframe"]], "get_standalone() (nilearn.reporting.htmlreport method)": [[415, "nilearn.reporting.HTMLReport.get_standalone"]], "open_in_browser() (nilearn.reporting.htmlreport method)": [[415, "nilearn.reporting.HTMLReport.open_in_browser"]], "remove_temp_file() (nilearn.reporting.htmlreport method)": [[415, "nilearn.reporting.HTMLReport.remove_temp_file"]], "resize() (nilearn.reporting.htmlreport method)": [[415, "nilearn.reporting.HTMLReport.resize"]], "save_as_html() (nilearn.reporting.htmlreport method)": [[415, "nilearn.reporting.HTMLReport.save_as_html"]], "get_clusters_table() (in module nilearn.reporting)": [[416, "nilearn.reporting.get_clusters_table"]], "make_glm_report() (in module nilearn.reporting)": [[417, "nilearn.reporting.make_glm_report"]], "butterworth() (in module nilearn.signal)": [[418, "nilearn.signal.butterworth"]], "clean() (in module nilearn.signal)": [[419, "nilearn.signal.clean"]], "high_variance_confounds() (in module nilearn.signal)": [[420, "nilearn.signal.high_variance_confounds"]], "load_surf_data() (in module nilearn.surface)": [[421, "nilearn.surface.load_surf_data"]], "load_surf_mesh() (in module nilearn.surface)": [[422, "nilearn.surface.load_surf_mesh"]], "vol_to_surf() (in module nilearn.surface)": [[423, "nilearn.surface.vol_to_surf"]], "nilearn.glm": [[424, "module-nilearn.glm"]], "nilearn.glm.first_level": [[424, "module-nilearn.glm.first_level"]], "nilearn.glm.second_level": [[424, "module-nilearn.glm.second_level"]], "nilearn.image": [[425, "module-nilearn.image"]], "nilearn.interfaces": [[427, "module-nilearn.interfaces"]], "nilearn.interfaces.bids": [[427, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.fmriprep": [[427, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fsl": [[427, "module-nilearn.interfaces.fsl"]], "nilearn.maskers": [[428, "module-nilearn.maskers"]], "nilearn.masking": [[429, "module-nilearn.masking"]], "nilearn.mass_univariate": [[430, "module-nilearn.mass_univariate"]], "nilearn.plotting": [[431, "module-nilearn.plotting"]], "nilearn.plotting.displays": [[431, "module-nilearn.plotting.displays"]], "nilearn.regions": [[432, "module-nilearn.regions"]], "nilearn.reporting": [[433, "module-nilearn.reporting"]], "nilearn.signal": [[434, "module-nilearn.signal"]], "nilearn.surface": [[435, "module-nilearn.surface"]]}})