Search.setIndex({"docnames": ["authors", "auto_examples/00_tutorials/index", "auto_examples/00_tutorials/plot_3d_and_4d_niimg", "auto_examples/00_tutorials/plot_decoding_tutorial", "auto_examples/00_tutorials/plot_nilearn_101", "auto_examples/00_tutorials/plot_python_101", "auto_examples/00_tutorials/plot_single_subject_single_run", "auto_examples/00_tutorials/sg_execution_times", "auto_examples/01_plotting/index", "auto_examples/01_plotting/plot_3d_map_to_surface_projection", "auto_examples/01_plotting/plot_atlas", "auto_examples/01_plotting/plot_carpet", "auto_examples/01_plotting/plot_colormaps", "auto_examples/01_plotting/plot_demo_glass_brain", "auto_examples/01_plotting/plot_demo_glass_brain_extensive", "auto_examples/01_plotting/plot_demo_more_plotting", "auto_examples/01_plotting/plot_demo_plotting", "auto_examples/01_plotting/plot_dim_plotting", "auto_examples/01_plotting/plot_haxby_masks", "auto_examples/01_plotting/plot_multiscale_parcellations", "auto_examples/01_plotting/plot_overlay", "auto_examples/01_plotting/plot_prob_atlas", "auto_examples/01_plotting/plot_surf_atlas", "auto_examples/01_plotting/plot_surf_stat_map", "auto_examples/01_plotting/plot_surface_projection_strategies", "auto_examples/01_plotting/plot_visualization", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats", "auto_examples/01_plotting/sg_execution_times", "auto_examples/02_decoding/index", "auto_examples/02_decoding/plot_haxby_anova_svm", "auto_examples/02_decoding/plot_haxby_different_estimators", "auto_examples/02_decoding/plot_haxby_frem", "auto_examples/02_decoding/plot_haxby_full_analysis", "auto_examples/02_decoding/plot_haxby_glm_decoding", "auto_examples/02_decoding/plot_haxby_grid_search", "auto_examples/02_decoding/plot_haxby_multiclass", "auto_examples/02_decoding/plot_haxby_searchlight", "auto_examples/02_decoding/plot_haxby_searchlight_surface", "auto_examples/02_decoding/plot_haxby_stimuli", "auto_examples/02_decoding/plot_mixed_gambles_frem", "auto_examples/02_decoding/plot_miyawaki_encoding", "auto_examples/02_decoding/plot_miyawaki_reconstruction", "auto_examples/02_decoding/plot_oasis_vbm", "auto_examples/02_decoding/plot_oasis_vbm_space_net", "auto_examples/02_decoding/plot_simulated_data", "auto_examples/02_decoding/sg_execution_times", "auto_examples/03_connectivity/index", "auto_examples/03_connectivity/plot_atlas_comparison", "auto_examples/03_connectivity/plot_compare_decomposition", "auto_examples/03_connectivity/plot_data_driven_parcellations", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps", "auto_examples/03_connectivity/plot_group_level_connectivity", "auto_examples/03_connectivity/plot_inverse_covariance_connectome", "auto_examples/03_connectivity/plot_multi_subject_connectome", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation", "auto_examples/03_connectivity/plot_signal_extraction", "auto_examples/03_connectivity/plot_simulated_connectome", "auto_examples/03_connectivity/plot_sphere_based_connectome", "auto_examples/03_connectivity/sg_execution_times", "auto_examples/04_glm_first_level/index", "auto_examples/04_glm_first_level/plot_adhd_dmn", "auto_examples/04_glm_first_level/plot_bids_features", "auto_examples/04_glm_first_level/plot_design_matrix", "auto_examples/04_glm_first_level/plot_fir_model", "auto_examples/04_glm_first_level/plot_first_level_details", "auto_examples/04_glm_first_level/plot_hrf", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis", "auto_examples/04_glm_first_level/plot_predictions_residuals", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces", "auto_examples/04_glm_first_level/plot_two_runs_model", "auto_examples/04_glm_first_level/plot_write_events_file", "auto_examples/04_glm_first_level/sg_execution_times", "auto_examples/05_glm_second_level/index", "auto_examples/05_glm_second_level/plot_oasis", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels", "auto_examples/05_glm_second_level/plot_second_level_association_test", "auto_examples/05_glm_second_level/plot_second_level_design_matrix", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test", "auto_examples/05_glm_second_level/plot_thresholding", "auto_examples/05_glm_second_level/sg_execution_times", "auto_examples/06_manipulating_images/index", "auto_examples/06_manipulating_images/plot_affine_transformation", "auto_examples/06_manipulating_images/plot_compare_mean_image", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps", "auto_examples/06_manipulating_images/plot_mask_computation", "auto_examples/06_manipulating_images/plot_negate_image", "auto_examples/06_manipulating_images/plot_nifti_labels_simple", "auto_examples/06_manipulating_images/plot_nifti_simple", "auto_examples/06_manipulating_images/plot_resample_to_template", "auto_examples/06_manipulating_images/plot_roi_extraction", "auto_examples/06_manipulating_images/plot_smooth_mean_image", "auto_examples/06_manipulating_images/sg_execution_times", "auto_examples/07_advanced/index", "auto_examples/07_advanced/plot_advanced_decoding_scikit", "auto_examples/07_advanced/plot_age_group_prediction_cross_val", "auto_examples/07_advanced/plot_beta_series", "auto_examples/07_advanced/plot_bids_analysis", "auto_examples/07_advanced/plot_haxby_mass_univariate", "auto_examples/07_advanced/plot_ica_neurovault", "auto_examples/07_advanced/plot_ica_resting_state", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods", "auto_examples/07_advanced/plot_localizer_simple_analysis", "auto_examples/07_advanced/plot_neurovault_meta_analysis", "auto_examples/07_advanced/plot_surface_bids_analysis", "auto_examples/07_advanced/sg_execution_times", "auto_examples/08_experimental/index", "auto_examples/08_experimental/plot_surface_image_and_maskers", "auto_examples/08_experimental/sg_execution_times", "auto_examples/index", "auto_examples/sg_execution_times", "bibliography", "building_blocks/index", "building_blocks/manual_pipeline", "building_blocks/neurovault", "changes/0.1.0", "changes/0.1.1", "changes/0.1.2", "changes/0.1.3", "changes/0.1.4", "changes/0.10.0", "changes/0.10.1", "changes/0.10.2", "changes/0.10.3", "changes/0.10.4", "changes/0.2.0", "changes/0.2.1", "changes/0.2.2", "changes/0.2.3", "changes/0.2.4", "changes/0.2.5", "changes/0.2.6", "changes/0.3.0", "changes/0.3.1", "changes/0.4.0", "changes/0.4.1", "changes/0.4.2", "changes/0.5.0", "changes/0.5.1", "changes/0.5.2", "changes/0.6.0", "changes/0.6.1", "changes/0.6.2", "changes/0.7.0", "changes/0.7.1", "changes/0.8.0", "changes/0.8.1", "changes/0.9.0", "changes/0.9.1", "changes/0.9.2", "changes/latest", "changes/names", "changes/whats_new", "connectivity/connectome_extraction", "connectivity/functional_connectomes", "connectivity/index", "connectivity/parcellating", "connectivity/region_extraction", "connectivity/resting_state_networks", "decoding/decoding_intro", "decoding/estimator_choice", "decoding/frem", "decoding/going_further", "decoding/index", "decoding/searchlight", "decoding/space_net", "developers/group_sparse_covariance", "development", "glm/first_level_model", "glm/glm_intro", "glm/index", "glm/second_level_model", "glossary", "index", "introduction", "maintenance", "manipulating_images/index", "manipulating_images/input_output", "manipulating_images/manipulating_images", "manipulating_images/masker_objects", "modules/connectome", "modules/datasets", "modules/decoding", "modules/decomposition", "modules/description/ABIDE_pcp", "modules/description/Megatrawls", "modules/description/aal_SPM12", "modules/description/adhd", "modules/description/allen_rsn_2011", "modules/description/basc_multiscale_2015", "modules/description/bids_langloc", "modules/description/brainomics_localizer", "modules/description/craddock_2012", "modules/description/destrieux_surface", "modules/description/development_fmri", "modules/description/difumo_atlases", "modules/description/dosenbach_2010", "modules/description/fiac", "modules/description/fsaverage", "modules/description/fsaverage3", "modules/description/fsaverage4", "modules/description/fsaverage5", "modules/description/fsaverage6", "modules/description/harvard_oxford", "modules/description/haxby2001", "modules/description/icbm152_2009", "modules/description/juelich", "modules/description/language_localizer_demo", "modules/description/localizer_first_level", "modules/description/mixed_gambles", "modules/description/miyawaki2008", "modules/description/msdl_atlas", "modules/description/neurovault", "modules/description/nki_enhanced_surface", "modules/description/oasis1", "modules/description/pauli_2017", "modules/description/power_2011", "modules/description/schaefer_2018", "modules/description/seitzman_2018", "modules/description/smith_2009", "modules/description/spm_auditory", "modules/description/spm_multimodal", "modules/description/talairach_atlas", "modules/description/yeo_2011", "modules/experimental", "modules/generated/nilearn.connectome.ConnectivityMeasure", "modules/generated/nilearn.connectome.GroupSparseCovariance", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV", "modules/generated/nilearn.connectome.cov_to_corr", "modules/generated/nilearn.connectome.group_sparse_covariance", "modules/generated/nilearn.connectome.prec_to_partial", "modules/generated/nilearn.connectome.sym_matrix_to_vec", "modules/generated/nilearn.connectome.vec_to_sym_matrix", "modules/generated/nilearn.datasets.fetch_abide_pcp", "modules/generated/nilearn.datasets.fetch_adhd", "modules/generated/nilearn.datasets.fetch_atlas_aal", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009", "modules/generated/nilearn.datasets.fetch_atlas_difumo", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford", "modules/generated/nilearn.datasets.fetch_atlas_juelich", "modules/generated/nilearn.datasets.fetch_atlas_msdl", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux", "modules/generated/nilearn.datasets.fetch_atlas_talairach", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010", "modules/generated/nilearn.datasets.fetch_coords_power_2011", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018", "modules/generated/nilearn.datasets.fetch_development_fmri", "modules/generated/nilearn.datasets.fetch_ds000030_urls", "modules/generated/nilearn.datasets.fetch_fiac_first_level", "modules/generated/nilearn.datasets.fetch_haxby", "modules/generated/nilearn.datasets.fetch_icbm152_2009", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset", "modules/generated/nilearn.datasets.fetch_localizer_button_task", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task", "modules/generated/nilearn.datasets.fetch_localizer_contrasts", "modules/generated/nilearn.datasets.fetch_localizer_first_level", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats", "modules/generated/nilearn.datasets.fetch_mixed_gambles", "modules/generated/nilearn.datasets.fetch_miyawaki2008", "modules/generated/nilearn.datasets.fetch_neurovault", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task", "modules/generated/nilearn.datasets.fetch_neurovault_ids", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task", "modules/generated/nilearn.datasets.fetch_oasis_vbm", "modules/generated/nilearn.datasets.fetch_openneuro_dataset", "modules/generated/nilearn.datasets.fetch_openneuro_dataset_index", "modules/generated/nilearn.datasets.fetch_spm_auditory", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri", "modules/generated/nilearn.datasets.fetch_surf_fsaverage", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced", "modules/generated/nilearn.datasets.get_data_dirs", "modules/generated/nilearn.datasets.load_mni152_brain_mask", "modules/generated/nilearn.datasets.load_mni152_gm_mask", "modules/generated/nilearn.datasets.load_mni152_gm_template", "modules/generated/nilearn.datasets.load_mni152_template", "modules/generated/nilearn.datasets.load_mni152_wm_mask", "modules/generated/nilearn.datasets.load_mni152_wm_template", "modules/generated/nilearn.datasets.load_sample_motor_activation_image", "modules/generated/nilearn.datasets.patch_openneuro_dataset", "modules/generated/nilearn.datasets.select_from_index", "modules/generated/nilearn.decoding.Decoder", "modules/generated/nilearn.decoding.DecoderRegressor", "modules/generated/nilearn.decoding.FREMClassifier", "modules/generated/nilearn.decoding.FREMRegressor", "modules/generated/nilearn.decoding.SearchLight", "modules/generated/nilearn.decoding.SpaceNetClassifier", "modules/generated/nilearn.decoding.SpaceNetRegressor", "modules/generated/nilearn.decomposition.CanICA", "modules/generated/nilearn.decomposition.DictLearning", "modules/generated/nilearn.experimental.surface.FileMesh", "modules/generated/nilearn.experimental.surface.InMemoryMesh", "modules/generated/nilearn.experimental.surface.Mesh", "modules/generated/nilearn.experimental.surface.PolyMesh", "modules/generated/nilearn.experimental.surface.SurfaceImage", "modules/generated/nilearn.experimental.surface.SurfaceLabelsMasker", "modules/generated/nilearn.experimental.surface.SurfaceMasker", "modules/generated/nilearn.experimental.surface.fetch_destrieux", "modules/generated/nilearn.experimental.surface.fetch_nki", "modules/generated/nilearn.experimental.surface.load_fsaverage", "modules/generated/nilearn.glm.ARModel", "modules/generated/nilearn.glm.Contrast", "modules/generated/nilearn.glm.FContrastResults", "modules/generated/nilearn.glm.LikelihoodModelResults", "modules/generated/nilearn.glm.OLSModel", "modules/generated/nilearn.glm.RegressionResults", "modules/generated/nilearn.glm.SimpleRegressionResults", "modules/generated/nilearn.glm.TContrastResults", "modules/generated/nilearn.glm.cluster_level_inference", "modules/generated/nilearn.glm.compute_contrast", "modules/generated/nilearn.glm.compute_fixed_effects", "modules/generated/nilearn.glm.expression_to_contrast_vector", "modules/generated/nilearn.glm.fdr_threshold", "modules/generated/nilearn.glm.first_level.FirstLevelModel", "modules/generated/nilearn.glm.first_level.check_design_matrix", "modules/generated/nilearn.glm.first_level.compute_regressor", "modules/generated/nilearn.glm.first_level.first_level_from_bids", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative", "modules/generated/nilearn.glm.first_level.glover_hrf", "modules/generated/nilearn.glm.first_level.glover_time_derivative", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix", "modules/generated/nilearn.glm.first_level.mean_scaling", "modules/generated/nilearn.glm.first_level.run_glm", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative", "modules/generated/nilearn.glm.first_level.spm_hrf", "modules/generated/nilearn.glm.first_level.spm_time_derivative", "modules/generated/nilearn.glm.second_level.SecondLevelModel", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix", "modules/generated/nilearn.glm.second_level.non_parametric_inference", "modules/generated/nilearn.glm.threshold_stats_img", "modules/generated/nilearn.image.binarize_img", "modules/generated/nilearn.image.clean_img", "modules/generated/nilearn.image.concat_imgs", "modules/generated/nilearn.image.coord_transform", "modules/generated/nilearn.image.copy_img", "modules/generated/nilearn.image.crop_img", "modules/generated/nilearn.image.get_data", "modules/generated/nilearn.image.high_variance_confounds", "modules/generated/nilearn.image.index_img", "modules/generated/nilearn.image.iter_img", "modules/generated/nilearn.image.largest_connected_component_img", "modules/generated/nilearn.image.load_img", "modules/generated/nilearn.image.math_img", "modules/generated/nilearn.image.mean_img", "modules/generated/nilearn.image.new_img_like", "modules/generated/nilearn.image.reorder_img", "modules/generated/nilearn.image.resample_img", "modules/generated/nilearn.image.resample_to_img", "modules/generated/nilearn.image.smooth_img", "modules/generated/nilearn.image.swap_img_hemispheres", "modules/generated/nilearn.image.threshold_img", "modules/generated/nilearn.interfaces.bids.get_bids_files", "modules/generated/nilearn.interfaces.bids.parse_bids_filename", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids", "modules/generated/nilearn.interfaces.fmriprep.load_confounds", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat", "modules/generated/nilearn.maskers.BaseMasker", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker", "modules/generated/nilearn.maskers.MultiNiftiMasker", "modules/generated/nilearn.maskers.NiftiLabelsMasker", "modules/generated/nilearn.maskers.NiftiMapsMasker", "modules/generated/nilearn.maskers.NiftiMasker", "modules/generated/nilearn.maskers.NiftiSpheresMasker", "modules/generated/nilearn.masking.apply_mask", "modules/generated/nilearn.masking.compute_background_mask", "modules/generated/nilearn.masking.compute_brain_mask", "modules/generated/nilearn.masking.compute_epi_mask", "modules/generated/nilearn.masking.compute_multi_background_mask", "modules/generated/nilearn.masking.compute_multi_brain_mask", "modules/generated/nilearn.masking.compute_multi_epi_mask", "modules/generated/nilearn.masking.intersect_masks", "modules/generated/nilearn.masking.unmask", "modules/generated/nilearn.mass_univariate.permuted_ols", "modules/generated/nilearn.plotting.displays.BaseAxes", "modules/generated/nilearn.plotting.displays.BaseSlicer", "modules/generated/nilearn.plotting.displays.CutAxes", "modules/generated/nilearn.plotting.displays.GlassBrainAxes", "modules/generated/nilearn.plotting.displays.LProjector", "modules/generated/nilearn.plotting.displays.LRProjector", "modules/generated/nilearn.plotting.displays.LYRProjector", "modules/generated/nilearn.plotting.displays.LYRZProjector", "modules/generated/nilearn.plotting.displays.LZRProjector", "modules/generated/nilearn.plotting.displays.LZRYProjector", "modules/generated/nilearn.plotting.displays.MosaicSlicer", "modules/generated/nilearn.plotting.displays.OrthoProjector", "modules/generated/nilearn.plotting.displays.OrthoSlicer", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure", "modules/generated/nilearn.plotting.displays.RProjector", "modules/generated/nilearn.plotting.displays.TiledSlicer", "modules/generated/nilearn.plotting.displays.XProjector", "modules/generated/nilearn.plotting.displays.XSlicer", "modules/generated/nilearn.plotting.displays.XZProjector", "modules/generated/nilearn.plotting.displays.XZSlicer", "modules/generated/nilearn.plotting.displays.YProjector", "modules/generated/nilearn.plotting.displays.YSlicer", "modules/generated/nilearn.plotting.displays.YXProjector", "modules/generated/nilearn.plotting.displays.YXSlicer", "modules/generated/nilearn.plotting.displays.YZProjector", "modules/generated/nilearn.plotting.displays.YZSlicer", "modules/generated/nilearn.plotting.displays.ZProjector", "modules/generated/nilearn.plotting.displays.ZSlicer", "modules/generated/nilearn.plotting.displays.get_projector", "modules/generated/nilearn.plotting.displays.get_slicer", "modules/generated/nilearn.plotting.find_cut_slices", "modules/generated/nilearn.plotting.find_parcellation_cut_coords", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords", "modules/generated/nilearn.plotting.find_xyz_cut_coords", "modules/generated/nilearn.plotting.plot_anat", "modules/generated/nilearn.plotting.plot_carpet", "modules/generated/nilearn.plotting.plot_connectome", "modules/generated/nilearn.plotting.plot_contrast_matrix", "modules/generated/nilearn.plotting.plot_design_matrix", "modules/generated/nilearn.plotting.plot_epi", "modules/generated/nilearn.plotting.plot_event", "modules/generated/nilearn.plotting.plot_glass_brain", "modules/generated/nilearn.plotting.plot_img", "modules/generated/nilearn.plotting.plot_img_comparison", "modules/generated/nilearn.plotting.plot_img_on_surf", "modules/generated/nilearn.plotting.plot_markers", "modules/generated/nilearn.plotting.plot_matrix", "modules/generated/nilearn.plotting.plot_prob_atlas", "modules/generated/nilearn.plotting.plot_roi", "modules/generated/nilearn.plotting.plot_stat_map", "modules/generated/nilearn.plotting.plot_surf", "modules/generated/nilearn.plotting.plot_surf_contours", "modules/generated/nilearn.plotting.plot_surf_roi", "modules/generated/nilearn.plotting.plot_surf_stat_map", "modules/generated/nilearn.plotting.show", "modules/generated/nilearn.plotting.view_connectome", "modules/generated/nilearn.plotting.view_img", "modules/generated/nilearn.plotting.view_img_on_surf", "modules/generated/nilearn.plotting.view_markers", "modules/generated/nilearn.plotting.view_surf", "modules/generated/nilearn.regions.HierarchicalKMeans", "modules/generated/nilearn.regions.Parcellations", "modules/generated/nilearn.regions.ReNA", "modules/generated/nilearn.regions.RegionExtractor", "modules/generated/nilearn.regions.connected_label_regions", "modules/generated/nilearn.regions.connected_regions", "modules/generated/nilearn.regions.img_to_signals_labels", "modules/generated/nilearn.regions.img_to_signals_maps", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration", "modules/generated/nilearn.regions.signals_to_img_labels", "modules/generated/nilearn.regions.signals_to_img_maps", "modules/generated/nilearn.reporting.HTMLReport", "modules/generated/nilearn.reporting.get_clusters_table", "modules/generated/nilearn.reporting.make_glm_report", "modules/generated/nilearn.signal.butterworth", "modules/generated/nilearn.signal.clean", "modules/generated/nilearn.signal.high_variance_confounds", "modules/generated/nilearn.surface.load_surf_data", "modules/generated/nilearn.surface.load_surf_mesh", "modules/generated/nilearn.surface.vol_to_surf", "modules/generated_reports/glm_reports_examples", "modules/generated_reports/masker_reports_examples", "modules/glm", "modules/image", "modules/index", "modules/interfaces", "modules/maskers", "modules/masking", "modules/mass_univariate", "modules/plotting", "modules/regions", "modules/reporting", "modules/signal", "modules/surface", "plotting/index", "quickstart", "sg_execution_times", "user_guide"], "filenames": ["authors.rst", "auto_examples/00_tutorials/index.rst", "auto_examples/00_tutorials/plot_3d_and_4d_niimg.rst", "auto_examples/00_tutorials/plot_decoding_tutorial.rst", "auto_examples/00_tutorials/plot_nilearn_101.rst", "auto_examples/00_tutorials/plot_python_101.rst", "auto_examples/00_tutorials/plot_single_subject_single_run.rst", "auto_examples/00_tutorials/sg_execution_times.rst", "auto_examples/01_plotting/index.rst", "auto_examples/01_plotting/plot_3d_map_to_surface_projection.rst", "auto_examples/01_plotting/plot_atlas.rst", "auto_examples/01_plotting/plot_carpet.rst", "auto_examples/01_plotting/plot_colormaps.rst", "auto_examples/01_plotting/plot_demo_glass_brain.rst", "auto_examples/01_plotting/plot_demo_glass_brain_extensive.rst", "auto_examples/01_plotting/plot_demo_more_plotting.rst", "auto_examples/01_plotting/plot_demo_plotting.rst", "auto_examples/01_plotting/plot_dim_plotting.rst", "auto_examples/01_plotting/plot_haxby_masks.rst", "auto_examples/01_plotting/plot_multiscale_parcellations.rst", "auto_examples/01_plotting/plot_overlay.rst", "auto_examples/01_plotting/plot_prob_atlas.rst", "auto_examples/01_plotting/plot_surf_atlas.rst", "auto_examples/01_plotting/plot_surf_stat_map.rst", "auto_examples/01_plotting/plot_surface_projection_strategies.rst", "auto_examples/01_plotting/plot_visualization.rst", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats.rst", "auto_examples/01_plotting/sg_execution_times.rst", "auto_examples/02_decoding/index.rst", "auto_examples/02_decoding/plot_haxby_anova_svm.rst", "auto_examples/02_decoding/plot_haxby_different_estimators.rst", "auto_examples/02_decoding/plot_haxby_frem.rst", "auto_examples/02_decoding/plot_haxby_full_analysis.rst", "auto_examples/02_decoding/plot_haxby_glm_decoding.rst", "auto_examples/02_decoding/plot_haxby_grid_search.rst", "auto_examples/02_decoding/plot_haxby_multiclass.rst", "auto_examples/02_decoding/plot_haxby_searchlight.rst", "auto_examples/02_decoding/plot_haxby_searchlight_surface.rst", "auto_examples/02_decoding/plot_haxby_stimuli.rst", "auto_examples/02_decoding/plot_mixed_gambles_frem.rst", "auto_examples/02_decoding/plot_miyawaki_encoding.rst", "auto_examples/02_decoding/plot_miyawaki_reconstruction.rst", "auto_examples/02_decoding/plot_oasis_vbm.rst", "auto_examples/02_decoding/plot_oasis_vbm_space_net.rst", "auto_examples/02_decoding/plot_simulated_data.rst", "auto_examples/02_decoding/sg_execution_times.rst", "auto_examples/03_connectivity/index.rst", "auto_examples/03_connectivity/plot_atlas_comparison.rst", "auto_examples/03_connectivity/plot_compare_decomposition.rst", "auto_examples/03_connectivity/plot_data_driven_parcellations.rst", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps.rst", "auto_examples/03_connectivity/plot_group_level_connectivity.rst", "auto_examples/03_connectivity/plot_inverse_covariance_connectome.rst", "auto_examples/03_connectivity/plot_multi_subject_connectome.rst", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction.rst", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation.rst", "auto_examples/03_connectivity/plot_signal_extraction.rst", "auto_examples/03_connectivity/plot_simulated_connectome.rst", "auto_examples/03_connectivity/plot_sphere_based_connectome.rst", "auto_examples/03_connectivity/sg_execution_times.rst", "auto_examples/04_glm_first_level/index.rst", "auto_examples/04_glm_first_level/plot_adhd_dmn.rst", "auto_examples/04_glm_first_level/plot_bids_features.rst", "auto_examples/04_glm_first_level/plot_design_matrix.rst", "auto_examples/04_glm_first_level/plot_fir_model.rst", "auto_examples/04_glm_first_level/plot_first_level_details.rst", "auto_examples/04_glm_first_level/plot_hrf.rst", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis.rst", "auto_examples/04_glm_first_level/plot_predictions_residuals.rst", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces.rst", "auto_examples/04_glm_first_level/plot_two_runs_model.rst", "auto_examples/04_glm_first_level/plot_write_events_file.rst", "auto_examples/04_glm_first_level/sg_execution_times.rst", "auto_examples/05_glm_second_level/index.rst", "auto_examples/05_glm_second_level/plot_oasis.rst", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels.rst", "auto_examples/05_glm_second_level/plot_second_level_association_test.rst", "auto_examples/05_glm_second_level/plot_second_level_design_matrix.rst", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test.rst", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test.rst", "auto_examples/05_glm_second_level/plot_thresholding.rst", "auto_examples/05_glm_second_level/sg_execution_times.rst", "auto_examples/06_manipulating_images/index.rst", "auto_examples/06_manipulating_images/plot_affine_transformation.rst", "auto_examples/06_manipulating_images/plot_compare_mean_image.rst", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image.rst", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas.rst", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps.rst", "auto_examples/06_manipulating_images/plot_mask_computation.rst", "auto_examples/06_manipulating_images/plot_negate_image.rst", "auto_examples/06_manipulating_images/plot_nifti_labels_simple.rst", "auto_examples/06_manipulating_images/plot_nifti_simple.rst", "auto_examples/06_manipulating_images/plot_resample_to_template.rst", "auto_examples/06_manipulating_images/plot_roi_extraction.rst", "auto_examples/06_manipulating_images/plot_smooth_mean_image.rst", "auto_examples/06_manipulating_images/sg_execution_times.rst", "auto_examples/07_advanced/index.rst", "auto_examples/07_advanced/plot_advanced_decoding_scikit.rst", "auto_examples/07_advanced/plot_age_group_prediction_cross_val.rst", "auto_examples/07_advanced/plot_beta_series.rst", "auto_examples/07_advanced/plot_bids_analysis.rst", "auto_examples/07_advanced/plot_haxby_mass_univariate.rst", "auto_examples/07_advanced/plot_ica_neurovault.rst", "auto_examples/07_advanced/plot_ica_resting_state.rst", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods.rst", "auto_examples/07_advanced/plot_localizer_simple_analysis.rst", "auto_examples/07_advanced/plot_neurovault_meta_analysis.rst", "auto_examples/07_advanced/plot_surface_bids_analysis.rst", "auto_examples/07_advanced/sg_execution_times.rst", "auto_examples/08_experimental/index.rst", "auto_examples/08_experimental/plot_surface_image_and_maskers.rst", "auto_examples/08_experimental/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/sg_execution_times.rst", "bibliography.rst", "building_blocks/index.rst", "building_blocks/manual_pipeline.rst", "building_blocks/neurovault.rst", "changes/0.1.0.rst", "changes/0.1.1.rst", "changes/0.1.2.rst", "changes/0.1.3.rst", "changes/0.1.4.rst", "changes/0.10.0.rst", "changes/0.10.1.rst", "changes/0.10.2.rst", "changes/0.10.3.rst", "changes/0.10.4.rst", "changes/0.2.0.rst", "changes/0.2.1.rst", "changes/0.2.2.rst", "changes/0.2.3.rst", "changes/0.2.4.rst", "changes/0.2.5.rst", "changes/0.2.6.rst", "changes/0.3.0.rst", "changes/0.3.1.rst", "changes/0.4.0.rst", "changes/0.4.1.rst", "changes/0.4.2.rst", "changes/0.5.0.rst", "changes/0.5.1.rst", "changes/0.5.2.rst", "changes/0.6.0.rst", "changes/0.6.1.rst", "changes/0.6.2.rst", "changes/0.7.0.rst", "changes/0.7.1.rst", "changes/0.8.0.rst", "changes/0.8.1.rst", "changes/0.9.0.rst", "changes/0.9.1.rst", "changes/0.9.2.rst", "changes/latest.rst", "changes/names.rst", "changes/whats_new.rst", "connectivity/connectome_extraction.rst", "connectivity/functional_connectomes.rst", "connectivity/index.rst", "connectivity/parcellating.rst", "connectivity/region_extraction.rst", "connectivity/resting_state_networks.rst", "decoding/decoding_intro.rst", "decoding/estimator_choice.rst", "decoding/frem.rst", "decoding/going_further.rst", "decoding/index.rst", "decoding/searchlight.rst", "decoding/space_net.rst", "developers/group_sparse_covariance.rst", "development.rst", "glm/first_level_model.rst", "glm/glm_intro.rst", "glm/index.rst", "glm/second_level_model.rst", "glossary.rst", "index.rst", "introduction.rst", "maintenance.rst", "manipulating_images/index.rst", "manipulating_images/input_output.rst", "manipulating_images/manipulating_images.rst", "manipulating_images/masker_objects.rst", "modules/connectome.rst", "modules/datasets.rst", "modules/decoding.rst", "modules/decomposition.rst", "modules/description/ABIDE_pcp.rst", "modules/description/Megatrawls.rst", "modules/description/aal_SPM12.rst", "modules/description/adhd.rst", "modules/description/allen_rsn_2011.rst", "modules/description/basc_multiscale_2015.rst", "modules/description/bids_langloc.rst", "modules/description/brainomics_localizer.rst", "modules/description/craddock_2012.rst", "modules/description/destrieux_surface.rst", "modules/description/development_fmri.rst", "modules/description/difumo_atlases.rst", "modules/description/dosenbach_2010.rst", "modules/description/fiac.rst", "modules/description/fsaverage.rst", "modules/description/fsaverage3.rst", "modules/description/fsaverage4.rst", "modules/description/fsaverage5.rst", "modules/description/fsaverage6.rst", "modules/description/harvard_oxford.rst", "modules/description/haxby2001.rst", "modules/description/icbm152_2009.rst", "modules/description/juelich.rst", "modules/description/language_localizer_demo.rst", "modules/description/localizer_first_level.rst", "modules/description/mixed_gambles.rst", "modules/description/miyawaki2008.rst", "modules/description/msdl_atlas.rst", "modules/description/neurovault.rst", "modules/description/nki_enhanced_surface.rst", "modules/description/oasis1.rst", "modules/description/pauli_2017.rst", "modules/description/power_2011.rst", "modules/description/schaefer_2018.rst", "modules/description/seitzman_2018.rst", "modules/description/smith_2009.rst", "modules/description/spm_auditory.rst", "modules/description/spm_multimodal.rst", "modules/description/talairach_atlas.rst", "modules/description/yeo_2011.rst", "modules/experimental.rst", "modules/generated/nilearn.connectome.ConnectivityMeasure.rst", "modules/generated/nilearn.connectome.GroupSparseCovariance.rst", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV.rst", "modules/generated/nilearn.connectome.cov_to_corr.rst", "modules/generated/nilearn.connectome.group_sparse_covariance.rst", "modules/generated/nilearn.connectome.prec_to_partial.rst", "modules/generated/nilearn.connectome.sym_matrix_to_vec.rst", "modules/generated/nilearn.connectome.vec_to_sym_matrix.rst", "modules/generated/nilearn.datasets.fetch_abide_pcp.rst", "modules/generated/nilearn.datasets.fetch_adhd.rst", "modules/generated/nilearn.datasets.fetch_atlas_aal.rst", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011.rst", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015.rst", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012.rst", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_difumo.rst", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford.rst", "modules/generated/nilearn.datasets.fetch_atlas_juelich.rst", "modules/generated/nilearn.datasets.fetch_atlas_msdl.rst", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017.rst", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018.rst", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux.rst", "modules/generated/nilearn.datasets.fetch_atlas_talairach.rst", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011.rst", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset.rst", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010.rst", "modules/generated/nilearn.datasets.fetch_coords_power_2011.rst", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018.rst", "modules/generated/nilearn.datasets.fetch_development_fmri.rst", "modules/generated/nilearn.datasets.fetch_ds000030_urls.rst", "modules/generated/nilearn.datasets.fetch_fiac_first_level.rst", "modules/generated/nilearn.datasets.fetch_haxby.rst", "modules/generated/nilearn.datasets.fetch_icbm152_2009.rst", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask.rst", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset.rst", "modules/generated/nilearn.datasets.fetch_localizer_button_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_contrasts.rst", "modules/generated/nilearn.datasets.fetch_localizer_first_level.rst", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats.rst", "modules/generated/nilearn.datasets.fetch_mixed_gambles.rst", "modules/generated/nilearn.datasets.fetch_miyawaki2008.rst", "modules/generated/nilearn.datasets.fetch_neurovault.rst", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task.rst", "modules/generated/nilearn.datasets.fetch_neurovault_ids.rst", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task.rst", "modules/generated/nilearn.datasets.fetch_oasis_vbm.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset_index.rst", "modules/generated/nilearn.datasets.fetch_spm_auditory.rst", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri.rst", "modules/generated/nilearn.datasets.fetch_surf_fsaverage.rst", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced.rst", "modules/generated/nilearn.datasets.get_data_dirs.rst", "modules/generated/nilearn.datasets.load_mni152_brain_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_template.rst", "modules/generated/nilearn.datasets.load_mni152_template.rst", "modules/generated/nilearn.datasets.load_mni152_wm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_wm_template.rst", "modules/generated/nilearn.datasets.load_sample_motor_activation_image.rst", "modules/generated/nilearn.datasets.patch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.select_from_index.rst", "modules/generated/nilearn.decoding.Decoder.rst", "modules/generated/nilearn.decoding.DecoderRegressor.rst", "modules/generated/nilearn.decoding.FREMClassifier.rst", "modules/generated/nilearn.decoding.FREMRegressor.rst", "modules/generated/nilearn.decoding.SearchLight.rst", "modules/generated/nilearn.decoding.SpaceNetClassifier.rst", "modules/generated/nilearn.decoding.SpaceNetRegressor.rst", "modules/generated/nilearn.decomposition.CanICA.rst", "modules/generated/nilearn.decomposition.DictLearning.rst", "modules/generated/nilearn.experimental.surface.FileMesh.rst", "modules/generated/nilearn.experimental.surface.InMemoryMesh.rst", "modules/generated/nilearn.experimental.surface.Mesh.rst", "modules/generated/nilearn.experimental.surface.PolyMesh.rst", "modules/generated/nilearn.experimental.surface.SurfaceImage.rst", "modules/generated/nilearn.experimental.surface.SurfaceLabelsMasker.rst", "modules/generated/nilearn.experimental.surface.SurfaceMasker.rst", "modules/generated/nilearn.experimental.surface.fetch_destrieux.rst", "modules/generated/nilearn.experimental.surface.fetch_nki.rst", "modules/generated/nilearn.experimental.surface.load_fsaverage.rst", "modules/generated/nilearn.glm.ARModel.rst", "modules/generated/nilearn.glm.Contrast.rst", "modules/generated/nilearn.glm.FContrastResults.rst", "modules/generated/nilearn.glm.LikelihoodModelResults.rst", "modules/generated/nilearn.glm.OLSModel.rst", "modules/generated/nilearn.glm.RegressionResults.rst", "modules/generated/nilearn.glm.SimpleRegressionResults.rst", "modules/generated/nilearn.glm.TContrastResults.rst", "modules/generated/nilearn.glm.cluster_level_inference.rst", "modules/generated/nilearn.glm.compute_contrast.rst", "modules/generated/nilearn.glm.compute_fixed_effects.rst", "modules/generated/nilearn.glm.expression_to_contrast_vector.rst", "modules/generated/nilearn.glm.fdr_threshold.rst", "modules/generated/nilearn.glm.first_level.FirstLevelModel.rst", "modules/generated/nilearn.glm.first_level.check_design_matrix.rst", "modules/generated/nilearn.glm.first_level.compute_regressor.rst", "modules/generated/nilearn.glm.first_level.first_level_from_bids.rst", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.glover_hrf.rst", "modules/generated/nilearn.glm.first_level.glover_time_derivative.rst", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix.rst", "modules/generated/nilearn.glm.first_level.mean_scaling.rst", "modules/generated/nilearn.glm.first_level.run_glm.rst", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.spm_hrf.rst", "modules/generated/nilearn.glm.first_level.spm_time_derivative.rst", "modules/generated/nilearn.glm.second_level.SecondLevelModel.rst", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix.rst", "modules/generated/nilearn.glm.second_level.non_parametric_inference.rst", "modules/generated/nilearn.glm.threshold_stats_img.rst", "modules/generated/nilearn.image.binarize_img.rst", "modules/generated/nilearn.image.clean_img.rst", "modules/generated/nilearn.image.concat_imgs.rst", "modules/generated/nilearn.image.coord_transform.rst", "modules/generated/nilearn.image.copy_img.rst", "modules/generated/nilearn.image.crop_img.rst", "modules/generated/nilearn.image.get_data.rst", "modules/generated/nilearn.image.high_variance_confounds.rst", "modules/generated/nilearn.image.index_img.rst", "modules/generated/nilearn.image.iter_img.rst", "modules/generated/nilearn.image.largest_connected_component_img.rst", "modules/generated/nilearn.image.load_img.rst", "modules/generated/nilearn.image.math_img.rst", "modules/generated/nilearn.image.mean_img.rst", "modules/generated/nilearn.image.new_img_like.rst", "modules/generated/nilearn.image.reorder_img.rst", "modules/generated/nilearn.image.resample_img.rst", "modules/generated/nilearn.image.resample_to_img.rst", "modules/generated/nilearn.image.smooth_img.rst", "modules/generated/nilearn.image.swap_img_hemispheres.rst", "modules/generated/nilearn.image.threshold_img.rst", "modules/generated/nilearn.interfaces.bids.get_bids_files.rst", "modules/generated/nilearn.interfaces.bids.parse_bids_filename.rst", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy.rst", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat.rst", "modules/generated/nilearn.maskers.BaseMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.NiftiMapsMasker.rst", "modules/generated/nilearn.maskers.NiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiSpheresMasker.rst", "modules/generated/nilearn.masking.apply_mask.rst", "modules/generated/nilearn.masking.compute_background_mask.rst", "modules/generated/nilearn.masking.compute_brain_mask.rst", "modules/generated/nilearn.masking.compute_epi_mask.rst", "modules/generated/nilearn.masking.compute_multi_background_mask.rst", "modules/generated/nilearn.masking.compute_multi_brain_mask.rst", "modules/generated/nilearn.masking.compute_multi_epi_mask.rst", "modules/generated/nilearn.masking.intersect_masks.rst", "modules/generated/nilearn.masking.unmask.rst", "modules/generated/nilearn.mass_univariate.permuted_ols.rst", "modules/generated/nilearn.plotting.displays.BaseAxes.rst", "modules/generated/nilearn.plotting.displays.BaseSlicer.rst", "modules/generated/nilearn.plotting.displays.CutAxes.rst", "modules/generated/nilearn.plotting.displays.GlassBrainAxes.rst", "modules/generated/nilearn.plotting.displays.LProjector.rst", "modules/generated/nilearn.plotting.displays.LRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRZProjector.rst", "modules/generated/nilearn.plotting.displays.LZRProjector.rst", "modules/generated/nilearn.plotting.displays.LZRYProjector.rst", "modules/generated/nilearn.plotting.displays.MosaicSlicer.rst", "modules/generated/nilearn.plotting.displays.OrthoProjector.rst", "modules/generated/nilearn.plotting.displays.OrthoSlicer.rst", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure.rst", "modules/generated/nilearn.plotting.displays.RProjector.rst", "modules/generated/nilearn.plotting.displays.TiledSlicer.rst", "modules/generated/nilearn.plotting.displays.XProjector.rst", "modules/generated/nilearn.plotting.displays.XSlicer.rst", "modules/generated/nilearn.plotting.displays.XZProjector.rst", "modules/generated/nilearn.plotting.displays.XZSlicer.rst", "modules/generated/nilearn.plotting.displays.YProjector.rst", "modules/generated/nilearn.plotting.displays.YSlicer.rst", "modules/generated/nilearn.plotting.displays.YXProjector.rst", "modules/generated/nilearn.plotting.displays.YXSlicer.rst", "modules/generated/nilearn.plotting.displays.YZProjector.rst", "modules/generated/nilearn.plotting.displays.YZSlicer.rst", "modules/generated/nilearn.plotting.displays.ZProjector.rst", "modules/generated/nilearn.plotting.displays.ZSlicer.rst", "modules/generated/nilearn.plotting.displays.get_projector.rst", "modules/generated/nilearn.plotting.displays.get_slicer.rst", "modules/generated/nilearn.plotting.find_cut_slices.rst", "modules/generated/nilearn.plotting.find_parcellation_cut_coords.rst", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords.rst", "modules/generated/nilearn.plotting.find_xyz_cut_coords.rst", "modules/generated/nilearn.plotting.plot_anat.rst", "modules/generated/nilearn.plotting.plot_carpet.rst", "modules/generated/nilearn.plotting.plot_connectome.rst", "modules/generated/nilearn.plotting.plot_contrast_matrix.rst", "modules/generated/nilearn.plotting.plot_design_matrix.rst", "modules/generated/nilearn.plotting.plot_epi.rst", "modules/generated/nilearn.plotting.plot_event.rst", "modules/generated/nilearn.plotting.plot_glass_brain.rst", "modules/generated/nilearn.plotting.plot_img.rst", "modules/generated/nilearn.plotting.plot_img_comparison.rst", "modules/generated/nilearn.plotting.plot_img_on_surf.rst", "modules/generated/nilearn.plotting.plot_markers.rst", "modules/generated/nilearn.plotting.plot_matrix.rst", "modules/generated/nilearn.plotting.plot_prob_atlas.rst", "modules/generated/nilearn.plotting.plot_roi.rst", "modules/generated/nilearn.plotting.plot_stat_map.rst", "modules/generated/nilearn.plotting.plot_surf.rst", "modules/generated/nilearn.plotting.plot_surf_contours.rst", "modules/generated/nilearn.plotting.plot_surf_roi.rst", "modules/generated/nilearn.plotting.plot_surf_stat_map.rst", "modules/generated/nilearn.plotting.show.rst", "modules/generated/nilearn.plotting.view_connectome.rst", "modules/generated/nilearn.plotting.view_img.rst", "modules/generated/nilearn.plotting.view_img_on_surf.rst", "modules/generated/nilearn.plotting.view_markers.rst", "modules/generated/nilearn.plotting.view_surf.rst", "modules/generated/nilearn.regions.HierarchicalKMeans.rst", "modules/generated/nilearn.regions.Parcellations.rst", "modules/generated/nilearn.regions.ReNA.rst", "modules/generated/nilearn.regions.RegionExtractor.rst", "modules/generated/nilearn.regions.connected_label_regions.rst", "modules/generated/nilearn.regions.connected_regions.rst", "modules/generated/nilearn.regions.img_to_signals_labels.rst", "modules/generated/nilearn.regions.img_to_signals_maps.rst", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration.rst", "modules/generated/nilearn.regions.signals_to_img_labels.rst", "modules/generated/nilearn.regions.signals_to_img_maps.rst", "modules/generated/nilearn.reporting.HTMLReport.rst", "modules/generated/nilearn.reporting.get_clusters_table.rst", "modules/generated/nilearn.reporting.make_glm_report.rst", "modules/generated/nilearn.signal.butterworth.rst", "modules/generated/nilearn.signal.clean.rst", "modules/generated/nilearn.signal.high_variance_confounds.rst", "modules/generated/nilearn.surface.load_surf_data.rst", "modules/generated/nilearn.surface.load_surf_mesh.rst", "modules/generated/nilearn.surface.vol_to_surf.rst", "modules/generated_reports/glm_reports_examples.rst", "modules/generated_reports/masker_reports_examples.rst", "modules/glm.rst", "modules/image.rst", "modules/index.rst", "modules/interfaces.rst", "modules/maskers.rst", "modules/masking.rst", "modules/mass_univariate.rst", "modules/plotting.rst", "modules/regions.rst", "modules/reporting.rst", "modules/signal.rst", "modules/surface.rst", "plotting/index.rst", "quickstart.md", "sg_execution_times.rst", "user_guide.rst"], "titles": ["Team", "Basic tutorials", "3D and 4D niimgs: handling and visualizing", "A introduction tutorial to fMRI decoding", "Basic nilearn example: manipulating and looking at data", "Basic numerics and plotting with Python", "Intro to GLM Analysis: a single-run, single-subject fMRI dataset", "Computation times", "Visualization of brain images", "Making a surface plot of a 3D statistical map", "Basic Atlas plotting", "Visualizing global patterns with a carpet plot", "Matplotlib colormaps in Nilearn", "Glass brain plotting in nilearn", "Glass brain plotting in nilearn (all options)", "More plotting tools from nilearn", "Plotting tools in nilearn", "Controlling the contrast of the background when plotting", "Plot Haxby masks", "Visualizing multiscale functional brain parcellations", "Visualizing a probabilistic atlas: the default mode in the MSDL atlas", "Visualizing 4D probabilistic atlas maps", "Loading and plotting of a cortical surface atlas", "Seed-based connectivity on the surface", "Technical point: Illustration of the volume to surface sampling schemes", "NeuroImaging volumes visualization", "Visualizing Megatrawls Network Matrices from Human Connectome Project", "Computation times", "Decoding and predicting from brain images", "Decoding with ANOVA + SVM: face vs house in the Haxby dataset", "Different classifiers in decoding the Haxby dataset", "Decoding with FREM: face vs house vs chair object recognition", "ROI-based decoding analysis in Haxby et al. dataset", "Decoding of a dataset after GLM fit for signal extraction", "Setting a parameter by cross-validation", "The haxby dataset: different multi-class strategies", "Searchlight analysis of face vs house recognition", "Cortical surface-based searchlight decoding", "Show stimuli of Haxby et al. dataset", "FREM on Jimura et al \u201cmixed gambles\u201d dataset", "Encoding models for visual stimuli from Miyawaki et al. 2008", "Reconstruction of visual stimuli from Miyawaki et al. 2008", "Voxel-Based Morphometry on Oasis dataset", "Voxel-Based Morphometry on Oasis dataset with Space-Net prior", "Example of pattern recognition on simulated data", "Computation times", "Functional connectivity", "Comparing connectomes on different reference atlases", "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning", "Clustering methods to learn a brain parcellation from fMRI", "Regions extraction using dictionary learning and functional connectomes", "Classification of age groups using functional connectivity", "Computing a connectome with sparse inverse covariance", "Group Sparse inverse covariance for multi-subject connectome", "Extracting signals of a probabilistic atlas of functional regions", "Producing single subject maps of seed-to-voxel correlation", "Extracting signals from a brain parcellation", "Connectivity structure estimation on simulated data", "Extract signals on spheres and plot a connectome", "Computation times", "GLM: First level analysis", "Default Mode Network extraction of ADHD dataset", "First level analysis of a complete BIDS dataset from openneuro", "Examples of design matrices", "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model", "Understanding parameters of the first-level model", "Example of MRI response functions", "Example of surface-based first-level analysis", "Predicted time series and residuals", "Single-subject data (two runs) in native space", "Simple example of two-runs fMRI model fitting", "Generate an events.tsv file for the NeuroSpin localizer task", "Computation times", "GLM: Second level analysis", "Voxel-Based Morphometry on OASIS dataset", "Second-level fMRI model: true positive proportion in clusters", "Example of generic design in second-level models", "Example of second level design matrix", "Second-level fMRI model: one sample test", "Second-level fMRI model: two-sample test, unpaired and paired", "Statistical testing of a second-level analysis", "Computation times", "Manipulating brain image volumes", "Visualization of affine resamplings", "Comparing the means of 2 images", "Breaking an atlas of labels in separated regions", "Regions Extraction of Default Mode Networks using Smith Atlas", "Region Extraction using a t-statistical map (3D)", "Understanding NiftiMasker and mask computation", "Negating an image with math_img", "Extracting signals from brain regions using the NiftiLabelsMasker", "Simple example of NiftiMasker use", "Resample an image to a template", "Computing a Region of Interest (ROI) mask manually", "Smoothing an image", "Computation times", "Advanced statistical analysis of brain images", "Advanced decoding using scikit learn", "Functional connectivity predicts age group", "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding", "BIDS dataset first and second level analysis", "Massively univariate analysis of face vs house recognition", "NeuroVault cross-study ICA maps", "Multivariate decompositions: Independent component analysis of fMRI", "Massively univariate analysis of a motor task from the Localizer dataset", "Massively univariate analysis of a calculation task from the Localizer dataset", "NeuroVault meta-analysis of stop-go paradigm studies", "Surface-based dataset first and second level analysis of a dataset", "Computation times", "Examples for experimental modules", "A short demo of the surface images &amp; maskers", "Computation times", "Examples", "Computation times", "General bibliography", "<span class=\"section-number\">10. </span>Advanced usage: manual pipelines and scaling up", "<span class=\"section-number\">10.1. </span>Building your own neuroimaging machine-learning pipeline", "<span class=\"section-number\">10.2. </span>Downloading statistical maps from the Neurovault repository", "0.1.0", "0.1.1", "0.1.2", "0.1.3", "0.1.4", "0.10.0", "0.10.1", "0.10.2", "0.10.3", "0.10.4", "0.2.0", "0.2.1", "0.2.2", "0.2.3", "0.2.4", "0.2.5.1", "0.2.6", "0.3.0", "0.3.1", "0.4.0", "0.4.1", "0.4.2", "0.5.0", "0.5.1", "0.5.2", "0.6.0", "0.6.1", "0.6.2", "0.7.0", "0.7.1", "0.8.0", "0.8.1", "0.9.0", "0.9.1", "0.9.2", "0.11.0.dev", "&lt;no title&gt;", "What\u2019s new", "<span class=\"section-number\">6.2. </span>Connectome extraction: inverse covariance for direct connections", "<span class=\"section-number\">6.1. </span>Extracting times series to build a functional connectome", "<span class=\"section-number\">6. </span>Functional connectivity and resting state", "<span class=\"section-number\">6.5. </span>Clustering to parcellate the brain in regions", "<span class=\"section-number\">6.4. </span>Region Extraction for better brain parcellations", "<span class=\"section-number\">6.3. </span>Extracting functional brain networks: ICA and related", "<span class=\"section-number\">5.1. </span>An introduction to decoding", "<span class=\"section-number\">5.2. </span>Choosing the right predictive model for neuroimaging", "<span class=\"section-number\">5.3. </span>FREM: fast ensembling of regularized models for robust decoding", "<span class=\"section-number\">5.6. </span>Running scikit-learn functions for more control on the analysis", "<span class=\"section-number\">5. </span>Decoding and MVPA: predicting from brain images", "<span class=\"section-number\">5.5. </span>Searchlight : finding voxels containing information", "<span class=\"section-number\">5.4. </span>SpaceNet: decoding with spatial structure for better maps", "<span class=\"section-number\">6.2.3.1. </span>Group-sparse covariance estimation", "Contributing", "<span class=\"section-number\">8.2. </span>First level models", "<span class=\"section-number\">8.1. </span>An introduction to GLMs in fMRI statistical analysis", "<span class=\"section-number\">8. </span>Analyzing fMRI using GLMs", "<span class=\"section-number\">8.3. </span>Second level models", "Glossary", "Nilearn", "<span class=\"section-number\">1. </span>Introduction", "Maintenance", "<span class=\"section-number\">9. </span>Manipulation brain volumes with nilearn", "<span class=\"section-number\">9.1. </span>Input and output: neuroimaging data representation", "<span class=\"section-number\">9.2. </span>Manipulating images: resampling, smoothing, masking, ROIs\u2026", "<span class=\"section-number\">9.3. </span>From neuroimaging volumes to data matrices: the masker objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.connectome</span></code>: Functional Connectivity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.datasets</span></code>: Automatic Dataset Fetching", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decoding</span></code>: Decoding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decomposition</span></code>: Multivariate Decompositions", "ABIDE PCP dataset", "MegaTrawls Network Matrices HCP", "AAL atlas", "ADHD dataset", "Allen 2011 atlas", "BASC multiscale atlas", "BIDS language localizer", "Brainomics Localizer", "Craddock 2012 atlas", "Destrieux atlas", "development fMRI dataset", "DiFuMo atlas", "Dosenbach 2010 atlas", "fiac first level dataset", "fsaverage template", "fsaverage3 template", "fsaverage4 template", "fsaverage5 template", "fsaverage6 template", "Harvard Oxford atlas", "Haxby dataset", "ICBM 152 template", "Juelich atlas", "language localizer demo dataset", "localizer first level dataset", "Mixed gambles statistical maps", "Miyawaki 2008 dataset", "MSDL atlas", "Neurovault statistical maps", "NKI enhanced surface dataset", "OASIS volume based morphometry maps", "Pauli 2007 atlas", "Power 2011 atlas", "Schaefer 2018 atlas", "Seitzman 2018 atlas", "Smith 2009 atlas", "SPM auditory dataset", "SPM multimodal dataset", "Talairach atlas", "Yeo 2011 atlas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.experimental</span></code>: Experimental Modules", "nilearn.connectome.ConnectivityMeasure", "nilearn.connectome.GroupSparseCovariance", "nilearn.connectome.GroupSparseCovarianceCV", "nilearn.connectome.cov_to_corr", "nilearn.connectome.group_sparse_covariance", "nilearn.connectome.prec_to_partial", "nilearn.connectome.sym_matrix_to_vec", "nilearn.connectome.vec_to_sym_matrix", "nilearn.datasets.fetch_abide_pcp", "nilearn.datasets.fetch_adhd", "nilearn.datasets.fetch_atlas_aal", "nilearn.datasets.fetch_atlas_allen_2011", "nilearn.datasets.fetch_atlas_basc_multiscale_2015", "nilearn.datasets.fetch_atlas_craddock_2012", "nilearn.datasets.fetch_atlas_destrieux_2009", "nilearn.datasets.fetch_atlas_difumo", "nilearn.datasets.fetch_atlas_harvard_oxford", "nilearn.datasets.fetch_atlas_juelich", "nilearn.datasets.fetch_atlas_msdl", "nilearn.datasets.fetch_atlas_pauli_2017", "nilearn.datasets.fetch_atlas_schaefer_2018", "nilearn.datasets.fetch_atlas_smith_2009", "nilearn.datasets.fetch_atlas_surf_destrieux", "nilearn.datasets.fetch_atlas_talairach", "nilearn.datasets.fetch_atlas_yeo_2011", "nilearn.datasets.fetch_bids_langloc_dataset", "nilearn.datasets.fetch_coords_dosenbach_2010", "nilearn.datasets.fetch_coords_power_2011", "nilearn.datasets.fetch_coords_seitzman_2018", "nilearn.datasets.fetch_development_fmri", "nilearn.datasets.fetch_ds000030_urls", "nilearn.datasets.fetch_fiac_first_level", "nilearn.datasets.fetch_haxby", "nilearn.datasets.fetch_icbm152_2009", "nilearn.datasets.fetch_icbm152_brain_gm_mask", "nilearn.datasets.fetch_language_localizer_demo_dataset", "nilearn.datasets.fetch_localizer_button_task", "nilearn.datasets.fetch_localizer_calculation_task", "nilearn.datasets.fetch_localizer_contrasts", "nilearn.datasets.fetch_localizer_first_level", "nilearn.datasets.fetch_megatrawls_netmats", "nilearn.datasets.fetch_mixed_gambles", "nilearn.datasets.fetch_miyawaki2008", "nilearn.datasets.fetch_neurovault", "nilearn.datasets.fetch_neurovault_auditory_computation_task", "nilearn.datasets.fetch_neurovault_ids", "nilearn.datasets.fetch_neurovault_motor_task", "nilearn.datasets.fetch_oasis_vbm", "nilearn.datasets.fetch_openneuro_dataset", "nilearn.datasets.fetch_openneuro_dataset_index", "nilearn.datasets.fetch_spm_auditory", "nilearn.datasets.fetch_spm_multimodal_fmri", "nilearn.datasets.fetch_surf_fsaverage", "nilearn.datasets.fetch_surf_nki_enhanced", "nilearn.datasets.get_data_dirs", "nilearn.datasets.load_mni152_brain_mask", "nilearn.datasets.load_mni152_gm_mask", "nilearn.datasets.load_mni152_gm_template", "nilearn.datasets.load_mni152_template", "nilearn.datasets.load_mni152_wm_mask", "nilearn.datasets.load_mni152_wm_template", "nilearn.datasets.load_sample_motor_activation_image", "nilearn.datasets.patch_openneuro_dataset", "nilearn.datasets.select_from_index", "nilearn.decoding.Decoder", "nilearn.decoding.DecoderRegressor", "nilearn.decoding.FREMClassifier", "nilearn.decoding.FREMRegressor", "nilearn.decoding.SearchLight", "nilearn.decoding.SpaceNetClassifier", "nilearn.decoding.SpaceNetRegressor", "nilearn.decomposition.CanICA", "nilearn.decomposition.DictLearning", "nilearn.experimental.surface.FileMesh", "nilearn.experimental.surface.InMemoryMesh", "nilearn.experimental.surface.Mesh", "nilearn.experimental.surface.PolyMesh", "nilearn.experimental.surface.SurfaceImage", "nilearn.experimental.surface.SurfaceLabelsMasker", "nilearn.experimental.surface.SurfaceMasker", "nilearn.experimental.surface.fetch_destrieux", "nilearn.experimental.surface.fetch_nki", "nilearn.experimental.surface.load_fsaverage", "nilearn.glm.ARModel", "nilearn.glm.Contrast", "nilearn.glm.FContrastResults", "nilearn.glm.LikelihoodModelResults", "nilearn.glm.OLSModel", "nilearn.glm.RegressionResults", "nilearn.glm.SimpleRegressionResults", "nilearn.glm.TContrastResults", "nilearn.glm.cluster_level_inference", "nilearn.glm.compute_contrast", "nilearn.glm.compute_fixed_effects", "nilearn.glm.expression_to_contrast_vector", "nilearn.glm.fdr_threshold", "nilearn.glm.first_level.FirstLevelModel", "nilearn.glm.first_level.check_design_matrix", "nilearn.glm.first_level.compute_regressor", "nilearn.glm.first_level.first_level_from_bids", "nilearn.glm.first_level.glover_dispersion_derivative", "nilearn.glm.first_level.glover_hrf", "nilearn.glm.first_level.glover_time_derivative", "nilearn.glm.first_level.make_first_level_design_matrix", "nilearn.glm.first_level.mean_scaling", "nilearn.glm.first_level.run_glm", "nilearn.glm.first_level.spm_dispersion_derivative", "nilearn.glm.first_level.spm_hrf", "nilearn.glm.first_level.spm_time_derivative", "nilearn.glm.second_level.SecondLevelModel", "nilearn.glm.second_level.make_second_level_design_matrix", "nilearn.glm.second_level.non_parametric_inference", "nilearn.glm.threshold_stats_img", "nilearn.image.binarize_img", "nilearn.image.clean_img", "nilearn.image.concat_imgs", "nilearn.image.coord_transform", "nilearn.image.copy_img", "nilearn.image.crop_img", "nilearn.image.get_data", "nilearn.image.high_variance_confounds", "nilearn.image.index_img", "nilearn.image.iter_img", "nilearn.image.largest_connected_component_img", "nilearn.image.load_img", "nilearn.image.math_img", "nilearn.image.mean_img", "nilearn.image.new_img_like", "nilearn.image.reorder_img", "nilearn.image.resample_img", "nilearn.image.resample_to_img", "nilearn.image.smooth_img", "nilearn.image.swap_img_hemispheres", "nilearn.image.threshold_img", "nilearn.interfaces.bids.get_bids_files", "nilearn.interfaces.bids.parse_bids_filename", "nilearn.interfaces.bids.save_glm_to_bids", "nilearn.interfaces.fmriprep.load_confounds", "nilearn.interfaces.fmriprep.load_confounds_strategy", "nilearn.interfaces.fsl.get_design_from_fslmat", "nilearn.maskers.BaseMasker", "nilearn.maskers.MultiNiftiLabelsMasker", "nilearn.maskers.MultiNiftiMapsMasker", "nilearn.maskers.MultiNiftiMasker", "nilearn.maskers.NiftiLabelsMasker", "nilearn.maskers.NiftiMapsMasker", "nilearn.maskers.NiftiMasker", "nilearn.maskers.NiftiSpheresMasker", "nilearn.masking.apply_mask", "nilearn.masking.compute_background_mask", "nilearn.masking.compute_brain_mask", "nilearn.masking.compute_epi_mask", "nilearn.masking.compute_multi_background_mask", "nilearn.masking.compute_multi_brain_mask", "nilearn.masking.compute_multi_epi_mask", "nilearn.masking.intersect_masks", "nilearn.masking.unmask", "nilearn.mass_univariate.permuted_ols", "nilearn.plotting.displays.BaseAxes", "nilearn.plotting.displays.BaseSlicer", "nilearn.plotting.displays.CutAxes", "nilearn.plotting.displays.GlassBrainAxes", "nilearn.plotting.displays.LProjector", "nilearn.plotting.displays.LRProjector", "nilearn.plotting.displays.LYRProjector", "nilearn.plotting.displays.LYRZProjector", "nilearn.plotting.displays.LZRProjector", "nilearn.plotting.displays.LZRYProjector", "nilearn.plotting.displays.MosaicSlicer", "nilearn.plotting.displays.OrthoProjector", "nilearn.plotting.displays.OrthoSlicer", "nilearn.plotting.displays.PlotlySurfaceFigure", "nilearn.plotting.displays.RProjector", "nilearn.plotting.displays.TiledSlicer", "nilearn.plotting.displays.XProjector", "nilearn.plotting.displays.XSlicer", "nilearn.plotting.displays.XZProjector", "nilearn.plotting.displays.XZSlicer", "nilearn.plotting.displays.YProjector", "nilearn.plotting.displays.YSlicer", "nilearn.plotting.displays.YXProjector", "nilearn.plotting.displays.YXSlicer", "nilearn.plotting.displays.YZProjector", "nilearn.plotting.displays.YZSlicer", "nilearn.plotting.displays.ZProjector", "nilearn.plotting.displays.ZSlicer", "nilearn.plotting.displays.get_projector", "nilearn.plotting.displays.get_slicer", "nilearn.plotting.find_cut_slices", "nilearn.plotting.find_parcellation_cut_coords", "nilearn.plotting.find_probabilistic_atlas_cut_coords", "nilearn.plotting.find_xyz_cut_coords", "nilearn.plotting.plot_anat", "nilearn.plotting.plot_carpet", "nilearn.plotting.plot_connectome", "nilearn.plotting.plot_contrast_matrix", "nilearn.plotting.plot_design_matrix", "nilearn.plotting.plot_epi", "nilearn.plotting.plot_event", "nilearn.plotting.plot_glass_brain", "nilearn.plotting.plot_img", "nilearn.plotting.plot_img_comparison", "nilearn.plotting.plot_img_on_surf", "nilearn.plotting.plot_markers", "nilearn.plotting.plot_matrix", "nilearn.plotting.plot_prob_atlas", "nilearn.plotting.plot_roi", "nilearn.plotting.plot_stat_map", "nilearn.plotting.plot_surf", "nilearn.plotting.plot_surf_contours", "nilearn.plotting.plot_surf_roi", "nilearn.plotting.plot_surf_stat_map", "nilearn.plotting.show", "nilearn.plotting.view_connectome", "nilearn.plotting.view_img", "nilearn.plotting.view_img_on_surf", "nilearn.plotting.view_markers", "nilearn.plotting.view_surf", "nilearn.regions.HierarchicalKMeans", "nilearn.regions.Parcellations", "nilearn.regions.ReNA", "nilearn.regions.RegionExtractor", "nilearn.regions.connected_label_regions", "nilearn.regions.connected_regions", "nilearn.regions.img_to_signals_labels", "nilearn.regions.img_to_signals_maps", "nilearn.regions.recursive_neighbor_agglomeration", "nilearn.regions.signals_to_img_labels", "nilearn.regions.signals_to_img_maps", "nilearn.reporting.HTMLReport", "nilearn.reporting.get_clusters_table", "nilearn.reporting.make_glm_report", "nilearn.signal.butterworth", "nilearn.signal.clean", "nilearn.signal.high_variance_confounds", "nilearn.surface.load_surf_data", "nilearn.surface.load_surf_mesh", "nilearn.surface.vol_to_surf", "Examples of GLM reports", "Examples masker reports", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.glm</span></code>: Generalized Linear Models", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.image</span></code>: Image Processing and Resampling Utilities", "API References", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.interfaces</span></code>: Loading components from interfaces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.maskers</span></code>: Extracting Signals from Brain Images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.masking</span></code>: Data Masking Utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.mass_univariate</span></code>: Mass-Univariate Analysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.plotting</span></code>: Plotting Brain Data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.regions</span></code>: Operating on Regions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.reporting</span></code>: Reporting Functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.signal</span></code>: Preprocessing Time Series", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.surface</span></code>: Manipulating Surface Data", "<span class=\"section-number\">7. </span>Plotting brain images", "Quickstart", "Computation times", "User guide"], "terms": {"thiwork": [0, 2, 3, 4, 6, 10, 11, 15, 16, 18, 20, 23, 25, 29, 30, 31, 32, 34, 35, 36, 39, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 61, 69, 70, 71, 74, 76, 83, 84, 85, 88, 90, 91, 93, 94, 97, 99, 100, 101, 103, 104, 107, 125, 135, 136, 143, 150, 151, 155, 156, 161, 162, 163, 165, 169, 170, 171, 172, 178, 180, 181, 182, 188, 192, 228, 229, 230, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 364, 368, 369, 370, 371, 372, 373, 374, 375, 416, 422, 427, 446, 447, 448, 449, 458, 467, 469, 471], "i": [0, 2, 4, 6, 9, 10, 11, 14, 15, 16, 18, 20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 103, 104, 105, 107, 110, 114, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 181, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 211, 214, 215, 217, 218, 220, 223, 224, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 480, 481, 483], "made": [0, 21, 100, 107, 124, 146, 149, 150, 155, 166, 169, 170, 172, 175, 177, 178, 217, 223, 292, 293, 294, 295, 297, 298, 385, 442, 483], "avail": [0, 3, 15, 23, 24, 31, 39, 42, 62, 74, 79, 88, 93, 100, 105, 107, 117, 124, 143, 148, 155, 157, 160, 163, 165, 169, 171, 174, 177, 178, 188, 192, 198, 209, 212, 217, 220, 223, 226, 236, 240, 243, 249, 257, 266, 268, 270, 275, 297, 298, 327, 432, 437, 465, 481, 483], "commun": [0, 114, 170, 176, 178, 187, 197, 217, 257, 481], "peopl": [0, 6, 137, 140, 141, 142, 143, 144, 145, 155, 169, 170], "which": [0, 3, 6, 9, 12, 14, 15, 21, 22, 23, 25, 29, 30, 32, 33, 34, 36, 37, 40, 42, 44, 47, 49, 51, 58, 61, 65, 66, 67, 68, 74, 75, 78, 83, 88, 90, 93, 97, 99, 107, 114, 116, 117, 122, 123, 124, 126, 128, 133, 134, 137, 138, 139, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 175, 177, 178, 180, 181, 182, 188, 192, 235, 242, 244, 245, 247, 248, 251, 252, 257, 271, 272, 273, 274, 278, 279, 280, 282, 292, 293, 294, 295, 296, 297, 298, 299, 300, 311, 314, 315, 316, 317, 323, 324, 331, 332, 337, 339, 341, 346, 352, 357, 361, 363, 364, 369, 370, 371, 372, 373, 374, 375, 378, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 442, 447, 449, 450, 451, 459, 465, 480, 481], "origin": [0, 6, 36, 40, 41, 49, 50, 65, 68, 70, 83, 88, 92, 99, 124, 134, 147, 149, 150, 155, 159, 167, 169, 178, 182, 192, 197, 209, 228, 229, 230, 249, 257, 261, 266, 275, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 341, 361, 368, 369, 370, 371, 372, 373, 374, 375, 421, 436, 438, 439, 443, 445, 446, 447, 448, 449, 461], "from": [0, 4, 6, 7, 8, 9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 94, 95, 96, 98, 100, 101, 102, 103, 106, 107, 108, 110, 111, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 133, 136, 137, 140, 141, 143, 148, 149, 150, 152, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 184, 187, 188, 190, 191, 192, 195, 197, 198, 199, 200, 206, 207, 208, 209, 211, 213, 215, 220, 221, 222, 227, 228, 229, 230, 232, 236, 237, 238, 240, 242, 243, 244, 245, 247, 248, 249, 251, 252, 254, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 270, 271, 272, 273, 274, 275, 276, 281, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 307, 313, 314, 315, 316, 317, 318, 321, 323, 324, 327, 331, 337, 338, 339, 341, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 420, 421, 423, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 473, 475, 480, 481, 482, 483], "inria": [0, 44, 114, 160, 168, 198, 214, 243, 246, 449], "mind": [0, 51, 162, 163, 170, 175], "project": [0, 8, 9, 15, 23, 24, 27, 42, 58, 74, 107, 110, 112, 114, 133, 135, 137, 145, 149, 150, 155, 169, 171, 176, 187, 190, 192, 195, 198, 216, 217, 218, 236, 241, 268, 275, 281, 299, 300, 342, 389, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 427, 430, 432, 436, 437, 438, 439, 440, 441, 444, 461, 465, 480, 482], "grew": 0, "much": [0, 3, 24, 40, 42, 51, 76, 78, 98, 99, 140, 155, 162, 169, 170, 172, 177, 199, 254, 346, 357, 465], "further": [0, 14, 15, 55, 65, 68, 83, 93, 115, 156, 164, 166, 169, 178, 180, 184, 192, 221, 271, 324, 337, 365, 399, 472, 473, 480, 483], "an": [0, 2, 3, 4, 11, 14, 15, 16, 20, 21, 22, 23, 25, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 54, 55, 56, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 74, 78, 79, 82, 83, 87, 88, 90, 91, 93, 95, 99, 100, 101, 102, 104, 107, 112, 114, 116, 117, 123, 124, 125, 126, 127, 128, 131, 132, 133, 135, 136, 137, 138, 140, 143, 145, 146, 147, 148, 150, 152, 155, 156, 157, 158, 160, 163, 164, 165, 166, 167, 168, 169, 171, 173, 174, 175, 177, 178, 180, 181, 182, 187, 188, 189, 194, 195, 206, 208, 214, 217, 224, 228, 229, 230, 234, 238, 241, 242, 246, 252, 257, 266, 267, 269, 271, 273, 275, 276, 286, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 311, 313, 314, 315, 316, 317, 320, 324, 331, 333, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 351, 352, 353, 354, 356, 357, 358, 359, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 457, 459, 461, 462, 463, 465, 469, 482, 483], "up": [0, 3, 6, 33, 36, 47, 83, 85, 88, 93, 97, 102, 114, 123, 125, 126, 140, 141, 143, 148, 150, 155, 159, 165, 166, 168, 169, 171, 172, 173, 175, 178, 182, 192, 223, 276, 311, 314, 338, 385, 421, 446, 465, 483], "date": [0, 149, 155, 239, 242, 261, 271, 273], "list": [0, 2, 3, 6, 9, 14, 15, 16, 21, 30, 33, 44, 47, 48, 49, 51, 53, 55, 58, 61, 62, 69, 70, 71, 74, 75, 78, 79, 84, 93, 98, 99, 100, 102, 107, 110, 116, 117, 123, 125, 126, 127, 128, 131, 133, 134, 135, 139, 140, 143, 149, 150, 152, 155, 156, 162, 170, 177, 178, 180, 181, 182, 191, 206, 209, 213, 215, 220, 225, 228, 229, 230, 232, 234, 235, 236, 238, 239, 242, 244, 245, 246, 247, 248, 250, 251, 253, 254, 257, 258, 260, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 282, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 306, 319, 321, 322, 324, 326, 327, 331, 337, 338, 339, 340, 342, 343, 351, 352, 354, 357, 359, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 426, 429, 430, 432, 433, 436, 437, 438, 439, 444, 445, 447, 449, 450, 451, 452, 453, 458, 459, 461, 463, 464, 465, 467, 481], "can": [0, 2, 3, 4, 6, 9, 11, 12, 14, 15, 20, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 61, 62, 64, 65, 66, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 85, 87, 88, 90, 91, 92, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 110, 114, 115, 116, 117, 123, 124, 126, 127, 128, 131, 133, 135, 140, 141, 143, 146, 147, 148, 149, 150, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 180, 181, 182, 188, 197, 198, 214, 215, 218, 229, 230, 232, 235, 236, 239, 242, 243, 244, 245, 246, 247, 248, 252, 266, 268, 271, 275, 292, 293, 294, 295, 296, 297, 298, 314, 316, 317, 324, 326, 327, 331, 337, 339, 342, 343, 344, 349, 352, 353, 354, 357, 358, 361, 362, 365, 366, 371, 374, 377, 378, 379, 380, 381, 382, 384, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 425, 426, 427, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 447, 449, 450, 451, 457, 458, 459, 460, 461, 465, 467, 480, 481, 483], "seen": [0, 3, 14, 41, 49, 116, 157, 159, 163, 165, 167, 172, 177, 178, 447, 480], "github": [0, 23, 33, 36, 49, 52, 53, 58, 62, 74, 76, 110, 148, 152, 155, 170, 177, 178, 187, 216, 220, 248, 261, 366, 443, 466, 480, 481], "addit": [0, 14, 15, 55, 63, 65, 67, 68, 78, 85, 88, 100, 116, 117, 119, 124, 135, 140, 146, 155, 162, 165, 169, 171, 175, 177, 178, 236, 238, 260, 270, 292, 293, 294, 295, 299, 300, 312, 324, 331, 337, 339, 362, 365, 366, 368, 371, 374, 446, 447, 448, 457, 480], "credit": 0, "goe": [0, 14, 40, 85, 93, 99, 169, 229, 232], "michael": [0, 23, 37, 51, 98, 114, 118, 122, 128, 140, 155, 168, 177, 190, 191, 216, 218, 239, 247, 281, 366], "hank": [0, 122, 128, 155], "yaroslav": [0, 137, 140, 155], "halchenko": [0, 137, 140, 155], "data": [0, 1, 2, 7, 18, 20, 24, 26, 28, 31, 34, 36, 43, 45, 46, 50, 51, 53, 58, 59, 60, 63, 64, 66, 68, 70, 72, 75, 76, 77, 78, 79, 80, 83, 85, 89, 90, 91, 94, 98, 100, 101, 103, 104, 105, 107, 110, 112, 114, 115, 117, 123, 124, 125, 126, 130, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 150, 151, 152, 155, 157, 158, 160, 163, 164, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 179, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 292, 293, 294, 295, 296, 297, 298, 299, 300, 305, 306, 307, 309, 311, 314, 315, 324, 331, 332, 333, 337, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 420, 421, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 459, 461, 463, 465, 467, 468, 469, 471, 480, 482, 483], "packag": [0, 3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 69, 70, 71, 76, 77, 78, 85, 91, 93, 94, 97, 99, 100, 101, 103, 104, 105, 107, 110, 121, 122, 123, 124, 126, 140, 143, 148, 150, 155, 170, 172, 177, 178, 180, 227, 244, 245, 480], "The": [0, 2, 3, 11, 14, 15, 17, 18, 19, 20, 21, 22, 23, 28, 29, 30, 32, 33, 34, 36, 40, 41, 42, 45, 47, 48, 49, 51, 52, 54, 55, 58, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 74, 75, 76, 78, 79, 80, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 103, 105, 107, 110, 112, 114, 116, 117, 119, 120, 121, 123, 124, 126, 128, 130, 131, 132, 133, 134, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 186, 187, 188, 191, 192, 194, 195, 197, 200, 206, 207, 209, 210, 211, 216, 217, 218, 220, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 248, 249, 251, 252, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269, 271, 272, 273, 274, 275, 276, 277, 280, 281, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 331, 332, 333, 337, 338, 339, 340, 341, 342, 343, 344, 348, 352, 353, 354, 355, 356, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 465, 467, 471, 472, 476, 480, 481, 482, 483], "ar": [0, 2, 3, 4, 6, 9, 10, 14, 19, 20, 21, 23, 24, 26, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 76, 77, 78, 79, 80, 83, 85, 86, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 114, 116, 117, 121, 123, 124, 125, 126, 127, 133, 135, 136, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 180, 181, 182, 188, 189, 190, 192, 194, 195, 197, 198, 208, 209, 211, 215, 220, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 281, 282, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 311, 314, 315, 316, 317, 320, 321, 324, 326, 327, 331, 333, 337, 339, 341, 342, 346, 348, 354, 356, 357, 358, 359, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 455, 456, 457, 458, 459, 461, 463, 464, 465, 467, 475, 480, 481], "alexi": [0, 23, 114, 123, 124, 140, 143, 148, 150, 152, 155, 216, 281], "thual": [0, 123, 124, 148, 150, 152, 155], "bertrand": [0, 44, 48, 49, 51, 71, 98, 114, 118, 121, 125, 128, 133, 137, 140, 141, 143, 150, 151, 155, 156, 159, 160, 161, 162, 164, 168, 177, 194, 198, 214, 228, 229, 243, 246, 266, 294, 295, 299, 300, 448, 449, 454], "thirion": [0, 44, 48, 49, 51, 71, 98, 114, 118, 121, 125, 128, 133, 137, 140, 141, 143, 150, 151, 155, 156, 159, 160, 161, 162, 164, 168, 177, 194, 198, 214, 228, 229, 243, 246, 266, 294, 295, 299, 300, 448, 449, 454], "elizabeth": [0, 114, 137, 141, 143, 144, 145, 155, 316, 317], "dupr": [0, 137, 141, 143, 144, 145, 155], "hao": [0, 123, 124, 125, 126, 147, 148, 150, 152, 155], "ting": [0, 123, 124, 125, 126, 147, 148, 150, 152, 155], "wang": [0, 114, 123, 124, 125, 126, 147, 148, 150, 152, 155, 217, 275], "himanshu": [0, 127, 155], "aggarw": [0, 127, 155], "jerom": [0, 125, 126, 133, 137, 139, 140, 141, 143, 144, 152, 155], "dock": [0, 125, 126, 133, 137, 139, 140, 141, 143, 144, 152, 155], "nicola": [0, 114, 126, 147, 148, 149, 150, 151, 152, 155, 188, 222, 249, 268], "gensollen": [0, 126, 147, 148, 149, 150, 151, 152, 155], "r\u00e9mi": [0, 124, 125, 126, 127, 137, 155], "gau": [0, 124, 125, 126, 127, 155], "taylor": [0, 114, 123, 124, 125, 126, 147, 150, 151, 152, 155, 168], "salo": [0, 123, 124, 125, 126, 147, 150, 151, 152, 155], "some": [0, 3, 6, 14, 15, 30, 40, 41, 49, 56, 65, 66, 67, 69, 79, 83, 85, 97, 102, 103, 116, 117, 125, 133, 140, 146, 149, 150, 152, 155, 162, 163, 165, 167, 169, 170, 172, 174, 177, 178, 180, 181, 182, 220, 226, 227, 228, 229, 230, 236, 242, 244, 245, 247, 248, 251, 271, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 314, 324, 337, 340, 342, 364, 368, 369, 370, 371, 372, 373, 374, 375, 427, 428, 431, 434, 435, 442, 446, 447, 448, 449, 452, 458, 461, 480, 481], "past": [0, 56, 116, 157, 366], "present": [0, 3, 6, 40, 41, 54, 56, 64, 67, 68, 100, 107, 116, 124, 136, 155, 160, 161, 162, 169, 171, 172, 173, 178, 180, 182, 209, 210, 211, 223, 232, 236, 242, 260, 292, 293, 294, 295, 299, 300, 352, 365, 366, 370, 371, 372, 373, 374, 446, 447, 448, 452, 467], "ahmad": [0, 123, 124, 125, 149, 150, 152, 155], "chamma": [0, 123, 124, 125, 149, 150, 152, 155], "saclai": [0, 170], "franc": [0, 170], "aina": [0, 128, 155], "frau": [0, 128, 155], "pascual": [0, 128, 155], "alex": [0, 56, 114, 137, 140, 155, 157, 167, 208, 261, 366], "rothberg": [0, 137, 140, 155], "free": [0, 114, 163, 170, 172, 175, 339, 385], "agenc": 0, "new": [0, 2, 3, 10, 11, 20, 36, 49, 65, 70, 71, 78, 83, 85, 93, 97, 101, 106, 114, 116, 122, 134, 135, 136, 137, 138, 151, 162, 163, 164, 165, 170, 175, 177, 178, 181, 182, 223, 227, 228, 229, 230, 234, 235, 240, 243, 245, 248, 250, 251, 256, 257, 258, 262, 263, 271, 273, 281, 283, 284, 285, 286, 287, 288, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 316, 317, 324, 327, 333, 337, 339, 341, 342, 351, 352, 353, 354, 355, 356, 357, 358, 361, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 385, 420, 421, 422, 423, 425, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 446, 447, 448, 449, 450, 451, 457, 458, 461, 465, 480, 481], "york": [0, 114, 316, 317], "usa": 0, "alexandr": [0, 44, 49, 51, 98, 114, 118, 119, 121, 122, 125, 128, 130, 133, 140, 142, 143, 155, 156, 160, 168, 214, 229, 246, 449], "abadi": [0, 128, 130, 133, 140, 155], "pari": [0, 170], "abraham": [0, 51, 98, 114, 118, 119, 121, 122, 128, 130, 133, 143, 155, 160, 192, 365, 366, 449], "bazemont": 0, "\u00eele": 0, "de": [0, 114, 140, 143, 155, 188, 316, 317, 332], "gramfort": [0, 44, 49, 114, 118, 121, 142, 143, 155, 156, 168, 214, 229, 246], "meta": [0, 3, 14, 96, 99, 102, 108, 112, 117, 199, 219, 228, 229, 230, 273, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 347, 352, 353, 355, 368, 369, 370, 371, 372, 373, 374, 375, 427, 435, 440, 446, 447, 448, 449, 482], "savio": [0, 118, 155], "cionca": [0, 125, 155], "centr": 0, "hospitali": 0, "universitair": 0, "vaudois": 0, "lausann": 0, "switzerland": 0, "alisha": [0, 125, 155], "kodibagkar": [0, 125, 155], "mit": [0, 114, 217, 220, 222, 248, 249, 275], "mcgovern": 0, "institut": [0, 172, 175, 188, 189, 192, 216, 217, 238], "cambridg": [0, 192], "massachusett": 0, "unit": [0, 6, 15, 55, 57, 114, 160, 162, 168, 169, 170, 182, 296, 316, 317, 339, 342, 369, 370, 371, 372, 373, 374, 375, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 461], "state": [0, 2, 23, 30, 32, 48, 49, 50, 51, 54, 56, 65, 84, 86, 88, 91, 98, 99, 114, 125, 135, 146, 148, 155, 156, 157, 159, 160, 161, 163, 168, 172, 175, 177, 178, 187, 188, 190, 191, 192, 195, 199, 214, 216, 221, 222, 236, 237, 239, 240, 268, 281, 292, 293, 294, 295, 296, 299, 300, 324, 333, 339, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 447, 449, 461, 467, 483], "amadeu": [0, 47, 133, 155], "kanaan": [0, 47, 133, 155], "ana": [0, 143, 147, 149, 155], "luisa": [0, 143, 147, 149, 155], "pinho": [0, 143, 147, 149, 155], "western": 0, "univers": [0, 175, 177, 217], "london": [0, 114, 175, 258, 276], "ontario": 0, "canada": 0, "andr\u00e9": [0, 114, 143, 155, 164, 177, 196, 242, 294, 295], "hoyo": [0, 49, 114, 143, 155, 162, 164, 294, 295, 448, 454], "idrobo": [0, 49, 114, 143, 155, 162, 164, 294, 295, 448, 454], "rakuten": 0, "ann": [0, 58, 114, 124, 155, 199, 219, 254, 255], "sophi": [0, 124, 155], "kiesling": [0, 124, 155], "max": [0, 11, 30, 34, 42, 44, 49, 53, 55, 57, 58, 68, 79, 83, 87, 101, 102, 104, 110, 114, 148, 155, 156, 169, 228, 357, 358, 385, 389, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 420, 421, 425, 427, 428, 430, 433, 434, 435, 436, 438, 439, 442, 443, 445], "planck": 0, "human": [0, 8, 22, 23, 27, 31, 32, 39, 40, 41, 43, 58, 66, 70, 112, 114, 117, 167, 170, 175, 187, 192, 195, 196, 200, 201, 202, 203, 204, 205, 206, 213, 215, 218, 219, 220, 225, 226, 236, 241, 242, 247, 248, 250, 251, 252, 255, 268, 270, 271, 273, 280, 342, 366, 432, 440, 461, 482], "cognit": [0, 71, 99, 102, 114, 162, 172, 175, 177, 182, 194, 212, 217, 222, 223, 249, 258, 266, 269, 275, 276], "brain": [0, 2, 3, 4, 6, 9, 12, 15, 20, 21, 22, 23, 27, 31, 32, 36, 37, 39, 41, 43, 44, 46, 52, 54, 55, 59, 65, 67, 68, 70, 75, 77, 78, 79, 84, 88, 91, 93, 95, 97, 99, 103, 106, 114, 116, 117, 124, 128, 131, 133, 134, 135, 137, 138, 140, 141, 143, 146, 148, 149, 155, 156, 158, 162, 163, 164, 165, 167, 168, 170, 171, 172, 175, 176, 177, 180, 182, 187, 188, 189, 192, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 228, 229, 236, 238, 240, 241, 243, 244, 246, 247, 249, 251, 254, 255, 256, 257, 260, 261, 262, 268, 270, 271, 273, 274, 275, 280, 283, 286, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 319, 342, 344, 347, 349, 354, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 418, 419, 422, 425, 427, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 457, 461, 467, 473, 481, 482, 483], "scienc": [0, 3, 22, 23, 31, 32, 37, 38, 40, 41, 49, 51, 56, 58, 97, 98, 101, 114, 156, 157, 164, 167, 168, 177, 188, 189, 192, 194, 196, 199, 207, 208, 212, 213, 214, 216, 221, 222, 228, 238, 240, 246, 249, 250, 254, 256, 257, 260, 261, 266, 268, 269, 270, 281, 286, 294, 295, 296, 365, 366, 385, 421, 462, 483], "leipzig": 0, "germnai": 0, "ariel": [0, 128, 140, 155], "rokem": [0, 128, 140, 155], "washington": [0, 217], "psychologi": 0, "seattl": 0, "98107": 0, "arthur": [0, 48, 114, 122, 128, 130, 133, 155, 161, 198, 243, 300], "mensch": [0, 48, 114, 122, 128, 130, 133, 155, 161, 198, 243, 300], "aswin": [0, 125, 155], "vijayan": [0, 125, 155], "audrei": [0, 123, 155], "duran": [0, 123, 155], "therapanacea": 0, "ben": [0, 56, 114, 118, 119, 121, 128, 130, 155, 366], "cipollini": [0, 118, 119, 121, 128, 130, 155], "facebook": 0, "hayward": 0, "california": 0, "binh": [0, 143, 146, 148, 155], "nguyen": [0, 143, 146, 148, 155], "caglar": [0, 152, 155], "cakan": [0, 152, 155], "technisch": 0, "universit\u00e4t": 0, "berlin": [0, 114, 156, 208, 214, 228, 246, 261], "germani": [0, 114, 168], "chri": [0, 118, 128, 143, 155], "gorgolewski": [0, 114, 117, 118, 128, 155, 198, 215, 243, 258, 271, 273, 276], "googl": 0, "llc": 0, "markiewicz": [0, 143, 155], "stanford": [0, 114, 168], "christian": [0, 114, 124, 137, 140, 155, 156, 188, 222, 249, 268, 365, 366], "horea": [0, 137, 140, 155], "dartmouth": 0, "colleg": [0, 175], "pb": 0, "hanov": 0, "hampshir": 0, "gerloff": [0, 124, 155], "christina": [0, 58, 114, 126, 155, 199, 254], "ro\u00dfmanith": [0, 126, 155], "dept": 0, "neurologi": [0, 223], "medic": [0, 44, 114, 156, 160, 168, 189, 190, 208, 214, 217, 228, 246, 261, 449], "faculti": 0, "mannheim": 0, "heidelberg": [0, 114, 156, 208, 214, 228, 246, 261], "colin": [0, 143, 155], "reining": [0, 143, 155], "denver": 0, "colorado": 0, "connor": [0, 152, 155], "lane": [0, 114, 152, 155, 385], "child": [0, 51, 257], "baltimor": 0, "md": [0, 248], "czarina": [0, 125, 155], "sy": [0, 41, 125, 155], "c\u00e9line": [0, 143, 155], "delettr": [0, 143, 155], "dan": [0, 114, 140, 143, 155, 225, 251], "gale": [0, 140, 143, 155], "neurosci": [0, 23, 49, 65, 71, 114, 159, 167, 175, 177, 187, 188, 191, 194, 216, 217, 222, 236, 239, 249, 266, 268, 275, 281, 483], "studi": [0, 2, 6, 9, 31, 33, 40, 42, 56, 65, 69, 74, 96, 98, 108, 112, 114, 117, 158, 163, 165, 166, 168, 169, 172, 176, 180, 189, 192, 199, 207, 208, 213, 217, 224, 240, 261, 271, 273, 275, 283, 286, 296, 347, 352, 353, 355, 359, 365, 366, 368, 374, 427, 435, 440, 482, 483], "queen": 0, "kingston": 0, "daniel": [0, 23, 56, 114, 140, 143, 149, 152, 155, 188, 215, 216, 217, 268, 271, 273, 275, 281, 365, 366], "gomez": [0, 140, 143, 149, 152, 155], "danilo": [0, 118, 119, 121, 122, 128, 130, 155], "bzdok": [0, 118, 119, 121, 122, 128, 130, 155], "mcgill": [0, 114, 192, 208, 261], "mila": 0, "quebec": 0, "ai": 0, "montr\u00e9al": [0, 177], "david": [0, 23, 56, 114, 117, 152, 155, 177, 188, 196, 206, 215, 216, 222, 242, 249, 268, 271, 273, 281, 365, 366, 385], "g": [0, 6, 9, 14, 22, 24, 30, 31, 40, 42, 43, 47, 48, 55, 61, 66, 93, 98, 99, 104, 114, 117, 124, 148, 152, 155, 157, 167, 169, 170, 171, 172, 174, 175, 177, 181, 182, 188, 189, 195, 198, 217, 225, 228, 229, 230, 241, 251, 268, 275, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 316, 317, 324, 331, 337, 341, 344, 361, 365, 368, 369, 370, 371, 372, 373, 374, 375, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 422, 430, 433, 436, 437, 438, 439, 441, 442, 443, 445, 446, 447, 448, 449, 452, 453, 455, 465, 480], "elli": [0, 152, 155], "nebraska": 0, "center": [0, 14, 36, 47, 50, 51, 55, 58, 61, 78, 98, 104, 105, 141, 152, 155, 157, 160, 182, 189, 206, 210, 217, 228, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 324, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 419, 421, 446, 447, 449, 458, 465], "demian": [0, 114, 121, 140, 155, 198, 243], "wassermann": [0, 114, 121, 140, 155, 198, 243], "derek": [0, 143, 155], "pisner": [0, 143, 155], "st": 0, "petersburg": 0, "fl": 0, "dimitri": [0, 114, 123, 128, 140, 155, 160, 169, 170, 194, 229, 232, 266, 449], "papadopoulo": [0, 114, 123, 128, 140, 155, 170, 194, 266], "orfano": [0, 114, 123, 128, 140, 155, 170, 194, 266], "neurospin": [0, 60, 64, 72, 112, 170, 171, 211, 426, 482], "cea": [0, 194], "universit\u00e9": [0, 170], "gif": [0, 170], "sur": [0, 170], "yvett": [0, 170], "elvi": [0, 49, 114, 118, 121, 128, 130, 133, 155, 159, 160, 168, 449], "dohmatob": [0, 49, 114, 118, 121, 128, 130, 133, 155, 159, 160, 168, 449], "research": [0, 114, 175, 180, 182, 187, 188, 190, 192, 194, 197, 198, 206, 214, 217, 218, 257, 366], "fair": [0, 58, 114, 161, 199, 254], "eric": [0, 22, 23, 58, 114, 127, 137, 140, 141, 143, 155, 196, 199, 242, 250, 254], "larson": [0, 127, 137, 140, 141, 143, 155], "evan": [0, 114, 148, 155, 189, 192, 208, 220, 225, 240, 248, 251, 261, 286], "edmond": [0, 148, 155], "oxford": [0, 21, 90, 114, 157, 184, 236, 244, 316, 317, 417, 418], "uk": [0, 114, 168, 206, 209, 222, 223, 224, 249, 278, 279], "fabian": [0, 114, 118, 155, 214, 246], "pedregosa": [0, 114, 118, 155, 214, 246], "geneva": 0, "florent": [0, 114, 127, 155, 196, 206, 242], "pollet": [0, 127, 155], "en": [0, 56, 172, 187, 189, 213, 238, 366, 369], "franz": [0, 55, 141, 143, 145, 155], "liem": [0, 55, 141, 143, 145, 155], "fran\u00e7oi": [0, 125, 155], "paugam": [0, 125, 155], "gael": [0, 48, 49, 114, 118, 119, 121, 122, 128, 130, 133, 137, 140, 141, 142, 143, 145, 155, 156, 160, 161, 214, 215, 228, 229, 246, 271, 273, 299, 300, 448, 449, 454], "varoquaux": [0, 44, 48, 49, 51, 56, 98, 114, 117, 118, 119, 121, 122, 128, 130, 133, 137, 140, 141, 142, 143, 145, 155, 156, 157, 159, 160, 161, 162, 164, 168, 198, 214, 215, 228, 229, 243, 246, 271, 273, 294, 295, 299, 300, 448, 449, 454], "gill": [0, 140, 143, 155], "holland": [0, 140, 143, 155], "vrije": 0, "universiteit": 0, "amsterdam": 0, "netherland": 0, "greg": [0, 140, 143, 155], "kiar": [0, 143, 155], "greydon": [0, 148, 155], "gilmor": [0, 148, 155], "depart": [0, 175, 223], "mathemat": [0, 131, 155, 175, 353, 469], "toronto": 0, "guillaum": [0, 70, 114, 140, 143, 155, 200], "lemaitr": [0, 140, 143, 155], "geriatr": 0, "criugm": 0, "ian": [0, 143, 155], "aben": [0, 143, 155], "jake": [0, 143, 155], "vogel": [0, 58, 114, 143, 155, 199, 219, 254, 255], "clinic": [0, 51, 98, 163, 177], "scilifelab": 0, "lund": 0, "sweden": 0, "jan": [0, 114, 118, 155, 365, 366], "margeta": [0, 118, 155], "kardiom": 0, "nova": 0, "dubnica": 0, "slovakia": 0, "jaqu": [0, 118, 155], "grobler": [0, 118, 155], "anylin": 0, "gmbh": 0, "vienna": 0, "austria": 0, "jason": [0, 118, 140, 155], "gor": [0, 118, 140, 155], "insight": [0, 56, 149, 155, 156], "mountain": 0, "view": [0, 6, 13, 14, 16, 22, 23, 33, 37, 42, 52, 54, 58, 61, 62, 65, 69, 70, 74, 83, 101, 124, 125, 127, 137, 146, 148, 152, 155, 162, 167, 169, 177, 178, 182, 224, 292, 293, 294, 295, 299, 300, 357, 371, 374, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 422, 425, 427, 428, 430, 431, 433, 434, 435, 436, 438, 439, 441, 442, 444, 447, 480, 483], "javier": [0, 148, 155], "rasero": [0, 148, 155], "school": [0, 217], "virginia": 0, "viginia": 0, "jean": [0, 48, 49, 70, 71, 114, 118, 137, 140, 155, 156, 159, 161, 169, 194, 200, 206, 215, 229, 232, 266, 271, 273, 299], "kossaifi": [0, 118, 155], "imperi": 0, "king": [0, 23, 114, 137, 140, 155, 216, 281], "cnr": [0, 189, 238], "jell": [0, 75, 114, 123, 124, 155, 319], "roelof": [0, 123, 124, 155], "dalenberg": [0, 123, 124, 155], "groningen": 0, "jeremi": [0, 148, 155], "lefort": [0, 148, 155], "besnard": [0, 148, 155], "renn": 0, "origami": 0, "lab": 0, "chevali": [0, 140, 143, 155], "emerton": 0, "johann": [0, 143, 155], "wiesner": [0, 143, 155], "central": [0, 90, 236], "mental": [0, 65, 67, 71, 80, 114, 177, 194, 266, 272], "health": 0, "jon": [0, 145, 155], "haitz": [0, 145, 155], "legarreta": [0, 145, 155], "gorrono": [0, 145, 155], "brigham": 0, "women": 0, "": [0, 2, 3, 4, 6, 9, 16, 23, 29, 30, 33, 34, 40, 41, 44, 49, 50, 55, 56, 64, 65, 66, 67, 69, 70, 71, 74, 76, 77, 78, 79, 85, 90, 92, 93, 99, 101, 102, 107, 114, 117, 126, 127, 133, 140, 150, 151, 156, 159, 163, 166, 167, 169, 170, 172, 173, 174, 175, 177, 178, 180, 181, 182, 187, 188, 189, 190, 191, 192, 194, 195, 198, 199, 206, 209, 213, 214, 215, 217, 219, 221, 222, 225, 226, 228, 229, 230, 238, 240, 241, 249, 251, 252, 254, 255, 261, 266, 268, 271, 273, 275, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 314, 316, 317, 324, 337, 341, 342, 351, 353, 357, 358, 359, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 421, 422, 430, 431, 436, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 459, 461, 466, 480, 483], "hospit": 0, "mass": [0, 58, 78, 152, 155, 339, 385, 417, 458], "gener": [0, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 72, 73, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 110, 112, 116, 123, 125, 126, 127, 140, 141, 143, 145, 146, 148, 150, 155, 162, 163, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 192, 195, 208, 213, 221, 240, 241, 243, 266, 276, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 314, 316, 317, 324, 331, 337, 339, 340, 341, 342, 347, 353, 354, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 383, 385, 426, 430, 435, 436, 437, 438, 439, 440, 446, 447, 449, 457, 461, 467, 471, 480, 481, 482], "harvard": [0, 21, 90, 157, 184, 217, 226, 236, 244, 252, 417, 418], "boston": 0, "jona": [0, 49, 114, 137, 155, 448, 454], "sassenhagen": [0, 137, 155], "jordi": [0, 126, 155], "huguet": [0, 126, 155], "barcelonabeta": 0, "joshua": [0, 114, 145, 155, 220, 226, 248, 252], "teve": [0, 145, 155], "julia": [0, 128, 143, 155], "huntenburg": [0, 128, 143, 155], "intern": [0, 34, 48, 114, 161, 168, 169, 170, 172, 187, 192, 218, 230, 240, 299, 300, 351, 353], "laboratori": 0, "julio": [0, 124, 155], "A": [0, 1, 5, 6, 7, 11, 15, 16, 21, 40, 42, 47, 48, 49, 56, 58, 61, 67, 69, 70, 74, 78, 79, 83, 85, 88, 97, 99, 101, 104, 105, 109, 111, 112, 113, 114, 117, 124, 135, 136, 140, 143, 149, 155, 156, 158, 159, 161, 163, 165, 166, 167, 169, 170, 171, 173, 175, 177, 178, 180, 181, 182, 188, 189, 191, 192, 194, 195, 196, 198, 199, 206, 212, 215, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 239, 241, 242, 247, 249, 251, 254, 255, 256, 258, 260, 268, 269, 271, 272, 273, 274, 276, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 315, 316, 317, 320, 323, 324, 327, 333, 337, 342, 343, 349, 354, 355, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 385, 396, 397, 401, 417, 418, 421, 425, 430, 432, 434, 436, 437, 440, 442, 446, 447, 448, 449, 450, 451, 456, 457, 459, 460, 461, 462, 467, 480, 482, 483], "peraza": [0, 124, 155], "florida": 0, "miami": 0, "kamalakar": [0, 121, 128, 130, 133, 137, 138, 140, 143, 147, 155], "reddi": [0, 114, 121, 128, 130, 133, 137, 138, 139, 140, 143, 147, 155, 162], "daddi": [0, 121, 128, 130, 133, 137, 138, 140, 143, 147, 155], "kevin": [0, 124, 155], "sitek": [0, 124, 155], "northwestern": 0, "evanston": 0, "ilinoi": 0, "koen": [0, 152, 155], "helwegen": [0, 152, 155], "dutch": 0, "connectom": [0, 8, 12, 22, 27, 46, 48, 49, 51, 54, 56, 57, 59, 98, 110, 112, 114, 119, 128, 132, 133, 137, 140, 141, 143, 146, 148, 155, 158, 160, 161, 175, 176, 177, 182, 187, 188, 190, 192, 214, 236, 243, 246, 252, 254, 255, 257, 268, 299, 300, 349, 366, 368, 369, 370, 372, 373, 375, 398, 417, 418, 419, 420, 422, 431, 432, 433, 435, 440, 441, 442, 444, 449, 457, 467, 482, 483], "vu": 0, "konrad": [0, 125, 155], "wagstyl": [0, 125, 155], "konstantin": [0, 118, 155], "shmelkov": [0, 118, 155], "kshitij": [0, 140, 141, 142, 143, 144, 145, 146, 155], "chawla": [0, 140, 141, 142, 143, 144, 145, 146, 155], "duke": 0, "system": [0, 6, 23, 42, 43, 114, 162, 169, 170, 178, 180, 191, 196, 201, 202, 203, 204, 205, 206, 213, 223, 239, 280, 282], "kun": [0, 152, 155], "chen": [0, 37, 114, 152, 155, 188, 268], "macau": 0, "china": 0, "leonard": [0, 150, 155], "sass": [0, 150, 155], "loic": [0, 118, 119, 121, 122, 128, 130, 133, 143, 155], "est\u00e8v": [0, 118, 119, 121, 122, 128, 130, 133, 155], "tetrel": [0, 143, 155], "luz": 0, "paz": 0, "manon": [0, 152, 155], "pietrantoni": [0, 152, 155], "martin": [0, 23, 114, 128, 133, 147, 155, 191, 196, 201, 202, 203, 204, 205, 208, 239, 261, 280, 342, 461], "perez": [0, 128, 133, 155], "guevara": [0, 128, 133, 155], "criteo": 0, "wegrzyn": [0, 147, 155], "bielefeld": 0, "mathia": [0, 124, 155], "goncalv": [0, 124, 155], "mathieu": [0, 125, 155], "dugr\u00e9": [0, 125, 155], "concordia": 0, "matthia": [0, 118, 155], "ekman": [0, 118, 155], "donder": 0, "nijmegen": 0, "matthieu": [0, 152, 155], "joulot": [0, 152, 155], "arami": 0, "maximilian": [0, 125, 155], "cosmo": [0, 125, 155], "sitter": [0, 125, 155], "mehdi": [0, 51, 98, 114, 118, 122, 128, 137, 143, 155], "rahim": [0, 51, 98, 114, 118, 122, 128, 137, 143, 155], "air": 0, "liquid": 0, "mia": [0, 126, 155], "zwalli": [0, 126, 155], "dsst": 0, "nation": [0, 114, 167, 177, 188, 192, 222, 249, 268, 296, 366], "eickenberg": [0, 114, 118, 155, 168], "flatiron": 0, "psychoinformat": 0, "forschungszentrum": 0, "j\u00fclich": 0, "notter": [0, 140, 155], "am": [0, 114, 196, 242], "osram": 0, "martigni": 0, "waskom": [0, 118, 155], "michel": [0, 23, 44, 49, 114, 118, 124, 125, 126, 155, 168, 177, 194, 214, 216, 246, 266, 281], "mohammad": [0, 124, 125, 126, 155], "torabi": [0, 124, 125, 126, 155], "moritz": [0, 137, 140, 143, 155], "boo": [0, 137, 140, 143, 155], "myeong": [0, 150, 155], "seop": [0, 150, 155], "song": [0, 150, 155], "natasha": [0, 123, 155], "clark": [0, 114, 123, 155, 167, 191, 239], "simexp": [0, 480], "neelai": [0, 150, 155], "shah": [0, 150, 155], "intellig": [0, 83, 114, 190, 192], "nikhil": [0, 126, 155], "krish": [0, 126, 155], "texa": 0, "austin": 0, "oliv": [0, 68, 114, 125, 155, 167, 192, 240], "warrington": [0, 125, 155], "wellcom": [0, 175, 223], "neuroimag": [0, 2, 8, 22, 23, 27, 37, 48, 51, 56, 62, 75, 93, 98, 99, 100, 101, 112, 114, 115, 117, 140, 155, 156, 157, 161, 162, 164, 166, 167, 168, 170, 175, 176, 179, 184, 189, 192, 194, 196, 198, 206, 208, 214, 215, 221, 238, 240, 242, 243, 246, 250, 256, 260, 261, 266, 271, 273, 286, 292, 293, 294, 295, 296, 297, 298, 299, 300, 319, 324, 337, 339, 342, 343, 346, 347, 348, 349, 350, 351, 352, 354, 356, 357, 358, 359, 360, 362, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 420, 421, 425, 427, 428, 430, 433, 434, 435, 440, 442, 443, 447, 449, 452, 453, 455, 456, 459, 462, 465, 471, 480, 482, 483], "ucl": [0, 114, 168, 223, 224, 278, 279], "oscar": [0, 140, 155], "esteban": [0, 140, 155], "patrick": [0, 125, 155], "sadil": [0, 125, 155], "biostatist": [0, 114, 156], "john": [0, 23, 37, 58, 101, 114, 137, 155, 167, 169, 191, 199, 216, 217, 239, 254, 275, 281, 385], "hopkin": 0, "bloomberg": 0, "public": [0, 2, 62, 99, 117, 123, 125, 126, 150, 152, 155, 170, 175, 215, 275], "paul": [0, 114, 123, 125, 155, 188, 195, 206, 241, 268], "bogdan": [0, 123, 155], "reiner": [0, 125, 155], "mason": 0, "minnesota": 0, "paula": [0, 143, 155], "sanz": [0, 143, 155], "leon": [0, 143, 155], "brisban": 0, "australia": 0, "peer": [0, 140, 155, 209], "herholz": [0, 140, 155], "philipp": [0, 48, 70, 71, 114, 118, 155, 161, 194, 200, 266, 299], "gervai": [0, 118, 155], "zurich": 0, "pierr": [0, 114, 137, 139, 140, 141, 155, 156, 192, 228, 240], "bellec": [0, 114, 140, 141, 155, 192, 240], "glaser": [0, 139, 155], "gatsbi": 0, "comput": [0, 3, 6, 9, 15, 16, 22, 25, 29, 30, 31, 33, 39, 40, 41, 43, 44, 46, 47, 48, 49, 51, 61, 62, 63, 64, 65, 66, 67, 69, 71, 74, 76, 78, 80, 82, 84, 89, 91, 94, 97, 98, 99, 100, 101, 102, 103, 107, 112, 114, 115, 117, 125, 128, 140, 146, 147, 148, 150, 155, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 172, 173, 175, 176, 177, 179, 180, 183, 228, 230, 232, 246, 257, 260, 270, 280, 292, 293, 294, 295, 296, 297, 298, 299, 300, 312, 314, 316, 317, 320, 321, 323, 324, 326, 331, 333, 337, 339, 340, 347, 348, 349, 352, 353, 354, 355, 359, 361, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 419, 422, 425, 432, 433, 434, 435, 440, 441, 443, 446, 447, 448, 449, 457, 459, 460, 462, 465, 466, 473, 480, 483], "olivi": [0, 137, 155], "quirion": [0, 137, 155], "canadian": 0, "genom": 0, "calcul": [0, 3, 31, 41, 47, 48, 58, 91, 96, 108, 112, 124, 141, 155, 171, 194, 265, 266, 292, 293, 294, 295, 299, 300, 314, 316, 317, 332, 339, 347, 365, 368, 371, 374, 378, 381, 385, 396, 413, 420, 425, 428, 433, 434, 435, 440, 442, 447, 459, 482], "qu\u00e9bec": 0, "pradeep": [0, 114, 139, 155, 162], "raamana": [0, 114, 139, 155, 162], "pittsburgh": 0, "pa": [0, 327], "rahul": [0, 114, 125, 155, 206], "brito": [0, 125, 155], "raphael": [0, 123, 147, 148, 149, 150, 151, 152, 155], "meudec": [0, 123, 147, 148, 149, 150, 151, 152, 155], "robert": [0, 114, 123, 124, 148, 155, 169, 191, 192, 208, 239, 261, 286], "luke": [0, 148, 155], "agencyenterpris": 0, "melbourn": 0, "williamson": [0, 123, 124, 155], "roberto": [0, 114, 133, 143, 155, 222, 249], "guidotti": [0, 133, 143, 155], "d": [0, 26, 41, 50, 51, 56, 58, 69, 75, 99, 114, 117, 156, 160, 169, 170, 177, 189, 192, 198, 199, 208, 215, 219, 222, 238, 249, 254, 255, 258, 261, 271, 273, 276, 286, 312, 319, 342, 365, 366, 421, 432, 461, 469], "annunzio": 0, "chieti": 0, "pescara": 0, "san": 0, "benedetto": 0, "del": [0, 44], "tronto": 0, "itali": 0, "ronald": [0, 118, 155], "phlypo": [0, 118, 155], "lyon": 0, "area": [0, 23, 32, 70, 79, 93, 114, 148, 155, 160, 162, 167, 171, 172, 175, 176, 177, 182, 200, 201, 202, 203, 204, 205, 206, 213, 251, 261, 280, 346, 386, 388, 389, 398, 401, 436, 437, 438, 439, 445], "ryan": [0, 114, 143, 155, 221, 256], "hammond": [0, 143, 155], "uc": 0, "diego": [0, 114, 188, 268], "sachin": [0, 152, 155], "patalasingh": [0, 152, 155], "sage": [0, 152, 155], "hahn": [0, 152, 155], "deephealth": 0, "salma": [0, 118, 121, 128, 130, 137, 140, 141, 155], "bougacha": [0, 118, 121, 128, 130, 137, 140, 141, 155], "sam": [0, 124, 155], "buck": [0, 124, 155], "johnson": [0, 124, 155], "sami": [0, 152, 155], "jawhar": [0, 152, 155], "simon": [0, 56, 114, 140, 145, 155, 220, 222, 248, 249, 365, 366], "steinkamp": [0, 140, 145, 155], "danish": 0, "magnet": [0, 114, 172, 175, 187, 192, 206, 240, 266], "reson": [0, 114, 172, 175, 187, 192, 206, 240, 266], "copenhagen": 0, "amag": 0, "hvidovr": 0, "denmark": 0, "sourav": [0, 140, 155], "singh": [0, 140, 155], "steven": [0, 58, 114, 124, 126, 155, 191, 192, 199, 206, 219, 221, 239, 254, 255, 256, 365, 366], "meisler": [0, 124, 126, 155], "divis": [0, 90, 221], "technologi": 0, "suramya": [0, 126, 155], "pokharel": [0, 126, 155], "tribhuvan": 0, "kathmandu": 0, "nepal": 0, "sylvain": [0, 137, 140, 143, 155], "lan": [0, 137, 140, 155], "takerkart": [0, 143, 155], "la": 0, "timon": 0, "marseil": 0, "tamer": [0, 126, 155], "gezici": [0, 126, 155], "bilkent": 0, "tarun": [0, 125, 155], "samanta": [0, 125, 155], "acharya": 0, "prafulla": 0, "chandra": 0, "lifespan": 0, "informat": [0, 217], "pennsylvania": 0, "thoma": [0, 101, 114, 117, 143, 146, 149, 150, 155, 156, 163, 175, 177, 188, 191, 215, 220, 226, 239, 248, 252, 268, 271, 273, 339, 365, 366, 385, 462], "bazeil": [0, 143, 146, 149, 150, 155], "tom": [0, 114, 148, 155, 191, 239], "vanass": [0, 148, 155], "wisconsin": 0, "sleep": 0, "conscious": 0, "vasco": [0, 152, 155], "diogo": [0, 152, 155], "vincent": [0, 23, 44, 49, 114, 118, 155, 168, 177, 191, 194, 214, 216, 239, 246, 266, 281, 366], "http": [0, 3, 18, 22, 23, 31, 32, 34, 37, 38, 40, 41, 44, 48, 49, 51, 56, 58, 62, 69, 70, 97, 98, 100, 101, 114, 117, 148, 152, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 172, 175, 177, 178, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 232, 236, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 260, 261, 262, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 286, 292, 293, 294, 295, 299, 311, 315, 316, 317, 339, 342, 365, 366, 385, 421, 443, 444, 448, 449, 454, 461, 462, 480, 481], "www": [0, 22, 23, 37, 40, 41, 49, 51, 56, 70, 98, 101, 114, 117, 156, 157, 159, 164, 167, 168, 177, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 207, 208, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 236, 237, 238, 239, 240, 241, 246, 249, 250, 256, 260, 261, 262, 266, 268, 269, 270, 271, 273, 275, 278, 279, 281, 286, 294, 295, 342, 365, 366, 385, 421, 461, 462], "logilab": 0, "fr": [0, 44, 114, 160, 168, 189, 194, 198, 214, 238, 243, 246, 449], "virgil": [0, 118, 155], "fritsch": [0, 118, 155], "yasmin": [0, 123, 124, 125, 126, 152, 155, 177], "mzayek": [0, 123, 124, 125, 126, 152, 155], "zvi": [0, 145, 155], "baratz": [0, 145, 155], "tel": 0, "aviv": 0, "israel": 0, "\u00f3scar": [0, 118, 121, 128, 130, 155], "n\u00e1jera": [0, 118, 121, 128, 130, 155], "checkmk": 0, "paid": 0, "grant": 0, "chan": 0, "zuckerberg": 0, "initi": [0, 3, 12, 48, 49, 50, 67, 93, 99, 125, 155, 160, 168, 171, 180, 182, 187, 210, 230, 232, 299, 300, 311, 315, 369, 370, 372, 373, 375, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 446, 449], "were": [0, 6, 18, 23, 40, 49, 58, 62, 65, 70, 78, 90, 93, 97, 100, 106, 107, 116, 121, 123, 143, 146, 150, 151, 152, 155, 162, 169, 170, 172, 188, 192, 199, 206, 208, 210, 213, 222, 223, 271, 273, 342, 372, 375, 461, 467], "niconnect": 0, "french": [0, 177], "investiss": 0, "avenir": 0, "wa": [0, 3, 40, 54, 67, 70, 90, 101, 104, 105, 116, 117, 123, 125, 140, 147, 148, 149, 150, 151, 155, 162, 164, 167, 169, 172, 178, 190, 192, 223, 228, 247, 248, 297, 298, 299, 300, 307, 324, 331, 337, 339, 368, 369, 370, 371, 372, 373, 374, 375, 421, 430, 436, 438, 439, 443, 445, 446, 447, 448, 449, 452, 467], "also": [0, 4, 11, 14, 15, 16, 17, 22, 23, 29, 31, 34, 39, 40, 41, 42, 43, 50, 51, 55, 56, 62, 63, 65, 66, 68, 69, 71, 74, 76, 78, 85, 88, 90, 92, 93, 94, 97, 107, 116, 117, 121, 123, 125, 126, 128, 133, 134, 136, 140, 143, 146, 149, 150, 152, 155, 156, 157, 160, 161, 163, 164, 165, 167, 169, 170, 171, 172, 174, 175, 177, 178, 180, 181, 182, 183, 195, 196, 200, 206, 214, 215, 223, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 281, 282, 292, 293, 294, 295, 297, 298, 324, 326, 327, 331, 337, 349, 353, 357, 362, 363, 365, 376, 377, 378, 379, 380, 381, 382, 420, 421, 425, 426, 428, 433, 434, 435, 436, 438, 439, 447, 450, 451, 455, 456, 459, 480, 483], "support": [0, 4, 9, 15, 29, 32, 33, 34, 35, 44, 97, 104, 110, 116, 121, 123, 124, 126, 135, 136, 137, 140, 141, 142, 143, 147, 148, 150, 151, 152, 155, 162, 163, 165, 167, 172, 175, 176, 292, 293, 294, 295, 312, 364, 365, 369, 372, 436, 438, 439, 455, 465, 481], "digicosm": 0, "dataia": 0, "If": [0, 2, 9, 14, 15, 24, 32, 34, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 68, 74, 78, 83, 85, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 112, 116, 117, 125, 140, 147, 148, 150, 155, 156, 160, 162, 163, 165, 167, 169, 170, 172, 175, 177, 178, 180, 181, 182, 188, 228, 229, 230, 232, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 247, 249, 254, 255, 256, 257, 261, 262, 264, 265, 266, 269, 271, 273, 275, 276, 281, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 311, 314, 315, 316, 317, 320, 321, 324, 327, 331, 333, 337, 338, 339, 340, 341, 342, 343, 347, 348, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 459, 460, 461, 465, 480, 481], "you": [0, 2, 4, 6, 9, 14, 15, 22, 23, 24, 32, 35, 36, 39, 40, 41, 42, 43, 44, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 68, 70, 74, 78, 85, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 112, 114, 116, 117, 135, 136, 140, 143, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 168, 170, 174, 175, 177, 178, 180, 181, 182, 188, 194, 215, 228, 229, 230, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 257, 260, 261, 262, 264, 265, 266, 269, 270, 271, 275, 276, 281, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 326, 327, 331, 337, 368, 369, 370, 371, 372, 373, 374, 375, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 422, 425, 427, 428, 431, 433, 434, 435, 436, 438, 439, 442, 443, 445, 446, 447, 448, 449, 465, 480, 481, 483], "want": [0, 2, 6, 9, 14, 15, 42, 49, 54, 65, 69, 70, 71, 77, 85, 93, 97, 99, 112, 116, 117, 156, 163, 165, 169, 170, 172, 181, 182, 271, 273, 297, 298, 327, 357, 366, 438, 445, 480, 481], "we": [0, 2, 3, 4, 6, 9, 11, 14, 18, 19, 20, 22, 23, 24, 25, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 115, 116, 117, 123, 125, 133, 141, 142, 143, 148, 150, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 169, 171, 172, 175, 177, 178, 179, 180, 181, 182, 198, 218, 221, 235, 244, 245, 262, 271, 273, 297, 298, 299, 314, 316, 317, 337, 341, 349, 353, 361, 362, 363, 377, 379, 380, 382, 389, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 424, 449, 451, 467, 480, 481], "suggest": [0, 6, 85, 150, 155, 159, 177, 180, 342, 377, 379, 380, 382, 461], "do": [0, 3, 6, 9, 22, 24, 25, 30, 31, 33, 34, 40, 42, 49, 50, 51, 57, 61, 64, 65, 66, 68, 74, 76, 78, 79, 93, 97, 99, 100, 107, 110, 116, 127, 137, 141, 146, 150, 155, 156, 160, 161, 162, 163, 165, 167, 169, 172, 177, 178, 180, 181, 182, 228, 238, 262, 292, 293, 294, 295, 296, 297, 298, 299, 300, 324, 333, 337, 339, 342, 354, 369, 370, 371, 372, 373, 374, 375, 380, 381, 382, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 447, 461, 465, 480], "us": [0, 1, 2, 4, 6, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 26, 29, 30, 31, 32, 33, 36, 38, 40, 41, 42, 43, 44, 46, 47, 49, 52, 53, 54, 55, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 88, 89, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 112, 114, 115, 116, 123, 124, 125, 126, 127, 128, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 152, 155, 156, 157, 158, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 181, 182, 188, 189, 192, 193, 194, 195, 196, 197, 199, 206, 207, 213, 214, 215, 217, 218, 223, 227, 229, 231, 232, 233, 234, 235, 236, 238, 241, 247, 248, 251, 253, 256, 277, 284, 285, 287, 288, 290, 297, 301, 302, 303, 310, 311, 313, 314, 315, 316, 317, 318, 322, 323, 325, 328, 329, 330, 332, 334, 335, 336, 341, 345, 346, 351, 356, 360, 362, 363, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 414, 415, 416, 444, 446, 448, 452, 453, 454, 455, 456, 460, 461, 462, 466, 467, 468, 477, 481, 482, 483], "our": [0, 2, 3, 14, 19, 29, 34, 40, 49, 51, 56, 58, 65, 66, 93, 97, 100, 116, 117, 140, 150, 155, 157, 162, 169, 170, 172, 178], "zenodo": 0, "doi": [0, 3, 22, 23, 31, 32, 37, 38, 40, 41, 44, 48, 49, 51, 56, 58, 69, 75, 97, 98, 101, 114, 117, 156, 157, 159, 161, 163, 164, 167, 168, 175, 177, 187, 188, 189, 191, 192, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 228, 236, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 258, 260, 261, 266, 268, 269, 270, 271, 273, 275, 276, 280, 281, 286, 294, 295, 299, 300, 319, 339, 342, 365, 366, 385, 421, 448, 454, 461, 462], "softwar": [0, 6, 67, 71, 172, 175, 364, 481], "author": [0, 47, 55, 114, 169, 170, 178], "licens": [0, 125, 155, 241], "bsd": 0, "4": [0, 3, 6, 12, 14, 15, 18, 20, 23, 24, 27, 29, 30, 31, 33, 34, 35, 36, 37, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 56, 57, 58, 62, 64, 65, 66, 67, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 83, 85, 90, 91, 95, 97, 98, 99, 100, 101, 102, 106, 107, 108, 110, 114, 118, 128, 133, 136, 140, 141, 142, 143, 148, 156, 157, 160, 162, 167, 168, 169, 177, 188, 192, 196, 200, 201, 202, 203, 204, 205, 206, 210, 212, 218, 219, 225, 228, 230, 236, 251, 255, 258, 268, 269, 275, 276, 277, 280, 292, 293, 294, 295, 297, 298, 299, 300, 307, 324, 337, 342, 353, 357, 358, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 379, 380, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 425, 427, 428, 431, 432, 433, 434, 435, 446, 447, 448, 449, 461, 465, 466, 467, 480, 482], "claus": 0, "titl": [0, 3, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 26, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 69, 70, 74, 75, 76, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 116, 125, 143, 144, 149, 152, 155, 160, 162, 170, 178, 182, 324, 337, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 457, 459, 480], "url": [0, 3, 22, 23, 31, 32, 37, 38, 40, 41, 44, 48, 49, 51, 56, 58, 62, 69, 70, 97, 98, 101, 114, 144, 152, 155, 156, 157, 159, 160, 161, 163, 164, 167, 168, 169, 175, 177, 187, 188, 189, 191, 192, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 229, 232, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 258, 260, 261, 264, 265, 266, 268, 269, 270, 271, 273, 275, 276, 277, 280, 281, 286, 291, 294, 295, 299, 311, 315, 316, 317, 339, 342, 365, 366, 385, 421, 448, 449, 454, 461, 462], "com": [0, 22, 23, 37, 40, 41, 49, 51, 56, 69, 98, 101, 114, 152, 155, 156, 157, 164, 167, 168, 170, 188, 189, 192, 194, 195, 196, 201, 202, 203, 204, 205, 206, 208, 212, 213, 214, 216, 220, 221, 225, 238, 240, 241, 242, 246, 248, 250, 251, 256, 261, 266, 268, 269, 270, 280, 286, 294, 295, 342, 365, 366, 385, 421, 461, 462, 480, 481], "org": [0, 3, 18, 22, 23, 31, 32, 34, 36, 37, 38, 40, 41, 49, 51, 52, 53, 56, 58, 62, 69, 74, 76, 97, 98, 101, 114, 117, 156, 157, 159, 162, 164, 167, 168, 169, 170, 172, 175, 177, 178, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 229, 232, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 260, 261, 262, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 280, 281, 286, 292, 293, 294, 295, 339, 342, 365, 366, 385, 421, 444, 448, 454, 461, 462], "10": [0, 2, 3, 5, 6, 9, 11, 12, 15, 21, 22, 23, 24, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 69, 71, 72, 75, 76, 78, 80, 86, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 107, 114, 117, 122, 140, 150, 156, 157, 159, 161, 162, 163, 164, 167, 168, 169, 171, 172, 175, 177, 187, 188, 189, 191, 192, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 228, 229, 232, 236, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 263, 266, 268, 269, 270, 271, 273, 275, 276, 280, 281, 286, 292, 293, 294, 295, 296, 297, 298, 299, 300, 312, 319, 320, 327, 339, 341, 342, 353, 365, 366, 370, 372, 373, 375, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 421, 439, 446, 447, 448, 449, 452, 453, 454, 457, 458, 461, 462, 465, 466, 467, 480, 482], "5281": 0, "8397156": 0, "resourc": [0, 180, 218], "identifi": [0, 29, 30, 32, 33, 50, 58, 62, 93, 114, 123, 150, 155, 160, 168, 171, 172, 174, 188, 238, 320, 324, 326, 331, 333], "rrid": 0, "scr_001362": 0, "There": [0, 4, 21, 65, 159, 162, 163, 164, 170, 175, 246, 314, 316, 317, 338, 365, 456, 480], "paper": [0, 48, 49, 116, 117, 159, 169, 170, 172, 271], "publish": [0, 223, 271, 348, 462], "about": [0, 2, 3, 6, 14, 19, 24, 49, 62, 75, 77, 78, 93, 99, 100, 107, 116, 117, 123, 124, 125, 128, 143, 151, 155, 159, 162, 163, 165, 167, 169, 170, 171, 172, 175, 176, 177, 180, 187, 188, 190, 192, 194, 197, 198, 207, 214, 215, 217, 222, 225, 227, 240, 249, 251, 260, 261, 262, 275, 283, 284, 285, 286, 287, 288, 366, 460, 465], "howev": [0, 48, 49, 65, 68, 70, 85, 93, 99, 156, 162, 165, 169, 172, 182, 238, 357, 364, 366, 483], "pattern": [0, 4, 8, 27, 28, 45, 49, 51, 99, 112, 114, 117, 138, 146, 155, 156, 161, 162, 165, 168, 169, 175, 177, 180, 188, 192, 196, 207, 212, 214, 230, 232, 237, 240, 250, 261, 268, 269, 271, 290, 296, 343, 355, 379, 384, 421, 440, 448, 454, 482], "underli": [0, 88, 172, 175, 177, 182, 399], "have": [0, 2, 3, 6, 9, 11, 15, 16, 18, 24, 29, 31, 32, 33, 39, 41, 42, 43, 44, 49, 52, 54, 55, 56, 57, 61, 62, 64, 65, 69, 70, 74, 84, 85, 92, 93, 97, 99, 100, 102, 107, 112, 116, 117, 123, 124, 125, 126, 128, 130, 132, 133, 134, 137, 138, 139, 140, 143, 146, 147, 148, 150, 151, 155, 156, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 172, 174, 175, 177, 178, 180, 181, 182, 188, 192, 195, 197, 210, 224, 227, 228, 229, 230, 232, 235, 240, 247, 248, 252, 256, 257, 271, 275, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 307, 316, 317, 324, 327, 331, 332, 337, 338, 339, 341, 342, 344, 353, 357, 358, 359, 362, 364, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 381, 382, 384, 385, 421, 426, 436, 438, 439, 443, 446, 447, 448, 449, 455, 456, 458, 459, 461, 480, 481], "been": [0, 6, 10, 11, 32, 36, 39, 42, 47, 49, 52, 54, 55, 61, 65, 69, 71, 74, 78, 80, 84, 85, 88, 90, 92, 93, 103, 107, 123, 124, 126, 128, 130, 133, 134, 140, 142, 143, 145, 146, 148, 149, 150, 151, 152, 155, 161, 168, 169, 170, 171, 174, 175, 178, 182, 192, 195, 210, 223, 224, 227, 229, 240, 271, 275, 324, 337, 339, 348, 377, 378, 379, 381, 382, 385, 453, 462, 465], "describ": [0, 6, 18, 37, 63, 65, 67, 71, 115, 116, 117, 126, 155, 163, 169, 170, 172, 177, 178, 182, 194, 211, 221, 229, 236, 266, 267, 319, 322, 325, 327, 331, 339, 366, 385, 424], "machin": [0, 29, 34, 44, 49, 93, 115, 147, 155, 163, 164, 165, 170, 175, 176, 197, 269, 481, 483], "huge": [0, 65, 66, 140, 155, 198], "amount": [0, 24, 34, 36, 50, 65, 94, 163, 165, 170, 176, 177, 178, 271, 292, 293, 294, 295, 297, 298, 299, 300, 324, 337, 343, 354, 369, 370, 371, 372, 373, 374, 375, 447, 448, 449], "upon": [0, 188, 190, 272, 324, 337, 420, 433, 434, 435, 442, 449, 451, 459], "reli": [0, 6, 30, 65, 91, 93, 125, 126, 133, 149, 155, 159, 169, 172, 175, 180, 262, 327, 465, 480], "heavili": 0, "who": [0, 117, 182, 188, 197, 366], "invest": 0, "time": [0, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 56, 57, 60, 62, 63, 64, 66, 67, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 114, 116, 117, 123, 124, 125, 130, 139, 140, 146, 147, 148, 150, 152, 155, 156, 158, 159, 160, 161, 162, 165, 167, 170, 172, 173, 175, 176, 178, 179, 180, 181, 192, 210, 222, 223, 228, 230, 232, 257, 278, 280, 281, 292, 293, 294, 295, 297, 298, 299, 300, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 339, 342, 343, 354, 357, 359, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 385, 413, 421, 433, 435, 442, 443, 447, 449, 451, 452, 453, 458, 460, 461, 462, 465, 467, 472, 480, 483], "maintain": [0, 123, 143, 149, 155, 170, 178], "deserv": [0, 182], "recognit": [0, 3, 28, 30, 45, 49, 69, 96, 108, 112, 114, 124, 155, 165, 167, 168, 176, 177, 192, 240, 260, 294, 296, 347, 349, 352, 354, 355, 368, 374, 384, 385, 413, 428, 432, 435, 440, 482], "citat": [0, 170], "In": [0, 4, 6, 9, 14, 15, 16, 22, 24, 32, 33, 36, 38, 39, 40, 42, 47, 48, 49, 50, 51, 52, 53, 54, 58, 62, 64, 65, 66, 71, 74, 76, 78, 80, 85, 86, 88, 90, 93, 94, 98, 99, 114, 115, 116, 117, 123, 124, 135, 140, 150, 152, 155, 156, 157, 159, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 175, 177, 178, 179, 180, 181, 182, 188, 192, 208, 214, 218, 228, 235, 238, 240, 244, 245, 246, 261, 268, 271, 273, 275, 292, 293, 294, 295, 297, 298, 299, 300, 311, 314, 316, 317, 324, 326, 331, 337, 339, 340, 357, 358, 359, 361, 379, 385, 421, 422, 433, 446, 455, 458, 465, 480, 481], "need": [0, 2, 3, 5, 6, 9, 12, 16, 20, 24, 30, 31, 33, 38, 41, 42, 44, 48, 49, 50, 51, 55, 56, 65, 66, 67, 70, 74, 76, 77, 78, 79, 80, 83, 88, 90, 91, 97, 98, 99, 102, 103, 104, 105, 107, 110, 116, 117, 140, 143, 150, 155, 156, 160, 162, 163, 164, 165, 170, 172, 174, 175, 178, 180, 181, 182, 188, 235, 311, 314, 315, 359, 364, 365, 369, 370, 372, 381, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 422, 425, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 447, 465, 480, 481], "order": [0, 2, 3, 6, 15, 16, 23, 30, 32, 35, 36, 40, 41, 42, 49, 54, 56, 70, 78, 79, 90, 99, 101, 106, 116, 123, 134, 140, 143, 148, 150, 155, 161, 167, 169, 170, 171, 175, 176, 177, 178, 180, 181, 182, 232, 254, 256, 264, 265, 283, 284, 287, 311, 315, 324, 331, 333, 337, 338, 339, 342, 344, 346, 351, 352, 356, 357, 358, 369, 370, 372, 373, 374, 375, 377, 378, 379, 381, 382, 384, 385, 420, 425, 427, 428, 430, 434, 435, 442, 449, 450, 452, 455, 460, 461, 465, 480, 481], "justifi": 0, "pai": [0, 64], "engin": [0, 9, 125, 127, 150, 155, 177, 182, 399, 436, 438, 439, 480, 481], "To": [0, 2, 3, 4, 6, 15, 21, 22, 23, 31, 33, 37, 39, 40, 42, 43, 48, 49, 50, 51, 52, 54, 55, 62, 65, 66, 68, 75, 76, 78, 79, 86, 88, 93, 97, 100, 103, 107, 116, 117, 135, 140, 152, 155, 156, 157, 159, 162, 163, 164, 165, 167, 170, 171, 172, 174, 178, 180, 181, 247, 248, 271, 314, 316, 317, 324, 333, 337, 341, 353, 365, 428, 433, 434, 435, 436, 438, 439, 442, 446, 459, 480], "guarante": [0, 6, 80, 163, 169, 280, 290, 352, 357, 358, 364, 371], "futur": [0, 6, 134, 140, 146, 152, 155, 169, 175, 180, 182, 312, 457], "toolkit": [0, 192], "pleas": [0, 3, 19, 29, 30, 32, 33, 34, 35, 36, 49, 50, 52, 53, 58, 62, 69, 70, 71, 74, 76, 97, 99, 101, 102, 104, 105, 110, 135, 141, 150, 155, 160, 162, 165, 170, 175, 178, 182, 188, 200, 209, 224, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 481], "see": [0, 6, 8, 9, 12, 13, 14, 15, 16, 20, 21, 22, 23, 26, 28, 30, 31, 34, 36, 39, 40, 41, 43, 46, 48, 50, 51, 52, 54, 55, 56, 60, 69, 70, 71, 73, 79, 82, 85, 88, 90, 93, 98, 99, 101, 102, 105, 106, 112, 116, 117, 119, 125, 128, 134, 140, 141, 143, 147, 148, 150, 152, 155, 156, 157, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 175, 178, 180, 182, 184, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 281, 282, 286, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 312, 314, 316, 317, 320, 324, 326, 331, 337, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 420, 421, 427, 428, 430, 433, 434, 435, 442, 443, 444, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 459, 460, 461, 465, 467, 472, 473, 480, 481], "document": [0, 2, 3, 4, 6, 19, 26, 43, 44, 49, 50, 52, 53, 56, 58, 97, 99, 102, 106, 114, 115, 116, 119, 121, 124, 126, 127, 128, 130, 132, 133, 134, 135, 140, 143, 145, 150, 151, 155, 157, 159, 160, 161, 162, 163, 164, 165, 167, 168, 176, 177, 180, 182, 188, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 480, 481], "how": [0, 1, 2, 3, 4, 5, 6, 9, 14, 19, 21, 26, 34, 40, 44, 47, 48, 49, 50, 53, 55, 56, 58, 61, 62, 65, 66, 68, 70, 77, 78, 83, 85, 86, 87, 88, 90, 93, 94, 99, 102, 105, 106, 112, 116, 124, 135, 146, 147, 150, 151, 155, 157, 159, 160, 161, 162, 163, 165, 167, 169, 172, 175, 176, 177, 179, 181, 197, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 481, 483], "introductori": [1, 112, 170], "exampl": [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 68, 69, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 111, 113, 115, 116, 124, 125, 126, 127, 128, 133, 134, 135, 136, 137, 140, 141, 143, 145, 146, 149, 150, 151, 155, 160, 163, 164, 165, 166, 169, 170, 171, 172, 174, 178, 180, 224, 236, 238, 253, 297, 314, 316, 317, 341, 362, 446, 448, 469, 470, 472, 477, 481, 482, 483], "teach": [1, 112, 132, 143, 155, 170, 197], "nilearn": [1, 2, 3, 6, 7, 8, 9, 10, 11, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 115, 116, 117, 118, 122, 123, 124, 125, 126, 127, 128, 130, 131, 133, 134, 135, 138, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 178, 180, 181, 182, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 466, 467, 470, 480, 482, 483], "numer": [1, 7, 29, 33, 35, 57, 112, 147, 155, 170, 171, 182, 232, 312, 314, 316, 317, 325, 433, 434, 460, 482], "plot": [1, 2, 4, 7, 8, 19, 20, 21, 23, 25, 26, 27, 29, 30, 33, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 51, 52, 53, 54, 56, 57, 59, 61, 62, 63, 64, 67, 69, 70, 71, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 103, 104, 105, 107, 110, 112, 116, 119, 121, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 157, 160, 161, 162, 167, 170, 171, 172, 174, 175, 176, 177, 178, 181, 182, 228, 237, 242, 244, 245, 250, 254, 255, 257, 260, 261, 264, 274, 280, 289, 324, 337, 343, 354, 355, 368, 375, 379, 457, 459, 463, 464, 465, 466, 467, 477, 481, 482, 483], "python": [1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 116, 121, 123, 124, 126, 135, 141, 142, 143, 148, 150, 155, 162, 169, 170, 176, 177, 178, 353, 481, 482], "3d": [1, 3, 6, 7, 8, 15, 16, 18, 19, 23, 24, 25, 27, 29, 30, 32, 34, 36, 37, 42, 44, 47, 69, 74, 76, 82, 83, 93, 95, 99, 101, 103, 104, 110, 112, 114, 116, 121, 124, 130, 137, 139, 140, 141, 143, 147, 148, 152, 155, 172, 175, 176, 177, 179, 181, 182, 192, 220, 225, 242, 244, 245, 248, 249, 250, 251, 272, 274, 280, 282, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 339, 341, 343, 344, 347, 349, 350, 351, 352, 361, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 418, 419, 421, 422, 427, 428, 430, 431, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 455, 463, 465, 482, 483], "4d": [1, 3, 4, 6, 7, 8, 11, 16, 18, 20, 25, 27, 29, 30, 31, 32, 34, 36, 41, 47, 48, 49, 52, 53, 54, 56, 58, 70, 83, 84, 86, 88, 90, 91, 93, 94, 97, 99, 101, 103, 112, 115, 123, 124, 125, 130, 137, 140, 141, 146, 155, 157, 160, 161, 162, 165, 175, 177, 179, 182, 197, 211, 239, 241, 243, 244, 245, 249, 257, 261, 267, 274, 282, 296, 299, 300, 339, 341, 342, 343, 347, 348, 349, 350, 352, 354, 361, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 417, 418, 421, 428, 433, 434, 435, 440, 442, 449, 451, 465, 467, 473, 476, 480, 482, 483], "niimg": [1, 7, 33, 54, 58, 88, 90, 91, 97, 112, 116, 124, 125, 126, 137, 140, 143, 148, 152, 155, 159, 177, 179, 181, 182, 249, 274, 282, 292, 293, 294, 295, 296, 297, 298, 299, 300, 319, 324, 327, 337, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 420, 421, 427, 428, 430, 433, 434, 435, 440, 442, 443, 447, 448, 449, 451, 452, 453, 454, 455, 456, 458, 459, 461, 465, 467, 469, 482, 483], "handl": [1, 7, 49, 70, 112, 124, 125, 127, 130, 136, 152, 155, 162, 177, 180, 181, 182, 249, 274, 282, 312, 316, 343, 349, 350, 351, 352, 357, 363, 365, 424, 435, 440, 448, 454, 482], "visual": [1, 7, 12, 14, 27, 28, 32, 33, 39, 45, 47, 48, 50, 56, 65, 67, 69, 70, 71, 78, 79, 82, 85, 86, 87, 88, 90, 91, 93, 95, 100, 101, 103, 104, 105, 107, 114, 115, 124, 125, 135, 137, 140, 146, 148, 155, 156, 157, 158, 166, 170, 171, 174, 177, 179, 181, 190, 194, 207, 210, 213, 226, 237, 239, 240, 246, 249, 256, 260, 261, 265, 266, 268, 270, 274, 282, 343, 344, 347, 349, 350, 352, 354, 355, 357, 361, 368, 371, 374, 376, 379, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 424, 425, 426, 432, 433, 434, 435, 438, 439, 440, 467, 482, 483], "manipul": [1, 7, 55, 65, 88, 116, 135, 155, 177, 180, 260, 282, 359, 428, 440, 482, 483], "look": [1, 6, 7, 23, 29, 32, 40, 44, 56, 64, 65, 67, 68, 71, 103, 112, 117, 140, 141, 151, 155, 162, 170, 171, 172, 177, 178, 182, 197, 260, 271, 273, 282, 359, 428, 440, 482], "introduct": [1, 7, 112, 114, 123, 140, 155, 163, 165, 166, 170, 173, 174, 176, 182, 260, 292, 316, 317, 349, 354, 425, 434, 442, 482, 483], "fmri": [1, 7, 15, 23, 25, 30, 31, 32, 33, 36, 40, 41, 44, 46, 55, 56, 59, 60, 61, 62, 63, 65, 68, 69, 72, 73, 80, 81, 84, 88, 90, 93, 96, 99, 100, 101, 107, 108, 112, 114, 116, 117, 131, 138, 143, 155, 159, 160, 161, 163, 165, 168, 169, 171, 174, 175, 176, 177, 180, 181, 182, 184, 190, 191, 192, 195, 198, 199, 207, 210, 213, 215, 216, 221, 240, 241, 243, 249, 254, 257, 259, 260, 266, 267, 278, 292, 296, 299, 300, 319, 321, 324, 333, 337, 339, 340, 342, 343, 347, 349, 350, 353, 354, 365, 366, 368, 374, 379, 382, 385, 397, 405, 412, 420, 421, 423, 424, 425, 427, 428, 433, 434, 435, 440, 442, 447, 449, 457, 458, 461, 462, 466, 468, 482, 483], "decod": [1, 7, 36, 39, 40, 42, 44, 45, 49, 96, 108, 114, 116, 117, 124, 125, 126, 135, 136, 140, 143, 146, 147, 148, 149, 150, 151, 155, 163, 167, 171, 175, 176, 177, 182, 213, 215, 260, 263, 270, 280, 324, 327, 343, 347, 349, 354, 368, 374, 375, 398, 424, 425, 432, 434, 435, 439, 440, 442, 457, 459, 464, 465, 481, 482, 483], "intro": [1, 7, 65, 112, 177, 278, 324, 340, 343, 354, 420, 423, 424, 428, 435, 458, 482], "glm": [1, 7, 28, 32, 42, 45, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 99, 100, 107, 123, 125, 126, 127, 146, 147, 148, 150, 152, 155, 162, 171, 174, 175, 176, 177, 178, 260, 278, 292, 343, 349, 354, 361, 364, 420, 423, 424, 426, 428, 435, 457, 458, 459, 477, 481, 482, 483], "analysi": [1, 7, 15, 23, 28, 29, 33, 34, 45, 48, 49, 63, 65, 66, 69, 70, 72, 76, 77, 78, 79, 81, 94, 97, 108, 114, 115, 117, 156, 157, 161, 163, 166, 168, 173, 174, 175, 176, 177, 181, 182, 196, 198, 199, 200, 206, 212, 219, 222, 224, 236, 240, 243, 257, 258, 260, 263, 265, 266, 267, 269, 273, 276, 278, 280, 291, 292, 296, 299, 311, 312, 315, 316, 317, 320, 324, 327, 331, 333, 337, 340, 343, 347, 349, 352, 353, 354, 355, 361, 364, 365, 366, 367, 368, 374, 385, 398, 413, 420, 423, 424, 427, 428, 429, 430, 434, 435, 439, 440, 449, 457, 458, 459, 465, 466, 477, 481, 482, 483], "singl": [1, 3, 7, 14, 23, 30, 31, 46, 49, 59, 60, 64, 65, 66, 72, 76, 78, 85, 93, 99, 103, 112, 114, 117, 121, 126, 146, 147, 148, 149, 152, 155, 156, 163, 167, 169, 170, 171, 177, 180, 182, 189, 211, 223, 238, 257, 271, 278, 279, 289, 292, 293, 294, 295, 314, 316, 317, 324, 331, 337, 339, 340, 343, 354, 357, 368, 369, 370, 371, 372, 373, 374, 375, 398, 420, 423, 424, 428, 430, 432, 433, 435, 440, 442, 447, 449, 458, 480, 482], "run": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 71, 72, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 110, 112, 116, 126, 130, 134, 148, 150, 152, 155, 156, 157, 159, 162, 163, 166, 167, 168, 169, 170, 171, 172, 177, 178, 180, 181, 182, 192, 200, 207, 213, 224, 230, 232, 259, 260, 266, 270, 278, 279, 299, 300, 321, 324, 327, 331, 340, 342, 343, 354, 357, 366, 374, 380, 382, 385, 420, 423, 424, 428, 435, 440, 446, 457, 458, 461, 466, 467, 480, 481, 482, 483], "subject": [1, 3, 4, 7, 11, 15, 16, 17, 18, 21, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 59, 60, 64, 65, 67, 70, 72, 74, 76, 77, 79, 84, 90, 93, 94, 98, 99, 100, 101, 103, 104, 105, 107, 109, 110, 112, 114, 116, 117, 123, 124, 125, 126, 131, 133, 134, 143, 146, 155, 157, 158, 159, 160, 162, 169, 171, 172, 174, 177, 179, 180, 181, 183, 186, 188, 189, 191, 192, 194, 197, 206, 210, 211, 212, 214, 216, 222, 223, 227, 228, 229, 230, 232, 236, 237, 238, 240, 246, 257, 260, 265, 266, 268, 269, 275, 278, 279, 280, 281, 291, 299, 300, 324, 327, 331, 337, 338, 340, 343, 354, 357, 362, 365, 366, 368, 369, 370, 371, 373, 374, 375, 380, 382, 398, 418, 420, 422, 423, 424, 428, 432, 435, 440, 447, 458, 467, 480, 482, 483], "dataset": [1, 3, 4, 7, 9, 10, 13, 14, 19, 20, 21, 22, 23, 24, 25, 26, 28, 40, 45, 47, 52, 54, 55, 56, 57, 60, 65, 67, 68, 69, 70, 72, 73, 76, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 101, 102, 103, 106, 108, 112, 114, 116, 117, 124, 125, 126, 127, 130, 131, 135, 139, 140, 143, 144, 145, 146, 148, 149, 150, 151, 152, 155, 156, 157, 158, 161, 162, 163, 166, 168, 171, 174, 175, 176, 177, 178, 179, 182, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 212, 214, 217, 218, 219, 220, 221, 222, 225, 226, 292, 293, 294, 295, 298, 299, 312, 320, 324, 327, 331, 333, 337, 340, 341, 343, 344, 347, 349, 353, 354, 358, 362, 364, 366, 367, 368, 374, 375, 385, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 423, 424, 427, 428, 429, 430, 432, 435, 436, 437, 438, 439, 440, 442, 443, 450, 457, 458, 459, 465, 466, 467, 480, 482, 483], "go": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 112, 115, 117, 136, 155, 156, 162, 166, 170, 174, 177, 178, 182, 273, 347, 352, 353, 355, 422, 427, 431, 435, 440, 442, 466, 482, 483], "end": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 126, 137, 147, 155, 167, 169, 170, 181, 192, 282, 363, 364, 460, 461], "full": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 114, 121, 123, 126, 155, 159, 160, 161, 163, 165, 167, 169, 170, 171, 175, 181, 182, 188, 192, 197, 199, 207, 222, 244, 245, 249, 254, 257, 260, 268, 292, 293, 294, 295, 299, 300, 306, 311, 314, 315, 316, 317, 324, 337, 339, 342, 359, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 432, 447, 449, 451, 457, 461], "code": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 114, 116, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 156, 160, 161, 163, 165, 169, 171, 175, 182, 236, 296, 300, 324, 337, 370, 373, 375, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 431, 449, 457, 459, 466, 475, 477, 481], "your": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 110, 115, 117, 157, 161, 162, 163, 165, 167, 178, 180, 182, 188, 227, 244, 245, 257, 262, 292, 293, 294, 295, 299, 300, 315, 371, 374, 447, 480, 483], "browser": [2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 140, 143, 145, 155, 182, 324, 337, 399, 441, 442, 443, 444, 445, 457, 459, 480], "via": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 114, 116, 119, 155, 157, 158, 162, 165, 168, 170, 171, 180, 195, 221, 241, 297, 298, 324, 333, 377, 378, 379, 381, 382, 420, 425, 427, 428, 433, 434, 435], "binder": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 145, 155], "here": [2, 3, 4, 6, 9, 14, 15, 19, 20, 23, 29, 30, 31, 32, 33, 34, 35, 36, 42, 43, 44, 48, 49, 54, 55, 56, 58, 61, 63, 64, 65, 67, 68, 70, 74, 87, 88, 91, 93, 94, 97, 99, 100, 102, 103, 107, 114, 116, 117, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 174, 177, 178, 181, 182, 221, 257, 297, 298, 314, 316, 317, 327, 339, 378, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 400, 404, 405, 408, 409, 410, 411, 436, 438, 439, 466], "discov": [2, 170, 176], "come": [2, 3, 6, 16, 42, 52, 54, 58, 74, 79, 93, 116, 124, 127, 155, 157, 162, 163, 169, 170, 177, 178, 181, 182, 257, 480], "function": [2, 3, 4, 6, 8, 9, 11, 13, 14, 15, 17, 18, 21, 22, 25, 26, 27, 29, 30, 32, 34, 35, 36, 48, 49, 52, 53, 55, 56, 58, 59, 60, 64, 65, 67, 69, 70, 71, 72, 73, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 101, 103, 107, 108, 110, 114, 116, 117, 119, 121, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 159, 162, 163, 166, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 187, 188, 189, 190, 192, 194, 195, 197, 198, 200, 210, 214, 215, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 308, 309, 310, 311, 312, 315, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479, 481, 482, 483], "let": [2, 3, 4, 6, 15, 40, 49, 56, 65, 67, 69, 74, 76, 77, 78, 85, 92, 97, 163, 170, 177, 341, 353], "first": [2, 6, 11, 14, 16, 18, 20, 23, 25, 30, 32, 33, 35, 40, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 64, 68, 70, 72, 74, 76, 79, 80, 83, 85, 88, 90, 91, 92, 93, 94, 96, 103, 104, 108, 114, 116, 117, 118, 124, 126, 140, 141, 143, 146, 148, 150, 151, 155, 156, 157, 159, 160, 161, 163, 165, 166, 169, 170, 172, 173, 174, 178, 179, 180, 181, 184, 192, 230, 232, 258, 259, 262, 263, 267, 268, 271, 273, 276, 280, 283, 284, 287, 291, 292, 293, 294, 295, 299, 300, 312, 320, 324, 327, 331, 333, 337, 339, 343, 348, 349, 358, 359, 362, 364, 365, 367, 370, 373, 374, 375, 381, 385, 423, 424, 427, 429, 434, 435, 436, 437, 438, 439, 440, 445, 446, 447, 449, 457, 458, 459, 461, 465, 467, 477, 482, 483], "check": [2, 3, 15, 29, 30, 32, 33, 34, 35, 36, 76, 92, 93, 97, 104, 110, 116, 124, 127, 130, 133, 155, 157, 162, 165, 169, 170, 177, 178, 180, 182, 228, 229, 230, 232, 262, 282, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 325, 337, 352, 365, 368, 369, 370, 371, 372, 373, 374, 375, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 446, 447, 448, 449, 480], "where": [2, 6, 9, 15, 16, 23, 24, 40, 44, 50, 68, 76, 83, 86, 93, 99, 104, 112, 125, 133, 147, 155, 156, 160, 162, 167, 168, 170, 172, 175, 178, 181, 182, 210, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 275, 276, 277, 278, 279, 280, 281, 282, 292, 293, 294, 295, 297, 298, 311, 314, 315, 316, 317, 320, 324, 337, 339, 376, 396, 398, 401, 403, 405, 407, 409, 411, 413, 417, 420, 423, 425, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 449, 451, 458, 459, 465, 480], "disk": [2, 3, 4, 6, 100, 102, 106, 107, 116, 117, 123, 140, 146, 147, 152, 155, 162, 170, 180, 181, 182, 210, 253, 263, 271, 273, 276, 292, 293, 301, 302, 303, 324, 337, 376, 436, 438, 439, 457, 459], "import": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 116, 117, 133, 139, 140, 141, 143, 148, 150, 155, 156, 157, 160, 162, 163, 164, 165, 167, 169, 170, 171, 174, 175, 177, 178, 180, 181, 182, 188, 213, 227, 312, 314, 316, 317, 324, 337, 341, 344, 349, 353, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 431, 459, 465, 480], "print": [2, 3, 4, 6, 9, 10, 11, 15, 16, 18, 20, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 62, 67, 68, 69, 70, 71, 74, 76, 80, 84, 85, 88, 90, 91, 92, 93, 94, 97, 100, 101, 102, 103, 104, 106, 107, 110, 116, 162, 170, 177, 180, 230, 238, 299, 300, 324, 337, 349], "f": [2, 3, 4, 9, 10, 11, 15, 16, 18, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 65, 67, 69, 70, 71, 74, 76, 77, 78, 79, 80, 84, 85, 87, 88, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 114, 125, 126, 155, 156, 160, 162, 165, 167, 168, 171, 188, 189, 199, 208, 221, 222, 238, 249, 254, 256, 258, 261, 268, 276, 292, 293, 294, 295, 312, 313, 314, 316, 317, 320, 324, 325, 337, 357, 358, 364, 365, 366, 376, 384, 452, 455], "store": [2, 3, 26, 29, 44, 49, 50, 51, 52, 54, 68, 93, 100, 107, 117, 160, 162, 167, 170, 222, 244, 245, 282, 301, 302, 314, 316, 317, 355, 376, 385, 429], "get_data_dir": [2, 4, 133, 155, 180, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 275, 276, 277, 278, 279, 280, 281], "r": [2, 4, 9, 14, 15, 24, 30, 34, 40, 41, 47, 51, 56, 58, 69, 93, 101, 107, 114, 125, 143, 150, 155, 156, 157, 171, 178, 195, 198, 199, 206, 214, 220, 222, 226, 236, 241, 246, 248, 249, 252, 254, 258, 276, 297, 298, 324, 337, 342, 364, 365, 366, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 420, 422, 425, 427, 428, 431, 433, 434, 435, 459, 461, 480], "home": [2, 3, 4, 6, 10, 11, 15, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 69, 70, 71, 74, 76, 83, 84, 85, 88, 90, 91, 93, 94, 99, 100, 101, 103, 104, 107, 177, 180, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 275, 276, 277, 278, 279, 280, 281, 282, 352, 467], "runner": [2, 3, 4, 6, 10, 11, 15, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 69, 70, 71, 74, 76, 83, 84, 85, 88, 90, 91, 93, 94, 99, 100, 101, 103, 104, 107, 467], "nilearn_data": [2, 3, 6, 10, 11, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 74, 76, 84, 88, 90, 91, 93, 94, 99, 100, 101, 103, 104, 107, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 275, 276, 277, 278, 279, 280, 281, 282, 467], "now": [2, 3, 4, 6, 14, 16, 20, 22, 25, 29, 40, 44, 49, 50, 51, 55, 56, 63, 64, 65, 69, 78, 80, 83, 85, 91, 92, 93, 99, 100, 102, 103, 107, 110, 116, 121, 123, 124, 125, 126, 127, 128, 130, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 162, 168, 170, 178, 181, 292, 293, 294, 295, 299, 300, 311, 314, 315, 316, 317, 341, 349, 353, 366, 369, 371, 372, 374, 447], "retriev": [2, 20, 22, 44, 48, 89, 90, 91, 114, 116, 150, 155, 156, 157, 162, 165, 176, 180, 182, 192, 206, 215, 252, 278, 279, 282, 365, 366, 414, 415], "motor": [2, 14, 15, 16, 17, 51, 65, 67, 76, 78, 89, 90, 92, 96, 108, 112, 194, 266, 289, 347, 368, 374, 385, 427, 480, 482], "contrast": [2, 6, 8, 14, 15, 27, 33, 64, 66, 69, 74, 75, 76, 77, 78, 79, 80, 87, 89, 92, 100, 104, 105, 107, 112, 124, 125, 126, 133, 137, 138, 147, 150, 155, 161, 167, 172, 173, 174, 175, 194, 213, 264, 265, 266, 272, 274, 313, 314, 316, 317, 318, 320, 321, 322, 324, 337, 339, 364, 420, 423, 433, 434, 435, 440, 442, 446, 459, 466, 480, 482, 483], "neurovault": [2, 96, 108, 112, 114, 115, 136, 143, 148, 152, 155, 175, 184, 271, 272, 273, 274, 283, 347, 352, 353, 355, 359, 368, 374, 427, 435, 440, 482, 483], "repositori": [2, 114, 115, 170, 175, 178, 180, 215, 261, 271, 273, 483], "motor_imag": [2, 480], "fetch_neurovault_motor_task": [2, 14, 140, 155, 272, 480], "imag": [2, 6, 10, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 62, 63, 65, 66, 68, 69, 70, 74, 75, 76, 77, 78, 79, 83, 85, 86, 87, 88, 90, 91, 93, 95, 97, 99, 100, 101, 103, 104, 105, 107, 109, 111, 114, 115, 121, 123, 124, 125, 126, 127, 128, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 147, 148, 149, 150, 151, 152, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 170, 172, 175, 177, 179, 187, 188, 189, 190, 192, 194, 197, 198, 200, 206, 207, 208, 209, 210, 211, 213, 214, 215, 217, 218, 220, 223, 224, 225, 226, 228, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 257, 260, 261, 262, 264, 266, 267, 268, 270, 271, 272, 273, 274, 275, 278, 279, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 309, 319, 321, 324, 327, 337, 338, 339, 340, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 461, 462, 465, 467, 473, 482, 483], "collection_658": 2, "image_10426": [2, 14], "nii": [2, 3, 4, 6, 10, 11, 14, 16, 18, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 70, 74, 76, 84, 85, 88, 90, 91, 93, 94, 100, 101, 103, 104, 107, 116, 177, 180, 192, 198, 327, 362, 364, 365, 366, 436, 445, 463, 467], "gz": [2, 3, 4, 6, 10, 11, 14, 16, 18, 22, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 70, 74, 76, 84, 85, 88, 90, 91, 93, 94, 100, 101, 103, 104, 116, 177, 178, 180, 192, 198, 364, 365, 366, 436, 445, 463, 464, 467], "filenam": [2, 3, 4, 10, 15, 50, 55, 61, 93, 116, 126, 133, 143, 150, 151, 155, 157, 160, 161, 170, 180, 181, 244, 245, 276, 290, 292, 293, 294, 295, 297, 298, 301, 302, 303, 352, 364, 368, 371, 374, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 425, 433], "take": [2, 3, 4, 6, 9, 24, 29, 33, 40, 42, 43, 49, 50, 64, 65, 66, 67, 69, 71, 76, 78, 93, 97, 99, 102, 107, 116, 124, 137, 140, 143, 149, 155, 156, 157, 159, 162, 165, 167, 169, 170, 171, 172, 180, 182, 221, 228, 262, 271, 283, 284, 285, 286, 287, 288, 292, 293, 294, 295, 296, 300, 324, 326, 331, 339, 353, 372, 384, 385, 389, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 447, 449, 451, 465, 478, 480], "tmap_filenam": [2, 87], "0": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 113, 114, 116, 156, 157, 160, 162, 168, 169, 170, 171, 172, 178, 180, 181, 182, 192, 193, 197, 201, 202, 203, 204, 205, 218, 225, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 292, 293, 294, 295, 296, 297, 298, 299, 300, 311, 312, 314, 315, 316, 317, 319, 320, 321, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 346, 348, 349, 351, 352, 353, 354, 355, 357, 358, 359, 361, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 420, 421, 422, 427, 431, 432, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 457, 458, 459, 461, 462, 465, 466, 467, 480, 481, 482], "contain": [2, 3, 4, 6, 10, 11, 22, 23, 36, 40, 49, 52, 55, 62, 67, 70, 71, 78, 83, 85, 90, 93, 100, 105, 106, 107, 116, 117, 124, 125, 126, 127, 130, 135, 140, 143, 152, 155, 156, 162, 163, 166, 169, 170, 172, 175, 178, 180, 182, 188, 189, 190, 191, 192, 195, 197, 200, 206, 207, 209, 213, 215, 216, 217, 218, 228, 229, 230, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 260, 270, 271, 272, 273, 274, 275, 281, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 305, 307, 313, 314, 316, 317, 318, 324, 327, 337, 338, 339, 342, 343, 351, 357, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 385, 430, 431, 436, 437, 438, 439, 443, 445, 446, 447, 448, 449, 450, 452, 453, 457, 459, 461, 463, 464, 465, 472, 483], "easili": [2, 3, 9, 15, 23, 30, 31, 39, 49, 58, 93, 116, 117, 150, 155, 162, 163, 165, 167, 168, 169, 170, 171, 175, 178, 244, 245, 266, 337, 339], "statist": [2, 6, 8, 14, 22, 23, 27, 33, 36, 40, 42, 49, 64, 65, 67, 69, 70, 73, 74, 81, 82, 95, 99, 100, 101, 102, 104, 107, 114, 115, 123, 126, 128, 135, 136, 146, 148, 152, 155, 156, 161, 164, 167, 169, 170, 171, 173, 175, 176, 177, 181, 182, 195, 224, 229, 232, 242, 250, 265, 271, 272, 273, 280, 289, 312, 313, 314, 316, 317, 318, 319, 320, 324, 337, 339, 340, 342, 361, 364, 385, 398, 399, 427, 430, 433, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 451, 458, 459, 461, 463, 465, 466, 476, 481, 482, 483], "map": [2, 3, 8, 11, 14, 15, 19, 20, 22, 23, 27, 33, 37, 39, 44, 46, 50, 51, 52, 53, 54, 56, 59, 61, 62, 65, 67, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 82, 83, 86, 88, 89, 90, 91, 92, 95, 96, 98, 100, 101, 103, 107, 108, 112, 114, 115, 124, 125, 126, 127, 128, 132, 135, 136, 140, 141, 143, 146, 147, 150, 155, 156, 157, 158, 161, 163, 165, 166, 167, 170, 171, 172, 173, 175, 176, 177, 180, 181, 182, 191, 192, 194, 195, 198, 200, 201, 202, 203, 204, 205, 206, 208, 209, 214, 218, 220, 222, 225, 228, 229, 230, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 257, 261, 264, 265, 266, 271, 272, 273, 274, 275, 280, 283, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 319, 320, 324, 333, 337, 339, 340, 342, 344, 350, 359, 361, 364, 368, 369, 370, 371, 372, 373, 374, 375, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 419, 421, 427, 428, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 456, 458, 459, 461, 463, 465, 466, 472, 476, 482, 483], "plot_stat_map": [2, 6, 9, 15, 17, 29, 30, 31, 36, 39, 40, 42, 43, 48, 50, 55, 61, 64, 65, 68, 69, 70, 74, 75, 76, 80, 84, 86, 87, 89, 91, 92, 93, 97, 99, 101, 102, 103, 105, 106, 116, 126, 128, 139, 140, 147, 148, 150, 151, 155, 160, 162, 174, 182, 442, 480], "displai": [2, 3, 4, 6, 10, 11, 13, 16, 17, 18, 20, 21, 22, 23, 25, 26, 39, 40, 42, 47, 48, 49, 50, 51, 55, 61, 62, 64, 65, 66, 67, 68, 69, 70, 74, 79, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 97, 98, 99, 101, 104, 105, 123, 126, 127, 132, 137, 138, 140, 141, 143, 147, 148, 150, 152, 155, 157, 160, 161, 167, 172, 176, 181, 324, 331, 337, 370, 373, 375, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 449, 457, 459, 467, 483], "_slicer": [2, 3, 4, 6, 9, 10, 15, 16, 17, 25, 39, 48, 49, 50, 68, 70, 74, 80, 85, 87, 88, 91, 93, 97, 150, 155], "orthoslic": [2, 3, 4, 6, 10, 15, 16, 17, 25, 48, 50, 68, 70, 74, 80, 85, 88, 93, 97, 150, 155, 396, 401, 403, 405, 407, 409, 411, 413, 415, 420, 425, 428, 433, 434, 435, 480], "object": [2, 3, 4, 5, 6, 9, 10, 13, 14, 15, 16, 17, 25, 28, 30, 32, 33, 36, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 68, 70, 74, 80, 85, 87, 88, 90, 91, 93, 97, 112, 114, 116, 117, 124, 125, 132, 135, 143, 146, 149, 150, 152, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 169, 170, 171, 175, 176, 177, 179, 181, 207, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 307, 308, 309, 314, 316, 317, 319, 324, 327, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 464, 465, 467, 469, 472, 475, 480, 482, 483], "0x7fdc19536f90": 2, "better": [2, 3, 30, 33, 42, 43, 49, 65, 93, 99, 102, 114, 122, 124, 125, 131, 134, 140, 148, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 169, 171, 181, 229, 433, 449, 465, 483], "threshold": [2, 3, 9, 13, 14, 16, 17, 23, 30, 33, 36, 37, 39, 40, 42, 48, 49, 50, 54, 55, 56, 61, 64, 65, 67, 68, 69, 70, 74, 75, 76, 78, 79, 80, 86, 87, 88, 89, 92, 93, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 114, 117, 125, 126, 127, 128, 141, 143, 147, 150, 152, 155, 157, 160, 169, 172, 173, 175, 181, 262, 283, 284, 287, 299, 319, 323, 324, 337, 339, 340, 341, 361, 365, 366, 378, 379, 380, 381, 382, 383, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 419, 420, 422, 427, 428, 430, 433, 434, 435, 436, 438, 439, 441, 442, 443, 445, 448, 449, 454, 458, 459, 466, 480, 483], "3": [2, 3, 4, 6, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 114, 118, 122, 123, 127, 130, 133, 134, 137, 140, 141, 142, 143, 148, 149, 150, 151, 156, 160, 162, 167, 168, 171, 172, 177, 181, 182, 188, 189, 192, 195, 196, 197, 201, 202, 203, 204, 205, 206, 208, 214, 220, 225, 226, 228, 229, 230, 232, 234, 235, 236, 240, 241, 243, 246, 247, 248, 250, 251, 252, 253, 257, 258, 261, 263, 268, 271, 273, 276, 280, 281, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 312, 314, 316, 317, 319, 320, 324, 326, 327, 331, 337, 340, 341, 349, 351, 353, 354, 357, 359, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 379, 380, 382, 384, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 420, 422, 425, 427, 428, 431, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 457, 459, 465, 466, 467, 469, 480, 481, 482], "0x7fdc18bb57f0": 2, "rest": [2, 3, 6, 21, 23, 30, 32, 33, 35, 41, 48, 50, 51, 54, 55, 56, 62, 68, 70, 84, 86, 88, 91, 97, 98, 99, 114, 125, 131, 135, 155, 159, 160, 161, 165, 169, 170, 175, 177, 180, 187, 188, 190, 191, 192, 195, 199, 214, 216, 221, 222, 223, 227, 236, 237, 239, 240, 249, 268, 281, 291, 300, 363, 365, 366, 374, 432, 449, 467, 483], "network": [2, 8, 19, 20, 21, 27, 46, 47, 48, 51, 54, 55, 60, 71, 72, 82, 85, 93, 95, 100, 112, 114, 117, 132, 146, 152, 155, 156, 157, 158, 160, 170, 171, 175, 176, 177, 182, 184, 187, 191, 192, 194, 199, 217, 219, 220, 221, 222, 236, 237, 239, 240, 246, 248, 249, 252, 254, 255, 256, 266, 268, 324, 331, 349, 365, 366, 368, 370, 373, 375, 398, 419, 431, 432, 433, 435, 440, 449, 457, 459, 466, 467, 480, 482, 483], "smith": [2, 21, 82, 93, 95, 101, 112, 114, 156, 175, 184, 188, 249, 268, 339, 349, 368, 373, 385, 419, 433, 435, 440, 449, 482], "2009": [2, 21, 114, 122, 146, 149, 155, 175, 177, 184, 188, 192, 196, 208, 242, 249, 261, 262, 268, 286, 339, 385], "correspond": [2, 3, 6, 14, 24, 29, 30, 33, 34, 36, 39, 40, 44, 49, 55, 56, 63, 64, 65, 67, 68, 71, 76, 77, 78, 79, 80, 85, 90, 91, 93, 100, 101, 107, 114, 125, 145, 147, 155, 157, 162, 163, 165, 167, 169, 170, 172, 175, 176, 178, 182, 192, 194, 222, 225, 228, 238, 243, 246, 249, 256, 262, 266, 273, 275, 283, 284, 287, 292, 293, 294, 295, 297, 298, 299, 300, 306, 320, 321, 324, 326, 327, 331, 333, 337, 338, 339, 353, 354, 357, 362, 369, 371, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 385, 414, 415, 420, 421, 425, 428, 429, 431, 433, 434, 435, 437, 447, 449, 450, 452, 453, 455, 458, 459, 465], "between": [2, 6, 9, 22, 23, 24, 30, 40, 42, 49, 50, 51, 55, 62, 65, 67, 69, 71, 74, 76, 78, 79, 85, 88, 91, 98, 99, 101, 104, 128, 135, 140, 143, 146, 149, 155, 156, 157, 158, 160, 162, 163, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 188, 192, 207, 223, 236, 248, 268, 286, 294, 295, 300, 324, 327, 337, 342, 379, 385, 386, 388, 389, 416, 420, 422, 427, 429, 431, 433, 434, 435, 436, 438, 439, 442, 443, 445, 447, 458, 459, 461, 465, 467], "task": [2, 3, 17, 29, 30, 31, 34, 39, 48, 49, 60, 62, 65, 67, 72, 76, 80, 88, 91, 96, 102, 108, 112, 114, 126, 140, 151, 155, 161, 162, 163, 166, 169, 171, 172, 175, 176, 177, 178, 182, 198, 222, 229, 232, 260, 263, 265, 266, 291, 324, 327, 343, 347, 362, 368, 374, 375, 385, 398, 413, 424, 426, 427, 435, 440, 467, 482], "rsn": [2, 21, 86, 135, 155, 191, 222, 239, 249], "fetch_atlas_smith_2009": [2, 21, 86, 124, 125, 155, 222], "true": [2, 3, 4, 6, 9, 13, 14, 15, 16, 21, 22, 23, 25, 26, 29, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 67, 68, 69, 70, 71, 73, 74, 76, 78, 79, 80, 81, 85, 86, 88, 90, 91, 93, 97, 98, 99, 100, 101, 102, 104, 107, 110, 112, 116, 117, 125, 135, 138, 143, 150, 155, 157, 160, 162, 165, 167, 169, 172, 174, 175, 182, 228, 229, 230, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 252, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 275, 281, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 319, 324, 327, 337, 339, 340, 341, 342, 343, 346, 348, 352, 357, 358, 361, 362, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 452, 453, 455, 458, 460, 461, 462, 467, 480, 482], "dimens": [2, 15, 21, 29, 33, 34, 40, 47, 49, 65, 86, 93, 116, 126, 148, 155, 166, 172, 175, 181, 182, 188, 228, 234, 235, 243, 249, 268, 275, 292, 293, 294, 295, 299, 300, 312, 314, 316, 317, 324, 339, 342, 343, 349, 350, 353, 354, 359, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 418, 421, 432, 433, 447, 449, 461, 483], "smith_2009": 2, "pnas_smith09_rsn10": 2, "It": [2, 3, 6, 9, 14, 15, 16, 22, 34, 41, 42, 44, 48, 51, 61, 64, 65, 69, 70, 74, 76, 80, 88, 93, 97, 99, 100, 107, 115, 116, 117, 121, 130, 133, 134, 136, 147, 148, 149, 150, 155, 156, 157, 162, 163, 165, 166, 167, 169, 170, 172, 175, 176, 177, 178, 180, 181, 182, 192, 193, 211, 214, 215, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 481], "nifti": [2, 4, 10, 11, 16, 18, 25, 29, 30, 32, 34, 35, 36, 41, 47, 48, 49, 52, 53, 54, 56, 58, 76, 78, 83, 85, 88, 90, 91, 93, 94, 101, 103, 104, 116, 126, 127, 128, 146, 152, 155, 157, 161, 162, 170, 179, 189, 190, 194, 197, 198, 200, 206, 207, 209, 213, 214, 215, 217, 218, 220, 225, 236, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 252, 257, 259, 260, 264, 265, 266, 269, 270, 275, 292, 293, 297, 298, 299, 300, 343, 344, 347, 351, 352, 353, 357, 360, 425, 447, 450, 465, 472, 480, 483], "load": [2, 4, 6, 8, 9, 21, 23, 27, 49, 52, 53, 54, 58, 61, 62, 67, 68, 70, 76, 87, 88, 90, 92, 101, 102, 103, 104, 105, 106, 107, 112, 115, 123, 124, 125, 133, 135, 138, 140, 149, 150, 152, 155, 158, 161, 165, 166, 169, 170, 177, 179, 181, 208, 236, 237, 240, 242, 244, 245, 246, 249, 250, 254, 255, 256, 257, 260, 261, 262, 265, 266, 269, 270, 271, 273, 275, 280, 281, 283, 284, 285, 286, 287, 288, 289, 299, 300, 301, 308, 309, 310, 327, 341, 352, 353, 355, 365, 366, 422, 438, 440, 441, 445, 463, 464, 472, 480, 482, 483], "memori": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 132, 140, 141, 155, 159, 160, 169, 181, 182, 229, 280, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 307, 312, 317, 324, 327, 337, 343, 347, 357, 358, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 443, 447, 448, 449, 460, 467, 480], "its": [2, 3, 15, 19, 26, 29, 30, 31, 32, 33, 34, 35, 36, 40, 44, 56, 58, 65, 67, 83, 87, 88, 89, 91, 93, 97, 99, 107, 116, 117, 132, 135, 143, 146, 148, 150, 152, 155, 156, 159, 161, 162, 163, 165, 167, 168, 169, 170, 172, 174, 175, 178, 182, 207, 235, 248, 250, 260, 271, 272, 273, 274, 292, 293, 294, 295, 297, 298, 299, 300, 311, 315, 324, 326, 331, 337, 338, 339, 341, 352, 420, 421, 422, 425, 427, 428, 431, 433, 434, 435, 436, 437, 438, 439, 446, 447, 448, 449, 467, 476], "shape": [2, 3, 4, 20, 23, 25, 40, 41, 43, 47, 49, 50, 51, 53, 54, 55, 56, 58, 61, 64, 65, 66, 67, 69, 70, 83, 90, 92, 93, 97, 99, 101, 102, 104, 105, 106, 107, 110, 116, 148, 149, 155, 157, 159, 160, 162, 165, 171, 172, 175, 177, 179, 182, 228, 229, 230, 232, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 269, 275, 292, 293, 294, 295, 297, 298, 299, 300, 305, 306, 307, 311, 312, 314, 315, 316, 317, 320, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 342, 343, 344, 347, 348, 349, 353, 354, 357, 358, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 422, 423, 431, 441, 444, 446, 447, 448, 449, 452, 453, 454, 455, 456, 461, 462, 483], "load_img": [2, 36, 92, 93, 106, 133, 155, 180, 181], "91": [2, 30, 33, 43, 56, 76, 90, 149, 155, 238, 249, 466, 467], "109": [2, 33, 41, 43, 56, 90, 149, 155, 238, 249, 466, 467], "note": [2, 3, 4, 6, 14, 15, 20, 23, 42, 43, 44, 48, 49, 52, 54, 55, 56, 58, 64, 65, 67, 68, 70, 74, 75, 78, 83, 85, 90, 93, 94, 100, 101, 103, 107, 114, 116, 117, 124, 150, 155, 156, 157, 161, 167, 168, 169, 170, 171, 172, 178, 180, 181, 182, 192, 228, 229, 230, 235, 236, 238, 239, 240, 243, 248, 249, 252, 257, 260, 261, 262, 264, 265, 268, 270, 271, 272, 273, 274, 275, 276, 282, 283, 284, 287, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 311, 314, 315, 316, 317, 324, 337, 340, 342, 348, 351, 353, 354, 357, 360, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 420, 421, 425, 427, 434, 435, 446, 447, 448, 449, 450, 461, 462, 465, 467, 480], "index": [2, 6, 12, 20, 22, 23, 33, 40, 41, 50, 55, 56, 64, 65, 67, 70, 71, 86, 87, 99, 100, 102, 126, 132, 150, 155, 160, 190, 191, 238, 239, 247, 248, 250, 258, 277, 291, 292, 293, 294, 295, 314, 316, 317, 331, 349, 357, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 437, 449, 451, 461, 465], "start": [2, 3, 6, 30, 40, 49, 56, 58, 67, 69, 83, 90, 93, 152, 155, 162, 169, 170, 175, 176, 178, 182, 223, 240, 241, 249, 251, 321, 324, 326, 331, 368, 369, 370, 371, 372, 373, 374, 375, 385, 449, 465], "first_rsn": 2, "index_img": [2, 3, 20, 29, 30, 31, 32, 33, 34, 36, 37, 49, 50, 86, 88, 91, 97, 101, 103, 157, 160, 181, 182, 343, 350], "0x7fdc18a9d4c0": 2, "iter_img": [2, 48, 181, 349], "them": [2, 3, 6, 14, 19, 30, 32, 39, 42, 44, 49, 50, 54, 55, 58, 62, 64, 67, 69, 70, 71, 78, 79, 85, 88, 93, 99, 102, 103, 107, 112, 116, 117, 121, 125, 127, 128, 140, 146, 147, 149, 152, 155, 156, 157, 161, 163, 165, 170, 172, 175, 176, 177, 180, 182, 238, 271, 273, 327, 384, 385, 447, 480], "Then": [2, 3, 14, 30, 40, 42, 50, 51, 55, 62, 63, 67, 93, 94, 160, 162, 164, 165, 170, 178, 181, 182, 228, 230, 262, 446], "give": [2, 3, 4, 9, 14, 15, 16, 24, 29, 33, 42, 49, 52, 54, 55, 56, 58, 67, 83, 90, 93, 97, 102, 114, 116, 124, 133, 135, 150, 155, 156, 157, 159, 161, 162, 163, 164, 165, 167, 169, 177, 181, 182, 200, 223, 264, 265, 273, 292, 293, 294, 295, 296, 299, 300, 311, 319, 324, 326, 331, 337, 339, 354, 359, 362, 369, 370, 371, 372, 373, 374, 375, 376, 383, 432, 437, 438, 446, 447, 449, 451, 455, 456, 465], "few": [2, 14, 15, 25, 39, 40, 49, 76, 80, 90, 101, 138, 139, 155, 161, 163, 166, 168, 170, 171, 178, 181, 447, 465, 483], "argument": [2, 6, 9, 14, 15, 17, 55, 58, 66, 68, 79, 88, 93, 117, 124, 125, 126, 132, 133, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 152, 155, 162, 163, 165, 167, 169, 170, 171, 174, 178, 180, 232, 236, 244, 245, 271, 282, 292, 293, 294, 295, 296, 327, 337, 339, 342, 353, 356, 366, 369, 370, 371, 372, 373, 374, 375, 381, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 425, 426, 427, 428, 430, 432, 433, 434, 435, 437, 438, 439, 443, 446, 448, 461, 480], "more": [2, 3, 4, 6, 8, 9, 13, 14, 16, 19, 21, 22, 23, 26, 27, 28, 29, 31, 33, 39, 40, 42, 43, 46, 48, 49, 50, 52, 54, 55, 56, 58, 60, 61, 62, 65, 67, 68, 69, 70, 73, 74, 76, 78, 79, 82, 85, 88, 90, 93, 97, 99, 100, 101, 102, 104, 106, 107, 112, 115, 116, 117, 119, 123, 124, 125, 129, 133, 135, 137, 139, 140, 143, 145, 149, 150, 151, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 175, 177, 178, 180, 181, 182, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 200, 206, 207, 208, 209, 213, 214, 215, 217, 221, 222, 225, 226, 229, 236, 238, 239, 240, 241, 246, 248, 249, 251, 252, 257, 260, 261, 262, 266, 268, 271, 273, 275, 280, 283, 284, 286, 287, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 312, 314, 316, 317, 324, 327, 337, 339, 343, 354, 362, 366, 369, 370, 371, 372, 373, 374, 375, 385, 396, 398, 401, 403, 405, 407, 409, 411, 413, 420, 428, 433, 434, 435, 440, 442, 443, 446, 447, 448, 449, 451, 458, 460, 465, 467, 470, 480, 481, 482, 483], "compact": [2, 93, 181, 262], "img": [2, 4, 6, 10, 50, 62, 69, 70, 76, 78, 83, 89, 100, 104, 110, 135, 143, 155, 160, 170, 180, 296, 299, 300, 306, 307, 327, 337, 339, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 368, 369, 370, 371, 372, 373, 374, 375, 376, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 419, 421, 428, 429, 447, 449, 452, 453, 455, 456, 458, 465, 480], "display_mod": [2, 6, 9, 13, 14, 15, 18, 30, 31, 36, 39, 40, 42, 43, 48, 49, 53, 58, 62, 64, 65, 68, 69, 74, 75, 78, 86, 87, 91, 100, 101, 104, 105, 106, 116, 133, 150, 155, 324, 337, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 420, 422, 425, 427, 428, 431, 433, 434, 435, 459, 480], "z": [2, 13, 14, 15, 18, 24, 30, 33, 36, 40, 42, 43, 48, 52, 54, 58, 61, 62, 64, 65, 67, 68, 69, 74, 75, 78, 79, 80, 83, 86, 87, 93, 100, 101, 104, 105, 107, 114, 127, 135, 137, 141, 152, 155, 170, 172, 175, 178, 181, 182, 192, 246, 271, 301, 312, 319, 321, 323, 324, 337, 340, 344, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 385, 386, 388, 389, 393, 394, 395, 396, 397, 404, 405, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 425, 427, 428, 431, 433, 434, 435, 436, 437, 438, 439, 442, 445, 449, 450, 458, 459, 461, 466, 480], "cut_coord": [2, 6, 9, 15, 16, 17, 18, 20, 30, 31, 36, 39, 40, 42, 43, 48, 49, 50, 55, 61, 64, 65, 68, 69, 70, 74, 76, 78, 80, 85, 86, 87, 89, 91, 92, 93, 99, 101, 104, 105, 106, 123, 128, 155, 160, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 420, 425, 428, 433, 434, 435, 442, 459, 480], "1": [2, 3, 4, 5, 6, 9, 11, 12, 15, 18, 19, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 117, 123, 125, 126, 127, 128, 130, 134, 135, 137, 140, 142, 143, 150, 152, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 172, 175, 177, 178, 180, 182, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 309, 311, 312, 314, 315, 316, 317, 319, 324, 327, 331, 333, 337, 339, 341, 342, 346, 349, 351, 354, 357, 359, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 421, 422, 423, 427, 429, 431, 432, 433, 434, 436, 438, 439, 442, 443, 445, 446, 447, 448, 449, 454, 456, 458, 461, 462, 465, 466, 467, 480, 481, 482], "colorbar": [2, 6, 9, 14, 20, 21, 23, 25, 26, 36, 37, 40, 48, 50, 51, 54, 57, 58, 62, 67, 68, 74, 75, 76, 78, 79, 85, 86, 87, 93, 100, 102, 104, 107, 121, 123, 126, 127, 132, 135, 140, 141, 143, 147, 148, 149, 150, 151, 155, 160, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 438, 439, 441, 442, 443, 445, 480], "fals": [2, 6, 9, 14, 15, 17, 18, 20, 21, 22, 33, 34, 36, 37, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 62, 68, 71, 74, 75, 76, 78, 79, 80, 85, 86, 87, 88, 90, 91, 93, 98, 99, 100, 101, 102, 104, 105, 107, 110, 117, 125, 143, 146, 147, 148, 150, 152, 155, 160, 167, 171, 172, 175, 182, 228, 229, 230, 232, 234, 236, 242, 243, 244, 245, 254, 255, 256, 257, 260, 266, 269, 271, 273, 275, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 319, 321, 324, 327, 337, 339, 340, 341, 342, 343, 346, 355, 357, 358, 361, 362, 365, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 420, 422, 423, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 458, 459, 460, 461, 466, 467, 480], "slice": [2, 3, 6, 9, 16, 36, 88, 93, 104, 116, 124, 139, 146, 148, 155, 167, 180, 182, 191, 192, 223, 324, 327, 337, 349, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 428, 459, 483], "constructor": [2, 117, 316, 317, 349], "desir": [2, 62, 178, 182, 299, 300, 323, 324, 326, 331, 337, 340, 362, 414, 415, 447], "afterward": [2, 169, 178], "ll": [2, 6, 49, 58, 297, 298], "follow": [2, 4, 9, 14, 18, 21, 22, 29, 32, 34, 35, 36, 40, 41, 42, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 64, 65, 68, 71, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 110, 112, 116, 117, 137, 140, 141, 142, 143, 144, 145, 149, 155, 156, 157, 160, 161, 167, 170, 171, 172, 175, 177, 178, 180, 192, 200, 211, 275, 280, 282, 342, 348, 362, 364, 365, 366, 370, 373, 375, 377, 378, 379, 381, 382, 443, 449, 461, 462, 480, 481], "same": [2, 3, 6, 14, 15, 21, 23, 34, 37, 40, 41, 47, 49, 50, 55, 58, 63, 65, 67, 68, 69, 70, 83, 85, 87, 93, 97, 99, 100, 101, 107, 117, 125, 128, 135, 140, 146, 147, 148, 149, 150, 155, 156, 157, 160, 161, 162, 163, 167, 169, 170, 172, 174, 175, 178, 180, 181, 182, 200, 224, 228, 229, 230, 232, 244, 245, 253, 254, 256, 261, 262, 280, 292, 293, 294, 295, 297, 298, 299, 300, 324, 327, 337, 339, 342, 344, 353, 355, 357, 362, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 381, 383, 385, 391, 392, 393, 394, 395, 404, 405, 408, 409, 410, 411, 416, 420, 422, 425, 427, 428, 432, 433, 434, 435, 443, 446, 447, 450, 455, 456, 458, 459, 461], "formula": [2, 131, 155, 169, 337, 339, 353, 423], "befor": [2, 15, 49, 55, 56, 70, 88, 93, 97, 102, 116, 123, 125, 127, 140, 143, 146, 148, 150, 152, 155, 159, 160, 162, 163, 165, 170, 171, 172, 174, 177, 178, 180, 181, 182, 188, 232, 271, 273, 299, 300, 324, 326, 331, 342, 346, 348, 365, 366, 369, 370, 372, 373, 375, 421, 436, 438, 439, 443, 445, 447, 452, 453, 461, 462, 480], "selected_volum": 2, "5": [2, 3, 4, 6, 7, 12, 18, 20, 22, 23, 24, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 62, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 78, 80, 87, 88, 90, 93, 94, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 114, 123, 126, 130, 137, 143, 148, 149, 150, 151, 156, 160, 162, 167, 168, 169, 172, 181, 182, 188, 191, 192, 196, 200, 208, 211, 213, 218, 225, 239, 241, 244, 245, 247, 248, 251, 256, 257, 260, 261, 262, 266, 268, 270, 283, 286, 297, 298, 314, 316, 317, 342, 348, 349, 352, 365, 366, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 433, 434, 436, 438, 439, 441, 443, 444, 445, 460, 461, 462, 465, 466, 467, 480, 482], "re": [2, 6, 21, 23, 40, 64, 65, 67, 69, 83, 117, 149, 155, 170, 271, 283, 284, 285, 286, 287, 288, 314, 316, 317, 327, 450], "thing": [2, 3, 56, 65, 124, 155, 159, 168, 169, 170, 178, 182, 314, 342, 461, 480], "base": [2, 8, 20, 27, 28, 29, 34, 44, 45, 47, 48, 49, 51, 54, 55, 60, 61, 65, 69, 72, 73, 80, 81, 87, 88, 90, 91, 96, 97, 98, 104, 108, 112, 114, 117, 123, 125, 126, 131, 135, 143, 146, 148, 151, 155, 156, 157, 158, 159, 161, 162, 165, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 182, 184, 190, 192, 194, 196, 197, 198, 206, 213, 214, 215, 229, 232, 236, 237, 242, 248, 250, 257, 259, 260, 261, 262, 263, 266, 267, 268, 271, 273, 275, 278, 279, 280, 281, 292, 293, 294, 295, 296, 298, 299, 300, 312, 320, 324, 327, 331, 333, 337, 339, 340, 341, 342, 343, 347, 349, 353, 358, 361, 364, 365, 366, 368, 374, 375, 379, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 424, 433, 434, 435, 438, 439, 440, 442, 446, 447, 449, 450, 451, 457, 459, 461, 462, 463, 464, 465, 466, 467, 480, 481, 482, 483], "confirm": [2, 29, 125, 155, 170], "match": [2, 6, 15, 117, 124, 125, 126, 127, 143, 147, 148, 150, 155, 161, 167, 170, 175, 179, 182, 222, 238, 249, 271, 291, 292, 293, 294, 295, 297, 298, 299, 300, 324, 327, 337, 339, 343, 352, 354, 357, 362, 364, 365, 369, 370, 372, 373, 377, 379, 380, 382, 433, 447, 450, 483], "previou": [2, 9, 14, 41, 49, 54, 58, 62, 65, 76, 93, 149, 150, 155, 156, 159, 163, 165, 169, 172, 232, 292, 293, 294, 295, 299, 300, 371, 374, 447, 467], "abov": [2, 3, 4, 14, 21, 33, 42, 48, 49, 56, 65, 67, 85, 93, 99, 117, 126, 135, 155, 156, 157, 159, 161, 162, 167, 169, 170, 171, 175, 178, 180, 181, 182, 207, 222, 238, 260, 262, 283, 284, 287, 292, 293, 294, 295, 297, 298, 311, 312, 314, 315, 316, 317, 320, 357, 358, 365, 369, 370, 371, 372, 373, 374, 375, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 433, 441, 443, 445, 447, 449, 460, 461], "show": [2, 4, 6, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 116, 126, 135, 141, 146, 148, 150, 155, 156, 157, 160, 162, 163, 165, 167, 170, 172, 174, 181, 182, 207, 224, 260, 272, 289, 311, 324, 337, 396, 398, 399, 401, 403, 405, 407, 409, 411, 413, 437, 441, 444, 449, 459, 467, 480, 482], "forc": [2, 93, 110, 130, 155, 169, 182, 192, 240, 249, 271, 272, 273, 274], "figur": [2, 4, 9, 12, 14, 15, 18, 22, 23, 24, 25, 30, 31, 32, 34, 35, 36, 40, 41, 42, 43, 44, 48, 49, 51, 52, 56, 57, 61, 62, 64, 65, 66, 68, 74, 78, 83, 90, 93, 98, 99, 100, 104, 105, 107, 110, 125, 137, 146, 147, 150, 151, 152, 155, 170, 171, 172, 181, 364, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 480], "when": [2, 3, 4, 8, 9, 16, 24, 27, 54, 58, 65, 66, 67, 74, 88, 90, 91, 93, 99, 101, 104, 105, 112, 116, 117, 123, 124, 125, 126, 127, 128, 130, 134, 135, 136, 138, 141, 143, 146, 147, 150, 151, 152, 155, 156, 157, 159, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 174, 175, 178, 181, 194, 195, 228, 236, 238, 241, 247, 248, 264, 266, 271, 273, 292, 293, 294, 295, 296, 297, 298, 312, 313, 317, 318, 321, 324, 337, 339, 357, 359, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 385, 386, 388, 389, 417, 427, 428, 433, 434, 435, 436, 438, 439, 440, 442, 443, 445, 447, 452, 459, 460, 461, 465, 467, 480, 482], "outsid": [2, 4, 16, 65, 126, 152, 155, 170, 177, 182, 357, 358, 372, 436, 438, 439, 445, 452, 453, 458, 465], "ipython": [2, 4, 16, 162, 177, 481], "recap": [2, 4], "call": [2, 4, 6, 14, 15, 16, 33, 48, 49, 50, 52, 53, 56, 58, 65, 67, 71, 75, 80, 86, 88, 90, 93, 97, 103, 116, 117, 126, 143, 155, 156, 157, 159, 160, 162, 163, 167, 169, 170, 171, 172, 174, 175, 178, 180, 182, 186, 192, 228, 230, 232, 240, 252, 271, 273, 276, 298, 300, 313, 318, 324, 327, 337, 342, 352, 369, 370, 371, 372, 373, 374, 375, 381, 421, 422, 431, 447, 461, 480], "differ": [2, 6, 9, 15, 19, 20, 21, 22, 23, 28, 29, 45, 46, 51, 52, 54, 55, 58, 59, 63, 65, 66, 67, 68, 69, 70, 71, 74, 78, 79, 80, 88, 90, 93, 97, 98, 99, 101, 102, 112, 114, 116, 123, 125, 126, 141, 147, 149, 155, 157, 158, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 175, 179, 180, 188, 192, 198, 200, 207, 220, 228, 230, 243, 252, 257, 260, 283, 284, 285, 286, 287, 288, 292, 294, 295, 297, 298, 316, 317, 320, 324, 326, 327, 331, 333, 337, 343, 347, 349, 353, 354, 362, 365, 368, 369, 370, 372, 373, 374, 384, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 420, 422, 425, 427, 428, 432, 433, 434, 435, 440, 447, 449, 458, 459, 465, 467, 482, 483], "flavor": [2, 192], "onli": [2, 3, 6, 13, 14, 19, 29, 31, 32, 33, 34, 36, 37, 40, 42, 43, 49, 51, 52, 54, 55, 58, 65, 67, 74, 78, 80, 83, 85, 90, 93, 97, 98, 99, 100, 102, 103, 107, 116, 117, 124, 127, 133, 138, 143, 148, 150, 151, 155, 156, 157, 159, 160, 162, 163, 164, 165, 167, 169, 170, 172, 174, 175, 178, 179, 180, 181, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 480, 483], "multipl": [2, 6, 19, 42, 47, 76, 78, 80, 100, 114, 124, 146, 147, 155, 158, 163, 165, 167, 170, 173, 175, 179, 180, 181, 188, 192, 209, 213, 240, 241, 249, 291, 314, 332, 337, 339, 349, 352, 353, 369, 370, 371, 385, 396, 398, 401, 415, 420, 425, 428, 430, 433, 434, 435, 442, 467, 480, 483], "detail": [2, 3, 8, 9, 12, 14, 15, 16, 19, 22, 23, 26, 28, 29, 31, 33, 39, 46, 48, 50, 52, 54, 58, 60, 62, 69, 70, 71, 73, 80, 82, 90, 94, 99, 100, 101, 102, 106, 112, 116, 117, 119, 135, 140, 143, 152, 155, 156, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 173, 178, 179, 180, 182, 184, 188, 200, 206, 209, 224, 228, 236, 240, 244, 245, 248, 257, 262, 266, 268, 283, 284, 285, 286, 287, 288, 292, 293, 294, 295, 299, 300, 317, 324, 327, 337, 342, 346, 354, 359, 360, 366, 368, 369, 370, 371, 372, 373, 374, 375, 385, 443, 446, 447, 449, 451, 466, 467, 472, 473, 480, 481], "input": [2, 3, 4, 6, 9, 14, 15, 23, 32, 49, 54, 55, 57, 66, 69, 70, 75, 76, 78, 79, 84, 87, 88, 91, 93, 97, 107, 116, 124, 125, 126, 129, 130, 133, 134, 135, 136, 138, 139, 140, 143, 147, 149, 150, 151, 152, 155, 159, 162, 165, 167, 169, 170, 171, 175, 179, 181, 182, 188, 211, 224, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 249, 267, 268, 292, 293, 294, 295, 296, 297, 298, 299, 300, 319, 321, 323, 324, 326, 331, 332, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 420, 421, 427, 428, 430, 433, 434, 435, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 465, 467, 480, 483], "format": [2, 49, 99, 116, 124, 125, 147, 150, 152, 155, 170, 171, 182, 192, 196, 198, 228, 236, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 425, 427, 428, 430, 434, 435, 436, 437, 438, 439, 444, 445, 446, 447, 448, 449, 463, 464, 465, 471], "given": [2, 3, 9, 14, 16, 44, 47, 50, 53, 54, 58, 64, 65, 67, 69, 70, 78, 83, 85, 93, 94, 99, 103, 124, 132, 134, 138, 143, 152, 155, 156, 159, 162, 163, 165, 167, 168, 169, 170, 172, 175, 177, 178, 182, 188, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 244, 245, 265, 266, 268, 269, 275, 281, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 311, 312, 314, 315, 316, 317, 320, 321, 324, 327, 331, 337, 338, 339, 341, 343, 348, 351, 354, 357, 359, 361, 362, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 420, 421, 422, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 459, 460, 462, 467], "section": [2, 3, 4, 14, 39, 47, 48, 49, 54, 56, 68, 90, 93, 97, 99, 114, 115, 116, 124, 135, 140, 150, 155, 156, 157, 159, 160, 162, 163, 165, 167, 170, 172, 174, 178, 179, 182, 184, 217, 271, 275, 369, 370, 372, 373, 386, 416, 420, 422, 425, 427, 428, 431, 433, 434, 435, 446, 457, 467, 472, 473, 480], "name": [2, 3, 4, 6, 14, 21, 22, 23, 26, 30, 32, 44, 51, 58, 62, 64, 71, 74, 75, 76, 78, 79, 90, 93, 99, 100, 102, 107, 116, 123, 125, 132, 141, 143, 148, 150, 152, 155, 159, 163, 167, 170, 171, 175, 177, 178, 179, 182, 188, 189, 191, 198, 199, 218, 221, 228, 229, 230, 238, 239, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 254, 256, 266, 271, 273, 276, 277, 278, 279, 280, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 322, 324, 325, 326, 327, 331, 337, 339, 342, 353, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 446, 447, 448, 449, 450, 452, 459, 461, 467, 483], "accept": [2, 3, 47, 64, 123, 124, 134, 135, 137, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 155, 170, 171, 180, 188, 337, 339, 340, 362, 376, 377, 378, 379, 380, 381, 382, 420, 430, 432, 433, 434, 435, 442, 444, 455, 456], "either": [2, 4, 9, 32, 35, 36, 39, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 116, 140, 147, 149, 155, 157, 159, 170, 171, 174, 175, 180, 182, 192, 247, 248, 249, 252, 260, 292, 293, 294, 295, 314, 316, 317, 324, 337, 340, 341, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 420, 421, 422, 425, 426, 427, 430, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 445, 449, 459, 463, 464, 465, 480, 481], "hand": [2, 65, 67, 93, 169, 170, 180, 182, 281], "break": [2, 82, 95, 112, 135, 155, 159, 167, 170, 227, 252, 434, 440, 450, 482], "down": [2, 68, 102, 159, 169, 170, 294], "other": [2, 4, 14, 23, 24, 31, 36, 39, 40, 48, 56, 65, 67, 68, 70, 93, 97, 99, 102, 103, 114, 115, 116, 124, 140, 143, 147, 155, 156, 157, 162, 163, 164, 166, 167, 169, 170, 171, 175, 178, 180, 182, 200, 206, 223, 228, 229, 230, 257, 271, 277, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 314, 316, 317, 324, 326, 331, 337, 339, 362, 363, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 381, 385, 428, 440, 446, 447, 448, 449, 480, 483], "concat_img": [2, 6, 11, 68, 69, 99, 134, 155, 181, 349], "group": [2, 3, 6, 29, 30, 32, 33, 46, 57, 58, 59, 62, 73, 75, 76, 77, 78, 79, 96, 97, 100, 103, 104, 108, 112, 114, 137, 143, 155, 157, 158, 161, 162, 167, 172, 174, 175, 176, 177, 188, 192, 195, 197, 217, 223, 228, 229, 230, 240, 241, 246, 254, 256, 257, 268, 274, 292, 293, 294, 295, 296, 299, 300, 350, 362, 365, 368, 373, 385, 418, 421, 422, 432, 433, 435, 440, 454, 482, 483], "total": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 158, 160, 162, 168, 188, 206, 247, 257, 298, 306, 307, 379, 380, 382, 433, 450, 467, 482, 483], "script": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 149, 155, 164, 170, 180, 181, 182, 195, 480, 481], "minut": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 172, 211, 222, 223, 266], "18": [2, 6, 7, 12, 27, 33, 55, 58, 62, 71, 90, 102, 106, 114, 119, 133, 140, 150, 155, 182, 188, 192, 197, 206, 214, 257, 268, 296, 436, 438, 439, 466, 467, 480, 482], "082": [2, 7, 41, 114, 192, 240, 482], "second": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 114, 125, 155, 159, 160, 168, 169, 170, 172, 173, 175, 182, 223, 263, 265, 266, 280, 292, 293, 294, 295, 297, 298, 312, 319, 320, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 342, 347, 353, 361, 364, 369, 370, 371, 372, 373, 374, 375, 385, 397, 398, 412, 421, 424, 427, 429, 435, 436, 437, 438, 439, 440, 445, 447, 449, 458, 459, 460, 461, 465, 477, 482, 483], "estim": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 63, 64, 66, 68, 69, 70, 71, 74, 77, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 101, 102, 103, 104, 105, 106, 107, 110, 112, 114, 116, 123, 125, 126, 138, 146, 147, 152, 155, 156, 161, 164, 166, 167, 170, 172, 174, 175, 177, 178, 188, 192, 220, 226, 228, 229, 230, 232, 248, 252, 268, 275, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 311, 312, 314, 315, 316, 317, 320, 321, 324, 337, 339, 343, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 381, 382, 385, 432, 440, 446, 447, 448, 449, 474, 482, 483], "usag": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 134, 143, 147, 152, 155, 156, 170, 171, 174, 177, 178, 179, 187, 190, 194, 197, 198, 214, 217, 268, 275, 280, 443, 470, 483], "213": [2, 33, 41, 466, 467], "mb": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 482], "jupyt": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 141, 143, 155, 162, 177, 182, 324, 337, 441, 442, 443, 444, 445, 457, 459, 480], "notebook": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 128, 140, 143, 155, 162, 177, 182, 324, 337, 366, 441, 442, 443, 444, 445, 457, 459, 480], "plot_3d_and_4d_niimg": [2, 7, 482], "ipynb": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110], "sourc": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 156, 157, 161, 169, 170, 178, 218, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 481], "py": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 124, 125, 143, 148, 149, 150, 152, 155, 170, 178, 182, 482], "galleri": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 125, 128, 130, 134, 135, 137, 155, 170, 480, 482], "sphinx": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 128, 130, 134, 135, 137, 155, 170], "simpl": [3, 5, 25, 29, 31, 35, 37, 40, 47, 56, 60, 64, 69, 72, 74, 75, 76, 78, 79, 82, 83, 86, 88, 90, 93, 95, 97, 99, 100, 112, 114, 116, 117, 133, 135, 140, 150, 155, 156, 157, 163, 165, 166, 169, 170, 171, 174, 175, 177, 181, 182, 207, 224, 228, 229, 230, 257, 259, 266, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 312, 315, 321, 324, 337, 349, 354, 366, 368, 369, 370, 371, 372, 373, 374, 375, 421, 434, 435, 440, 446, 447, 448, 449, 457, 466, 467, 482, 483], "reproduc": [3, 32, 40, 41, 48, 51, 71, 97, 99, 114, 176, 194, 266, 294, 295], "et": [3, 22, 23, 28, 31, 37, 44, 45, 48, 49, 51, 56, 58, 65, 69, 70, 71, 75, 97, 98, 99, 101, 112, 135, 140, 155, 156, 159, 162, 163, 164, 167, 168, 169, 177, 182, 187, 188, 189, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 228, 229, 232, 236, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 260, 261, 266, 268, 269, 270, 271, 273, 275, 280, 281, 286, 292, 295, 298, 299, 300, 316, 317, 319, 342, 344, 349, 361, 365, 366, 368, 371, 374, 385, 413, 435, 440, 448, 449, 454, 461, 467, 482], "al": [3, 22, 23, 28, 31, 37, 44, 45, 48, 49, 51, 56, 58, 65, 69, 70, 71, 75, 97, 98, 99, 101, 112, 135, 140, 155, 156, 159, 162, 163, 164, 167, 168, 169, 177, 182, 187, 188, 189, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 228, 229, 232, 236, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 260, 261, 266, 268, 269, 270, 271, 273, 275, 280, 281, 286, 292, 295, 298, 299, 300, 316, 317, 319, 342, 344, 349, 361, 365, 366, 368, 371, 374, 385, 413, 435, 440, 448, 449, 454, 461, 467, 482], "v": [3, 6, 24, 28, 32, 33, 35, 38, 45, 51, 64, 65, 75, 78, 79, 88, 96, 97, 108, 112, 114, 124, 126, 155, 162, 163, 167, 169, 170, 176, 178, 189, 190, 200, 206, 207, 208, 215, 221, 225, 251, 256, 260, 261, 264, 266, 271, 273, 274, 286, 292, 294, 296, 298, 347, 349, 352, 354, 355, 365, 368, 374, 385, 413, 428, 432, 435, 440, 442, 462, 482], "discrimin": [3, 29, 31, 51, 93, 98, 114, 116, 162, 176, 177], "mask": [3, 8, 15, 20, 23, 27, 29, 30, 31, 33, 34, 35, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 58, 68, 70, 74, 76, 78, 82, 90, 91, 95, 101, 103, 104, 105, 110, 112, 115, 117, 123, 124, 126, 133, 134, 135, 137, 140, 143, 146, 148, 149, 150, 155, 159, 163, 166, 168, 176, 177, 179, 180, 192, 194, 200, 207, 208, 213, 229, 236, 257, 259, 260, 261, 262, 266, 270, 271, 283, 284, 287, 292, 293, 294, 295, 297, 298, 299, 300, 319, 321, 324, 337, 339, 340, 341, 342, 347, 348, 349, 352, 354, 355, 359, 361, 365, 368, 369, 370, 371, 372, 373, 374, 375, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 425, 427, 429, 430, 434, 435, 440, 447, 448, 449, 451, 452, 453, 454, 457, 459, 461, 465, 466, 467, 472, 480, 482, 483], "ventral": [3, 16, 22, 31, 32, 33, 38, 93, 97, 114, 116, 162, 176, 182, 207, 260, 436, 438, 439], "stream": [3, 32, 116, 176, 182, 207], "meant": [3, 6, 103, 110, 235, 312, 457], "variou": [3, 20, 30, 31, 39, 48, 104, 105, 143, 146, 150, 155, 162, 164, 165, 170, 172, 175, 181, 240, 294, 295, 366, 447, 465], "step": [3, 11, 20, 33, 35, 37, 42, 44, 47, 49, 50, 55, 58, 61, 62, 64, 65, 67, 70, 78, 79, 88, 93, 97, 100, 107, 116, 123, 138, 146, 152, 155, 156, 159, 160, 161, 162, 164, 165, 167, 169, 170, 175, 178, 179, 180, 181, 190, 197, 230, 237, 262, 275, 284, 287, 294, 295, 299, 300, 324, 327, 339, 366, 368, 371, 374, 377, 378, 379, 381, 382, 447, 461, 483], "minimalist": 3, "strive": 3, "didact": [3, 133, 155, 163, 165, 170], "copi": [3, 20, 33, 36, 40, 53, 87, 99, 110, 112, 116, 127, 143, 155, 169, 170, 180, 188, 275, 276, 299, 300, 345, 346, 347, 353, 357, 358, 361, 368, 371, 374, 460], "analyz": [3, 33, 49, 60, 73, 93, 112, 161, 170, 172, 175, 177, 179, 209, 385, 483], "mani": [3, 4, 10, 11, 15, 23, 36, 38, 39, 41, 42, 43, 48, 49, 51, 56, 69, 78, 85, 93, 97, 98, 99, 105, 117, 148, 155, 158, 159, 160, 162, 163, 164, 165, 168, 169, 170, 172, 175, 178, 181, 182, 230, 271, 273, 292, 293, 294, 295, 296, 339, 346, 375, 385, 430, 455, 456, 465, 480], "unnecessari": [3, 125, 155, 317], "fetch_haxbi": [3, 4, 15, 16, 18, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 93, 97, 101, 116, 134, 155, 162, 170, 180, 207], "directori": [3, 6, 62, 70, 93, 100, 107, 112, 159, 170, 180, 229, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 291, 292, 293, 294, 295, 297, 298, 299, 300, 324, 327, 337, 343, 362, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 429, 447, 448, 449], "while": [3, 4, 6, 48, 55, 56, 65, 83, 93, 97, 99, 100, 102, 107, 116, 123, 125, 128, 138, 140, 155, 161, 162, 167, 169, 170, 171, 177, 181, 182, 192, 240, 292, 293, 294, 295, 331, 385], "310": [3, 33, 41, 467], "mo": 3, "internet": [3, 49, 161, 179, 184, 483], "By": [3, 14, 15, 25, 29, 33, 35, 58, 68, 69, 147, 155, 163, 170, 178, 182, 218, 229, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 275, 276, 277, 278, 279, 280, 281, 282, 292, 293, 294, 295, 297, 298, 299, 300, 324, 337, 343, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 420, 425, 428, 429, 431, 433, 434, 435, 442, 447, 448, 449, 452, 480], "default": [3, 8, 9, 14, 15, 23, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 42, 55, 56, 60, 62, 65, 72, 78, 82, 88, 93, 95, 101, 102, 110, 112, 117, 123, 124, 125, 126, 128, 130, 133, 134, 139, 140, 141, 143, 146, 147, 148, 149, 150, 152, 155, 162, 163, 167, 169, 170, 171, 178, 180, 181, 182, 228, 229, 230, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 307, 311, 312, 314, 315, 316, 317, 319, 320, 321, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 348, 349, 352, 353, 354, 355, 356, 357, 358, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 465, 466, 467, 480, 482], "2nd": [3, 25, 29, 30, 32, 33, 34, 35, 36, 37, 260], "fetch": [3, 4, 9, 14, 19, 24, 29, 30, 32, 34, 35, 36, 37, 41, 58, 69, 84, 85, 86, 87, 90, 93, 102, 117, 124, 126, 134, 135, 137, 139, 143, 155, 158, 161, 170, 179, 188, 236, 243, 249, 257, 258, 261, 264, 265, 266, 269, 271, 272, 273, 274, 275, 278, 280, 483], "haxby_dataset": [3, 15, 16, 18, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 93, 97, 101, 116, 162, 180, 182], "func": [3, 6, 11, 15, 16, 18, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 64, 65, 68, 70, 84, 88, 90, 91, 93, 94, 97, 98, 99, 100, 101, 103, 107, 116, 126, 148, 155, 160, 170, 171, 180, 182, 190, 194, 197, 207, 213, 223, 237, 257, 260, 263, 270, 278, 362, 365, 366], "one": [3, 4, 6, 9, 14, 15, 16, 20, 24, 29, 30, 31, 33, 35, 36, 40, 44, 47, 48, 49, 55, 56, 57, 58, 65, 67, 68, 69, 70, 71, 73, 76, 77, 79, 80, 81, 85, 90, 91, 93, 99, 100, 102, 104, 107, 112, 116, 117, 123, 124, 126, 132, 134, 137, 146, 148, 149, 150, 155, 156, 157, 160, 161, 162, 163, 167, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 182, 192, 210, 228, 230, 236, 240, 241, 247, 248, 249, 256, 262, 266, 269, 280, 292, 293, 294, 295, 297, 299, 300, 306, 312, 324, 326, 327, 331, 333, 337, 338, 339, 342, 343, 344, 346, 347, 349, 353, 357, 362, 364, 369, 372, 374, 384, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 422, 423, 427, 430, 431, 432, 433, 437, 438, 440, 442, 443, 447, 451, 452, 458, 461, 465, 481, 482, 483], "each": [3, 6, 14, 15, 20, 21, 22, 24, 29, 34, 36, 37, 39, 40, 47, 48, 49, 50, 51, 55, 56, 58, 61, 62, 68, 69, 70, 77, 79, 85, 87, 93, 97, 98, 99, 100, 101, 104, 107, 117, 135, 140, 141, 143, 146, 148, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 175, 177, 178, 180, 181, 182, 188, 189, 192, 194, 197, 198, 206, 209, 212, 215, 220, 221, 223, 228, 229, 230, 232, 236, 239, 250, 256, 257, 268, 271, 273, 281, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 306, 307, 314, 316, 317, 324, 326, 327, 331, 337, 339, 342, 348, 354, 359, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 380, 382, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 420, 422, 425, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 446, 447, 448, 449, 450, 451, 452, 453, 455, 459, 461, 462, 464, 465, 480], "fmri_filenam": [3, 36, 37, 56, 93, 97, 116], "basic": [3, 7, 8, 11, 15, 16, 18, 25, 27, 29, 30, 32, 34, 35, 36, 41, 42, 48, 49, 52, 53, 56, 58, 67, 69, 74, 76, 84, 88, 90, 91, 93, 94, 97, 99, 101, 103, 104, 105, 169, 171, 172, 175, 177, 178, 182, 244, 245, 260, 282, 327, 337, 339, 359, 365, 366, 423, 428, 434, 440, 482], "inform": [3, 6, 9, 11, 16, 18, 21, 23, 25, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 48, 49, 51, 52, 53, 54, 58, 61, 62, 65, 66, 71, 74, 76, 77, 84, 88, 90, 91, 93, 94, 99, 100, 101, 103, 104, 107, 114, 116, 117, 121, 124, 127, 137, 141, 151, 155, 156, 157, 160, 161, 162, 164, 166, 169, 170, 171, 174, 175, 177, 178, 180, 182, 187, 188, 189, 190, 191, 194, 195, 197, 198, 207, 208, 212, 213, 214, 215, 217, 221, 222, 225, 226, 228, 229, 230, 236, 238, 239, 240, 241, 246, 248, 249, 251, 252, 260, 261, 268, 269, 270, 271, 273, 275, 283, 284, 286, 287, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 317, 324, 337, 339, 351, 353, 357, 363, 364, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449, 459, 460, 461, 467, 470, 481, 483], "haxby2001": [3, 4, 16, 18, 25, 29, 30, 32, 34, 35, 36, 93, 101, 116, 180, 207, 260], "subj2": [3, 16, 18, 25, 29, 30, 32, 34, 35, 36, 93, 101, 116], "bold": [3, 6, 16, 18, 25, 29, 30, 32, 34, 35, 36, 48, 64, 65, 75, 78, 93, 99, 100, 101, 107, 114, 116, 117, 125, 126, 143, 147, 155, 161, 162, 171, 173, 175, 180, 198, 207, 213, 223, 243, 260, 270, 327, 362, 365, 366, 462, 483], "One": [3, 6, 14, 34, 35, 48, 49, 56, 69, 70, 78, 148, 155, 156, 157, 162, 163, 167, 169, 171, 172, 174, 178, 180, 182, 324, 357, 366, 370, 371, 373, 452], "wai": [3, 6, 61, 62, 65, 70, 74, 75, 83, 97, 107, 114, 116, 117, 147, 148, 150, 155, 156, 158, 161, 162, 163, 165, 168, 169, 170, 171, 172, 175, 180, 182, 273, 294, 295, 314, 316, 317, 362, 421, 446, 480, 481], "plot_epi": [3, 25, 49, 88, 93, 94, 147, 150, 155, 428, 435, 480], "previous": [3, 23, 97, 116, 143, 146, 150, 152, 155, 162, 172, 187, 221], "becaus": [3, 6, 11, 15, 18, 30, 31, 32, 36, 39, 42, 43, 44, 54, 65, 68, 69, 78, 83, 100, 101, 123, 143, 155, 157, 162, 167, 169, 170, 172, 178, 271, 297, 298, 430, 436, 438, 439, 443, 445, 465], "thei": [3, 6, 24, 39, 42, 44, 49, 58, 64, 65, 67, 69, 93, 97, 107, 116, 117, 124, 127, 150, 152, 155, 161, 164, 165, 167, 169, 170, 172, 175, 177, 178, 180, 182, 188, 192, 199, 210, 227, 252, 260, 271, 276, 324, 327, 337, 339, 343, 357, 375, 423, 450, 461, 467, 480], "consist": [3, 6, 34, 40, 44, 65, 67, 107, 116, 124, 125, 133, 139, 140, 141, 150, 155, 162, 163, 166, 167, 169, 170, 172, 175, 187, 192, 197, 223, 230, 240, 268, 298, 327, 369, 372, 446, 448, 451], "epi": [3, 6, 11, 15, 25, 30, 31, 91, 93, 94, 103, 175, 177, 181, 182, 223, 292, 293, 294, 295, 299, 300, 371, 374, 379, 425, 428, 435, 447, 467, 480], "cannot": [3, 9, 10, 11, 36, 48, 49, 51, 56, 78, 85, 91, 93, 101, 117, 140, 152, 155, 156, 162, 165, 170, 182, 230, 442, 443, 445], "directli": [3, 6, 32, 33, 47, 48, 51, 70, 85, 88, 107, 132, 136, 138, 140, 155, 159, 162, 165, 170, 172, 180, 182, 271, 327, 385, 433], "just": [3, 4, 6, 14, 16, 21, 40, 42, 44, 49, 50, 51, 56, 58, 64, 65, 69, 70, 74, 75, 76, 78, 80, 86, 90, 97, 99, 100, 110, 116, 132, 155, 160, 162, 169, 172, 177, 178, 182, 324, 337, 342, 359, 362, 365, 433, 434, 435, 442, 459, 461, 465, 480], "mean_img": [3, 6, 15, 16, 18, 25, 30, 31, 33, 36, 49, 68, 69, 70, 84, 88, 91, 93, 94, 101, 103, 110, 181, 353], "view_img": [3, 29, 127, 140, 141, 149, 152, 155, 162, 480], "none": [3, 14, 15, 32, 33, 36, 40, 44, 49, 52, 53, 54, 56, 58, 62, 65, 66, 76, 78, 88, 90, 91, 93, 94, 99, 102, 106, 110, 117, 124, 130, 140, 143, 147, 152, 155, 170, 182, 228, 229, 230, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 307, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 326, 327, 331, 333, 337, 338, 339, 340, 341, 342, 343, 348, 352, 353, 354, 355, 356, 357, 359, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 465, 466, 467, 480], "opt": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 69, 70, 71, 76, 77, 78, 85, 91, 94, 97, 99, 100, 101, 103, 104, 105, 107, 110], "hostedtoolcach": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 69, 70, 71, 76, 77, 78, 85, 91, 94, 97, 99, 100, 101, 103, 104, 105, 107, 110], "12": [3, 4, 6, 9, 10, 11, 14, 16, 17, 18, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 44, 45, 47, 48, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 76, 77, 78, 79, 85, 90, 91, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 114, 118, 121, 123, 124, 128, 130, 146, 151, 152, 155, 168, 169, 181, 182, 189, 192, 197, 222, 238, 240, 247, 249, 257, 327, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 449, 466, 467, 482], "2": [3, 4, 6, 9, 10, 11, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 114, 117, 119, 121, 122, 123, 135, 137, 138, 140, 141, 148, 149, 150, 156, 157, 160, 161, 162, 163, 167, 168, 169, 170, 172, 177, 178, 181, 182, 188, 189, 191, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 208, 214, 215, 217, 218, 220, 222, 224, 225, 226, 228, 229, 230, 234, 235, 236, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 251, 252, 257, 258, 259, 260, 261, 262, 266, 268, 271, 273, 275, 277, 279, 280, 281, 283, 284, 286, 287, 292, 293, 294, 295, 296, 297, 298, 299, 300, 311, 314, 315, 316, 317, 324, 326, 327, 331, 333, 337, 339, 340, 342, 348, 349, 352, 353, 354, 355, 358, 359, 361, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 422, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 442, 448, 449, 451, 452, 453, 455, 458, 461, 462, 465, 466, 467, 480, 481, 482], "x64": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 69, 70, 71, 76, 77, 78, 85, 91, 94, 97, 99, 100, 101, 103, 104, 105, 107, 110], "lib": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 69, 70, 71, 76, 77, 78, 85, 91, 94, 97, 99, 100, 101, 103, 104, 105, 107, 110], "python3": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 69, 70, 71, 76, 77, 78, 85, 91, 94, 97, 99, 100, 101, 103, 104, 105, 107, 110, 141, 143, 155, 170, 481], "site": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 69, 70, 71, 76, 77, 78, 85, 91, 94, 97, 99, 100, 101, 103, 104, 105, 107, 110, 187, 190, 236, 237], "numpi": [3, 5, 6, 9, 10, 11, 12, 14, 16, 20, 22, 23, 24, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 74, 76, 78, 79, 83, 85, 86, 88, 93, 97, 99, 101, 102, 103, 104, 105, 107, 110, 121, 123, 125, 126, 127, 131, 135, 137, 140, 143, 146, 148, 150, 155, 159, 160, 162, 169, 170, 178, 180, 181, 228, 229, 230, 231, 232, 233, 234, 235, 236, 242, 243, 248, 250, 254, 255, 256, 257, 292, 293, 294, 295, 297, 298, 299, 300, 302, 306, 307, 314, 316, 317, 320, 324, 326, 331, 333, 337, 339, 342, 343, 344, 347, 348, 349, 353, 354, 355, 357, 359, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 382, 384, 385, 389, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 417, 418, 420, 422, 423, 425, 427, 429, 431, 432, 435, 436, 437, 438, 439, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 465], "core": [3, 16, 20, 29, 42, 43, 48, 50, 58, 169, 170, 178, 230, 481], "fromnumer": [3, 16, 29], "771": [3, 16, 29], "userwarn": [3, 9, 10, 11, 16, 18, 20, 21, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 61, 62, 69, 70, 71, 76, 77, 78, 83, 85, 90, 93, 94, 97, 99, 100, 102, 107, 110], "warn": [3, 16, 20, 29, 48, 50, 69, 102, 123, 124, 125, 126, 127, 140, 141, 143, 148, 150, 152, 155, 162, 170, 240, 241, 249, 321, 327, 331, 344, 368, 369, 370, 371, 372, 373, 374, 375, 440, 449], "partit": [3, 16, 29, 40, 221], "ignor": [3, 16, 21, 29, 48, 50, 69, 102, 141, 146, 155, 228, 229, 230, 271, 273, 277, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 331, 337, 339, 362, 365, 368, 369, 370, 371, 372, 373, 374, 375, 430, 446, 447, 448, 449, 465], "maskedarrai": [3, 16, 29], "kth": [3, 16], "axi": [3, 11, 12, 16, 22, 23, 25, 30, 31, 34, 38, 40, 41, 44, 47, 50, 58, 83, 84, 93, 102, 103, 106, 110, 125, 150, 152, 155, 160, 181, 192, 240, 292, 293, 294, 295, 297, 298, 324, 332, 357, 359, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 416, 420, 422, 423, 425, 427, 428, 431, 433, 434, 435], "kind": [3, 16, 47, 50, 54, 56, 58, 78, 110, 116, 136, 155, 156, 160, 163, 169, 175, 228, 465, 480], "These": [3, 4, 6, 15, 55, 58, 60, 71, 73, 76, 78, 80, 88, 93, 106, 109, 112, 116, 143, 146, 147, 150, 155, 162, 165, 166, 168, 169, 170, 174, 175, 178, 182, 188, 198, 208, 209, 223, 243, 254, 256, 290, 475, 480, 481], "realli": [3, 68, 141, 155, 162, 366], "love": 3, "learn": [3, 21, 34, 36, 44, 46, 52, 56, 57, 58, 59, 93, 96, 101, 103, 108, 112, 114, 115, 117, 121, 123, 126, 128, 133, 135, 136, 137, 138, 140, 143, 148, 150, 155, 156, 157, 158, 159, 162, 163, 164, 166, 167, 169, 170, 175, 176, 178, 183, 197, 214, 228, 229, 232, 246, 257, 260, 269, 292, 293, 294, 295, 296, 299, 300, 306, 307, 347, 349, 350, 354, 368, 369, 370, 371, 372, 373, 374, 375, 398, 405, 418, 419, 420, 422, 425, 432, 433, 434, 435, 440, 447, 449, 481, 482, 483], "matric": [3, 8, 27, 41, 47, 50, 51, 56, 60, 69, 70, 72, 79, 98, 112, 128, 133, 136, 137, 147, 148, 150, 155, 156, 157, 158, 169, 171, 179, 180, 181, 183, 184, 192, 198, 228, 229, 230, 232, 235, 268, 314, 316, 317, 324, 331, 357, 424, 432, 436, 438, 439, 440, 478, 482, 483], "actual": [3, 6, 42, 65, 66, 69, 76, 85, 104, 125, 155, 169, 170, 172, 175, 180, 230, 275, 324, 337, 340, 459], "fortun": [3, 66], "later": [3, 6, 9, 22, 23, 40, 62, 67, 69, 90, 99, 100, 102, 172, 180, 192, 242, 244, 245, 346, 417, 420, 425, 427, 428, 430, 434, 435, 436, 438, 439, 457, 480], "automat": [3, 15, 16, 19, 22, 23, 33, 34, 40, 54, 88, 91, 93, 114, 115, 121, 124, 133, 135, 147, 148, 149, 155, 160, 167, 170, 178, 180, 181, 182, 196, 236, 242, 250, 292, 293, 294, 295, 297, 298, 299, 300, 324, 337, 339, 357, 364, 370, 373, 385, 396, 416, 420, 425, 428, 433, 434, 435, 442, 447, 449, 451, 459, 467, 480, 483], "transform": [3, 23, 24, 40, 41, 48, 49, 50, 51, 53, 54, 65, 67, 69, 83, 90, 91, 93, 97, 98, 99, 102, 107, 110, 114, 116, 136, 137, 141, 143, 145, 146, 147, 148, 150, 152, 155, 159, 160, 165, 172, 175, 179, 180, 192, 206, 225, 228, 251, 269, 292, 293, 294, 295, 299, 300, 306, 307, 321, 324, 337, 340, 344, 355, 357, 365, 368, 369, 370, 371, 372, 373, 374, 375, 386, 446, 447, 448, 449, 461, 465, 467, 483], "all": [3, 4, 6, 8, 15, 19, 23, 27, 30, 32, 33, 35, 36, 39, 40, 41, 42, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 65, 67, 68, 69, 70, 71, 75, 76, 78, 79, 86, 88, 90, 91, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 112, 114, 116, 117, 123, 124, 125, 126, 128, 133, 140, 143, 146, 148, 150, 151, 155, 156, 157, 159, 160, 161, 163, 165, 167, 169, 170, 172, 174, 177, 178, 180, 181, 182, 187, 188, 190, 191, 192, 198, 200, 209, 215, 221, 227, 229, 230, 232, 236, 237, 239, 240, 241, 257, 265, 266, 269, 271, 274, 275, 276, 281, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 319, 324, 327, 333, 337, 338, 339, 342, 343, 348, 353, 354, 357, 358, 359, 362, 363, 364, 365, 366, 369, 370, 371, 373, 374, 375, 380, 381, 382, 383, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 420, 422, 425, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 445, 447, 449, 452, 459, 461, 465, 467, 478, 480, 481, 482], "defin": [3, 6, 9, 21, 23, 29, 30, 32, 33, 36, 37, 42, 47, 49, 54, 58, 61, 65, 67, 69, 70, 71, 75, 76, 79, 80, 90, 97, 100, 114, 123, 124, 147, 148, 149, 150, 155, 157, 159, 160, 161, 162, 167, 170, 171, 172, 174, 175, 178, 181, 182, 188, 189, 209, 213, 221, 236, 238, 242, 256, 268, 270, 292, 293, 294, 295, 297, 298, 311, 315, 319, 324, 326, 327, 331, 357, 365, 420, 421, 422, 425, 427, 428, 430, 431, 433, 434, 435, 449, 450, 451, 452, 453, 455, 456, 467, 474], "tempor": [3, 6, 16, 31, 32, 33, 38, 51, 55, 65, 66, 90, 93, 97, 100, 102, 114, 116, 140, 148, 155, 161, 162, 175, 179, 195, 207, 241, 260, 300, 324, 328, 329, 330, 331, 333, 334, 335, 336, 342, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 449, 461, 483], "vt": [3, 18, 93], "cortex": [3, 23, 31, 32, 33, 38, 55, 58, 61, 67, 69, 74, 78, 79, 90, 97, 114, 160, 162, 167, 171, 172, 188, 196, 199, 206, 207, 213, 220, 226, 242, 248, 252, 254, 260, 268, 270], "mask_filenam": [3, 30, 32, 35, 39, 97, 101, 116, 162], "mask_vt": [3, 15, 16, 18, 30, 32, 93, 97, 116, 162, 180, 207, 260], "anatom": [3, 4, 6, 9, 11, 15, 17, 18, 22, 23, 25, 30, 32, 36, 93, 101, 114, 117, 136, 155, 160, 167, 175, 182, 189, 192, 196, 198, 207, 208, 218, 221, 226, 236, 238, 240, 242, 250, 257, 260, 261, 264, 266, 271, 365, 420, 428, 433, 435, 442, 480], "background": [3, 6, 8, 14, 15, 16, 22, 23, 27, 30, 31, 40, 44, 49, 56, 67, 90, 91, 93, 103, 112, 116, 124, 127, 131, 133, 135, 136, 137, 138, 140, 143, 146, 152, 155, 170, 175, 181, 182, 192, 226, 238, 244, 245, 247, 248, 251, 252, 264, 270, 292, 293, 294, 295, 299, 300, 324, 337, 369, 371, 372, 374, 377, 380, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 420, 422, 425, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 447, 450, 452, 453, 459, 467, 480, 482, 483], "plot_roi": [3, 10, 17, 19, 25, 49, 65, 85, 88, 91, 93, 139, 146, 147, 152, 155, 157, 181, 182, 428, 433, 480], "bg_img": [3, 6, 16, 17, 29, 30, 33, 36, 40, 42, 68, 69, 70, 74, 87, 92, 116, 137, 143, 149, 155, 162, 182, 324, 337, 428, 433, 434, 435, 442, 459], "anat": [3, 4, 6, 15, 16, 17, 18, 25, 29, 30, 32, 42, 43, 93, 116, 162, 180, 182, 194, 207, 223, 224, 226, 252, 260, 264, 266, 278, 279, 362], "cmap": [3, 9, 11, 12, 14, 19, 20, 22, 23, 31, 35, 36, 38, 40, 41, 42, 44, 50, 53, 75, 76, 78, 79, 80, 85, 101, 104, 105, 110, 125, 141, 143, 152, 155, 160, 194, 264, 265, 266, 420, 421, 425, 426, 427, 430, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 445, 480], "pair": [3, 73, 81, 85, 97, 112, 117, 127, 155, 162, 163, 174, 266, 269, 271, 292, 293, 294, 295, 297, 298, 337, 363, 364, 365, 366, 397, 424, 427, 432, 436, 438, 439, 440, 448, 465, 482], "0x7fdc18b4fb60": 3, "convert": [3, 6, 10, 11, 20, 36, 42, 48, 49, 50, 65, 78, 85, 93, 97, 106, 107, 116, 143, 148, 150, 152, 155, 160, 162, 167, 175, 181, 322, 343, 344, 352, 369, 370, 371, 372, 373, 374, 375], "appli": [3, 29, 31, 32, 42, 44, 50, 56, 61, 65, 67, 78, 79, 88, 91, 93, 97, 99, 100, 102, 103, 115, 117, 123, 125, 126, 127, 131, 133, 137, 140, 143, 148, 149, 150, 155, 156, 157, 158, 161, 163, 164, 165, 167, 171, 174, 175, 179, 188, 192, 195, 206, 221, 228, 236, 271, 291, 292, 293, 294, 295, 299, 300, 315, 324, 337, 339, 340, 341, 342, 353, 359, 361, 362, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 384, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 420, 430, 433, 434, 435, 436, 438, 439, 442, 443, 445, 446, 447, 448, 449, 451, 452, 453, 458, 460, 461, 465, 467, 472, 483], "instanc": [3, 4, 6, 15, 31, 49, 51, 65, 66, 85, 137, 143, 150, 155, 156, 157, 159, 161, 162, 170, 171, 172, 174, 175, 177, 180, 181, 228, 229, 230, 235, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 311, 312, 314, 315, 316, 317, 320, 321, 324, 331, 333, 337, 339, 343, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 420, 422, 425, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 446, 447, 448, 449, 481], "csv": [3, 6, 29, 40, 47, 55, 116, 130, 155, 157, 162, 190, 198, 211, 214, 236, 237, 267, 275, 299, 300, 324, 342, 368, 369, 370, 371, 372, 373, 374, 375, 447, 449, 461], "file": [3, 6, 7, 9, 14, 22, 23, 27, 30, 32, 33, 34, 35, 36, 40, 45, 47, 48, 49, 51, 53, 55, 59, 60, 61, 62, 65, 70, 72, 74, 81, 85, 90, 91, 93, 95, 97, 99, 100, 107, 108, 111, 112, 113, 114, 116, 117, 125, 128, 130, 135, 139, 140, 141, 142, 143, 146, 150, 151, 152, 155, 156, 157, 159, 160, 162, 170, 171, 178, 179, 182, 189, 190, 191, 192, 197, 198, 200, 201, 202, 203, 204, 205, 207, 210, 211, 213, 214, 217, 218, 224, 226, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 290, 292, 293, 299, 300, 301, 302, 303, 324, 327, 337, 342, 352, 353, 355, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 447, 449, 457, 459, 461, 463, 464, 465, 466, 481, 482, 483], "separ": [3, 34, 48, 50, 65, 70, 82, 87, 93, 95, 99, 112, 133, 150, 152, 155, 160, 161, 163, 167, 170, 172, 175, 178, 180, 181, 188, 235, 252, 354, 365, 386, 388, 389, 416, 432, 434, 440, 449, 450, 451, 482], "space": [3, 6, 15, 22, 23, 28, 40, 45, 48, 51, 55, 60, 62, 65, 67, 72, 83, 98, 100, 107, 112, 116, 117, 124, 133, 135, 137, 140, 143, 148, 155, 157, 170, 171, 172, 174, 175, 182, 192, 196, 198, 199, 206, 209, 210, 219, 220, 221, 224, 226, 239, 241, 246, 248, 250, 252, 254, 255, 256, 271, 273, 275, 279, 281, 298, 299, 300, 324, 327, 331, 342, 343, 344, 354, 357, 368, 371, 374, 375, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 418, 420, 421, 422, 425, 427, 428, 431, 433, 434, 435, 440, 441, 442, 444, 446, 448, 461, 465, 482], "panda": [3, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 62, 63, 64, 65, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 93, 97, 99, 101, 116, 117, 123, 126, 137, 140, 146, 148, 150, 151, 155, 162, 228, 236, 242, 243, 254, 255, 256, 264, 265, 266, 275, 299, 300, 307, 324, 325, 327, 331, 337, 338, 339, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 423, 424, 426, 446, 447, 448, 449, 458, 461], "arrai": [3, 5, 9, 10, 11, 20, 22, 23, 26, 33, 34, 36, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 55, 56, 58, 61, 66, 68, 70, 78, 83, 85, 86, 88, 93, 97, 101, 104, 105, 107, 115, 127, 135, 137, 143, 146, 149, 150, 152, 155, 156, 159, 160, 162, 165, 169, 179, 180, 182, 187, 228, 229, 230, 232, 234, 235, 242, 243, 248, 254, 255, 256, 268, 269, 281, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 311, 312, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 342, 347, 349, 357, 358, 361, 364, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 382, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 420, 422, 425, 427, 431, 435, 436, 437, 438, 439, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 459, 461, 462, 463, 464, 465, 473, 483], "pd": [3, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 63, 64, 65, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 93, 97, 101, 116, 180, 208, 261], "read_csv": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 93, 97, 101, 116, 180], "session_target": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 93, 97, 101, 116, 180, 207, 260], "delimit": [3, 40, 41, 97, 99, 116, 180], "chunk": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 97, 101], "1447": [3, 97], "11": [3, 6, 16, 19, 27, 33, 38, 40, 41, 44, 49, 53, 55, 59, 62, 64, 65, 71, 72, 90, 97, 102, 108, 114, 118, 128, 137, 140, 141, 142, 150, 156, 188, 192, 195, 196, 206, 212, 213, 229, 241, 242, 268, 269, 270, 277, 466, 467, 482], "1448": [3, 97], "1449": [3, 97], "1450": [3, 97], "1451": [3, 97], "1452": [3, 93, 97], "row": [3, 6, 40, 56, 65, 71, 97, 99, 117, 147, 155, 175, 271, 273, 314, 315, 316, 317, 324, 337, 338, 339, 396, 398, 401, 415, 420, 425, 428, 430, 432, 433, 434, 435, 446, 458, 465], "x": [3, 6, 9, 13, 14, 15, 24, 31, 33, 35, 37, 40, 41, 44, 52, 54, 56, 58, 62, 65, 68, 70, 83, 90, 91, 93, 100, 102, 114, 125, 126, 130, 135, 137, 143, 148, 150, 152, 155, 162, 167, 170, 175, 178, 181, 182, 188, 192, 200, 223, 228, 240, 246, 268, 269, 292, 293, 294, 295, 297, 298, 299, 300, 301, 311, 314, 315, 316, 317, 324, 333, 337, 344, 365, 368, 369, 371, 372, 374, 375, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 422, 425, 427, 428, 431, 433, 434, 435, 436, 437, 438, 439, 442, 445, 446, 448, 449, 450, 454, 458, 459, 460, 466, 478, 480], "column": [3, 6, 56, 62, 64, 65, 67, 68, 69, 70, 71, 74, 75, 76, 78, 79, 80, 97, 99, 100, 101, 104, 105, 107, 117, 125, 126, 147, 155, 172, 229, 230, 232, 292, 293, 294, 295, 311, 314, 315, 316, 317, 322, 324, 331, 337, 338, 339, 342, 357, 365, 366, 367, 372, 385, 396, 398, 401, 415, 420, 423, 424, 425, 426, 428, 432, 433, 434, 435, 456, 458, 460, 461, 462], "denot": [3, 6, 15, 140, 155, 172, 180, 181, 182, 213, 365, 366, 396, 418, 434, 449, 450, 451, 452], "experiment": [3, 63, 64, 65, 67, 69, 70, 79, 93, 110, 123, 125, 146, 147, 150, 155, 162, 169, 172, 181, 198, 200, 224, 243, 324, 327, 331, 436, 438, 439], "condit": [3, 6, 29, 30, 31, 33, 35, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 79, 93, 97, 100, 101, 107, 116, 147, 150, 152, 155, 156, 162, 169, 175, 178, 181, 188, 198, 200, 207, 223, 224, 243, 268, 324, 326, 331, 337, 339, 423], "type": [3, 6, 15, 18, 21, 29, 34, 42, 49, 63, 64, 65, 67, 71, 87, 93, 99, 101, 110, 117, 123, 125, 126, 129, 132, 134, 137, 140, 143, 149, 150, 151, 152, 155, 164, 167, 170, 171, 172, 175, 178, 180, 188, 211, 236, 240, 244, 245, 251, 268, 296, 310, 312, 320, 324, 337, 342, 346, 347, 349, 351, 352, 354, 355, 359, 360, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 433, 434, 447, 449, 450, 451, 458, 459, 460, 461], "try": [3, 4, 5, 9, 12, 21, 24, 36, 38, 39, 40, 44, 49, 52, 53, 56, 57, 58, 62, 64, 65, 66, 74, 76, 77, 88, 90, 97, 98, 102, 104, 105, 110, 117, 152, 155, 156, 157, 162, 163, 168, 169, 170, 178, 182, 197, 481], "length": [3, 15, 55, 66, 70, 76, 160, 170, 243, 246, 292, 293, 294, 295, 297, 298, 311, 315, 316, 317, 328, 329, 330, 334, 335, 336, 343, 368, 371, 374, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 420, 425, 428, 431, 432, 433, 434, 435, 447, 459, 465], "dtype": [3, 10, 11, 20, 23, 33, 36, 40, 41, 44, 49, 52, 53, 54, 56, 58, 66, 76, 78, 85, 88, 90, 91, 93, 100, 102, 134, 135, 136, 140, 141, 155, 180, 325, 328, 329, 330, 334, 335, 336, 341, 343, 351, 352, 355, 357, 369, 370, 371, 372, 373, 374, 375, 376, 446, 448, 455, 467], "As": [3, 15, 34, 36, 44, 49, 52, 54, 65, 78, 80, 91, 93, 94, 97, 100, 102, 116, 123, 143, 155, 156, 157, 159, 161, 162, 163, 167, 169, 170, 172, 174, 180, 223, 327, 365, 366], "target": [3, 29, 33, 40, 83, 88, 93, 97, 99, 124, 140, 155, 162, 163, 167, 169, 170, 175, 178, 179, 192, 213, 260, 270, 292, 293, 294, 295, 296, 297, 298, 299, 300, 324, 337, 339, 357, 358, 368, 371, 374, 378, 381, 385, 446, 448, 449, 483], "experi": [3, 6, 29, 33, 34, 41, 65, 68, 70, 93, 114, 115, 166, 171, 172, 175, 200, 223, 483], "consequ": [3, 15, 85, 182], "quit": [3, 6, 65, 160, 169, 194, 266], "big": [3, 41, 49, 140, 155, 159, 162, 170, 180, 182, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465], "Not": [3, 65, 70, 244, 245, 389, 446, 448], "ha": [3, 6, 10, 11, 29, 30, 32, 33, 34, 35, 36, 42, 47, 49, 51, 52, 54, 58, 65, 66, 68, 70, 71, 74, 78, 80, 85, 88, 90, 93, 97, 99, 103, 117, 123, 124, 125, 126, 128, 130, 134, 137, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 161, 163, 164, 167, 169, 170, 172, 174, 178, 182, 192, 223, 228, 229, 230, 238, 239, 240, 242, 247, 251, 271, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 331, 337, 339, 348, 351, 352, 354, 357, 358, 362, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 385, 387, 427, 430, 435, 439, 440, 446, 447, 448, 449, 453, 457, 460, 462, 465, 467, 480], "interest": [3, 6, 14, 15, 16, 23, 35, 42, 49, 51, 55, 66, 68, 69, 70, 82, 95, 97, 98, 99, 100, 103, 106, 112, 114, 117, 128, 146, 155, 156, 162, 164, 165, 167, 169, 170, 171, 172, 175, 177, 181, 182, 195, 199, 206, 236, 237, 243, 246, 248, 257, 259, 260, 261, 263, 264, 265, 266, 269, 270, 275, 278, 279, 280, 281, 314, 316, 317, 347, 352, 354, 355, 359, 362, 368, 372, 425, 434, 435, 437, 440, 449, 482, 483], "u": [3, 4, 15, 24, 40, 55, 58, 63, 65, 76, 78, 88, 93, 110, 114, 162, 163, 165, 170, 199, 221, 254, 256, 298, 316, 317, 481], "so": [3, 6, 10, 11, 14, 22, 33, 36, 40, 43, 49, 52, 65, 67, 68, 70, 71, 75, 78, 79, 80, 85, 88, 93, 99, 100, 102, 107, 117, 125, 148, 155, 167, 168, 169, 170, 172, 178, 180, 182, 188, 228, 229, 230, 238, 244, 245, 252, 271, 276, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 327, 337, 339, 362, 363, 368, 369, 370, 371, 372, 373, 374, 375, 385, 430, 436, 438, 439, 443, 445, 446, 447, 448, 449, 465], "keep": [3, 31, 33, 34, 36, 50, 51, 54, 58, 65, 67, 68, 83, 85, 93, 97, 101, 102, 117, 121, 124, 126, 140, 147, 155, 160, 162, 163, 164, 167, 168, 170, 271, 275, 291, 297, 298, 299, 342, 348, 361, 363, 377, 378, 379, 380, 381, 382, 383, 449, 450, 461, 462], "signal": [3, 6, 28, 43, 44, 45, 46, 48, 49, 50, 52, 55, 57, 59, 61, 65, 66, 68, 69, 70, 77, 82, 85, 93, 95, 99, 106, 112, 114, 122, 123, 124, 125, 126, 139, 141, 143, 147, 148, 152, 155, 156, 158, 159, 160, 161, 162, 164, 167, 169, 172, 175, 179, 181, 188, 192, 198, 228, 229, 230, 232, 236, 243, 244, 246, 254, 255, 257, 260, 268, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 307, 324, 327, 337, 339, 342, 348, 349, 354, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 385, 417, 421, 422, 431, 432, 440, 441, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 459, 467, 482, 483], "creat": [3, 6, 10, 11, 20, 23, 33, 36, 40, 41, 42, 47, 48, 49, 55, 62, 65, 67, 69, 70, 71, 74, 78, 83, 85, 93, 97, 99, 106, 107, 115, 116, 123, 132, 140, 152, 155, 156, 157, 161, 162, 163, 165, 170, 171, 172, 175, 176, 178, 179, 180, 182, 271, 273, 291, 299, 300, 324, 327, 337, 338, 349, 355, 364, 387, 396, 397, 398, 401, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 455, 456, 458, 480, 481, 483], "sampl": [3, 8, 23, 27, 31, 34, 36, 40, 49, 58, 63, 65, 67, 69, 73, 74, 76, 77, 80, 81, 83, 93, 100, 104, 107, 112, 114, 116, 146, 148, 149, 155, 157, 162, 167, 169, 171, 172, 174, 182, 187, 192, 198, 209, 216, 228, 229, 230, 232, 257, 266, 281, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 324, 325, 326, 328, 329, 330, 331, 334, 335, 336, 337, 339, 342, 346, 347, 353, 369, 370, 371, 372, 373, 374, 375, 384, 385, 397, 412, 421, 424, 427, 430, 439, 440, 446, 447, 448, 449, 460, 461, 462, 465, 478, 482], "belong": [3, 30, 32, 150, 155, 162, 175, 182, 189], "classif": [3, 30, 31, 32, 33, 35, 43, 46, 49, 59, 97, 99, 112, 114, 116, 126, 146, 155, 156, 161, 162, 166, 167, 168, 175, 176, 177, 187, 228, 236, 246, 257, 292, 293, 294, 295, 297, 366, 368, 373, 422, 432, 440, 481, 482, 483], "becom": [3, 65, 117, 126, 155, 163, 164, 165, 172], "smaller": [3, 6, 32, 80, 130, 140, 148, 152, 155, 159, 167, 168, 169, 172, 175, 180, 244, 245, 298, 340, 353, 361, 446], "e": [3, 6, 15, 22, 24, 29, 39, 40, 44, 47, 48, 56, 58, 65, 75, 87, 93, 99, 101, 102, 104, 114, 116, 117, 124, 128, 146, 148, 149, 152, 155, 156, 157, 160, 162, 165, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 181, 182, 188, 192, 195, 196, 198, 199, 206, 215, 219, 221, 222, 228, 229, 230, 232, 241, 242, 249, 254, 255, 256, 258, 268, 271, 273, 276, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 314, 316, 317, 324, 331, 337, 339, 340, 341, 342, 343, 344, 346, 361, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 422, 430, 433, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 455, 461, 465, 480], "shorter": [3, 65, 169, 365], "condition_mask": [3, 29, 30, 31, 34, 36, 37, 97, 101, 116], "isin": [3, 29, 31, 34, 36, 37, 97, 101, 116, 117, 271], "larg": [3, 30, 31, 36, 39, 41, 49, 54, 56, 64, 68, 69, 71, 114, 117, 141, 155, 159, 162, 163, 164, 165, 167, 169, 170, 172, 175, 176, 177, 180, 182, 194, 208, 215, 266, 271, 273, 324, 326, 331, 370, 373, 377, 378, 379, 381, 382, 416, 447, 467], "split": [3, 30, 31, 32, 34, 36, 39, 40, 41, 42, 43, 44, 49, 51, 85, 93, 98, 99, 146, 155, 160, 162, 164, 169, 170, 175, 181, 244, 245, 292, 293, 294, 295], "fmri_niimg": [3, 30, 34, 97, 162], "valu": [3, 4, 6, 9, 14, 15, 17, 23, 24, 30, 31, 33, 40, 42, 44, 47, 52, 54, 55, 58, 61, 65, 67, 68, 71, 76, 78, 87, 88, 89, 90, 91, 93, 97, 99, 100, 101, 102, 104, 105, 106, 107, 110, 117, 121, 123, 124, 126, 127, 128, 132, 135, 136, 140, 143, 147, 148, 150, 155, 156, 159, 160, 163, 164, 166, 167, 168, 170, 172, 174, 175, 177, 180, 182, 189, 220, 225, 228, 229, 230, 232, 234, 236, 238, 240, 241, 242, 244, 245, 247, 248, 249, 251, 252, 262, 266, 271, 275, 277, 280, 283, 284, 287, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 307, 311, 312, 314, 315, 316, 317, 320, 324, 325, 327, 333, 337, 339, 340, 341, 342, 343, 346, 348, 353, 357, 358, 359, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 419, 420, 421, 422, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 442, 443, 445, 446, 447, 448, 449, 451, 452, 453, 457, 458, 459, 460, 461, 462, 465, 467, 480], "216": [3, 30, 33, 41, 466, 467], "classifi": [3, 28, 32, 33, 36, 41, 45, 51, 97, 98, 112, 143, 146, 147, 155, 162, 163, 164, 165, 166, 175, 176, 177, 260, 292, 294, 295, 296, 297, 347, 349, 354, 435, 440, 482, 483], "linear": [3, 6, 29, 33, 34, 35, 37, 44, 65, 67, 97, 101, 114, 137, 155, 162, 166, 171, 172, 173, 175, 176, 181, 182, 192, 208, 232, 271, 292, 293, 294, 295, 297, 298, 299, 300, 314, 316, 317, 324, 337, 342, 356, 357, 358, 366, 385, 429, 461, 465, 474, 481, 483], "kernel": [3, 29, 33, 34, 35, 44, 55, 93, 97, 162, 192, 293, 295, 298, 328, 329, 330, 334, 335, 336], "svc": [3, 29, 30, 31, 32, 33, 34, 35, 116, 143, 155, 162, 163, 165, 292, 294, 296], "standard": [3, 6, 9, 11, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 65, 67, 68, 71, 74, 88, 90, 91, 93, 97, 98, 100, 103, 104, 105, 107, 110, 114, 116, 124, 125, 140, 143, 147, 149, 150, 155, 157, 160, 162, 163, 167, 170, 171, 172, 175, 180, 181, 182, 196, 201, 202, 203, 204, 205, 228, 250, 275, 292, 293, 294, 295, 297, 298, 299, 300, 307, 316, 317, 324, 326, 327, 331, 342, 362, 365, 369, 370, 371, 372, 373, 374, 375, 421, 447, 449, 461, 466, 467, 481], "zscore_sampl": [3, 11, 29, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 90, 91, 97, 98, 99, 103, 124, 155, 160, 162, 369, 370, 371, 372, 373, 374, 375, 461, 467], "fit": [3, 6, 28, 30, 32, 35, 36, 37, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 64, 65, 67, 69, 72, 74, 75, 76, 78, 79, 80, 86, 88, 90, 91, 93, 97, 98, 99, 102, 110, 112, 116, 125, 126, 140, 148, 150, 152, 155, 156, 158, 159, 160, 162, 163, 165, 167, 169, 172, 173, 175, 176, 177, 182, 228, 229, 230, 252, 259, 260, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 307, 311, 314, 315, 316, 317, 321, 324, 327, 333, 337, 339, 349, 354, 368, 369, 370, 371, 372, 373, 374, 375, 381, 385, 398, 401, 423, 435, 440, 446, 447, 448, 449, 452, 457, 459, 466, 467, 482, 483], "train": [3, 31, 32, 34, 39, 40, 41, 42, 43, 44, 51, 97, 98, 146, 155, 162, 163, 164, 167, 169, 175, 177, 182, 229, 292, 293, 294, 295, 297, 298, 446, 448, 454], "without": [3, 6, 14, 23, 48, 50, 65, 77, 80, 83, 93, 109, 110, 112, 117, 124, 125, 134, 143, 152, 155, 157, 160, 166, 168, 169, 175, 180, 182, 227, 241, 340, 346, 366, 368, 371, 374, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 421, 428, 433, 480, 483], "resampl": [3, 9, 29, 30, 32, 33, 34, 35, 36, 43, 48, 49, 52, 53, 54, 56, 65, 69, 74, 82, 90, 91, 95, 97, 112, 116, 124, 132, 133, 136, 137, 143, 147, 149, 150, 155, 179, 192, 210, 224, 271, 273, 275, 285, 286, 288, 289, 292, 293, 294, 295, 297, 298, 299, 300, 337, 343, 347, 352, 354, 356, 357, 358, 369, 370, 371, 372, 373, 374, 377, 379, 380, 381, 382, 427, 428, 434, 435, 440, 442, 447, 452, 465, 467, 482, 483], "492": [3, 29, 30, 32, 33, 34, 35, 36, 97], "provid": [3, 5, 6, 9, 29, 30, 32, 33, 34, 35, 36, 44, 47, 48, 49, 52, 54, 56, 62, 65, 66, 69, 70, 74, 75, 76, 78, 79, 83, 90, 93, 97, 100, 104, 110, 115, 116, 117, 125, 126, 130, 138, 141, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 156, 158, 159, 161, 162, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 182, 187, 188, 189, 198, 206, 207, 217, 220, 222, 224, 226, 227, 228, 229, 230, 232, 235, 236, 238, 239, 240, 241, 248, 249, 252, 260, 271, 275, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 311, 315, 324, 325, 326, 330, 331, 336, 337, 339, 342, 348, 357, 362, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 419, 421, 424, 431, 433, 437, 446, 447, 448, 449, 450, 457, 461, 465, 467, 480, 481], "sform": [3, 29, 30, 32, 33, 34, 35, 36, 97, 152, 155], "header": [3, 11, 29, 30, 32, 33, 34, 35, 36, 93, 97, 100, 121, 125, 127, 141, 143, 151, 155, 180, 342, 345, 353, 355, 421, 461], "result": [3, 6, 14, 15, 23, 24, 30, 33, 34, 35, 36, 40, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 64, 65, 67, 69, 70, 71, 74, 76, 77, 78, 83, 85, 86, 87, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 105, 107, 114, 115, 117, 124, 125, 127, 133, 140, 143, 146, 151, 152, 155, 156, 158, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 180, 181, 182, 187, 189, 194, 195, 198, 207, 213, 214, 236, 238, 248, 266, 271, 273, 280, 292, 293, 296, 313, 314, 316, 317, 318, 324, 333, 337, 339, 342, 352, 353, 354, 357, 364, 372, 373, 375, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 436, 438, 439, 443, 452, 453, 458, 465, 477, 480, 483], "mai": [3, 17, 29, 30, 32, 33, 34, 35, 36, 43, 49, 56, 65, 70, 71, 79, 85, 97, 99, 102, 114, 116, 117, 121, 141, 143, 151, 155, 156, 162, 163, 165, 170, 172, 175, 180, 182, 188, 194, 227, 228, 236, 266, 271, 298, 312, 327, 339, 357, 364, 366, 370, 372, 373, 385, 436, 438, 439, 452, 458, 465], "expect": [3, 6, 29, 30, 32, 33, 34, 35, 36, 61, 65, 77, 78, 80, 94, 97, 100, 101, 104, 105, 117, 128, 143, 152, 155, 160, 167, 170, 172, 175, 178, 181, 182, 298, 324, 326, 331, 337, 339, 343, 362], "both": [3, 4, 9, 15, 24, 39, 47, 49, 51, 58, 67, 78, 79, 88, 93, 99, 104, 107, 117, 125, 126, 143, 150, 155, 156, 159, 161, 167, 168, 170, 171, 175, 180, 181, 182, 187, 188, 209, 218, 228, 235, 247, 257, 305, 306, 307, 310, 324, 326, 331, 339, 340, 342, 361, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 427, 430, 432, 435, 439, 451, 461, 465, 481], "class": [3, 11, 28, 32, 42, 43, 45, 49, 51, 54, 56, 58, 90, 93, 97, 98, 112, 122, 123, 124, 126, 128, 130, 136, 137, 138, 141, 143, 146, 148, 149, 150, 152, 155, 161, 162, 166, 169, 170, 171, 174, 182, 183, 185, 186, 227, 228, 229, 230, 260, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 317, 318, 324, 337, 343, 355, 365, 368, 369, 370, 371, 372, 373, 374, 375, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 420, 422, 425, 427, 428, 431, 432, 433, 434, 435, 440, 446, 447, 448, 449, 450, 451, 457, 467, 468, 470, 472, 475, 476, 477, 482, 483], "number": [3, 6, 29, 31, 33, 34, 39, 42, 43, 49, 50, 53, 54, 55, 58, 64, 65, 67, 70, 71, 76, 78, 85, 88, 91, 93, 97, 99, 102, 103, 104, 117, 126, 127, 128, 140, 143, 146, 147, 148, 150, 155, 156, 159, 160, 162, 163, 164, 167, 170, 172, 175, 177, 178, 182, 188, 192, 195, 218, 220, 226, 228, 229, 230, 232, 236, 237, 240, 243, 244, 245, 248, 249, 251, 257, 260, 262, 265, 266, 269, 271, 275, 281, 284, 287, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 307, 315, 320, 324, 333, 337, 339, 340, 342, 344, 346, 348, 353, 354, 361, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 381, 382, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 420, 421, 422, 423, 425, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 458, 459, 460, 461, 462, 467, 480], "problem": [3, 6, 31, 33, 39, 93, 114, 162, 163, 164, 167, 168, 169, 170, 172, 175, 177, 178, 232, 297, 298, 300, 311, 314, 315, 316, 317, 339, 385], "balanc": [3, 49, 150, 155, 159], "perform": [3, 30, 33, 34, 44, 51, 54, 62, 65, 69, 78, 79, 88, 90, 93, 94, 98, 99, 100, 101, 104, 105, 110, 116, 117, 124, 146, 147, 148, 150, 155, 156, 161, 163, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 180, 181, 182, 189, 195, 215, 224, 232, 262, 275, 284, 287, 292, 293, 294, 295, 297, 298, 299, 300, 306, 307, 324, 326, 333, 337, 339, 356, 357, 358, 359, 360, 361, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 381, 382, 385, 396, 398, 401, 403, 405, 407, 409, 411, 413, 415, 420, 422, 425, 427, 428, 431, 433, 434, 435, 442, 446, 447, 448, 449, 452, 454, 459, 460, 461, 465, 467, 483], "done": [3, 6, 34, 36, 41, 42, 43, 44, 48, 49, 51, 53, 57, 58, 65, 70, 93, 101, 102, 104, 116, 117, 150, 152, 155, 156, 157, 159, 162, 163, 165, 167, 169, 172, 178, 181, 229, 230, 292, 293, 294, 295, 297, 298, 299, 300, 324, 337, 342, 343, 351, 361, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 447, 448, 449, 461], "sum": [3, 41, 42, 49, 58, 64, 66, 76, 78, 83, 100, 101, 104, 105, 106, 143, 155, 169, 297, 298, 311, 315, 316, 348, 369, 372, 452, 462], "float": [3, 40, 41, 43, 66, 74, 127, 143, 146, 155, 229, 230, 232, 236, 262, 283, 284, 287, 292, 293, 294, 295, 296, 297, 298, 299, 300, 311, 312, 314, 315, 316, 317, 319, 323, 324, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 339, 340, 341, 342, 346, 348, 357, 358, 361, 365, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 419, 420, 421, 422, 425, 427, 428, 430, 431, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 454, 457, 458, 459, 460, 461, 462, 465], "len": [3, 12, 22, 30, 32, 33, 34, 47, 48, 51, 62, 63, 64, 65, 66, 67, 70, 75, 78, 90, 93, 97, 102, 110, 117, 232, 292, 293, 294, 295, 297, 298, 314, 316, 317, 321, 337, 354, 357, 377, 379, 380, 382, 447], "meaningless": [3, 162, 172, 340], "why": [3, 93, 169, 182], "proper": [3, 34, 150, 155, 169, 247, 248, 481], "error": [3, 6, 42, 43, 65, 75, 78, 80, 83, 93, 102, 123, 125, 130, 137, 140, 143, 152, 155, 157, 162, 163, 167, 170, 172, 175, 228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 314, 316, 324, 331, 337, 339, 340, 342, 343, 364, 368, 369, 370, 371, 372, 373, 374, 375, 381, 446, 447, 448, 449, 481], "rate": [3, 6, 65, 80, 130, 155, 169, 172, 175, 182, 223, 319, 339], "test": [3, 29, 31, 34, 36, 40, 42, 43, 44, 51, 53, 65, 69, 73, 76, 77, 81, 98, 100, 101, 104, 105, 110, 112, 114, 123, 125, 126, 139, 147, 150, 155, 162, 164, 165, 167, 168, 169, 172, 173, 174, 175, 178, 181, 227, 230, 236, 237, 238, 239, 240, 241, 242, 246, 249, 250, 252, 260, 261, 264, 265, 266, 269, 270, 275, 281, 292, 293, 294, 295, 296, 297, 298, 312, 337, 339, 340, 347, 353, 357, 358, 361, 364, 385, 397, 398, 412, 424, 427, 435, 440, 442, 474, 481, 482], "30": [3, 6, 30, 32, 33, 36, 40, 44, 48, 51, 57, 62, 63, 66, 90, 98, 102, 106, 114, 130, 140, 155, 168, 237, 294, 295, 314, 316, 317, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 457, 466, 467], "last": [3, 6, 33, 35, 40, 55, 71, 142, 155, 172, 177, 178, 234, 235, 342, 349, 363, 480, 481], "point": [3, 4, 8, 15, 22, 23, 27, 54, 55, 83, 85, 90, 93, 112, 116, 140, 143, 152, 155, 160, 162, 169, 172, 175, 177, 178, 179, 180, 230, 292, 293, 294, 295, 324, 357, 358, 368, 371, 374, 379, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 422, 425, 428, 431, 433, 434, 435, 439, 440, 442, 452, 453, 459, 465, 482, 483], "dure": [3, 6, 55, 56, 64, 93, 99, 100, 114, 116, 126, 140, 147, 155, 162, 163, 169, 170, 172, 175, 177, 178, 182, 210, 211, 222, 230, 232, 236, 249, 337, 339, 377, 378, 379, 381, 382, 430, 446], "fmri_niimgs_train": 3, "fmri_niimgs_test": 3, "conditions_train": 3, "conditions_test": 3, "hasn": [3, 169], "t": [3, 5, 6, 9, 16, 22, 24, 33, 37, 41, 55, 56, 58, 62, 65, 66, 67, 69, 70, 71, 74, 75, 76, 78, 79, 82, 89, 91, 92, 93, 95, 98, 99, 101, 102, 103, 104, 106, 107, 112, 114, 117, 126, 146, 155, 156, 167, 168, 169, 170, 172, 173, 174, 175, 177, 178, 180, 181, 191, 194, 206, 220, 222, 225, 226, 238, 239, 248, 249, 251, 252, 258, 266, 271, 272, 273, 276, 297, 298, 312, 314, 315, 316, 317, 318, 320, 324, 337, 339, 361, 364, 365, 366, 379, 385, 430, 433, 435, 440, 451, 459, 462, 465, 480, 482], "examin": [3, 114, 175, 258, 276], "well": [3, 6, 15, 44, 48, 51, 58, 65, 66, 68, 78, 88, 99, 133, 140, 147, 149, 155, 156, 157, 159, 160, 162, 163, 165, 168, 170, 172, 175, 177, 192, 195, 198, 208, 221, 222, 228, 229, 230, 243, 249, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 343, 357, 366, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449, 467], "predicton_accuraci": 3, "3f": [3, 6, 34, 44, 48, 55, 97], "767": 3, "set": [3, 6, 14, 15, 16, 21, 22, 28, 29, 30, 31, 33, 36, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 64, 65, 68, 78, 79, 80, 88, 93, 94, 97, 98, 100, 112, 114, 117, 123, 124, 125, 126, 133, 137, 143, 146, 147, 149, 150, 152, 155, 156, 157, 160, 162, 164, 166, 169, 171, 172, 173, 174, 175, 176, 178, 180, 182, 189, 192, 213, 217, 221, 223, 228, 229, 230, 236, 242, 243, 254, 255, 256, 260, 264, 265, 266, 271, 273, 275, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 314, 316, 317, 323, 324, 326, 327, 331, 337, 338, 340, 342, 349, 361, 362, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 451, 454, 459, 461, 465, 467, 480, 482, 483], "repetit": [3, 6, 33, 63, 69, 70, 114, 139, 155, 172, 175, 200, 257, 262, 284, 287, 292, 293, 294, 295, 297, 298, 324, 327, 328, 329, 330, 334, 335, 336, 342, 369, 370, 371, 372, 373, 374, 375, 421, 447, 449, 461], "strategi": [3, 24, 28, 45, 48, 49, 65, 87, 88, 90, 91, 98, 112, 114, 124, 126, 143, 147, 148, 150, 155, 160, 163, 166, 167, 169, 172, 179, 230, 260, 292, 293, 294, 295, 296, 299, 300, 327, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 381, 421, 432, 433, 440, 447, 452, 461, 465, 467, 482, 483], "scikit": [3, 34, 49, 93, 96, 101, 103, 108, 112, 115, 121, 123, 126, 128, 133, 135, 136, 137, 140, 143, 148, 150, 155, 156, 159, 162, 163, 164, 166, 167, 169, 170, 176, 177, 178, 260, 292, 293, 294, 295, 296, 306, 307, 349, 368, 369, 370, 371, 372, 373, 374, 375, 435, 447, 481, 482, 483], "sklearn": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 48, 49, 51, 52, 53, 57, 58, 91, 93, 97, 98, 101, 102, 103, 104, 105, 110, 126, 140, 143, 147, 148, 155, 156, 162, 163, 165, 169, 182, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 259, 260, 261, 263, 267, 271, 273, 278, 279, 280, 281, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 333, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "model_select": [3, 29, 30, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 51, 97, 98, 140, 155, 162, 165, 292, 293, 294, 295], "cv": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 44, 51, 58, 97, 98, 110, 137, 155, 162, 167, 230, 292, 293, 294, 295, 296, 297, 298], "n_split": [3, 34, 36, 37, 40, 44, 51, 98], "fold": [3, 29, 31, 34, 36, 40, 51, 67, 93, 97, 98, 162, 163, 165, 167, 169, 182, 230, 292, 293, 294, 295, 296, 297, 298], "enumer": [3, 12, 22, 34, 40, 47, 48, 51, 57, 64, 65, 66, 67, 69, 70, 78, 93, 99, 100, 101, 102, 104], "01d": 3, "886": 3, "698": [3, 33], "744": [3, 33], "return": [3, 4, 9, 11, 14, 15, 31, 33, 39, 40, 41, 44, 47, 56, 65, 66, 70, 79, 83, 93, 99, 106, 110, 116, 117, 124, 125, 126, 132, 136, 143, 146, 148, 150, 151, 152, 155, 157, 162, 164, 167, 169, 170, 175, 177, 178, 180, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 307, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 475, 480], "paramet": [3, 6, 14, 15, 21, 23, 24, 28, 29, 32, 42, 44, 45, 49, 51, 54, 56, 58, 60, 69, 72, 88, 90, 91, 93, 94, 103, 104, 105, 107, 110, 112, 116, 117, 123, 124, 125, 126, 127, 134, 137, 140, 141, 143, 147, 148, 149, 150, 151, 152, 155, 157, 159, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 175, 177, 178, 179, 180, 192, 224, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 306, 307, 311, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 480, 482, 483], "n_fold": [3, 230, 292, 293, 294, 295, 297, 298], "pipelin": [3, 35, 37, 39, 40, 41, 42, 44, 74, 97, 98, 114, 146, 155, 161, 162, 163, 166, 167, 168, 175, 181, 192, 228, 229, 230, 236, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 342, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449, 461, 483], "found": [3, 6, 49, 52, 55, 80, 99, 100, 102, 106, 107, 116, 117, 140, 155, 156, 159, 160, 161, 162, 163, 164, 165, 167, 169, 170, 177, 178, 181, 182, 192, 215, 271, 273, 275, 342, 344, 362, 376, 379, 420, 434, 435, 461, 480], "websit": [3, 42, 74, 128, 140, 155, 170, 188, 236, 249, 270], "best": [3, 34, 42, 43, 44, 94, 146, 152, 155, 162, 163, 164, 167, 169, 170, 172, 181, 292, 293, 294, 295, 297, 298, 364, 398, 401, 446, 447], "per": [3, 4, 6, 30, 31, 33, 40, 48, 57, 65, 77, 93, 100, 101, 107, 148, 155, 156, 162, 170, 182, 192, 197, 223, 230, 250, 269, 292, 293, 294, 295, 297, 298, 300, 312, 321, 324, 325, 327, 331, 338, 362, 365, 369, 370, 371, 373, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 460], "cv_params_": [3, 34, 124, 125, 155, 292, 293, 294, 295], "c": [3, 34, 40, 41, 42, 43, 44, 49, 56, 58, 68, 97, 98, 99, 101, 110, 114, 117, 163, 167, 168, 169, 170, 178, 188, 189, 192, 196, 199, 206, 208, 213, 215, 217, 219, 222, 225, 229, 232, 240, 242, 249, 251, 254, 255, 261, 262, 268, 270, 271, 273, 275, 286, 316, 317, 342, 357, 358, 365, 366, 385, 452, 455, 461], "100": [3, 15, 31, 33, 34, 40, 41, 42, 44, 49, 55, 63, 74, 83, 85, 88, 117, 163, 172, 179, 188, 192, 220, 230, 236, 248, 268, 271, 292, 293, 294, 295, 297, 298, 321, 324, 332, 333, 341, 348, 361, 462, 466, 467, 480, 483], "speed": [3, 36, 37, 47, 76, 88, 97, 104, 114, 125, 155, 159, 165, 168, 169, 181, 182, 385, 446, 465], "cpu": [3, 42, 101, 104, 165, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 324, 333, 337, 339, 354, 369, 370, 371, 380, 381, 382, 385, 447], "n_job": [3, 31, 33, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 62, 74, 75, 76, 78, 79, 80, 97, 98, 99, 100, 101, 104, 107, 165, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 324, 327, 333, 337, 339, 354, 369, 370, 371, 380, 381, 382, 385, 447, 467], "respect": [3, 62, 107, 143, 152, 155, 156, 170, 172, 175, 178, 182, 254, 256, 292, 293, 294, 295, 324, 326, 327, 331, 337, 346, 357, 358, 449, 451], "structur": [3, 6, 23, 39, 41, 43, 46, 49, 51, 58, 59, 63, 65, 112, 114, 156, 162, 164, 165, 166, 167, 169, 175, 180, 187, 189, 190, 191, 192, 194, 195, 198, 206, 207, 208, 213, 214, 217, 222, 223, 226, 230, 238, 240, 249, 252, 260, 261, 266, 275, 297, 298, 311, 314, 362, 377, 378, 379, 381, 382, 432, 440, 443, 448, 454, 482, 483], "acquisit": [3, 6, 30, 32, 63, 65, 69, 100, 114, 167, 172, 175, 192, 223, 266, 331, 421], "select": [3, 6, 14, 15, 19, 20, 23, 29, 32, 33, 34, 35, 41, 42, 55, 56, 65, 75, 88, 93, 99, 104, 114, 115, 125, 133, 134, 135, 137, 145, 146, 148, 150, 155, 157, 160, 163, 164, 165, 166, 167, 168, 169, 181, 182, 192, 213, 229, 230, 240, 257, 258, 268, 271, 273, 275, 277, 291, 292, 293, 294, 295, 297, 298, 337, 339, 349, 361, 365, 366, 427, 430, 433, 435, 436, 438, 439, 446, 447, 449, 465, 480, 483], "run_label": [3, 29, 30, 32, 33, 97, 162], "acquir": [3, 6, 65, 66, 116, 172, 175, 177, 210, 223], "nois": [3, 6, 34, 44, 56, 67, 68, 70, 93, 94, 99, 102, 107, 114, 123, 148, 155, 157, 163, 165, 169, 172, 175, 182, 314, 316, 317, 331, 365, 366, 421, 433, 434, 462], "autocorrel": [3, 67, 107], "henc": [3, 56, 58, 71, 74, 85, 146, 155, 167, 170, 172, 192], "across": [3, 6, 15, 16, 47, 50, 51, 56, 64, 65, 79, 93, 97, 98, 99, 102, 114, 124, 143, 149, 155, 156, 157, 160, 161, 162, 163, 165, 167, 172, 175, 187, 192, 200, 206, 214, 222, 228, 236, 246, 280, 292, 293, 294, 295, 297, 298, 299, 300, 360, 376, 421, 447, 449, 465, 480], "pass": [3, 4, 9, 10, 11, 24, 29, 36, 42, 43, 49, 51, 54, 55, 56, 58, 78, 85, 88, 93, 101, 104, 105, 116, 117, 123, 125, 126, 127, 136, 138, 140, 143, 148, 150, 152, 155, 162, 163, 167, 169, 170, 171, 178, 180, 181, 182, 192, 228, 229, 230, 236, 271, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 326, 327, 331, 337, 339, 342, 356, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 379, 380, 382, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 442, 443, 446, 447, 448, 449, 451, 459, 460, 461, 465], "leaveonegroupout": [3, 29, 30, 32, 33, 97, 137, 155, 162, 165, 167, 292, 293, 294, 295], "cv_scores_": [3, 29, 30, 32, 33, 34, 42, 110, 162, 230, 292, 293, 294, 295, 297, 298], "9629629629629629": 3, "8518518518518519": 3, "9753086419753086": 3, "40740740740740744": 3, "9876543209876543": 3, "9259259259259259": 3, "8765432098765432": 3, "final": [3, 4, 6, 14, 15, 30, 41, 48, 53, 55, 56, 57, 63, 67, 83, 92, 93, 99, 148, 155, 156, 163, 169, 170, 171, 177, 178, 181, 182, 192, 206, 230, 337, 362, 369, 370, 372, 373, 480], "coef_": [3, 40, 44, 97, 110, 116, 292, 293, 294, 295, 297, 298], "89376561e": 3, "02": [3, 27, 30, 33, 41, 45, 48, 51, 53, 59, 62, 70, 72, 77, 95, 98, 114, 156, 161, 167, 177, 192, 206, 240, 299, 365, 366, 466, 482], "87167304e": 3, "23027990e": 3, "88746094e": 3, "18697069e": 3, "10743733e": 3, "69997530e": 3, "50954654e": 3, "94204958e": 3, "51226116e": 3, "08512010e": 3, "28796791e": 3, "54677775e": 3, "78907908e": 3, "69168460e": 3, "28087440e": 3, "6": [3, 4, 6, 7, 11, 17, 20, 22, 23, 24, 27, 30, 31, 33, 34, 36, 38, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 58, 59, 62, 63, 65, 71, 72, 79, 90, 93, 95, 98, 99, 102, 105, 106, 110, 114, 118, 121, 123, 133, 135, 137, 140, 141, 142, 148, 149, 150, 156, 160, 167, 168, 169, 171, 181, 192, 199, 216, 222, 223, 236, 254, 257, 260, 281, 299, 365, 366, 370, 373, 375, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 435, 441, 442, 449, 451, 466, 467, 481, 482], "56423351e": 3, "03": [3, 27, 30, 32, 33, 41, 44, 53, 56, 59, 70, 90, 95, 108, 114, 167, 175, 339, 365, 366, 385, 466, 467, 482], "7": [3, 6, 7, 15, 24, 25, 30, 33, 42, 44, 45, 52, 53, 54, 56, 57, 58, 59, 62, 63, 65, 68, 69, 71, 75, 81, 85, 87, 90, 93, 95, 102, 106, 111, 114, 117, 118, 121, 123, 128, 130, 135, 137, 140, 141, 143, 148, 150, 168, 177, 180, 181, 187, 192, 196, 198, 206, 220, 223, 226, 236, 240, 242, 243, 248, 252, 314, 316, 317, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 422, 427, 431, 433, 434, 436, 438, 439, 443, 445, 448, 454, 466, 467, 480, 482], "65748856e": 3, "67105838e": 3, "8": [3, 6, 7, 9, 12, 14, 24, 27, 30, 33, 34, 38, 40, 42, 43, 45, 49, 50, 51, 53, 54, 55, 56, 58, 59, 61, 62, 65, 70, 71, 72, 74, 75, 78, 79, 85, 88, 90, 91, 99, 100, 101, 102, 103, 105, 106, 108, 110, 114, 117, 121, 126, 128, 133, 141, 143, 145, 151, 160, 168, 192, 195, 201, 202, 203, 204, 205, 206, 215, 225, 241, 245, 251, 260, 262, 271, 273, 280, 283, 284, 285, 286, 287, 288, 292, 293, 294, 295, 297, 298, 299, 300, 324, 337, 341, 346, 365, 368, 369, 370, 371, 372, 373, 374, 375, 378, 381, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 447, 449, 458, 459, 461, 466, 467, 482], "02144727e": 3, "29515123e": 3, "17595915e": 3, "36993262e": 3, "41326779e": 3, "59874858e": 3, "22604052e": 3, "77309962e": 3, "22197158e": 3, "9": [3, 6, 7, 14, 15, 23, 26, 27, 32, 33, 35, 36, 40, 41, 42, 44, 45, 47, 49, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 63, 66, 68, 70, 71, 72, 75, 77, 78, 79, 80, 81, 83, 85, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 114, 116, 117, 118, 121, 127, 137, 146, 148, 156, 175, 196, 197, 215, 217, 220, 248, 257, 258, 271, 273, 275, 277, 311, 315, 324, 333, 339, 355, 361, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 421, 436, 438, 439, 455, 458, 466, 467, 480, 481, 482], "53205275e": 3, "76046383e": 3, "14298465e": 3, "14226705e": 3, "03660596e": 3, "89275629e": 3, "89030505e": 3, "35115532e": 3, "21400268e": 3, "73142587e": 3, "37416435e": 3, "41275132e": 3, "81647455e": 3, "65404946e": 3, "70784437e": 3, "56857022e": 3, "21663287e": 3, "47675010e": 3, "13283836e": 3, "60955982e": 3, "52762086e": 3, "02911390e": 3, "28113021e": 3, "08010071e": 3, "09944651e": 3, "72429406e": 3, "77393920e": 3, "03857803e": 3, "38237142e": 3, "48881051e": 3, "43027874e": 3, "47419279e": 3, "01": [3, 6, 7, 12, 27, 30, 32, 33, 42, 45, 48, 51, 53, 55, 58, 59, 61, 69, 70, 72, 81, 95, 98, 99, 100, 101, 107, 108, 110, 114, 192, 196, 206, 214, 230, 242, 246, 324, 327, 331, 362, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 466, 467, 482], "34043519e": 3, "87114985e": 3, "65858859e": 3, "07602622e": 3, "22034282e": 3, "95641578e": 3, "22092574e": 3, "04053404e": 3, "15346388e": 3, "12249791e": 3, "93775596e": 3, "30543030e": 3, "42974759e": 3, "23065724e": 3, "88147304e": 3, "69390368e": 3, "78947102e": 3, "00276693e": 3, "99186596e": 3, "52170388e": 3, "06155811e": 3, "31941968e": 3, "21514592e": 3, "23347566e": 3, "42562028e": 3, "53124525e": 3, "98227037e": 3, "32639237e": 3, "55124531e": 3, "41589677e": 3, "79200630e": 3, "80910892e": 3, "70157631e": 3, "71451137e": 3, "98951057e": 3, "20166851e": 3, "35454014e": 3, "37628187e": 3, "04261530e": 3, "68455668e": 3, "19373018e": 3, "94177340e": 3, "07296617e": 3, "48931211e": 3, "43559370e": 3, "09026649e": 3, "67698122e": 3, "73787972e": 3, "96432864e": 3, "09423936e": 3, "57927649e": 3, "16720564e": 3, "00106101e": 3, "40261046e": 3, "82613371e": 3, "12101458e": 3, "45402213e": 3, "32178453e": 3, "49997359e": 3, "47540718e": 3, "56643249e": 3, "83881537e": 3, "19958247e": 3, "72172645e": 3, "25514625e": 3, "58656513e": 3, "79165706e": 3, "51814437e": 3, "31722031e": 3, "35324997e": 3, "76994260e": 3, "40829348e": 3, "20589790e": 3, "35708037e": 3, "68303203e": 3, "92570175e": 3, "24496433e": 3, "30219819e": 3, "00012240e": 3, "17136473e": 3, "92628581e": 3, "33222799e": 3, "80301173e": 3, "75292985e": 3, "17793808e": 3, "09931253e": 3, "43033319e": 3, "06833028e": 3, "84813141e": 3, "71508538e": 3, "72569597e": 3, "76642512e": 3, "08915312e": 3, "04": [3, 27, 30, 32, 33, 44, 45, 49, 53, 56, 70, 81, 114, 156, 157, 169, 214, 246, 342, 365, 366, 461, 462, 466, 467, 482], "00770155e": 3, "53994654e": 3, "25622647e": 3, "82606646e": 3, "50555970e": 3, "61202555e": 3, "16476226e": 3, "95407237e": 3, "57883983e": 3, "89305484e": 3, "82972611e": 3, "23919341e": 3, "13675439e": 3, "68752449e": 3, "66514223e": 3, "35521673e": 3, "80211640e": 3, "46411116e": 3, "53244648e": 3, "67291966e": 3, "62247452e": 3, "86831001e": 3, "39666454e": 3, "21710469e": 3, "73612913e": 3, "01698331e": 3, "17097156e": 3, "91414339e": 3, "37777578e": 3, "84698011e": 3, "22615164e": 3, "82636782e": 3, "13781209e": 3, "80788796e": 3, "79688638e": 3, "78887597e": 3, "11430159e": 3, "65020386e": 3, "89089285e": 3, "42850429e": 3, "22346505e": 3, "92869734e": 3, "89847428e": 3, "39532104e": 3, "65297378e": 3, "65324118e": 3, "58041607e": 3, "93380935e": 3, "13631509e": 3, "09403812e": 3, "50179482e": 3, "38816418e": 3, "12612596e": 3, "41484104e": 3, "10216203e": 3, "33811667e": 3, "12339406e": 3, "37415690e": 3, "13075561e": 3, "64226492e": 3, "22400540e": 3, "31920612e": 3, "98650963e": 3, "29727796e": 3, "28093111e": 3, "89710911e": 3, "13462228e": 3, "28723415e": 3, "71051973e": 3, "34906868e": 3, "04376329e": 3, "26795057e": 3, "71216037e": 3, "29134481e": 3, "33451804e": 3, "77914034e": 3, "74666422e": 3, "76477327e": 3, "38273866e": 3, "28052382e": 3, "78033612e": 3, "32695885e": 3, "22689928e": 3, "28028964e": 3, "57414136e": 3, "03624234e": 3, "90250514e": 3, "15033769e": 3, "81419954e": 3, "12322627e": 3, "17432428e": 3, "23480304e": 3, "54546270e": 3, "73679834e": 3, "53966715e": 3, "06521876e": 3, "21983181e": 3, "98727873e": 3, "85519033e": 3, "05703890e": 3, "02838252e": 3, "10051743e": 3, "42459677e": 3, "93850159e": 3, "01772183e": 3, "09407676e": 3, "49254022e": 3, "92747916e": 3, "05300799e": 3, "07545021e": 3, "84049208e": 3, "48727220e": 3, "00654610e": 3, "63083974e": 3, "64683863e": 3, "90209252e": 3, "04858257e": 3, "68079842e": 3, "36719729e": 3, "08855266e": 3, "10241411e": 3, "41964716e": 3, "16495955e": 3, "98671503e": 3, "61630813e": 3, "96232409e": 3, "03896912e": 3, "56493734e": 3, "98920532e": 3, "13032718e": 3, "21952894e": 3, "14990781e": 3, "31276332e": 3, "67257242e": 3, "14428488e": 3, "67113590e": 3, "28702865e": 3, "20151068e": 3, "68524725e": 3, "25603462e": 3, "04616527e": 3, "10335321e": 3, "85356966e": 3, "81664037e": 3, "48424786e": 3, "18824089e": 3, "18499074e": 3, "10845762e": 3, "11778072e": 3, "63474146e": 3, "25922491e": 3, "12229254e": 3, "57649198e": 3, "70195254e": 3, "32375507e": 3, "06447803e": 3, "23409459e": 3, "27356258e": 3, "33873435e": 3, "75530429e": 3, "88841932e": 3, "45132140e": 3, "03299294e": 3, "16785428e": 3, "32223320e": 3, "17564306e": 3, "40061218e": 3, "31148961e": 3, "17557483e": 3, "75889147e": 3, "18128768e": 3, "15887281e": 3, "34028283e": 3, "22781684e": 3, "00231546e": 3, "74912334e": 3, "12757345e": 3, "98717800e": 3, "04068665e": 3, "65059478e": 3, "03003641e": 3, "05656821e": 3, "80743478e": 3, "75451821e": 3, "72591046e": 3, "00662538e": 3, "46112623e": 3, "46870386e": 3, "13410985e": 3, "81705025e": 3, "40979603e": 3, "14638129e": 3, "63834198e": 3, "66532286e": 3, "15671354e": 3, "45093877e": 3, "35867427e": 3, "34598722e": 3, "81061157e": 3, "15343636e": 3, "39361427e": 3, "07246955e": 3, "15463640e": 3, "15425934e": 3, "88768058e": 3, "60263477e": 3, "09701533e": 3, "29172023e": 3, "59460766e": 3, "60401276e": 3, "64627045e": 3, "12881175e": 3, "17266479e": 3, "51638394e": 3, "82885515e": 3, "42549234e": 3, "47012183e": 3, "63032412e": 3, "17338416e": 3, "24173591e": 3, "17988192e": 3, "85681172e": 3, "23651672e": 3, "86600156e": 3, "54629363e": 3, "50544075e": 3, "20604677e": 3, "19790198e": 3, "59526664e": 3, "12127599e": 3, "93194155e": 3, "54350307e": 3, "23477076e": 3, "03927304e": 3, "37294535e": 3, "82793878e": 3, "98745068e": 3, "66895325e": 3, "23292367e": 3, "10333179e": 3, "18105487e": 3, "18720374e": 3, "63538669e": 3, "05279679e": 3, "84617660e": 3, "36079976e": 3, "65221505e": 3, "49395692e": 3, "49354127e": 3, "11598598e": 3, "69099449e": 3, "00058531e": 3, "99014492e": 3, "01872659e": 3, "09867117e": 3, "11779837e": 3, "72051876e": 3, "16425973e": 3, "55501236e": 3, "27700973e": 3, "95493964e": 3, "48720016e": 3, "19935370e": 3, "88663180e": 3, "61421491e": 3, "77020850e": 3, "90073667e": 3, "58287556e": 3, "31739502e": 3, "24912421e": 3, "36175571e": 3, "07356011e": 3, "08861732e": 3, "12810986e": 3, "63144487e": 3, "04804917e": 3, "07014505e": 3, "89177704e": 3, "71612667e": 3, "13383770e": 3, "10364583e": 3, "23247878e": 3, "50403542e": 3, "85905283e": 3, "04965615e": 3, "41705014e": 3, "18520031e": 3, "83203899e": 3, "82243434e": 3, "17650119e": 3, "03259858e": 3, "09180754e": 3, "23390489e": 3, "19385624e": 3, "53770786e": 3, "21211798e": 3, "55619537e": 3, "93484291e": 3, "92528076e": 3, "76694314e": 3, "67991698e": 3, "76553864e": 3, "38162732e": 3, "60399467e": 3, "50400485e": 3, "27424807e": 3, "29244234e": 3, "06665135e": 3, "81940581e": 3, "77511940e": 3, "64243570e": 3, "coeffici": [3, 6, 23, 39, 40, 44, 51, 97, 98, 136, 152, 155, 156, 162, 163, 164, 168, 169, 172, 175, 228, 230, 297, 298, 313, 315, 318, 324, 333, 337, 459], "voxel": [3, 15, 25, 28, 33, 36, 37, 39, 40, 41, 44, 45, 46, 49, 50, 58, 59, 65, 67, 68, 73, 78, 80, 81, 83, 86, 88, 89, 91, 97, 99, 101, 104, 107, 112, 114, 116, 124, 130, 133, 134, 135, 141, 150, 152, 155, 159, 160, 162, 164, 165, 166, 168, 171, 172, 173, 175, 176, 177, 180, 182, 189, 192, 209, 210, 213, 220, 223, 226, 236, 244, 245, 252, 257, 261, 262, 275, 293, 296, 297, 298, 299, 300, 312, 319, 320, 324, 333, 337, 339, 340, 341, 342, 344, 346, 347, 348, 357, 358, 361, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 382, 385, 398, 413, 416, 421, 424, 429, 435, 440, 446, 447, 448, 449, 450, 451, 455, 456, 457, 458, 459, 465, 466, 467, 480, 482, 483], "464": [3, 33, 97], "get": [3, 4, 6, 14, 21, 22, 33, 35, 40, 41, 51, 52, 56, 58, 62, 65, 66, 67, 69, 74, 77, 80, 85, 87, 99, 100, 103, 107, 117, 135, 140, 155, 157, 160, 161, 162, 167, 169, 171, 174, 176, 182, 228, 229, 230, 238, 244, 245, 247, 248, 273, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 307, 314, 316, 317, 324, 337, 339, 347, 352, 356, 368, 369, 370, 371, 372, 373, 374, 375, 385, 386, 388, 389, 416, 446, 447, 448, 449, 457, 481], "coef_img_": [3, 29, 30, 31, 39, 42, 43, 110, 162, 182, 292, 293, 294, 295, 297, 298], "coef_img": [3, 30, 43, 110, 116], "niftiimag": [3, 157, 170, 171, 180, 181], "save": [3, 6, 9, 14, 21, 23, 29, 33, 41, 42, 43, 48, 49, 50, 51, 61, 65, 70, 71, 74, 85, 90, 91, 93, 97, 98, 99, 102, 106, 117, 125, 127, 141, 150, 155, 160, 169, 180, 181, 182, 210, 271, 273, 297, 298, 301, 302, 303, 317, 324, 337, 364, 369, 370, 372, 373, 374, 375, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 457, 459, 483], "pathlib": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93, 100, 107, 125, 149, 155, 180, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 275, 276, 277, 278, 279, 280, 281, 282, 292, 293, 294, 295, 297, 298, 324, 327, 337, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 430, 447, 448, 449, 461, 463, 464, 465], "path": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93, 100, 107, 115, 116, 117, 125, 132, 143, 149, 151, 152, 155, 162, 168, 169, 170, 178, 179, 182, 189, 200, 210, 213, 223, 224, 229, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 289, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 324, 327, 337, 343, 352, 362, 363, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 399, 430, 447, 448, 449, 457, 461, 463, 464, 465, 483], "output_dir": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93, 429], "cwd": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93], "plot_decoding_tutori": [3, 7, 143, 155, 162, 170, 482], "mkdir": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93], "exist_ok": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93], "parent": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93, 170], "output": [3, 4, 6, 9, 15, 16, 22, 23, 29, 33, 34, 36, 41, 44, 48, 49, 51, 52, 54, 55, 56, 58, 65, 67, 70, 79, 85, 93, 107, 115, 116, 123, 124, 126, 132, 138, 150, 152, 155, 156, 161, 166, 170, 175, 177, 178, 179, 181, 182, 228, 229, 231, 232, 233, 234, 235, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 307, 314, 316, 317, 321, 324, 337, 339, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 354, 356, 357, 358, 359, 360, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 420, 421, 427, 428, 430, 433, 434, 435, 442, 443, 446, 447, 448, 449, 452, 453, 455, 456, 458, 459, 465, 480, 483], "to_filenam": [3, 4, 6, 29, 48, 49, 55, 70, 85, 93, 181], "haxby_svc_weight": 3, "00_tutori": [3, 4, 6, 7, 162, 482], "dim": [3, 21, 23, 29, 47, 56, 90, 131, 133, 137, 155, 162, 312, 314, 316, 317, 420, 433, 434, 435, 442], "doe": [3, 6, 29, 49, 65, 66, 74, 101, 116, 117, 127, 130, 139, 143, 152, 155, 162, 163, 167, 169, 170, 171, 172, 177, 182, 238, 248, 260, 313, 315, 318, 327, 348, 360, 362, 364, 381, 389, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 446, 462, 480], "than": [3, 4, 6, 15, 31, 32, 35, 36, 39, 40, 41, 42, 43, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 67, 68, 70, 76, 78, 80, 85, 87, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 115, 116, 117, 126, 130, 133, 134, 135, 136, 137, 139, 143, 148, 150, 155, 156, 159, 161, 162, 163, 164, 165, 167, 169, 170, 172, 175, 178, 180, 181, 182, 192, 214, 227, 244, 245, 271, 273, 277, 292, 293, 294, 295, 299, 300, 324, 333, 339, 340, 341, 348, 353, 361, 362, 365, 366, 368, 370, 371, 373, 374, 385, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 416, 421, 422, 427, 430, 431, 435, 439, 440, 441, 443, 445, 449, 458, 460, 462, 465, 467], "answer": [3, 481], "question": [3, 51, 64, 65, 98, 159, 177, 178, 182, 190, 257, 481], "random": [3, 40, 41, 44, 51, 55, 63, 97, 98, 101, 110, 114, 135, 147, 155, 159, 160, 161, 162, 169, 170, 195, 241, 299, 300, 314, 316, 317, 324, 333, 339, 385, 446, 447, 449, 451], "compar": [3, 6, 30, 31, 33, 35, 39, 41, 46, 51, 56, 58, 59, 65, 76, 78, 79, 82, 85, 93, 95, 98, 112, 114, 117, 119, 143, 155, 157, 158, 161, 162, 163, 164, 165, 166, 169, 171, 172, 175, 182, 195, 214, 228, 230, 243, 246, 252, 257, 353, 354, 368, 369, 370, 371, 372, 373, 374, 375, 417, 418, 422, 429, 435, 440, 461, 467, 480, 482, 483], "dummi": [3, 98, 148, 155, 162, 163, 165, 170, 292, 293, 294, 295, 331], "replac": [3, 4, 30, 32, 35, 36, 40, 41, 42, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 68, 76, 78, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 110, 116, 123, 124, 125, 134, 135, 140, 143, 146, 147, 148, 149, 150, 155, 165, 169, 170, 178, 275, 342, 359, 365, 376, 379, 461], "dummy_decod": 3, "dummy_classifi": [3, 32, 292, 294], "simpli": [3, 65, 66, 67, 70, 88, 100, 102, 104, 107, 117, 172, 178, 182, 192, 240, 341, 353, 359, 428, 433, 434, 435], "mean": [3, 6, 14, 15, 16, 18, 21, 22, 23, 25, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 49, 50, 51, 55, 56, 58, 61, 65, 68, 69, 70, 76, 82, 88, 90, 91, 93, 94, 95, 97, 101, 102, 103, 110, 112, 117, 133, 137, 140, 143, 147, 149, 155, 156, 159, 160, 162, 169, 170, 172, 175, 177, 181, 182, 188, 195, 228, 229, 230, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 292, 293, 294, 295, 296, 297, 298, 299, 300, 314, 316, 317, 324, 332, 333, 337, 339, 340, 341, 343, 348, 353, 354, 365, 366, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 385, 420, 421, 433, 434, 435, 436, 438, 439, 440, 442, 446, 447, 448, 449, 451, 452, 455, 456, 459, 461, 462, 467, 482], "over": [3, 20, 48, 49, 51, 67, 69, 88, 116, 124, 146, 147, 155, 161, 162, 167, 168, 169, 174, 178, 181, 192, 198, 243, 300, 306, 324, 350, 354, 365, 386, 388, 389, 433, 437, 465, 480], "38888888888888895": 3, "6111111111111112": [3, 29], "jame": [3, 31, 32, 38, 97, 114, 195, 207, 241, 260, 316, 317], "m": [3, 12, 23, 30, 31, 32, 38, 41, 49, 58, 65, 69, 74, 97, 99, 101, 114, 133, 155, 156, 167, 168, 170, 175, 177, 178, 188, 189, 192, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 218, 219, 220, 222, 225, 226, 238, 242, 247, 248, 249, 251, 252, 254, 255, 258, 260, 268, 276, 280, 314, 316, 317, 339, 385, 481], "ida": [3, 31, 32, 38, 97, 114, 207, 260], "gobbini": [3, 31, 32, 38, 97, 114, 207, 260], "maura": [3, 31, 32, 38, 97, 114, 207, 260], "l": [3, 14, 31, 32, 37, 38, 41, 44, 51, 56, 58, 68, 69, 93, 97, 114, 125, 143, 150, 155, 156, 162, 163, 168, 177, 188, 189, 192, 199, 206, 207, 217, 219, 220, 221, 222, 225, 226, 236, 238, 248, 249, 251, 252, 254, 255, 256, 260, 268, 275, 324, 337, 365, 366, 386, 388, 389, 390, 391, 392, 393, 394, 395, 414, 420, 422, 425, 427, 428, 431, 433, 434, 435, 459, 480], "furei": [3, 31, 32, 38, 97, 114, 207, 260], "alumit": [3, 31, 32, 38, 97, 114, 207, 260], "ishai": [3, 31, 32, 38, 97, 114, 207, 260], "jennif": [3, 31, 32, 38, 97, 114, 207, 260], "schouten": [3, 31, 32, 38, 97, 114, 207, 260], "pietro": [3, 31, 32, 38, 97, 114, 207, 260], "pietrini": [3, 31, 32, 38, 97, 114, 207, 260], "distribut": [3, 6, 14, 15, 22, 23, 31, 32, 38, 48, 49, 55, 78, 93, 97, 114, 147, 151, 155, 162, 167, 169, 172, 175, 196, 201, 202, 203, 204, 205, 207, 215, 250, 260, 312, 339, 385, 429], "overlap": [3, 31, 32, 38, 54, 58, 88, 90, 91, 97, 114, 123, 125, 127, 155, 170, 175, 182, 188, 207, 260, 268, 369, 370, 372, 373, 375, 433, 467], "represent": [3, 16, 31, 32, 33, 36, 38, 52, 53, 56, 58, 62, 74, 76, 83, 93, 97, 99, 103, 114, 116, 158, 161, 167, 175, 179, 181, 207, 221, 256, 260, 292, 293, 294, 295, 296, 297, 298, 299, 300, 324, 337, 342, 343, 346, 347, 348, 349, 350, 351, 352, 354, 356, 357, 358, 359, 360, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 420, 421, 427, 428, 430, 433, 434, 435, 442, 443, 447, 449, 452, 453, 455, 456, 459, 465, 483], "293": [3, 31, 32, 33, 38, 41, 65, 71, 97, 114, 207, 260, 467], "5539": [3, 31, 32, 38, 97, 114, 207, 260], "2425": [3, 31, 32, 38, 97, 114, 207, 260], "2430": [3, 31, 32, 38, 97, 114, 207, 260], "2001": [3, 31, 32, 38, 97, 101, 114, 116, 166, 176, 180, 189, 207, 238, 260, 385, 483], "sciencemag": [3, 31, 32, 38, 58, 97, 114, 199, 207, 254, 260], "content": [3, 31, 32, 38, 58, 65, 67, 83, 97, 114, 125, 155, 166, 167, 170, 177, 249, 254, 260, 268, 342, 461], "arxiv": [3, 31, 32, 38, 58, 69, 97, 101, 114, 156, 162, 167, 169, 188, 195, 196, 199, 201, 202, 203, 204, 205, 207, 217, 220, 221, 222, 225, 226, 229, 232, 241, 242, 248, 249, 251, 252, 254, 256, 260, 268, 275, 280, 342, 385, 461], "pdf": [3, 15, 31, 32, 38, 55, 58, 66, 69, 97, 101, 114, 125, 152, 155, 162, 167, 168, 188, 192, 195, 196, 199, 201, 202, 203, 204, 205, 207, 217, 220, 222, 225, 241, 242, 248, 249, 251, 254, 260, 268, 275, 280, 342, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 461], "1126": [3, 31, 32, 38, 58, 97, 114, 177, 192, 199, 207, 240, 254, 260], "1063736": [3, 31, 32, 38, 97, 114, 207, 260], "anova": [3, 28, 35, 42, 45, 104, 105, 112, 135, 155, 166, 167, 168, 175, 182, 260, 292, 293, 294, 295, 297, 298, 349, 435, 440, 442, 482, 483], "hous": [3, 18, 28, 32, 33, 45, 93, 96, 108, 112, 124, 155, 167, 176, 180, 181, 206, 207, 260, 292, 294, 296, 347, 349, 352, 354, 355, 368, 374, 385, 413, 428, 432, 435, 440, 442, 482], "For": [3, 4, 6, 9, 14, 15, 19, 23, 24, 29, 30, 32, 34, 35, 36, 40, 41, 48, 50, 51, 54, 63, 65, 67, 69, 70, 71, 78, 79, 85, 88, 90, 97, 99, 102, 104, 107, 116, 117, 140, 150, 155, 156, 157, 159, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 174, 175, 177, 178, 180, 181, 182, 187, 188, 189, 190, 191, 194, 195, 197, 198, 200, 206, 207, 208, 209, 213, 214, 215, 217, 221, 222, 224, 225, 226, 228, 235, 238, 239, 240, 244, 245, 247, 248, 249, 251, 252, 261, 271, 273, 275, 286, 291, 292, 293, 294, 295, 297, 298, 299, 300, 314, 315, 316, 317, 324, 331, 337, 339, 354, 362, 365, 366, 369, 370, 372, 373, 375, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 420, 425, 428, 430, 433, 434, 435, 436, 437, 438, 439, 447, 449, 450, 451, 457, 458, 459, 460, 465, 467, 480, 481], "precomput": [3, 298], "frem": [3, 28, 45, 112, 114, 124, 146, 155, 162, 163, 166, 168, 175, 176, 260, 269, 294, 295, 298, 349, 354, 432, 435, 440, 482, 483], "fast": [3, 31, 39, 48, 49, 64, 65, 71, 99, 114, 143, 146, 155, 159, 161, 162, 163, 166, 169, 170, 175, 176, 194, 211, 266, 273, 294, 295, 300, 359, 447, 448, 454, 483], "ensembl": [3, 31, 39, 42, 114, 162, 163, 166, 168, 175, 176, 208, 294, 295, 483], "regular": [3, 31, 39, 44, 56, 65, 90, 93, 114, 117, 146, 155, 162, 163, 166, 168, 169, 175, 176, 177, 181, 229, 230, 232, 294, 295, 297, 298, 352, 481, 483], "robust": [3, 31, 39, 93, 114, 145, 155, 160, 162, 166, 175, 294, 295, 365, 366, 483], "spacenet": [3, 133, 155, 162, 163, 164, 166, 175, 297, 298, 483], "spatial": [3, 6, 31, 39, 43, 46, 49, 50, 54, 59, 67, 85, 93, 94, 97, 103, 107, 112, 114, 124, 146, 150, 155, 159, 161, 162, 165, 166, 172, 175, 176, 179, 182, 188, 189, 192, 195, 207, 208, 210, 214, 220, 222, 238, 241, 246, 248, 257, 260, 268, 292, 293, 294, 295, 296, 297, 298, 299, 300, 324, 337, 339, 350, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 433, 435, 440, 447, 449, 451, 467, 482, 483], "34": [3, 7, 15, 33, 50, 59, 62, 90, 114, 167, 466, 467, 482], "836": [3, 7, 482], "914": 3, "download": [4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 114, 115, 130, 131, 133, 134, 136, 140, 143, 146, 147, 149, 155, 156, 157, 159, 162, 170, 177, 184, 188, 197, 198, 210, 213, 214, 216, 221, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 291, 483], "exist": [4, 20, 48, 101, 160, 167, 170, 181, 221, 228, 229, 230, 271, 273, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 351, 368, 369, 370, 371, 372, 373, 374, 375, 432, 446, 447, 448, 449, 480], "ship": [4, 12, 93, 140, 155, 480], "mni152_file_path": [4, 177], "variabl": [4, 6, 14, 39, 42, 43, 44, 56, 67, 74, 76, 93, 99, 100, 107, 114, 125, 132, 150, 152, 155, 157, 162, 163, 164, 166, 167, 169, 170, 172, 175, 180, 182, 190, 209, 237, 282, 292, 293, 294, 295, 296, 297, 298, 311, 315, 324, 337, 353, 365], "mni152": [4, 92, 123, 149, 155, 172, 206, 208, 209, 220, 226, 239, 241, 248, 252, 261, 262, 283, 284, 285, 286, 287, 288, 292, 293, 294, 295, 297, 298, 299, 300, 349, 371, 374, 378, 381, 433, 434, 435, 442, 447], "templat": [4, 16, 22, 23, 48, 67, 74, 82, 95, 107, 112, 114, 123, 127, 128, 133, 138, 143, 146, 149, 152, 155, 160, 172, 175, 177, 181, 182, 189, 191, 192, 238, 240, 252, 261, 262, 275, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 299, 300, 352, 357, 358, 366, 371, 374, 378, 381, 420, 433, 434, 435, 440, 442, 447, 457, 482], "mni_icbm152_t1_tal_nlin_sym_09a_convert": [4, 177], "quickli": [4, 33, 61, 62, 70, 74, 156, 159, 169, 170, 178], "plot_img": [4, 6, 36, 125, 143, 150, 155, 177, 396, 398, 401, 403, 405, 407, 409, 411, 413, 480], "0x7fdc132b6960": 4, "veri": [4, 30, 31, 32, 35, 36, 39, 40, 42, 44, 49, 54, 65, 74, 75, 76, 78, 85, 93, 102, 116, 143, 155, 156, 157, 159, 162, 163, 164, 165, 168, 169, 170, 172, 175, 178, 182, 294, 295, 370, 373, 375, 416, 433, 460], "pretti": [4, 102], "simplest": [4, 69, 97, 117, 165, 169, 480], "possibl": [4, 6, 14, 15, 16, 44, 67, 69, 79, 80, 83, 93, 99, 116, 117, 133, 150, 152, 155, 156, 159, 162, 167, 169, 170, 172, 175, 177, 178, 181, 182, 215, 228, 229, 230, 236, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 312, 314, 316, 317, 324, 327, 337, 339, 346, 357, 362, 365, 368, 369, 370, 371, 372, 373, 374, 375, 415, 416, 422, 427, 431, 446, 447, 448, 449, 459, 480], "whole": [4, 6, 14, 42, 48, 50, 68, 88, 93, 114, 117, 125, 149, 155, 167, 168, 170, 171, 176, 181, 182, 195, 208, 209, 223, 241, 261, 271, 273, 283, 286, 292, 293, 294, 295, 299, 300, 371, 374, 378, 381, 385, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 433, 447, 449, 480], "make": [4, 6, 8, 15, 22, 23, 27, 30, 31, 36, 41, 47, 49, 51, 56, 58, 65, 66, 67, 68, 69, 74, 76, 78, 79, 83, 97, 103, 112, 114, 117, 123, 125, 126, 127, 128, 129, 134, 140, 149, 150, 152, 155, 160, 162, 163, 167, 168, 171, 174, 175, 176, 177, 180, 182, 217, 242, 250, 260, 271, 275, 280, 289, 292, 293, 294, 295, 297, 298, 312, 357, 389, 390, 391, 392, 393, 394, 395, 397, 399, 400, 402, 404, 406, 408, 410, 412, 427, 430, 435, 437, 439, 440, 441, 442, 443, 445, 446, 463, 465, 480, 481, 482], "prettier": [4, 127, 155, 170], "exercis": [4, 177], "own": [4, 6, 49, 58, 99, 115, 117, 162, 165, 170, 227, 262, 483], "noth": [4, 167, 230, 299, 300, 313, 315, 318, 324, 337, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 428, 430, 433, 434, 435, 442], "string": [4, 15, 29, 33, 55, 71, 76, 78, 87, 99, 100, 107, 116, 127, 137, 138, 150, 152, 155, 170, 180, 191, 210, 229, 236, 238, 264, 265, 272, 274, 275, 279, 282, 291, 296, 297, 298, 299, 300, 314, 316, 317, 321, 322, 324, 326, 331, 337, 339, 340, 341, 342, 343, 352, 353, 356, 361, 362, 364, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 420, 421, 422, 423, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 450, 459, 461], "should": [4, 6, 14, 15, 32, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 64, 65, 66, 67, 68, 70, 78, 87, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 116, 117, 136, 137, 147, 150, 151, 155, 160, 161, 162, 163, 165, 169, 170, 172, 177, 178, 182, 223, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 275, 276, 277, 278, 279, 280, 281, 282, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 321, 324, 326, 327, 331, 332, 337, 338, 340, 341, 342, 352, 353, 355, 358, 360, 361, 363, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 385, 386, 419, 420, 422, 425, 427, 428, 430, 433, 434, 435, 436, 437, 439, 443, 446, 447, 448, 449, 450, 451, 455, 457, 458, 459, 461, 467, 478, 480, 481], "smooth_img": [4, 68, 93, 94, 102, 137, 143, 155, 180, 181, 182], "mm": [4, 15, 33, 37, 55, 58, 83, 86, 90, 94, 140, 155, 160, 181, 192, 220, 221, 243, 248, 256, 324, 337, 365, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 449, 450, 451, 459, 465, 466, 467], "smooth_anat_img": 4, "fwhm": [4, 65, 93, 94, 102, 104, 137, 143, 155, 175, 177, 181, 182, 359], "nibabel": [4, 33, 36, 44, 49, 52, 56, 62, 74, 80, 83, 90, 123, 124, 126, 134, 135, 137, 143, 148, 150, 152, 155, 169, 180, 181, 299, 300, 343, 344, 345, 352, 357, 358, 359, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 447, 449, 450, 451, 455, 456], "nifti1": [4, 33, 36, 49, 52, 56, 74, 80, 90, 143, 155, 359, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 447, 449, 450, 451, 455, 456], "nifti1imag": [4, 33, 36, 40, 43, 44, 49, 52, 56, 74, 80, 83, 90, 135, 136, 138, 143, 155, 160, 180, 242, 244, 245, 247, 248, 251, 262, 269, 283, 284, 285, 286, 287, 288, 292, 293, 294, 295, 299, 300, 319, 321, 324, 337, 339, 340, 341, 343, 345, 349, 350, 352, 353, 354, 357, 358, 359, 360, 361, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 396, 401, 403, 407, 413, 417, 418, 419, 447, 449, 450, 451, 455, 456], "0x7fdc188d54f0": 4, "0x7fdc18a0c140": 4, "could": [4, 6, 36, 49, 58, 65, 67, 68, 78, 84, 85, 92, 99, 104, 116, 117, 130, 146, 150, 151, 155, 162, 165, 167, 169, 170, 172, 177, 182, 312, 434, 465], "more_smooth_anat_img": 4, "0x7fdc132b41d0": 4, "read": [4, 23, 37, 44, 65, 67, 76, 80, 100, 102, 104, 106, 114, 117, 146, 155, 168, 170, 176, 177, 194, 210, 215, 264, 265, 266, 376], "onc": [4, 36, 49, 57, 70, 117, 150, 155, 156, 161, 162, 169, 171, 172, 174, 175, 178, 182, 446, 465], "style": [4, 128, 150, 155, 291], "haxbi": [4, 8, 15, 16, 27, 28, 45, 93, 101, 112, 114, 116, 134, 135, 155, 166, 168, 176, 180, 182, 184, 260, 292, 347, 349, 354, 368, 374, 413, 420, 432, 435, 440, 442, 480, 482, 483], "find": [4, 30, 32, 44, 50, 56, 69, 78, 99, 121, 155, 160, 161, 162, 164, 166, 169, 170, 172, 175, 178, 182, 192, 215, 224, 232, 240, 344, 379, 380, 382, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 419, 420, 442, 446, 448, 454, 480, 481, 483], "wildcard": [4, 180, 181, 291, 352], "anats_all_subject": 4, "subj": 4, "anats_all_subjects_smooth": 4, "124": [4, 33, 40, 41, 466, 467], "256": [4, 33, 41, 72, 83, 147, 155, 198, 243, 252, 467, 482], "ani": [4, 6, 49, 56, 58, 74, 79, 80, 99, 102, 103, 109, 112, 116, 123, 144, 146, 152, 155, 157, 159, 162, 163, 166, 167, 169, 170, 171, 172, 175, 178, 182, 236, 260, 271, 273, 277, 344, 349, 353, 359, 362, 363, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 430, 433, 449, 453, 458, 461, 465, 480, 481, 483], "plot_nilearn_101": [4, 7, 482], "necessari": [4, 62, 88, 91, 100, 107, 123, 143, 150, 155, 156, 159, 162, 170, 171, 178, 182, 238, 271, 273, 292, 293, 294, 295, 317, 324, 337, 374, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 467], "tool": [4, 8, 10, 11, 20, 23, 27, 32, 36, 48, 49, 78, 85, 86, 93, 99, 103, 112, 116, 133, 152, 155, 158, 163, 170, 171, 174, 176, 177, 179, 180, 182, 183, 185, 206, 260, 289, 354, 396, 398, 401, 403, 405, 407, 409, 411, 413, 420, 425, 427, 434, 435, 440, 442, 471, 480, 481, 482], "151": [4, 7, 33, 41, 106, 466, 467, 482], "177": [4, 33, 41, 466, 467], "matplotlib": [5, 6, 8, 9, 11, 15, 18, 24, 25, 27, 30, 32, 35, 38, 40, 41, 42, 43, 44, 48, 49, 51, 52, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 68, 71, 74, 77, 78, 79, 83, 90, 93, 98, 99, 100, 101, 104, 105, 110, 112, 121, 125, 126, 130, 135, 137, 138, 140, 143, 145, 150, 151, 155, 157, 162, 181, 370, 373, 375, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 449, 480, 481, 482], "pyplot": [5, 6, 11, 12, 15, 18, 24, 25, 30, 32, 34, 35, 38, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 63, 64, 65, 66, 68, 71, 74, 77, 78, 79, 83, 90, 93, 98, 99, 100, 101, 104, 105, 110, 157, 181, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 439, 440, 480], "plt": [5, 6, 11, 12, 15, 18, 24, 25, 30, 32, 34, 35, 38, 40, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 63, 64, 65, 66, 68, 71, 74, 77, 78, 79, 83, 90, 93, 98, 99, 100, 101, 104, 105, 110, 181, 420, 421, 422, 425, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442], "except": [5, 9, 12, 24, 38, 44, 49, 52, 57, 58, 66, 71, 77, 90, 98, 99, 102, 104, 105, 110, 147, 150, 155, 168, 170, 298, 352, 385], "importerror": [5, 9, 12, 24, 38, 44, 52, 57, 58, 66, 77, 90, 98, 104, 105, 110, 143, 155], "rais": [5, 12, 24, 32, 38, 44, 66, 77, 90, 93, 98, 104, 105, 110, 123, 124, 125, 126, 130, 137, 139, 140, 143, 150, 152, 155, 180, 228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 327, 331, 337, 339, 340, 343, 352, 356, 357, 368, 369, 370, 371, 372, 373, 374, 375, 381, 446, 447, 448, 449, 481], "runtimeerror": [5, 12, 24, 38, 44, 66, 77, 90, 98, 104, 105, 110], "librari": [5, 12, 24, 38, 44, 66, 77, 90, 93, 98, 104, 105, 110, 116, 140, 155, 165, 170, 177, 181, 227, 471, 480, 481], "modul": [5, 19, 26, 32, 34, 35, 36, 40, 41, 42, 47, 50, 51, 52, 53, 54, 55, 56, 58, 61, 86, 87, 88, 90, 91, 92, 93, 97, 98, 99, 101, 102, 103, 104, 105, 110, 114, 116, 117, 123, 124, 125, 126, 128, 135, 137, 138, 146, 150, 152, 155, 165, 170, 173, 177, 178, 182, 186, 271, 275, 292, 293, 294, 295, 314, 316, 317, 331, 339, 341, 351, 353, 471, 475, 476, 477, 478, 480], "np": [5, 6, 9, 11, 12, 14, 20, 22, 23, 24, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 74, 76, 78, 79, 83, 84, 86, 88, 93, 97, 99, 101, 102, 103, 104, 105, 106, 107, 110, 152, 155, 160, 170, 180, 181, 228, 248, 275, 313, 314, 315, 316, 317, 318, 343, 353, 385, 446, 448], "linspac": [5, 49, 61, 66], "2000": [5, 42, 49, 114, 143, 146, 155, 159, 180, 225, 251], "co": [5, 24, 83, 114, 171, 188, 201, 202, 203, 204, 205, 225, 251, 280], "line": [5, 9, 14, 21, 24, 48, 51, 90, 162, 169, 170, 178, 275, 342, 441, 461, 465, 481], "line2d": [5, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422], "0x7fdc1bb857f0": 5, "235": [5, 7, 33, 41, 466, 467, 482], "plot_python_101": [5, 7, 482], "tutori": [6, 7, 65, 97, 130, 140, 155, 162, 170, 175, 176, 177, 182, 207, 260, 292, 349, 354, 425, 434, 442, 482], "model": [6, 23, 28, 31, 32, 33, 34, 39, 41, 44, 45, 48, 50, 51, 60, 61, 63, 67, 69, 71, 72, 73, 74, 80, 81, 96, 97, 98, 101, 103, 104, 107, 108, 112, 114, 123, 124, 126, 137, 143, 146, 148, 150, 151, 152, 155, 156, 158, 160, 162, 166, 167, 168, 169, 170, 173, 175, 176, 177, 182, 183, 188, 216, 226, 228, 229, 232, 259, 262, 263, 266, 267, 268, 270, 281, 292, 293, 294, 295, 297, 298, 299, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 339, 340, 343, 344, 347, 348, 353, 354, 358, 361, 364, 365, 366, 368, 371, 374, 375, 385, 397, 398, 412, 413, 423, 424, 427, 434, 435, 440, 457, 459, 466, 467, 474, 481, 482, 483], "period": [6, 41, 65, 67, 107, 292, 293, 294, 295, 297, 298, 328, 329, 330, 334, 335, 336, 342, 369, 370, 371, 372, 373, 374, 375, 421, 447, 449, 461], "auditori": [6, 65, 67, 71, 76, 102, 104, 172, 184, 194, 256, 265, 266, 272, 278], "stimul": [6, 71, 162, 223], "versu": [6, 65, 67, 78, 79, 93, 97, 162, 163, 175, 207], "analys": [6, 99, 114, 125, 155, 162, 167, 171, 172, 173, 174, 175, 176, 180, 182, 192, 199, 212, 269, 468, 481], "nativ": [6, 60, 72, 112, 124, 136, 155, 171, 224, 279, 324, 331, 343, 351, 354, 357, 375, 435, 440, 482], "scan": [6, 23, 33, 36, 55, 58, 63, 64, 65, 66, 93, 99, 114, 148, 155, 159, 167, 175, 180, 190, 192, 206, 210, 223, 266, 299, 300, 324, 326, 331, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 421, 447, 449, 452, 453, 455, 461], "preprocess": [6, 11, 23, 29, 34, 37, 40, 41, 44, 70, 88, 91, 98, 100, 103, 107, 110, 114, 115, 124, 135, 155, 160, 161, 167, 168, 172, 175, 182, 187, 190, 210, 216, 236, 237, 257, 275, 281, 324, 327, 342, 363, 365, 368, 369, 370, 371, 372, 373, 374, 375, 449, 461, 467, 471, 483], "sensit": [6, 40, 48, 56, 114, 172, 175, 342, 366, 385, 461], "would": [6, 9, 14, 42, 50, 58, 65, 74, 77, 102, 110, 117, 125, 127, 148, 152, 155, 162, 169, 170, 171, 172, 178, 291, 292, 293, 294, 295, 297, 298, 300, 324, 326, 327, 331, 337, 339, 362, 376, 381, 421], "like": [6, 10, 11, 16, 34, 36, 40, 47, 49, 54, 56, 58, 65, 78, 80, 85, 88, 90, 91, 93, 99, 117, 125, 143, 147, 150, 151, 152, 155, 168, 169, 170, 171, 172, 174, 175, 178, 179, 181, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 311, 314, 315, 316, 317, 319, 321, 324, 326, 327, 337, 339, 340, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 420, 421, 425, 427, 428, 430, 431, 433, 434, 435, 436, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 465, 467, 469, 480, 483], "obtain": [6, 15, 22, 42, 43, 49, 54, 58, 63, 65, 67, 74, 76, 90, 93, 101, 104, 150, 155, 156, 157, 159, 161, 162, 164, 167, 169, 172, 175, 182, 188, 194, 199, 219, 230, 239, 241, 249, 261, 266, 283, 284, 287, 291, 297, 298, 341, 346, 357, 361, 370, 372, 373, 375, 385, 399, 426, 449, 467], "correct": [6, 42, 56, 74, 76, 78, 80, 100, 101, 104, 105, 114, 123, 124, 143, 146, 152, 155, 156, 167, 170, 172, 173, 175, 178, 192, 276, 290, 292, 293, 294, 295, 297, 298, 339, 340, 365, 366, 385, 421, 462, 483], "normal": [6, 24, 31, 37, 44, 55, 58, 67, 68, 100, 103, 107, 110, 116, 130, 155, 162, 169, 170, 171, 172, 175, 189, 208, 210, 229, 232, 238, 264, 275, 316, 317, 465], "smooth": [6, 29, 34, 42, 44, 49, 55, 68, 74, 80, 82, 93, 95, 100, 104, 112, 114, 136, 137, 155, 159, 161, 162, 163, 169, 175, 177, 179, 180, 192, 222, 257, 292, 293, 294, 295, 299, 300, 324, 337, 339, 354, 359, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 385, 425, 436, 438, 439, 440, 446, 447, 449, 451, 482, 483], "conduct": [6, 32, 117, 127, 155, 172, 223], "fil": [6, 223, 224, 278, 279], "geraint": 6, "ree": [6, 223], "under": [6, 9, 101, 152, 155, 162, 163, 167, 168, 169, 170, 171, 172, 175, 178, 188, 192, 215, 217, 223, 296, 346, 357, 358, 363, 378, 381, 385], "direct": [6, 15, 40, 51, 93, 97, 114, 137, 146, 155, 157, 158, 170, 178, 182, 198, 217, 222, 223, 243, 249, 275, 281, 292, 293, 324, 337, 359, 361, 362, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 402, 404, 405, 406, 408, 409, 410, 411, 412, 415, 416, 420, 422, 425, 427, 428, 431, 433, 434, 435, 450, 459, 480, 483], "karl": [6, 114, 223], "friston": [6, 114, 223, 342, 461], "method": [6, 14, 15, 26, 31, 36, 39, 44, 46, 48, 58, 59, 85, 88, 90, 91, 93, 99, 104, 112, 114, 115, 117, 124, 125, 126, 128, 132, 136, 140, 143, 146, 147, 148, 150, 152, 155, 156, 157, 159, 163, 164, 168, 169, 170, 175, 176, 177, 180, 181, 182, 188, 189, 192, 215, 221, 223, 225, 228, 229, 230, 240, 251, 257, 268, 271, 273, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 314, 315, 316, 317, 319, 324, 337, 339, 344, 347, 348, 349, 354, 357, 358, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 425, 434, 441, 443, 444, 445, 446, 447, 448, 449, 457, 461, 462, 480, 482, 483], "develop": [6, 47, 55, 56, 84, 88, 90, 91, 114, 126, 138, 143, 155, 156, 157, 159, 161, 169, 170, 177, 178, 184, 206, 218, 225, 230, 251, 257, 421], "spm": [6, 10, 11, 36, 49, 61, 65, 66, 69, 78, 85, 93, 114, 151, 152, 155, 166, 171, 175, 180, 184, 189, 238, 278, 279, 324, 326, 331, 334, 335, 336, 353, 483], "accord": [6, 41, 44, 67, 93, 99, 107, 123, 135, 136, 137, 140, 146, 148, 152, 155, 160, 167, 170, 199, 216, 226, 229, 236, 248, 290, 292, 293, 294, 295, 297, 298, 311, 342, 362, 385, 430, 431, 436, 438, 439, 443, 445, 448, 449, 460, 461, 480], "96": [6, 23, 30, 32, 33, 49, 52, 71, 83, 223, 466, 467], "tr": [6, 11, 23, 25, 33, 63, 66, 69, 107, 124, 139, 151, 155, 172, 175, 181, 216, 257, 328, 329, 330, 334, 335, 336, 353], "altern": [6, 9, 16, 20, 22, 52, 54, 58, 65, 70, 158, 159, 167, 175, 182, 223, 314, 316, 317, 385, 483], "42": [6, 24, 33, 36, 43, 62, 90, 91, 99, 103, 114, 189, 223, 466, 467, 480], "block": [6, 33, 51, 56, 58, 63, 99, 100, 115, 125, 155, 162, 169, 181, 192, 200, 223, 432, 469], "bi": [6, 223], "syllab": [6, 223], "word": [6, 14, 76, 93, 102, 104, 117, 162, 163, 170, 210, 215, 223, 271, 273], "binaur": [6, 223], "60": [6, 15, 33, 40, 41, 63, 98, 114, 157, 192, 213, 223, 270, 466, 467, 480], "fm00223_004": 6, "2t": [6, 223], "siemen": [6, 223], "magnetom": [6, 223], "vision": [6, 223], "64": [6, 10, 11, 19, 21, 33, 34, 36, 47, 49, 65, 78, 83, 85, 93, 147, 152, 155, 180, 192, 198, 223, 236, 239, 240, 243, 466, 467], "contigu": [6, 159, 169, 223, 385], "64x64x64": [6, 223], "3mm": [6, 223], "took": [6, 223], "05": [6, 12, 30, 32, 33, 44, 51, 53, 70, 74, 75, 76, 78, 80, 98, 108, 172, 189, 190, 191, 195, 214, 217, 218, 220, 223, 224, 225, 226, 237, 238, 241, 246, 247, 248, 251, 252, 275, 278, 279, 281, 314, 316, 317, 319, 466, 467, 482], "repeat": [6, 58, 65, 66, 162, 172, 223], "arbitrarili": [6, 223, 298], "subject_data": [6, 68, 69, 171], "abid": [6, 114, 134, 155, 170, 184, 236], "bid": [6, 60, 71, 72, 96, 99, 108, 112, 123, 125, 127, 143, 146, 148, 150, 152, 155, 171, 175, 184, 253, 258, 263, 276, 277, 290, 291, 324, 327, 337, 365, 366, 367, 374, 423, 427, 429, 440, 457, 458, 459, 477, 482], "organ": [6, 58, 114, 130, 143, 149, 151, 155, 170, 175, 177, 192, 219, 220, 221, 226, 248, 252, 255, 339, 366, 385, 401, 464, 465, 481], "fetch_spm_auditori": [6, 68, 223], "sep": [6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 71, 93, 101, 180, 386, 388, 389], "n": [6, 14, 26, 41, 42, 49, 51, 56, 57, 58, 62, 68, 69, 76, 78, 79, 83, 90, 93, 98, 99, 101, 102, 104, 105, 106, 113, 114, 118, 119, 121, 122, 128, 130, 133, 155, 163, 169, 170, 172, 189, 199, 206, 218, 238, 247, 254, 257, 258, 268, 276, 299, 300, 311, 315, 316, 317, 324, 333, 365, 366, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 381, 382, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 431, 449, 452, 453, 461, 481], "spm_auditori": [6, 278], "sub001": [6, 278, 279], "fm00223": 6, "fm00223_005": 6, "fm00223_006": 6, "fm00223_007": 6, "fm00223_008": 6, "anatomi": [6, 42, 67, 74, 194, 221, 252], "plot_anat": [6, 15, 18, 50, 150, 155, 160, 428, 435, 480], "cbar_tick_format": [6, 25, 147, 150, 155, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 425, 427, 428, 430, 434, 435, 436, 438, 439], "0x7fdc18a9cec0": 6, "next": [6, 14, 54, 55, 58, 63, 64, 65, 67, 68, 70, 74, 77, 78, 79, 80, 107, 138, 141, 150, 155, 157, 168, 169, 170, 172, 178, 467], "concaten": [6, 37, 47, 49, 53, 57, 99, 156, 181, 343, 349, 365, 449], "averag": [6, 9, 24, 30, 37, 49, 51, 68, 93, 114, 146, 149, 155, 159, 163, 164, 174, 175, 192, 201, 202, 203, 204, 205, 208, 212, 236, 261, 269, 280, 286, 292, 293, 306, 354, 359, 365, 432, 436, 438, 439, 447, 465], "activ": [6, 14, 15, 16, 30, 32, 40, 41, 49, 65, 67, 68, 69, 70, 75, 76, 78, 79, 80, 99, 107, 114, 116, 156, 157, 160, 161, 162, 166, 167, 169, 170, 171, 172, 174, 175, 177, 178, 182, 188, 189, 192, 194, 199, 212, 213, 214, 222, 230, 236, 238, 246, 249, 268, 269, 270, 289, 319, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 419, 449, 451, 481], "fmri_img": [6, 34, 36, 37, 64, 65, 67, 68, 69, 70, 93, 107, 171], "must": [6, 34, 71, 93, 152, 155, 162, 163, 165, 167, 169, 170, 171, 172, 178, 180, 182, 188, 229, 230, 232, 238, 260, 292, 293, 294, 295, 296, 297, 298, 299, 311, 315, 324, 337, 338, 339, 342, 348, 354, 357, 359, 364, 365, 368, 369, 371, 372, 374, 377, 379, 380, 381, 382, 383, 384, 385, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 426, 433, 435, 436, 437, 438, 439, 441, 443, 445, 447, 452, 455, 456, 458, 459, 461, 462, 465, 480], "descript": [6, 58, 115, 117, 123, 125, 126, 127, 146, 150, 155, 170, 178, 180, 181, 192, 200, 211, 220, 223, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 259, 263, 267, 268, 269, 271, 272, 273, 274, 278, 279, 281, 326, 339, 342, 346, 354, 359, 360, 366, 385, 483], "typic": [6, 71, 77, 78, 99, 159, 161, 163, 167, 170, 172, 175, 180, 181, 182, 187, 282, 294, 295, 298, 314, 364, 375, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 433, 434, 435, 442, 447, 480], "event": [6, 60, 62, 63, 64, 65, 66, 67, 68, 69, 72, 99, 100, 107, 112, 114, 125, 146, 147, 155, 162, 172, 173, 211, 267, 324, 325, 326, 327, 331, 426, 481, 482, 483], "tsv": [6, 47, 52, 53, 55, 56, 58, 60, 62, 72, 100, 107, 112, 125, 155, 171, 197, 257, 327, 364, 365, 366, 426, 482], "read_tabl": [6, 64, 65, 67, 68, 69], "onset": [6, 33, 63, 64, 65, 66, 71, 99, 125, 146, 155, 171, 224, 279, 324, 325, 326, 328, 329, 330, 331, 334, 335, 336, 426], "durat": [6, 33, 63, 65, 66, 71, 125, 155, 171, 172, 180, 326, 331, 426], "trial_typ": [6, 33, 63, 64, 65, 71, 99, 100, 210, 331, 426], "84": [6, 33, 49, 90, 99, 114, 344, 365, 466, 467], "126": [6, 33, 41, 43, 56, 70, 90, 149, 155, 466, 467], "168": [6, 33, 41, 54, 55, 56, 58, 88, 90, 160, 466, 467], "210": [6, 22, 33, 41, 71, 114, 208, 261, 342, 461, 466, 467], "252": [6, 33, 41, 93, 466, 467], "294": [6, 33, 41, 467], "336": [6, 33, 41, 467], "378": [6, 33, 467], "420": [6, 33], "462": [6, 33], "504": [6, 33, 62, 466], "13": [6, 20, 27, 30, 33, 48, 56, 59, 62, 69, 70, 76, 80, 81, 88, 90, 95, 102, 106, 108, 114, 118, 124, 126, 128, 155, 167, 193, 197, 228, 240, 241, 249, 256, 275, 311, 315, 321, 365, 372, 373, 385, 421, 452, 453, 466, 467, 482], "546": [6, 33], "14": [6, 18, 30, 33, 36, 40, 45, 62, 68, 76, 90, 102, 114, 119, 121, 133, 135, 136, 137, 140, 143, 155, 167, 192, 196, 220, 242, 248, 438, 466, 467, 482], "588": [6, 33], "15": [6, 7, 22, 23, 24, 30, 33, 41, 44, 48, 49, 51, 61, 62, 65, 68, 71, 76, 77, 83, 90, 93, 101, 102, 106, 108, 114, 118, 122, 125, 126, 136, 140, 150, 155, 189, 196, 228, 238, 250, 372, 373, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 421, 452, 453, 466, 467, 482], "630": [6, 33], "firstlevelmodel": [6, 61, 64, 65, 68, 69, 70, 99, 148, 150, 152, 155, 171, 327, 337, 339, 364, 459], "design": [6, 33, 41, 44, 60, 61, 62, 64, 67, 68, 69, 70, 72, 73, 74, 75, 78, 79, 80, 81, 100, 104, 107, 112, 114, 124, 146, 147, 148, 150, 155, 162, 165, 169, 170, 172, 173, 174, 175, 189, 200, 211, 259, 266, 311, 314, 315, 316, 317, 322, 324, 325, 331, 333, 337, 338, 339, 340, 347, 353, 364, 367, 423, 424, 435, 440, 459, 466, 482, 483], "matrix": [6, 22, 33, 37, 40, 41, 44, 47, 50, 51, 53, 61, 62, 63, 65, 67, 68, 69, 70, 73, 74, 75, 76, 78, 79, 80, 81, 83, 90, 91, 99, 100, 102, 104, 107, 112, 123, 124, 138, 143, 146, 155, 159, 160, 162, 163, 169, 172, 173, 174, 175, 176, 177, 180, 181, 182, 200, 228, 229, 230, 231, 232, 233, 235, 259, 271, 273, 292, 293, 294, 295, 297, 298, 299, 300, 311, 314, 315, 316, 317, 322, 324, 325, 331, 333, 337, 338, 339, 344, 354, 355, 357, 360, 364, 367, 368, 371, 374, 377, 379, 380, 382, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 423, 424, 432, 446, 447, 448, 459, 466, 482, 483], "first_level": [6, 33, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 77, 99, 100, 107, 125, 148, 150, 152, 155, 171, 426, 459], "level": [6, 9, 14, 15, 18, 33, 39, 48, 49, 51, 56, 63, 68, 69, 72, 74, 81, 96, 103, 104, 108, 114, 123, 124, 125, 126, 127, 146, 147, 152, 155, 158, 159, 163, 166, 169, 170, 172, 173, 175, 178, 180, 184, 186, 192, 194, 224, 228, 229, 230, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 312, 314, 316, 317, 319, 320, 324, 327, 331, 333, 337, 338, 339, 340, 342, 347, 348, 353, 358, 361, 362, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 381, 383, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 422, 423, 424, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 442, 446, 447, 448, 449, 454, 457, 458, 459, 461, 465, 477, 480, 482, 483], "t_r": [6, 11, 33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 62, 64, 65, 67, 68, 88, 90, 91, 98, 99, 107, 140, 151, 155, 182, 292, 293, 294, 295, 297, 298, 299, 300, 307, 324, 326, 327, 331, 342, 369, 370, 371, 372, 373, 374, 375, 421, 447, 449, 461, 466, 467], "noise_model": [6, 33, 65, 324, 327, 333, 466], "ar1": [6, 33, 65, 324, 327, 333, 466], "covari": [6, 42, 46, 57, 58, 59, 61, 67, 101, 112, 114, 136, 155, 157, 158, 160, 176, 188, 228, 229, 230, 231, 232, 246, 257, 268, 311, 313, 314, 315, 316, 317, 368, 373, 385, 418, 422, 432, 440, 441, 482, 483], "lag": [6, 47, 64, 65], "depend": [6, 14, 15, 39, 65, 70, 88, 94, 99, 101, 104, 114, 123, 126, 130, 135, 140, 143, 155, 163, 167, 169, 170, 172, 175, 178, 180, 236, 240, 241, 244, 245, 249, 252, 257, 268, 292, 293, 294, 295, 297, 298, 299, 300, 311, 315, 324, 337, 339, 340, 347, 371, 374, 384, 385, 433, 447, 458, 459, 480], "rescal": [6, 23, 33, 40, 79, 124, 149, 155, 386, 388, 389, 424, 436, 438, 439, 445], "seri": [6, 33, 46, 47, 51, 56, 60, 65, 72, 91, 93, 94, 96, 108, 112, 114, 116, 123, 126, 130, 147, 151, 155, 156, 158, 160, 162, 167, 172, 173, 179, 180, 181, 192, 217, 222, 228, 263, 275, 276, 278, 281, 290, 299, 300, 311, 324, 327, 337, 339, 342, 343, 354, 359, 365, 368, 371, 372, 373, 374, 375, 376, 379, 398, 413, 421, 424, 435, 451, 452, 453, 458, 462, 467, 472, 482, 483], "varianc": [6, 33, 40, 42, 48, 55, 56, 57, 58, 65, 68, 79, 143, 146, 147, 155, 162, 167, 169, 175, 182, 228, 232, 292, 293, 294, 295, 299, 300, 312, 314, 316, 317, 320, 321, 324, 333, 337, 342, 348, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 421, 447, 449, 452, 461, 462], "hrf_model": [6, 33, 61, 63, 64, 65, 67, 69, 107, 324, 326, 327, 331, 466], "canon": [6, 50, 65, 69, 83, 133, 155, 175, 186, 299], "hrf": [6, 64, 65, 66, 67, 107, 150, 152, 155, 162, 173, 175, 324, 326, 328, 329, 330, 331, 334, 335, 336, 483], "dispers": [6, 65, 66, 171, 314, 316, 317, 324, 326, 328, 331, 334], "deriv": [6, 46, 59, 62, 66, 67, 69, 99, 100, 103, 107, 112, 125, 147, 149, 150, 155, 161, 169, 171, 175, 176, 182, 192, 195, 206, 208, 210, 222, 236, 257, 299, 300, 324, 326, 327, 328, 330, 331, 334, 336, 337, 339, 350, 362, 363, 364, 365, 366, 386, 387, 414, 421, 433, 435, 436, 438, 439, 440, 447, 482], "drift_model": [6, 33, 63, 65, 68, 69, 171, 324, 327, 331, 466], "cosin": [6, 33, 65, 67, 68, 69, 107, 123, 125, 148, 155, 192, 324, 327, 331, 365, 461, 466], "drift": [6, 67, 68, 69, 99, 107, 192, 324, 331, 365, 461], "slow": [6, 36, 44, 65, 168, 169, 170, 182, 192, 480], "oscil": [6, 65, 114], "high_pass": [6, 33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 69, 88, 90, 91, 98, 99, 140, 155, 182, 292, 293, 294, 295, 297, 298, 299, 300, 307, 324, 327, 331, 342, 365, 366, 369, 370, 371, 372, 373, 374, 375, 447, 449, 460, 461, 466, 467], "hz": [6, 33, 65, 69, 182, 192, 324, 331, 466], "cutoff": [6, 65, 67, 69, 88, 107, 148, 155, 179, 292, 293, 294, 295, 297, 298, 342, 369, 370, 371, 372, 373, 374, 375, 447, 449, 460, 461, 483], "frequenc": [6, 65, 121, 155, 182, 236, 292, 293, 294, 295, 297, 298, 324, 331, 342, 365, 369, 370, 371, 372, 373, 374, 375, 447, 449, 460, 461], "invers": [6, 46, 58, 59, 97, 112, 114, 145, 155, 157, 158, 162, 169, 176, 179, 230, 235, 246, 257, 314, 316, 317, 321, 368, 373, 418, 422, 431, 432, 440, 441, 446, 482, 483], "fmri_glm": [6, 68, 69, 70, 171], "inspect": [6, 40, 48, 55, 65, 68, 70, 88, 91, 157, 162, 177, 190, 324, 337, 467], "repres": [6, 15, 20, 33, 35, 51, 52, 54, 55, 67, 75, 78, 93, 114, 135, 147, 155, 156, 157, 160, 161, 170, 172, 174, 175, 180, 181, 182, 192, 198, 215, 236, 240, 243, 257, 285, 286, 288, 324, 337, 346, 357, 368, 369, 370, 371, 372, 373, 374, 375, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 417, 422, 427, 431, 449, 452, 459, 463, 465, 480], "predictor": [6, 40, 171, 172, 316, 317, 366], "design_matrix": [6, 41, 61, 62, 64, 65, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 107, 325, 331, 337, 338, 339, 367, 423, 424], "design_matrices_": [6, 64, 65, 68, 99], "formal": [6, 223], "taken": [6, 65, 99, 163, 169, 327, 337, 339, 358, 369, 370, 372, 373, 375, 449], "implictili": 6, "plot_design_matrix": [6, 63, 64, 65, 72, 74, 77, 79, 99, 171, 174, 482], "write": [6, 41, 70, 112, 117, 123, 150, 152, 155, 169, 170, 178, 301, 302, 303, 364, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 457], "plot_single_subject_single_run": [6, 7, 482], "output_fil": [6, 15, 23, 399, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 480], "png": [6, 9, 15, 23, 41, 61, 176, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 480], "respons": [6, 60, 68, 69, 71, 72, 78, 79, 112, 150, 155, 162, 171, 172, 175, 177, 178, 207, 224, 267, 324, 326, 328, 329, 330, 331, 334, 336, 423, 424, 435, 482], "profil": [6, 169, 170, 311, 315], "region": [6, 10, 15, 16, 19, 23, 40, 42, 43, 44, 46, 48, 49, 52, 55, 56, 58, 59, 65, 68, 69, 82, 95, 98, 112, 114, 123, 125, 127, 128, 132, 134, 135, 138, 143, 146, 148, 150, 155, 156, 158, 161, 162, 168, 171, 172, 175, 177, 179, 181, 189, 192, 195, 198, 199, 206, 207, 209, 212, 214, 218, 221, 226, 228, 236, 238, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 260, 269, 272, 299, 300, 306, 307, 347, 349, 352, 354, 355, 359, 361, 366, 368, 369, 370, 372, 373, 375, 398, 416, 417, 418, 419, 420, 422, 425, 432, 433, 434, 435, 437, 438, 440, 441, 457, 467, 480, 482, 483], "xlabel": [6, 25, 30, 32, 34, 42, 48, 49, 51, 55, 58, 66, 98, 181], "access": [6, 33, 48, 56, 61, 62, 65, 70, 74, 114, 116, 124, 150, 155, 157, 161, 169, 170, 171, 179, 180, 182, 237, 238, 241, 246, 247, 248, 251, 252, 275, 278, 279, 281, 312, 399, 471, 483], "beta": [6, 26, 39, 42, 65, 69, 96, 108, 112, 114, 126, 151, 171, 175, 188, 263, 268, 292, 293, 294, 295, 311, 314, 315, 316, 317, 324, 327, 343, 368, 374, 375, 398, 424, 435, 482], "role": [6, 150, 155], "potenti": [6, 54, 55, 90, 93, 99, 114, 149, 155, 167, 170, 175, 178, 249, 339, 370, 373, 467], "weight": [6, 29, 39, 42, 43, 44, 116, 117, 143, 155, 156, 163, 165, 166, 169, 170, 172, 182, 206, 208, 215, 236, 261, 271, 273, 292, 293, 294, 295, 297, 298, 321, 364, 441, 453, 483], "associ": [6, 14, 47, 71, 74, 76, 104, 123, 155, 162, 167, 170, 172, 174, 175, 238, 276, 296, 312, 339, 365, 366, 385, 458, 465], "nutshel": 6, "combin": [6, 15, 40, 41, 70, 101, 103, 114, 123, 126, 149, 155, 162, 167, 172, 175, 182, 188, 192, 206, 209, 213, 221, 236, 270, 292, 293, 294, 295, 297, 298, 299, 300, 324, 337, 339, 365, 404, 405, 408, 409, 410, 411, 423], "consid": [6, 32, 39, 53, 54, 55, 65, 66, 79, 91, 93, 101, 103, 116, 130, 143, 150, 155, 167, 170, 188, 209, 226, 236, 252, 292, 293, 294, 295, 297, 298, 299, 300, 311, 315, 324, 326, 327, 331, 337, 339, 346, 352, 363, 370, 371, 373, 374, 379, 382, 385, 389, 434, 447, 450, 452, 453, 467], "two": [6, 14, 24, 25, 34, 40, 48, 55, 56, 58, 60, 65, 72, 73, 76, 81, 85, 87, 88, 93, 97, 99, 100, 101, 107, 112, 117, 123, 135, 138, 143, 146, 147, 155, 156, 159, 161, 162, 164, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 181, 182, 188, 192, 224, 230, 234, 240, 259, 266, 279, 292, 293, 294, 295, 299, 300, 314, 316, 317, 321, 324, 331, 337, 338, 339, 343, 349, 354, 357, 365, 366, 370, 373, 375, 385, 397, 424, 427, 429, 430, 435, 436, 437, 438, 439, 440, 445, 447, 449, 450, 451, 457, 458, 459, 464, 465, 466, 480, 482, 483], "isol": [6, 68, 69, 99, 162, 172], "zero": [6, 9, 14, 20, 22, 23, 36, 39, 44, 47, 53, 54, 68, 70, 76, 78, 93, 121, 126, 143, 147, 151, 155, 156, 160, 162, 163, 167, 168, 169, 172, 175, 181, 182, 228, 229, 230, 232, 275, 292, 293, 294, 295, 297, 298, 299, 311, 316, 317, 331, 337, 339, 342, 346, 359, 361, 365, 369, 370, 371, 372, 373, 374, 375, 376, 379, 382, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 434, 435, 437, 438, 447, 448, 449, 452, 453, 455, 456, 461, 467], "16": [6, 7, 13, 25, 27, 30, 32, 33, 34, 39, 42, 45, 48, 49, 54, 58, 62, 65, 66, 75, 76, 78, 79, 81, 83, 90, 102, 104, 108, 141, 148, 155, 169, 181, 187, 206, 223, 247, 370, 373, 375, 449, 466, 467, 480, 482], "active_minus_rest": 6, "plot_contrast_matrix": [6, 62, 64, 65], "ax": [6, 9, 11, 18, 21, 22, 23, 24, 31, 38, 40, 49, 51, 57, 61, 63, 64, 65, 68, 74, 77, 78, 79, 83, 90, 99, 100, 104, 107, 110, 137, 147, 148, 155, 356, 357, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439], "label": [6, 9, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 47, 49, 52, 53, 54, 58, 61, 64, 65, 66, 67, 82, 90, 93, 95, 97, 99, 101, 102, 107, 110, 112, 114, 116, 123, 124, 126, 127, 132, 135, 140, 143, 147, 148, 150, 152, 155, 157, 159, 162, 163, 165, 167, 170, 175, 180, 181, 182, 189, 191, 198, 199, 206, 207, 209, 213, 214, 218, 220, 225, 226, 236, 238, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 254, 256, 260, 270, 292, 293, 294, 295, 296, 297, 298, 306, 320, 324, 327, 331, 333, 338, 362, 365, 366, 369, 372, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 420, 421, 422, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 463, 472, 482], "below": [6, 9, 16, 20, 22, 39, 44, 49, 52, 54, 58, 64, 68, 93, 114, 135, 155, 159, 162, 163, 167, 169, 170, 171, 172, 174, 178, 181, 182, 187, 188, 229, 230, 232, 236, 257, 292, 293, 294, 295, 297, 298, 300, 362, 369, 370, 371, 372, 373, 374, 375, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 427, 428, 430, 434, 435, 436, 439, 442, 447, 449, 460, 461, 480], "account": [6, 65, 75, 93, 167, 170, 178, 182, 188, 209, 365, 369, 370, 372, 373, 375, 449], "eff_map": 6, "compute_contrast": [6, 33, 61, 62, 64, 65, 67, 68, 69, 70, 74, 75, 76, 78, 79, 80, 99, 100, 107, 123, 126, 127, 155, 171, 324, 337, 339, 459], "output_typ": [6, 61, 64, 65, 68, 69, 70, 74, 75, 76, 78, 79, 80, 99, 104, 324, 337, 385], "effect_s": [6, 70, 79, 99, 175, 312, 324, 337], "form": [6, 33, 40, 44, 49, 71, 104, 126, 155, 156, 157, 159, 160, 172, 175, 180, 206, 228, 229, 230, 276, 277, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 319, 324, 327, 331, 337, 339, 340, 362, 363, 368, 369, 370, 371, 372, 373, 374, 375, 385, 429, 442, 446, 447, 448, 449, 458, 459], "scale": [6, 15, 41, 49, 54, 61, 66, 68, 69, 71, 93, 114, 117, 133, 140, 150, 155, 163, 167, 182, 192, 194, 213, 215, 240, 266, 271, 273, 285, 286, 288, 297, 298, 311, 314, 315, 316, 317, 319, 324, 332, 337, 339, 340, 369, 370, 371, 372, 373, 374, 375, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 446, 447, 448, 458, 459, 461, 465, 467, 483], "gaussian": [6, 44, 78, 93, 114, 156, 169, 172, 182, 183, 192, 229, 232, 359], "z_map": [6, 33, 61, 62, 64, 65, 68, 69, 70, 74, 75, 76, 78, 80, 100, 324, 337], "z_score": [6, 61, 64, 65, 67, 68, 69, 70, 74, 75, 76, 78, 79, 80, 107, 312, 324, 337], "top": [6, 12, 15, 17, 25, 44, 56, 102, 146, 155, 170, 177, 181, 291, 422, 427, 428, 431, 433, 434, 435, 442, 480], "axial": [6, 14, 93, 324, 337, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 420, 422, 425, 427, 428, 431, 433, 434, 435, 459], "black_bg": [6, 13, 14, 36, 69, 149, 155, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 422, 425, 427, 428, 431, 433, 434, 435, 442, 443, 445], "minu": [6, 117, 172], "worri": [6, 24, 116], "valid": [6, 28, 32, 33, 36, 37, 40, 42, 44, 45, 51, 98, 101, 104, 105, 106, 112, 114, 124, 125, 130, 133, 146, 150, 151, 155, 156, 158, 163, 166, 170, 182, 192, 221, 230, 240, 243, 249, 260, 268, 292, 293, 294, 295, 296, 297, 298, 324, 325, 326, 331, 342, 346, 349, 354, 359, 360, 365, 366, 369, 372, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 445, 452, 458, 463, 464, 465, 482, 483], "procedur": [6, 31, 75, 76, 78, 83, 86, 101, 157, 162, 167, 172, 174, 175, 189, 192, 266, 323, 339, 385, 461, 476], "arbitrari": [6, 64, 75, 172, 178, 296, 337, 339], "risk": [6, 114, 177, 227], "aka": [6, 65, 107, 159, 172, 319], "control": [6, 8, 9, 11, 14, 15, 20, 23, 27, 33, 38, 40, 48, 56, 75, 78, 97, 112, 114, 124, 126, 128, 136, 137, 141, 143, 147, 155, 156, 160, 161, 162, 163, 166, 167, 169, 170, 172, 175, 179, 187, 190, 192, 228, 236, 264, 271, 273, 300, 319, 323, 324, 337, 340, 343, 354, 361, 365, 366, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 425, 427, 428, 430, 434, 435, 436, 438, 439, 440, 446, 459, 465, 466, 480, 482, 483], "posit": [6, 9, 14, 16, 17, 24, 48, 51, 58, 65, 69, 73, 78, 79, 80, 81, 83, 93, 98, 112, 114, 116, 127, 146, 150, 155, 162, 167, 169, 172, 174, 175, 182, 188, 229, 232, 236, 266, 268, 319, 324, 337, 339, 340, 361, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 419, 420, 422, 425, 427, 428, 430, 431, 433, 434, 435, 439, 440, 442, 443, 458, 459, 465, 467, 480, 482], "fpr": [6, 33, 80, 174, 175, 324, 337, 340, 459, 466], "alpha": [6, 15, 23, 24, 37, 39, 40, 44, 48, 57, 66, 74, 75, 76, 80, 105, 152, 156, 161, 168, 172, 229, 230, 232, 297, 298, 300, 314, 316, 317, 319, 323, 324, 337, 340, 361, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 422, 427, 431, 433, 434, 436, 438, 439, 459, 480], "certain": [6, 56, 140, 155, 162, 170, 172, 178, 188, 271, 357, 433], "001": [6, 33, 41, 44, 62, 75, 78, 79, 80, 100, 172, 229, 230, 232, 297, 298, 324, 337, 340, 459, 466], "chanc": [6, 33, 37, 51, 76, 78, 147, 155, 166, 167, 172, 483], "declar": [6, 170, 172, 229, 232], "inact": [6, 172], "threshold_stats_img": [6, 74, 76, 80, 174, 361], "_": [6, 22, 30, 36, 37, 42, 44, 47, 49, 51, 57, 62, 74, 76, 79, 93, 97, 101, 104, 105, 107, 123, 148, 152, 155, 162, 170, 276, 277, 327, 364], "height_control": [6, 74, 76, 80, 324, 337, 340, 459], "uncorrect": [6, 62, 75, 78, 79, 80, 100], "p": [6, 42, 62, 70, 74, 75, 76, 78, 79, 80, 93, 100, 101, 104, 105, 107, 114, 147, 155, 156, 167, 169, 172, 177, 187, 188, 189, 190, 195, 198, 200, 208, 222, 225, 228, 229, 232, 236, 241, 249, 251, 261, 268, 311, 312, 320, 324, 337, 339, 340, 342, 364, 385, 458, 459, 461], "291": [6, 33, 41, 65, 69, 71, 72, 466, 467, 482], "n_voxel": [6, 55, 76, 78, 91, 97, 162, 165, 172, 299, 312, 314, 316, 317, 320, 324, 332, 333, 449], "ten": [6, 80, 447], "hundr": [6, 49, 447], "conserv": [6, 76, 78, 101, 167, 172, 192, 229, 234], "solut": [6, 64, 65, 156, 157, 163, 168, 169, 177, 180, 220, 300], "famili": [6, 80, 101, 123, 124, 137, 152, 155, 167, 170, 175, 339, 385, 449, 451], "wise": [6, 15, 40, 47, 55, 80, 93, 99, 101, 123, 152, 155, 167, 171, 175, 182, 292, 293, 294, 295, 339, 385], "probabl": [6, 11, 21, 31, 32, 39, 43, 61, 65, 76, 78, 80, 93, 157, 167, 169, 172, 175, 177, 178, 206, 209, 217, 244, 245, 275], "sai": [6, 64, 68, 97, 117, 170, 172, 178, 314], "bonferroni": [6, 80, 101, 104, 105, 167, 172, 175, 324, 337, 340, 459, 466], "934": 6, "inde": [6, 42, 49, 85, 156, 157, 165, 172, 325, 480], "popular": [6, 48, 176, 180, 292, 293], "proport": [6, 49, 51, 68, 73, 81, 98, 112, 160, 172, 174, 175, 266, 316, 319, 337, 431, 435, 440, 482], "discoveri": [6, 23, 75, 76, 78, 80, 114, 172, 175, 177, 216, 281, 319], "among": [6, 78, 124, 155, 172, 175, 240, 292, 293, 294, 295], "fdr": [6, 74, 76, 80, 174, 175, 323, 324, 337, 340, 459, 466], "904": 6, "discard": [6, 117, 172, 235, 271, 291, 327, 362, 379, 382, 461, 465], "small": [6, 18, 49, 51, 58, 64, 85, 98, 101, 102, 114, 129, 131, 132, 155, 159, 160, 167, 169, 170, 177, 178, 296, 312, 342, 433, 434, 447, 450, 461, 465, 480], "cluster": [6, 19, 31, 32, 33, 39, 46, 59, 62, 73, 78, 80, 81, 85, 90, 112, 114, 123, 124, 143, 146, 150, 151, 152, 155, 158, 164, 165, 167, 172, 174, 175, 176, 177, 189, 195, 240, 241, 257, 266, 294, 295, 319, 324, 333, 337, 339, 340, 347, 349, 354, 361, 372, 385, 405, 425, 432, 434, 435, 440, 446, 447, 448, 452, 454, 455, 458, 459, 466, 467, 482, 483], "remov": [6, 30, 32, 33, 35, 40, 41, 42, 76, 85, 88, 102, 103, 104, 105, 114, 116, 121, 123, 125, 126, 127, 130, 134, 135, 136, 138, 140, 141, 143, 145, 146, 148, 150, 155, 163, 168, 169, 178, 179, 181, 192, 228, 253, 275, 277, 324, 340, 342, 346, 348, 359, 361, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 381, 382, 385, 421, 433, 449, 450, 452, 453, 457, 460, 461, 462, 483], "cluster_threshold": [6, 61, 68, 80, 150, 155, 324, 337, 340, 361, 458, 459], "clean_map": 6, "zscore": [6, 124, 125, 143, 155, 228, 299, 369, 370, 371, 372, 373, 374, 375, 421, 461], "active_vs_rest_z_map": 6, "active_vs_rest_eff_map": 6, "furthermor": [6, 42, 55], "extract": [6, 22, 28, 30, 32, 40, 43, 45, 46, 48, 49, 59, 60, 62, 71, 72, 82, 85, 91, 93, 95, 97, 99, 100, 103, 112, 117, 122, 123, 124, 126, 128, 135, 136, 138, 139, 140, 141, 147, 151, 152, 155, 158, 159, 162, 165, 173, 175, 177, 178, 179, 188, 191, 198, 228, 237, 243, 244, 246, 249, 254, 255, 257, 260, 268, 272, 275, 292, 293, 294, 295, 296, 299, 300, 306, 307, 324, 331, 337, 338, 339, 348, 349, 351, 354, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 382, 398, 417, 418, 419, 420, 422, 431, 432, 433, 435, 440, 441, 443, 447, 449, 450, 451, 452, 453, 455, 457, 459, 462, 465, 466, 467, 476, 480, 482, 483], "report": [6, 49, 52, 53, 54, 56, 68, 88, 90, 91, 102, 114, 126, 127, 143, 148, 150, 152, 155, 172, 173, 178, 182, 198, 225, 251, 319, 324, 337, 369, 370, 371, 372, 373, 374, 375, 385, 436, 438, 439, 449, 472, 481], "tabl": [6, 33, 62, 68, 90, 100, 124, 127, 151, 155, 366, 458, 466], "get_clusters_t": [6, 62, 68, 124, 147, 151, 152, 155], "stat_threshold": [6, 68, 458], "20": [6, 21, 24, 29, 30, 33, 39, 41, 44, 45, 48, 50, 52, 54, 57, 58, 62, 65, 68, 71, 77, 80, 90, 93, 99, 102, 105, 114, 121, 128, 133, 155, 156, 160, 162, 187, 188, 192, 222, 240, 249, 268, 292, 293, 294, 295, 297, 298, 299, 300, 465, 466, 467, 482], "id": [6, 33, 62, 68, 69, 102, 106, 117, 124, 155, 189, 236, 238, 247, 248, 251, 271, 273, 281, 324, 372, 458, 466], "y": [6, 14, 15, 24, 31, 33, 34, 35, 36, 37, 40, 41, 44, 52, 54, 58, 62, 68, 69, 83, 91, 93, 100, 101, 104, 105, 110, 114, 117, 135, 137, 140, 152, 155, 162, 163, 167, 170, 175, 178, 181, 182, 212, 228, 229, 230, 246, 269, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 306, 307, 311, 314, 315, 316, 317, 324, 332, 333, 337, 339, 344, 368, 369, 370, 371, 372, 373, 374, 375, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 422, 425, 427, 428, 431, 433, 434, 435, 436, 437, 438, 439, 442, 445, 446, 447, 448, 449, 450, 458, 459, 466, 480], "peak": [6, 33, 62, 68, 70, 163, 165, 169, 416, 449, 451, 458, 466], "stat": [6, 23, 33, 62, 66, 70, 75, 78, 93, 100, 102, 106, 107, 114, 152, 155, 156, 169, 173, 181, 229, 232, 312, 321, 324, 337, 361, 364, 439, 443, 445, 458, 459, 466, 480], "size": [6, 9, 15, 22, 23, 26, 33, 40, 44, 48, 49, 53, 58, 62, 67, 76, 78, 79, 80, 83, 90, 93, 101, 102, 104, 107, 110, 125, 127, 130, 140, 141, 143, 150, 155, 160, 167, 168, 169, 172, 192, 210, 268, 275, 324, 337, 339, 340, 361, 369, 370, 372, 373, 377, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 422, 431, 432, 436, 438, 439, 441, 444, 446, 447, 448, 449, 450, 451, 458, 459, 460, 465, 466, 467], "mm3": [6, 33, 62, 90, 192, 449, 451, 458, 466], "811979": 6, "4050": 6, "1a": [6, 33, 62, 466], "63": [6, 32, 33, 49, 62, 90, 92, 114, 218, 239, 247, 466, 467], "36": [6, 15, 16, 17, 33, 58, 62, 89, 90, 92, 110, 137, 140, 155, 192, 222, 240, 466, 467, 480], "601922": 6, "1b": [6, 62, 466], "435063": 6, "1c": [6, 62, 466], "48": [6, 20, 33, 53, 62, 71, 90, 114, 192, 206, 239, 244, 246, 269, 344, 466, 467, 482], "39": [6, 15, 33, 49, 51, 54, 62, 71, 72, 90, 128, 130, 133, 155, 197, 239, 246, 257, 466, 467, 482], "364058": 6, "605128": 6, "1512": 6, "2a": [6, 62, 466], "45": [6, 30, 32, 33, 49, 55, 62, 90, 105, 114, 466, 467], "590200": 6, "27": [6, 15, 16, 17, 32, 33, 45, 53, 59, 62, 65, 70, 72, 86, 89, 90, 92, 95, 102, 108, 114, 192, 200, 366, 449, 451, 466, 467, 480, 482], "253889": 6, "972": 6, "3a": [6, 62, 114, 201, 202, 203, 204, 205, 225, 251, 280, 466], "51": [6, 9, 33, 48, 53, 62, 114, 161, 192, 240, 299, 466, 467], "968355": 6, "3b": [6, 466], "54": [6, 30, 33, 45, 62, 78, 81, 90, 99, 114, 156, 192, 208, 240, 261, 286, 466, 467, 482], "565609": 6, "087451": 6, "1188": [6, 51, 466], "807510": 6, "594": [6, 33], "5a": [6, 33, 62], "21": [6, 33, 34, 45, 54, 62, 65, 76, 90, 102, 126, 130, 148, 155, 206, 281, 466, 467, 482], "646352": 6, "5b": [6, 33, 62], "33": [6, 33, 43, 62, 71, 76, 81, 90, 114, 195, 197, 241, 257, 466, 467, 482], "416271": 6, "57": [6, 10, 27, 31, 33, 62, 90, 98, 108, 114, 118, 121, 140, 155, 192, 240, 466, 467, 482], "710963": 6, "702": [6, 33, 62, 72, 482], "6a": [6, 62, 466], "633746": 6, "6b": [6, 466], "66": [6, 16, 17, 33, 58, 62, 89, 92, 198, 466, 467], "796135": 6, "6c": 6, "69": [6, 11, 30, 33, 71, 78, 466, 467], "254544": 6, "17": [6, 23, 27, 30, 32, 33, 41, 47, 48, 58, 61, 62, 72, 76, 79, 90, 97, 102, 108, 114, 140, 155, 188, 189, 220, 226, 238, 248, 252, 268, 466, 467, 482], "93": [6, 30, 32, 33, 76, 90, 242, 466, 467, 482], "522477": 6, "621": [6, 33], "7a": [6, 33, 62, 466], "99": [6, 12, 30, 32, 33, 58, 92, 149, 155, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 466, 467], "713852": 6, "19": [6, 33, 53, 62, 76, 90, 102, 114, 123, 126, 128, 130, 143, 155, 189, 190, 214, 217, 218, 220, 223, 224, 225, 226, 237, 238, 246, 247, 248, 251, 252, 275, 278, 279, 316, 317, 466, 467], "7b": 6, "90": [6, 9, 12, 22, 30, 32, 33, 43, 47, 50, 53, 56, 63, 76, 78, 90, 102, 114, 128, 141, 149, 155, 160, 365, 366, 436, 438, 439, 442, 462, 466, 467, 480], "270733": 6, "7c": 6, "085568": 6, "24": [6, 33, 49, 51, 58, 59, 62, 68, 90, 102, 125, 148, 155, 324, 326, 327, 331, 365, 466, 467, 482], "331806": 6, "648": [6, 33, 62, 466], "22": [6, 33, 36, 45, 62, 90, 102, 106, 114, 130, 141, 150, 155, 196, 242, 344, 466, 467, 482], "8a": [6, 33], "700088": 6, "23": [6, 21, 27, 33, 45, 62, 71, 90, 93, 95, 99, 102, 110, 111, 114, 192, 222, 240, 249, 298, 466, 467, 482], "8b": 6, "037845": 6, "8c": 6, "527477": 6, "25": [6, 15, 22, 23, 27, 30, 32, 33, 39, 40, 41, 45, 58, 62, 68, 72, 76, 85, 90, 93, 94, 95, 97, 102, 118, 155, 157, 188, 268, 314, 316, 317, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 433, 441, 443, 444, 445, 466, 467, 482], "835099": 6, "837": [6, 466], "26": [6, 14, 27, 30, 33, 44, 61, 62, 71, 74, 90, 102, 133, 155, 450, 466, 467, 482], "9a": [6, 466], "615642": 6, "9b": 6, "091568": 6, "to_csv": [6, 71], "baselin": [6, 30, 32, 114, 146, 147, 155, 163, 165, 191, 239, 312, 332], "anoth": [6, 39, 65, 67, 78, 88, 132, 137, 155, 162, 169, 170, 172, 177, 179, 180, 228, 297, 298, 343, 344, 363, 457, 480, 483], "seek": [6, 76, 104, 161, 433], "whether": [6, 9, 68, 88, 93, 101, 127, 141, 155, 162, 170, 172, 178, 182, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 252, 257, 260, 261, 262, 266, 268, 269, 270, 271, 273, 275, 281, 299, 300, 321, 339, 340, 346, 361, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 381, 382, 385, 386, 388, 389, 427, 430, 435, 436, 437, 439, 447, 449, 458, 459, 461, 462], "possibli": [6, 65, 182], "three": [6, 14, 19, 24, 32, 40, 49, 63, 64, 65, 74, 88, 93, 114, 141, 149, 155, 169, 170, 175, 178, 180, 189, 197, 221, 257, 324, 337, 357, 359, 396, 398, 401, 415, 420, 422, 425, 426, 427, 428, 431, 433, 434, 435, 459, 465], "higher": [6, 70, 116, 135, 155, 156, 167, 172, 229, 249, 292, 293, 294, 295, 297, 298, 299, 300, 324, 337, 343, 354, 369, 370, 371, 372, 373, 374, 375, 447, 448, 449, 460], "dimension": [6, 26, 49, 69, 93, 130, 147, 152, 155, 169, 177, 190, 198, 234, 235, 243, 249, 268, 299, 300, 312, 343, 384, 446, 447, 448], "explain": [6, 40, 42, 48, 56, 65, 68, 146, 155, 159, 162, 170, 172, 177, 182, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465], "might": [6, 34, 61, 103, 161, 165, 167, 172, 175, 178, 180, 188, 242, 257, 331, 353, 360, 366, 375, 377, 378, 379, 381, 382, 428, 445], "specif": [6, 14, 15, 16, 17, 30, 32, 33, 48, 49, 61, 62, 63, 64, 65, 67, 69, 75, 78, 79, 83, 93, 100, 107, 114, 115, 120, 126, 133, 146, 152, 155, 156, 159, 160, 161, 162, 163, 165, 167, 170, 172, 174, 175, 177, 178, 179, 182, 188, 192, 213, 224, 236, 258, 268, 273, 276, 277, 312, 314, 316, 317, 327, 338, 342, 353, 362, 364, 370, 373, 375, 385, 417, 436, 437, 438, 439, 445, 449, 461, 463, 464, 465, 480, 483], "exactli": [6, 83, 93, 97, 107, 126, 155, 169, 170, 292, 293, 294, 295, 296, 362, 442, 465], "effects_of_interest": [6, 68, 69, 70, 466], "vstack": [6, 40, 41, 58, 68, 69, 74, 79, 102], "easier": [6, 23, 65, 129, 134, 149, 155, 161, 162, 169, 170, 428], "oop": 6, "lot": [6, 64, 69, 70, 85, 121, 140, 143, 155, 156, 162, 163, 169, 170, 177, 232], "non": [6, 14, 15, 39, 42, 50, 56, 64, 65, 66, 76, 78, 90, 93, 101, 102, 115, 126, 127, 136, 140, 143, 147, 148, 150, 151, 155, 156, 160, 161, 167, 168, 169, 170, 174, 175, 177, 182, 187, 190, 192, 194, 195, 197, 198, 208, 214, 241, 268, 275, 292, 293, 294, 295, 299, 314, 316, 317, 324, 342, 346, 351, 357, 359, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 420, 430, 434, 435, 436, 438, 439, 443, 445, 449, 455, 461, 467, 480, 483], "neural": [6, 66, 114, 161, 172, 175, 177, 182, 194, 207, 258, 276, 296], "ventricl": [6, 192], "arteri": 6, "365": [6, 7, 33, 467, 482], "274": [6, 33, 41, 467], "670": [7, 14, 27, 33, 114, 117, 215, 271, 273, 482], "execut": [7, 21, 27, 45, 59, 72, 81, 86, 95, 108, 111, 112, 113, 170, 182, 357, 436, 438, 439, 480, 481, 482], "auto_exampl": [7, 27, 45, 59, 72, 81, 95, 108, 111, 113, 148, 155, 170, 443], "mem": [7, 27, 45, 59, 72, 81, 95, 108, 111, 113, 482], "00": [7, 27, 30, 32, 33, 44, 45, 48, 53, 59, 72, 81, 88, 95, 108, 111, 113, 466, 482], "913": [7, 482], "212": [7, 33, 41, 43, 71, 78, 81, 247, 466, 467, 482], "273": [7, 33, 41, 114, 189, 238, 467, 482], "06": [7, 22, 23, 27, 32, 33, 45, 70, 72, 90, 95, 114, 169, 192, 196, 240, 250, 296, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 435, 442, 466, 467, 482], "176": [7, 33, 41, 61, 71, 466, 467, 482], "glass": [8, 9, 27, 47, 61, 106, 112, 133, 134, 135, 137, 138, 143, 146, 155, 176, 274, 289, 324, 337, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 427, 431, 435, 440, 441, 444, 459, 480, 482], "megatrawl": [8, 27, 112, 114, 130, 155, 184, 268, 432, 440, 482], "probabilist": [8, 27, 46, 51, 59, 98, 112, 114, 124, 125, 140, 151, 155, 158, 175, 181, 182, 198, 206, 208, 214, 218, 228, 239, 241, 243, 244, 245, 246, 247, 249, 257, 261, 349, 368, 373, 398, 417, 418, 422, 428, 432, 433, 434, 435, 440, 441, 453, 457, 467, 480, 482, 483], "atla": [8, 11, 27, 46, 48, 50, 59, 82, 90, 93, 95, 112, 114, 117, 122, 124, 125, 126, 131, 132, 134, 135, 136, 137, 140, 143, 146, 147, 148, 149, 151, 152, 155, 158, 160, 169, 175, 181, 182, 184, 228, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 257, 261, 271, 280, 306, 308, 349, 361, 368, 369, 370, 372, 373, 398, 417, 418, 419, 421, 422, 432, 433, 434, 435, 438, 440, 441, 442, 443, 445, 449, 450, 451, 452, 453, 457, 464, 467, 476, 480, 482, 483], "mode": [8, 14, 16, 21, 27, 55, 60, 72, 82, 93, 95, 112, 114, 133, 138, 141, 147, 152, 155, 170, 171, 176, 181, 182, 188, 198, 237, 243, 246, 249, 268, 271, 273, 319, 324, 331, 349, 368, 373, 375, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 419, 430, 433, 435, 440, 449, 457, 459, 466, 467, 482, 483], "msdl": [8, 21, 27, 52, 54, 112, 157, 181, 184, 246, 349, 398, 417, 433, 435, 440, 480, 482], "multiscal": [8, 27, 40, 41, 112, 114, 124, 131, 155, 184, 213, 240, 270, 434, 440, 482], "parcel": [8, 9, 22, 23, 27, 46, 59, 112, 114, 117, 124, 126, 127, 131, 135, 138, 139, 140, 143, 150, 152, 155, 158, 175, 176, 177, 182, 188, 189, 192, 195, 196, 209, 214, 215, 220, 226, 228, 238, 240, 241, 242, 244, 245, 246, 248, 250, 252, 257, 268, 271, 347, 349, 354, 365, 366, 368, 372, 405, 417, 418, 422, 425, 432, 434, 440, 449, 450, 480, 482, 483], "colormap": [8, 14, 19, 21, 23, 27, 85, 112, 127, 135, 138, 139, 140, 141, 143, 148, 155, 252, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 420, 421, 422, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 482, 483], "volum": [8, 16, 27, 31, 32, 36, 39, 43, 48, 54, 56, 61, 67, 78, 86, 90, 99, 110, 114, 116, 123, 125, 126, 137, 140, 148, 155, 161, 167, 168, 175, 176, 177, 180, 184, 189, 192, 206, 213, 238, 240, 243, 260, 270, 275, 292, 293, 294, 295, 297, 298, 299, 300, 324, 346, 354, 357, 358, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 386, 388, 389, 421, 425, 430, 434, 439, 440, 442, 449, 450, 451, 455, 461, 465, 467, 480, 481, 482, 483], "global": [8, 27, 112, 114, 146, 155, 169, 170, 180, 192, 220, 236, 237, 248, 261, 282, 299, 300, 343, 355, 365, 366, 379, 421, 447, 482], "carpet": [8, 27, 112, 127, 146, 155, 237, 261, 343, 355, 379, 421, 482], "technic": [8, 27, 70, 99, 112, 156, 168, 169, 188, 268, 275, 311, 315, 439, 440, 465, 482], "illustr": [8, 27, 49, 65, 66, 84, 89, 92, 100, 107, 112, 162, 170, 181, 182, 439, 440, 465, 482], "surfac": [8, 12, 27, 28, 45, 55, 60, 72, 96, 108, 109, 111, 112, 114, 116, 124, 125, 127, 135, 137, 139, 140, 141, 143, 146, 147, 150, 152, 155, 173, 175, 176, 177, 184, 196, 201, 202, 203, 204, 205, 226, 228, 242, 250, 260, 263, 267, 280, 281, 289, 292, 312, 320, 327, 331, 333, 349, 385, 399, 422, 427, 430, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 482, 483], "scheme": [8, 27, 29, 33, 36, 37, 97, 112, 146, 155, 156, 162, 163, 165, 169, 230, 292, 293, 294, 295, 385, 439, 440, 465, 482], "cortic": [8, 23, 24, 27, 28, 45, 55, 67, 70, 112, 114, 135, 137, 140, 146, 155, 157, 171, 176, 196, 200, 201, 202, 203, 204, 205, 206, 208, 209, 220, 221, 226, 242, 250, 252, 256, 260, 261, 280, 349, 422, 438, 439, 440, 441, 442, 443, 444, 445, 464, 465, 482, 483], "option": [8, 9, 13, 15, 21, 23, 27, 42, 51, 56, 66, 71, 88, 101, 110, 112, 116, 121, 123, 124, 125, 126, 133, 135, 136, 137, 138, 143, 146, 147, 148, 149, 150, 152, 155, 157, 162, 164, 170, 171, 175, 178, 180, 182, 228, 229, 230, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 311, 312, 314, 315, 316, 317, 319, 320, 321, 324, 326, 327, 331, 337, 339, 340, 342, 343, 352, 354, 355, 356, 357, 359, 361, 362, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 459, 460, 461, 462, 465, 480, 482], "seed": [8, 27, 46, 48, 59, 99, 112, 140, 152, 155, 171, 179, 250, 257, 280, 281, 294, 295, 324, 331, 333, 368, 374, 375, 385, 398, 435, 438, 439, 440, 441, 444, 449, 451, 463, 467, 480, 482, 483], "connect": [8, 22, 26, 27, 49, 50, 58, 59, 87, 93, 96, 108, 114, 126, 127, 128, 133, 135, 136, 143, 146, 151, 155, 157, 159, 161, 170, 171, 172, 175, 176, 177, 181, 187, 188, 192, 220, 222, 226, 228, 229, 230, 236, 240, 246, 248, 249, 250, 252, 257, 263, 268, 280, 281, 324, 327, 340, 343, 351, 361, 365, 366, 368, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 398, 419, 422, 424, 432, 435, 438, 439, 440, 441, 447, 450, 451, 463, 480, 481, 482, 483], "onto": [9, 16, 23, 40, 50, 67, 135, 155, 160, 170, 176, 180, 378, 381, 424, 433, 480], "vol_to_surf": [9, 37, 67, 107, 137, 146, 148, 155, 171, 430, 436, 437, 438, 439, 443, 480], "plot_surf_stat_map": [9, 23, 24, 27, 37, 67, 107, 127, 135, 137, 139, 143, 146, 150, 151, 152, 155, 171, 430, 436, 437, 482, 483], "add": [9, 14, 15, 20, 31, 40, 41, 50, 56, 63, 67, 101, 117, 122, 123, 124, 125, 126, 127, 133, 135, 136, 138, 140, 143, 148, 152, 155, 160, 162, 165, 167, 170, 175, 178, 230, 247, 248, 271, 273, 290, 342, 365, 374, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 441, 443, 445, 460, 461, 480], "contour": [9, 15, 18, 21, 86, 87, 125, 135, 143, 146, 148, 152, 155, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 433, 434, 437, 483], "plot_surf_contour": [9, 125, 146, 155], "stat_img": [9, 13, 14, 15, 16, 89, 92, 319, 324, 337, 340, 458, 459], "load_sample_motor_activation_imag": [9, 13, 14, 15, 16, 89, 92, 124, 155], "fsaverag": [9, 22, 23, 24, 37, 62, 67, 107, 124, 125, 140, 148, 155, 184, 280, 310, 430, 443, 465, 480], "fetch_surf_fsaverag": [9, 22, 23, 37, 67, 107, 124, 140, 146, 148, 152, 155, 171, 201, 202, 203, 204, 205, 250, 430, 436, 437, 438, 439, 443, 465, 480], "curvatur": [9, 23, 124, 155, 201, 202, 203, 204, 205, 280], "inflat": [9, 22, 23, 37, 67, 114, 196, 201, 202, 203, 204, 205, 280, 430, 436, 437, 438, 439, 443, 445, 464, 465], "hemispher": [9, 22, 23, 37, 58, 78, 85, 93, 107, 133, 134, 138, 155, 160, 181, 196, 201, 202, 203, 204, 205, 213, 216, 242, 250, 251, 280, 281, 305, 306, 307, 310, 324, 337, 360, 386, 394, 417, 420, 422, 425, 427, 428, 430, 431, 433, 434, 435, 436, 438, 439, 443, 459, 480], "whose": [9, 67, 169, 175, 229, 230, 232, 315, 349, 465], "vertex": [9, 24, 175, 250, 301, 303, 436, 437, 438, 439, 465], "neg": [9, 14, 17, 42, 51, 58, 65, 76, 78, 79, 89, 101, 105, 114, 126, 147, 150, 155, 167, 172, 175, 188, 236, 268, 298, 339, 340, 357, 361, 385, 427, 430, 435, 439, 458, 465, 480], "curv_right": [9, 201, 202, 203, 204, 205, 280], "load_surf_data": [9, 23, 135, 155], "curv_right_sign": 9, "sign": [9, 14, 23, 42, 101, 102, 124, 155, 167, 180, 188, 297, 298, 341, 361, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 427, 433, 441, 443, 445], "textur": [9, 67, 107, 465], "pial_right": [9, 67, 107, 201, 202, 203, 204, 205, 280, 430, 443, 480], "fig": [9, 11, 18, 24, 38, 40, 41, 42, 49, 57, 61, 63, 64, 66, 74, 77, 78, 90, 99, 100, 104, 105, 110, 430, 436, 480], "infl_right": [9, 67, 107, 201, 202, 203, 204, 205, 280, 430, 443], "hemi": [9, 22, 23, 37, 67, 107, 436, 438, 439, 480], "right": [9, 12, 18, 20, 22, 25, 32, 40, 44, 50, 58, 64, 65, 67, 71, 75, 78, 79, 85, 93, 97, 107, 133, 138, 143, 146, 148, 155, 159, 160, 166, 170, 177, 181, 196, 201, 202, 203, 204, 205, 213, 216, 236, 242, 244, 245, 250, 264, 266, 274, 280, 281, 294, 295, 324, 337, 338, 356, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 420, 422, 423, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 438, 439, 443, 459, 480, 483], "bg_map": [9, 22, 23, 37, 67, 107, 430, 436, 438, 439, 443, 445, 480], "recent": [9, 134, 137, 138, 140, 150, 155, 161, 178], "version": [9, 19, 20, 22, 32, 35, 36, 40, 41, 42, 47, 48, 51, 52, 53, 54, 55, 56, 58, 61, 68, 69, 70, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 116, 121, 123, 126, 127, 128, 130, 133, 134, 135, 136, 137, 138, 140, 142, 143, 146, 148, 149, 150, 151, 152, 155, 168, 169, 170, 178, 180, 182, 187, 192, 197, 207, 212, 220, 226, 228, 229, 230, 234, 235, 236, 238, 240, 241, 243, 245, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 260, 262, 263, 271, 273, 275, 276, 277, 280, 281, 283, 284, 285, 286, 287, 288, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 312, 320, 321, 324, 327, 333, 337, 339, 341, 342, 346, 351, 352, 353, 358, 361, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 378, 381, 385, 421, 432, 433, 436, 438, 439, 446, 447, 448, 449, 451, 452, 453, 455, 457, 458, 461, 465, 480], "instal": [9, 112, 123, 126, 135, 140, 143, 150, 151, 155, 177, 178, 244, 245, 344, 370, 373, 375, 436, 438, 439, 449, 480], "configur": [9, 15, 124, 125, 155, 170, 178, 181, 182, 228, 299, 300, 307, 324, 337, 366, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "instead": [9, 14, 32, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 68, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 116, 123, 124, 126, 128, 130, 133, 134, 136, 137, 138, 140, 143, 147, 149, 150, 151, 152, 155, 168, 169, 170, 171, 181, 182, 193, 228, 229, 230, 253, 275, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 312, 314, 320, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 385, 446, 447, 448, 449], "graph_object": 9, "noqa": [9, 58, 71, 97, 248, 427], "f401": 9, "bg_on_data": [9, 22, 23, 430, 436, 438, 439, 443, 445], "specifi": [9, 14, 15, 32, 56, 61, 62, 65, 67, 69, 70, 74, 77, 78, 79, 80, 83, 88, 93, 94, 100, 106, 107, 117, 122, 125, 126, 127, 137, 140, 141, 143, 146, 147, 148, 149, 150, 152, 155, 156, 157, 167, 169, 171, 172, 178, 180, 181, 182, 198, 214, 244, 245, 249, 271, 272, 274, 276, 283, 284, 285, 286, 287, 288, 292, 293, 294, 295, 297, 298, 299, 300, 314, 316, 317, 320, 324, 327, 331, 332, 333, 337, 338, 342, 346, 354, 357, 359, 365, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 382, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 425, 427, 428, 430, 432, 433, 434, 435, 436, 438, 439, 442, 443, 444, 445, 447, 449, 459, 460, 461, 465, 480], "surf_plot": [9, 125, 135, 155], "860": 9, "vmin": [9, 14, 31, 36, 40, 44, 49, 50, 52, 53, 54, 56, 57, 58, 79, 83, 110, 121, 125, 126, 141, 143, 155, 160, 420, 421, 425, 427, 428, 430, 433, 434, 435, 436, 438, 439, 442, 443, 445], "chosen": [9, 22, 34, 65, 99, 169, 228, 436, 438, 439, 442, 443, 445, 465], "symmetr": [9, 19, 47, 78, 136, 155, 169, 192, 234, 235, 240, 244, 245, 261, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 430, 435, 436, 439, 441, 442, 443, 445], "_plot_surf_plotli": 9, "matplolib": [9, 127, 155, 436, 438, 439], "With": [9, 14, 32, 56, 77, 88, 165, 169, 172, 229, 232, 320, 366, 461, 464, 481], "custom": [9, 15, 22, 23, 47, 66, 124, 140, 148, 150, 155, 167, 179, 324, 326, 331, 399, 436, 438, 439, 457, 480, 483], "plotlysurfacefigur": [9, 150, 155, 436], "similar": [9, 23, 24, 30, 48, 55, 78, 93, 99, 100, 116, 128, 140, 141, 143, 150, 155, 156, 159, 161, 163, 164, 167, 174, 175, 182, 294, 295, 366], "api": [9, 44, 103, 110, 121, 122, 123, 124, 125, 126, 127, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 170, 178, 228, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 381, 428, 446, 447, 448, 449, 483], "static": [9, 387, 442], "requir": [9, 20, 36, 42, 47, 55, 63, 66, 67, 71, 74, 77, 92, 117, 128, 133, 135, 137, 146, 150, 151, 155, 157, 160, 165, 167, 169, 170, 172, 175, 177, 178, 180, 181, 182, 192, 230, 275, 340, 360, 365, 366, 370, 373, 375, 385, 449, 450, 480, 481], "kaleido": [9, 150, 155, 436, 438, 439, 480, 481], "uncom": [9, 16, 22, 52, 54, 58], "savefig": [9, 15, 41, 55, 61, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 422, 425, 427, 428, 431, 433, 434, 435, 480], "right_hemispher": 9, "plot_glass_brain": [9, 13, 14, 62, 78, 79, 100, 104, 106, 126, 133, 143, 151, 152, 155, 174, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 435, 480], "plot_ab": [9, 14, 62, 78, 79, 100, 104, 389, 427, 480], "rang": [9, 14, 23, 41, 44, 47, 49, 53, 55, 57, 62, 66, 68, 77, 78, 79, 90, 94, 99, 101, 104, 133, 137, 147, 155, 169, 170, 192, 198, 229, 232, 243, 341, 361, 427, 430, 435, 439, 441, 442, 443, 445], "xslicer": [9, 15, 407, 413, 415], "0x7fdc18a34050": 9, "destrieux_atla": [9, 22, 23], "fetch_atlas_surf_destrieux": [9, 22, 23, 125, 135, 155, 480], "map_right": [9, 196, 250], "regions_dict": 9, "b": [9, 14, 15, 23, 30, 40, 41, 56, 90, 114, 117, 170, 178, 188, 189, 196, 198, 201, 202, 203, 204, 205, 220, 222, 226, 238, 242, 248, 249, 252, 258, 268, 276, 280, 315, 365, 366, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 480], "g_postcentr": 9, "postcentr": [9, 90], "gyru": [9, 90, 251], "g_precentr": 9, "precentr": [9, 90], "indic": [9, 23, 30, 32, 41, 50, 54, 58, 65, 71, 78, 85, 132, 135, 140, 155, 160, 167, 170, 175, 178, 180, 191, 220, 225, 236, 238, 239, 242, 244, 245, 247, 248, 251, 252, 260, 271, 278, 279, 292, 293, 294, 295, 297, 298, 299, 300, 324, 327, 343, 355, 357, 358, 360, 368, 370, 371, 372, 373, 374, 375, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 425, 428, 433, 434, 435, 436, 437, 438, 439, 442, 443, 445, 449, 451, 458], "regions_indic": 9, "sulc_right": [9, 67, 107, 201, 202, 203, 204, 205, 280, 430, 443, 480], "legend": [9, 18, 30, 32, 34, 42, 43, 49, 58, 61, 66, 90, 127, 155, 437], "color": [9, 14, 15, 18, 21, 24, 30, 32, 34, 49, 50, 51, 68, 85, 87, 126, 127, 141, 143, 146, 148, 152, 155, 159, 160, 170, 226, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 480], "k": [9, 18, 22, 30, 32, 34, 35, 41, 42, 49, 51, 66, 80, 83, 90, 97, 110, 114, 162, 165, 167, 169, 188, 206, 230, 258, 268, 276, 292, 293, 294, 295, 297, 298, 316, 317, 324, 333, 342, 365, 366, 372, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 422, 425, 427, 428, 431, 433, 434, 435, 446, 461, 467], "low": [9, 42, 65, 69, 93, 103, 114, 140, 146, 155, 162, 168, 169, 170, 172, 177, 178, 180, 181, 182, 224, 236, 280, 292, 293, 294, 295, 297, 298, 342, 365, 369, 370, 371, 372, 373, 374, 375, 428, 430, 443, 447, 449, 460, 461], "fsaverage5": [9, 22, 23, 24, 37, 67, 107, 135, 140, 155, 184, 196, 216, 250, 280, 281, 310, 430, 443, 465], "high": [9, 31, 39, 49, 56, 64, 65, 88, 93, 114, 140, 146, 147, 148, 155, 163, 164, 169, 170, 172, 175, 177, 178, 181, 182, 188, 189, 192, 201, 202, 203, 204, 205, 218, 238, 247, 268, 280, 292, 293, 294, 295, 297, 298, 312, 324, 327, 331, 342, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 430, 443, 447, 449, 460, 461], "finer": [9, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "big_fsaverag": 9, "big_textur": 9, "fine": [9, 88, 114, 134, 155, 157, 182, 198, 243, 296, 299, 300, 365, 371, 374, 447, 480], "470x500": [9, 23, 107], "plot_img_on_surf": [9, 125, 146, 148, 155], "choic": [9, 19, 65, 66, 69, 110, 130, 155, 156, 157, 163, 165, 166, 169, 170, 230, 241, 297, 298, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 449, 483], "orient": [9, 143, 146, 155, 169, 170, 356], "surf_mesh": [9, 430, 436, 437, 438, 439, 443, 445, 464, 465, 480], "freesurf": [9, 22, 23, 67, 107, 135, 140, 152, 155, 171, 196, 201, 202, 203, 204, 205, 209, 250, 280, 301, 436, 437, 438, 439, 445, 463, 464, 465], "medial": [9, 23, 37, 58, 90, 114, 167, 430, 436, 438, 439], "left": [9, 12, 20, 22, 23, 25, 34, 37, 40, 44, 49, 50, 51, 58, 64, 65, 66, 71, 75, 76, 78, 79, 85, 93, 100, 104, 107, 114, 133, 134, 138, 143, 146, 148, 155, 160, 177, 181, 196, 201, 202, 203, 204, 205, 206, 213, 216, 236, 242, 244, 245, 250, 264, 266, 274, 280, 281, 324, 337, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 420, 421, 422, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 438, 439, 443, 459], "view_surf": [9, 22, 140, 143, 155, 441, 442, 443, 444, 483], "view_img_on_surf": [9, 140, 141, 143, 148, 155, 441, 442, 444, 445, 483], "atlas": [9, 10, 22, 46, 58, 59, 112, 114, 117, 126, 127, 147, 148, 155, 158, 161, 172, 175, 180, 181, 182, 192, 195, 198, 206, 208, 209, 215, 228, 243, 244, 245, 252, 257, 261, 286, 368, 369, 370, 372, 373, 417, 418, 422, 428, 433, 434, 437, 438, 440, 441, 442, 444, 467, 482, 483], "cell": [9, 16, 22, 36, 49, 52, 53, 54, 58, 62, 74, 76, 172, 175], "open": [9, 16, 22, 52, 54, 58, 88, 90, 91, 97, 107, 114, 123, 155, 169, 170, 175, 176, 177, 179, 184, 188, 198, 217, 257, 275, 312, 324, 337, 377, 378, 379, 380, 381, 382, 441, 442, 443, 444, 445, 448, 457, 459, 480, 481, 483], "open_in_brows": [9, 16, 22, 33, 52, 54, 58, 61, 62, 70, 74, 90, 91, 126, 140, 155, 182, 441, 442, 443, 444, 445, 457, 459, 480], "don": [9, 24, 33, 65, 80, 117, 126, 155, 170, 177, 178, 271, 273, 430, 465, 480], "ourselv": 9, "vol_to_surf_kwarg": [9, 148, 155, 443], "allow": [9, 20, 24, 40, 48, 51, 58, 63, 88, 98, 99, 100, 101, 116, 124, 125, 126, 134, 136, 141, 143, 147, 148, 151, 152, 155, 156, 162, 169, 170, 171, 173, 175, 178, 182, 188, 228, 229, 230, 258, 266, 277, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 327, 337, 339, 362, 365, 368, 369, 370, 371, 372, 373, 374, 375, 432, 446, 447, 448, 449], "grain": [9, 68, 114, 198, 243, 296], "interpol": [9, 24, 40, 41, 44, 52, 65, 74, 83, 126, 132, 155, 192, 271, 356, 357, 358, 427, 428, 434, 435, 442, 461, 465], "volumetr": [9, 23, 171, 180, 385], "avoid": [9, 52, 53, 54, 58, 69, 138, 143, 152, 155, 167, 169, 170, 172, 180, 292, 293, 294, 295, 312, 337, 339, 346, 351, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 460, 480], "neighbor": [9, 37, 49, 93, 143, 155, 176, 296, 427, 428, 434, 435, 442, 447, 448, 454, 465], "nearest": [9, 40, 41, 44, 49, 65, 74, 83, 114, 143, 152, 155, 175, 271, 356, 357, 358, 427, 428, 434, 435, 442, 448, 454, 458, 465], "radiu": [9, 36, 37, 44, 55, 58, 61, 99, 130, 155, 166, 171, 175, 182, 221, 256, 296, 375, 465, 467, 483], "achiev": [9, 15, 55, 69, 92, 162, 169, 177, 181, 182, 232], "destrieux": [9, 22, 23, 110, 114, 122, 125, 135, 146, 155, 184, 242, 250, 308, 480], "fetch_atlas_destrieux_2009": [9, 157, 196], "legacy_format": [9, 17, 21, 42, 43, 47, 58, 74, 75, 76, 78, 79, 80, 104, 105, 150, 155, 236, 242, 243, 254, 255, 256, 264, 265, 266, 275], "n_sampl": [9, 44, 76, 80, 101, 104, 105, 228, 229, 230, 292, 293, 294, 295, 297, 298, 299, 300, 324, 337, 342, 368, 371, 374, 385, 446, 448, 454, 460, 461, 465], "symmetric_cmap": [9, 22, 125, 141, 155, 436, 441, 442, 443, 445, 480], "37": [9, 27, 30, 33, 41, 45, 80, 90, 93, 114, 121, 155, 365, 366, 462, 466, 467, 482], "844": [9, 27, 482], "302": [9, 27, 33, 41, 118, 155, 467, 482], "plot_3d_map_to_surface_project": [9, 27, 148, 155, 443, 482], "refer": [10, 19, 46, 59, 65, 67, 77, 92, 93, 105, 112, 114, 115, 116, 123, 124, 125, 128, 133, 141, 148, 150, 151, 152, 155, 158, 166, 170, 171, 172, 174, 180, 181, 182, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 480, 482, 483], "dataset_ho": 10, "fetch_atlas_harvard_oxford": [10, 21, 56, 90, 130, 151, 155, 157, 170, 206, 245, 450], "cort": [10, 21, 56, 90, 157, 244, 245], "maxprob": [10, 56, 90, 158, 244, 245, 483], "thr25": [10, 56, 90, 157, 244, 245], "2mm": [10, 21, 56, 90, 123, 149, 155, 157, 167, 243, 244, 245, 467], "dataset_ju": 10, "fetch_atlas_juelich": [10, 149, 151, 155, 209, 244], "thr0": [10, 244, 245], "1mm": [10, 123, 149, 155, 244, 245, 248, 285, 286, 288, 378], "atlas_ho_filenam": 10, "atlas_ju_filenam": 10, "roi": [10, 17, 21, 23, 25, 28, 33, 45, 56, 58, 82, 85, 87, 90, 95, 98, 112, 114, 117, 125, 135, 143, 146, 155, 162, 177, 179, 195, 199, 219, 220, 221, 242, 248, 254, 255, 256, 260, 271, 292, 347, 349, 352, 354, 355, 359, 360, 368, 372, 374, 425, 427, 434, 435, 437, 438, 440, 467, 480, 482, 483], "locat": [10, 15, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 47, 49, 52, 53, 54, 55, 56, 58, 68, 74, 76, 88, 90, 91, 93, 94, 100, 101, 104, 107, 140, 149, 155, 169, 172, 178, 180, 182, 198, 229, 232, 238, 254, 256, 257, 272, 274, 296, 297, 298, 299, 300, 307, 324, 327, 337, 343, 369, 370, 371, 372, 373, 374, 375, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 447, 449, 467, 480], "fsl": [10, 11, 36, 49, 62, 78, 85, 93, 149, 150, 152, 155, 180, 206, 209, 244, 245, 353], "harvardoxford": 10, "0x7fdc187746e0": 10, "0x7fdc18b96de0": 10, "view_typ": [10, 50, 86, 87, 146, 155, 160, 433, 434], "img_plot": [10, 76, 78], "817": 10, "bit": [10, 11, 36, 41, 49, 64, 65, 74, 78, 85, 93, 101, 128, 141, 152, 155, 156, 168, 180, 181, 262], "int": [10, 11, 23, 36, 40, 41, 42, 48, 49, 50, 57, 62, 66, 76, 77, 78, 83, 85, 93, 94, 99, 100, 102, 104, 127, 152, 155, 160, 170, 191, 229, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 311, 312, 314, 316, 317, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 343, 348, 354, 365, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 420, 421, 422, 425, 427, 428, 431, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 449, 454, 457, 458, 459, 460, 462, 465], "due": [10, 11, 14, 34, 36, 39, 49, 65, 69, 78, 85, 93, 123, 127, 143, 149, 150, 151, 152, 155, 159, 163, 165, 170, 172, 236, 297, 298, 480], "deal": [10, 11, 36, 49, 66, 78, 85, 93, 116, 121, 146, 155, 172, 371, 467], "int64": [10, 11, 36, 49, 78, 85, 93, 100, 152, 155, 180, 446, 448], "compat": [10, 11, 36, 49, 71, 78, 85, 93, 124, 126, 130, 150, 152, 155, 165, 170, 171, 227, 244, 245, 306, 307, 324, 337, 339, 349, 364, 368, 369, 370, 371, 372, 373, 374, 375, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 423, 449, 457, 461], "int32": [10, 11, 36, 49, 78, 83, 85, 93, 152, 155, 180, 352, 369, 370, 371, 372, 373, 374, 375], "new_img_lik": [10, 11, 36, 93, 106, 125, 143, 152, 155, 181], "roi_img": [10, 68, 434], "affin": [10, 40, 43, 49, 56, 69, 82, 88, 90, 92, 93, 95, 112, 134, 149, 155, 175, 179, 182, 206, 292, 293, 294, 295, 297, 298, 299, 300, 324, 337, 342, 343, 344, 345, 347, 352, 353, 354, 355, 356, 357, 358, 360, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 386, 388, 389, 440, 447, 452, 455, 456, 465, 469, 482, 483], "488": [10, 27, 33, 482], "436": [10, 33, 56, 114, 366], "plot_atla": [10, 27, 482], "common": [11, 49, 65, 66, 69, 93, 99, 135, 143, 149, 151, 155, 156, 162, 165, 167, 169, 170, 172, 174, 179, 181, 187, 192, 195, 224, 232, 241, 349, 357, 358, 362, 371, 380, 382, 483], "qualiti": [11, 62, 68, 76, 104, 114, 140, 155, 170, 171, 172, 178, 182, 188, 190, 236, 268, 369, 372, 421, 447], "mri": [11, 41, 56, 60, 72, 93, 99, 112, 114, 116, 150, 155, 170, 171, 172, 173, 175, 177, 180, 187, 189, 192, 197, 206, 208, 217, 220, 236, 238, 248, 257, 261, 275, 326, 365, 366, 482], "known": [11, 33, 34, 99, 146, 162, 163, 167, 170, 172, 221, 248, 314, 316, 317, 324, 421], "power": [11, 56, 58, 74, 76, 78, 114, 116, 122, 134, 146, 155, 156, 163, 164, 168, 175, 180, 182, 184, 192, 199, 254, 255, 365, 366, 421], "grayplot": [11, 146, 155, 421], "plot_carpet": [11, 27, 125, 146, 147, 151, 152, 155, 480, 482], "adhd_dataset": [11, 61, 171], "fetch_adhd": [11, 61, 130, 155, 190], "n_subject": [11, 23, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 74, 75, 76, 77, 78, 79, 80, 84, 88, 90, 91, 94, 98, 103, 104, 105, 130, 134, 155, 160, 169, 182, 228, 229, 230, 232, 236, 237, 257, 265, 266, 269, 275, 281, 291, 309], "infer": [11, 49, 62, 64, 75, 78, 83, 99, 101, 114, 170, 172, 174, 175, 319, 327, 339, 357, 364, 385, 421], "often": [11, 30, 32, 35, 36, 85, 93, 116, 161, 162, 163, 167, 172, 175, 177, 180, 181, 182, 236, 314, 316, 317], "overwrit": [11, 56, 271, 273, 386, 388, 389], "particular": [11, 15, 33, 65, 86, 97, 117, 129, 150, 155, 157, 165, 167, 169, 177, 178, 180, 273, 292, 293, 294, 295, 314, 316, 317, 331, 362, 465], "field": [11, 44, 117, 143, 155, 172, 175, 180, 271, 292, 293, 294, 295, 299, 300, 325, 327, 357, 362, 363, 371, 374, 447, 464, 465], "explicit": [11, 48, 71, 143, 149, 155, 170, 175, 177, 273, 340, 366, 461], "0010042": 11, "0010042_rest_tshift_rpi_voreg_mni": 11, "build": [11, 18, 21, 41, 46, 49, 50, 51, 58, 69, 99, 112, 115, 123, 124, 125, 126, 135, 155, 158, 163, 165, 167, 172, 180, 182, 324, 447, 483], "mask_img": [11, 25, 29, 32, 33, 34, 35, 36, 39, 40, 41, 44, 49, 52, 53, 54, 56, 58, 65, 68, 70, 74, 88, 90, 91, 97, 101, 102, 116, 125, 137, 141, 145, 146, 150, 155, 162, 167, 170, 181, 182, 283, 296, 307, 319, 324, 327, 337, 340, 341, 342, 348, 361, 369, 370, 371, 372, 373, 374, 375, 376, 383, 384, 419, 421, 430, 448, 449, 451, 452, 453, 454, 455, 456, 465, 467], "compute_epi_mask": [11, 25, 68, 88, 181, 182, 292, 293, 294, 295, 299, 300, 371, 374, 447], "grai": [11, 38, 40, 41, 42, 43, 74, 88, 127, 140, 155, 167, 174, 176, 208, 217, 275, 292, 293, 294, 295, 299, 300, 371, 374, 420, 421, 447, 465], "matter": [11, 24, 42, 43, 56, 65, 74, 88, 133, 146, 149, 155, 162, 167, 169, 170, 174, 176, 181, 182, 192, 208, 217, 257, 261, 262, 275, 284, 285, 286, 287, 288, 292, 293, 294, 295, 299, 300, 327, 365, 371, 374, 378, 381, 447, 465], "white": [11, 24, 40, 42, 56, 65, 74, 88, 131, 146, 148, 149, 155, 169, 181, 182, 192, 201, 202, 203, 204, 205, 208, 217, 257, 261, 275, 280, 285, 286, 287, 288, 292, 293, 294, 295, 299, 300, 327, 365, 371, 374, 378, 381, 436, 437, 438, 439, 442, 443, 445, 447, 464, 465], "cerebrospin": [11, 56, 208, 261, 365], "fluid": [11, 56, 208, 261, 365], "icbm152": [11, 149, 155, 175, 192, 261, 262, 285, 286, 288], "fetch_icbm152_2009": [11, 21, 74, 208, 262, 286], "atlas_img": [11, 53], "gm": [11, 21, 88, 149, 155, 182, 208, 261, 262, 292, 293, 294, 295, 299, 300, 371, 374, 378, 381, 447], "wm": [11, 21, 56, 88, 149, 155, 182, 208, 261, 292, 293, 294, 295, 299, 300, 366, 371, 374, 378, 381, 447], "csf": [11, 21, 56, 208, 257, 261, 327, 365, 366], "map_label": 11, "atlas_data": [11, 20], "get_fdata": [11, 79, 143, 155, 180], "discrete_vers": 11, "argmax": 11, "discrete_atlas_img": 11, "01_plot": [11, 15, 23, 27, 148, 155, 443, 482], "subplot": [11, 12, 24, 38, 40, 41, 43, 44, 49, 51, 57, 63, 64, 65, 66, 68, 74, 77, 78, 79, 93, 99, 100, 104, 110, 123, 155, 426, 436, 437, 438, 439], "figsiz": [11, 12, 15, 18, 25, 30, 34, 35, 40, 42, 44, 48, 51, 57, 61, 62, 63, 64, 65, 66, 71, 74, 77, 78, 90, 93, 98, 99, 100, 104, 105, 110, 181, 432], "mask_label": [11, 421], "joblib": [11, 33, 48, 49, 52, 53, 54, 56, 58, 91, 123, 126, 143, 146, 150, 155, 159, 229, 292, 293, 294, 295, 297, 298, 299, 300, 324, 337, 343, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 447, 448, 449, 467], "312": [11, 33, 41, 467], "cast": [11, 83, 130, 143, 155, 182, 238, 355], "float32": [11, 33, 83, 182, 343, 352, 369, 370, 371, 372, 373, 374, 375], "self": [11, 48, 49, 93, 170, 228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 311, 314, 315, 316, 317, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "arg": [11, 15, 110, 292, 293, 294, 295, 303, 368], "kwarg": [11, 18, 58, 110, 124, 126, 127, 143, 155, 236, 303, 307, 327, 342, 366, 368, 369, 370, 371, 372, 373, 374, 375, 381, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 422, 425, 427, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 446, 448, 461], "coerc": 11, "atlas_valu": 11, "205": [11, 27, 33, 41, 466, 467, 482], "949": [11, 27, 482], "hcp": [12, 26, 114, 184, 268], "workbench": 12, "cm": [12, 19, 20, 38, 41, 42, 44, 50, 53, 58, 101, 125, 140, 155, 160, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 425, 431, 432, 433, 434, 435, 441, 442, 443, 445, 480], "_cmap_d": 12, "nilearn_cmap": 12, "nmap": 12, "outer": [12, 88, 175, 465], "arang": [12, 22, 30, 32, 33, 34, 48, 51, 63, 65, 67, 69, 93, 107], "ones": [12, 33, 44, 63, 65, 74, 78, 80, 99, 102, 104, 105, 124, 155, 164, 165, 167, 169, 297, 298, 331, 385, 446], "subplots_adjust": [12, 25, 40, 44, 49, 57, 66, 181], "bottom": [12, 15, 25, 40, 66, 181, 432], "imshow": [12, 38, 40, 41, 44, 83, 157, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 425, 427, 428, 430, 432, 433, 434, 435, 436, 439], "off": [12, 14, 38, 40, 41, 65, 71, 115, 123, 133, 155, 169, 170, 192, 195, 294, 295, 324, 337, 377, 378, 379, 381, 382, 433, 434, 435, 442, 459], "fontsiz": [12, 25, 40, 49, 63, 77, 79, 104, 141, 143, 155, 181, 386, 388, 389, 441, 443, 444, 445], "va": 12, "rotat": [12, 32, 63, 83, 93, 182, 327, 365], "deprecated_cmap": 12, "vega10": 12, "vega20": 12, "vega20b": 12, "vega20c": 12, "spectral": [12, 23, 114, 195, 241], "m_cmap": 12, "datad": 12, "endswith": 12, "_r": 12, "sort": [12, 21, 30, 31, 35, 42, 43, 62, 116, 148, 155, 170, 178, 180, 258, 277, 291, 337, 339, 352, 385], "get_cmap": 12, "aspect": [12, 40, 139, 155, 165, 169, 182, 324, 337, 365, 459], "auto": [12, 133, 148, 155, 182, 299, 300, 352, 369, 370, 371, 372, 373, 374, 375, 387, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 416, 420, 422, 425, 427, 428, 430, 431, 433, 434, 435, 436, 438, 439, 441, 442, 444, 465], "947": [12, 27, 467, 482], "plot_colormap": [12, 27, 482], "_projector": [13, 14, 16, 47, 50, 51, 52, 58, 150, 155], "orthoprojector": [13, 14, 16, 47, 50, 51, 52, 58, 150, 155, 414, 422, 427, 431], "0x7fdc1bc1e990": 13, "On": [13, 36, 49, 52, 53, 56, 58, 62, 65, 67, 74, 76, 114, 141, 155, 157, 169, 177, 181, 182, 229, 232], "xz": [13, 14, 15, 49, 324, 337, 404, 405, 414, 415, 420, 422, 425, 427, 428, 431, 433, 434, 435, 459, 480], "xzprojector": [13, 14, 408, 410, 414], "0x7fdc1322f650": 13, "lyrz": [13, 14, 58, 324, 337, 393, 414, 422, 427, 431, 459, 480], "316": [13, 27, 33, 41, 467, 482], "plot_demo_glass_brain": [13, 27, 482], "part": [14, 15, 49, 51, 55, 67, 88, 90, 110, 114, 123, 127, 143, 149, 152, 155, 163, 169, 170, 171, 176, 181, 188, 190, 194, 228, 234, 235, 244, 245, 261, 266, 292, 293, 294, 295, 299, 300, 339, 340, 361, 362, 363, 365, 371, 374, 377, 378, 379, 381, 382, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 432, 447], "through": [14, 31, 39, 42, 48, 51, 56, 70, 74, 90, 99, 123, 124, 147, 148, 150, 155, 156, 162, 163, 164, 167, 170, 175, 177, 188, 192, 271, 275, 294, 295, 324, 337, 339, 365, 366, 369, 372, 381, 386, 388, 389, 391, 392, 393, 394, 395, 402, 404, 406, 408, 410, 412, 446, 452, 457, 465], "includ": [14, 37, 39, 42, 43, 54, 58, 63, 65, 68, 76, 78, 79, 90, 99, 100, 104, 107, 121, 124, 125, 126, 127, 133, 143, 145, 146, 150, 152, 155, 160, 162, 167, 168, 170, 171, 175, 177, 178, 180, 186, 188, 190, 191, 192, 200, 207, 211, 220, 221, 223, 227, 228, 235, 238, 239, 240, 247, 248, 257, 262, 276, 283, 284, 287, 292, 293, 294, 295, 306, 307, 311, 315, 324, 337, 339, 349, 363, 364, 365, 369, 370, 371, 372, 373, 374, 377, 378, 379, 381, 382, 385, 422, 458, 471, 476], "ortho": [14, 15, 62, 324, 337, 397, 398, 414, 415, 420, 422, 425, 427, 428, 431, 433, 434, 435, 459, 480], "equival": [14, 80, 104, 123, 155, 167, 169, 172, 178, 195, 266, 292, 293, 294, 295, 299, 300, 353, 369, 370, 371, 372, 373, 374, 377, 378, 379, 381, 382, 440, 447], "sagitt": [14, 93, 324, 337, 394, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 420, 422, 425, 427, 428, 431, 433, 434, 435, 459], "cut": [14, 49, 65, 93, 126, 127, 128, 138, 140, 141, 152, 155, 176, 192, 324, 337, 378, 381, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 420, 422, 425, 427, 428, 431, 433, 434, 435, 442, 459, 480], "0x7fdc1bbe97f0": 14, "produc": [14, 24, 46, 59, 62, 70, 78, 99, 104, 112, 150, 152, 155, 172, 175, 182, 257, 290, 366, 368, 369, 370, 371, 372, 373, 374, 375, 398, 435, 449, 465, 480, 482], "0x7fdc185a95b0": 14, "black": [14, 40, 103, 124, 125, 155, 170, 178, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 422, 425, 427, 428, 431, 433, 434, 435, 442, 443, 445], "0x7fdc13284e30": 14, "addition": [14, 15, 58, 68, 149, 155, 170, 174, 178, 181, 182, 198, 207, 327, 385, 458], "coron": [14, 93, 324, 337, 386, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 420, 422, 425, 427, 428, 431, 433, 434, 435, 459], "yz": [14, 15, 31, 39, 324, 337, 410, 411, 414, 415, 420, 422, 425, 427, 428, 431, 433, 434, 435, 459, 480], "yzprojector": [14, 404, 408, 414], "0x7fdc170ab4a0": 14, "yx": [14, 15, 116, 324, 337, 408, 409, 414, 415, 420, 422, 425, 427, 428, 431, 433, 434, 435, 459, 480], "yxprojector": [14, 404, 410, 414], "0x7fdc181c59a0": 14, "limit": [14, 42, 74, 87, 124, 155, 157, 167, 169, 170, 271, 366, 421], "vmax": [14, 40, 44, 49, 50, 52, 53, 54, 55, 56, 57, 58, 75, 78, 79, 83, 89, 99, 101, 104, 106, 110, 121, 123, 143, 155, 160, 420, 421, 425, 427, 428, 430, 433, 434, 435, 436, 438, 439, 441, 442, 443, 445, 480], "diverg": 14, "sinc": [14, 19, 33, 39, 58, 65, 70, 74, 76, 80, 100, 107, 116, 123, 148, 155, 169, 172, 188, 228, 238, 244, 245, 253, 277, 312, 320, 327, 362, 363, 365, 372, 373, 385, 389, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 421, 452, 453, 457, 480], "around": [14, 24, 34, 83, 85, 110, 139, 141, 155, 169, 170, 230, 339, 346, 357, 375, 386, 388, 389, 465], "symmetric_cbar": [14, 125, 155, 427, 430, 435, 439], "viridi": [14, 148, 155], "0x7fdc293e7ec0": 14, "lose": [14, 94, 480], "colour": [14, 172], "0x7fdc195a77a0": 14, "saw": 14, "lzr": [14, 53, 324, 337, 394, 414, 422, 427, 431, 459, 480], "enabl": [14, 78, 103, 125, 126, 146, 150, 155, 162, 165, 176, 182, 227, 365, 390, 391, 392, 393, 394, 395, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 481], "lzrprojector": [14, 392, 414], "0x7fdc153554c0": 14, "lyrzprojector": [14, 395, 414], "0x7fdc1885a2a0": 14, "xprojector": [14, 406, 412, 414], "yprojector": [14, 402, 412, 414], "zprojector": [14, 402, 406, 414], "lprojector": [14, 400, 414], "rprojector": [14, 390, 414], "0x7fdc184b32f0": 14, "inherit": [14, 126, 155, 315, 457], "customis": [14, 56, 157, 366], "focu": [14, 78, 157, 159, 169, 449], "add_contour": [14, 18, 136, 143, 155, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 480], "lzryprojector": [14, 393, 414], "empti": [14, 101, 107, 117, 125, 127, 143, 151, 155, 170, 178, 244, 245, 260, 292, 293, 294, 295, 362, 372, 373, 419, 432, 452, 453], "lzry": [14, 324, 337, 395, 414, 422, 427, 431, 459, 480], "choos": [14, 15, 24, 33, 34, 44, 47, 86, 165, 166, 172, 182, 292, 293, 294, 295, 324, 337, 366, 420, 422, 425, 427, 428, 431, 433, 434, 435, 446, 447, 459, 465, 483], "red": [14, 15, 18, 40, 51, 127, 141, 155, 171, 172, 175, 480], "demonstr": [14, 39, 40, 56, 62, 64, 93, 103, 151, 155, 161, 162, 221, 385, 480], "insid": [14, 21, 24, 34, 49, 55, 97, 165, 170, 228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 342, 348, 362, 368, 369, 370, 371, 372, 373, 374, 375, 421, 433, 434, 437, 438, 446, 447, 448, 449, 465], "kei": [14, 54, 58, 65, 78, 110, 116, 117, 125, 155, 157, 170, 177, 180, 189, 236, 238, 239, 240, 241, 244, 245, 249, 252, 261, 267, 271, 292, 293, 294, 295, 311, 315, 320, 324, 331, 333, 337, 339, 363, 364, 385, 396, 421, 430, 443], "vari": [14, 34, 65, 70, 93, 94, 149, 155, 159, 165, 169, 177, 220, 229, 230, 232, 343], "lr": [14, 16, 324, 337, 391, 414, 422, 427, 431, 459, 480], "lrprojector": [14, 414], "ad": [14, 15, 20, 21, 30, 40, 66, 67, 83, 123, 124, 125, 136, 137, 147, 149, 150, 151, 152, 155, 165, 169, 171, 178, 228, 247, 248, 292, 293, 294, 295, 297, 298, 299, 300, 307, 324, 337, 339, 346, 357, 361, 363, 364, 368, 369, 370, 371, 372, 373, 374, 375, 385, 386, 388, 389, 420, 421, 422, 425, 427, 428, 431, 433, 434, 435, 442, 446, 447, 448, 449, 483], "chang": [14, 19, 40, 42, 51, 62, 66, 101, 104, 105, 109, 110, 112, 119, 163, 165, 169, 170, 172, 178, 179, 227, 228, 229, 230, 280, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 327, 332, 337, 351, 355, 357, 360, 361, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 385, 430, 436, 438, 439, 443, 445, 446, 447, 448, 449, 452, 453, 455, 458, 461, 481, 483], "lyr": [14, 324, 337, 392, 414, 422, 427, 431, 459, 480], "lyrprojector": [14, 394, 414], "draw": [14, 15, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 424, 465], "thick": [14, 47, 148, 155, 201, 202, 203, 204, 205, 226, 252, 280, 433, 434, 436, 437, 438, 439, 445, 463, 465], "width": [14, 32, 51, 65, 93, 175, 182, 292, 293, 294, 295, 299, 300, 324, 337, 339, 359, 369, 370, 371, 372, 373, 374, 375, 376, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 425, 427, 428, 431, 432, 433, 434, 435, 441, 447, 449, 451, 457, 459], "linewidth": [14, 18, 21, 42, 43, 48, 50, 61, 90, 433, 434, 441], "enough": [14, 58, 162, 169, 177, 182, 357], "unlik": [14, 20, 167, 172, 180, 366], "upper": [14, 40, 169, 314, 316, 317, 379, 382, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 425, 427, 428, 430, 431, 433, 434, 435, 436, 439, 443, 445], "bound": [14, 83, 88, 136, 143, 155, 181, 299, 357, 386, 388, 389, 420, 421, 425, 427, 428, 430, 431, 433, 434, 435, 436, 439, 443, 445], "kept": [14, 117, 125, 155, 170, 234, 244, 245, 292, 293, 294, 295, 341, 342, 359, 377, 378, 379, 380, 381, 382, 383, 449, 451, 457, 461], "infin": 14, "inf": [14, 54, 102, 342, 370, 373, 376, 379, 461, 466, 467], "plot_demo_glass_brain_extens": [14, 27, 482], "techniqu": [15, 44, 114, 160, 161, 162, 163, 164, 165, 169, 175, 177, 182, 223, 449], "essenti": [15, 66, 79, 175], "what": [15, 56, 65, 70, 107, 151, 163, 169, 173, 178, 180, 182, 229, 311, 315, 348, 362, 462, 480, 483], "shown": [15, 21, 40, 54, 65, 68, 93, 117, 148, 155, 156, 161, 162, 171, 172, 249, 366, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 430, 431, 434, 441, 443, 445, 467], "subclass": [15, 170, 415], "implement": [15, 48, 49, 56, 58, 65, 66, 97, 128, 135, 137, 143, 146, 147, 150, 151, 155, 156, 159, 160, 161, 163, 165, 167, 168, 169, 170, 175, 177, 178, 183, 192, 244, 245, 292, 293, 296, 297, 298, 312, 314, 319, 324, 326, 328, 329, 330, 331, 334, 335, 336, 337, 339, 348, 365, 366, 385, 386, 387, 389, 399, 436, 438, 439, 449, 461, 462, 467, 477], "interact": [15, 22, 47, 52, 54, 58, 99, 126, 140, 141, 145, 150, 155, 158, 160, 170, 175, 176, 177, 441, 442, 444, 483], "precis": [15, 41, 52, 57, 61, 90, 124, 155, 156, 159, 160, 169, 177, 182, 194, 218, 228, 229, 230, 232, 233, 266, 292, 294, 314, 316, 317, 339, 385], "overlai": [15, 20, 21, 50, 160, 181, 442, 483], "tile": [15, 141, 155, 401, 415, 420, 425, 428, 433, 434, 435, 459, 480], "mosaic": [15, 127, 147, 155, 396, 415, 420, 425, 428, 433, 434, 435, 459, 480], "wherea": [15, 49, 149, 155, 159, 163, 181, 380, 382, 383, 447], "mni": [15, 48, 52, 54, 65, 67, 92, 100, 107, 114, 117, 133, 143, 146, 152, 155, 157, 174, 175, 177, 181, 182, 189, 192, 198, 199, 208, 209, 210, 219, 221, 238, 240, 246, 254, 255, 256, 261, 285, 286, 288, 292, 293, 294, 295, 327, 344, 375, 378, 381, 420, 422, 425, 427, 428, 433, 434, 435, 441, 442, 444, 459, 480], "accordingli": [15, 150, 155, 362], "help": [15, 33, 58, 93, 114, 136, 140, 141, 155, 157, 163, 171, 182, 232, 481, 483], "haxby_anat_filenam": [15, 16], "haxby_mask_filenam": [15, 16], "haxby_func_filenam": [15, 16], "xyz": [15, 356, 396, 401, 403, 407, 413], "integ": [15, 58, 83, 93, 126, 130, 134, 143, 147, 150, 152, 155, 175, 180, 182, 225, 230, 232, 236, 238, 240, 242, 244, 245, 247, 248, 251, 252, 271, 273, 297, 298, 299, 300, 324, 343, 377, 378, 379, 381, 382, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 425, 427, 428, 433, 434, 435, 437, 438, 450, 455, 456, 459], "0x7fdc09d5b170": 15, "zslicer": [15, 68, 87, 403, 407, 415], "rather": [15, 54, 65, 93, 99, 117, 133, 135, 137, 139, 143, 148, 150, 155, 156, 169, 180, 181, 214, 229, 238, 271, 273, 299, 300, 339, 370, 373, 458, 467], "impli": [15, 147, 155, 169, 228, 357, 376], "maximum": [15, 65, 78, 88, 91, 93, 103, 126, 127, 143, 155, 167, 175, 182, 209, 228, 229, 230, 232, 237, 244, 245, 271, 281, 292, 293, 294, 295, 299, 300, 311, 312, 315, 324, 333, 337, 339, 341, 359, 361, 369, 370, 371, 372, 373, 374, 375, 376, 389, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 427, 447, 449, 451, 452, 480], "0x7fdc1863d7f0": 15, "0x7fdc147fdc40": 15, "yslicer": [15, 91, 403, 413, 415], "again": [15, 49, 70, 90, 102, 116, 170, 174, 177, 271, 273], "0x7fdc18a6b2c0": 15, "ncolorbar": 15, "0x7fdc1866e4e0": 15, "stand": [15, 44, 143, 155, 175, 181, 480], "thu": [15, 31, 34, 39, 101, 103, 157, 162, 163, 164, 167, 168, 169, 175, 181, 182, 294, 295, 296, 297, 298, 312, 346, 366, 385], "xzslicer": [15, 49, 409, 411, 415], "0x7fdc18859f70": 15, "similarli": [15, 55, 93, 180], "yxslicer": [15, 405, 411], "assign": [15, 85, 93, 159, 160, 172, 199, 209, 244, 245, 254, 256, 449, 450, 454], "0x7fdc183f22a0": 15, "yzslicer": [15, 39, 405, 409, 415], "0x7fdc132e2ff0": 15, "case": [15, 23, 34, 40, 49, 50, 54, 58, 62, 64, 65, 66, 71, 83, 88, 90, 91, 100, 107, 117, 133, 143, 146, 155, 156, 157, 159, 162, 163, 167, 169, 177, 178, 180, 235, 238, 242, 244, 245, 292, 293, 294, 295, 297, 298, 324, 326, 331, 337, 339, 340, 349, 357, 358, 359, 360, 363, 370, 371, 372, 373, 374, 375, 379, 417, 420, 421, 422, 425, 427, 428, 430, 433, 434, 435, 442, 458, 459, 465, 467, 480], "tiledslic": [15, 396, 398, 415], "0x7fdc13308ce0": 15, "situat": [15, 58, 156, 162, 163, 180, 359], "mosaicslic": [15, 398, 401, 415], "0x7fdc183f1580": 15, "still": [15, 49, 65, 78, 90, 110, 117, 125, 150, 155, 167, 169, 178, 182, 271, 480], "0x7fdc09d5af00": 15, "tupl": [15, 182, 239, 246, 281, 292, 293, 294, 295, 297, 298, 299, 300, 314, 316, 317, 324, 327, 337, 346, 354, 357, 359, 362, 365, 371, 374, 377, 379, 380, 382, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 425, 428, 432, 433, 434, 435, 442, 447, 452, 459, 464, 465], "0x7fdc181f1c10": 15, "interpret": [15, 51, 68, 114, 158, 167, 168, 169, 172, 188, 222, 238, 242, 244, 245, 248, 249, 252, 353, 385, 480, 483], "process": [15, 16, 32, 36, 39, 42, 50, 53, 62, 90, 93, 100, 114, 115, 116, 128, 155, 157, 160, 161, 162, 165, 169, 170, 172, 174, 175, 177, 178, 180, 181, 182, 188, 192, 197, 198, 207, 208, 214, 229, 246, 261, 262, 266, 292, 293, 294, 295, 297, 298, 299, 300, 324, 337, 342, 343, 348, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 447, 448, 449, 455, 456, 461], "mean_haxby_img": [15, 16], "coregistr": [15, 132, 155, 175, 192], "edg": [15, 47, 52, 54, 58, 93, 143, 155, 156, 157, 175, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 422, 432, 441, 483], "being": [15, 88, 93, 123, 124, 125, 140, 143, 150, 155, 156, 169, 170, 172, 175, 236, 299, 331, 364, 370, 373, 375, 380, 382, 421, 436, 438, 439, 443, 445, 449], "outlin": [15, 48, 88, 91, 161, 170, 437, 467, 480], "manual": [15, 16, 19, 32, 34, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 80, 82, 88, 90, 91, 95, 97, 98, 99, 101, 102, 103, 104, 105, 112, 116, 156, 162, 177, 179, 182, 247, 248, 260, 299, 300, 347, 352, 354, 355, 359, 368, 372, 425, 434, 435, 436, 438, 439, 440, 480, 482, 483], "blue": [15, 18, 40, 49, 68, 85, 127, 155], "fill": [15, 21, 62, 66, 93, 100, 107, 135, 143, 149, 155, 169, 182, 192, 357, 358, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 433, 434, 457, 483], "transpar": [15, 23, 125, 143, 155, 182, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 422, 427, 428, 430, 431, 433, 434, 435, 436, 439, 441, 442, 443, 444, 445], "contourf": [15, 21, 48, 50, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "sphere": [15, 36, 37, 46, 55, 59, 112, 127, 145, 148, 155, 166, 182, 189, 201, 202, 203, 204, 205, 228, 254, 255, 257, 280, 368, 375, 417, 422, 431, 432, 436, 437, 438, 439, 440, 441, 445, 457, 464, 465, 472, 480, 482, 483], "marker_color": [15, 40, 55, 61, 99, 141, 143, 155, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 444, 480], "yellow": 15, "third": [15, 65, 80, 160, 333], "marker_s": [15, 40, 55, 61, 99, 141, 143, 155, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 444, 480], "coord": [15, 37, 40, 50, 52, 54, 58, 68, 86, 99, 141, 143, 155, 160, 386, 388, 389, 417, 418, 422, 436, 437, 438, 439, 445, 480], "alter": [15, 147, 155], "bar": [15, 42, 101, 104, 126, 127, 140, 155, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 483], "scalebar": [15, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 480], "scale_": 15, "keyword": [15, 97, 117, 143, 155, 165, 169, 182, 230, 236, 271, 282, 327, 342, 353, 366, 369, 370, 371, 372, 373, 374, 375, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 425, 426, 427, 428, 430, 432, 433, 434, 435, 437, 438, 439, 443, 461], "scale_s": [15, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "scale_unit": [15, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "built": [15, 33, 42, 48, 124, 127, 155, 172, 178, 292, 293, 294, 295, 447, 466], "extens": [15, 135, 149, 155, 187, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439], "svg": [15, 62, 125, 155, 364, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439], "plot_demo_more_plot": [15, 27, 482], "plot_stat_map_from_displai": 15, "sure": [15, 93, 112, 123, 126, 127, 155, 167, 170, 178, 297, 298, 481], "close": [15, 23, 37, 40, 49, 85, 150, 155, 156, 163, 169, 170, 172, 175, 262, 292, 293, 294, 295, 377, 378, 379, 381, 382, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 454, 480], "28": [15, 27, 33, 58, 62, 88, 90, 102, 114, 118, 140, 155, 191, 220, 239, 248, 466, 467, 482], "160": [15, 27, 33, 41, 58, 83, 114, 164, 199, 236, 254, 294, 295, 465, 466, 467, 482], "917": [15, 18, 29, 33, 34, 36, 37, 97], "easi": [16, 61, 67, 74, 93, 116, 117, 160, 161, 163, 166, 170, 171, 175, 177, 182, 365, 483], "coordin": [16, 19, 22, 23, 40, 49, 52, 54, 68, 93, 99, 114, 116, 122, 126, 132, 135, 137, 138, 140, 146, 150, 152, 155, 158, 160, 169, 171, 172, 175, 182, 189, 190, 196, 199, 201, 202, 203, 204, 205, 209, 219, 221, 222, 246, 254, 255, 256, 280, 300, 301, 302, 303, 344, 357, 375, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 422, 425, 427, 428, 431, 433, 434, 435, 436, 437, 438, 439, 441, 442, 444, 445, 458, 459, 464, 465, 467, 480, 483], "flip": [16, 102, 134, 155, 192, 240], "radiolog": [16, 125, 155, 386, 388, 389, 420, 422, 425, 427, 428, 431, 433, 434, 435], "0x7fdc19537260": 16, "web": [16, 114, 117, 140, 143, 155, 170, 215, 271, 273, 324, 337, 441, 443, 444, 445, 459, 480], "alwai": [16, 99, 162, 165, 169, 170, 172, 182, 298, 314, 316, 317, 321, 365, 442, 443, 445, 452, 480], "fix": [16, 30, 58, 69, 120, 169, 170, 178, 181, 311, 312, 315, 321, 324, 327], "0x7fdc295cb9b0": 16, "0x7fdc18353620": 16, "overlaid": [16, 69, 88, 91, 146, 148, 155, 433, 467], "0x7fdc1330be00": 16, "voxel_wis": 16, "reduc": [16, 29, 33, 34, 44, 49, 65, 78, 86, 93, 99, 139, 140, 143, 147, 155, 164, 168, 169, 170, 175, 182, 192, 230, 275, 294, 295, 299, 300, 365, 366, 369, 372, 436, 438, 439, 443, 445, 446, 447, 448, 452], "0x7fdc147fd9a0": 16, "ie": [16, 152, 155, 156, 161, 180, 314, 316, 317, 370, 373, 375], "371": [16, 27, 33, 70, 114, 200, 467, 482], "943": [16, 27, 482], "plot_demo_plot": [16, 27, 482], "modifi": [17, 49, 58, 93, 102, 133, 150, 155, 170, 182, 223, 271, 273, 357, 358, 361, 436, 438, 439, 445, 460, 461], "leav": [17, 29, 33, 162, 167, 346], "unchang": [17, 65, 167, 228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "localizer_dataset": [17, 76, 80, 104, 105], "fetch_localizer_button_task": [17, 133, 155, 265, 266, 480], "localizer_tmap_filenam": 17, "tmap": [17, 78, 126, 155, 194, 264, 266, 480], "localizer_anat_filenam": 17, "0x7fdc1866cc20": 17, "0x7fdc1478d850": 17, "0x7fdc132858b0": 17, "549": [17, 27, 33, 114, 167, 482], "plot_dim_plot": [17, 27, 482], "func_filenam": [18, 25, 30, 31, 32, 33, 35, 48, 50, 53, 55, 58, 90, 91, 101, 103, 160, 181], "z_slice": [18, 42, 104], "facecolor": [18, 32, 40, 42, 105, 125, 155, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 422, 425, 427, 428, 431, 433, 434, 435], "mask_vt_filenam": [18, 93], "mask_house_filenam": 18, "mask_hous": [18, 32, 116, 180, 207, 260], "mask_face_filenam": 18, "mask_fac": [18, 32, 116, 180, 207, 260], "limegreen": 18, "zip": [18, 20, 30, 32, 34, 38, 41, 50, 51, 53, 58, 87, 98, 100, 102, 107, 110, 112, 160, 178, 214, 246, 261], "antialias": 18, "trick": [18, 177], "user": [18, 29, 34, 39, 58, 65, 66, 99, 105, 114, 117, 123, 124, 125, 126, 127, 137, 140, 141, 143, 144, 148, 150, 151, 152, 155, 169, 170, 171, 172, 175, 176, 178, 179, 182, 184, 192, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 472, 473, 481], "legend_guid": 18, "html": [18, 29, 33, 34, 36, 49, 52, 53, 54, 56, 58, 61, 62, 70, 74, 76, 97, 127, 140, 144, 148, 150, 155, 162, 173, 182, 188, 190, 191, 207, 225, 239, 251, 260, 292, 293, 294, 295, 324, 337, 366, 370, 373, 375, 441, 442, 443, 444, 445, 449, 457, 459, 467, 480, 481], "patch": [18, 40, 41, 49, 178], "rectangl": [18, 40, 49, 83], "p_v": 18, "fc": 18, "p_h": 18, "p_f": 18, "face": [18, 28, 32, 33, 38, 45, 69, 93, 96, 97, 99, 108, 112, 114, 116, 124, 126, 135, 148, 155, 162, 167, 171, 175, 176, 180, 181, 182, 207, 208, 224, 260, 261, 279, 292, 294, 296, 301, 302, 303, 347, 349, 352, 354, 355, 368, 374, 385, 413, 428, 432, 435, 436, 437, 438, 439, 440, 442, 445, 464, 465, 482], "loc": [18, 32, 34, 42, 43, 49, 61, 66, 68, 90, 99, 386, 388, 389], "lower": [18, 31, 32, 39, 51, 68, 76, 88, 93, 130, 155, 161, 164, 168, 169, 175, 181, 228, 234, 235, 292, 293, 294, 295, 314, 316, 317, 379, 382, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 419, 420, 421, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 439, 460], "_ax": [18, 21, 48, 50], "74": [18, 21, 33, 48, 50, 90, 466, 467], "im": [18, 21, 31, 106], "getattr": [18, 21], "750": [18, 27, 482], "plot_haxby_mask": [18, 27, 482], "fetch_atlas_basc_multiscale_2015": [19, 124, 125, 131, 155, 192], "sym": [19, 192, 235, 240], "resolut": [19, 21, 74, 75, 92, 102, 114, 116, 123, 124, 136, 148, 149, 155, 160, 179, 189, 192, 197, 198, 201, 202, 203, 204, 205, 218, 220, 238, 240, 243, 247, 248, 249, 257, 280, 283, 284, 285, 286, 287, 288, 319, 374, 378, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 430, 443, 449, 483], "197": [19, 33, 41, 192, 240, 349, 466, 467], "444": [19, 33, 192, 240], "networks_64": 19, "networks_197": 19, "networks_444": 19, "itself": [19, 34, 65, 159, 192, 228, 229, 230, 299, 300, 347, 447, 465], "bwr": [19, 53, 141, 155, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 441], "bwr_r": 19, "938": [19, 27, 482], "plot_multiscale_parcel": [19, 27, 482], "compos": [20, 97, 175, 181, 182, 187, 255, 292, 293, 294, 295], "node": [20, 23, 24, 58, 107, 141, 143, 146, 148, 155, 157, 182, 188, 236, 247, 280, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 430, 431, 441, 443, 444, 465, 480], "constitut": [20, 161], "leverag": [20, 146, 155, 176, 177, 292, 293, 447, 481], "less": [20, 48, 49, 50, 56, 65, 67, 70, 76, 78, 87, 93, 99, 117, 140, 141, 148, 155, 167, 169, 170, 172, 178, 227, 315, 361, 416, 483], "fetch_atlas_msdl": [20, 21, 51, 52, 53, 54, 98, 132, 155, 157, 214], "atlas_filenam": [20, 52, 54, 56, 157], "pcc": [20, 23, 51, 55], "dmn": [20, 51, 61, 466], "acc": 20, "pariet": [20, 58, 90, 102, 214, 246], "black_blu": 20, "black_green": 20, "black_pink": 20, "ma": [20, 36, 40, 48, 50, 105], "2820": [20, 48, 50], "element": [20, 48, 49, 50, 133, 152, 155, 161, 167, 175, 228, 234, 235, 238, 292, 293, 294, 295, 296, 306, 307, 342, 359, 368, 369, 370, 371, 372, 373, 374, 375, 381, 430, 449, 455, 461, 465], "nan": [20, 48, 50, 54, 56, 90, 93, 102, 121, 125, 130, 135, 143, 147, 155, 275, 342, 357, 370, 373, 376, 379, 430, 436, 438, 439, 443, 445, 461, 465, 466, 467], "_data": 20, "3rd": [20, 427, 428, 434, 435, 442], "4th": [20, 93, 114, 168, 175, 181, 316, 317, 354, 357, 433], "5th": [20, 200], "6th": 20, "dmn_node": 20, "40": [20, 33, 44, 49, 53, 59, 63, 90, 93, 190, 192, 237, 246, 271, 465, 466, 467, 482], "35": [20, 30, 33, 53, 59, 71, 90, 118, 155, 246, 271, 466, 467], "55": [20, 33, 66, 133, 155, 466, 467], "29": [20, 30, 33, 36, 62, 71, 80, 90, 102, 128, 155, 466, 467], "636": [20, 27, 33, 482], "plot_overlai": [20, 27, 482], "delin": 21, "filled_contour": [21, 50, 160, 433], "continu": [21, 39, 43, 52, 56, 157, 162, 163, 164, 168, 170, 175, 182, 271, 352, 356, 357, 358, 369, 370, 371, 372, 373, 374, 375, 427, 428, 433, 434, 435, 442, 450, 451], "plot_prob_atla": [21, 27, 48, 50, 86, 87, 130, 137, 138, 147, 155, 160, 161, 428, 434, 480, 482], "pick": [21, 160, 169, 172, 175, 262], "randomli": [21, 167], "alreadi": [21, 22, 33, 34, 49, 70, 88, 93, 100, 102, 106, 107, 117, 143, 150, 155, 160, 162, 163, 170, 177, 182, 271, 273, 337, 339, 358, 385, 449], "know": [21, 83, 117, 169, 170, 172, 175, 235, 273], "tune": [21, 31, 32, 34, 39, 43, 88, 114, 134, 155, 157, 162, 163, 165, 169, 172, 299, 300, 365, 371, 374, 447, 480], "allen": [21, 114, 135, 155, 184, 239], "fetch_atlas_allen_2011": [21, 135, 155, 191], "icbm": [21, 65, 74, 140, 155, 184, 261], "tissu": [21, 175, 251], "ica": [21, 46, 50, 54, 59, 86, 91, 96, 103, 108, 112, 114, 117, 128, 155, 157, 158, 175, 176, 177, 186, 188, 191, 214, 222, 239, 249, 257, 268, 271, 283, 299, 300, 350, 359, 365, 366, 368, 370, 373, 374, 433, 435, 440, 453, 467, 480, 482, 483], "brainmap": [21, 222, 249], "smith_bm20": 21, "rsn28": [21, 191, 239], "allen2011": 21, "smith2009": 21, "local": [21, 40, 41, 49, 60, 64, 65, 72, 75, 76, 78, 79, 80, 87, 96, 99, 100, 102, 106, 107, 108, 112, 114, 143, 144, 152, 155, 170, 171, 172, 175, 178, 180, 182, 184, 188, 213, 220, 236, 244, 245, 248, 253, 263, 264, 265, 266, 267, 270, 271, 273, 296, 347, 359, 362, 368, 374, 385, 413, 426, 427, 435, 440, 482], "harvard_oxford": 21, "prob": [21, 244, 245, 247, 428, 433], "harvard_oxford_sub": 21, "sub": [21, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 77, 84, 90, 91, 94, 99, 100, 103, 107, 148, 155, 228, 229, 230, 244, 245, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 362, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449, 459], "smith_rsn10": 21, "smith_rsn20": 21, "smith_rsn70": 21, "70": [21, 30, 32, 33, 63, 114, 167, 222, 249, 466, 467], "smith_bm10": 21, "smith_bm70": 21, "multi": [21, 28, 41, 42, 43, 45, 46, 48, 58, 59, 99, 112, 114, 126, 155, 156, 157, 158, 160, 166, 169, 175, 177, 180, 181, 182, 183, 192, 214, 224, 229, 230, 232, 240, 246, 257, 260, 279, 299, 324, 368, 371, 373, 374, 418, 422, 432, 440, 467, 482, 483], "dictionari": [21, 23, 33, 46, 59, 65, 67, 100, 103, 107, 112, 114, 117, 147, 155, 158, 162, 163, 175, 176, 182, 189, 198, 214, 215, 228, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 292, 293, 294, 295, 299, 300, 324, 337, 339, 349, 350, 363, 364, 368, 372, 373, 385, 396, 398, 418, 419, 420, 421, 422, 430, 432, 433, 435, 440, 443, 449, 482, 483], "pauli": [21, 114, 184, 247], "subcort": [21, 114, 140, 155, 206, 209, 218, 221, 244, 245, 247, 256], "subcortex": [21, 114, 221, 256], "fetch_atlas_pauli_2017": [21, 140, 143, 155, 218], "difumo": [21, 47, 147, 155, 184, 243], "fetch_atlas_difumo": [21, 47, 147, 155, 198], "resolution_mm": [21, 47, 243, 248], "atlas_typ": 21, "pauli2017": 21, "item": [21, 33, 64, 65, 67, 69, 70, 99, 104, 117, 127, 155, 271, 272, 273, 274, 327, 371, 380, 382], "456": [21, 27, 33, 108, 482], "341": [21, 33, 41, 114, 365, 467], "plot_surf_roi": [22, 23, 125, 126, 135, 137, 139, 143, 147, 155, 436, 480], "pial": [22, 23, 24, 37, 146, 152, 155, 201, 202, 203, 204, 205, 280, 430, 436, 437, 438, 439, 443, 445, 464, 465], "map_left": [22, 23, 196, 250, 480], "sulcal": [22, 23, 114, 196, 201, 202, 203, 204, 205, 242, 280, 430, 436, 438, 439, 443, 445], "depth": [22, 23, 24, 114, 146, 155, 196, 201, 202, 203, 204, 205, 242, 280, 430, 436, 438, 439, 443, 445, 465], "shade": [22, 436, 438, 439, 445], "pial_left": [22, 23, 67, 107, 201, 202, 203, 204, 205, 280, 430, 443, 465], "infl_left": [22, 23, 67, 107, 201, 202, 203, 204, 205, 280, 430, 443, 480], "sulc_left": [22, 23, 67, 107, 201, 202, 203, 204, 205, 280, 430, 443], "gii": [22, 23, 365, 366, 436, 437, 438, 439, 445, 463, 464, 465], "roi_map": [22, 23, 126, 155, 437, 438], "dark": [22, 23, 125, 155, 170, 178, 436, 438, 439, 443, 445], "400x500": [22, 23], "posterior": [22, 23, 55, 58, 61, 90, 102, 137, 155, 171, 254, 256, 436, 438, 439], "explicitli": [22, 65, 106, 126, 140, 152, 155, 162, 170, 271, 364, 366, 447], "angl": [22, 24, 83, 124, 155, 175, 300, 436, 438, 439], "elev": [22, 436, 438, 439], "azim": [22, 436, 438, 439], "appropri": [22, 99, 110, 114, 126, 127, 155, 170, 182, 192, 208, 238, 257, 261, 286, 324, 326, 331, 364, 428, 450], "ot": [22, 167], "convent": [22, 71, 123, 125, 152, 155, 170, 178, 290, 360, 362, 363, 420, 425, 427, 435, 446, 448], "vertic": [22, 37, 41, 65, 71, 79, 125, 135, 155, 156, 175, 266, 301, 306, 307, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 436, 437, 438, 439, 445], "vert": 22, "map_": 22, "rr": 22, "load_surf_mesh": [22, 37, 135, 152, 155, 480], "pial_": [22, 37], "unknown": [22, 56, 90, 162, 189, 191, 192, 196, 200, 201, 202, 203, 204, 205, 207, 208, 211, 212, 213, 216, 219, 221, 222, 224, 225, 226, 238, 239, 252], "str": [22, 62, 76, 78, 99, 110, 127, 149, 155, 170, 189, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 281, 282, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 324, 326, 327, 331, 337, 338, 339, 341, 342, 353, 357, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 455, 457, 461, 463, 464, 465], "omit": 22, "append": [22, 33, 34, 40, 41, 44, 50, 51, 53, 69, 71, 99, 102, 106, 107, 160], "synthet": [22, 57, 83, 170], "n_parcel": [22, 49, 447], "corr": [22, 429], "n_parcels_hemi": 22, "plot_connectom": [22, 47, 50, 51, 52, 53, 54, 58, 119, 121, 123, 132, 133, 138, 141, 143, 152, 155, 157, 160, 441, 444, 480], "edge_threshold": [22, 47, 50, 53, 54, 58, 141, 143, 155, 160, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 441, 480], "gist_ncar": [22, 110, 139, 155, 421, 434, 438, 480], "view_connectom": [22, 52, 54, 58, 140, 141, 143, 148, 155, 442, 444, 480], "christoph": [22, 23, 114, 137, 140, 155, 196, 242, 250], "bruce": [22, 23, 114, 196, 201, 202, 203, 204, 205, 206, 220, 226, 242, 248, 250, 252, 280], "fischl": [22, 23, 114, 196, 201, 202, 203, 204, 205, 206, 220, 226, 242, 248, 250, 252, 280], "ander": [22, 23, 114, 196, 201, 202, 203, 204, 205, 206, 242, 250, 280], "dale": [22, 23, 114, 196, 201, 202, 203, 204, 205, 206, 242, 250, 280], "halgren": [22, 23, 114, 196, 242, 250], "gyri": [22, 23, 114, 196, 250], "sulci": [22, 23, 114, 196, 250], "nomenclatur": [22, 23, 114, 196, 250], "53": [22, 23, 33, 61, 74, 81, 90, 92, 100, 104, 108, 114, 196, 239, 240, 250, 466, 467, 482], "2010": [22, 23, 37, 48, 58, 114, 135, 155, 156, 161, 163, 184, 192, 196, 208, 228, 229, 240, 250, 254, 261, 286, 299], "sciencedirect": [22, 23, 37, 40, 41, 49, 51, 56, 98, 101, 114, 156, 157, 164, 167, 168, 189, 192, 194, 196, 208, 212, 213, 214, 221, 238, 240, 246, 250, 256, 261, 266, 269, 270, 286, 294, 295, 365, 366, 385, 421, 462], "articl": [22, 23, 37, 40, 41, 49, 51, 56, 69, 70, 98, 101, 114, 156, 157, 159, 164, 167, 168, 169, 177, 187, 188, 189, 191, 192, 194, 196, 200, 208, 212, 213, 214, 215, 216, 217, 220, 221, 222, 236, 238, 239, 240, 242, 246, 248, 249, 250, 256, 261, 266, 268, 269, 270, 271, 273, 275, 281, 286, 294, 295, 365, 366, 385, 421, 462], "pii": [22, 23, 37, 40, 41, 49, 51, 56, 98, 101, 114, 156, 157, 164, 167, 168, 189, 192, 194, 196, 206, 208, 212, 213, 214, 221, 238, 240, 246, 250, 256, 261, 266, 269, 270, 286, 294, 295, 365, 366, 385, 421, 462], "s1053811910008542": [22, 23, 114, 196, 250], "1016": [22, 23, 37, 40, 41, 48, 49, 51, 56, 58, 75, 98, 101, 114, 156, 157, 161, 163, 164, 167, 168, 175, 192, 194, 196, 198, 206, 208, 212, 213, 214, 219, 221, 240, 242, 243, 246, 250, 255, 256, 261, 266, 269, 270, 286, 294, 295, 299, 316, 317, 319, 339, 365, 366, 385, 421, 462], "j": [22, 23, 37, 40, 41, 47, 48, 49, 51, 56, 58, 66, 69, 75, 83, 98, 99, 101, 114, 117, 137, 140, 149, 155, 156, 157, 161, 163, 164, 167, 168, 175, 188, 189, 192, 194, 196, 198, 206, 208, 212, 213, 214, 215, 218, 219, 220, 221, 225, 240, 242, 243, 246, 247, 248, 250, 251, 255, 256, 258, 261, 266, 268, 269, 270, 271, 273, 276, 286, 294, 295, 299, 319, 339, 342, 365, 366, 385, 421, 461, 462, 480], "010": [22, 23, 41, 48, 114, 161, 196, 250, 299], "996": [22, 27, 482], "plot_surf_atla": [22, 27, 482], "subset": [23, 36, 44, 93, 163, 167, 170, 192, 291, 314, 327, 349, 365], "enhanc": [23, 65, 66, 70, 114, 175, 178, 184, 281, 309, 312, 339, 385], "nki": [23, 110, 114, 135, 155, 184, 281, 309], "rockland": [23, 114, 216, 281], "fcon_1000": [23, 190, 216, 237, 281], "nitrc": [23, 190, 195, 216, 237, 241, 249, 281], "indi": [23, 190, 216, 237, 281], "nooner": [23, 114, 216, 281], "645m": [23, 216], "102": [23, 33, 40, 41, 49, 59, 114, 216, 281, 366, 466, 467, 482], "fliem": [23, 216], "nki_nilearn": [23, 216], "cingul": [23, 55, 58, 61, 90, 171], "pearson": [23, 114, 311, 315, 429], "product": [23, 55, 78, 169], "moment": [23, 116], "correl": [23, 26, 42, 43, 46, 47, 52, 59, 61, 69, 98, 99, 110, 112, 114, 160, 162, 169, 172, 175, 182, 188, 192, 207, 213, 228, 231, 233, 235, 257, 268, 299, 365, 366, 368, 374, 375, 398, 429, 435, 480, 482], "nki_dataset": 23, "fetch_surf_nki_enhanc": [23, 135, 143, 155, 216], "fsaverag5": 23, "func_left": [23, 216, 281], "flatten": [23, 24, 40, 41, 68, 114, 196, 228, 234, 235], "flat_left": [23, 201, 202, 203, 204, 205, 280], "curv_left": [23, 201, 202, 203, 204, 205, 280], "nki_enhanced_surfac": 23, "a00028185": 23, "a00028185_left_preprocessed_fwhm6": 23, "timeseri": [23, 26, 48, 50, 58, 88, 103, 134, 147, 155, 156, 160, 188, 190, 198, 243, 268, 342, 366, 369, 370, 371, 372, 373, 374, 375, 461, 462], "pcc_region": 23, "g_cingul": 23, "post": [23, 51, 65, 93, 114, 128, 155, 156, 170, 181, 209, 228, 262, 449], "dorsal": [23, 436, 438, 439], "pcc_label": 23, "seed_timeseri": 23, "scipi": [23, 44, 56, 62, 66, 75, 78, 93, 100, 102, 106, 107, 121, 123, 126, 133, 137, 138, 140, 143, 148, 150, 152, 155, 169, 181, 262, 284, 287, 351, 361, 377, 378, 379, 381, 382, 432, 460], "stat_map": [23, 340, 430, 438, 439], "pearsonr": 23, "wall": [23, 169], "constantinputwarn": 23, "constant": [23, 65, 110, 169, 181, 292, 293, 294, 295, 297, 298, 339, 385, 460, 480], "pcc_map": 23, "flat": [23, 41, 124, 155, 181, 201, 202, 203, 204, 205, 280], "mesh": [23, 37, 67, 107, 110, 124, 135, 140, 143, 148, 152, 155, 171, 175, 176, 201, 202, 203, 204, 205, 280, 301, 302, 304, 305, 306, 307, 310, 430, 436, 437, 438, 439, 443, 445, 463, 464, 465, 483], "yield": [23, 31, 39, 49, 76, 78, 83, 117, 143, 146, 150, 155, 161, 162, 163, 164, 167, 168, 171, 172, 187, 271, 296, 300, 320, 324, 326, 331, 340, 361, 446], "75": [23, 33, 40, 65, 71, 90, 101, 110, 114, 191, 239, 385, 466, 467], "nicer": 23, "bg_map_resc": 23, "unthreshold": [23, 80, 114, 117, 175, 191, 215, 239, 271, 273], "slightli": [23, 48, 49, 65, 83, 115, 137, 155, 163, 228, 230, 357, 358], "captur": [23, 51, 58, 65, 102, 157, 158, 159, 162, 194, 228, 266], "half": [23, 49, 65, 93, 143, 155, 169, 175, 182, 292, 293, 294, 295, 299, 300, 324, 337, 339, 359, 369, 370, 371, 372, 373, 374, 375, 376, 436, 438, 439, 443, 445, 447, 449, 451], "after": [23, 28, 32, 34, 40, 45, 50, 56, 65, 76, 93, 97, 99, 104, 112, 126, 151, 155, 159, 160, 162, 167, 169, 170, 172, 175, 178, 181, 182, 192, 232, 260, 292, 293, 294, 295, 299, 324, 332, 333, 337, 342, 346, 349, 354, 365, 366, 373, 374, 450, 452, 453, 457, 458, 459, 482], "kate": [23, 114, 216, 222, 249, 281], "stanlei": [23, 114, 216, 281], "colcomb": [23, 114, 216, 281], "russel": [23, 56, 99, 114, 117, 162, 177, 212, 215, 216, 269, 271, 273, 281, 316, 317, 365, 366], "tobe": [23, 114, 216, 281], "maarten": [23, 114, 216, 281, 365, 366], "menn": [23, 114, 216, 281, 365, 366], "melissa": [23, 114, 216, 281], "benedict": [23, 114, 216, 281], "moreno": [23, 114, 194, 216, 266, 281], "laura": [23, 114, 216, 281], "panek": [23, 114, 216, 281], "shaquanna": [23, 114, 216, 281], "brown": [23, 114, 216, 281], "stephen": [23, 101, 114, 156, 169, 175, 188, 206, 216, 222, 249, 268, 281, 339, 385], "zavitz": [23, 114, 216, 281], "qingyang": [23, 114, 216, 281], "li": [23, 88, 114, 216, 281], "sharad": [23, 114, 216, 281], "sikka": [23, 114, 216, 281], "gutman": [23, 114, 216, 281], "saroja": [23, 114, 216, 281], "bangaru": [23, 114, 216, 281], "rochel": [23, 114, 216, 281], "tziona": [23, 114, 216, 281], "schlachter": [23, 114, 216, 281], "stephani": [23, 114, 216, 281], "kamiel": [23, 114, 216, 281], "ayesha": [23, 114, 216, 281], "anwar": [23, 114, 216, 281], "caitlin": [23, 114, 216, 281], "hinz": [23, 114, 216, 281], "kaplan": [23, 114, 216, 281], "anna": [23, 114, 216, 281], "rachlin": [23, 114, 216, 281], "samantha": [23, 114, 216, 281], "adelsberg": [23, 114, 216, 281], "brian": [23, 114, 168, 206, 216, 281, 342, 461], "cheung": [23, 114, 216, 281], "ranjit": [23, 114, 216, 281], "khanuja": [23, 114, 216, 281], "chaogan": [23, 114, 216, 281], "yan": [23, 114, 216, 281], "cameron": [23, 56, 114, 156, 157, 195, 214, 216, 241, 246, 281], "craddock": [23, 56, 114, 152, 155, 156, 157, 184, 214, 216, 236, 241, 246, 281], "calhoun": [23, 114, 191, 216, 239, 281], "william": [23, 114, 188, 191, 216, 239, 268, 281, 311, 315], "courtnei": [23, 114, 216, 281], "margaret": [23, 114, 216, 281], "dylan": [23, 37, 114, 167, 216, 281], "wood": [23, 114, 216, 281], "christin": [23, 49, 114, 216, 281], "cox": [23, 114, 216, 281], "clare": [23, 114, 188, 216, 222, 249, 268, 281], "kelli": [23, 58, 114, 192, 199, 208, 216, 219, 254, 255, 261, 281, 286, 365, 366], "adriana": [23, 114, 216, 281], "dimartino": [23, 114, 216, 281], "eva": [23, 114, 216, 281], "petkova": [23, 114, 216, 281], "philip": [23, 114, 216, 281], "reiss": [23, 114, 216, 281], "nanci": [23, 114, 216, 281], "duan": [23, 114, 216, 281], "dawn": [23, 114, 216, 281], "thompsen": [23, 114, 216, 281], "bharat": [23, 114, 216, 281], "biswal": [23, 114, 216, 281], "barbara": [23, 114, 216, 281], "coffei": [23, 114, 216, 281], "matthew": [23, 101, 114, 156, 188, 216, 268, 281, 385], "hoptman": [23, 114, 216, 281], "javitt": [23, 114, 216, 281], "nunzio": [23, 114, 216, 281], "pomara": [23, 114, 216, 281], "sidti": [23, 114, 216, 281], "harold": [23, 114, 216, 281], "koplewicz": [23, 114, 216, 281], "francisco": [23, 114, 216, 281], "castellano": [23, 114, 216, 281], "bennett": [23, 114, 216, 281], "leventh": [23, 114, 216, 281], "milham": [23, 51, 98, 114, 190, 216, 281], "acceler": [23, 114, 216, 281], "pace": [23, 114, 216, 281], "psychiatri": [23, 114, 206, 216, 281], "frontier": [23, 49, 114, 159, 187, 191, 198, 215, 216, 236, 239, 271, 273, 281], "152": [23, 33, 41, 114, 175, 184, 192, 216, 281, 466, 467], "2012": [23, 49, 99, 114, 152, 155, 157, 162, 168, 169, 177, 184, 192, 212, 216, 241, 269, 281, 365, 366, 467], "frontiersin": [23, 49, 114, 159, 187, 191, 215, 216, 236, 239, 271, 273, 281], "3389": [23, 49, 114, 117, 159, 187, 191, 215, 216, 236, 239, 271, 273, 281], "fnin": [23, 49, 114, 159, 216, 281], "00152": [23, 114, 216, 281], "sereno": [23, 114, 196, 201, 202, 203, 204, 205, 280], "segment": [23, 56, 114, 160, 175, 192, 196, 206, 208, 214, 246, 252, 261, 275, 365, 449, 451, 465], "reconstruct": [23, 28, 40, 45, 112, 114, 182, 196, 213, 228, 235, 270, 299, 300, 368, 371, 374, 440, 455, 456, 482], "179": [23, 33, 41, 114, 162, 196, 466, 467], "194": [23, 33, 41, 114, 196, 466, 467], "1999": [23, 114, 196, 201, 202, 203, 204, 205, 208, 261, 280, 467], "s1053811998903950": [23, 114, 196], "1006": [23, 114, 189, 196, 238], "nimg": [23, 114, 189, 196, 238], "1998": [23, 114, 189, 196, 238], "0395": [23, 114, 196], "ii": [23, 114, 194, 196, 266, 366], "195": [23, 33, 41, 71, 114, 196, 466, 467], "207": [23, 33, 41, 71, 114, 196, 466, 467], "s1053811998903962": [23, 114, 196], "0396": [23, 114, 196], "717": [23, 27, 33, 482], "344": [23, 33, 41, 107, 108, 467, 482], "measur": [24, 29, 34, 48, 49, 51, 58, 65, 76, 98, 99, 104, 114, 136, 146, 155, 156, 157, 159, 160, 166, 167, 169, 172, 175, 177, 182, 188, 190, 236, 268, 366, 429, 431, 446, 465, 480, 483], "toi": [24, 103], "drawn": [24, 65, 93, 324, 337, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 425, 428, 433, 434, 435, 442, 459, 465], "spread": [24, 97, 165, 376], "nest": [24, 29, 42, 146, 155, 165, 228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449, 465], "along": [24, 25, 65, 83, 85, 99, 124, 143, 148, 155, 161, 168, 170, 175, 181, 182, 297, 298, 324, 332, 357, 359, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 400, 401, 402, 404, 406, 408, 410, 412, 415, 416, 420, 425, 428, 429, 433, 434, 435, 449, 450, 461, 465, 480], "ball": [24, 122, 155, 167, 169, 175, 296, 465], "too": [24, 34, 38, 40, 42, 52, 54, 56, 69, 85, 117, 163, 169, 271, 273, 375, 480], "almost": [24, 39, 49, 103, 169, 182], "ident": [24, 67, 79, 169, 192, 342, 359, 451, 461], "most": [24, 33, 40, 42, 43, 49, 61, 74, 93, 99, 125, 137, 140, 155, 162, 163, 164, 165, 167, 169, 170, 172, 178, 181, 182, 188, 195, 209, 324, 326, 331, 428, 436, 438, 439, 445, 447, 449, 451, 480], "recommend": [24, 88, 91, 99, 102, 123, 141, 142, 143, 148, 150, 152, 155, 162, 167, 172, 177, 180, 182, 365, 449, 461, 465, 467, 481], "n_z": 24, "n_t": 24, "mgrid": [24, 83], "triangul": 24, "tri": [24, 51, 163, 271, 420, 432, 446], "pi": [24, 83, 311, 315], "sin": [24, 83], "asarrai": [24, 41, 51, 102, 313, 318], "triangl": [24, 175, 303, 465], "inner_mesh": [24, 465], "nested_sample_point": 24, "_sample_locations_between_surfac": 24, "ey": [24, 41, 44, 64, 65, 67, 69, 70, 79, 83, 88, 114, 170, 177, 208, 261], "line_sample_point": 24, "_line_sample_loc": 24, "segment_half_width": 24, "n_point": 24, "ball_sample_point": 24, "_ball_sample_loc": 24, "ball_radiu": 24, "view_init": 24, "67": [24, 33, 121, 155, 239, 466, 467], "plot_trisurf": 24, "scatter": [24, 93, 152, 155, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 431], "sample_point": 24, "388": [24, 27, 33, 467, 482], "plot_surface_projection_strategi": [24, 27, 482], "mean_haxbi": [25, 181], "0x7fdc292095e0": 25, "0x7fdc294efc80": 25, "apply_mask": [25, 181, 371, 374], "masked_data": [25, 98, 110, 181], "timepoint": [25, 181, 327], "150": [25, 33, 41, 114, 181, 421, 466, 467], "And": [25, 41, 156, 171, 178, 181], "ylabel": [25, 30, 32, 42, 48, 49, 55, 57, 58, 64, 65, 181], "intens": [25, 50, 68, 80, 87, 93, 180, 181, 299, 341, 361, 365, 420, 421, 427, 433, 434, 435, 442, 449, 465, 480], "xlim": [25, 30, 181], "95": [25, 30, 33, 90, 92, 149, 155, 181, 192, 314, 316, 317, 466, 467], "669": [25, 27, 33, 49, 108, 114, 448, 454, 466, 482], "1364": 25, "plot_visu": [25, 27, 482], "releas": [26, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 188, 192, 195, 240, 248, 261, 262, 268, 281, 342], "fetch_megatrawls_netmat": [26, 188], "partial": [26, 48, 52, 98, 156, 160, 188, 228, 233, 268, 366], "300": [26, 33, 41, 55, 61, 68, 88, 95, 99, 188, 221, 248, 256, 268, 467, 482], "eigen": [26, 188, 268], "regress": [26, 30, 31, 39, 40, 44, 55, 56, 114, 116, 125, 130, 140, 146, 147, 148, 152, 155, 157, 162, 166, 167, 168, 170, 171, 172, 175, 188, 192, 236, 292, 293, 294, 295, 298, 300, 311, 316, 317, 324, 337, 365, 366, 369, 370, 371, 372, 373, 374, 375, 461, 483], "netmat": [26, 130, 155], "eigen_regress": [26, 268], "partial_correl": [26, 58, 233, 268], "correlation_matric": [26, 47, 51, 188, 268], "util": [26, 43, 44, 48, 50, 86, 87, 101, 104, 105, 126, 128, 135, 139, 146, 150, 155, 160, 170, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 275, 276, 277, 278, 279, 280, 281, 282, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 362, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449, 475], "plot_matrix": [26, 31, 35, 50, 51, 52, 53, 54, 56, 57, 58, 110, 137, 138, 143, 155, 160], "551": [26, 27, 33, 482], "plot_visualize_megatrawls_netmat": [26, 27, 482], "651": [27, 33], "435": [27, 33, 482], "916": [27, 45, 108, 482], "340": [27, 33, 41, 467, 482], "343": [27, 33, 41, 467, 482], "1363": [27, 482], "mvpa": [28, 112, 175, 177, 213, 483], "stimuli": [28, 30, 32, 33, 45, 65, 79, 97, 112, 156, 157, 159, 160, 162, 172, 177, 180, 182, 197, 207, 260, 270, 344, 361, 368, 371, 374, 413, 435, 440, 467, 482], "jimura": [28, 45, 112, 114, 212, 269, 295, 298, 435, 482], "mix": [28, 44, 45, 112, 166, 168, 184, 236, 269, 295, 297, 298, 435, 482, 483], "gambl": [28, 45, 112, 166, 168, 184, 269, 295, 298, 435, 482, 483], "morphometri": [28, 45, 73, 81, 112, 162, 173, 175, 176, 177, 184, 261, 262, 275, 293, 298, 337, 340, 347, 358, 368, 374, 385, 413, 424, 435, 440, 457, 459, 466, 482, 483], "oasi": [28, 45, 73, 81, 112, 114, 168, 174, 176, 184, 261, 262, 275, 293, 298, 337, 340, 347, 358, 368, 374, 385, 413, 424, 435, 440, 457, 459, 466, 482], "net": [28, 44, 45, 112, 168, 275, 292, 293, 297, 298, 435, 440, 482], "prior": [28, 45, 48, 54, 58, 65, 90, 112, 114, 148, 155, 156, 168, 171, 227, 229, 248, 275, 292, 293, 297, 298, 324, 337, 370, 372, 373, 375, 421, 435, 440, 467, 482], "searchlight": [28, 44, 45, 112, 114, 134, 137, 140, 146, 155, 162, 166, 175, 176, 177, 260, 280, 347, 349, 352, 354, 355, 368, 374, 428, 435, 439, 440, 464, 465, 482, 483], "chair": [28, 30, 32, 33, 45, 112, 124, 155, 180, 260, 294, 349, 354, 432, 435, 440, 482], "svm": [28, 34, 35, 39, 42, 44, 45, 51, 98, 112, 116, 135, 155, 164, 166, 168, 175, 182, 260, 292, 349, 435, 440, 442, 482, 483], "cross": [28, 32, 33, 36, 37, 40, 42, 44, 45, 51, 55, 96, 98, 108, 112, 114, 117, 124, 125, 146, 155, 156, 163, 166, 217, 230, 260, 271, 275, 283, 292, 293, 294, 295, 296, 297, 298, 349, 359, 368, 374, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 420, 425, 428, 433, 434, 435, 440, 442, 480, 482, 483], "simul": [28, 45, 46, 59, 63, 66, 99, 112, 158, 167, 230, 296, 384, 432, 440, 482, 483], "encod": [28, 41, 45, 69, 74, 83, 112, 114, 163, 164, 182, 270, 294, 295, 344, 361, 368, 371, 374, 413, 435, 467, 482], "miyawaki": [28, 45, 112, 114, 182, 184, 270, 344, 361, 368, 371, 374, 413, 435, 440, 467, 482], "2008": [28, 45, 112, 114, 156, 175, 182, 184, 270, 339, 344, 361, 368, 371, 374, 385, 413, 435, 440, 467, 482], "effici": [29, 65, 114, 125, 155, 161, 163, 169, 170, 229, 232, 271, 294, 295], "featur": [29, 32, 33, 34, 35, 42, 44, 49, 51, 65, 93, 98, 102, 103, 109, 110, 112, 114, 116, 138, 140, 141, 146, 150, 163, 164, 165, 166, 167, 168, 169, 170, 177, 178, 182, 227, 229, 230, 232, 292, 293, 294, 295, 296, 297, 298, 299, 312, 384, 446, 448, 449, 451, 461, 462, 477, 478, 481, 483], "func_img": [29, 162], "restrict": [29, 30, 31, 88, 90, 93, 101, 140, 155, 162, 167, 182, 188, 236, 291], "place": [29, 97, 137, 155, 271, 333, 361, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 421, 428, 465], "uniqu": [29, 30, 31, 32, 33, 35, 49, 51, 58, 64, 85, 93, 99, 101, 135, 155, 156, 164, 180, 238, 244, 245, 331, 369, 372, 449, 450, 451], "aim": [29, 34, 130, 155, 162, 170, 175, 217, 297, 298], "act": [29, 34, 114, 136, 155, 175, 234, 235, 316, 317, 387], "sever": [29, 31, 34, 49, 51, 61, 62, 65, 70, 74, 85, 93, 98, 102, 116, 124, 134, 140, 155, 156, 164, 166, 167, 169, 170, 172, 175, 178, 180, 181, 182, 195, 209, 221, 230, 310, 324, 342, 353, 370, 380, 382, 383, 433, 447, 461, 467, 483], "niftimask": [29, 32, 34, 35, 36, 40, 41, 42, 43, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 82, 90, 93, 95, 97, 98, 99, 101, 102, 103, 104, 105, 110, 112, 116, 124, 140, 143, 146, 147, 148, 149, 150, 155, 162, 165, 179, 257, 270, 292, 293, 294, 295, 297, 298, 299, 300, 321, 324, 337, 339, 349, 354, 365, 366, 368, 369, 370, 372, 373, 375, 379, 385, 425, 429, 434, 435, 440, 447, 457, 467, 472, 482, 483], "relev": [29, 34, 49, 56, 65, 67, 103, 117, 148, 152, 155, 162, 163, 169, 170, 178, 181, 182, 228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 339, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 385, 446, 447, 448, 449], "classic": [29, 34, 93, 163, 180, 207], "univari": [29, 33, 34, 96, 108, 112, 114, 164, 166, 168, 260, 265, 266, 292, 293, 294, 295, 297, 298, 347, 349, 354, 368, 374, 385, 413, 427, 435, 440, 482, 483], "vector": [29, 32, 33, 34, 35, 40, 44, 51, 70, 83, 97, 98, 101, 104, 105, 116, 136, 155, 162, 163, 165, 175, 228, 292, 293, 294, 295, 311, 314, 315, 316, 317, 320, 322, 431, 465], "screening_percentil": [29, 32, 33, 34, 42, 43, 110, 162, 292, 293, 294, 295, 297, 298], "percent": [29, 34, 41, 42, 43, 143, 155, 162, 332, 341, 361, 369, 370, 371, 372, 373, 374, 375, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 433, 441, 443, 445, 461], "smoothing_fwhm": [29, 33, 34, 35, 42, 49, 50, 52, 53, 54, 55, 56, 58, 62, 65, 70, 74, 75, 76, 78, 88, 90, 91, 97, 99, 100, 101, 103, 104, 105, 136, 155, 160, 162, 182, 292, 293, 294, 295, 299, 300, 324, 327, 337, 339, 369, 370, 371, 372, 373, 374, 375, 376, 447, 449, 451, 466, 467], "accuraci": [29, 30, 31, 32, 33, 35, 37, 41, 51, 97, 98, 147, 155, 166, 167, 175, 177, 292, 294, 296, 297, 483], "y_pred": [29, 31, 34, 41, 43, 162, 292, 293, 294, 295, 297, 298], "out": [29, 33, 34, 36, 40, 42, 43, 44, 48, 51, 53, 54, 55, 56, 57, 58, 67, 70, 99, 101, 104, 105, 116, 117, 126, 140, 143, 147, 155, 157, 162, 163, 165, 167, 169, 170, 171, 175, 181, 192, 215, 261, 292, 293, 294, 295, 297, 298, 349, 357, 369, 370, 371, 372, 373, 374, 375, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 430, 447, 449, 450, 460, 461, 465, 480], "session": [29, 116, 148, 150, 155, 162, 177, 207, 300, 327, 342, 362, 481], "9444444444444444": 29, "weight_img": [29, 42, 97, 162, 182], "Or": [29, 117, 162, 247, 248, 480], "dynam": [29, 114, 162, 366], "viewer": [29, 140, 155, 162, 181, 442, 480], "plot_haxby_anova_svm": [29, 45, 135, 155, 482], "haxby_face_vs_hous": 29, "02_decod": [29, 36, 41, 43, 45, 482], "910": [29, 45, 482], "fetcher": [30, 32, 125, 126, 130, 131, 132, 135, 140, 143, 144, 147, 149, 150, 151, 152, 155, 171, 236, 242, 243, 253, 254, 255, 256, 257, 264, 265, 266, 275, 279], "get_data": [30, 36, 42, 49, 76, 78, 83, 93, 101, 104, 105, 106, 135, 143, 155, 180, 352], "abl": [30, 32, 170, 178, 362, 436, 438, 439, 480], "resting_st": 30, "task_mask": [30, 32], "logical_not": [30, 36, 76, 104], "remain": [30, 32, 40, 56, 88, 99, 126, 146, 155, 167, 170, 465], "categori": [30, 32, 33, 97, 101, 116, 162, 164, 170, 180, 260], "tag": [30, 32, 67, 107, 117, 170, 178, 362, 363], "classification_target": [30, 32], "svc_l2": [30, 163, 292, 294], "svc_l1": [30, 32, 163, 292, 294], "logistic_l1": [30, 163, 292, 294], "logistic_l2": [30, 163, 292, 294], "ridge_classifi": [30, 163, 292, 294], "predict": [30, 31, 33, 39, 40, 44, 51, 58, 60, 72, 96, 108, 114, 116, 147, 148, 150, 155, 164, 165, 167, 168, 170, 172, 173, 175, 176, 177, 188, 197, 199, 228, 246, 254, 257, 268, 278, 292, 293, 294, 295, 296, 297, 298, 316, 317, 324, 337, 342, 343, 354, 359, 368, 373, 375, 379, 413, 435, 458, 481, 482, 483], "score": [30, 32, 37, 41, 42, 44, 48, 51, 79, 97, 98, 101, 102, 104, 105, 106, 110, 127, 146, 147, 155, 162, 163, 165, 166, 168, 177, 230, 275, 292, 293, 294, 295, 296, 297, 298, 299, 300, 312, 337, 341, 361, 365, 369, 370, 371, 372, 373, 374, 375, 385, 421, 447, 449, 461, 483], "classifiers_data": 30, "classifier_nam": 30, "roc_auc": [30, 32, 97, 165, 292, 294], "t0": [30, 41], "2f": [30, 32, 41, 42, 43, 44, 49, 57, 88], "std": [30, 32, 44, 51, 88, 103, 369, 370, 371, 372, 373, 374, 375, 461], "auc": [30, 32, 162, 175], "______________________________________________________________________": 30, "88": [30, 33, 80, 88, 90, 101, 114, 385, 466, 467], "scissor": [30, 32, 33, 180], "cat": [30, 32, 33, 97, 116, 162, 176, 180], "46": [30, 33, 48, 58, 59, 62, 90, 92, 106, 118, 155, 182, 239, 241, 466, 467, 480, 482], "shoe": [30, 32, 33, 34, 180], "scrambledpix": [30, 32, 33, 93, 180], "98": [30, 32, 33, 74, 86, 90, 92, 114, 149, 155, 175, 339, 385, 466, 467], "bottl": [30, 32, 33, 34, 180], "237": [30, 33, 41, 466, 467], "08": [30, 32, 33, 49, 70, 114, 156, 188, 192, 268, 346, 365, 421, 466, 467], "97": [30, 33, 44, 87, 466, 467], "82": [30, 32, 33, 88, 466, 467], "87": [30, 32, 33, 71, 90, 114, 466, 467], "92": [30, 32, 33, 76, 101, 114, 385, 466, 467], "94": [30, 33, 43, 76, 90, 104, 105, 265, 266, 466, 467], "07": [30, 32, 33, 37, 45, 49, 59, 69, 70, 75, 81, 90, 95, 108, 114, 163, 192, 208, 220, 248, 261, 286, 319, 448, 454, 466, 482], "89": [30, 32, 33, 71, 76, 104, 466, 467], "09": [30, 32, 33, 58, 95, 114, 194, 196, 208, 217, 219, 242, 255, 261, 266, 275, 286, 324, 337, 342, 459, 461, 466, 467, 482], "rudimentari": 30, "diagram": [30, 172], "all_categori": 30, "hstack": [30, 76, 79, 314, 316, 317], "tick_posit": [30, 32], "ytick": [30, 44, 48, 51, 98], "height": [30, 33, 51, 98, 143, 155, 324, 337, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 421, 422, 425, 427, 428, 431, 432, 433, 434, 435, 441, 443, 445, 457, 459, 466], "score_mean": [30, 32], "barh": [30, 48, 51, 98], "xmin": [30, 420, 421, 422, 425, 427, 428, 431, 433, 434, 435], "ncol": [30, 63, 78, 99, 100, 104], "bbox_to_anchor": 30, "tight_layout": [30, 31, 32, 48, 51, 55, 58, 68, 77, 79, 98], "penalti": [30, 34, 39, 43, 163, 168, 175, 292, 293, 294, 297, 298], "logist": [30, 31, 114, 163, 164, 168, 292, 294, 297, 298], "main": [30, 56, 65, 66, 69, 93, 119, 152, 155, 162, 167, 170, 171, 175, 178, 180, 182, 238, 324, 326, 331, 362, 380, 382, 387], "ell_1": 30, "ell_2": 30, "spars": [30, 39, 40, 46, 48, 49, 57, 58, 59, 112, 114, 157, 158, 160, 161, 163, 168, 175, 176, 183, 214, 229, 230, 232, 246, 257, 297, 298, 299, 300, 368, 373, 418, 422, 432, 436, 438, 439, 440, 441, 449, 482, 483], "intra": [30, 32], "logical_or": 30, "assert": [30, 110], "fmri_niimgs_condit": 30, "mean_epi_img": 30, "ab": [30, 43, 44, 53, 58, 80, 83, 101, 102, 103, 114, 156, 169, 195, 201, 202, 203, 204, 205, 225, 229, 232, 241, 251, 280, 342, 385, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 461], "1e": [30, 39, 40, 49, 110, 229, 230, 232, 275, 297, 298, 312, 346, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 435, 438, 442, 448, 454], "713": [30, 33, 45, 482], "1263": [30, 45, 482], "plot_haxby_different_estim": [30, 45, 143, 155, 482], "implicit": [31, 39, 146, 155, 164, 175, 294, 295], "aggreg": [31, 39, 58, 146, 155, 164, 175, 191, 239, 294, 295], "cost": [31, 39, 53, 78, 146, 155, 159, 163, 164, 168, 169, 170, 175, 182, 294, 295], "data_fil": 31, "behavior": [31, 34, 35, 74, 76, 97, 114, 116, 124, 125, 126, 130, 137, 147, 152, 155, 162, 163, 165, 166, 170, 175, 179, 182, 187, 188, 217, 222, 228, 240, 241, 249, 268, 368, 369, 370, 371, 372, 373, 374, 375, 421, 449, 483], "condition_mask_train": 31, "condition_mask_test": 31, "x_train": [31, 41, 44], "x_test": [31, 41, 44, 292, 293, 294, 295, 296], "y_train": [31, 34, 41, 44], "y_test": [31, 34, 41, 44, 292, 293, 294, 295, 296], "background_img": [31, 43], "fremclassifi": [31, 146, 147, 155, 163, 164, 292, 295], "742": [31, 32, 33, 39], "bigger": [31, 39, 43], "7778": 31, "metric": [31, 35, 40, 41, 51, 78, 143, 155, 162, 163, 167, 175, 195, 292, 293, 294, 295], "confusion_matrix": [31, 35, 163], "hot_r": [31, 35], "set_ylabel": [31, 43, 68, 74, 77], "set_xlabel": [31, 43, 68], "adjust": [31, 65, 66, 123, 138, 155, 366, 387, 398, 401], "get_figur": 31, "coef": [31, 44, 97, 324, 333], "50": [31, 33, 49, 51, 52, 57, 58, 59, 62, 65, 92, 97, 114, 117, 167, 169, 182, 188, 197, 206, 212, 230, 232, 268, 269, 294, 295, 312, 326, 328, 329, 330, 331, 334, 335, 336, 344, 365, 366, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 447, 449, 451, 466, 467, 480, 482], "improv": [31, 74, 114, 123, 124, 125, 127, 133, 136, 139, 140, 143, 150, 151, 152, 155, 162, 163, 164, 168, 169, 170, 172, 175, 180, 182, 208, 221, 256, 261, 342, 369, 372, 446, 461], "mechan": [31, 162, 228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "reason": [31, 65, 117, 163, 165, 167, 169, 170, 172, 178, 465], "even": [31, 42, 49, 50, 58, 64, 78, 99, 117, 125, 143, 148, 155, 169, 170, 177, 271, 273, 460], "heavier": 31, "l2": [31, 34, 163, 164, 292, 294, 446, 447, 448], "ridg": [31, 40, 44, 110, 163, 164, 168, 292, 293, 294, 295], "fremregressor": [31, 39, 146, 147, 155, 163, 164, 293, 294], "solv": [31, 39, 169, 170, 177, 178, 300, 385], "396": [31, 33, 45, 467, 482], "974": 31, "plot_haxby_frem": [31, 45, 482], "older": [32, 35, 36, 40, 41, 42, 47, 48, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 114, 116, 135, 136, 137, 138, 155, 170, 180, 217, 275, 344], "upgrad": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 116, 123, 135, 137, 143, 148, 150, 155], "masker": [32, 33, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 109, 111, 112, 116, 122, 123, 124, 125, 126, 127, 128, 143, 146, 147, 148, 149, 150, 152, 155, 157, 159, 162, 165, 170, 171, 179, 181, 228, 292, 293, 294, 295, 297, 298, 299, 300, 304, 305, 306, 307, 308, 309, 324, 337, 339, 365, 366, 385, 429, 432, 436, 440, 447, 449, 452, 453, 455, 456, 482, 483], "input_data": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 116, 150, 155], "That": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 116, 147, 155, 175, 311, 315, 324, 326, 331], "occurr": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 116, 167], "practic": [32, 51, 67, 98, 156, 159, 163, 165, 167, 169, 170, 171, 172, 174, 177, 180, 181], "unmask": [32, 33, 44, 115, 124, 135, 138, 155, 179, 181, 299, 300, 368, 371, 374, 483], "task_data": 32, "mask_nam": 32, "mask_scor": 32, "mask_chance_scor": 32, "760": [32, 41, 45, 482], "screen": [32, 114, 168, 210, 292, 293, 294, 295, 297, 298], "clustering_percentil": [32, 294, 295], "76": [32, 33, 65, 71, 242, 250, 466, 467], "73": [32, 33, 90, 466, 467], "71": [32, 33, 71, 466, 467], "68": [32, 33, 58, 182, 466, 467, 480], "83": [32, 33, 71, 114, 118, 155, 175, 206, 339, 385, 466, 467], "86": [32, 33, 466, 467], "xtick": [32, 34, 35, 44, 93], "rgb": [32, 444], "score_ch": 32, "edgecolor": [32, 40, 125, 155, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 422, 425, 427, 428, 431, 433, 434, 435], "ylim": 32, "306": [32, 33, 41, 45, 467, 482], "1329": [32, 45, 482], "plot_haxby_full_analysi": [32, 45, 143, 155, 482], "record": [33, 40, 65, 162, 172, 175], "unique_run": 33, "datafram": [33, 62, 63, 65, 70, 71, 74, 75, 76, 77, 78, 79, 80, 99, 100, 117, 125, 146, 150, 151, 155, 228, 236, 242, 243, 254, 255, 256, 264, 265, 266, 275, 299, 300, 307, 324, 325, 327, 331, 337, 338, 339, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 423, 424, 426, 446, 447, 448, 449, 458, 461], "conditions_run": 33, "frame": [33, 63, 67, 88, 182, 192, 326, 349, 365, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 457], "n_scan": [33, 61, 63, 67, 69, 107, 172, 326], "frame_tim": [33, 63, 66, 67, 69, 107, 171, 325, 326, 331], "events_": 33, "insert": [33, 247, 248, 324, 337, 441, 442, 443, 444, 445, 457, 459, 480], "togeth": [33, 48, 58, 66, 67, 68, 79, 156, 164, 165, 172, 175, 192, 254, 256, 291, 294, 295, 299, 327, 342, 449, 467], "conditions_label": 33, "008": [33, 41], "nilearn_cach": [33, 35, 36, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 91, 97, 98, 99, 101, 102, 103, 104, 105, 160, 467], "grab": [33, 47, 48, 49, 64, 99, 117], "fmri_run": [33, 40], "condition_": 33, "________________________________________________________________________________": [33, 48, 49, 52, 53, 56, 58], "nifti_mask": [33, 35, 36, 42, 91, 101, 104, 105, 116, 170], "_filter_and_mask": 33, "0x7fdc1706c050": 33, "0x7fdc1706f4d0": 33, "clean_kwarg": [33, 49, 52, 53, 56, 58], "detrend": [33, 40, 41, 49, 51, 52, 53, 54, 55, 56, 58, 61, 88, 90, 91, 93, 98, 99, 116, 121, 140, 148, 150, 155, 181, 182, 299, 300, 307, 342, 348, 369, 370, 371, 372, 373, 374, 375, 421, 447, 449, 461, 462, 467], "high_variance_confound": [33, 49, 52, 53, 54, 56, 58, 65, 88, 90, 91, 130, 147, 155, 182, 307, 369, 370, 371, 372, 373, 374, 375, 467], "low_pass": [33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 88, 90, 91, 98, 99, 140, 155, 182, 292, 293, 294, 295, 297, 298, 299, 300, 307, 342, 369, 370, 371, 372, 373, 374, 375, 447, 449, 460, 461, 467], "standardize_confound": [33, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 88, 90, 91, 98, 150, 155, 160, 182, 299, 307, 369, 370, 371, 372, 373, 374, 375, 449, 461, 467], "target_affin": [33, 49, 52, 53, 56, 83, 88, 91, 181, 182, 292, 293, 294, 295, 297, 298, 299, 300, 324, 327, 337, 354, 357, 371, 374, 377, 379, 380, 381, 382, 447, 466, 467], "target_shap": [33, 49, 52, 53, 56, 83, 88, 91, 181, 182, 292, 293, 294, 295, 297, 298, 299, 300, 324, 327, 337, 354, 357, 371, 374, 377, 379, 380, 382, 447, 466, 467], "memory_level": [33, 35, 36, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 88, 90, 91, 97, 98, 99, 101, 102, 103, 104, 105, 160, 182, 229, 292, 293, 294, 295, 297, 298, 299, 300, 307, 324, 327, 337, 343, 369, 370, 371, 372, 373, 374, 375, 447, 448, 449, 467], "verbos": [33, 35, 36, 42, 44, 48, 49, 52, 53, 54, 55, 56, 57, 58, 61, 88, 90, 91, 97, 98, 99, 101, 104, 140, 155, 182, 229, 230, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 292, 293, 294, 295, 296, 297, 298, 299, 300, 319, 324, 327, 333, 337, 339, 343, 354, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 385, 446, 447, 448, 449, 454, 467], "confound": [33, 47, 49, 50, 51, 52, 53, 54, 55, 58, 62, 76, 77, 98, 99, 100, 104, 107, 114, 116, 121, 124, 125, 126, 130, 140, 146, 147, 148, 150, 152, 155, 157, 160, 161, 162, 169, 175, 179, 181, 190, 197, 228, 237, 257, 299, 300, 307, 324, 327, 337, 338, 339, 342, 348, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 385, 447, 449, 461, 462, 471, 483], "sample_mask": [33, 49, 52, 53, 56, 58, 65, 123, 125, 148, 150, 152, 155, 307, 324, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 449, 461], "__________________________________________________filter_and_mask": 33, "0min": [33, 48, 49, 52, 53, 54, 56, 58], "run_glm": [33, 67, 107, 148, 152, 155], "114769": 33, "149296": 33, "367151": 33, "779998": 33, "bin": [33, 49, 170, 324, 333, 481], "random_st": [33, 36, 42, 43, 44, 48, 49, 50, 51, 91, 98, 102, 103, 152, 155, 160, 292, 294, 299, 300, 324, 333, 339, 385, 446, 447], "__________________________________________________________run_glm": 33, "44475": 33, "379275": 33, "___________________________________________________________unmask": 33, "013524": 33, "844135": 33, "217486": 33, "430348": 33, "106474": 33, "182434": 33, "747494": 33, "660679": 33, "080159": 33, "32614": 33, "253894": 33, "452682": 33, "240914": 33, "244136": 33, "0x7fdc1f744ad0": 33, "0x7fdc147fc5f0": 33, "660587": 33, "536042": 33, "254408": 33, "842804": 33, "871458": 33, "990755": 33, "627194": 33, "290147": 33, "153013": 33, "320123": 33, "15748": 33, "082416": 33, "997775": 33, "754066": 33, "109412": 33, "330079": 33, "030863": 33, "731439": 33, "559734": 33, "720924": 33, "0x7fdc13330b30": 33, "0x7fdc13330260": 33, "205584": 33, "587189": 33, "836576": 33, "676956": 33, "695564": 33, "455092": 33, "457214": 33, "537178": 33, "803925": 33, "570463": 33, "614932": 33, "232909": 33, "527175": 33, "062723": 33, "126756": 33, "274819": 33, "635166": 33, "395548": 33, "250365": 33, "364311": 33, "0x7fdc18776330": 33, "0x7fdc187772f0": 33, "026206": 33, "974948": 33, "616334": 33, "104535": 33, "503142": 33, "639351": 33, "271132": 33, "047089": 33, "318104": 33, "724813": 33, "073279": 33, "316956": 33, "380183": 33, "690685": 33, "631912": 33, "753286": 33, "155784": 33, "065658": 33, "186135": 33, "69267": 33, "0x7fdc32d2f6b0": 33, "0x7fdc189d7d70": 33, "033577": 33, "45955": 33, "57195": 33, "994713": 33, "158342": 33, "068131": 33, "396497": 33, "424937": 33, "091867": 33, "463109": 33, "054041": 33, "122921": 33, "025223": 33, "562991": 33, "001653": 33, "968729": 33, "274665": 33, "667": 33, "564329": 33, "496068": 33, "0x7fdc1317ddf0": 33, "0x7fdc1317f2f0": 33, "150482": 33, "81308": 33, "204891": 33, "417917": 33, "987059": 33, "41717": 33, "24774": 33, "674399": 33, "731234": 33, "341998": 33, "714869": 33, "182988": 33, "222674": 33, "480354": 33, "366899": 33, "091153": 33, "2708": 33, "247146": 33, "251249": 33, "413063": 33, "0x7fdc18814290": 33, "0x7fdc188172f0": 33, "129": [33, 41, 70, 121, 155, 466, 467], "51173": 33, "279282": 33, "911755": 33, "839058": 33, "290412": 33, "609221": 33, "090297": 33, "822602": 33, "747918": 33, "108861": 33, "095788": 33, "376995": 33, "807425": 33, "826947": 33, "017351": 33, "622242": 33, "625042": 33, "231224": 33, "056424": 33, "672737": 33, "0x7fdc13200710": 33, "0x7fdc13203c20": 33, "915996": 33, "07737": 33, "981215": 33, "372383": 33, "200737": 33, "008536": 33, "066075": 33, "168487": 33, "636238": 33, "145684": 33, "932773": 33, "580823": 33, "455655": 33, "685537": 33, "715791": 33, "245273": 33, "099707": 33, "79538": 33, "913842": 33, "519925": 33, "629218": 33, "0x7fdc147eaff0": 33, "0x7fdc147ea090": 33, "292987": 33, "392956": 33, "935719": 33, "602484": 33, "425611": 33, "348025": 33, "31867": 33, "408223": 33, "534932": 33, "150519": 33, "149007": 33, "640215": 33, "640699": 33, "50369": 33, "246384": 33, "346316": 33, "162243": 33, "519251": 33, "203695": 33, "335337": 33, "0x7fdc189b42c0": 33, "0x7fdc189b72f0": 33, "223948": 33, "959582": 33, "677519": 33, "024363": 33, "034515": 33, "612397": 33, "62798": 33, "160445": 33, "506632": 33, "459388": 33, "261016": 33, "747236": 33, "231796": 33, "098904": 33, "148582": 33, "999934": 33, "548262": 33, "09934": 33, "222824": 33, "318977": 33, "0x7fdc1c4c01d0": 33, "0x7fdc18b20800": 33, "66533": 33, "299562": 33, "647343": 33, "331865": 33, "175763": 33, "429485": 33, "146358": 33, "947626": 33, "806852": 33, "720554": 33, "008926": 33, "4544": 33, "279543": 33, "828183": 33, "463642": 33, "26599": 33, "058735": 33, "191442": 33, "390268": 33, "112207": 33, "0x7fdc189fb6e0": 33, "0x7fdc189f81a0": 33, "095605": 33, "449202": 33, "59974": 33, "179998": 33, "340751": 33, "056108": 33, "043261": 33, "144442": 33, "517954": 33, "611394": 33, "797134e": 33, "317655e": 33, "398581": 33, "488427": 33, "714396": 33, "869941": 33, "924894": 33, "723724": 33, "145297": 33, "821272": 33, "summari": [33, 62, 70, 90, 148, 170, 312, 467], "make_glm_report": [33, 61, 62, 74, 123, 147, 150, 155], "mean_img_": [33, 70], "drift_ord": [33, 63, 65, 171, 324, 327, 331, 466], "glover": [33, 63, 65, 66, 67, 107, 171, 324, 326, 327, 328, 329, 330, 331, 466], "scaling_axi": [33, 99, 150, 155, 324, 466], "signal_sc": [33, 68, 99, 150, 155, 324, 327, 466], "slice_time_ref": [33, 61, 65, 67, 69, 124, 125, 155, 324, 327, 466], "subject_label": [33, 62, 77, 100, 324, 337, 338, 339, 466], "\u03b1": [33, 466], "minimum": [33, 76, 78, 88, 121, 123, 126, 128, 133, 135, 136, 137, 140, 143, 146, 148, 150, 155, 160, 192, 324, 337, 341, 361, 369, 372, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 416, 422, 442, 449, 450, 451, 452, 458, 459, 466], "distanc": [33, 297, 298, 324, 337, 416, 458, 459, 465, 466], "147": [33, 41, 466, 467], "62": [33, 62, 71, 99, 106, 114, 137, 155, 245, 466, 467], "38": [33, 62, 72, 76, 90, 110, 140, 155, 466, 467], "393": [33, 467], "196": [33, 41, 466, 467], "43": [33, 90, 101, 114, 128, 155, 241, 385, 466, 467], "2264": [33, 467], "31": [33, 35, 40, 45, 90, 114, 168, 206, 222, 249, 466, 467, 482], "77": [33, 65, 71, 466, 467], "246": [33, 41, 71, 466, 467], "541": 33, "59": [33, 45, 49, 52, 71, 90, 99, 114, 118, 155, 162, 192, 239, 365, 366, 466, 467, 482], "61": [33, 36, 66, 114, 206, 466, 467], "12a": 33, "58": [33, 90, 140, 155, 466, 467], "81": [33, 119, 155, 466, 467], "1132": 33, "639": 33, "984": [33, 101, 108, 482], "16a": 33, "47": [33, 70, 72, 90, 97, 99, 108, 114, 196, 208, 236, 241, 242, 261, 286, 466, 467, 482], "49": [33, 42, 45, 70, 85, 90, 114, 140, 155, 466, 467, 482], "787": 33, "23a": 33, "65": [33, 43, 90, 128, 155, 466, 467], "27a": 33, "44": [33, 71, 90, 114, 121, 155, 175, 339, 385, 466, 467], "295": [33, 41, 114, 225, 251, 467], "590": 33, "31a": 33, "31b": 33, "32": [33, 34, 40, 58, 65, 69, 72, 83, 90, 182, 328, 329, 330, 334, 335, 336, 466, 467, 480, 482], "41": [33, 43, 45, 49, 71, 90, 114, 448, 454, 466, 467, 482], "41a": 33, "2214": [33, 143, 155], "42a": 33, "42b": 33, "442": 33, "43a": 33, "52": [33, 55, 58, 62, 90, 182, 240, 466, 467, 480], "56": [33, 37, 71, 114, 163, 241, 466, 467], "58a": 33, "64a": 33, "67a": 33, "72": [33, 43, 56, 58, 62, 90, 92, 114, 149, 155, 168, 219, 255, 466, 467], "80": [33, 43, 47, 54, 56, 64, 65, 71, 83, 102, 114, 156, 157, 170, 211, 214, 246, 341, 361, 396, 401, 403, 407, 413, 419, 465, 466, 467], "79": [33, 65, 71, 90, 466, 467], "78": [33, 41, 49, 52, 53, 65, 71, 92, 114, 167, 466, 467], "85": [33, 47, 90, 128, 155, 379, 380, 382, 466, 467], "96a": 33, "101": [33, 40, 41, 114, 365, 366, 462, 466, 467], "103": [33, 41, 114, 167, 177, 296, 466, 467], "104": [33, 41, 243, 466, 467], "105": [33, 41, 466, 467], "106": [33, 41, 114, 188, 192, 220, 222, 226, 248, 249, 252, 268, 466, 467], "107": [33, 41, 83, 466, 467], "108": [33, 41, 70, 71, 83, 466, 467], "110": [33, 41, 85, 114, 251, 258, 276, 466, 467], "111": [33, 41, 53, 61, 90, 466, 467], "112": [33, 41, 92, 110, 114, 365, 366, 466, 467], "113": [33, 41, 110, 198, 466, 467], "114": [33, 41, 44, 140, 155, 466, 467], "115": [33, 41, 51, 98, 114, 140, 155, 466, 467], "116": [33, 41, 71, 238, 466, 467], "117": [33, 41, 92, 149, 155, 238, 466, 467], "118": [33, 41, 466, 467], "119": [33, 41, 71, 128, 155, 466, 467], "120": [33, 41, 43, 83, 98, 114, 225, 251, 466, 467], "121": [33, 41, 65, 466, 467], "122": [33, 41, 65, 71, 118, 155, 192, 240, 257, 466, 467], "123": [33, 41, 243, 466, 467], "124a": 33, "125": [33, 40, 41, 71, 99, 114, 466, 467], "127": [33, 41, 137, 155, 466, 467], "128": [33, 41, 63, 65, 67, 83, 91, 103, 107, 147, 155, 198, 243, 466, 467], "130": [33, 41, 466, 467], "131": [33, 41, 71, 114, 225, 251, 466, 467], "132": [33, 41, 49, 52, 466, 467], "133": [33, 41, 466, 467], "134": [33, 41, 51, 92, 98, 114, 149, 155, 466, 467], "135": [33, 41, 71, 466, 467], "136": [33, 41, 47, 466, 467], "137": [33, 41, 71, 466, 467], "138": [33, 41, 466, 467], "139": [33, 41, 466, 467], "140": [33, 40, 41, 69, 71, 466, 467], "141": [33, 41, 122, 155, 251, 466, 467], "142": [33, 41, 71, 128, 155, 466, 467], "143": [33, 41, 71, 466, 467], "144": [33, 41, 114, 194, 266, 466, 467], "144a": 33, "145": [33, 41, 114, 162, 466, 467], "146": [33, 41, 71, 131, 155, 466, 467], "146a": 33, "148": [33, 41, 466, 467], "149": [33, 41, 71, 466, 467], "153": [33, 41, 71, 466, 467], "154": [33, 41, 56, 114, 365, 366, 421, 466, 467], "155": [33, 41, 114, 206, 257, 466, 467], "156": [33, 41, 71, 466, 467], "157": [33, 41, 466, 467], "158": [33, 41, 85, 95, 114, 421, 466, 467, 482], "159": [33, 41, 69, 70, 71, 466, 467], "161": [33, 41, 466, 467], "162": [33, 41, 71, 114, 206, 466, 467], "163": [33, 41, 56, 67, 72, 466, 467, 482], "164": [33, 41, 56, 71, 466, 467], "165": [33, 41, 56, 108, 466, 467, 482], "166": [33, 41, 56, 104, 114, 162, 466, 467], "167": [33, 41, 56, 71, 466, 467], "169": [33, 41, 466, 467], "170": [33, 41, 71, 108, 466, 467, 482], "171": [33, 41, 56, 102, 114, 206, 366, 466, 467], "172": [33, 41, 114, 164, 251, 294, 295, 466, 467], "173": [33, 41, 58, 71, 466, 467], "174": [33, 41, 56, 114, 365, 366, 466, 467], "175": [33, 41, 466, 467], "178": [33, 41, 466, 467], "180": [33, 41, 83, 114, 140, 155, 164, 192, 294, 295, 436, 438, 439, 466, 467], "181": [33, 41, 75, 114, 319, 466, 467], "182": [33, 41, 244, 245, 248, 466, 467], "183": [33, 41, 466, 467], "184": [33, 41, 466, 467], "185": [33, 41, 466, 467], "186": [33, 41, 466, 467], "187": [33, 41, 56, 114, 365, 366, 466, 467], "188": [33, 41, 71, 466, 467], "189": [33, 41, 114, 342, 349, 461, 466, 467], "190": [33, 41, 466, 467], "191": [33, 41, 71, 466, 467], "192": [33, 41, 51, 83, 98, 114, 466, 467], "193": [33, 41, 247, 466, 467], "198": [33, 41, 71, 94, 95, 247, 466, 467, 482], "199": [33, 41, 466, 467], "200": [33, 41, 43, 93, 102, 104, 114, 156, 188, 192, 228, 236, 240, 248, 268, 297, 298, 466, 467], "201": [33, 41, 71, 102, 108, 466, 467, 482], "202": [33, 41, 466, 467], "203": [33, 41, 71, 466, 467], "204": [33, 41, 466, 467], "738": 33, "204a": 33, "206": [33, 41, 114, 221, 256, 466, 467], "208": [33, 41, 114, 156, 228, 466, 467], "209": [33, 41, 67, 72, 466, 467, 482], "211": [33, 41, 43, 466, 467], "214": [33, 41, 466, 467], "215": [33, 41, 71, 466, 467], "217": [33, 41, 81, 94, 189, 238, 466, 467, 482], "218": [33, 41, 71, 76, 244, 245, 248, 466, 467], "219": [33, 41, 466, 467], "220": [33, 41, 466, 467], "221": [33, 41, 71, 114, 198, 243, 466, 467], "222": [33, 41, 466, 467], "223": [33, 41, 114, 208, 261, 466, 467], "224": [33, 41, 47, 71, 466, 467], "225": [33, 41, 53, 59, 466, 467, 482], "226": [33, 41, 466, 467], "227": [33, 39, 41, 45, 70, 71, 466, 467, 482], "228": [33, 41, 466, 467], "229": [33, 41, 247, 466, 467], "230": [33, 41, 71, 466, 467], "231": [33, 41, 466, 467], "232": [33, 41, 466, 467], "233": [33, 41, 349, 466, 467], "234": [33, 41, 71, 466, 467], "236": [33, 41, 71, 466, 467], "238": [33, 41, 114, 225, 251, 466, 467], "239": [33, 41, 466, 467], "240": [33, 41, 466, 467], "241": [33, 41, 466, 467], "242": [33, 41, 114, 225, 251, 466, 467], "243": [33, 41, 466, 467], "244": [33, 41, 466, 467], "245": [33, 41, 466, 467], "247": [33, 41, 466, 467], "248": [33, 41, 71, 466, 467], "249": [33, 41, 467], "250": [33, 41, 65, 114, 467], "251": [33, 41, 71, 467], "253": [33, 41, 467], "254": [33, 41, 71, 118, 155, 467], "255": [33, 41, 149, 155, 467], "257": [33, 41, 65, 71, 467], "258": [33, 41, 467], "259": [33, 41, 467], "260": [33, 41, 71, 467], "261": [33, 41, 114, 167, 467], "262": [33, 41, 114, 467], "263": [33, 41, 247, 467], "264": [33, 41, 58, 71, 219, 255, 467], "265": [33, 41, 467], "266": [33, 41, 71, 467], "267": [33, 41, 57, 114, 365, 366, 467], "268": [33, 41, 52, 54, 467], "269": [33, 41, 71, 114, 167, 467], "270": [33, 41, 436, 438, 439, 467], "271": [33, 41, 467], "272": [33, 41, 114, 201, 202, 203, 204, 205, 280, 467], "275": [33, 41, 71, 467], "276": [33, 41, 467], "277": [33, 41, 114, 365, 366, 467], "278": [33, 41, 68, 71, 72, 467, 482], "279": [33, 41, 467], "280": [33, 41, 467], "281": [33, 41, 467], "282": [33, 41, 93, 467], "283": [33, 34, 41, 45, 467, 482], "284": [33, 41, 65, 71, 114, 201, 202, 203, 204, 205, 280, 467], "285": [33, 41, 467], "286": [33, 41, 467], "287": [33, 41, 467], "288": [33, 41, 48, 65, 71, 114, 161, 299, 466, 467], "289": [33, 41, 114, 189, 238, 467], "290": [33, 41, 467], "292": [33, 41, 114, 385, 467], "296": [33, 41, 65, 71, 467], "297": [33, 39, 41, 467], "297a": 33, "298": [33, 41, 114, 201, 202, 203, 204, 205, 280, 385, 467], "299": [33, 41, 48, 114, 161, 299, 467], "301": [33, 41, 467], "303": [33, 41, 467], "304": [33, 41, 114, 168, 467], "305": [33, 41, 45, 467, 482], "307": [33, 41, 467], "308": [33, 41, 467], "309": [33, 41, 114, 194, 266, 467], "311": [33, 41, 467, 482], "313": [33, 41, 93, 114, 192, 208, 261, 286, 467], "314": [33, 41, 114, 194, 266, 467], "315": [33, 41, 467], "317": [33, 41, 72, 467, 482], "318": [33, 41, 64, 467], "319": [33, 41, 93, 467], "320": [33, 41, 88, 95, 114, 365, 467, 482], "321": [33, 41, 114, 168, 467], "322": [33, 41, 467], "323": [33, 41, 467], "324": [33, 41, 114, 177, 466, 467], "325": [33, 41, 192, 240, 467], "326": [33, 41, 467], "327": [33, 41, 114, 192, 208, 261, 286, 467], "328": [33, 41, 44, 98, 108, 467, 482], "329": [33, 41, 58, 114, 199, 254, 467], "330": [33, 41, 467], "331": [33, 41, 467], "332": [33, 41, 467], "333": [33, 41, 467], "334": [33, 41, 467], "335": [33, 41, 467], "337": [33, 41, 467], "338": [33, 41, 467], "339": [33, 41, 467], "342": [33, 41, 467], "345": [33, 41, 44, 467], "346": [33, 41, 467], "347": [33, 41, 467], "348": [33, 41, 56, 90, 467], "349": [33, 41, 467], "350": [33, 41, 467], "351": [33, 41, 467], "352": [33, 41, 467], "353": [33, 41, 467], "354": [33, 41, 467], "355": [33, 41, 467], "356": [33, 41, 467], "357": [33, 41, 467], "358": [33, 41, 64, 72, 467, 482], "359": [33, 41, 467], "360": [33, 41, 62, 70, 114, 200, 466, 467], "361": [33, 41, 467], "362": [33, 467], "363": [33, 467], "364": [33, 467], "366": [33, 467], "367": [33, 95, 467], "368": [33, 467], "369": [33, 114, 467], "370": [33, 467], "372": [33, 467], "373": [33, 467], "373a": 33, "374": [33, 467], "375": [33, 467], "376": [33, 467], "377": [33, 467], "379": [33, 467], "380": [33, 467], "381": [33, 101, 114, 385, 467], "382": [33, 467], "383": [33, 467], "384": [33, 467], "385": [33, 467], "386": [33, 70, 467], "387": [33, 54, 59, 103, 108, 467, 482], "389": [33, 467], "390": [33, 467], "391": [33, 467], "392": [33, 467], "394": [33, 467], "395": [33, 467], "397": [33, 101, 114, 385, 467], "398": [33, 467], "399": [33, 467], "400": [33, 114, 163, 236, 248, 467], "401": 33, "402": 33, "403": [33, 105, 108, 482], "404": 33, "405": [33, 56, 114, 156, 157, 214, 246], "406": 33, "407": 33, "408": 33, "409": 33, "410": [33, 74, 81, 114, 163, 482], "411": 33, "412": 33, "413": 33, "414": [33, 40, 45, 482], "415": [33, 56, 114, 156, 157, 214, 246, 366], "416": [33, 275], "417": 33, "418": [33, 95, 482], "419": [33, 86], "421": 33, "422": 33, "423": 33, "424": 33, "425": 33, "426": 33, "427": 33, "428": 33, "429": [33, 49], "430": [33, 43, 45, 482], "431": 33, "432": [33, 62, 114, 156, 466], "433": 33, "434": 33, "437": 33, "438": 33, "439": 33, "440": 33, "441": [33, 114, 156], "443": 33, "445": 33, "446": 33, "447": 33, "448": 33, "449": 33, "450": 33, "451": 33, "452": 33, "453": [33, 63, 72, 482], "454": [33, 467], "455": 33, "457": [33, 99, 107, 108, 482], "458": 33, "459": 33, "460": [33, 91, 95, 482], "461": [33, 188, 268], "463": [33, 114, 189, 238], "465": 33, "466": 33, "467": 33, "468": [33, 62, 114, 189, 238, 466], "469": 33, "470": 33, "471": 33, "472": 33, "473": [33, 59, 87, 95, 482], "474": [33, 53], "475": 33, "476": [33, 92, 95, 482], "477": 33, "478": 33, "479": 33, "480": 33, "481": 33, "482": 33, "483": [33, 118, 155], "484": [33, 52, 59, 482], "485": [33, 49], "486": [33, 466], "487": 33, "489": 33, "490": 33, "491": 33, "493": 33, "494": 33, "495": 33, "496": 33, "497": 33, "498": 33, "499": 33, "500": [33, 35, 41, 49, 78, 97, 110, 192, 248], "501": 33, "502": [33, 97], "503": 33, "505": 33, "506": 33, "507": 33, "508": [33, 77], "509": 33, "510": 33, "511": 33, "512": [33, 83, 147, 155, 198, 243], "513": [33, 466], "514": 33, "515": 33, "516": 33, "517": 33, "518": 33, "519": [33, 99, 108, 482], "520": 33, "521": 33, "522": 33, "523": 33, "524": 33, "525": 33, "526": [33, 90, 95, 482], "527": 33, "528": [33, 44], "529": 33, "530": 33, "531": 33, "532": 33, "533": [33, 81], "534": 33, "535": 33, "536": 33, "537": [33, 58, 59, 482], "538": 33, "539": [33, 187], "540": [33, 62, 466], "542": 33, "543": 33, "544": [33, 114, 212, 269], "545": [33, 70], "547": 33, "548": 33, "550": 33, "552": [33, 88, 114, 212, 269], "553": 33, "554": 33, "555": 33, "556": [33, 45], "557": 33, "558": 33, "559": [33, 114, 167], "560": 33, "561": 33, "562": [33, 114, 214, 246], "563": 33, "564": 33, "565": 33, "566": 33, "567": 33, "568": 33, "569": [33, 51, 59, 482], "570": 33, "571": 33, "572": 33, "573": [33, 114, 187, 214, 246], "574": 33, "575": 33, "576": [33, 95, 482], "577": [33, 90], "578": 33, "579": 33, "580": [33, 35, 45, 482], "581": 33, "582": [33, 37, 114], "583": 33, "584": 33, "585": 33, "586": 33, "587": 33, "589": 33, "591": 33, "592": [33, 37, 114], "593": [33, 79, 81, 482], "595": 33, "596": 33, "597": 33, "598": 33, "599": [33, 114, 187, 236], "600": [33, 49, 118, 155, 191, 248], "601": 33, "602": 33, "603": 33, "604": 33, "605": 33, "606": 33, "607": [33, 85], "608": 33, "609": 33, "610": 33, "611": 33, "612": [33, 48, 466], "613": 33, "614": 33, "615": 33, "616": 33, "617": 33, "618": 33, "619": 33, "620": 33, "622": 33, "623": 33, "624": 33, "625": 33, "626": 33, "627": 33, "628": [33, 44, 45, 482], "629": 33, "631": 33, "632": 33, "633": 33, "634": 33, "635": 33, "637": 33, "638": 33, "640": [33, 77, 81, 482], "641": 33, "642": [33, 55, 59, 280, 443, 482], "643": 33, "644": 33, "645": 33, "646": 33, "647": 33, "649": 33, "650": 33, "652": 33, "653": 33, "654": 33, "655": 33, "656": 33, "657": 33, "658": 33, "659": 33, "660": 33, "661": 33, "662": 33, "663": 33, "664": 33, "665": [33, 58, 114, 117, 215, 219, 255, 271, 273], "666": 33, "668": 33, "671": 33, "672": 33, "673": 33, "674": 33, "675": 33, "676": 33, "677": 33, "678": [33, 58, 114, 219, 255], "679": [33, 467], "680": 33, "681": [33, 49, 114, 448, 454], "682": 33, "683": 33, "684": 33, "685": 33, "686": 33, "687": 33, "688": 33, "689": 33, "690": 33, "691": 33, "692": 33, "693": 33, "694": [33, 68, 72, 482], "695": 33, "696": [33, 100, 108, 482], "697": 33, "699": 33, "700": [33, 143, 155, 248], "701": 33, "703": 33, "704": 33, "705": 33, "706": 33, "707": [33, 61], "708": 33, "709": [33, 103, 108, 482], "710": 33, "711": 33, "712": 33, "714": 33, "715": 33, "716": 33, "718": 33, "719": 33, "720": 33, "721": 33, "722": [33, 66, 72, 482], "723": 33, "724": 33, "725": [33, 72, 482], "726": [33, 70], "727": 33, "728": 33, "729": [33, 466], "730": 33, "731": 33, "732": [33, 83, 95, 482], "733": 33, "734": 33, "735": 33, "736": [33, 75, 81, 482], "737": 33, "739": [33, 56, 59, 482], "740": [33, 37, 45, 482], "741": [33, 71, 72, 482], "743": 33, "745": 33, "746": 33, "13a": 33, "32a": 33, "bug": [33, 121, 124, 125, 133, 134, 135, 139, 152, 177, 178, 436, 438, 439, 466], "request": [33, 99, 130, 143, 155, 159, 169, 175, 188, 228, 229, 230, 243, 244, 245, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 339, 361, 362, 368, 369, 370, 371, 372, 373, 374, 375, 385, 414, 415, 442, 446, 447, 448, 449, 466, 480, 481], "plot_haxby_glm_decod": [33, 45, 482], "save_as_html": [33, 61, 62, 70, 74, 90, 91, 182, 441, 442, 443, 444, 445, 457, 459, 480], "although": [33, 39, 49, 78, 163, 175, 178, 182], "usual": [33, 48, 76, 78, 93, 150, 155, 161, 163, 164, 165, 170, 172, 175, 177, 178, 181, 238, 294, 295, 305, 311, 314, 379, 431, 447], "classification_accuraci": [33, 97], "chance_level": 33, "4f": [33, 34, 97], "7173": 33, "approach": [34, 40, 41, 48, 49, 65, 67, 114, 140, 155, 158, 161, 162, 163, 167, 169, 170, 171, 172, 176, 296, 342, 365, 366, 461, 465, 481, 483], "maxim": [34, 175, 314, 316, 317, 346, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "signific": [34, 49, 65, 74, 79, 114, 162, 167, 169, 172, 175, 339, 385, 458], "optimist": [34, 162], "lead": [34, 47, 48, 57, 83, 123, 125, 126, 127, 146, 155, 168, 169, 170, 172, 175, 230, 312, 370, 373, 460, 480], "overfit": [34, 163, 167], "loop": [34, 44, 69, 99, 146, 155, 162, 169, 181, 292, 293, 294, 295], "judg": [34, 85], "never": [34, 162, 169, 177, 357, 358], "grid": [34, 51, 66, 78, 83, 98, 163, 168, 175, 181, 230, 271, 273, 292, 293, 294, 295, 328, 329, 330, 334, 335, 336, 357, 396, 398, 401, 415, 420, 425, 428, 432, 433, 434, 435, 480], "difficulti": 34, "composit": 34, "hyperparamet": [34, 42], "param_grid": [34, 98, 110, 124, 155, 163, 292, 293, 294, 295], "sensibl": [34, 162, 165, 229, 232], "dual": [34, 51, 53, 97, 98, 114, 169, 229, 236, 292, 294], "1000": [34, 40, 49, 76, 93, 159, 172, 187, 190, 192, 220, 248, 446, 467], "l1": [34, 43, 114, 163, 164, 168, 229, 232, 292, 293, 294, 297, 298], "800": [34, 86, 248, 324, 337, 421, 459], "complet": [34, 60, 72, 93, 112, 116, 117, 143, 155, 156, 162, 164, 171, 178, 181, 182, 258, 260, 276, 291, 324, 327, 364, 367, 374, 385, 420, 421, 422, 423, 425, 427, 428, 429, 431, 432, 433, 434, 435, 447, 457, 458, 459, 466, 482], "stabl": [34, 48, 56, 97, 114, 123, 140, 155, 161, 163, 164, 169, 177, 240, 280, 292, 293, 294, 295, 299, 300, 365, 443, 465, 481], "cross_valid": [34, 97, 140, 155, 165, 292, 293, 294, 295], "excel": 34, "explan": [34, 83, 101, 162, 163, 164, 165, 170, 180, 182, 190, 237], "best_c": [34, 292, 293, 294, 295], "best_penalti": 34, "best_dual": 34, "cv_score": [34, 97], "9214876033057852": 34, "9177489177489176": 34, "7359307359307359": 34, "8225108225108225": 34, "735930735930736": 34, "screening_percentile_rang": 34, "val_scor": 34, "sp": 34, "sreen": 34, "000": [34, 42, 78, 93, 113, 167], "8196": 34, "5556": 34, "8704": 34, "5000": [34, 49, 55, 97], "8530": 34, "4444": 34, "8700": 34, "2778": 34, "8370": 34, "8644": 34, "6667": 34, "kfold": [34, 36, 37, 40, 44, 297, 298], "nested_cv_scor": 34, "_base": [34, 39, 48, 49], "1237": 34, "convergencewarn": [34, 39, 91, 103], "liblinear": [34, 292, 294], "fail": [34, 102, 123, 124, 126, 143, 152, 155, 169, 170, 271, 273, 449], "converg": [34, 91, 103, 169, 229, 232, 297, 298, 446], "increas": [34, 43, 44, 65, 68, 78, 88, 91, 102, 103, 124, 137, 155, 166, 167, 169, 172, 175, 181, 218, 232, 339, 366, 379, 385, 420, 433, 434, 435, 442, 447, 460, 483], "iter": [34, 53, 67, 69, 91, 103, 143, 155, 162, 167, 192, 229, 230, 232, 292, 293, 294, 295, 297, 298, 299, 300, 343, 347, 350, 351, 354, 359, 416, 447, 448, 454], "6944": 34, "tight": [34, 169], "axhlin": [34, 396, 398, 401, 403, 405, 407, 409, 411, 413], "frameon": [34, 386, 388, 389], "plot_haxby_grid_search": [34, 45, 482], "overal": [35, 65, 68, 124, 155, 169, 170, 209, 297, 298], "non_rest": 35, "unique_condit": 35, "return_index": 35, "appear": [35, 54, 88, 324, 337, 339, 423, 458], "argsort": [35, 42, 43, 102], "fit_transform": [35, 36, 42, 47, 49, 50, 51, 52, 54, 55, 56, 58, 61, 68, 88, 91, 97, 98, 99, 101, 102, 103, 104, 105, 110, 116, 125, 155, 157, 160, 171, 182, 228, 299, 300, 306, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "feature_select": [35, 36, 41, 42, 44, 93, 97, 101, 104, 105, 110, 165], "selectkbest": [35, 41, 110, 135, 155], "f_classif": [35, 36, 41, 93, 97, 165], "multiclass": [35, 163], "onevsoneclassifi": [35, 163], "onevsrestclassifi": [35, 163], "svc_ovo": 35, "svc_ova": 35, "cross_val_scor": [35, 97, 165], "cv_scores_ovo": 35, "cv_scores_ova": 35, "ovo": 35, "ova": 35, "601855088049469": 35, "6712058072321548": 35, "boxplot": [35, 93], "text": [35, 74, 93, 97, 104, 114, 162, 170, 179, 192, 207, 213, 217, 218, 226, 252, 260, 270, 311, 315, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 483], "y_pred_ovo": 35, "y_pred_ova": 35, "2764": [35, 45, 482], "plot_haxby_multiclass": [35, 45, 482], "intrins": [36, 114, 159, 192, 220, 222, 226, 248, 249, 252, 366], "process_mask_img": [36, 44, 167, 296], "back": [36, 41, 42, 48, 55, 97, 99, 101, 103, 116, 128, 136, 137, 155, 159, 167, 170, 182, 299, 300, 306, 307, 368, 371, 374, 384, 416, 446, 447, 448], "astyp": [36, 40, 41, 43, 44, 66, 74, 83, 93], "process_mask": [36, 44, 134, 155], "picked_slic": 36, "plot_haxby_searchlight": [36, 45, 482], "parallel": [36, 42, 43, 44, 47, 48, 78, 101, 104, 123, 155, 169, 172, 339, 371, 385], "thread": 36, "progress": [36, 42, 101, 104, 130, 155, 324], "mess": 36, "backend": [36, 42, 43, 44, 48, 101, 104, 124, 130, 140, 145, 150, 155, 300, 440], "lokybackend": [36, 42, 43, 44, 48, 101, 104], "concurr": [36, 42, 43, 44, 48, 100, 101, 104, 107], "worker": [36, 42, 43, 44, 48, 101, 104, 385], "elaps": [36, 42, 43, 44, 48, 101, 104], "finish": [36, 42, 43, 44, 48, 101, 104, 125, 155, 169, 170, 341, 361, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 433, 441, 443, 445], "shuffl": [36, 37, 48, 294, 295], "lt": [36, 74, 88, 90, 91, 467], "0x7fdc170c2e10": 36, "gt": [36, 74, 88, 90, 91, 467], "0x7fdc170c3020": 36, "environ": [36, 49, 52, 53, 58, 62, 74, 76, 114, 126, 140, 141, 143, 150, 155, 162, 177, 178, 180, 192, 282, 442, 481], "rerun": [36, 49, 52, 53, 58, 62, 74, 76], "trust": [36, 49, 52, 53, 58, 62, 74, 76, 172], "unabl": [36, 49, 52, 53, 58, 62, 68, 74, 76, 143, 155], "render": [36, 49, 52, 53, 58, 62, 74, 76, 125, 127, 141, 155, 170, 399, 427, 429, 436, 438, 439, 441, 443, 444, 445], "page": [36, 49, 52, 53, 58, 62, 74, 76, 114, 127, 140, 144, 150, 151, 152, 155, 159, 163, 167, 169, 170, 172, 178, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465], "nbviewer": [36, 49, 52, 53, 58, 62, 74, 76], "nbsp": [36, 49, 52, 53, 58, 62, 74, 76], "searchlightifittedsearchlight": 36, "fmri_mask": [36, 91, 97, 101, 104, 105, 116], "p_valu": [36, 44, 76, 78, 93, 106, 147, 155, 312, 324, 337], "log10": [36, 42, 44, 76, 78, 93, 101, 104, 105, 339, 385, 458], "p_unmask": 36, "inverse_transform": [36, 40, 42, 49, 55, 91, 97, 99, 101, 102, 103, 104, 105, 110, 115, 124, 136, 143, 152, 155, 159, 228, 299, 300, 306, 307, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449, 483], "surrog": [36, 101], "mean_fmri": 36, "searchlight_img": 36, "scores_": [36, 44, 167], "hot": 36, "f_score": [36, 166, 483], "p_ma": 36, "f_score_img": 36, "799": [36, 45, 57, 59, 482], "demo": [37, 99, 100, 107, 109, 111, 112, 116, 146, 150, 155, 170, 184, 193, 228, 263, 292, 304, 305, 306, 307, 308, 309, 432, 436, 440, 482], "coars": 37, "pial_mesh": 37, "term": [37, 54, 65, 88, 91, 115, 151, 155, 161, 163, 169, 172, 175, 177, 180, 181, 188, 268, 271, 297, 298, 311, 331, 365, 461, 467], "within": [37, 47, 55, 65, 66, 78, 87, 99, 101, 143, 146, 152, 155, 159, 161, 167, 171, 174, 192, 292, 293, 296, 321, 324, 326, 327, 331, 337, 341, 342, 361, 369, 370, 371, 372, 373, 374, 375, 383, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 421, 422, 447, 450, 459, 461], "adjac": [37, 143, 155, 301], "nearbi": 37, "infl_mesh": 37, "infl_": 37, "nn": 37, "nearestneighbor": 37, "radius_neighbors_graph": 37, "tolil": 37, "linear_model": [37, 40, 41, 44, 110, 300], "ridgeclassifi": 37, "make_pipelin": [37, 40, 44, 110], "standardscal": [37, 39, 40, 41, 44, 110], "search_light": [37, 296], "preced": [37, 170, 182, 324], "search": [37, 88, 124, 155, 170, 178, 230, 292, 293, 294, 295, 362], "light": [37, 135, 141, 143, 155, 170, 339], "sulc_": 37, "yi": [37, 114], "praneeth": [37, 114], "namburi": [37, 114], "lloyd": [37, 114], "elliott": [37, 56, 114, 365, 366], "jakob": [37, 114], "heinzl": [37, 114], "chun": [37, 114], "siong": [37, 114], "soon": [37, 69, 114, 178], "w": [37, 44, 58, 105, 114, 156, 188, 199, 220, 225, 226, 228, 230, 248, 251, 252, 254, 258, 268, 276, 297, 298], "chee": [37, 114], "hayn": [37, 114, 167], "2011": [37, 44, 49, 58, 114, 117, 122, 135, 155, 156, 163, 167, 168, 184, 192, 208, 212, 214, 215, 220, 222, 239, 246, 248, 249, 252, 255, 261, 269, 271, 273, 286, 365, 366], "multivari": [37, 96, 108, 112, 114, 161, 175, 176, 177, 191, 239, 257, 349, 354, 368, 374, 435, 440, 481, 482], "s1053811910010086": [37, 114], "035": [37, 41, 114], "plot_haxby_searchlight_surfac": [37, 45, 482], "overview": [38, 167, 169, 177], "fetch_stimuli": [38, 260], "stimulus_inform": 38, "stim_typ": 38, "skip": [38, 49, 56, 125, 155, 437, 440], "file_nam": [38, 457], "suptitl": [38, 40, 42, 43, 44, 65, 74, 78, 99, 100, 104], "img_path": [38, 363], "ravel": [38, 41, 43, 44, 101, 104, 105], "imread": 38, "077": [38, 41, 45, 482], "plot_haxby_stimuli": [38, 45, 482], "gain": [39, 65, 164, 169, 212, 269], "fetch_mixed_gambl": [39, 151, 155, 212], "zmap_filenam": 39, "zmap": [39, 100, 212, 269], "behavioral_target": 39, "svr": [39, 42, 44, 143, 155, 163, 293, 295, 296], "solver": [39, 114, 168, 292, 294, 297, 298], "termin": [39, 162, 170, 481], "earli": [39, 114, 168, 227, 271, 273, 342, 446, 461], "max_it": [39, 40, 48, 57, 229, 230, 232, 292, 293, 294, 295, 297, 298], "10000": [39, 42, 49, 55, 101, 104, 339, 385], "pre": [39, 70, 93, 100, 124, 135, 140, 152, 155, 172, 182, 197, 315], "minmaxscal": 39, "0x7fdc0d5c13a0": 39, "observ": [39, 44, 58, 61, 63, 65, 69, 78, 79, 80, 101, 163, 167, 171, 172, 175, 177, 182, 315, 446], "learnt": 39, "impos": [39, 128, 155], "relat": [39, 46, 49, 50, 63, 64, 65, 66, 67, 69, 80, 99, 105, 112, 114, 117, 134, 135, 155, 157, 158, 160, 162, 163, 166, 169, 170, 175, 176, 177, 178, 182, 211, 228, 257, 262, 283, 284, 287, 299, 300, 312, 324, 348, 362, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 447, 449, 462, 481, 483], "guid": [39, 123, 155, 170, 174, 176, 177, 182, 184, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 472, 473, 481], "unstructur": 39, "graph_net": 39, "heavi": [39, 42, 156, 170, 375], "spacenetregressor": [39, 43, 168, 297], "regressor": [39, 43, 56, 61, 62, 63, 65, 99, 100, 104, 107, 123, 146, 147, 151, 155, 157, 163, 171, 268, 293, 295, 298, 320, 324, 326, 331, 339, 365, 366, 385], "tv_l1": 39, "ep": [39, 297, 298], "prefer": [39, 51, 98, 159, 170, 180], "2213": [39, 45, 482], "plot_mixed_gambles_frem": [39, 45, 482], "partli": [40, 42, 169, 172, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 252, 257, 260, 261, 262, 266, 268, 269, 270, 275, 281], "neuron": [40, 41, 58, 114, 167, 213, 219, 255, 270], "sound": [40, 172], "real": [40, 162, 167, 169, 172, 180, 182], "world": [40, 180, 182, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 419, 422, 431], "stimulu": [40, 41, 64, 99, 172], "particip": [40, 56, 65, 110, 114, 170, 172, 175, 190, 217, 365, 366], "10x10": [40, 41], "binari": [40, 41, 65, 74, 123, 152, 155, 175, 178, 182, 262, 292, 293, 294, 295, 297, 298, 434, 458, 461], "pixel": [40, 41, 172, 324, 337, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 441, 444, 459], "fetch_miyawaki2008": [40, 41, 88, 213], "fmri_random_runs_filenam": 40, "stimuli_random_runs_filenam": 40, "multiniftimask": [40, 41, 48, 49, 126, 147, 149, 155, 179, 292, 293, 294, 295, 297, 298, 299, 300, 337, 339, 385, 447, 467, 483], "clean": [40, 43, 49, 52, 53, 56, 58, 68, 102, 114, 123, 124, 126, 133, 139, 140, 143, 147, 148, 150, 155, 178, 181, 182, 228, 299, 300, 324, 342, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 421, 447, 449], "fmri_data": [40, 93, 324, 337], "wiht": 40, "stimulus_shap": 40, "stimulus_run": 40, "reshap": [40, 41, 44, 50, 66, 76, 104, 126, 136, 155, 160, 228], "loadtxt": [40, 41], "pylab": [40, 432], "wspace": [40, 44], "stack": [40, 51, 58, 148, 155, 175, 235], "offset": [40, 51, 83, 146, 155, 181, 247, 248, 357], "begin": [40, 62, 65, 69, 146, 155, 170, 175, 188, 460], "stimuli_run": 40, "2860": 40, "5438": 40, "proce": [40, 55, 64, 116], "independ": [40, 48, 65, 96, 108, 112, 128, 155, 159, 161, 162, 167, 169, 172, 175, 182, 213, 214, 257, 292, 293, 294, 295, 299, 342, 349, 354, 365, 366, 368, 374, 385, 435, 440, 461, 482], "hold": [40, 77, 169, 170, 178, 299, 300, 331, 385, 396, 447], "held": [40, 167, 170, 292, 293, 294, 295, 481], "10th": 40, "r2_score": [40, 298], "multioutput": [40, 298], "raw_valu": 40, "threshold_img": [40, 80, 87, 124, 128, 150, 155, 340, 341], "cut_scor": 40, "bring": [40, 48, 164, 170, 177, 384], "score_map_img": 40, "thresholded_score_map_img": 40, "mark": [40, 56, 99, 114, 156, 188, 268, 365, 366], "four": [40, 44, 65, 150, 155, 182, 226], "coord_transform": [40, 137, 155], "def": [40, 41, 44, 47, 53, 65, 66, 99, 106, 110, 170, 178, 436, 438, 439], "index_to_xy_coord": 40, "newaxi": [40, 44, 79, 83], "xy_indices_of_special_voxel": 40, "marker": [40, 127, 141, 143, 146, 148, 155, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 422, 431, 441, 442, 444, 449, 451, 483], "add_mark": [40, 55, 61, 68, 99, 132, 138, 141, 155, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 480], "magenta": [40, 68, 480], "lw": [40, 68], "construct": [40, 52, 54, 97, 114, 158, 161, 167, 170, 171, 176, 177, 189, 311, 312, 315, 338, 457], "gcf": 40, "set_size_inch": [40, 68], "closer": [40, 49, 169, 458], "presenc": [40, 65, 101, 449, 451], "lasso": [40, 57, 58, 114, 156, 163, 168, 169, 293, 295, 297, 298, 300], "lassolarscv": 40, "sparsiti": [40, 48, 114, 128, 155, 156, 160, 161, 163, 164, 168, 169, 175, 214, 230, 232, 297, 298, 300, 449], "marked_pixel": 40, "gridspec": [40, 148, 155], "gs1": 40, "1780": 40, "1951": [40, 143, 155], "2131": [40, 143, 155, 467], "rf": [40, 66], "named_step": [40, 44, 97], "zeros_lik": [40, 66, 83, 101], "ax_im": 40, "masked_less": [40, 105], "green": [40, 49, 88, 91, 114, 148, 155, 221, 256, 311, 315, 467], "add_patch": 40, "updat": [40, 92, 99, 123, 124, 125, 126, 127, 130, 134, 135, 140, 143, 149, 150, 152, 155, 178, 228, 229, 230, 248, 271, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "1935": [40, 114], "rdpu": 40, "0x7fdc185891c0": 40, "rel": [40, 49, 58, 64, 65, 90, 170, 172, 175, 178, 292, 293, 294, 295, 296, 297, 298, 324, 326, 331, 346, 441, 443, 445, 467], "roughli": [40, 163, 170, 172, 192], "relationship": [40, 42, 74, 167, 174, 176, 177, 188, 268, 385], "yoichi": [40, 41, 114, 213, 270], "hajim": [40, 41, 114, 213, 270], "uchida": [40, 41, 114, 213, 270], "okito": [40, 41, 114, 213, 270], "yamashita": [40, 41, 114, 213, 270], "masa": [40, 41, 114, 213, 270], "aki": [40, 41, 114, 140, 155, 213, 270], "sato": [40, 41, 114, 213, 270], "yusuk": [40, 41, 114, 213, 270], "morito": [40, 41, 114, 213, 270], "hiroki": [40, 41, 114, 213, 270], "tanab": [40, 41, 114, 213, 270], "norihiro": [40, 41, 114, 213, 270], "sadato": [40, 41, 114, 213, 270], "yukiyasu": [40, 41, 114, 213, 270], "kamitani": [40, 41, 114, 213, 270], "915": [40, 41, 114, 213, 270], "929": [40, 41, 114, 213, 270], "s0896627308009586": [40, 41, 114, 213, 270], "004": [40, 41, 114, 192, 213, 270], "plot_miyawaki_encod": [40, 45, 482], "elabor": [41, 128, 155, 480], "stderr": 41, "miyawaki_dataset": [41, 88], "x_random_filenam": 41, "x_figure_filenam": 41, "y_random_filenam": 41, "y_figure_filenam": 41, "y_shape": 41, "miyawaki2008": [41, 88, 467], "data_figure_run01": [41, 88], "n_featur": [41, 47, 57, 169, 228, 229, 230, 232, 234, 292, 293, 294, 295, 297, 298, 299, 300, 311, 324, 337, 446, 448, 454], "list_of_2d_arrai": 41, "squar": [41, 43, 49, 65, 99, 101, 104, 114, 157, 163, 168, 169, 171, 192, 228, 298, 311, 314, 315, 316, 324, 337, 348, 364, 365, 370, 373, 385, 446, 447, 448, 462], "y_row": 41, "y_col": 41, "height_tf": 41, "width_tf": 41, "yt_tall": 41, "dot": [41, 44, 55, 99, 102, 169, 314, 315, 316, 317, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "yt_larg": 41, "yt_big": 41, "r_": 41, "orthogonalmatchingpursuit": 41, "omp": 41, "clf": [41, 137, 155], "n_clf": 41, "scl": 41, "n_nonzero_coef": 41, "03d": [41, 99], "002": 41, "003": 41, "005": [41, 114, 164, 294, 295], "006": [41, 49, 58, 114, 219, 255], "007": [41, 56, 114, 156, 157, 212, 214, 246, 269], "009": [41, 114, 421], "011": 41, "012": 41, "013": 41, "014": 41, "015": 41, "016": [41, 65], "017": [41, 56, 59, 482], "018": [41, 114, 192, 365, 366], "019": 41, "020": [41, 56, 114, 206, 365, 366], "021": 41, "022": 41, "023": [41, 65, 72, 482], "024": [41, 48, 59, 482], "025": 41, "026": 41, "027": 41, "028": [41, 50, 59, 482], "029": 41, "030": 41, "031": 41, "032": 41, "033": [41, 114, 192, 208, 261, 286], "034": 41, "036": 41, "037": [41, 114], "038": 41, "039": 41, "040": 41, "041": [41, 114, 167], "042": [41, 114, 365, 366, 462], "043": 41, "044": 41, "045": 41, "046": 41, "047": 41, "048": [41, 114, 365], "049": 41, "050": 41, "051": 41, "052": [41, 80, 81, 114, 194, 266, 482], "053": 41, "054": [41, 114, 167], "055": 41, "056": 41, "057": 41, "058": 41, "059": 41, "060": [41, 75, 101, 114, 319, 385], "061": [41, 114, 175, 339, 385], "062": [41, 51, 98, 114, 168], "063": [41, 114, 156], "064": [41, 114, 365, 366], "065": 41, "066": 41, "067": 41, "068": 41, "069": 41, "070": 41, "071": 41, "072": 41, "073": [41, 56, 114, 163, 366], "074": [41, 59], "075": 41, "076": 41, "078": 41, "079": 41, "080": [41, 114], "081": 41, "083": 41, "084": 41, "085": 41, "086": 41, "087": 41, "088": 41, "089": [41, 62, 72, 482], "090": 41, "091": 41, "092": 41, "093": 41, "094": 41, "095": 41, "096": 41, "097": 41, "098": 41, "099": 41, "split_multi_scal": 41, "multi_scal": 41, "yw": 41, "yh": 41, "split_index": 41, "tall": 41, "y_pred_tal": 41, "1x2": 41, "applic": [41, 114, 148, 155, 157, 163, 169, 176, 192, 324, 337, 371, 385, 452, 453, 459, 480, 481, 483], "calculu": 41, "height_tf_i": 41, "y_pred_larg": 41, "2x1": 41, "width_tf_i": 41, "y_pred_big": 41, "2x2": [41, 141, 155, 396, 398, 401, 415, 420, 425, 428, 433, 434, 435, 480], "accuracy_scor": [41, 51], "f1_score": 41, "precision_scor": 41, "recall_scor": 41, "recal": [41, 292, 294], "zero_divis": 41, "f1": [41, 162, 292, 294], "801208": 41, "413969": 41, "572388": 41, "465973": 41, "six": [41, 192], "ground": [41, 44, 57, 162], "truth": [41, 44, 57, 162], "plot_miyawaki_reconstruct": [41, 45, 482], "sp1": 41, "sp2": 41, "sp3": 41, "binar": [41, 93, 149, 155, 236, 341], "miyawaki2008_reconstruction_": 41, "999": [41, 45, 467, 482], "densiti": [42, 57, 74, 169, 174, 176, 208, 217, 236, 261, 275], "agre": [42, 74, 170, 188, 275, 337, 339], "agreement": [42, 62, 74, 188, 217, 221, 275], "spm8": [42, 74, 238, 275], "newseg": [42, 74], "ran": 42, "prepar": [42, 58, 93, 98, 100, 107, 116, 130, 155, 166, 179, 306, 307, 369, 370, 371, 372, 373, 375, 449, 483], "impact": [42, 65, 77, 150, 155, 167, 170, 178, 182, 324, 337, 366], "significantli": [42, 65, 140, 155, 167, 169], "noisi": [42, 91, 156], "detriment": [42, 366], "permut": [42, 76, 78, 101, 104, 114, 123, 146, 155, 165, 167, 172, 339, 356, 385, 474], "exact": [42, 167, 170, 172, 261, 262, 480], "comparison": [42, 49, 51, 57, 62, 65, 80, 92, 98, 99, 101, 114, 117, 156, 159, 166, 167, 168, 173, 175, 191, 195, 239, 483], "clearer": [42, 170], "oasis_dataset": [42, 74], "fetch_oasis_vbm": [42, 43, 74, 217], "gray_matter_map_filenam": [42, 74], "gray_matter_map": [42, 43, 74, 217, 275], "ext_var": [42, 43, 74, 76, 78, 104, 217, 275], "train_test_split": [42, 43], "gm_imgs_train": [42, 43], "gm_imgs_test": [42, 43], "age_train": [42, 43], "age_test": [42, 43], "train_siz": [42, 43], "white_matter_map": [42, 74, 217, 275], "oasis1": [42, 43, 74], "oas1_0001_mr1": [42, 43, 74], "mwrc1oas1_0001_mr1_mpr_anon_fslswapdim_bet": [42, 43, 74], "mwrc2oas1_0001_mr1_mpr_anon_fslswapdim_bet": [42, 74], "cach": [42, 43, 49, 54, 56, 101, 122, 128, 155, 159, 229, 292, 293, 294, 295, 297, 298, 299, 300, 324, 337, 343, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 447, 448, 449, 465], "gm_maps_mask": 42, "variancethreshold": 42, "variance_threshold": 42, "get_support": 42, "decoderregressor": [42, 143, 146, 147, 155, 163, 292, 295], "benefit": [42, 49, 56, 65, 143, 155, 170, 181], "some_high_valu": [42, 43], "advantag": [42, 43, 67, 169, 182], "neg_mean_absolute_error": [42, 293, 295], "trend": [42, 43, 88, 182], "etc": [42, 43, 79, 88, 91, 93, 117, 168, 171, 175, 180, 268, 292, 293, 294, 295, 297, 298, 316, 374, 467], "perm": [42, 43], "age_pr": 42, "prediction_scor": 42, "670599": 42, "bg_filenam": 42, "absolut": [42, 43, 58, 110, 143, 155, 167, 169, 170, 210, 253, 263, 276, 341, 346, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 419, 420, 422, 427, 428, 430, 434, 435, 436, 439, 442, 443, 445, 480], "year": [42, 43, 114, 169, 178, 197, 257, 275], "0x7fdc194e1940": 42, "mass_univari": [42, 78, 101, 104, 146, 152, 155, 167, 174], "permuted_ol": [42, 78, 101, 104, 123, 124, 146, 151, 152, 155, 167, 174, 339], "neg_log_pv": [42, 76, 78, 101], "t_scores_original_data": [42, 101], "intercept": [42, 74, 75, 76, 78, 79, 80, 101, 105, 124, 155, 167, 292, 293, 294, 295, 297, 298, 338, 339, 385], "n_perm": [42, 76, 78, 101, 104, 339, 385], "signed_neg_log_pv": [42, 101], "signed_neg_log_pvals_unmask": [42, 101], "rdbu_r": [42, 44, 101, 432], "log_": [42, 101, 104, 105], "parametr": [42, 64, 65, 76, 78, 101, 104, 105, 114, 167, 174, 175, 312, 313, 318, 342, 461], "n_detect": [42, 101, 104], "detect": [42, 66, 76, 78, 88, 99, 101, 105, 114, 156, 167, 172, 175, 182, 228, 365, 366, 446, 480], "1970": 42, "988": [42, 45, 114, 482], "2300": [42, 145, 155], "plot_oasis_vbm": [42, 45, 143, 155, 482], "ag": [43, 46, 59, 77, 96, 108, 112, 114, 143, 155, 156, 163, 164, 168, 174, 175, 176, 177, 190, 192, 197, 206, 208, 217, 228, 236, 246, 257, 261, 268, 275, 281, 286, 292, 293, 294, 295, 297, 298, 368, 373, 422, 432, 440, 466, 482], "concentr": [43, 170, 172, 175], "ram": 43, "box": [43, 83, 97, 103, 136, 155, 163, 170, 181, 221, 357], "dataset_fil": 43, "gm_img": 43, "check_random_st": [43, 44], "rng": [43, 170], "intermedi": [43, 67, 165, 177], "graph": [43, 47, 53, 57, 156, 158, 168, 169, 175, 176, 292, 293, 297, 298, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 431, 483], "beauti": 43, "tv": [43, 114, 168, 292, 293, 297, 298], "expens": 43, "longer": [43, 103, 121, 123, 124, 125, 126, 137, 141, 143, 146, 148, 150, 152, 155, 172], "runtim": [43, 152, 155, 170, 297, 298], "mse": [43, 297, 298, 316], "oas1_0003_mr1": 43, "mwrc1oas1_0003_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0086_mr1": 43, "mwrc1oas1_0086_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0052_mr1": 43, "mwrc1oas1_0052_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0211_mr1": 43, "mwrc1oas1_0211_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0216_mr1": 43, "mwrc1oas1_0216_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0096_mr1": 43, "mwrc1oas1_0096_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0182_mr1": 43, "mwrc1oas1_0182_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0041_mr1": 43, "mwrc1oas1_0041_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0214_mr1": 43, "mwrc1oas1_0214_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0069_mr1": 43, "mwrc1oas1_0069_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0025_mr1": 43, "mwrc1oas1_0025_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0159_mr1": 43, "mwrc1oas1_0159_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0113_mr1": 43, "mwrc1oas1_0113_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0038_mr1": 43, "mwrc1oas1_0038_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0013_mr1": 43, "mwrc1oas1_0013_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0220_mr1": 43, "mwrc1oas1_0220_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0180_mr1": 43, "mwrc1oas1_0180_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0007_mr1": 43, "mwrc1oas1_0007_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0031_mr1": 43, "mwrc1oas1_0031_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0135_mr1": 43, "mwrc1oas1_0135_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0005_mr1": 43, "mwrc1oas1_0005_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0037_mr1": 43, "mwrc1oas1_0037_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0160_mr1": 43, "mwrc1oas1_0160_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0163_mr1": 43, "mwrc1oas1_0163_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0123_mr1": 43, "mwrc1oas1_0123_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0162_mr1": 43, "mwrc1oas1_0162_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0012_mr1": 43, "mwrc1oas1_0012_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0070_mr1": 43, "mwrc1oas1_0070_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0126_mr1": 43, "mwrc1oas1_0126_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0164_mr1": 43, "mwrc1oas1_0164_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0188_mr1": 43, "mwrc1oas1_0188_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0226_mr1": 43, "mwrc1oas1_0226_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0173_mr1": 43, "mwrc1oas1_0173_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0078_mr1": 43, "mwrc1oas1_0078_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0138_mr1": 43, "mwrc1oas1_0138_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0072_mr1": 43, "mwrc1oas1_0072_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0050_mr1": 43, "mwrc1oas1_0050_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0184_mr1": 43, "mwrc1oas1_0184_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0032_mr1": 43, "mwrc1oas1_0032_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0045_mr1": 43, "mwrc1oas1_0045_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0121_mr1": 43, "mwrc1oas1_0121_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0176_mr1": 43, "mwrc1oas1_0176_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0177_mr1": 43, "mwrc1oas1_0177_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0029_mr1": 43, "mwrc1oas1_0029_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0026_mr1": 43, "mwrc1oas1_0026_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0208_mr1": 43, "mwrc1oas1_0208_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0165_mr1": 43, "mwrc1oas1_0165_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0091_mr1": 43, "mwrc1oas1_0091_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0044_mr1": 43, "mwrc1oas1_0044_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0190_mr1": 43, "mwrc1oas1_0190_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0053_mr1": 43, "mwrc1oas1_0053_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0106_mr1": 43, "mwrc1oas1_0106_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0174_mr1": 43, "mwrc1oas1_0174_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0049_mr1": 43, "mwrc1oas1_0049_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0155_mr1": 43, "mwrc1oas1_0155_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0004_mr1": 43, "mwrc1oas1_0004_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0117_mr1": 43, "mwrc1oas1_0117_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0060_mr1": 43, "mwrc1oas1_0060_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0148_mr1": 43, "mwrc1oas1_0148_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0204_mr1": 43, "mwrc1oas1_0204_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0202_mr1": 43, "mwrc1oas1_0202_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0209_mr1": 43, "mwrc1oas1_0209_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0055_mr1": 43, "mwrc1oas1_0055_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0090_mr1": 43, "mwrc1oas1_0090_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0039_mr1": 43, "mwrc1oas1_0039_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0009_mr1": 43, "mwrc1oas1_0009_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0124_mr1": 43, "mwrc1oas1_0124_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0103_mr1": 43, "mwrc1oas1_0103_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0094_mr1": 43, "mwrc1oas1_0094_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0200_mr1": 43, "mwrc1oas1_0200_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0205_mr1": 43, "mwrc1oas1_0205_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0101_mr1": 43, "mwrc1oas1_0101_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0010_mr1": 43, "mwrc1oas1_0010_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0015_mr1": 43, "mwrc1oas1_0015_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0067_mr1": 43, "mwrc1oas1_0067_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0193_mr1": 43, "mwrc1oas1_0193_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0146_mr1": 43, "mwrc1oas1_0146_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0019_mr1": 43, "mwrc1oas1_0019_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0080_mr1": 43, "mwrc1oas1_0080_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0199_mr1": 43, "mwrc1oas1_0199_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0150_mr1": 43, "mwrc1oas1_0150_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0189_mr1": 43, "mwrc1oas1_0189_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0207_mr1": 43, "mwrc1oas1_0207_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0071_mr1": 43, "mwrc1oas1_0071_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0061_mr1": 43, "mwrc1oas1_0061_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0120_mr1": 43, "mwrc1oas1_0120_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0056_mr1": 43, "mwrc1oas1_0056_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0223_mr1": 43, "mwrc1oas1_0223_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0065_mr1": 43, "mwrc1oas1_0065_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0054_mr1": 43, "mwrc1oas1_0054_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0099_mr1": 43, "mwrc1oas1_0099_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0023_mr1": 43, "mwrc1oas1_0023_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0064_mr1": 43, "mwrc1oas1_0064_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0181_mr1": 43, "mwrc1oas1_0181_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0217_mr1": 43, "mwrc1oas1_0217_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0144_mr1": 43, "mwrc1oas1_0144_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0042_mr1": 43, "mwrc1oas1_0042_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0178_mr1": 43, "mwrc1oas1_0178_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0218_mr1": 43, "mwrc1oas1_0218_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0002_mr1": 43, "mwrc1oas1_0002_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0059_mr1": 43, "mwrc1oas1_0059_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0167_mr1": 43, "mwrc1oas1_0167_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0145_mr1": 43, "mwrc1oas1_0145_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0169_mr1": 43, "mwrc1oas1_0169_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0115_mr1": 43, "mwrc1oas1_0115_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0111_mr1": 43, "mwrc1oas1_0111_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0131_mr1": 43, "mwrc1oas1_0131_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0098_mr1": 43, "mwrc1oas1_0098_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0082_mr1": 43, "mwrc1oas1_0082_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0136_mr1": 43, "mwrc1oas1_0136_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0227_mr1": 43, "mwrc1oas1_0227_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0022_mr1": 43, "mwrc1oas1_0022_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0212_mr1": 43, "mwrc1oas1_0212_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0079_mr1": 43, "mwrc1oas1_0079_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0119_mr1": 43, "mwrc1oas1_0119_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0016_mr1": 43, "mwrc1oas1_0016_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0104_mr1": 43, "mwrc1oas1_0104_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0203_mr1": 43, "mwrc1oas1_0203_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0114_mr1": 43, "mwrc1oas1_0114_mr1_mpr_anon_fslswapdim_bet": 43, "transform_single_img": [43, 49, 52, 53, 56, 58, 127, 155, 368, 369, 370, 371, 372, 373, 374, 375, 449], "plot_oasis_vbm_space_net": [43, 45, 482], "3min": 43, "14904594421387": 43, "5691507657368977": 43, "ax1": [43, 63, 74, 77, 429], "ax2": [43, 63, 429], "2902": [43, 150, 155], "sketch": 44, "mathbf": 44, "opposit": [44, 69, 167], "corner": [44, 133, 155, 170, 359], "middl": [44, 65, 90, 114, 140, 148, 155, 217, 275, 363], "linalg": [44, 169], "ndimag": [44, 93, 181, 262, 284, 287, 351, 377, 378, 379, 381, 382], "gaussian_filt": 44, "f_regress": [44, 101, 104, 105, 110], "create_simulation_data": 44, "snr": [44, 175, 342, 461], "roi_siz": 44, "smooth_x": 44, "xx": 44, "randn": [44, 63], "xi": [44, 114, 220, 248], "norm_nois": 44, "norm": [44, 55, 62, 75, 78, 100, 106, 107, 228, 234, 292, 293, 294, 295, 297, 298, 299, 300, 324, 421, 446, 447, 448, 449], "exp": 44, "noise_coef": 44, "log": [44, 49, 53, 76, 78, 93, 130, 155, 167, 169, 311, 314, 315, 316, 317, 353, 429], "1f": [44, 436, 439], "db": [44, 114, 188, 316, 317], "plot_slic": 44, "hspace": [44, 49, 57], "bool": [44, 93, 102, 228, 229, 230, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 252, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 275, 281, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 319, 321, 324, 337, 339, 340, 341, 342, 346, 348, 352, 355, 357, 358, 361, 362, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 420, 421, 422, 423, 424, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 438, 439, 441, 442, 443, 445, 446, 447, 448, 449, 450, 452, 453, 458, 459, 460, 461, 462], "uint8": [44, 56, 90, 152, 155, 355], "recov": [44, 58, 136, 155, 156], "elast": 44, "bayesian": [44, 172], "metaprior": 44, "ridgecv": [44, 124, 155, 292, 293, 294, 295], "elasticnetcv": 44, "bayesian_ridg": 44, "bayesianridg": 44, "enet_cv": 44, "l1_ratio": [44, 297, 298], "ridge_cv": 44, "r2": [44, 147, 155, 293, 295, 316], "expos": [44, 49, 117, 125, 126, 132, 136, 137, 155, 170, 180, 271, 272, 273, 274], "fairli": [44, 163, 172], "attribut": [44, 48, 49, 50, 83, 88, 116, 117, 125, 126, 138, 147, 148, 150, 151, 152, 155, 156, 159, 160, 161, 167, 170, 180, 182, 192, 195, 218, 228, 229, 230, 237, 241, 243, 246, 257, 259, 260, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 292, 293, 294, 295, 297, 298, 299, 300, 306, 314, 315, 316, 317, 324, 344, 352, 365, 366, 369, 370, 371, 372, 373, 374, 375, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 436, 438, 439, 446, 447, 448, 449, 464, 465], "t1": [44, 74, 149, 155, 189, 192, 206, 208, 238, 261, 283, 285, 286, 288, 420, 480], "els": [44, 47, 66, 68, 71, 93, 99, 269, 292, 293, 294, 295, 297, 298, 437], "elapsed_tim": 44, "__class__": [44, 48, 49], "__name__": [44, 48, 49], "isnan": [44, 76, 93, 101, 104, 105], "exercic": 44, "recurs": [44, 49, 97, 114, 143, 155, 159, 165, 175, 176, 447, 448, 454], "elimin": [44, 97, 165, 168, 433, 434], "rfe": [44, 97, 165], "tip": [44, 177], "ga": [44, 114, 162, 168], "\u00eb": [44, 114, 162, 168], "evelyn": [44, 49, 114, 168], "eger": [44, 49, 114, 168], "variat": [44, 76, 100, 104, 105, 114, 124, 155, 167, 168, 175, 275, 323, 339, 385], "behaviour": [44, 114, 128, 140, 147, 152, 155, 168, 182, 188, 268], "ieee": [44, 48, 49, 114, 161, 168, 189, 198, 299, 300, 448, 454], "transact": [44, 114, 168, 189, 198], "1328": [44, 114, 168], "1340": [44, 114, 168], "februari": [44, 114, 118, 119, 124, 130, 131, 135, 145, 155, 168, 177], "hal": [44, 114, 160, 168, 198, 243, 449], "00563468": [44, 114, 168], "1109": [44, 48, 49, 114, 161, 168, 189, 192, 240, 299, 300, 448, 454], "tmi": [44, 114, 168], "2113378": [44, 114, 168], "plot_simulated_data": [44, 45, 482], "973": [45, 61, 72, 467, 482], "2901": [45, 482], "2299": [45, 146, 155, 482], "998": [45, 482], "turn": [47, 65, 83, 157, 159, 169, 182, 324, 337, 377, 378, 379, 381, 382, 433, 434, 435, 442, 459], "find_parcellation_cut_coord": [47, 58, 140, 150, 155, 157, 418, 422], "find_probabilistic_atlas_cut_coord": [47, 50, 53, 140, 155, 157, 160, 417, 422], "intermediari": 47, "multiniftilabelsmask": [47, 123, 125, 127, 155, 179, 467, 483], "multiniftimapsmask": [47, 123, 125, 127, 155, 179, 467, 483], "connectivitymeasur": [47, 50, 51, 54, 56, 58, 98, 110, 125, 128, 130, 133, 136, 146, 155, 156, 157, 160], "fetch_atlas_yeo_2011": [47, 85, 157, 226], "liber": [47, 78], "thick_17": [47, 226, 252], "yeo_2011": [47, 467], "yeo_jneurophysiol11_mni152": [47, 467], "yeo2011_17networks_mni152_freesurferconformed1mm_liberalmask": [47, 467], "fetch_development_fmri": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 84, 88, 90, 91, 94, 98, 103, 143, 155, 156, 157, 159, 160, 177, 182, 197], "counfound": 47, "development_fmri": [47, 48, 49, 52, 53, 54, 55, 56, 58, 84, 90, 91, 94, 103], "pixar123_task": [47, 48, 49, 52, 53, 54, 55, 56, 58, 84, 90, 91, 94, 103], "pixar_spac": [47, 48, 49, 52, 53, 54, 55, 56, 58, 84, 90, 91, 94, 103], "mni152nlin2009casym_desc": [47, 48, 49, 52, 53, 54, 55, 56, 58, 84, 90, 91, 94, 103], "preproc_bold": [47, 48, 49, 52, 53, 54, 55, 56, 58, 84, 90, 91, 94, 99, 100, 103, 107], "pixar_desc": [47, 52, 53, 55, 56, 58], "reducedconfounds_regressor": [47, 52, 53, 55, 56, 58], "conenctivitymeasur": 47, "connectome_measur": [47, 50, 160], "labels_img": [47, 49, 56, 90, 93, 110, 157, 306, 369, 372, 417, 450, 452, 455, 467], "time_seri": [47, 51, 52, 54, 56, 58, 156, 157], "mean_correlation_matrix": [47, 51], "mean_": [47, 51, 110, 156, 228], "strength": [47, 143, 146, 155, 236, 359, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 480], "0x7fdc1bbc8ce0": 47, "latter": [47, 163, 169, 228, 229, 230, 244, 245, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "lag_correl": 47, "lag_cor": 47, "corrcoef": 47, "lag_correlation_matrix": 47, "03_connect": [47, 48, 49, 55, 59, 143, 155, 482], "plot_atlas_comparison": [47, 59, 482], "adjacency_matrix": [47, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 441], "maps_img": [47, 52, 53, 54, 157, 182, 369, 370, 372, 373, 418, 433, 449, 451, 453, 456, 467], "multi_nifti_maps_mask": 47, "current": [47, 49, 52, 54, 66, 70, 152, 155, 167, 169, 170, 175, 178, 182, 232, 240, 241, 249, 275, 276, 312, 362, 364, 368, 369, 370, 371, 372, 373, 374, 375, 436, 438, 439, 442, 449], "786": [47, 59, 75, 114, 319, 482], "1822": [47, 59, 467, 482], "fmr": 48, "exhibit": [48, 172, 182], "fluctuat": [48, 65, 169, 172, 175, 236], "decomposit": [48, 49, 50, 91, 96, 102, 108, 112, 114, 124, 128, 135, 138, 146, 152, 155, 160, 161, 176, 222, 257, 348, 349, 354, 368, 371, 374, 435, 440, 449, 462, 467, 482], "simultan": [48, 169, 232], "priori": 48, "children": [48, 98, 143, 155, 176, 197, 257], "young": [48, 114, 176, 188, 192, 197, 217, 240, 268, 275], "adult": [48, 51, 98, 114, 143, 155, 176, 192, 197, 217, 257, 275], "watch": [48, 49, 50, 52, 54, 55, 84, 88, 91, 103, 143, 155, 158, 176, 177, 182, 197, 257, 483], "movi": [48, 49, 50, 52, 54, 55, 84, 88, 91, 103, 143, 155, 158, 176, 177, 182, 197, 257, 483], "algorithm": [48, 49, 88, 91, 93, 101, 103, 104, 116, 156, 159, 160, 161, 164, 165, 167, 175, 182, 183, 185, 192, 229, 232, 275, 299, 300, 348, 380, 382, 446, 449, 451, 462], "rest_dataset": [48, 50, 53, 160], "faster": [48, 49, 103, 137, 155, 168, 169, 170, 271, 300, 357, 358, 427, 428, 434, 435, 442, 465], "n_compon": [48, 50, 91, 102, 103, 160, 299, 300, 454], "mask_strategi": [48, 88, 91, 103, 143, 149, 155, 182, 292, 293, 294, 295, 299, 300, 371, 374, 447, 467], "compon": [48, 50, 54, 65, 91, 93, 96, 108, 112, 114, 128, 135, 136, 138, 146, 155, 157, 158, 159, 160, 172, 175, 180, 181, 191, 192, 228, 229, 230, 239, 249, 257, 268, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 314, 316, 317, 324, 337, 349, 351, 354, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 419, 435, 440, 446, 447, 448, 449, 450, 451, 462, 467, 482, 483], "components_img_": [48, 50, 138, 155, 160, 161, 299, 300], "canica_components_img": 48, "components_img": [48, 50, 160], "plot_compare_decomposit": [48, 59, 143, 155, 482], "canica_resting_st": 48, "pixar124_task": 48, "pixar125_task": 48, "pixar126_task": 48, "pixar127_task": 48, "pixar128_task": 48, "pixar001_task": [48, 53, 84], "pixar002_task": [48, 53], "pixar003_task": [48, 53], "pixar004_task": 48, "pixar005_task": 48, "pixar006_task": 48, "pixar007_task": 48, "pixar008_task": 48, "pixar009_task": 48, "pixar010_task": 48, "pixar011_task": 48, "pixar012_task": 48, "pixar013_task": 48, "pixar014_task": 48, "pixar015_task": 48, "pixar016_task": 48, "pixar017_task": 48, "pixar018_task": 48, "pixar019_task": 48, "pixar020_task": 48, "pixar021_task": 48, "pixar022_task": 48, "pixar023_task": 48, "pixar024_task": 48, "functool": 48, "compute_multi_brain_mask": [48, 123, 149, 155, 371], "0x7fdc1f6f7e20": 48, "mask_typ": [48, 378, 381], "804": 48, "extmath": 48, "randomized_svd": 48, "003659": 48, "013254": 48, "012477": 48, "002881": 48, "transpos": [48, 146, 155, 169], "n_iter": [48, 49, 262, 284, 287, 447, 448, 454], "___________________________________________________randomized_svd": 48, "0x7fdc1852efc0": 48, "cur_img": [48, 86], "ic": [48, 102, 191], "natur": [48, 114, 117, 175, 188, 197, 215, 257, 268, 271, 273], "cleaner": [48, 65, 140, 155], "details": 48, "dictlearn": [48, 50, 124, 128, 138, 155, 160, 161], "dict_learn": [48, 50, 160], "n_epoch": [48, 300], "umask": 48, "dictlearning_components_img": 48, "dictionary_learning_resting_st": 48, "001315": 48, "004387": 48, "011243": 48, "004194": 48, "_compute_load": 48, "002971": 48, "009535": 48, "001195": 48, "005175": 48, "622651": 48, "322742": 48, "777205": 48, "743122": 48, "_________________________________________________compute_load": 48, "_dict_learn": 48, "dict_learning_onlin": 48, "batch_siz": [48, 300, 446], "cd": [48, 178, 300], "dict_init": [48, 300], "150862": 48, "097511": 48, "284606": 48, "035436": 48, "return_cod": 48, "1090": [48, 467], "_____________________________________________dict_learning_onlin": 48, "0x7fdc15673170": 48, "comp": [48, 191, 239], "per_compon": [48, 146, 155, 299, 300, 447], "ticker": [48, 49], "formatstrformatt": 48, "gca": [48, 51, 98], "xaxi": [48, 49], "set_major_formatt": [48, 49], "_explained_vari": 48, "227098e": 48, "322679e": 48, "564968e": 48, "349425e": 48, "______________________________________________explained_vari": 48, "2min": [48, 56], "sepideh": [48, 114, 161, 299], "sadaghiani": [48, 114, 161, 299], "pinel": [48, 65, 71, 114, 161, 194, 266, 299], "andrea": [48, 114, 156, 161, 228, 299], "kleinschmidt": [48, 114, 156, 161, 228, 299], "baptist": [48, 49, 71, 114, 156, 159, 161, 194, 215, 229, 266, 271, 273, 299], "polin": [48, 49, 71, 114, 117, 156, 159, 161, 194, 215, 229, 266, 271, 273, 299, 342, 461], "pubm": [48, 114, 161, 163, 192, 238, 299, 365, 366], "ncbi": [48, 70, 114, 161, 163, 192, 200, 299, 365, 366], "nlm": [48, 70, 114, 161, 163, 192, 200, 299, 365, 366], "nih": [48, 70, 114, 161, 163, 192, 200, 299, 365, 366], "gov": [48, 70, 114, 161, 163, 192, 200, 299, 365, 366], "20153834": [48, 114, 161, 299], "compress": [48, 114, 140, 155, 158, 161, 180, 300, 483], "onlin": [48, 114, 161, 170, 195, 300, 481], "2016": [48, 99, 114, 130, 131, 132, 133, 134, 155, 161, 258, 276, 300, 421], "13th": [48, 114, 161, 300], "symposium": [48, 114, 161, 299, 300], "biomed": [48, 114, 161, 217, 299, 300], "isbi": [48, 114, 161, 299, 300], "1282": [48, 114, 161, 300], "1285": [48, 114, 161, 300], "7493501": [48, 114, 161, 300], "2910": [48, 59, 114, 225, 251, 482], "constrain": [49, 50, 114, 159, 176, 195, 207, 214, 221, 222, 241, 246, 260, 447], "agglomer": [49, 114, 175, 176, 294, 295, 446, 447, 448, 454], "regim": 49, "subsequ": [49, 83, 182, 271, 273, 275, 365, 366], "empir": [49, 159, 166, 167, 168, 169, 229, 232, 366, 483], "supervis": [49, 114, 163, 165, 166, 175, 177], "pictur": [49, 116, 159, 167, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465], "discuss": [49, 56, 110, 140, 155, 159, 162, 165, 167, 172, 174, 178, 181, 366, 385, 481], "long": [49, 117, 170, 172, 365, 366, 421], "agglom": [49, 143, 155, 159, 447], "_estimator_fit": 49, "004978": 49, "000718": 49, "00231": 49, "004514": 49, "agglomerativeclust": [49, 447], "24256x24256": 49, "162682": 49, "n_cluster": [49, 446, 448, 454], "_agglom": 49, "ward_tre": 49, "return_dist": 49, "________________________________________________________ward_tre": 49, "____________________________________________________estimator_fit": 49, "980": [49, 78, 114, 206], "labels_img_": [49, 159, 369, 372, 447], "ward_labels_img": 49, "plot_data_driven_parcel": [49, 59, 482], "ward_parcel": 49, "first_plot": 49, "effect": [49, 53, 61, 65, 67, 68, 69, 74, 78, 79, 88, 94, 99, 101, 114, 125, 126, 139, 155, 161, 163, 167, 169, 171, 172, 182, 206, 228, 229, 230, 244, 245, 272, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 312, 313, 314, 316, 317, 318, 320, 321, 324, 327, 337, 339, 366, 368, 369, 370, 371, 372, 373, 374, 375, 385, 420, 433, 434, 435, 440, 442, 446, 447, 448, 449, 457], "approxim": [49, 69, 70, 114, 159, 192, 316, 317, 364, 448, 454], "mask_img_": [49, 65, 76, 78, 88, 91, 116, 182, 292, 293, 294, 295, 297, 298, 299, 300, 307, 369, 371, 372, 374], "original_voxel": 49, "mean_func_img": [49, 91], "min": [49, 53, 55, 58, 101, 102, 148, 149, 155, 357, 358, 420, 421, 425, 427, 428, 430, 431, 433, 434, 435, 436, 438, 439, 442, 443, 445], "opportun": 49, "fmri_reduc": 49, "fmri_compress": 49, "good": [49, 56, 64, 65, 114, 116, 135, 155, 156, 159, 161, 163, 164, 165, 166, 168, 169, 170, 171, 178, 180, 182, 271, 294, 295, 416, 483], "60000": 49, "wrap": [49, 52, 56, 162, 457], "base_mask": [49, 52, 53, 54, 56, 58], "_filter_and_extract": [49, 52, 53, 54, 56, 58], "0x7fdc170c28a0": 49, "nifti_labels_mask": [49, 56], "_extractionfunctor": [49, 52, 53, 56, 58], "0x7fdc13309af0": 49, "background_label": [49, 56, 90, 182, 369, 372, 417, 452, 455, 467], "keep_masked_label": [49, 56, 90, 125, 155, 372, 452, 467], "0x7fdc188311f0": 49, "0x7fdc1f7145c0": 49, "niftilabelsmask": [49, 54, 56, 82, 93, 95, 112, 125, 140, 141, 143, 146, 147, 148, 150, 152, 155, 157, 179, 244, 257, 368, 369, 370, 373, 452, 455, 457, 467, 482, 483], "_______________________________________________filter_and_extract": [49, 52, 53, 56, 58], "0x7fdc18380950": 49, "But": [49, 79, 97, 160, 169, 172, 182], "10mm": 49, "ON": 49, "001704": 49, "001692": 49, "009671": 49, "000702": 49, "minibatchkmean": [49, 446, 447], "n_init": [49, 299, 446], "kmeans_labels_img": 49, "kmeans_parcel": 49, "grow": [49, 156, 192], "caus": [49, 83, 128, 155, 360], "unbalanc": 49, "singleton": [49, 368, 369, 370, 371, 372, 373, 374, 375, 449], "tailor": [49, 67, 159], "enforc": [49, 88, 152, 155, 156, 169, 170, 297, 298, 324], "root": [49, 169, 187, 228, 244, 245, 315, 365, 446, 447, 448], "piec": [49, 180, 483], "adapt": [49, 64, 116, 160, 163, 170, 324, 333, 365, 466, 467], "hierarchical_kmean": [49, 150, 155, 447], "hkmean": 49, "hierarchicalkmean": [49, 150, 155], "x27": [49, 62, 88, 90, 467], "parcellationsifittedparcel": 49, "hkmeans_labels_img": 49, "hierarchical_kmeans_parcel": 49, "count": [49, 100, 125, 155, 271, 273, 314], "kmeans_count": 49, "return_count": 49, "hkmeans_count": 49, "voxel_ratio": 49, "round": [49, 436, 439], "3000": 49, "nrow": [49, 63, 78, 99, 100], "sharex": 49, "gridspec_kw": [49, 79, 99], "height_ratio": 49, "semilogx": 49, "hist": [49, 68, 429], "set_ylim": 49, "scalarformatt": 49, "yaxi": 49, "set_label_coord": 49, "ec": 49, "0x7fdc0a0a0980": 49, "thousand": [49, 182, 447], "properti": [49, 69, 165, 169, 172, 175, 182, 224, 301, 312, 324, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "notabl": [49, 157, 209], "constraint": [49, 159, 169, 362], "0x7fdc2983a3f0": 49, "rena_clust": [49, 123, 155], "recursive_neighbor_agglomer": [49, 123, 155], "_________________________________recursive_neighbor_agglomer": 49, "0x7fdc05c14080": 49, "0x7fdc05c15f40": 49, "0x7fdbfeb204d0": 49, "0x7fdbfeb210d0": 49, "rena_labels_img": 49, "rena_parcel": 49, "0x7fdc29401ca0": 49, "fmri_reduced_rena": 49, "compressed_img_rena": 49, "0x7fdc081bdc70": 49, "0x7fdbfe98a9f0": 49, "0x7fdc183231d0": 49, "0x7fdc13333a40": 49, "0x7fdc18b4fd10": 49, "notic": [49, 58, 65, 100, 107, 109, 112, 227, 362], "accur": [49, 58, 65, 67, 143, 151, 155, 167, 171, 172], "said": [49, 172], "ga\u00ebl": [49, 51, 56, 98, 114, 156, 157, 159, 164, 198, 214, 243, 246, 294, 295, 299], "2014": [49, 99, 101, 114, 159, 160, 167, 168, 188, 268, 365, 385, 449], "00167": [49, 114, 159], "keribin": [49, 114], "2041": [49, 114], "2049": [49, 114], "s0031320311001439": [49, 114], "patcog": [49, 114], "andr": [49, 114, 162, 177, 448, 454], "kahn": [49, 114, 448, 454], "tran": [49, 114, 238, 448, 454], "anal": [49, 114, 448, 454], "mach": [49, 114, 448, 454], "intel": [49, 114, 448, 454], "2019": [49, 51, 98, 114, 141, 142, 143, 155, 221, 256, 448, 454, 467], "tpami": [49, 114, 448, 454], "2018": [49, 56, 75, 114, 138, 139, 140, 155, 164, 184, 197, 198, 218, 247, 248, 257, 294, 295, 319, 342, 366, 448, 454, 461], "2815524": [49, 114, 448, 454], "3015": [49, 59, 150, 155, 482], "regionextractor": [50, 86, 128, 130, 136, 141, 155, 160, 450, 451], "decompos": [50, 156, 160, 172, 449], "inspir": [50, 168, 170, 178], "idea": [50, 87, 93, 162, 169, 172], "canica": [50, 123, 124, 138, 149, 155, 158, 175, 300, 371, 467, 483], "instanti": [50, 51, 54, 90, 150, 155, 296, 396, 398, 401, 403, 405, 407, 409, 411, 413, 467], "0x7fdc147fd7f0": 50, "nomin": 50, "nonzero": [50, 359, 449], "surviv": [50, 147, 155, 312, 449], "extractor": [50, 86, 160, 449, 451], "thresholding_strategi": [50, 86, 160, 449], "ratio_n_voxel": [50, 160, 449], "local_region": [50, 160, 449, 451], "min_region_s": [50, 86, 87, 160, 449, 451], "1350": [50, 160, 449, 451], "regions_img_": [50, 86, 160, 449], "regions_extracted_img": [50, 160, 451], "index_": [50, 86, 160, 449], "regions_index": [50, 160], "n_regions_extract": [50, 160], "neach": [50, 160], "0x7fdc183091f0": 50, "those": [50, 62, 65, 67, 69, 70, 79, 88, 107, 150, 155, 161, 163, 165, 169, 170, 172, 178, 188, 222, 223, 224, 227, 271, 361, 364, 372, 421, 443, 449, 452, 455, 456, 465], "timeseries_each_subject": [50, 160], "mean_correl": [50, 160], "regions_img": [50, 86, 160], "coords_connectom": [50, 160], "0x7fdbff1e6690": 50, "find_xyz_cut_coord": [50, 86, 130, 137, 155, 160], "side": [50, 53, 63, 65, 93, 101, 123, 147, 155, 167, 271, 312, 377, 380, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 421, 429, 430, 458, 459], "nice": [50, 160], "regions_indices_of_map3": [50, 160], "rgbcmyk": [50, 160], "each_index_of_map3": [50, 160], "add_overlai": [50, 121, 155, 160, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 425, 427, 428, 433, 434, 435, 480], "alpha_cmap": [50, 160], "1349": 50, "plot_extract_regions_dictlearning_map": [50, 59, 482], "tangent": [51, 98, 136, 155, 160, 228], "embed": [51, 98, 457], "outperform": [51, 98, 156, 161], "dadi": [51, 98, 114, 198, 243], "care": [51, 98, 116, 162, 163, 165, 169, 221, 247, 248, 311], "development_dataset": [51, 98], "msdl_data": [51, 98], "msdl_coord": [51, 98], "region_coord": [51, 52, 54, 98, 132, 155, 246], "n_region": [51, 90], "aud": 51, "striat": 51, "occ": 51, "att": 51, "basal": [51, 221], "vi": 51, "sec": [51, 257], "salienc": [51, 256], "languag": [51, 70, 99, 100, 107, 114, 117, 184, 194, 200, 253, 263, 266], "cereb": 51, "dor": 51, "cing": 51, "Ins": 51, "ant": 51, "ip": 51, "niftimapsmask": [51, 52, 53, 54, 90, 98, 120, 125, 140, 147, 150, 155, 157, 179, 369, 370, 372, 449, 453, 456, 467, 483], "filter": [51, 55, 56, 58, 65, 66, 93, 102, 115, 116, 121, 123, 124, 140, 143, 148, 150, 152, 155, 162, 175, 179, 181, 236, 271, 273, 275, 291, 292, 293, 294, 295, 297, 298, 299, 300, 324, 327, 342, 359, 361, 362, 365, 368, 369, 370, 371, 372, 373, 374, 375, 447, 449, 460, 461, 483], "band": [51, 58, 152, 155, 236, 365, 460, 461], "resampling_target": [51, 53, 54, 90, 93, 98, 182, 369, 370, 372, 373, 467], "phenotyp": [51, 62, 98, 151, 155, 162, 166, 179, 187, 190, 197, 216, 236, 237, 257, 281, 483], "pooled_subject": 51, "func_fil": 51, "confound_fil": 51, "child_adult": [51, 98], "simpler": 51, "commonli": [51, 159, 171, 175, 177, 182, 366], "margin": [51, 357], "pairwis": [51, 156], "correlation_measur": [51, 54, 56], "individu": [51, 58, 62, 65, 67, 71, 75, 77, 78, 79, 80, 93, 99, 100, 107, 114, 156, 161, 174, 175, 177, 179, 182, 187, 188, 192, 194, 199, 206, 209, 228, 229, 254, 266, 339, 383, 437, 467, 483], "2d": [51, 54, 83, 90, 91, 97, 102, 115, 152, 155, 162, 165, 179, 182, 229, 230, 231, 232, 233, 299, 300, 311, 320, 344, 364, 368, 369, 370, 371, 372, 373, 374, 375, 376, 386, 388, 389, 390, 391, 392, 393, 394, 395, 400, 402, 404, 406, 408, 410, 412, 427, 446, 447, 448, 449, 455, 456, 463, 465, 473, 483], "reflect": [51, 100, 156, 170, 172, 192, 236, 240, 433, 434], "visibl": [51, 78, 149, 155, 161, 357, 430, 436, 438, 439, 443, 445, 480], "0x7fdc05c157f0": 51, "reveal": [51, 100, 101, 167], "partial_correlation_measur": 51, "partial_correlation_matric": 51, "weaker": [51, 65, 78], "0x7fdc0af9a510": 51, "tangent_measur": 51, "deviat": [51, 156, 292, 293, 294, 295, 297, 298], "tangent_matric": 51, "perturb": 51, "anticorrel": [51, 114, 366], "distinguish": [51, 93, 97, 98, 163, 167, 172, 176, 180], "stratifiedshufflesplit": [51, 98], "preserv": [51, 58, 98, 347, 359, 430, 446, 447, 448], "linearsvc": [51, 97, 98, 167, 292, 294], "return_invers": 51, "test_siz": [51, 98], "1d": [51, 101, 104, 105, 116, 152, 155, 180, 182, 228, 296, 314, 316, 317, 320, 326, 342, 364, 368, 369, 370, 371, 372, 373, 374, 375, 396, 403, 407, 413, 416, 449, 450, 455, 460, 461, 463, 465], "mean_scor": [51, 98], "scores_std": [51, 98], "align": [51, 56, 90, 98, 126, 155, 358, 360, 427], "xerr": [51, 98], "set_axisbelow": [51, 98], "axvlin": 51, "linestyl": 51, "showcas": [51, 60, 73, 75, 98, 109, 112, 159, 164, 170], "larger": [51, 74, 79, 85, 98, 161, 163, 167, 169, 170, 172, 297, 298, 420, 433, 434, 435, 442], "cohort": [51, 98], "kamalak": [51, 98, 114, 198, 243], "darya": [51, 98, 114], "chyzhyk": [51, 98, 114], "benchmark": [51, 56, 98, 114, 168, 365, 366], "s1053811919301594": [51, 98, 114], "plot_group_level_connect": [51, 59, 136, 143, 155, 482], "link": [52, 114, 117, 125, 133, 140, 145, 155, 158, 162, 165, 170, 172, 175, 178, 188, 198, 238, 243, 268, 281, 387, 397, 398, 422, 483], "negat": [52, 82, 95, 112, 289, 353, 435, 440, 482], "dens": [52, 54, 156, 169, 379], "highest": [52, 54, 292, 293, 294, 295, 327, 348, 462], "resample_img": [52, 54, 69, 83, 88, 92, 124, 137, 143, 152, 155, 181, 182, 271, 299, 300, 324, 337, 356, 358, 371, 374, 377, 379, 380, 382, 447], "0x7fdc29538290": 52, "_____________________________________________________resample_img": 52, "nifti_maps_mask": [52, 53], "0x7fdc295382f0": 52, "allow_overlap": [52, 53, 54, 58, 370, 373, 375, 467], "keep_masked_map": [52, 53, 54, 125, 155, 373, 453, 467], "msdl_atla": [52, 53, 54, 467], "msdl_roi": [52, 53, 54, 214, 246, 467], "graphicallassocv": [52, 53, 57, 58, 156, 169, 230], "scitkit": [52, 57, 58], "v0": [52, 57, 58, 140, 143, 148, 150, 155, 220, 248], "graphlassocv": [52, 57, 58], "graphicallassocvifittedgraphicallassocv": [52, 53, 58], "covariance_": [52, 53, 58, 156], "axesimag": [52, 54, 56], "0x7fdc18833320": 52, "0x7fdc132e15b0": 52, "precision_": [52, 53, 57, 156], "0x7fdc18bb5be0": 52, "1377": [52, 467], "plot_inverse_covariance_connectom": [52, 59, 482], "plot_matric": 53, "cov": [53, 314, 316, 317, 481], "prec": [53, 169], "put": [53, 54, 69, 70, 97, 121, 155, 170, 228, 292, 293, 294, 295, 299, 300, 324, 369, 370, 371, 372, 373, 374, 375, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 421, 447, 449, 461, 467], "diagon": [53, 54, 56, 58, 85, 133, 155, 169, 181, 228, 232, 234, 235, 356, 357, 416, 432, 450], "clariti": 53, "span": [53, 69, 172, 420, 433, 434, 435, 442], "msdl_atlas_dataset": 53, "subject_time_seri": 53, "confound_filenam": [53, 55], "region_t": 53, "__________________________________________high_variance_confound": 53, "0x7fdc000aff80": 53, "174325": 53, "048779": 53, "044073": 53, "155444": 53, "1min": 53, "0x7fdc25286c00": 53, "151677": 53, "057023": 53, "206928": 53, "102714": 53, "0x7fdc296a6300": 53, "127944": 53, "087084": 53, "015679": 53, "02587": 53, "0x7fdc1bc78dd0": 53, "089762": 53, "062316": 53, "065223": 53, "022868": 53, "groupsparsecovariancecv": [53, 57, 156, 169], "gsc": [53, 57], "gl": [53, 57], "likelihood": [53, 169, 172, 228, 311, 314, 315, 316, 317], "decreas": [53, 65, 94, 114, 169, 170, 206, 420, 433, 434, 435, 442], "stop": [53, 96, 108, 112, 114, 117, 168, 229, 232, 271, 273, 347, 352, 353, 355, 427, 435, 440, 446, 482], "refin": [53, 57, 58, 230], "optim": [53, 57, 99, 114, 143, 147, 155, 163, 165, 168, 169, 198, 230, 232, 243, 357, 358], "toler": [53, 91, 103, 169, 229, 230, 232, 297, 298, 346], "reach": [53, 169, 170, 172, 177, 271, 365], "841e": 53, "graphical_lasso": 53, "68e": 53, "gap": [53, 229, 232], "123e": 53, "664e": 53, "158e": 53, "389e": 53, "530e": 53, "318e": 53, "844e": 53, "atlas_region_coord": [53, 157], "graphicallasso": [53, 156], "edge_vmax": [53, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422], "edge_vmin": [53, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422], "groupsparsecovari": [53, 156, 169, 230], "precisions_": [53, 57, 156, 229, 230], "covariances_": [53, 156, 229, 230], "plot_multi_subject_connectom": [53, 59, 482], "________________________________________resample_img": 54, "__________________________________filter_and_extract": [54, 56], "generate_report": [54, 58, 70, 88, 90, 91, 125, 126, 150, 155, 182, 324, 337, 369, 370, 371, 372, 373, 374, 375, 449], "displayed_map": [54, 370, 373, 449], "contrarili": [54, 90, 372, 373, 467], "summar": [54, 58, 90, 162, 170, 316, 370, 372, 373, 375, 458, 467], "pca": [54, 299, 370, 373, 467], "miss": [54, 76, 83, 125, 149, 155, 170, 175, 331, 370, 373, 379, 382, 467], "definit": [54, 62, 90, 93, 125, 155, 157, 165, 166, 169, 170, 171, 175, 179, 198, 214, 218, 243, 306, 364, 369, 370, 372, 373, 375, 423, 452, 453, 455, 456, 467, 483], "ref": [54, 90, 467], "correlation_matrix": [54, 56, 480], "major": [54, 93, 170, 177, 222], "fill_diagon": [54, 56], "0x7fdc1866e720": 54, "862": [54, 59, 482], "plot_probabilistic_atlas_extract": [54, 59, 482], "depict": [55, 170, 181], "advanc": [55, 108, 114, 162, 164, 165, 170, 171, 177, 181, 260, 292, 294, 295, 349, 368, 374, 421, 435, 482, 483], "lie": [55, 229, 232, 372, 452], "1st": 55, "hard": [55, 157, 169, 175, 180], "drive": 55, "wide": [55, 69, 104, 114, 162, 163, 165, 169, 170, 207, 258, 276, 296], "pcc_coord": [55, 61, 171], "niftispheresmask": [55, 58, 61, 68, 99, 122, 126, 127, 128, 130, 141, 145, 147, 155, 171, 179, 467, 483], "bandpass": 55, "seed_mask": [55, 61, 99, 171], "seed_time_seri": [55, 61, 171], "brain_mask": [55, 99], "brain_time_seri": 55, "n_volum": 55, "32504": 55, "exemplarili": 55, "divid": [55, 75, 76, 78, 110, 133, 155, 163, 172, 175, 234, 447], "seed_to_voxel_correl": 55, "954": [55, 59, 482], "extrem": [55, 121, 155, 458], "seed_to_voxel_correlations_img": 55, "marker_coord": [55, 61, 99, 141, 143, 155, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 444], "At": [55, 63, 64, 67, 76, 79, 90, 160, 177, 178, 337, 339], "plot_seed_to_voxel_correl": [55, 59, 141, 155, 482], "pcc_seed_correl": 55, "seed_to_voxel_correlations_fisher_z": 55, "arctanh": 55, "762": 55, "874f": 55, "eventu": [55, 480], "seed_to_voxel_correlations_fisher_z_img": 55, "pcc_seed_correlation_z": 55, "1079": [55, 59, 482], "movement": [56, 114, 177, 182], "load_confound": [56, 65, 124, 125, 126, 150, 155, 157, 182, 327, 366], "flexibli": 56, "guidelin": [56, 93, 114, 123, 149, 152, 155, 162, 178], "reorder": [56, 138, 155, 356, 416, 432], "reduce_confound": [56, 257], "reduced_confound": 56, "preselect": 56, "metadata": [56, 90, 117, 124, 143, 155, 181, 215, 216, 228, 229, 230, 271, 272, 273, 274, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 364, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "nifti1head": [56, 90, 353], "endian": [56, 90, 136, 155, 351, 357], "sizeof_hdr": [56, 90], "data_typ": [56, 90], "db_name": [56, 90], "extent": [56, 90, 94, 175, 398, 401], "session_error": [56, 90], "dim_info": [56, 90], "intent_p1": [56, 90], "intent_p2": [56, 90], "intent_p3": [56, 90], "intent_cod": [56, 90], "datatyp": [56, 90], "bitpix": [56, 90], "slice_start": [56, 90], "pixdim": [56, 90], "vox_offset": [56, 90], "scl_slope": [56, 90], "scl_inter": [56, 90], "slice_end": [56, 90], "slice_cod": [56, 90], "xyzt_unit": [56, 90], "cal_max": [56, 90], "cal_min": [56, 90], "slice_dur": [56, 90], "toffset": [56, 90], "glmax": [56, 90], "glmin": [56, 90], "descrip": [56, 90], "aux_fil": [56, 90], "qform_cod": [56, 90], "sform_cod": [56, 90], "quatern_b": [56, 90], "quatern_c": [56, 90], "quatern_d": [56, 90], "qoffset_x": [56, 90], "qoffset_i": [56, 90], "qoffset_z": [56, 90], "srow_x": [56, 90], "srow_i": [56, 90], "srow_z": [56, 90], "intent_nam": [56, 90], "magic": [56, 90, 420, 427, 428, 430, 434, 435], "0x7fdbff3ae300": 56, "0x7fdbff359fa0": 56, "0x7fdbff3af2f0": 56, "cover": [56, 170, 182, 199, 206, 254, 256, 416], "firstli": 56, "did": [56, 91, 103, 134, 150, 155, 172], "bad": [56, 104, 169, 170], "No": [56, 65, 76, 90, 104, 169, 170, 358, 467], "0x7fdc005fd220": 56, "0x7fdc071c2750": 56, "ensur": [56, 58, 99, 127, 140, 147, 155, 167, 169, 170, 172, 178, 276, 312, 337, 339, 372, 386, 388, 389, 452], "steadi": [56, 65, 148, 155, 324, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 449, 461], "correctli": [56, 65, 92, 126, 141, 143, 144, 152, 155, 165, 172, 178, 324, 365, 366, 481], "confounds_simpl": 56, "wm_csf": [56, 327, 365, 366], "cosine00": 56, "cosine01": 56, "cosine02": 56, "cosine03": 56, "rot_x": 56, "rot_i": 56, "rot_z": 56, "trans_x": 56, "trans_i": 56, "trans_z": 56, "white_matt": 56, "0x7fdc0d51a270": 56, "109104": 56, "109090": 56, "109066": 56, "026078": 56, "055006": 56, "876886": 56, "108937": 56, "108723": 56, "027587": 56, "049458": 56, "418909": 56, "108990": 56, "108632": 56, "108038": 56, "019085": 56, "075787": 56, "540842": 56, "108875": 56, "108176": 56, "107012": 56, "023900": 56, "053022": 56, "922085": 56, "107567": 56, "105651": 56, "033396": 56, "077764": 56, "843388": 56, "064873": 56, "022169": 56, "221217": 56, "064266": 56, "042248": 56, "237783": 56, "053241": 56, "029500": 56, "590905": 56, "081559": 56, "034236": 56, "122246": 56, "069287": 56, "007294": 56, "000828": 56, "0x7fdbff6ebe00": 56, "exceed": [56, 137, 155], "framewis": [56, 257, 365], "displac": [56, 192, 257, 365], "standardis": 56, "dvar": [56, 365], "five": [56, 65, 447], "percentag": [56, 162, 189, 292, 293, 294, 295], "volumn": [56, 365], "suitabl": [56, 67, 140, 155, 163, 167, 182, 269, 366], "confounds_scrub": [56, 327], "fd_threshold": [56, 126, 155, 365, 366], "std_dvars_threshold": [56, 126, 155, 365, 366], "0x7fdc0d518a40": 56, "108440": 56, "106895": 56, "110644": 56, "026366": 56, "054759": 56, "878390": 56, "108401": 56, "106742": 56, "110301": 56, "027876": 56, "049211": 56, "420413": 56, "108325": 56, "106438": 56, "109616": 56, "019374": 56, "075540": 56, "542346": 56, "108211": 56, "105981": 56, "108591": 56, "024188": 56, "052775": 56, "923589": 56, "108058": 56, "105373": 56, "107229": 56, "033685": 56, "077517": 56, "844892": 56, "109387": 56, "104073": 56, "064585": 56, "022416": 56, "219713": 56, "109540": 56, "105434": 56, "064554": 56, "042495": 56, "236279": 56, "109654": 56, "106460": 56, "052952": 56, "029747": 56, "589401": 56, "109731": 56, "107145": 56, "081847": 56, "034483": 56, "120742": 56, "109769": 56, "107488": 56, "068998": 56, "007541": 56, "999324": 56, "0x7fdbfe98aab0": 56, "grand": [56, 324], "physiolog": [56, 65, 68, 366], "artifact": [56, 114, 182, 342, 365, 366, 461], "minim": [56, 62, 170, 175, 324, 326, 331, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 433], "degre": [56, 66, 99, 106, 172, 236, 312, 315, 321, 366, 436, 438, 439], "freedom": [56, 99, 106, 157, 172, 312, 315, 321, 366], "downsid": [56, 65], "confounds_minimal_no_gsr": 56, "global_sign": [56, 126, 155, 365, 366], "gsr": 56, "0x7fdc2900bef0": 56, "0x7fdc0718b440": 56, "load_confounds_strategi": [56, 126, 150, 155, 157, 182, 365], "ciric": [56, 114, 365, 366], "park": [56, 114, 366], "compcor": [56, 65, 114, 126, 150, 155, 157, 257, 348, 365, 366, 462], "ica_aroma": [56, 150, 155, 365, 366], "denoise_strategi": [56, 126, 155, 366], "2013": [56, 114, 143, 155, 156, 157, 167, 168, 187, 192, 198, 214, 236, 240, 246, 365], "s1053811913003340": [56, 114, 156, 157, 214, 246], "rastko": [56, 114, 365, 366], "h": [56, 64, 114, 196, 201, 202, 203, 204, 205, 217, 225, 242, 251, 258, 275, 276, 280, 311, 315, 365, 366], "wolf": [56, 58, 114, 169, 365, 366], "jonathan": [56, 58, 75, 114, 168, 192, 199, 219, 220, 226, 248, 252, 254, 255, 319, 365, 366, 421], "roalf": [56, 114, 365, 366], "graham": [56, 114, 365, 366], "baum": [56, 114, 365, 366], "kosha": [56, 114, 365, 366], "ruparel": [56, 114, 365, 366], "shinohara": [56, 114, 365, 366], "eickhoff": [56, 114, 220, 222, 248, 249, 365, 366], "christo": [56, 114, 365, 366], "davatziko": [56, 114, 365, 366], "ruben": [56, 114, 365, 366], "gur": [56, 114, 365, 366], "raquel": [56, 114, 365, 366], "bassett": [56, 114, 365, 366], "theodor": [56, 114, 365, 366], "satterthwait": [56, 114, 365, 366], "2017": [56, 114, 135, 136, 137, 155, 162, 164, 194, 218, 220, 247, 248, 266, 294, 295, 365, 366, 421, 467], "linden": [56, 114, 366], "fulcher": [56, 114, 366], "murat": [56, 114, 366], "y\u00fccel": [56, 114, 366], "fornito": [56, 114, 157, 366], "evalu": [56, 114, 165, 169, 175, 195, 223, 225, 251, 292, 293, 294, 295, 311, 315, 366, 458, 459], "efficaci": [56, 114, 366], "reliabl": [56, 114, 140, 155, 172, 194, 266, 366], "plot_signal_extract": [56, 59, 182, 482], "_util": [57, 110, 124, 126, 130, 149, 152, 155, 169, 170, 178], "data_gen": [57, 124, 152, 155, 169], "generate_group_sparse_gaussian_graph": [57, 169], "n_displai": 57, "min_n_sampl": 57, "max_n_sampl": 57, "max_precis": 57, "alpha_": [57, 230], "group_sparse_cov": 57, "instabl": [57, 65, 169, 460], "plot_simulated_connectom": [57, 59, 482], "spheric": 58, "dmn_coord": [58, 182, 480], "temporopariet": 58, "junction": 58, "prefront": 58, "sequenc": [58, 61, 65, 67, 78, 110, 125, 155, 162, 171, 175, 180, 182, 266, 292, 293, 294, 295, 314, 316, 317, 324, 337, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 436, 438, 439, 441, 459, 460, 465], "clean__butterworth__padtyp": 58, "butterworth": [58, 123, 124, 148, 152, 155, 342, 369, 370, 371, 372, 373, 374, 375, 461], "confounds_filenam": 58, "nifti_spheres_mask": 58, "0x7fdc0ad8e000": 58, "butterworth__padtyp": 58, "tweak": [58, 88, 160], "displayed_spher": [58, 375], "knowledg": [58, 115, 157, 172, 375, 467], "brows": [58, 117, 150, 155, 215, 467], "button": [58, 65, 67, 71, 75, 76, 78, 79, 104, 150, 155, 170, 172, 264, 266, 274, 467], "2144": 58, "ledoit": [58, 169], "connectivity_measur": 58, "partial_correlation_matrix": 58, "0x7fdc0ad859a0": 58, "suppli": [58, 296, 297, 298, 331, 365, 372, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 452, 461], "fetch_coords_power_2011": [58, 219], "dict_kei": 58, "collect": [58, 99, 102, 106, 114, 115, 170, 175, 187, 191, 195, 213, 215, 271, 272, 273, 274, 365, 483], "spheres_mask": 58, "exce": [58, 230], "graphic": [58, 114, 156, 169, 170, 183, 229, 232], "covariance_estim": 58, "_method": 58, "runtimewarn": [58, 76, 78, 110], "invalid": [58, 110, 123, 130, 155, 373, 453], "encount": [58, 76, 78, 110, 436, 438, 439], "subtract": [58, 65, 100, 177, 272], "strongest": 58, "node_s": [58, 141, 143, 150, 155, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 431, 441], "0x7fdc0cc5bf80": 58, "sometim": [58, 65, 79, 117, 121, 125, 155, 162, 170, 175, 311, 315], "overwhelm": 58, "plot_mark": [58, 146, 150, 152, 155, 480], "node_strength": 58, "0x7fdc0829ef90": 58, "clip": [58, 83, 357, 358], "positive_edg": 58, "negative_edg": 58, "node_strength_posit": 58, "node_strength_neg": 58, "node_cmap": [58, 431], "ylorrd": 58, "pubu": 58, "0x7fdc09ff94f0": 58, "fetch_coords_dosenbach_2010": [58, 131, 134, 155, 199], "0x7fdc0af891f0": 58, "cerebellum": [58, 114, 188, 199, 221, 254, 256, 268], "cingulo": 58, "opercular": [58, 90], "fronto": [58, 100], "occipit": [58, 90], "sensorimotor": 58, "alexand": [58, 114, 187, 199, 219, 220, 236, 248, 254, 255], "cohen": [58, 114, 199, 219, 254, 255], "nelson": [58, 114, 199, 219, 254, 255], "gagan": [58, 114, 199, 219, 254, 255], "wig": [58, 114, 199, 219, 254, 255], "barn": [58, 114, 192, 199, 219, 254, 255, 365, 366], "jessica": [58, 114, 191, 199, 219, 222, 239, 249, 254, 255], "church": [58, 114, 199, 219, 254, 255], "alecia": [58, 114, 199, 219, 254, 255], "timothi": [58, 114, 188, 219, 220, 248, 255, 268, 365], "o": [58, 99, 114, 130, 155, 162, 170, 188, 189, 206, 219, 220, 236, 238, 248, 255, 268, 365], "laumann": [58, 114, 219, 220, 248, 255, 365], "fran": [58, 114, 219, 255], "miezin": [58, 114, 219, 255], "bradlei": [58, 114, 188, 192, 199, 206, 219, 221, 254, 255, 256, 268, 365, 366], "schlaggar": [58, 114, 192, 199, 219, 221, 254, 255, 256, 365, 366], "petersen": [58, 114, 192, 199, 219, 221, 254, 255, 256, 365, 366], "nov": [58, 114, 219, 255], "nico": [58, 114, 199, 221, 254, 256], "binyam": [58, 114, 199, 254], "nardo": [58, 114, 199, 254], "damien": [58, 114, 199, 254], "lessov": [58, 114, 199, 254], "joseph": [58, 114, 156, 191, 199, 239, 254], "dubi": [58, 114, 199, 254], "feczko": [58, 114, 199, 254], "rebecca": [58, 114, 197, 199, 254, 257], "coalson": [58, 114, 199, 254], "pruett": [58, 114, 199, 254], "deanna": [58, 114, 188, 199, 221, 254, 256, 268], "barch": [58, 114, 188, 198, 199, 254, 268], "matur": [58, 114, 199, 254], "5997": [58, 114, 199, 254], "1358": [58, 114, 199, 254], "1361": [58, 114, 199, 254, 467], "1194144": [58, 114, 199, 254], "955": 58, "plot_sphere_based_connectom": [58, 59, 143, 155, 482], "1348": [59, 482], "1187": [59, 482], "1376": [59, 482], "focus": [60, 73, 97, 109, 112, 116, 132, 138, 155, 163, 166, 167, 170], "adhd": [60, 72, 84, 112, 143, 152, 155, 156, 171, 184, 237, 324, 331, 368, 375, 398, 435, 457, 459, 467, 477, 482], "finit": [60, 72, 76, 78, 102, 112, 136, 155, 171, 175, 267, 324, 326, 331, 342, 359, 376, 379, 420, 423, 424, 434, 435, 461, 482], "impul": [60, 72, 112, 267, 324, 423, 424, 435, 482], "fir": [60, 63, 72, 112, 127, 155, 171, 175, 267, 324, 326, 331, 423, 424, 435, 482], "residu": [60, 62, 72, 112, 150, 155, 167, 173, 192, 278, 298, 311, 312, 315, 316, 317, 324, 337, 342, 343, 354, 359, 368, 375, 379, 413, 435, 458, 482, 483], "openneuro": [60, 72, 112, 171, 197, 212, 257, 258, 276, 277, 291, 324, 327, 364, 367, 374, 423, 427, 429, 457, 458, 459, 466, 482], "understand": [60, 72, 82, 95, 112, 134, 155, 163, 165, 170, 177, 179, 214, 257, 262, 264, 265, 267, 270, 324, 348, 349, 354, 358, 365, 368, 374, 379, 423, 424, 425, 434, 435, 440, 457, 482, 483], "workflow": [61, 170, 178, 366], "determin": [61, 78, 93, 99, 100, 101, 106, 167, 169, 170, 195, 209, 230, 298, 327, 338, 362, 377, 378, 379, 380, 381, 382, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 427, 428, 430, 434, 435, 442, 446, 465], "make_first_level_design_matrix": [61, 63, 67, 69, 107, 150, 155, 171], "frametim": 61, "add_subplot": [61, 90], "set_titl": [61, 63, 68, 77, 78, 79, 90, 99, 104], "add_reg": [61, 63, 107, 171, 331], "add_reg_nam": [61, 63, 331], "pcc_seed": 61, "dmn_contrast": 61, "seed_based_glm": [61, 466], "setup": [61, 67, 107, 124, 151, 155, 174, 236, 237, 238, 239, 240, 241, 242, 246, 249, 250, 252, 260, 261, 264, 265, 266, 269, 270, 275, 281, 449, 481], "first_level_model": [61, 64, 65], "run_img": [61, 100, 107, 324], "design_matric": [61, 62, 69, 70, 99, 171, 324], "snapshot": 61, "dmn_z_map": 61, "portabl": [61, 74, 182], "readi": [61, 74, 116, 134, 155, 161, 170, 178], "pertin": [61, 74], "min_dist": [61, 324, 337, 458, 459], "plot_typ": [61, 324, 337, 459], "plot_adhd_dmn": [61, 72, 482], "754": [61, 72, 482], "exploit": [62, 161, 169], "io": [62, 100, 148, 155, 160, 178, 187, 193, 197, 198, 210, 218, 243, 247, 257, 266, 443, 481], "s3": 62, "bucket": 62, "assur": 62, "against": [62, 162, 171, 175, 271, 339, 385, 432], "stopsign": 62, "ds000030": [62, 258], "v4": [62, 126, 155], "emploi": [62, 174, 175, 207, 458, 459], "fetch_ds000030_url": [62, 152, 155, 276], "fetch_openneuro_dataset": 62, "select_from_index": 62, "exclusion_pattern": 62, "mriqc": 62, "parameter_plot": 62, "physio_plot": 62, "t1w": 62, "dwi": 62, "beh": 62, "bart": 62, "scap": 62, "exclusion_filt": [62, 291], "data_dir": [62, 99, 100, 107, 149, 155, 180, 210, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], "subject_id": [62, 100, 107, 278, 279], "moreov": [62, 100, 107, 152, 155, 170, 177, 227, 362], "task_label": [62, 100, 107, 327], "space_label": [62, 327], "folder": [62, 93, 100, 107, 150, 155, 170, 178, 180, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 275, 276, 277, 278, 279, 280, 281, 282, 327, 352, 362], "fmriprep": [62, 65, 125, 126, 150, 152, 155, 157, 161, 172, 175, 182, 257, 261, 262, 286, 327], "app": [62, 114, 188, 268, 327], "first_level_from_bid": [62, 99, 100, 107, 124, 125, 126, 155, 426], "mni152nlin2009casym": 62, "derivatives_fold": [62, 327], "models_run_img": [62, 99, 100, 107, 327], "models_ev": [62, 100, 107, 327], "models_confound": [62, 99, 100, 107, 327], "minimize_memori": [62, 68, 70, 171, 324, 327, 337], "overrid": [62, 99, 110, 147, 155, 236, 237, 238, 239, 240, 241, 242, 246, 249, 250, 252, 260, 261, 264, 265, 266, 269, 270, 275, 281, 447], "interfac": [62, 126, 127, 146, 150, 155, 161, 169, 170, 175, 292, 293], "get_design_from_fslmat": [62, 150, 155], "fsl_design_matrix_path": [62, 367], "feat": 62, "mat": [62, 367, 432], "column_nam": [62, 367], "stopsuccess": [62, 466], "design_column": [62, 322], "cond_": 62, "10159": [62, 466], "firstlevelmodelifittedfirstlevelmodel": 62, "nib": 62, "fsl_z_map": 62, "zstat12": 62, "isf": [62, 75, 78, 100, 106, 107], "unc": [62, 78, 79, 100], "plot_img_comparison": 62, "masker_": [62, 65, 76, 78, 292, 293, 294, 295, 297, 298, 299, 300, 447], "ref_label": [62, 429], "src_label": [62, 429], "latex": [62, 123, 155, 178], "purpos": [62, 67, 69, 70, 78, 100, 107, 116, 169, 174, 182, 187, 190, 194, 197, 198, 214, 218, 223, 257, 324, 337, 387, 459, 480], "to_latex": 62, "tabular": 62, "llrrrrl": 62, "toprul": 62, "midrul": 62, "000000": [62, 65], "307532": 62, "6300": 62, "668929": 62, "534376": 62, "254210": 62, "918703": 62, "2520": 62, "715845": 62, "2b": [62, 466], "683343": 62, "2c": [62, 466], "587956": 62, "692869": 62, "664250": 62, "461193": 62, "257986": 62, "078390": 62, "815609": 62, "5c": 62, "798387": 62, "208105": 62, "348351": 62, "190472": 62, "385929": 62, "163956": 62, "079389": 62, "056165": 62, "792": 62, "10a": [62, 466], "726486": 62, "10b": 62, "710553": 62, "043724": 62, "950054": 62, "937283": 62, "906274": 62, "756": [62, 99, 114, 466], "14a": [62, 466], "882906": 62, "776293": 62, "bottomrul": 62, "plot_bids_featur": [62, 72, 482], "save_glm_to_bid": [62, 123, 127, 152, 155], "contrast_typ": [62, 126, 155, 312, 320, 364], "out_dir": [62, 364], "nilearn_glm": 62, "prefix": [62, 327, 342, 364, 369, 370, 371, 372, 373, 374, 375, 461], "_task": [62, 327], "stopsuccessminusgo": 62, "r_squar": [62, 68, 150, 155, 316, 324, 337], "glob": [62, 127, 128, 138, 155, 179, 343, 362, 483], "join": [62, 102, 170, 465, 481], "relative_to": 62, "dataset_descript": [62, 364], "json": [62, 99, 100, 107, 117, 127, 155, 327, 362, 364, 365, 366], "10159_task": 62, "stopsignal_contrast": 62, "stopsuccessminusgo_design": 62, "stopsuccessminusgo_stat": 62, "effect_statmap": [62, 364], "p_statmap": 62, "t_statmap": 62, "variance_statmap": [62, 364], "z_statmap": 62, "stopsignal_design": 62, "stopsignal_stat": 62, "errorts_statmap": [62, 364], "rsquare_statmap": [62, 364], "stopsignal_statmap": 62, "compris": [63, 65, 85, 450, 458], "trial": [63, 65, 71, 114, 125, 155, 162, 171, 175, 269], "c0": 63, "c1": 63, "c3": 63, "motion": [63, 65, 68, 100, 114, 148, 155, 171, 192, 257, 324, 327, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 449, 461], "jointli": [63, 170, 354, 430, 436, 438, 439, 443, 445], "cumsum": 63, "translat": [63, 143, 155, 181, 324, 327, 337, 340, 365, 459], "rigid": [63, 192], "bodi": [63, 192, 457], "tx": 63, "ty": 63, "tz": 63, "rx": 63, "ry": 63, "rz": 63, "varieti": [63, 99, 161, 162, 163, 164, 165, 170, 175], "x1": [63, 93, 465], "polynomi": [63, 65, 171, 324, 331], "x2": [63, 93], "x3": 63, "fir_delai": [63, 64, 324, 326, 327, 331], "ax3": 63, "hemodyam": 64, "audio_comput": [64, 65, 67, 211], "audio_left_hand_button_press": [64, 65, 67, 211], "audio_right_hand_button_press": [64, 65, 67, 211], "horizontal_checkerboard": [64, 65, 211], "sentence_listen": [64, 65, 67, 211], "sentence_read": [64, 65, 67, 211], "vertical_checkerboard": [64, 65, 211], "visual_comput": [64, 65, 67, 211], "visual_left_hand_button_press": [64, 65, 67, 211], "visual_right_hand_button_press": [64, 65, 67, 211], "fetch_localizer_first_level": [64, 65, 67, 211], "epi_img": [64, 65, 67, 88, 182, 211, 267, 379, 382, 425], "events_fil": [64, 65, 67], "impuls": [64, 66, 171, 172, 175, 324, 326, 331], "behind": 64, "concret": [64, 170, 172], "interv": [64, 65, 99, 292, 293, 294, 295, 297, 298, 314, 316, 317, 448, 454, 465], "character": [64, 65, 114, 177, 208, 365], "hairi": 64, "sorri": 64, "price": [64, 167], "flexibl": [64, 129, 155], "contrast_matrix": [64, 65, 67, 69], "audio": [64, 65, 67], "video": [64, 170], "sentenc": [64, 65, 67, 70, 71, 80, 100, 114, 200, 210, 266], "breath": [64, 65], "contrast_id": [64, 65, 67, 69, 70], "contrast_v": [64, 65, 67, 69, 70], "ask": [64, 117, 140, 143, 155, 170, 178, 215], "yet": [64, 79, 103, 114, 150, 155, 162, 170, 177, 433], "plot_fir_model": [64, 72, 482], "clarifi": [65, 148, 155], "exploratori": 65, "increment": [65, 94, 177, 178], "outcom": [65, 175, 366], "reader": [65, 177, 483], "familiar": [65, 170, 177], "concept": [65, 97, 143, 155, 162, 163, 170, 175, 179, 209, 483], "paradigm": [65, 67, 69, 96, 108, 112, 117, 162, 172, 211, 224, 267, 273, 331, 347, 352, 353, 355, 427, 435, 440, 482], "bmc": [65, 71, 114, 194, 266], "2007": [65, 71, 114, 184, 194, 206, 217, 266, 275, 348, 365, 366, 462], "probe": [65, 67, 166, 175], "press": [65, 67, 71, 75, 76, 78, 79, 104, 114, 172, 264, 266, 274, 316, 317], "horizont": [65, 71, 79, 127, 155, 266, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "checkerboard": [65, 71, 79, 266], "listen": [65, 67, 80, 266], "short": [65, 99, 109, 111, 112, 117, 169, 170, 175, 220, 228, 247, 248, 251, 271, 272, 273, 274, 292, 304, 305, 306, 307, 308, 309, 432, 436, 440, 482], "epoch": [65, 300], "100m": 65, "male": [65, 206, 236], "voic": 65, "instruct": [65, 67, 71, 112, 123, 151, 155, 170, 176, 178, 272, 481], "passiv": 65, "verifi": [65, 100, 170, 182], "understood": [65, 271], "flash": 65, "narr": [65, 80, 170], "400000": 65, "700000": 65, "399994": 65, "700012": 65, "make_localizer_contrast": 65, "involv": [65, 67, 69, 99, 114, 172, 177, 187, 236], "differenti": [65, 69], "stori": [65, 67, 114, 212, 269], "comptat": 65, "encapsul": [65, 228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "plot_contrast": 65, "discret": [65, 69, 123, 147, 148, 155, 192, 324, 333, 352, 365, 369, 370, 371, 372, 373, 374, 375, 461], "spuriou": [65, 114, 160, 170, 192, 365, 366, 450], "heart": 65, "scanner": [65, 172, 175, 365], "01hz": [65, 236], "longest": 65, "multipli": [65, 83, 89, 133, 155, 167, 169, 235, 311, 314, 316, 317, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 430, 436, 438, 439, 443, 445], "shall": 65, "wors": [65, 298], "poorli": [65, 93, 182], "mayb": [65, 117, 385], "useless": 65, "haven": [65, 102], "basi": [65, 67, 107, 171, 192, 324, 326, 331, 365], "undershoot": 65, "strong": [65, 88, 169, 170], "seem": [65, 74, 97, 169], "someth": 65, "inclus": [65, 291], "sole": [65, 117, 169, 306, 307, 369, 370, 371, 372, 373, 374], "discount": 65, "misspecif": 65, "hint": [65, 156, 157], "misfit": 65, "valuabl": [65, 170], "shift": [65, 146, 152, 155, 369, 370, 371, 372, 373, 374, 375, 461], "mi": 65, "sake": [65, 78, 104], "simplic": [65, 67, 162], "readabl": [65, 124, 155], "drop": [65, 68, 99, 135, 136, 137, 141, 155, 170, 177, 178], "far": [65, 107, 169, 357, 363], "implicitli": [65, 67, 79, 101, 107, 162, 169], "autoregress": [65, 324, 333], "ordinari": [65, 101, 104, 315, 385], "least": [65, 66, 99, 101, 102, 104, 114, 162, 168, 170, 300, 311, 315, 324, 333, 337, 338, 339, 370, 373, 375, 379, 385, 416, 481], "assum": [65, 69, 70, 77, 78, 167, 172, 178, 235, 276, 277, 314, 315, 316, 317, 321, 324, 337, 339, 342, 357, 360, 384, 432, 460, 461], "recomput": [65, 97, 167, 321], "obviou": 65, "stick": 65, "arguabl": 65, "greater": [65, 99, 148, 150, 155, 172, 192, 324, 333, 341, 348, 361, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 427, 430, 431, 435, 439, 441, 443, 445, 458, 462, 465], "complex": [65, 76, 86, 114, 117, 162, 164, 167, 170, 174, 177, 182], "ar3": [65, 333], "wish": [65, 78, 104, 150, 155, 170, 175, 178, 223, 261, 262, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 422, 425, 427, 428, 431, 433, 434, 435], "computation": [65, 163, 167], "problemat": 65, "uncontrol": 65, "spike": 65, "phenomena": 65, "respir": 65, "blood": [65, 172, 175], "oxygen": [65, 172, 175], "themselv": [65, 117, 182], "routin": [65, 88, 180, 269, 480], "percentil": [65, 86, 87, 97, 292, 293, 294, 295, 297, 298, 341, 348, 361, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 406, 407, 408, 410, 412, 413, 419, 422, 433, 441, 442, 443, 445, 449, 462], "kill": 65, "somewhat": 65, "colinear": 65, "scrub": [65, 123, 148, 150, 155, 157, 192, 324, 327, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 449, 461], "scenario": [65, 171, 172, 182], "exclud": [65, 117, 450], "unwant": [65, 114, 192], "discrep": [65, 169], "drawback": 65, "bias": 65, "mild": 65, "5mm": [65, 94, 177, 210], "smoother": 65, "firstlevemodel": 65, "grei": [65, 88, 133, 143, 149, 155, 181, 182, 208, 261, 262, 284, 285, 286, 288, 378, 381], "fetch_icbm152_brain_gm_mask": [65, 74, 133, 155, 208, 261], "data_mask": [65, 103], "icbm_mask": 65, "driven": [65, 161, 170, 177, 192, 240, 331], "resample_to_img": [65, 74, 92, 132, 155, 181, 182, 357], "resampled_icbm_mask": 65, "spot": 65, "interestingli": 65, "resili": 65, "reassur": 65, "plot_first_level_detail": [65, 72, 482], "hemodynam": [66, 69, 162, 175], "propos": [66, 99, 170, 171, 178, 189, 195, 379], "primat": 66, "agent": 66, "mion": 66, "monkei": 66, "coupl": [66, 110, 156, 178], "metabol": [66, 172, 175], "phenomenolog": 66, "framework": [66, 156, 257], "whenev": [66, 163, 340], "uncertainti": [66, 75, 78, 169, 171, 172, 175], "issu": [66, 135, 136, 137, 138, 139, 147, 149, 150, 152, 169, 170, 172, 174, 175, 346, 351], "occur": [66, 128, 155, 172, 175, 236, 481], "time_length": [66, 328, 329, 330, 334, 335, 336], "amplitud": [66, 236, 326, 331, 441, 443, 445], "exp_condit": [66, 326], "stim": 66, "oversampl": [66, 324, 326, 328, 329, 330, 331, 334, 335, 336], "gamma": [66, 152, 155, 171], "mion_response_funct": 66, "factor": [66, 68, 99, 103, 114, 137, 155, 164, 175, 192, 198, 200, 314, 316, 317, 326, 328, 329, 330, 331, 334, 335, 336, 340, 420, 433, 434, 435, 442], "response_funct": 66, "dt": 66, "time_stamp": 66, "rint": 66, "delai": [66, 127, 155, 178, 324, 326, 331], "mion_time_deriv": 66, "drf": 66, "derived_response_funct": 66, "rf_model": 66, "main_deriv": 66, "compute_regressor": [66, 124, 150, 155, 171], "model_titl": 66, "convolut": [66, 172, 326, 331], "_label": 66, "con_id": [66, 326], "plot_hrf": [66, 72, 482], "capabl": [67, 127, 150, 155, 182], "coregist": [67, 192], "obvious": 67, "geometri": [67, 114, 175, 353, 430, 436, 437, 438, 439, 445, 464, 465], "resort": 67, "basic_contrast": [67, 69, 171], "dict": [67, 88, 104, 117, 125, 155, 189, 191, 228, 229, 230, 239, 240, 241, 249, 271, 272, 273, 274, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 307, 311, 315, 320, 324, 327, 333, 337, 339, 342, 363, 364, 368, 369, 370, 371, 372, 373, 374, 375, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 421, 422, 430, 431, 438, 439, 443, 446, 447, 448, 449, 457, 459, 461], "Of": 67, "cours": [67, 159, 172, 175, 370, 373], "stat_typ": [67, 68, 107, 126, 127, 155, 312, 320, 324], "impress": 67, "littl": [67, 74, 162, 163, 170], "plot_localizer_surface_analysi": [67, 72, 482], "assess": [68, 77, 114, 162, 169, 170, 171, 190, 236, 296, 385, 421], "clean_img": [68, 126, 133, 135, 140, 150, 155, 181, 461], "0x7fdc0a0a3b30": 68, "set_index": 68, "head": [68, 324, 337, 365, 457, 459], "real_timeseri": 68, "predicted_timeseri": [68, 171], "navi": 68, "purpl": 68, "teal": 68, "fig1": 68, "axs1": 68, "labelpad": 68, "resid": [68, 152, 155, 365, 366], "fig2": 68, "axs2": 68, "0023749453300866787": 68, "0016934773463517239": 68, "018509907565882628": 68, "07049870657346953": 68, "031008074173867566": 68, "62193288008469e": 68, "markedli": 68, "deep": [68, 228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "awai": [68, 169, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "receiv": [68, 99, 162, 175, 429], "coil": 68, "salt": 68, "necessarili": [68, 160, 172, 192], "influenc": [68, 169, 236, 298], "0x7fdc15c6fe60": 68, "tell": [68, 85, 114, 169, 212, 269], "everywher": [68, 168], "z_map_ftest": 68, "0x7fdc18a695b0": 68, "plot_predictions_residu": [68, 72, 482], "percept": [69, 114, 143, 155, 172, 194, 224, 266], "realign": [69, 210, 224, 269], "scrambl": [69, 93, 171, 224], "supposedli": [69, 224], "henson": [69, 99, 114, 224], "multimodal_fac": 69, "fetch_spm_multimodal_fmri": [69, 171, 224], "catch_warn": [69, 102], "simplefilt": [69, 102], "func1": [69, 70, 200, 224, 259, 279], "auto_resampl": [69, 343], "func2": [69, 70, 200, 224, 259, 279], "mean_imag": 69, "idx": [69, 248], "revious": 69, "tail": [69, 314, 316, 317, 458], "tcontrast": [69, 314, 316, 317], "sophist": [69, 97, 165], "04_glm_first_level": [69, 70, 71, 72, 482], "plot_spm_multimodal_fac": [69, 72, 482], "implic": [69, 99, 114], "portion": 69, "sparser": [69, 93, 161, 297, 298, 449, 451], "anterior": [69, 90, 102, 114, 137, 155, 206, 254, 256, 356, 436, 438, 439], "frontal": [69, 90, 114, 167, 420, 425, 427, 428, 434, 435], "lobe": [69, 251], "goshen": [69, 114], "gottstein": [69, 114], "ganel": [69, 114], "otten": [69, 114], "quayl": [69, 114], "rugg": [69, 114], "electrophysiolog": [69, 114], "haemodynam": [69, 114, 171, 172, 175], "prime": [69, 114], "cerebr": [69, 114, 172, 188, 194, 196, 199, 206, 220, 226, 242, 248, 252, 254, 266, 268], "793": [69, 114, 128, 155], "805": [69, 114], "2003": [69, 114, 311, 315, 467], "1093": [69, 114, 156, 188, 196, 220, 242, 248, 268], "cercor": [69, 114, 188, 196, 220, 242, 248, 268], "academ": [69, 114, 156, 188, 196, 220, 242, 248, 268], "oup": [69, 114, 156, 188, 196, 220, 242, 248, 268], "9752528": [69, 114], "1300793": [69, 114], "877": 69, "fiac": [70, 184, 259, 477], "dehaen": [70, 71, 114, 177, 194, 200, 266], "lambertz": [70, 114, 200], "plot_two_runs_model": [70, 72, 126, 155, 482], "retain": [70, 150, 155, 162, 163, 172, 228, 229, 230, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 365, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449, 452, 453], "fetch_fiac_first_level": [70, 200], "design_fil": 70, "design_matrix1": [70, 200, 259], "design_matrix2": [70, 200, 259], "df": [70, 99, 106, 458], "dst_minus_sst": [70, 466], "fmri_glm_run_1": 70, "summary_statistics_run_1": 70, "pad": [70, 126, 143, 155, 181, 182, 346, 357, 358, 379, 382, 386, 388, 389, 460], "0x7fdc061f4980": 70, "fmri_glm_run_2": 70, "summary_statistics_run_2": 70, "0x7fdc1545b230": 70, "compute_fixed_effect": 70, "contrast_img": [70, 321], "variance_img": [70, 321], "effect_vari": [70, 79, 312, 324, 337], "fixed_fx_contrast": 70, "fixed_fx_vari": 70, "fixed_fx_stat": 70, "0x7fdc18a9c710": 70, "unexpectedli": 70, "ratio": [70, 93, 139, 155, 175, 257, 297, 299, 300, 447, 449], "straightforward": [70, 169, 312], "reus": 70, "fmri_glm_multirun": 70, "safe": [70, 135, 155], "investig": [70, 93, 97, 161, 207, 213, 296], "therefor": [70, 150, 155, 161, 167, 169, 192, 238, 240], "move": [70, 124, 125, 126, 128, 135, 148, 155], "beyond": [70, 151, 155], "n_column": [70, 172, 235], "sstssp_minus_dstdsp": [70, 466], "dstdsp_minus_sstssp": [70, 466], "dsp_minus_ssp": [70, 466], "dst_minus_sst_for_dsp": [70, 466], "dsp_minus_ssp_for_dst": [70, 466], "deactiv": [70, 466], "02g": 70, "contast": 70, "z_image_path": 70, "_z_map": 70, "glm_report": 70, "plot_oasi": [70, 74, 81, 482], "ghislain": [70, 114, 200], "stanisla": [70, 71, 114, 177, 194, 200, 266], "luc": [70, 114, 200], "anton": [70, 114, 200], "aureli": [70, 114, 200], "campagn": [70, 114, 200], "ciuciu": [70, 114, 200, 299], "isabel": [70, 114, 200], "denghien": [70, 114, 200], "antoinett": [70, 71, 114, 194, 200, 266], "jobert": [70, 71, 114, 194, 200, 266], "deni": [70, 71, 114, 162, 194, 200, 266], "lebihan": [70, 114, 200], "mariano": [70, 114, 200], "sigman": [70, 114, 200], "segreg": [70, 114, 200], "2006": [70, 114, 167, 177, 192, 200, 206, 296, 316, 317], "pmc": [70, 114, 200], "pmc6871319": [70, 114, 200], "807": [70, 72, 482], "protocol": [71, 175, 194, 266], "archi": 71, "plot_ev": [71, 146, 155, 171], "hardcod": [71, 123, 155, 290], "fmt": 71, "trial_type_idx": 71, "condition_id": 71, "instantan": 71, "null_duration_tri": 71, "export": [71, 178, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439], "plot_write_events_fil": [71, 72, 482], "tsvfile": 71, "localizer_ev": 71, "experimental_paradigm": [71, 125, 155], "null": [71, 78, 151, 155, 162, 167, 172, 175, 312, 339, 385], "\u00e9": [71, 114, 162, 194, 206, 208, 261, 266], "bastien": [71, 114, 194, 266], "meriaux": [71, 114, 194, 266], "julien": [71, 114, 194, 266], "serr": [71, 114, 194, 266], "le": [71, 114, 194, 266], "bihan": [71, 114, 194, 266], "identif": [71, 93, 114, 175, 188, 194, 236, 266], "databas": [71, 102, 114, 194, 222, 266, 271], "899": 72, "876": [72, 482], "unpair": [73, 81, 112, 174, 266, 337, 397, 424, 427, 440, 482], "sex": [74, 77, 114, 174, 190, 206, 236, 268, 281, 292, 293, 294, 295, 297, 298, 466], "mf": [74, 114, 188, 268], "gm_mask": 74, "adequ": [74, 195], "second_level": [74, 75, 76, 77, 78, 79, 80, 100, 152, 155, 174, 459], "secondlevelmodel": [74, 75, 76, 78, 79, 80, 100, 126, 150, 155, 174, 324, 364, 459], "second_level_model": [74, 75, 78, 80, 100], "0x7fdc07184980": 74, "secondlevelmodelifittedsecondlevelmodel": [74, 76], "second_level_contrast": [74, 76, 78, 324, 337, 339, 459], "03g": 74, "40175": 74, "0x7fdc1532efc0": 74, "icbm152_2009": 74, "1425": [74, 81, 482], "rosenblatt": [75, 114, 319], "circular": [75, 192], "fetch_localizer_contrast": [75, 76, 78, 79, 104, 133, 155, 194, 264, 265], "second_level_input": [75, 78, 79, 100, 150, 152, 155, 337, 339], "p_val": [75, 76, 78], "p001_uncorrect": 75, "cluster_level_infer": [75, 150, 155, 174], "proportion_true_discoveries_img": [75, 319], "livio": [75, 114, 319], "fino": [75, 114, 319], "wouter": [75, 114, 319], "weeda": [75, 114, 319], "aldo": [75, 114, 319], "solari": [75, 114, 319], "goeman": [75, 114, 319], "796": [75, 114, 319], "novemb": [75, 114, 137, 140, 143, 146, 155, 319], "plot_proportion_activated_voxel": [75, 81, 482], "cue": [76, 104, 265, 266], "pseudo": [76, 104, 299, 300, 316, 339, 341, 447], "brainomics_loc": [76, 104], "brainomics_data": [76, 104], "s01": [76, 104], "cmaps_leftauditoryclick": [76, 104], "tested_var": [76, 104, 105, 385], "float64": 76, "worth": 76, "aualiti": 76, "mask_quality_check": [76, 104], "contrast_map_filenam": [76, 104], "ones_lik": 76, "fluenci": 76, "math_img": [76, 78, 82, 84, 95, 106, 112, 127, 131, 155, 181, 289, 354, 435, 440, 482], "logarithm": [76, 78, 339], "equal": [76, 97, 143, 150, 152, 155, 165, 192, 241, 246, 247, 248, 252, 292, 293, 294, 295, 297, 298, 312, 337, 354, 357, 361, 377, 379, 380, 382, 442, 443, 445, 447], "fwer": [76, 80, 174, 175, 339], "1317": 76, "non_parametric_infer": [76, 78, 123, 124, 150, 152, 155, 174], "neg_log_pvals_permuted_ols_unmask": [76, 104], "model_intercept": [76, 78, 104, 339, 385], "two_sided_test": [76, 78, 101, 167, 339, 385], "cap": [76, 78], "1e3": 76, "890": [76, 81, 482], "plot_second_level_association_test": [76, 81, 482], "characterist": [77, 162, 175, 366], "subjects_label": [77, 338], "extra": [77, 117, 164, 178, 179, 236, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 425, 426, 427, 428, 432, 433, 434, 435, 437, 480, 483], "extra_info_subject": 77, "make_second_level_design_matrix": [77, 174], "attent": [77, 331], "singular": [77, 314, 316, 317, 348, 462], "aberr": 77, "plot_second_level_design_matrix": [77, 81, 482], "elicit": 78, "get_tmap": [78, 266], "participant_id": 78, "tolist": [78, 99], "cidx": 78, "p001_unc": [78, 100], "nonparametr": 78, "pend": 78, "reformat": [78, 124, 155], "assumpt": [78, 167, 172, 214], "job": [78, 117, 324, 337, 339, 385], "out_dict": 78, "ideal": [78, 104, 159, 172, 178, 192, 240], "permuted_least_squar": [78, 152, 155], "986": 78, "tend": [78, 99, 164, 169, 180], "itertool": 78, "logp_max_t": [78, 104, 339, 385], "logp_max_s": [78, 339, 385], "logp_max_mass": [78, 339, 385], "img_count": 78, "i_row": 78, "j_col": 78, "1471": 78, "plot_second_level_one_sample_test": [78, 81, 482], "retinotop": 79, "distinct": [79, 99, 114, 169, 188, 242, 268], "border": [79, 346, 377, 380, 386, 388, 389], "primari": [79, 170, 324, 337, 459], "sample_vert": 79, "sample_horizont": 79, "s1": 79, "s2": 79, "condition_effect": 79, "doesn": [79, 102, 170], "subject_effect": 79, "02d": 79, "assembl": [79, 115, 172], "unpaired_design_matrix": 79, "paired_design_matrix": 79, "ax_unpair": 79, "ax_pair": 79, "width_ratio": [79, 99], "second_level_model_unpair": 79, "second_level_model_pair": 79, "stat_maps_unpair": 79, "stat_maps_pair": 79, "881784197001252e": 79, "unsurprisingli": 79, "plot_second_level_two_sample_test": [79, 81, 482], "bunch": [80, 116, 126, 135, 155, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281], "oppos": [80, 181, 182], "fetch_localizer_calculation_task": [80, 105, 264, 266], "statstic": 80, "cmap_filenam": [80, 105], "trivial": 80, "two_sid": [80, 126, 147, 150, 155, 340, 341, 361, 458, 459], "0x7fdc0a65f2c0": 80, "thresholded_map1": 80, "threshold1": 80, "thresholded_map2": 80, "threshold2": 80, "3g": 80, "thresholded_map3": 80, "threshold3": 80, "raw": [80, 91, 100, 107, 147, 155, 162, 180, 182, 197, 198, 212, 243, 292, 293, 294, 295, 299, 300, 371, 374, 428, 435, 447, 457], "0x7fdc0825b170": 80, "0x7fdbff2657f0": 80, "fourth": [80, 83, 148, 155, 324, 339, 349, 350, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 418, 449, 461], "0x7fdc18804b90": 80, "plot_threshold": [80, 81, 482], "05_glm_second_level": [81, 482], "4x4": [83, 181, 292, 293, 294, 295, 297, 298, 299, 300, 324, 337, 344, 354, 355, 357, 371, 374, 377, 379, 380, 382, 388, 389, 447], "millimet": [83, 167, 182, 292, 293, 294, 295, 296, 299, 300, 324, 337, 339, 359, 369, 370, 371, 372, 373, 374, 375, 376, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 447, 449, 451, 458], "entri": [83, 123, 125, 155, 170, 178, 292, 293, 294, 295, 314, 316, 317, 346, 437, 465], "3x3": [83, 181, 292, 293, 294, 295, 297, 298, 299, 300, 324, 337, 354, 357, 371, 374, 377, 379, 380, 382, 447], "closest": [83, 357], "union": [83, 380, 382, 383], "messag": [83, 130, 155, 178, 229, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 274, 275, 276, 277, 278, 279, 281, 292, 293, 294, 295, 296, 297, 298, 337, 339, 343, 354, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 381, 385, 447, 448, 449], "circl": 83, "diamond": 83, "source_affin": 83, "rotation_matrix": 83, "0mm": [83, 177], "img_in_mm_spac": 83, "target_affine_3x3": 83, "target_affine_4x4": 83, "img_3d_affin": 83, "img_4d_affin": 83, "target_affine_mm_space_offset_chang": 83, "img_3d_affine_in_mm_spac": 83, "img_4d_affine_in_mm_spac": 83, "06_manipulating_imag": [83, 85, 90, 93, 95, 482], "plot_affine_transform": [83, 95, 482], "anchor": 83, "goal": [84, 89, 92, 116, 169, 170], "result_img": [84, 180, 353], "img1": [84, 353], "img2": [84, 353], "801": [84, 95, 97, 482], "766": [84, 91, 99, 114], "plot_compare_mean_imag": [84, 95, 482], "connected_label_region": [85, 135, 155, 159, 181, 449, 451], "oper": [85, 88, 90, 93, 103, 116, 148, 155, 162, 169, 170, 172, 175, 179, 180, 182, 228, 229, 262, 291, 324, 337, 339, 351, 353, 354, 377, 378, 379, 381, 382, 423, 469, 473, 483], "atlas_yeo_2011": 85, "atlas_yeo": 85, "thick_7": [85, 226, 252], "0x7fdc0d4f2000": 85, "apart": [85, 135, 155, 159, 160, 169], "region_label": 85, "region_extractor": [85, 150, 155], "0x7fdc0620efc0": 85, "difficult": [85, 156, 163, 168, 182], "eg": [85, 88, 137, 140, 146, 155, 156, 157, 162, 181, 182, 417, 418, 457], "broken": [85, 133, 141, 155, 167], "plot_extract_regions_labels_imag": [85, 95, 482], "relabeled_yeo_atla": 85, "connect_diag": [85, 450], "region_labels_not_diag": 85, "0x7fdc0d38ab70": 85, "100mm": 85, "region_labels_min_s": 85, "831": [85, 95, 482], "atlas_network": 86, "dmn_network": 86, "regions_indices_network3": 86, "blob": [86, 93, 161, 181, 248], "network3": 86, "821": [86, 95, 482], "plot_extract_rois_smith_atla": [86, 95, 482], "fetch_neurovault_auditory_computation_task": [87, 140, 155, 274], "foreground": [87, 160], "connected_region": [87, 128, 141, 155, 160, 181, 449, 450], "scoreatpercentil": [87, 102, 361], "threshold_percentile_img": 87, "threshold_value_img": 87, "0x7fdbffb091f0": 87, "regions_percentile_img": 87, "1500": 87, "regions_value_img": 87, "plot_extract_rois_statistical_map": [87, 95, 482], "homogen": [88, 126, 155, 159, 181, 195, 236, 241, 292, 293, 294, 295, 299, 300, 357, 371, 374, 447], "miyawaki_filenam": [88, 182], "miyawaki_mean_img": [88, 182], "0x7fdbff451340": 88, "0x7fdc131c22a0": 88, "mask_arg": [88, 91, 182, 299, 300, 371, 374, 447, 467], "uniform": 88, "epi_filenam": [88, 182], "0x7fdc056fec30": 88, "eros": [88, 175, 262, 284, 287, 377, 378, 379, 381, 382], "dilat": [88, 93, 175, 181, 262, 284, 287, 377, 378, 379, 381, 382], "layer": 88, "skull": [88, 261, 377, 378, 379, 381, 382], "lower_cutoff": [88, 379, 382], "upper_cutoff": [88, 379, 380, 382], "bright": 88, "hover": 88, "trended_data": 88, "detrended_data": 88, "plot_mask_comput": [88, 95, 182, 482], "negative_stat_img": 89, "933": [89, 95, 482], "plot_negate_imag": [89, 95, 482], "output_filepath": [90, 91, 182], "plot_nifti_labels_simpl": [90, 95, 482], "mni152templ": [90, 324, 337, 420, 433, 434, 435, 459, 467], "ward": [90, 159, 175, 176, 192, 372, 447, 467], "pole": 90, "123176": 90, "insular": [90, 114, 206], "18728": 90, "superior": [90, 102, 168, 356], "40640": 90, "42528": 90, "inferior": 90, "par": 90, "triangulari": 90, "8824": 90, "operculari": 90, "11072": 90, "68584": 90, "37688": 90, "4168": [90, 126, 155], "14640": 90, "6784": 90, "20200": 90, "temporooccipit": 90, "16032": 90, "5176": 90, "15536": 90, "11760": 90, "55160": 90, "lobul": [90, 114, 206], "23264": 90, "supramargin": 90, "13936": 90, "18072": 90, "angular": 90, "19272": 90, "78232": 90, "32712": 90, "intracalcarin": 90, "11208": 90, "7808": 90, "juxtaposit": 90, "formerli": [90, 140, 155], "supplementari": [90, 116, 167], "11872": 90, "subcallos": 90, "9136": 90, "paracingul": 90, "23552": 90, "20736": 90, "19296": 90, "precun": 90, "44984": 90, "cuneal": 90, "9816": 90, "orbit": 90, "25184": 90, "parahippocamp": 90, "9984": 90, "5680": 90, "lingual": 90, "27048": 90, "fusiform": [90, 167], "4880": 90, "12752": 90, "11752": 90, "14448": 90, "5496": 90, "15088": 90, "8952": 90, "planum": [90, 102], "polar": [90, 228, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "5992": 90, "heschl": 90, "h1": 90, "h2": 90, "4832": 90, "temporal": [90, 102], "7616": 90, "supracalcarin": 90, "2088": 90, "42208": 90, "quot": 90, "niftilablesmask": 90, "n_time_point": [90, 91, 332, 333], "label_idx": 90, "0x7fdc0620e210": 91, "fastica": [91, 102, 103, 299], "components_mask": [91, 103], "_fastica": [91, 103], "revers": [91, 136, 143, 155], "plot_nifti_simpl": [91, 95, 182, 482], "load_mni152_templ": [92, 149, 155, 208, 261, 262, 283, 285, 288, 341, 344, 349, 353, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 465], "resampled_stat_img": 92, "tmap_img": 92, "original_shap": 92, "original_affin": 92, "resampled_shap": 92, "resampled_affin": 92, "template_img": 92, "template_shap": 92, "template_affin": 92, "plot_resample_to_templ": [92, 95, 482], "allevi": 93, "curs": 93, "aris": [93, 114, 172, 192, 365, 366], "context": [93, 99, 114, 125, 126, 155, 170, 175], "chain": [93, 181, 228, 229], "clear": [93, 117, 123, 143, 152, 155, 170, 292, 293, 294, 295, 299, 300, 371, 374, 447], "run_target": 93, "student": [93, 172, 181, 218, 312, 483], "haxby_label": 93, "txt": [93, 275], "especi": [93, 141, 150, 155, 156, 162, 180, 443, 483], "Such": [93, 156, 362], "4mm": [93, 160, 167, 197, 257, 300], "12mm": 93, "anisotropi": 93, "indent": 93, "analog": 93, "0x7fdc1848bf50": 93, "brief": [93, 170, 172], "motiv": 93, "realm": 93, "ttest_ind": [93, 181], "establish": [93, 168, 170, 221], "log_p_valu": 93, "log_p_values_img": 93, "0x7fdc131c1940": 93, "extend": [93, 125, 146, 151, 155, 172, 182, 221, 357], "annot": [93, 115, 125, 135, 146, 155, 196, 215, 220, 225, 248, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 422, 425, 427, 428, 431, 433, 434, 435, 436, 437, 438, 439, 442, 445, 463, 480, 483], "0x7fdc0bc4d9a0": 93, "intersect": [93, 181, 189, 380, 382, 383, 453], "bin_p_valu": 93, "boolean": [93, 117, 147, 152, 155, 234, 260, 266, 275, 296, 299, 300, 324, 343, 355, 368, 375, 377, 378, 379, 381, 382, 420, 425, 427, 429, 434, 437, 442, 455, 456, 461], "logic": [93, 117, 170, 291], "logical_and": [93, 101], "jargon": 93, "AND": [93, 117, 126, 155], "conjunct": 93, "bin_p_values_and_vt": 93, "otherwis": [93, 101, 102, 140, 155, 172, 178, 228, 229, 230, 234, 236, 242, 243, 254, 255, 256, 264, 265, 266, 268, 275, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 327, 337, 352, 356, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 430, 433, 436, 438, 439, 442, 443, 445, 446, 447, 448, 449, 450, 461, 465], "bin_p_values_and_vt_img": 93, "plot_roi_extract": [93, 95, 482], "0x7fdbff452ab0": 93, "consolid": [93, 151, 155], "toward": [93, 150, 155, 198, 228, 352, 369, 370, 371, 372, 373, 374, 375, 483], "morpholog": [93, 181, 377, 378, 379, 381, 382], "forget": [93, 170], "hole": 93, "binary_dil": [93, 181, 377, 378, 379, 381, 382], "dil_bin_p_values_and_vt": 93, "dil_bin_p_values_and_vt_img": 93, "0x7fdc0620fe60": 93, "immedi": [93, 366], "first_roi_data": 93, "second_roi_data": 93, "first_roi_img": 93, "second_roi_img": 93, "0x7fdc296d1d90": 93, "suit": [93, 99, 157, 163, 177, 192, 240], "condition_nam": [93, 99], "n_cond_img": 93, "n_cond": 93, "gather": [93, 170, 172, 227], "cond": [93, 99, 326], "cond_map": 93, "mask_data": 93, "mask_atla": 93, "747": [93, 95, 482], "2252": 93, "first_epi_fil": 94, "mean_func": 94, "20mm": [94, 177], "smoothed_img": [94, 180], "939": [94, 95, 482], "plot_smooth_mean_imag": [94, 95, 482], "2251": [95, 467, 482], "765": [95, 482], "massiv": [96, 108, 112, 166, 260, 265, 266, 347, 349, 354, 368, 374, 385, 413, 427, 435, 440, 474, 482, 483], "bridg": 97, "integr": [97, 128, 143, 155, 170, 181, 371, 467], "usecas": [97, 159, 163, 165, 170], "pointer": [97, 165], "unclear": 97, "n_timepoint": [97, 162, 165], "meaning": [97, 99, 130, 140, 143, 155, 170, 172, 198, 210, 342, 461], "stipul": 97, "823": 97, "processor": [97, 165], "858": [97, 467], "dummyclassifi": [97, 98, 148, 155, 165, 292, 293, 294, 295], "pure": [97, 101, 297, 298], "slower": [97, 165, 169, 357], "permutation_test_scor": [97, 165], "null_cv_scor": 97, "selectpercentil": [97, 135, 155], "linear_svc": 97, "anova_svc": 97, "return_estim": 97, "fitted_pipelin": 97, "test_scor": 97, "first_pipelin": 97, "svc_coef": 97, "invert": [97, 103, 125, 146, 155, 169, 182, 228, 314, 316, 317, 368, 371, 374, 386, 420, 422, 425, 427, 428, 431, 433, 434, 435], "full_coef": 97, "0x7fdc18bb7a40": 97, "fisher": [97, 114, 312], "lda": 97, "discriminant_analysi": 97, "lineardiscriminantanalysi": 97, "anova_lda": 97, "n_condit": 97, "8009": 97, "principl": [97, 159, 162, 166, 168, 175, 296, 483], "fanci": 97, "n_features_to_select": 97, "rfe_svc": 97, "awar": [97, 230, 460], "889": [97, 108, 482], "plot_advanced_decoding_scikit": [97, 108, 482], "gridsearchcv": [98, 165], "pipe": 98, "most_frequ": 98, "connectivity__kind": 98, "labelencod": 98, "pheno": 98, "refit": 98, "cv_results_": 98, "mean_test_scor": 98, "std_test_scor": 98, "candid": 98, "param_connectivity__kind": 98, "1144": 98, "plot_age_group_prediction_cross_v": [98, 108, 143, 155, 482], "substitut": [99, 457], "psychophysiolog": 99, "ppi": 99, "cisler": [99, 114], "rissman": [99, 114], "mumford": [99, 114, 162, 177, 258, 276], "turner": [99, 114, 162, 191, 222, 239, 249], "everyth": [99, 178], "systemat": [99, 114, 130, 155, 192, 266, 365, 366], "incorpor": [99, 161], "literatur": [99, 157, 221, 236, 348, 366, 462], "mention": [99, 123, 125, 126, 155, 170, 171, 172], "abdulrahman": [99, 114], "decis": [99, 114, 163, 167, 292, 293, 294, 295, 297, 298, 312], "inter": [99, 104, 157, 181, 182, 192, 209, 380, 382], "primarili": 99, "fetch_language_localizer_demo_dataset": [99, 100, 107, 126, 155, 171, 193, 210, 253], "legacy_output": [99, 100, 107, 263], "events_df": 99, "languageloc": [99, 100, 107], "img_filt": [99, 100, 107, 327], "desc": [99, 100, 107, 327, 365, 366], "preproc": [99, 100, 107, 327], "standard_glm": 99, "fmri_fil": 99, "glm_paramet": 99, "get_param": [99, 228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "1374": [99, 100, 107], "starttim": [99, 100, 107], "01_task": [99, 100, 107], "languagelocalizer_desc": [99, 100, 107], "highlight": [99, 178], "lsa_events_df": 99, "condition_count": 99, "i_trial": 99, "iterrow": 99, "trial_condit": 99, "__": [99, 228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "shouldn": [99, 178, 238], "trial_nam": 99, "lsa_glm": 99, "lsa_beta_map": 99, "trialwise_condit": 99, "beta_map": 99, "relabel": [99, 450], "lss_transform": 99, "row_numb": 99, "compliant": [99, 124, 155, 170, 182, 276, 290, 366], "trial_type_seri": 99, "trial_type_list": 99, "trial_numb": 99, "left_001": 99, "track": [99, 102, 169, 178], "lss_beta_map": 99, "lss_design_matric": 99, "lss_events_df": 99, "lss_glm": 99, "dm_titl": 99, "i_ax": 99, "though": [99, 103, 162, 315, 436, 438, 439, 460], "vastli": 99, "quick": [99, 177], "neurosynth": [99, 102, 115, 215, 271, 273, 483], "lang_seed_beta_seri": 99, "lang_beta_seri": 99, "lang_corr": 99, "language_connectivity_img": 99, "string_seed_beta_seri": 99, "string_beta_seri": 99, "string_corr": 99, "string_connectivity_img": 99, "josh": [99, 114], "keith": [99, 114], "bush": [99, 114], "scott": [99, 114, 221, 256], "steel": [99, 114], "1042": [99, 114], "1052": [99, 114], "jess": [99, 114], "adam": [99, 114], "gazzalei": [99, 114], "esposito": [99, 114], "stage": [99, 114, 170, 177], "752": [99, 114], "763": [99, 114], "2004": [99, 114, 196, 242, 316, 317], "jeanett": [99, 114, 162, 177], "benjamin": [99, 114, 162, 221, 256], "gregori": [99, 114, 162], "ashbi": [99, 114, 162], "poldrack": [99, 114, 117, 162, 177, 198, 212, 215, 258, 269, 271, 273, 276], "deconvolv": [99, 114, 162], "multivoxel": [99, 114, 162, 212, 269], "2636": [99, 114, 162], "2643": [99, 114, 147, 155, 162], "spatiotempor": [99, 114], "rapid": [99, 114, 210], "1429": [99, 114], "1438": [99, 114, 467], "hunar": [99, 114], "richard": [99, 114], "plot_beta_seri": [99, 108, 482], "consult": [100, 188], "simplifi": [100, 107, 116, 133, 143, 151, 155, 182, 264, 265], "06_task": 100, "rotx": 100, "roti": 100, "rotz": 100, "conson": [100, 210], "value_count": 100, "scalar": [100, 167, 182, 311, 312, 314, 315, 316, 317, 359, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 422, 431], "model_and_arg": 100, "midx": 100, "share": [100, 114, 117, 146, 155, 156, 161, 170, 180, 187, 188, 194, 195, 198, 215, 232, 241, 244, 245, 266, 271, 273], "8mm": 100, "first_level_contrast": [100, 150, 155, 337, 339], "1074": [100, 108, 482], "plot_bids_analysi": [100, 108, 482], "behav": [101, 324, 326, 331], "exchang": [101, 103, 187, 236], "winkler": [101, 114, 188, 268, 385], "anderson": [101, 114, 187, 188, 236, 268, 385], "robinson": [101, 114, 188, 268, 385], "conditions_encod": 101, "func_reduc": 101, "n_run": 101, "conditions_per_run": 101, "grouped_fmri_mask": 101, "grouped_conditions_encod": 101, "run_mask": 101, "run_house_mask": 101, "run_face_mask": 101, "ol": [101, 104, 314, 316, 317, 324, 333, 385, 474], "trace": 101, "pvals_bonferroni": 101, "neg_log_pvals_bonferroni": 101, "neg_log_pvals_bonferroni_unmask": 101, "1300": [101, 104, 105], "dataconversionwarn": [101, 104, 105], "mean_fmri_img": 101, "neg_log_pvals_bonferroni_data": 101, "gerard": [101, 114, 385], "ridgwai": [101, 114, 385], "webster": [101, 114, 156, 385], "nichol": [101, 114, 117, 156, 175, 177, 188, 215, 268, 271, 273, 339, 379, 385], "s1053811914000913": [101, 114, 385], "marti": [101, 114, 225, 251, 385], "australian": [101, 114, 385], "zealand": [101, 114, 385], "journal": [101, 114, 167, 177, 192, 206, 217, 220, 222, 226, 248, 249, 252, 275, 385], "onlinelibrari": [101, 114, 195, 201, 202, 203, 204, 205, 225, 241, 251, 280, 342, 385, 461], "wilei": [101, 114, 195, 201, 202, 203, 204, 205, 225, 241, 251, 280, 316, 317, 342, 385, 461], "1111": [101, 114, 385], "1467": [101, 114, 385], "842x": [101, 114, 385], "00156": [101, 114, 385], "869": [101, 108, 482], "plot_haxby_mass_univari": [101, 108, 482], "fetch_neurovault": [102, 106, 117, 136, 143, 147, 155, 272, 273, 274], "load_mni152_brain_mask": [102, 133, 149, 155, 208, 261], "nv_data": [102, 106], "max_imag": [102, 106, 117, 271], "fetch_neurosynth_word": [102, 117, 271, 273], "term_weight": 102, "word_frequ": [102, 117, 215, 271, 273], "vocabulari": [102, 117, 175, 177, 215, 271, 273], "total_scor": 102, "ntop": 102, "term_idx": 102, "1307": 102, "insula": 102, "nreshap": 102, "deprecationwarn": [102, 240, 241, 249, 321, 368, 369, 370, 371, 372, 373, 374, 375, 449], "failur": [102, 135, 155, 170, 379], "is_us": 102, "image_path": 102, "images_meta": [102, 106, 117, 215, 271, 272, 273, 274], "collection_id": [102, 106, 117, 271, 273], "fast_ica": 102, "ica_map": 102, "term_weights_for_compon": 102, "components_": [102, 138, 155, 299, 300], "ic_map": 102, "ic_term": 102, "ic_threshold": 102, "ic_img": 102, "important_term": 102, "neurolog": [102, 172, 175, 189, 192, 238], "plot_ica_neurovault": [102, 108, 482], "advis": [103, 170, 180, 262, 379, 447], "unsupervis": [103, 175, 299, 300, 324, 337, 446, 448], "latent": [103, 175], "sens": [103, 162, 177, 292, 293, 294, 295, 314, 316, 317, 389, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412], "component_img": 103, "plot_ica_resting_st": [103, 108, 482], "pvals_anova": [104, 105], "neg_log_pvals_anova": [104, 105], "neg_log_pvals_anova_unmask": [104, 105], "fwe": [104, 385], "tfce": [104, 123, 152, 155, 175, 339, 385], "ols_output": 104, "neg_log_pvals_tfce_unmask": 104, "logp_max_tfc": [104, 339, 385], "amax": 104, "images_to_plot": 104, "i_col": 104, "new_titl": 104, "sig": 104, "937": [104, 108, 482], "plot_localizer_mass_univariate_method": [104, 105, 108, 482], "plotted_slic": 105, "masked_pv": 105, "plot_localizer_simple_analysi": [105, 108, 482], "fetch_neurovault_id": [106, 117, 136, 155, 271, 272, 274], "stop_go_image_id": 106, "3041": 106, "3042": [106, 150, 155], "2676": 106, "2675": 106, "2818": 106, "2834": 106, "queri": [106, 271, 273, 291], "cognitive_paradigm_cogatla": 106, "contrast_definit": 106, "succ": 106, "map_typ": [106, 271], "image_id": [106, 117, 273], "nplot": 106, "absolute_path": 106, "t_to_z": 106, "t_score": 106, "deg_of_freedom": 106, "sf": 106, "z_valu": 106, "z_img": 106, "current_collect": 106, "ncomput": 106, "this_meta": 106, "ncollect": 106, "t_img": 106, "number_of_subject": 106, "meta_analysis_img": 106, "sqrt": [106, 133, 155, 234, 235, 316, 317], "774": [106, 108, 482], "plot_neurovault_meta_analysi": [106, 108, 482], "downsampl": [107, 160, 181, 197, 257, 421], "10k": 107, "sidecar": 107, "json_fil": 107, "repetitiontim": 107, "z_scores_right": 107, "z_scores_left": 107, "contrast_valu": 107, "accumul": [107, 480], "z_score_left": 107, "az_scores_right": 107, "popul": [107, 114, 156, 171, 188, 206, 208, 229, 268, 369, 370, 371, 372, 373, 374, 375, 461], "ttest_1samp": 107, "pval_left": 107, "pval_right": 107, "z_val_left": 107, "z_val_right": 107, "plot_surface_bids_analysi": [107, 108, 482], "07_advanc": [108, 482], "1143": [108, 467, 482], "sandbox": 110, "tent": 110, "incomplet": [110, 125, 155, 227], "deprec": [110, 123, 124, 125, 126, 130, 134, 135, 136, 137, 138, 140, 141, 143, 145, 146, 148, 150, 152, 155, 170, 178, 193, 227, 228, 240, 241, 249, 253, 277, 292, 293, 294, 295, 299, 300, 312, 320, 327, 365, 368, 369, 370, 371, 372, 373, 374, 375, 385, 421, 447, 449, 452, 453, 457], "cycl": [110, 124, 125, 155, 227], "plot_surf_img": 110, "surfaceimag": [110, 292, 293, 294, 295, 306, 307], "polymesh": 110, "subplot_kw": [110, 436, 437, 438, 439], "mesh_part": 110, "plot_surf": [110, 123, 127, 135, 137, 143, 147, 148, 149, 150, 155, 170, 171, 437, 438, 439, 480], "isinst": 110, "fetch_nki": 110, "surfacemask": [110, 292, 293, 294, 295], "mean_data": 110, "895": 110, "20484": 110, "label_nam": [110, 306], "fetch_destrieux": 110, "avg_method": [110, 125, 127, 148, 155, 436, 438, 439], "median": [110, 143, 155, 192, 369, 372, 436, 438, 439, 452], "labels_mask": 110, "label_names_": [110, 306], "param_valid": [110, 135, 155], "disabl": [110, 117, 125, 126, 141, 143, 147, 155, 169, 446], "monkeypatch_masker_check": 110, "adjust_screening_percentil": 110, "randomst": [110, 299, 300, 324, 333, 339, 385, 446, 447], "masker_valid": 110, "_univariate_select": 110, "20206": 110, "20207": 110, "20208": 110, "4991939095387371": 110, "5115891053391053": 110, "4847132034632034": 110, "score_func": 110, "atleast_2d": 110, "dp": 110, "cold_hot": [110, 139, 155, 430, 435, 439, 442, 443, 445], "893": [110, 111, 482], "1528": 110, "plot_surface_image_and_mask": [110, 111, 482], "08_experiment": [111, 482], "1527": [111, 467, 482], "permiss": [112, 143, 155], "auto_examples_python": 112, "auto_examples_jupyt": 112, "arrang": [114, 141, 155, 396, 398, 401, 415, 420, 425, 428, 433, 434, 435, 480], "alphabet": [114, 143, 155, 178, 180], "bib": 114, "samara": [114, 160, 169, 229, 232, 449], "septemb": [114, 125, 134, 149, 155, 160, 449], "01093944": [114, 160, 449], "elena": [114, 191, 239], "erik": [114, 191, 239], "erhardt": [114, 191, 239], "eswar": [114, 191, 239], "damaraju": [114, 191, 239], "gruner": [114, 191, 239], "judith": [114, 191, 239], "segal": [114, 191, 239], "roger": [114, 191, 201, 202, 203, 204, 205, 239, 280], "silva": [114, 191, 239], "havlicek": [114, 191, 239], "sriniva": [114, 191, 239], "rachakonda": [114, 191, 239], "jill": [114, 188, 191, 196, 206, 239, 242, 268], "fri": [114, 191, 239], "ravi": [114, 191, 239], "kalyanam": [114, 191, 239], "andrew": [114, 157, 187, 191, 195, 208, 236, 239, 241, 261], "arvind": [114, 191, 239], "caprihan": [114, 191, 239], "eichel": [114, 191, 239], "adelsheim": [114, 191, 239], "angela": [114, 191, 222, 239, 249], "bryan": [114, 191, 239], "juan": [114, 191, 239], "bustillo": [114, 191, 239], "sarah": [114, 191, 239], "feldstein": [114, 191, 239], "ew": [114, 191, 239], "francesca": [114, 191, 239], "filbei": [114, 191, 239], "corei": [114, 191, 239], "ford": [114, 191, 239], "kent": [114, 191, 239], "hutchison": [114, 191, 239], "rex": [114, 191, 239], "jung": [114, 191, 239], "kiehl": [114, 191, 239], "piyadasa": [114, 191, 239], "kodituwakku": [114, 191, 239], "yuko": [114, 191, 239], "komesu": [114, 191, 239], "mayer": [114, 191, 239], "godfrei": [114, 191, 239], "pearlson": [114, 191, 239], "phillip": [114, 177, 191, 239], "sadek": [114, 191, 239], "ursina": [114, 191, 239], "teuscher": [114, 191, 239], "vinc": [114, 191, 239], "fnsy": [114, 191, 239], "00002": [114, 191, 239], "katrin": 114, "amunt": [114, 209], "hartmut": 114, "mohlberg": 114, "sebastian": 114, "bludau": 114, "zill": 114, "julich": [114, 209], "cytoarchitectur": 114, "6506": 114, "992": 114, "august": [114, 133, 140, 152, 155], "2020": [114, 144, 145, 146, 155, 198, 221, 243, 256], "abb4588": 114, "visit": [114, 156, 177, 192, 206], "2024": [114, 127, 155, 156, 177, 192, 206], "luca": [114, 168, 192], "baldassarr": [114, 168, 192], "janaina": [114, 168, 177, 192], "mourao": [114, 168, 192], "miranda": [114, 168, 177, 192], "massimiliano": [114, 168, 192], "pontil": [114, 168, 192], "civet": [114, 192], "fulli": [114, 169, 172, 192, 481], "autom": [114, 117, 178, 189, 192, 206, 215, 225, 238, 251, 271, 273], "comprehens": [114, 170, 177, 192, 194, 266, 290], "proceed": [114, 167, 171, 177, 188, 192, 222, 249, 268, 296, 366], "12th": [114, 192], "annual": [114, 188, 192, 268], "meet": [114, 152, 155, 188, 192, 268, 481], "bic": [114, 192, 208, 261, 314], "ca": [114, 192, 208, 261], "yaddab": [114, 192], "yasser": [114, 192], "hbm2006": [114, 192], "poster": [114, 192], "workshop": [114, 168, 192, 240], "www0": [114, 168], "ac": [114, 168, 206, 208, 209, 222, 223, 224, 249, 261, 278, 279, 286], "staff": [114, 168], "neurosparse_prni": [114, 168], "prni": [114, 168, 192, 240], "yashar": [114, 365, 366, 462], "behzadi": [114, 348, 365, 366, 462], "khale": [114, 365, 366, 462], "restom": [114, 365, 366, 462], "joi": [114, 365, 366, 462], "liau": [114, 365, 366, 462], "liu": [114, 192, 220, 226, 248, 252, 365, 366, 462], "perfus": [114, 365, 366, 462], "s1053811907003837": [114, 365, 366, 462], "mine": [114, 177, 192, 240], "hierarchi": [114, 192, 240], "pedro": [114, 192, 240], "rosa": [114, 192, 240], "neto": [114, 192, 240], "lyttelton": [114, 192, 240], "habib": [114, 192, 240], "benali": [114, 192, 240], "alan": [114, 192, 208, 240, 261, 286], "bootstrap": [114, 240], "1139": [114, 192, 240], "s1053811910002697": [114, 192, 240], "lorrain": [114, 167], "tyler": [114, 167], "semant": [114, 148, 150, 155, 167], "perirhin": [114, 167], "4766": [114, 167], "4775": [114, 167], "jneurosci": [114, 167], "1523": [114, 137, 155, 167], "2828": [114, 167], "loui": [114, 192, 208, 261, 286], "collin": [114, 189, 192, 208, 238, 261, 286], "anim": [114, 192, 208, 261], "nonlinear": [114, 192, 208, 261, 286], "registr": [114, 157, 172, 192, 208, 358, 480], "artifici": [114, 192], "1271": [114, 192], "1294": [114, 192], "1997": [114, 143, 155, 192, 225, 251], "zijdenbo": [114, 189, 208, 261], "wim": [114, 208, 261], "baar": [114, 208, 261], "insect": [114, 208, 261], "attila": [114, 208, 261], "kuba": [114, 208, 261], "\u0161": [114, 208, 261], "\u00e1": [114, 208, 261], "amal": [114, 208, 261], "todd": [114, 167, 206, 208, 261], "pokropek": [114, 208, 261], "editor": [114, 156, 208, 228, 261], "springer": [114, 156, 208, 214, 228, 246, 261], "kollokian": [114, 189], "sled": [114, 189], "kabani": [114, 189], "holm": [114, 189, 220, 248, 342, 461], "realist": [114, 189, 257, 436, 438, 439, 445], "digit": [114, 189], "phantom": [114, 189], "712135": [114, 189], "holtzheim": [114, 195, 241], "iii": [114, 195, 241], "xiaop": [114, 195, 241], "hu": [114, 195, 241], "helen": [114, 195, 241], "mayberg": [114, 195, 241], "1914": [114, 195, 241], "1928": [114, 195, 241], "1002": [114, 195, 201, 202, 203, 204, 205, 225, 241, 251, 280, 342, 461], "hbm": [114, 195, 241, 342, 461], "21333": [114, 195, 241], "antonia": [114, 198, 243], "machlouzarid": [114, 198, 243], "shalit": [114, 198, 243], "krzysztof": [114, 198, 215, 243, 271, 273], "117126": [114, 198, 243], "02904869": [114, 198, 243], "davidson": [114, 316, 317], "mackinnon": [114, 316, 317], "econometr": [114, 311, 315, 316, 317], "theori": [114, 175, 212, 269, 316, 317], "univ": [114, 316, 317], "ny": [114, 316, 317], "isbn": [114, 311, 315, 316, 317], "978": [114, 316, 317], "512372": [114, 316, 317], "gso": [114, 316, 317], "gbv": [114, 316, 317], "cmd": [114, 316, 317], "srcha": [114, 316, 317], "srt": [114, 316, 317], "yop": [114, 316, 317], "ikt": [114, 316, 317], "trm": [114, 316, 317], "ppn": [114, 316, 317], "393847152": [114, 316, 317], "sourceid": [114, 316, 317], "fbw_bibsonomi": [114, 316, 317], "desikan": [114, 206], "gonn": [114, 206], "quinn": [114, 206], "bradford": [114, 206], "dickerson": [114, 206], "deborah": [114, 206], "blacker": [114, 206], "randi": [114, 192, 206, 217, 220, 226, 248, 252, 275], "buckner": [114, 192, 206, 217, 220, 226, 248, 252, 275], "maguir": [114, 206], "hyman": [114, 206], "subdivid": [114, 206, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "gyral": [114, 196, 206], "968": [114, 206], "supplement": [114, 196, 208, 242, 261, 286], "s151": [114, 196, 242], "s1053": [114, 196, 208, 242, 261, 286], "8119": [114, 196, 208, 242, 261, 286], "71561": [114, 196, 242], "graphnet": [114, 168], "june": [114, 133, 136, 139, 148, 155, 168, 177], "2015": [114, 117, 118, 119, 120, 121, 122, 128, 129, 155, 168, 188, 194, 214, 215, 229, 232, 246, 266, 268, 271, 273, 365, 366], "01147731": [114, 168], "\u00fc": [114, 168], "bingen": [114, 168], "00991743": [114, 168], "dosenbach": [114, 131, 155, 184, 221, 236, 254, 256], "duchi": [114, 169], "gould": [114, 169], "daphn": [114, 169], "koller": [114, 169], "subgradi": [114, 169], "1206": [114, 169], "3249": [114, 169], "joset": [114, 167], "etzel": [114, 167], "jeffrei": [114, 167, 187, 236], "zack": [114, 167], "braver": [114, 167], "promis": [114, 167], "pitfal": [114, 162, 167], "s1053811913002917": [114, 167], "filippini": [114, 188, 222, 249, 268], "macintosh": [114, 188, 268], "morgan": [114, 188, 268], "hough": [114, 188, 268], "gui": [114, 188, 268], "goodwin": [114, 188, 268], "giovanni": [114, 188, 268], "frisoni": [114, 188, 268], "beckmann": [114, 156, 188, 222, 249, 268, 365, 366], "mackai": [114, 188, 222, 249, 268], "carrier": [114, 188, 268], "apo": [114, 188, 268], "\u03b54": [114, 188, 268], "allel": [114, 188, 268], "academi": [114, 167, 177, 188, 192, 222, 249, 268, 296, 366], "7209": [114, 188, 268], "7214": [114, 188, 268], "pna": [114, 167, 177, 188, 192, 222, 249, 268, 366], "1073": [114, 167, 177, 188, 192, 222, 249, 268, 366], "0811879106": [114, 188, 268], "tootel": [114, 201, 202, 203, 204, 205, 280], "intersubject": [114, 201, 202, 203, 204, 205, 280], "28sici": [114, 201, 202, 203, 204, 205, 225, 251, 280], "291097": [114, 201, 202, 203, 204, 205, 225, 251, 280], "0193": [114, 201, 202, 203, 204, 205, 225, 251, 280], "281999": [114, 201, 202, 203, 204, 205, 280], "3a4": [114, 201, 202, 203, 204, 205, 225, 251, 280], "3c272": [114, 201, 202, 203, 204, 205, 280], "3aaid": [114, 201, 202, 203, 204, 205, 225, 251, 280], "hbm10": [114, 201, 202, 203, 204, 205, 280], "3e3": [114, 201, 202, 203, 204, 205, 225, 251, 280], "3b2": [114, 201, 202, 203, 204, 205, 225, 251, 280], "sici": [114, 201, 202, 203, 204, 205, 225, 251, 280], "1097": [114, 201, 202, 203, 204, 205, 225, 251, 280], "aid": [114, 201, 202, 203, 204, 205, 225, 251, 280], "van": [114, 117, 188, 196, 215, 242, 268, 271, 273, 365, 366], "der": [114, 196, 242], "kouw": [114, 196, 242], "s\u00e9gonn": [114, 196, 242], "salat": [114, 196, 242], "evelina": [114, 196, 242], "busa": [114, 196, 242], "larri": [114, 196, 206, 242], "seidman": [114, 196, 206, 242], "goldstein": [114, 196, 206, 242], "kennedi": [114, 196, 206, 242], "vern": [114, 196, 206, 242], "cavi": [114, 196, 206, 242], "niko": [114, 196, 206, 242], "makri": [114, 196, 206, 242], "rosen": [114, 196, 242], "bhg087": [114, 196, 242], "1193353": [114, 196, 242], "boyd": 114, "edinburgh": 114, "fletcher": [114, 187, 236], "sarang": 114, "joshi": 114, "riemannian": 114, "diffus": [114, 162, 175], "tensor": 114, "s0165168406001691": 114, "sigpro": 114, "2005": [114, 206, 366], "vladimir": [114, 192, 208, 261, 286], "fonov": [114, 192, 208, 261, 286], "botteron": [114, 192, 208, 261, 286], "almli": [114, 192, 208, 261, 286], "mckinstri": [114, 192, 208, 261, 286], "unbias": [114, 162, 192, 208, 261, 286], "pediatr": [114, 192, 206, 208, 261, 286], "s1053811910010062": [114, 192, 208, 261, 286], "rc": [114, 208, 261, 286], "cr": [114, 208, 261, 286], "dl": [114, 208, 261, 286], "birth": [114, 208, 261, 286], "adulthood": [114, 208, 261, 286], "s102": [114, 208, 261, 286], "70884": [114, 208, 261, 286], "fox": [114, 222, 225, 249, 251, 366], "snyder": [114, 192, 365, 366], "justin": [114, 366], "maurizio": [114, 366], "corbetta": [114, 366], "essen": [114, 117, 188, 215, 268, 271, 273, 366], "marcu": [114, 167, 188, 217, 268, 275, 366], "raichl": [114, 366], "9673": [114, 366], "9678": [114, 366], "juli": [114, 122, 155, 156, 366], "0504136102": [114, 366], "frazier": [114, 206], "sufen": [114, 206], "chiu": [114, 206], "jani": [114, 206], "breez": [114, 206], "nichola": [114, 187, 206, 236], "lang": [114, 187, 189, 206, 236, 238], "martha": [114, 206], "herbert": [114, 206], "eileen": [114, 206], "bent": [114, 206], "vamsi": [114, 206], "koneru": [114, 206], "megan": [114, 206], "dieterich": [114, 206], "limbic": [114, 206], "thalam": [114, 206], "bipolar": [114, 206], "disord": [114, 175, 177, 206], "american": [114, 206], "1256": [114, 206, 467], "1265": [114, 206], "freedman": [114, 385], "nonstochast": [114, 385], "busi": [114, 385], "econom": [114, 385], "1983": [114, 385], "tandfonlin": [114, 385], "1080": [114, 385], "07350015": [114, 385], "10509354": [114, 385], "friedman": [114, 156], "hasti": [114, 156], "tibshirani": [114, 156], "lookup": [114, 156], "kxm045": [114, 156], "worslei": [114, 342, 461], "frith": [114, 342, 461], "frackowiak": [114, 342, 461], "1994": [114, 342, 461], "460020402": [114, 342, 461], "federico": [114, 192], "giov": [114, 192], "tommaso": [114, 192], "gili": [114, 192], "vittorio": [114, 192], "iacovella": [114, 192], "emiliano": [114, 192], "macaluso": [114, 192], "bruno": [114, 192], "maraviglia": [114, 192], "suppress": [114, 192], "1058": [114, 192], "1064": [114, 192], "octob": [114, 140, 143, 155, 192], "linkinghub": [114, 156, 192, 206], "elsevi": [114, 156, 192, 206], "s0730725x09001696": [114, 192], "ahern": [114, 206], "liam": [114, 206], "brien": [114, 206], "jr": [114, 206], "faraon": [114, 206], "ming": [114, 206], "tsuang": [114, 206], "hypothalam": [114, 206], "abnorm": [114, 206], "schizophrenia": [114, 135, 155, 175, 206], "genet": [114, 206], "vulner": [114, 149, 155, 206], "biolog": [114, 206], "935": [114, 206], "945": [114, 206], "gabriel": [114, 215, 271, 273], "rivera": [114, 117, 215, 271, 273], "yannick": [114, 118, 155, 162, 164, 194, 215, 266, 271, 273, 294, 295], "schwarz": [114, 215, 271, 273], "satrajit": [114, 215, 271, 273], "ghosh": [114, 117, 215, 271, 273], "camil": [114, 215, 271, 273], "maumet": [114, 117, 215, 271, 273], "vanessa": [114, 215, 271, 273], "sochat": [114, 117, 215, 271, 273], "tal": [114, 117, 182, 215, 271, 273, 375], "yarkoni": [114, 117, 215, 271, 273], "marguli": [114, 117, 215, 271, 273], "neuroinformat": [114, 198, 215, 217, 271, 273], "fninf": [114, 117, 215, 271, 273], "00008": [114, 117, 215, 271, 273], "philadelphia": [114, 168], "00839984": [114, 168], "educ": [114, 223, 268, 275, 311, 315, 442], "fifth": [114, 262, 311, 315], "edit": [114, 148, 155, 170, 178, 311, 315], "066189": [114, 311, 315], "stern": [114, 311, 315], "nyu": [114, 125, 155, 311, 315], "edu": [114, 217, 221, 222, 226, 249, 252, 275, 311, 315], "wgreen": [114, 311, 315], "econometricanalysi": [114, 311, 315], "htm": [114, 311, 315], "logan": [114, 168], "grosenick": [114, 168], "brad": [114, 168], "klingenberg": [114, 168], "kiefer": [114, 168], "katovich": [114, 168], "knutson": [114, 168], "s1053811912012487": [114, 168], "honorio": [114, 169, 229, 232], "tommi": [114, 169, 229, 232], "jaakkola": [114, 169, 229, 232], "backslash": [114, 126, 155, 169], "ell_": [114, 169], "preprint": [114, 169], "1207": [114, 169, 229, 232], "4255": [114, 127, 155, 169, 229, 232], "rena": [114, 143, 155, 159, 164, 175, 176, 294, 295, 447, 454], "schwartz": [114, 117, 118, 155, 162, 164, 194, 266, 294, 295], "scalabl": [114, 164, 294, 295], "s1053811917308182": [114, 164, 294, 295], "koji": [114, 212, 269], "complementari": [114, 212, 269], "neuropsychologia": [114, 212, 269], "s0028393211005070": [114, 212, 269], "thorsten": [114, 167], "kahnt": [114, 167], "grueschow": [114, 167], "speck": [114, 167], "perceptu": [114, 167], "s0896627311002960": [114, 167], "knop": [114, 177], "edward": [114, 177], "hubbard": [114, 177], "recruit": [114, 177], "arithmet": [114, 177], "5934": [114, 177], "1583": [114, 177], "1585": [114, 177], "1171599": [114, 177], "nikolau": [114, 167, 177, 296], "kriegeskort": [114, 167, 177, 296], "rainer": [114, 167, 177, 296], "goebel": [114, 167, 177, 296], "peter": [114, 167, 177, 222, 225, 249, 251, 296], "bandettini": [114, 167, 177, 296], "3863": [114, 167, 177, 296], "3868": [114, 167, 177, 296], "0600244103": [114, 167, 177], "laird": [114, 222, 249], "mickl": [114, 222, 249], "kimberli": [114, 222, 249], "rai": [114, 222, 249], "rees": [114, 222, 249], "mckai": [114, 222, 249], "glahn": [114, 222, 249], "4022": [114, 222, 249], "4037": [114, 222, 249], "1162": [114, 217, 222, 249, 275], "jocn": [114, 217, 222, 249, 275], "_a": [114, 222, 249], "_00077": [114, 222, 249], "1777164": [114, 222, 249], "jocn_a_00077": [114, 222, 249], "lancast": [114, 225, 251], "rainei": [114, 225, 251], "summerlin": [114, 225, 251], "freita": [114, 225, 251], "toga": [114, 225, 251], "mazziotta": [114, 225, 251], "preliminari": [114, 190, 225, 251], "forward": [114, 225, 251], "281997": [114, 225, 251], "3c238": [114, 225, 251], "hbm6": [114, 225, 251], "jack": [114, 163, 225, 251], "woldorff": [114, 225, 251], "lawrenc": [114, 225, 251], "parson": [114, 225, 251], "mario": [114, 225, 251], "liotti": [114, 225, 251], "catarina": [114, 225, 251], "laci": [114, 225, 251], "kochunov": [114, 225, 251], "nickerson": [114, 225, 251], "shawn": [114, 225, 251], "mikiten": [114, 225, 251], "talairach": [114, 137, 155, 174, 184, 236, 251], "28200007": [114, 225, 251], "3a3": [114, 225, 251], "3c120": [114, 225, 251], "hbm30": [114, 225, 251], "200007": [114, 225, 251], "lindquist": [114, 140, 155, 342, 461], "stephan": [114, 342, 461], "geuter": [114, 342, 461], "tor": [114, 117, 215, 271, 273, 342, 461], "wager": [114, 117, 215, 271, 273, 342, 461], "caffo": [114, 342, 461], "modular": [114, 170, 199, 342, 461], "reintroduc": [114, 342, 461], "biorxiv": [114, 342, 461], "407676": [114, 342, 461], "1101": [114, 221, 256, 342, 461], "hesheng": [114, 192, 220, 226, 248, 252], "stufflebeam": [114, 192], "jorg": [114, 192, 220, 226, 248, 252], "sepulcr": [114, 192, 220, 226, 248, 252], "trei": [114, 192], "hedden": [114, 192], "evid": [114, 192], "asymmetri": [114, 192], "20499": [114, 192], "20503": [114, 192], "decemb": [114, 128, 129, 143, 155, 192, 258, 276], "0908073106": [114, 192], "hodg": [114, 206], "april": [114, 124, 127, 132, 135, 141, 142, 151, 155, 188, 206], "s0920996405004998": [114, 206], "schre": [114, 206], "traci": [114, 217, 275], "jami": [114, 217, 275], "parker": [114, 217, 275], "csernanski": [114, 217, 275], "morri": [114, 217, 275], "nondement": [114, 217, 275], "dement": [114, 217, 275], "1498": [114, 217, 275, 467], "1507": [114, 217, 275], "1756878": [114, 217, 275], "dougla": [114, 316, 317], "montgomeri": [114, 316, 317], "peck": [114, 316, 317], "geoffrei": [114, 316, 317], "vine": [114, 316, 317], "ed": [114, 157, 316, 317], "son": [114, 316, 317], "0471754951": [114, 316, 317], "mour\u00e3o": [114, 177], "leticia": [114, 177], "oliveira": [114, 177], "cecil": [114, 177], "ladouceur": [114, 177], "marquand": [114, 177], "brammer": [114, 177], "bori": [114, 177], "birmah": [114, 177], "axelson": [114, 177], "mari": [114, 177], "healthi": [114, 175, 177, 187, 191, 192, 206, 222, 240], "adolesc": [114, 177], "mood": [114, 177], "plo": [114, 177], "ONE": [114, 177], "e29482": [114, 177], "dx": [114, 177], "1371": [114, 177], "pone": [114, 177], "0029482": [114, 177], "naselari": [114, 163], "kendrick": [114, 163], "kai": [114, 163], "shinji": [114, 163], "nishimoto": [114, 163], "gallant": [114, 163], "20691790": [114, 163], "pmid": [114, 163, 220, 226, 248, 252], "jare": [114, 187, 236], "nielsen": [114, 187, 236], "brandon": [114, 187, 236], "zielinski": [114, 187, 236], "erin": [114, 187, 236], "bigler": [114, 187, 236], "janet": [114, 187, 236], "lainhart": [114, 187, 236], "multisit": [114, 187, 236], "autism": [114, 187, 236], "fnhum": [114, 187, 236], "00599": [114, 187, 236], "reilli": [114, 188, 268], "valentina": [114, 188, 268], "tomassini": [114, 188, 268], "narend": [114, 188, 268], "ramnani": [114, 188, 268], "heidi": [114, 188, 268], "johansen": [114, 188, 268], "berg": [114, 188, 268], "zone": [114, 188, 268], "953": [114, 188, 268], "965": [114, 188, 268], "bhp157": [114, 188, 268], "17303287": [114, 188, 268], "wolfgang": [114, 218, 247], "amanda": [114, 218, 247], "nili": [114, 218, 247], "tyszka": [114, 218, 247], "vivo": [114, 218, 247], "nuclei": [114, 218, 247], "scientif": [114, 147, 150, 155, 170, 177, 187, 194, 209, 217, 218, 247, 258, 266, 276, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 425, 427, 428, 430, 434, 435, 436, 438, 439], "180063": [114, 218, 247], "apr": [114, 218, 247], "1038": [114, 218, 247, 258, 276], "sdata": [114, 218, 247, 258, 276], "congdon": [114, 258, 276], "triplett": [114, 258, 276], "karlsgodt": [114, 258, 276], "sabb": [114, 258, 276], "freimer": [114, 258, 276], "cannon": [114, 258, 276], "bilder": [114, 258, 276], "phenom": [114, 258, 276], "160110": [114, 258, 276], "mitig": [114, 421], "s1053811916303871": [114, 421], "2142": [114, 192, 365, 366], "2154": [114, 192, 365, 366, 467], "22019881": [114, 192, 365, 366], "pubmedcentr": [114, 192, 365, 366], "articlerend": [114, 192, 365, 366], "fcgi": [114, 192, 365, 366], "artid": [114, 192, 365, 366], "pmc3254728": [114, 192, 365, 366], "anish": [114, 365], "mitra": [114, 365], "s1053811913009117": [114, 365], "raimon": [114, 365, 366], "pruim": [114, 365, 366], "daan": [114, 365, 366], "rooij": [114, 365, 366], "alberto": [114, 365, 366], "llera": [114, 365, 366], "buitelaar": [114, 365, 366], "aroma": [114, 157, 365, 366], "hilari": [114, 197, 257], "richardson": [114, 197, 257], "grace": [114, 197, 257], "lisandrelli": [114, 197, 257], "alexa": [114, 197, 257], "riobueno": [114, 197, 257], "naylor": [114, 197, 257], "sax": [114, 197, 257], "social": [114, 197, 257], "twelv": [114, 197, 257], "schaefer": [114, 184, 248], "ru": [114, 220, 248], "kong": [114, 220, 248], "gordon": [114, 220, 248], "nian": [114, 220, 248], "zuo": [114, 220, 248], "avram": [114, 220, 248], "yeo": [114, 184, 220, 248, 252, 417], "3095": [114, 220, 248, 467], "3114": [114, 220, 248], "bhx179": [114, 220, 248], "25696344": [114, 220, 248], "_schaeferfullsupp": [114, 220, 248], "seitzman": [114, 143, 155, 184, 256], "caterina": [114, 221, 256], "gratton": [114, 221, 256], "marek": [114, 221, 256], "raut": [114, 221, 256], "116290": [114, 221, 256], "s105381191930881x": [114, 221, 256], "450452": [114, 221, 256], "zarrar": 114, "shehzad": 114, "gee": 114, "kristin": 114, "gotim": 114, "lucina": 114, "q": [114, 156, 172, 178, 229, 320, 324, 337, 340, 459], "uddin": 114, "sang": 114, "han": 114, "lee": 114, "ami": 114, "krain": 114, "xavier": 114, "unconstrain": [114, 222], "2209": 114, "2229": 114, "bhn256": 114, "17300841": 114, "sm": [114, 188, 268], "glasser": [114, 188, 268], "salimi": [114, 156, 188, 268], "khorshidi": [114, 156, 188, 268], "duff": [114, 188, 268], "dc": [114, 188, 268], "mw": [114, 188, 268], "woolrich": [114, 156, 188, 268], "jenkinson": [114, 188, 268], "cf": [114, 182, 188, 268], "rfmri": [114, 188, 268], "ohbm": [114, 139, 155, 188, 268], "address": [114, 172, 174, 175, 178, 339, 385], "localis": [114, 175, 339, 385], "vidaurr": [114, 188, 268], "ej": [114, 188, 268], "behren": [114, 188, 268], "kamil": [114, 188, 268], "ugurbil": [114, 188, 268], "karla": [114, 156, 188, 222, 249, 268], "miller": [114, 156, 188, 222, 249, 268], "demograph": [114, 188, 268], "1565": [114, 188, 268], "1567": [114, 188, 268], "watkin": [114, 222, 249], "toro": [114, 222, 249], "textquoteright": [114, 222, 249], "architectur": [114, 159, 222, 249], "13040": [114, 222, 249], "13045": [114, 222, 249], "0905267106": [114, 222, 249], "gholamreza": [114, 156], "ramsei": [114, 156], "875": [114, 128, 155, 156], "891": [114, 156], "januari": [114, 123, 144, 150, 155, 156], "s1053811910011602": [114, 156], "mccarthi": [114, 188, 268], "emma": [114, 188, 268], "clair": [114, 188, 268], "xu": [114, 188, 268], "horton": [114, 188, 268], "eugen": [114, 188, 268], "\u00e2": [114, 188, 268], "mil": [114, 188, 268], "u\u011furbil": [114, 188, 268], "humanconnectom": [114, 188, 268], "storag": [114, 182, 188, 268, 272, 274], "media": [114, 188, 268], "s500": [114, 188, 268], "hcp500_megatrawl_april2015": [114, 188, 268], "fenna": [114, 220, 226, 248, 252], "krienen": [114, 220, 226, 248, 252], "mert": [114, 220, 226, 248, 252], "sabuncu": [114, 220, 226, 248, 252], "danial": [114, 220, 226, 248, 252], "lashkari": [114, 220, 226, 248, 252], "marisa": [114, 220, 226, 248, 252], "hollinshead": [114, 220, 226, 248, 252], "roffman": [114, 220, 226, 248, 252], "jordan": [114, 220, 226, 248, 252], "smoller": [114, 220, 226, 248, 252], "lilla": [114, 220, 226, 248, 252], "z\u00f6llei": [114, 220, 226, 248, 252], "polimeni": [114, 220, 226, 248, 252], "neurophysiologi": [114, 220, 226, 248, 252], "1125": [114, 220, 226, 248, 252], "1165": [114, 220, 226, 248, 252], "21653723": [114, 220, 226, 248, 252], "1152": [114, 220, 226, 248, 252], "jn": [114, 220, 226, 248, 252], "00338": [114, 220, 226, 248, 252], "tzourio": [114, 189, 238], "mazoy": [114, 189, 238], "landeau": [114, 189, 238], "papathanassi": [114, 189, 238], "crivello": [114, 189, 238], "etard": [114, 189, 238], "delcroix": [114, 189, 238], "joliot": [114, 189, 238], "macroscop": [114, 189, 238], "2002": [114, 189, 238], "s1053811901909784": [114, 189, 238], "0978": [114, 189, 238], "flore": [114, 156, 228], "baronnet": [114, 156, 228], "fillard": [114, 156, 228], "stroke": [114, 156, 228], "patient": [114, 156, 175, 228], "tianzi": [114, 156, 228], "jiang": [114, 156, 228], "nassir": [114, 156, 228], "navab": [114, 156, 228], "josien": [114, 156, 228], "pluim": [114, 156, 228], "viergev": [114, 156, 228], "assist": [114, 156, 228], "intervent": [114, 156, 228], "miccai": [114, 156, 228], "lectur": [114, 156, 177, 228], "cn2h9c": [114, 156, 228], "spontan": [114, 214, 246], "1008": [114, 156, 229], "5071": [114, 156, 229], "bio": [114, 156, 229], "recoveri": [114, 299], "6447": 114, "engemann": [114, 162], "caveat": [114, 162], "1606": [114, 162], "05201": [114, 162], "merlin": [114, 299], "keller": [114, 299], "nano": [114, 299], "macro": [114, 299], "1177": [114, 299], "1180": [114, 299], "5490204": [114, 299], "synthesi": [114, 117, 169, 215, 271, 273], "zaleski": [114, 157], "bullmor": [114, 157], "2096": [114, 157], "2106": [114, 157], "adelstein": 114, "donald": 114, "klein": 114, "retest": 114, "2163": [114, 467], "2177": [114, 143, 155, 467], "s1053811909011525": 114, "di": 114, "martino": 114, "1432": 114, "1445": 114, "s1053811909010167": 114, "antonio": [114, 194, 266], "frouin": [114, 194, 266], "brainom": [114, 140, 155, 184, 266], "s1053811915008745": [114, 194, 266], "abstract": [115, 368], "beaten": 115, "mask_face_littl": [116, 180, 207, 260], "mask_house_littl": [116, 180, 207, 260], "comfort": [116, 170], "plenti": 116, "hesit": [116, 170], "rarr": [116, 182], "tube": 116, "clever": [116, 169], "resp": 116, "brighter": 116, "scratch": 116, "elementari": 116, "introduc": [117, 133, 143, 152, 155, 162, 163, 167, 170, 182, 228, 229, 236, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "upload": 117, "modal": [117, 162, 170, 224, 279, 362], "went": 117, "webpag": 117, "click": [117, 172, 182, 266, 480], "brainpedia": 117, "1952": [117, 143, 155], "brainpedia_subset": 117, "32015": 117, "32016": 117, "criteria": [117, 170, 175, 221, 236, 271], "collection_term": [117, 271], "collection_metadata": [117, 271], "everi": [117, 156, 157, 161, 162, 163, 167, 169, 170, 172, 178, 182, 230, 244, 245, 271, 370, 373, 420, 425, 428, 433, 434, 435, 437, 452, 453, 459, 481], "image_term": [117, 271], "snippet": 117, "wait": [117, 169], "is_valid": [117, 143, 155], "treat": 117, "cbf": 117, "cbv": 117, "express": [117, 123, 128, 155, 175, 180, 271, 297, 298, 322, 324, 327, 352, 433], "ignorecas": 117, "special": [117, 124, 143, 155, 170], "isnul": [117, 271], "notnul": [117, 271], "notequ": [117, 271], "greaterorequ": [117, 271], "greaterthan": [117, 271], "lessorequ": [117, 271], "lessthan": [117, 271], "notin": [117, 271], "notcontain": [117, 271], "resultfilt": [117, 271], "OR": 117, "xor": 117, "NOT": 117, "conveni": [117, 181, 182, 197, 257], "collection_filt": [117, 271], "callabl": [117, 150, 155, 232, 271, 292, 293, 294, 295, 296], "image_filt": [117, 271], "anyth": [117, 169, 170], "lambda": 117, "rewritten": 117, "suppos": [117, 169, 178, 180, 182, 316, 317], "weird": 117, "small_meta_imag": 117, "collections_meta": [117, 215, 271, 272, 273, 274], "platform": [117, 136, 155, 178, 215], "unless": [117, 169, 170, 276, 339, 385, 430, 461], "vectorize_word": [117, 271, 273], "kj": 117, "ss": 117, "vv": 117, "te": 117, "ra": [117, 356], "front": [117, 311, 314], "neuroinform": 117, "contributor": [118, 119, 121, 122, 170, 178], "git": [118, 119, 121, 122, 128, 130, 133, 155, 170, 178], "shortlog": [118, 119, 121, 122, 128, 130, 133, 155], "march": [120, 138, 147, 155, 296], "bugfix": [120, 121, 129, 130, 133, 151, 155, 170], "minor": [121, 127, 136, 138, 155, 162], "rewamp": [121, 155], "brok": [121, 155], "maint": [122, 123, 124, 125, 126, 127, 128, 130, 133, 134, 135, 137, 140, 143, 145, 148, 149, 150, 151, 152, 155, 170], "obei": [122, 155], "debian": [122, 155], "rule": [122, 155, 162, 163, 170, 188, 292, 293, 294, 295], "2023": [123, 124, 125, 155], "bump": [123, 126, 140, 143, 148, 149, 150, 155, 163, 165, 178], "v1": [123, 126, 140, 148, 150, 155], "v3": [123, 155], "3237": [123, 155], "3196": [123, 152, 155], "3181": [123, 152, 155], "2715": [123, 152, 155], "doc": [123, 124, 125, 126, 127, 128, 133, 135, 136, 140, 143, 145, 146, 149, 150, 151, 152, 155, 170], "theme": [123, 152, 155], "furo": [123, 152, 155], "3125": [123, 152, 155, 467], "3374": [123, 155], "3385": [123, 155], "3430": [123, 155], "tick": [123, 126, 155, 170, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 425, 427, 428, 430, 434, 435, 436, 438, 439, 441, 443, 445], "3105": [123, 155, 170], "test_cluster_level_parameters_smok": [123, 155], "3436": [123, 155], "compute_multi_epi_mask": [123, 155, 181, 371], "3412": [123, 155], "3403": [123, 155], "valueerror": [123, 126, 155, 352, 356, 369, 370, 372, 373, 465], "3390": [123, 155], "creation": [123, 143, 155, 299, 300, 324, 337, 459], "3453": [123, 155, 467], "imput": [123, 155], "cubic": [123, 155, 182, 232, 461], "spline": [123, 155, 427, 428, 434, 435, 442, 461], "3452": [123, 155], "3439": [123, 155], "friendli": [123, 155, 481], "rework": [123, 130, 136, 143, 149, 155], "3380": [123, 155], "contribut": [123, 137, 140, 141, 142, 143, 144, 145, 149, 150, 152, 155, 163, 172, 178, 218, 481], "changelog": [123, 135, 178], "whatsnew": [123, 155], "3446": [123, 155], "deploi": [123, 155], "3426": [123, 155], "privat": [123, 125, 126, 152, 155], "weighted_connectivity_graph": [123, 155], "nearest_neighbor_group": [123, 155], "renam": [123, 126, 136, 140, 155, 178], "3347": [123, 155], "alias": [123, 155], "builtin": [123, 155], "3422": [123, 155], "compute_multi_gray_matter_mask": [123, 155], "3427": [123, 155], "3429": [123, 155], "3440": [123, 155, 467], "3433": [123, 155], "3424": [123, 155], "docstr": [123, 124, 141, 146, 149, 152, 155, 170, 178, 314, 316, 317], "nistat": [123, 129, 146, 155], "migrat": [123, 155], "nistats_migr": [123, 155], "rst": [123, 155, 170, 178], "3449": [123, 155], "_safe_cach": [123, 155], "deem": [123, 155], "outdat": [123, 134, 155], "anymor": [123, 152, 155], "3375": [123, 155], "3498": [124, 155], "3444": [124, 155], "predefin": [124, 155], "3259": [124, 155, 467], "3531": [124, 155], "3600": [124, 155], "3563": [124, 155], "refactor": [124, 125, 126, 134, 148, 150, 152, 155, 178], "create_fake_bids_dataset": [124, 155], "3525": [124, 155], "3362": [124, 155], "3605": [124, 155], "standardize_sign": [124, 126, 155], "3474": [124, 155], "confus": [124, 155, 163, 360], "3483": [124, 155], "3173": [124, 155], "sub_label": [124, 155, 327, 362], "3351": [124, 155], "ridgeclassifiercv": [124, 155, 292, 293, 294, 295], "3626": [124, 155], "3631": [124, 155], "3414": [124, 155], "fetch_atlas_craddock_2012": [124, 125, 155, 157, 195], "3353": [124, 155], "helper": [124, 128, 135, 136, 155, 170, 184, 271], "img_to_signals_label": [124, 126, 140, 143, 155, 453, 455], "signals_to_img_label": [124, 155, 452, 456], "img_to_signals_map": [124, 155, 452, 456], "signals_to_img_map": [124, 155, 453, 455], "3523": [124, 155], "3557": [124, 155, 467], "bibtex": [124, 152, 155], "3558": [124, 155], "3548": [124, 125, 155], "pep8": [124, 125, 126, 155, 170, 178], "3549": [124, 155], "3550": [124, 155], "3551": [124, 155], "3552": [124, 155], "3553": [124, 155], "3554": [124, 155], "3555": [124, 155], "setuptool": [124, 155], "pyproject": [124, 155, 170, 178, 481], "toml": [124, 155, 170, 178, 481], "hatchl": [124, 155, 178], "met": [124, 155], "3635": [124, 155], "3465": [124, 155], "restor": [124, 155], "spatialimag": [124, 155, 180, 345], "3462": [124, 155], "3478": [124, 155], "3477": [124, 155], "3445": [124, 155], "3485": [124, 155], "3491": [124, 155], "3484": [124, 155], "lassocv": [125, 155, 292, 293, 294, 295], "3781": [125, 155], "3873": [125, 155], "3203": [125, 155], "facilit": [125, 155, 177, 178, 182, 198], "downstream": [125, 155], "3856": [125, 155], "logisticregressioncv": [125, 155, 292, 293, 294, 295], "3736": [125, 155], "3172": [125, 155], "3987": [125, 155], "transform_img": [125, 155, 369, 370, 371], "3971": [125, 155], "3644": [125, 155, 467], "prevent": [125, 155, 357, 358, 377, 378, 379, 381, 382], "gifti": [125, 155, 201, 202, 203, 204, 205, 280, 281, 301, 302, 303], "3819": [125, 155], "3879": [125, 155], "entiti": [125, 155], "3742": [125, 155], "throw": [125, 127, 155, 375], "3811": [125, 155], "fitter": [125, 155], "had": [125, 139, 155], "grid_param": [125, 155], "3733": [125, 155, 467], "3794": [125, 155], "relax": [125, 155, 208], "3816": [125, 155], "3723": [125, 155], "3897": [125, 155], "plotli": [125, 126, 127, 150, 155, 399, 436, 438, 439, 480, 481], "3945": [125, 155], "clearli": [125, 150, 155, 170], "3973": [125, 155], "_plot_surf_matplotlib": [125, 155], "3860": [125, 155], "3942": [125, 155], "3797": [125, 155], "2804": [125, 155], "3857": [125, 155], "3597": [125, 155], "3774": [125, 155], "test_sign": [125, 155], "4208": [125, 155], "3927": [125, 155], "3994": [125, 155], "check_ev": [125, 155], "3943": [125, 155], "meanwhil": [125, 126, 155], "3722": [125, 155], "3732": [125, 155, 467], "_compute_facecolors_matplotlib": [125, 155], "html_surfac": [125, 155], "_get_vertexcolor": [125, 155], "gh": [125, 155, 170], "3855": [125, 155], "doctest": [125, 155], "3681": [125, 155], "3753": [125, 155], "shorten": [125, 152, 155], "3934": [125, 155], "old": [125, 143, 149, 150, 155], "cobr": [125, 131, 135, 155], "3743": [125, 155, 467], "isort": [125, 155, 170], "complianc": [125, 155, 170], "codebas": [125, 155, 170], "3538": [125, 155], "3566": [125, 155], "3556": [125, 155], "3601": [125, 155], "3609": [125, 155], "3646": [125, 155], "3650": [125, 155], "3647": [125, 155], "3640": [125, 155], "3615": [125, 155], "3614": [125, 155], "3648": [125, 155], "3651": [125, 155], "3836": [125, 155], "3833": [125, 155], "3827": [125, 155], "3810": [125, 155], "3803": [125, 155], "3802": [125, 155], "3795": [125, 155], "3790": [125, 155], "3783": [125, 155], "3777": [125, 155], "3838": [125, 155], "one_mesh_info": [125, 155], "full_brain_info": [125, 155], "_one_mesh_info": [125, 155], "_full_brain_info": [125, 155], "3847": [125, 155], "manag": [125, 126, 155, 170, 178, 481], "3854": [125, 155], "BY": [125, 155, 210], "_mix_colormap": [125, 155], "3919": [125, 155], "decor": [125, 149, 155, 170], "3921": [125, 155], "4103": [126, 155, 467], "fewer": [126, 155, 169, 421], "4067": [126, 155], "3102": [126, 155], "3285": [126, 155], "plot_fixed_effect": [126, 155], "plot_fiac_analysi": [126, 155], "3191": [126, 155], "3993": [126, 155], "2833": [126, 155], "temp_file_lifetim": [126, 155, 457], "4180": [126, 155], "4001": [126, 155], "4215": [126, 155], "simpleregressionresult": [126, 152, 155, 324], "accommod": [126, 140, 155], "lack": [126, 155], "4071": [126, 155], "clean__sample_mask": [126, 155], "4051": [126, 155], "4204": [126, 155], "psc": [126, 143, 147, 155, 369, 370, 371, 372, 373, 374, 375, 461], "normalis": [126, 155, 359], "4116": [126, 155], "4188": [126, 155, 467], "4233": [126, 155], "4070": [126, 155], "5d": [126, 155, 182], "3935": [126, 155], "4225": [126, 155], "binarize_img": [126, 149, 155], "4121": [126, 155], "4099": [126, 155], "4122": [126, 155], "4042": [126, 155], "lss": [126, 155], "4141": [126, 155], "aren": [126, 155, 180], "4136": [126, 155], "fetch_abide_pcp": [126, 151, 155, 187], "4159": [126, 155], "cubicsplin": [126, 155], "extrapol": [126, 155, 357, 461], "censor": [126, 152, 155, 461], "4028": [126, 155], "_get_clusters_t": [126, 155], "copy_img": [126, 128, 155], "4166": [126, 155], "write_tmp_img": [126, 155], "write_imgs_to_path": [126, 155], "4094": [126, 155], "concat_niimg": [126, 155], "niimg_convers": [126, 155], "4167": [126, 155], "underscor": [126, 155, 170], "4086": [126, 155], "proximal_oper": [126, 155], "4153": [126, 155], "masked_atla": [126, 155, 452], "return_masked_atla": [126, 155, 452], "3761": [126, 155], "4191": [126, 155], "4131": [126, 155], "fetch_bids_langloc_dataset": [126, 155], "simuilar": [126, 155], "4219": [126, 155], "switch": [126, 135, 142, 155, 170, 178, 427], "tox": [126, 155], "pip": [126, 135, 140, 143, 155, 170, 178, 481], "4029": [126, 155], "4310": [127, 155], "4284": [127, 155], "unus": [127, 155, 306, 307, 369, 370, 371, 372, 373, 374, 375], "4270": [127, 155], "4279": [127, 155], "errant": [127, 155], "4257": [127, 155], "4258": [127, 155], "scrollabl": [127, 155], "4308": [127, 155], "region_names_": [127, 155, 372], "determinist": [127, 151, 155, 175, 238, 240, 242, 244, 245, 247, 248, 250, 251, 252, 446], "consecut": [127, 155, 238, 240, 242, 248, 251, 252, 446], "region_id": [127, 155], "4274": [127, 155], "serial": [127, 155, 169, 210], "4325": [127, 155], "4297": [127, 155], "4285": [127, 155], "4304": [127, 155], "properli": [127, 155, 167, 182, 422, 427], "4269": [127, 155], "miscellan": [127, 155], "4266": [127, 155], "typo": [127, 145, 155], "glossari": [127, 151, 155], "4343": [127, 155], "4318": [127, 155], "4320": [127, 155], "4298": [127, 155], "advertis": [127, 155], "4334": [127, 155], "4337": [127, 155], "4232": [127, 155], "4267": [127, 155], "4295": [127, 155], "css": [127, 155, 236], "lint": [127, 155, 170, 178], "4302": [127, 155], "sym_to_vec": [128, 133, 136, 148, 155], "modernis": [128, 155], "784": [128, 155], "indexerror": [128, 150, 155], "fast_abs_percentil": [128, 155], "n_cut": [128, 155, 416], "find_cut_slic": [128, 135, 155], "group_sparse_covari": [128, 155, 169, 230], "822": [128, 155], "targett": [129, 155], "renew": [130, 155], "flake8": [130, 152, 155, 170], "pull": [130, 152, 155, 175, 177], "symmetric_split": [130, 155, 244, 245], "numpy_convers": [130, 155], "csv_to_arrai": [130, 155], "mac": [130, 155], "refresh": [130, 155], "sparsifi": [130, 155], "circleci": [130, 135, 155], "brainhack": [131, 136, 155], "fetch_cobr": [131, 135, 146, 150, 155], "basc": [131, 155, 184, 240], "expand": [132, 155, 175, 180, 352, 446, 448], "homedir": [132, 155], "uniformli": [132, 155, 163, 430, 436, 438, 439, 443, 445], "aal": [132, 155, 184, 238], "fetch_atlas_a": [132, 151, 155, 189], "wrong": [133, 151, 155, 172], "ivan": [133, 140, 155], "gonzalez": [133, 140, 155], "resolv": [134, 144, 155], "1238": [134, 155], "get_affin": [134, 155, 180, 344], "checkout": [135, 155, 170, 178], "latest": [135, 155, 170, 178, 366], "_get_mask_volum": [135, 155], "_adjust_screening_percentil": [135, 155], "uncompress": [135, 139, 155], "tar": [135, 155, 178], "set_axis_bgcolor": [135, 155], "fast_svd": [135, 155], "lapack": [135, 155, 169], "svd": [135, 155, 300, 348, 447, 462], "heurist": [135, 155, 168, 169, 230, 379, 420, 433, 434, 435, 442, 480], "cov_to_corr": [135, 155], "prec_to_parti": [135, 155], "_safe_get_data": [135, 155], "ensure_finit": [135, 155, 342, 376, 379, 461], "qualit": [135, 155], "fetch_surf_fsaverage5": [135, 140, 155], "coveral": [135, 155], "codecov": [135, 155], "sym_matrix_to_vec": [136, 155, 235], "largest_connected_compon": [136, 155], "workaround": [136, 155], "vec_to_sym_matrix": [136, 155], "largest_connected_component_img": [136, 155], "largest": [136, 155, 169, 351, 377, 378, 379, 380, 381, 382, 383, 419], "plot_connectivity_measur": [136, 155], "tighter": [136, 155, 169], "resampling_interpol": [137, 155, 427, 428, 434, 435, 442], "joe": [137, 155], "necu": [137, 155], "fetch_atlas_talairach": [137, 155, 225], "cautious": [137, 155], "backward": [137, 150, 155, 170, 227, 244, 245, 457], "incompat": [137, 155, 324], "anat_img": [137, 155, 420], "jeff": [137, 155], "chiang": [137, 155], "analu": [137, 140, 155], "madhyastha": [137, 140, 155], "meghana": [137, 140, 155], "sfvnmac": [137, 140, 155], "bedetti": [137, 140, 155], "griffith": [137, 155], "lannuzel": [137, 140, 155], "1536": [138, 155], "1370": [138, 155], "usabl": [138, 155, 167, 169, 190, 270, 296], "nifti2imag": [138, 155], "node_color": [138, 148, 155, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 441], "1595": [138, 155], "confer": [139, 155], "lock": [139, 155], "whitespac": [139, 155], "attributeerror": [139, 155], "httperror": [139, 155], "view_mark": [140, 141, 143, 148, 155, 441, 442, 480], "orthogon": [140, 155, 175, 324, 326, 331, 337, 342, 387, 396, 397, 398, 401, 415, 420, 422, 425, 427, 428, 431, 433, 434, 435, 459, 461], "view_stat_map": [140, 155], "python2": [140, 141, 142, 143, 155], "layout": [140, 155, 296, 387], "navig": [140, 155], "anaconda": [140, 155, 481], "thank": [140, 155, 170, 337, 338, 339], "miykael": [140, 155], "feel": [140, 155, 170], "shout": [140, 155], "pbellec": [140, 155], "great": [140, 155], "awesom": [140, 155], "sportingli": [140, 155], "feedback": [140, 155, 170, 178, 227], "brainsprit": [140, 141, 155, 480], "himanshupathak21061998": [140, 141, 155], "uniti": [140, 155], "channel": [140, 155], "life": [140, 155], "js_plotting_util": [140, 155], "remi": [140, 155], "akshai": [140, 155], "erramuzp": [140, 155], "foucault": [140, 155], "jehan": [140, 155], "nikolaidi": [140, 155], "dillon": [140, 155], "plunkett": [140, 155], "operto": [140, 155], "dtyulman": [140, 155], "0a0": 140, "1705": [140, 155], "grid_search": [140, 155, 292, 293, 294, 295], "menuet": [140, 155], "romuald": [140, 155], "fetch_atlas_schaefer_2018": [141, 143, 155, 220], "fetch_coords_seitzman_2018": [141, 155, 221], "consum": [141, 155, 165, 169, 178, 180, 375], "noteworthi": [141, 155, 163], "node_coord": [141, 143, 155, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 431, 441], "edge_cmap": [141, 143, 155, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 441], "load_niimg": [141, 155], "silent": [141, 150, 155], "book": [141, 155], "signatur": [141, 155, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465], "mgz": [141, 142, 155, 436, 437, 438, 439, 445, 463], "mne": [141, 142, 155], "lowest": [142, 155], "broke": [142, 155], "v2": [143, 148, 155], "viewabl": [143, 155], "vscode": [143, 155], "biap8": [143, 155], "input_output": [143, 155], "2172": [143, 155], "giant": [143, 155], "1336": [143, 155], "1953": [143, 155], "2025": [143, 155, 467], "plot_connectome_strength": [143, 146, 150, 155], "2028": [143, 155], "standard_devi": [143, 155, 369, 372, 452], "2221": [143, 155], "ticklabel": [143, 155], "2057": [143, 155], "2157": [143, 155], "truncat": [143, 155], "2195": [143, 155], "det": [143, 155, 247], "2235": [143, 155, 467], "2255": [143, 155], "2240": [143, 155], "2248": [143, 155], "ndarrai": [143, 155, 228, 229, 230, 231, 232, 233, 234, 235, 236, 248, 250, 254, 256, 257, 268, 269, 292, 293, 294, 295, 297, 298, 299, 300, 306, 307, 311, 314, 315, 316, 317, 320, 324, 337, 339, 342, 344, 347, 348, 354, 355, 357, 359, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 382, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 423, 429, 432, 436, 437, 438, 439, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 465], "2107": [143, 155], "attempt": [143, 155, 327], "2212": [143, 155], "nose": [143, 155], "2231": [143, 155], "2169": [143, 155], "05_advanc": [143, 155], "2063": [143, 155], "2090": [143, 155], "merg": [143, 155, 159, 170, 175, 178, 181, 448], "plot_adhd_spher": [143, 155], "duplic": [143, 155, 193], "review": [143, 155, 167, 178, 188, 209], "plot_canica_analysi": [143, 155], "plot_haxby_decod": [143, 155], "unsuit": [143, 155], "redund": [143, 155, 170], "2166": [143, 155], "2118": [143, 155], "900": [143, 155, 248, 467], "2138": [143, 155], "faulti": [143, 155], "crash": [143, 155], "1888": [143, 155], "2083": [143, 155], "2052": [143, 155, 467], "2272": [144, 155], "developmental_fmri": [144, 155], "2290": [144, 155], "2429": [145, 155], "launch": [145, 155, 162], "2312": [145, 155, 467], "2302": [145, 155], "fetch_nyu_rest": [145, 148, 155], "2308": [145, 155], "2304": [146, 155], "2307": [146, 155], "2509": [146, 155], "2327": [146, 155], "art": [146, 155, 163, 292, 293, 294, 295], "interchang": [146, 155], "nodal": [146, 155, 431, 480], "decim": [146, 155, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 428], "compute_brain_mask": [146, 149, 155, 181, 292, 293, 294, 295, 299, 300, 374, 381, 447], "compute_gray_matter_mask": [146, 150, 155], "regard": [146, 155, 168, 262, 286, 366], "erron": [146, 155, 248], "readm": [146, 155, 197], "2021": [147, 148, 149, 155, 189, 190, 195, 214, 217, 218, 220, 223, 224, 225, 226, 237, 238, 241, 246, 247, 248, 251, 252, 275, 278, 279, 281, 467], "serv": [147, 155, 170, 178, 198, 243, 257], "1024": [147, 155, 198, 243], "2619": [147, 155], "2622": [147, 155], "2684": [147, 155], "2702": [147, 155], "one_minus_pvalu": [147, 155, 312], "stabil": [147, 155, 161, 192, 294, 295, 312], "cumul": [147, 155, 312], "2567": [147, 155], "2674": [147, 155, 467], "2553": [147, 155, 467], "arm": [147, 155], "2606": [147, 155], "2719": [147, 155, 467], "2714": [147, 155], "handi": [147, 155, 171], "2696": [147, 155], "whatev": [147, 155], "2669": [147, 155], "2697": [147, 155], "2712": [147, 155], "notat": [147, 150, 155, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 425, 427, 428, 430, 434, 435, 436, 438, 439], "2707": [148, 155], "2858": [148, 155], "inher": [148, 155], "basemask": [148, 155], "fsaverage3": [148, 155, 184, 280, 443], "fsaverage4": [148, 155, 184, 280, 443], "fsaverage6": [148, 155, 184, 280, 443], "2815": [148, 155], "curv": [148, 155, 162, 163, 165, 169, 175, 436, 437, 438, 439, 445, 463], "2532": [148, 155], "_get_voxelwise_model_attribut": [148, 155], "2792": [148, 155], "inconsist": [148, 155, 337, 339], "2767": [148, 155], "2826": [148, 155, 467], "2730": [148, 155], "2732": [148, 155], "struct": [148, 155], "footcit": [148, 150, 152, 155, 177], "footbibliographi": [148, 150, 152, 155], "2806": [148, 155, 467], "ascend": [148, 155, 352], "1155": [148, 155], "2831": [148, 155], "zoom": [148, 155], "surround": [148, 155, 465], "2798": [148, 155], "2821": [148, 150, 155], "butterwoth": [148, 155], "stratifi": [148, 155, 162, 292, 294, 296], "marker_label": [148, 155, 444], "2745": [148, 155], "2790": [148, 155], "2805": [148, 155], "2810": [148, 155], "flow": [148, 155, 172, 175], "2869": [148, 155], "2867": [148, 155], "2868": [148, 155], "juelich": [149, 155, 184, 245], "2723": [149, 155], "load_mni152_gm_templ": [149, 155, 208, 261, 284, 286, 287, 288], "load_mni152_wm_templ": [149, 155, 208, 261, 285, 286, 287], "load_mni152_gm_mask": [149, 155, 208, 261], "load_mni152_wm_mask": [149, 155, 208, 261], "2738": [149, 155], "2900": [149, 155], "2755": [149, 155, 467], "2904": [149, 155, 467], "skullstrip": [149, 155, 175, 286], "compute_multi_grey_matter_mask": [149, 155], "2876": [149, 155], "2941": [149, 155], "affect": [149, 155, 172, 175], "2928": [149, 155, 467], "preset": [149, 150, 155, 366, 480], "nevertheless": [149, 155], "8339": [149, 155], "fill_doc": [149, 155], "2875": [149, 155], "jqueri": [149, 155], "2944": [149, 155], "2022": [150, 151, 152, 155], "3061": [150, 155], "2946": [150, 155], "3016": [150, 155], "kmean": [150, 152, 155, 159, 176, 181, 324, 333, 446, 447], "2282": [150, 155], "2880": [150, 155], "3065": [150, 155, 467], "mainten": [150, 155], "3010": [150, 155, 467], "submodul": [150, 152, 155, 170], "3126": [150, 155], "get_bids_fil": [150, 155], "parse_bids_filenam": [150, 155], "subpart": [150, 155], "encourag": [150, 155, 170], "3026": [150, 155], "3036": [150, 155], "3009": [150, 155], "threw": [150, 155], "typeerror": [150, 155, 352], "3035": [150, 155], "3078": [150, 155], "hommel": [150, 155], "3109": [150, 155, 467], "benjamini": [150, 155, 172, 323], "hocheberg": [150, 155], "3137": [150, 155], "3135": [150, 155, 467], "3111": [150, 155], "3013": [150, 155], "2965": [150, 155], "demean": [150, 155, 365, 366], "3003": [150, 155], "triag": [150, 155], "polici": [150, 155, 187], "spm_hrf": [150, 155, 324, 326, 331], "2942": [150, 155], "3033": [150, 155], "3008": [150, 155], "test_img_plot": [150, 155], "reorgan": [150, 155, 170], "3077": [150, 155], "2859": [150, 155], "3106": [150, 155], "3081": [150, 155], "3082": [150, 155], "3090": [150, 155], "3093": [150, 155, 467], "3133": [150, 155], "cond_id": [150, 155], "ex": [150, 155, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 425, 427, 428, 430, 434, 435, 436, 438, 439], "3025": [150, 155], "3039": [150, 155], "slicer": [150, 155, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 480], "projector": [150, 155, 414], "3073": [150, 155], "byte": [150, 155, 170, 351, 357], "2655": [150, 155], "recarrai": [150, 155, 236, 242, 243, 254, 255, 256, 264, 265, 266, 275], "2829": [150, 155], "3098": [151, 155], "h0_fmax": [151, 155, 385], "3184": [151, 155], "func_preproc": [151, 155, 236], "3174": [151, 155], "3179": [151, 155], "_apply_cluster_size_threshold": [151, 155], "cluster_s": [151, 155], "3201": [151, 155], "newest": [151, 155, 271], "3188": [151, 155], "3165": [151, 155], "3127": [151, 155], "3152": [151, 155, 467], "3207": [151, 155], "3178": [151, 155], "cfg": [151, 155], "2953": [151, 155], "3241": [152, 155], "_check_second_level_input": [152, 155], "flm_object": [152, 155], "3283": [152, 155], "c_ra": [152, 155], "3235": [152, 155], "3284": [152, 155], "_gamma_difference_hrf": [152, 155], "hemodynamic_model": [152, 155], "slight": [152, 155], "distort": [152, 155, 365], "3297": [152, 155], "0rc1": [152, 155], "wn": [152, 155], "unfilt": [152, 155], "3293": [152, 155], "typograph": [152, 155], "3337": [152, 155], "_neurovault_base_url": [152, 155], "_neurosynth_fetch_words_url": [152, 155], "3281": [152, 155], "3222": [152, 155], "3233": [152, 155], "3255": [152, 155], "3220": [152, 155, 467], "3306": [152, 155], "3312": [152, 155], "3193": [152, 155], "3185": [152, 155], "3322": [152, 155], "n_elements_": [152, 155, 369, 370, 371, 372, 373, 374, 375], "3311": [152, 155], "fall": [152, 155, 170, 430, 465], "3292": [152, 155], "3030": [152, 155], "branch": [152, 155, 170, 178], "diff": [152, 155], "3317": [152, 155], "filesystem": [152, 155], "3300": [152, 155], "conform": [152, 155, 172], "3262": [152, 155], "3333": [152, 155], "int8": [152, 155, 355], "3286": [152, 155], "fsaverage5_spher": [152, 155], "3229": [152, 155], "regressionresult": [152, 155, 311, 315, 320, 324, 333], "olsmodel": [152, 155, 314, 316, 317], "likelihoodmodelresult": [152, 155, 316, 317], "df_resid": [152, 155], "wdesign": [152, 155], "wresid": [152, 155], "norm_resid": [152, 155], "wy": [152, 155], "fetch_openneuro_dataset_index": [152, 155], "favor": [152, 155], "3216": [152, 155], "afni": [152, 155], "nipi": [152, 155, 170, 176], "1046": [152, 155], "pr": [152, 155, 178], "1082": [152, 155], "overflow": [152, 155], "3227": [152, 155], "pars": [152, 155, 363], "3274": [152, 155], "charact": [152, 155, 333], "3141": [152, 155], "3302": [152, 155], "carpet_plot": [152, 155], "deleg": [152, 155], "cmap_label": [152, 155, 421], "3209": [152, 155, 467], "focuss": 156, "naturalist": [156, 157, 159, 160, 197], "indirect": [156, 157], "Its": [156, 164, 169, 296, 317, 324, 337, 340, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 459], "time_series_1": 156, "time_series_2": 156, "challeng": 156, "toll": 156, "stronger": 156, "geometr": [156, 228], "group_connect": 156, "heterogen": 156, "easiest": [157, 162, 163], "frmi_fil": 157, "confounds_datafram": 157, "imperfect": 157, "boundari": [157, 167, 181, 433, 434, 436, 438, 439], "csv_file": 157, "consider": [157, 163, 221, 236, 339, 385], "readili": [157, 162, 165, 177, 180, 181, 449], "rise": 159, "debat": 159, "cite": [159, 194, 209, 214, 246, 257, 266], "quicker": [159, 170], "loss": [159, 164, 297, 366], "downsiz": 159, "hierarch": [159, 175, 176, 192, 446], "neighborhood": 159, "tree": [159, 220, 248], "admittedli": 159, "isotrop": [160, 192], "publicli": 160, "osf": [160, 193, 197, 198, 210, 218, 243, 247, 257, 266], "5hju4": [160, 197, 257], "walker": [160, 449, 451], "likewis": 160, "sphinx_gallery_dummy_imag": [160, 181], "newer": [161, 271, 273], "arriv": 161, "consensu": [161, 170, 192], "explor": [161, 165, 169, 171, 176, 177, 223, 230, 258, 271, 277, 292, 293, 294, 295], "resembl": 161, "coactiv": 161, "neuro": [161, 175, 292, 360], "offer": [161, 171, 173, 480], "articul": 162, "diagnost": [162, 166, 190], "statu": [162, 175, 190, 275], "vbm": [162, 175, 177], "fa": 162, "unusu": 162, "rich": 162, "strongli": [162, 170, 175], "genfromtxt": 162, "seemingli": 162, "misleadingli": 162, "chose": 162, "Be": [162, 163, 170, 230, 311, 460], "got": [162, 170], "thumb": [162, 170], "advic": [162, 188], "worst": 162, "entir": [162, 167, 182, 372, 452], "imbalanc": 162, "domin": [162, 281], "roc": [162, 175], "guess": [162, 169, 377, 442], "notion": [162, 167, 363, 431], "tackl": [163, 178], "extern": [163, 166, 275], "trait": 163, "userguid": 163, "categor": [163, 178], "harder": 163, "vote": 163, "costli": [163, 167, 339, 385], "former": [163, 169, 271, 427, 430, 435, 439], "penal": [163, 169, 230, 297, 298], "variant": [163, 186, 188, 214], "counterpart": 163, "ridge_regressor": [163, 293, 295], "lasso_regressor": [163, 293, 295], "dummy_regressor": [163, 293, 295], "lunch": 163, "insensit": 163, "cheap": 163, "ill": 163, "importantli": [163, 165, 170], "ugli": 163, "nuisanc": [163, 175, 190, 192, 197, 237, 311, 314, 315, 316, 366, 461], "hyper": [163, 164], "computationnali": 163, "bia": [163, 292, 293, 294, 295, 297, 298], "cancel": 163, "hood": [163, 168], "promot": [163, 164, 178], "memor": [164, 172], "versatil": [165, 176, 481], "mimic": [165, 244, 245], "unfortun": [165, 169], "prognosi": [166, 177], "reduct": [166, 300, 447, 483], "bag": [166, 297, 298, 483], "briefli": 167, "critic": [167, 169], "lorocv": 167, "isovoxel": 167, "volunt": 167, "theoret": 167, "hypothesi": [167, 172, 296, 312, 339, 385], "swap": [167, 181, 275, 360], "descriptor": [167, 325, 385], "herebi": 167, "rank": [167, 314, 315, 316, 317, 361, 385], "phenomenon": 167, "statistician": 167, "crucial": 167, "happen": [167, 170, 182, 465], "symmetri": [167, 169], "adopt": [167, 175], "spacenetclassifi": [168, 292, 293, 298], "tvl1": 168, "blobbi": 168, "mainli": 169, "devis": 169, "descent": [169, 300], "innermost": 169, "hoc": 169, "histori": 169, "prove": [169, 182], "amplifi": 169, "mandatori": [169, 342], "_update_submatrix": 169, "perfect": 169, "newton": 169, "raphson": 169, "debug": [169, 170, 177, 230, 232], "kern": 169, "bottleneck": 169, "overhead": 169, "neglig": [169, 346], "evenli": [169, 342, 461], "highli": [169, 170], "boil": 169, "written": [169, 223, 457], "inlin": [169, 457], "naiv": 169, "clock": 169, "nr": 169, "loos": 169, "fortran": [169, 357, 358, 385], "couldn": 169, "weren": 169, "ubuntu": 169, "synthes": 169, "wasn": 169, "hopefulli": 169, "topologi": 169, "govern": 169, "hardest": 169, "unrealist": 169, "perfectli": 169, "spectrum": 169, "decorrel": 169, "whatsoev": 169, "mostli": [169, 361], "weakli": 169, "optimum": 169, "wast": 169, "convex": 169, "group_sparse_covariance_cost": 169, "feasibl": 169, "semi": [169, 206], "primal": 169, "satisfi": [169, 178], "quantiti": [169, 312], "lost": 169, "rapidli": 169, "prohibit": 169, "slowli": 169, "tricki": 169, "paragraph": 169, "dwindl": 169, "speedup": 169, "complic": [169, 180, 314, 316, 317], "program": [169, 480], "earlystopprob": 169, "unpen": 169, "fastest": 169, "compute_alpha_max": 169, "sequenti": [169, 180, 433], "trajectori": 169, "smallest": 169, "fact": [169, 172, 175], "energi": [169, 192], "brute": 169, "slowest": 169, "hardwar": 169, "commod": 169, "moder": 169, "sought": [169, 175], "push": [169, 170, 178], "stress": 169, "rare": 169, "spent": 169, "early_stop": [169, 230], "team": [170, 177, 178, 214, 246, 481], "neurostar": [170, 177, 178], "forum": 170, "weekli": [170, 177], "hour": [170, 177, 178, 339, 385], "wednesdai": [170, 481], "4pm": [170, 481], "5pm": [170, 481], "utc": [170, 481], "week": [170, 178], "troubleshoot": 170, "appreci": [170, 180], "topic": [170, 178], "burn": 170, "board": 170, "welcom": [170, 178, 481], "think": [170, 172, 182], "runnabl": 170, "ongo": 170, "comment": [170, 182], "opinion": 170, "approv": [170, 188], "burden": 170, "member": [170, 178, 481], "expert": [170, 177], "eas": 170, "prototyp": [170, 227], "beginn": [170, 177], "parsimoni": 170, "concern": [170, 175], "sustain": 170, "weigh": 170, "exhaust": [170, 177], "thoroughli": [170, 227], "discourag": 170, "intent": 170, "dedic": [170, 275], "host": 170, "templateflow": [170, 261, 262], "neuromap": 170, "neuroparc": 170, "modif": [170, 172, 175], "ultim": [170, 315, 420, 425, 427, 428, 433, 434, 435], "emerg": 170, "effort": [170, 178], "everyon": [170, 188], "send": [170, 446, 448], "infrastructur": [170, 178], "gigabyt": 170, "deploy": 170, "xxxx": 170, "unrel": [170, 182], "numpydoc": 170, "versionad": [170, 178], "versionchang": [170, 178, 355], "dev": [170, 178, 207, 260], "coverag": [170, 481], "mock": 170, "atom": [170, 175], "convei": [170, 385], "smoothen": 170, "wip": 170, "draft": 170, "mrg": 170, "enh": 170, "adher": 170, "badg": [170, 178], "cff": 170, "bdg": [170, 178], "secondari": 170, "success": [170, 172, 178, 182, 223], "info": [170, 178, 193, 271, 273, 430, 436, 437, 438, 439], "danger": [170, 172], "dimitripapadopoulo": 170, "affili": 170, "orcid": 170, "0000": 170, "0002": 170, "1242": 170, "8990": 170, "a_nice_funct": 170, "init": [170, 446], "camelcas": 170, "statement": 170, "obj": [170, 241, 249], "enclos": 170, "__all__": 170, "__init__": [170, 228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 311, 312, 313, 314, 315, 316, 317, 318, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 446, 447, 448, 449, 457], "_valid": 170, "check_mask_img": 170, "validationerror": 170, "symbol": [170, 171, 352], "_check_mask_shap": 170, "_check_mask_valu": 170, "_validate_shap": 170, "doubl": [170, 171, 244, 245], "alon": [170, 172, 480], "hook": 170, "linter": 170, "autoformatt": 170, "pytest": [170, 178, 481], "test_imag": 170, "didn": 170, "test_modul": 170, "recogniz": 170, "conftest": 170, "fixur": 170, "default_rng": 170, "test_someth": 170, "my_numb": 170, "he": 170, "plain": 170, "repo": [170, 178, 481], "fork": 170, "clone": 170, "your_usernam": 170, "virtual": [170, 481], "wor": 170, "whichev": 170, "venv": [170, 481], "conda": [170, 481], "__version__": 170, "command": [170, 177, 178, 481], "upstream": [170, 178], "remot": [170, 271, 273], "your_branch": 170, "path_to_edited_fil": 170, "test_surf_plot": 170, "your_fork": 170, "restructuredtext": 170, "strict": 170, "window": [170, 324, 337, 459, 481], "_build": 170, "doctre": 170, "noplot": 170, "ci": [170, 178, 314, 316, 317], "filename_pattern": 170, "sphinx_gallery_conf": 170, "thorough": 170, "servic": 170, "temporarili": 170, "unavail": [170, 260], "frustrat": 170, "successfulli": 170, "get_dataset_dir": 170, "fetch_fil": 170, "server": [170, 271, 273], "fake": 170, "request_mock": 170, "_test": 170, "sender": 170, "essenc": 171, "timecours": [171, 365], "convolv": [171, 326], "plug": [171, 182, 311, 315], "ascertain": 171, "spm_multimodal_fmri": [171, 279], "referenc": 171, "fistlevelmodel": 171, "flag": [171, 365, 366], "observed_timeseri": 171, "oxyhaemoglobin": [172, 175], "carri": [172, 175], "deoxyhaemoglobin": [172, 175], "deliv": [172, 175], "diamagnet": [172, 175], "paramagnet": [172, 175], "mr": 172, "irrespect": [172, 433], "microarchitectur": 172, "regist": [172, 188, 192, 206, 240], "montreal": [172, 175, 189, 192, 238], "nipyp": 172, "action": [172, 178, 194, 266], "sensori": 172, "stimui": 172, "hypothes": [172, 175], "oxi": 172, "deoxi": 172, "haemoglobin": 172, "sluggish": 172, "plai": [172, 182], "remark": 172, "respond": 172, "enter": 172, "conceptu": 172, "physic": [172, 386, 388, 389], "decid": 172, "dof": [172, 312, 321], "_scan": 172, "_column": 172, "quantil": 172, "reject": [172, 175], "frequent": 172, "misconcept": 172, "frequentist": 172, "wikipedia": 172, "wiki": 172, "frequentist_infer": 172, "cumbersom": 172, "absenc": [172, 178, 452], "_voxel": 172, "frac": [172, 298, 311, 315], "truli": [172, 208], "surpass": 172, "proportion": 172, "compromis": [172, 366], "hochberg": [172, 323], "supra": 172, "rational": 172, "primer": [173, 483], "broader": [174, 187], "morphologi": 175, "treatment": [175, 177], "contrari": [175, 363, 369, 370, 467], "fundament": 175, "eeg": 175, "electroencephalographi": 175, "monitor": 175, "electr": 175, "echo": [175, 327], "planar": 175, "triangular": [175, 228, 234, 235, 432], "incorrect": 175, "unwarp": 175, "submit": [175, 178], "diamet": 175, "tradition": 175, "subcompon": 175, "meg": 175, "magnetoencephalographi": 175, "mni305": 175, "pe": 175, "signifi": [175, 292, 293, 294, 295], "soft": 175, "tpr": 175, "unlabel": 175, "emot": 175, "reaction": 175, "iq": [175, 190, 292, 293, 294, 295], "diagnosi": [175, 177], "outlier": [175, 275, 365, 366, 368, 371, 374], "magnitud": [175, 424], "benedikt": 175, "ehing": 175, "coher": [175, 177], "neurobiolog": 175, "subgroup": 175, "psychiatr": 175, "plural": 175, "toolbox": [176, 481], "quickstart": 176, "ecosystem": 176, "domain": [177, 300], "ok": 177, "walk": 177, "manner": [177, 427], "dive": 177, "oftentim": 177, "comer": 177, "gentl": 177, "scientififc": 177, "greatli": 177, "visualis": 177, "besid": 177, "transfer": 177, "psycholog": 177, "despit": 177, "varoquaux2012": 177, "connection": 177, "tracker": 178, "mislabel": 178, "seriou": 178, "dai": 178, "decent": 178, "quantifi": 178, "prioriti": [178, 180, 282], "urgent": 178, "month": 178, "medium": [178, 280, 443], "kindli": [178, 206], "repli": 178, "redirect": 178, "ping": 178, "stall": 178, "ini": 178, "test_plot": 178, "test_contrast": 178, "exec": 178, "test_latest": 178, "test_data_gen": 178, "hatch": 178, "vc": 178, "sdist": 178, "wheel": 178, "param2": 178, "my_funct": 178, "param1": 178, "beforehand": 178, "currentmodul": 178, "whats_new": 178, "_latest": 178, "_vx": 178, "commit": 178, "master": [178, 248], "_version": 178, "yml": 178, "trigger": 178, "tab": [178, 182], "workspac": 178, "dist": 178, "rm": 178, "twine": 178, "subfold": 178, "packagenam": 178, "packagevers": 178, "pythonvers": 178, "pythoncvers": 178, "whl": 178, "drag": 178, "dvipng": 178, "texliv": 178, "wget": 178, "mirror": [178, 236, 237, 238, 239, 240, 241, 242, 246, 249, 250, 252, 260, 261, 264, 265, 266, 269, 270, 275, 281], "ctan": 178, "dviwar": 178, "unzip": 178, "linux": 178, "pkg": 178, "versiontag": 178, "abbrev": 178, "bewar": [178, 180], "expans": [179, 483], "resiz": [179, 181, 292, 293, 294, 295, 297, 298, 337, 354, 357, 377, 379, 380, 382, 441, 443, 444, 445, 447, 457, 483], "t_map001": 180, "abbrevi": 180, "subject1": 180, "subject2": 180, "unix": [180, 291], "shell": [180, 291], "subject_01": 180, "subject_03": 180, "subject_": 180, "subj1": 180, "nilearn_shared_data": [180, 282], "get_head": 180, "memoryerror": 180, "decompress": 180, "uncach": 180, "comma": 180, "chapter": [181, 182], "swap_img_hemispher": 181, "fslview": 181, "crop": [181, 182, 346], "consumpt": [181, 324, 337, 370, 373, 460], "3x3x3": [181, 271, 273, 449, 451], "diag": [181, 432], "compute_background_mask": [181, 292, 293, 294, 295, 299, 300, 371, 374, 447], "compute_multi_background_mask": [181, 371], "intersect_mask": 181, "restructur": 181, "recip": 181, "cube": [182, 458], "swiss": 182, "armi": 182, "knive": 182, "intend": [182, 208, 317, 357, 358], "set_config": [182, 228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "print_changed_onli": 182, "fight": 182, "neuroanatomi": 182, "anisotrop": 182, "convers": [182, 238], "loss_pass": 182, "prespecifi": 182, "abrupt": 182, "transient": 182, "acquis": 182, "saniti": 182, "recast": 182, "brought": 182, "represenet": 182, "excerpt": 182, "disadvantag": 182, "nonpres": 182, "linearli": [182, 192], "nor": 182, "pcp": [184, 236], "multimod": 184, "asd": 187, "grass": 187, "1112": 187, "nearli": [187, 297, 298], "childmind": 187, "unrestrict": [187, 190, 194, 197, 198, 214], "commerci": [187, 190, 192, 194, 195, 197, 198, 214, 241], "ts2": 188, "ts3": 188, "hcp500": 188, "connectomedb": 188, "compli": [188, 365], "regul": 188, "irb": 188, "ethic": 188, "committe": 188, "law": 188, "certif": 188, "extremum": 189, "avoi": 189, "gin": [189, 238], "symptom": 190, "quotient": 190, "lifetim": 190, "ftp": [190, 237], "htdoc": [190, 237], "adhd200": [190, 237], "adhd200_40sub_preprocess": [190, 237], "tgz": [190, 237], "rsn_indic": [191, 239], "rsn_name": 191, "mialab": [191, 239], "mrn": [191, 239], "2093": 191, "image_m": 191, "g004": 191, "jpg": 191, "creativ": [192, 195, 241], "mstep": [192, 240], "markdown": 192, "scale007": [192, 240], "scale012": [192, 240], "scale020": [192, 240], "scale036": [192, 240], "scale064": [192, 240], "scale122": [192, 240], "scale197": [192, 240], "scale325": [192, 240], "scale444": [192, 240], "brain_parcellation_cambridge_basc_multiscale_": 192, "asym": [192, 240], "_scale": 192, "nnn": 192, "2009a": 192, "nii_sym": 192, "nii_asym": 192, "asymmetr": [192, 240, 261, 262], "homotop": [192, 236, 240], "kit": 192, "niak": [192, 236], "cento": 192, "octav": 192, "minc": 192, "minctracc": 192, "stereotax": 192, "excess": [192, 365], "unscrub": 192, "princip": [192, 268, 366], "blur": 192, "replic": 192, "criterion": [192, 385, 448], "pool": [192, 200], "fashion": [192, 208], "u5mzi": 193, "methodolog": 195, "trade": [195, 294, 295], "ncut": 195, "scorr_2level": [195, 241], "emphas": [195, 241], "scorr_mean": [195, 241], "tcorr_2level": [195, 241], "tcorr_mean": [195, 241], "cluster_roi": [195, 241], "alik": [195, 218, 241], "licenc": [195, 206, 209, 238, 239, 241, 248, 252], "sulco": [196, 250], "wjtyq": [197, 257], "ds000228": [197, 257], "gender": [197, 257, 275], "handed": [197, 257], "idp": 198, "pqu9r": [198, 243], "wjvd5": [198, 243], "3vrct": [198, 243], "9b76y": [198, 243], "34792": [198, 243], "mairal": 198, "stochast": 198, "subsampl": 198, "mitchel": 198, "openfmri": 198, "contest": 200, "sst": 200, "dst": 200, "speaker": 200, "ssp": 200, "dsp": 200, "sstssp": 200, "sstdsp": 200, "dstssp": 200, "dstdsp": 200, "npz": [200, 259], "area_left": [201, 202, 203, 204, 205, 280], "area_right": [201, 202, 203, 204, 205, 280], "flat_right": [201, 202, 203, 204, 205, 280], "sphere_left": [201, 202, 203, 204, 205, 280], "sphere_right": [201, 202, 203, 204, 205, 280], "thick_left": [201, 202, 203, 204, 205, 280], "thick_right": [201, 202, 203, 204, 205, 280], "white_left": [201, 202, 203, 204, 205, 280, 465], "white_right": [201, 202, 203, 204, 205, 280], "morphometr": 206, "femal": [206, 236], "cma": 206, "flirt": 206, "fmrib": [206, 209, 222, 249], "ox": [206, 209, 222, 249], "fslwiki": [206, 209], "repons": [207, 260], "pymvpa": [207, 260], "datadb": [207, 260], "proton": [208, 261], "t2": [208, 261, 425, 480], "t2_relax": [208, 261], "eye_mask": [208, 261], "face_mask": [208, 261], "servicesatlas": [208, 261], "icbm152nlin2009": [208, 261], "cytoarchitecton": 209, "colin27": 209, "mortem": 209, "methodologi": 209, "covertli": 210, "5x1": 210, "5x4": 210, "k4jp8": 210, "downloaded_fil": [210, 253, 276], "odc": 210, "sa": [210, 241], "ds000005": 212, "00001": 212, "Their": 213, "capit": 213, "mask_roi": 213, "rh": 213, "lh": 213, "vxxx": 213, "cn": 213, "atr": 213, "jp": 213, "dni": 213, "spatial_pattern": 214, "cc0": 215, "nathan": 216, "kline": 216, "func_right": [216, 281], "freeli": [217, 223], "alzheim": 217, "diseas": 217, "dr": 217, "howard": 217, "hugh": 217, "hhmi": 217, "nrg": 217, "medicin": 217, "birn": 217, "data_usage_agr": [217, 275], "dua": 217, "crowd": 218, "invit": 218, "r2hvk": [218, 247], "ucc": 218, "thomasyeolab": [220, 248], "cbig": [220, 248], "update_yeo2011_schaefer2018_labelnam": [220, 248], "stable_project": [220, 248], "brain_parcel": [220, 248], "schaefer2018_localglob": [220, 248], "cerebellar": [221, 256], "winner": 221, "novel": 221, "thalamu": [221, 256], "ganglia": 221, "amygdala": [221, 256], "hippocampu": [221, 256], "recapitul": 221, "greenelab": 221, "wustl": 221, "data_softwar": 221, "twpyb1pflj6vrlxgh3rohyqanxbdpelw": 221, "rsn20": [222, 249], "rsn10": [222, 249], "rsn70": [222, 249], "bm20": [222, 249], "bm10": [222, 249], "bm70": [222, 249], "rt": 223, "geriant": 223, "ion": [223, 224, 278, 279], "equip": 223, "person": 223, "contact": 223, "trials_ses1": [224, 279], "trials_ses2": [224, 279], "mmface": [224, 279], "thin": [226, 252], "thin_7": [226, 252], "thin_17": [226, 252], "colors_7": [226, 252], "colors_17": [226, 252], "surfer": [226, 252], "nmr": [226, 252], "mgh": [226, 252], "fswiki": [226, 252], "corticalparcellation_yeo2011": [226, 252], "cov_estim": 228, "ledoitwolf": 228, "store_precis": 228, "discard_diagon": [228, 234], "shrunk": 228, "cov_estimator_": 228, "whitening_": 228, "connectivitymatrix": 228, "n_confound": [228, 348, 462], "vetor": 228, "get_metadata_rout": [228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "rout": [228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "metadatarequest": [228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "subobject": [228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "param": [228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "set_inverse_transform_request": [228, 299, 300, 307, 369, 370, 372, 373, 375, 446, 447, 448, 449], "enable_metadata_rout": [228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "alia": [228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449, 480], "metadata_rout": [228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "set_output": [228, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "set_param": [228, 229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 368, 369, 370, 371, 372, 373, 374, 375, 446, 447, 448, 449], "set_transform_request": [228, 299, 300, 307, 368, 369, 370, 371, 372, 373, 374, 375, 447, 449], "tol": [229, 230, 232, 297, 298], "aggress": [229, 366], "ndarray": 229, "set_fit_request": [229, 230, 292, 293, 294, 295, 296, 297, 298, 299, 300, 307, 324, 337, 369, 370, 371, 372, 373, 374, 447, 449], "n_refin": 230, "tol_cv": 230, "max_iter_cv": 230, "phase": 230, "cv_alphas_": 230, "n_alpha": [230, 297, 298], "probe_funct": 232, "precisions_init": 232, "dualiti": 232, "prematur": 232, "emp_cov": 232, "vec": 235, "encompass": 235, "cpac": 236, "band_pass_filt": 236, "global_signal_regress": 236, "quality_check": 236, "wrt": 236, "dparsf": 236, "cc": 236, "controversi": 236, "1hz": 236, "alff": 236, "degree_binar": 236, "degree_weight": 236, "dual_regress": 236, "eigenvector_binar": 236, "eigenvector_weight": 236, "falff": 236, "func_mask": 236, "func_mean": 236, "lfcd": 236, "reho": 236, "rois_aal": 236, "rois_cc200": 236, "rois_cc400": 236, "rois_dosenbach160": 236, "rois_ez": 236, "rois_ho": 236, "rois_tt": 236, "vmhc": 236, "rater": 236, "sub_id": 236, "50001": 236, "50607": 236, "dx_group": 236, "dsm_iv_tr": 236, "asperg": 236, "ppd": 236, "NOS": 236, "age_at_scan": 236, "handedness_categori": 236, "ambi": 236, "ambidextr": 236, "handedness_scor": 236, "eigenvector": 236, "fraction": [236, 324, 327, 379, 380, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 465], "ez": 236, "resum": [237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 252, 257, 260, 261, 262, 266, 268, 269, 270, 275, 281], "spm12": 238, "med": 238, "5021": 238, "lingual_l": 238, "precentral_l": 238, "spm5": 238, "ob": 240, "figshar": 240, "1285615": 240, "grp_mean": 241, "group_mean": 241, "creativecommon": 241, "nc": 241, "rec": [242, 254, 255, 256, 327], "atlas_nam": [244, 245], "cortl": 244, "thr50": [244, 245], "usr": [244, 245], "strictli": [244, 245], "probabilit": 247, "prepend": [247, 248, 363, 364], "nac": 247, "idx_nac": 247, "n_roi": 248, "yeo_network": 248, "base_url": 248, "7networks_lh_vis_3": [248, 467], "update_20190916_readm": 248, "e501": 248, "bandwidth": 249, "gryal": 250, "level_nam": 251, "ba": 251, "brodmann": 251, "tick_7": 252, "tick_17": 252, "ordered_region": [254, 256], "cinguloopercular": 256, "defaultmod": 256, "dorsalattent": 256, "frontopariet": 256, "medialtemporallob": 256, "parietomedi": 256, "reward": 256, "somatomotordors": 256, "somatomotorlater": 256, "ventralattent": 256, "cortexl": 256, "cortexr": 256, "basalganglia": 256, "cortexmid": 256, "age_group": 257, "ucla": [258, 276], "consortium": [258, 276], "neuropsychiatr": [258, 276], "la5c": [258, 276], "urls_path": [258, 277], "fullbrain": 260, "mni152nlin2009csasym": [261, 262], "relaxometri": 261, "vfonov": 261, "mni_icbm152_nlin_sym_09a_nifti": 261, "tpl": 261, "mni152nlin2009csym": 261, "binary_clos": [262, 284, 287], "gm_mask_img": [262, 284], "particularli": [262, 449], "caller": [264, 265], "get_mask": 266, "get_anat": 266, "vhtf6": 266, "multiple_spatial_regress": 268, "full_correl": 268, "return_raw_data": 269, "betamap": 269, "make_xi": 269, "153mb": 270, "brainlin": 270, "number_of_imag": 271, "_empty_filt": 271, "image_typ": 271, "is_threshold": 271, "not_mni": 271, "download_new": [271, 273], "kwarg_image_filt": 271, "until": [271, 385], "skim": 271, "basic_collection_term": 271, "empty_filt": 271, "basic_image_term": 271, "image_metadata": 271, "offlin": [271, 273, 483], "regardless": [271, 273, 297], "subdirectori": [271, 273], "countvector": [271, 273], "concis": 271, "_col_filters_available_on_serv": 271, "owner": 271, "modify_d": 271, "auditory_calculation_vs_baselin": 272, "32980": 272, "10426": 274, "dartel_vers": 275, "dartel": 275, "archiv": 275, "gross": 275, "intracrani": 275, "socioeconom": 275, "dementia": 275, "demand": 275, "openli": 275, "dataset_vers": [276, 277], "ds000030_r1": [276, 277], "patch_openneuro_dataset": 276, "symlink": [276, 290], "data_nam": [278, 279], "2562": [280, 443], "10242": [280, 430, 443], "40962": [280, 443], "fsaverage7": [280, 443], "163842": [280, 430, 443], "gm_mni152_templ": 285, "mni152_templ": 286, "wm_mask_img": 287, "wm_mni152_templ": 288, "file_list": 290, "inclusion_filt": 291, "exclus": [291, 297, 298], "wrapper": [292, 293, 339], "1e4": [292, 293, 294, 295], "logisticregress": [292, 294], "inbuilt": [292, 293, 294, 295], "model_evalu": [292, 293, 294, 295], "scorer": [292, 293, 294, 295], "hertz": [292, 293, 294, 295, 297, 298, 342, 369, 370, 371, 372, 373, 374, 375, 447, 449, 460, 461], "rough": [292, 293, 294, 295, 297, 298, 299, 300, 324, 337, 343, 369, 370, 371, 372, 373, 374, 375, 447, 448, 449], "decision_funct": [292, 293, 294, 295, 297, 298], "learner": [292, 293, 294, 295, 297, 298], "ye": [292, 293, 294, 295], "leavepgroupsout": [292, 293, 294, 295], "classes_": [292, 293, 294, 295, 297, 298], "screening_percentile_": [292, 293, 294, 295, 297, 298], "n_class": [292, 293, 294, 295, 297, 298], "intercept_": [292, 293, 294, 295, 297, 298], "nclass": [292, 293, 294, 295], "cv_": [292, 293, 294, 295, 297, 298], "std_coef_": [292, 293, 294, 295], "std_coef_img_": [292, 293, 294, 295], "inner": [292, 293, 294, 295, 362, 465], "best_alpha": [292, 293, 294, 295], "scorer_": [292, 293, 294, 295], "misclassif": [292, 293, 294, 295, 297, 298], "n_outputs_": [292, 293, 294, 295], "dummy_output_": [292, 293, 294, 295], "class_prior": [292, 293, 294, 295], "dummyregressor": [292, 293, 294, 295], "confid": [292, 293, 294, 295, 297, 298, 314, 316, 317], "sample_weight": [292, 293, 294, 295, 297, 298], "neg_mean_squared_error": [293, 295], "cluster_percentil": [294, 295], "america": 296, "vol": 296, "0001": [297, 298], "fit_intercept": [297, 298], "debia": [297, 298], "hybrid": [297, 298], "mutual": [297, 298], "alpha_min": [297, 298], "alpha_max": [297, 298], "premultipli": 297, "debias": [297, 298], "all_coef_": [297, 298], "n_l1_ratio": [297, 298], "alpha_grids_": [297, 298], "best_model_params_": [297, 298], "n_paramet": [297, 298], "n_classes_": 297, "mask_": [297, 298], "memory_": [297, 298], "narrai": [297, 298], "w_": [297, 298], "ymean_": [297, 298], "xmean_": [297, 298], "xstd_": [297, 298], "supported_loss": [297, 298], "supported_penalti": [297, 298], "check_param": [297, 298], "sane": [297, 298], "hyperplan": [297, 298], "qi": [297, 298], "set_score_request": [297, 298, 299, 300, 447], "y_true": 298, "disregard": 298, "n_samples_fit": 298, "n_output": [298, 299, 300, 324, 337, 446, 448], "uniform_averag": 298, "multioutputregressor": 298, "do_cca": 299, "6mm": [299, 449], "restart": 299, "fit_param": [299, 300, 324, 337, 368, 371, 374, 446, 448], "x_new": [299, 300, 324, 337, 368, 371, 374, 446, 448], "n_features_new": [299, 300, 324, 337, 368, 371, 374, 446, 448], "reconstructed_img": [299, 300], "decompositionestim": [299, 300, 447], "squeez": [299, 300, 447], "reduction_ratio": 300, "batch": [300, 446], "lar": 300, "lars_path": 300, "file_path": [301, 363], "n_vertic": [301, 302, 303], "to_gifti": [301, 302, 303], "gifti_fil": [301, 302, 303], "labels_data_": 306, "labels_": [306, 324, 446, 448], "masked_img": [306, 307], "output_dimension_": 307, "mesh_nam": 310, "rho": 311, "likelihoodmodel": [311, 314], "sigma": [311, 314, 315, 316, 317], "whiten": [311, 315, 316, 317], "whitened_x": [311, 315], "logl": [311, 314, 315, 316, 317], "loglikelihood": [311, 315], "df_model": [311, 314, 315], "loglf": [311, 315], "ell": [311, 315], "hat": [311, 315], "sse": [311, 315, 316, 317], "10000000000": 312, "tini": 312, "dofmax": 312, "breakag": 312, "contrast_dim": 312, "def_dofmax": 312, "def_tini": 312, "underflow": 312, "h0": [312, 385], "df_num": [313, 314, 316, 317], "df_den": [313, 314, 316, 317, 318], "theta": [314, 316, 317], "aic": 314, "llf": 314, "wald": [314, 316, 317], "vcov": [314, 316, 317], "sd": [314, 316, 317, 318], "tcontrastresult": [314, 316, 317], "fcontrast": [314, 316, 317], "invcov": [314, 316, 317], "px": [314, 316, 317], "f_re": [314, 316, 317], "fcontrastresult": [314, 316, 317], "conf_int": [314, 316, 317], "col": [314, 316, 317], "standard_norm": [314, 316, 317], "stan": [314, 316, 317], "confidence_interv": [314, 316, 317], "whitened_design": 315, "calc_beta": 315, "moor": 315, "penros": 315, "pseudoinvers": 315, "normalized_cov_beta": 315, "df_residu": 315, "__init___": 315, "wlsmodel": 315, "armodel": 315, "whitened_i": 316, "whitened_residu": 316, "normalized_residu": [316, 317], "d_i": [316, 317], "e_i": [316, 317], "ms_e": [316, 317], "presum": [319, 340], "regression_result": 320, "con_val": 320, "con": 320, "precision_weight": 321, "return_z_scor": 321, "fixed_fx_z_score_img": 321, "fixed_fx_contrast_img": 321, "fixed_fx_variance_img": 321, "fixed_fx_stat_img": 321, "z_val": 323, "min_onset": [324, 326, 327, 331], "plu": [324, 326, 331], "spm_time_deriv": [324, 326, 331], "idem": [324, 326, 331], "spm_dispersion_deriv": [324, 326, 331], "glover_hrf": [324, 326, 331], "glover_time_deriv": [324, 326, 331], "glover_dispersion_deriv": [324, 326, 331], "dirac": [324, 326, 331], "n_onset": [324, 331], "rid": [324, 337], "results_": 324, "array_lik": [324, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 431], "histogram": [324, 333, 379, 382, 429], "quantif": [324, 333], "contrast_def": [324, 337, 423, 459], "t_map": [324, 337], "n_col": [324, 337, 339, 364, 423], "eval": [324, 337, 339, 423], "report_dim": [324, 337, 459], "1600": [324, 337, 459, 467], "htmlreport": [324, 337, 370, 373, 375, 449, 459], "standalon": [324, 337, 459], "ce": [324, 327, 337, 459], "autogener": [324, 337, 459], "subpeak": [324, 337, 458, 459], "report_text": [324, 337, 459], "voxelwis": [324, 337], "triplet": [325, 326, 375, 444], "n_frame": [325, 331], "n_regressor": [325, 333, 339, 385], "n_event": [325, 326, 331], "computed_regressor": 326, "n_reg": 326, "reg_nam": 326, "dataset_path": 327, "_space": 327, "acq": 327, "dir": [327, 362], "den": 327, "confounds_": 327, "path_to_a_bids_dataset": 327, "tasknam": 327, "confounds_strategi": 327, "confounds_mot": 327, "confounds_wm_csf": 327, "confounds_fd_threshold": 327, "confounds_std_dvars_threshold": 327, "dhrf": [328, 330, 334, 336], "n_add_reg": 331, "reg_i": 331, "frames_tim": 331, "map_nam": [337, 339], "effects_map_path": [337, 339], "liter": [337, 339], "second_level_stat_typ": 337, "output_imag": 337, "unsign": [339, 385], "neg_log10_vfwe_pvals_img": 339, "explanatori": [339, 385], "n_descriptor": [339, 385], "thresholded_map": 340, "prescrib": 340, "rigor": 340, "anatomical_imag": [341, 353], "brainmask": 341, "instant": [342, 461], "clean__": [342, 369, 370, 371, 372, 373, 374, 375], "butterworth__": [342, 369, 370, 371, 372, 373, 374, 375, 461], "clean__butterworth__": [342, 369, 370, 371, 372, 373, 374, 375], "ensure_ndim": 343, "img_copi": 345, "rtol": 346, "return_offset": 346, "Will": [346, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 439], "touch": 346, "croppabl": 346, "toggl": 346, "x1_pre": 346, "x1_post": 346, "x2_pre": 346, "x2_post": 346, "xn_pre": 346, "xn_post": 346, "number_of_scan": 348, "joint_mni_imag": 349, "single_mni_imag": 349, "five_mni_imag": 349, "first_three_imag": 349, "copy_header_from": 353, "imcal": 353, "fslmath": 353, "log_img": 353, "2645": 353, "result_img_with_head": 353, "ref_niimg": 355, "copy_head": 355, "imposs": 356, "fill_valu": [357, 358], "force_resampl": [357, 358], "boundingboxerror": 357, "crop_img": 357, "infinit": 357, "gracefulli": 357, "source_img": 358, "target_img": [358, 378, 381], "cllip": 358, "arr": 359, "filtered_img": 359, "synchron": 360, "sagit": 360, "caution": 360, "radio": 360, "main_path": 362, "file_tag": [362, 363], "file_typ": [362, 363], "modality_fold": 362, "sub_fold": 362, "se": 362, "ap": 362, "file_basenam": 363, "file_field": 363, "_tag": 363, "revis": 363, "parser": 363, "statmap": 364, "_stat": 364, "_statmap": 364, "_design": 364, "img_fil": [365, 366], "anat_combin": [365, 366], "n_compcor": [365, 366], "dtseri": [365, 366], "non_steady_st": 365, "power2": 365, "quadrat": 365, "power2d": 365, "var": 365, "anat_separ": 365, "temporal_anat_combin": 365, "temporal_anat_separ": 365, "acompcor_combin": 365, "smootharomanonaggr_bold": [365, 366], "nifitmask": 365, "denois": 366, "srub": 366, "physiologi": 366, "suffer": 366, "golobal_sign": 366, "tunabl": 366, "aggres": 366, "suffix": 366, "mni152nlin6asym": 366, "niprep": 366, "region_sign": [368, 369, 370, 371, 372, 373, 374, 375, 447, 449, 453, 456], "imgs_list": [368, 369, 370, 371, 374], "ddof": [369, 370, 371, 372, 373, 374, 375, 461], "maps_img_": [370, 373], "html_report": [370, 373, 375, 449], "voxel_sign": [370, 373, 375, 449], "multipca": [371, 467], "affine_": [371, 374], "region_ids_": 372, "region_atlas_": 372, "trim": [373, 453], "seeds_": 375, "run_seri": 376, "data_img": [377, 380], "border_s": [377, 380], "binary_eros": [377, 378, 379, 381, 382], "exclude_zero": [379, 380, 382], "reslic": [379, 382], "grp_mask": 383, "ndim": 384, "target_var": 385, "confounding_var": 385, "legaci": 385, "amongst": [385, 480], "n_covar": 385, "pval": 385, "score_orig_data": 385, "h0_max_t": 385, "h0_max_tfc": 385, "h0_max_siz": 385, "h0_max_mass": 385, "mpl": [386, 388, 389], "transform_to_2d": [386, 388, 389], "add_object_bound": [386, 388, 389], "draw_2d": [386, 388, 389], "data_2d": [386, 388, 389], "data_bound": [386, 388, 389], "bounding_box": [386, 388, 389], "get_object_bound": [386, 388, 389], "draw_left_right": [386, 388, 389], "bg_color": [386, 388, 389], "draw_scale_bar": [386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "fontproperti": [386, 388, 389], "borderpad": [386, 388, 389], "size_vert": [386, 388, 389], "label_top": [386, 388, 389], "font": [386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 436, 438, 439], "anchoredoffsetbox": [386, 388, 389], "draw_posit": [386, 388, 389], "brain_color": [387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "frame_ax": [387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "find_cut_coord": [387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "placehold": 387, "classmethod": [387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "init_with_figur": [387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "leave_spac": [387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "bgcolor": [387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "2g": [387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 425, 427, 428, 430, 434, 435, 436, 438, 439], "cbar_vmin": [387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 436], "cbar_vmax": [387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 436], "contour_fil": [387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "add_edg": [387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 480], "n_marker": [387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "left_right": [387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "scale_loc": [387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "leak": [387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "dpi": [387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "inch": [387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "schemat": [389, 422, 427, 431], "glassbrainax": [390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412], "add_graph": [390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412], "linearsegmentedcolormap": [390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 420, 421, 422, 425, 432, 433, 434, 435, 441, 442, 443, 445], "edge_kwarg": [390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422], "node_kwarg": [390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422, 431], "undirect": [390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 406, 408, 410, 412, 422], "draw_cross": [390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 420, 425, 428, 433, 434, 435, 442], "crossbar": [396, 398, 401, 403, 405, 407, 409, 411, 413], "cutax": [403, 405, 407, 409, 411, 413], "baseslic": 415, "img_length": 416, "return_label_nam": 417, "label_hemispher": 417, "n_label": 417, "labels_list": 417, "n_map": 418, "activation_threshold": 419, "tupleof": [420, 421, 422, 425, 427, 428, 431, 433, 434, 435], "ymin": [420, 421, 422, 425, 427, 428, 431, 433, 434, 435], "pronounc": [420, 433, 434, 435, 442], "get_zoom": 421, "matlotlib": 422, "nipy_spectr": 425, "model_ev": 426, "fig_kwarg": 426, "stat_map_img": [427, 435, 442, 443], "destin": [427, 428, 434, 435, 442], "noisier": [427, 428, 434, 435, 442], "ref_img": 429, "src_img": 429, "plot_hist": 429, "superimpos": 429, "nifti_lik": 429, "surf_data": [430, 436, 438, 439, 443, 445, 463, 465], "montag": 430, "node_valu": 431, "listedcolormap": 431, "node_vmin": 431, "node_vmax": 431, "node_threshold": 431, "viridis_r": 431, "auto_fit": 432, "newli": 432, "room": 432, "linkag": 432, "sent": 432, "gist_rainbow": 433, "surf_map": [436, 445], "title_font_s": [436, 438, 439], "orig": [436, 437, 438, 439, 445, 464, 465], "sulc": [436, 437, 438, 439, 445, 463], "underneath": [436, 438, 439, 445], "greyscal": [436, 438, 439, 445], "sharp": [436, 438, 439, 480], "apply_along_axi": [436, 438, 439], "custom_funct": [436, 438, 439], "tab20": 437, "rgba": [437, 444], "3dev": 439, "agg": 440, "emit": 440, "colorbar_height": [441, 443, 445], "colorbar_fonts": [441, 443, 445], "title_fonts": [441, 443, 444, 445], "n_node": [441, 444], "connectomeview": [441, 444], "opac": 442, "th": 442, "opaqu": 442, "html_view": [442, 480], "plane": 442, "surfaceview": [443, 445], "hex": 444, "gnist_ncar": 445, "max_no_improv": 446, "smart": 446, "k_init": 446, "centroid": 446, "mini": 446, "inertia": 446, "reassign": 446, "sizes_": [446, 448], "x_red": [446, 448], "x_inv": [446, 448], "fit_predict": [446, 448], "connectivity_": 447, "valid_method": 447, "eccentr": [448, 454], "n_clusters_": 448, "27mm": [449, 451], "1350mm": [449, 451], "img_valu": 449, "connected_compon": [449, 451], "ly": 449, "min_siz": 450, "new_labels_img": 450, "new_label": 450, "extract_typ": 451, "smooth_arrai": 451, "index_of_each_map": 451, "head_tpl": 457, "head_valu": 457, "html_document": 457, "htmldocument": 457, "get_ifram": 457, "get_standalon": 457, "temporari": 457, "return_label_map": 458, "letter": 458, "label_map": 458, "destination_path": 459, "sampling_r": 460, "padtyp": 460, "odd": 460, "padlen": 460, "n_sourc": 460, "decai": 460, "ring": 460, "sharpen": 460, "filtfilt": 460, "inplac": 460, "filtered_sign": 460, "cleaned_sign": 461, "namedtupl": [464, 465], "neighbourhood": 465, "trilinear": 465, "x20": 465, "regularli": 465, "halfwai": 465, "inward": 465, "surface_mesh": 465, "neighbour": 465, "00e": 466, "12393": 466, "5562": 466, "4a": 466, "11a": 466, "flm": 466, "4176": 466, "2196": 466, "1116": 466, "828": 466, "18a": 466, "19a": 466, "19b": 466, "29a": 466, "6408": 466, "5220": 466, "3c": 466, "1224": [466, 467], "936": 466, "35a": 466, "37a": 466, "37b": 466, "7networks_lh_vis_1": 467, "2797": 467, "7networks_lh_vis_2": 467, "3344": 467, "2494": 467, "7networks_lh_vis_4": 467, "3169": 467, "7networks_lh_vis_5": 467, "3356": 467, "7networks_lh_vis_6": 467, "2827": 467, "7networks_lh_vis_7": 467, "1483": 467, "7networks_lh_vis_8": 467, "3737": 467, "7networks_lh_vis_9": 467, "2637": 467, "7networks_lh_vis_10": 467, "2175": 467, "7networks_lh_vis_11": 467, "2467": 467, "7networks_lh_vis_12": 467, "4236": 467, "7networks_lh_vis_13": 467, "946": 467, "7networks_lh_vis_14": 467, "3087": 467, "7networks_lh_vis_15": 467, "4087": 467, "7networks_lh_vis_16": 467, "1617": 467, "7networks_lh_vis_17": 467, "7networks_lh_vis_18": 467, "3324": 467, "7networks_lh_vis_19": 467, "4720": 467, "7networks_lh_vis_20": 467, "970": 467, "7networks_lh_vis_21": 467, "3735": 467, "7networks_lh_vis_22": 467, "1941": 467, "7networks_lh_vis_23": 467, "4515": 467, "7networks_lh_vis_24": 467, "4743": 467, "7networks_lh_vis_25": 467, "3649": 467, "7networks_lh_vis_26": 467, "7networks_lh_vis_27": 467, "2783": 467, "7networks_lh_vis_28": 467, "1842": 467, "7networks_lh_vis_29": 467, "2650": 467, "7networks_lh_vis_30": 467, "7networks_lh_vis_31": 467, "2043": 467, "7networks_lh_sommot_1": 467, "7networks_lh_sommot_2": 467, "3982": 467, "7networks_lh_sommot_3": 467, "1214": 467, "7networks_lh_sommot_4": 467, "1985": 467, "7networks_lh_sommot_5": 467, "1435": 467, "7networks_lh_sommot_6": 467, "2358": 467, "7networks_lh_sommot_7": 467, "1621": 467, "7networks_lh_sommot_8": 467, "1906": 467, "7networks_lh_sommot_9": 467, "1804": 467, "7networks_lh_sommot_10": 467, "1631": 467, "7networks_lh_sommot_11": 467, "7networks_lh_sommot_12": 467, "2246": 467, "7networks_lh_sommot_13": 467, "1640": 467, "7networks_lh_sommot_14": 467, "1458": 467, "7networks_lh_sommot_15": 467, "7networks_lh_sommot_16": 467, "2388": 467, "7networks_lh_sommot_17": 467, "1389": 467, "7networks_lh_sommot_18": 467, "2531": 467, "7networks_lh_sommot_19": 467, "7networks_lh_sommot_20": 467, "1646": 467, "7networks_lh_sommot_21": 467, "2774": 467, "7networks_lh_sommot_22": 467, "983": 467, "7networks_lh_sommot_23": 467, "1095": 467, "7networks_lh_sommot_24": 467, "1694": 467, "7networks_lh_sommot_25": 467, "7networks_lh_sommot_26": 467, "3730": 467, "7networks_lh_sommot_27": 467, "2757": 467, "7networks_lh_sommot_28": 467, "7networks_lh_sommot_29": 467, "2245": 467, "7networks_lh_sommot_30": 467, "2919": 467, "7networks_lh_sommot_31": 467, "1098": 467, "7networks_lh_sommot_32": 467, "2162": 467, "7networks_lh_sommot_33": 467, "2717": 467, "7networks_lh_sommot_34": 467, "1836": 467, "7networks_lh_sommot_35": 467, "2186": 467, "7networks_lh_sommot_36": 467, "2064": 467, "7networks_lh_sommot_37": 467, "7networks_lh_dorsattn_post_1": 467, "7networks_lh_dorsattn_post_2": 467, "4725": 467, "7networks_lh_dorsattn_post_3": 467, "4434": 467, "7networks_lh_dorsattn_post_4": 467, "2816": 467, "7networks_lh_dorsattn_post_5": 467, "1339": 467, "7networks_lh_dorsattn_post_6": 467, "2465": 467, "7networks_lh_dorsattn_post_7": 467, "2058": 467, "7networks_lh_dorsattn_post_8": 467, "1627": 467, "7networks_lh_dorsattn_post_9": 467, "7networks_lh_dorsattn_post_10": 467, "1261": 467, "7networks_lh_dorsattn_post_11": 467, "2319": 467, "7networks_lh_dorsattn_post_12": 467, "1637": 467, "7networks_lh_dorsattn_post_13": 467, "7networks_lh_dorsattn_post_14": 467, "1671": 467, "7networks_lh_dorsattn_post_15": 467, "2224": 467, "7networks_lh_dorsattn_post_16": 467, "2775": 467, "7networks_lh_dorsattn_post_17": 467, "907": 467, "7networks_lh_dorsattn_fef_1": 467, "2506": 467, "7networks_lh_dorsattn_fef_2": 467, "2945": 467, "7networks_lh_dorsattn_fef_3": 467, "1466": 467, "7networks_lh_dorsattn_fef_4": 467, "3629": 467, "7networks_lh_dorsattn_prcv_1": 467, "2462": 467, "7networks_lh_dorsattn_prcv_2": 467, "7networks_lh_salventattn_paroper_1": 467, "7networks_lh_salventattn_paroper_2": 467, "2243": 467, "7networks_lh_salventattn_paroper_3": 467, "3228": 467, "7networks_lh_salventattn_paroper_4": 467, "2395": 467, "7networks_lh_salventattn_tempocc_1": 467, "7networks_lh_salventattn_froperins_1": 467, "2167": 467, "7networks_lh_salventattn_froperins_2": 467, "3768": 467, "7networks_lh_salventattn_froperins_3": 467, "1619": 467, "7networks_lh_salventattn_froperins_4": 467, "1866": 467, "7networks_lh_salventattn_froperins_5": 467, "1993": 467, "7networks_lh_salventattn_froperins_6": 467, "1122": 467, "7networks_lh_salventattn_froperins_7": 467, "1289": 467, "7networks_lh_salventattn_froperins_8": 467, "2155": 467, "7networks_lh_salventattn_froperins_9": 467, "2617": 467, "7networks_lh_salventattn_pfcl_1": 467, "5177": 467, "7networks_lh_salventattn_med_1": 467, "3120": 467, "7networks_lh_salventattn_med_2": 467, "3040": 467, "7networks_lh_salventattn_med_3": 467, "2278": 467, "7networks_lh_salventattn_med_4": 467, "3132": 467, "7networks_lh_salventattn_med_5": 467, "7networks_lh_salventattn_med_6": 467, "2074": 467, "7networks_lh_salventattn_med_7": 467, "1638": 467, "7networks_lh_limbic_ofc_1": 467, "2446": 467, "7networks_lh_limbic_ofc_2": 467, "4203": 467, "7networks_lh_limbic_ofc_3": 467, "4903": 467, "7networks_lh_limbic_ofc_4": 467, "3084": 467, "7networks_lh_limbic_ofc_5": 467, "3691": 467, "7networks_lh_limbic_temppole_1": 467, "4998": 467, "7networks_lh_limbic_temppole_2": 467, "3186": 467, "7networks_lh_limbic_temppole_3": 467, "2555": 467, "7networks_lh_limbic_temppole_4": 467, "7networks_lh_limbic_temppole_5": 467, "7networks_lh_limbic_temppole_6": 467, "6058": 467, "7networks_lh_limbic_temppole_7": 467, "3392": 467, "7networks_lh_limbic_temppole_8": 467, "1582": 467, "7networks_lh_cont_par_1": 467, "7networks_lh_cont_par_2": 467, "1550": 467, "7networks_lh_cont_par_3": 467, "2478": 467, "7networks_lh_cont_par_4": 467, "2594": 467, "7networks_lh_cont_par_5": 467, "7networks_lh_cont_par_6": 467, "2649": 467, "7networks_lh_cont_temp_1": 467, "3327": 467, "7networks_lh_cont_ofc_1": 467, "2836": 467, "7networks_lh_cont_pfcl_1": 467, "4475": 467, "7networks_lh_cont_pfcl_2": 467, "7networks_lh_cont_pfcl_3": 467, "3717": 467, "7networks_lh_cont_pfcl_4": 467, "3238": 467, "7networks_lh_cont_pfcl_5": 467, "4403": 467, "7networks_lh_cont_pfcl_6": 467, "5773": 467, "7networks_lh_cont_pfcl_7": 467, "1920": 467, "7networks_lh_cont_pfcl_8": 467, "3118": 467, "7networks_lh_cont_pfcv_1": 467, "1372": 467, "7networks_lh_cont_pcun_1": 467, "2110": 467, "7networks_lh_cont_pcun_2": 467, "2037": 467, "7networks_lh_cont_cing_1": 467, "7networks_lh_cont_cing_2": 467, "7networks_lh_cont_pfcmp_1": 467, "3665": 467, "7networks_lh_default_temp_1": 467, "4224": 467, "7networks_lh_default_temp_2": 467, "3593": 467, "7networks_lh_default_temp_3": 467, "4399": 467, "7networks_lh_default_temp_4": 467, "4126": 467, "7networks_lh_default_temp_5": 467, "7networks_lh_default_temp_6": 467, "7networks_lh_default_temp_7": 467, "1869": 467, "7networks_lh_default_temp_8": 467, "1898": 467, "7networks_lh_default_temp_9": 467, "7networks_lh_default_temp_10": 467, "7networks_lh_default_par_1": 467, "2029": 467, "7networks_lh_default_par_2": 467, "7networks_lh_default_par_3": 467, "3700": 467, "7networks_lh_default_par_4": 467, "3710": 467, "7networks_lh_default_par_5": 467, "3037": 467, "7networks_lh_default_par_6": 467, "7networks_lh_default_par_7": 467, "2409": 467, "7networks_lh_default_pfc_1": 467, "3355": 467, "7networks_lh_default_pfc_2": 467, "1808": 467, "7networks_lh_default_pfc_3": 467, "2835": 467, "7networks_lh_default_pfc_4": 467, "3676": 467, "7networks_lh_default_pfc_5": 467, "7networks_lh_default_pfc_6": 467, "2539": 467, "7networks_lh_default_pfc_7": 467, "3115": 467, "7networks_lh_default_pfc_8": 467, "7networks_lh_default_pfc_9": 467, "4263": 467, "7networks_lh_default_pfc_10": 467, "4058": 467, "7networks_lh_default_pfc_11": 467, "2678": 467, "7networks_lh_default_pfc_12": 467, "3642": 467, "7networks_lh_default_pfc_13": 467, "6330": 467, "7networks_lh_default_pfc_14": 467, "3765": 467, "7networks_lh_default_pfc_15": 467, "3346": 467, "7networks_lh_default_pfc_16": 467, "2194": 467, "7networks_lh_default_pfc_17": 467, "4307": 467, "7networks_lh_default_pfc_18": 467, "1905": 467, "7networks_lh_default_pfc_19": 467, "2128": 467, "7networks_lh_default_pfc_20": 467, "3289": 467, "7networks_lh_default_pfc_21": 467, "2234": 467, "7networks_lh_default_pfc_22": 467, "7networks_lh_default_pfc_23": 467, "3089": 467, "7networks_lh_default_pfc_24": 467, "3270": 467, "7networks_lh_default_pcunpcc_1": 467, "1375": 467, "7networks_lh_default_pcunpcc_2": 467, "2153": 467, "7networks_lh_default_pcunpcc_3": 467, "1691": 467, "7networks_lh_default_pcunpcc_4": 467, "7networks_lh_default_pcunpcc_5": 467, "2054": 467, "7networks_lh_default_pcunpcc_6": 467, "2807": 467, "7networks_lh_default_pcunpcc_7": 467, "7networks_lh_default_pcunpcc_8": 467, "1792": 467, "7networks_lh_default_pcunpcc_9": 467, "1539": 467, "7networks_lh_default_pcunpcc_10": 467, "1190": 467, "7networks_lh_default_pcunpcc_11": 467, "7networks_rh_vis_1": 467, "2934": 467, "7networks_rh_vis_2": 467, "7networks_rh_vis_3": 467, "2725": 467, "7networks_rh_vis_4": 467, "3045": 467, "7networks_rh_vis_5": 467, "3603": 467, "7networks_rh_vis_6": 467, "4391": 467, "7networks_rh_vis_7": 467, "1078": 467, "7networks_rh_vis_8": 467, "2207": 467, "7networks_rh_vis_9": 467, "4487": 467, "7networks_rh_vis_10": 467, "2148": 467, "7networks_rh_vis_11": 467, "2630": 467, "7networks_rh_vis_12": 467, "2769": 467, "7networks_rh_vis_13": 467, "3450": 467, "7networks_rh_vis_14": 467, "1730": 467, "7networks_rh_vis_15": 467, "5861": 467, "7networks_rh_vis_16": 467, "5082": 467, "7networks_rh_vis_17": 467, "7networks_rh_vis_18": 467, "3054": 467, "7networks_rh_vis_19": 467, "5048": 467, "7networks_rh_vis_20": 467, "2544": 467, "7networks_rh_vis_21": 467, "2453": 467, "7networks_rh_vis_22": 467, "4590": 467, "7networks_rh_vis_23": 467, "3764": 467, "7networks_rh_vis_24": 467, "7networks_rh_vis_25": 467, "2466": 467, "7networks_rh_vis_26": 467, "7networks_rh_vis_27": 467, "2401": 467, "7networks_rh_vis_28": 467, "7networks_rh_vis_29": 467, "3410": 467, "7networks_rh_vis_30": 467, "2551": 467, "7networks_rh_sommot_1": 467, "3905": 467, "7networks_rh_sommot_2": 467, "7networks_rh_sommot_3": 467, "3460": 467, "7networks_rh_sommot_4": 467, "7networks_rh_sommot_5": 467, "967": 467, "7networks_rh_sommot_6": 467, "832": 467, "7networks_rh_sommot_7": 467, "2511": 467, "7networks_rh_sommot_8": 467, "7networks_rh_sommot_9": 467, "7networks_rh_sommot_10": 467, "1987": 467, "7networks_rh_sommot_11": 467, "1161": 467, "7networks_rh_sommot_12": 467, "7networks_rh_sommot_13": 467, "1355": 467, "7networks_rh_sommot_14": 467, "1396": 467, "7networks_rh_sommot_15": 467, "1257": 467, "7networks_rh_sommot_16": 467, "3751": 467, "7networks_rh_sommot_17": 467, "1974": 467, "7networks_rh_sommot_18": 467, "2033": 467, "7networks_rh_sommot_19": 467, "7networks_rh_sommot_20": 467, "7networks_rh_sommot_21": 467, "7networks_rh_sommot_22": 467, "7networks_rh_sommot_23": 467, "2608": 467, "7networks_rh_sommot_24": 467, "3085": 467, "7networks_rh_sommot_25": 467, "1491": 467, "7networks_rh_sommot_26": 467, "7networks_rh_sommot_27": 467, "7networks_rh_sommot_28": 467, "1917": 467, "7networks_rh_sommot_29": 467, "1577": 467, "7networks_rh_sommot_30": 467, "2239": 467, "7networks_rh_sommot_31": 467, "2031": 467, "7networks_rh_sommot_32": 467, "7networks_rh_sommot_33": 467, "7networks_rh_sommot_34": 467, "1062": 467, "7networks_rh_sommot_35": 467, "1246": 467, "7networks_rh_sommot_36": 467, "1796": 467, "7networks_rh_sommot_37": 467, "1955": 467, "7networks_rh_sommot_38": 467, "2136": 467, "7networks_rh_sommot_39": 467, "2202": 467, "7networks_rh_sommot_40": 467, "1156": 467, "7networks_rh_dorsattn_post_1": 467, "5818": 467, "7networks_rh_dorsattn_post_2": 467, "2743": 467, "7networks_rh_dorsattn_post_3": 467, "2663": 467, "7networks_rh_dorsattn_post_4": 467, "3382": 467, "7networks_rh_dorsattn_post_5": 467, "2181": 467, "7networks_rh_dorsattn_post_6": 467, "1327": 467, "7networks_rh_dorsattn_post_7": 467, "1054": 467, "7networks_rh_dorsattn_post_8": 467, "1789": 467, "7networks_rh_dorsattn_post_9": 467, "1699": 467, "7networks_rh_dorsattn_post_10": 467, "1716": 467, "7networks_rh_dorsattn_post_11": 467, "2379": 467, "7networks_rh_dorsattn_post_12": 467, "2962": 467, "7networks_rh_dorsattn_post_13": 467, "1757": 467, "7networks_rh_dorsattn_post_14": 467, "3113": 467, "7networks_rh_dorsattn_post_15": 467, "7networks_rh_dorsattn_post_16": 467, "3204": 467, "7networks_rh_dorsattn_post_17": 467, "4108": 467, "7networks_rh_dorsattn_post_18": 467, "2070": 467, "7networks_rh_dorsattn_post_19": 467, "2890": 467, "7networks_rh_dorsattn_fef_1": 467, "2588": 467, "7networks_rh_dorsattn_fef_2": 467, "2385": 467, "7networks_rh_dorsattn_fef_3": 467, "1273": 467, "7networks_rh_dorsattn_prcv_1": 467, "3134": 467, "7networks_rh_salventattn_tempoccpar_1": 467, "7networks_rh_salventattn_tempoccpar_2": 467, "1460": 467, "7networks_rh_salventattn_tempoccpar_3": 467, "7networks_rh_salventattn_tempoccpar_4": 467, "7networks_rh_salventattn_tempoccpar_5": 467, "2411": 467, "7networks_rh_salventattn_tempoccpar_6": 467, "2410": 467, "7networks_rh_salventattn_tempoccpar_7": 467, "7networks_rh_salventattn_prc_1": 467, "2561": 467, "7networks_rh_salventattn_froperins_1": 467, "2269": 467, "7networks_rh_salventattn_froperins_2": 467, "2104": 467, "7networks_rh_salventattn_froperins_3": 467, "2053": 467, "7networks_rh_salventattn_froperins_4": 467, "1384": 467, "7networks_rh_salventattn_froperins_5": 467, "3487": 467, "7networks_rh_salventattn_froperins_6": 467, "1230": 467, "7networks_rh_salventattn_froperins_7": 467, "2449": 467, "7networks_rh_salventattn_froperins_8": 467, "2565": 467, "7networks_rh_salventattn_pfcl_1": 467, "5188": 467, "7networks_rh_salventattn_med_1": 467, "4518": 467, "7networks_rh_salventattn_med_2": 467, "3572": 467, "7networks_rh_salventattn_med_3": 467, "1971": 467, "7networks_rh_salventattn_med_4": 467, "1775": 467, "7networks_rh_salventattn_med_5": 467, "1357": 467, "7networks_rh_salventattn_med_6": 467, "1497": 467, "7networks_rh_salventattn_med_7": 467, "2485": 467, "7networks_rh_salventattn_med_8": 467, "1314": 467, "7networks_rh_limbic_ofc_1": 467, "7networks_rh_limbic_ofc_2": 467, "2823": 467, "7networks_rh_limbic_ofc_3": 467, "2986": 467, "7networks_rh_limbic_ofc_4": 467, "1845": 467, "7networks_rh_limbic_ofc_5": 467, "2482": 467, "7networks_rh_limbic_ofc_6": 467, "2598": 467, "7networks_rh_limbic_temppole_1": 467, "5576": 467, "7networks_rh_limbic_temppole_2": 467, "4643": 467, "7networks_rh_limbic_temppole_3": 467, "3160": 467, "7networks_rh_limbic_temppole_4": 467, "3766": 467, "7networks_rh_limbic_temppole_5": 467, "7networks_rh_limbic_temppole_6": 467, "7networks_rh_limbic_temppole_7": 467, "7networks_rh_cont_par_1": 467, "3468": 467, "7networks_rh_cont_par_2": 467, "7networks_rh_cont_par_3": 467, "7networks_rh_cont_par_4": 467, "1395": 467, "7networks_rh_cont_par_5": 467, "1255": 467, "7networks_rh_cont_par_6": 467, "7networks_rh_cont_temp_1": 467, "4452": 467, "7networks_rh_cont_temp_2": 467, "3673": 467, "7networks_rh_cont_pfcv_1": 467, "1673": 467, "7networks_rh_cont_pfcl_1": 467, "7networks_rh_cont_pfcl_2": 467, "4081": 467, "7networks_rh_cont_pfcl_3": 467, "7218": 467, "7networks_rh_cont_pfcl_4": 467, "2277": 467, "7networks_rh_cont_pfcl_5": 467, "5134": 467, "7networks_rh_cont_pfcl_6": 467, "2325": 467, "7networks_rh_cont_pfcl_7": 467, "2242": 467, "7networks_rh_cont_pfcl_8": 467, "3258": 467, "7networks_rh_cont_pfcl_9": 467, "7networks_rh_cont_pfcl_10": 467, "2750": 467, "7networks_rh_cont_pfcl_11": 467, "7networks_rh_cont_pfcl_12": 467, "4138": 467, "7networks_rh_cont_pfcl_13": 467, "2309": 467, "7networks_rh_cont_pfcl_14": 467, "4195": 467, "7networks_rh_cont_pfcl_15": 467, "3527": 467, "7networks_rh_cont_pcun_1": 467, "2471": 467, "7networks_rh_cont_pcun_2": 467, "1704": 467, "7networks_rh_cont_cing_1": 467, "1170": 467, "7networks_rh_cont_cing_2": 467, "7networks_rh_cont_pfcmp_1": 467, "7networks_rh_cont_pfcmp_2": 467, "2635": 467, "7networks_rh_default_par_1": 467, "1570": 467, "7networks_rh_default_par_2": 467, "3763": 467, "7networks_rh_default_par_3": 467, "7networks_rh_default_par_4": 467, "1851": 467, "7networks_rh_default_par_5": 467, "3437": 467, "7networks_rh_default_temp_1": 467, "4435": 467, "7networks_rh_default_temp_2": 467, "4737": 467, "7networks_rh_default_temp_3": 467, "7networks_rh_default_temp_4": 467, "4734": 467, "7networks_rh_default_temp_5": 467, "7networks_rh_default_temp_6": 467, "1215": 467, "7networks_rh_default_temp_7": 467, "7networks_rh_default_temp_8": 467, "2479": 467, "7networks_rh_default_pfcv_1": 467, "2789": 467, "7networks_rh_default_pfcv_2": 467, "7networks_rh_default_pfcv_3": 467, "3995": 467, "7networks_rh_default_pfcv_4": 467, "4172": 467, "7networks_rh_default_pfcdpfcm_1": 467, "5339": 467, "7networks_rh_default_pfcdpfcm_2": 467, "2543": 467, "7networks_rh_default_pfcdpfcm_3": 467, "3908": 467, "7networks_rh_default_pfcdpfcm_4": 467, "4657": 467, "7networks_rh_default_pfcdpfcm_5": 467, "3189": 467, "7networks_rh_default_pfcdpfcm_6": 467, "1335": 467, "7networks_rh_default_pfcdpfcm_7": 467, "2440": 467, "7networks_rh_default_pfcdpfcm_8": 467, "2939": 467, "7networks_rh_default_pfcdpfcm_9": 467, "2274": 467, "7networks_rh_default_pfcdpfcm_10": 467, "3250": 467, "7networks_rh_default_pfcdpfcm_11": 467, "3622": 467, "7networks_rh_default_pfcdpfcm_12": 467, "3086": 467, "7networks_rh_default_pfcdpfcm_13": 467, "3219": 467, "7networks_rh_default_pcunpcc_1": 467, "7networks_rh_default_pcunpcc_2": 467, "7networks_rh_default_pcunpcc_3": 467, "1290": 467, "7networks_rh_default_pcunpcc_4": 467, "2152": 467, "7networks_rh_default_pcunpcc_5": 467, "1397": 467, "7networks_rh_default_pcunpcc_6": 467, "7networks_rh_default_pcunpcc_7": 467, "2047": 467, "7networks_rh_default_pcunpcc_8": 467, "1402": 467, "7networks_rh_default_pcunpcc_9": 467, "1991": 467, "schaefer_2018": 467, "schaefer2018_400parcels_7networks_order_fslmni152_1mm": 467, "91435": 467, "58911": 467, "74432": 467, "63812": 467, "68292": 467, "54584": 467, "68151": 467, "63369": 467, "51633": 467, "39346": 467, "22802": 467, "70012": 467, "79848": 467, "34372": 467, "21449": 467, "91520": 467, "100765": 467, "difumo_atlas": 467, "tour": 480, "canni": 480, "purple_green": 480, "pretty_brain": 480, "rememb": 480, "emb": 480, "surface_plot": 480, "cyan": 480, "orang": 480, "offici": 481, "miniconda": 481, "path_to_new_env": 481, "bat": 481, "prompt": 481, "jitsi": 481, "anyon": 481, "engag": 481, "grad": 483, "biologi": 483, "throughout": 483}, "objects": {"nilearn": [[183, 0, 0, "-", "connectome"], [184, 0, 0, "-", "datasets"], [185, 0, 0, "-", "decoding"], [186, 0, 0, "-", "decomposition"], [227, 0, 0, "-", "experimental"], [468, 0, 0, "-", "glm"], [469, 0, 0, "-", "image"], [471, 0, 0, "-", "interfaces"], [472, 0, 0, "-", "maskers"], [473, 0, 0, "-", "masking"], [474, 0, 0, "-", "mass_univariate"], [475, 0, 0, "-", "plotting"], [476, 0, 0, "-", "regions"], [477, 0, 0, "-", "reporting"], [478, 0, 0, "-", "signal"], [479, 0, 0, "-", "surface"]], "nilearn.connectome": [[228, 1, 1, "", "ConnectivityMeasure"], [229, 1, 1, "", "GroupSparseCovariance"], [230, 1, 1, "", "GroupSparseCovarianceCV"], [231, 3, 1, "", "cov_to_corr"], [232, 3, 1, "", "group_sparse_covariance"], [233, 3, 1, "", "prec_to_partial"], [234, 3, 1, "", "sym_matrix_to_vec"], [235, 3, 1, "", "vec_to_sym_matrix"]], "nilearn.connectome.ConnectivityMeasure": [[228, 2, 1, "", "__init__"], [228, 2, 1, "", "fit"], [228, 2, 1, "", "fit_transform"], [228, 2, 1, "", "get_metadata_routing"], [228, 2, 1, "", "get_params"], [228, 2, 1, "", "inverse_transform"], [228, 2, 1, "", "set_inverse_transform_request"], [228, 2, 1, "", "set_output"], [228, 2, 1, "", "set_params"], [228, 2, 1, "", "set_transform_request"], [228, 2, 1, "", "transform"]], "nilearn.connectome.GroupSparseCovariance": [[229, 2, 1, "", "__init__"], [229, 2, 1, "", "fit"], [229, 2, 1, "", "get_metadata_routing"], [229, 2, 1, "", "get_params"], [229, 2, 1, "", "set_fit_request"], [229, 2, 1, "", "set_params"]], "nilearn.connectome.GroupSparseCovarianceCV": [[230, 2, 1, "", "__init__"], [230, 2, 1, "", "fit"], [230, 2, 1, "", "get_metadata_routing"], [230, 2, 1, "", "get_params"], [230, 2, 1, "", "set_fit_request"], [230, 2, 1, "", "set_params"]], "nilearn.datasets": [[236, 3, 1, "", "fetch_abide_pcp"], [237, 3, 1, "", "fetch_adhd"], [238, 3, 1, "", "fetch_atlas_aal"], [239, 3, 1, "", "fetch_atlas_allen_2011"], [240, 3, 1, "", "fetch_atlas_basc_multiscale_2015"], [241, 3, 1, "", "fetch_atlas_craddock_2012"], [242, 3, 1, "", "fetch_atlas_destrieux_2009"], [243, 3, 1, "", "fetch_atlas_difumo"], [244, 3, 1, "", "fetch_atlas_harvard_oxford"], [245, 3, 1, "", "fetch_atlas_juelich"], [246, 3, 1, "", "fetch_atlas_msdl"], [247, 3, 1, "", "fetch_atlas_pauli_2017"], [248, 3, 1, "", "fetch_atlas_schaefer_2018"], [249, 3, 1, "", "fetch_atlas_smith_2009"], [250, 3, 1, "", "fetch_atlas_surf_destrieux"], [251, 3, 1, "", "fetch_atlas_talairach"], [252, 3, 1, "", "fetch_atlas_yeo_2011"], [253, 3, 1, "", "fetch_bids_langloc_dataset"], [254, 3, 1, "", "fetch_coords_dosenbach_2010"], [255, 3, 1, "", "fetch_coords_power_2011"], [256, 3, 1, "", "fetch_coords_seitzman_2018"], [257, 3, 1, "", "fetch_development_fmri"], [258, 3, 1, "", "fetch_ds000030_urls"], [259, 3, 1, "", "fetch_fiac_first_level"], [260, 3, 1, "", "fetch_haxby"], [261, 3, 1, "", "fetch_icbm152_2009"], [262, 3, 1, "", "fetch_icbm152_brain_gm_mask"], [263, 3, 1, "", "fetch_language_localizer_demo_dataset"], [264, 3, 1, "", "fetch_localizer_button_task"], [265, 3, 1, "", "fetch_localizer_calculation_task"], [266, 3, 1, "", "fetch_localizer_contrasts"], [267, 3, 1, "", "fetch_localizer_first_level"], [268, 3, 1, "", "fetch_megatrawls_netmats"], [269, 3, 1, "", "fetch_mixed_gambles"], [270, 3, 1, "", "fetch_miyawaki2008"], [271, 3, 1, "", "fetch_neurovault"], [272, 3, 1, "", "fetch_neurovault_auditory_computation_task"], [273, 3, 1, "", "fetch_neurovault_ids"], [274, 3, 1, "", "fetch_neurovault_motor_task"], [275, 3, 1, "", "fetch_oasis_vbm"], [276, 3, 1, "", "fetch_openneuro_dataset"], [277, 3, 1, "", "fetch_openneuro_dataset_index"], [278, 3, 1, "", "fetch_spm_auditory"], [279, 3, 1, "", "fetch_spm_multimodal_fmri"], [280, 3, 1, "", "fetch_surf_fsaverage"], [281, 3, 1, "", "fetch_surf_nki_enhanced"], [282, 3, 1, "", "get_data_dirs"], [283, 3, 1, "", "load_mni152_brain_mask"], [284, 3, 1, "", "load_mni152_gm_mask"], [285, 3, 1, "", "load_mni152_gm_template"], [286, 3, 1, "", "load_mni152_template"], [287, 3, 1, "", "load_mni152_wm_mask"], [288, 3, 1, "", "load_mni152_wm_template"], [289, 3, 1, "", "load_sample_motor_activation_image"], [290, 3, 1, "", "patch_openneuro_dataset"], [291, 3, 1, "", "select_from_index"]], "nilearn.decoding": [[292, 1, 1, "", "Decoder"], [293, 1, 1, "", "DecoderRegressor"], [294, 1, 1, "", "FREMClassifier"], [295, 1, 1, "", "FREMRegressor"], [296, 1, 1, "", "SearchLight"], [297, 1, 1, "", "SpaceNetClassifier"], [298, 1, 1, "", "SpaceNetRegressor"]], "nilearn.decoding.Decoder": [[292, 2, 1, "", "__init__"], [292, 2, 1, "", "decision_function"], [292, 2, 1, "", "fit"], [292, 2, 1, "", "get_metadata_routing"], [292, 2, 1, "", "get_params"], [292, 2, 1, "", "predict"], [292, 2, 1, "", "score"], [292, 2, 1, "", "set_fit_request"], [292, 2, 1, "", "set_params"]], "nilearn.decoding.DecoderRegressor": [[293, 2, 1, "", "__init__"], [293, 2, 1, "", "decision_function"], [293, 2, 1, "", "fit"], [293, 2, 1, "", "get_metadata_routing"], [293, 2, 1, "", "get_params"], [293, 2, 1, "", "predict"], [293, 2, 1, "", "score"], [293, 2, 1, "", "set_fit_request"], [293, 2, 1, "", "set_params"]], "nilearn.decoding.FREMClassifier": [[294, 2, 1, "", "__init__"], [294, 2, 1, "", "decision_function"], [294, 2, 1, "", "fit"], [294, 2, 1, "", "get_metadata_routing"], [294, 2, 1, "", "get_params"], [294, 2, 1, "", "predict"], [294, 2, 1, "", "score"], [294, 2, 1, "", "set_fit_request"], [294, 2, 1, "", "set_params"]], "nilearn.decoding.FREMRegressor": [[295, 2, 1, "", "__init__"], [295, 2, 1, "", "decision_function"], [295, 2, 1, "", "fit"], [295, 2, 1, "", "get_metadata_routing"], [295, 2, 1, "", "get_params"], [295, 2, 1, "", "predict"], [295, 2, 1, "", "score"], [295, 2, 1, "", "set_fit_request"], [295, 2, 1, "", "set_params"]], "nilearn.decoding.SearchLight": [[296, 2, 1, "", "__init__"], [296, 2, 1, "", "fit"], [296, 2, 1, "", "get_metadata_routing"], [296, 2, 1, "", "get_params"], [296, 2, 1, "", "set_fit_request"], [296, 2, 1, "", "set_params"]], "nilearn.decoding.SpaceNetClassifier": [[297, 4, 1, "", "SUPPORTED_LOSSES"], [297, 4, 1, "", "SUPPORTED_PENALTIES"], [297, 2, 1, "", "__init__"], [297, 2, 1, "", "check_params"], [297, 2, 1, "", "decision_function"], [297, 2, 1, "", "fit"], [297, 2, 1, "", "get_metadata_routing"], [297, 2, 1, "", "get_params"], [297, 2, 1, "", "predict"], [297, 2, 1, "", "score"], [297, 2, 1, "", "set_fit_request"], [297, 2, 1, "", "set_params"], [297, 2, 1, "", "set_score_request"]], "nilearn.decoding.SpaceNetRegressor": [[298, 4, 1, "", "SUPPORTED_LOSSES"], [298, 4, 1, "", "SUPPORTED_PENALTIES"], [298, 2, 1, "", "__init__"], [298, 2, 1, "", "check_params"], [298, 2, 1, "", "decision_function"], [298, 2, 1, "", "fit"], [298, 2, 1, "", "get_metadata_routing"], [298, 2, 1, "", "get_params"], [298, 2, 1, "", "predict"], [298, 2, 1, "", "score"], [298, 2, 1, "", "set_fit_request"], [298, 2, 1, "", "set_params"], [298, 2, 1, "", "set_score_request"]], "nilearn.decomposition": [[299, 1, 1, "", "CanICA"], [300, 1, 1, "", "DictLearning"]], "nilearn.decomposition.CanICA": [[299, 2, 1, "", "__init__"], [299, 2, 1, "", "fit"], [299, 2, 1, "", "fit_transform"], [299, 2, 1, "", "get_metadata_routing"], [299, 2, 1, "", "get_params"], [299, 2, 1, "", "inverse_transform"], [299, 2, 1, "", "score"], [299, 2, 1, "", "set_fit_request"], [299, 2, 1, "", "set_inverse_transform_request"], [299, 2, 1, "", "set_output"], [299, 2, 1, "", "set_params"], [299, 2, 1, "", "set_score_request"], [299, 2, 1, "", "set_transform_request"], [299, 2, 1, "", "transform"]], "nilearn.decomposition.DictLearning": [[300, 2, 1, "", "__init__"], [300, 2, 1, "", "fit"], [300, 2, 1, "", "fit_transform"], [300, 2, 1, "", "get_metadata_routing"], [300, 2, 1, "", "get_params"], [300, 2, 1, "", "inverse_transform"], [300, 2, 1, "", "score"], [300, 2, 1, "", "set_fit_request"], [300, 2, 1, "", "set_inverse_transform_request"], [300, 2, 1, "", "set_output"], [300, 2, 1, "", "set_params"], [300, 2, 1, "", "set_score_request"], [300, 2, 1, "", "set_transform_request"], [300, 2, 1, "", "transform"]], "nilearn.experimental": [[227, 0, 0, "-", "surface"]], "nilearn.experimental.surface": [[301, 1, 1, "", "FileMesh"], [302, 1, 1, "", "InMemoryMesh"], [303, 1, 1, "", "Mesh"], [304, 4, 1, "", "PolyMesh"], [305, 1, 1, "", "SurfaceImage"], [306, 1, 1, "", "SurfaceLabelsMasker"], [307, 1, 1, "", "SurfaceMasker"], [308, 3, 1, "", "fetch_destrieux"], [309, 3, 1, "", "fetch_nki"], [310, 3, 1, "", "load_fsaverage"]], "nilearn.experimental.surface.FileMesh": [[301, 2, 1, "", "__init__"], [301, 5, 1, "", "coordinates"], [301, 5, 1, "", "faces"], [301, 4, 1, "", "file_path"], [301, 2, 1, "", "loaded"], [301, 4, 1, "", "n_vertices"], [301, 2, 1, "", "to_gifti"]], "nilearn.experimental.surface.InMemoryMesh": [[302, 2, 1, "", "__init__"], [302, 4, 1, "", "coordinates"], [302, 4, 1, "", "faces"], [302, 4, 1, "", "n_vertices"], [302, 2, 1, "", "to_gifti"]], "nilearn.experimental.surface.Mesh": [[303, 2, 1, "", "__init__"], [303, 4, 1, "", "coordinates"], [303, 4, 1, "", "faces"], [303, 4, 1, "", "n_vertices"], [303, 2, 1, "", "to_gifti"]], "nilearn.experimental.surface.SurfaceImage": [[305, 2, 1, "", "__init__"], [305, 4, 1, "", "data"], [305, 4, 1, "", "mesh"], [305, 4, 1, "", "shape"]], "nilearn.experimental.surface.SurfaceLabelsMasker": [[306, 2, 1, "", "__init__"], [306, 2, 1, "", "fit"], [306, 2, 1, "", "fit_transform"], [306, 2, 1, "", "inverse_transform"], [306, 4, 1, "", "label_names"], [306, 4, 1, "", "label_names_"], [306, 4, 1, "", "labels_"], [306, 4, 1, "", "labels_data_"], [306, 4, 1, "", "labels_img"], [306, 2, 1, "", "transform"]], "nilearn.experimental.surface.SurfaceMasker": [[307, 2, 1, "", "__init__"], [307, 2, 1, "", "fit"], [307, 2, 1, "", "fit_transform"], [307, 2, 1, "", "get_metadata_routing"], [307, 2, 1, "", "get_params"], [307, 2, 1, "", "inverse_transform"], [307, 4, 1, "", "mask_img"], [307, 4, 1, "", "mask_img_"], [307, 4, 1, "", "output_dimension_"], [307, 2, 1, "", "set_fit_request"], [307, 2, 1, "", "set_inverse_transform_request"], [307, 2, 1, "", "set_output"], [307, 2, 1, "", "set_params"], [307, 2, 1, "", "set_transform_request"], [307, 2, 1, "", "transform"]], "nilearn.glm": [[311, 1, 1, "", "ARModel"], [312, 1, 1, "", "Contrast"], [313, 1, 1, "", "FContrastResults"], [314, 1, 1, "", "LikelihoodModelResults"], [315, 1, 1, "", "OLSModel"], [316, 1, 1, "", "RegressionResults"], [317, 1, 1, "", "SimpleRegressionResults"], [318, 1, 1, "", "TContrastResults"], [319, 3, 1, "", "cluster_level_inference"], [320, 3, 1, "", "compute_contrast"], [321, 3, 1, "", "compute_fixed_effects"], [322, 3, 1, "", "expression_to_contrast_vector"], [323, 3, 1, "", "fdr_threshold"], [468, 0, 0, "-", "first_level"], [468, 0, 0, "-", "second_level"], [340, 3, 1, "", "threshold_stats_img"]], "nilearn.glm.ARModel": [[311, 2, 1, "", "__init__"], [311, 2, 1, "", "fit"], [311, 2, 1, "", "initialize"], [311, 2, 1, "", "logL"], [311, 2, 1, "", "whiten"]], "nilearn.glm.Contrast": [[312, 2, 1, "", "__init__"], [312, 5, 1, "", "contrast_type"], [312, 2, 1, "", "effect_size"], [312, 2, 1, "", "effect_variance"], [312, 2, 1, "", "one_minus_pvalue"], [312, 2, 1, "", "p_value"], [312, 2, 1, "", "stat"], [312, 2, 1, "", "z_score"]], "nilearn.glm.FContrastResults": [[313, 2, 1, "", "__init__"]], "nilearn.glm.LikelihoodModelResults": [[314, 2, 1, "", "Fcontrast"], [314, 2, 1, "", "Tcontrast"], [314, 2, 1, "", "__init__"], [314, 2, 1, "", "conf_int"], [314, 2, 1, "", "logL"], [314, 2, 1, "", "t"], [314, 2, 1, "", "vcov"]], "nilearn.glm.OLSModel": [[315, 2, 1, "", "__init__"], [315, 2, 1, "", "fit"], [315, 2, 1, "", "initialize"], [315, 2, 1, "", "logL"], [315, 2, 1, "", "whiten"]], "nilearn.glm.RegressionResults": [[316, 2, 1, "", "Fcontrast"], [316, 2, 1, "", "MSE"], [316, 2, 1, "", "SSE"], [316, 2, 1, "", "Tcontrast"], [316, 2, 1, "", "__init__"], [316, 2, 1, "", "conf_int"], [316, 2, 1, "", "logL"], [316, 2, 1, "", "normalized_residuals"], [316, 2, 1, "", "predicted"], [316, 2, 1, "", "r_square"], [316, 2, 1, "", "residuals"], [316, 2, 1, "", "t"], [316, 2, 1, "", "vcov"]], "nilearn.glm.SimpleRegressionResults": [[317, 2, 1, "", "Fcontrast"], [317, 2, 1, "", "Tcontrast"], [317, 2, 1, "", "__init__"], [317, 2, 1, "", "conf_int"], [317, 2, 1, "", "logL"], [317, 2, 1, "", "normalized_residuals"], [317, 2, 1, "", "predicted"], [317, 2, 1, "", "residuals"], [317, 2, 1, "", "t"], [317, 2, 1, "", "vcov"]], "nilearn.glm.TContrastResults": [[318, 2, 1, "", "__init__"]], "nilearn.glm.first_level": [[324, 1, 1, "", "FirstLevelModel"], [325, 3, 1, "", "check_design_matrix"], [326, 3, 1, "", "compute_regressor"], [327, 3, 1, "", "first_level_from_bids"], [328, 3, 1, "", "glover_dispersion_derivative"], [329, 3, 1, "", "glover_hrf"], [330, 3, 1, "", "glover_time_derivative"], [331, 3, 1, "", "make_first_level_design_matrix"], [332, 3, 1, "", "mean_scaling"], [333, 3, 1, "", "run_glm"], [334, 3, 1, "", "spm_dispersion_derivative"], [335, 3, 1, "", "spm_hrf"], [336, 3, 1, "", "spm_time_derivative"]], "nilearn.glm.first_level.FirstLevelModel": [[324, 2, 1, "", "__init__"], [324, 2, 1, "", "compute_contrast"], [324, 2, 1, "", "fit"], [324, 2, 1, "", "fit_transform"], [324, 2, 1, "", "generate_report"], [324, 2, 1, "", "get_metadata_routing"], [324, 2, 1, "", "get_params"], [324, 2, 1, "", "predicted"], [324, 2, 1, "", "r_square"], [324, 2, 1, "", "residuals"], [324, 5, 1, "", "scaling_axis"], [324, 2, 1, "", "set_fit_request"], [324, 2, 1, "", "set_output"], [324, 2, 1, "", "set_params"]], "nilearn.glm.second_level": [[337, 1, 1, "", "SecondLevelModel"], [338, 3, 1, "", "make_second_level_design_matrix"], [339, 3, 1, "", "non_parametric_inference"]], "nilearn.glm.second_level.SecondLevelModel": [[337, 2, 1, "", "__init__"], [337, 2, 1, "", "compute_contrast"], [337, 2, 1, "", "fit"], [337, 2, 1, "", "fit_transform"], [337, 2, 1, "", "generate_report"], [337, 2, 1, "", "get_metadata_routing"], [337, 2, 1, "", "get_params"], [337, 2, 1, "", "predicted"], [337, 2, 1, "", "r_square"], [337, 2, 1, "", "residuals"], [337, 2, 1, "", "set_fit_request"], [337, 2, 1, "", "set_output"], [337, 2, 1, "", "set_params"]], "nilearn.image": [[341, 3, 1, "", "binarize_img"], [342, 3, 1, "", "clean_img"], [343, 3, 1, "", "concat_imgs"], [344, 3, 1, "", "coord_transform"], [345, 3, 1, "", "copy_img"], [346, 3, 1, "", "crop_img"], [347, 3, 1, "", "get_data"], [348, 3, 1, "", "high_variance_confounds"], [349, 3, 1, "", "index_img"], [350, 3, 1, "", "iter_img"], [351, 3, 1, "", "largest_connected_component_img"], [352, 3, 1, "", "load_img"], [353, 3, 1, "", "math_img"], [354, 3, 1, "", "mean_img"], [355, 3, 1, "", "new_img_like"], [356, 3, 1, "", "reorder_img"], [357, 3, 1, "", "resample_img"], [358, 3, 1, "", "resample_to_img"], [359, 3, 1, "", "smooth_img"], [360, 3, 1, "", "swap_img_hemispheres"], [361, 3, 1, "", "threshold_img"]], "nilearn.interfaces": [[471, 0, 0, "-", "bids"], [471, 0, 0, "-", "fmriprep"], [471, 0, 0, "-", "fsl"]], "nilearn.interfaces.bids": [[362, 3, 1, "", "get_bids_files"], [363, 3, 1, "", "parse_bids_filename"], [364, 3, 1, "", "save_glm_to_bids"]], "nilearn.interfaces.fmriprep": [[365, 3, 1, "", "load_confounds"], [366, 3, 1, "", "load_confounds_strategy"]], "nilearn.interfaces.fsl": [[367, 3, 1, "", "get_design_from_fslmat"]], "nilearn.maskers": [[368, 1, 1, "", "BaseMasker"], [369, 1, 1, "", "MultiNiftiLabelsMasker"], [370, 1, 1, "", "MultiNiftiMapsMasker"], [371, 1, 1, "", "MultiNiftiMasker"], [372, 1, 1, "", "NiftiLabelsMasker"], [373, 1, 1, "", "NiftiMapsMasker"], [374, 1, 1, "", "NiftiMasker"], [375, 1, 1, "", "NiftiSpheresMasker"]], "nilearn.maskers.BaseMasker": [[368, 2, 1, "", "__init__"], [368, 2, 1, "", "fit_transform"], [368, 2, 1, "", "get_metadata_routing"], [368, 2, 1, "", "get_params"], [368, 2, 1, "", "inverse_transform"], [368, 2, 1, "", "set_output"], [368, 2, 1, "", "set_params"], [368, 2, 1, "", "set_transform_request"], [368, 2, 1, "", "transform"], [368, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[369, 2, 1, "", "__init__"], [369, 2, 1, "", "fit"], [369, 2, 1, "", "fit_transform"], [369, 2, 1, "", "generate_report"], [369, 2, 1, "", "get_metadata_routing"], [369, 2, 1, "", "get_params"], [369, 2, 1, "", "inverse_transform"], [369, 2, 1, "", "set_fit_request"], [369, 2, 1, "", "set_inverse_transform_request"], [369, 2, 1, "", "set_output"], [369, 2, 1, "", "set_params"], [369, 2, 1, "", "set_transform_request"], [369, 2, 1, "", "transform"], [369, 2, 1, "", "transform_imgs"], [369, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMapsMasker": [[370, 2, 1, "", "__init__"], [370, 2, 1, "", "fit"], [370, 2, 1, "", "fit_transform"], [370, 2, 1, "", "generate_report"], [370, 2, 1, "", "get_metadata_routing"], [370, 2, 1, "", "get_params"], [370, 2, 1, "", "inverse_transform"], [370, 2, 1, "", "set_fit_request"], [370, 2, 1, "", "set_inverse_transform_request"], [370, 2, 1, "", "set_output"], [370, 2, 1, "", "set_params"], [370, 2, 1, "", "set_transform_request"], [370, 2, 1, "", "transform"], [370, 2, 1, "", "transform_imgs"], [370, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMasker": [[371, 2, 1, "", "__init__"], [371, 2, 1, "", "fit"], [371, 2, 1, "", "fit_transform"], [371, 2, 1, "", "generate_report"], [371, 2, 1, "", "get_metadata_routing"], [371, 2, 1, "", "get_params"], [371, 2, 1, "", "inverse_transform"], [371, 2, 1, "", "set_fit_request"], [371, 2, 1, "", "set_output"], [371, 2, 1, "", "set_params"], [371, 2, 1, "", "set_transform_request"], [371, 2, 1, "", "transform"], [371, 2, 1, "", "transform_imgs"], [371, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiLabelsMasker": [[372, 2, 1, "", "__init__"], [372, 2, 1, "", "fit"], [372, 2, 1, "", "fit_transform"], [372, 2, 1, "", "generate_report"], [372, 2, 1, "", "get_metadata_routing"], [372, 2, 1, "", "get_params"], [372, 2, 1, "", "inverse_transform"], [372, 2, 1, "", "set_fit_request"], [372, 2, 1, "", "set_inverse_transform_request"], [372, 2, 1, "", "set_output"], [372, 2, 1, "", "set_params"], [372, 2, 1, "", "set_transform_request"], [372, 2, 1, "", "transform"], [372, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMapsMasker": [[373, 2, 1, "", "__init__"], [373, 2, 1, "", "fit"], [373, 2, 1, "", "fit_transform"], [373, 2, 1, "", "generate_report"], [373, 2, 1, "", "get_metadata_routing"], [373, 2, 1, "", "get_params"], [373, 2, 1, "", "inverse_transform"], [373, 2, 1, "", "set_fit_request"], [373, 2, 1, "", "set_inverse_transform_request"], [373, 2, 1, "", "set_output"], [373, 2, 1, "", "set_params"], [373, 2, 1, "", "set_transform_request"], [373, 2, 1, "", "transform"], [373, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMasker": [[374, 2, 1, "", "__init__"], [374, 2, 1, "", "fit"], [374, 2, 1, "", "fit_transform"], [374, 2, 1, "", "generate_report"], [374, 2, 1, "", "get_metadata_routing"], [374, 2, 1, "", "get_params"], [374, 2, 1, "", "inverse_transform"], [374, 2, 1, "", "set_fit_request"], [374, 2, 1, "", "set_output"], [374, 2, 1, "", "set_params"], [374, 2, 1, "", "set_transform_request"], [374, 2, 1, "", "transform"], [374, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiSpheresMasker": [[375, 2, 1, "", "__init__"], [375, 2, 1, "", "fit"], [375, 2, 1, "", "fit_transform"], [375, 2, 1, "", "generate_report"], [375, 2, 1, "", "get_metadata_routing"], [375, 2, 1, "", "get_params"], [375, 2, 1, "", "inverse_transform"], [375, 2, 1, "", "set_inverse_transform_request"], [375, 2, 1, "", "set_output"], [375, 2, 1, "", "set_params"], [375, 2, 1, "", "set_transform_request"], [375, 2, 1, "", "transform"], [375, 2, 1, "", "transform_single_imgs"]], "nilearn.masking": [[376, 3, 1, "", "apply_mask"], [377, 3, 1, "", "compute_background_mask"], [378, 3, 1, "", "compute_brain_mask"], [379, 3, 1, "", "compute_epi_mask"], [380, 3, 1, "", "compute_multi_background_mask"], [381, 3, 1, "", "compute_multi_brain_mask"], [382, 3, 1, "", "compute_multi_epi_mask"], [383, 3, 1, "", "intersect_masks"], [384, 3, 1, "", "unmask"]], "nilearn.mass_univariate": [[385, 3, 1, "", "permuted_ols"]], "nilearn.plotting": [[475, 0, 0, "-", "displays"], [416, 3, 1, "", "find_cut_slices"], [417, 3, 1, "", "find_parcellation_cut_coords"], [418, 3, 1, "", "find_probabilistic_atlas_cut_coords"], [419, 3, 1, "", "find_xyz_cut_coords"], [420, 3, 1, "", "plot_anat"], [421, 3, 1, "", "plot_carpet"], [422, 3, 1, "", "plot_connectome"], [423, 3, 1, "", "plot_contrast_matrix"], [424, 3, 1, "", "plot_design_matrix"], [425, 3, 1, "", "plot_epi"], [426, 3, 1, "", "plot_event"], [427, 3, 1, "", "plot_glass_brain"], [428, 3, 1, "", "plot_img"], [429, 3, 1, "", "plot_img_comparison"], [430, 3, 1, "", "plot_img_on_surf"], [431, 3, 1, "", "plot_markers"], [432, 3, 1, "", "plot_matrix"], [433, 3, 1, "", "plot_prob_atlas"], [434, 3, 1, "", "plot_roi"], [435, 3, 1, "", "plot_stat_map"], [436, 3, 1, "", "plot_surf"], [437, 3, 1, "", "plot_surf_contours"], [438, 3, 1, "", "plot_surf_roi"], [439, 3, 1, "", "plot_surf_stat_map"], [440, 3, 1, "", "show"], [441, 3, 1, "", "view_connectome"], [442, 3, 1, "", "view_img"], [443, 3, 1, "", "view_img_on_surf"], [444, 3, 1, "", "view_markers"], [445, 3, 1, "", "view_surf"]], "nilearn.plotting.displays": [[386, 1, 1, "", "BaseAxes"], [387, 1, 1, "", "BaseSlicer"], [388, 1, 1, "", "CutAxes"], [389, 1, 1, "", "GlassBrainAxes"], [390, 1, 1, "", "LProjector"], [391, 1, 1, "", "LRProjector"], [392, 1, 1, "", "LYRProjector"], [393, 1, 1, "", "LYRZProjector"], [394, 1, 1, "", "LZRProjector"], [395, 1, 1, "", "LZRYProjector"], [396, 1, 1, "", "MosaicSlicer"], [397, 1, 1, "", "OrthoProjector"], [398, 1, 1, "", "OrthoSlicer"], [399, 1, 1, "", "PlotlySurfaceFigure"], [400, 1, 1, "", "RProjector"], [401, 1, 1, "", "TiledSlicer"], [402, 1, 1, "", "XProjector"], [403, 1, 1, "", "XSlicer"], [404, 1, 1, "", "XZProjector"], [405, 1, 1, "", "XZSlicer"], [406, 1, 1, "", "YProjector"], [407, 1, 1, "", "YSlicer"], [408, 1, 1, "", "YXProjector"], [409, 1, 1, "", "YXSlicer"], [410, 1, 1, "", "YZProjector"], [411, 1, 1, "", "YZSlicer"], [412, 1, 1, "", "ZProjector"], [413, 1, 1, "", "ZSlicer"], [414, 3, 1, "", "get_projector"], [415, 3, 1, "", "get_slicer"]], "nilearn.plotting.displays.BaseAxes": [[386, 2, 1, "", "__init__"], [386, 2, 1, "", "add_object_bounds"], [386, 2, 1, "", "draw_2d"], [386, 2, 1, "", "draw_left_right"], [386, 2, 1, "", "draw_position"], [386, 2, 1, "", "draw_scale_bar"], [386, 2, 1, "", "get_object_bounds"], [386, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.BaseSlicer": [[387, 2, 1, "", "__init__"], [387, 2, 1, "", "add_contours"], [387, 2, 1, "", "add_edges"], [387, 2, 1, "", "add_markers"], [387, 2, 1, "", "add_overlay"], [387, 2, 1, "", "annotate"], [387, 5, 1, "", "black_bg"], [387, 5, 1, "", "brain_color"], [387, 2, 1, "", "close"], [387, 2, 1, "", "find_cut_coords"], [387, 2, 1, "", "init_with_figure"], [387, 2, 1, "", "savefig"], [387, 2, 1, "", "title"]], "nilearn.plotting.displays.CutAxes": [[388, 2, 1, "", "__init__"], [388, 2, 1, "", "add_object_bounds"], [388, 2, 1, "", "draw_2d"], [388, 2, 1, "", "draw_left_right"], [388, 2, 1, "", "draw_position"], [388, 2, 1, "", "draw_scale_bar"], [388, 2, 1, "", "get_object_bounds"], [388, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.GlassBrainAxes": [[389, 2, 1, "", "__init__"], [389, 2, 1, "", "add_object_bounds"], [389, 2, 1, "", "draw_2d"], [389, 2, 1, "", "draw_left_right"], [389, 2, 1, "", "draw_position"], [389, 2, 1, "", "draw_scale_bar"], [389, 2, 1, "", "get_object_bounds"], [389, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.LProjector": [[390, 2, 1, "", "__init__"], [390, 2, 1, "", "add_contours"], [390, 2, 1, "", "add_edges"], [390, 2, 1, "", "add_graph"], [390, 2, 1, "", "add_markers"], [390, 2, 1, "", "add_overlay"], [390, 2, 1, "", "annotate"], [390, 5, 1, "", "black_bg"], [390, 5, 1, "", "brain_color"], [390, 2, 1, "", "close"], [390, 2, 1, "", "draw_cross"], [390, 2, 1, "", "find_cut_coords"], [390, 2, 1, "", "init_with_figure"], [390, 2, 1, "", "savefig"], [390, 2, 1, "", "title"]], "nilearn.plotting.displays.LRProjector": [[391, 2, 1, "", "__init__"], [391, 2, 1, "", "add_contours"], [391, 2, 1, "", "add_edges"], [391, 2, 1, "", "add_graph"], [391, 2, 1, "", "add_markers"], [391, 2, 1, "", "add_overlay"], [391, 2, 1, "", "annotate"], [391, 5, 1, "", "black_bg"], [391, 5, 1, "", "brain_color"], [391, 2, 1, "", "close"], [391, 2, 1, "", "draw_cross"], [391, 2, 1, "", "find_cut_coords"], [391, 2, 1, "", "init_with_figure"], [391, 2, 1, "", "savefig"], [391, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRProjector": [[392, 2, 1, "", "__init__"], [392, 2, 1, "", "add_contours"], [392, 2, 1, "", "add_edges"], [392, 2, 1, "", "add_graph"], [392, 2, 1, "", "add_markers"], [392, 2, 1, "", "add_overlay"], [392, 2, 1, "", "annotate"], [392, 5, 1, "", "black_bg"], [392, 5, 1, "", "brain_color"], [392, 2, 1, "", "close"], [392, 2, 1, "", "draw_cross"], [392, 2, 1, "", "find_cut_coords"], [392, 2, 1, "", "init_with_figure"], [392, 2, 1, "", "savefig"], [392, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRZProjector": [[393, 2, 1, "", "__init__"], [393, 2, 1, "", "add_contours"], [393, 2, 1, "", "add_edges"], [393, 2, 1, "", "add_graph"], [393, 2, 1, "", "add_markers"], [393, 2, 1, "", "add_overlay"], [393, 2, 1, "", "annotate"], [393, 5, 1, "", "black_bg"], [393, 5, 1, "", "brain_color"], [393, 2, 1, "", "close"], [393, 2, 1, "", "draw_cross"], [393, 2, 1, "", "find_cut_coords"], [393, 2, 1, "", "init_with_figure"], [393, 2, 1, "", "savefig"], [393, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRProjector": [[394, 2, 1, "", "__init__"], [394, 2, 1, "", "add_contours"], [394, 2, 1, "", "add_edges"], [394, 2, 1, "", "add_graph"], [394, 2, 1, "", "add_markers"], [394, 2, 1, "", "add_overlay"], [394, 2, 1, "", "annotate"], [394, 5, 1, "", "black_bg"], [394, 5, 1, "", "brain_color"], [394, 2, 1, "", "close"], [394, 2, 1, "", "draw_cross"], [394, 2, 1, "", "find_cut_coords"], [394, 2, 1, "", "init_with_figure"], [394, 2, 1, "", "savefig"], [394, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRYProjector": [[395, 2, 1, "", "__init__"], [395, 2, 1, "", "add_contours"], [395, 2, 1, "", "add_edges"], [395, 2, 1, "", "add_graph"], [395, 2, 1, "", "add_markers"], [395, 2, 1, "", "add_overlay"], [395, 2, 1, "", "annotate"], [395, 5, 1, "", "black_bg"], [395, 5, 1, "", "brain_color"], [395, 2, 1, "", "close"], [395, 2, 1, "", "draw_cross"], [395, 2, 1, "", "find_cut_coords"], [395, 2, 1, "", "init_with_figure"], [395, 2, 1, "", "savefig"], [395, 2, 1, "", "title"]], "nilearn.plotting.displays.MosaicSlicer": [[396, 2, 1, "", "__init__"], [396, 2, 1, "", "add_contours"], [396, 2, 1, "", "add_edges"], [396, 2, 1, "", "add_markers"], [396, 2, 1, "", "add_overlay"], [396, 2, 1, "", "annotate"], [396, 5, 1, "", "black_bg"], [396, 5, 1, "", "brain_color"], [396, 2, 1, "", "close"], [396, 2, 1, "", "draw_cross"], [396, 2, 1, "", "find_cut_coords"], [396, 2, 1, "", "init_with_figure"], [396, 2, 1, "", "savefig"], [396, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoProjector": [[397, 2, 1, "", "__init__"], [397, 2, 1, "", "add_contours"], [397, 2, 1, "", "add_edges"], [397, 2, 1, "", "add_graph"], [397, 2, 1, "", "add_markers"], [397, 2, 1, "", "add_overlay"], [397, 2, 1, "", "annotate"], [397, 5, 1, "", "black_bg"], [397, 5, 1, "", "brain_color"], [397, 2, 1, "", "close"], [397, 2, 1, "", "draw_cross"], [397, 2, 1, "", "find_cut_coords"], [397, 2, 1, "", "init_with_figure"], [397, 2, 1, "", "savefig"], [397, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoSlicer": [[398, 2, 1, "", "__init__"], [398, 2, 1, "", "add_contours"], [398, 2, 1, "", "add_edges"], [398, 2, 1, "", "add_markers"], [398, 2, 1, "", "add_overlay"], [398, 2, 1, "", "annotate"], [398, 5, 1, "", "black_bg"], [398, 5, 1, "", "brain_color"], [398, 2, 1, "", "close"], [398, 2, 1, "", "draw_cross"], [398, 2, 1, "", "find_cut_coords"], [398, 2, 1, "", "init_with_figure"], [398, 2, 1, "", "savefig"], [398, 2, 1, "", "title"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[399, 2, 1, "", "__init__"], [399, 2, 1, "", "savefig"], [399, 2, 1, "", "show"]], "nilearn.plotting.displays.RProjector": [[400, 2, 1, "", "__init__"], [400, 2, 1, "", "add_contours"], [400, 2, 1, "", "add_edges"], [400, 2, 1, "", "add_graph"], [400, 2, 1, "", "add_markers"], [400, 2, 1, "", "add_overlay"], [400, 2, 1, "", "annotate"], [400, 5, 1, "", "black_bg"], [400, 5, 1, "", "brain_color"], [400, 2, 1, "", "close"], [400, 2, 1, "", "draw_cross"], [400, 2, 1, "", "find_cut_coords"], [400, 2, 1, "", "init_with_figure"], [400, 2, 1, "", "savefig"], [400, 2, 1, "", "title"]], "nilearn.plotting.displays.TiledSlicer": [[401, 2, 1, "", "__init__"], [401, 2, 1, "", "add_contours"], [401, 2, 1, "", "add_edges"], [401, 2, 1, "", "add_markers"], [401, 2, 1, "", "add_overlay"], [401, 2, 1, "", "annotate"], [401, 5, 1, "", "black_bg"], [401, 5, 1, "", "brain_color"], [401, 2, 1, "", "close"], [401, 2, 1, "", "draw_cross"], [401, 2, 1, "", "find_cut_coords"], [401, 2, 1, "", "init_with_figure"], [401, 2, 1, "", "savefig"], [401, 2, 1, "", "title"]], "nilearn.plotting.displays.XProjector": [[402, 2, 1, "", "__init__"], [402, 2, 1, "", "add_contours"], [402, 2, 1, "", "add_edges"], [402, 2, 1, "", "add_graph"], [402, 2, 1, "", "add_markers"], [402, 2, 1, "", "add_overlay"], [402, 2, 1, "", "annotate"], [402, 5, 1, "", "black_bg"], [402, 5, 1, "", "brain_color"], [402, 2, 1, "", "close"], [402, 2, 1, "", "draw_cross"], [402, 2, 1, "", "find_cut_coords"], [402, 2, 1, "", "init_with_figure"], [402, 2, 1, "", "savefig"], [402, 2, 1, "", "title"]], "nilearn.plotting.displays.XSlicer": [[403, 2, 1, "", "__init__"], [403, 2, 1, "", "add_contours"], [403, 2, 1, "", "add_edges"], [403, 2, 1, "", "add_markers"], [403, 2, 1, "", "add_overlay"], [403, 2, 1, "", "annotate"], [403, 5, 1, "", "black_bg"], [403, 5, 1, "", "brain_color"], [403, 2, 1, "", "close"], [403, 2, 1, "", "draw_cross"], [403, 2, 1, "", "find_cut_coords"], [403, 2, 1, "", "init_with_figure"], [403, 2, 1, "", "savefig"], [403, 2, 1, "", "title"]], "nilearn.plotting.displays.XZProjector": [[404, 2, 1, "", "__init__"], [404, 2, 1, "", "add_contours"], [404, 2, 1, "", "add_edges"], [404, 2, 1, "", "add_graph"], [404, 2, 1, "", "add_markers"], [404, 2, 1, "", "add_overlay"], [404, 2, 1, "", "annotate"], [404, 5, 1, "", "black_bg"], [404, 5, 1, "", "brain_color"], [404, 2, 1, "", "close"], [404, 2, 1, "", "draw_cross"], [404, 2, 1, "", "find_cut_coords"], [404, 2, 1, "", "init_with_figure"], [404, 2, 1, "", "savefig"], [404, 2, 1, "", "title"]], "nilearn.plotting.displays.XZSlicer": [[405, 2, 1, "", "__init__"], [405, 2, 1, "", "add_contours"], [405, 2, 1, "", "add_edges"], [405, 2, 1, "", "add_markers"], [405, 2, 1, "", "add_overlay"], [405, 2, 1, "", "annotate"], [405, 5, 1, "", "black_bg"], [405, 5, 1, "", "brain_color"], [405, 2, 1, "", "close"], [405, 2, 1, "", "draw_cross"], [405, 2, 1, "", "find_cut_coords"], [405, 2, 1, "", "init_with_figure"], [405, 2, 1, "", "savefig"], [405, 2, 1, "", "title"]], "nilearn.plotting.displays.YProjector": [[406, 2, 1, "", "__init__"], [406, 2, 1, "", "add_contours"], [406, 2, 1, "", "add_edges"], [406, 2, 1, "", "add_graph"], [406, 2, 1, "", "add_markers"], [406, 2, 1, "", "add_overlay"], [406, 2, 1, "", "annotate"], [406, 5, 1, "", "black_bg"], [406, 5, 1, "", "brain_color"], [406, 2, 1, "", "close"], [406, 2, 1, "", "draw_cross"], [406, 2, 1, "", "find_cut_coords"], [406, 2, 1, "", "init_with_figure"], [406, 2, 1, "", "savefig"], [406, 2, 1, "", "title"]], "nilearn.plotting.displays.YSlicer": [[407, 2, 1, "", "__init__"], [407, 2, 1, "", "add_contours"], [407, 2, 1, "", "add_edges"], [407, 2, 1, "", "add_markers"], [407, 2, 1, "", "add_overlay"], [407, 2, 1, "", "annotate"], [407, 5, 1, "", "black_bg"], [407, 5, 1, "", "brain_color"], [407, 2, 1, "", "close"], [407, 2, 1, "", "draw_cross"], [407, 2, 1, "", "find_cut_coords"], [407, 2, 1, "", "init_with_figure"], [407, 2, 1, "", "savefig"], [407, 2, 1, "", "title"]], "nilearn.plotting.displays.YXProjector": [[408, 2, 1, "", "__init__"], [408, 2, 1, "", "add_contours"], [408, 2, 1, "", "add_edges"], [408, 2, 1, "", "add_graph"], [408, 2, 1, "", "add_markers"], [408, 2, 1, "", "add_overlay"], [408, 2, 1, "", "annotate"], [408, 5, 1, "", "black_bg"], [408, 5, 1, "", "brain_color"], [408, 2, 1, "", "close"], [408, 2, 1, "", "draw_cross"], [408, 2, 1, "", "find_cut_coords"], [408, 2, 1, "", "init_with_figure"], [408, 2, 1, "", "savefig"], [408, 2, 1, "", "title"]], "nilearn.plotting.displays.YXSlicer": [[409, 2, 1, "", "__init__"], [409, 2, 1, "", "add_contours"], [409, 2, 1, "", "add_edges"], [409, 2, 1, "", "add_markers"], [409, 2, 1, "", "add_overlay"], [409, 2, 1, "", "annotate"], [409, 5, 1, "", "black_bg"], [409, 5, 1, "", "brain_color"], [409, 2, 1, "", "close"], [409, 2, 1, "", "draw_cross"], [409, 2, 1, "", "find_cut_coords"], [409, 2, 1, "", "init_with_figure"], [409, 2, 1, "", "savefig"], [409, 2, 1, "", "title"]], "nilearn.plotting.displays.YZProjector": [[410, 2, 1, "", "__init__"], [410, 2, 1, "", "add_contours"], [410, 2, 1, "", "add_edges"], [410, 2, 1, "", "add_graph"], [410, 2, 1, "", "add_markers"], [410, 2, 1, "", "add_overlay"], [410, 2, 1, "", "annotate"], [410, 5, 1, "", "black_bg"], [410, 5, 1, "", "brain_color"], [410, 2, 1, "", "close"], [410, 2, 1, "", "draw_cross"], [410, 2, 1, "", "find_cut_coords"], [410, 2, 1, "", "init_with_figure"], [410, 2, 1, "", "savefig"], [410, 2, 1, "", "title"]], "nilearn.plotting.displays.YZSlicer": [[411, 2, 1, "", "__init__"], [411, 2, 1, "", "add_contours"], [411, 2, 1, "", "add_edges"], [411, 2, 1, "", "add_markers"], [411, 2, 1, "", "add_overlay"], [411, 2, 1, "", "annotate"], [411, 5, 1, "", "black_bg"], [411, 5, 1, "", "brain_color"], [411, 2, 1, "", "close"], [411, 2, 1, "", "draw_cross"], [411, 2, 1, "", "find_cut_coords"], [411, 2, 1, "", "init_with_figure"], [411, 2, 1, "", "savefig"], [411, 2, 1, "", "title"]], "nilearn.plotting.displays.ZProjector": [[412, 2, 1, "", "__init__"], [412, 2, 1, "", "add_contours"], [412, 2, 1, "", "add_edges"], [412, 2, 1, "", "add_graph"], [412, 2, 1, "", "add_markers"], [412, 2, 1, "", "add_overlay"], [412, 2, 1, "", "annotate"], [412, 5, 1, "", "black_bg"], [412, 5, 1, "", "brain_color"], [412, 2, 1, "", "close"], [412, 2, 1, "", "draw_cross"], [412, 2, 1, "", "find_cut_coords"], [412, 2, 1, "", "init_with_figure"], [412, 2, 1, "", "savefig"], [412, 2, 1, "", "title"]], "nilearn.plotting.displays.ZSlicer": [[413, 2, 1, "", "__init__"], [413, 2, 1, "", "add_contours"], [413, 2, 1, "", "add_edges"], [413, 2, 1, "", "add_markers"], [413, 2, 1, "", "add_overlay"], [413, 2, 1, "", "annotate"], [413, 5, 1, "", "black_bg"], [413, 5, 1, "", "brain_color"], [413, 2, 1, "", "close"], [413, 2, 1, "", "draw_cross"], [413, 2, 1, "", "find_cut_coords"], [413, 2, 1, "", "init_with_figure"], [413, 2, 1, "", "savefig"], [413, 2, 1, "", "title"]], "nilearn.regions": [[446, 1, 1, "", "HierarchicalKMeans"], [447, 1, 1, "", "Parcellations"], [448, 1, 1, "", "ReNA"], [449, 1, 1, "", "RegionExtractor"], [450, 3, 1, "", "connected_label_regions"], [451, 3, 1, "", "connected_regions"], [452, 3, 1, "", "img_to_signals_labels"], [453, 3, 1, "", "img_to_signals_maps"], [454, 3, 1, "", "recursive_neighbor_agglomeration"], [455, 3, 1, "", "signals_to_img_labels"], [456, 3, 1, "", "signals_to_img_maps"]], "nilearn.regions.HierarchicalKMeans": [[446, 2, 1, "", "__init__"], [446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "fit_transform"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "inverse_transform"], [446, 2, 1, "", "set_inverse_transform_request"], [446, 2, 1, "", "set_output"], [446, 2, 1, "", "set_params"], [446, 2, 1, "", "transform"]], "nilearn.regions.Parcellations": [[447, 4, 1, "", "VALID_METHODS"], [447, 2, 1, "", "__init__"], [447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_transform"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "inverse_transform"], [447, 2, 1, "", "score"], [447, 2, 1, "", "set_fit_request"], [447, 2, 1, "", "set_inverse_transform_request"], [447, 2, 1, "", "set_output"], [447, 2, 1, "", "set_params"], [447, 2, 1, "", "set_score_request"], [447, 2, 1, "", "set_transform_request"], [447, 2, 1, "", "transform"]], "nilearn.regions.ReNA": [[448, 2, 1, "", "__init__"], [448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "fit_transform"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "inverse_transform"], [448, 2, 1, "", "set_inverse_transform_request"], [448, 2, 1, "", "set_output"], [448, 2, 1, "", "set_params"], [448, 2, 1, "", "transform"]], "nilearn.regions.RegionExtractor": [[449, 2, 1, "", "__init__"], [449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_transform"], [449, 2, 1, "", "generate_report"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "inverse_transform"], [449, 2, 1, "", "set_fit_request"], [449, 2, 1, "", "set_inverse_transform_request"], [449, 2, 1, "", "set_output"], [449, 2, 1, "", "set_params"], [449, 2, 1, "", "set_transform_request"], [449, 2, 1, "", "transform"], [449, 2, 1, "", "transform_single_imgs"]], "nilearn.reporting": [[457, 1, 1, "", "HTMLReport"], [458, 3, 1, "", "get_clusters_table"], [459, 3, 1, "", "make_glm_report"]], "nilearn.reporting.HTMLReport": [[457, 2, 1, "", "__init__"], [457, 2, 1, "", "get_iframe"], [457, 2, 1, "", "get_standalone"], [457, 2, 1, "", "open_in_browser"], [457, 2, 1, "", "resize"], [457, 2, 1, "", "save_as_html"]], "nilearn.signal": [[460, 3, 1, "", "butterworth"], [461, 3, 1, "", "clean"], [462, 3, 1, "", "high_variance_confounds"]], "nilearn.surface": [[463, 3, 1, "", "load_surf_data"], [464, 3, 1, "", "load_surf_mesh"], [465, 3, 1, "", "vol_to_surf"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"]}, "titleterms": {"team": 0, "core": 0, "develop": [0, 48, 49, 50, 51, 58, 98, 197, 481], "other": [0, 21, 165], "contributor": [0, 128, 130, 133, 137, 140, 141, 142, 143, 144, 145, 155], "fund": 0, "cite": 0, "nilearn": [0, 4, 12, 13, 14, 15, 16, 21, 29, 34, 161, 162, 170, 176, 177, 179, 183, 184, 185, 186, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481], "scikit": [0, 35, 97, 110, 116, 165, 182], "learn": [0, 35, 48, 49, 50, 97, 110, 116, 160, 161, 165, 177, 182], "basic": [1, 4, 5, 10, 65, 112], "tutori": [1, 2, 3, 112], "3d": [2, 4, 9, 22, 52, 54, 58, 87, 180, 480], "4d": [2, 21, 116, 180, 181], "niimg": [2, 180], "handl": 2, "visual": [2, 3, 8, 9, 10, 11, 15, 16, 19, 20, 21, 22, 25, 26, 29, 30, 31, 36, 37, 40, 41, 42, 43, 49, 52, 54, 58, 80, 83, 97, 106, 112, 116, 159, 160, 161, 162, 167, 182, 480], "download": [2, 3, 49, 97, 116, 117, 180], "dataset": [2, 6, 11, 15, 16, 17, 18, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 48, 49, 50, 51, 53, 58, 61, 62, 64, 74, 75, 78, 79, 98, 100, 104, 105, 107, 160, 164, 169, 170, 180, 184, 187, 190, 197, 200, 207, 210, 211, 213, 216, 223, 224, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], "from": [2, 3, 11, 15, 16, 24, 26, 28, 33, 39, 40, 41, 48, 49, 50, 56, 58, 62, 88, 90, 93, 97, 99, 104, 105, 112, 116, 117, 157, 166, 180, 181, 182, 471, 472], "internet": [2, 180], "file": [2, 4, 15, 29, 56, 71, 180, 480], "one": [2, 50, 62, 78, 181], "volum": [2, 3, 4, 9, 24, 25, 65, 82, 112, 179, 181, 182, 217], "loop": [2, 3], "all": [2, 14, 162], "through": 2, "select": [2, 97, 117, 156, 162], "A": [3, 4, 44, 65, 110, 157, 162, 172], "introduct": [3, 162, 172, 177], "fmri": [3, 6, 35, 48, 49, 51, 58, 64, 67, 70, 75, 78, 79, 97, 98, 103, 156, 157, 162, 172, 173, 197], "decod": [3, 28, 29, 30, 31, 32, 33, 34, 35, 37, 41, 43, 97, 99, 110, 112, 162, 164, 165, 166, 168, 185, 292, 293, 294, 295, 296, 297, 298], "retriev": [3, 6, 10, 15, 16, 17, 19, 23, 29, 52, 54, 56, 58, 65, 97], "load": [3, 13, 14, 18, 22, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 47, 48, 51, 56, 74, 93, 97, 98, 116, 159, 162, 180, 182, 471], "data": [3, 4, 6, 9, 10, 11, 13, 14, 15, 16, 17, 22, 23, 25, 29, 30, 32, 33, 35, 39, 40, 41, 42, 44, 47, 48, 49, 52, 54, 55, 56, 57, 61, 65, 67, 69, 74, 88, 93, 97, 99, 102, 106, 116, 156, 159, 161, 162, 165, 167, 172, 180, 181, 182, 473, 475, 479], "haxbi": [3, 18, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 97, 162, 164, 207], "studi": [3, 51, 97, 102, 106, 107, 164], "first": [3, 4, 15, 41, 60, 61, 62, 65, 67, 97, 99, 100, 107, 112, 162, 171, 177, 182, 200, 211, 466], "featur": [3, 15, 97, 128, 131, 155, 162, 176, 466], "extract": [3, 23, 25, 33, 47, 50, 51, 52, 53, 54, 55, 56, 58, 61, 68, 86, 87, 88, 90, 156, 157, 160, 161, 171, 181, 182, 472], "matrix": [3, 31, 35, 49, 52, 54, 56, 58, 77, 156, 157, 171], "behavior": [3, 29, 33, 180], "label": [3, 11, 56, 85, 178, 467], "restrict": [3, 36, 37], "analysi": [3, 6, 32, 36, 42, 55, 60, 61, 62, 64, 67, 73, 74, 80, 96, 99, 100, 101, 103, 104, 105, 106, 107, 112, 162, 165, 167, 171, 172, 192, 474], "cat": 3, "face": [3, 29, 30, 31, 36, 37, 101], "support": 3, "vector": 3, "machin": [3, 116, 177], "measur": [3, 47, 97, 162, 165], "predict": [3, 28, 29, 34, 35, 41, 42, 43, 68, 97, 98, 112, 162, 163, 166, 171], "score": [3, 6, 29, 34, 35, 36, 40, 167], "us": [3, 9, 15, 34, 35, 39, 48, 50, 51, 56, 86, 87, 90, 91, 97, 110, 117, 159, 160, 162, 165, 173, 177, 178, 180, 228, 230, 237, 239, 240, 242, 243, 244, 245, 246, 249, 250, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 286, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 304, 305, 306, 307, 308, 309, 312, 319, 320, 321, 324, 326, 327, 331, 333, 337, 338, 339, 340, 342, 343, 344, 347, 348, 349, 350, 352, 353, 354, 355, 357, 358, 359, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 384, 385, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 449, 450, 451, 457, 458, 459, 463, 464, 465, 480], "cross": [3, 29, 34, 35, 97, 102, 162, 165, 167, 169], "valid": [3, 29, 34, 35, 97, 160, 162, 165, 167, 169], "manual": [3, 93, 115, 178, 181], "leav": 3, "out": 3, "implement": 3, "kfold": 3, "inspect": 3, "model": [3, 40, 42, 62, 64, 65, 66, 68, 70, 75, 76, 78, 79, 99, 100, 161, 163, 164, 165, 171, 172, 174, 468], "weight": [3, 31, 97, 162], "turn": [3, 49], "nifti": [3, 55, 180, 181, 467], "imag": [3, 4, 8, 9, 16, 17, 28, 67, 80, 82, 84, 89, 92, 94, 96, 102, 106, 110, 112, 116, 117, 166, 180, 181, 182, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 469, 472, 480], "plot": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 24, 31, 32, 34, 35, 44, 47, 50, 55, 58, 65, 66, 68, 79, 106, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 475, 480], "svm": [3, 29, 97, 162, 165], "what": [3, 51, 98, 155, 170, 172, 177], "i": [3, 51, 98, 172, 177, 180, 182], "chanc": [3, 97, 162, 165], "level": [3, 60, 61, 62, 65, 67, 73, 75, 76, 77, 78, 79, 80, 97, 100, 107, 112, 156, 162, 165, 171, 174, 200, 211, 466], "accuraci": [3, 162], "refer": [3, 22, 23, 31, 32, 37, 38, 40, 41, 44, 47, 48, 49, 51, 56, 58, 69, 70, 71, 75, 97, 98, 99, 101, 117, 156, 157, 159, 160, 161, 162, 163, 164, 167, 168, 169, 175, 177, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 470], "see": [3, 49, 58], "also": [3, 49, 58], "exampl": [4, 33, 39, 44, 63, 66, 67, 70, 76, 77, 91, 100, 107, 109, 112, 117, 156, 157, 159, 161, 162, 167, 168, 176, 177, 181, 182, 228, 230, 237, 239, 240, 242, 243, 244, 245, 246, 249, 250, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 286, 289, 291, 292, 293, 294, 295, 296, 298, 299, 300, 304, 305, 306, 307, 308, 309, 312, 319, 320, 321, 324, 326, 327, 331, 333, 337, 338, 339, 340, 342, 343, 344, 347, 348, 349, 350, 352, 353, 354, 355, 357, 358, 359, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 384, 385, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 449, 450, 451, 457, 458, 459, 463, 464, 465, 466, 467, 480], "manipul": [4, 82, 112, 179, 181, 479], "look": 4, "step": [4, 177, 182], "our": [4, 41], "simpl": [4, 32, 44, 62, 70, 77, 80, 91, 162], "smooth": [4, 65, 94, 181, 182], "glob": [4, 180], "over": [4, 11, 47], "multipl": [4, 9, 15, 156, 172, 174, 182], "save": [4, 15, 55, 62, 480], "result": [4, 9, 29, 32, 50, 53, 79, 80, 116, 159, 160, 161, 162], "numer": [5, 169], "python": [5, 180], "intro": 6, "glm": [6, 33, 60, 70, 73, 112, 172, 173, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 466, 468], "singl": [6, 15, 55, 69], "run": [6, 33, 41, 44, 65, 69, 70, 102, 165], "subject": [6, 51, 53, 55, 62, 69, 78, 156, 161, 182], "The": [6, 35, 56, 65, 85, 162, 168, 182], "specifi": 6, "experiment": [6, 77, 109, 112, 227, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "paradigm": [6, 77, 106], "perform": [6, 55, 61, 67, 80, 97, 162, 164, 165], "detect": 6, "voxel": [6, 42, 43, 55, 74, 93, 167, 174, 181], "signific": [6, 68], "effect": [6, 70], "threshold": [6, 62, 174], "z": [6, 55, 106], "map": [6, 9, 12, 16, 17, 21, 30, 40, 42, 43, 47, 48, 55, 87, 93, 99, 102, 106, 117, 160, 162, 164, 168, 174, 184, 212, 215, 217, 467, 480], "an": [6, 9, 44, 58, 64, 71, 85, 89, 92, 94, 161, 162, 170, 172, 480], "f": [6, 36, 68], "test": [6, 68, 78, 79, 80, 93, 97, 170], "comput": [7, 27, 34, 35, 36, 37, 45, 50, 52, 53, 56, 58, 59, 70, 72, 81, 88, 93, 95, 106, 108, 111, 113, 116, 156, 157, 160, 171, 181, 182, 482], "time": [7, 11, 23, 25, 27, 45, 52, 54, 55, 58, 59, 61, 65, 68, 72, 81, 88, 95, 108, 111, 113, 157, 169, 171, 177, 182, 478, 482], "brain": [8, 13, 14, 16, 19, 25, 28, 40, 42, 47, 48, 49, 50, 51, 56, 58, 82, 90, 96, 98, 112, 157, 159, 160, 161, 166, 179, 181, 472, 475, 480], "make": [9, 16, 32, 170, 178], "surfac": [9, 22, 23, 24, 37, 67, 107, 110, 171, 216, 227, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 463, 464, 465, 479, 480], "statist": [9, 16, 62, 80, 87, 93, 96, 106, 112, 117, 172, 174, 184, 212, 215, 480], "get": [9, 24, 55, 68, 102, 170], "cortic": [9, 22, 37, 480], "mesh": [9, 24, 303, 480], "sampl": [9, 24, 66, 78, 79], "around": [9, 51, 58], "each": [9, 33], "node": 9, "interact": [9, 16, 156, 157, 475, 480], "plotli": 9, "comparison": [9, 164, 172, 174], "atla": [9, 10, 20, 21, 22, 47, 51, 52, 54, 56, 58, 85, 86, 98, 110, 157, 170, 189, 191, 192, 195, 196, 198, 199, 206, 209, 214, 218, 219, 220, 221, 222, 225, 226], "choos": [9, 99, 162, 163], "region": [9, 50, 51, 53, 54, 61, 85, 86, 87, 90, 93, 157, 159, 160, 182, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 476], "outlin": 9, "displai": [9, 14, 15, 52, 53, 54, 56, 58, 78, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 475, 480], "interest": [9, 93], "top": 9, "higher": [9, 65], "resolut": [9, 181, 182], "view": [9, 15], "web": [9, 22, 52, 54, 58], "browser": [9, 22, 52, 54, 58], "impact": [9, 56], "paramet": [9, 34, 61, 63, 65, 66, 67, 85, 97, 99, 156, 163, 165, 182], "harvard": [10, 206], "oxford": [10, 206], "juelich": [10, 209], "contour": [10, 14, 480], "global": [11, 56], "pattern": [11, 44], "carpet": 11, "fetch": [11, 20, 25, 26, 33, 47, 50, 53, 62, 75, 78, 79, 100, 106, 107, 160, 180, 184], "adhd": [11, 61, 190, 466], "deriv": [11, 48, 65, 184], "mask": [11, 16, 18, 25, 32, 36, 41, 65, 88, 93, 97, 102, 116, 162, 165, 167, 181, 182, 376, 377, 378, 379, 380, 381, 382, 383, 384, 473], "base": [11, 23, 32, 37, 42, 43, 56, 67, 74, 99, 107, 160, 171, 174, 217], "separ": [11, 85], "tissu": 11, "type": 11, "matplotlib": [12, 34], "colormap": [12, 480], "color": 12, "glass": [13, 14, 16], "whole": 13, "sagitt": [13, 15], "cut": [13, 15], "black": 13, "background": [13, 17, 88], "hemispher": [13, 14, 67], "option": 14, "demo": [14, 110, 210], "differ": [14, 30, 32, 34, 35, 44, 47, 85, 156, 163, 182, 480], "project": [14, 26, 67, 170, 178], "left": [14, 67], "right": [14, 15, 99, 163], "fill": [14, 480], "both": [14, 70], "more": [15, 17, 165], "tool": [15, 16], "we": [15, 32, 35, 41, 170], "provid": [15, 16], "gener": [15, 16, 33, 44, 61, 62, 70, 71, 74, 76, 102, 114, 184, 468], "purpos": [15, 16], "coron": 15, "axial": 15, "given": [15, 181], "coordin": [15, 47, 58, 157], "number": [15, 169], "5": [15, 17, 133, 140, 141, 142, 155], "onli": [15, 50, 182], "two": [15, 69, 70, 79, 163], "slice": [15, 44, 480], "without": [15, 56, 97, 162, 165], "colorbar": 15, "side": 15, "chang": [15, 17, 65, 97, 123, 124, 125, 126, 127, 128, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 148, 149, 150, 151, 152, 153, 155, 182], "now": [15, 35, 52, 54], "ar": [15, 65], "three": [15, 99], "2x2": 15, "fashion": 15, "along": 15, "row": 15, "column": 15, "anoth": [15, 181], "wai": 15, "limit": 15, "demonstr": 15, "variou": 15, "show": [15, 38, 99, 440], "how": [15, 170, 178, 182], "add_edg": 15, "add_contour": 15, "seed": [15, 23, 55, 58, 61, 170, 182], "add_mark": 15, "annot": [15, 117], "function": [16, 19, 23, 41, 44, 46, 47, 50, 51, 54, 66, 98, 99, 112, 156, 157, 158, 160, 161, 165, 167, 170, 181, 183, 184, 477, 480], "plot_stat_map": [16, 20, 435], "view_img": [16, 442], "plot_glass_brain": [16, 427], "anatom": 16, "plot_anat": [16, 420], "roi": [16, 32, 51, 93, 181], "here": [16, 41], "plot_roi": [16, 434], "epi": [16, 88], "plot_epi": [16, 425], "control": [17, 165, 182], "contrast": [17, 61, 62, 65, 67, 68, 70, 171, 312], "when": [17, 180], "local": [17, 71, 104, 105, 193, 194, 210, 211], "enhanc": [17, 123, 124, 125, 126, 127, 128, 130, 134, 135, 136, 137, 138, 140, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 155, 170, 216], "dim": 17, "0": [17, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155], "decreas": [17, 180], "1": [17, 65, 118, 119, 120, 121, 122, 124, 129, 133, 136, 138, 141, 144, 147, 149, 151, 155], "multiscal": [19, 192], "parcel": [19, 47, 49, 56, 157, 159, 160, 447], "group": [19, 48, 51, 53, 98, 107, 156, 169], "probabilist": [20, 21, 47, 54, 157], "default": [20, 58, 61, 86], "mode": [20, 58, 61, 85, 86, 480], "msdl": [20, 51, 98, 214], "add_overlai": 20, "object": [20, 29, 31, 34, 62, 100, 107, 161, 180, 182], "plot_prob_atla": [20, 433], "atlas": [21, 47, 157, 170, 184, 480], "access": [21, 181, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "fetcher": [22, 170], "connect": [23, 46, 47, 51, 56, 57, 85, 98, 99, 110, 112, 156, 158, 160, 183], "seri": [23, 25, 52, 54, 55, 58, 68, 88, 99, 157, 171, 182, 478], "calcul": [23, 68, 105], "technic": 24, "point": [24, 182], "illustr": 24, "scheme": 24, "build": [24, 33, 35, 40, 54, 93, 116, 157, 170, 178], "cylind": 24, "locat": 24, "which": [24, 159], "vol_to_surf": [24, 465], "would": 24, "draw": 24, "its": 24, "adjust": 24, "neuroimag": [25, 116, 163, 177, 180, 182], "appli": [25, 48, 116, 159, 181, 182], "correspond": [25, 52, 54], "megatrawl": [26, 188], "network": [26, 50, 58, 61, 86, 161, 188], "matric": [26, 53, 63, 99, 160, 182, 188], "human": 26, "connectom": [26, 47, 50, 52, 53, 58, 156, 157, 183, 228, 229, 230, 231, 232, 233, 234, 235, 480], "anova": [29, 34, 97, 162, 165], "v": [29, 30, 31, 36, 101], "hous": [29, 30, 31, 36, 37, 101], "pipelin": [29, 33, 34, 110, 115, 116, 164, 165, 182], "fit": [29, 31, 33, 34, 39, 43, 62, 68, 70, 100, 107, 161, 171, 174], "obtain": [29, 62, 100, 107], "via": 29, "classifi": [30, 167], "train": 30, "frem": [31, 39, 164], "chair": 31, "recognit": [31, 36, 44, 101], "confus": [31, 35], "et": [32, 38, 39, 40, 41], "al": [32, 38, 39, 40, 41], "prepar": [32, 35, 36, 41, 61, 67, 80, 99, 162, 167, 178, 181, 182], "bar": [32, 480], "summar": 32, "after": [33, 88], "signal": [33, 51, 53, 54, 56, 58, 90, 157, 182, 460, 461, 462, 472, 478], "proper": 33, "event": [33, 71, 171], "structur": [33, 57, 168, 170], "instanti": 33, "firstlevelmodel": [33, 62, 100, 107, 324], "report": [33, 58, 61, 62, 70, 74, 170, 457, 458, 459, 466, 467, 477], "set": [34, 70, 163, 165, 167, 170], "respons": [34, 37, 64, 65, 66], "valu": [34, 169], "screen": 34, "percentil": 34, "nest": 34, "multi": [35, 53, 161, 163], "class": [35, 163], "strategi": [35, 56, 162, 182], "barplot": 35, "searchlight": [36, 37, 167, 296], "bold": [37, 172], "stimuli": [38, 40, 41], "jimura": 39, "mix": [39, 164, 212], "gambl": [39, 164, 212], "experi": [39, 116, 162], "tv": 39, "l1": 39, "spacenet": [39, 43, 168], "encod": 40, "miyawaki": [40, 41, 213], "2008": [40, 41, 213], "estim": [40, 44, 57, 58, 61, 62, 65, 67, 75, 76, 78, 79, 97, 100, 162, 163, 165, 169], "recept": 40, "field": 40, "reconstruct": 41, "Then": 41, "defin": [41, 56, 63, 66, 99], "itself": 41, "let": 41, "u": 41, "quantifi": 41, "error": 41, "morphometri": [42, 43, 74, 174, 217], "oasi": [42, 43, 74, 217], "vbm": [42, 43, 74], "bio": 42, "marker": [42, 480], "ag": [42, 51, 74, 98], "mass": [42, 474], "univari": [42, 101, 104, 105, 167, 474], "preprocess": [42, 116, 184, 192, 478], "qualiti": [42, 43, 93], "infer": 42, "massiv": [42, 101, 104, 105, 167], "space": [43, 69, 156], "net": 43, "prior": 43, "simul": [44, 57, 156, 165], "creat": [44, 63, 77, 181], "exercis": [44, 156, 157, 182], "go": [44, 97, 106, 116, 165], "further": [44, 97, 116, 165, 167], "compar": [47, 48, 49, 70, 84, 99, 156, 167], "yeo": [47, 85, 226], "direct": [47, 156], "asymmetr": 47, "iter": [47, 169], "spatial": [48, 164, 168, 181], "ica": [48, 102, 161], "dictionari": [48, 50, 160, 161], "canica": [48, 161, 299], "cluster": [49, 68, 75, 159, 192], "method": [49, 116], "ward": 49, "compress": [49, 159], "represent": [49, 159, 180], "kmean": 49, "hierarch": 49, "those": 49, "rena": [49, 448], "correl": [50, 51, 54, 55, 56, 58, 156, 157], "coeffici": 50, "specif": [50, 70, 117, 181], "classif": [51, 98, 163], "children": 51, "partial": [51, 58], "variabl": 51, "kind": [51, 98], "most": [51, 68, 98], "power": [51, 98, 219], "spars": [52, 53, 156, 169], "invers": [52, 53, 156, 182], "covari": [52, 53, 156, 169], "And": [52, 54], "graph": [52, 54, 58, 157], "precis": 53, "produc": 55, "fisher": 55, "transform": [55, 181, 182], "confound": [56, 65, 182], "remov": [56, 65, 182], "flexibl": 56, "fmriprep": [56, 365, 366, 471], "interfac": [56, 362, 363, 364, 365, 366, 367, 471], "motion": 56, "scrub": 56, "predefin": 56, "sphere": [58, 167, 467], "dmn": 58, "summari": [58, 128, 155, 156, 157, 160, 161, 171, 174], "within": 58, "averag": 58, "strength": 58, "dosenbach": [58, 199], "": [58, 61, 97, 155, 162], "cours": 61, "complet": 62, "bid": [62, 100, 107, 193, 362, 363, 364, 466, 471], "openneuro": 62, "automat": [62, 100, 107, 116, 184], "argument": [62, 100, 107, 182], "output": [62, 117, 180], "disk": 62, "design": [63, 65, 76, 77, 99, 171, 182], "finit": 64, "impul": 64, "fir": 64, "understand": [65, 88, 180, 182], "drift": 65, "hemodynam": 65, "ad": [65, 170, 480], "nois": 65, "ol": 65, "order": 65, "censor": 65, "conclus": 65, "mri": 66, "stimulu": 66, "analys": [67, 74], "residu": [68, 171], "import": [68, 481], "modul": [68, 109, 112, 227], "largest": 68, "actual": 68, "6": [68, 134, 143, 144, 145, 155], "distribut": [68, 178], "r": 68, "squar": 68, "nativ": 69, "up": [70, 115, 167, 170], "initi": [70, 169], "fix": [70, 121, 123, 124, 125, 126, 127, 128, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155], "rang": 70, "across": 70, "tsv": 71, "neurospin": 71, "task": [71, 99, 104, 105], "second": [73, 75, 76, 77, 78, 79, 80, 100, 107, 112, 174, 466], "true": 75, "posit": 75, "proport": 75, "t_map": 78, "unpair": 79, "pair": 79, "some": 80, "t": [80, 87], "affin": [83, 180, 181], "resampl": [83, 88, 92, 181, 182, 469], "mean": 84, "2": [84, 120, 125, 128, 129, 130, 131, 132, 133, 134, 139, 142, 145, 152, 155], "break": 85, "origin": 85, "relabel": 85, "min_siz": 85, "smith": [86, 222], "niftimask": [88, 91, 182, 374], "raw": 88, "mni": 88, "templat": [88, 92, 184, 201, 202, 203, 204, 205, 208], "negat": 89, "math_img": [89, 353], "niftilabelsmask": [90, 182, 372], "find": [93, 167, 177], "thi": 93, "improv": 93, "advanc": [96, 97, 112, 115, 182], "tune": 97, "dummi": 97, "permut": 97, "lean": 97, "svc": 97, "discrimin": 97, "engin": 97, "beta": [99, 135, 140, 155, 162], "your": [99, 116, 170], "standard": 99, "lsa": 99, "aggreg": 99, "condit": 99, "lss": 99, "few": [99, 162], "trial": 99, "approach": [99, 156], "applic": [99, 177], "quick": 100, "saniti": 100, "check": [100, 481], "neurovault": [102, 106, 117, 215], "term": 102, "reshap": 102, "compon": [102, 103, 161, 471], "figur": [102, 475], "multivari": [103, 186], "decomposit": [103, 186, 299, 300], "independ": 103, "motor": 104, "meta": 106, "stop": [106, 169], "success": 106, "minu": 106, "like": [106, 180], "protocol": 106, "combin": 106, "short": 110, "masker": [110, 182, 368, 369, 370, 371, 372, 373, 374, 375, 467, 472], "surfacelabelsmask": [110, 306], "bibliographi": 114, "usag": [115, 182], "scale": [115, 480], "own": 116, "non": 116, "descript": [116, 169, 184], "2d": [116, 181], "arrai": [116, 181], "unmask": [116, 182, 384], "inverse_transform": 116, "repositori": 117, "collect": 117, "filter": [117, 182], "neurosynth": 117, "changelog": [118, 119, 120, 121, 128, 129, 131, 155, 170], "3": [121, 126, 131, 135, 136, 155], "4": [122, 127, 132, 137, 138, 139, 155], "highlight": [122, 123, 125, 126, 127, 135, 136, 137, 140, 143, 146, 147, 148, 149, 150, 152, 155], "10": [123, 124, 125, 126, 127, 155], "new": [123, 124, 125, 126, 128, 130, 131, 132, 133, 140, 141, 142, 143, 146, 147, 148, 149, 150, 152, 153, 155], "1rc1": [124, 155], "bug": [128, 131, 138, 155, 170], "api": [128, 155, 177, 470], "rc": [140, 155], "alpha": [140, 155, 169], "known": [141, 155], "issu": [141, 155, 178], "0rc": [143, 155], "0b0": [143, 155], "0a0": [143, 155], "7": [146, 147, 155], "8": [148, 149, 155], "9": [150, 151, 152, 155], "11": [153, 155], "dev": [153, 155], "page": [156, 157, 160, 161, 171, 174], "full": [156, 157, 162], "rest": [156, 157, 158], "link": [156, 481], "total": 156, "tangent": 156, "maxprob": 157, "state": 158, "movi": [159, 160], "watch": [159, 160], "code": [159, 162, 164, 167, 170, 178, 181, 480], "better": [160, 168, 182], "relat": [161, 168], "interpret": 161, "altern": 161, "2001": 162, "definit": [162, 182], "made": 162, "easi": 162, "good": 162, "choic": 162, "put": 162, "togeth": 162, "dimens": 162, "reduct": 162, "final": 162, "script": 162, "regress": 163, "linear": [163, 468], "bag": 163, "sever": 163, "fast": 164, "ensembl": 164, "regular": 164, "robust": 164, "empir": 164, "increas": 164, "ani": 165, "mvpa": 166, "contain": 167, "inform": 167, "principl": [167, 169], "read": [167, 180], "radiu": 167, "f_score": 167, "spm": [167, 223, 224], "stabil": 169, "execut": 169, "synthet": 169, "criteria": 169, "maximum": 169, "dualiti": 169, "gap": 169, "variat": 169, "norm": 169, "modifi": 169, "criterion": 169, "algorithm": 169, "bound": 169, "grid": 169, "search": 169, "warm": 169, "restart": 169, "contribut": 170, "conduct": 170, "help": [170, 177], "discuss": 170, "idea": 170, "answer": 170, "question": 170, "review": 170, "pull": [170, 178], "request": [170, 178], "do": 170, "decid": 170, "goe": 170, "scope": 170, "who": 170, "decis": 170, "guidelin": 170, "pr": 170, "style": 170, "privat": 170, "html": 170, "css": 170, "pre": 170, "commit": 170, "fixtur": 170, "document": [170, 178], "environ": 170, "instal": [170, 481], "recommend": 170, "addit": 170, "case": [170, 181], "mainten": [170, 178], "hrf": 171, "primer": 172, "analyz": [173, 180], "correct": 174, "glossari": 175, "organ": 178, "close": 178, "polici": 178, "tox": 178, "releas": [178, 481], "stabl": [178, 192], "doc": 178, "upload": 178, "them": 178, "pypi": 178, "deploi": 178, "post": 178, "input": 180, "name": 180, "match": [180, 181], "user": [180, 483], "path": 180, "expans": 180, "open": [180, 182], "nilearn_data": 180, "where": 180, "store": 180, "format": 180, "shape": [180, 181], "memori": 180, "text": 180, "phenotyp": 180, "csv": 180, "panda": 180, "target": 181, "special": 181, "size": 181, "individu": 181, "oper": [181, 476], "concept": 182, "philosophi": 182, "custom": 182, "100": 182, "extra": 182, "cutoff": 182, "common": 182, "dtype": 182, "tempor": 182, "resiz": 182, "niftimapsmask": [182, 373], "multiniftimask": [182, 371], "multiniftilabelsmask": [182, 369], "multiniftimapsmask": [182, 370], "niftispheresmask": [182, 375], "abid": 187, "pcp": 187, "note": [187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "content": [187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 483], "licens": [187, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "hcp": 188, "disclaim": 188, "aal": 189, "allen": 191, "2011": [191, 219, 226], "basc": 192, "bootstrap": 192, "languag": [193, 210], "brainom": 194, "craddock": 195, "2012": 195, "destrieux": 196, "difumo": 198, "2010": 199, "fiac": [200, 466], "fsaverag": 201, "fsaverage3": 202, "fsaverage4": 203, "fsaverage5": 204, "fsaverage6": 205, "icbm": 208, "152": 208, "nki": 216, "pauli": 218, "2007": 218, "schaefer": 220, "2018": [220, 221], "seitzman": 221, "2009": 222, "auditori": 223, "multimod": 224, "talairach": 225, "connectivitymeasur": 228, "groupsparsecovari": 229, "groupsparsecovariancecv": 230, "cov_to_corr": 231, "group_sparse_covari": 232, "prec_to_parti": 233, "sym_matrix_to_vec": 234, "vec_to_sym_matrix": 235, "fetch_abide_pcp": 236, "fetch_adhd": 237, "fetch_atlas_a": 238, "fetch_atlas_allen_2011": 239, "fetch_atlas_basc_multiscale_2015": 240, "fetch_atlas_craddock_2012": 241, "fetch_atlas_destrieux_2009": 242, "fetch_atlas_difumo": 243, "fetch_atlas_harvard_oxford": 244, "fetch_atlas_juelich": 245, "fetch_atlas_msdl": 246, "fetch_atlas_pauli_2017": 247, "fetch_atlas_schaefer_2018": 248, "fetch_atlas_smith_2009": 249, "fetch_atlas_surf_destrieux": 250, "fetch_atlas_talairach": 251, "fetch_atlas_yeo_2011": 252, "fetch_bids_langloc_dataset": 253, "fetch_coords_dosenbach_2010": 254, "fetch_coords_power_2011": 255, "fetch_coords_seitzman_2018": 256, "fetch_development_fmri": 257, "fetch_ds000030_url": 258, "fetch_fiac_first_level": 259, "fetch_haxbi": 260, "fetch_icbm152_2009": 261, "fetch_icbm152_brain_gm_mask": 262, "fetch_language_localizer_demo_dataset": 263, "fetch_localizer_button_task": 264, "fetch_localizer_calculation_task": 265, "fetch_localizer_contrast": 266, "fetch_localizer_first_level": 267, "fetch_megatrawls_netmat": 268, "fetch_mixed_gambl": 269, "fetch_miyawaki2008": 270, "fetch_neurovault": 271, "fetch_neurovault_auditory_computation_task": 272, "fetch_neurovault_id": 273, "fetch_neurovault_motor_task": 274, "fetch_oasis_vbm": 275, "fetch_openneuro_dataset": 276, "fetch_openneuro_dataset_index": 277, "fetch_spm_auditori": 278, "fetch_spm_multimodal_fmri": 279, "fetch_surf_fsaverag": 280, "fetch_surf_nki_enhanc": 281, "get_data_dir": 282, "load_mni152_brain_mask": 283, "load_mni152_gm_mask": 284, "load_mni152_gm_templ": 285, "load_mni152_templ": 286, "load_mni152_wm_mask": 287, "load_mni152_wm_templ": 288, "load_sample_motor_activation_imag": 289, "patch_openneuro_dataset": 290, "select_from_index": 291, "decoderregressor": 293, "fremclassifi": 294, "fremregressor": 295, "spacenetclassifi": 297, "spacenetregressor": 298, "dictlearn": 300, "filemesh": 301, "inmemorymesh": 302, "polymesh": 304, "surfaceimag": 305, "surfacemask": 307, "fetch_destrieux": 308, "fetch_nki": 309, "load_fsaverag": 310, "armodel": 311, "fcontrastresult": 313, "likelihoodmodelresult": 314, "olsmodel": 315, "regressionresult": 316, "simpleregressionresult": 317, "tcontrastresult": 318, "cluster_level_infer": 319, "compute_contrast": 320, "compute_fixed_effect": 321, "expression_to_contrast_vector": 322, "fdr_threshold": 323, "first_level": [324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 468], "check_design_matrix": 325, "compute_regressor": 326, "first_level_from_bid": 327, "glover_dispersion_deriv": 328, "glover_hrf": 329, "glover_time_deriv": 330, "make_first_level_design_matrix": 331, "mean_scal": 332, "run_glm": 333, "spm_dispersion_deriv": 334, "spm_hrf": 335, "spm_time_deriv": 336, "second_level": [337, 338, 339, 468], "secondlevelmodel": 337, "make_second_level_design_matrix": 338, "non_parametric_infer": 339, "threshold_stats_img": 340, "binarize_img": 341, "clean_img": 342, "concat_img": 343, "coord_transform": 344, "copy_img": 345, "crop_img": 346, "get_data": 347, "high_variance_confound": [348, 462], "index_img": 349, "iter_img": 350, "largest_connected_component_img": 351, "load_img": 352, "mean_img": 354, "new_img_lik": 355, "reorder_img": 356, "resample_img": 357, "resample_to_img": 358, "smooth_img": 359, "swap_img_hemispher": 360, "threshold_img": 361, "get_bids_fil": 362, "parse_bids_filenam": 363, "save_glm_to_bid": 364, "load_confound": 365, "load_confounds_strategi": 366, "fsl": [367, 471], "get_design_from_fslmat": 367, "basemask": 368, "apply_mask": 376, "compute_background_mask": 377, "compute_brain_mask": 378, "compute_epi_mask": 379, "compute_multi_background_mask": 380, "compute_multi_brain_mask": 381, "compute_multi_epi_mask": 382, "intersect_mask": 383, "mass_univari": [385, 474], "permuted_ol": 385, "baseax": 386, "baseslic": 387, "cutax": 388, "glassbrainax": 389, "lprojector": 390, "lrprojector": 391, "lyrprojector": 392, "lyrzprojector": 393, "lzrprojector": 394, "lzryprojector": 395, "mosaicslic": 396, "orthoprojector": 397, "orthoslic": 398, "plotlysurfacefigur": 399, "rprojector": 400, "tiledslic": 401, "xprojector": 402, "xslicer": 403, "xzprojector": 404, "xzslicer": 405, "yprojector": 406, "yslicer": 407, "yxprojector": 408, "yxslicer": 409, "yzprojector": 410, "yzslicer": 411, "zprojector": 412, "zslicer": 413, "get_projector": 414, "get_slic": 415, "find_cut_slic": 416, "find_parcellation_cut_coord": 417, "find_probabilistic_atlas_cut_coord": 418, "find_xyz_cut_coord": 419, "plot_carpet": 421, "plot_connectom": 422, "plot_contrast_matrix": 423, "plot_design_matrix": 424, "plot_ev": 426, "plot_img": 428, "plot_img_comparison": 429, "plot_img_on_surf": 430, "plot_mark": 431, "plot_matrix": 432, "plot_surf": 436, "plot_surf_contour": 437, "plot_surf_roi": 438, "plot_surf_stat_map": [439, 480], "view_connectom": 441, "view_img_on_surf": [443, 480], "view_mark": 444, "view_surf": [445, 480], "hierarchicalkmean": 446, "regionextractor": 449, "connected_label_region": 450, "connected_region": 451, "img_to_signals_label": 452, "img_to_signals_map": 453, "recursive_neighbor_agglomer": 454, "signals_to_img_label": 455, "signals_to_img_map": 456, "htmlreport": 457, "get_clusters_t": 458, "make_glm_report": 459, "butterworth": 460, "clean": 461, "load_surf_data": 463, "load_surf_mesh": 464, "process": 469, "util": [469, 473], "avail": 480, "overlai": 480, "edg": 480, "quickstart": 481, "latest": 481, "version": 481, "drop": 481, "hour": 481, "depend": 481, "guid": 483, "tabl": 483}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9, "sphinx": 60}, "alltitles": {"Team": [[0, "team"]], "Core developers": [[0, "core-developers"]], "Other contributors": [[0, "other-contributors"]], "Funding": [[0, "funding"]], "Citing nilearn": [[0, "citing-nilearn"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Basic tutorials": [[1, "basic-tutorials"], [112, "basic-tutorials"]], "3D and 4D niimgs: handling and visualizing": [[2, "d-and-4d-niimgs-handling-and-visualizing"]], "Downloading tutorial datasets from Internet": [[2, "downloading-tutorial-datasets-from-internet"]], "Visualizing a 3D file": [[2, "visualizing-a-3d-file"]], "Visualizing one volume in a 4D file": [[2, "visualizing-one-volume-in-a-4d-file"]], "Looping on all volumes in a 4D file": [[2, "looping-on-all-volumes-in-a-4d-file"]], "Looping through selected volumes in a 4D file": [[2, "looping-through-selected-volumes-in-a-4d-file"]], "A introduction tutorial to fMRI decoding": [[3, "a-introduction-tutorial-to-fmri-decoding"]], "Retrieve and load the fMRI data from the Haxby study": [[3, "retrieve-and-load-the-fmri-data-from-the-haxby-study"], [97, "retrieve-and-load-the-fmri-data-from-the-haxby-study"]], "First download the data": [[3, "first-download-the-data"], [97, "first-download-the-data"]], "Visualizing the fMRI volume": [[3, "visualizing-the-fmri-volume"]], "Feature extraction: from fMRI volumes to a data matrix": [[3, "feature-extraction-from-fmri-volumes-to-a-data-matrix"]], "Load the behavioral labels": [[3, "load-the-behavioral-labels"]], "Restrict the analysis to cats and faces": [[3, "restrict-the-analysis-to-cats-and-faces"]], "Decoding with Support Vector Machine": [[3, "decoding-with-support-vector-machine"]], "Measuring prediction scores using cross-validation": [[3, "measuring-prediction-scores-using-cross-validation"]], "Manually leaving out data": [[3, "manually-leaving-out-data"]], "Implementing a KFold loop": [[3, "implementing-a-kfold-loop"]], "Cross-validation with the decoder": [[3, "cross-validation-with-the-decoder"]], "Inspecting the model weights": [[3, "inspecting-the-model-weights"]], "Turning the weights into a nifti image": [[3, "turning-the-weights-into-a-nifti-image"]], "Plotting the SVM weights": [[3, "plotting-the-svm-weights"]], "What is the chance level accuracy?": [[3, "what-is-the-chance-level-accuracy"]], "References": [[3, "references"], [22, "references"], [23, "references"], [31, "references"], [32, "references"], [37, "references"], [38, "references"], [40, "references"], [41, "references"], [44, "references"], [48, "references"], [49, "references"], [51, "references"], [56, "references"], [58, "references"], [69, "references"], [70, "references"], [71, "references"], [75, "references"], [97, "references"], [98, "references"], [99, "references"], [101, "references"], [117, "references"], [156, null], [156, "references"], [157, null], [157, null], [157, "references"], [159, "references"], [160, null], [160, "references"], [161, null], [161, null], [161, "references"], [162, "references"], [163, "references"], [164, "references"], [167, "references"], [168, "references"], [169, "references"], [175, "references"], [177, "references"], [187, "references"], [188, "references"], [189, "references"], [190, "references"], [191, "references"], [192, "references"], [194, "references"], [195, "references"], [196, "references"], [197, "references"], [198, "references"], [199, "references"], [200, "references"], [201, "references"], [202, "references"], [203, "references"], [204, "references"], [205, "references"], [206, "references"], [207, "references"], [208, "references"], [209, "references"], [210, "references"], [211, "references"], [212, "references"], [213, "references"], [214, "references"], [215, "references"], [216, "references"], [217, "references"], [218, "references"], [219, "references"], [220, "references"], [221, "references"], [222, "references"], [223, "references"], [224, "references"], [225, "references"], [226, "references"]], "See also": [[3, "see-also"], [58, "see-also"]], "Basic nilearn example: manipulating and looking at data": [[4, "basic-nilearn-example-manipulating-and-looking-at-data"]], "A first step: looking at our data": [[4, "a-first-step-looking-at-our-data"]], "Simple image manipulation: smoothing": [[4, "simple-image-manipulation-smoothing"]], "Globbing over multiple 3D volumes": [[4, "globbing-over-multiple-3d-volumes"]], "Saving results to a file": [[4, "saving-results-to-a-file"]], "Basic numerics and plotting with Python": [[5, "basic-numerics-and-plotting-with-python"]], "Intro to GLM Analysis: a single-run, single-subject fMRI dataset": [[6, "intro-to-glm-analysis-a-single-run-single-subject-fmri-dataset"]], "The data": [[6, "the-data"]], "Retrieving the data": [[6, "retrieving-the-data"], [23, "retrieving-the-data"], [65, "retrieving-the-data"]], "Specifying the experimental paradigm": [[6, "specifying-the-experimental-paradigm"]], "Performing the GLM analysis": [[6, "performing-the-glm-analysis"]], "Detecting voxels with significant effects": [[6, "detecting-voxels-with-significant-effects"]], "Plot thresholded z scores map": [[6, "plot-thresholded-z-scores-map"]], "Performing an F-test": [[6, "performing-an-f-test"]], "Computation times": [[7, "computation-times"], [27, "computation-times"], [45, "computation-times"], [59, "computation-times"], [72, "computation-times"], [81, "computation-times"], [95, "computation-times"], [108, "computation-times"], [111, "computation-times"], [113, "computation-times"], [482, "computation-times"]], "Visualization of brain images": [[8, "visualization-of-brain-images"], [112, "visualization-of-brain-images"]], "Making a surface plot of a 3D statistical map": [[9, "making-a-surface-plot-of-a-3d-statistical-map"]], "Get a statistical map": [[9, "get-a-statistical-map"]], "Get a cortical mesh": [[9, "get-a-cortical-mesh"]], "Sample the 3D data around each node of the mesh": [[9, "sample-the-3d-data-around-each-node-of-the-mesh"]], "Plot the result": [[9, "plot-the-result"]], "Interactive plotting with Plotly": [[9, "interactive-plotting-with-plotly"]], "Plot 3D image for comparison": [[9, "plot-3d-image-for-comparison"]], "Use an atlas and choose regions to outline": [[9, "use-an-atlas-and-choose-regions-to-outline"]], "Display outlines of the regions of interest on top of a statistical map": [[9, "display-outlines-of-the-regions-of-interest-on-top-of-a-statistical-map"]], "Plot with higher-resolution mesh": [[9, "plot-with-higher-resolution-mesh"]], "Plot multiple views of the 3D volume on a surface": [[9, "plot-multiple-views-of-the-3d-volume-on-a-surface"]], "3D visualization in a web browser": [[9, "d-visualization-in-a-web-browser"], [22, "d-visualization-in-a-web-browser"], [52, "d-visualization-in-a-web-browser"], [54, "d-visualization-in-a-web-browser"], [58, "d-visualization-in-a-web-browser"]], "Impact of plot parameters on visualization": [[9, "impact-of-plot-parameters-on-visualization"]], "Basic Atlas plotting": [[10, "basic-atlas-plotting"]], "Retrieving the atlas data": [[10, "retrieving-the-atlas-data"]], "Visualizing the Harvard-Oxford atlas": [[10, "visualizing-the-harvard-oxford-atlas"]], "Visualizing the Juelich atlas": [[10, "visualizing-the-juelich-atlas"]], "Visualizing the Harvard-Oxford atlas with contours": [[10, "visualizing-the-harvard-oxford-atlas-with-contours"]], "Visualizing the Juelich atlas with contours": [[10, "visualizing-the-juelich-atlas-with-contours"]], "Visualizing global patterns with a carpet plot": [[11, "visualizing-global-patterns-with-a-carpet-plot"]], "Fetching data from ADHD dataset": [[11, "fetching-data-from-adhd-dataset"]], "Deriving a mask": [[11, "deriving-a-mask"]], "Visualizing global patterns over time": [[11, "visualizing-global-patterns-over-time"]], "Deriving a label-based mask": [[11, "deriving-a-label-based-mask"]], "Visualizing global patterns, separated by tissue type": [[11, "visualizing-global-patterns-separated-by-tissue-type"]], "Matplotlib colormaps in Nilearn": [[12, "matplotlib-colormaps-in-nilearn"]], "Plot color maps": [[12, "plot-color-maps"]], "Plot matplotlib color maps": [[12, "plot-matplotlib-color-maps"]], "Glass brain plotting in nilearn": [[13, "glass-brain-plotting-in-nilearn"]], "Load data": [[13, "load-data"]], "Glass brain plotting: whole brain sagittal cuts": [[13, "glass-brain-plotting-whole-brain-sagittal-cuts"]], "Glass brain plotting: black background": [[13, "glass-brain-plotting-black-background"]], "Glass brain plotting: Hemispheric sagittal cuts": [[13, "glass-brain-plotting-hemispheric-sagittal-cuts"]], "Glass brain plotting in nilearn (all options)": [[14, "glass-brain-plotting-in-nilearn-all-options"]], "Load the data": [[14, "load-the-data"]], "Demo glass brain plotting": [[14, "demo-glass-brain-plotting"]], "Different projections for the left and right hemispheres": [[14, "different-projections-for-the-left-and-right-hemispheres"]], "Demo glass brain plotting with contours and with fillings": [[14, "demo-glass-brain-plotting-with-contours-and-with-fillings"]], "Display contour projections in both hemispheres": [[14, "display-contour-projections-in-both-hemispheres"]], "More plotting tools from nilearn": [[15, "more-plotting-tools-from-nilearn"]], "First, we retrieve data from nilearn provided (general-purpose) datasets": [[15, "first-we-retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Visualizing in - \u2018sagittal\u2019, \u2018coronal\u2019 and \u2018axial\u2019 with given coordinates": [[15, "visualizing-in-sagittal-coronal-and-axial-with-given-coordinates"]], "Visualizing in - single view \u2018axial\u2019 with number of cuts=5": [[15, "visualizing-in-single-view-axial-with-number-of-cuts-5"]], "Visualizing in - single view \u2018sagittal\u2019 with only two slices": [[15, "visualizing-in-single-view-sagittal-with-only-two-slices"]], "Visualizing in - \u2018coronal\u2019 view with single cut": [[15, "visualizing-in-coronal-view-with-single-cut"]], "Visualizing without a colorbar on the right side": [[15, "visualizing-without-a-colorbar-on-the-right-side"]], "Visualize in - two views \u2018sagittal\u2019 and \u2018axial\u2019 with given coordinates": [[15, "visualize-in-two-views-sagittal-and-axial-with-given-coordinates"]], "Changing the views to \u2018coronal\u2019, \u2018sagittal\u2019 views with coordinates": [[15, "changing-the-views-to-coronal-sagittal-views-with-coordinates"]], "Now, views are changed to \u2018coronal\u2019 and \u2018axial\u2019 views with coordinates": [[15, "now-views-are-changed-to-coronal-and-axial-views-with-coordinates"]], "Visualizing three views in 2x2 fashion": [[15, "visualizing-three-views-in-2x2-fashion"]], "Visualizing three views along multiple rows and columns": [[15, "visualizing-three-views-along-multiple-rows-and-columns"]], "Now, changing the number of slices along columns": [[15, "now-changing-the-number-of-slices-along-columns"]], "Now, another way of limiting the number of slices along rows and columns": [[15, "now-another-way-of-limiting-the-number-of-slices-along-rows-and-columns"]], "Demonstrating various display features": [[15, "demonstrating-various-display-features"]], "Showing how to use add_edges": [[15, "showing-how-to-use-add-edges"]], "How to use add_contours": [[15, "how-to-use-add-contours"]], "Plotting seeds using add_markers": [[15, "plotting-seeds-using-add-markers"]], "Annotating plots": [[15, "annotating-plots"]], "Saving plots to file": [[15, "saving-plots-to-file"]], "Plotting tools in nilearn": [[16, "plotting-tools-in-nilearn"]], "Retrieve data from nilearn provided (general-purpose) datasets": [[16, "retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Plotting statistical maps with function plot_stat_map": [[16, "plotting-statistical-maps-with-function-plot-stat-map"]], "Making interactive visualizations with function view_img": [[16, "making-interactive-visualizations-with-function-view-img"]], "Plotting statistical maps in a glass brain with function plot_glass_brain": [[16, "plotting-statistical-maps-in-a-glass-brain-with-function-plot-glass-brain"]], "Plotting anatomical images with function plot_anat": [[16, "plotting-anatomical-images-with-function-plot-anat"]], "Plotting ROIs (here the mask) with function plot_roi": [[16, "plotting-rois-here-the-mask-with-function-plot-roi"]], "Plotting EPI image with function plot_epi": [[16, "plotting-epi-image-with-function-plot-epi"]], "Controlling the contrast of the background when plotting": [[17, "controlling-the-contrast-of-the-background-when-plotting"]], "Retrieve the data: the localizer dataset with contrast maps": [[17, "retrieve-the-data-the-localizer-dataset-with-contrast-maps"]], "Plotting with enhancement of background image with dim=-.5": [[17, "plotting-with-enhancement-of-background-image-with-dim-5"]], "Plotting with no change of contrast in background image with dim=0": [[17, "plotting-with-no-change-of-contrast-in-background-image-with-dim-0"]], "Plotting with decrease of contrast in background image with dim=.5": [[17, "plotting-with-decrease-of-contrast-in-background-image-with-dim-5"]], "Plotting with more decrease in contrast with dim=1": [[17, "plotting-with-more-decrease-in-contrast-with-dim-1"]], "Plot Haxby masks": [[18, "plot-haxby-masks"]], "Load Haxby dataset": [[18, "load-haxby-dataset"], [36, "load-haxby-dataset"], [37, "load-haxby-dataset"]], "Plot the masks": [[18, "plot-the-masks"]], "Visualizing multiscale functional brain parcellations": [[19, "visualizing-multiscale-functional-brain-parcellations"]], "Retrieving multiscale group brain parcellations": [[19, "retrieving-multiscale-group-brain-parcellations"]], "Visualizing brain parcellations": [[19, "visualizing-brain-parcellations"]], "Visualizing a probabilistic atlas: the default mode in the MSDL atlas": [[20, "visualizing-a-probabilistic-atlas-the-default-mode-in-the-msdl-atlas"]], "Fetching Probabilistic atlas - MSDL atlas": [[20, "fetching-probabilistic-atlas-msdl-atlas"]], "Visualizing a probabilistic atlas with plot_stat_map and add_overlay object": [[20, "visualizing-a-probabilistic-atlas-with-plot-stat-map-and-add-overlay-object"]], "Visualizing a probabilistic atlas with plot_prob_atlas": [[20, "visualizing-a-probabilistic-atlas-with-plot-prob-atlas"]], "Visualizing 4D probabilistic atlas maps": [[21, "visualizing-4d-probabilistic-atlas-maps"]], "Other probabilistic atlases accessible with nilearn": [[21, "other-probabilistic-atlases-accessible-with-nilearn"]], "Loading and plotting of a cortical surface atlas": [[22, "loading-and-plotting-of-a-cortical-surface-atlas"]], "Data fetcher": [[22, "data-fetcher"]], "Visualization": [[22, "visualization"], [25, "visualization"], [26, "visualization"], [30, "visualization"], [36, "visualization"], [37, "visualization"], [42, "visualization"], [167, "visualization"]], "Seed-based connectivity on the surface": [[23, "seed-based-connectivity-on-the-surface"]], "Extracting the seed time series": [[23, "extracting-the-seed-time-series"]], "Calculating seed-based functional connectivity": [[23, "calculating-seed-based-functional-connectivity"]], "Technical point: Illustration of the volume to surface sampling schemes": [[24, "technical-point-illustration-of-the-volume-to-surface-sampling-schemes"]], "Build a mesh (of a cylinder)": [[24, "build-a-mesh-of-a-cylinder"]], "Get the locations from which vol_to_surf would draw its samples": [[24, "get-the-locations-from-which-vol-to-surf-would-draw-its-samples"]], "Plot the mesh and the sample locations": [[24, "plot-the-mesh-and-the-sample-locations"]], "Adjust the sample locations": [[24, "adjust-the-sample-locations"]], "NeuroImaging volumes visualization": [[25, "neuroimaging-volumes-visualization"]], "Fetch data": [[25, "fetch-data"]], "Extracting a brain mask": [[25, "extracting-a-brain-mask"], [181, "extracting-a-brain-mask"]], "Applying the mask to extract the corresponding time series": [[25, "applying-the-mask-to-extract-the-corresponding-time-series"]], "Visualizing Megatrawls Network Matrices from Human Connectome Project": [[26, "visualizing-megatrawls-network-matrices-from-human-connectome-project"]], "Fetching the Megatrawls Network matrices": [[26, "fetching-the-megatrawls-network-matrices"]], "Decoding and predicting from brain images": [[28, "decoding-and-predicting-from-brain-images"], [112, "decoding-and-predicting-from-brain-images"]], "Decoding with ANOVA + SVM: face vs house in the Haxby dataset": [[29, "decoding-with-anova-svm-face-vs-house-in-the-haxby-dataset"]], "Retrieve the files of the Haxby dataset": [[29, "retrieve-the-files-of-the-haxby-dataset"]], "Load the behavioral data": [[29, "load-the-behavioral-data"], [33, "load-the-behavioral-data"]], "ANOVA pipeline with nilearn.decoding.Decoder object": [[29, "anova-pipeline-with-nilearn-decoding-decoder-object"], [34, "anova-pipeline-with-nilearn-decoding-decoder-object"]], "Fit the decoder and predict": [[29, "fit-the-decoder-and-predict"]], "Obtain prediction scores via cross validation": [[29, "obtain-prediction-scores-via-cross-validation"]], "Visualize the results": [[29, "visualize-the-results"], [80, "visualize-the-results"]], "Different classifiers in decoding the Haxby dataset": [[30, "different-classifiers-in-decoding-the-haxby-dataset"]], "Loading the data": [[30, "loading-the-data"], [40, "loading-the-data"], [93, "loading-the-data"]], "Training the decoder": [[30, "training-the-decoder"]], "Visualizing the face vs house map": [[30, "visualizing-the-face-vs-house-map"]], "Decoding with FREM: face vs house vs chair object recognition": [[31, "decoding-with-frem-face-vs-house-vs-chair-object-recognition"]], "Load the Haxby dataset": [[31, "load-the-haxby-dataset"], [34, "load-the-haxby-dataset"]], "Fit FREM": [[31, "fit-frem"], [39, "fit-frem"]], "Plot confusion matrix": [[31, "plot-confusion-matrix"]], "Visualization of FREM weights": [[31, "visualization-of-frem-weights"]], "ROI-based decoding analysis in Haxby et al. dataset": [[32, "roi-based-decoding-analysis-in-haxby-et-al-dataset"]], "Load and prepare the data": [[32, "load-and-prepare-the-data"]], "Decoding on the different masks": [[32, "decoding-on-the-different-masks"]], "We make a simple bar plot to summarize the results": [[32, "we-make-a-simple-bar-plot-to-summarize-the-results"]], "Decoding of a dataset after GLM fit for signal extraction": [[33, "decoding-of-a-dataset-after-glm-fit-for-signal-extraction"]], "Fetch example Haxby dataset": [[33, "fetch-example-haxby-dataset"]], "Build a proper event structure for each run": [[33, "build-a-proper-event-structure-for-each-run"]], "Instantiate and run FirstLevelModel": [[33, "instantiate-and-run-firstlevelmodel"]], "Run the GLM on data from each run": [[33, "run-the-glm-on-data-from-each-run"]], "Generating a report": [[33, "generating-a-report"], [61, "generating-a-report"], [62, "generating-a-report"], [70, "generating-a-report"], [74, "generating-a-report"]], "Build the decoding pipeline": [[33, "build-the-decoding-pipeline"]], "Setting a parameter by cross-validation": [[34, "setting-a-parameter-by-cross-validation"]], "Fit the Decoder and predict the responses": [[34, "fit-the-decoder-and-predict-the-responses"]], "Compute prediction scores with different values of screening percentile": [[34, "compute-prediction-scores-with-different-values-of-screening-percentile"]], "Nested cross-validation": [[34, "nested-cross-validation"]], "Plot the prediction scores using matplotlib": [[34, "plot-the-prediction-scores-using-matplotlib"]], "The haxby dataset: different multi-class strategies": [[35, "the-haxby-dataset-different-multi-class-strategies"]], "Load the Haxby data dataset": [[35, "load-the-haxby-data-dataset"]], "Prepare the fMRI data": [[35, "prepare-the-fmri-data"]], "Build the decoders, using scikit-learn": [[35, "build-the-decoders-using-scikit-learn"]], "Now we compute cross-validation scores": [[35, "now-we-compute-cross-validation-scores"]], "Plot barplots of the prediction scores": [[35, "plot-barplots-of-the-prediction-scores"]], "Plot a confusion matrix": [[35, "plot-a-confusion-matrix"]], "Searchlight analysis of face vs house recognition": [[36, "searchlight-analysis-of-face-vs-house-recognition"]], "Restrict to faces and houses": [[36, "restrict-to-faces-and-houses"], [37, "restrict-to-faces-and-houses"]], "Prepare masks": [[36, "prepare-masks"]], "Searchlight computation": [[36, "searchlight-computation"], [37, "searchlight-computation"]], "F-scores computation": [[36, "f-scores-computation"]], "Cortical surface-based searchlight decoding": [[37, "cortical-surface-based-searchlight-decoding"]], "Surface BOLD response": [[37, "surface-bold-response"]], "Show stimuli of Haxby et al. dataset": [[38, "show-stimuli-of-haxby-et-al-dataset"]], "FREM on Jimura et al \u201cmixed gambles\u201d dataset": [[39, "frem-on-jimura-et-al-mixed-gambles-dataset"]], "Load the data from the Jimura mixed-gamble experiment": [[39, "load-the-data-from-the-jimura-mixed-gamble-experiment"]], "Example use of TV-L1 SpaceNet": [[39, "example-use-of-tv-l1-spacenet"]], "Encoding models for visual stimuli from Miyawaki et al. 2008": [[40, "encoding-models-for-visual-stimuli-from-miyawaki-et-al-2008"]], "Building the encoding models": [[40, "building-the-encoding-models"]], "Mapping the encoding scores on the brain": [[40, "mapping-the-encoding-scores-on-the-brain"]], "Estimating receptive fields": [[40, "estimating-receptive-fields"]], "Reconstruction of visual stimuli from Miyawaki et al. 2008": [[41, "reconstruction-of-visual-stimuli-from-miyawaki-et-al-2008"]], "First we load the Miyawaki dataset": [[41, "first-we-load-the-miyawaki-dataset"]], "Then we prepare and mask the data": [[41, "then-we-prepare-and-mask-the-data"]], "We define our prediction function": [[41, "we-define-our-prediction-function"]], "Here we run the prediction: the decoding itself": [[41, "here-we-run-the-prediction-the-decoding-itself"]], "Let us quantify our prediction error": [[41, "let-us-quantify-our-prediction-error"]], "Voxel-Based Morphometry on Oasis dataset": [[42, "voxel-based-morphometry-on-oasis-dataset"]], "Predictive modeling analysis: VBM bio-markers of aging?": [[42, "predictive-modeling-analysis-vbm-bio-markers-of-aging"]], "Brain mapping with mass univariate": [[42, "brain-mapping-with-mass-univariate"]], "Load Oasis dataset": [[42, "load-oasis-dataset"], [74, "load-oasis-dataset"]], "Preprocess data": [[42, "preprocess-data"]], "Visualize the quality of predictions": [[42, "visualize-the-quality-of-predictions"]], "Inference with massively univariate model": [[42, "inference-with-massively-univariate-model"]], "Voxel-Based Morphometry on Oasis dataset with Space-Net prior": [[43, "voxel-based-morphometry-on-oasis-dataset-with-space-net-prior"]], "Load the Oasis VBM dataset": [[43, "load-the-oasis-vbm-dataset"]], "Fit the SpaceNet and predict with it": [[43, "fit-the-spacenet-and-predict-with-it"]], "Visualize the decoding maps and quality of predictions": [[43, "visualize-the-decoding-maps-and-quality-of-predictions"]], "Example of pattern recognition on simulated data": [[44, "example-of-pattern-recognition-on-simulated-data"]], "A function to generate data": [[44, "a-function-to-generate-data"]], "A simple function to plot slices": [[44, "a-simple-function-to-plot-slices"]], "Create data": [[44, "create-data"]], "Run different estimators": [[44, "run-different-estimators"]], "Run the estimators": [[44, "run-the-estimators"]], "An exercise to go further": [[44, "an-exercise-to-go-further"]], "Functional connectivity": [[46, "functional-connectivity"], [112, "functional-connectivity"]], "Comparing connectomes on different reference atlases": [[47, "comparing-connectomes-on-different-reference-atlases"]], "Load atlases": [[47, "load-atlases"]], "Load functional data": [[47, "load-functional-data"]], "Extract coordinates on Yeo atlas - parcellations": [[47, "extract-coordinates-on-yeo-atlas-parcellations"]], "Plot a directed connectome - asymmetric connectivity measure": [[47, "plot-a-directed-connectome-asymmetric-connectivity-measure"]], "Load probabilistic atlases - extracting coordinates on brain maps": [[47, "load-probabilistic-atlases-extracting-coordinates-on-brain-maps"]], "Iterate over fetched atlases to extract coordinates - probabilistic": [[47, "iterate-over-fetched-atlases-to-extract-coordinates-probabilistic"]], "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning": [[48, "deriving-spatial-maps-from-group-fmri-data-using-ica-and-dictionary-learning"]], "Load brain development fMRI dataset": [[48, "load-brain-development-fmri-dataset"]], "Apply CanICA on the data": [[48, "apply-canica-on-the-data"]], "Compare CanICA to dictionary learning": [[48, "compare-canica-to-dictionary-learning"]], "Clustering methods to learn a brain parcellation from fMRI": [[49, "clustering-methods-to-learn-a-brain-parcellation-from-fmri"]], "See Also": [[49, "see-also"]], "Download a brain development fMRI dataset and turn it to a data matrix": [[49, "download-a-brain-development-fmri-dataset-and-turn-it-to-a-data-matrix"]], "Brain parcellations with Ward Clustering": [[49, "brain-parcellations-with-ward-clustering"]], "Visualize: Brain parcellations (Ward)": [[49, "visualize-brain-parcellations-ward"]], "Compressed representation of Ward clustering": [[49, "compressed-representation-of-ward-clustering"]], "Brain parcellations with KMeans Clustering": [[49, "brain-parcellations-with-kmeans-clustering"]], "Visualize: Brain parcellations (KMeans)": [[49, "visualize-brain-parcellations-kmeans"]], "Brain parcellations with Hierarchical KMeans Clustering": [[49, "brain-parcellations-with-hierarchical-kmeans-clustering"]], "Visualize: Brain parcellations (Hierarchical KMeans)": [[49, "visualize-brain-parcellations-hierarchical-kmeans"]], "Compare Hierarchical Kmeans clusters with those from Kmeans": [[49, "compare-hierarchical-kmeans-clusters-with-those-from-kmeans"]], "Brain parcellations with ReNA Clustering": [[49, "brain-parcellations-with-rena-clustering"]], "Visualize: Brain parcellations (ReNA)": [[49, "visualize-brain-parcellations-rena"]], "Compressed representation of ReNA clustering": [[49, "compressed-representation-of-rena-clustering"]], "Regions extraction using dictionary learning and functional connectomes": [[50, "regions-extraction-using-dictionary-learning-and-functional-connectomes"]], "Fetch brain development functional datasets": [[50, "fetch-brain-development-functional-datasets"]], "Extract functional networks with Dictionary learning": [[50, "extract-functional-networks-with-dictionary-learning"]], "Extract regions from networks": [[50, "extract-regions-from-networks"]], "Compute correlation coefficients": [[50, "compute-correlation-coefficients"]], "Plot resulting connectomes": [[50, "plot-resulting-connectomes"]], "Plot regions extracted for only one specific network": [[50, "plot-regions-extracted-for-only-one-specific-network"]], "Classification of age groups using functional connectivity": [[51, "classification-of-age-groups-using-functional-connectivity"]], "Load brain development fMRI dataset and MSDL atlas": [[51, "load-brain-development-fmri-dataset-and-msdl-atlas"], [98, "load-brain-development-fmri-dataset-and-msdl-atlas"]], "Region signals extraction": [[51, "region-signals-extraction"]], "ROI-to-ROI correlations of children": [[51, "roi-to-roi-correlations-of-children"]], "Studying partial correlations": [[51, "studying-partial-correlations"]], "Extract subjects variabilities around a group connectivity": [[51, "extract-subjects-variabilities-around-a-group-connectivity"]], "What kind of connectivity is most powerful for classification?": [[51, "what-kind-of-connectivity-is-most-powerful-for-classification"], [98, "what-kind-of-connectivity-is-most-powerful-for-classification"]], "Computing a connectome with sparse inverse covariance": [[52, "computing-a-connectome-with-sparse-inverse-covariance"]], "Retrieve the atlas and the data": [[52, "retrieve-the-atlas-and-the-data"], [54, "retrieve-the-atlas-and-the-data"], [56, "retrieve-the-atlas-and-the-data"]], "Extract time series": [[52, "extract-time-series"]], "Compute the sparse inverse covariance": [[52, "compute-the-sparse-inverse-covariance"]], "Display the connectome matrix": [[52, "display-the-connectome-matrix"]], "And now display the corresponding graph": [[52, "and-now-display-the-corresponding-graph"], [52, "id1"], [54, "and-now-display-the-corresponding-graph"]], "Display the sparse inverse covariance": [[52, "display-the-sparse-inverse-covariance"]], "Group Sparse inverse covariance for multi-subject connectome": [[53, "group-sparse-inverse-covariance-for-multi-subject-connectome"]], "Fetching datasets": [[53, "fetching-datasets"]], "Extracting region signals": [[53, "extracting-region-signals"]], "Computing group-sparse precision matrices": [[53, "computing-group-sparse-precision-matrices"]], "Displaying results": [[53, "displaying-results"]], "Extracting signals of a probabilistic atlas of functional regions": [[54, "extracting-signals-of-a-probabilistic-atlas-of-functional-regions"]], "Extract the time series": [[54, "extract-the-time-series"]], "Build and display a correlation matrix": [[54, "build-and-display-a-correlation-matrix"]], "Producing single subject maps of seed-to-voxel correlation": [[55, "producing-single-subject-maps-of-seed-to-voxel-correlation"]], "Getting the data": [[55, "getting-the-data"]], "Time series extraction": [[55, "time-series-extraction"]], "Performing the seed-to-voxel correlation analysis": [[55, "performing-the-seed-to-voxel-correlation-analysis"]], "Plotting the seed-to-voxel correlation map": [[55, "plotting-the-seed-to-voxel-correlation-map"]], "Fisher-z transformation and save nifti": [[55, "fisher-z-transformation-and-save-nifti"]], "Extracting signals from a brain parcellation": [[56, "extracting-signals-from-a-brain-parcellation"]], "Extract signals on a parcellation defined by labels": [[56, "extract-signals-on-a-parcellation-defined-by-labels"]], "Compute and display a correlation matrix": [[56, "compute-and-display-a-correlation-matrix"]], "Extract signals and compute a connectivity matrix without confounds removal": [[56, "extract-signals-and-compute-a-connectivity-matrix-without-confounds-removal"]], "Load confounds from file using a flexible strategy with fmriprep interface": [[56, "load-confounds-from-file-using-a-flexible-strategy-with-fmriprep-interface"]], "Motion-based scrubbing": [[56, "motion-based-scrubbing"]], "The impact of global signal removal": [[56, "the-impact-of-global-signal-removal"]], "Using predefined strategies": [[56, "using-predefined-strategies"]], "Connectivity structure estimation on simulated data": [[57, "connectivity-structure-estimation-on-simulated-data"]], "Extract signals on spheres and plot a connectome": [[58, "extract-signals-on-spheres-and-plot-a-connectome"]], "Retrieve the brain development fMRI dataset": [[58, "retrieve-the-brain-development-fmri-dataset"]], "Coordinates of Default Mode Network": [[58, "coordinates-of-default-mode-network"]], "Extracts signal from sphere around DMN seeds": [[58, "extracts-signal-from-sphere-around-dmn-seeds"]], "Display spheres summary report": [[58, "display-spheres-summary-report"]], "Display time series": [[58, "display-time-series"]], "Compute partial correlation matrix": [[58, "compute-partial-correlation-matrix"]], "Display connectome": [[58, "display-connectome"]], "Extract signals on spheres from an atlas": [[58, "extract-signals-on-spheres-from-an-atlas"]], "Compute within spheres averaged time-series": [[58, "compute-within-spheres-averaged-time-series"]], "Estimate correlations": [[58, "estimate-correlations"]], "Plot matrix, graph, and strength": [[58, "plot-matrix-graph-and-strength"]], "Connectome extracted from Dosenbach\u2019s atlas": [[58, "connectome-extracted-from-dosenbach-s-atlas"]], "GLM: First level analysis": [[60, "glm-first-level-analysis"], [112, "glm-first-level-analysis"]], "Default Mode Network extraction of ADHD dataset": [[61, "default-mode-network-extraction-of-adhd-dataset"]], "Prepare data and analysis parameters": [[61, "prepare-data-and-analysis-parameters"], [67, "prepare-data-and-analysis-parameters"], [99, "prepare-data-and-analysis-parameters"]], "Extract the seed region\u2019s time course": [[61, "extract-the-seed-region-s-time-course"]], "Estimate contrasts": [[61, "estimate-contrasts"], [67, "estimate-contrasts"]], "Perform first level analysis": [[61, "perform-first-level-analysis"], [67, "perform-first-level-analysis"]], "First level analysis of a complete BIDS dataset from openneuro": [[62, "first-level-analysis-of-a-complete-bids-dataset-from-openneuro"]], "Fetch openneuro BIDS dataset": [[62, "fetch-openneuro-bids-dataset"]], "Obtain FirstLevelModel objects automatically and fit arguments": [[62, "obtain-firstlevelmodel-objects-automatically-and-fit-arguments"]], "First level model estimation (one subject)": [[62, "first-level-model-estimation-one-subject"]], "Simple statistical report of thresholded contrast": [[62, "simple-statistical-report-of-thresholded-contrast"]], "Saving model outputs to disk": [[62, "saving-model-outputs-to-disk"]], "Examples of design matrices": [[63, "examples-of-design-matrices"]], "Define parameters": [[63, "define-parameters"]], "Create design matrices": [[63, "create-design-matrices"]], "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model": [[64, "analysis-of-an-fmri-dataset-with-a-finite-impule-response-fir-model"]], "Understanding parameters of the first-level model": [[65, "understanding-parameters-of-the-first-level-model"]], "Running a basic model": [[65, "running-a-basic-model"]], "A first contrast estimation and plotting": [[65, "a-first-contrast-estimation-and-plotting"]], "Changing the drift model": [[65, "changing-the-drift-model"]], "Changing the hemodynamic response model": [[65, "changing-the-hemodynamic-response-model"]], "Adding a time derivative to the design": [[65, "adding-a-time-derivative-to-the-design"]], "The noise model: ar(1), ols, or higher order ar?": [[65, "the-noise-model-ar-1-ols-or-higher-order-ar"]], "Removing confounds": [[65, "removing-confounds"]], "Volume censoring": [[65, "volume-censoring"]], "Smoothing": [[65, "smoothing"], [182, "smoothing"]], "Masking": [[65, "masking"], [167, "masking"]], "Conclusion": [[65, "conclusion"]], "Example of MRI response functions": [[66, "example-of-mri-response-functions"]], "Define stimulus parameters and response models": [[66, "define-stimulus-parameters-and-response-models"]], "Sample and plot response functions": [[66, "sample-and-plot-response-functions"]], "Example of surface-based first-level analysis": [[67, "example-of-surface-based-first-level-analysis"]], "Project the fMRI image to the surface": [[67, "project-the-fmri-image-to-the-surface"]], "Analysing the left hemisphere": [[67, "analysing-the-left-hemisphere"]], "Predicted time series and residuals": [[68, "predicted-time-series-and-residuals"]], "Import modules": [[68, "import-modules"]], "Fit model": [[68, "fit-model"]], "Calculate and plot contrast": [[68, "calculate-and-plot-contrast"]], "Extract the largest clusters": [[68, "extract-the-largest-clusters"]], "Plot predicted and actual time series for 6 most significant clusters": [[68, "plot-predicted-and-actual-time-series-for-6-most-significant-clusters"]], "Get residuals": [[68, "get-residuals"]], "Plot distribution of residuals": [[68, "plot-distribution-of-residuals"]], "Plot R-squared": [[68, "plot-r-squared"]], "Calculate and Plot F-test": [[68, "calculate-and-plot-f-test"]], "Single-subject data (two runs) in native space": [[69, "single-subject-data-two-runs-in-native-space"]], "Simple example of two-runs fMRI model fitting": [[70, "simple-example-of-two-runs-fmri-model-fitting"]], "Set up the GLM": [[70, "set-up-the-glm"]], "Initialize and run the GLM": [[70, "initialize-and-run-the-glm"]], "Compare run-specific and fixed effects contrasts": [[70, "compare-run-specific-and-fixed-effects-contrasts"]], "Compute a range of contrasts across both runs": [[70, "compute-a-range-of-contrasts-across-both-runs"]], "Generate an events.tsv file for the NeuroSpin localizer task": [[71, "generate-an-events-tsv-file-for-the-neurospin-localizer-task"]], "GLM: Second level analysis": [[73, "glm-second-level-analysis"], [112, "glm-second-level-analysis"]], "Voxel-Based Morphometry on OASIS dataset": [[74, "voxel-based-morphometry-on-oasis-dataset"]], "VBM analysis of aging": [[74, "vbm-analysis-of-aging"]], "Analyse data": [[74, "analyse-data"]], "Second-level fMRI model: true positive proportion in clusters": [[75, "second-level-fmri-model-true-positive-proportion-in-clusters"]], "Fetch dataset": [[75, "fetch-dataset"], [78, "fetch-dataset"], [79, "fetch-dataset"]], "Estimate second level model": [[75, "estimate-second-level-model"], [76, "estimate-second-level-model"], [78, "estimate-second-level-model"]], "Example of generic design in second-level models": [[76, "example-of-generic-design-in-second-level-models"]], "Example of second level design matrix": [[77, "example-of-second-level-design-matrix"]], "Create a simple experimental paradigm": [[77, "create-a-simple-experimental-paradigm"]], "Create a second level design matrix": [[77, "create-a-second-level-design-matrix"]], "Second-level fMRI model: one sample test": [[78, "second-level-fmri-model-one-sample-test"]], "Display subject t_maps": [[78, "display-subject-t-maps"]], "Second-level fMRI model: two-sample test, unpaired and paired": [[79, "second-level-fmri-model-two-sample-test-unpaired-and-paired"]], "Estimate second level models": [[79, "estimate-second-level-models"]], "Plot the results": [[79, "plot-the-results"]], "Statistical testing of a second-level analysis": [[80, "statistical-testing-of-a-second-level-analysis"]], "Prepare some images for a simple t test": [[80, "prepare-some-images-for-a-simple-t-test"]], "Perform the second level analysis": [[80, "perform-the-second-level-analysis"]], "Manipulating brain image volumes": [[82, "manipulating-brain-image-volumes"], [112, "manipulating-brain-image-volumes"]], "Visualization of affine resamplings": [[83, "visualization-of-affine-resamplings"]], "Comparing the means of 2 images": [[84, "comparing-the-means-of-2-images"]], "Breaking an atlas of labels in separated regions": [[85, "breaking-an-atlas-of-labels-in-separated-regions"]], "The original Yeo atlas": [[85, "the-original-yeo-atlas"]], "Relabeling the atlas into separated regions": [[85, "relabeling-the-atlas-into-separated-regions"]], "Different connectivity modes": [[85, "different-connectivity-modes"]], "Parameter min_size": [[85, "parameter-min-size"]], "Regions Extraction of Default Mode Networks using Smith Atlas": [[86, "regions-extraction-of-default-mode-networks-using-smith-atlas"]], "Region Extraction using a t-statistical map (3D)": [[87, "region-extraction-using-a-t-statistical-map-3d"]], "Understanding NiftiMasker and mask computation": [[88, "understanding-niftimasker-and-mask-computation"]], "Computing a mask from the background": [[88, "computing-a-mask-from-the-background"]], "Computing a mask from raw EPI data": [[88, "computing-a-mask-from-raw-epi-data"]], "Computing the mask from the MNI template": [[88, "computing-the-mask-from-the-mni-template"]], "Compute and resample a mask": [[88, "compute-and-resample-a-mask"]], "After mask computation: extracting time series": [[88, "after-mask-computation-extracting-time-series"]], "Negating an image with math_img": [[89, "negating-an-image-with-math-img"]], "Extracting signals from brain regions using the NiftiLabelsMasker": [[90, "extracting-signals-from-brain-regions-using-the-niftilabelsmasker"]], "Simple example of NiftiMasker use": [[91, "simple-example-of-niftimasker-use"]], "Resample an image to a template": [[92, "resample-an-image-to-a-template"]], "Computing a Region of Interest (ROI) mask manually": [[93, "computing-a-region-of-interest-roi-mask-manually"]], "Build a statistical test to find voxels of interest": [[93, "build-a-statistical-test-to-find-voxels-of-interest"]], "Build a mask from this statistical map (Improving the quality of the mask)": [[93, "build-a-mask-from-this-statistical-map-improving-the-quality-of-the-mask"]], "Smoothing an image": [[94, "smoothing-an-image"]], "Advanced statistical analysis of brain images": [[96, "advanced-statistical-analysis-of-brain-images"], [112, "advanced-statistical-analysis-of-brain-images"]], "Advanced decoding using scikit learn": [[97, "advanced-decoding-using-scikit-learn"]], "Performing decoding with scikit-learn": [[97, "performing-decoding-with-scikit-learn"], [165, "performing-decoding-with-scikit-learn"]], "Masking the data": [[97, "masking-the-data"]], "Cross-validation with scikit-learn": [[97, "cross-validation-with-scikit-learn"], [165, "cross-validation-with-scikit-learn"]], "Tuning cross-validation parameters": [[97, "tuning-cross-validation-parameters"]], "Measuring the chance level": [[97, "measuring-the-chance-level"], [165, "measuring-the-chance-level"]], "Dummy estimator": [[97, "dummy-estimator"]], "Permutation test": [[97, "permutation-test"]], "Decoding without a mask: Anova-SVM in scikit-lean": [[97, "decoding-without-a-mask-anova-svm-in-scikit-lean"]], "Visualize the ANOVA + SVC\u2019s discriminating weights": [[97, "visualize-the-anova-svc-s-discriminating-weights"]], "Going further with scikit-learn": [[97, "going-further-with-scikit-learn"], [165, "going-further-with-scikit-learn"]], "Changing the prediction engine": [[97, "changing-the-prediction-engine"]], "Changing the feature selection": [[97, "changing-the-feature-selection"]], "Functional connectivity predicts age group": [[98, "functional-connectivity-predicts-age-group"]], "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding": [[99, "beta-series-modeling-for-task-based-functional-connectivity-and-decoding"]], "Choosing the right model for your analysis": [[99, null]], "Define the standard model": [[99, "define-the-standard-model"]], "Define the LSA model": [[99, "define-the-lsa-model"]], "Aggregate beta maps from the LSA model based on condition": [[99, "aggregate-beta-maps-from-the-lsa-model-based-on-condition"]], "Define the LSS models": [[99, "define-the-lss-models"]], "Show the design matrices for the first few trials": [[99, "show-the-design-matrices-for-the-first-few-trials"]], "Compare the three modeling approaches": [[99, "compare-the-three-modeling-approaches"]], "Applications of beta series": [[99, "applications-of-beta-series"]], "BIDS dataset first and second level analysis": [[100, "bids-dataset-first-and-second-level-analysis"]], "Fetch example BIDS dataset": [[100, "fetch-example-bids-dataset"], [107, "fetch-example-bids-dataset"]], "Obtain automatically FirstLevelModel objects and fit arguments": [[100, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"], [107, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"]], "Quick sanity check on fit arguments": [[100, "quick-sanity-check-on-fit-arguments"]], "First level model estimation": [[100, "first-level-model-estimation"]], "Second level model estimation": [[100, "second-level-model-estimation"]], "Massively univariate analysis of face vs house recognition": [[101, "massively-univariate-analysis-of-face-vs-house-recognition"]], "NeuroVault cross-study ICA maps": [[102, "neurovault-cross-study-ica-maps"]], "Get image and term data": [[102, "get-image-and-term-data"]], "Reshape and mask images": [[102, "reshape-and-mask-images"]], "Run ICA and map components to terms": [[102, "run-ica-and-map-components-to-terms"]], "Generate figures": [[102, "generate-figures"]], "Multivariate decompositions: Independent component analysis of fMRI": [[103, "multivariate-decompositions-independent-component-analysis-of-fmri"]], "Massively univariate analysis of a motor task from the Localizer dataset": [[104, "massively-univariate-analysis-of-a-motor-task-from-the-localizer-dataset"]], "Massively univariate analysis of a calculation task from the Localizer dataset": [[105, "massively-univariate-analysis-of-a-calculation-task-from-the-localizer-dataset"]], "NeuroVault meta-analysis of stop-go paradigm studies": [[106, "neurovault-meta-analysis-of-stop-go-paradigm-studies"]], "Fetch images for \u201csuccessful stop minus go\u201d-like protocols.": [[106, "fetch-images-for-successful-stop-minus-go-like-protocols"]], "Visualize the data": [[106, "visualize-the-data"]], "Compute statistics": [[106, "compute-statistics"]], "Plot the combined z maps": [[106, "plot-the-combined-z-maps"]], "Surface-based dataset first and second level analysis of a dataset": [[107, "surface-based-dataset-first-and-second-level-analysis-of-a-dataset"]], "Group study": [[107, "group-study"]], "Examples for experimental modules": [[109, "examples-for-experimental-modules"], [112, "examples-for-experimental-modules"]], "A short demo of the surface images & maskers": [[110, "a-short-demo-of-the-surface-images-maskers"]], "Connectivity with a surface atlas and SurfaceLabelsMasker": [[110, "connectivity-with-a-surface-atlas-and-surfacelabelsmasker"]], "Using the Decoder": [[110, "using-the-decoder"]], "Decoding with a scikit-learn Pipeline": [[110, "decoding-with-a-scikit-learn-pipeline"]], "Examples": [[112, "examples"], [181, null], [182, null], [182, null], [182, null], [182, null], [182, null], [182, null]], "General bibliography": [[114, "general-bibliography"]], "Advanced usage: manual pipelines and scaling up": [[115, "advanced-usage-manual-pipelines-and-scaling-up"]], "Building your own neuroimaging machine-learning pipeline": [[116, "building-your-own-neuroimaging-machine-learning-pipeline"]], "Data loading and preprocessing": [[116, "data-loading-and-preprocessing"]], "Downloading the data": [[116, "downloading-the-data"]], "Loading non image data: experiment description": [[116, "loading-non-image-data-experiment-description"]], "Masking the data: from 4D image to 2D array": [[116, "masking-the-data-from-4d-image-to-2d-array"]], "Applying a mask": [[116, "applying-a-mask"]], "Automatically computing a mask": [[116, "automatically-computing-a-mask"]], "Applying a scikit-learn machine learning method": [[116, "applying-a-scikit-learn-machine-learning-method"]], "Unmasking (inverse_transform)": [[116, "unmasking-inverse-transform"]], "Visualizing results": [[116, "visualizing-results"], [161, "visualizing-results"]], "Going further": [[116, "going-further"]], "Downloading statistical maps from the Neurovault repository": [[117, "downloading-statistical-maps-from-the-neurovault-repository"]], "Specific images or collections": [[117, "specific-images-or-collections"]], "Selection filters": [[117, "selection-filters"]], "Output": [[117, "output"]], "Neurosynth annotations": [[117, "neurosynth-annotations"]], "Examples using Neurovault": [[117, "examples-using-neurovault"]], "0.1.0": [[118, "id1"], [155, "id5224"]], "Changelog": [[118, "changelog"], [119, "changelog"], [120, "changelog"], [121, "changelog"], [128, "changelog"], [129, "changelog"], [131, "changelog"], [155, "changelog"], [155, "id4320"], [155, "id4470"], [155, "id4774"], [155, "id4925"], [155, "id5075"], [155, "id5225"], [170, "changelog"]], "0.1.1": [[119, "id1"], [155, "id5074"]], "0.1.2": [[120, "id1"], [155, "id4924"]], "0.1.3": [[121, "id1"], [155, "id4773"]], "Fixes": [[121, "fixes"], [123, "fixes"], [124, "fixes"], [124, "id2"], [125, "fixes"], [126, "fixes"], [127, "fixes"], [130, "fixes"], [133, "fixes"], [134, "fixes"], [135, "fixes"], [135, "id3"], [136, "fixes"], [137, "fixes"], [139, "fixes"], [140, "fixes"], [141, "fixes"], [142, "fixes"], [143, "id4"], [143, "id9"], [143, "id13"], [144, "fixes"], [145, "fixes"], [146, "fixes"], [147, "fixes"], [148, "fixes"], [149, "fixes"], [150, "fixes"], [151, "fixes"], [152, "fixes"], [153, "fixes"], [155, "fixes"], [155, "id150"], [155, "id304"], [155, "id458"], [155, "id611"], [155, "id614"], [155, "id768"], [155, "id924"], [155, "id1076"], [155, "id1230"], [155, "id1384"], [155, "id1538"], [155, "id1692"], [155, "id1846"], [155, "id1998"], [155, "id2150"], [155, "id2308"], [155, "id2314"], [155, "id2318"], [155, "id2470"], [155, "id2623"], [155, "id2784"], [155, "id2941"], [155, "id3244"], [155, "id3398"], [155, "id3550"], [155, "id3555"], [155, "id3706"], [155, "id3860"], [155, "id4316"], [155, "id4775"]], "0.1.4": [[122, "id1"], [155, "id4623"]], "Highlights": [[122, "highlights"], [135, "highlights"], [136, "highlights"], [137, "highlights"], [140, "highlights"], [140, "id4"], [140, "id8"], [155, "id2778"], [155, "id2782"], [155, "id2787"], [155, "id3242"], [155, "id3396"], [155, "id3553"], [155, "id4624"]], "0.10.0": [[123, "id1"], [155, "id765"]], "HIGHLIGHTS": [[123, "highlights"], [125, "highlights"], [126, "highlights"], [127, "highlights"], [143, "highlights"], [146, "highlights"], [147, "highlights"], [148, "highlights"], [149, "highlights"], [150, "highlights"], [152, "highlights"], [155, "highlights"], [155, "id302"], [155, "id456"], [155, "id766"], [155, "id920"], [155, "id1228"], [155, "id1382"], [155, "id1536"], [155, "id1690"], [155, "id1843"], [155, "id2301"]], "NEW": [[123, "new"], [124, "new"], [125, "new"], [126, "new"], [140, "new"], [141, "new"], [142, "new"], [143, "new"], [143, "id2"], [143, "id5"], [143, "id11"], [146, "new"], [147, "new"], [148, "new"], [149, "new"], [150, "new"], [152, "new"], [153, "new"], [155, "new"], [155, "id303"], [155, "id457"], [155, "id610"], [155, "id767"], [155, "id922"], [155, "id1229"], [155, "id1383"], [155, "id1537"], [155, "id1691"], [155, "id1844"], [155, "id2302"], [155, "id2306"], [155, "id2310"], [155, "id2316"], [155, "id2469"], [155, "id2621"], [155, "id2774"]], "Enhancements": [[123, "enhancements"], [124, "enhancements"], [124, "id3"], [125, "enhancements"], [126, "enhancements"], [127, "enhancements"], [128, "enhancements"], [130, "enhancements"], [134, "enhancements"], [135, "enhancements"], [135, "id4"], [136, "enhancements"], [137, "enhancements"], [138, "enhancements"], [140, "id2"], [140, "id5"], [140, "id9"], [147, "enhancements"], [148, "enhancements"], [149, "enhancements"], [150, "enhancements"], [151, "enhancements"], [152, "enhancements"], [153, "enhancements"], [155, "enhancements"], [155, "id151"], [155, "id305"], [155, "id459"], [155, "id612"], [155, "id615"], [155, "id769"], [155, "id925"], [155, "id1077"], [155, "id1231"], [155, "id1385"], [155, "id1539"], [155, "id1693"], [155, "id2779"], [155, "id2783"], [155, "id2788"], [155, "id3091"], [155, "id3243"], [155, "id3399"], [155, "id3551"], [155, "id3556"], [155, "id3707"], [155, "id4315"], [155, "id4472"]], "Changes": [[123, "changes"], [124, "changes"], [124, "id4"], [125, "changes"], [126, "changes"], [127, "changes"], [130, "changes"], [132, "changes"], [133, "changes"], [134, "changes"], [135, "changes"], [135, "id2"], [136, "changes"], [137, "changes"], [138, "changes"], [139, "changes"], [140, "changes"], [140, "id3"], [140, "id6"], [140, "id10"], [141, "changes"], [143, "id3"], [143, "id8"], [143, "id12"], [145, "changes"], [146, "changes"], [148, "changes"], [149, "changes"], [150, "changes"], [151, "changes"], [152, "changes"], [153, "changes"], [155, "changes"], [155, "id152"], [155, "id306"], [155, "id460"], [155, "id613"], [155, "id616"], [155, "id770"], [155, "id926"], [155, "id1078"], [155, "id1232"], [155, "id1386"], [155, "id1540"], [155, "id1847"], [155, "id1999"], [155, "id2307"], [155, "id2313"], [155, "id2317"], [155, "id2622"], [155, "id2776"], [155, "id2780"], [155, "id2785"], [155, "id2789"], [155, "id2940"], [155, "id3092"], [155, "id3245"], [155, "id3397"], [155, "id3549"], [155, "id3554"], [155, "id3708"], [155, "id3858"], [155, "id4014"], [155, "id4317"]], "0.10.1": [[124, "id1"], [155, "id609"]], "0.10.1rc1": [[124, "rc1"], [155, "rc1"]], "0.10.2": [[125, "id1"], [155, "id455"]], "0.10.3": [[126, "id1"], [155, "id301"]], "0.10.4": [[127, "id1"], [155, "id149"]], "0.2.0": [[128, "id1"], [155, "id4469"]], "New features": [[128, "new-features"], [131, "new-features"], [155, "new-features"], [155, "id4471"]], "Bug fixes": [[128, "bug-fixes"], [131, "bug-fixes"], [138, "bug-fixes"], [155, "bug-fixes"], [155, "id4164"], [155, "id4473"]], "API changes summary": [[128, "api-changes-summary"], [155, "api-changes-summary"]], "Contributors": [[128, "contributors"], [130, "contributors"], [133, "contributors"], [137, "contributors"], [140, "contributors"], [140, "id7"], [140, "id11"], [141, "contributors"], [142, "contributors"], [143, "contributors"], [143, "id10"], [143, "id14"], [144, "contributors"], [145, "contributors"], [155, "contributors"], [155, "id2151"], [155, "id2309"], [155, "id2315"], [155, "id2319"], [155, "id2471"], [155, "id2624"], [155, "id2781"], [155, "id2786"], [155, "id2790"], [155, "id3246"], [155, "id3863"], [155, "id4318"], [155, "id4474"]], "0.2.1": [[129, "id1"], [155, "v0-2-1"]], "0.2.2": [[130, "id1"], [155, "id4313"]], "New": [[130, "new"], [132, "new"], [133, "new"], [133, "id3"], [155, "id3859"], [155, "id3862"], [155, "id4013"], [155, "id4314"]], "0.2.3": [[131, "id1"], [155, "id4163"]], "0.2.4": [[132, "id1"], [155, "id4012"]], "0.2.5.1": [[133, "id1"], [155, "id3857"]], "0.2.5": [[133, "id2"], [155, "id3861"]], "0.2.6": [[134, "id1"], [155, "id3705"]], "0.3.0": [[135, "id1"], [155, "id3548"]], "0.3.0 beta": [[135, "beta"], [155, "id3552"]], "0.3.1": [[136, "id1"], [155, "id3395"]], "0.4.0": [[137, "id1"], [155, "id3241"]], "0.4.1": [[138, "id1"], [155, "id3090"]], "0.4.2": [[139, "id1"], [155, "id2939"]], "0.5.0": [[140, "id1"], [155, "id2773"]], "ENHANCEMENTS": [[140, "enhancements"], [143, "enhancements"], [144, "enhancements"], [145, "enhancements"], [155, "id1997"], [155, "id2149"], [155, "id2303"], [155, "id2775"]], "0.5.0 rc": [[140, "rc"], [155, "id2777"]], "0.5.0 beta": [[140, "beta"], [155, "beta"]], "0.5.0 alpha": [[140, "alpha"], [155, "alpha"]], "0.5.1": [[141, "id1"], [155, "id2620"]], "Known Issues": [[141, "known-issues"], [155, "known-issues"]], "0.5.2": [[142, "id1"], [155, "id2468"]], "0.6.0": [[143, "id1"], [155, "id2300"]], "CHANGES": [[143, "changes"], [155, "id2304"]], "FIXES": [[143, "fixes"], [155, "id2305"]], "0.6.0rc": [[143, "rc"], [155, "rc"]], "0.6.0b0": [[143, "b0"], [155, "b0"]], "0.6.0a0": [[143, "a0"], [155, "a0"]], "0.6.1": [[144, "id1"], [155, "id2148"]], "0.6.2": [[145, "id1"], [155, "id1996"]], "0.7.0": [[146, "id1"], [155, "id1842"]], "0.7.1": [[147, "id1"], [155, "id1689"]], "0.8.0": [[148, "id1"], [155, "id1535"]], "0.8.1": [[149, "id1"], [155, "id1381"]], "0.9.0": [[150, "id1"], [155, "id1227"]], "0.9.1": [[151, "id1"], [155, "id1075"]], "0.9.2": [[152, "id1"], [155, "id919"]], "0.11.0.dev": [[153, "dev"], [155, "dev"]], "What\u2019s new": [[155, "what-s-new"]], "Connectome extraction: inverse covariance for direct connections": [[156, "connectome-extraction-inverse-covariance-for-direct-connections"]], "Page summary": [[156, null], [157, null], [160, null], [161, null], [171, null], [174, null]], "Sparse inverse covariance for functional connectomes": [[156, "sparse-inverse-covariance-for-functional-connectomes"]], "Parameter selection": [[156, null]], "Full example": [[156, null], [156, null], [156, null], [157, null], [157, null]], "Exercise: computing sparse inverse covariance": [[156, null]], "Reference": [[156, null], [156, null], [156, null], [156, null], [159, null]], "Sparse inverse covariance on multiple subjects": [[156, "sparse-inverse-covariance-on-multiple-subjects"]], "Exercise: computing the correlation matrix of rest fmri": [[156, null], [157, null]], "Comparing the different approaches on simulated data": [[156, "comparing-the-different-approaches-on-simulated-data"]], "Full Example": [[156, null]], "Linking total and direct interactions at the group level": [[156, "linking-total-and-direct-interactions-at-the-group-level"]], "Exercise: computing connectivity in tangent space": [[156, null]], "Extracting times series to build a functional connectome": [[157, "extracting-times-series-to-build-a-functional-connectome"]], "Time-series from a brain parcellation or \u201cMaxProb\u201d atlas": [[157, "time-series-from-a-brain-parcellation-or-maxprob-atlas"]], "Brain parcellations": [[157, "brain-parcellations"]], "Extracting signals on a parcellation": [[157, "extracting-signals-on-a-parcellation"]], "Time-series from a probabilistic atlas": [[157, "time-series-from-a-probabilistic-atlas"]], "Probabilistic atlases": [[157, "probabilistic-atlases"]], "Extracting signals from a probabilistic atlas": [[157, "extracting-signals-from-a-probabilistic-atlas"]], "Exercise: correlation matrix of rest fMRI on probabilistic atlas": [[157, null]], "A functional connectome: a graph of interactions": [[157, "a-functional-connectome-a-graph-of-interactions"]], "A functional connectome: extracting coordinates of regions": [[157, "a-functional-connectome-extracting-coordinates-of-regions"]], "Functional connectivity and resting state": [[158, "functional-connectivity-and-resting-state"]], "Clustering to parcellate the brain in regions": [[159, "clustering-to-parcellate-the-brain-in-regions"]], "Data loading: movie-watching data": [[159, "data-loading-movie-watching-data"]], "Applying clustering": [[159, "applying-clustering"]], "Which clustering to use": [[159, null]], "Using and visualizing the resulting parcellation": [[159, "using-and-visualizing-the-resulting-parcellation"]], "Visualizing the parcellation": [[159, "visualizing-the-parcellation"]], "Compressed representation": [[159, "compressed-representation"]], "Example code": [[159, null], [167, null]], "Region Extraction for better brain parcellations": [[160, "region-extraction-for-better-brain-parcellations"]], "Fetching movie-watching based functional datasets": [[160, "fetching-movie-watching-based-functional-datasets"]], "Brain maps using Dictionary learning": [[160, "brain-maps-using-dictionary-learning"]], "Visualization of Dictionary learning maps": [[160, "visualization-of-dictionary-learning-maps"]], "Region Extraction with Dictionary learning maps": [[160, "region-extraction-with-dictionary-learning-maps"]], "Visualization of Region Extraction results": [[160, "visualization-of-region-extraction-results"]], "Computing functional connectivity matrices": [[160, "computing-functional-connectivity-matrices"]], "Visualization of functional connectivity matrices": [[160, "visualization-of-functional-connectivity-matrices"]], "Validating results": [[160, "validating-results"]], "Extracting functional brain networks: ICA and related": [[161, "extracting-functional-brain-networks-ica-and-related"]], "Multi-subject ICA: CanICA": [[161, "multi-subject-ica-canica"]], "Objective": [[161, "objective"]], "Nilearn data for examples": [[161, null]], "Fitting CanICA model with nilearn": [[161, "fitting-canica-model-with-nilearn"]], "Interpreting such components": [[161, "interpreting-such-components"]], "An alternative to ICA: Dictionary learning": [[161, "an-alternative-to-ica-dictionary-learning"]], "An introduction to decoding": [[162, "an-introduction-to-decoding"]], "Loading and preparing the data": [[162, "loading-and-preparing-the-data"]], "The Haxby 2001 experiment": [[162, "the-haxby-2001-experiment"]], "fMRI: using beta maps of a first-level analysis": [[162, null]], "Loading the data into nilearn": [[162, "loading-the-data-into-nilearn"]], "Full code example": [[162, null]], "Performing a simple decoding analysis": [[162, "performing-a-simple-decoding-analysis"]], "A few definitions": [[162, "a-few-definitions"]], "A first estimator": [[162, "a-first-estimator"]], "Decoding made easy": [[162, "decoding-made-easy"]], "Measuring prediction performance": [[162, "measuring-prediction-performance"]], "Cross-validation": [[162, "cross-validation"]], "Choosing a good cross-validation strategy": [[162, "choosing-a-good-cross-validation-strategy"]], "Choice of the prediction accuracy measure": [[162, "choice-of-the-prediction-accuracy-measure"]], "Prediction accuracy at chance using simple strategies": [[162, "prediction-accuracy-at-chance-using-simple-strategies"]], "Putting it all together": [[162, null]], "Visualizing the decoder\u2019s weights": [[162, "visualizing-the-decoder-s-weights"]], "Decoding without a mask: Anova-SVM": [[162, "decoding-without-a-mask-anova-svm"]], "Dimension reduction with feature selection": [[162, "dimension-reduction-with-feature-selection"]], "Visualizing the results": [[162, "visualizing-the-results"]], "Final script": [[162, null]], "Choosing the right predictive model for neuroimaging": [[163, "choosing-the-right-predictive-model-for-neuroimaging"]], "Predictions: regression, classification and multi-class": [[163, "predictions-regression-classification-and-multi-class"]], "Regression": [[163, "regression"]], "Classification: two classes or multi-class": [[163, "classification-two-classes-or-multi-class"]], "Different linear models": [[163, "different-linear-models"]], "Setting estimator parameters": [[163, "setting-estimator-parameters"], [165, "setting-estimator-parameters"]], "Bagging several models": [[163, "bagging-several-models"]], "FREM: fast ensembling of regularized models for robust decoding": [[164, "frem-fast-ensembling-of-regularized-models-for-robust-decoding"]], "FREM pipeline": [[164, "frem-pipeline"]], "Empirical comparisons": [[164, "empirical-comparisons"]], "Decoding performance increase on Haxby dataset": [[164, "decoding-performance-increase-on-haxby-dataset"]], "Code": [[164, null], [164, null], [181, null]], "Spatial regularization of decoding maps on mixed gambles study": [[164, "spatial-regularization-of-decoding-maps-on-mixed-gambles-study"]], "Running scikit-learn functions for more control on the analysis": [[165, "running-scikit-learn-functions-for-more-control-on-the-analysis"]], "Using scikit-learn estimators": [[165, "using-scikit-learn-estimators"]], "Decoding on simulated data": [[165, null]], "Decoding without a mask: Anova-SVM using scikit-learn": [[165, "decoding-without-a-mask-anova-svm-using-scikit-learn"]], "Using any other model in the pipeline": [[165, "using-any-other-model-in-the-pipeline"]], "Decoding and MVPA: predicting from brain images": [[166, "decoding-and-mvpa-predicting-from-brain-images"]], "Searchlight : finding voxels containing information": [[167, "searchlight-finding-voxels-containing-information"]], "Principle of the Searchlight": [[167, "principle-of-the-searchlight"]], "Further Reading": [[167, null]], "Preparing the data": [[167, "preparing-the-data"]], "Setting up the searchlight": [[167, "setting-up-the-searchlight"]], "Classifier": [[167, "classifier"]], "Score function": [[167, "score-function"]], "Cross validation": [[167, "cross-validation"]], "Sphere radius": [[167, "sphere-radius"]], "Searchlight": [[167, "id6"]], "Comparing to massively univariate analysis: F_score or SPM": [[167, "comparing-to-massively-univariate-analysis-f-score-or-spm"]], "SpaceNet: decoding with spatial structure for better maps": [[168, "spacenet-decoding-with-spatial-structure-for-better-maps"]], "The SpaceNet decoder": [[168, "the-spacenet-decoder"]], "Related example": [[168, "related-example"]], "Group-sparse covariance estimation": [[169, "group-sparse-covariance-estimation"]], "Description": [[169, "description"]], "Numerical stability": [[169, "numerical-stability"]], "Execution time": [[169, "execution-time"]], "Synthetic dataset": [[169, "synthetic-dataset"]], "Stopping criteria": [[169, "stopping-criteria"]], "Maximum number of iterations": [[169, "maximum-number-of-iterations"]], "Duality gap": [[169, "duality-gap"]], "Variation of norm of estimate": [[169, "variation-of-norm-of-estimate"]], "Initial estimate value": [[169, "initial-estimate-value"]], "Modifying the stopping criterion": [[169, "modifying-the-stopping-criterion"]], "Cross-validation algorithm": [[169, "cross-validation-algorithm"]], "Principle of cross-validation": [[169, "principle-of-cross-validation"]], "Bounds on alpha": [[169, "bounds-on-alpha"]], "Iterative grid search": [[169, "iterative-grid-search"]], "Warm restart": [[169, "warm-restart"]], "Stopping criterion": [[169, "stopping-criterion"]], "Contributing": [[170, "contributing"], [170, "id5"]], "Code of Conduct": [[170, "code-of-conduct"]], "How to get help?": [[170, "how-to-get-help"]], "How to help the project?": [[170, "how-to-help-the-project"]], "Report bugs or discuss enhancement ideas": [[170, "report-bugs-or-discuss-enhancement-ideas"]], "Answer questions": [[170, "answer-questions"]], "Review Pull Requests": [[170, "review-pull-requests"]], "Contribute code": [[170, "contribute-code"]], "How do we decide what code goes in?": [[170, "how-do-we-decide-what-code-goes-in"]], "Scope of the project": [[170, "scope-of-the-project"]], "Adding atlases and datasets": [[170, "adding-atlases-and-datasets"]], "Who makes decisions": [[170, "who-makes-decisions"]], "How to contribute to nilearn": [[170, "how-to-contribute-to-nilearn"]], "Contribution Guidelines": [[170, "contribution-guidelines"]], "PR Structure": [[170, "pr-structure"]], "Coding Style": [[170, "coding-style"]], "Guidelines for Private Functions": [[170, "guidelines-for-private-functions"]], "Guidelines for HTML and CSS": [[170, "guidelines-for-html-and-css"]], "Pre-commit": [[170, "pre-commit"]], "Tests": [[170, "tests"]], "Fixtures": [[170, "fixtures"]], "Seeding": [[170, "seeding"]], "Documentation": [[170, "documentation"]], "Setting up your environment": [[170, "setting-up-your-environment"]], "Installing": [[170, "installing"]], "Recommendation": [[170, null], [170, null]], "Building documentation": [[170, "building-documentation"]], "Additional cases": [[170, "additional-cases"]], "How to contribute an atlas": [[170, "how-to-contribute-an-atlas"]], "How to contribute a dataset fetcher": [[170, "how-to-contribute-a-dataset-fetcher"]], "Maintenance": [[170, "maintenance"], [178, "maintenance"]], "First level models": [[171, "first-level-models"]], "HRF models": [[171, "hrf-models"]], "Design matrix: event-based and time series-based": [[171, "design-matrix-event-based-and-time-series-based"]], "Event-based": [[171, "event-based"]], "Time series-based": [[171, "time-series-based"]], "Fitting a first level model": [[171, "fitting-a-first-level-model"]], "Computing contrasts": [[171, "computing-contrasts"]], "Extracting predicted time series and residuals": [[171, "extracting-predicted-time-series-and-residuals"]], "Surface-based analysis": [[171, "surface-based-analysis"]], "An introduction to GLMs in fMRI statistical analysis": [[172, "an-introduction-to-glms-in-fmri-statistical-analysis"]], "A primer on BOLD-fMRI data analysis": [[172, "a-primer-on-bold-fmri-data-analysis"]], "What is fMRI ?": [[172, "what-is-fmri"]], "fMRI data modelling": [[172, "fmri-data-modelling"]], "fMRI statistical analysis": [[172, "fmri-statistical-analysis"]], "Multiple Comparisons": [[172, "multiple-comparisons"]], "Analyzing fMRI using GLMs": [[173, "analyzing-fmri-using-glms"]], "Second level models": [[174, "second-level-models"]], "Fitting a second level model": [[174, "fitting-a-second-level-model"]], "Thresholding statistical maps": [[174, "thresholding-statistical-maps"]], "Multiple comparisons correction": [[174, "multiple-comparisons-correction"]], "Voxel based morphometry": [[174, "voxel-based-morphometry"]], "Glossary": [[175, "glossary"]], "Nilearn": [[176, "nilearn"]], "Featured examples": [[176, "featured-examples"]], "Introduction": [[177, "introduction"]], "What is nilearn?": [[177, "what-is-nilearn"]], "Using nilearn for the first time": [[177, "using-nilearn-for-the-first-time"]], "First steps with nilearn": [[177, "first-steps-with-nilearn"]], "Learning with the API references": [[177, "learning-with-the-api-references"]], "Learning with examples": [[177, "learning-with-examples"]], "Finding help": [[177, "finding-help"]], "Machine learning applications to Neuroimaging": [[177, "machine-learning-applications-to-neuroimaging"]], "Project Organization": [[178, "project-organization"]], "Issues": [[178, "issues"]], "Labels": [[178, "labels"]], "Closing policy": [[178, "closing-policy"]], "Pull Requests": [[178, "pull-requests"]], "Using tox": [[178, "using-tox"]], "How to make a release?": [[178, "how-to-make-a-release"]], "Prepare code for the release": [[178, "prepare-code-for-the-release"]], "Prepare the release": [[178, "prepare-the-release"]], "Build of stable docs": [[178, "build-of-stable-docs"]], "Build the distributions and upload them to Pypi": [[178, "build-the-distributions-and-upload-them-to-pypi"]], "Build and deploy the documentation manually": [[178, "build-and-deploy-the-documentation-manually"]], "Post-release": [[178, "post-release"]], "Manipulation brain volumes with nilearn": [[179, "manipulation-brain-volumes-with-nilearn"]], "Input and output: neuroimaging data representation": [[180, "input-and-output-neuroimaging-data-representation"]], "Inputing data: file names or image objects": [[180, "inputing-data-file-names-or-image-objects"]], "File names and objects, 3D and 4D images": [[180, "file-names-and-objects-3d-and-4d-images"]], "File name matching: \u201cglobbing\u201d and user path expansion": [[180, "file-name-matching-globbing-and-user-path-expansion"]], "Python globbing": [[180, null]], "Fetching open datasets from Internet": [[180, "fetching-open-datasets-from-internet"]], "nilearn_data: Where is the downloaded data stored?": [[180, null]], "Understanding neuroimaging data": [[180, "understanding-neuroimaging-data"]], "Nifti and Analyze data": [[180, "nifti-and-analyze-data"]], "Dataset formatting: data shape": [[180, null]], "Niimg-like objects": [[180, "niimg-like-objects"]], "Image affines": [[180, null]], "Decreasing memory used when loading Nifti images": [[180, null]], "Text files: phenotype or behavior": [[180, "text-files-phenotype-or-behavior"]], "Reading CSV with pandas": [[180, null]], "Manipulating images: resampling, smoothing, masking, ROIs\u2026": [[181, "manipulating-images-resampling-smoothing-masking-rois"]], "Functions for data preparation and image transformation": [[181, "functions-for-data-preparation-and-image-transformation"]], "Resampling images": [[181, "resampling-images"]], "Resampling one image to match another one": [[181, "resampling-one-image-to-match-another-one"]], "Example": [[181, null]], "Resampling to a specific target affine, shape, or resolution": [[181, "resampling-to-a-specific-target-affine-shape-or-resolution"]], "Special case: resampling to a given voxel size": [[181, null]], "Accessing individual volumes in 4D images": [[181, "accessing-individual-volumes-in-4d-images"]], "Computing and applying spatial masks": [[181, "computing-and-applying-spatial-masks"]], "Masking data: from 4D Nifti images to 2D data arrays": [[181, "masking-data-from-4d-nifti-images-to-2d-data-arrays"]], "Image operations: creating a ROI mask manually": [[181, "image-operations-creating-a-roi-mask-manually"]], "From neuroimaging volumes to data matrices: the masker objects": [[182, "from-neuroimaging-volumes-to-data-matrices-the-masker-objects"]], "The concept of \u201cmasker\u201d objects": [[182, "the-concept-of-masker-objects"]], "Advanced: Design philosophy of \u201cMaskers\u201d": [[182, null]], "NiftiMasker: applying a mask to load time-series": [[182, "niftimasker-applying-a-mask-to-load-time-series"]], "Advanced: scikit-learn Pipelines": [[182, null]], "Custom data loading: loading only the first 100 time points": [[182, "custom-data-loading-loading-only-the-first-100-time-points"]], "Controlling how the mask is computed from the data": [[182, "controlling-how-the-mask-is-computed-from-the-data"]], "Visualizing the computed mask": [[182, "visualizing-the-computed-mask"]], "Different masking strategies": [[182, "different-masking-strategies"]], "Extra mask parameters: opening, cutoff\u2026": [[182, "extra-mask-parameters-opening-cutoff"]], "Common data preparation steps: smoothing, filtering, resampling": [[182, "common-data-preparation-steps-smoothing-filtering-resampling"]], "`dtype` argument": [[182, null]], "Temporal Filtering and confound removal": [[182, "temporal-filtering-and-confound-removal"]], "Exercise": [[182, null]], "Resampling: resizing and changing resolutions of images": [[182, "resampling-resizing-and-changing-resolutions-of-images"]], "Inverse transform: unmasking data": [[182, "inverse-transform-unmasking-data"]], "Examples to better understand the NiftiMasker": [[182, null]], "Extraction of signals from regions: NiftiLabelsMasker, NiftiMapsMasker": [[182, "extraction-of-signals-from-regions-niftilabelsmasker-niftimapsmasker"]], "Regions definition": [[182, "regions-definition"]], "NiftiLabelsMasker Usage": [[182, "niftilabelsmasker-usage"]], "NiftiMapsMasker Usage": [[182, "niftimapsmasker-usage"]], "Extraction of signals from regions for multiple subjects: MultiNiftiMasker, MultiNiftiLabelsMasker, MultiNiftiMapsMasker": [[182, "extraction-of-signals-from-regions-for-multiple-subjects-multiniftimasker-multiniftilabelsmasker-multiniftimapsmasker"]], "MultiNiftiMasker Usage": [[182, "multiniftimasker-usage"]], "MultiNiftiLabelsMasker Usage": [[182, "multiniftilabelsmasker-usage"]], "MultiNiftiMapsMasker Usage": [[182, "multiniftimapsmasker-usage"]], "Extraction of signals from seeds: NiftiSpheresMasker": [[182, "extraction-of-signals-from-seeds-niftispheresmasker"]], "nilearn.connectome: Functional Connectivity": [[183, "module-nilearn.connectome"]], "nilearn.datasets: Automatic Dataset Fetching": [[184, "module-nilearn.datasets"]], "Templates": [[184, "templates"]], "Templates descriptions": [[184, "templates-descriptions"]], "Atlases": [[184, "atlases"]], "Atlases descriptions": [[184, "atlases-descriptions"]], "Preprocessed datasets": [[184, "preprocessed-datasets"]], "Datasets descriptions": [[184, "datasets-descriptions"]], "Statistical maps/derivatives": [[184, "statistical-maps-derivatives"]], "Statistical maps/derivatives descriptions": [[184, "statistical-maps-derivatives-descriptions"]], "General functions": [[184, "general-functions"]], "General functions descriptions": [[184, "general-functions-descriptions"]], "nilearn.decoding: Decoding": [[185, "module-nilearn.decoding"]], "nilearn.decomposition: Multivariate Decompositions": [[186, "module-nilearn.decomposition"]], "ABIDE PCP dataset": [[187, "abide-pcp-dataset"]], "Access": [[187, "access"], [188, "access"], [189, "access"], [190, "access"], [191, "access"], [192, "access"], [194, "access"], [195, "access"], [196, "access"], [197, "access"], [198, "access"], [199, "access"], [200, "access"], [201, "access"], [202, "access"], [203, "access"], [204, "access"], [205, "access"], [206, "access"], [207, "access"], [208, "access"], [209, "access"], [210, "access"], [211, "access"], [212, "access"], [213, "access"], [214, "access"], [216, "access"], [217, "access"], [218, "access"], [219, "access"], [220, "access"], [221, "access"], [222, "access"], [223, "access"], [224, "access"], [225, "access"], [226, "access"]], "Notes": [[187, "notes"], [188, "notes"], [189, "notes"], [190, "notes"], [191, "notes"], [193, "notes"], [194, "notes"], [195, "notes"], [196, "notes"], [197, "notes"], [198, "notes"], [199, "notes"], [200, "notes"], [201, "notes"], [202, "notes"], [203, "notes"], [204, "notes"], [205, "notes"], [206, "notes"], [207, "notes"], [208, "notes"], [209, "notes"], [210, "notes"], [211, "notes"], [212, "notes"], [213, "notes"], [214, "notes"], [215, "notes"], [216, "notes"], [217, "notes"], [218, "notes"], [219, "notes"], [220, "notes"], [221, "notes"], [222, "notes"], [223, "notes"], [224, "notes"], [225, "notes"], [226, "notes"]], "Content": [[187, "content"], [188, "content"], [189, "content"], [190, "content"], [191, "content"], [192, "content"], [194, "content"], [195, "content"], [196, "content"], [197, "content"], [198, "content"], [199, "content"], [200, "content"], [201, "content"], [202, "content"], [203, "content"], [204, "content"], [205, "content"], [206, "content"], [207, "content"], [208, "content"], [209, "content"], [210, "content"], [211, "content"], [212, "content"], [213, "content"], [214, "content"], [215, "content"], [216, "content"], [217, "content"], [218, "content"], [219, "content"], [220, "content"], [221, "content"], [222, "content"], [223, "content"], [224, "content"], [225, "content"], [226, "content"]], "License": [[187, "license"], [189, "license"], [190, "license"], [191, "license"], [192, "license"], [194, "license"], [195, "license"], [196, "license"], [197, "license"], [198, "license"], [199, "license"], [200, "license"], [201, "license"], [202, "license"], [203, "license"], [204, "license"], [205, "license"], [206, "license"], [207, "license"], [208, "license"], [209, "license"], [210, "license"], [211, "license"], [212, "license"], [213, "license"], [214, "license"], [215, "license"], [216, "license"], [217, "license"], [218, "license"], [219, "license"], [220, "license"], [221, "license"], [222, "license"], [223, "license"], [224, "license"], [225, "license"], [226, "license"]], "MegaTrawls Network Matrices HCP": [[188, "megatrawls-network-matrices-hcp"]], "Disclaimer": [[188, "disclaimer"]], "AAL atlas": [[189, "aal-atlas"]], "ADHD dataset": [[190, "adhd-dataset"]], "Allen 2011 atlas": [[191, "allen-2011-atlas"]], "BASC multiscale atlas": [[192, "basc-multiscale-atlas"]], "Preprocessing": [[192, "preprocessing"]], "Bootstrap Analysis of Stable Clusters": [[192, "bootstrap-analysis-of-stable-clusters"]], "BIDS language localizer": [[193, "bids-language-localizer"]], "Brainomics Localizer": [[194, "brainomics-localizer"]], "Craddock 2012 atlas": [[195, "craddock-2012-atlas"]], "Destrieux atlas": [[196, "destrieux-atlas"]], "development fMRI dataset": [[197, "development-fmri-dataset"]], "DiFuMo atlas": [[198, "difumo-atlas"]], "Dosenbach 2010 atlas": [[199, "dosenbach-2010-atlas"]], "fiac first level dataset": [[200, "fiac-first-level-dataset"]], "fsaverage template": [[201, "fsaverage-template"]], "fsaverage3 template": [[202, "fsaverage3-template"]], "fsaverage4 template": [[203, "fsaverage4-template"]], "fsaverage5 template": [[204, "fsaverage5-template"]], "fsaverage6 template": [[205, "fsaverage6-template"]], "Harvard Oxford atlas": [[206, "harvard-oxford-atlas"]], "Haxby dataset": [[207, "haxby-dataset"]], "ICBM 152 template": [[208, "icbm-152-template"]], "Juelich atlas": [[209, "juelich-atlas"]], "language localizer demo dataset": [[210, "language-localizer-demo-dataset"]], "localizer first level dataset": [[211, "localizer-first-level-dataset"]], "Mixed gambles statistical maps": [[212, "mixed-gambles-statistical-maps"]], "Miyawaki 2008 dataset": [[213, "miyawaki-2008-dataset"]], "MSDL atlas": [[214, "msdl-atlas"]], "Neurovault statistical maps": [[215, "neurovault-statistical-maps"]], "NKI enhanced surface dataset": [[216, "nki-enhanced-surface-dataset"]], "OASIS volume based morphometry maps": [[217, "oasis-volume-based-morphometry-maps"]], "Pauli 2007 atlas": [[218, "pauli-2007-atlas"]], "Power 2011 atlas": [[219, "power-2011-atlas"]], "Schaefer 2018 atlas": [[220, "schaefer-2018-atlas"]], "Seitzman 2018 atlas": [[221, "seitzman-2018-atlas"]], "Smith 2009 atlas": [[222, "smith-2009-atlas"]], "SPM auditory dataset": [[223, "spm-auditory-dataset"]], "SPM multimodal dataset": [[224, "spm-multimodal-dataset"]], "Talairach atlas": [[225, "talairach-atlas"]], "Yeo 2011 atlas": [[226, "yeo-2011-atlas"]], "nilearn.experimental: Experimental Modules": [[227, "module-nilearn.experimental"]], "nilearn.experimental.surface": [[227, "module-nilearn.experimental.surface"]], "nilearn.connectome.ConnectivityMeasure": [[228, "nilearn-connectome-connectivitymeasure"]], "Examples using nilearn.connectome.ConnectivityMeasure": [[228, "examples-using-nilearn-connectome-connectivitymeasure"]], "nilearn.connectome.GroupSparseCovariance": [[229, "nilearn-connectome-groupsparsecovariance"]], "nilearn.connectome.GroupSparseCovarianceCV": [[230, "nilearn-connectome-groupsparsecovariancecv"]], "Examples using nilearn.connectome.GroupSparseCovarianceCV": [[230, "examples-using-nilearn-connectome-groupsparsecovariancecv"]], "nilearn.connectome.cov_to_corr": [[231, "nilearn-connectome-cov-to-corr"]], "nilearn.connectome.group_sparse_covariance": [[232, "nilearn-connectome-group-sparse-covariance"]], "nilearn.connectome.prec_to_partial": [[233, "nilearn-connectome-prec-to-partial"]], "nilearn.connectome.sym_matrix_to_vec": [[234, "nilearn-connectome-sym-matrix-to-vec"]], "nilearn.connectome.vec_to_sym_matrix": [[235, "nilearn-connectome-vec-to-sym-matrix"]], "nilearn.datasets.fetch_abide_pcp": [[236, "nilearn-datasets-fetch-abide-pcp"]], "nilearn.datasets.fetch_adhd": [[237, "nilearn-datasets-fetch-adhd"]], "Examples using nilearn.datasets.fetch_adhd": [[237, "examples-using-nilearn-datasets-fetch-adhd"]], "nilearn.datasets.fetch_atlas_aal": [[238, "nilearn-datasets-fetch-atlas-aal"]], "nilearn.datasets.fetch_atlas_allen_2011": [[239, "nilearn-datasets-fetch-atlas-allen-2011"]], "Examples using nilearn.datasets.fetch_atlas_allen_2011": [[239, "examples-using-nilearn-datasets-fetch-atlas-allen-2011"]], "nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[240, "nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "Examples using nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[240, "examples-using-nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "nilearn.datasets.fetch_atlas_craddock_2012": [[241, "nilearn-datasets-fetch-atlas-craddock-2012"]], "nilearn.datasets.fetch_atlas_destrieux_2009": [[242, "nilearn-datasets-fetch-atlas-destrieux-2009"]], "Examples using nilearn.datasets.fetch_atlas_destrieux_2009": [[242, "examples-using-nilearn-datasets-fetch-atlas-destrieux-2009"]], "nilearn.datasets.fetch_atlas_difumo": [[243, "nilearn-datasets-fetch-atlas-difumo"]], "Examples using nilearn.datasets.fetch_atlas_difumo": [[243, "examples-using-nilearn-datasets-fetch-atlas-difumo"]], "nilearn.datasets.fetch_atlas_harvard_oxford": [[244, "nilearn-datasets-fetch-atlas-harvard-oxford"]], "Examples using nilearn.datasets.fetch_atlas_harvard_oxford": [[244, "examples-using-nilearn-datasets-fetch-atlas-harvard-oxford"]], "nilearn.datasets.fetch_atlas_juelich": [[245, "nilearn-datasets-fetch-atlas-juelich"]], "Examples using nilearn.datasets.fetch_atlas_juelich": [[245, "examples-using-nilearn-datasets-fetch-atlas-juelich"]], "nilearn.datasets.fetch_atlas_msdl": [[246, "nilearn-datasets-fetch-atlas-msdl"]], "Examples using nilearn.datasets.fetch_atlas_msdl": [[246, "examples-using-nilearn-datasets-fetch-atlas-msdl"]], "nilearn.datasets.fetch_atlas_pauli_2017": [[247, "nilearn-datasets-fetch-atlas-pauli-2017"]], "nilearn.datasets.fetch_atlas_schaefer_2018": [[248, "nilearn-datasets-fetch-atlas-schaefer-2018"]], "nilearn.datasets.fetch_atlas_smith_2009": [[249, "nilearn-datasets-fetch-atlas-smith-2009"]], "Examples using nilearn.datasets.fetch_atlas_smith_2009": [[249, "examples-using-nilearn-datasets-fetch-atlas-smith-2009"]], "nilearn.datasets.fetch_atlas_surf_destrieux": [[250, "nilearn-datasets-fetch-atlas-surf-destrieux"]], "Examples using nilearn.datasets.fetch_atlas_surf_destrieux": [[250, "examples-using-nilearn-datasets-fetch-atlas-surf-destrieux"]], "nilearn.datasets.fetch_atlas_talairach": [[251, "nilearn-datasets-fetch-atlas-talairach"]], "nilearn.datasets.fetch_atlas_yeo_2011": [[252, "nilearn-datasets-fetch-atlas-yeo-2011"]], "Examples using nilearn.datasets.fetch_atlas_yeo_2011": [[252, "examples-using-nilearn-datasets-fetch-atlas-yeo-2011"]], "nilearn.datasets.fetch_bids_langloc_dataset": [[253, "nilearn-datasets-fetch-bids-langloc-dataset"]], "nilearn.datasets.fetch_coords_dosenbach_2010": [[254, "nilearn-datasets-fetch-coords-dosenbach-2010"]], "Examples using nilearn.datasets.fetch_coords_dosenbach_2010": [[254, "examples-using-nilearn-datasets-fetch-coords-dosenbach-2010"]], "nilearn.datasets.fetch_coords_power_2011": [[255, "nilearn-datasets-fetch-coords-power-2011"]], "Examples using nilearn.datasets.fetch_coords_power_2011": [[255, "examples-using-nilearn-datasets-fetch-coords-power-2011"]], "nilearn.datasets.fetch_coords_seitzman_2018": [[256, "nilearn-datasets-fetch-coords-seitzman-2018"]], "nilearn.datasets.fetch_development_fmri": [[257, "nilearn-datasets-fetch-development-fmri"]], "Examples using nilearn.datasets.fetch_development_fmri": [[257, "examples-using-nilearn-datasets-fetch-development-fmri"]], "nilearn.datasets.fetch_ds000030_urls": [[258, "nilearn-datasets-fetch-ds000030-urls"]], "Examples using nilearn.datasets.fetch_ds000030_urls": [[258, "examples-using-nilearn-datasets-fetch-ds000030-urls"]], "nilearn.datasets.fetch_fiac_first_level": [[259, "nilearn-datasets-fetch-fiac-first-level"]], "Examples using nilearn.datasets.fetch_fiac_first_level": [[259, "examples-using-nilearn-datasets-fetch-fiac-first-level"]], "nilearn.datasets.fetch_haxby": [[260, "nilearn-datasets-fetch-haxby"]], "Examples using nilearn.datasets.fetch_haxby": [[260, "examples-using-nilearn-datasets-fetch-haxby"]], "nilearn.datasets.fetch_icbm152_2009": [[261, "nilearn-datasets-fetch-icbm152-2009"]], "Examples using nilearn.datasets.fetch_icbm152_2009": [[261, "examples-using-nilearn-datasets-fetch-icbm152-2009"]], "nilearn.datasets.fetch_icbm152_brain_gm_mask": [[262, "nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "Examples using nilearn.datasets.fetch_icbm152_brain_gm_mask": [[262, "examples-using-nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "nilearn.datasets.fetch_language_localizer_demo_dataset": [[263, "nilearn-datasets-fetch-language-localizer-demo-dataset"]], "Examples using nilearn.datasets.fetch_language_localizer_demo_dataset": [[263, "examples-using-nilearn-datasets-fetch-language-localizer-demo-dataset"]], "nilearn.datasets.fetch_localizer_button_task": [[264, "nilearn-datasets-fetch-localizer-button-task"]], "Examples using nilearn.datasets.fetch_localizer_button_task": [[264, "examples-using-nilearn-datasets-fetch-localizer-button-task"]], "nilearn.datasets.fetch_localizer_calculation_task": [[265, "nilearn-datasets-fetch-localizer-calculation-task"]], "Examples using nilearn.datasets.fetch_localizer_calculation_task": [[265, "examples-using-nilearn-datasets-fetch-localizer-calculation-task"]], "nilearn.datasets.fetch_localizer_contrasts": [[266, "nilearn-datasets-fetch-localizer-contrasts"]], "Examples using nilearn.datasets.fetch_localizer_contrasts": [[266, "examples-using-nilearn-datasets-fetch-localizer-contrasts"]], "nilearn.datasets.fetch_localizer_first_level": [[267, "nilearn-datasets-fetch-localizer-first-level"]], "Examples using nilearn.datasets.fetch_localizer_first_level": [[267, "examples-using-nilearn-datasets-fetch-localizer-first-level"]], "nilearn.datasets.fetch_megatrawls_netmats": [[268, "nilearn-datasets-fetch-megatrawls-netmats"]], "Examples using nilearn.datasets.fetch_megatrawls_netmats": [[268, "examples-using-nilearn-datasets-fetch-megatrawls-netmats"]], "nilearn.datasets.fetch_mixed_gambles": [[269, "nilearn-datasets-fetch-mixed-gambles"]], "Examples using nilearn.datasets.fetch_mixed_gambles": [[269, "examples-using-nilearn-datasets-fetch-mixed-gambles"]], "nilearn.datasets.fetch_miyawaki2008": [[270, "nilearn-datasets-fetch-miyawaki2008"]], "Examples using nilearn.datasets.fetch_miyawaki2008": [[270, "examples-using-nilearn-datasets-fetch-miyawaki2008"]], "nilearn.datasets.fetch_neurovault": [[271, "nilearn-datasets-fetch-neurovault"]], "Examples using nilearn.datasets.fetch_neurovault": [[271, "examples-using-nilearn-datasets-fetch-neurovault"]], "nilearn.datasets.fetch_neurovault_auditory_computation_task": [[272, "nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "Examples using nilearn.datasets.fetch_neurovault_auditory_computation_task": [[272, "examples-using-nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "nilearn.datasets.fetch_neurovault_ids": [[273, "nilearn-datasets-fetch-neurovault-ids"]], "Examples using nilearn.datasets.fetch_neurovault_ids": [[273, "examples-using-nilearn-datasets-fetch-neurovault-ids"]], "nilearn.datasets.fetch_neurovault_motor_task": [[274, "nilearn-datasets-fetch-neurovault-motor-task"]], "Examples using nilearn.datasets.fetch_neurovault_motor_task": [[274, "examples-using-nilearn-datasets-fetch-neurovault-motor-task"]], "nilearn.datasets.fetch_oasis_vbm": [[275, "nilearn-datasets-fetch-oasis-vbm"]], "Examples using nilearn.datasets.fetch_oasis_vbm": [[275, "examples-using-nilearn-datasets-fetch-oasis-vbm"]], "nilearn.datasets.fetch_openneuro_dataset": [[276, "nilearn-datasets-fetch-openneuro-dataset"]], "Examples using nilearn.datasets.fetch_openneuro_dataset": [[276, "examples-using-nilearn-datasets-fetch-openneuro-dataset"]], "nilearn.datasets.fetch_openneuro_dataset_index": [[277, "nilearn-datasets-fetch-openneuro-dataset-index"]], "nilearn.datasets.fetch_spm_auditory": [[278, "nilearn-datasets-fetch-spm-auditory"]], "Examples using nilearn.datasets.fetch_spm_auditory": [[278, "examples-using-nilearn-datasets-fetch-spm-auditory"]], "nilearn.datasets.fetch_spm_multimodal_fmri": [[279, "nilearn-datasets-fetch-spm-multimodal-fmri"]], "Examples using nilearn.datasets.fetch_spm_multimodal_fmri": [[279, "examples-using-nilearn-datasets-fetch-spm-multimodal-fmri"]], "nilearn.datasets.fetch_surf_fsaverage": [[280, "nilearn-datasets-fetch-surf-fsaverage"]], "Examples using nilearn.datasets.fetch_surf_fsaverage": [[280, "examples-using-nilearn-datasets-fetch-surf-fsaverage"]], "nilearn.datasets.fetch_surf_nki_enhanced": [[281, "nilearn-datasets-fetch-surf-nki-enhanced"]], "Examples using nilearn.datasets.fetch_surf_nki_enhanced": [[281, "examples-using-nilearn-datasets-fetch-surf-nki-enhanced"]], "nilearn.datasets.get_data_dirs": [[282, "nilearn-datasets-get-data-dirs"]], "Examples using nilearn.datasets.get_data_dirs": [[282, "examples-using-nilearn-datasets-get-data-dirs"]], "nilearn.datasets.load_mni152_brain_mask": [[283, "nilearn-datasets-load-mni152-brain-mask"]], "Examples using nilearn.datasets.load_mni152_brain_mask": [[283, "examples-using-nilearn-datasets-load-mni152-brain-mask"]], "nilearn.datasets.load_mni152_gm_mask": [[284, "nilearn-datasets-load-mni152-gm-mask"]], "nilearn.datasets.load_mni152_gm_template": [[285, "nilearn-datasets-load-mni152-gm-template"]], "nilearn.datasets.load_mni152_template": [[286, "nilearn-datasets-load-mni152-template"]], "Examples using nilearn.datasets.load_mni152_template": [[286, "examples-using-nilearn-datasets-load-mni152-template"]], "nilearn.datasets.load_mni152_wm_mask": [[287, "nilearn-datasets-load-mni152-wm-mask"]], "nilearn.datasets.load_mni152_wm_template": [[288, "nilearn-datasets-load-mni152-wm-template"]], "nilearn.datasets.load_sample_motor_activation_image": [[289, "nilearn-datasets-load-sample-motor-activation-image"]], "Examples using nilearn.datasets.load_sample_motor_activation_image": [[289, "examples-using-nilearn-datasets-load-sample-motor-activation-image"]], "nilearn.datasets.patch_openneuro_dataset": [[290, "nilearn-datasets-patch-openneuro-dataset"]], "nilearn.datasets.select_from_index": [[291, "nilearn-datasets-select-from-index"]], "Examples using nilearn.datasets.select_from_index": [[291, "examples-using-nilearn-datasets-select-from-index"]], "nilearn.decoding.Decoder": [[292, "nilearn-decoding-decoder"]], "Examples using nilearn.decoding.Decoder": [[292, "examples-using-nilearn-decoding-decoder"]], "nilearn.decoding.DecoderRegressor": [[293, "nilearn-decoding-decoderregressor"]], "Examples using nilearn.decoding.DecoderRegressor": [[293, "examples-using-nilearn-decoding-decoderregressor"]], "nilearn.decoding.FREMClassifier": [[294, "nilearn-decoding-fremclassifier"]], "Examples using nilearn.decoding.FREMClassifier": [[294, "examples-using-nilearn-decoding-fremclassifier"]], "nilearn.decoding.FREMRegressor": [[295, "nilearn-decoding-fremregressor"]], "Examples using nilearn.decoding.FREMRegressor": [[295, "examples-using-nilearn-decoding-fremregressor"]], "nilearn.decoding.SearchLight": [[296, "nilearn-decoding-searchlight"]], "Examples using nilearn.decoding.SearchLight": [[296, "examples-using-nilearn-decoding-searchlight"]], "nilearn.decoding.SpaceNetClassifier": [[297, "nilearn-decoding-spacenetclassifier"]], "nilearn.decoding.SpaceNetRegressor": [[298, "nilearn-decoding-spacenetregressor"]], "Examples using nilearn.decoding.SpaceNetRegressor": [[298, "examples-using-nilearn-decoding-spacenetregressor"]], "nilearn.decomposition.CanICA": [[299, "nilearn-decomposition-canica"]], "Examples using nilearn.decomposition.CanICA": [[299, "examples-using-nilearn-decomposition-canica"]], "nilearn.decomposition.DictLearning": [[300, "nilearn-decomposition-dictlearning"]], "Examples using nilearn.decomposition.DictLearning": [[300, "examples-using-nilearn-decomposition-dictlearning"]], "nilearn.experimental.surface.FileMesh": [[301, "nilearn-experimental-surface-filemesh"]], "nilearn.experimental.surface.InMemoryMesh": [[302, "nilearn-experimental-surface-inmemorymesh"]], "nilearn.experimental.surface.Mesh": [[303, "nilearn-experimental-surface-mesh"]], "nilearn.experimental.surface.PolyMesh": [[304, "nilearn-experimental-surface-polymesh"]], "Examples using nilearn.experimental.surface.PolyMesh": [[304, "examples-using-nilearn-experimental-surface-polymesh"]], "nilearn.experimental.surface.SurfaceImage": [[305, "nilearn-experimental-surface-surfaceimage"]], "Examples using nilearn.experimental.surface.SurfaceImage": [[305, "examples-using-nilearn-experimental-surface-surfaceimage"]], "nilearn.experimental.surface.SurfaceLabelsMasker": [[306, "nilearn-experimental-surface-surfacelabelsmasker"]], "Examples using nilearn.experimental.surface.SurfaceLabelsMasker": [[306, "examples-using-nilearn-experimental-surface-surfacelabelsmasker"]], "nilearn.experimental.surface.SurfaceMasker": [[307, "nilearn-experimental-surface-surfacemasker"]], "Examples using nilearn.experimental.surface.SurfaceMasker": [[307, "examples-using-nilearn-experimental-surface-surfacemasker"]], "nilearn.experimental.surface.fetch_destrieux": [[308, "nilearn-experimental-surface-fetch-destrieux"]], "Examples using nilearn.experimental.surface.fetch_destrieux": [[308, "examples-using-nilearn-experimental-surface-fetch-destrieux"]], "nilearn.experimental.surface.fetch_nki": [[309, "nilearn-experimental-surface-fetch-nki"]], "Examples using nilearn.experimental.surface.fetch_nki": [[309, "examples-using-nilearn-experimental-surface-fetch-nki"]], "nilearn.experimental.surface.load_fsaverage": [[310, "nilearn-experimental-surface-load-fsaverage"]], "nilearn.glm.ARModel": [[311, "nilearn-glm-armodel"]], "nilearn.glm.Contrast": [[312, "nilearn-glm-contrast"]], "Examples using nilearn.glm.Contrast": [[312, "examples-using-nilearn-glm-contrast"]], "nilearn.glm.FContrastResults": [[313, "nilearn-glm-fcontrastresults"]], "nilearn.glm.LikelihoodModelResults": [[314, "nilearn-glm-likelihoodmodelresults"]], "nilearn.glm.OLSModel": [[315, "nilearn-glm-olsmodel"]], "nilearn.glm.RegressionResults": [[316, "nilearn-glm-regressionresults"]], "nilearn.glm.SimpleRegressionResults": [[317, "nilearn-glm-simpleregressionresults"]], "nilearn.glm.TContrastResults": [[318, "nilearn-glm-tcontrastresults"]], "nilearn.glm.cluster_level_inference": [[319, "nilearn-glm-cluster-level-inference"]], "Examples using nilearn.glm.cluster_level_inference": [[319, "examples-using-nilearn-glm-cluster-level-inference"]], "nilearn.glm.compute_contrast": [[320, "nilearn-glm-compute-contrast"]], "Examples using nilearn.glm.compute_contrast": [[320, "examples-using-nilearn-glm-compute-contrast"]], "nilearn.glm.compute_fixed_effects": [[321, "nilearn-glm-compute-fixed-effects"]], "Examples using nilearn.glm.compute_fixed_effects": [[321, "examples-using-nilearn-glm-compute-fixed-effects"]], "nilearn.glm.expression_to_contrast_vector": [[322, "nilearn-glm-expression-to-contrast-vector"]], "nilearn.glm.fdr_threshold": [[323, "nilearn-glm-fdr-threshold"]], "nilearn.glm.first_level.FirstLevelModel": [[324, "nilearn-glm-first-level-firstlevelmodel"]], "Examples using nilearn.glm.first_level.FirstLevelModel": [[324, "examples-using-nilearn-glm-first-level-firstlevelmodel"]], "nilearn.glm.first_level.check_design_matrix": [[325, "nilearn-glm-first-level-check-design-matrix"]], "nilearn.glm.first_level.compute_regressor": [[326, "nilearn-glm-first-level-compute-regressor"]], "Examples using nilearn.glm.first_level.compute_regressor": [[326, "examples-using-nilearn-glm-first-level-compute-regressor"]], "nilearn.glm.first_level.first_level_from_bids": [[327, "nilearn-glm-first-level-first-level-from-bids"]], "Examples using nilearn.glm.first_level.first_level_from_bids": [[327, "examples-using-nilearn-glm-first-level-first-level-from-bids"]], "nilearn.glm.first_level.glover_dispersion_derivative": [[328, "nilearn-glm-first-level-glover-dispersion-derivative"]], "nilearn.glm.first_level.glover_hrf": [[329, "nilearn-glm-first-level-glover-hrf"]], "nilearn.glm.first_level.glover_time_derivative": [[330, "nilearn-glm-first-level-glover-time-derivative"]], "nilearn.glm.first_level.make_first_level_design_matrix": [[331, "nilearn-glm-first-level-make-first-level-design-matrix"]], "Examples using nilearn.glm.first_level.make_first_level_design_matrix": [[331, "examples-using-nilearn-glm-first-level-make-first-level-design-matrix"]], "nilearn.glm.first_level.mean_scaling": [[332, "nilearn-glm-first-level-mean-scaling"]], "nilearn.glm.first_level.run_glm": [[333, "nilearn-glm-first-level-run-glm"]], "Examples using nilearn.glm.first_level.run_glm": [[333, "examples-using-nilearn-glm-first-level-run-glm"]], "nilearn.glm.first_level.spm_dispersion_derivative": [[334, "nilearn-glm-first-level-spm-dispersion-derivative"]], "nilearn.glm.first_level.spm_hrf": [[335, "nilearn-glm-first-level-spm-hrf"]], "nilearn.glm.first_level.spm_time_derivative": [[336, "nilearn-glm-first-level-spm-time-derivative"]], "nilearn.glm.second_level.SecondLevelModel": [[337, "nilearn-glm-second-level-secondlevelmodel"]], "Examples using nilearn.glm.second_level.SecondLevelModel": [[337, "examples-using-nilearn-glm-second-level-secondlevelmodel"]], "nilearn.glm.second_level.make_second_level_design_matrix": [[338, "nilearn-glm-second-level-make-second-level-design-matrix"]], "Examples using nilearn.glm.second_level.make_second_level_design_matrix": [[338, "examples-using-nilearn-glm-second-level-make-second-level-design-matrix"]], "nilearn.glm.second_level.non_parametric_inference": [[339, "nilearn-glm-second-level-non-parametric-inference"]], "Examples using nilearn.glm.second_level.non_parametric_inference": [[339, "examples-using-nilearn-glm-second-level-non-parametric-inference"]], "nilearn.glm.threshold_stats_img": [[340, "nilearn-glm-threshold-stats-img"]], "Examples using nilearn.glm.threshold_stats_img": [[340, "examples-using-nilearn-glm-threshold-stats-img"]], "nilearn.image.binarize_img": [[341, "nilearn-image-binarize-img"]], "nilearn.image.clean_img": [[342, "nilearn-image-clean-img"]], "Examples using nilearn.image.clean_img": [[342, "examples-using-nilearn-image-clean-img"]], "nilearn.image.concat_imgs": [[343, "nilearn-image-concat-imgs"]], "Examples using nilearn.image.concat_imgs": [[343, "examples-using-nilearn-image-concat-imgs"]], "nilearn.image.coord_transform": [[344, "nilearn-image-coord-transform"]], "Examples using nilearn.image.coord_transform": [[344, "examples-using-nilearn-image-coord-transform"]], "nilearn.image.copy_img": [[345, "nilearn-image-copy-img"]], "nilearn.image.crop_img": [[346, "nilearn-image-crop-img"]], "nilearn.image.get_data": [[347, "nilearn-image-get-data"]], "Examples using nilearn.image.get_data": [[347, "examples-using-nilearn-image-get-data"]], "nilearn.image.high_variance_confounds": [[348, "nilearn-image-high-variance-confounds"]], "Examples using nilearn.image.high_variance_confounds": [[348, "examples-using-nilearn-image-high-variance-confounds"]], "nilearn.image.index_img": [[349, "nilearn-image-index-img"]], "Examples using nilearn.image.index_img": [[349, "examples-using-nilearn-image-index-img"]], "nilearn.image.iter_img": [[350, "nilearn-image-iter-img"]], "Examples using nilearn.image.iter_img": [[350, "examples-using-nilearn-image-iter-img"]], "nilearn.image.largest_connected_component_img": [[351, "nilearn-image-largest-connected-component-img"]], "nilearn.image.load_img": [[352, "nilearn-image-load-img"]], "Examples using nilearn.image.load_img": [[352, "examples-using-nilearn-image-load-img"]], "nilearn.image.math_img": [[353, "nilearn-image-math-img"]], "Examples using nilearn.image.math_img": [[353, "examples-using-nilearn-image-math-img"]], "nilearn.image.mean_img": [[354, "nilearn-image-mean-img"]], "Examples using nilearn.image.mean_img": [[354, "examples-using-nilearn-image-mean-img"]], "nilearn.image.new_img_like": [[355, "nilearn-image-new-img-like"]], "Examples using nilearn.image.new_img_like": [[355, "examples-using-nilearn-image-new-img-like"]], "nilearn.image.reorder_img": [[356, "nilearn-image-reorder-img"]], "nilearn.image.resample_img": [[357, "nilearn-image-resample-img"]], "Examples using nilearn.image.resample_img": [[357, "examples-using-nilearn-image-resample-img"]], "nilearn.image.resample_to_img": [[358, "nilearn-image-resample-to-img"]], "Examples using nilearn.image.resample_to_img": [[358, "examples-using-nilearn-image-resample-to-img"]], "nilearn.image.smooth_img": [[359, "nilearn-image-smooth-img"]], "Examples using nilearn.image.smooth_img": [[359, "examples-using-nilearn-image-smooth-img"]], "nilearn.image.swap_img_hemispheres": [[360, "nilearn-image-swap-img-hemispheres"]], "nilearn.image.threshold_img": [[361, "nilearn-image-threshold-img"]], "Examples using nilearn.image.threshold_img": [[361, "examples-using-nilearn-image-threshold-img"]], "nilearn.interfaces.bids.get_bids_files": [[362, "nilearn-interfaces-bids-get-bids-files"]], "nilearn.interfaces.bids.parse_bids_filename": [[363, "nilearn-interfaces-bids-parse-bids-filename"]], "nilearn.interfaces.bids.save_glm_to_bids": [[364, "nilearn-interfaces-bids-save-glm-to-bids"]], "Examples using nilearn.interfaces.bids.save_glm_to_bids": [[364, "examples-using-nilearn-interfaces-bids-save-glm-to-bids"]], "nilearn.interfaces.fmriprep.load_confounds": [[365, "nilearn-interfaces-fmriprep-load-confounds"]], "Examples using nilearn.interfaces.fmriprep.load_confounds": [[365, "examples-using-nilearn-interfaces-fmriprep-load-confounds"]], "nilearn.interfaces.fmriprep.load_confounds_strategy": [[366, "nilearn-interfaces-fmriprep-load-confounds-strategy"]], "Examples using nilearn.interfaces.fmriprep.load_confounds_strategy": [[366, "examples-using-nilearn-interfaces-fmriprep-load-confounds-strategy"]], "nilearn.interfaces.fsl.get_design_from_fslmat": [[367, "nilearn-interfaces-fsl-get-design-from-fslmat"]], "Examples using nilearn.interfaces.fsl.get_design_from_fslmat": [[367, "examples-using-nilearn-interfaces-fsl-get-design-from-fslmat"]], "nilearn.maskers.BaseMasker": [[368, "nilearn-maskers-basemasker"]], "Examples using nilearn.maskers.BaseMasker": [[368, "examples-using-nilearn-maskers-basemasker"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[369, "nilearn-maskers-multiniftilabelsmasker"]], "Examples using nilearn.maskers.MultiNiftiLabelsMasker": [[369, "examples-using-nilearn-maskers-multiniftilabelsmasker"]], "nilearn.maskers.MultiNiftiMapsMasker": [[370, "nilearn-maskers-multiniftimapsmasker"]], "Examples using nilearn.maskers.MultiNiftiMapsMasker": [[370, "examples-using-nilearn-maskers-multiniftimapsmasker"]], "nilearn.maskers.MultiNiftiMasker": [[371, "nilearn-maskers-multiniftimasker"]], "Examples using nilearn.maskers.MultiNiftiMasker": [[371, "examples-using-nilearn-maskers-multiniftimasker"]], "nilearn.maskers.NiftiLabelsMasker": [[372, "nilearn-maskers-niftilabelsmasker"]], "Examples using nilearn.maskers.NiftiLabelsMasker": [[372, "examples-using-nilearn-maskers-niftilabelsmasker"]], "nilearn.maskers.NiftiMapsMasker": [[373, "nilearn-maskers-niftimapsmasker"]], "Examples using nilearn.maskers.NiftiMapsMasker": [[373, "examples-using-nilearn-maskers-niftimapsmasker"]], "nilearn.maskers.NiftiMasker": [[374, "nilearn-maskers-niftimasker"]], "Examples using nilearn.maskers.NiftiMasker": [[374, "examples-using-nilearn-maskers-niftimasker"]], "nilearn.maskers.NiftiSpheresMasker": [[375, "nilearn-maskers-niftispheresmasker"]], "Examples using nilearn.maskers.NiftiSpheresMasker": [[375, "examples-using-nilearn-maskers-niftispheresmasker"]], "nilearn.masking.apply_mask": [[376, "nilearn-masking-apply-mask"]], "Examples using nilearn.masking.apply_mask": [[376, "examples-using-nilearn-masking-apply-mask"]], "nilearn.masking.compute_background_mask": [[377, "nilearn-masking-compute-background-mask"]], "nilearn.masking.compute_brain_mask": [[378, "nilearn-masking-compute-brain-mask"]], "nilearn.masking.compute_epi_mask": [[379, "nilearn-masking-compute-epi-mask"]], "Examples using nilearn.masking.compute_epi_mask": [[379, "examples-using-nilearn-masking-compute-epi-mask"]], "nilearn.masking.compute_multi_background_mask": [[380, "nilearn-masking-compute-multi-background-mask"]], "nilearn.masking.compute_multi_brain_mask": [[381, "nilearn-masking-compute-multi-brain-mask"]], "nilearn.masking.compute_multi_epi_mask": [[382, "nilearn-masking-compute-multi-epi-mask"]], "nilearn.masking.intersect_masks": [[383, "nilearn-masking-intersect-masks"]], "nilearn.masking.unmask": [[384, "nilearn-masking-unmask"]], "Examples using nilearn.masking.unmask": [[384, "examples-using-nilearn-masking-unmask"]], "nilearn.mass_univariate.permuted_ols": [[385, "nilearn-mass-univariate-permuted-ols"]], "Examples using nilearn.mass_univariate.permuted_ols": [[385, "examples-using-nilearn-mass-univariate-permuted-ols"]], "nilearn.plotting.displays.BaseAxes": [[386, "nilearn-plotting-displays-baseaxes"]], "nilearn.plotting.displays.BaseSlicer": [[387, "nilearn-plotting-displays-baseslicer"]], "nilearn.plotting.displays.CutAxes": [[388, "nilearn-plotting-displays-cutaxes"]], "nilearn.plotting.displays.GlassBrainAxes": [[389, "nilearn-plotting-displays-glassbrainaxes"]], "nilearn.plotting.displays.LProjector": [[390, "nilearn-plotting-displays-lprojector"]], "Examples using nilearn.plotting.displays.LProjector": [[390, "examples-using-nilearn-plotting-displays-lprojector"]], "nilearn.plotting.displays.LRProjector": [[391, "nilearn-plotting-displays-lrprojector"]], "Examples using nilearn.plotting.displays.LRProjector": [[391, "examples-using-nilearn-plotting-displays-lrprojector"]], "nilearn.plotting.displays.LYRProjector": [[392, "nilearn-plotting-displays-lyrprojector"]], "Examples using nilearn.plotting.displays.LYRProjector": [[392, "examples-using-nilearn-plotting-displays-lyrprojector"]], "nilearn.plotting.displays.LYRZProjector": [[393, "nilearn-plotting-displays-lyrzprojector"]], "Examples using nilearn.plotting.displays.LYRZProjector": [[393, "examples-using-nilearn-plotting-displays-lyrzprojector"]], "nilearn.plotting.displays.LZRProjector": [[394, "nilearn-plotting-displays-lzrprojector"]], "Examples using nilearn.plotting.displays.LZRProjector": [[394, "examples-using-nilearn-plotting-displays-lzrprojector"]], "nilearn.plotting.displays.LZRYProjector": [[395, "nilearn-plotting-displays-lzryprojector"]], "Examples using nilearn.plotting.displays.LZRYProjector": [[395, "examples-using-nilearn-plotting-displays-lzryprojector"]], "nilearn.plotting.displays.MosaicSlicer": [[396, "nilearn-plotting-displays-mosaicslicer"]], "Examples using nilearn.plotting.displays.MosaicSlicer": [[396, "examples-using-nilearn-plotting-displays-mosaicslicer"]], "nilearn.plotting.displays.OrthoProjector": [[397, "nilearn-plotting-displays-orthoprojector"]], "Examples using nilearn.plotting.displays.OrthoProjector": [[397, "examples-using-nilearn-plotting-displays-orthoprojector"]], "nilearn.plotting.displays.OrthoSlicer": [[398, "nilearn-plotting-displays-orthoslicer"]], "Examples using nilearn.plotting.displays.OrthoSlicer": [[398, "examples-using-nilearn-plotting-displays-orthoslicer"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[399, "nilearn-plotting-displays-plotlysurfacefigure"]], "Examples using nilearn.plotting.displays.PlotlySurfaceFigure": [[399, "examples-using-nilearn-plotting-displays-plotlysurfacefigure"]], "nilearn.plotting.displays.RProjector": [[400, "nilearn-plotting-displays-rprojector"]], "Examples using nilearn.plotting.displays.RProjector": [[400, "examples-using-nilearn-plotting-displays-rprojector"]], "nilearn.plotting.displays.TiledSlicer": [[401, "nilearn-plotting-displays-tiledslicer"]], "Examples using nilearn.plotting.displays.TiledSlicer": [[401, "examples-using-nilearn-plotting-displays-tiledslicer"]], "nilearn.plotting.displays.XProjector": [[402, "nilearn-plotting-displays-xprojector"]], "Examples using nilearn.plotting.displays.XProjector": [[402, "examples-using-nilearn-plotting-displays-xprojector"]], "nilearn.plotting.displays.XSlicer": [[403, "nilearn-plotting-displays-xslicer"]], "Examples using nilearn.plotting.displays.XSlicer": [[403, "examples-using-nilearn-plotting-displays-xslicer"]], "nilearn.plotting.displays.XZProjector": [[404, "nilearn-plotting-displays-xzprojector"]], "Examples using nilearn.plotting.displays.XZProjector": [[404, "examples-using-nilearn-plotting-displays-xzprojector"]], "nilearn.plotting.displays.XZSlicer": [[405, "nilearn-plotting-displays-xzslicer"]], "Examples using nilearn.plotting.displays.XZSlicer": [[405, "examples-using-nilearn-plotting-displays-xzslicer"]], "nilearn.plotting.displays.YProjector": [[406, "nilearn-plotting-displays-yprojector"]], "Examples using nilearn.plotting.displays.YProjector": [[406, "examples-using-nilearn-plotting-displays-yprojector"]], "nilearn.plotting.displays.YSlicer": [[407, "nilearn-plotting-displays-yslicer"]], "Examples using nilearn.plotting.displays.YSlicer": [[407, "examples-using-nilearn-plotting-displays-yslicer"]], "nilearn.plotting.displays.YXProjector": [[408, "nilearn-plotting-displays-yxprojector"]], "Examples using nilearn.plotting.displays.YXProjector": [[408, "examples-using-nilearn-plotting-displays-yxprojector"]], "nilearn.plotting.displays.YXSlicer": [[409, "nilearn-plotting-displays-yxslicer"]], "Examples using nilearn.plotting.displays.YXSlicer": [[409, "examples-using-nilearn-plotting-displays-yxslicer"]], "nilearn.plotting.displays.YZProjector": [[410, "nilearn-plotting-displays-yzprojector"]], "Examples using nilearn.plotting.displays.YZProjector": [[410, "examples-using-nilearn-plotting-displays-yzprojector"]], "nilearn.plotting.displays.YZSlicer": [[411, "nilearn-plotting-displays-yzslicer"]], "Examples using nilearn.plotting.displays.YZSlicer": [[411, "examples-using-nilearn-plotting-displays-yzslicer"]], "nilearn.plotting.displays.ZProjector": [[412, "nilearn-plotting-displays-zprojector"]], "Examples using nilearn.plotting.displays.ZProjector": [[412, "examples-using-nilearn-plotting-displays-zprojector"]], "nilearn.plotting.displays.ZSlicer": [[413, "nilearn-plotting-displays-zslicer"]], "Examples using nilearn.plotting.displays.ZSlicer": [[413, "examples-using-nilearn-plotting-displays-zslicer"]], "nilearn.plotting.displays.get_projector": [[414, "nilearn-plotting-displays-get-projector"]], "nilearn.plotting.displays.get_slicer": [[415, "nilearn-plotting-displays-get-slicer"]], "nilearn.plotting.find_cut_slices": [[416, "nilearn-plotting-find-cut-slices"]], "nilearn.plotting.find_parcellation_cut_coords": [[417, "nilearn-plotting-find-parcellation-cut-coords"]], "Examples using nilearn.plotting.find_parcellation_cut_coords": [[417, "examples-using-nilearn-plotting-find-parcellation-cut-coords"]], "nilearn.plotting.find_probabilistic_atlas_cut_coords": [[418, "nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "Examples using nilearn.plotting.find_probabilistic_atlas_cut_coords": [[418, "examples-using-nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "nilearn.plotting.find_xyz_cut_coords": [[419, "nilearn-plotting-find-xyz-cut-coords"]], "Examples using nilearn.plotting.find_xyz_cut_coords": [[419, "examples-using-nilearn-plotting-find-xyz-cut-coords"]], "nilearn.plotting.plot_anat": [[420, "nilearn-plotting-plot-anat"]], "Examples using nilearn.plotting.plot_anat": [[420, "examples-using-nilearn-plotting-plot-anat"]], "nilearn.plotting.plot_carpet": [[421, "nilearn-plotting-plot-carpet"]], "Examples using nilearn.plotting.plot_carpet": [[421, "examples-using-nilearn-plotting-plot-carpet"]], "nilearn.plotting.plot_connectome": [[422, "nilearn-plotting-plot-connectome"]], "Examples using nilearn.plotting.plot_connectome": [[422, "examples-using-nilearn-plotting-plot-connectome"]], "nilearn.plotting.plot_contrast_matrix": [[423, "nilearn-plotting-plot-contrast-matrix"]], "Examples using nilearn.plotting.plot_contrast_matrix": [[423, "examples-using-nilearn-plotting-plot-contrast-matrix"]], "nilearn.plotting.plot_design_matrix": [[424, "nilearn-plotting-plot-design-matrix"]], "Examples using nilearn.plotting.plot_design_matrix": [[424, "examples-using-nilearn-plotting-plot-design-matrix"]], "nilearn.plotting.plot_epi": [[425, "nilearn-plotting-plot-epi"]], "Examples using nilearn.plotting.plot_epi": [[425, "examples-using-nilearn-plotting-plot-epi"]], "nilearn.plotting.plot_event": [[426, "nilearn-plotting-plot-event"]], "Examples using nilearn.plotting.plot_event": [[426, "examples-using-nilearn-plotting-plot-event"]], "nilearn.plotting.plot_glass_brain": [[427, "nilearn-plotting-plot-glass-brain"]], "Examples using nilearn.plotting.plot_glass_brain": [[427, "examples-using-nilearn-plotting-plot-glass-brain"]], "nilearn.plotting.plot_img": [[428, "nilearn-plotting-plot-img"]], "Examples using nilearn.plotting.plot_img": [[428, "examples-using-nilearn-plotting-plot-img"]], "nilearn.plotting.plot_img_comparison": [[429, "nilearn-plotting-plot-img-comparison"]], "Examples using nilearn.plotting.plot_img_comparison": [[429, "examples-using-nilearn-plotting-plot-img-comparison"]], "nilearn.plotting.plot_img_on_surf": [[430, "nilearn-plotting-plot-img-on-surf"]], "Examples using nilearn.plotting.plot_img_on_surf": [[430, "examples-using-nilearn-plotting-plot-img-on-surf"]], "nilearn.plotting.plot_markers": [[431, "nilearn-plotting-plot-markers"]], "Examples using nilearn.plotting.plot_markers": [[431, "examples-using-nilearn-plotting-plot-markers"]], "nilearn.plotting.plot_matrix": [[432, "nilearn-plotting-plot-matrix"]], "Examples using nilearn.plotting.plot_matrix": [[432, "examples-using-nilearn-plotting-plot-matrix"]], "nilearn.plotting.plot_prob_atlas": [[433, "nilearn-plotting-plot-prob-atlas"]], "Examples using nilearn.plotting.plot_prob_atlas": [[433, "examples-using-nilearn-plotting-plot-prob-atlas"]], "nilearn.plotting.plot_roi": [[434, "nilearn-plotting-plot-roi"]], "Examples using nilearn.plotting.plot_roi": [[434, "examples-using-nilearn-plotting-plot-roi"]], "nilearn.plotting.plot_stat_map": [[435, "nilearn-plotting-plot-stat-map"]], "Examples using nilearn.plotting.plot_stat_map": [[435, "examples-using-nilearn-plotting-plot-stat-map"]], "nilearn.plotting.plot_surf": [[436, "nilearn-plotting-plot-surf"]], "Examples using nilearn.plotting.plot_surf": [[436, "examples-using-nilearn-plotting-plot-surf"]], "nilearn.plotting.plot_surf_contours": [[437, "nilearn-plotting-plot-surf-contours"]], "Examples using nilearn.plotting.plot_surf_contours": [[437, "examples-using-nilearn-plotting-plot-surf-contours"]], "nilearn.plotting.plot_surf_roi": [[438, "nilearn-plotting-plot-surf-roi"]], "Examples using nilearn.plotting.plot_surf_roi": [[438, "examples-using-nilearn-plotting-plot-surf-roi"]], "nilearn.plotting.plot_surf_stat_map": [[439, "nilearn-plotting-plot-surf-stat-map"]], "Examples using nilearn.plotting.plot_surf_stat_map": [[439, "examples-using-nilearn-plotting-plot-surf-stat-map"]], "nilearn.plotting.show": [[440, "nilearn-plotting-show"]], "Examples using nilearn.plotting.show": [[440, "examples-using-nilearn-plotting-show"]], "nilearn.plotting.view_connectome": [[441, "nilearn-plotting-view-connectome"]], "Examples using nilearn.plotting.view_connectome": [[441, "examples-using-nilearn-plotting-view-connectome"]], "nilearn.plotting.view_img": [[442, "nilearn-plotting-view-img"]], "Examples using nilearn.plotting.view_img": [[442, "examples-using-nilearn-plotting-view-img"]], "nilearn.plotting.view_img_on_surf": [[443, "nilearn-plotting-view-img-on-surf"]], "Examples using nilearn.plotting.view_img_on_surf": [[443, "examples-using-nilearn-plotting-view-img-on-surf"]], "nilearn.plotting.view_markers": [[444, "nilearn-plotting-view-markers"]], "nilearn.plotting.view_surf": [[445, "nilearn-plotting-view-surf"]], "Examples using nilearn.plotting.view_surf": [[445, "examples-using-nilearn-plotting-view-surf"]], "nilearn.regions.HierarchicalKMeans": [[446, "nilearn-regions-hierarchicalkmeans"]], "nilearn.regions.Parcellations": [[447, "nilearn-regions-parcellations"]], "Examples using nilearn.regions.Parcellations": [[447, "examples-using-nilearn-regions-parcellations"]], "nilearn.regions.ReNA": [[448, "nilearn-regions-rena"]], "nilearn.regions.RegionExtractor": [[449, "nilearn-regions-regionextractor"]], "Examples using nilearn.regions.RegionExtractor": [[449, "examples-using-nilearn-regions-regionextractor"]], "nilearn.regions.connected_label_regions": [[450, "nilearn-regions-connected-label-regions"]], "Examples using nilearn.regions.connected_label_regions": [[450, "examples-using-nilearn-regions-connected-label-regions"]], "nilearn.regions.connected_regions": [[451, "nilearn-regions-connected-regions"]], "Examples using nilearn.regions.connected_regions": [[451, "examples-using-nilearn-regions-connected-regions"]], "nilearn.regions.img_to_signals_labels": [[452, "nilearn-regions-img-to-signals-labels"]], "nilearn.regions.img_to_signals_maps": [[453, "nilearn-regions-img-to-signals-maps"]], "nilearn.regions.recursive_neighbor_agglomeration": [[454, "nilearn-regions-recursive-neighbor-agglomeration"]], "nilearn.regions.signals_to_img_labels": [[455, "nilearn-regions-signals-to-img-labels"]], "nilearn.regions.signals_to_img_maps": [[456, "nilearn-regions-signals-to-img-maps"]], "nilearn.reporting.HTMLReport": [[457, "nilearn-reporting-htmlreport"]], "Examples using nilearn.reporting.HTMLReport": [[457, "examples-using-nilearn-reporting-htmlreport"]], "nilearn.reporting.get_clusters_table": [[458, "nilearn-reporting-get-clusters-table"]], "Examples using nilearn.reporting.get_clusters_table": [[458, "examples-using-nilearn-reporting-get-clusters-table"]], "nilearn.reporting.make_glm_report": [[459, "nilearn-reporting-make-glm-report"]], "Examples using nilearn.reporting.make_glm_report": [[459, "examples-using-nilearn-reporting-make-glm-report"]], "nilearn.signal.butterworth": [[460, "nilearn-signal-butterworth"]], "nilearn.signal.clean": [[461, "nilearn-signal-clean"]], "nilearn.signal.high_variance_confounds": [[462, "nilearn-signal-high-variance-confounds"]], "nilearn.surface.load_surf_data": [[463, "nilearn-surface-load-surf-data"]], "Examples using nilearn.surface.load_surf_data": [[463, "examples-using-nilearn-surface-load-surf-data"]], "nilearn.surface.load_surf_mesh": [[464, "nilearn-surface-load-surf-mesh"]], "Examples using nilearn.surface.load_surf_mesh": [[464, "examples-using-nilearn-surface-load-surf-mesh"]], "nilearn.surface.vol_to_surf": [[465, "nilearn-surface-vol-to-surf"]], "Examples using nilearn.surface.vol_to_surf": [[465, "examples-using-nilearn-surface-vol-to-surf"]], "Examples of GLM reports": [[466, "examples-of-glm-reports"]], "First level report": [[466, "first-level-report"]], "ADHD": [[466, "adhd"]], "BIDS features": [[466, "bids-features"]], "FIAC": [[466, "fiac"]], "Second level report": [[466, "second-level-report"]], "Examples masker reports": [[467, "examples-masker-reports"]], "Nifti masker": [[467, "nifti-masker"]], "Nifti labels masker": [[467, "nifti-labels-masker"]], "Nifti maps masker": [[467, "nifti-maps-masker"]], "Nifti sphere masker": [[467, "nifti-sphere-masker"]], "nilearn.glm: Generalized Linear Models": [[468, "module-nilearn.glm"]], "nilearn.glm.first_level": [[468, "module-nilearn.glm.first_level"]], "nilearn.glm.second_level": [[468, "module-nilearn.glm.second_level"]], "nilearn.image: Image Processing and Resampling Utilities": [[469, "module-nilearn.image"]], "API References": [[470, "api-references"]], "nilearn.interfaces: Loading components from interfaces": [[471, "module-nilearn.interfaces"]], "nilearn.interfaces.bids": [[471, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.fmriprep": [[471, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fsl": [[471, "module-nilearn.interfaces.fsl"]], "nilearn.maskers: Extracting Signals from Brain Images": [[472, "module-nilearn.maskers"]], "nilearn.masking: Data Masking Utilities": [[473, "module-nilearn.masking"]], "nilearn.mass_univariate: Mass-Univariate Analysis": [[474, "module-nilearn.mass_univariate"]], "nilearn.plotting: Plotting Brain Data": [[475, "module-nilearn.plotting"]], "nilearn.plotting.displays: Interacting with figures": [[475, "module-nilearn.plotting.displays"]], "nilearn.regions: Operating on Regions": [[476, "module-nilearn.regions"]], "nilearn.reporting: Reporting Functions": [[477, "module-nilearn.reporting"]], "nilearn.signal: Preprocessing Time Series": [[478, "module-nilearn.signal"]], "nilearn.surface: Manipulating Surface Data": [[479, "module-nilearn.surface"]], "Plotting brain images": [[480, "plotting-brain-images"]], "Code examples": [[480, null]], "Different plotting functions": [[480, "different-plotting-functions"]], "Different display modes": [[480, "different-display-modes"]], "Available Colormaps": [[480, "available-colormaps"]], "Adding overlays, edges, contours, contour fillings, markers, scale bar": [[480, "adding-overlays-edges-contours-contour-fillings-markers-scale-bar"]], "Displaying or saving to an image file": [[480, "displaying-or-saving-to-an-image-file"]], "Surface plotting": [[480, "surface-plotting"]], "Interactive plots": [[480, "interactive-plots"]], "3D Plots of statistical maps or atlases on the cortical surface": [[480, "d-plots-of-statistical-maps-or-atlases-on-the-cortical-surface"]], "view_img_on_surf: Surface plot using a 3D statistical map": [[480, "view-img-on-surf-surface-plot-using-a-3d-statistical-map"]], "view_surf: Surface plot using a surface map and a cortical mesh": [[480, "view-surf-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "plot_surf_stat_map: Surface plot using a surface map and a cortical mesh": [[480, "plot-surf-stat-map-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "3D Plots of connectomes": [[480, "d-plots-of-connectomes"]], "3D Plots of markers": [[480, "d-plots-of-markers"]], "Interactive visualization of statistical map slices": [[480, "interactive-visualization-of-statistical-map-slices"]], "Quickstart": [[481, "quickstart"]], "nilearn": [[481, "nilearn"]], "Important links": [[481, "important-links"]], "Install": [[481, "install"]], "Latest release": [[481, "latest-release"]], "Development version": [[481, "development-version"]], "Check installation": [[481, "check-installation"]], "Drop-in Hours": [[481, "drop-in-hours"]], "Dependencies": [[481, "dependencies"]], "Development": [[481, "development"]], "User guide": [[483, "user-guide"]], "Table of contents": [[483, "table-of-contents"]]}, "indexentries": {"anova": [[175, "term-ANOVA"]], "auc": [[175, "term-AUC"]], "bids": [[175, "term-BIDS"]], "bold": [[175, "term-BOLD"]], "beta": [[175, "term-Beta"]], "canica": [[175, "term-CanICA"]], "closing": [[175, "term-Closing"]], "decoding": [[175, "term-Decoding"]], "deterministic atlas": [[175, "term-Deterministic-atlas"]], "dictionary learning": [[175, "term-Dictionary-learning"]], "dilation": [[175, "term-Dilation"]], "eeg": [[175, "term-EEG"]], "epi": [[175, "term-EPI"]], "erosion": [[175, "term-Erosion"]], "fdr correction": [[175, "term-FDR-correction"]], "fir": [[175, "term-FIR"]], "fpr correction": [[175, "term-FPR-correction"]], "frem": [[175, "term-FREM"]], "fwer correction": [[175, "term-FWER-correction"]], "fwhm": [[175, "term-FWHM"]], "glm": [[175, "term-GLM"]], "hrf": [[175, "term-HRF"]], "ica": [[175, "term-ICA"]], "meg": [[175, "term-MEG"]], "mni": [[175, "term-MNI"]], "mvpa": [[175, "term-MVPA"]], "neurovault": [[175, "term-Neurovault"]], "opening": [[175, "term-Opening"]], "parameter estimate": [[175, "term-Parameter-estimate"]], "probabilistic atlas": [[175, "term-Probabilistic-atlas"]], "roc": [[175, "term-ROC"]], "rena": [[175, "term-ReNA"]], "snr": [[175, "term-SNR"]], "spm": [[175, "term-SPM"]], "svm": [[175, "term-SVM"]], "searchlight": [[175, "term-Searchlight"]], "spacenet": [[175, "term-SpaceNet"]], "tfce": [[175, "term-TFCE"]], "tr": [[175, "term-TR"]], "unsupervised learning": [[175, "term-Unsupervised-learning"]], "vbm": [[175, "term-VBM"]], "ward clustering": [[175, "term-Ward-clustering"]], "classification": [[175, "term-classification"]], "contrast": [[175, "term-contrast"]], "fmri": [[175, "term-fMRI"]], "fmriprep": [[175, "term-fMRIPrep"]], "faces": [[175, "term-faces"]], "functional connectivity": [[175, "term-functional-connectivity"]], "functional connectome": [[175, "term-functional-connectome"]], "mesh": [[175, "term-mesh"]], "parcellation": [[175, "term-parcellation"]], "predictive modelling": [[175, "term-predictive-modelling"]], "regression": [[175, "term-regression"]], "resting-state": [[175, "term-resting-state"]], "supervised learning": [[175, "term-supervised-learning"]], "vertex": [[175, "term-vertex"]], "voxel": [[175, "term-voxel"]], "module": [[183, "module-nilearn.connectome"], [184, "module-nilearn.datasets"], [185, "module-nilearn.decoding"], [186, "module-nilearn.decomposition"], [227, "module-nilearn.experimental"], [227, "module-nilearn.experimental.surface"], [468, "module-nilearn.glm"], [468, "module-nilearn.glm.first_level"], [468, "module-nilearn.glm.second_level"], [469, "module-nilearn.image"], [471, "module-nilearn.interfaces"], [471, "module-nilearn.interfaces.bids"], [471, "module-nilearn.interfaces.fmriprep"], [471, "module-nilearn.interfaces.fsl"], [472, "module-nilearn.maskers"], [473, "module-nilearn.masking"], [474, "module-nilearn.mass_univariate"], [475, "module-nilearn.plotting"], [475, "module-nilearn.plotting.displays"], [476, "module-nilearn.regions"], [477, "module-nilearn.reporting"], [478, "module-nilearn.signal"], [479, "module-nilearn.surface"]], "nilearn.connectome": [[183, "module-nilearn.connectome"]], "nilearn.datasets": [[184, "module-nilearn.datasets"]], "nilearn.decoding": [[185, "module-nilearn.decoding"]], "nilearn.decomposition": [[186, "module-nilearn.decomposition"]], "nilearn.experimental": [[227, "module-nilearn.experimental"]], "nilearn.experimental.surface": [[227, "module-nilearn.experimental.surface"]], "connectivitymeasure (class in nilearn.connectome)": [[228, "nilearn.connectome.ConnectivityMeasure"]], "__init__() (nilearn.connectome.connectivitymeasure method)": [[228, "nilearn.connectome.ConnectivityMeasure.__init__"]], "fit() (nilearn.connectome.connectivitymeasure method)": [[228, "nilearn.connectome.ConnectivityMeasure.fit"]], "fit_transform() (nilearn.connectome.connectivitymeasure method)": [[228, "nilearn.connectome.ConnectivityMeasure.fit_transform"]], "get_metadata_routing() (nilearn.connectome.connectivitymeasure method)": [[228, "nilearn.connectome.ConnectivityMeasure.get_metadata_routing"]], "get_params() (nilearn.connectome.connectivitymeasure method)": [[228, "nilearn.connectome.ConnectivityMeasure.get_params"]], "inverse_transform() (nilearn.connectome.connectivitymeasure method)": [[228, "nilearn.connectome.ConnectivityMeasure.inverse_transform"]], "set_inverse_transform_request() (nilearn.connectome.connectivitymeasure method)": [[228, "nilearn.connectome.ConnectivityMeasure.set_inverse_transform_request"]], "set_output() (nilearn.connectome.connectivitymeasure method)": [[228, "nilearn.connectome.ConnectivityMeasure.set_output"]], "set_params() (nilearn.connectome.connectivitymeasure method)": [[228, "nilearn.connectome.ConnectivityMeasure.set_params"]], "set_transform_request() (nilearn.connectome.connectivitymeasure method)": [[228, "nilearn.connectome.ConnectivityMeasure.set_transform_request"]], "transform() (nilearn.connectome.connectivitymeasure method)": [[228, "nilearn.connectome.ConnectivityMeasure.transform"]], "groupsparsecovariance (class in nilearn.connectome)": [[229, "nilearn.connectome.GroupSparseCovariance"]], "__init__() (nilearn.connectome.groupsparsecovariance method)": [[229, "nilearn.connectome.GroupSparseCovariance.__init__"]], "fit() (nilearn.connectome.groupsparsecovariance method)": [[229, "nilearn.connectome.GroupSparseCovariance.fit"]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariance method)": [[229, "nilearn.connectome.GroupSparseCovariance.get_metadata_routing"]], "get_params() (nilearn.connectome.groupsparsecovariance method)": [[229, "nilearn.connectome.GroupSparseCovariance.get_params"]], "set_fit_request() (nilearn.connectome.groupsparsecovariance method)": [[229, "nilearn.connectome.GroupSparseCovariance.set_fit_request"]], "set_params() (nilearn.connectome.groupsparsecovariance method)": [[229, "nilearn.connectome.GroupSparseCovariance.set_params"]], "groupsparsecovariancecv (class in nilearn.connectome)": [[230, "nilearn.connectome.GroupSparseCovarianceCV"]], "__init__() (nilearn.connectome.groupsparsecovariancecv method)": [[230, "nilearn.connectome.GroupSparseCovarianceCV.__init__"]], "fit() (nilearn.connectome.groupsparsecovariancecv method)": [[230, "nilearn.connectome.GroupSparseCovarianceCV.fit"]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariancecv method)": [[230, "nilearn.connectome.GroupSparseCovarianceCV.get_metadata_routing"]], "get_params() (nilearn.connectome.groupsparsecovariancecv method)": [[230, "nilearn.connectome.GroupSparseCovarianceCV.get_params"]], "set_fit_request() (nilearn.connectome.groupsparsecovariancecv method)": [[230, "nilearn.connectome.GroupSparseCovarianceCV.set_fit_request"]], "set_params() (nilearn.connectome.groupsparsecovariancecv method)": [[230, "nilearn.connectome.GroupSparseCovarianceCV.set_params"]], "cov_to_corr() (in module nilearn.connectome)": [[231, "nilearn.connectome.cov_to_corr"]], "group_sparse_covariance() (in module nilearn.connectome)": [[232, "nilearn.connectome.group_sparse_covariance"]], "prec_to_partial() (in module nilearn.connectome)": [[233, "nilearn.connectome.prec_to_partial"]], "sym_matrix_to_vec() (in module nilearn.connectome)": [[234, "nilearn.connectome.sym_matrix_to_vec"]], "vec_to_sym_matrix() (in module nilearn.connectome)": [[235, "nilearn.connectome.vec_to_sym_matrix"]], "fetch_abide_pcp() (in module nilearn.datasets)": [[236, "nilearn.datasets.fetch_abide_pcp"]], "fetch_adhd() (in module nilearn.datasets)": [[237, "nilearn.datasets.fetch_adhd"]], "fetch_atlas_aal() (in module nilearn.datasets)": [[238, "nilearn.datasets.fetch_atlas_aal"]], "fetch_atlas_allen_2011() (in module nilearn.datasets)": [[239, "nilearn.datasets.fetch_atlas_allen_2011"]], "fetch_atlas_basc_multiscale_2015() (in module nilearn.datasets)": [[240, "nilearn.datasets.fetch_atlas_basc_multiscale_2015"]], "fetch_atlas_craddock_2012() (in module nilearn.datasets)": [[241, "nilearn.datasets.fetch_atlas_craddock_2012"]], "fetch_atlas_destrieux_2009() (in module nilearn.datasets)": [[242, "nilearn.datasets.fetch_atlas_destrieux_2009"]], "fetch_atlas_difumo() (in module nilearn.datasets)": [[243, "nilearn.datasets.fetch_atlas_difumo"]], "fetch_atlas_harvard_oxford() (in module nilearn.datasets)": [[244, "nilearn.datasets.fetch_atlas_harvard_oxford"]], "fetch_atlas_juelich() (in module nilearn.datasets)": [[245, "nilearn.datasets.fetch_atlas_juelich"]], "fetch_atlas_msdl() (in module nilearn.datasets)": [[246, "nilearn.datasets.fetch_atlas_msdl"]], "fetch_atlas_pauli_2017() (in module nilearn.datasets)": [[247, "nilearn.datasets.fetch_atlas_pauli_2017"]], "fetch_atlas_schaefer_2018() (in module nilearn.datasets)": [[248, "nilearn.datasets.fetch_atlas_schaefer_2018"]], "fetch_atlas_smith_2009() (in module nilearn.datasets)": [[249, "nilearn.datasets.fetch_atlas_smith_2009"]], "fetch_atlas_surf_destrieux() (in module nilearn.datasets)": [[250, "nilearn.datasets.fetch_atlas_surf_destrieux"]], "fetch_atlas_talairach() (in module nilearn.datasets)": [[251, "nilearn.datasets.fetch_atlas_talairach"]], "fetch_atlas_yeo_2011() (in module nilearn.datasets)": [[252, "nilearn.datasets.fetch_atlas_yeo_2011"]], "fetch_bids_langloc_dataset() (in module nilearn.datasets)": [[253, "nilearn.datasets.fetch_bids_langloc_dataset"]], "fetch_coords_dosenbach_2010() (in module nilearn.datasets)": [[254, "nilearn.datasets.fetch_coords_dosenbach_2010"]], "fetch_coords_power_2011() (in module nilearn.datasets)": [[255, "nilearn.datasets.fetch_coords_power_2011"]], "fetch_coords_seitzman_2018() (in module nilearn.datasets)": [[256, "nilearn.datasets.fetch_coords_seitzman_2018"]], "fetch_development_fmri() (in module nilearn.datasets)": [[257, "nilearn.datasets.fetch_development_fmri"]], "fetch_ds000030_urls() (in module nilearn.datasets)": [[258, "nilearn.datasets.fetch_ds000030_urls"]], "fetch_fiac_first_level() (in module nilearn.datasets)": [[259, "nilearn.datasets.fetch_fiac_first_level"]], "fetch_haxby() (in module nilearn.datasets)": [[260, "nilearn.datasets.fetch_haxby"]], "fetch_icbm152_2009() (in module nilearn.datasets)": [[261, "nilearn.datasets.fetch_icbm152_2009"]], "fetch_icbm152_brain_gm_mask() (in module nilearn.datasets)": [[262, "nilearn.datasets.fetch_icbm152_brain_gm_mask"]], "fetch_language_localizer_demo_dataset() (in module nilearn.datasets)": [[263, "nilearn.datasets.fetch_language_localizer_demo_dataset"]], "fetch_localizer_button_task() (in module nilearn.datasets)": [[264, "nilearn.datasets.fetch_localizer_button_task"]], "fetch_localizer_calculation_task() (in module nilearn.datasets)": [[265, "nilearn.datasets.fetch_localizer_calculation_task"]], "fetch_localizer_contrasts() (in module nilearn.datasets)": [[266, "nilearn.datasets.fetch_localizer_contrasts"]], "fetch_localizer_first_level() (in module nilearn.datasets)": [[267, "nilearn.datasets.fetch_localizer_first_level"]], "fetch_megatrawls_netmats() (in module nilearn.datasets)": [[268, "nilearn.datasets.fetch_megatrawls_netmats"]], "fetch_mixed_gambles() (in module nilearn.datasets)": [[269, "nilearn.datasets.fetch_mixed_gambles"]], "fetch_miyawaki2008() (in module nilearn.datasets)": [[270, "nilearn.datasets.fetch_miyawaki2008"]], "fetch_neurovault() (in module nilearn.datasets)": [[271, "nilearn.datasets.fetch_neurovault"]], "fetch_neurovault_auditory_computation_task() (in module nilearn.datasets)": [[272, "nilearn.datasets.fetch_neurovault_auditory_computation_task"]], "fetch_neurovault_ids() (in module nilearn.datasets)": [[273, "nilearn.datasets.fetch_neurovault_ids"]], "fetch_neurovault_motor_task() (in module nilearn.datasets)": [[274, "nilearn.datasets.fetch_neurovault_motor_task"]], "fetch_oasis_vbm() (in module nilearn.datasets)": [[275, "nilearn.datasets.fetch_oasis_vbm"]], "fetch_openneuro_dataset() (in module nilearn.datasets)": [[276, "nilearn.datasets.fetch_openneuro_dataset"]], "fetch_openneuro_dataset_index() (in module nilearn.datasets)": [[277, "nilearn.datasets.fetch_openneuro_dataset_index"]], "fetch_spm_auditory() (in module nilearn.datasets)": [[278, "nilearn.datasets.fetch_spm_auditory"]], "fetch_spm_multimodal_fmri() (in module nilearn.datasets)": [[279, "nilearn.datasets.fetch_spm_multimodal_fmri"]], "fetch_surf_fsaverage() (in module nilearn.datasets)": [[280, "nilearn.datasets.fetch_surf_fsaverage"]], "fetch_surf_nki_enhanced() (in module nilearn.datasets)": [[281, "nilearn.datasets.fetch_surf_nki_enhanced"]], "get_data_dirs() (in module nilearn.datasets)": [[282, "nilearn.datasets.get_data_dirs"]], "load_mni152_brain_mask() (in module nilearn.datasets)": [[283, "nilearn.datasets.load_mni152_brain_mask"]], "load_mni152_gm_mask() (in module nilearn.datasets)": [[284, "nilearn.datasets.load_mni152_gm_mask"]], "load_mni152_gm_template() (in module nilearn.datasets)": [[285, "nilearn.datasets.load_mni152_gm_template"]], "load_mni152_template() (in module nilearn.datasets)": [[286, "nilearn.datasets.load_mni152_template"]], "load_mni152_wm_mask() (in module nilearn.datasets)": [[287, "nilearn.datasets.load_mni152_wm_mask"]], "load_mni152_wm_template() (in module nilearn.datasets)": [[288, "nilearn.datasets.load_mni152_wm_template"]], "load_sample_motor_activation_image() (in module nilearn.datasets)": [[289, "nilearn.datasets.load_sample_motor_activation_image"]], "patch_openneuro_dataset() (in module nilearn.datasets)": [[290, "nilearn.datasets.patch_openneuro_dataset"]], "select_from_index() (in module nilearn.datasets)": [[291, "nilearn.datasets.select_from_index"]], "decoder (class in nilearn.decoding)": [[292, "nilearn.decoding.Decoder"]], "__init__() (nilearn.decoding.decoder method)": [[292, "nilearn.decoding.Decoder.__init__"]], "decision_function() (nilearn.decoding.decoder method)": [[292, "nilearn.decoding.Decoder.decision_function"]], "fit() (nilearn.decoding.decoder method)": [[292, "nilearn.decoding.Decoder.fit"]], "get_metadata_routing() (nilearn.decoding.decoder method)": [[292, "nilearn.decoding.Decoder.get_metadata_routing"]], "get_params() (nilearn.decoding.decoder method)": [[292, "nilearn.decoding.Decoder.get_params"]], "predict() (nilearn.decoding.decoder method)": [[292, "nilearn.decoding.Decoder.predict"]], "score() (nilearn.decoding.decoder method)": [[292, "nilearn.decoding.Decoder.score"]], "set_fit_request() (nilearn.decoding.decoder method)": [[292, "nilearn.decoding.Decoder.set_fit_request"]], "set_params() (nilearn.decoding.decoder method)": [[292, "nilearn.decoding.Decoder.set_params"]], "decoderregressor (class in nilearn.decoding)": [[293, "nilearn.decoding.DecoderRegressor"]], "__init__() (nilearn.decoding.decoderregressor method)": [[293, "nilearn.decoding.DecoderRegressor.__init__"]], "decision_function() (nilearn.decoding.decoderregressor method)": [[293, "nilearn.decoding.DecoderRegressor.decision_function"]], "fit() (nilearn.decoding.decoderregressor method)": [[293, "nilearn.decoding.DecoderRegressor.fit"]], "get_metadata_routing() (nilearn.decoding.decoderregressor method)": [[293, "nilearn.decoding.DecoderRegressor.get_metadata_routing"]], "get_params() (nilearn.decoding.decoderregressor method)": [[293, "nilearn.decoding.DecoderRegressor.get_params"]], "predict() (nilearn.decoding.decoderregressor method)": [[293, "nilearn.decoding.DecoderRegressor.predict"]], "score() (nilearn.decoding.decoderregressor method)": [[293, "nilearn.decoding.DecoderRegressor.score"]], "set_fit_request() (nilearn.decoding.decoderregressor method)": [[293, "nilearn.decoding.DecoderRegressor.set_fit_request"]], "set_params() (nilearn.decoding.decoderregressor method)": [[293, "nilearn.decoding.DecoderRegressor.set_params"]], "fremclassifier (class in nilearn.decoding)": [[294, "nilearn.decoding.FREMClassifier"]], "__init__() (nilearn.decoding.fremclassifier method)": [[294, "nilearn.decoding.FREMClassifier.__init__"]], "decision_function() (nilearn.decoding.fremclassifier method)": [[294, "nilearn.decoding.FREMClassifier.decision_function"]], "fit() (nilearn.decoding.fremclassifier method)": [[294, "nilearn.decoding.FREMClassifier.fit"]], "get_metadata_routing() (nilearn.decoding.fremclassifier method)": [[294, "nilearn.decoding.FREMClassifier.get_metadata_routing"]], "get_params() (nilearn.decoding.fremclassifier method)": [[294, "nilearn.decoding.FREMClassifier.get_params"]], "predict() (nilearn.decoding.fremclassifier method)": [[294, "nilearn.decoding.FREMClassifier.predict"]], "score() (nilearn.decoding.fremclassifier method)": [[294, "nilearn.decoding.FREMClassifier.score"]], "set_fit_request() (nilearn.decoding.fremclassifier method)": [[294, "nilearn.decoding.FREMClassifier.set_fit_request"]], "set_params() (nilearn.decoding.fremclassifier method)": [[294, "nilearn.decoding.FREMClassifier.set_params"]], "fremregressor (class in nilearn.decoding)": [[295, "nilearn.decoding.FREMRegressor"]], "__init__() (nilearn.decoding.fremregressor method)": [[295, "nilearn.decoding.FREMRegressor.__init__"]], "decision_function() (nilearn.decoding.fremregressor method)": [[295, "nilearn.decoding.FREMRegressor.decision_function"]], "fit() (nilearn.decoding.fremregressor method)": [[295, "nilearn.decoding.FREMRegressor.fit"]], "get_metadata_routing() (nilearn.decoding.fremregressor method)": [[295, "nilearn.decoding.FREMRegressor.get_metadata_routing"]], "get_params() (nilearn.decoding.fremregressor method)": [[295, "nilearn.decoding.FREMRegressor.get_params"]], "predict() (nilearn.decoding.fremregressor method)": [[295, "nilearn.decoding.FREMRegressor.predict"]], "score() (nilearn.decoding.fremregressor method)": [[295, "nilearn.decoding.FREMRegressor.score"]], "set_fit_request() (nilearn.decoding.fremregressor method)": [[295, "nilearn.decoding.FREMRegressor.set_fit_request"]], "set_params() (nilearn.decoding.fremregressor method)": [[295, "nilearn.decoding.FREMRegressor.set_params"]], "searchlight (class in nilearn.decoding)": [[296, "nilearn.decoding.SearchLight"]], "__init__() (nilearn.decoding.searchlight method)": [[296, "nilearn.decoding.SearchLight.__init__"]], "fit() (nilearn.decoding.searchlight method)": [[296, "nilearn.decoding.SearchLight.fit"]], "get_metadata_routing() (nilearn.decoding.searchlight method)": [[296, "nilearn.decoding.SearchLight.get_metadata_routing"]], "get_params() (nilearn.decoding.searchlight method)": [[296, "nilearn.decoding.SearchLight.get_params"]], "set_fit_request() (nilearn.decoding.searchlight method)": [[296, "nilearn.decoding.SearchLight.set_fit_request"]], "set_params() (nilearn.decoding.searchlight method)": [[296, "nilearn.decoding.SearchLight.set_params"]], "supported_losses (nilearn.decoding.spacenetclassifier attribute)": [[297, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_LOSSES"]], "supported_penalties (nilearn.decoding.spacenetclassifier attribute)": [[297, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_PENALTIES"]], "spacenetclassifier (class in nilearn.decoding)": [[297, "nilearn.decoding.SpaceNetClassifier"]], "__init__() (nilearn.decoding.spacenetclassifier method)": [[297, "nilearn.decoding.SpaceNetClassifier.__init__"]], "check_params() (nilearn.decoding.spacenetclassifier method)": [[297, "nilearn.decoding.SpaceNetClassifier.check_params"]], "decision_function() (nilearn.decoding.spacenetclassifier method)": [[297, "nilearn.decoding.SpaceNetClassifier.decision_function"]], "fit() (nilearn.decoding.spacenetclassifier method)": [[297, "nilearn.decoding.SpaceNetClassifier.fit"]], "get_metadata_routing() (nilearn.decoding.spacenetclassifier method)": [[297, "nilearn.decoding.SpaceNetClassifier.get_metadata_routing"]], "get_params() (nilearn.decoding.spacenetclassifier method)": [[297, "nilearn.decoding.SpaceNetClassifier.get_params"]], "predict() (nilearn.decoding.spacenetclassifier method)": [[297, "nilearn.decoding.SpaceNetClassifier.predict"]], "score() (nilearn.decoding.spacenetclassifier method)": [[297, "nilearn.decoding.SpaceNetClassifier.score"]], "set_fit_request() (nilearn.decoding.spacenetclassifier method)": [[297, "nilearn.decoding.SpaceNetClassifier.set_fit_request"]], "set_params() (nilearn.decoding.spacenetclassifier method)": [[297, "nilearn.decoding.SpaceNetClassifier.set_params"]], "set_score_request() (nilearn.decoding.spacenetclassifier method)": [[297, "nilearn.decoding.SpaceNetClassifier.set_score_request"]], "supported_losses (nilearn.decoding.spacenetregressor attribute)": [[298, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_LOSSES"]], "supported_penalties (nilearn.decoding.spacenetregressor attribute)": [[298, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_PENALTIES"]], "spacenetregressor (class in nilearn.decoding)": [[298, "nilearn.decoding.SpaceNetRegressor"]], "__init__() (nilearn.decoding.spacenetregressor method)": [[298, "nilearn.decoding.SpaceNetRegressor.__init__"]], "check_params() (nilearn.decoding.spacenetregressor method)": [[298, "nilearn.decoding.SpaceNetRegressor.check_params"]], "decision_function() (nilearn.decoding.spacenetregressor method)": [[298, "nilearn.decoding.SpaceNetRegressor.decision_function"]], "fit() (nilearn.decoding.spacenetregressor method)": [[298, "nilearn.decoding.SpaceNetRegressor.fit"]], "get_metadata_routing() (nilearn.decoding.spacenetregressor method)": [[298, "nilearn.decoding.SpaceNetRegressor.get_metadata_routing"]], "get_params() (nilearn.decoding.spacenetregressor method)": [[298, "nilearn.decoding.SpaceNetRegressor.get_params"]], "predict() (nilearn.decoding.spacenetregressor method)": [[298, "nilearn.decoding.SpaceNetRegressor.predict"]], "score() (nilearn.decoding.spacenetregressor method)": [[298, "nilearn.decoding.SpaceNetRegressor.score"]], "set_fit_request() (nilearn.decoding.spacenetregressor method)": [[298, "nilearn.decoding.SpaceNetRegressor.set_fit_request"]], "set_params() (nilearn.decoding.spacenetregressor method)": [[298, "nilearn.decoding.SpaceNetRegressor.set_params"]], "set_score_request() (nilearn.decoding.spacenetregressor method)": [[298, "nilearn.decoding.SpaceNetRegressor.set_score_request"]], "canica (class in nilearn.decomposition)": [[299, "nilearn.decomposition.CanICA"]], "__init__() (nilearn.decomposition.canica method)": [[299, "nilearn.decomposition.CanICA.__init__"]], "fit() (nilearn.decomposition.canica method)": [[299, "nilearn.decomposition.CanICA.fit"]], "fit_transform() (nilearn.decomposition.canica method)": [[299, "nilearn.decomposition.CanICA.fit_transform"]], "get_metadata_routing() (nilearn.decomposition.canica method)": [[299, "nilearn.decomposition.CanICA.get_metadata_routing"]], "get_params() (nilearn.decomposition.canica method)": [[299, "nilearn.decomposition.CanICA.get_params"]], "inverse_transform() (nilearn.decomposition.canica method)": [[299, "nilearn.decomposition.CanICA.inverse_transform"]], "score() (nilearn.decomposition.canica method)": [[299, "nilearn.decomposition.CanICA.score"]], "set_fit_request() (nilearn.decomposition.canica method)": [[299, "nilearn.decomposition.CanICA.set_fit_request"]], "set_inverse_transform_request() (nilearn.decomposition.canica method)": [[299, "nilearn.decomposition.CanICA.set_inverse_transform_request"]], "set_output() (nilearn.decomposition.canica method)": [[299, "nilearn.decomposition.CanICA.set_output"]], "set_params() (nilearn.decomposition.canica method)": [[299, "nilearn.decomposition.CanICA.set_params"]], "set_score_request() (nilearn.decomposition.canica method)": [[299, "nilearn.decomposition.CanICA.set_score_request"]], "set_transform_request() (nilearn.decomposition.canica method)": [[299, "nilearn.decomposition.CanICA.set_transform_request"]], "transform() (nilearn.decomposition.canica method)": [[299, "nilearn.decomposition.CanICA.transform"]], "dictlearning (class in nilearn.decomposition)": [[300, "nilearn.decomposition.DictLearning"]], "__init__() (nilearn.decomposition.dictlearning method)": [[300, "nilearn.decomposition.DictLearning.__init__"]], "fit() (nilearn.decomposition.dictlearning method)": [[300, "nilearn.decomposition.DictLearning.fit"]], "fit_transform() (nilearn.decomposition.dictlearning method)": [[300, "nilearn.decomposition.DictLearning.fit_transform"]], "get_metadata_routing() (nilearn.decomposition.dictlearning method)": [[300, "nilearn.decomposition.DictLearning.get_metadata_routing"]], "get_params() (nilearn.decomposition.dictlearning method)": [[300, "nilearn.decomposition.DictLearning.get_params"]], "inverse_transform() (nilearn.decomposition.dictlearning method)": [[300, "nilearn.decomposition.DictLearning.inverse_transform"]], "score() (nilearn.decomposition.dictlearning method)": [[300, "nilearn.decomposition.DictLearning.score"]], "set_fit_request() (nilearn.decomposition.dictlearning method)": [[300, "nilearn.decomposition.DictLearning.set_fit_request"]], "set_inverse_transform_request() (nilearn.decomposition.dictlearning method)": [[300, "nilearn.decomposition.DictLearning.set_inverse_transform_request"]], "set_output() (nilearn.decomposition.dictlearning method)": [[300, "nilearn.decomposition.DictLearning.set_output"]], "set_params() (nilearn.decomposition.dictlearning method)": [[300, "nilearn.decomposition.DictLearning.set_params"]], "set_score_request() (nilearn.decomposition.dictlearning method)": [[300, "nilearn.decomposition.DictLearning.set_score_request"]], "set_transform_request() (nilearn.decomposition.dictlearning method)": [[300, "nilearn.decomposition.DictLearning.set_transform_request"]], "transform() (nilearn.decomposition.dictlearning method)": [[300, "nilearn.decomposition.DictLearning.transform"]], "filemesh (class in nilearn.experimental.surface)": [[301, "nilearn.experimental.surface.FileMesh"]], "__init__() (nilearn.experimental.surface.filemesh method)": [[301, "nilearn.experimental.surface.FileMesh.__init__"]], "coordinates (nilearn.experimental.surface.filemesh property)": [[301, "nilearn.experimental.surface.FileMesh.coordinates"]], "faces (nilearn.experimental.surface.filemesh property)": [[301, "nilearn.experimental.surface.FileMesh.faces"]], "file_path (nilearn.experimental.surface.filemesh attribute)": [[301, "nilearn.experimental.surface.FileMesh.file_path"]], "loaded() (nilearn.experimental.surface.filemesh method)": [[301, "nilearn.experimental.surface.FileMesh.loaded"]], "n_vertices (nilearn.experimental.surface.filemesh attribute)": [[301, "nilearn.experimental.surface.FileMesh.n_vertices"]], "to_gifti() (nilearn.experimental.surface.filemesh method)": [[301, "nilearn.experimental.surface.FileMesh.to_gifti"]], "inmemorymesh (class in nilearn.experimental.surface)": [[302, "nilearn.experimental.surface.InMemoryMesh"]], "__init__() (nilearn.experimental.surface.inmemorymesh method)": [[302, "nilearn.experimental.surface.InMemoryMesh.__init__"]], "coordinates (nilearn.experimental.surface.inmemorymesh attribute)": [[302, "nilearn.experimental.surface.InMemoryMesh.coordinates"]], "faces (nilearn.experimental.surface.inmemorymesh attribute)": [[302, "nilearn.experimental.surface.InMemoryMesh.faces"]], "n_vertices (nilearn.experimental.surface.inmemorymesh attribute)": [[302, "nilearn.experimental.surface.InMemoryMesh.n_vertices"]], "to_gifti() (nilearn.experimental.surface.inmemorymesh method)": [[302, "nilearn.experimental.surface.InMemoryMesh.to_gifti"]], "mesh (class in nilearn.experimental.surface)": [[303, "nilearn.experimental.surface.Mesh"]], "__init__() (nilearn.experimental.surface.mesh method)": [[303, "nilearn.experimental.surface.Mesh.__init__"]], "coordinates (nilearn.experimental.surface.mesh attribute)": [[303, "nilearn.experimental.surface.Mesh.coordinates"]], "faces (nilearn.experimental.surface.mesh attribute)": [[303, "nilearn.experimental.surface.Mesh.faces"]], "n_vertices (nilearn.experimental.surface.mesh attribute)": [[303, "nilearn.experimental.surface.Mesh.n_vertices"]], "to_gifti() (nilearn.experimental.surface.mesh method)": [[303, "nilearn.experimental.surface.Mesh.to_gifti"]], "polymesh (in module nilearn.experimental.surface)": [[304, "nilearn.experimental.surface.PolyMesh"]], "surfaceimage (class in nilearn.experimental.surface)": [[305, "nilearn.experimental.surface.SurfaceImage"]], "__init__() (nilearn.experimental.surface.surfaceimage method)": [[305, "nilearn.experimental.surface.SurfaceImage.__init__"]], "data (nilearn.experimental.surface.surfaceimage attribute)": [[305, "nilearn.experimental.surface.SurfaceImage.data"]], "mesh (nilearn.experimental.surface.surfaceimage attribute)": [[305, "nilearn.experimental.surface.SurfaceImage.mesh"]], "shape (nilearn.experimental.surface.surfaceimage attribute)": [[305, "nilearn.experimental.surface.SurfaceImage.shape"]], "surfacelabelsmasker (class in nilearn.experimental.surface)": [[306, "nilearn.experimental.surface.SurfaceLabelsMasker"]], "__init__() (nilearn.experimental.surface.surfacelabelsmasker method)": [[306, "nilearn.experimental.surface.SurfaceLabelsMasker.__init__"]], "fit() (nilearn.experimental.surface.surfacelabelsmasker method)": [[306, "nilearn.experimental.surface.SurfaceLabelsMasker.fit"]], "fit_transform() (nilearn.experimental.surface.surfacelabelsmasker method)": [[306, "nilearn.experimental.surface.SurfaceLabelsMasker.fit_transform"]], "inverse_transform() (nilearn.experimental.surface.surfacelabelsmasker method)": [[306, "nilearn.experimental.surface.SurfaceLabelsMasker.inverse_transform"]], "label_names (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[306, "nilearn.experimental.surface.SurfaceLabelsMasker.label_names"]], "label_names_ (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[306, "nilearn.experimental.surface.SurfaceLabelsMasker.label_names_"]], "labels_ (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[306, "nilearn.experimental.surface.SurfaceLabelsMasker.labels_"]], "labels_data_ (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[306, "nilearn.experimental.surface.SurfaceLabelsMasker.labels_data_"]], "labels_img (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[306, "nilearn.experimental.surface.SurfaceLabelsMasker.labels_img"]], "transform() (nilearn.experimental.surface.surfacelabelsmasker method)": [[306, "nilearn.experimental.surface.SurfaceLabelsMasker.transform"]], "surfacemasker (class in nilearn.experimental.surface)": [[307, "nilearn.experimental.surface.SurfaceMasker"]], "__init__() (nilearn.experimental.surface.surfacemasker method)": [[307, "nilearn.experimental.surface.SurfaceMasker.__init__"]], "fit() (nilearn.experimental.surface.surfacemasker method)": [[307, "nilearn.experimental.surface.SurfaceMasker.fit"]], "fit_transform() (nilearn.experimental.surface.surfacemasker method)": [[307, "nilearn.experimental.surface.SurfaceMasker.fit_transform"]], "get_metadata_routing() (nilearn.experimental.surface.surfacemasker method)": [[307, "nilearn.experimental.surface.SurfaceMasker.get_metadata_routing"]], "get_params() (nilearn.experimental.surface.surfacemasker method)": [[307, "nilearn.experimental.surface.SurfaceMasker.get_params"]], "inverse_transform() (nilearn.experimental.surface.surfacemasker method)": [[307, "nilearn.experimental.surface.SurfaceMasker.inverse_transform"]], "mask_img (nilearn.experimental.surface.surfacemasker attribute)": [[307, "nilearn.experimental.surface.SurfaceMasker.mask_img"]], "mask_img_ (nilearn.experimental.surface.surfacemasker attribute)": [[307, "nilearn.experimental.surface.SurfaceMasker.mask_img_"]], "output_dimension_ (nilearn.experimental.surface.surfacemasker attribute)": [[307, "nilearn.experimental.surface.SurfaceMasker.output_dimension_"]], "set_fit_request() (nilearn.experimental.surface.surfacemasker method)": [[307, "nilearn.experimental.surface.SurfaceMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.experimental.surface.surfacemasker method)": [[307, "nilearn.experimental.surface.SurfaceMasker.set_inverse_transform_request"]], "set_output() (nilearn.experimental.surface.surfacemasker method)": [[307, "nilearn.experimental.surface.SurfaceMasker.set_output"]], "set_params() (nilearn.experimental.surface.surfacemasker method)": [[307, "nilearn.experimental.surface.SurfaceMasker.set_params"]], "set_transform_request() (nilearn.experimental.surface.surfacemasker method)": [[307, "nilearn.experimental.surface.SurfaceMasker.set_transform_request"]], "transform() (nilearn.experimental.surface.surfacemasker method)": [[307, "nilearn.experimental.surface.SurfaceMasker.transform"]], "fetch_destrieux() (in module nilearn.experimental.surface)": [[308, "nilearn.experimental.surface.fetch_destrieux"]], "fetch_nki() (in module nilearn.experimental.surface)": [[309, "nilearn.experimental.surface.fetch_nki"]], "load_fsaverage() (in module nilearn.experimental.surface)": [[310, "nilearn.experimental.surface.load_fsaverage"]], "armodel (class in nilearn.glm)": [[311, "nilearn.glm.ARModel"]], "__init__() (nilearn.glm.armodel method)": [[311, "nilearn.glm.ARModel.__init__"]], "fit() (nilearn.glm.armodel method)": [[311, "nilearn.glm.ARModel.fit"]], "initialize() (nilearn.glm.armodel method)": [[311, "nilearn.glm.ARModel.initialize"]], "logl() (nilearn.glm.armodel method)": [[311, "nilearn.glm.ARModel.logL"]], "whiten() (nilearn.glm.armodel method)": [[311, "nilearn.glm.ARModel.whiten"]], "contrast (class in nilearn.glm)": [[312, "nilearn.glm.Contrast"]], "__init__() (nilearn.glm.contrast method)": [[312, "nilearn.glm.Contrast.__init__"]], "contrast_type (nilearn.glm.contrast property)": [[312, "nilearn.glm.Contrast.contrast_type"]], "effect_size() (nilearn.glm.contrast method)": [[312, "nilearn.glm.Contrast.effect_size"]], "effect_variance() (nilearn.glm.contrast method)": [[312, "nilearn.glm.Contrast.effect_variance"]], "one_minus_pvalue() (nilearn.glm.contrast method)": [[312, "nilearn.glm.Contrast.one_minus_pvalue"]], "p_value() (nilearn.glm.contrast method)": [[312, "nilearn.glm.Contrast.p_value"]], "stat() (nilearn.glm.contrast method)": [[312, "nilearn.glm.Contrast.stat"]], "z_score() (nilearn.glm.contrast method)": [[312, "nilearn.glm.Contrast.z_score"]], "fcontrastresults (class in nilearn.glm)": [[313, "nilearn.glm.FContrastResults"]], "__init__() (nilearn.glm.fcontrastresults method)": [[313, "nilearn.glm.FContrastResults.__init__"]], "fcontrast() (nilearn.glm.likelihoodmodelresults method)": [[314, "nilearn.glm.LikelihoodModelResults.Fcontrast"]], "likelihoodmodelresults (class in nilearn.glm)": [[314, "nilearn.glm.LikelihoodModelResults"]], "tcontrast() (nilearn.glm.likelihoodmodelresults method)": [[314, "nilearn.glm.LikelihoodModelResults.Tcontrast"]], "__init__() (nilearn.glm.likelihoodmodelresults method)": [[314, "nilearn.glm.LikelihoodModelResults.__init__"]], "conf_int() (nilearn.glm.likelihoodmodelresults method)": [[314, "nilearn.glm.LikelihoodModelResults.conf_int"]], "logl() (nilearn.glm.likelihoodmodelresults method)": [[314, "nilearn.glm.LikelihoodModelResults.logL"]], "t() (nilearn.glm.likelihoodmodelresults method)": [[314, "nilearn.glm.LikelihoodModelResults.t"]], "vcov() (nilearn.glm.likelihoodmodelresults method)": [[314, "nilearn.glm.LikelihoodModelResults.vcov"]], "olsmodel (class in nilearn.glm)": [[315, "nilearn.glm.OLSModel"]], "__init__() (nilearn.glm.olsmodel method)": [[315, "nilearn.glm.OLSModel.__init__"]], "fit() (nilearn.glm.olsmodel method)": [[315, "nilearn.glm.OLSModel.fit"]], "initialize() (nilearn.glm.olsmodel method)": [[315, "nilearn.glm.OLSModel.initialize"]], "logl() (nilearn.glm.olsmodel method)": [[315, "nilearn.glm.OLSModel.logL"]], "whiten() (nilearn.glm.olsmodel method)": [[315, "nilearn.glm.OLSModel.whiten"]], "fcontrast() (nilearn.glm.regressionresults method)": [[316, "nilearn.glm.RegressionResults.Fcontrast"]], "mse() (nilearn.glm.regressionresults method)": [[316, "nilearn.glm.RegressionResults.MSE"]], "regressionresults (class in nilearn.glm)": [[316, "nilearn.glm.RegressionResults"]], "sse() (nilearn.glm.regressionresults method)": [[316, "nilearn.glm.RegressionResults.SSE"]], "tcontrast() (nilearn.glm.regressionresults method)": [[316, "nilearn.glm.RegressionResults.Tcontrast"]], "__init__() (nilearn.glm.regressionresults method)": [[316, "nilearn.glm.RegressionResults.__init__"]], "conf_int() (nilearn.glm.regressionresults method)": [[316, "nilearn.glm.RegressionResults.conf_int"]], "logl() (nilearn.glm.regressionresults method)": [[316, "nilearn.glm.RegressionResults.logL"]], "normalized_residuals() (nilearn.glm.regressionresults method)": [[316, "nilearn.glm.RegressionResults.normalized_residuals"]], "predicted() (nilearn.glm.regressionresults method)": [[316, "nilearn.glm.RegressionResults.predicted"]], "r_square() (nilearn.glm.regressionresults method)": [[316, "nilearn.glm.RegressionResults.r_square"]], "residuals() (nilearn.glm.regressionresults method)": [[316, "nilearn.glm.RegressionResults.residuals"]], "t() (nilearn.glm.regressionresults method)": [[316, "nilearn.glm.RegressionResults.t"]], "vcov() (nilearn.glm.regressionresults method)": [[316, "nilearn.glm.RegressionResults.vcov"]], "fcontrast() (nilearn.glm.simpleregressionresults method)": [[317, "nilearn.glm.SimpleRegressionResults.Fcontrast"]], "simpleregressionresults (class in nilearn.glm)": [[317, "nilearn.glm.SimpleRegressionResults"]], "tcontrast() (nilearn.glm.simpleregressionresults method)": [[317, "nilearn.glm.SimpleRegressionResults.Tcontrast"]], "__init__() (nilearn.glm.simpleregressionresults method)": [[317, "nilearn.glm.SimpleRegressionResults.__init__"]], "conf_int() (nilearn.glm.simpleregressionresults method)": [[317, "nilearn.glm.SimpleRegressionResults.conf_int"]], "logl() (nilearn.glm.simpleregressionresults method)": [[317, "nilearn.glm.SimpleRegressionResults.logL"]], "normalized_residuals() (nilearn.glm.simpleregressionresults method)": [[317, "nilearn.glm.SimpleRegressionResults.normalized_residuals"]], "predicted() (nilearn.glm.simpleregressionresults method)": [[317, "nilearn.glm.SimpleRegressionResults.predicted"]], "residuals() (nilearn.glm.simpleregressionresults method)": [[317, "nilearn.glm.SimpleRegressionResults.residuals"]], "t() (nilearn.glm.simpleregressionresults method)": [[317, "nilearn.glm.SimpleRegressionResults.t"]], "vcov() (nilearn.glm.simpleregressionresults method)": [[317, "nilearn.glm.SimpleRegressionResults.vcov"]], "tcontrastresults (class in nilearn.glm)": [[318, "nilearn.glm.TContrastResults"]], "__init__() (nilearn.glm.tcontrastresults method)": [[318, "nilearn.glm.TContrastResults.__init__"]], "cluster_level_inference() (in module nilearn.glm)": [[319, "nilearn.glm.cluster_level_inference"]], "compute_contrast() (in module nilearn.glm)": [[320, "nilearn.glm.compute_contrast"]], "compute_fixed_effects() (in module nilearn.glm)": [[321, "nilearn.glm.compute_fixed_effects"]], "expression_to_contrast_vector() (in module nilearn.glm)": [[322, "nilearn.glm.expression_to_contrast_vector"]], "fdr_threshold() (in module nilearn.glm)": [[323, "nilearn.glm.fdr_threshold"]], "firstlevelmodel (class in nilearn.glm.first_level)": [[324, "nilearn.glm.first_level.FirstLevelModel"]], "__init__() (nilearn.glm.first_level.firstlevelmodel method)": [[324, "nilearn.glm.first_level.FirstLevelModel.__init__"]], "compute_contrast() (nilearn.glm.first_level.firstlevelmodel method)": [[324, "nilearn.glm.first_level.FirstLevelModel.compute_contrast"]], "fit() (nilearn.glm.first_level.firstlevelmodel method)": [[324, "nilearn.glm.first_level.FirstLevelModel.fit"]], "fit_transform() (nilearn.glm.first_level.firstlevelmodel method)": [[324, "nilearn.glm.first_level.FirstLevelModel.fit_transform"]], "generate_report() (nilearn.glm.first_level.firstlevelmodel method)": [[324, "nilearn.glm.first_level.FirstLevelModel.generate_report"]], "get_metadata_routing() (nilearn.glm.first_level.firstlevelmodel method)": [[324, "nilearn.glm.first_level.FirstLevelModel.get_metadata_routing"]], "get_params() (nilearn.glm.first_level.firstlevelmodel method)": [[324, "nilearn.glm.first_level.FirstLevelModel.get_params"]], "predicted() (nilearn.glm.first_level.firstlevelmodel method)": [[324, "nilearn.glm.first_level.FirstLevelModel.predicted"]], "r_square() (nilearn.glm.first_level.firstlevelmodel method)": [[324, "nilearn.glm.first_level.FirstLevelModel.r_square"]], "residuals() (nilearn.glm.first_level.firstlevelmodel method)": [[324, "nilearn.glm.first_level.FirstLevelModel.residuals"]], "scaling_axis (nilearn.glm.first_level.firstlevelmodel property)": [[324, "nilearn.glm.first_level.FirstLevelModel.scaling_axis"]], "set_fit_request() (nilearn.glm.first_level.firstlevelmodel method)": [[324, "nilearn.glm.first_level.FirstLevelModel.set_fit_request"]], "set_output() (nilearn.glm.first_level.firstlevelmodel method)": [[324, "nilearn.glm.first_level.FirstLevelModel.set_output"]], "set_params() (nilearn.glm.first_level.firstlevelmodel method)": [[324, "nilearn.glm.first_level.FirstLevelModel.set_params"]], "check_design_matrix() (in module nilearn.glm.first_level)": [[325, "nilearn.glm.first_level.check_design_matrix"]], "compute_regressor() (in module nilearn.glm.first_level)": [[326, "nilearn.glm.first_level.compute_regressor"]], "first_level_from_bids() (in module nilearn.glm.first_level)": [[327, "nilearn.glm.first_level.first_level_from_bids"]], "glover_dispersion_derivative() (in module nilearn.glm.first_level)": [[328, "nilearn.glm.first_level.glover_dispersion_derivative"]], "glover_hrf() (in module nilearn.glm.first_level)": [[329, "nilearn.glm.first_level.glover_hrf"]], "glover_time_derivative() (in module nilearn.glm.first_level)": [[330, "nilearn.glm.first_level.glover_time_derivative"]], "make_first_level_design_matrix() (in module nilearn.glm.first_level)": [[331, "nilearn.glm.first_level.make_first_level_design_matrix"]], "mean_scaling() (in module nilearn.glm.first_level)": [[332, "nilearn.glm.first_level.mean_scaling"]], "run_glm() (in module nilearn.glm.first_level)": [[333, "nilearn.glm.first_level.run_glm"]], "spm_dispersion_derivative() (in module nilearn.glm.first_level)": [[334, "nilearn.glm.first_level.spm_dispersion_derivative"]], "spm_hrf() (in module nilearn.glm.first_level)": [[335, "nilearn.glm.first_level.spm_hrf"]], "spm_time_derivative() (in module nilearn.glm.first_level)": [[336, "nilearn.glm.first_level.spm_time_derivative"]], "secondlevelmodel (class in nilearn.glm.second_level)": [[337, "nilearn.glm.second_level.SecondLevelModel"]], "__init__() (nilearn.glm.second_level.secondlevelmodel method)": [[337, "nilearn.glm.second_level.SecondLevelModel.__init__"]], "compute_contrast() (nilearn.glm.second_level.secondlevelmodel method)": [[337, "nilearn.glm.second_level.SecondLevelModel.compute_contrast"]], "fit() (nilearn.glm.second_level.secondlevelmodel method)": [[337, "nilearn.glm.second_level.SecondLevelModel.fit"]], "fit_transform() (nilearn.glm.second_level.secondlevelmodel method)": [[337, "nilearn.glm.second_level.SecondLevelModel.fit_transform"]], "generate_report() (nilearn.glm.second_level.secondlevelmodel method)": [[337, "nilearn.glm.second_level.SecondLevelModel.generate_report"]], "get_metadata_routing() (nilearn.glm.second_level.secondlevelmodel method)": [[337, "nilearn.glm.second_level.SecondLevelModel.get_metadata_routing"]], "get_params() (nilearn.glm.second_level.secondlevelmodel method)": [[337, "nilearn.glm.second_level.SecondLevelModel.get_params"]], "predicted() (nilearn.glm.second_level.secondlevelmodel method)": [[337, "nilearn.glm.second_level.SecondLevelModel.predicted"]], "r_square() (nilearn.glm.second_level.secondlevelmodel method)": [[337, "nilearn.glm.second_level.SecondLevelModel.r_square"]], "residuals() (nilearn.glm.second_level.secondlevelmodel method)": [[337, "nilearn.glm.second_level.SecondLevelModel.residuals"]], "set_fit_request() (nilearn.glm.second_level.secondlevelmodel method)": [[337, "nilearn.glm.second_level.SecondLevelModel.set_fit_request"]], "set_output() (nilearn.glm.second_level.secondlevelmodel method)": [[337, "nilearn.glm.second_level.SecondLevelModel.set_output"]], "set_params() (nilearn.glm.second_level.secondlevelmodel method)": [[337, "nilearn.glm.second_level.SecondLevelModel.set_params"]], "make_second_level_design_matrix() (in module nilearn.glm.second_level)": [[338, "nilearn.glm.second_level.make_second_level_design_matrix"]], "non_parametric_inference() (in module nilearn.glm.second_level)": [[339, "nilearn.glm.second_level.non_parametric_inference"]], "threshold_stats_img() (in module nilearn.glm)": [[340, "nilearn.glm.threshold_stats_img"]], "binarize_img() (in module nilearn.image)": [[341, "nilearn.image.binarize_img"]], "clean_img() (in module nilearn.image)": [[342, "nilearn.image.clean_img"]], "concat_imgs() (in module nilearn.image)": [[343, "nilearn.image.concat_imgs"]], "coord_transform() (in module nilearn.image)": [[344, "nilearn.image.coord_transform"]], "copy_img() (in module nilearn.image)": [[345, "nilearn.image.copy_img"]], "crop_img() (in module nilearn.image)": [[346, "nilearn.image.crop_img"]], "get_data() (in module nilearn.image)": [[347, "nilearn.image.get_data"]], "high_variance_confounds() (in module nilearn.image)": [[348, "nilearn.image.high_variance_confounds"]], "index_img() (in module nilearn.image)": [[349, "nilearn.image.index_img"]], "iter_img() (in module nilearn.image)": [[350, "nilearn.image.iter_img"]], "largest_connected_component_img() (in module nilearn.image)": [[351, "nilearn.image.largest_connected_component_img"]], "load_img() (in module nilearn.image)": [[352, "nilearn.image.load_img"]], "math_img() (in module nilearn.image)": [[353, "nilearn.image.math_img"]], "mean_img() (in module nilearn.image)": [[354, "nilearn.image.mean_img"]], "new_img_like() (in module nilearn.image)": [[355, "nilearn.image.new_img_like"]], "reorder_img() (in module nilearn.image)": [[356, "nilearn.image.reorder_img"]], "resample_img() (in module nilearn.image)": [[357, "nilearn.image.resample_img"]], "resample_to_img() (in module nilearn.image)": [[358, "nilearn.image.resample_to_img"]], "smooth_img() (in module nilearn.image)": [[359, "nilearn.image.smooth_img"]], "swap_img_hemispheres() (in module nilearn.image)": [[360, "nilearn.image.swap_img_hemispheres"]], "threshold_img() (in module nilearn.image)": [[361, "nilearn.image.threshold_img"]], "get_bids_files() (in module nilearn.interfaces.bids)": [[362, "nilearn.interfaces.bids.get_bids_files"]], "parse_bids_filename() (in module nilearn.interfaces.bids)": [[363, "nilearn.interfaces.bids.parse_bids_filename"]], "save_glm_to_bids() (in module nilearn.interfaces.bids)": [[364, "nilearn.interfaces.bids.save_glm_to_bids"]], "load_confounds() (in module nilearn.interfaces.fmriprep)": [[365, "nilearn.interfaces.fmriprep.load_confounds"]], "load_confounds_strategy() (in module nilearn.interfaces.fmriprep)": [[366, "nilearn.interfaces.fmriprep.load_confounds_strategy"]], "get_design_from_fslmat() (in module nilearn.interfaces.fsl)": [[367, "nilearn.interfaces.fsl.get_design_from_fslmat"]], "basemasker (class in nilearn.maskers)": [[368, "nilearn.maskers.BaseMasker"]], "__init__() (nilearn.maskers.basemasker method)": [[368, "nilearn.maskers.BaseMasker.__init__"]], "fit_transform() (nilearn.maskers.basemasker method)": [[368, "nilearn.maskers.BaseMasker.fit_transform"]], "get_metadata_routing() (nilearn.maskers.basemasker method)": [[368, "nilearn.maskers.BaseMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.basemasker method)": [[368, "nilearn.maskers.BaseMasker.get_params"]], "inverse_transform() (nilearn.maskers.basemasker method)": [[368, "nilearn.maskers.BaseMasker.inverse_transform"]], "set_output() (nilearn.maskers.basemasker method)": [[368, "nilearn.maskers.BaseMasker.set_output"]], "set_params() (nilearn.maskers.basemasker method)": [[368, "nilearn.maskers.BaseMasker.set_params"]], "set_transform_request() (nilearn.maskers.basemasker method)": [[368, "nilearn.maskers.BaseMasker.set_transform_request"]], "transform() (nilearn.maskers.basemasker method)": [[368, "nilearn.maskers.BaseMasker.transform"]], "transform_single_imgs() (nilearn.maskers.basemasker method)": [[368, "nilearn.maskers.BaseMasker.transform_single_imgs"]], "multiniftilabelsmasker (class in nilearn.maskers)": [[369, "nilearn.maskers.MultiNiftiLabelsMasker"]], "__init__() (nilearn.maskers.multiniftilabelsmasker method)": [[369, "nilearn.maskers.MultiNiftiLabelsMasker.__init__"]], "fit() (nilearn.maskers.multiniftilabelsmasker method)": [[369, "nilearn.maskers.MultiNiftiLabelsMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[369, "nilearn.maskers.MultiNiftiLabelsMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftilabelsmasker method)": [[369, "nilearn.maskers.MultiNiftiLabelsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.multiniftilabelsmasker method)": [[369, "nilearn.maskers.MultiNiftiLabelsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.multiniftilabelsmasker method)": [[369, "nilearn.maskers.MultiNiftiLabelsMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[369, "nilearn.maskers.MultiNiftiLabelsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.multiniftilabelsmasker method)": [[369, "nilearn.maskers.MultiNiftiLabelsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[369, "nilearn.maskers.MultiNiftiLabelsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.multiniftilabelsmasker method)": [[369, "nilearn.maskers.MultiNiftiLabelsMasker.set_output"]], "set_params() (nilearn.maskers.multiniftilabelsmasker method)": [[369, "nilearn.maskers.MultiNiftiLabelsMasker.set_params"]], "set_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[369, "nilearn.maskers.MultiNiftiLabelsMasker.set_transform_request"]], "transform() (nilearn.maskers.multiniftilabelsmasker method)": [[369, "nilearn.maskers.MultiNiftiLabelsMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[369, "nilearn.maskers.MultiNiftiLabelsMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[369, "nilearn.maskers.MultiNiftiLabelsMasker.transform_single_imgs"]], "multiniftimapsmasker (class in nilearn.maskers)": [[370, "nilearn.maskers.MultiNiftiMapsMasker"]], "__init__() (nilearn.maskers.multiniftimapsmasker method)": [[370, "nilearn.maskers.MultiNiftiMapsMasker.__init__"]], "fit() (nilearn.maskers.multiniftimapsmasker method)": [[370, "nilearn.maskers.MultiNiftiMapsMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftimapsmasker method)": [[370, "nilearn.maskers.MultiNiftiMapsMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftimapsmasker method)": [[370, "nilearn.maskers.MultiNiftiMapsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.multiniftimapsmasker method)": [[370, "nilearn.maskers.MultiNiftiMapsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.multiniftimapsmasker method)": [[370, "nilearn.maskers.MultiNiftiMapsMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftimapsmasker method)": [[370, "nilearn.maskers.MultiNiftiMapsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.multiniftimapsmasker method)": [[370, "nilearn.maskers.MultiNiftiMapsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[370, "nilearn.maskers.MultiNiftiMapsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.multiniftimapsmasker method)": [[370, "nilearn.maskers.MultiNiftiMapsMasker.set_output"]], "set_params() (nilearn.maskers.multiniftimapsmasker method)": [[370, "nilearn.maskers.MultiNiftiMapsMasker.set_params"]], "set_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[370, "nilearn.maskers.MultiNiftiMapsMasker.set_transform_request"]], "transform() (nilearn.maskers.multiniftimapsmasker method)": [[370, "nilearn.maskers.MultiNiftiMapsMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[370, "nilearn.maskers.MultiNiftiMapsMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[370, "nilearn.maskers.MultiNiftiMapsMasker.transform_single_imgs"]], "multiniftimasker (class in nilearn.maskers)": [[371, "nilearn.maskers.MultiNiftiMasker"]], "__init__() (nilearn.maskers.multiniftimasker method)": [[371, "nilearn.maskers.MultiNiftiMasker.__init__"]], "fit() (nilearn.maskers.multiniftimasker method)": [[371, "nilearn.maskers.MultiNiftiMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftimasker method)": [[371, "nilearn.maskers.MultiNiftiMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftimasker method)": [[371, "nilearn.maskers.MultiNiftiMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.multiniftimasker method)": [[371, "nilearn.maskers.MultiNiftiMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.multiniftimasker method)": [[371, "nilearn.maskers.MultiNiftiMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftimasker method)": [[371, "nilearn.maskers.MultiNiftiMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.multiniftimasker method)": [[371, "nilearn.maskers.MultiNiftiMasker.set_fit_request"]], "set_output() (nilearn.maskers.multiniftimasker method)": [[371, "nilearn.maskers.MultiNiftiMasker.set_output"]], "set_params() (nilearn.maskers.multiniftimasker method)": [[371, "nilearn.maskers.MultiNiftiMasker.set_params"]], "set_transform_request() (nilearn.maskers.multiniftimasker method)": [[371, "nilearn.maskers.MultiNiftiMasker.set_transform_request"]], "transform() (nilearn.maskers.multiniftimasker method)": [[371, "nilearn.maskers.MultiNiftiMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftimasker method)": [[371, "nilearn.maskers.MultiNiftiMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftimasker method)": [[371, "nilearn.maskers.MultiNiftiMasker.transform_single_imgs"]], "niftilabelsmasker (class in nilearn.maskers)": [[372, "nilearn.maskers.NiftiLabelsMasker"]], "__init__() (nilearn.maskers.niftilabelsmasker method)": [[372, "nilearn.maskers.NiftiLabelsMasker.__init__"]], "fit() (nilearn.maskers.niftilabelsmasker method)": [[372, "nilearn.maskers.NiftiLabelsMasker.fit"]], "fit_transform() (nilearn.maskers.niftilabelsmasker method)": [[372, "nilearn.maskers.NiftiLabelsMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftilabelsmasker method)": [[372, "nilearn.maskers.NiftiLabelsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftilabelsmasker method)": [[372, "nilearn.maskers.NiftiLabelsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftilabelsmasker method)": [[372, "nilearn.maskers.NiftiLabelsMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftilabelsmasker method)": [[372, "nilearn.maskers.NiftiLabelsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.niftilabelsmasker method)": [[372, "nilearn.maskers.NiftiLabelsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[372, "nilearn.maskers.NiftiLabelsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.niftilabelsmasker method)": [[372, "nilearn.maskers.NiftiLabelsMasker.set_output"]], "set_params() (nilearn.maskers.niftilabelsmasker method)": [[372, "nilearn.maskers.NiftiLabelsMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[372, "nilearn.maskers.NiftiLabelsMasker.set_transform_request"]], "transform() (nilearn.maskers.niftilabelsmasker method)": [[372, "nilearn.maskers.NiftiLabelsMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftilabelsmasker method)": [[372, "nilearn.maskers.NiftiLabelsMasker.transform_single_imgs"]], "niftimapsmasker (class in nilearn.maskers)": [[373, "nilearn.maskers.NiftiMapsMasker"]], "__init__() (nilearn.maskers.niftimapsmasker method)": [[373, "nilearn.maskers.NiftiMapsMasker.__init__"]], "fit() (nilearn.maskers.niftimapsmasker method)": [[373, "nilearn.maskers.NiftiMapsMasker.fit"]], "fit_transform() (nilearn.maskers.niftimapsmasker method)": [[373, "nilearn.maskers.NiftiMapsMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftimapsmasker method)": [[373, "nilearn.maskers.NiftiMapsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftimapsmasker method)": [[373, "nilearn.maskers.NiftiMapsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftimapsmasker method)": [[373, "nilearn.maskers.NiftiMapsMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftimapsmasker method)": [[373, "nilearn.maskers.NiftiMapsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.niftimapsmasker method)": [[373, "nilearn.maskers.NiftiMapsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.niftimapsmasker method)": [[373, "nilearn.maskers.NiftiMapsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.niftimapsmasker method)": [[373, "nilearn.maskers.NiftiMapsMasker.set_output"]], "set_params() (nilearn.maskers.niftimapsmasker method)": [[373, "nilearn.maskers.NiftiMapsMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftimapsmasker method)": [[373, "nilearn.maskers.NiftiMapsMasker.set_transform_request"]], "transform() (nilearn.maskers.niftimapsmasker method)": [[373, "nilearn.maskers.NiftiMapsMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftimapsmasker method)": [[373, "nilearn.maskers.NiftiMapsMasker.transform_single_imgs"]], "niftimasker (class in nilearn.maskers)": [[374, "nilearn.maskers.NiftiMasker"]], "__init__() (nilearn.maskers.niftimasker method)": [[374, "nilearn.maskers.NiftiMasker.__init__"]], "fit() (nilearn.maskers.niftimasker method)": [[374, "nilearn.maskers.NiftiMasker.fit"]], "fit_transform() (nilearn.maskers.niftimasker method)": [[374, "nilearn.maskers.NiftiMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftimasker method)": [[374, "nilearn.maskers.NiftiMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftimasker method)": [[374, "nilearn.maskers.NiftiMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftimasker method)": [[374, "nilearn.maskers.NiftiMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftimasker method)": [[374, "nilearn.maskers.NiftiMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.niftimasker method)": [[374, "nilearn.maskers.NiftiMasker.set_fit_request"]], "set_output() (nilearn.maskers.niftimasker method)": [[374, "nilearn.maskers.NiftiMasker.set_output"]], "set_params() (nilearn.maskers.niftimasker method)": [[374, "nilearn.maskers.NiftiMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftimasker method)": [[374, "nilearn.maskers.NiftiMasker.set_transform_request"]], "transform() (nilearn.maskers.niftimasker method)": [[374, "nilearn.maskers.NiftiMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftimasker method)": [[374, "nilearn.maskers.NiftiMasker.transform_single_imgs"]], "niftispheresmasker (class in nilearn.maskers)": [[375, "nilearn.maskers.NiftiSpheresMasker"]], "__init__() (nilearn.maskers.niftispheresmasker method)": [[375, "nilearn.maskers.NiftiSpheresMasker.__init__"]], "fit() (nilearn.maskers.niftispheresmasker method)": [[375, "nilearn.maskers.NiftiSpheresMasker.fit"]], "fit_transform() (nilearn.maskers.niftispheresmasker method)": [[375, "nilearn.maskers.NiftiSpheresMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftispheresmasker method)": [[375, "nilearn.maskers.NiftiSpheresMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftispheresmasker method)": [[375, "nilearn.maskers.NiftiSpheresMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftispheresmasker method)": [[375, "nilearn.maskers.NiftiSpheresMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftispheresmasker method)": [[375, "nilearn.maskers.NiftiSpheresMasker.inverse_transform"]], "set_inverse_transform_request() (nilearn.maskers.niftispheresmasker method)": [[375, "nilearn.maskers.NiftiSpheresMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.niftispheresmasker method)": [[375, "nilearn.maskers.NiftiSpheresMasker.set_output"]], "set_params() (nilearn.maskers.niftispheresmasker method)": [[375, "nilearn.maskers.NiftiSpheresMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftispheresmasker method)": [[375, "nilearn.maskers.NiftiSpheresMasker.set_transform_request"]], "transform() (nilearn.maskers.niftispheresmasker method)": [[375, "nilearn.maskers.NiftiSpheresMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftispheresmasker method)": [[375, "nilearn.maskers.NiftiSpheresMasker.transform_single_imgs"]], "apply_mask() (in module nilearn.masking)": [[376, "nilearn.masking.apply_mask"]], "compute_background_mask() (in module nilearn.masking)": [[377, "nilearn.masking.compute_background_mask"]], "compute_brain_mask() (in module nilearn.masking)": [[378, "nilearn.masking.compute_brain_mask"]], "compute_epi_mask() (in module nilearn.masking)": [[379, "nilearn.masking.compute_epi_mask"]], "compute_multi_background_mask() (in module nilearn.masking)": [[380, "nilearn.masking.compute_multi_background_mask"]], "compute_multi_brain_mask() (in module nilearn.masking)": [[381, "nilearn.masking.compute_multi_brain_mask"]], "compute_multi_epi_mask() (in module nilearn.masking)": [[382, "nilearn.masking.compute_multi_epi_mask"]], "intersect_masks() (in module nilearn.masking)": [[383, "nilearn.masking.intersect_masks"]], "unmask() (in module nilearn.masking)": [[384, "nilearn.masking.unmask"]], "permuted_ols() (in module nilearn.mass_univariate)": [[385, "nilearn.mass_univariate.permuted_ols"]], "baseaxes (class in nilearn.plotting.displays)": [[386, "nilearn.plotting.displays.BaseAxes"]], "__init__() (nilearn.plotting.displays.baseaxes method)": [[386, "nilearn.plotting.displays.BaseAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[386, "nilearn.plotting.displays.BaseAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.baseaxes method)": [[386, "nilearn.plotting.displays.BaseAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.baseaxes method)": [[386, "nilearn.plotting.displays.BaseAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.baseaxes method)": [[386, "nilearn.plotting.displays.BaseAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.baseaxes method)": [[386, "nilearn.plotting.displays.BaseAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[386, "nilearn.plotting.displays.BaseAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.baseaxes method)": [[386, "nilearn.plotting.displays.BaseAxes.transform_to_2d"]], "baseslicer (class in nilearn.plotting.displays)": [[387, "nilearn.plotting.displays.BaseSlicer"]], "__init__() (nilearn.plotting.displays.baseslicer method)": [[387, "nilearn.plotting.displays.BaseSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.baseslicer method)": [[387, "nilearn.plotting.displays.BaseSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.baseslicer method)": [[387, "nilearn.plotting.displays.BaseSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.baseslicer method)": [[387, "nilearn.plotting.displays.BaseSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.baseslicer method)": [[387, "nilearn.plotting.displays.BaseSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.baseslicer method)": [[387, "nilearn.plotting.displays.BaseSlicer.annotate"]], "black_bg (nilearn.plotting.displays.baseslicer property)": [[387, "nilearn.plotting.displays.BaseSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.baseslicer property)": [[387, "nilearn.plotting.displays.BaseSlicer.brain_color"]], "close() (nilearn.plotting.displays.baseslicer method)": [[387, "nilearn.plotting.displays.BaseSlicer.close"]], "find_cut_coords() (nilearn.plotting.displays.baseslicer static method)": [[387, "nilearn.plotting.displays.BaseSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.baseslicer class method)": [[387, "nilearn.plotting.displays.BaseSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.baseslicer method)": [[387, "nilearn.plotting.displays.BaseSlicer.savefig"]], "title() (nilearn.plotting.displays.baseslicer method)": [[387, "nilearn.plotting.displays.BaseSlicer.title"]], "cutaxes (class in nilearn.plotting.displays)": [[388, "nilearn.plotting.displays.CutAxes"]], "__init__() (nilearn.plotting.displays.cutaxes method)": [[388, "nilearn.plotting.displays.CutAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[388, "nilearn.plotting.displays.CutAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.cutaxes method)": [[388, "nilearn.plotting.displays.CutAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.cutaxes method)": [[388, "nilearn.plotting.displays.CutAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.cutaxes method)": [[388, "nilearn.plotting.displays.CutAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.cutaxes method)": [[388, "nilearn.plotting.displays.CutAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[388, "nilearn.plotting.displays.CutAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.cutaxes method)": [[388, "nilearn.plotting.displays.CutAxes.transform_to_2d"]], "glassbrainaxes (class in nilearn.plotting.displays)": [[389, "nilearn.plotting.displays.GlassBrainAxes"]], "__init__() (nilearn.plotting.displays.glassbrainaxes method)": [[389, "nilearn.plotting.displays.GlassBrainAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[389, "nilearn.plotting.displays.GlassBrainAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[389, "nilearn.plotting.displays.GlassBrainAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.glassbrainaxes method)": [[389, "nilearn.plotting.displays.GlassBrainAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.glassbrainaxes method)": [[389, "nilearn.plotting.displays.GlassBrainAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.glassbrainaxes method)": [[389, "nilearn.plotting.displays.GlassBrainAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[389, "nilearn.plotting.displays.GlassBrainAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[389, "nilearn.plotting.displays.GlassBrainAxes.transform_to_2d"]], "lprojector (class in nilearn.plotting.displays)": [[390, "nilearn.plotting.displays.LProjector"]], "__init__() (nilearn.plotting.displays.lprojector method)": [[390, "nilearn.plotting.displays.LProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lprojector method)": [[390, "nilearn.plotting.displays.LProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lprojector method)": [[390, "nilearn.plotting.displays.LProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lprojector method)": [[390, "nilearn.plotting.displays.LProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lprojector method)": [[390, "nilearn.plotting.displays.LProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lprojector method)": [[390, "nilearn.plotting.displays.LProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lprojector method)": [[390, "nilearn.plotting.displays.LProjector.annotate"]], "black_bg (nilearn.plotting.displays.lprojector property)": [[390, "nilearn.plotting.displays.LProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lprojector property)": [[390, "nilearn.plotting.displays.LProjector.brain_color"]], "close() (nilearn.plotting.displays.lprojector method)": [[390, "nilearn.plotting.displays.LProjector.close"]], "draw_cross() (nilearn.plotting.displays.lprojector method)": [[390, "nilearn.plotting.displays.LProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lprojector class method)": [[390, "nilearn.plotting.displays.LProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lprojector class method)": [[390, "nilearn.plotting.displays.LProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lprojector method)": [[390, "nilearn.plotting.displays.LProjector.savefig"]], "title() (nilearn.plotting.displays.lprojector method)": [[390, "nilearn.plotting.displays.LProjector.title"]], "lrprojector (class in nilearn.plotting.displays)": [[391, "nilearn.plotting.displays.LRProjector"]], "__init__() (nilearn.plotting.displays.lrprojector method)": [[391, "nilearn.plotting.displays.LRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lrprojector method)": [[391, "nilearn.plotting.displays.LRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lrprojector method)": [[391, "nilearn.plotting.displays.LRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lrprojector method)": [[391, "nilearn.plotting.displays.LRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lrprojector method)": [[391, "nilearn.plotting.displays.LRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lrprojector method)": [[391, "nilearn.plotting.displays.LRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lrprojector method)": [[391, "nilearn.plotting.displays.LRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lrprojector property)": [[391, "nilearn.plotting.displays.LRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lrprojector property)": [[391, "nilearn.plotting.displays.LRProjector.brain_color"]], "close() (nilearn.plotting.displays.lrprojector method)": [[391, "nilearn.plotting.displays.LRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lrprojector method)": [[391, "nilearn.plotting.displays.LRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lrprojector class method)": [[391, "nilearn.plotting.displays.LRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lrprojector class method)": [[391, "nilearn.plotting.displays.LRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lrprojector method)": [[391, "nilearn.plotting.displays.LRProjector.savefig"]], "title() (nilearn.plotting.displays.lrprojector method)": [[391, "nilearn.plotting.displays.LRProjector.title"]], "lyrprojector (class in nilearn.plotting.displays)": [[392, "nilearn.plotting.displays.LYRProjector"]], "__init__() (nilearn.plotting.displays.lyrprojector method)": [[392, "nilearn.plotting.displays.LYRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lyrprojector method)": [[392, "nilearn.plotting.displays.LYRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lyrprojector method)": [[392, "nilearn.plotting.displays.LYRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lyrprojector method)": [[392, "nilearn.plotting.displays.LYRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lyrprojector method)": [[392, "nilearn.plotting.displays.LYRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lyrprojector method)": [[392, "nilearn.plotting.displays.LYRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lyrprojector method)": [[392, "nilearn.plotting.displays.LYRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lyrprojector property)": [[392, "nilearn.plotting.displays.LYRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lyrprojector property)": [[392, "nilearn.plotting.displays.LYRProjector.brain_color"]], "close() (nilearn.plotting.displays.lyrprojector method)": [[392, "nilearn.plotting.displays.LYRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lyrprojector method)": [[392, "nilearn.plotting.displays.LYRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lyrprojector class method)": [[392, "nilearn.plotting.displays.LYRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lyrprojector class method)": [[392, "nilearn.plotting.displays.LYRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lyrprojector method)": [[392, "nilearn.plotting.displays.LYRProjector.savefig"]], "title() (nilearn.plotting.displays.lyrprojector method)": [[392, "nilearn.plotting.displays.LYRProjector.title"]], "lyrzprojector (class in nilearn.plotting.displays)": [[393, "nilearn.plotting.displays.LYRZProjector"]], "__init__() (nilearn.plotting.displays.lyrzprojector method)": [[393, "nilearn.plotting.displays.LYRZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lyrzprojector method)": [[393, "nilearn.plotting.displays.LYRZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lyrzprojector method)": [[393, "nilearn.plotting.displays.LYRZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lyrzprojector method)": [[393, "nilearn.plotting.displays.LYRZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lyrzprojector method)": [[393, "nilearn.plotting.displays.LYRZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lyrzprojector method)": [[393, "nilearn.plotting.displays.LYRZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lyrzprojector method)": [[393, "nilearn.plotting.displays.LYRZProjector.annotate"]], "black_bg (nilearn.plotting.displays.lyrzprojector property)": [[393, "nilearn.plotting.displays.LYRZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lyrzprojector property)": [[393, "nilearn.plotting.displays.LYRZProjector.brain_color"]], "close() (nilearn.plotting.displays.lyrzprojector method)": [[393, "nilearn.plotting.displays.LYRZProjector.close"]], "draw_cross() (nilearn.plotting.displays.lyrzprojector method)": [[393, "nilearn.plotting.displays.LYRZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lyrzprojector class method)": [[393, "nilearn.plotting.displays.LYRZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lyrzprojector class method)": [[393, "nilearn.plotting.displays.LYRZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lyrzprojector method)": [[393, "nilearn.plotting.displays.LYRZProjector.savefig"]], "title() (nilearn.plotting.displays.lyrzprojector method)": [[393, "nilearn.plotting.displays.LYRZProjector.title"]], "lzrprojector (class in nilearn.plotting.displays)": [[394, "nilearn.plotting.displays.LZRProjector"]], "__init__() (nilearn.plotting.displays.lzrprojector method)": [[394, "nilearn.plotting.displays.LZRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lzrprojector method)": [[394, "nilearn.plotting.displays.LZRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lzrprojector method)": [[394, "nilearn.plotting.displays.LZRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lzrprojector method)": [[394, "nilearn.plotting.displays.LZRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lzrprojector method)": [[394, "nilearn.plotting.displays.LZRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lzrprojector method)": [[394, "nilearn.plotting.displays.LZRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lzrprojector method)": [[394, "nilearn.plotting.displays.LZRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lzrprojector property)": [[394, "nilearn.plotting.displays.LZRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lzrprojector property)": [[394, "nilearn.plotting.displays.LZRProjector.brain_color"]], "close() (nilearn.plotting.displays.lzrprojector method)": [[394, "nilearn.plotting.displays.LZRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lzrprojector method)": [[394, "nilearn.plotting.displays.LZRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lzrprojector class method)": [[394, "nilearn.plotting.displays.LZRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lzrprojector class method)": [[394, "nilearn.plotting.displays.LZRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lzrprojector method)": [[394, "nilearn.plotting.displays.LZRProjector.savefig"]], "title() (nilearn.plotting.displays.lzrprojector method)": [[394, "nilearn.plotting.displays.LZRProjector.title"]], "lzryprojector (class in nilearn.plotting.displays)": [[395, "nilearn.plotting.displays.LZRYProjector"]], "__init__() (nilearn.plotting.displays.lzryprojector method)": [[395, "nilearn.plotting.displays.LZRYProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lzryprojector method)": [[395, "nilearn.plotting.displays.LZRYProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lzryprojector method)": [[395, "nilearn.plotting.displays.LZRYProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lzryprojector method)": [[395, "nilearn.plotting.displays.LZRYProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lzryprojector method)": [[395, "nilearn.plotting.displays.LZRYProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lzryprojector method)": [[395, "nilearn.plotting.displays.LZRYProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lzryprojector method)": [[395, "nilearn.plotting.displays.LZRYProjector.annotate"]], "black_bg (nilearn.plotting.displays.lzryprojector property)": [[395, "nilearn.plotting.displays.LZRYProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lzryprojector property)": [[395, "nilearn.plotting.displays.LZRYProjector.brain_color"]], "close() (nilearn.plotting.displays.lzryprojector method)": [[395, "nilearn.plotting.displays.LZRYProjector.close"]], "draw_cross() (nilearn.plotting.displays.lzryprojector method)": [[395, "nilearn.plotting.displays.LZRYProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lzryprojector class method)": [[395, "nilearn.plotting.displays.LZRYProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lzryprojector class method)": [[395, "nilearn.plotting.displays.LZRYProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lzryprojector method)": [[395, "nilearn.plotting.displays.LZRYProjector.savefig"]], "title() (nilearn.plotting.displays.lzryprojector method)": [[395, "nilearn.plotting.displays.LZRYProjector.title"]], "mosaicslicer (class in nilearn.plotting.displays)": [[396, "nilearn.plotting.displays.MosaicSlicer"]], "__init__() (nilearn.plotting.displays.mosaicslicer method)": [[396, "nilearn.plotting.displays.MosaicSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.mosaicslicer method)": [[396, "nilearn.plotting.displays.MosaicSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.mosaicslicer method)": [[396, "nilearn.plotting.displays.MosaicSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.mosaicslicer method)": [[396, "nilearn.plotting.displays.MosaicSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.mosaicslicer method)": [[396, "nilearn.plotting.displays.MosaicSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.mosaicslicer method)": [[396, "nilearn.plotting.displays.MosaicSlicer.annotate"]], "black_bg (nilearn.plotting.displays.mosaicslicer property)": [[396, "nilearn.plotting.displays.MosaicSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.mosaicslicer property)": [[396, "nilearn.plotting.displays.MosaicSlicer.brain_color"]], "close() (nilearn.plotting.displays.mosaicslicer method)": [[396, "nilearn.plotting.displays.MosaicSlicer.close"]], "draw_cross() (nilearn.plotting.displays.mosaicslicer method)": [[396, "nilearn.plotting.displays.MosaicSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.mosaicslicer class method)": [[396, "nilearn.plotting.displays.MosaicSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.mosaicslicer class method)": [[396, "nilearn.plotting.displays.MosaicSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.mosaicslicer method)": [[396, "nilearn.plotting.displays.MosaicSlicer.savefig"]], "title() (nilearn.plotting.displays.mosaicslicer method)": [[396, "nilearn.plotting.displays.MosaicSlicer.title"]], "orthoprojector (class in nilearn.plotting.displays)": [[397, "nilearn.plotting.displays.OrthoProjector"]], "__init__() (nilearn.plotting.displays.orthoprojector method)": [[397, "nilearn.plotting.displays.OrthoProjector.__init__"]], "add_contours() (nilearn.plotting.displays.orthoprojector method)": [[397, "nilearn.plotting.displays.OrthoProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.orthoprojector method)": [[397, "nilearn.plotting.displays.OrthoProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.orthoprojector method)": [[397, "nilearn.plotting.displays.OrthoProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.orthoprojector method)": [[397, "nilearn.plotting.displays.OrthoProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.orthoprojector method)": [[397, "nilearn.plotting.displays.OrthoProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.orthoprojector method)": [[397, "nilearn.plotting.displays.OrthoProjector.annotate"]], "black_bg (nilearn.plotting.displays.orthoprojector property)": [[397, "nilearn.plotting.displays.OrthoProjector.black_bg"]], "brain_color (nilearn.plotting.displays.orthoprojector property)": [[397, "nilearn.plotting.displays.OrthoProjector.brain_color"]], "close() (nilearn.plotting.displays.orthoprojector method)": [[397, "nilearn.plotting.displays.OrthoProjector.close"]], "draw_cross() (nilearn.plotting.displays.orthoprojector method)": [[397, "nilearn.plotting.displays.OrthoProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.orthoprojector class method)": [[397, "nilearn.plotting.displays.OrthoProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.orthoprojector class method)": [[397, "nilearn.plotting.displays.OrthoProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.orthoprojector method)": [[397, "nilearn.plotting.displays.OrthoProjector.savefig"]], "title() (nilearn.plotting.displays.orthoprojector method)": [[397, "nilearn.plotting.displays.OrthoProjector.title"]], "orthoslicer (class in nilearn.plotting.displays)": [[398, "nilearn.plotting.displays.OrthoSlicer"]], "__init__() (nilearn.plotting.displays.orthoslicer method)": [[398, "nilearn.plotting.displays.OrthoSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.orthoslicer method)": [[398, "nilearn.plotting.displays.OrthoSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.orthoslicer method)": [[398, "nilearn.plotting.displays.OrthoSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.orthoslicer method)": [[398, "nilearn.plotting.displays.OrthoSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.orthoslicer method)": [[398, "nilearn.plotting.displays.OrthoSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.orthoslicer method)": [[398, "nilearn.plotting.displays.OrthoSlicer.annotate"]], "black_bg (nilearn.plotting.displays.orthoslicer property)": [[398, "nilearn.plotting.displays.OrthoSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.orthoslicer property)": [[398, "nilearn.plotting.displays.OrthoSlicer.brain_color"]], "close() (nilearn.plotting.displays.orthoslicer method)": [[398, "nilearn.plotting.displays.OrthoSlicer.close"]], "draw_cross() (nilearn.plotting.displays.orthoslicer method)": [[398, "nilearn.plotting.displays.OrthoSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.orthoslicer class method)": [[398, "nilearn.plotting.displays.OrthoSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.orthoslicer class method)": [[398, "nilearn.plotting.displays.OrthoSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.orthoslicer method)": [[398, "nilearn.plotting.displays.OrthoSlicer.savefig"]], "title() (nilearn.plotting.displays.orthoslicer method)": [[398, "nilearn.plotting.displays.OrthoSlicer.title"]], "plotlysurfacefigure (class in nilearn.plotting.displays)": [[399, "nilearn.plotting.displays.PlotlySurfaceFigure"]], "__init__() (nilearn.plotting.displays.plotlysurfacefigure method)": [[399, "nilearn.plotting.displays.PlotlySurfaceFigure.__init__"]], "savefig() (nilearn.plotting.displays.plotlysurfacefigure method)": [[399, "nilearn.plotting.displays.PlotlySurfaceFigure.savefig"]], "show() (nilearn.plotting.displays.plotlysurfacefigure method)": [[399, "nilearn.plotting.displays.PlotlySurfaceFigure.show"]], "rprojector (class in nilearn.plotting.displays)": [[400, "nilearn.plotting.displays.RProjector"]], "__init__() (nilearn.plotting.displays.rprojector method)": [[400, "nilearn.plotting.displays.RProjector.__init__"]], "add_contours() (nilearn.plotting.displays.rprojector method)": [[400, "nilearn.plotting.displays.RProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.rprojector method)": [[400, "nilearn.plotting.displays.RProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.rprojector method)": [[400, "nilearn.plotting.displays.RProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.rprojector method)": [[400, "nilearn.plotting.displays.RProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.rprojector method)": [[400, "nilearn.plotting.displays.RProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.rprojector method)": [[400, "nilearn.plotting.displays.RProjector.annotate"]], "black_bg (nilearn.plotting.displays.rprojector property)": [[400, "nilearn.plotting.displays.RProjector.black_bg"]], "brain_color (nilearn.plotting.displays.rprojector property)": [[400, "nilearn.plotting.displays.RProjector.brain_color"]], "close() (nilearn.plotting.displays.rprojector method)": [[400, "nilearn.plotting.displays.RProjector.close"]], "draw_cross() (nilearn.plotting.displays.rprojector method)": [[400, "nilearn.plotting.displays.RProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.rprojector class method)": [[400, "nilearn.plotting.displays.RProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.rprojector class method)": [[400, "nilearn.plotting.displays.RProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.rprojector method)": [[400, "nilearn.plotting.displays.RProjector.savefig"]], "title() (nilearn.plotting.displays.rprojector method)": [[400, "nilearn.plotting.displays.RProjector.title"]], "tiledslicer (class in nilearn.plotting.displays)": [[401, "nilearn.plotting.displays.TiledSlicer"]], "__init__() (nilearn.plotting.displays.tiledslicer method)": [[401, "nilearn.plotting.displays.TiledSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.tiledslicer method)": [[401, "nilearn.plotting.displays.TiledSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.tiledslicer method)": [[401, "nilearn.plotting.displays.TiledSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.tiledslicer method)": [[401, "nilearn.plotting.displays.TiledSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.tiledslicer method)": [[401, "nilearn.plotting.displays.TiledSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.tiledslicer method)": [[401, "nilearn.plotting.displays.TiledSlicer.annotate"]], "black_bg (nilearn.plotting.displays.tiledslicer property)": [[401, "nilearn.plotting.displays.TiledSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.tiledslicer property)": [[401, "nilearn.plotting.displays.TiledSlicer.brain_color"]], "close() (nilearn.plotting.displays.tiledslicer method)": [[401, "nilearn.plotting.displays.TiledSlicer.close"]], "draw_cross() (nilearn.plotting.displays.tiledslicer method)": [[401, "nilearn.plotting.displays.TiledSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.tiledslicer class method)": [[401, "nilearn.plotting.displays.TiledSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.tiledslicer class method)": [[401, "nilearn.plotting.displays.TiledSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.tiledslicer method)": [[401, "nilearn.plotting.displays.TiledSlicer.savefig"]], "title() (nilearn.plotting.displays.tiledslicer method)": [[401, "nilearn.plotting.displays.TiledSlicer.title"]], "xprojector (class in nilearn.plotting.displays)": [[402, "nilearn.plotting.displays.XProjector"]], "__init__() (nilearn.plotting.displays.xprojector method)": [[402, "nilearn.plotting.displays.XProjector.__init__"]], "add_contours() (nilearn.plotting.displays.xprojector method)": [[402, "nilearn.plotting.displays.XProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.xprojector method)": [[402, "nilearn.plotting.displays.XProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.xprojector method)": [[402, "nilearn.plotting.displays.XProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.xprojector method)": [[402, "nilearn.plotting.displays.XProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.xprojector method)": [[402, "nilearn.plotting.displays.XProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.xprojector method)": [[402, "nilearn.plotting.displays.XProjector.annotate"]], "black_bg (nilearn.plotting.displays.xprojector property)": [[402, "nilearn.plotting.displays.XProjector.black_bg"]], "brain_color (nilearn.plotting.displays.xprojector property)": [[402, "nilearn.plotting.displays.XProjector.brain_color"]], "close() (nilearn.plotting.displays.xprojector method)": [[402, "nilearn.plotting.displays.XProjector.close"]], "draw_cross() (nilearn.plotting.displays.xprojector method)": [[402, "nilearn.plotting.displays.XProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xprojector class method)": [[402, "nilearn.plotting.displays.XProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xprojector class method)": [[402, "nilearn.plotting.displays.XProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.xprojector method)": [[402, "nilearn.plotting.displays.XProjector.savefig"]], "title() (nilearn.plotting.displays.xprojector method)": [[402, "nilearn.plotting.displays.XProjector.title"]], "xslicer (class in nilearn.plotting.displays)": [[403, "nilearn.plotting.displays.XSlicer"]], "__init__() (nilearn.plotting.displays.xslicer method)": [[403, "nilearn.plotting.displays.XSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.xslicer method)": [[403, "nilearn.plotting.displays.XSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.xslicer method)": [[403, "nilearn.plotting.displays.XSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.xslicer method)": [[403, "nilearn.plotting.displays.XSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.xslicer method)": [[403, "nilearn.plotting.displays.XSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.xslicer method)": [[403, "nilearn.plotting.displays.XSlicer.annotate"]], "black_bg (nilearn.plotting.displays.xslicer property)": [[403, "nilearn.plotting.displays.XSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.xslicer property)": [[403, "nilearn.plotting.displays.XSlicer.brain_color"]], "close() (nilearn.plotting.displays.xslicer method)": [[403, "nilearn.plotting.displays.XSlicer.close"]], "draw_cross() (nilearn.plotting.displays.xslicer method)": [[403, "nilearn.plotting.displays.XSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xslicer class method)": [[403, "nilearn.plotting.displays.XSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xslicer class method)": [[403, "nilearn.plotting.displays.XSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.xslicer method)": [[403, "nilearn.plotting.displays.XSlicer.savefig"]], "title() (nilearn.plotting.displays.xslicer method)": [[403, "nilearn.plotting.displays.XSlicer.title"]], "xzprojector (class in nilearn.plotting.displays)": [[404, "nilearn.plotting.displays.XZProjector"]], "__init__() (nilearn.plotting.displays.xzprojector method)": [[404, "nilearn.plotting.displays.XZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.xzprojector method)": [[404, "nilearn.plotting.displays.XZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.xzprojector method)": [[404, "nilearn.plotting.displays.XZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.xzprojector method)": [[404, "nilearn.plotting.displays.XZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.xzprojector method)": [[404, "nilearn.plotting.displays.XZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.xzprojector method)": [[404, "nilearn.plotting.displays.XZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.xzprojector method)": [[404, "nilearn.plotting.displays.XZProjector.annotate"]], "black_bg (nilearn.plotting.displays.xzprojector property)": [[404, "nilearn.plotting.displays.XZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.xzprojector property)": [[404, "nilearn.plotting.displays.XZProjector.brain_color"]], "close() (nilearn.plotting.displays.xzprojector method)": [[404, "nilearn.plotting.displays.XZProjector.close"]], "draw_cross() (nilearn.plotting.displays.xzprojector method)": [[404, "nilearn.plotting.displays.XZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xzprojector class method)": [[404, "nilearn.plotting.displays.XZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xzprojector class method)": [[404, "nilearn.plotting.displays.XZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.xzprojector method)": [[404, "nilearn.plotting.displays.XZProjector.savefig"]], "title() (nilearn.plotting.displays.xzprojector method)": [[404, "nilearn.plotting.displays.XZProjector.title"]], "xzslicer (class in nilearn.plotting.displays)": [[405, "nilearn.plotting.displays.XZSlicer"]], "__init__() (nilearn.plotting.displays.xzslicer method)": [[405, "nilearn.plotting.displays.XZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.xzslicer method)": [[405, "nilearn.plotting.displays.XZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.xzslicer method)": [[405, "nilearn.plotting.displays.XZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.xzslicer method)": [[405, "nilearn.plotting.displays.XZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.xzslicer method)": [[405, "nilearn.plotting.displays.XZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.xzslicer method)": [[405, "nilearn.plotting.displays.XZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.xzslicer property)": [[405, "nilearn.plotting.displays.XZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.xzslicer property)": [[405, "nilearn.plotting.displays.XZSlicer.brain_color"]], "close() (nilearn.plotting.displays.xzslicer method)": [[405, "nilearn.plotting.displays.XZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.xzslicer method)": [[405, "nilearn.plotting.displays.XZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xzslicer class method)": [[405, "nilearn.plotting.displays.XZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xzslicer class method)": [[405, "nilearn.plotting.displays.XZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.xzslicer method)": [[405, "nilearn.plotting.displays.XZSlicer.savefig"]], "title() (nilearn.plotting.displays.xzslicer method)": [[405, "nilearn.plotting.displays.XZSlicer.title"]], "yprojector (class in nilearn.plotting.displays)": [[406, "nilearn.plotting.displays.YProjector"]], "__init__() (nilearn.plotting.displays.yprojector method)": [[406, "nilearn.plotting.displays.YProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yprojector method)": [[406, "nilearn.plotting.displays.YProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yprojector method)": [[406, "nilearn.plotting.displays.YProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yprojector method)": [[406, "nilearn.plotting.displays.YProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yprojector method)": [[406, "nilearn.plotting.displays.YProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yprojector method)": [[406, "nilearn.plotting.displays.YProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yprojector method)": [[406, "nilearn.plotting.displays.YProjector.annotate"]], "black_bg (nilearn.plotting.displays.yprojector property)": [[406, "nilearn.plotting.displays.YProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yprojector property)": [[406, "nilearn.plotting.displays.YProjector.brain_color"]], "close() (nilearn.plotting.displays.yprojector method)": [[406, "nilearn.plotting.displays.YProjector.close"]], "draw_cross() (nilearn.plotting.displays.yprojector method)": [[406, "nilearn.plotting.displays.YProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yprojector class method)": [[406, "nilearn.plotting.displays.YProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yprojector class method)": [[406, "nilearn.plotting.displays.YProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yprojector method)": [[406, "nilearn.plotting.displays.YProjector.savefig"]], "title() (nilearn.plotting.displays.yprojector method)": [[406, "nilearn.plotting.displays.YProjector.title"]], "yslicer (class in nilearn.plotting.displays)": [[407, "nilearn.plotting.displays.YSlicer"]], "__init__() (nilearn.plotting.displays.yslicer method)": [[407, "nilearn.plotting.displays.YSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yslicer method)": [[407, "nilearn.plotting.displays.YSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yslicer method)": [[407, "nilearn.plotting.displays.YSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yslicer method)": [[407, "nilearn.plotting.displays.YSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yslicer method)": [[407, "nilearn.plotting.displays.YSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yslicer method)": [[407, "nilearn.plotting.displays.YSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yslicer property)": [[407, "nilearn.plotting.displays.YSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yslicer property)": [[407, "nilearn.plotting.displays.YSlicer.brain_color"]], "close() (nilearn.plotting.displays.yslicer method)": [[407, "nilearn.plotting.displays.YSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yslicer method)": [[407, "nilearn.plotting.displays.YSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yslicer class method)": [[407, "nilearn.plotting.displays.YSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yslicer class method)": [[407, "nilearn.plotting.displays.YSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yslicer method)": [[407, "nilearn.plotting.displays.YSlicer.savefig"]], "title() (nilearn.plotting.displays.yslicer method)": [[407, "nilearn.plotting.displays.YSlicer.title"]], "yxprojector (class in nilearn.plotting.displays)": [[408, "nilearn.plotting.displays.YXProjector"]], "__init__() (nilearn.plotting.displays.yxprojector method)": [[408, "nilearn.plotting.displays.YXProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yxprojector method)": [[408, "nilearn.plotting.displays.YXProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yxprojector method)": [[408, "nilearn.plotting.displays.YXProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yxprojector method)": [[408, "nilearn.plotting.displays.YXProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yxprojector method)": [[408, "nilearn.plotting.displays.YXProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yxprojector method)": [[408, "nilearn.plotting.displays.YXProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yxprojector method)": [[408, "nilearn.plotting.displays.YXProjector.annotate"]], "black_bg (nilearn.plotting.displays.yxprojector property)": [[408, "nilearn.plotting.displays.YXProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yxprojector property)": [[408, "nilearn.plotting.displays.YXProjector.brain_color"]], "close() (nilearn.plotting.displays.yxprojector method)": [[408, "nilearn.plotting.displays.YXProjector.close"]], "draw_cross() (nilearn.plotting.displays.yxprojector method)": [[408, "nilearn.plotting.displays.YXProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yxprojector class method)": [[408, "nilearn.plotting.displays.YXProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yxprojector class method)": [[408, "nilearn.plotting.displays.YXProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yxprojector method)": [[408, "nilearn.plotting.displays.YXProjector.savefig"]], "title() (nilearn.plotting.displays.yxprojector method)": [[408, "nilearn.plotting.displays.YXProjector.title"]], "yxslicer (class in nilearn.plotting.displays)": [[409, "nilearn.plotting.displays.YXSlicer"]], "__init__() (nilearn.plotting.displays.yxslicer method)": [[409, "nilearn.plotting.displays.YXSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yxslicer method)": [[409, "nilearn.plotting.displays.YXSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yxslicer method)": [[409, "nilearn.plotting.displays.YXSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yxslicer method)": [[409, "nilearn.plotting.displays.YXSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yxslicer method)": [[409, "nilearn.plotting.displays.YXSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yxslicer method)": [[409, "nilearn.plotting.displays.YXSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yxslicer property)": [[409, "nilearn.plotting.displays.YXSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yxslicer property)": [[409, "nilearn.plotting.displays.YXSlicer.brain_color"]], "close() (nilearn.plotting.displays.yxslicer method)": [[409, "nilearn.plotting.displays.YXSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yxslicer method)": [[409, "nilearn.plotting.displays.YXSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yxslicer class method)": [[409, "nilearn.plotting.displays.YXSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yxslicer class method)": [[409, "nilearn.plotting.displays.YXSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yxslicer method)": [[409, "nilearn.plotting.displays.YXSlicer.savefig"]], "title() (nilearn.plotting.displays.yxslicer method)": [[409, "nilearn.plotting.displays.YXSlicer.title"]], "yzprojector (class in nilearn.plotting.displays)": [[410, "nilearn.plotting.displays.YZProjector"]], "__init__() (nilearn.plotting.displays.yzprojector method)": [[410, "nilearn.plotting.displays.YZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yzprojector method)": [[410, "nilearn.plotting.displays.YZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yzprojector method)": [[410, "nilearn.plotting.displays.YZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yzprojector method)": [[410, "nilearn.plotting.displays.YZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yzprojector method)": [[410, "nilearn.plotting.displays.YZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yzprojector method)": [[410, "nilearn.plotting.displays.YZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yzprojector method)": [[410, "nilearn.plotting.displays.YZProjector.annotate"]], "black_bg (nilearn.plotting.displays.yzprojector property)": [[410, "nilearn.plotting.displays.YZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yzprojector property)": [[410, "nilearn.plotting.displays.YZProjector.brain_color"]], "close() (nilearn.plotting.displays.yzprojector method)": [[410, "nilearn.plotting.displays.YZProjector.close"]], "draw_cross() (nilearn.plotting.displays.yzprojector method)": [[410, "nilearn.plotting.displays.YZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yzprojector class method)": [[410, "nilearn.plotting.displays.YZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yzprojector class method)": [[410, "nilearn.plotting.displays.YZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yzprojector method)": [[410, "nilearn.plotting.displays.YZProjector.savefig"]], "title() (nilearn.plotting.displays.yzprojector method)": [[410, "nilearn.plotting.displays.YZProjector.title"]], "yzslicer (class in nilearn.plotting.displays)": [[411, "nilearn.plotting.displays.YZSlicer"]], "__init__() (nilearn.plotting.displays.yzslicer method)": [[411, "nilearn.plotting.displays.YZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yzslicer method)": [[411, "nilearn.plotting.displays.YZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yzslicer method)": [[411, "nilearn.plotting.displays.YZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yzslicer method)": [[411, "nilearn.plotting.displays.YZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yzslicer method)": [[411, "nilearn.plotting.displays.YZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yzslicer method)": [[411, "nilearn.plotting.displays.YZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yzslicer property)": [[411, "nilearn.plotting.displays.YZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yzslicer property)": [[411, "nilearn.plotting.displays.YZSlicer.brain_color"]], "close() (nilearn.plotting.displays.yzslicer method)": [[411, "nilearn.plotting.displays.YZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yzslicer method)": [[411, "nilearn.plotting.displays.YZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yzslicer class method)": [[411, "nilearn.plotting.displays.YZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yzslicer class method)": [[411, "nilearn.plotting.displays.YZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yzslicer method)": [[411, "nilearn.plotting.displays.YZSlicer.savefig"]], "title() (nilearn.plotting.displays.yzslicer method)": [[411, "nilearn.plotting.displays.YZSlicer.title"]], "zprojector (class in nilearn.plotting.displays)": [[412, "nilearn.plotting.displays.ZProjector"]], "__init__() (nilearn.plotting.displays.zprojector method)": [[412, "nilearn.plotting.displays.ZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.zprojector method)": [[412, "nilearn.plotting.displays.ZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.zprojector method)": [[412, "nilearn.plotting.displays.ZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.zprojector method)": [[412, "nilearn.plotting.displays.ZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.zprojector method)": [[412, "nilearn.plotting.displays.ZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.zprojector method)": [[412, "nilearn.plotting.displays.ZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.zprojector method)": [[412, "nilearn.plotting.displays.ZProjector.annotate"]], "black_bg (nilearn.plotting.displays.zprojector property)": [[412, "nilearn.plotting.displays.ZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.zprojector property)": [[412, "nilearn.plotting.displays.ZProjector.brain_color"]], "close() (nilearn.plotting.displays.zprojector method)": [[412, "nilearn.plotting.displays.ZProjector.close"]], "draw_cross() (nilearn.plotting.displays.zprojector method)": [[412, "nilearn.plotting.displays.ZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.zprojector class method)": [[412, "nilearn.plotting.displays.ZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.zprojector class method)": [[412, "nilearn.plotting.displays.ZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.zprojector method)": [[412, "nilearn.plotting.displays.ZProjector.savefig"]], "title() (nilearn.plotting.displays.zprojector method)": [[412, "nilearn.plotting.displays.ZProjector.title"]], "zslicer (class in nilearn.plotting.displays)": [[413, "nilearn.plotting.displays.ZSlicer"]], "__init__() (nilearn.plotting.displays.zslicer method)": [[413, "nilearn.plotting.displays.ZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.zslicer method)": [[413, "nilearn.plotting.displays.ZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.zslicer method)": [[413, "nilearn.plotting.displays.ZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.zslicer method)": [[413, "nilearn.plotting.displays.ZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.zslicer method)": [[413, "nilearn.plotting.displays.ZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.zslicer method)": [[413, "nilearn.plotting.displays.ZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.zslicer property)": [[413, "nilearn.plotting.displays.ZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.zslicer property)": [[413, "nilearn.plotting.displays.ZSlicer.brain_color"]], "close() (nilearn.plotting.displays.zslicer method)": [[413, "nilearn.plotting.displays.ZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.zslicer method)": [[413, "nilearn.plotting.displays.ZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.zslicer class method)": [[413, "nilearn.plotting.displays.ZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.zslicer class method)": [[413, "nilearn.plotting.displays.ZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.zslicer method)": [[413, "nilearn.plotting.displays.ZSlicer.savefig"]], "title() (nilearn.plotting.displays.zslicer method)": [[413, "nilearn.plotting.displays.ZSlicer.title"]], "get_projector() (in module nilearn.plotting.displays)": [[414, "nilearn.plotting.displays.get_projector"]], "get_slicer() (in module nilearn.plotting.displays)": [[415, "nilearn.plotting.displays.get_slicer"]], "find_cut_slices() (in module nilearn.plotting)": [[416, "nilearn.plotting.find_cut_slices"]], "find_parcellation_cut_coords() (in module nilearn.plotting)": [[417, "nilearn.plotting.find_parcellation_cut_coords"]], "find_probabilistic_atlas_cut_coords() (in module nilearn.plotting)": [[418, "nilearn.plotting.find_probabilistic_atlas_cut_coords"]], "find_xyz_cut_coords() (in module nilearn.plotting)": [[419, "nilearn.plotting.find_xyz_cut_coords"]], "plot_anat() (in module nilearn.plotting)": [[420, "nilearn.plotting.plot_anat"]], "plot_carpet() (in module nilearn.plotting)": [[421, "nilearn.plotting.plot_carpet"]], "plot_connectome() (in module nilearn.plotting)": [[422, "nilearn.plotting.plot_connectome"]], "plot_contrast_matrix() (in module nilearn.plotting)": [[423, "nilearn.plotting.plot_contrast_matrix"]], "plot_design_matrix() (in module nilearn.plotting)": [[424, "nilearn.plotting.plot_design_matrix"]], "plot_epi() (in module nilearn.plotting)": [[425, "nilearn.plotting.plot_epi"]], "plot_event() (in module nilearn.plotting)": [[426, "nilearn.plotting.plot_event"]], "plot_glass_brain() (in module nilearn.plotting)": [[427, "nilearn.plotting.plot_glass_brain"]], "plot_img() (in module nilearn.plotting)": [[428, "nilearn.plotting.plot_img"]], "plot_img_comparison() (in module nilearn.plotting)": [[429, "nilearn.plotting.plot_img_comparison"]], "plot_img_on_surf() (in module nilearn.plotting)": [[430, "nilearn.plotting.plot_img_on_surf"]], "plot_markers() (in module nilearn.plotting)": [[431, "nilearn.plotting.plot_markers"]], "plot_matrix() (in module nilearn.plotting)": [[432, "nilearn.plotting.plot_matrix"]], "plot_prob_atlas() (in module nilearn.plotting)": [[433, "nilearn.plotting.plot_prob_atlas"]], "plot_roi() (in module nilearn.plotting)": [[434, "nilearn.plotting.plot_roi"]], "plot_stat_map() (in module nilearn.plotting)": [[435, "nilearn.plotting.plot_stat_map"]], "plot_surf() (in module nilearn.plotting)": [[436, "nilearn.plotting.plot_surf"]], "plot_surf_contours() (in module nilearn.plotting)": [[437, "nilearn.plotting.plot_surf_contours"]], "plot_surf_roi() (in module nilearn.plotting)": [[438, "nilearn.plotting.plot_surf_roi"]], "plot_surf_stat_map() (in module nilearn.plotting)": [[439, "nilearn.plotting.plot_surf_stat_map"]], "show() (in module nilearn.plotting)": [[440, "nilearn.plotting.show"]], "view_connectome() (in module nilearn.plotting)": [[441, "nilearn.plotting.view_connectome"]], "view_img() (in module nilearn.plotting)": [[442, "nilearn.plotting.view_img"]], "view_img_on_surf() (in module nilearn.plotting)": [[443, "nilearn.plotting.view_img_on_surf"]], "view_markers() (in module nilearn.plotting)": [[444, "nilearn.plotting.view_markers"]], "view_surf() (in module nilearn.plotting)": [[445, "nilearn.plotting.view_surf"]], "hierarchicalkmeans (class in nilearn.regions)": [[446, "nilearn.regions.HierarchicalKMeans"]], "__init__() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.__init__"]], "fit() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.fit"]], "fit_predict() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.fit_predict"]], "fit_transform() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.fit_transform"]], "get_metadata_routing() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.get_metadata_routing"]], "get_params() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.get_params"]], "inverse_transform() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.inverse_transform"]], "set_inverse_transform_request() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.set_inverse_transform_request"]], "set_output() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.set_output"]], "set_params() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.set_params"]], "transform() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.transform"]], "parcellations (class in nilearn.regions)": [[447, "nilearn.regions.Parcellations"]], "valid_methods (nilearn.regions.parcellations attribute)": [[447, "nilearn.regions.Parcellations.VALID_METHODS"]], "__init__() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.__init__"]], "fit() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.fit"]], "fit_transform() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.fit_transform"]], "get_metadata_routing() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.get_metadata_routing"]], "get_params() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.get_params"]], "inverse_transform() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.inverse_transform"]], "score() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.score"]], "set_fit_request() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.set_fit_request"]], "set_inverse_transform_request() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.set_inverse_transform_request"]], "set_output() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.set_output"]], "set_params() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.set_params"]], "set_score_request() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.set_score_request"]], "set_transform_request() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.set_transform_request"]], "transform() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.transform"]], "rena (class in nilearn.regions)": [[448, "nilearn.regions.ReNA"]], "__init__() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.__init__"]], "fit() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.fit"]], "fit_predict() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.fit_predict"]], "fit_transform() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.fit_transform"]], "get_metadata_routing() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.get_metadata_routing"]], "get_params() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.get_params"]], "inverse_transform() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.inverse_transform"]], "set_inverse_transform_request() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.set_inverse_transform_request"]], "set_output() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.set_output"]], "set_params() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.set_params"]], "transform() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.transform"]], "regionextractor (class in nilearn.regions)": [[449, "nilearn.regions.RegionExtractor"]], "__init__() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.__init__"]], "fit() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.fit"]], "fit_transform() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.fit_transform"]], "generate_report() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.generate_report"]], "get_metadata_routing() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.get_metadata_routing"]], "get_params() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.get_params"]], "inverse_transform() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.inverse_transform"]], "set_fit_request() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.set_fit_request"]], "set_inverse_transform_request() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.set_inverse_transform_request"]], "set_output() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.set_output"]], "set_params() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.set_params"]], "set_transform_request() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.set_transform_request"]], "transform() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.transform"]], "transform_single_imgs() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.transform_single_imgs"]], "connected_label_regions() (in module nilearn.regions)": [[450, "nilearn.regions.connected_label_regions"]], "connected_regions() (in module nilearn.regions)": [[451, "nilearn.regions.connected_regions"]], "img_to_signals_labels() (in module nilearn.regions)": [[452, "nilearn.regions.img_to_signals_labels"]], "img_to_signals_maps() (in module nilearn.regions)": [[453, "nilearn.regions.img_to_signals_maps"]], "recursive_neighbor_agglomeration() (in module nilearn.regions)": [[454, "nilearn.regions.recursive_neighbor_agglomeration"]], "signals_to_img_labels() (in module nilearn.regions)": [[455, "nilearn.regions.signals_to_img_labels"]], "signals_to_img_maps() (in module nilearn.regions)": [[456, "nilearn.regions.signals_to_img_maps"]], "htmlreport (class in nilearn.reporting)": [[457, "nilearn.reporting.HTMLReport"]], "__init__() (nilearn.reporting.htmlreport method)": [[457, "nilearn.reporting.HTMLReport.__init__"]], "get_iframe() (nilearn.reporting.htmlreport method)": [[457, "nilearn.reporting.HTMLReport.get_iframe"]], "get_standalone() (nilearn.reporting.htmlreport method)": [[457, "nilearn.reporting.HTMLReport.get_standalone"]], "open_in_browser() (nilearn.reporting.htmlreport method)": [[457, "nilearn.reporting.HTMLReport.open_in_browser"]], "resize() (nilearn.reporting.htmlreport method)": [[457, "nilearn.reporting.HTMLReport.resize"]], "save_as_html() (nilearn.reporting.htmlreport method)": [[457, "nilearn.reporting.HTMLReport.save_as_html"]], "get_clusters_table() (in module nilearn.reporting)": [[458, "nilearn.reporting.get_clusters_table"]], "make_glm_report() (in module nilearn.reporting)": [[459, "nilearn.reporting.make_glm_report"]], "butterworth() (in module nilearn.signal)": [[460, "nilearn.signal.butterworth"]], "clean() (in module nilearn.signal)": [[461, "nilearn.signal.clean"]], "high_variance_confounds() (in module nilearn.signal)": [[462, "nilearn.signal.high_variance_confounds"]], "load_surf_data() (in module nilearn.surface)": [[463, "nilearn.surface.load_surf_data"]], "load_surf_mesh() (in module nilearn.surface)": [[464, "nilearn.surface.load_surf_mesh"]], "vol_to_surf() (in module nilearn.surface)": [[465, "nilearn.surface.vol_to_surf"]], "nilearn.glm": [[468, "module-nilearn.glm"]], "nilearn.glm.first_level": [[468, "module-nilearn.glm.first_level"]], "nilearn.glm.second_level": [[468, "module-nilearn.glm.second_level"]], "nilearn.image": [[469, "module-nilearn.image"]], "nilearn.interfaces": [[471, "module-nilearn.interfaces"]], "nilearn.interfaces.bids": [[471, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.fmriprep": [[471, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fsl": [[471, "module-nilearn.interfaces.fsl"]], "nilearn.maskers": [[472, "module-nilearn.maskers"]], "nilearn.masking": [[473, "module-nilearn.masking"]], "nilearn.mass_univariate": [[474, "module-nilearn.mass_univariate"]], "nilearn.plotting": [[475, "module-nilearn.plotting"]], "nilearn.plotting.displays": [[475, "module-nilearn.plotting.displays"]], "nilearn.regions": [[476, "module-nilearn.regions"]], "nilearn.reporting": [[477, "module-nilearn.reporting"]], "nilearn.signal": [[478, "module-nilearn.signal"]], "nilearn.surface": [[479, "module-nilearn.surface"]]}})