Search.setIndex({"docnames": ["authors", "auto_examples/00_tutorials/index", "auto_examples/00_tutorials/plot_3d_and_4d_niimg", "auto_examples/00_tutorials/plot_decoding_tutorial", "auto_examples/00_tutorials/plot_nilearn_101", "auto_examples/00_tutorials/plot_python_101", "auto_examples/00_tutorials/plot_single_subject_single_run", "auto_examples/00_tutorials/sg_execution_times", "auto_examples/01_plotting/index", "auto_examples/01_plotting/plot_3d_map_to_surface_projection", "auto_examples/01_plotting/plot_atlas", "auto_examples/01_plotting/plot_carpet", "auto_examples/01_plotting/plot_colormaps", "auto_examples/01_plotting/plot_demo_glass_brain", "auto_examples/01_plotting/plot_demo_glass_brain_extensive", "auto_examples/01_plotting/plot_demo_more_plotting", "auto_examples/01_plotting/plot_demo_plotting", "auto_examples/01_plotting/plot_dim_plotting", "auto_examples/01_plotting/plot_haxby_masks", "auto_examples/01_plotting/plot_multiscale_parcellations", "auto_examples/01_plotting/plot_overlay", "auto_examples/01_plotting/plot_prob_atlas", "auto_examples/01_plotting/plot_surf_atlas", "auto_examples/01_plotting/plot_surf_stat_map", "auto_examples/01_plotting/plot_surface_projection_strategies", "auto_examples/01_plotting/plot_visualization", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats", "auto_examples/01_plotting/sg_execution_times", "auto_examples/02_decoding/index", "auto_examples/02_decoding/plot_haxby_anova_svm", "auto_examples/02_decoding/plot_haxby_different_estimators", "auto_examples/02_decoding/plot_haxby_frem", "auto_examples/02_decoding/plot_haxby_full_analysis", "auto_examples/02_decoding/plot_haxby_glm_decoding", "auto_examples/02_decoding/plot_haxby_grid_search", "auto_examples/02_decoding/plot_haxby_multiclass", "auto_examples/02_decoding/plot_haxby_searchlight", "auto_examples/02_decoding/plot_haxby_searchlight_surface", "auto_examples/02_decoding/plot_haxby_stimuli", "auto_examples/02_decoding/plot_mixed_gambles_frem", "auto_examples/02_decoding/plot_miyawaki_encoding", "auto_examples/02_decoding/plot_miyawaki_reconstruction", "auto_examples/02_decoding/plot_oasis_vbm", "auto_examples/02_decoding/plot_oasis_vbm_space_net", "auto_examples/02_decoding/plot_simulated_data", "auto_examples/02_decoding/sg_execution_times", "auto_examples/03_connectivity/index", "auto_examples/03_connectivity/plot_atlas_comparison", "auto_examples/03_connectivity/plot_compare_decomposition", "auto_examples/03_connectivity/plot_data_driven_parcellations", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps", "auto_examples/03_connectivity/plot_group_level_connectivity", "auto_examples/03_connectivity/plot_inverse_covariance_connectome", "auto_examples/03_connectivity/plot_multi_subject_connectome", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation", "auto_examples/03_connectivity/plot_signal_extraction", "auto_examples/03_connectivity/plot_simulated_connectome", "auto_examples/03_connectivity/plot_sphere_based_connectome", "auto_examples/03_connectivity/sg_execution_times", "auto_examples/04_glm_first_level/index", "auto_examples/04_glm_first_level/plot_adhd_dmn", "auto_examples/04_glm_first_level/plot_bids_features", "auto_examples/04_glm_first_level/plot_design_matrix", "auto_examples/04_glm_first_level/plot_fiac_analysis", "auto_examples/04_glm_first_level/plot_fir_model", "auto_examples/04_glm_first_level/plot_first_level_details", "auto_examples/04_glm_first_level/plot_fixed_effects", "auto_examples/04_glm_first_level/plot_hrf", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis", "auto_examples/04_glm_first_level/plot_predictions_residuals", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces", "auto_examples/04_glm_first_level/plot_write_events_file", "auto_examples/04_glm_first_level/sg_execution_times", "auto_examples/05_glm_second_level/index", "auto_examples/05_glm_second_level/plot_oasis", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels", "auto_examples/05_glm_second_level/plot_second_level_association_test", "auto_examples/05_glm_second_level/plot_second_level_design_matrix", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test", "auto_examples/05_glm_second_level/plot_thresholding", "auto_examples/05_glm_second_level/sg_execution_times", "auto_examples/06_manipulating_images/index", "auto_examples/06_manipulating_images/plot_affine_transformation", "auto_examples/06_manipulating_images/plot_compare_mean_image", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps", "auto_examples/06_manipulating_images/plot_mask_computation", "auto_examples/06_manipulating_images/plot_negate_image", "auto_examples/06_manipulating_images/plot_nifti_labels_simple", "auto_examples/06_manipulating_images/plot_nifti_simple", "auto_examples/06_manipulating_images/plot_resample_to_template", "auto_examples/06_manipulating_images/plot_roi_extraction", "auto_examples/06_manipulating_images/plot_smooth_mean_image", "auto_examples/06_manipulating_images/sg_execution_times", "auto_examples/07_advanced/index", "auto_examples/07_advanced/plot_advanced_decoding_scikit", "auto_examples/07_advanced/plot_age_group_prediction_cross_val", "auto_examples/07_advanced/plot_beta_series", "auto_examples/07_advanced/plot_bids_analysis", "auto_examples/07_advanced/plot_haxby_mass_univariate", "auto_examples/07_advanced/plot_ica_neurovault", "auto_examples/07_advanced/plot_ica_resting_state", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods", "auto_examples/07_advanced/plot_localizer_simple_analysis", "auto_examples/07_advanced/plot_neurovault_meta_analysis", "auto_examples/07_advanced/plot_surface_bids_analysis", "auto_examples/07_advanced/sg_execution_times", "auto_examples/index", "bibliography", "building_blocks/index", "building_blocks/manual_pipeline", "building_blocks/neurovault", "changes/0.1.0", "changes/0.1.1", "changes/0.1.2", "changes/0.1.3", "changes/0.1.4", "changes/0.2.0", "changes/0.2.1", "changes/0.2.2", "changes/0.2.3", "changes/0.2.4", "changes/0.2.5", "changes/0.2.6", "changes/0.3.0", "changes/0.3.1", "changes/0.4.0", "changes/0.4.1", "changes/0.4.2", "changes/0.5.0", "changes/0.5.1", "changes/0.5.2", "changes/0.6.0", "changes/0.6.1", "changes/0.6.2", "changes/0.7.0", "changes/0.7.1", "changes/0.8.0", "changes/0.8.1", "changes/0.9.0", "changes/0.9.1", "changes/0.9.2", "changes/latest", "changes/names", "changes/whats_new", "connectivity/connectome_extraction", "connectivity/functional_connectomes", "connectivity/index", "connectivity/parcellating", "connectivity/region_extraction", "connectivity/resting_state_networks", "decoding/decoding_intro", "decoding/estimator_choice", "decoding/frem", "decoding/going_further", "decoding/index", "decoding/searchlight", "decoding/space_net", "developers/group_sparse_covariance", "development", "glm/first_level_model", "glm/glm_intro", "glm/index", "glm/second_level_model", "glossary", "index", "introduction", "maintenance", "manipulating_images/index", "manipulating_images/input_output", "manipulating_images/manipulating_images", "manipulating_images/masker_objects", "modules/connectome", "modules/datasets", "modules/decoding", "modules/decomposition", "modules/generated/nilearn.connectome.ConnectivityMeasure", "modules/generated/nilearn.connectome.GroupSparseCovariance", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV", "modules/generated/nilearn.connectome.cov_to_corr", "modules/generated/nilearn.connectome.group_sparse_covariance", "modules/generated/nilearn.connectome.prec_to_partial", "modules/generated/nilearn.connectome.sym_matrix_to_vec", "modules/generated/nilearn.connectome.vec_to_sym_matrix", "modules/generated/nilearn.datasets.fetch_abide_pcp", "modules/generated/nilearn.datasets.fetch_adhd", "modules/generated/nilearn.datasets.fetch_atlas_aal", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009", "modules/generated/nilearn.datasets.fetch_atlas_difumo", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford", "modules/generated/nilearn.datasets.fetch_atlas_juelich", "modules/generated/nilearn.datasets.fetch_atlas_msdl", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux", "modules/generated/nilearn.datasets.fetch_atlas_talairach", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010", "modules/generated/nilearn.datasets.fetch_coords_power_2011", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018", "modules/generated/nilearn.datasets.fetch_development_fmri", "modules/generated/nilearn.datasets.fetch_ds000030_urls", "modules/generated/nilearn.datasets.fetch_fiac_first_level", "modules/generated/nilearn.datasets.fetch_haxby", "modules/generated/nilearn.datasets.fetch_icbm152_2009", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset", "modules/generated/nilearn.datasets.fetch_localizer_button_task", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task", "modules/generated/nilearn.datasets.fetch_localizer_contrasts", "modules/generated/nilearn.datasets.fetch_localizer_first_level", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats", "modules/generated/nilearn.datasets.fetch_mixed_gambles", "modules/generated/nilearn.datasets.fetch_miyawaki2008", "modules/generated/nilearn.datasets.fetch_neurovault", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task", "modules/generated/nilearn.datasets.fetch_neurovault_ids", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task", "modules/generated/nilearn.datasets.fetch_oasis_vbm", "modules/generated/nilearn.datasets.fetch_openneuro_dataset", "modules/generated/nilearn.datasets.fetch_openneuro_dataset_index", "modules/generated/nilearn.datasets.fetch_spm_auditory", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri", "modules/generated/nilearn.datasets.fetch_surf_fsaverage", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced", "modules/generated/nilearn.datasets.get_data_dirs", "modules/generated/nilearn.datasets.load_mni152_brain_mask", "modules/generated/nilearn.datasets.load_mni152_gm_mask", "modules/generated/nilearn.datasets.load_mni152_gm_template", "modules/generated/nilearn.datasets.load_mni152_template", "modules/generated/nilearn.datasets.load_mni152_wm_mask", "modules/generated/nilearn.datasets.load_mni152_wm_template", "modules/generated/nilearn.datasets.patch_openneuro_dataset", "modules/generated/nilearn.datasets.select_from_index", "modules/generated/nilearn.decoding.Decoder", "modules/generated/nilearn.decoding.DecoderRegressor", "modules/generated/nilearn.decoding.FREMClassifier", "modules/generated/nilearn.decoding.FREMRegressor", "modules/generated/nilearn.decoding.SearchLight", "modules/generated/nilearn.decoding.SpaceNetClassifier", "modules/generated/nilearn.decoding.SpaceNetRegressor", "modules/generated/nilearn.decomposition.CanICA", "modules/generated/nilearn.decomposition.DictLearning", "modules/generated/nilearn.glm.ARModel", "modules/generated/nilearn.glm.Contrast", "modules/generated/nilearn.glm.FContrastResults", "modules/generated/nilearn.glm.LikelihoodModelResults", "modules/generated/nilearn.glm.OLSModel", "modules/generated/nilearn.glm.RegressionResults", "modules/generated/nilearn.glm.SimpleRegressionResults", "modules/generated/nilearn.glm.TContrastResults", "modules/generated/nilearn.glm.cluster_level_inference", "modules/generated/nilearn.glm.compute_contrast", "modules/generated/nilearn.glm.compute_fixed_effects", "modules/generated/nilearn.glm.expression_to_contrast_vector", "modules/generated/nilearn.glm.fdr_threshold", "modules/generated/nilearn.glm.first_level.FirstLevelModel", "modules/generated/nilearn.glm.first_level.check_design_matrix", "modules/generated/nilearn.glm.first_level.compute_regressor", "modules/generated/nilearn.glm.first_level.first_level_from_bids", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative", "modules/generated/nilearn.glm.first_level.glover_hrf", "modules/generated/nilearn.glm.first_level.glover_time_derivative", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix", "modules/generated/nilearn.glm.first_level.mean_scaling", "modules/generated/nilearn.glm.first_level.run_glm", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative", "modules/generated/nilearn.glm.first_level.spm_hrf", "modules/generated/nilearn.glm.first_level.spm_time_derivative", "modules/generated/nilearn.glm.second_level.SecondLevelModel", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix", "modules/generated/nilearn.glm.second_level.non_parametric_inference", "modules/generated/nilearn.glm.threshold_stats_img", "modules/generated/nilearn.image.binarize_img", "modules/generated/nilearn.image.clean_img", "modules/generated/nilearn.image.concat_imgs", "modules/generated/nilearn.image.coord_transform", "modules/generated/nilearn.image.copy_img", "modules/generated/nilearn.image.crop_img", "modules/generated/nilearn.image.get_data", "modules/generated/nilearn.image.high_variance_confounds", "modules/generated/nilearn.image.index_img", "modules/generated/nilearn.image.iter_img", "modules/generated/nilearn.image.largest_connected_component_img", "modules/generated/nilearn.image.load_img", "modules/generated/nilearn.image.math_img", "modules/generated/nilearn.image.mean_img", "modules/generated/nilearn.image.new_img_like", "modules/generated/nilearn.image.reorder_img", "modules/generated/nilearn.image.resample_img", "modules/generated/nilearn.image.resample_to_img", "modules/generated/nilearn.image.smooth_img", "modules/generated/nilearn.image.swap_img_hemispheres", "modules/generated/nilearn.image.threshold_img", "modules/generated/nilearn.interfaces.bids.get_bids_files", "modules/generated/nilearn.interfaces.bids.parse_bids_filename", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids", "modules/generated/nilearn.interfaces.fmriprep.load_confounds", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat", "modules/generated/nilearn.maskers.BaseMasker", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker", "modules/generated/nilearn.maskers.MultiNiftiMasker", "modules/generated/nilearn.maskers.NiftiLabelsMasker", "modules/generated/nilearn.maskers.NiftiMapsMasker", "modules/generated/nilearn.maskers.NiftiMasker", "modules/generated/nilearn.maskers.NiftiSpheresMasker", "modules/generated/nilearn.masking.apply_mask", "modules/generated/nilearn.masking.compute_background_mask", "modules/generated/nilearn.masking.compute_brain_mask", "modules/generated/nilearn.masking.compute_epi_mask", "modules/generated/nilearn.masking.compute_multi_background_mask", "modules/generated/nilearn.masking.compute_multi_brain_mask", "modules/generated/nilearn.masking.compute_multi_epi_mask", "modules/generated/nilearn.masking.intersect_masks", "modules/generated/nilearn.masking.unmask", "modules/generated/nilearn.mass_univariate.permuted_ols", "modules/generated/nilearn.plotting.displays.BaseAxes", "modules/generated/nilearn.plotting.displays.BaseSlicer", "modules/generated/nilearn.plotting.displays.CutAxes", "modules/generated/nilearn.plotting.displays.GlassBrainAxes", "modules/generated/nilearn.plotting.displays.LProjector", "modules/generated/nilearn.plotting.displays.LRProjector", "modules/generated/nilearn.plotting.displays.LYRProjector", "modules/generated/nilearn.plotting.displays.LYRZProjector", "modules/generated/nilearn.plotting.displays.LZRProjector", "modules/generated/nilearn.plotting.displays.LZRYProjector", "modules/generated/nilearn.plotting.displays.MosaicSlicer", "modules/generated/nilearn.plotting.displays.OrthoProjector", "modules/generated/nilearn.plotting.displays.OrthoSlicer", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure", "modules/generated/nilearn.plotting.displays.RProjector", "modules/generated/nilearn.plotting.displays.TiledSlicer", "modules/generated/nilearn.plotting.displays.XProjector", "modules/generated/nilearn.plotting.displays.XSlicer", "modules/generated/nilearn.plotting.displays.XZProjector", "modules/generated/nilearn.plotting.displays.XZSlicer", "modules/generated/nilearn.plotting.displays.YProjector", "modules/generated/nilearn.plotting.displays.YSlicer", "modules/generated/nilearn.plotting.displays.YXProjector", "modules/generated/nilearn.plotting.displays.YXSlicer", "modules/generated/nilearn.plotting.displays.YZProjector", "modules/generated/nilearn.plotting.displays.YZSlicer", "modules/generated/nilearn.plotting.displays.ZProjector", "modules/generated/nilearn.plotting.displays.ZSlicer", "modules/generated/nilearn.plotting.displays.get_projector", "modules/generated/nilearn.plotting.displays.get_slicer", "modules/generated/nilearn.plotting.find_cut_slices", "modules/generated/nilearn.plotting.find_parcellation_cut_coords", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords", "modules/generated/nilearn.plotting.find_xyz_cut_coords", "modules/generated/nilearn.plotting.plot_anat", "modules/generated/nilearn.plotting.plot_carpet", "modules/generated/nilearn.plotting.plot_connectome", "modules/generated/nilearn.plotting.plot_contrast_matrix", "modules/generated/nilearn.plotting.plot_design_matrix", "modules/generated/nilearn.plotting.plot_epi", "modules/generated/nilearn.plotting.plot_event", "modules/generated/nilearn.plotting.plot_glass_brain", "modules/generated/nilearn.plotting.plot_img", "modules/generated/nilearn.plotting.plot_img_comparison", "modules/generated/nilearn.plotting.plot_img_on_surf", "modules/generated/nilearn.plotting.plot_markers", "modules/generated/nilearn.plotting.plot_matrix", "modules/generated/nilearn.plotting.plot_prob_atlas", "modules/generated/nilearn.plotting.plot_roi", "modules/generated/nilearn.plotting.plot_stat_map", "modules/generated/nilearn.plotting.plot_surf", "modules/generated/nilearn.plotting.plot_surf_contours", "modules/generated/nilearn.plotting.plot_surf_roi", "modules/generated/nilearn.plotting.plot_surf_stat_map", "modules/generated/nilearn.plotting.show", "modules/generated/nilearn.plotting.view_connectome", "modules/generated/nilearn.plotting.view_img", "modules/generated/nilearn.plotting.view_img_on_surf", "modules/generated/nilearn.plotting.view_markers", "modules/generated/nilearn.plotting.view_surf", "modules/generated/nilearn.regions.HierarchicalKMeans", "modules/generated/nilearn.regions.Parcellations", "modules/generated/nilearn.regions.ReNA", "modules/generated/nilearn.regions.RegionExtractor", "modules/generated/nilearn.regions.connected_label_regions", "modules/generated/nilearn.regions.connected_regions", "modules/generated/nilearn.regions.img_to_signals_labels", "modules/generated/nilearn.regions.img_to_signals_maps", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration", "modules/generated/nilearn.regions.signals_to_img_labels", "modules/generated/nilearn.regions.signals_to_img_maps", "modules/generated/nilearn.reporting.HTMLReport", "modules/generated/nilearn.reporting.get_clusters_table", "modules/generated/nilearn.reporting.make_glm_report", "modules/generated/nilearn.signal.butterworth", "modules/generated/nilearn.signal.clean", "modules/generated/nilearn.signal.high_variance_confounds", "modules/generated/nilearn.surface.load_surf_data", "modules/generated/nilearn.surface.load_surf_mesh", "modules/generated/nilearn.surface.vol_to_surf", "modules/glm", "modules/image", "modules/index", "modules/interfaces", "modules/maskers", "modules/masking", "modules/mass_univariate", "modules/plotting", "modules/regions", "modules/reporting", "modules/signal", "modules/surface", "nistats_migration", "plotting/index", "quickstart", "user_guide"], "filenames": ["authors.rst", "auto_examples/00_tutorials/index.rst", "auto_examples/00_tutorials/plot_3d_and_4d_niimg.rst", "auto_examples/00_tutorials/plot_decoding_tutorial.rst", "auto_examples/00_tutorials/plot_nilearn_101.rst", "auto_examples/00_tutorials/plot_python_101.rst", "auto_examples/00_tutorials/plot_single_subject_single_run.rst", "auto_examples/00_tutorials/sg_execution_times.rst", "auto_examples/01_plotting/index.rst", "auto_examples/01_plotting/plot_3d_map_to_surface_projection.rst", "auto_examples/01_plotting/plot_atlas.rst", "auto_examples/01_plotting/plot_carpet.rst", "auto_examples/01_plotting/plot_colormaps.rst", "auto_examples/01_plotting/plot_demo_glass_brain.rst", "auto_examples/01_plotting/plot_demo_glass_brain_extensive.rst", "auto_examples/01_plotting/plot_demo_more_plotting.rst", "auto_examples/01_plotting/plot_demo_plotting.rst", "auto_examples/01_plotting/plot_dim_plotting.rst", "auto_examples/01_plotting/plot_haxby_masks.rst", "auto_examples/01_plotting/plot_multiscale_parcellations.rst", "auto_examples/01_plotting/plot_overlay.rst", "auto_examples/01_plotting/plot_prob_atlas.rst", "auto_examples/01_plotting/plot_surf_atlas.rst", "auto_examples/01_plotting/plot_surf_stat_map.rst", "auto_examples/01_plotting/plot_surface_projection_strategies.rst", "auto_examples/01_plotting/plot_visualization.rst", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats.rst", "auto_examples/01_plotting/sg_execution_times.rst", "auto_examples/02_decoding/index.rst", "auto_examples/02_decoding/plot_haxby_anova_svm.rst", "auto_examples/02_decoding/plot_haxby_different_estimators.rst", "auto_examples/02_decoding/plot_haxby_frem.rst", "auto_examples/02_decoding/plot_haxby_full_analysis.rst", "auto_examples/02_decoding/plot_haxby_glm_decoding.rst", "auto_examples/02_decoding/plot_haxby_grid_search.rst", "auto_examples/02_decoding/plot_haxby_multiclass.rst", "auto_examples/02_decoding/plot_haxby_searchlight.rst", "auto_examples/02_decoding/plot_haxby_searchlight_surface.rst", "auto_examples/02_decoding/plot_haxby_stimuli.rst", "auto_examples/02_decoding/plot_mixed_gambles_frem.rst", "auto_examples/02_decoding/plot_miyawaki_encoding.rst", "auto_examples/02_decoding/plot_miyawaki_reconstruction.rst", "auto_examples/02_decoding/plot_oasis_vbm.rst", "auto_examples/02_decoding/plot_oasis_vbm_space_net.rst", "auto_examples/02_decoding/plot_simulated_data.rst", "auto_examples/02_decoding/sg_execution_times.rst", "auto_examples/03_connectivity/index.rst", "auto_examples/03_connectivity/plot_atlas_comparison.rst", "auto_examples/03_connectivity/plot_compare_decomposition.rst", "auto_examples/03_connectivity/plot_data_driven_parcellations.rst", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps.rst", "auto_examples/03_connectivity/plot_group_level_connectivity.rst", "auto_examples/03_connectivity/plot_inverse_covariance_connectome.rst", "auto_examples/03_connectivity/plot_multi_subject_connectome.rst", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction.rst", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation.rst", "auto_examples/03_connectivity/plot_signal_extraction.rst", "auto_examples/03_connectivity/plot_simulated_connectome.rst", "auto_examples/03_connectivity/plot_sphere_based_connectome.rst", "auto_examples/03_connectivity/sg_execution_times.rst", "auto_examples/04_glm_first_level/index.rst", "auto_examples/04_glm_first_level/plot_adhd_dmn.rst", "auto_examples/04_glm_first_level/plot_bids_features.rst", "auto_examples/04_glm_first_level/plot_design_matrix.rst", "auto_examples/04_glm_first_level/plot_fiac_analysis.rst", "auto_examples/04_glm_first_level/plot_fir_model.rst", "auto_examples/04_glm_first_level/plot_first_level_details.rst", "auto_examples/04_glm_first_level/plot_fixed_effects.rst", "auto_examples/04_glm_first_level/plot_hrf.rst", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis.rst", "auto_examples/04_glm_first_level/plot_predictions_residuals.rst", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces.rst", "auto_examples/04_glm_first_level/plot_write_events_file.rst", "auto_examples/04_glm_first_level/sg_execution_times.rst", "auto_examples/05_glm_second_level/index.rst", "auto_examples/05_glm_second_level/plot_oasis.rst", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels.rst", "auto_examples/05_glm_second_level/plot_second_level_association_test.rst", "auto_examples/05_glm_second_level/plot_second_level_design_matrix.rst", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test.rst", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test.rst", "auto_examples/05_glm_second_level/plot_thresholding.rst", "auto_examples/05_glm_second_level/sg_execution_times.rst", "auto_examples/06_manipulating_images/index.rst", "auto_examples/06_manipulating_images/plot_affine_transformation.rst", "auto_examples/06_manipulating_images/plot_compare_mean_image.rst", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image.rst", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas.rst", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps.rst", "auto_examples/06_manipulating_images/plot_mask_computation.rst", "auto_examples/06_manipulating_images/plot_negate_image.rst", "auto_examples/06_manipulating_images/plot_nifti_labels_simple.rst", "auto_examples/06_manipulating_images/plot_nifti_simple.rst", "auto_examples/06_manipulating_images/plot_resample_to_template.rst", "auto_examples/06_manipulating_images/plot_roi_extraction.rst", "auto_examples/06_manipulating_images/plot_smooth_mean_image.rst", "auto_examples/06_manipulating_images/sg_execution_times.rst", "auto_examples/07_advanced/index.rst", "auto_examples/07_advanced/plot_advanced_decoding_scikit.rst", "auto_examples/07_advanced/plot_age_group_prediction_cross_val.rst", "auto_examples/07_advanced/plot_beta_series.rst", "auto_examples/07_advanced/plot_bids_analysis.rst", "auto_examples/07_advanced/plot_haxby_mass_univariate.rst", "auto_examples/07_advanced/plot_ica_neurovault.rst", "auto_examples/07_advanced/plot_ica_resting_state.rst", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods.rst", "auto_examples/07_advanced/plot_localizer_simple_analysis.rst", "auto_examples/07_advanced/plot_neurovault_meta_analysis.rst", "auto_examples/07_advanced/plot_surface_bids_analysis.rst", "auto_examples/07_advanced/sg_execution_times.rst", "auto_examples/index.rst", "bibliography.rst", "building_blocks/index.rst", "building_blocks/manual_pipeline.rst", "building_blocks/neurovault.rst", "changes/0.1.0.rst", "changes/0.1.1.rst", "changes/0.1.2.rst", "changes/0.1.3.rst", "changes/0.1.4.rst", "changes/0.2.0.rst", "changes/0.2.1.rst", "changes/0.2.2.rst", "changes/0.2.3.rst", "changes/0.2.4.rst", "changes/0.2.5.rst", "changes/0.2.6.rst", "changes/0.3.0.rst", "changes/0.3.1.rst", "changes/0.4.0.rst", "changes/0.4.1.rst", "changes/0.4.2.rst", "changes/0.5.0.rst", "changes/0.5.1.rst", "changes/0.5.2.rst", "changes/0.6.0.rst", "changes/0.6.1.rst", "changes/0.6.2.rst", "changes/0.7.0.rst", "changes/0.7.1.rst", "changes/0.8.0.rst", "changes/0.8.1.rst", "changes/0.9.0.rst", "changes/0.9.1.rst", "changes/0.9.2.rst", "changes/latest.rst", "changes/names.rst", "changes/whats_new.rst", "connectivity/connectome_extraction.rst", "connectivity/functional_connectomes.rst", "connectivity/index.rst", "connectivity/parcellating.rst", "connectivity/region_extraction.rst", "connectivity/resting_state_networks.rst", "decoding/decoding_intro.rst", "decoding/estimator_choice.rst", "decoding/frem.rst", "decoding/going_further.rst", "decoding/index.rst", "decoding/searchlight.rst", "decoding/space_net.rst", "developers/group_sparse_covariance.rst", "development.rst", "glm/first_level_model.rst", "glm/glm_intro.rst", "glm/index.rst", "glm/second_level_model.rst", "glossary.rst", "index.rst", "introduction.rst", "maintenance.rst", "manipulating_images/index.rst", "manipulating_images/input_output.rst", "manipulating_images/manipulating_images.rst", "manipulating_images/masker_objects.rst", "modules/connectome.rst", "modules/datasets.rst", "modules/decoding.rst", "modules/decomposition.rst", "modules/generated/nilearn.connectome.ConnectivityMeasure.rst", "modules/generated/nilearn.connectome.GroupSparseCovariance.rst", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV.rst", "modules/generated/nilearn.connectome.cov_to_corr.rst", "modules/generated/nilearn.connectome.group_sparse_covariance.rst", "modules/generated/nilearn.connectome.prec_to_partial.rst", "modules/generated/nilearn.connectome.sym_matrix_to_vec.rst", "modules/generated/nilearn.connectome.vec_to_sym_matrix.rst", "modules/generated/nilearn.datasets.fetch_abide_pcp.rst", "modules/generated/nilearn.datasets.fetch_adhd.rst", "modules/generated/nilearn.datasets.fetch_atlas_aal.rst", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011.rst", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015.rst", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012.rst", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_difumo.rst", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford.rst", "modules/generated/nilearn.datasets.fetch_atlas_juelich.rst", "modules/generated/nilearn.datasets.fetch_atlas_msdl.rst", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017.rst", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018.rst", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux.rst", "modules/generated/nilearn.datasets.fetch_atlas_talairach.rst", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011.rst", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset.rst", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010.rst", "modules/generated/nilearn.datasets.fetch_coords_power_2011.rst", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018.rst", "modules/generated/nilearn.datasets.fetch_development_fmri.rst", "modules/generated/nilearn.datasets.fetch_ds000030_urls.rst", "modules/generated/nilearn.datasets.fetch_fiac_first_level.rst", "modules/generated/nilearn.datasets.fetch_haxby.rst", "modules/generated/nilearn.datasets.fetch_icbm152_2009.rst", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask.rst", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset.rst", "modules/generated/nilearn.datasets.fetch_localizer_button_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_contrasts.rst", "modules/generated/nilearn.datasets.fetch_localizer_first_level.rst", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats.rst", "modules/generated/nilearn.datasets.fetch_mixed_gambles.rst", "modules/generated/nilearn.datasets.fetch_miyawaki2008.rst", "modules/generated/nilearn.datasets.fetch_neurovault.rst", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task.rst", "modules/generated/nilearn.datasets.fetch_neurovault_ids.rst", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task.rst", "modules/generated/nilearn.datasets.fetch_oasis_vbm.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset_index.rst", "modules/generated/nilearn.datasets.fetch_spm_auditory.rst", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri.rst", "modules/generated/nilearn.datasets.fetch_surf_fsaverage.rst", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced.rst", "modules/generated/nilearn.datasets.get_data_dirs.rst", "modules/generated/nilearn.datasets.load_mni152_brain_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_template.rst", "modules/generated/nilearn.datasets.load_mni152_template.rst", "modules/generated/nilearn.datasets.load_mni152_wm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_wm_template.rst", "modules/generated/nilearn.datasets.patch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.select_from_index.rst", "modules/generated/nilearn.decoding.Decoder.rst", "modules/generated/nilearn.decoding.DecoderRegressor.rst", "modules/generated/nilearn.decoding.FREMClassifier.rst", "modules/generated/nilearn.decoding.FREMRegressor.rst", "modules/generated/nilearn.decoding.SearchLight.rst", "modules/generated/nilearn.decoding.SpaceNetClassifier.rst", "modules/generated/nilearn.decoding.SpaceNetRegressor.rst", "modules/generated/nilearn.decomposition.CanICA.rst", "modules/generated/nilearn.decomposition.DictLearning.rst", "modules/generated/nilearn.glm.ARModel.rst", "modules/generated/nilearn.glm.Contrast.rst", "modules/generated/nilearn.glm.FContrastResults.rst", "modules/generated/nilearn.glm.LikelihoodModelResults.rst", "modules/generated/nilearn.glm.OLSModel.rst", "modules/generated/nilearn.glm.RegressionResults.rst", "modules/generated/nilearn.glm.SimpleRegressionResults.rst", "modules/generated/nilearn.glm.TContrastResults.rst", "modules/generated/nilearn.glm.cluster_level_inference.rst", "modules/generated/nilearn.glm.compute_contrast.rst", "modules/generated/nilearn.glm.compute_fixed_effects.rst", "modules/generated/nilearn.glm.expression_to_contrast_vector.rst", "modules/generated/nilearn.glm.fdr_threshold.rst", "modules/generated/nilearn.glm.first_level.FirstLevelModel.rst", "modules/generated/nilearn.glm.first_level.check_design_matrix.rst", "modules/generated/nilearn.glm.first_level.compute_regressor.rst", "modules/generated/nilearn.glm.first_level.first_level_from_bids.rst", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.glover_hrf.rst", "modules/generated/nilearn.glm.first_level.glover_time_derivative.rst", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix.rst", "modules/generated/nilearn.glm.first_level.mean_scaling.rst", "modules/generated/nilearn.glm.first_level.run_glm.rst", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.spm_hrf.rst", "modules/generated/nilearn.glm.first_level.spm_time_derivative.rst", "modules/generated/nilearn.glm.second_level.SecondLevelModel.rst", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix.rst", "modules/generated/nilearn.glm.second_level.non_parametric_inference.rst", "modules/generated/nilearn.glm.threshold_stats_img.rst", "modules/generated/nilearn.image.binarize_img.rst", "modules/generated/nilearn.image.clean_img.rst", "modules/generated/nilearn.image.concat_imgs.rst", "modules/generated/nilearn.image.coord_transform.rst", "modules/generated/nilearn.image.copy_img.rst", "modules/generated/nilearn.image.crop_img.rst", "modules/generated/nilearn.image.get_data.rst", "modules/generated/nilearn.image.high_variance_confounds.rst", "modules/generated/nilearn.image.index_img.rst", "modules/generated/nilearn.image.iter_img.rst", "modules/generated/nilearn.image.largest_connected_component_img.rst", "modules/generated/nilearn.image.load_img.rst", "modules/generated/nilearn.image.math_img.rst", "modules/generated/nilearn.image.mean_img.rst", "modules/generated/nilearn.image.new_img_like.rst", "modules/generated/nilearn.image.reorder_img.rst", "modules/generated/nilearn.image.resample_img.rst", "modules/generated/nilearn.image.resample_to_img.rst", "modules/generated/nilearn.image.smooth_img.rst", "modules/generated/nilearn.image.swap_img_hemispheres.rst", "modules/generated/nilearn.image.threshold_img.rst", "modules/generated/nilearn.interfaces.bids.get_bids_files.rst", "modules/generated/nilearn.interfaces.bids.parse_bids_filename.rst", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy.rst", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat.rst", "modules/generated/nilearn.maskers.BaseMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.NiftiMapsMasker.rst", "modules/generated/nilearn.maskers.NiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiSpheresMasker.rst", "modules/generated/nilearn.masking.apply_mask.rst", "modules/generated/nilearn.masking.compute_background_mask.rst", "modules/generated/nilearn.masking.compute_brain_mask.rst", "modules/generated/nilearn.masking.compute_epi_mask.rst", "modules/generated/nilearn.masking.compute_multi_background_mask.rst", "modules/generated/nilearn.masking.compute_multi_brain_mask.rst", "modules/generated/nilearn.masking.compute_multi_epi_mask.rst", "modules/generated/nilearn.masking.intersect_masks.rst", "modules/generated/nilearn.masking.unmask.rst", "modules/generated/nilearn.mass_univariate.permuted_ols.rst", "modules/generated/nilearn.plotting.displays.BaseAxes.rst", "modules/generated/nilearn.plotting.displays.BaseSlicer.rst", "modules/generated/nilearn.plotting.displays.CutAxes.rst", "modules/generated/nilearn.plotting.displays.GlassBrainAxes.rst", "modules/generated/nilearn.plotting.displays.LProjector.rst", "modules/generated/nilearn.plotting.displays.LRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRZProjector.rst", "modules/generated/nilearn.plotting.displays.LZRProjector.rst", "modules/generated/nilearn.plotting.displays.LZRYProjector.rst", "modules/generated/nilearn.plotting.displays.MosaicSlicer.rst", "modules/generated/nilearn.plotting.displays.OrthoProjector.rst", "modules/generated/nilearn.plotting.displays.OrthoSlicer.rst", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure.rst", "modules/generated/nilearn.plotting.displays.RProjector.rst", "modules/generated/nilearn.plotting.displays.TiledSlicer.rst", "modules/generated/nilearn.plotting.displays.XProjector.rst", "modules/generated/nilearn.plotting.displays.XSlicer.rst", "modules/generated/nilearn.plotting.displays.XZProjector.rst", "modules/generated/nilearn.plotting.displays.XZSlicer.rst", "modules/generated/nilearn.plotting.displays.YProjector.rst", "modules/generated/nilearn.plotting.displays.YSlicer.rst", "modules/generated/nilearn.plotting.displays.YXProjector.rst", "modules/generated/nilearn.plotting.displays.YXSlicer.rst", "modules/generated/nilearn.plotting.displays.YZProjector.rst", "modules/generated/nilearn.plotting.displays.YZSlicer.rst", "modules/generated/nilearn.plotting.displays.ZProjector.rst", "modules/generated/nilearn.plotting.displays.ZSlicer.rst", "modules/generated/nilearn.plotting.displays.get_projector.rst", "modules/generated/nilearn.plotting.displays.get_slicer.rst", "modules/generated/nilearn.plotting.find_cut_slices.rst", "modules/generated/nilearn.plotting.find_parcellation_cut_coords.rst", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords.rst", "modules/generated/nilearn.plotting.find_xyz_cut_coords.rst", "modules/generated/nilearn.plotting.plot_anat.rst", "modules/generated/nilearn.plotting.plot_carpet.rst", "modules/generated/nilearn.plotting.plot_connectome.rst", "modules/generated/nilearn.plotting.plot_contrast_matrix.rst", "modules/generated/nilearn.plotting.plot_design_matrix.rst", "modules/generated/nilearn.plotting.plot_epi.rst", "modules/generated/nilearn.plotting.plot_event.rst", "modules/generated/nilearn.plotting.plot_glass_brain.rst", "modules/generated/nilearn.plotting.plot_img.rst", "modules/generated/nilearn.plotting.plot_img_comparison.rst", "modules/generated/nilearn.plotting.plot_img_on_surf.rst", "modules/generated/nilearn.plotting.plot_markers.rst", "modules/generated/nilearn.plotting.plot_matrix.rst", "modules/generated/nilearn.plotting.plot_prob_atlas.rst", "modules/generated/nilearn.plotting.plot_roi.rst", "modules/generated/nilearn.plotting.plot_stat_map.rst", "modules/generated/nilearn.plotting.plot_surf.rst", "modules/generated/nilearn.plotting.plot_surf_contours.rst", "modules/generated/nilearn.plotting.plot_surf_roi.rst", "modules/generated/nilearn.plotting.plot_surf_stat_map.rst", "modules/generated/nilearn.plotting.show.rst", "modules/generated/nilearn.plotting.view_connectome.rst", "modules/generated/nilearn.plotting.view_img.rst", "modules/generated/nilearn.plotting.view_img_on_surf.rst", "modules/generated/nilearn.plotting.view_markers.rst", "modules/generated/nilearn.plotting.view_surf.rst", "modules/generated/nilearn.regions.HierarchicalKMeans.rst", "modules/generated/nilearn.regions.Parcellations.rst", "modules/generated/nilearn.regions.ReNA.rst", "modules/generated/nilearn.regions.RegionExtractor.rst", "modules/generated/nilearn.regions.connected_label_regions.rst", "modules/generated/nilearn.regions.connected_regions.rst", "modules/generated/nilearn.regions.img_to_signals_labels.rst", "modules/generated/nilearn.regions.img_to_signals_maps.rst", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration.rst", "modules/generated/nilearn.regions.signals_to_img_labels.rst", "modules/generated/nilearn.regions.signals_to_img_maps.rst", "modules/generated/nilearn.reporting.HTMLReport.rst", "modules/generated/nilearn.reporting.get_clusters_table.rst", "modules/generated/nilearn.reporting.make_glm_report.rst", "modules/generated/nilearn.signal.butterworth.rst", "modules/generated/nilearn.signal.clean.rst", "modules/generated/nilearn.signal.high_variance_confounds.rst", "modules/generated/nilearn.surface.load_surf_data.rst", "modules/generated/nilearn.surface.load_surf_mesh.rst", "modules/generated/nilearn.surface.vol_to_surf.rst", "modules/glm.rst", "modules/image.rst", "modules/index.rst", "modules/interfaces.rst", "modules/maskers.rst", "modules/masking.rst", "modules/mass_univariate.rst", "modules/plotting.rst", "modules/regions.rst", "modules/reporting.rst", "modules/signal.rst", "modules/surface.rst", "nistats_migration.rst", "plotting/index.rst", "quickstart.md", "user_guide.rst"], "titles": ["Team", "Basic tutorials", "3D and 4D niimgs: handling and visualizing", "A introduction tutorial to fMRI decoding", "Basic nilearn example: manipulating and looking at data", "Basic numerics and plotting with Python", "Intro to GLM Analysis: a single-session, single-subject fMRI dataset", "Computation times", "Visualization of brain images", "Making a surface plot of a 3D statistical map", "Basic Atlas plotting", "Visualizing global patterns with a carpet plot", "Matplotlib colormaps in Nilearn", "Glass brain plotting in nilearn", "Glass brain plotting in nilearn (all options)", "More plotting tools from nilearn", "Plotting tools in nilearn", "Controlling the contrast of the background when plotting", "Plot Haxby masks", "Visualizing multiscale functional brain parcellations", "Visualizing a probabilistic atlas: the default mode in the MSDL atlas", "Visualizing 4D probabilistic atlas maps", "Loading and plotting of a cortical surface atlas", "Seed-based connectivity on the surface", "Technical point: Illustration of the volume to surface sampling schemes", "NeuroImaging volumes visualization", "Visualizing Megatrawls Network Matrices from Human Connectome Project", "Computation times", "Decoding and predicting from brain images", "Decoding with ANOVA + SVM: face vs house in the Haxby dataset", "Different classifiers in decoding the Haxby dataset", "Decoding with FREM: face vs house object recognition", "ROI-based decoding analysis in Haxby et al. dataset", "Decoding of a dataset after GLM fit for signal extraction", "Setting a parameter by cross-validation", "The haxby dataset: different multi-class strategies", "Searchlight analysis of face vs house recognition", "Cortical surface-based searchlight decoding", "Show stimuli of Haxby et al. dataset", "FREM on Jimura et al \u201cmixed gambles\u201d dataset.", "Encoding models for visual stimuli from Miyawaki et al. 2008", "Reconstruction of visual stimuli from Miyawaki et al. 2008", "Voxel-Based Morphometry on Oasis dataset", "Voxel-Based Morphometry on Oasis dataset with Space-Net prior", "Example of pattern recognition on simulated data", "Computation times", "Functional connectivity", "Comparing connectomes on different reference atlases", "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning", "Clustering methods to learn a brain parcellation from fMRI", "Regions extraction using dictionary learning and functional connectomes", "Classification of age groups using functional connectivity", "Computing a connectome with sparse inverse covariance", "Group Sparse inverse covariance for multi-subject connectome", "Extracting signals of a probabilistic atlas of functional regions", "Producing single subject maps of seed-to-voxel correlation", "Extracting signals from a brain parcellation", "Connectivity structure estimation on simulated data", "Extract signals on spheres and plot a connectome", "Computation times", "GLM: First level analysis", "Default Mode Network extraction of ADHD dataset", "First level analysis of a complete BIDS dataset from openneuro", "Examples of design matrices", "Simple example of two-session fMRI model fitting", "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model", "Understanding parameters of the first-level model", "Example of explicit fixed effects fMRI model fitting", "Example of MRI response functions", "Example of surface-based first-level analysis", "Predicted time series and residuals", "Single-subject data (two sessions) in native space", "Generate an events.tsv file for the NeuroSpin localizer task", "Computation times", "GLM: Second level analysis", "Voxel-Based Morphometry on OASIS dataset", "Second-level fMRI model: true positive proportion in clusters", "Example of generic design in second-level models", "Example of second level design matrix", "Second-level fMRI model: one sample test", "Second-level fMRI model: two-sample test, unpaired and paired", "Statistical testing of a second-level analysis", "Computation times", "Manipulating brain image volumes", "Visualization of affine resamplings", "Comparing the means of 2 images", "Breaking an atlas of labels in separated regions", "Regions Extraction of Default Mode Networks using Smith Atlas", "Region Extraction using a t-statistical map (3D)", "Understanding NiftiMasker and mask computation", "Negating an image with math_img", "Extracting signals from brain regions using the NiftiLabelsMasker", "Simple example of NiftiMasker use", "Resample an image to a template", "Computing a Region of Interest (ROI) mask manually", "Smoothing an image", "Computation times", "Advanced statistical analysis of brain images", "Advanced decoding using scikit learn", "Functional connectivity predicts age group", "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding", "BIDS dataset first and second level analysis", "Massively univariate analysis of face vs house recognition", "NeuroVault cross-study ICA maps.", "Multivariate decompositions: Independent component analysis of fMRI", "Massively univariate analysis of a motor task from the Localizer dataset", "Massively univariate analysis of a calculation task from the Localizer dataset", "NeuroVault meta-analysis of stop-go paradigm studies.", "Surface-based dataset first and second level analysis of a dataset", "Computation times", "Examples", "General bibliography", "<span class=\"section-number\">7. </span>Advanced usage: manual pipelines and scaling up", "<span class=\"section-number\">7.1. </span>Building your own neuroimaging machine-learning pipeline", "<span class=\"section-number\">7.2. </span>Downloading statistical maps from the Neurovault repository", "0.1.0", "0.1.1", "0.1.2", "0.1.3", "0.1.4", "0.2.0", "0.2.1", "0.2.2", "0.2.3", "0.2.4", "0.2.5.1", "0.2.6", "0.3.0", "0.3.1", "0.4.0", "0.4.1", "0.4.2", "0.5.0", "0.5.1", "0.5.2", "0.6.0", "0.6.1", "0.6.2", "0.7.0", "0.7.1", "0.8.0", "0.8.1", "0.9.0", "0.9.1", "0.9.2", "0.9.3.dev", "&lt;no title&gt;", "What\u2019s new", "<span class=\"section-number\">3.2. </span>Connectome extraction: inverse covariance for direct connections", "<span class=\"section-number\">3.1. </span>Extracting times series to build a functional connectome", "<span class=\"section-number\">3. </span>Functional connectivity and resting state", "<span class=\"section-number\">3.5. </span>Clustering to parcellate the brain in regions", "<span class=\"section-number\">3.4. </span>Region Extraction for better brain parcellations", "<span class=\"section-number\">3.3. </span>Extracting functional brain networks: ICA and related", "<span class=\"section-number\">2.1. </span>An introduction to decoding", "<span class=\"section-number\">2.2. </span>Choosing the right predictive model for neuroimaging", "<span class=\"section-number\">2.3. </span>FREM: fast ensembling of regularized models for robust decoding", "<span class=\"section-number\">2.6. </span>Running scikit-learn functions for more control on the analysis", "<span class=\"section-number\">2. </span>Decoding and MVPA: predicting from brain images", "<span class=\"section-number\">2.5. </span>Searchlight : finding voxels containing information", "<span class=\"section-number\">2.4. </span>SpaceNet: decoding with spatial structure for better maps", "<span class=\"section-number\">3.2.3.1. </span>Group-sparse covariance estimation", "Contributing", "<span class=\"section-number\">5.2. </span>First level models", "<span class=\"section-number\">5.1. </span>An introduction to GLMs in fMRI statistical analysis", "<span class=\"section-number\">5. </span>Analyzing fMRI using GLMs", "<span class=\"section-number\">5.3. </span>Second level models", "Glossary", "Nilearn", "<span class=\"section-number\">1. </span>Introduction", "Maintenance", "<span class=\"section-number\">6. </span>Manipulation brain volumes with nilearn", "<span class=\"section-number\">6.1. </span>Input and output: neuroimaging data representation", "<span class=\"section-number\">6.2. </span>Manipulating images: resampling, smoothing, masking, ROIs\u2026", "<span class=\"section-number\">6.3. </span>From neuroimaging volumes to data matrices: the masker objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.connectome</span></code>: Functional Connectivity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.datasets</span></code>: Automatic Dataset Fetching", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decoding</span></code>: Decoding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decomposition</span></code>: Multivariate Decompositions", "nilearn.connectome.ConnectivityMeasure", "nilearn.connectome.GroupSparseCovariance", "nilearn.connectome.GroupSparseCovarianceCV", "nilearn.connectome.cov_to_corr", "nilearn.connectome.group_sparse_covariance", "nilearn.connectome.prec_to_partial", "nilearn.connectome.sym_matrix_to_vec", "nilearn.connectome.vec_to_sym_matrix", "nilearn.datasets.fetch_abide_pcp", "nilearn.datasets.fetch_adhd", "nilearn.datasets.fetch_atlas_aal", "nilearn.datasets.fetch_atlas_allen_2011", "nilearn.datasets.fetch_atlas_basc_multiscale_2015", "nilearn.datasets.fetch_atlas_craddock_2012", "nilearn.datasets.fetch_atlas_destrieux_2009", "nilearn.datasets.fetch_atlas_difumo", "nilearn.datasets.fetch_atlas_harvard_oxford", "nilearn.datasets.fetch_atlas_juelich", "nilearn.datasets.fetch_atlas_msdl", "nilearn.datasets.fetch_atlas_pauli_2017", "nilearn.datasets.fetch_atlas_schaefer_2018", "nilearn.datasets.fetch_atlas_smith_2009", "nilearn.datasets.fetch_atlas_surf_destrieux", "nilearn.datasets.fetch_atlas_talairach", "nilearn.datasets.fetch_atlas_yeo_2011", "nilearn.datasets.fetch_bids_langloc_dataset", "nilearn.datasets.fetch_coords_dosenbach_2010", "nilearn.datasets.fetch_coords_power_2011", "nilearn.datasets.fetch_coords_seitzman_2018", "nilearn.datasets.fetch_development_fmri", "nilearn.datasets.fetch_ds000030_urls", "nilearn.datasets.fetch_fiac_first_level", "nilearn.datasets.fetch_haxby", "nilearn.datasets.fetch_icbm152_2009", "nilearn.datasets.fetch_icbm152_brain_gm_mask", "nilearn.datasets.fetch_language_localizer_demo_dataset", "nilearn.datasets.fetch_localizer_button_task", "nilearn.datasets.fetch_localizer_calculation_task", "nilearn.datasets.fetch_localizer_contrasts", "nilearn.datasets.fetch_localizer_first_level", "nilearn.datasets.fetch_megatrawls_netmats", "nilearn.datasets.fetch_mixed_gambles", "nilearn.datasets.fetch_miyawaki2008", "nilearn.datasets.fetch_neurovault", "nilearn.datasets.fetch_neurovault_auditory_computation_task", "nilearn.datasets.fetch_neurovault_ids", "nilearn.datasets.fetch_neurovault_motor_task", "nilearn.datasets.fetch_oasis_vbm", "nilearn.datasets.fetch_openneuro_dataset", "nilearn.datasets.fetch_openneuro_dataset_index", "nilearn.datasets.fetch_spm_auditory", "nilearn.datasets.fetch_spm_multimodal_fmri", "nilearn.datasets.fetch_surf_fsaverage", "nilearn.datasets.fetch_surf_nki_enhanced", "nilearn.datasets.get_data_dirs", "nilearn.datasets.load_mni152_brain_mask", "nilearn.datasets.load_mni152_gm_mask", "nilearn.datasets.load_mni152_gm_template", "nilearn.datasets.load_mni152_template", "nilearn.datasets.load_mni152_wm_mask", "nilearn.datasets.load_mni152_wm_template", "nilearn.datasets.patch_openneuro_dataset", "nilearn.datasets.select_from_index", "nilearn.decoding.Decoder", "nilearn.decoding.DecoderRegressor", "nilearn.decoding.FREMClassifier", "nilearn.decoding.FREMRegressor", "nilearn.decoding.SearchLight", "nilearn.decoding.SpaceNetClassifier", "nilearn.decoding.SpaceNetRegressor", "nilearn.decomposition.CanICA", "nilearn.decomposition.DictLearning", "nilearn.glm.ARModel", "nilearn.glm.Contrast", "nilearn.glm.FContrastResults", "nilearn.glm.LikelihoodModelResults", "nilearn.glm.OLSModel", "nilearn.glm.RegressionResults", "nilearn.glm.SimpleRegressionResults", "nilearn.glm.TContrastResults", "nilearn.glm.cluster_level_inference", "nilearn.glm.compute_contrast", "nilearn.glm.compute_fixed_effects", "nilearn.glm.expression_to_contrast_vector", "nilearn.glm.fdr_threshold", "nilearn.glm.first_level.FirstLevelModel", "nilearn.glm.first_level.check_design_matrix", "nilearn.glm.first_level.compute_regressor", "nilearn.glm.first_level.first_level_from_bids", "nilearn.glm.first_level.glover_dispersion_derivative", "nilearn.glm.first_level.glover_hrf", "nilearn.glm.first_level.glover_time_derivative", "nilearn.glm.first_level.make_first_level_design_matrix", "nilearn.glm.first_level.mean_scaling", "nilearn.glm.first_level.run_glm", "nilearn.glm.first_level.spm_dispersion_derivative", "nilearn.glm.first_level.spm_hrf", "nilearn.glm.first_level.spm_time_derivative", "nilearn.glm.second_level.SecondLevelModel", "nilearn.glm.second_level.make_second_level_design_matrix", "nilearn.glm.second_level.non_parametric_inference", "nilearn.glm.threshold_stats_img", "nilearn.image.binarize_img", "nilearn.image.clean_img", "nilearn.image.concat_imgs", "nilearn.image.coord_transform", "nilearn.image.copy_img", "nilearn.image.crop_img", "nilearn.image.get_data", "nilearn.image.high_variance_confounds", "nilearn.image.index_img", "nilearn.image.iter_img", "nilearn.image.largest_connected_component_img", "nilearn.image.load_img", "nilearn.image.math_img", "nilearn.image.mean_img", "nilearn.image.new_img_like", "nilearn.image.reorder_img", "nilearn.image.resample_img", "nilearn.image.resample_to_img", "nilearn.image.smooth_img", "nilearn.image.swap_img_hemispheres", "nilearn.image.threshold_img", "nilearn.interfaces.bids.get_bids_files", "nilearn.interfaces.bids.parse_bids_filename", "nilearn.interfaces.bids.save_glm_to_bids", "nilearn.interfaces.fmriprep.load_confounds", "nilearn.interfaces.fmriprep.load_confounds_strategy", "nilearn.interfaces.fsl.get_design_from_fslmat", "nilearn.maskers.BaseMasker", "nilearn.maskers.MultiNiftiLabelsMasker", "nilearn.maskers.MultiNiftiMapsMasker", "nilearn.maskers.MultiNiftiMasker", "nilearn.maskers.NiftiLabelsMasker", "nilearn.maskers.NiftiMapsMasker", "nilearn.maskers.NiftiMasker", "nilearn.maskers.NiftiSpheresMasker", "nilearn.masking.apply_mask", "nilearn.masking.compute_background_mask", "nilearn.masking.compute_brain_mask", "nilearn.masking.compute_epi_mask", "nilearn.masking.compute_multi_background_mask", "nilearn.masking.compute_multi_brain_mask", "nilearn.masking.compute_multi_epi_mask", "nilearn.masking.intersect_masks", "nilearn.masking.unmask", "nilearn.mass_univariate.permuted_ols", "nilearn.plotting.displays.BaseAxes", "nilearn.plotting.displays.BaseSlicer", "nilearn.plotting.displays.CutAxes", "nilearn.plotting.displays.GlassBrainAxes", "nilearn.plotting.displays.LProjector", "nilearn.plotting.displays.LRProjector", "nilearn.plotting.displays.LYRProjector", "nilearn.plotting.displays.LYRZProjector", "nilearn.plotting.displays.LZRProjector", "nilearn.plotting.displays.LZRYProjector", "nilearn.plotting.displays.MosaicSlicer", "nilearn.plotting.displays.OrthoProjector", "nilearn.plotting.displays.OrthoSlicer", "nilearn.plotting.displays.PlotlySurfaceFigure", "nilearn.plotting.displays.RProjector", "nilearn.plotting.displays.TiledSlicer", "nilearn.plotting.displays.XProjector", "nilearn.plotting.displays.XSlicer", "nilearn.plotting.displays.XZProjector", "nilearn.plotting.displays.XZSlicer", "nilearn.plotting.displays.YProjector", "nilearn.plotting.displays.YSlicer", "nilearn.plotting.displays.YXProjector", "nilearn.plotting.displays.YXSlicer", "nilearn.plotting.displays.YZProjector", "nilearn.plotting.displays.YZSlicer", "nilearn.plotting.displays.ZProjector", "nilearn.plotting.displays.ZSlicer", "nilearn.plotting.displays.get_projector", "nilearn.plotting.displays.get_slicer", "nilearn.plotting.find_cut_slices", "nilearn.plotting.find_parcellation_cut_coords", "nilearn.plotting.find_probabilistic_atlas_cut_coords", "nilearn.plotting.find_xyz_cut_coords", "nilearn.plotting.plot_anat", "nilearn.plotting.plot_carpet", "nilearn.plotting.plot_connectome", "nilearn.plotting.plot_contrast_matrix", "nilearn.plotting.plot_design_matrix", "nilearn.plotting.plot_epi", "nilearn.plotting.plot_event", "nilearn.plotting.plot_glass_brain", "nilearn.plotting.plot_img", "nilearn.plotting.plot_img_comparison", "nilearn.plotting.plot_img_on_surf", "nilearn.plotting.plot_markers", "nilearn.plotting.plot_matrix", "nilearn.plotting.plot_prob_atlas", "nilearn.plotting.plot_roi", "nilearn.plotting.plot_stat_map", "nilearn.plotting.plot_surf", "nilearn.plotting.plot_surf_contours", "nilearn.plotting.plot_surf_roi", "nilearn.plotting.plot_surf_stat_map", "nilearn.plotting.show", "nilearn.plotting.view_connectome", "nilearn.plotting.view_img", "nilearn.plotting.view_img_on_surf", "nilearn.plotting.view_markers", "nilearn.plotting.view_surf", "nilearn.regions.HierarchicalKMeans", "nilearn.regions.Parcellations", "nilearn.regions.ReNA", "nilearn.regions.RegionExtractor", "nilearn.regions.connected_label_regions", "nilearn.regions.connected_regions", "nilearn.regions.img_to_signals_labels", "nilearn.regions.img_to_signals_maps", "nilearn.regions.recursive_neighbor_agglomeration", "nilearn.regions.signals_to_img_labels", "nilearn.regions.signals_to_img_maps", "nilearn.reporting.HTMLReport", "nilearn.reporting.get_clusters_table", "nilearn.reporting.make_glm_report", "nilearn.signal.butterworth", "nilearn.signal.clean", "nilearn.signal.high_variance_confounds", "nilearn.surface.load_surf_data", "nilearn.surface.load_surf_mesh", "nilearn.surface.vol_to_surf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.glm</span></code>: Generalized Linear Models", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.image</span></code>: Image Processing and Resampling Utilities", "API References", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.interfaces</span></code>: Loading components from interfaces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.maskers</span></code>: Extracting Signals from Brain Images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.masking</span></code>: Data Masking Utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.mass_univariate</span></code>: Mass-Univariate Analysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.plotting</span></code>: Plotting Brain Data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.regions</span></code>: Operating on Regions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.reporting</span></code>: Reporting Functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.signal</span></code>: Preprocessing Time Series", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.surface</span></code>: Manipulating Surface Data", "Migrating from Nistats", "<span class=\"section-number\">4. </span>Plotting brain images", "Quickstart", "User guide"], "terms": {"thi": [0, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 173, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 416, 419, 421], "work": [0, 2, 3, 6, 10, 11, 14, 16, 18, 20, 23, 25, 29, 30, 31, 32, 34, 35, 36, 39, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 61, 62, 64, 75, 77, 84, 85, 89, 91, 92, 94, 95, 98, 100, 101, 102, 104, 105, 108, 127, 128, 135, 138, 142, 143, 147, 148, 153, 154, 155, 157, 161, 162, 163, 164, 170, 172, 173, 174, 179, 180, 181, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 277, 304, 308, 309, 310, 311, 312, 313, 314, 315, 356, 362, 367, 386, 387, 388, 389, 398, 407, 409, 418], "i": [0, 2, 4, 6, 9, 10, 11, 14, 15, 16, 18, 20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 111, 112, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 173, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 418, 419, 420, 421], "made": [0, 21, 101, 108, 138, 141, 142, 147, 158, 161, 162, 164, 167, 169, 170, 242, 243, 244, 245, 247, 248, 325, 382, 421], "avail": [0, 3, 15, 23, 24, 31, 39, 42, 62, 75, 80, 89, 94, 101, 106, 108, 114, 135, 140, 147, 149, 152, 155, 157, 161, 163, 166, 169, 170, 187, 191, 194, 208, 217, 219, 221, 226, 247, 248, 372, 377, 405, 420, 421], "commun": [0, 111, 162, 168, 170, 208, 420], "peopl": [0, 6, 129, 132, 133, 134, 135, 136, 137, 147, 161, 162], "which": [0, 3, 6, 9, 12, 14, 15, 21, 22, 23, 25, 29, 30, 32, 33, 34, 36, 37, 40, 42, 44, 47, 49, 51, 58, 61, 62, 66, 68, 69, 70, 75, 76, 79, 84, 89, 91, 94, 98, 100, 108, 113, 114, 119, 120, 125, 126, 129, 130, 131, 132, 133, 135, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 152, 153, 154, 155, 157, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 172, 173, 174, 186, 193, 195, 196, 198, 199, 202, 203, 208, 222, 223, 224, 225, 229, 230, 231, 233, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 263, 264, 267, 271, 272, 277, 279, 281, 286, 292, 297, 301, 303, 304, 309, 310, 311, 312, 313, 314, 315, 318, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 377, 378, 379, 382, 387, 389, 390, 391, 397, 399, 405, 419, 420], "origin": [0, 6, 36, 40, 41, 49, 50, 66, 70, 84, 89, 93, 100, 126, 139, 141, 142, 147, 151, 159, 161, 170, 174, 200, 208, 212, 217, 226, 309, 310, 311, 312, 313, 314, 315, 361, 376, 378, 379, 386, 388, 389, 401], "from": [0, 4, 6, 8, 9, 10, 12, 14, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 99, 101, 102, 103, 104, 107, 108, 109, 111, 112, 115, 116, 118, 119, 120, 122, 125, 128, 129, 132, 133, 135, 140, 141, 142, 144, 145, 147, 148, 150, 151, 152, 153, 154, 155, 157, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 176, 179, 180, 181, 183, 188, 189, 191, 193, 194, 195, 196, 198, 199, 200, 202, 203, 205, 207, 208, 209, 211, 212, 213, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 261, 263, 264, 267, 271, 277, 278, 279, 281, 282, 284, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 360, 361, 363, 365, 366, 367, 369, 370, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 401, 402, 405, 411, 413, 419, 420, 421], "inria": [0, 42, 75, 102, 105, 106, 111, 160, 197, 389], "mind": [0, 51, 154, 155, 162, 167], "project": [0, 8, 9, 15, 23, 24, 27, 42, 58, 75, 108, 110, 111, 125, 127, 129, 137, 141, 142, 147, 161, 163, 168, 187, 192, 219, 226, 232, 249, 250, 282, 329, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 367, 370, 372, 376, 377, 378, 379, 380, 381, 384, 401, 405, 419], "grew": 0, "much": [0, 3, 24, 40, 42, 51, 77, 79, 99, 100, 132, 147, 154, 161, 162, 164, 169, 205, 286, 297, 405], "further": [0, 14, 15, 55, 66, 70, 84, 94, 112, 148, 156, 158, 161, 170, 172, 176, 222, 264, 277, 305, 339, 410, 411, 419, 421], "an": [0, 2, 3, 4, 11, 14, 15, 16, 20, 21, 22, 23, 25, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 54, 55, 56, 60, 62, 63, 66, 68, 69, 70, 71, 73, 75, 79, 80, 83, 84, 88, 89, 91, 92, 94, 96, 100, 101, 103, 105, 108, 110, 111, 113, 114, 120, 123, 124, 125, 127, 128, 129, 130, 132, 135, 137, 138, 139, 140, 142, 144, 145, 147, 148, 149, 150, 152, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166, 167, 169, 170, 172, 173, 174, 181, 185, 189, 193, 197, 203, 208, 217, 218, 220, 222, 224, 225, 226, 227, 237, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 260, 264, 271, 273, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 291, 292, 293, 294, 296, 297, 298, 299, 304, 305, 306, 308, 310, 311, 313, 314, 315, 317, 318, 319, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 397, 401, 402, 403, 405, 407, 421], "up": [0, 3, 6, 33, 36, 47, 84, 86, 89, 94, 98, 103, 111, 132, 133, 135, 140, 142, 145, 147, 151, 157, 158, 160, 161, 163, 164, 165, 167, 174, 227, 251, 254, 278, 325, 361, 386, 405, 421], "date": [0, 141, 147, 190, 193, 212, 222, 224], "list": [0, 2, 3, 6, 9, 14, 15, 16, 30, 33, 44, 47, 48, 49, 51, 53, 55, 61, 62, 64, 67, 71, 72, 75, 76, 79, 80, 85, 94, 99, 100, 101, 103, 108, 113, 114, 120, 123, 125, 126, 127, 131, 132, 135, 141, 142, 144, 145, 147, 148, 154, 162, 169, 172, 173, 174, 179, 180, 181, 183, 185, 186, 187, 189, 190, 193, 195, 196, 197, 198, 199, 201, 202, 204, 205, 208, 209, 211, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 259, 261, 262, 264, 266, 267, 271, 277, 278, 279, 280, 282, 283, 291, 292, 294, 297, 299, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 363, 366, 369, 370, 372, 373, 376, 377, 378, 379, 384, 385, 387, 389, 390, 391, 392, 393, 399, 401, 403, 404, 405, 420], "can": [0, 2, 3, 4, 6, 9, 11, 12, 14, 15, 20, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 61, 62, 64, 65, 66, 68, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 86, 88, 89, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 112, 113, 114, 120, 123, 125, 127, 132, 133, 135, 138, 139, 140, 141, 142, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 172, 173, 174, 180, 181, 183, 186, 187, 190, 193, 194, 195, 196, 197, 198, 199, 203, 217, 219, 222, 226, 242, 243, 244, 245, 246, 247, 248, 254, 256, 257, 264, 266, 271, 277, 279, 282, 283, 284, 289, 292, 293, 294, 297, 298, 301, 302, 305, 306, 311, 314, 317, 318, 319, 320, 321, 322, 324, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 363, 365, 366, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 387, 389, 390, 391, 397, 398, 399, 400, 401, 405, 419, 420, 421], "seen": [0, 3, 14, 41, 49, 113, 149, 151, 155, 157, 159, 164, 169, 170, 387, 419], "github": [0, 23, 33, 36, 49, 52, 53, 58, 62, 75, 77, 103, 140, 144, 147, 162, 169, 170, 187, 199, 212, 249, 250, 306, 367, 383, 387, 419, 420], "addit": [0, 14, 15, 55, 62, 63, 66, 69, 70, 79, 86, 89, 101, 113, 114, 116, 127, 132, 138, 147, 154, 157, 161, 163, 167, 169, 170, 189, 211, 221, 249, 250, 252, 264, 271, 277, 279, 302, 305, 306, 311, 314, 386, 387, 388, 397, 419], "credit": 0, "goe": [0, 14, 40, 86, 94, 100, 161, 180, 183], "michael": [0, 111, 115, 119, 120, 132, 147, 160, 190, 198, 232, 306], "hank": [0, 119, 120, 147], "yaroslav": [0, 129, 132, 147], "halchenko": [0, 129, 132, 147], "data": [0, 1, 2, 7, 18, 20, 21, 24, 26, 28, 31, 34, 36, 43, 45, 46, 50, 51, 53, 58, 59, 60, 63, 65, 68, 70, 73, 76, 77, 78, 79, 80, 81, 84, 86, 87, 88, 90, 91, 92, 95, 99, 101, 102, 104, 105, 106, 108, 110, 111, 112, 114, 122, 125, 126, 127, 128, 129, 130, 132, 133, 135, 138, 139, 140, 142, 143, 144, 147, 149, 150, 152, 155, 156, 158, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 180, 181, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 264, 271, 272, 273, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 360, 361, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 401, 403, 405, 406, 407, 409, 419, 421], "packag": [0, 3, 4, 9, 10, 11, 15, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 71, 77, 78, 79, 84, 86, 87, 88, 91, 92, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 118, 119, 132, 135, 140, 142, 145, 147, 162, 164, 169, 170, 172, 195, 196, 419], "The": [0, 2, 3, 11, 14, 15, 17, 18, 19, 20, 21, 22, 23, 28, 29, 30, 32, 33, 34, 36, 40, 41, 42, 43, 45, 47, 48, 49, 51, 52, 54, 55, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 75, 76, 77, 79, 80, 81, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 106, 108, 110, 111, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 126, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 202, 203, 208, 209, 211, 212, 213, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 231, 232, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 266, 267, 271, 272, 273, 277, 278, 279, 280, 281, 282, 283, 284, 288, 292, 293, 294, 295, 296, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 394, 395, 397, 398, 399, 401, 402, 405, 409, 410, 414, 419, 420, 421], "ar": [0, 2, 3, 4, 6, 9, 10, 14, 19, 20, 21, 23, 24, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 86, 87, 89, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 118, 125, 127, 128, 130, 132, 133, 135, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 172, 173, 174, 179, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 260, 264, 266, 267, 271, 273, 277, 279, 281, 282, 286, 288, 294, 296, 297, 298, 299, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 395, 396, 397, 398, 399, 401, 403, 404, 405, 413, 418, 419, 420], "alexi": [0, 77, 111, 132, 135, 140, 142, 144, 145, 147, 232], "thual": [0, 140, 142, 144, 145, 147], "bertrand": [0, 49, 75, 77, 111, 115, 118, 120, 125, 129, 132, 133, 135, 142, 143, 147, 156, 160, 179, 180, 194, 197, 217, 244, 245, 250, 388, 389, 394], "thirion": [0, 49, 72, 75, 77, 111, 115, 118, 120, 125, 129, 132, 133, 135, 142, 143, 147, 151, 156, 160, 179, 180, 194, 197, 217, 244, 245, 250, 388, 389, 394], "elizabeth": [0, 111, 129, 133, 135, 136, 137, 147, 256, 257], "dupr": [0, 129, 133, 135, 136, 137, 147], "hao": [0, 139, 140, 142, 144, 145, 147], "ting": [0, 139, 140, 142, 144, 145, 147], "wang": [0, 111, 139, 140, 142, 144, 145, 147, 226], "jerom": [0, 77, 125, 129, 131, 132, 133, 135, 136, 144, 147], "dock": [0, 125, 129, 131, 132, 133, 135, 136, 144, 147], "nicola": [0, 111, 139, 140, 141, 142, 143, 144, 147, 200, 219], "gensollen": [0, 139, 140, 141, 142, 143, 144, 147], "taylor": [0, 111, 139, 142, 143, 144, 147, 160], "salo": [0, 139, 142, 143, 144, 147], "yasmin": [0, 144, 145, 147, 169], "mzayek": [0, 144, 145, 147], "some": [0, 3, 6, 14, 15, 30, 40, 41, 43, 48, 49, 56, 66, 68, 69, 71, 80, 84, 86, 92, 98, 103, 104, 113, 114, 125, 132, 138, 141, 142, 144, 147, 154, 155, 157, 159, 161, 162, 164, 166, 169, 170, 172, 173, 174, 181, 187, 193, 195, 196, 198, 199, 202, 222, 242, 243, 244, 245, 248, 254, 264, 277, 280, 282, 304, 367, 368, 371, 374, 375, 382, 392, 398, 401, 419, 420], "past": [0, 56, 113, 149, 306], "present": [0, 3, 6, 40, 41, 54, 56, 65, 69, 70, 101, 108, 113, 128, 147, 152, 153, 154, 161, 163, 164, 165, 170, 172, 174, 183, 193, 211, 242, 243, 244, 245, 249, 250, 292, 305, 306, 310, 311, 313, 314, 386, 387, 388], "alexandr": [0, 49, 111, 115, 116, 118, 119, 120, 122, 125, 132, 134, 135, 147, 160, 180, 197, 389], "gramfort": [0, 49, 111, 115, 118, 134, 135, 147, 160, 180, 197], "binh": [0, 135, 138, 140, 147], "nguyen": [0, 135, 138, 140, 147], "gael": [0, 42, 49, 75, 103, 111, 115, 116, 118, 119, 120, 122, 125, 129, 132, 133, 134, 135, 137, 147, 179, 180, 197, 222, 224, 250, 388, 389, 394], "varoquaux": [0, 42, 48, 49, 56, 75, 103, 111, 114, 115, 116, 118, 119, 120, 122, 125, 129, 132, 133, 134, 135, 137, 147, 148, 149, 153, 154, 156, 160, 169, 179, 180, 194, 197, 222, 224, 244, 245, 249, 250, 388, 389, 394], "julia": [0, 120, 135, 147], "huntenburg": [0, 120, 135, 147], "thoma": [0, 111, 114, 135, 138, 141, 142, 147, 155, 169, 190, 199, 203, 219, 222, 224, 279, 305, 306, 325, 402], "bazeil": [0, 135, 138, 141, 142, 147], "abadi": [0, 120, 122, 125, 132, 147], "abraham": [0, 111, 115, 116, 118, 119, 120, 122, 125, 135, 147, 152, 305, 306, 389], "andr\u00e9": [0, 111, 135, 147, 156, 193, 244, 245], "hoyo": [0, 42, 49, 111, 135, 147, 156, 244, 245, 388, 394], "idrobo": [0, 42, 49, 111, 135, 147, 156, 244, 245, 388, 394], "ben": [0, 56, 103, 107, 111, 115, 116, 118, 120, 122, 147, 306], "cipollini": [0, 103, 107, 115, 116, 118, 120, 122, 147], "chri": [0, 103, 115, 120, 135, 147], "gorgolewski": [0, 103, 111, 114, 115, 120, 147, 194, 209, 222, 224, 227], "danilo": [0, 115, 116, 118, 119, 120, 122, 147], "bzdok": [0, 115, 116, 118, 119, 120, 122, 147], "elvi": [0, 42, 49, 75, 111, 115, 118, 120, 122, 125, 147, 160, 389], "dohmatob": [0, 42, 49, 75, 111, 115, 118, 120, 122, 125, 147, 160, 389], "fabian": [0, 111, 115, 147, 197], "pedregosa": [0, 111, 115, 147, 197], "jean": [0, 49, 111, 115, 129, 132, 147, 161, 180, 183, 217, 222, 224], "kossaifi": [0, 115, 147], "chevali": [0, 77, 132, 135, 147], "kamalakar": [0, 118, 120, 122, 125, 129, 130, 132, 135, 139, 147], "reddi": [0, 118, 120, 122, 125, 129, 130, 131, 132, 135, 139, 147], "daddi": [0, 118, 120, 122, 125, 129, 130, 132, 135, 139, 147], "kshitij": [0, 132, 133, 134, 135, 136, 137, 138, 147], "chawla": [0, 132, 133, 134, 135, 136, 137, 138, 147], "loic": [0, 115, 116, 118, 119, 120, 122, 125, 135, 147], "est\u00e8v": [0, 115, 116, 118, 119, 120, 122, 125, 147], "martin": [0, 111, 120, 125, 139, 147, 190, 212, 231, 282, 401], "perez": [0, 120, 125, 147], "guevara": [0, 120, 125, 147], "eickenberg": [0, 111, 115, 147, 160], "philipp": [0, 111, 115, 147, 217], "gervai": [0, 115, 147], "pierr": [0, 111, 129, 131, 132, 133, 147, 179, 191], "bellec": [0, 111, 132, 133, 147, 191], "salma": [0, 115, 118, 120, 122, 129, 132, 133, 147], "bougacha": [0, 115, 118, 120, 122, 129, 132, 133, 147], "vincent": [0, 49, 111, 115, 147, 160, 190, 197, 217, 232, 306], "michel": [0, 44, 49, 111, 115, 147, 160, 197, 217, 232], "virgil": [0, 42, 75, 77, 102, 105, 106, 115, 147], "fritsch": [0, 42, 75, 77, 102, 105, 106, 115, 147], "mehdi": [0, 115, 119, 120, 129, 135, 147], "rahim": [0, 115, 119, 120, 129, 135, 147], "were": [0, 6, 10, 15, 18, 21, 23, 40, 48, 49, 50, 62, 64, 66, 67, 79, 87, 88, 91, 94, 98, 101, 107, 108, 113, 118, 135, 138, 142, 143, 144, 147, 154, 161, 162, 164, 222, 224, 282, 312, 315, 401], "paid": 0, "niconnect": 0, "french": [0, 169], "investiss": 0, "d": [0, 26, 34, 37, 41, 42, 48, 50, 51, 56, 57, 58, 64, 67, 71, 77, 100, 102, 105, 106, 111, 114, 152, 161, 162, 189, 200, 205, 206, 209, 212, 222, 224, 227, 237, 252, 259, 282, 305, 306, 361, 372, 401, 407], "avenir": 0, "wa": [0, 3, 40, 64, 67, 69, 91, 102, 105, 106, 113, 114, 132, 139, 140, 141, 142, 143, 145, 147, 154, 156, 159, 161, 164, 198, 199, 247, 248, 249, 250, 271, 277, 279, 361, 392], "human": [0, 8, 22, 23, 27, 31, 32, 39, 40, 41, 43, 58, 68, 110, 111, 114, 159, 162, 167, 187, 192, 193, 198, 199, 201, 202, 203, 206, 219, 221, 222, 224, 231, 282, 306, 372, 380, 401], "brain": [0, 2, 3, 4, 6, 9, 12, 15, 20, 21, 22, 23, 27, 31, 32, 36, 39, 41, 43, 44, 46, 52, 54, 55, 59, 64, 66, 67, 69, 70, 76, 78, 79, 80, 85, 89, 92, 94, 96, 98, 100, 104, 107, 111, 113, 114, 120, 123, 125, 126, 127, 129, 130, 132, 133, 135, 138, 140, 141, 147, 148, 150, 154, 155, 156, 157, 159, 160, 162, 163, 164, 167, 168, 169, 172, 174, 179, 180, 187, 189, 191, 192, 194, 195, 197, 198, 200, 202, 205, 206, 207, 208, 212, 213, 219, 221, 222, 224, 225, 226, 231, 233, 234, 237, 242, 243, 244, 245, 246, 247, 248, 249, 250, 259, 282, 284, 287, 289, 294, 305, 306, 308, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 325, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 358, 359, 362, 365, 367, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 389, 390, 391, 397, 401, 411, 420, 421], "previous": [0, 3, 23, 98, 113, 135, 138, 142, 144, 147, 154, 164], "hbp": 0, "also": [0, 3, 4, 11, 14, 15, 17, 22, 23, 29, 31, 34, 39, 40, 41, 42, 43, 49, 50, 51, 55, 56, 62, 63, 66, 68, 70, 71, 72, 75, 77, 79, 86, 89, 91, 93, 94, 95, 98, 108, 113, 114, 118, 120, 125, 126, 128, 132, 135, 138, 141, 142, 144, 147, 148, 149, 152, 153, 155, 156, 157, 159, 161, 162, 163, 164, 166, 167, 169, 170, 172, 173, 174, 175, 181, 195, 196, 197, 222, 224, 227, 242, 243, 244, 245, 247, 248, 264, 266, 271, 277, 289, 293, 297, 302, 303, 305, 316, 317, 318, 319, 320, 321, 322, 360, 361, 365, 366, 368, 373, 374, 375, 376, 387, 390, 391, 395, 396, 419, 421], "support": [0, 9, 15, 29, 32, 33, 34, 35, 44, 98, 105, 113, 118, 127, 128, 129, 132, 133, 134, 135, 139, 140, 142, 143, 144, 145, 147, 154, 155, 157, 159, 164, 167, 168, 242, 243, 244, 245, 252, 305, 309, 312, 376, 378, 379, 395, 405, 420], "digicosm": 0, "dataia": 0, "There": [0, 4, 21, 66, 151, 154, 155, 156, 162, 167, 197, 254, 256, 257, 278, 305, 396, 419], "paper": [0, 48, 49, 113, 114, 151, 161, 162, 164, 222], "publish": [0, 222, 288, 402], "yet": [0, 65, 80, 104, 111, 142, 147, 154, 162, 169, 373], "about": [0, 2, 3, 6, 14, 19, 24, 49, 62, 76, 78, 79, 94, 100, 101, 108, 113, 114, 120, 135, 143, 147, 151, 154, 155, 157, 159, 161, 162, 163, 164, 167, 168, 169, 172, 191, 200, 202, 211, 212, 213, 226, 234, 235, 236, 237, 238, 239, 306, 405], "we": [0, 2, 3, 4, 6, 9, 11, 14, 18, 19, 20, 22, 23, 24, 25, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 125, 133, 134, 135, 140, 142, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 186, 195, 196, 213, 222, 224, 247, 248, 249, 254, 256, 257, 277, 281, 289, 293, 301, 302, 303, 317, 319, 320, 322, 329, 364, 389, 391, 419, 420], "wait": [0, 114, 161], "matur": [0, 58, 111, 205], "bit": [0, 10, 11, 36, 41, 49, 65, 66, 75, 79, 86, 94, 102, 120, 133, 144, 147, 148, 160, 172, 173, 213], "howev": [0, 48, 49, 66, 67, 70, 86, 94, 100, 148, 154, 157, 161, 164, 174, 189, 297, 306, 421], "pattern": [0, 8, 27, 28, 45, 49, 51, 100, 110, 111, 114, 130, 138, 147, 148, 153, 154, 157, 160, 161, 167, 169, 172, 181, 183, 188, 191, 201, 212, 219, 220, 222, 240, 246, 283, 295, 319, 324, 361, 380, 388, 394], "underli": [0, 89, 164, 167, 169, 174, 339], "have": [0, 2, 3, 6, 9, 11, 15, 16, 18, 24, 29, 31, 32, 33, 39, 41, 42, 43, 44, 49, 52, 54, 55, 56, 57, 61, 62, 64, 65, 66, 67, 71, 75, 85, 86, 93, 94, 98, 100, 101, 103, 108, 110, 113, 114, 120, 122, 124, 125, 126, 129, 130, 131, 132, 135, 138, 139, 140, 142, 143, 145, 147, 148, 151, 152, 153, 154, 155, 157, 160, 161, 162, 163, 164, 166, 167, 169, 170, 172, 173, 174, 179, 180, 181, 183, 186, 191, 198, 199, 203, 207, 208, 222, 226, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 257, 264, 271, 272, 277, 278, 279, 281, 282, 284, 293, 297, 298, 299, 301, 302, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 321, 322, 324, 325, 361, 366, 376, 378, 379, 383, 386, 387, 388, 389, 395, 396, 398, 399, 401, 419, 420], "been": [0, 6, 10, 11, 32, 36, 39, 42, 47, 49, 52, 54, 55, 61, 66, 71, 72, 75, 79, 81, 85, 86, 89, 91, 93, 94, 104, 108, 120, 122, 125, 126, 132, 134, 135, 137, 138, 140, 141, 142, 143, 144, 145, 147, 153, 160, 161, 162, 163, 166, 167, 170, 174, 180, 191, 222, 226, 264, 277, 279, 288, 317, 318, 319, 321, 322, 325, 393, 402, 405], "describ": [0, 6, 18, 37, 63, 64, 66, 69, 72, 112, 113, 114, 155, 161, 162, 164, 169, 170, 174, 180, 217, 218, 259, 262, 265, 271, 279, 306, 325, 364], "machin": [0, 29, 34, 44, 49, 94, 112, 139, 147, 155, 156, 157, 162, 167, 168, 220, 420, 421], "neuroimag": [0, 2, 8, 22, 23, 27, 37, 48, 56, 62, 76, 94, 100, 101, 102, 110, 111, 112, 114, 132, 147, 148, 149, 153, 154, 156, 158, 159, 160, 162, 167, 168, 171, 176, 189, 191, 193, 194, 197, 201, 207, 211, 212, 217, 222, 224, 237, 242, 243, 244, 245, 246, 247, 248, 249, 250, 259, 264, 277, 279, 282, 283, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 302, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 360, 361, 365, 367, 368, 370, 373, 374, 375, 380, 382, 383, 387, 389, 392, 393, 395, 396, 399, 402, 405, 409, 419, 421], "suggest": [0, 6, 86, 142, 147, 151, 169, 172, 282, 317, 319, 320, 322, 401], "you": [0, 2, 4, 6, 9, 14, 15, 22, 23, 24, 32, 35, 36, 39, 40, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 66, 70, 75, 79, 86, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 110, 111, 113, 114, 127, 128, 132, 135, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 166, 167, 169, 170, 172, 173, 174, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 203, 208, 211, 212, 213, 215, 216, 217, 220, 221, 222, 226, 227, 232, 264, 266, 271, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 362, 365, 367, 368, 371, 373, 374, 375, 376, 378, 379, 382, 383, 385, 405, 419, 420, 421], "read": [0, 44, 66, 69, 77, 81, 101, 103, 105, 107, 111, 114, 138, 147, 160, 162, 168, 169, 215, 216, 217, 316], "thank": [0, 132, 147, 162, 277, 278], "A": [0, 1, 5, 6, 7, 11, 15, 16, 21, 23, 40, 41, 42, 43, 47, 48, 49, 53, 56, 61, 64, 67, 69, 71, 75, 76, 79, 80, 84, 86, 89, 92, 98, 100, 102, 105, 106, 110, 111, 114, 127, 128, 132, 135, 141, 147, 148, 150, 151, 153, 155, 157, 158, 159, 161, 162, 163, 165, 167, 169, 170, 172, 173, 174, 179, 181, 190, 192, 193, 198, 200, 202, 205, 206, 207, 209, 211, 219, 220, 222, 223, 224, 225, 227, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 255, 256, 257, 260, 263, 264, 267, 273, 277, 282, 283, 289, 294, 295, 302, 304, 305, 306, 307, 317, 318, 319, 320, 321, 322, 325, 336, 337, 338, 341, 357, 358, 361, 365, 370, 374, 377, 382, 387, 389, 390, 391, 396, 397, 399, 400, 401, 402, 418, 419, 421], "huge": [0, 66, 68, 132, 147], "amount": [0, 24, 34, 36, 50, 66, 95, 155, 157, 162, 168, 169, 170, 222, 242, 243, 244, 245, 247, 248, 249, 250, 264, 277, 283, 294, 309, 310, 311, 314, 387, 388, 389], "upon": [0, 223, 264, 277, 360, 373, 374, 375, 382, 389, 391, 399], "reli": [0, 6, 30, 66, 92, 94, 125, 141, 147, 151, 161, 164, 167, 172, 213, 405, 419], "heavili": 0, "research": [0, 167, 172, 174, 208, 306], "who": [0, 114, 174, 306], "invest": 0, "time": [0, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 56, 57, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 122, 131, 132, 138, 139, 140, 142, 144, 145, 147, 148, 150, 151, 152, 153, 154, 157, 159, 162, 164, 165, 167, 168, 170, 171, 172, 173, 179, 181, 183, 208, 229, 231, 232, 242, 243, 244, 245, 247, 248, 249, 250, 264, 265, 266, 268, 269, 270, 271, 274, 275, 276, 277, 279, 282, 283, 294, 297, 299, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 325, 353, 361, 373, 375, 382, 383, 387, 389, 391, 397, 398, 400, 401, 402, 405, 410, 419, 421], "maintain": [0, 135, 141, 145, 147, 162, 170], "deserv": [0, 174], "recognit": [0, 3, 28, 30, 45, 49, 71, 97, 109, 110, 111, 157, 159, 160, 168, 191, 211, 244, 246, 287, 289, 292, 294, 295, 308, 314, 324, 325, 353, 368, 375, 380], "citat": 0, "In": [0, 4, 6, 9, 14, 15, 16, 22, 24, 32, 33, 36, 38, 39, 40, 42, 47, 49, 50, 51, 52, 53, 54, 58, 62, 65, 66, 68, 72, 75, 77, 79, 81, 86, 87, 89, 91, 94, 95, 99, 100, 111, 112, 113, 114, 127, 132, 142, 144, 145, 147, 148, 149, 151, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 169, 170, 171, 172, 173, 174, 179, 186, 189, 191, 195, 196, 197, 212, 219, 222, 224, 226, 242, 243, 244, 245, 247, 248, 251, 254, 256, 257, 264, 266, 271, 277, 279, 280, 297, 298, 299, 301, 319, 325, 361, 362, 373, 386, 395, 398, 405, 419, 420], "need": [0, 2, 3, 6, 9, 16, 20, 30, 31, 33, 41, 42, 48, 49, 50, 51, 55, 56, 62, 63, 66, 69, 75, 77, 78, 79, 80, 81, 84, 89, 91, 92, 98, 99, 100, 101, 103, 104, 108, 113, 114, 132, 135, 142, 147, 148, 152, 154, 155, 156, 157, 162, 164, 166, 167, 170, 172, 173, 174, 186, 251, 254, 255, 299, 304, 305, 309, 310, 312, 321, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 362, 365, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 387, 405, 419, 420], "order": [0, 2, 3, 6, 15, 16, 30, 32, 35, 36, 40, 41, 42, 49, 54, 56, 79, 80, 91, 100, 102, 107, 113, 126, 132, 135, 140, 142, 145, 147, 153, 159, 161, 162, 163, 167, 168, 169, 170, 172, 173, 174, 183, 205, 207, 215, 216, 234, 235, 238, 251, 255, 264, 271, 273, 277, 278, 279, 282, 284, 286, 291, 292, 296, 297, 298, 309, 310, 312, 313, 314, 317, 318, 319, 321, 322, 324, 325, 360, 365, 367, 368, 370, 374, 375, 382, 389, 390, 392, 395, 400, 401, 405, 419, 420], "justifi": 0, "pai": [0, 65], "softwar": [0, 6, 69, 72, 164, 167, 304, 420], "engin": [0, 9, 142, 147, 169, 174, 339, 376, 378, 379, 419, 420], "To": [0, 2, 3, 4, 6, 15, 22, 23, 31, 33, 37, 39, 40, 42, 43, 48, 49, 50, 51, 52, 54, 55, 62, 66, 68, 70, 76, 77, 79, 80, 87, 89, 94, 98, 101, 104, 108, 113, 114, 127, 132, 144, 147, 148, 149, 151, 154, 155, 156, 157, 159, 162, 163, 164, 166, 170, 172, 173, 198, 199, 222, 254, 256, 257, 264, 273, 277, 281, 293, 305, 373, 374, 375, 376, 378, 379, 382, 386, 399, 419], "guarante": [0, 6, 81, 155, 161, 231, 240, 292, 297, 298, 311], "futur": [0, 6, 62, 126, 132, 138, 144, 147, 161, 167, 172, 174, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 264, 277, 280], "toolkit": 0, "us": [0, 1, 2, 4, 6, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 26, 29, 30, 31, 32, 33, 36, 38, 40, 41, 42, 43, 44, 46, 47, 49, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 89, 90, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 120, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 138, 139, 140, 141, 142, 144, 145, 147, 148, 149, 150, 153, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 173, 174, 180, 182, 183, 184, 185, 186, 187, 189, 192, 199, 202, 204, 207, 228, 235, 236, 238, 239, 240, 247, 251, 253, 254, 255, 256, 257, 258, 262, 263, 265, 268, 269, 270, 272, 274, 275, 276, 281, 285, 286, 291, 296, 300, 302, 303, 317, 318, 320, 321, 322, 323, 326, 327, 328, 329, 354, 355, 356, 376, 384, 386, 388, 392, 393, 394, 395, 396, 400, 401, 402, 406, 420, 421], "pleas": [0, 3, 19, 29, 30, 32, 33, 34, 35, 36, 49, 50, 52, 53, 58, 62, 64, 67, 71, 72, 75, 77, 98, 100, 102, 103, 105, 106, 127, 133, 142, 147, 152, 154, 157, 162, 167, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 420], "see": [0, 3, 6, 8, 9, 12, 13, 14, 15, 16, 20, 21, 22, 23, 26, 28, 30, 31, 34, 36, 39, 40, 41, 43, 46, 48, 49, 50, 51, 52, 54, 55, 56, 60, 64, 67, 71, 72, 74, 80, 83, 86, 89, 94, 99, 100, 102, 103, 106, 107, 110, 113, 114, 116, 120, 126, 132, 133, 135, 139, 140, 142, 144, 147, 148, 149, 151, 152, 153, 154, 155, 157, 159, 160, 161, 162, 163, 164, 167, 170, 172, 174, 176, 179, 181, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 211, 212, 217, 219, 220, 221, 222, 224, 226, 229, 230, 231, 232, 237, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 256, 257, 264, 266, 271, 277, 282, 283, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 360, 361, 367, 368, 370, 373, 374, 375, 382, 383, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 401, 405, 410, 411, 419, 420], "document": [0, 2, 3, 4, 6, 19, 26, 43, 44, 49, 50, 56, 98, 100, 103, 107, 111, 112, 113, 116, 118, 120, 122, 124, 125, 126, 127, 132, 135, 137, 142, 143, 147, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 168, 169, 172, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 419, 420], "how": [0, 1, 2, 3, 4, 5, 6, 9, 14, 19, 21, 26, 34, 40, 44, 47, 48, 49, 50, 53, 55, 56, 58, 62, 64, 66, 67, 68, 70, 78, 79, 84, 86, 87, 88, 89, 91, 94, 95, 100, 103, 106, 107, 110, 113, 127, 138, 139, 142, 143, 147, 149, 151, 152, 153, 154, 155, 157, 159, 161, 164, 167, 168, 169, 171, 173, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 420, 421], "introductori": [1, 110], "exampl": [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 65, 66, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 112, 113, 120, 125, 126, 127, 128, 129, 132, 133, 135, 137, 138, 141, 142, 143, 147, 152, 155, 156, 157, 158, 161, 162, 163, 164, 166, 170, 172, 187, 189, 204, 247, 254, 256, 257, 281, 302, 376, 408, 420, 421], "teach": [1, 110, 124, 135, 147, 162], "nilearn": [1, 2, 3, 6, 7, 8, 9, 10, 11, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 114, 115, 119, 120, 122, 123, 125, 126, 127, 130, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 170, 172, 173, 174, 408, 418, 419, 421], "numer": [1, 7, 29, 33, 35, 57, 110, 139, 147, 162, 163, 174, 183, 252, 254, 256, 257, 265, 373, 374, 400], "plot": [1, 2, 4, 7, 8, 19, 20, 21, 23, 25, 26, 27, 29, 30, 31, 33, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 51, 52, 53, 54, 56, 57, 59, 61, 62, 63, 64, 65, 67, 69, 71, 72, 75, 76, 77, 78, 79, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 110, 113, 116, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 144, 145, 147, 149, 152, 153, 154, 159, 162, 163, 164, 166, 167, 168, 169, 170, 173, 174, 179, 188, 193, 195, 196, 201, 205, 206, 208, 211, 212, 215, 225, 231, 233, 264, 277, 283, 294, 295, 308, 315, 319, 397, 399, 404, 405, 420, 421], "python": [1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 118, 127, 133, 134, 135, 140, 142, 145, 147, 154, 161, 162, 168, 169, 170, 293, 420], "manipul": [1, 7, 55, 66, 89, 113, 127, 147, 169, 172, 299, 368, 380, 421], "look": [1, 6, 7, 29, 32, 40, 44, 56, 65, 66, 69, 70, 72, 104, 110, 114, 132, 133, 143, 147, 154, 162, 163, 164, 169, 170, 174, 222, 224, 233, 299, 368, 380], "3d": [1, 3, 4, 6, 7, 8, 15, 16, 18, 19, 23, 24, 25, 27, 29, 30, 32, 34, 36, 37, 42, 44, 47, 71, 75, 77, 83, 84, 94, 96, 100, 102, 104, 105, 110, 113, 118, 122, 129, 131, 132, 133, 135, 139, 140, 144, 147, 164, 167, 168, 169, 171, 173, 174, 193, 195, 196, 199, 200, 201, 202, 223, 225, 231, 233, 242, 243, 244, 245, 246, 247, 248, 249, 250, 279, 281, 283, 284, 287, 289, 290, 291, 292, 301, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 358, 359, 361, 362, 367, 370, 371, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 391, 395, 405, 421], "4d": [1, 3, 4, 6, 7, 8, 11, 16, 18, 20, 25, 27, 29, 30, 31, 32, 34, 36, 41, 47, 48, 49, 52, 53, 54, 56, 58, 84, 85, 87, 89, 91, 92, 94, 95, 98, 100, 102, 104, 110, 112, 122, 129, 132, 133, 138, 145, 147, 149, 152, 153, 154, 157, 167, 169, 171, 174, 190, 192, 194, 195, 196, 197, 198, 200, 208, 212, 218, 225, 233, 246, 249, 250, 279, 281, 282, 283, 287, 288, 289, 290, 292, 294, 301, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 357, 358, 361, 373, 374, 375, 380, 382, 389, 391, 405, 411, 414, 419, 421], "niimg": [1, 7, 33, 54, 77, 79, 89, 91, 92, 98, 110, 113, 129, 132, 135, 140, 144, 147, 151, 169, 171, 173, 174, 200, 225, 233, 242, 243, 244, 245, 246, 247, 248, 249, 250, 259, 264, 267, 277, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 360, 361, 367, 368, 370, 373, 374, 375, 380, 382, 383, 387, 388, 389, 391, 392, 393, 394, 395, 396, 398, 399, 401, 405, 407, 421], "handl": [1, 7, 49, 64, 110, 122, 128, 144, 147, 154, 169, 172, 173, 174, 200, 225, 233, 252, 256, 283, 289, 290, 291, 292, 297, 303, 305, 364, 375, 380, 388, 394], "visual": [1, 7, 12, 14, 27, 28, 32, 33, 39, 45, 47, 48, 50, 56, 64, 66, 69, 71, 72, 79, 80, 83, 86, 87, 88, 89, 91, 92, 94, 96, 101, 102, 104, 105, 106, 108, 111, 112, 127, 129, 132, 138, 140, 147, 148, 149, 150, 158, 162, 163, 166, 169, 171, 173, 188, 190, 191, 194, 195, 197, 198, 200, 207, 211, 212, 216, 217, 219, 221, 225, 233, 283, 284, 287, 289, 290, 292, 294, 295, 297, 301, 308, 311, 314, 316, 319, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 364, 365, 366, 372, 373, 374, 375, 378, 379, 380, 421], "introduct": [1, 7, 110, 111, 132, 145, 147, 155, 157, 158, 162, 165, 166, 168, 174, 211, 242, 256, 257, 289, 294, 365, 374, 382, 421], "fmri": [1, 7, 15, 23, 25, 30, 31, 32, 33, 36, 40, 41, 44, 46, 55, 56, 59, 60, 61, 62, 63, 66, 70, 71, 73, 74, 81, 82, 85, 89, 91, 94, 97, 100, 101, 102, 108, 109, 110, 111, 113, 114, 123, 130, 135, 147, 151, 152, 153, 155, 157, 160, 161, 163, 166, 167, 168, 169, 172, 173, 174, 191, 192, 194, 200, 205, 208, 210, 211, 217, 218, 229, 242, 246, 249, 250, 259, 261, 264, 273, 277, 279, 280, 282, 283, 287, 289, 290, 293, 294, 305, 306, 308, 314, 319, 322, 325, 337, 345, 352, 360, 361, 363, 364, 365, 367, 368, 373, 374, 375, 380, 382, 387, 389, 397, 398, 399, 401, 402, 406, 421], "decod": [1, 7, 36, 39, 40, 42, 44, 45, 97, 109, 111, 113, 114, 127, 128, 132, 135, 138, 139, 140, 141, 142, 143, 147, 155, 159, 163, 167, 168, 169, 174, 211, 214, 221, 231, 264, 267, 283, 287, 289, 294, 308, 314, 315, 338, 364, 365, 374, 375, 379, 380, 382, 397, 399, 404, 405, 420, 421], "intro": [1, 7, 66, 110, 169, 229, 264, 280, 283, 294, 360, 363, 364, 368, 375, 398], "glm": [1, 7, 28, 32, 42, 45, 61, 62, 63, 65, 66, 68, 69, 70, 71, 75, 76, 77, 78, 79, 80, 81, 100, 101, 108, 138, 139, 140, 142, 144, 145, 147, 154, 163, 166, 167, 168, 169, 170, 211, 229, 242, 283, 289, 294, 301, 304, 360, 363, 364, 366, 368, 375, 397, 398, 399, 418, 420, 421], "analysi": [1, 7, 15, 23, 28, 29, 34, 45, 48, 49, 63, 66, 68, 71, 73, 77, 78, 79, 80, 82, 95, 98, 109, 111, 112, 114, 148, 149, 153, 155, 158, 160, 165, 166, 167, 168, 169, 173, 174, 191, 194, 208, 209, 211, 214, 216, 217, 218, 220, 224, 227, 229, 231, 241, 242, 246, 249, 251, 252, 255, 256, 257, 260, 264, 267, 271, 273, 277, 280, 283, 287, 289, 292, 293, 294, 295, 301, 304, 305, 306, 307, 308, 314, 325, 338, 353, 360, 363, 364, 367, 368, 369, 370, 374, 375, 379, 380, 389, 397, 398, 399, 405, 420, 421], "singl": [1, 3, 7, 14, 23, 30, 31, 46, 49, 59, 60, 64, 65, 66, 67, 68, 73, 77, 79, 86, 94, 100, 104, 110, 111, 114, 118, 138, 139, 140, 141, 144, 147, 148, 155, 159, 161, 163, 169, 172, 174, 189, 208, 222, 229, 230, 242, 243, 244, 245, 254, 256, 257, 264, 271, 277, 279, 280, 283, 294, 297, 308, 309, 310, 311, 312, 313, 314, 315, 338, 360, 363, 364, 368, 370, 372, 373, 375, 380, 382, 387, 389, 398, 419], "session": [1, 3, 7, 29, 34, 35, 36, 37, 60, 66, 67, 73, 102, 110, 113, 140, 142, 147, 148, 154, 155, 163, 164, 169, 172, 173, 210, 211, 221, 229, 230, 250, 264, 267, 271, 280, 282, 283, 294, 297, 302, 320, 322, 360, 363, 364, 368, 375, 380, 397, 398, 399, 420], "subject": [1, 3, 7, 11, 15, 16, 17, 18, 21, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 59, 60, 64, 65, 66, 69, 73, 75, 77, 78, 80, 85, 91, 94, 95, 99, 100, 101, 102, 104, 105, 106, 108, 110, 111, 113, 114, 123, 125, 126, 135, 138, 145, 147, 149, 150, 151, 152, 154, 161, 163, 164, 166, 169, 171, 172, 173, 175, 178, 179, 180, 181, 183, 187, 188, 189, 191, 197, 208, 211, 216, 217, 219, 220, 226, 229, 230, 231, 232, 241, 249, 250, 264, 267, 271, 277, 278, 280, 283, 294, 297, 302, 305, 306, 308, 309, 310, 311, 313, 314, 315, 320, 322, 338, 358, 360, 362, 363, 364, 368, 372, 375, 380, 387, 398, 419, 421], "dataset": [1, 3, 4, 7, 9, 10, 13, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 40, 45, 47, 52, 54, 55, 56, 57, 60, 64, 66, 67, 69, 70, 71, 73, 74, 77, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 107, 109, 110, 113, 114, 122, 123, 127, 131, 132, 135, 136, 137, 138, 140, 141, 142, 143, 144, 147, 148, 149, 150, 153, 154, 155, 158, 160, 163, 166, 167, 168, 169, 170, 171, 174, 242, 243, 244, 245, 248, 249, 252, 260, 264, 267, 271, 273, 277, 280, 281, 283, 284, 287, 289, 293, 294, 298, 302, 304, 306, 307, 308, 314, 315, 325, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 363, 364, 367, 368, 369, 370, 372, 375, 376, 377, 378, 379, 380, 382, 383, 390, 397, 398, 399, 405, 419, 421], "click": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 114, 164, 174, 217, 419], "here": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 114, 138, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 166, 169, 170, 173, 174, 208, 247, 248, 254, 256, 257, 279, 318, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 340, 344, 345, 348, 349, 350, 351, 376], "full": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 118, 145, 147, 151, 152, 153, 155, 157, 159, 161, 162, 163, 167, 173, 174, 195, 196, 200, 205, 208, 211, 219, 242, 243, 244, 245, 249, 250, 251, 254, 255, 256, 257, 264, 277, 279, 282, 299, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 372, 387, 389, 391, 397, 401], "code": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 121, 138, 142, 144, 147, 148, 152, 153, 155, 157, 161, 163, 167, 174, 187, 246, 250, 264, 277, 310, 313, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 371, 389, 397, 399, 413, 415, 420], "run": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 113, 122, 126, 140, 142, 144, 147, 148, 149, 151, 155, 158, 159, 160, 161, 162, 163, 169, 170, 172, 174, 181, 183, 211, 217, 249, 250, 264, 267, 282, 306, 314, 325, 363, 386, 401, 419, 420, 421], "your": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 112, 114, 149, 153, 154, 155, 157, 159, 170, 172, 174, 195, 196, 208, 213, 242, 243, 244, 245, 249, 250, 255, 311, 314, 387, 418, 419, 421], "browser": [2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 132, 135, 137, 147, 174, 264, 277, 339, 381, 382, 383, 384, 385, 397, 399, 419], "via": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 116, 147, 149, 150, 154, 157, 160, 163, 172, 192, 247, 248, 264, 273, 317, 318, 319, 321, 322], "binder": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 137, 147], "discov": [2, 162, 168], "come": [2, 3, 6, 14, 16, 42, 52, 54, 58, 75, 80, 94, 113, 149, 154, 155, 161, 162, 169, 170, 173, 174, 208, 419], "function": [2, 3, 4, 6, 8, 9, 11, 13, 14, 15, 17, 18, 21, 22, 25, 26, 27, 29, 30, 32, 34, 35, 36, 43, 48, 49, 52, 53, 55, 56, 58, 59, 60, 62, 64, 65, 66, 67, 69, 71, 72, 73, 74, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 102, 104, 108, 109, 111, 113, 114, 116, 118, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 151, 154, 155, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 416, 417, 420, 421], "public": [2, 14, 62, 100, 114, 142, 144, 145, 147, 162, 167, 226], "let": [2, 3, 4, 6, 14, 15, 40, 49, 56, 63, 64, 66, 69, 71, 75, 77, 78, 79, 86, 93, 98, 155, 169, 281, 293], "": [2, 3, 4, 6, 9, 10, 11, 16, 18, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 77, 78, 79, 80, 85, 86, 89, 91, 92, 93, 94, 95, 100, 102, 103, 104, 105, 108, 111, 114, 125, 132, 138, 142, 143, 148, 151, 155, 158, 159, 161, 162, 164, 165, 166, 167, 169, 170, 172, 173, 174, 179, 180, 181, 189, 191, 192, 200, 202, 203, 205, 206, 212, 217, 219, 222, 224, 226, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 256, 257, 264, 277, 281, 282, 291, 293, 297, 298, 299, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 361, 362, 371, 377, 381, 386, 387, 388, 389, 399, 401, 419, 421], "first": [2, 6, 11, 14, 16, 18, 20, 23, 25, 30, 32, 33, 34, 35, 40, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 64, 65, 67, 70, 73, 75, 77, 80, 81, 84, 86, 89, 91, 92, 93, 94, 95, 97, 104, 105, 109, 111, 113, 114, 115, 132, 133, 135, 138, 140, 142, 143, 147, 148, 149, 151, 152, 153, 155, 157, 158, 161, 162, 164, 165, 166, 170, 171, 172, 173, 181, 183, 209, 210, 213, 214, 218, 219, 222, 224, 227, 231, 234, 235, 238, 241, 242, 243, 244, 245, 249, 250, 252, 260, 264, 267, 271, 273, 277, 279, 283, 288, 289, 298, 299, 302, 304, 305, 307, 310, 313, 314, 321, 325, 363, 364, 367, 369, 374, 375, 376, 377, 378, 379, 380, 385, 386, 387, 389, 397, 398, 399, 401, 405, 421], "check": [2, 3, 15, 29, 30, 32, 33, 34, 35, 36, 77, 93, 94, 98, 105, 113, 122, 125, 147, 149, 154, 157, 161, 162, 169, 170, 172, 174, 181, 183, 213, 233, 242, 243, 244, 245, 265, 292, 305, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 419], "where": [2, 6, 9, 14, 15, 16, 23, 24, 40, 44, 50, 70, 77, 84, 87, 94, 100, 105, 110, 125, 139, 147, 148, 152, 154, 159, 160, 162, 164, 167, 170, 173, 174, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 242, 243, 244, 245, 247, 248, 251, 254, 255, 256, 257, 260, 264, 277, 279, 316, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 360, 363, 365, 368, 369, 370, 373, 374, 375, 376, 377, 379, 380, 382, 389, 391, 398, 405, 419], "our": [2, 3, 14, 19, 29, 34, 40, 49, 51, 56, 58, 66, 68, 94, 98, 101, 113, 114, 132, 142, 147, 149, 154, 161, 162, 164, 420], "disk": [2, 3, 4, 6, 14, 101, 103, 107, 108, 113, 114, 132, 138, 139, 144, 147, 154, 162, 172, 173, 174, 204, 214, 222, 224, 227, 242, 243, 264, 277, 316, 376, 378, 379, 397, 399], "import": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 113, 114, 125, 131, 132, 133, 135, 138, 140, 142, 147, 148, 149, 152, 154, 155, 156, 157, 159, 161, 162, 163, 166, 167, 169, 170, 172, 173, 174, 252, 254, 256, 257, 264, 277, 281, 284, 289, 293, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 371, 399, 405, 418, 419], "print": [2, 3, 4, 6, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 62, 64, 69, 70, 71, 72, 75, 77, 81, 85, 89, 91, 92, 93, 94, 95, 98, 101, 102, 103, 104, 105, 107, 108, 113, 154, 161, 169, 172, 181, 189, 249, 250, 264, 277, 289, 311, 312, 313, 314, 315], "store": [2, 3, 14, 26, 29, 44, 49, 50, 51, 52, 54, 70, 94, 101, 108, 114, 152, 154, 159, 162, 195, 196, 233, 254, 256, 257, 295, 316, 325, 369], "r": [2, 4, 9, 14, 15, 24, 30, 34, 40, 41, 47, 51, 56, 71, 94, 108, 111, 135, 142, 147, 163, 170, 187, 192, 197, 199, 200, 203, 205, 209, 227, 247, 248, 264, 277, 282, 304, 305, 306, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 362, 367, 371, 399, 401, 419], "get_data_dir": [2, 14, 125, 147, 172], "home": [2, 3, 6, 10, 11, 14, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 75, 77, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108, 169, 172, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 292], "runner": [2, 3, 6, 10, 11, 14, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 75, 77, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108], "nilearn_data": [2, 3, 6, 10, 11, 14, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 75, 77, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108, 195, 196, 233], "now": [2, 3, 6, 14, 16, 20, 22, 25, 29, 40, 44, 49, 50, 51, 55, 56, 63, 65, 66, 71, 79, 81, 84, 86, 92, 93, 94, 100, 101, 103, 104, 108, 113, 118, 120, 122, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 154, 160, 162, 168, 170, 173, 242, 243, 244, 245, 249, 250, 251, 254, 255, 256, 257, 281, 289, 293, 309, 311, 312, 314, 387, 418], "retriev": [2, 20, 22, 44, 48, 90, 91, 92, 113, 142, 147, 149, 154, 157, 168, 172, 174, 203, 229, 230, 233, 305, 306, 354, 355], "motor": [2, 14, 16, 17, 51, 66, 69, 77, 79, 91, 97, 109, 110, 217, 287, 308, 314, 325, 367, 419], "contrast": [2, 6, 8, 14, 15, 16, 27, 33, 64, 65, 67, 68, 71, 75, 76, 77, 78, 79, 80, 81, 88, 90, 101, 105, 106, 108, 110, 125, 129, 130, 139, 142, 147, 153, 159, 164, 165, 166, 167, 215, 216, 217, 223, 225, 253, 254, 256, 257, 258, 260, 261, 262, 264, 277, 279, 304, 360, 363, 373, 374, 375, 380, 382, 386, 399, 419, 421], "neurovault": [2, 14, 16, 97, 109, 110, 111, 112, 128, 135, 140, 144, 147, 167, 222, 223, 224, 225, 234, 287, 292, 293, 295, 299, 308, 314, 367, 375, 380, 421], "repositori": [2, 111, 112, 162, 167, 170, 172, 212, 222, 224, 421], "motor_imag": [2, 9, 13, 14, 15, 16, 90, 93, 419], "fetch_neurovault_motor_task": [2, 9, 13, 14, 15, 16, 90, 93, 132, 147, 223, 419], "imag": [2, 6, 10, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 62, 63, 64, 66, 67, 68, 70, 71, 75, 76, 77, 78, 79, 80, 84, 86, 87, 88, 89, 91, 92, 94, 96, 98, 100, 101, 102, 104, 105, 106, 108, 111, 112, 118, 120, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 139, 140, 141, 142, 143, 144, 145, 147, 149, 151, 152, 153, 154, 155, 159, 160, 162, 164, 167, 169, 171, 179, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 208, 211, 212, 213, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 229, 230, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 259, 261, 264, 267, 277, 278, 279, 280, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 398, 399, 401, 402, 405, 411, 421], "collection_658": [2, 14], "image_10426": [2, 14], "nii": [2, 3, 4, 6, 10, 11, 14, 16, 18, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 64, 75, 77, 85, 86, 89, 91, 92, 94, 95, 101, 102, 104, 105, 108, 113, 169, 172, 267, 302, 304, 305, 306, 376, 377, 378, 379, 385, 403], "gz": [2, 3, 4, 6, 10, 11, 14, 16, 18, 22, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 64, 75, 77, 85, 86, 89, 91, 92, 94, 95, 101, 102, 104, 105, 113, 169, 170, 172, 304, 305, 306, 376, 377, 378, 379, 385, 403, 404], "filenam": [2, 3, 4, 10, 15, 50, 55, 61, 94, 113, 125, 135, 142, 143, 147, 149, 152, 153, 172, 173, 195, 196, 227, 240, 242, 243, 244, 245, 247, 248, 292, 304, 308, 311, 314, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 365, 373], "take": [2, 3, 4, 6, 9, 24, 29, 33, 40, 42, 43, 49, 50, 65, 66, 68, 69, 71, 72, 77, 79, 94, 98, 100, 103, 108, 113, 129, 132, 135, 141, 147, 148, 149, 151, 154, 157, 159, 161, 162, 163, 164, 172, 174, 179, 213, 222, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 250, 264, 266, 271, 279, 324, 325, 329, 387, 389, 391, 405, 416, 419], "tmap_filenam": [2, 88], "0": [2, 3, 4, 5, 6, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 148, 149, 152, 154, 160, 161, 162, 163, 164, 172, 173, 174, 179, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 301, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 360, 361, 362, 367, 371, 372, 373, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 394, 395, 398, 399, 401, 402, 405, 419, 420], "contain": [2, 3, 4, 6, 10, 11, 22, 23, 36, 40, 49, 52, 55, 62, 64, 69, 79, 84, 86, 91, 94, 101, 106, 107, 108, 113, 114, 122, 127, 132, 135, 144, 147, 148, 154, 155, 158, 161, 162, 164, 167, 170, 172, 174, 179, 180, 181, 183, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 211, 221, 222, 223, 224, 225, 226, 232, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 256, 257, 258, 264, 267, 277, 278, 279, 282, 283, 291, 297, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 325, 370, 371, 376, 377, 378, 379, 383, 385, 386, 387, 388, 389, 390, 397, 399, 401, 403, 404, 405, 410, 421], "easili": [2, 3, 9, 15, 30, 31, 39, 49, 58, 94, 113, 114, 142, 147, 154, 155, 157, 159, 160, 161, 162, 163, 167, 170, 195, 196, 217, 277], "statist": [2, 6, 8, 14, 22, 23, 27, 33, 36, 40, 42, 49, 64, 65, 66, 67, 69, 71, 74, 75, 82, 83, 96, 100, 101, 102, 103, 105, 108, 111, 112, 120, 127, 128, 138, 140, 144, 147, 148, 153, 156, 159, 162, 163, 165, 167, 168, 169, 173, 174, 180, 183, 193, 201, 216, 222, 223, 224, 225, 231, 252, 253, 254, 256, 257, 258, 259, 260, 264, 277, 279, 280, 282, 301, 304, 325, 338, 339, 367, 370, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 389, 391, 398, 399, 401, 405, 414, 420, 421], "map": [2, 3, 8, 11, 14, 15, 19, 20, 22, 23, 27, 33, 37, 39, 44, 46, 50, 51, 52, 53, 54, 56, 59, 61, 62, 64, 66, 67, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 83, 84, 87, 89, 90, 91, 92, 93, 96, 97, 99, 101, 102, 104, 108, 109, 110, 111, 112, 120, 124, 127, 128, 132, 133, 135, 138, 139, 142, 147, 149, 150, 153, 155, 157, 158, 159, 162, 163, 164, 165, 167, 168, 169, 172, 173, 174, 179, 180, 181, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 208, 212, 215, 216, 217, 222, 223, 224, 225, 226, 231, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250, 259, 260, 264, 273, 277, 279, 280, 282, 284, 290, 299, 301, 304, 308, 309, 310, 311, 312, 313, 314, 315, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 359, 361, 367, 368, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 393, 396, 398, 399, 401, 405, 414, 421], "plot_stat_map": [2, 6, 9, 15, 17, 29, 30, 31, 36, 39, 40, 42, 43, 48, 50, 55, 61, 64, 65, 66, 67, 70, 71, 75, 76, 77, 81, 85, 87, 88, 90, 92, 93, 94, 98, 100, 102, 103, 104, 106, 107, 113, 120, 131, 132, 139, 140, 142, 143, 147, 152, 154, 166, 174, 382, 419], "displai": [2, 3, 4, 6, 10, 11, 13, 16, 17, 18, 20, 21, 22, 23, 25, 26, 39, 40, 42, 47, 48, 49, 50, 51, 55, 57, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 75, 80, 81, 84, 86, 87, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 105, 106, 124, 129, 130, 132, 133, 135, 139, 140, 142, 144, 145, 147, 149, 152, 153, 159, 164, 168, 173, 264, 271, 277, 310, 313, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 389, 397, 399, 421], "_slicer": [2, 3, 4, 6, 9, 10, 15, 16, 17, 25, 39, 48, 49, 50, 64, 67, 70, 75, 81, 86, 88, 89, 92, 94, 98, 142, 147], "orthoslic": [2, 3, 4, 6, 10, 15, 16, 17, 25, 48, 50, 64, 67, 70, 75, 81, 86, 89, 94, 98, 142, 147, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 419], "object": [2, 3, 4, 5, 6, 9, 10, 13, 14, 15, 16, 17, 25, 28, 30, 32, 33, 36, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 64, 67, 70, 75, 81, 86, 88, 89, 91, 92, 94, 98, 110, 111, 113, 114, 124, 127, 135, 138, 141, 142, 144, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 161, 162, 163, 167, 168, 169, 171, 173, 179, 180, 181, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 256, 257, 259, 264, 267, 277, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 404, 405, 407, 410, 413, 419, 421], "0x7fdb58190490": 2, "better": [2, 3, 30, 33, 42, 43, 49, 66, 94, 100, 103, 111, 119, 123, 126, 132, 140, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 161, 163, 173, 180, 373, 389, 405, 421], "threshold": [2, 3, 9, 13, 14, 16, 17, 23, 30, 33, 36, 37, 39, 40, 42, 48, 49, 50, 54, 55, 56, 61, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77, 79, 80, 81, 87, 88, 89, 90, 93, 94, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 114, 120, 133, 135, 139, 142, 144, 147, 149, 152, 161, 164, 165, 167, 173, 213, 234, 235, 238, 249, 259, 263, 264, 277, 279, 280, 281, 301, 305, 306, 318, 319, 320, 321, 322, 323, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 359, 360, 362, 367, 368, 370, 373, 374, 375, 376, 378, 379, 381, 382, 383, 385, 388, 389, 394, 398, 399, 419, 421], "3": [2, 3, 4, 6, 7, 11, 12, 13, 14, 15, 16, 17, 20, 21, 23, 25, 27, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 79, 80, 81, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 102, 103, 104, 105, 107, 108, 111, 115, 119, 122, 125, 126, 129, 132, 133, 134, 135, 140, 141, 142, 143, 152, 159, 160, 163, 164, 173, 174, 180, 181, 183, 185, 186, 187, 191, 192, 194, 197, 198, 199, 201, 202, 203, 208, 209, 212, 219, 222, 224, 227, 231, 232, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 256, 257, 259, 264, 266, 271, 277, 280, 289, 291, 293, 294, 297, 299, 305, 306, 310, 311, 313, 314, 317, 319, 320, 322, 324, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 358, 360, 362, 365, 367, 368, 371, 373, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 394, 399, 405, 407, 419, 420], "0x7fdb581f9d30": 2, "rest": [2, 3, 6, 23, 30, 32, 33, 35, 41, 48, 50, 54, 55, 56, 62, 70, 85, 87, 89, 92, 98, 100, 111, 123, 127, 147, 151, 152, 153, 157, 161, 167, 169, 172, 188, 190, 191, 200, 219, 232, 241, 250, 303, 305, 306, 314, 372, 389, 421], "state": [2, 23, 30, 32, 48, 49, 50, 54, 56, 66, 85, 87, 89, 92, 100, 111, 127, 138, 140, 147, 148, 149, 151, 152, 153, 155, 160, 164, 167, 169, 170, 188, 190, 191, 219, 232, 242, 243, 244, 245, 246, 249, 250, 264, 273, 279, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 387, 389, 401, 421], "network": [2, 8, 19, 20, 21, 27, 46, 47, 48, 51, 54, 55, 60, 72, 73, 83, 86, 94, 96, 101, 110, 111, 114, 124, 138, 144, 147, 148, 149, 150, 152, 162, 163, 167, 168, 169, 174, 188, 190, 191, 197, 199, 200, 203, 205, 206, 207, 217, 219, 264, 271, 289, 305, 306, 308, 313, 315, 338, 359, 371, 372, 373, 375, 380, 389, 397, 399, 419, 421], "smith": [2, 21, 83, 94, 96, 110, 111, 148, 167, 200, 219, 279, 289, 308, 313, 325, 359, 373, 375, 380, 389], "2009": [2, 21, 111, 119, 138, 141, 147, 167, 169, 193, 200, 212, 213, 219, 237, 279, 325], "studi": [2, 6, 31, 33, 40, 42, 56, 66, 71, 75, 97, 99, 109, 110, 111, 114, 150, 155, 157, 158, 160, 161, 164, 168, 172, 191, 212, 222, 224, 226, 234, 237, 246, 287, 292, 293, 295, 299, 305, 306, 308, 314, 367, 375, 380, 421], "correspond": [2, 3, 6, 14, 24, 29, 30, 33, 34, 36, 39, 40, 44, 49, 55, 56, 63, 65, 66, 69, 70, 72, 77, 78, 79, 80, 81, 86, 91, 92, 94, 101, 102, 108, 111, 137, 139, 147, 149, 154, 155, 157, 159, 161, 162, 164, 167, 168, 170, 174, 179, 189, 194, 197, 200, 207, 213, 217, 224, 226, 234, 235, 238, 242, 243, 244, 245, 247, 248, 249, 250, 260, 264, 266, 267, 271, 273, 277, 278, 279, 293, 294, 297, 302, 309, 311, 312, 314, 317, 318, 319, 320, 321, 322, 323, 325, 354, 355, 360, 361, 365, 368, 369, 371, 373, 374, 375, 377, 387, 389, 390, 392, 395, 398, 405], "between": [2, 6, 9, 22, 23, 24, 30, 40, 42, 49, 50, 51, 55, 62, 66, 69, 71, 72, 75, 77, 79, 80, 86, 89, 92, 99, 100, 102, 105, 120, 127, 132, 135, 138, 141, 147, 148, 149, 150, 152, 154, 155, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 187, 199, 219, 237, 244, 245, 250, 264, 277, 282, 319, 325, 326, 328, 329, 356, 360, 362, 367, 369, 371, 373, 374, 375, 376, 378, 379, 382, 387, 398, 399, 401, 405], "task": [2, 3, 14, 17, 29, 30, 31, 34, 39, 49, 60, 62, 66, 69, 73, 77, 81, 89, 92, 97, 103, 109, 110, 111, 132, 143, 147, 153, 154, 155, 158, 161, 163, 164, 167, 168, 169, 170, 174, 180, 183, 211, 214, 216, 217, 241, 264, 267, 283, 287, 302, 308, 314, 315, 325, 338, 353, 364, 366, 367, 375, 380], "rsn": [2, 21, 87, 127, 147, 190, 200], "fetch_atlas_smith_2009": [2, 21, 87], "rsn10": [2, 21, 87, 200], "smith_2009": 2, "pnas_smith09_rsn10": 2, "It": [2, 3, 6, 9, 14, 15, 22, 34, 41, 42, 44, 48, 51, 61, 62, 65, 66, 71, 75, 77, 81, 86, 89, 94, 98, 100, 101, 108, 112, 113, 114, 118, 122, 125, 126, 128, 139, 140, 141, 142, 147, 148, 149, 154, 155, 157, 158, 159, 161, 162, 164, 167, 168, 169, 170, 172, 173, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 420], "nifti": [2, 4, 10, 11, 16, 18, 25, 29, 30, 32, 34, 35, 36, 41, 47, 48, 49, 52, 53, 54, 56, 58, 77, 79, 84, 86, 89, 91, 92, 94, 95, 102, 104, 105, 113, 120, 138, 144, 147, 149, 153, 154, 162, 171, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 203, 208, 211, 215, 216, 217, 220, 221, 226, 242, 243, 247, 248, 249, 250, 283, 284, 287, 291, 292, 293, 297, 300, 365, 387, 390, 405, 419, 421], "load": [2, 4, 6, 8, 21, 23, 27, 49, 52, 53, 54, 58, 61, 62, 64, 67, 69, 70, 77, 88, 89, 91, 93, 102, 103, 104, 105, 106, 107, 108, 110, 112, 125, 127, 130, 132, 141, 142, 144, 145, 147, 150, 153, 157, 158, 161, 162, 169, 171, 173, 187, 188, 191, 193, 195, 196, 197, 200, 201, 205, 206, 207, 208, 211, 212, 213, 216, 217, 220, 221, 222, 224, 226, 231, 232, 234, 235, 236, 237, 238, 239, 249, 250, 267, 281, 292, 293, 295, 305, 306, 362, 378, 380, 381, 385, 403, 404, 410, 419, 421], "memori": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 124, 132, 133, 147, 151, 152, 161, 173, 174, 180, 231, 242, 243, 244, 245, 247, 248, 249, 250, 252, 257, 264, 267, 277, 283, 287, 297, 298, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 383, 387, 388, 389, 400, 419], "its": [2, 3, 15, 19, 26, 29, 30, 31, 32, 33, 34, 35, 36, 40, 44, 48, 50, 56, 66, 69, 84, 88, 89, 90, 92, 94, 98, 100, 108, 113, 114, 124, 127, 135, 138, 140, 142, 144, 147, 148, 151, 153, 154, 155, 157, 159, 160, 161, 162, 164, 166, 167, 170, 174, 186, 199, 201, 211, 222, 223, 224, 225, 242, 243, 244, 245, 247, 248, 249, 250, 251, 255, 264, 266, 271, 277, 278, 279, 281, 292, 360, 361, 362, 365, 367, 368, 371, 373, 374, 375, 376, 377, 378, 379, 386, 387, 388, 389, 414], "shape": [2, 3, 20, 23, 25, 40, 41, 43, 47, 49, 50, 51, 53, 54, 55, 56, 58, 61, 64, 65, 66, 67, 68, 69, 71, 84, 91, 93, 94, 98, 100, 102, 103, 105, 106, 107, 108, 113, 140, 141, 147, 149, 151, 152, 154, 157, 163, 164, 167, 169, 171, 174, 179, 180, 181, 183, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 220, 226, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 260, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 282, 283, 284, 287, 288, 289, 293, 294, 297, 298, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 358, 362, 363, 371, 381, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 401, 402, 421], "load_img": [2, 36, 93, 94, 107, 125, 147, 172, 173], "91": [2, 30, 33, 42, 43, 44, 56, 72, 77, 91, 102, 105, 141, 147, 189, 200], "109": [2, 33, 41, 43, 56, 91, 141, 147, 189, 200], "10": [2, 5, 6, 9, 11, 12, 15, 21, 22, 23, 24, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 53, 55, 56, 57, 58, 61, 62, 63, 66, 71, 72, 76, 77, 79, 81, 82, 87, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 108, 111, 114, 119, 132, 142, 145, 147, 148, 151, 154, 155, 156, 159, 160, 161, 163, 164, 179, 180, 183, 187, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 211, 212, 217, 219, 220, 221, 222, 224, 226, 227, 231, 232, 237, 242, 243, 244, 245, 246, 247, 248, 249, 250, 259, 267, 279, 282, 305, 306, 310, 313, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 361, 386, 387, 388, 389, 394, 401, 402, 405, 419], "note": [2, 3, 4, 6, 14, 15, 20, 23, 42, 43, 44, 48, 49, 52, 54, 55, 56, 58, 64, 65, 66, 67, 69, 70, 75, 76, 79, 84, 86, 91, 94, 95, 101, 104, 108, 111, 113, 114, 142, 147, 148, 149, 153, 159, 160, 161, 162, 163, 164, 169, 170, 172, 173, 174, 179, 181, 186, 187, 189, 190, 191, 194, 199, 200, 203, 208, 211, 212, 213, 215, 216, 219, 221, 222, 223, 224, 225, 226, 227, 233, 234, 235, 238, 242, 243, 244, 245, 246, 247, 248, 251, 254, 255, 256, 257, 259, 260, 261, 262, 264, 277, 280, 282, 288, 291, 293, 294, 297, 300, 304, 305, 306, 310, 313, 316, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 360, 361, 365, 367, 374, 375, 386, 387, 390, 401, 402, 405, 419], "index": [2, 6, 12, 20, 22, 23, 33, 40, 41, 50, 55, 56, 64, 65, 66, 69, 72, 87, 88, 100, 101, 103, 124, 142, 147, 152, 189, 190, 198, 199, 201, 209, 228, 241, 242, 243, 244, 245, 254, 256, 257, 271, 289, 297, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 377, 389, 391, 401, 405], "start": [2, 6, 30, 40, 48, 49, 50, 56, 58, 69, 71, 84, 91, 92, 94, 103, 104, 144, 147, 154, 161, 162, 167, 168, 170, 174, 202, 264, 266, 271, 308, 309, 310, 311, 312, 313, 314, 315, 325, 389, 405], "first_rsn": 2, "index_img": [2, 3, 20, 29, 30, 31, 32, 33, 34, 36, 37, 49, 50, 87, 89, 92, 98, 102, 104, 149, 152, 173, 174, 283, 290], "0x7fdb58083d00": 2, "If": [2, 9, 14, 15, 24, 32, 35, 36, 40, 41, 42, 43, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 62, 70, 75, 79, 84, 86, 89, 91, 92, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 113, 114, 132, 139, 140, 142, 147, 148, 152, 154, 155, 157, 159, 161, 162, 164, 167, 169, 170, 172, 173, 174, 179, 180, 181, 183, 185, 186, 187, 188, 193, 194, 195, 196, 198, 205, 206, 207, 208, 212, 213, 215, 216, 217, 220, 222, 224, 226, 227, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 260, 261, 264, 271, 273, 277, 278, 279, 280, 281, 282, 283, 287, 288, 292, 294, 295, 296, 297, 298, 299, 301, 302, 304, 305, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 395, 397, 398, 399, 400, 401, 405, 419, 420], "want": [2, 6, 9, 14, 15, 42, 49, 54, 66, 71, 72, 78, 86, 94, 98, 100, 110, 113, 114, 148, 155, 157, 161, 162, 164, 170, 173, 174, 222, 224, 247, 248, 297, 306, 378, 385, 419, 420], "iter_img": [2, 48, 173, 289], "them": [2, 3, 6, 14, 19, 30, 32, 39, 42, 44, 49, 50, 54, 55, 58, 62, 64, 65, 67, 69, 71, 72, 79, 80, 86, 89, 94, 100, 103, 104, 108, 110, 113, 114, 118, 120, 132, 138, 139, 141, 144, 147, 148, 149, 153, 155, 157, 162, 164, 167, 168, 169, 172, 174, 189, 222, 224, 267, 324, 325, 387, 419], "Then": [2, 3, 14, 30, 40, 42, 50, 51, 55, 62, 63, 69, 94, 95, 152, 154, 156, 157, 162, 173, 174, 179, 181, 213, 386], "give": [2, 3, 4, 9, 14, 15, 16, 24, 29, 33, 42, 49, 52, 54, 55, 56, 58, 69, 84, 91, 94, 98, 103, 113, 125, 127, 142, 147, 148, 149, 151, 153, 154, 155, 156, 157, 159, 161, 169, 173, 174, 215, 216, 224, 242, 243, 244, 245, 246, 249, 250, 251, 259, 264, 266, 271, 277, 279, 294, 299, 302, 309, 310, 311, 312, 313, 314, 315, 316, 323, 372, 377, 378, 386, 387, 389, 391, 395, 396, 405], "few": [2, 14, 15, 25, 39, 40, 49, 77, 81, 91, 102, 130, 131, 147, 153, 155, 158, 160, 162, 163, 170, 173, 387, 405, 421], "argument": [2, 6, 9, 14, 15, 17, 43, 48, 55, 68, 70, 80, 89, 92, 94, 114, 124, 125, 127, 128, 129, 130, 132, 133, 135, 138, 139, 140, 141, 142, 144, 147, 154, 155, 157, 159, 161, 162, 163, 166, 172, 183, 187, 195, 196, 222, 233, 242, 243, 244, 245, 246, 267, 277, 279, 293, 296, 306, 321, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 366, 368, 370, 372, 378, 379, 383, 419], "more": [2, 3, 4, 6, 8, 9, 13, 14, 16, 19, 21, 22, 23, 26, 27, 28, 29, 31, 33, 39, 40, 42, 43, 46, 48, 49, 50, 52, 54, 55, 56, 58, 60, 61, 62, 64, 66, 69, 70, 71, 74, 75, 77, 79, 80, 83, 86, 89, 91, 94, 98, 100, 101, 102, 103, 105, 107, 108, 110, 112, 113, 114, 116, 121, 125, 127, 129, 131, 132, 135, 137, 141, 142, 143, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 167, 169, 170, 172, 173, 174, 180, 187, 189, 190, 191, 192, 197, 199, 200, 202, 203, 208, 211, 212, 213, 217, 219, 222, 224, 225, 226, 231, 234, 235, 237, 238, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 254, 256, 257, 264, 277, 279, 283, 294, 302, 306, 309, 310, 311, 314, 325, 336, 338, 341, 343, 345, 347, 349, 351, 353, 360, 373, 374, 375, 380, 382, 383, 386, 387, 388, 389, 391, 398, 405, 408, 419, 420, 421], "compact": [2, 94, 173, 213], "img": [2, 4, 6, 10, 50, 62, 71, 77, 79, 84, 90, 101, 105, 127, 135, 147, 152, 172, 246, 249, 250, 277, 279, 281, 282, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 308, 309, 310, 311, 312, 313, 314, 315, 316, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 359, 361, 368, 369, 387, 389, 392, 393, 395, 396, 398, 405, 419], "display_mod": [2, 6, 9, 13, 14, 15, 18, 30, 31, 36, 39, 40, 42, 43, 48, 49, 53, 58, 62, 65, 66, 70, 71, 75, 76, 79, 87, 88, 92, 101, 102, 105, 106, 107, 113, 125, 142, 147, 264, 277, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 360, 362, 365, 367, 368, 371, 373, 374, 375, 399, 419], "z": [2, 13, 14, 15, 18, 24, 30, 33, 36, 40, 42, 43, 48, 52, 54, 58, 61, 62, 65, 66, 67, 69, 70, 71, 75, 76, 79, 80, 81, 84, 87, 88, 94, 101, 102, 105, 106, 108, 111, 127, 129, 133, 144, 147, 164, 167, 170, 173, 174, 197, 222, 252, 259, 263, 264, 277, 280, 284, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 325, 326, 328, 329, 333, 334, 335, 336, 337, 344, 345, 350, 351, 352, 353, 354, 355, 356, 359, 360, 361, 362, 365, 367, 368, 371, 373, 374, 375, 376, 377, 378, 379, 382, 385, 390, 398, 399, 401, 419], "cut_coord": [2, 6, 9, 15, 16, 17, 18, 20, 30, 31, 36, 39, 40, 42, 43, 48, 49, 50, 55, 61, 65, 66, 67, 70, 71, 75, 77, 79, 81, 86, 87, 88, 90, 92, 93, 94, 100, 102, 105, 106, 107, 120, 147, 152, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 360, 365, 368, 373, 374, 375, 382, 419], "1": [2, 3, 5, 6, 7, 9, 10, 11, 12, 15, 18, 21, 22, 23, 24, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 114, 120, 122, 126, 127, 129, 132, 134, 135, 142, 144, 145, 148, 152, 154, 155, 156, 157, 159, 160, 161, 164, 170, 172, 174, 179, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 264, 267, 271, 273, 277, 279, 281, 282, 286, 289, 291, 294, 297, 299, 305, 306, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 361, 362, 367, 369, 371, 372, 373, 374, 376, 378, 379, 382, 387, 388, 389, 394, 396, 401, 402, 405, 419, 420], "colorbar": [2, 6, 9, 14, 20, 21, 23, 25, 26, 36, 37, 40, 48, 50, 51, 54, 57, 58, 62, 69, 70, 75, 76, 77, 79, 80, 86, 87, 88, 94, 101, 103, 105, 108, 118, 124, 127, 132, 133, 135, 139, 140, 141, 142, 143, 145, 147, 152, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 363, 365, 367, 368, 370, 371, 372, 373, 374, 375, 376, 378, 379, 381, 382, 383, 385, 419], "fals": [2, 6, 9, 14, 15, 17, 18, 20, 21, 22, 33, 34, 36, 37, 40, 41, 42, 43, 47, 48, 49, 50, 51, 54, 56, 57, 58, 62, 70, 72, 75, 76, 77, 79, 80, 81, 86, 87, 88, 89, 91, 92, 94, 99, 101, 102, 103, 105, 106, 114, 135, 138, 139, 140, 142, 144, 147, 152, 159, 163, 164, 167, 174, 179, 181, 183, 185, 187, 193, 194, 195, 196, 205, 206, 207, 208, 211, 217, 220, 222, 224, 226, 242, 244, 247, 248, 249, 250, 259, 261, 264, 267, 277, 279, 280, 282, 283, 286, 295, 297, 298, 301, 302, 305, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 360, 362, 363, 365, 367, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 382, 383, 385, 386, 387, 388, 389, 390, 395, 396, 398, 399, 400, 401, 419], "slice": [2, 3, 6, 9, 16, 36, 62, 89, 94, 100, 101, 105, 106, 108, 113, 131, 138, 140, 147, 159, 172, 174, 264, 277, 289, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 368, 399, 421], "constructor": [2, 114, 256, 257, 289, 397], "desir": [2, 62, 170, 174, 249, 250, 263, 264, 266, 271, 277, 280, 302, 354, 355, 363, 387], "afterward": [2, 161, 170], "ll": [2, 6, 49, 58, 247, 248], "follow": [2, 4, 9, 14, 18, 22, 29, 32, 34, 35, 36, 40, 41, 42, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 66, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 110, 113, 114, 129, 132, 133, 134, 135, 136, 137, 141, 147, 148, 149, 152, 153, 159, 162, 163, 164, 167, 169, 170, 172, 226, 231, 233, 282, 288, 302, 304, 305, 306, 310, 313, 317, 318, 319, 321, 322, 383, 389, 401, 402, 419, 420], "same": [2, 3, 6, 14, 15, 21, 23, 34, 37, 40, 41, 47, 49, 50, 55, 58, 63, 64, 66, 69, 70, 71, 84, 86, 88, 94, 98, 100, 101, 102, 108, 114, 120, 127, 132, 138, 139, 140, 141, 142, 147, 148, 149, 152, 153, 154, 155, 159, 161, 162, 164, 166, 167, 172, 173, 174, 179, 180, 181, 183, 195, 196, 205, 207, 212, 213, 231, 242, 243, 244, 245, 247, 248, 249, 250, 264, 267, 277, 279, 282, 284, 293, 295, 297, 302, 305, 306, 308, 310, 311, 313, 314, 315, 321, 323, 325, 331, 332, 333, 334, 335, 344, 345, 348, 349, 350, 351, 356, 360, 362, 363, 365, 367, 368, 372, 373, 374, 375, 383, 386, 387, 390, 395, 396, 398, 399, 401], "formula": [2, 123, 147, 161, 277, 293, 363], "befor": [2, 15, 49, 55, 56, 89, 94, 98, 103, 113, 132, 135, 138, 140, 142, 144, 145, 147, 151, 152, 154, 155, 157, 162, 163, 164, 166, 169, 170, 172, 173, 174, 183, 222, 224, 249, 250, 264, 266, 271, 282, 286, 288, 305, 306, 309, 310, 312, 313, 315, 361, 376, 378, 379, 387, 392, 393, 401, 402, 419], "selected_volum": 2, "5": [2, 3, 4, 6, 7, 12, 18, 20, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 81, 85, 88, 89, 91, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 122, 129, 135, 140, 141, 142, 143, 145, 148, 152, 154, 159, 160, 161, 164, 173, 174, 190, 192, 195, 196, 198, 199, 202, 207, 208, 211, 212, 213, 217, 219, 221, 234, 237, 247, 248, 254, 256, 257, 282, 288, 289, 292, 305, 306, 318, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 373, 374, 376, 378, 379, 381, 383, 384, 385, 400, 401, 402, 405, 419], "re": [2, 6, 21, 23, 40, 65, 66, 69, 71, 84, 114, 141, 147, 222, 234, 235, 236, 237, 238, 239, 254, 256, 257, 267, 390], "new": [2, 3, 10, 11, 20, 36, 49, 66, 72, 79, 84, 86, 94, 98, 102, 107, 111, 113, 119, 126, 127, 128, 129, 130, 143, 154, 155, 156, 157, 162, 167, 169, 170, 173, 174, 179, 181, 185, 186, 191, 194, 196, 199, 201, 202, 207, 208, 209, 213, 222, 224, 232, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 247, 248, 249, 250, 256, 257, 264, 273, 277, 279, 281, 282, 291, 292, 293, 294, 295, 296, 297, 298, 301, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 325, 360, 361, 362, 363, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 387, 389, 390, 391, 397, 401, 405, 419, 420], "thing": [2, 3, 56, 66, 151, 160, 161, 162, 170, 174, 254, 282, 401, 419], "base": [2, 8, 20, 27, 28, 29, 34, 45, 47, 48, 49, 55, 60, 61, 62, 66, 67, 71, 73, 74, 81, 82, 88, 89, 91, 92, 97, 98, 105, 109, 110, 111, 114, 123, 127, 135, 138, 140, 143, 145, 147, 148, 149, 150, 151, 153, 154, 157, 159, 160, 161, 162, 164, 165, 167, 168, 169, 170, 174, 180, 183, 188, 193, 199, 201, 208, 211, 212, 213, 214, 217, 218, 219, 222, 224, 226, 229, 230, 231, 232, 242, 243, 244, 245, 246, 248, 249, 250, 252, 260, 264, 267, 271, 273, 277, 279, 280, 281, 282, 283, 287, 289, 293, 298, 301, 304, 305, 306, 308, 314, 315, 319, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 364, 373, 374, 375, 378, 379, 380, 382, 386, 387, 389, 390, 391, 397, 399, 401, 402, 403, 404, 405, 419, 420, 421], "confirm": [2, 29, 162], "match": [2, 6, 15, 41, 114, 135, 139, 140, 142, 147, 153, 159, 167, 171, 174, 189, 200, 222, 241, 242, 243, 244, 245, 247, 248, 249, 250, 264, 267, 277, 279, 283, 292, 294, 297, 302, 304, 309, 310, 312, 313, 317, 319, 320, 322, 373, 387, 390, 421], "previou": [2, 9, 14, 41, 49, 54, 62, 66, 77, 94, 141, 142, 147, 148, 151, 155, 157, 161, 164, 183, 242, 243, 244, 245, 249, 250, 311, 314, 387], "abov": [2, 3, 4, 14, 21, 33, 42, 48, 49, 56, 66, 69, 86, 94, 100, 114, 127, 147, 148, 149, 151, 153, 154, 159, 161, 162, 163, 167, 172, 173, 174, 189, 213, 234, 235, 238, 242, 243, 244, 245, 247, 248, 251, 254, 255, 256, 257, 297, 298, 305, 309, 310, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 373, 381, 383, 385, 387, 389, 400, 401], "show": [2, 4, 6, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 127, 133, 138, 140, 142, 147, 148, 149, 152, 154, 155, 157, 159, 164, 166, 173, 174, 211, 223, 251, 264, 277, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 377, 381, 384, 389, 399, 419], "forc": [2, 94, 122, 147, 161, 174, 191, 200, 222, 223, 224, 225], "figur": [2, 4, 9, 12, 14, 15, 18, 22, 23, 24, 25, 30, 32, 34, 35, 36, 40, 41, 42, 43, 44, 48, 49, 51, 52, 56, 57, 62, 65, 66, 68, 70, 79, 84, 91, 94, 99, 100, 101, 105, 106, 108, 129, 138, 139, 142, 143, 144, 147, 162, 163, 164, 173, 304, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 419], "when": [2, 3, 4, 8, 9, 16, 24, 27, 54, 66, 67, 68, 69, 75, 89, 91, 92, 94, 100, 102, 105, 106, 110, 113, 114, 120, 122, 126, 127, 128, 130, 133, 135, 138, 139, 142, 143, 144, 145, 147, 148, 149, 151, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 166, 167, 170, 173, 179, 189, 192, 198, 199, 215, 217, 222, 224, 242, 243, 244, 245, 246, 247, 248, 252, 253, 257, 258, 264, 277, 279, 297, 299, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 325, 326, 328, 329, 357, 363, 367, 368, 373, 374, 375, 376, 378, 379, 380, 382, 383, 385, 387, 399, 400, 401, 405, 419], "outsid": [2, 4, 16, 66, 144, 147, 162, 169, 174, 297, 298, 392, 393, 398, 405], "ipython": [2, 4, 16, 154, 169, 420], "recap": [2, 4], "call": [2, 4, 6, 14, 15, 16, 33, 43, 48, 49, 50, 53, 54, 56, 58, 66, 69, 72, 76, 81, 87, 89, 91, 94, 98, 104, 113, 114, 135, 147, 148, 149, 151, 152, 154, 155, 159, 161, 162, 163, 164, 166, 167, 172, 174, 178, 181, 183, 191, 203, 222, 224, 227, 248, 250, 253, 258, 264, 277, 292, 321, 362, 371, 387, 419], "differ": [2, 6, 9, 15, 19, 20, 21, 22, 23, 28, 29, 45, 46, 51, 52, 54, 55, 58, 59, 63, 66, 67, 68, 69, 70, 71, 72, 75, 79, 80, 81, 89, 91, 94, 98, 99, 100, 102, 103, 110, 111, 113, 133, 139, 141, 145, 147, 149, 150, 152, 153, 154, 156, 157, 158, 159, 161, 162, 163, 164, 167, 171, 172, 179, 181, 194, 203, 208, 211, 234, 235, 236, 237, 238, 239, 242, 244, 245, 247, 248, 256, 257, 260, 264, 266, 267, 271, 273, 277, 283, 287, 289, 294, 302, 305, 308, 309, 310, 312, 313, 314, 324, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 358, 360, 362, 365, 367, 368, 372, 373, 374, 375, 380, 387, 389, 398, 405, 421], "flavor": 2, "onli": [2, 3, 6, 13, 14, 19, 29, 31, 32, 33, 34, 36, 37, 40, 42, 43, 49, 51, 52, 54, 55, 58, 66, 69, 75, 79, 81, 84, 86, 91, 94, 98, 99, 100, 101, 103, 104, 108, 113, 114, 125, 130, 135, 140, 142, 143, 147, 148, 149, 151, 152, 154, 155, 156, 157, 159, 161, 162, 164, 166, 167, 171, 172, 173, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 419, 421], "multipl": [2, 6, 19, 42, 47, 77, 79, 81, 101, 138, 139, 147, 150, 155, 157, 159, 162, 165, 167, 171, 172, 173, 191, 241, 254, 272, 277, 279, 289, 292, 293, 311, 325, 336, 338, 341, 355, 360, 365, 368, 370, 373, 374, 375, 382, 419, 421], "detail": [2, 3, 8, 9, 12, 14, 15, 16, 19, 22, 23, 26, 28, 29, 31, 33, 39, 46, 48, 50, 52, 54, 58, 60, 62, 64, 67, 71, 72, 74, 81, 83, 95, 100, 101, 102, 103, 107, 110, 113, 114, 116, 127, 132, 135, 144, 147, 148, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 165, 170, 171, 172, 174, 176, 179, 187, 191, 195, 196, 199, 208, 213, 217, 219, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 249, 250, 257, 264, 277, 282, 286, 294, 299, 300, 306, 308, 309, 310, 311, 312, 313, 314, 315, 325, 383, 386, 387, 389, 391, 410, 411, 419, 420], "input": [2, 3, 4, 6, 9, 14, 15, 23, 32, 43, 48, 49, 54, 55, 57, 64, 67, 68, 71, 76, 77, 79, 80, 85, 88, 89, 92, 94, 98, 108, 113, 121, 122, 125, 126, 127, 128, 130, 131, 132, 135, 139, 141, 142, 143, 144, 147, 151, 154, 157, 159, 161, 162, 163, 167, 171, 173, 174, 179, 180, 181, 182, 183, 184, 185, 186, 218, 219, 242, 243, 244, 245, 246, 247, 248, 249, 250, 259, 261, 263, 264, 266, 271, 272, 277, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 305, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 360, 361, 367, 368, 370, 373, 374, 375, 382, 383, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 401, 405, 419, 421], "format": [2, 3, 21, 33, 40, 47, 49, 51, 56, 58, 61, 62, 67, 70, 71, 77, 79, 91, 93, 98, 100, 103, 107, 113, 139, 142, 144, 147, 162, 163, 174, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 365, 367, 368, 374, 375, 376, 377, 378, 379, 384, 385, 403, 404, 405, 409], "given": [2, 3, 9, 14, 16, 44, 47, 50, 53, 54, 64, 65, 66, 69, 71, 79, 84, 86, 94, 95, 100, 104, 124, 126, 130, 135, 144, 147, 148, 151, 154, 155, 157, 159, 160, 161, 164, 167, 169, 170, 174, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 195, 196, 216, 217, 219, 220, 226, 232, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 260, 261, 264, 267, 271, 277, 278, 279, 281, 283, 288, 291, 294, 297, 299, 301, 302, 305, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 365, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 385, 387, 388, 389, 390, 391, 392, 400, 402], "section": [2, 3, 4, 14, 39, 47, 48, 49, 56, 70, 94, 98, 100, 111, 112, 113, 127, 132, 142, 147, 148, 149, 151, 152, 154, 155, 157, 159, 162, 164, 166, 170, 171, 174, 176, 222, 226, 356, 386, 397, 410, 411, 419], "name": [2, 3, 4, 6, 11, 14, 21, 22, 23, 26, 30, 32, 44, 51, 58, 62, 65, 72, 75, 76, 77, 79, 80, 91, 94, 100, 101, 103, 108, 113, 124, 133, 135, 140, 142, 144, 145, 147, 151, 155, 159, 162, 163, 167, 169, 170, 171, 174, 179, 180, 181, 189, 190, 192, 193, 195, 196, 197, 198, 199, 201, 202, 203, 205, 207, 217, 222, 224, 227, 228, 229, 230, 231, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 262, 264, 265, 266, 267, 271, 277, 279, 282, 293, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382, 386, 387, 388, 389, 390, 392, 399, 401, 421], "accept": [2, 3, 47, 65, 126, 127, 129, 132, 133, 135, 138, 139, 140, 141, 142, 143, 144, 147, 162, 163, 172, 277, 279, 280, 302, 316, 317, 318, 319, 320, 321, 322, 360, 370, 372, 373, 374, 375, 382, 384, 395, 396], "either": [2, 4, 9, 32, 35, 36, 39, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 132, 139, 141, 147, 149, 151, 162, 163, 166, 167, 172, 198, 199, 203, 211, 254, 256, 257, 264, 277, 280, 281, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 360, 361, 362, 365, 366, 367, 370, 372, 373, 374, 375, 376, 377, 378, 379, 382, 389, 399, 403, 404, 405, 419, 420], "hand": [2, 66, 69, 94, 161, 162, 172, 174, 232], "break": [2, 83, 96, 110, 127, 147, 151, 159, 162, 203, 374, 380, 390], "down": [2, 70, 103, 151, 161, 162, 244], "other": [2, 4, 14, 23, 24, 31, 33, 36, 39, 40, 48, 56, 66, 69, 70, 94, 98, 100, 103, 104, 112, 113, 132, 135, 139, 147, 148, 149, 154, 155, 156, 158, 159, 161, 162, 163, 167, 170, 172, 174, 179, 181, 208, 222, 228, 241, 244, 245, 249, 250, 254, 256, 257, 264, 266, 267, 271, 277, 279, 302, 303, 305, 306, 321, 325, 380, 419, 421], "concat_img": [2, 6, 11, 70, 71, 100, 126, 147, 173, 289], "group": [2, 3, 6, 14, 29, 30, 32, 33, 46, 57, 58, 59, 62, 74, 76, 77, 78, 79, 80, 97, 98, 101, 104, 105, 109, 110, 111, 129, 135, 147, 149, 150, 153, 154, 159, 164, 166, 167, 168, 169, 179, 180, 181, 191, 192, 197, 205, 207, 208, 219, 225, 242, 243, 244, 245, 246, 249, 250, 290, 302, 305, 308, 313, 325, 358, 361, 362, 372, 373, 375, 380, 394, 421], "total": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 150, 152, 154, 160, 198, 208, 248, 319, 320, 322, 373, 390, 421], "script": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 141, 147, 156, 162, 172, 173, 174, 419, 420], "minut": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 164, 217], "50": [2, 7, 33, 36, 42, 43, 44, 48, 49, 54, 57, 58, 59, 62, 66, 93, 98, 102, 105, 111, 114, 159, 161, 174, 181, 183, 219, 220, 244, 245, 252, 266, 268, 269, 270, 271, 274, 275, 276, 284, 305, 306, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 387, 389, 391, 419], "821": [2, 7], "second": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 111, 151, 152, 160, 161, 162, 164, 165, 167, 174, 214, 216, 217, 231, 242, 243, 244, 245, 247, 248, 252, 259, 260, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 282, 287, 293, 301, 304, 309, 310, 325, 337, 338, 352, 361, 364, 367, 369, 375, 376, 377, 378, 379, 380, 385, 387, 389, 397, 399, 401, 405, 421], "estim": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 63, 65, 68, 70, 71, 72, 75, 78, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 130, 138, 139, 144, 145, 147, 148, 153, 156, 158, 159, 162, 164, 166, 167, 169, 170, 179, 180, 181, 183, 199, 203, 219, 226, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 260, 261, 264, 277, 279, 283, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 321, 322, 325, 372, 380, 386, 387, 388, 389, 412, 421], "usag": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 126, 135, 139, 144, 147, 148, 162, 163, 166, 169, 170, 171, 219, 226, 231, 383, 408, 421], "410": [2, 7, 33, 36, 42, 44, 102, 111, 155], "mb": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "sourc": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 148, 149, 153, 161, 162, 170, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 420], "plot_3d_and_4d_niimg": [2, 7], "py": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 135, 140, 141, 142, 144, 147, 162, 170, 174], "jupyt": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 133, 135, 147, 154, 169, 174, 264, 277, 381, 382, 383, 384, 385, 397, 399, 419], "notebook": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 120, 132, 135, 147, 154, 169, 174, 264, 277, 306, 381, 382, 383, 384, 385, 397, 399, 419], "ipynb": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "galleri": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 120, 122, 126, 127, 129, 147, 162, 419], "gener": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 113, 132, 133, 135, 137, 138, 140, 142, 145, 147, 154, 155, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 191, 192, 194, 217, 227, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 256, 257, 264, 271, 277, 279, 280, 281, 282, 287, 293, 294, 304, 305, 306, 310, 311, 313, 323, 325, 366, 370, 375, 376, 377, 378, 379, 380, 386, 387, 389, 397, 401, 409, 419, 420], "sphinx": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 120, 122, 126, 127, 129, 147, 162], "simpl": [3, 5, 25, 29, 31, 35, 37, 40, 47, 56, 60, 65, 67, 71, 73, 75, 76, 77, 79, 80, 83, 84, 87, 89, 91, 94, 96, 98, 100, 101, 110, 111, 113, 114, 125, 127, 132, 142, 147, 148, 149, 155, 157, 158, 161, 162, 163, 166, 167, 169, 173, 174, 179, 180, 181, 208, 210, 217, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 255, 264, 277, 289, 294, 306, 308, 309, 310, 311, 312, 313, 314, 315, 361, 374, 375, 380, 386, 387, 388, 389, 397, 399, 421], "reproduc": [3, 32, 40, 41, 48, 51, 72, 98, 100, 111, 168, 217, 244, 245], "2001": [3, 31, 38, 98, 102, 111, 113, 158, 168, 172, 189, 211, 325, 421], "v": [3, 6, 24, 28, 35, 45, 51, 65, 66, 76, 79, 80, 89, 97, 98, 109, 110, 111, 154, 155, 159, 161, 162, 168, 170, 202, 207, 211, 212, 215, 217, 222, 224, 225, 237, 242, 244, 246, 248, 287, 289, 292, 294, 295, 305, 308, 314, 325, 353, 368, 375, 380, 382, 402], "discrimin": [3, 29, 31, 51, 94, 99, 113, 154, 168, 169], "mask": [3, 8, 15, 20, 21, 23, 27, 29, 30, 31, 33, 34, 35, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 64, 67, 70, 75, 77, 79, 83, 91, 92, 96, 102, 104, 105, 106, 110, 112, 114, 125, 126, 127, 129, 132, 135, 138, 140, 141, 142, 145, 147, 151, 155, 158, 160, 168, 169, 171, 172, 180, 208, 211, 212, 213, 217, 221, 222, 234, 235, 238, 242, 243, 244, 245, 247, 248, 249, 250, 259, 261, 264, 277, 279, 280, 281, 282, 287, 288, 289, 292, 294, 295, 299, 301, 305, 308, 309, 310, 311, 312, 313, 314, 315, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 358, 359, 360, 361, 365, 367, 369, 370, 374, 375, 380, 387, 388, 389, 391, 392, 393, 394, 397, 399, 401, 405, 410, 419, 421], "ventral": [3, 16, 22, 32, 33, 38, 94, 98, 111, 113, 154, 168, 174, 211, 376, 378, 379], "stream": [3, 32, 113, 168, 174], "j": [3, 22, 23, 37, 41, 47, 49, 56, 68, 71, 76, 84, 98, 100, 102, 111, 114, 129, 132, 141, 147, 155, 156, 159, 160, 191, 193, 194, 197, 198, 199, 201, 202, 206, 207, 209, 212, 217, 219, 220, 221, 222, 224, 227, 237, 244, 245, 259, 279, 282, 305, 306, 325, 361, 401, 402, 419], "et": [3, 22, 23, 28, 44, 45, 48, 51, 58, 66, 72, 98, 99, 100, 102, 110, 127, 132, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 160, 174, 189, 198, 201, 205, 206, 207, 211, 220, 221, 242, 245, 248, 249, 282, 284, 289, 301, 308, 311, 314, 325, 353, 375, 380], "al": [3, 22, 23, 28, 44, 45, 48, 51, 58, 66, 72, 98, 99, 100, 102, 110, 127, 132, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 160, 174, 189, 198, 201, 205, 206, 207, 211, 220, 221, 242, 245, 248, 249, 282, 284, 289, 301, 308, 311, 314, 325, 353, 375, 380], "distribut": [3, 6, 22, 23, 32, 38, 48, 49, 55, 79, 94, 98, 111, 139, 143, 147, 154, 159, 161, 164, 167, 201, 211, 252, 279, 325, 369], "overlap": [3, 32, 38, 54, 58, 89, 91, 92, 98, 111, 145, 147, 162, 167, 174, 211, 219, 309, 310, 312, 313, 315, 373], "represent": [3, 16, 32, 33, 36, 38, 52, 53, 56, 58, 62, 75, 77, 84, 94, 98, 100, 104, 111, 113, 150, 153, 159, 167, 171, 173, 207, 211, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 277, 282, 283, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 360, 361, 367, 368, 370, 373, 374, 375, 382, 383, 387, 389, 392, 393, 395, 396, 399, 405, 421], "tempor": [3, 6, 16, 32, 33, 38, 51, 55, 66, 68, 91, 94, 98, 101, 103, 111, 113, 132, 140, 147, 153, 154, 167, 171, 192, 211, 250, 264, 268, 269, 270, 271, 273, 274, 275, 276, 282, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 389, 401, 421], "cortex": [3, 23, 32, 33, 38, 55, 58, 61, 69, 71, 75, 79, 80, 91, 98, 111, 152, 154, 159, 163, 164, 193, 199, 203, 205, 211, 219, 221], "scienc": [3, 23, 38, 48, 58, 98, 111, 153, 156, 159, 160, 169, 179, 189, 191, 194, 197, 200, 201, 205, 207, 208, 211, 212, 217, 219, 220, 221, 232, 237, 244, 245, 246, 305, 306, 325, 361, 402, 421], "vol": [3, 48, 49, 98, 153, 246, 249], "293": [3, 33, 41, 66, 72, 94, 96, 98, 111, 211], "p": [3, 6, 37, 42, 48, 62, 64, 67, 72, 75, 76, 77, 79, 80, 81, 94, 98, 101, 102, 105, 106, 108, 111, 139, 147, 153, 159, 161, 164, 179, 180, 183, 187, 192, 200, 202, 212, 219, 249, 251, 252, 260, 264, 277, 279, 280, 282, 304, 325, 398, 399, 401], "2425": [3, 98, 111, 211], "2430": [3, 98, 102, 111, 211], "meant": [3, 6, 104, 186, 252, 397, 418], "variou": [3, 20, 30, 31, 39, 48, 105, 106, 135, 138, 142, 147, 154, 156, 157, 162, 164, 167, 173, 191, 244, 245, 306, 387, 405], "step": [3, 11, 20, 33, 35, 37, 42, 44, 47, 49, 50, 55, 58, 61, 62, 64, 65, 66, 69, 79, 80, 89, 94, 98, 101, 108, 113, 130, 138, 144, 147, 148, 151, 152, 153, 154, 156, 157, 159, 161, 162, 167, 170, 171, 172, 173, 181, 188, 213, 226, 235, 238, 244, 245, 249, 250, 264, 279, 306, 311, 314, 317, 318, 319, 321, 322, 387, 401, 421], "meta": [3, 14, 97, 100, 103, 109, 110, 114, 224, 287, 292, 293, 295, 367, 375, 380], "minimalist": 3, "strive": 3, "didact": [3, 125, 147, 155, 157, 162], "copi": [3, 10, 18, 20, 21, 33, 36, 40, 53, 88, 100, 110, 113, 135, 147, 161, 162, 172, 226, 227, 249, 250, 285, 286, 287, 297, 298, 301, 308, 311, 314, 400], "analyz": [3, 33, 49, 60, 74, 94, 110, 153, 162, 164, 167, 169, 171, 325, 421], "mani": [3, 10, 11, 15, 23, 36, 38, 39, 41, 42, 43, 48, 49, 51, 56, 71, 79, 86, 94, 98, 99, 100, 106, 114, 140, 147, 150, 151, 152, 154, 155, 156, 157, 160, 161, 164, 167, 170, 173, 174, 181, 222, 224, 242, 243, 244, 245, 246, 279, 286, 325, 370, 395, 396, 405, 419], "unnecessari": [3, 257], "fetch_haxbi": [3, 15, 16, 18, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 94, 98, 102, 113, 126, 147, 154, 162, 172], "directori": [3, 6, 62, 64, 94, 101, 108, 110, 151, 162, 172, 180, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 241, 242, 243, 244, 245, 247, 248, 249, 250, 264, 267, 277, 283, 302, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 369, 387, 388, 389], "while": [3, 4, 6, 48, 55, 56, 66, 84, 94, 98, 100, 101, 103, 108, 113, 120, 130, 132, 145, 147, 153, 154, 159, 161, 162, 163, 169, 173, 174, 191, 242, 243, 244, 245, 271, 325], "310": [3, 33, 36, 41, 42, 44, 102], "mo": 3, "internet": [3, 14, 49, 153, 171, 176, 421], "By": [3, 14, 15, 25, 29, 33, 35, 70, 71, 139, 147, 155, 162, 170, 174, 179, 180, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 242, 243, 244, 245, 247, 248, 249, 250, 264, 277, 283, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 360, 369, 371, 373, 374, 375, 382, 387, 388, 389, 392, 419], "default": [3, 8, 9, 14, 15, 23, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 42, 55, 56, 60, 62, 66, 73, 79, 83, 89, 92, 94, 96, 102, 103, 104, 110, 114, 120, 122, 125, 126, 131, 132, 133, 135, 138, 139, 140, 141, 142, 144, 145, 147, 154, 155, 159, 161, 163, 172, 173, 174, 179, 180, 181, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 288, 289, 292, 294, 295, 296, 297, 298, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 397, 398, 399, 400, 401, 402, 405, 419], "2nd": [3, 25, 29, 30, 32, 33, 34, 35, 36, 37, 211], "fetch": [3, 9, 14, 19, 24, 29, 30, 32, 34, 35, 36, 37, 41, 58, 71, 85, 86, 87, 88, 91, 94, 103, 114, 126, 127, 129, 131, 135, 147, 150, 153, 171, 187, 194, 208, 209, 212, 215, 216, 217, 220, 222, 223, 224, 225, 226, 229, 231, 421], "haxby_dataset": [3, 15, 16, 18, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 94, 98, 102, 113, 154, 172, 174], "func": [3, 6, 11, 15, 16, 18, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 64, 65, 66, 67, 70, 85, 89, 91, 92, 94, 95, 98, 99, 100, 101, 102, 104, 108, 113, 140, 147, 152, 163, 172, 174, 188, 208, 211, 221, 229, 302, 305, 306], "one": [3, 4, 6, 9, 14, 15, 16, 20, 24, 29, 30, 31, 33, 35, 36, 40, 44, 47, 48, 49, 55, 56, 57, 58, 64, 66, 69, 70, 71, 72, 74, 77, 78, 80, 81, 82, 86, 91, 92, 94, 100, 101, 103, 105, 108, 110, 113, 114, 124, 126, 129, 138, 140, 141, 142, 145, 147, 148, 149, 152, 153, 154, 155, 159, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 174, 179, 181, 187, 198, 199, 207, 213, 217, 220, 231, 242, 243, 244, 245, 247, 249, 250, 252, 264, 266, 267, 271, 273, 277, 278, 279, 282, 283, 284, 286, 287, 289, 293, 297, 302, 304, 309, 311, 312, 314, 324, 325, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 362, 363, 367, 370, 371, 372, 373, 377, 378, 380, 382, 383, 387, 391, 392, 398, 401, 405, 420, 421], "each": [3, 6, 14, 15, 20, 21, 22, 24, 29, 34, 36, 37, 39, 40, 47, 48, 49, 50, 51, 55, 56, 58, 62, 64, 70, 71, 78, 80, 86, 88, 94, 98, 99, 100, 101, 102, 105, 108, 114, 127, 132, 133, 135, 138, 140, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 167, 169, 170, 172, 173, 174, 179, 180, 181, 183, 190, 201, 207, 208, 219, 222, 224, 232, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 256, 257, 264, 266, 267, 271, 277, 279, 282, 288, 294, 299, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 320, 322, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 360, 362, 365, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 386, 387, 388, 389, 390, 391, 392, 393, 395, 399, 401, 402, 404, 405, 419], "fmri_filenam": [3, 36, 37, 56, 94, 98, 113], "basic": [3, 7, 8, 11, 15, 16, 18, 25, 27, 29, 30, 32, 34, 35, 36, 41, 42, 48, 49, 52, 53, 56, 58, 69, 71, 75, 77, 85, 89, 91, 92, 94, 95, 98, 100, 102, 104, 105, 106, 161, 163, 164, 167, 169, 170, 174, 195, 196, 277, 299, 305, 306, 363, 368, 374, 380], "inform": [3, 6, 11, 16, 18, 21, 23, 25, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 48, 49, 51, 52, 53, 58, 61, 62, 66, 68, 72, 75, 77, 78, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108, 111, 113, 114, 118, 129, 133, 143, 147, 148, 149, 152, 153, 154, 156, 158, 161, 162, 163, 166, 167, 169, 170, 172, 174, 179, 189, 190, 191, 192, 197, 199, 200, 202, 203, 211, 212, 219, 220, 221, 222, 224, 226, 234, 235, 237, 238, 242, 243, 244, 245, 246, 257, 264, 277, 279, 291, 297, 303, 304, 399, 401, 408, 420, 421], "haxby2001": [3, 16, 18, 25, 29, 30, 32, 34, 35, 36, 94, 102, 113, 172, 211], "subj2": [3, 16, 18, 25, 29, 30, 32, 34, 35, 36, 94, 102, 113], "bold": [3, 6, 16, 18, 25, 29, 30, 32, 34, 35, 36, 48, 65, 66, 76, 79, 94, 100, 101, 102, 108, 111, 113, 114, 135, 139, 147, 153, 154, 163, 165, 167, 172, 194, 211, 221, 267, 302, 305, 306, 402, 421], "One": [3, 6, 14, 34, 35, 48, 49, 56, 64, 71, 79, 140, 147, 148, 149, 154, 155, 159, 161, 163, 164, 166, 170, 172, 174, 264, 297, 305, 306, 310, 311, 313, 392], "wai": [3, 6, 33, 61, 62, 64, 66, 75, 76, 84, 98, 108, 111, 113, 114, 139, 140, 142, 147, 148, 150, 153, 154, 155, 157, 160, 161, 162, 163, 164, 167, 172, 174, 224, 244, 245, 254, 256, 257, 302, 361, 386, 419, 420], "plot_epi": [3, 25, 49, 89, 94, 95, 139, 142, 147, 375, 419], "becaus": [3, 6, 11, 15, 18, 30, 31, 32, 36, 39, 42, 43, 44, 54, 66, 70, 71, 79, 84, 101, 102, 135, 145, 147, 149, 154, 159, 161, 162, 164, 170, 222, 247, 248, 405], "thei": [3, 6, 24, 39, 42, 43, 44, 48, 49, 65, 66, 69, 71, 92, 94, 98, 108, 113, 114, 142, 144, 147, 153, 156, 157, 159, 161, 162, 164, 167, 169, 170, 172, 174, 203, 211, 222, 227, 264, 267, 277, 279, 283, 297, 309, 310, 312, 313, 315, 363, 390, 419], "consist": [3, 6, 34, 40, 44, 66, 69, 108, 113, 125, 131, 132, 133, 142, 147, 154, 155, 158, 159, 161, 162, 164, 167, 181, 191, 219, 248, 309, 312, 386, 388, 391], "epi": [3, 6, 11, 15, 25, 30, 31, 92, 94, 95, 104, 167, 169, 173, 174, 242, 243, 244, 245, 249, 250, 311, 314, 319, 365, 375, 387, 419], "cannot": [3, 9, 10, 11, 36, 48, 49, 51, 56, 79, 86, 92, 94, 102, 114, 132, 144, 147, 148, 154, 157, 162, 174, 181, 382, 383, 385], "directli": [3, 6, 32, 33, 47, 48, 51, 64, 86, 89, 108, 124, 128, 130, 132, 147, 151, 154, 157, 164, 172, 174, 222, 267, 325, 373], "just": [3, 4, 6, 14, 21, 40, 42, 44, 49, 50, 51, 56, 58, 65, 66, 71, 75, 76, 77, 79, 81, 87, 91, 98, 100, 101, 113, 124, 147, 152, 154, 161, 164, 169, 170, 174, 264, 277, 282, 299, 302, 305, 373, 374, 375, 382, 399, 401, 405, 419], "mean_img": [3, 6, 15, 16, 18, 25, 30, 31, 33, 36, 49, 64, 67, 70, 71, 85, 89, 92, 94, 95, 102, 104, 173, 293], "view_img": [3, 29, 132, 133, 141, 144, 147, 154, 419], "none": [3, 14, 15, 32, 33, 36, 40, 43, 44, 49, 53, 54, 56, 58, 62, 66, 68, 77, 79, 89, 91, 92, 94, 95, 100, 103, 107, 114, 122, 132, 135, 139, 144, 147, 174, 179, 180, 181, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 266, 267, 271, 273, 277, 278, 279, 280, 281, 282, 283, 288, 292, 294, 295, 296, 297, 299, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 405, 419], "usr": [3, 4, 9, 10, 11, 15, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 71, 77, 78, 79, 84, 86, 87, 88, 91, 92, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 195, 196], "share": [3, 4, 9, 10, 11, 15, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 71, 77, 78, 79, 84, 86, 87, 88, 91, 92, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 111, 114, 138, 147, 148, 153, 172, 183, 192, 195, 196, 217, 222, 224], "miniconda3": [3, 4, 9, 10, 11, 15, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 71, 77, 78, 79, 84, 86, 87, 88, 91, 92, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108], "env": [3, 4, 9, 10, 11, 15, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 71, 77, 78, 79, 84, 86, 87, 88, 91, 92, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108], "testenv": [3, 4, 9, 10, 11, 15, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 71, 77, 78, 79, 84, 86, 87, 88, 91, 92, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108], "lib": [3, 4, 9, 10, 11, 15, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 71, 77, 78, 79, 84, 86, 87, 88, 91, 92, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108], "python3": [3, 4, 9, 10, 11, 15, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 71, 77, 78, 79, 84, 86, 87, 88, 91, 92, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 133, 135, 147, 162, 420], "9": [3, 4, 5, 6, 7, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 68, 70, 71, 72, 77, 78, 79, 80, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 113, 114, 115, 118, 129, 138, 140, 167, 199, 208, 209, 222, 224, 226, 228, 251, 255, 264, 273, 279, 295, 301, 304, 305, 306, 309, 311, 312, 313, 314, 315, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 361, 376, 378, 379, 395, 398, 419, 420], "site": [3, 4, 9, 10, 11, 15, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 71, 77, 78, 79, 84, 86, 87, 88, 91, 92, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 187, 188], "numpi": [3, 5, 6, 9, 10, 11, 12, 14, 16, 20, 21, 22, 23, 24, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 77, 79, 80, 84, 86, 87, 89, 94, 98, 100, 102, 103, 104, 105, 106, 108, 118, 123, 127, 129, 132, 135, 138, 140, 142, 145, 147, 151, 152, 154, 161, 170, 172, 173, 179, 180, 181, 182, 183, 184, 185, 186, 193, 194, 199, 201, 205, 206, 207, 208, 242, 243, 244, 245, 247, 248, 249, 250, 254, 256, 257, 260, 264, 266, 271, 273, 277, 282, 283, 284, 287, 288, 289, 293, 294, 295, 297, 299, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 322, 324, 325, 329, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 357, 358, 360, 362, 363, 365, 367, 369, 371, 372, 375, 376, 377, 378, 379, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405], "core": [3, 16, 20, 21, 29, 42, 43, 48, 50, 54, 58, 161, 162, 170, 181, 420], "fromnumer": [3, 16, 29], "758": [3, 16, 29], "userwarn": [3, 9, 10, 11, 15, 16, 18, 20, 21, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 61, 62, 64, 71, 77, 78, 79, 84, 86, 87, 88, 91, 92, 94, 95, 98, 100, 101, 103, 108], "warn": [3, 9, 11, 16, 20, 21, 23, 29, 48, 50, 54, 71, 103, 132, 133, 135, 140, 142, 144, 145, 147, 154, 271, 284, 308, 309, 310, 311, 312, 313, 314, 315, 380, 389], "partit": [3, 16, 29, 40], "ignor": [3, 16, 21, 29, 48, 50, 71, 103, 133, 138, 147, 222, 224, 228, 242, 243, 244, 245, 264, 271, 277, 279, 302, 305, 312, 370, 386, 388, 405], "maskedarrai": [3, 16, 29], "kth": [3, 16], "axi": [3, 11, 12, 16, 22, 23, 25, 30, 34, 38, 40, 41, 44, 47, 50, 58, 84, 85, 94, 103, 104, 107, 142, 144, 147, 152, 173, 191, 242, 243, 244, 245, 247, 248, 272, 297, 299, 326, 328, 329, 356, 363], "kind": [3, 16, 47, 50, 54, 56, 58, 79, 113, 128, 147, 148, 152, 155, 161, 167, 179, 405, 419], "These": [3, 4, 6, 15, 55, 58, 60, 72, 74, 77, 79, 81, 89, 94, 107, 110, 113, 135, 138, 139, 142, 147, 154, 157, 158, 160, 161, 162, 166, 167, 174, 194, 205, 207, 240, 413, 419, 420], "realli": [3, 70, 133, 147, 154, 306], "love": 3, "learn": [3, 21, 34, 36, 44, 46, 52, 53, 56, 57, 58, 59, 94, 97, 102, 104, 109, 110, 111, 112, 114, 118, 120, 125, 127, 128, 129, 130, 132, 135, 140, 142, 145, 147, 148, 149, 150, 151, 154, 155, 156, 158, 159, 161, 162, 167, 168, 170, 175, 179, 180, 183, 197, 208, 211, 220, 242, 243, 244, 245, 246, 249, 250, 287, 289, 290, 294, 308, 309, 310, 311, 312, 313, 314, 315, 338, 345, 358, 359, 360, 362, 365, 372, 373, 374, 375, 380, 387, 389, 420, 421], "matric": [3, 8, 27, 41, 47, 50, 51, 56, 60, 64, 67, 71, 73, 80, 99, 110, 120, 125, 128, 129, 139, 140, 142, 147, 148, 149, 150, 161, 163, 171, 172, 173, 175, 179, 180, 181, 183, 186, 219, 254, 256, 257, 264, 271, 297, 364, 372, 376, 380, 416, 421], "actual": [3, 6, 42, 66, 68, 71, 77, 86, 105, 161, 162, 164, 167, 172, 181, 226, 264, 277, 280, 399], "fortun": [3, 68], "later": [3, 6, 9, 22, 23, 40, 62, 69, 71, 91, 100, 101, 103, 164, 172, 193, 195, 196, 286, 357, 360, 365, 367, 368, 370, 374, 375, 376, 378, 379, 397, 419], "automat": [3, 15, 16, 19, 22, 23, 33, 34, 40, 54, 89, 92, 94, 111, 112, 118, 125, 127, 139, 140, 141, 147, 152, 159, 172, 173, 174, 193, 201, 242, 243, 244, 245, 247, 248, 249, 250, 264, 277, 279, 297, 304, 310, 313, 325, 336, 356, 360, 365, 368, 373, 374, 375, 382, 387, 389, 391, 419, 421], "transform": [3, 23, 24, 40, 41, 48, 49, 50, 51, 53, 54, 66, 69, 71, 84, 91, 92, 94, 98, 99, 100, 103, 108, 111, 113, 128, 129, 133, 135, 137, 138, 139, 140, 142, 144, 147, 151, 152, 157, 164, 167, 171, 172, 179, 202, 220, 242, 243, 244, 245, 249, 250, 264, 277, 280, 284, 295, 297, 305, 308, 309, 310, 311, 312, 313, 314, 315, 386, 387, 388, 389, 401, 405, 421], "all": [3, 4, 6, 8, 15, 19, 23, 27, 30, 32, 35, 36, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 66, 67, 69, 70, 71, 72, 76, 77, 79, 80, 87, 89, 91, 92, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 113, 114, 120, 125, 132, 135, 138, 140, 142, 143, 147, 148, 149, 151, 152, 153, 155, 157, 159, 161, 162, 164, 166, 169, 170, 172, 173, 174, 180, 181, 183, 187, 188, 190, 191, 192, 208, 216, 217, 220, 222, 225, 226, 227, 232, 233, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 256, 257, 259, 264, 267, 273, 277, 278, 279, 282, 283, 288, 293, 294, 297, 298, 299, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 320, 321, 322, 323, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 360, 362, 363, 365, 367, 368, 370, 371, 373, 374, 375, 377, 380, 387, 389, 392, 399, 401, 405, 416, 419, 420], "do": [3, 6, 9, 22, 24, 25, 30, 31, 34, 40, 42, 49, 50, 51, 57, 61, 64, 65, 66, 67, 68, 70, 75, 77, 79, 80, 94, 98, 100, 101, 106, 108, 113, 129, 133, 138, 142, 147, 148, 152, 153, 154, 155, 157, 159, 161, 164, 169, 170, 172, 173, 174, 179, 189, 213, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 273, 277, 279, 282, 294, 309, 310, 311, 312, 313, 314, 315, 320, 321, 322, 387, 401, 405, 419], "defin": [3, 6, 21, 23, 29, 30, 32, 33, 36, 37, 42, 47, 49, 54, 58, 61, 64, 66, 67, 69, 71, 72, 76, 77, 80, 81, 91, 98, 101, 111, 139, 140, 141, 142, 145, 147, 149, 151, 152, 153, 154, 159, 162, 163, 164, 166, 167, 173, 174, 189, 193, 207, 219, 221, 242, 243, 244, 245, 247, 248, 251, 255, 259, 264, 266, 271, 297, 305, 361, 370, 376, 378, 379, 389, 390, 391, 392, 393, 395, 396, 412], "vt": [3, 18, 94], "mask_filenam": [3, 30, 32, 35, 39, 98, 102, 113, 154], "mask_vt": [3, 15, 16, 18, 30, 32, 94, 98, 113, 154, 172, 211], "anatom": [3, 6, 11, 15, 17, 18, 22, 23, 25, 30, 32, 36, 94, 102, 111, 114, 128, 147, 152, 159, 167, 174, 189, 191, 193, 201, 208, 211, 212, 215, 217, 222, 305, 360, 373, 375, 382, 419], "background": [3, 6, 8, 14, 15, 16, 22, 23, 27, 30, 31, 40, 44, 49, 56, 69, 91, 92, 94, 104, 110, 113, 123, 125, 127, 128, 129, 130, 132, 135, 138, 144, 147, 162, 167, 173, 174, 189, 195, 196, 198, 199, 202, 203, 215, 221, 242, 243, 244, 245, 249, 250, 264, 277, 309, 311, 312, 314, 317, 320, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 360, 362, 365, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 385, 387, 390, 392, 393, 399, 419, 421], "plot_roi": [3, 10, 17, 19, 25, 49, 66, 86, 89, 92, 94, 131, 138, 139, 144, 147, 149, 173, 174, 373, 419], "bg_img": [3, 6, 16, 17, 29, 30, 33, 36, 40, 42, 64, 67, 70, 71, 75, 88, 93, 113, 129, 135, 141, 147, 154, 174, 264, 277, 368, 373, 374, 375, 382, 399], "anat": [3, 6, 15, 16, 17, 18, 25, 29, 30, 32, 42, 43, 94, 113, 154, 172, 174, 203, 211, 215, 217, 229, 230, 302], "cmap": [3, 9, 11, 12, 19, 20, 22, 23, 35, 36, 38, 40, 41, 42, 44, 50, 53, 76, 77, 79, 80, 81, 86, 102, 105, 106, 133, 135, 144, 147, 152, 215, 216, 217, 360, 361, 365, 366, 367, 370, 372, 373, 374, 375, 376, 377, 378, 379, 382, 383, 385, 419], "pair": [3, 74, 82, 86, 98, 110, 114, 154, 155, 166, 217, 220, 222, 242, 243, 244, 245, 247, 248, 277, 303, 304, 305, 306, 337, 364, 367, 372, 380, 388, 405], "0x7fdb476959d0": 3, "convert": [3, 6, 10, 11, 20, 21, 36, 42, 48, 49, 50, 54, 66, 79, 86, 94, 98, 107, 108, 113, 135, 140, 142, 144, 147, 152, 154, 159, 167, 173, 262, 283, 284, 292, 309, 310, 311, 312, 313, 314, 315], "appli": [3, 29, 31, 32, 42, 44, 50, 56, 61, 64, 66, 69, 79, 80, 89, 92, 94, 98, 100, 101, 103, 104, 112, 114, 123, 125, 129, 132, 135, 140, 141, 142, 145, 147, 148, 149, 150, 153, 155, 156, 157, 159, 163, 166, 167, 171, 179, 187, 222, 241, 242, 243, 244, 245, 249, 250, 255, 264, 277, 279, 280, 281, 282, 293, 299, 301, 302, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 324, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 360, 370, 373, 374, 375, 376, 378, 379, 382, 386, 387, 388, 389, 391, 392, 393, 398, 400, 401, 405, 410, 421], "instanc": [3, 4, 6, 15, 31, 49, 51, 66, 68, 86, 129, 135, 142, 147, 148, 149, 151, 153, 154, 162, 163, 164, 166, 167, 169, 172, 173, 179, 180, 181, 186, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 256, 257, 260, 261, 264, 271, 273, 277, 279, 283, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 372, 376, 377, 378, 379, 386, 387, 388, 389, 420], "csv": [3, 6, 29, 40, 41, 47, 55, 113, 122, 147, 149, 154, 187, 188, 218, 226, 249, 250, 264, 282, 308, 309, 310, 311, 312, 313, 314, 315, 387, 389, 401], "file": [3, 6, 7, 9, 14, 22, 23, 27, 30, 32, 33, 34, 35, 36, 40, 41, 45, 47, 48, 49, 51, 53, 55, 59, 60, 62, 64, 66, 73, 82, 86, 91, 92, 94, 96, 98, 100, 101, 108, 109, 110, 111, 113, 114, 120, 122, 127, 131, 132, 133, 134, 135, 138, 142, 143, 144, 147, 148, 149, 151, 152, 154, 162, 163, 170, 171, 174, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 240, 242, 243, 249, 250, 264, 267, 277, 282, 292, 293, 295, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 383, 384, 385, 387, 389, 397, 399, 401, 403, 404, 405, 420, 421], "separ": [3, 34, 48, 50, 64, 66, 67, 83, 88, 94, 96, 100, 110, 125, 142, 144, 147, 152, 153, 155, 159, 162, 164, 167, 170, 172, 173, 186, 203, 294, 305, 326, 328, 329, 356, 372, 374, 380, 389, 390, 391], "space": [3, 6, 15, 22, 23, 28, 40, 45, 48, 51, 55, 60, 62, 66, 69, 73, 84, 99, 101, 108, 110, 113, 114, 125, 127, 129, 132, 135, 140, 147, 149, 162, 163, 164, 166, 167, 174, 190, 192, 197, 199, 201, 203, 205, 206, 207, 222, 224, 226, 230, 232, 248, 249, 250, 264, 267, 271, 282, 283, 284, 294, 297, 308, 311, 314, 315, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 358, 360, 361, 362, 365, 367, 368, 371, 373, 374, 375, 380, 381, 382, 384, 386, 388, 401, 405], "panda": [3, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 94, 98, 100, 102, 113, 114, 129, 132, 138, 140, 142, 143, 145, 147, 154, 179, 187, 193, 194, 205, 206, 207, 215, 216, 217, 226, 249, 250, 264, 265, 267, 271, 277, 278, 279, 305, 306, 307, 309, 311, 312, 314, 315, 363, 364, 366, 387, 398, 401], "arrai": [3, 5, 6, 9, 10, 11, 20, 21, 22, 23, 26, 33, 34, 36, 40, 41, 42, 43, 44, 48, 49, 50, 51, 53, 54, 55, 56, 58, 61, 68, 70, 72, 79, 84, 86, 87, 89, 94, 98, 102, 105, 106, 108, 112, 127, 129, 135, 138, 141, 142, 144, 147, 148, 151, 152, 154, 157, 161, 171, 172, 174, 179, 180, 181, 183, 185, 186, 193, 194, 199, 205, 206, 207, 219, 220, 232, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 282, 287, 289, 297, 298, 301, 304, 308, 309, 310, 311, 312, 313, 314, 315, 316, 320, 322, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 360, 362, 363, 365, 367, 371, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 399, 401, 402, 403, 404, 405, 411, 421], "pd": [3, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 63, 64, 65, 66, 67, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 94, 98, 102, 113, 172, 212], "read_csv": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 94, 98, 102, 113, 172], "session_target": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 94, 98, 102, 113, 172, 211], "delimit": [3, 40, 41, 98, 100, 113, 172], "chunk": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 98, 102], "2": [3, 6, 7, 9, 11, 12, 14, 20, 21, 22, 23, 24, 25, 27, 29, 30, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 111, 114, 116, 118, 119, 127, 129, 130, 132, 133, 140, 141, 142, 145, 152, 155, 159, 160, 161, 162, 164, 169, 170, 173, 174, 179, 180, 181, 185, 186, 187, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 208, 209, 210, 211, 212, 213, 217, 219, 222, 224, 226, 228, 230, 231, 232, 234, 235, 237, 238, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 264, 266, 271, 273, 277, 279, 280, 282, 288, 289, 292, 293, 294, 298, 299, 301, 305, 306, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 324, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 362, 369, 371, 372, 373, 374, 375, 376, 380, 382, 388, 389, 391, 401, 402, 405, 419, 420], "4": [3, 6, 12, 14, 15, 18, 20, 24, 27, 29, 33, 34, 35, 36, 40, 41, 42, 43, 44, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 62, 64, 65, 66, 67, 68, 69, 72, 73, 75, 76, 77, 79, 81, 84, 86, 91, 92, 98, 99, 100, 101, 102, 103, 107, 111, 115, 120, 125, 128, 132, 133, 134, 135, 140, 152, 154, 159, 160, 161, 169, 181, 187, 202, 206, 209, 219, 220, 226, 227, 228, 231, 242, 243, 244, 245, 247, 248, 249, 250, 277, 282, 297, 298, 305, 306, 317, 319, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 365, 367, 368, 371, 372, 373, 374, 375, 387, 401, 405, 419], "1447": [3, 98], "11": [3, 6, 30, 33, 36, 42, 43, 44, 49, 53, 56, 59, 62, 65, 66, 67, 72, 73, 88, 91, 92, 96, 98, 102, 103, 109, 111, 115, 120, 129, 132, 133, 134, 142, 147, 180, 192, 193, 219, 220, 221, 228], "1448": [3, 98], "1449": [3, 98], "1450": [3, 42, 98, 102], "1451": [3, 98], "1452": [3, 94, 98], "row": [3, 6, 40, 56, 66, 72, 98, 100, 114, 139, 147, 167, 222, 224, 254, 255, 256, 257, 264, 277, 278, 279, 336, 338, 341, 355, 360, 365, 368, 370, 372, 373, 374, 375, 386, 398, 405], "x": [3, 6, 9, 13, 14, 15, 24, 31, 33, 35, 37, 40, 41, 44, 52, 54, 56, 58, 62, 64, 66, 67, 70, 84, 91, 92, 94, 101, 103, 111, 122, 127, 129, 135, 140, 142, 144, 147, 154, 159, 167, 170, 173, 174, 179, 191, 197, 219, 220, 242, 243, 244, 245, 247, 248, 249, 250, 251, 254, 255, 256, 257, 264, 273, 277, 284, 305, 308, 309, 311, 312, 314, 315, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 362, 365, 367, 368, 371, 373, 374, 375, 376, 377, 378, 379, 382, 385, 386, 388, 389, 390, 394, 398, 399, 400, 416, 419], "column": [3, 6, 56, 62, 65, 66, 69, 70, 71, 72, 75, 76, 77, 79, 80, 81, 98, 100, 101, 102, 105, 106, 108, 114, 139, 147, 164, 180, 181, 183, 242, 243, 244, 245, 251, 254, 255, 256, 257, 262, 264, 271, 277, 278, 279, 282, 297, 305, 306, 307, 325, 336, 338, 341, 355, 360, 363, 364, 365, 366, 368, 372, 373, 374, 375, 396, 398, 400, 401, 402], "denot": [3, 6, 15, 132, 147, 164, 172, 173, 174, 305, 306, 336, 358, 374, 389, 390, 391, 392], "experiment": [3, 63, 64, 65, 66, 69, 71, 80, 94, 138, 139, 142, 145, 147, 154, 161, 164, 173, 194, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 264, 271, 277, 280, 376, 378, 379], "condit": [3, 6, 29, 30, 31, 33, 35, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 80, 94, 98, 101, 102, 108, 113, 139, 142, 144, 147, 148, 154, 161, 167, 170, 173, 194, 219, 264, 266, 271, 277, 363], "type": [3, 6, 10, 15, 18, 21, 29, 34, 42, 49, 63, 65, 66, 69, 72, 88, 94, 100, 102, 114, 121, 124, 126, 129, 132, 135, 141, 142, 143, 144, 145, 147, 156, 159, 162, 163, 164, 167, 172, 187, 191, 195, 196, 202, 219, 246, 252, 260, 264, 277, 282, 286, 287, 289, 291, 292, 294, 295, 299, 300, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 373, 374, 387, 389, 390, 391, 398, 399], "go": [3, 9, 34, 55, 56, 58, 62, 64, 66, 68, 86, 97, 104, 108, 109, 110, 112, 114, 128, 147, 148, 154, 158, 162, 166, 169, 170, 174, 224, 287, 292, 293, 295, 362, 367, 371, 375, 380, 382, 421], "try": [3, 4, 9, 36, 39, 40, 49, 52, 53, 56, 57, 58, 62, 63, 65, 66, 75, 77, 78, 89, 98, 103, 114, 144, 147, 148, 149, 154, 155, 160, 161, 162, 170, 174, 420], "length": [3, 15, 55, 68, 77, 152, 162, 194, 197, 242, 243, 244, 245, 247, 248, 251, 255, 256, 257, 268, 269, 270, 274, 275, 276, 283, 308, 311, 314, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 360, 365, 368, 371, 372, 373, 374, 375, 387, 405], "dtype": [3, 10, 11, 20, 21, 23, 33, 36, 40, 41, 44, 49, 53, 54, 56, 58, 68, 77, 79, 86, 89, 91, 92, 94, 101, 103, 126, 127, 128, 132, 133, 147, 172, 265, 268, 269, 270, 274, 275, 276, 281, 283, 291, 292, 295, 297, 309, 310, 311, 312, 313, 314, 315, 316, 386, 388, 395], "As": [3, 15, 34, 36, 44, 49, 52, 54, 66, 79, 81, 92, 94, 95, 98, 101, 103, 113, 135, 145, 147, 148, 149, 151, 153, 154, 155, 159, 161, 162, 164, 166, 172, 267, 305, 306], "target": [3, 29, 33, 40, 84, 89, 94, 98, 100, 132, 147, 154, 155, 159, 161, 162, 167, 170, 171, 211, 221, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 277, 279, 297, 298, 308, 311, 314, 318, 321, 325, 386, 388, 389, 421], "experi": [3, 6, 29, 33, 34, 41, 66, 70, 94, 111, 112, 158, 163, 164, 167, 421], "consequ": [3, 15, 86, 174], "quit": [3, 6, 66, 152, 161, 217], "big": [3, 41, 49, 132, 147, 151, 154, 162, 172, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405], "Not": [3, 64, 66, 67, 195, 196, 329, 386, 388], "ha": [3, 6, 10, 11, 29, 30, 32, 33, 34, 35, 36, 42, 47, 49, 51, 52, 54, 58, 66, 68, 70, 72, 75, 79, 81, 86, 89, 91, 94, 98, 100, 104, 114, 120, 122, 126, 129, 132, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 153, 155, 156, 159, 161, 162, 164, 166, 170, 174, 180, 181, 189, 190, 191, 193, 198, 202, 222, 264, 271, 277, 279, 288, 291, 292, 294, 297, 298, 302, 305, 306, 311, 325, 327, 380, 393, 400, 402, 405, 419], "interest": [3, 6, 14, 15, 16, 35, 42, 49, 51, 55, 68, 70, 71, 83, 96, 98, 99, 100, 101, 104, 107, 110, 114, 120, 138, 147, 148, 154, 156, 157, 159, 161, 162, 163, 164, 167, 169, 173, 174, 188, 194, 197, 199, 208, 211, 212, 215, 216, 217, 220, 221, 226, 229, 230, 231, 232, 254, 256, 257, 287, 292, 294, 295, 299, 302, 308, 312, 365, 374, 375, 377, 380, 389, 421], "u": [3, 4, 14, 15, 24, 40, 55, 58, 63, 66, 77, 79, 89, 94, 111, 154, 155, 157, 162, 205, 207, 248, 256, 257, 420], "so": [3, 6, 10, 11, 14, 22, 33, 36, 40, 43, 48, 49, 52, 64, 66, 67, 69, 70, 72, 76, 79, 80, 81, 86, 89, 92, 94, 100, 101, 103, 108, 114, 140, 147, 159, 160, 161, 162, 164, 170, 172, 174, 179, 180, 181, 189, 195, 196, 203, 222, 227, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 277, 279, 302, 303, 308, 309, 310, 311, 312, 313, 314, 315, 325, 376, 378, 379, 386, 387, 388, 389, 405], "keep": [3, 31, 33, 34, 36, 50, 51, 54, 58, 66, 69, 70, 84, 86, 94, 98, 102, 103, 114, 118, 132, 139, 147, 152, 154, 155, 156, 159, 160, 162, 222, 226, 241, 247, 248, 249, 282, 288, 303, 317, 318, 319, 320, 321, 322, 323, 389, 390, 401, 402], "signal": [3, 6, 28, 43, 44, 45, 46, 48, 49, 50, 55, 57, 59, 64, 66, 67, 68, 70, 71, 78, 83, 86, 94, 96, 100, 107, 110, 111, 119, 131, 133, 135, 139, 140, 144, 145, 147, 148, 150, 151, 152, 153, 154, 156, 159, 161, 163, 164, 167, 171, 173, 179, 180, 181, 183, 187, 194, 195, 197, 205, 206, 208, 211, 219, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 277, 279, 282, 288, 289, 294, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 325, 357, 362, 371, 372, 380, 381, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 421], "creat": [3, 6, 10, 11, 20, 23, 33, 36, 40, 41, 42, 47, 48, 49, 55, 62, 64, 66, 67, 69, 71, 72, 75, 79, 84, 86, 94, 98, 100, 107, 108, 112, 113, 124, 132, 144, 145, 147, 148, 149, 153, 154, 155, 157, 162, 163, 164, 167, 168, 170, 171, 172, 174, 222, 224, 241, 249, 250, 264, 267, 277, 278, 289, 295, 327, 336, 337, 338, 341, 360, 361, 362, 363, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 395, 396, 397, 398, 419, 420, 421], "sampl": [3, 8, 14, 23, 27, 31, 34, 36, 40, 49, 58, 63, 66, 69, 71, 74, 75, 77, 78, 81, 82, 84, 94, 101, 105, 108, 110, 111, 113, 138, 140, 141, 147, 149, 154, 159, 161, 163, 164, 166, 174, 179, 180, 181, 183, 208, 217, 232, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 265, 266, 268, 269, 270, 271, 274, 275, 276, 277, 279, 282, 286, 287, 293, 309, 310, 324, 325, 337, 352, 361, 364, 367, 370, 379, 380, 386, 387, 388, 389, 400, 401, 402, 405, 416], "belong": [3, 30, 32, 142, 147, 154, 167, 174], "classif": [3, 30, 31, 32, 33, 35, 43, 46, 49, 59, 98, 100, 110, 111, 113, 138, 147, 148, 153, 154, 158, 159, 160, 167, 168, 169, 179, 187, 197, 208, 242, 243, 244, 245, 247, 306, 308, 313, 362, 372, 380, 420, 421], "becom": [3, 66, 114, 155, 156, 157, 164], "smaller": [3, 6, 32, 81, 122, 132, 140, 144, 147, 151, 159, 160, 161, 164, 167, 172, 195, 196, 248, 280, 293, 301, 386], "e": [3, 6, 15, 24, 29, 39, 40, 43, 44, 47, 48, 56, 66, 76, 86, 88, 92, 94, 100, 102, 103, 105, 111, 113, 114, 120, 138, 140, 141, 144, 147, 149, 152, 154, 157, 159, 160, 161, 162, 163, 164, 166, 167, 169, 173, 174, 180, 181, 183, 192, 193, 200, 205, 206, 207, 209, 219, 222, 224, 227, 242, 243, 244, 245, 247, 254, 256, 257, 264, 271, 277, 279, 280, 281, 282, 283, 284, 286, 301, 305, 306, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 362, 373, 376, 377, 378, 379, 381, 382, 383, 384, 385, 392, 393, 395, 401, 405, 419], "shorter": [3, 66, 161, 305], "condition_mask": [3, 29, 30, 31, 34, 36, 37, 98, 102, 113], "isin": [3, 29, 31, 34, 36, 37, 98, 102, 113, 114, 222], "larg": [3, 30, 31, 36, 39, 41, 43, 48, 49, 54, 56, 65, 70, 71, 72, 92, 111, 114, 133, 147, 151, 154, 155, 156, 157, 159, 161, 162, 164, 167, 168, 169, 172, 174, 217, 222, 224, 264, 266, 271, 310, 313, 317, 318, 319, 321, 322, 356, 387], "split": [3, 30, 31, 32, 34, 36, 39, 40, 41, 42, 43, 44, 49, 51, 86, 94, 99, 100, 138, 147, 152, 154, 156, 161, 162, 167, 173, 195, 196, 242, 243, 244, 245], "fmri_niimg": [3, 30, 34, 98, 154], "valu": [3, 4, 6, 9, 14, 15, 17, 24, 30, 31, 33, 40, 42, 44, 47, 52, 54, 55, 58, 61, 66, 69, 70, 72, 77, 79, 88, 89, 90, 91, 92, 94, 98, 100, 101, 102, 103, 105, 106, 107, 108, 114, 118, 120, 124, 127, 128, 132, 135, 139, 140, 142, 145, 147, 148, 151, 152, 155, 156, 158, 159, 160, 162, 164, 166, 167, 169, 172, 174, 179, 180, 181, 183, 185, 187, 189, 191, 193, 195, 196, 198, 199, 202, 203, 213, 217, 222, 226, 228, 231, 234, 235, 238, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 260, 264, 265, 273, 277, 279, 280, 281, 282, 283, 286, 288, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 359, 360, 361, 362, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 382, 383, 385, 386, 387, 388, 389, 391, 397, 398, 399, 401, 402, 405, 419], "216": [3, 30, 33, 41], "classifi": [3, 28, 32, 33, 36, 41, 45, 51, 98, 99, 110, 135, 138, 139, 147, 154, 155, 156, 157, 158, 167, 168, 169, 211, 242, 244, 245, 246, 247, 287, 289, 294, 375, 380, 421], "linear": [3, 6, 29, 33, 34, 35, 37, 44, 66, 69, 98, 102, 111, 129, 147, 154, 158, 163, 164, 165, 167, 168, 173, 174, 183, 222, 242, 243, 244, 245, 247, 248, 249, 250, 254, 256, 257, 264, 277, 282, 296, 297, 298, 306, 325, 369, 401, 405, 412, 420, 421], "kernel": [3, 29, 33, 34, 35, 44, 55, 94, 98, 154, 243, 245, 248, 268, 269, 270, 274, 275, 276], "svc": [3, 29, 30, 31, 32, 33, 34, 35, 113, 135, 147, 154, 155, 157, 242, 244, 246], "standard": [3, 6, 9, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 66, 69, 70, 72, 75, 89, 91, 92, 94, 98, 99, 101, 104, 105, 106, 108, 111, 113, 132, 135, 139, 141, 142, 147, 149, 152, 154, 155, 159, 162, 163, 164, 167, 172, 173, 174, 201, 226, 242, 243, 244, 245, 247, 248, 249, 250, 256, 257, 264, 266, 267, 271, 282, 302, 305, 309, 310, 311, 312, 313, 314, 315, 387, 389, 401, 420], "true": [3, 6, 9, 13, 14, 15, 21, 22, 23, 25, 26, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 64, 67, 69, 70, 71, 74, 75, 77, 79, 80, 81, 82, 86, 89, 91, 92, 94, 98, 99, 100, 101, 102, 103, 104, 105, 108, 110, 113, 114, 127, 130, 135, 142, 147, 149, 152, 154, 157, 159, 161, 164, 166, 167, 174, 179, 180, 181, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 205, 206, 207, 208, 211, 212, 213, 215, 216, 217, 219, 220, 221, 222, 224, 226, 232, 242, 243, 244, 245, 246, 247, 248, 249, 250, 259, 264, 267, 277, 279, 280, 282, 283, 286, 288, 292, 297, 298, 301, 302, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 395, 400, 401, 402, 419], "fit": [3, 6, 28, 30, 32, 35, 36, 37, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 65, 66, 69, 71, 73, 75, 76, 77, 79, 80, 81, 87, 89, 91, 92, 94, 98, 99, 100, 103, 110, 113, 132, 140, 142, 144, 147, 148, 150, 151, 152, 154, 155, 157, 159, 161, 164, 165, 167, 168, 169, 174, 179, 180, 181, 203, 210, 211, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 261, 264, 267, 273, 277, 279, 289, 294, 308, 309, 310, 311, 312, 313, 314, 315, 321, 325, 338, 341, 363, 375, 380, 386, 387, 388, 389, 392, 397, 399, 421], "train": [3, 31, 32, 34, 39, 40, 41, 42, 43, 44, 51, 98, 99, 138, 147, 154, 155, 156, 159, 161, 167, 169, 174, 180, 242, 243, 244, 245, 247, 248, 386, 388, 394], "without": [3, 6, 14, 23, 48, 50, 66, 78, 81, 84, 94, 114, 126, 135, 144, 147, 149, 152, 158, 160, 161, 167, 172, 280, 286, 306, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 361, 368, 373, 419, 421], "resampl": [3, 9, 11, 29, 30, 32, 33, 34, 35, 36, 43, 48, 49, 52, 53, 54, 56, 66, 71, 75, 83, 91, 92, 96, 98, 110, 113, 124, 125, 128, 129, 135, 139, 141, 142, 147, 171, 222, 224, 225, 226, 236, 237, 239, 242, 243, 244, 245, 247, 248, 249, 250, 277, 283, 287, 292, 294, 296, 297, 298, 309, 310, 311, 312, 313, 314, 317, 319, 320, 321, 322, 367, 368, 374, 375, 380, 382, 387, 392, 405, 421], "453": [3, 29, 30, 32, 33, 34, 35, 36, 98], "provid": [3, 5, 6, 9, 29, 30, 32, 33, 34, 35, 36, 43, 44, 47, 48, 49, 52, 54, 56, 62, 64, 66, 67, 68, 71, 75, 76, 77, 79, 80, 84, 91, 92, 94, 98, 101, 105, 112, 113, 114, 122, 130, 133, 135, 136, 138, 139, 140, 141, 142, 143, 144, 147, 148, 150, 151, 153, 154, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 174, 179, 183, 186, 187, 189, 190, 192, 199, 203, 211, 222, 226, 242, 243, 244, 245, 247, 248, 249, 250, 251, 255, 264, 265, 266, 270, 271, 276, 277, 279, 282, 288, 297, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 359, 361, 363, 364, 371, 373, 377, 387, 389, 390, 397, 401, 405, 419, 420], "sform": [3, 29, 30, 32, 33, 34, 35, 36, 98, 144, 147], "header": [3, 11, 29, 30, 32, 33, 34, 35, 36, 94, 98, 101, 118, 133, 135, 143, 147, 172, 282, 285, 295, 361, 401], "result": [3, 6, 14, 15, 23, 24, 30, 33, 34, 35, 36, 40, 42, 43, 44, 48, 49, 51, 55, 58, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 75, 77, 78, 79, 84, 86, 87, 88, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 108, 111, 112, 114, 125, 132, 135, 138, 143, 144, 147, 148, 150, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 172, 173, 174, 187, 189, 199, 217, 222, 224, 231, 242, 243, 246, 253, 254, 256, 257, 258, 264, 273, 277, 279, 282, 292, 293, 294, 297, 304, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 376, 383, 398, 405, 419, 421], "mai": [3, 17, 29, 30, 32, 33, 34, 35, 36, 43, 49, 56, 62, 66, 72, 80, 86, 98, 100, 103, 105, 106, 111, 113, 114, 118, 133, 135, 143, 147, 148, 154, 155, 157, 164, 167, 172, 174, 179, 217, 222, 248, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 264, 277, 279, 280, 297, 304, 306, 310, 313, 325, 376, 378, 379, 398, 405], "expect": [3, 6, 29, 30, 32, 33, 34, 35, 36, 61, 62, 66, 78, 79, 81, 95, 98, 101, 102, 105, 106, 114, 120, 135, 144, 147, 152, 159, 162, 164, 167, 170, 173, 174, 248, 264, 266, 271, 277, 279, 283, 302], "both": [3, 9, 15, 24, 39, 47, 49, 51, 58, 69, 79, 80, 89, 94, 100, 105, 108, 114, 135, 142, 147, 148, 151, 153, 159, 160, 162, 163, 167, 172, 173, 174, 179, 186, 198, 208, 264, 266, 271, 279, 280, 282, 301, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 372, 391, 401, 405, 420], "class": [3, 11, 28, 32, 42, 43, 45, 49, 51, 54, 56, 91, 94, 98, 99, 110, 119, 120, 122, 128, 129, 130, 133, 135, 138, 140, 141, 142, 144, 145, 147, 153, 154, 158, 161, 162, 163, 166, 174, 175, 177, 178, 179, 180, 181, 211, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 264, 277, 283, 295, 305, 308, 309, 310, 311, 312, 313, 314, 315, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 372, 380, 386, 387, 388, 389, 390, 391, 397, 406, 408, 410, 413, 414, 415, 421], "number": [3, 6, 29, 31, 33, 34, 39, 42, 43, 49, 50, 53, 54, 55, 57, 58, 65, 66, 69, 72, 77, 79, 86, 89, 92, 94, 98, 100, 103, 104, 105, 114, 120, 132, 135, 138, 139, 140, 142, 147, 148, 151, 152, 154, 155, 156, 159, 162, 164, 167, 169, 170, 174, 179, 180, 181, 183, 187, 188, 191, 194, 195, 196, 199, 202, 208, 211, 213, 216, 217, 220, 222, 226, 232, 235, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 260, 264, 273, 277, 279, 280, 282, 284, 286, 288, 294, 301, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 360, 361, 362, 363, 365, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 398, 399, 400, 401, 402, 419], "problem": [3, 6, 31, 33, 39, 43, 48, 92, 94, 111, 154, 155, 156, 159, 160, 161, 162, 164, 167, 169, 170, 183, 247, 248, 250, 251, 254, 255, 256, 257, 279, 325], "balanc": [3, 49, 142, 147, 151], "perform": [3, 30, 33, 34, 43, 44, 48, 51, 62, 66, 71, 79, 80, 89, 91, 92, 94, 95, 99, 100, 101, 102, 105, 106, 113, 114, 138, 139, 140, 142, 147, 148, 153, 155, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 172, 173, 174, 183, 213, 226, 235, 238, 242, 243, 244, 245, 247, 248, 249, 250, 264, 266, 273, 277, 279, 296, 297, 298, 299, 300, 301, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 321, 322, 325, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 360, 362, 365, 367, 368, 371, 373, 374, 375, 382, 386, 387, 388, 389, 392, 394, 399, 400, 401, 405, 421], "done": [3, 6, 34, 35, 36, 41, 42, 43, 44, 48, 49, 51, 53, 57, 58, 64, 66, 94, 98, 102, 103, 105, 113, 114, 142, 144, 147, 148, 149, 151, 154, 155, 157, 159, 161, 164, 170, 173, 180, 181, 242, 243, 244, 245, 247, 248, 249, 250, 264, 277, 282, 283, 291, 301, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 387, 388, 389, 401], "sum": [3, 41, 42, 49, 58, 65, 68, 77, 79, 84, 101, 102, 105, 106, 107, 135, 147, 161, 247, 248, 251, 255, 256, 288, 309, 312, 392, 402], "float": [3, 40, 41, 43, 68, 75, 135, 138, 147, 180, 181, 183, 187, 213, 234, 235, 238, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 263, 264, 266, 268, 269, 270, 271, 274, 275, 276, 277, 279, 280, 281, 282, 286, 288, 297, 298, 301, 305, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 359, 360, 361, 362, 365, 367, 368, 370, 371, 373, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 394, 397, 398, 399, 400, 401, 402, 405], "len": [3, 12, 22, 30, 32, 33, 34, 47, 48, 51, 62, 63, 64, 65, 66, 68, 69, 76, 79, 91, 94, 98, 103, 114, 183, 242, 243, 244, 245, 247, 248, 254, 256, 257, 277, 294, 297, 317, 319, 320, 322, 387], "meaningless": [3, 154, 164, 280], "why": [3, 94, 161, 174], "proper": [3, 34, 142, 147, 161, 198, 199, 420], "error": [3, 6, 42, 43, 66, 76, 79, 81, 84, 94, 103, 122, 129, 132, 135, 144, 145, 147, 149, 154, 155, 159, 162, 164, 167, 254, 256, 271, 277, 279, 280, 282, 283, 304, 310, 313, 315, 321, 420], "rate": [3, 6, 66, 81, 122, 147, 161, 164, 167, 174, 259, 279], "test": [3, 14, 29, 31, 34, 36, 40, 42, 43, 44, 51, 53, 66, 71, 74, 77, 78, 82, 99, 101, 102, 105, 106, 110, 111, 131, 139, 142, 147, 154, 156, 157, 159, 160, 161, 164, 165, 166, 167, 170, 173, 181, 187, 188, 189, 190, 191, 192, 193, 197, 200, 201, 203, 211, 212, 215, 216, 217, 220, 221, 226, 232, 242, 243, 244, 245, 246, 247, 248, 252, 261, 277, 279, 280, 287, 293, 297, 298, 301, 304, 325, 337, 338, 352, 364, 367, 375, 380, 382, 412, 420], "30": [3, 6, 32, 33, 36, 40, 41, 42, 43, 44, 48, 51, 57, 62, 63, 68, 91, 99, 100, 102, 103, 105, 107, 109, 111, 122, 132, 147, 160, 188, 244, 245, 254, 256, 257, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 397], "last": [3, 6, 33, 35, 40, 55, 72, 134, 147, 164, 169, 170, 185, 186, 282, 289, 303, 419, 420], "point": [3, 4, 8, 15, 22, 23, 27, 54, 55, 84, 86, 91, 94, 110, 113, 132, 135, 144, 147, 152, 154, 161, 164, 169, 170, 171, 172, 181, 242, 243, 244, 245, 264, 297, 298, 308, 311, 314, 319, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 362, 365, 368, 371, 373, 374, 375, 379, 380, 382, 392, 393, 405, 421], "dure": [3, 6, 55, 56, 65, 94, 100, 101, 111, 113, 132, 139, 147, 154, 155, 161, 162, 164, 167, 174, 181, 183, 200, 277, 279, 317, 318, 319, 321, 322, 370, 386], "fmri_niimgs_train": 3, "fmri_niimgs_test": 3, "conditions_train": 3, "conditions_test": 3, "calcul": [3, 41, 47, 48, 58, 92, 97, 109, 110, 133, 147, 163, 216, 217, 242, 243, 244, 245, 249, 250, 254, 256, 257, 272, 279, 287, 305, 308, 311, 314, 318, 321, 325, 336, 353, 360, 365, 368, 373, 374, 375, 380, 382, 387], "hasn": [3, 161], "t": [3, 5, 6, 9, 14, 16, 22, 24, 33, 37, 41, 55, 56, 58, 62, 66, 67, 68, 69, 71, 72, 75, 76, 77, 79, 80, 83, 90, 92, 93, 94, 96, 99, 100, 102, 103, 104, 105, 107, 108, 110, 111, 114, 138, 147, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 172, 173, 189, 190, 199, 200, 202, 203, 209, 217, 222, 223, 224, 227, 247, 248, 252, 254, 255, 256, 257, 258, 260, 261, 264, 277, 279, 301, 304, 305, 306, 319, 325, 370, 373, 375, 380, 391, 399, 402, 405, 419], "examin": [3, 111, 167, 209, 227], "well": [3, 6, 15, 44, 48, 51, 58, 66, 68, 70, 79, 89, 100, 125, 132, 139, 141, 147, 148, 149, 151, 152, 154, 155, 157, 160, 162, 164, 167, 169, 179, 180, 181, 194, 200, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 277, 283, 297, 306, 308, 309, 310, 311, 312, 313, 314, 315, 386, 387, 388, 389], "3f": [3, 6, 34, 44, 48, 55, 98], "767": 3, "set": [3, 6, 14, 15, 16, 21, 28, 29, 30, 31, 33, 36, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 62, 65, 66, 70, 79, 80, 81, 89, 94, 95, 98, 99, 100, 101, 108, 110, 111, 114, 125, 129, 135, 138, 139, 141, 142, 144, 145, 147, 148, 149, 152, 154, 156, 158, 161, 163, 164, 165, 166, 167, 168, 172, 174, 179, 180, 181, 187, 193, 194, 205, 206, 207, 211, 215, 216, 217, 222, 224, 226, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 256, 257, 263, 264, 266, 271, 277, 278, 280, 282, 289, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 382, 383, 385, 386, 387, 388, 389, 391, 394, 399, 401, 405, 419, 421], "repetit": [3, 6, 33, 62, 63, 64, 67, 71, 100, 101, 108, 131, 147, 164, 167, 208, 213, 235, 238, 242, 243, 244, 245, 247, 248, 264, 282, 309, 310, 361, 387, 389, 401], "strategi": [3, 24, 28, 45, 48, 49, 66, 88, 89, 91, 92, 99, 110, 111, 135, 139, 140, 142, 147, 152, 155, 158, 159, 161, 164, 171, 181, 211, 242, 243, 244, 245, 246, 249, 250, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 321, 361, 372, 373, 380, 387, 392, 401, 405, 421], "scikit": [3, 34, 49, 94, 97, 102, 104, 109, 110, 112, 118, 120, 125, 127, 128, 129, 132, 135, 140, 142, 145, 147, 148, 151, 154, 155, 156, 158, 159, 161, 162, 168, 169, 170, 211, 242, 243, 244, 245, 246, 289, 308, 309, 310, 311, 312, 313, 314, 315, 375, 387, 420, 421], "sklearn": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 57, 58, 92, 94, 98, 99, 102, 103, 104, 105, 106, 132, 135, 139, 140, 147, 148, 154, 155, 157, 161, 174, 181, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 211, 212, 218, 222, 224, 229, 230, 231, 232, 242, 243, 244, 245, 250, 264, 273], "model_select": [3, 29, 30, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 51, 98, 99, 132, 147, 154, 157, 242, 243, 244, 245], "cv": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 44, 51, 58, 98, 99, 129, 147, 154, 159, 181, 242, 243, 244, 245, 246, 247, 248], "n_split": [3, 34, 36, 37, 40, 44, 51, 99], "method": [3, 6, 14, 15, 26, 31, 36, 39, 44, 46, 48, 58, 59, 86, 89, 91, 92, 94, 100, 105, 110, 111, 112, 114, 120, 124, 128, 132, 135, 138, 139, 140, 142, 144, 147, 148, 149, 151, 155, 156, 160, 161, 162, 167, 168, 169, 172, 173, 174, 179, 180, 181, 191, 202, 208, 219, 222, 224, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 255, 256, 257, 259, 264, 277, 279, 284, 287, 288, 289, 294, 297, 298, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 365, 374, 381, 383, 384, 385, 386, 387, 388, 389, 397, 401, 402, 419, 421], "yield": [3, 31, 39, 49, 77, 79, 84, 114, 135, 138, 142, 147, 153, 154, 155, 156, 159, 160, 163, 164, 222, 246, 250, 260, 264, 266, 271, 280, 301, 386], "fold": [3, 29, 31, 34, 36, 40, 51, 69, 94, 98, 99, 154, 155, 157, 159, 161, 174, 181, 242, 243, 244, 245, 246, 247, 248], "01d": 3, "886": 3, "698": [3, 33], "744": [3, 33], "return": [3, 4, 9, 14, 15, 31, 33, 39, 40, 41, 44, 47, 56, 64, 66, 68, 80, 84, 94, 100, 107, 113, 114, 124, 128, 135, 138, 140, 142, 143, 144, 147, 149, 154, 156, 159, 161, 162, 167, 169, 170, 172, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 336, 341, 343, 347, 353, 354, 355, 356, 357, 358, 359, 361, 363, 364, 366, 369, 370, 372, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 413, 419], "paramet": [3, 6, 14, 15, 21, 23, 24, 28, 29, 32, 42, 44, 45, 49, 51, 54, 56, 60, 71, 73, 89, 91, 92, 94, 95, 104, 105, 106, 108, 110, 113, 114, 126, 129, 132, 133, 135, 139, 140, 141, 142, 143, 144, 145, 147, 149, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 167, 169, 171, 172, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 419, 421], "n_fold": [3, 181, 242, 243, 244, 245, 247, 248], "pipelin": [3, 35, 37, 39, 40, 41, 42, 44, 75, 98, 99, 111, 138, 147, 153, 154, 155, 158, 159, 160, 167, 173, 179, 180, 181, 187, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 277, 282, 308, 309, 310, 311, 312, 313, 314, 315, 386, 387, 388, 389, 401, 421], "found": [3, 6, 10, 15, 18, 21, 48, 49, 50, 52, 55, 62, 81, 87, 88, 100, 101, 103, 107, 108, 113, 114, 132, 147, 148, 151, 152, 153, 154, 155, 156, 157, 159, 161, 162, 169, 170, 173, 174, 222, 224, 226, 282, 284, 302, 316, 319, 360, 374, 375, 401, 419], "websit": [3, 42, 75, 120, 132, 147, 187, 200, 221], "best": [3, 34, 42, 43, 44, 95, 138, 144, 147, 154, 155, 156, 159, 161, 162, 164, 173, 242, 243, 244, 245, 247, 248, 338, 341, 386, 387], "per": [3, 6, 30, 31, 33, 40, 48, 57, 66, 78, 94, 101, 102, 108, 140, 147, 148, 154, 162, 174, 181, 201, 220, 242, 243, 244, 245, 247, 248, 250, 252, 264, 265, 267, 271, 278, 302, 305, 309, 310, 311, 313, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 363, 400], "cv_params_": [3, 34, 242, 243, 244, 245], "c": [3, 34, 37, 40, 41, 42, 43, 44, 49, 56, 64, 67, 70, 98, 99, 100, 102, 111, 114, 155, 159, 160, 180, 183, 191, 193, 200, 202, 205, 206, 212, 213, 219, 221, 222, 224, 226, 237, 256, 257, 282, 297, 298, 305, 306, 325, 392, 395, 401], "100": [3, 15, 31, 33, 34, 36, 40, 41, 42, 43, 44, 49, 55, 63, 75, 86, 89, 102, 105, 114, 155, 164, 171, 181, 187, 199, 219, 222, 242, 243, 244, 245, 247, 248, 264, 272, 273, 281, 288, 301, 402, 419, 421], "speed": [3, 36, 37, 47, 77, 89, 98, 105, 111, 151, 157, 160, 161, 173, 174, 325, 386, 405], "cpu": [3, 42, 102, 105, 157, 181, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 273, 277, 279, 294, 309, 310, 311, 320, 321, 322, 325, 387], "comput": [3, 6, 9, 15, 16, 22, 25, 29, 30, 31, 33, 39, 40, 41, 43, 44, 46, 47, 48, 49, 51, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 77, 79, 81, 83, 85, 90, 92, 95, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 114, 120, 132, 138, 139, 140, 142, 147, 150, 151, 153, 154, 155, 156, 157, 159, 160, 161, 164, 165, 167, 168, 169, 171, 172, 175, 179, 181, 183, 197, 208, 211, 221, 231, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 254, 256, 257, 260, 261, 263, 264, 266, 271, 273, 277, 279, 280, 287, 288, 289, 292, 293, 294, 295, 299, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 359, 362, 365, 372, 373, 374, 375, 380, 381, 383, 386, 387, 388, 389, 397, 399, 400, 402, 405, 411, 419, 421], "n_job": [3, 33, 35, 36, 37, 42, 43, 44, 47, 48, 53, 57, 58, 77, 79, 98, 99, 102, 105, 157, 181, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 267, 273, 277, 279, 294, 309, 310, 311, 320, 321, 322, 325, 387], "respect": [3, 62, 108, 135, 144, 147, 148, 162, 164, 167, 170, 174, 205, 207, 242, 243, 244, 245, 264, 267, 277, 286, 297, 298, 389, 391], "structur": [3, 6, 23, 39, 41, 43, 46, 49, 51, 58, 59, 63, 66, 110, 111, 148, 154, 156, 157, 158, 159, 161, 167, 172, 181, 189, 191, 200, 203, 211, 212, 217, 226, 247, 248, 251, 254, 302, 317, 318, 319, 321, 322, 372, 380, 383, 388, 394, 421], "acquisit": [3, 6, 30, 32, 63, 66, 71, 101, 111, 159, 164, 167, 217, 271, 361], "select": [3, 6, 14, 15, 19, 20, 23, 29, 32, 33, 34, 35, 41, 42, 55, 56, 66, 76, 89, 94, 100, 105, 111, 112, 125, 126, 127, 129, 137, 138, 140, 142, 147, 149, 152, 155, 156, 157, 158, 159, 160, 161, 173, 174, 180, 181, 191, 208, 209, 219, 222, 224, 226, 228, 241, 242, 243, 244, 245, 247, 248, 277, 279, 289, 301, 305, 306, 367, 373, 375, 376, 378, 379, 386, 387, 389, 405, 419, 421], "session_label": [3, 29, 30, 32, 33, 98, 154], "acquir": [3, 6, 66, 68, 113, 164, 167, 169], "nois": [3, 6, 34, 44, 56, 64, 67, 69, 70, 94, 95, 100, 103, 108, 111, 140, 147, 149, 155, 157, 161, 164, 167, 174, 254, 256, 257, 271, 305, 306, 361, 373, 374, 402], "autocorrel": [3, 69, 108], "henc": [3, 56, 58, 72, 75, 86, 138, 147, 159, 162, 164], "across": [3, 6, 15, 16, 47, 50, 51, 56, 64, 65, 66, 80, 94, 98, 99, 100, 103, 111, 135, 141, 147, 148, 149, 152, 153, 154, 155, 157, 159, 164, 167, 179, 197, 231, 242, 243, 244, 245, 247, 248, 249, 250, 300, 316, 361, 387, 389, 405, 419], "pass": [3, 4, 9, 10, 11, 24, 29, 36, 42, 43, 49, 51, 54, 55, 56, 58, 79, 86, 89, 94, 102, 105, 106, 113, 114, 128, 130, 132, 135, 140, 142, 144, 145, 147, 154, 155, 159, 161, 162, 163, 172, 173, 174, 179, 181, 187, 222, 242, 243, 244, 245, 247, 248, 249, 250, 264, 266, 271, 277, 279, 282, 296, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 319, 320, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 382, 383, 386, 387, 389, 391, 399, 400, 401, 405], "leaveonegroupout": [3, 29, 30, 32, 33, 98, 129, 147, 154, 157, 159, 242, 243, 244, 245], "cv_scores_": [3, 29, 30, 32, 33, 34, 42, 154, 181, 242, 243, 244, 245, 247, 248], "9629629629629629": 3, "8518518518518519": 3, "9753086419753086": 3, "40740740740740744": 3, "9876543209876543": 3, "9259259259259259": 3, "8765432098765432": 3, "final": [3, 4, 6, 14, 15, 30, 41, 48, 53, 55, 56, 57, 63, 69, 84, 93, 94, 100, 140, 147, 148, 155, 161, 162, 163, 169, 170, 173, 174, 181, 277, 302, 309, 310, 312, 313, 419], "coef_": [3, 40, 44, 98, 113, 242, 243, 244, 245, 247, 248], "88471313e": 3, "02": [3, 30, 33, 36, 44, 45, 49, 53, 59, 73, 82, 96, 109, 111, 159, 191, 305, 306], "86752060e": 3, "22274678e": 3, "88105111e": 3, "17749806e": 3, "10473101e": 3, "69630050e": 3, "49688938e": 3, "93773674e": 3, "50417112e": 3, "08279530e": 3, "28500690e": 3, "54319322e": 3, "78042932e": 3, "68280386e": 3, "27558719e": 3, "6": [3, 6, 20, 23, 24, 27, 30, 31, 33, 34, 36, 38, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 62, 63, 64, 66, 72, 73, 80, 82, 91, 93, 94, 96, 99, 100, 102, 103, 105, 106, 107, 109, 111, 115, 118, 125, 127, 129, 132, 133, 134, 140, 141, 142, 145, 152, 159, 160, 161, 163, 173, 187, 205, 208, 211, 232, 249, 305, 306, 310, 313, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 375, 381, 382, 389, 391], "54999582e": 3, "03": [3, 27, 30, 32, 33, 44, 45, 53, 56, 59, 82, 91, 111, 159, 279, 305, 306, 325], "7": [3, 6, 11, 15, 24, 25, 27, 33, 36, 38, 42, 43, 44, 48, 49, 52, 53, 54, 57, 58, 59, 62, 63, 64, 66, 70, 71, 72, 73, 86, 90, 91, 94, 96, 102, 103, 107, 111, 114, 115, 118, 120, 122, 127, 129, 132, 133, 135, 140, 142, 145, 160, 172, 173, 187, 191, 193, 194, 199, 203, 254, 256, 257, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 362, 367, 371, 373, 374, 376, 378, 379, 388, 394, 419], "64033784e": 3, "66729941e": 3, "8": [3, 6, 7, 9, 12, 14, 20, 24, 27, 33, 34, 36, 38, 40, 42, 43, 45, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 61, 62, 64, 66, 72, 73, 76, 79, 82, 86, 89, 91, 92, 96, 99, 100, 101, 102, 103, 104, 106, 107, 109, 111, 114, 118, 120, 125, 133, 135, 137, 143, 151, 152, 160, 192, 196, 202, 211, 213, 222, 224, 231, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 247, 248, 249, 250, 264, 277, 281, 286, 305, 308, 309, 310, 311, 312, 313, 314, 315, 318, 321, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 387, 389, 398, 399, 401], "00460029e": 3, "28260791e": 3, "15728097e": 3, "35571961e": 3, "40755849e": 3, "58822953e": 3, "22076243e": 3, "76884621e": 3, "21688867e": 3, "51065138e": 3, "74705441e": 3, "13812170e": 3, "12122974e": 3, "02825056e": 3, "88624903e": 3, "88125457e": 3, "34319676e": 3, "20849797e": 3, "71172720e": 3, "36654850e": 3, "40700402e": 3, "80081132e": 3, "65044079e": 3, "70138592e": 3, "55175285e": 3, "21379407e": 3, "46413611e": 3, "11548956e": 3, "60127979e": 3, "52387880e": 3, "01264967e": 3, "28203656e": 3, "07523162e": 3, "09197526e": 3, "71551682e": 3, "76545428e": 3, "03610674e": 3, "37700123e": 3, "47603365e": 3, "41999347e": 3, "47077305e": 3, "01": [3, 6, 7, 12, 27, 30, 32, 33, 36, 42, 45, 48, 51, 53, 55, 58, 59, 61, 71, 73, 82, 96, 99, 100, 101, 108, 109, 111, 181, 193, 197, 264, 267, 271, 302, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "33519413e": 3, "86654262e": 3, "64350681e": 3, "05548097e": 3, "21726133e": 3, "94670591e": 3, "21325456e": 3, "03308247e": 3, "13950362e": 3, "12011946e": 3, "93356448e": 3, "30260787e": 3, "41940329e": 3, "22555134e": 3, "86547697e": 3, "69012436e": 3, "78553355e": 3, "00064634e": 3, "98480891e": 3, "51578884e": 3, "05947964e": 3, "30479228e": 3, "21068381e": 3, "22818061e": 3, "42260449e": 3, "52786313e": 3, "97786815e": 3, "31615244e": 3, "54073992e": 3, "40811572e": 3, "78551654e": 3, "80247159e": 3, "69301310e": 3, "70137982e": 3, "97322435e": 3, "19229730e": 3, "33537669e": 3, "36854606e": 3, "03554528e": 3, "66305959e": 3, "17985941e": 3, "92799175e": 3, "05105829e": 3, "48581151e": 3, "43214629e": 3, "08762780e": 3, "67057056e": 3, "72689139e": 3, "95715399e": 3, "08742639e": 3, "57552820e": 3, "16005250e": 3, "99189604e": 3, "38978072e": 3, "81972408e": 3, "11834758e": 3, "44117269e": 3, "30731006e": 3, "49667806e": 3, "47157264e": 3, "55569877e": 3, "83423913e": 3, "19704978e": 3, "71288692e": 3, "24789250e": 3, "57566598e": 3, "78065260e": 3, "51038848e": 3, "30722372e": 3, "33659143e": 3, "75658064e": 3, "39153176e": 3, "19808721e": 3, "34814410e": 3, "67904090e": 3, "91880364e": 3, "23737745e": 3, "28196409e": 3, "97886702e": 3, "16655526e": 3, "92070638e": 3, "32898433e": 3, "79641988e": 3, "74906305e": 3, "15556243e": 3, "08046428e": 3, "42696388e": 3, "05701700e": 3, "84397042e": 3, "70414316e": 3, "72189590e": 3, "75572993e": 3, "07277345e": 3, "04": [3, 30, 32, 33, 44, 53, 73, 96, 111, 161, 197, 282, 305, 306, 401, 402], "99829031e": 3, "52269481e": 3, "24255030e": 3, "81496120e": 3, "49523767e": 3, "60352159e": 3, "14534836e": 3, "94961778e": 3, "57077483e": 3, "88175581e": 3, "82080804e": 3, "22476736e": 3, "12261562e": 3, "68379813e": 3, "66161167e": 3, "34741400e": 3, "79794883e": 3, "45397161e": 3, "52427716e": 3, "66475785e": 3, "61422256e": 3, "85716447e": 3, "38887744e": 3, "20123126e": 3, "73239023e": 3, "01275722e": 3, "16579266e": 3, "90730295e": 3, "37270076e": 3, "83610437e": 3, "20499066e": 3, "81968762e": 3, "13304885e": 3, "80415450e": 3, "78567282e": 3, "76556338e": 3, "11161273e": 3, "64704582e": 3, "88445488e": 3, "42269210e": 3, "22081112e": 3, "92192393e": 3, "89204455e": 3, "38760144e": 3, "64221582e": 3, "64729182e": 3, "57031343e": 3, "92018545e": 3, "13148019e": 3, "08699216e": 3, "48928420e": 3, "38041305e": 3, "11177511e": 3, "41180837e": 3, "09947439e": 3, "32574339e": 3, "11838189e": 3, "35993216e": 3, "12818039e": 3, "63616415e": 3, "21909674e": 3, "30670989e": 3, "97748031e": 3, "29431006e": 3, "27320687e": 3, "89008516e": 3, "11544232e": 3, "26990630e": 3, "70178150e": 3, "33423037e": 3, "04137644e": 3, "24863375e": 3, "69633920e": 3, "28577243e": 3, "32902597e": 3, "77468961e": 3, "72664007e": 3, "75699038e": 3, "37285502e": 3, "27748160e": 3, "77373431e": 3, "31668491e": 3, "21910853e": 3, "27497105e": 3, "56845483e": 3, "03155258e": 3, "88053630e": 3, "14295092e": 3, "81001536e": 3, "11778368e": 3, "16457873e": 3, "22038709e": 3, "55479420e": 3, "72171637e": 3, "52438103e": 3, "06277649e": 3, "21494419e": 3, "98228212e": 3, "85110177e": 3, "04759935e": 3, "02131391e": 3, "08212822e": 3, "40774191e": 3, "92686997e": 3, "01543240e": 3, "09172645e": 3, "48196774e": 3, "92093049e": 3, "03571588e": 3, "06282128e": 3, "82931222e": 3, "48270161e": 3, "99976097e": 3, "62552667e": 3, "63555151e": 3, "88405256e": 3, "04607443e": 3, "67695656e": 3, "35720814e": 3, "08618587e": 3, "09746667e": 3, "40928669e": 3, "15740210e": 3, "97068462e": 3, "59641658e": 3, "95097017e": 3, "02640366e": 3, "55185611e": 3, "98206723e": 3, "11950764e": 3, "21183925e": 3, "14241028e": 3, "30016919e": 3, "66640116e": 3, "13669472e": 3, "65654802e": 3, "28393272e": 3, "19675780e": 3, "67232316e": 3, "25087022e": 3, "04144976e": 3, "09091485e": 3, "84696104e": 3, "81225784e": 3, "46494627e": 3, "18110995e": 3, "18215652e": 3, "09900669e": 3, "11043148e": 3, "61302842e": 3, "24114368e": 3, "11482275e": 3, "55880142e": 3, "67707425e": 3, "32034703e": 3, "05484917e": 3, "20995897e": 3, "26564867e": 3, "32622139e": 3, "75124099e": 3, "87122822e": 3, "44344683e": 3, "01685836e": 3, "16267171e": 3, "30871740e": 3, "15659428e": 3, "38545668e": 3, "30734059e": 3, "17254933e": 3, "75482665e": 3, "17385429e": 3, "15194997e": 3, "33275647e": 3, "22248599e": 3, "99713920e": 3, "73823746e": 3, "12285675e": 3, "97809275e": 3, "02665524e": 3, "63979117e": 3, "02755416e": 3, "05437539e": 3, "80351345e": 3, "75047836e": 3, "70569174e": 3, "00429715e": 3, "45200134e": 3, "45126377e": 3, "11976770e": 3, "81052698e": 3, "40643276e": 3, "13915386e": 3, "63457990e": 3, "65700100e": 3, "14596915e": 3, "44762535e": 3, "34383259e": 3, "34022881e": 3, "79028265e": 3, "13932556e": 3, "39020747e": 3, "06771023e": 3, "14571604e": 3, "14253945e": 3, "88097449e": 3, "59905258e": 3, "09224139e": 3, "28409735e": 3, "58826739e": 3, "59114825e": 3, "63770879e": 3, "12595817e": 3, "16792746e": 3, "51322799e": 3, "81036095e": 3, "42020090e": 3, "44818449e": 3, "62430266e": 3, "16249792e": 3, "23296357e": 3, "17020850e": 3, "83631692e": 3, "22091290e": 3, "86171015e": 3, "54274155e": 3, "49528379e": 3, "19241750e": 3, "19520846e": 3, "59130854e": 3, "10295165e": 3, "91137474e": 3, "53345615e": 3, "23195551e": 3, "03211075e": 3, "36742110e": 3, "81955102e": 3, "97579364e": 3, "65827754e": 3, "23005282e": 3, "10092325e": 3, "17591510e": 3, "18214492e": 3, "62921981e": 3, "05029531e": 3, "84180595e": 3, "31987200e": 3, "63463618e": 3, "48612944e": 3, "48988987e": 3, "11347509e": 3, "67408616e": 3, "99598690e": 3, "98118726e": 3, "01188860e": 3, "09588205e": 3, "10854432e": 3, "71430401e": 3, "16142048e": 3, "55125970e": 3, "26916122e": 3, "94582639e": 3, "47099904e": 3, "19426493e": 3, "86304990e": 3, "60583628e": 3, "75927117e": 3, "89646571e": 3, "57028957e": 3, "31012108e": 3, "24388665e": 3, "35395669e": 3, "06400600e": 3, "08607528e": 3, "12545708e": 3, "61358453e": 3, "03815528e": 3, "06311804e": 3, "88499582e": 3, "70375326e": 3, "12218324e": 3, "09448135e": 3, "22997766e": 3, "49837615e": 3, "84589391e": 3, "04721952e": 3, "40680540e": 3, "18251470e": 3, "81869759e": 3, "81119555e": 3, "15435660e": 3, "03018754e": 3, "07931525e": 3, "22632782e": 3, "18664792e": 3, "53435812e": 3, "19996385e": 3, "55244012e": 3, "92794796e": 3, "92077098e": 3, "76310089e": 3, "67380867e": 3, "75230712e": 3, "37855737e": 3, "59814791e": 3, "50061288e": 3, "27146839e": 3, "28690215e": 3, "06427559e": 3, "79328584e": 3, "76402107e": 3, "63869425e": 3, "coeffici": [3, 6, 23, 39, 40, 44, 51, 98, 99, 128, 144, 147, 148, 154, 155, 156, 160, 161, 164, 167, 179, 181, 247, 248, 253, 255, 258, 264, 273, 277, 399], "voxel": [3, 15, 25, 28, 33, 36, 37, 39, 40, 41, 44, 45, 46, 49, 50, 59, 66, 69, 70, 74, 79, 81, 82, 84, 87, 89, 90, 92, 98, 100, 102, 105, 108, 110, 111, 113, 122, 125, 126, 127, 133, 142, 144, 147, 151, 152, 154, 156, 157, 158, 160, 163, 164, 165, 167, 168, 169, 172, 174, 195, 196, 203, 208, 212, 213, 226, 243, 246, 247, 248, 249, 250, 252, 259, 260, 264, 273, 277, 279, 280, 281, 282, 284, 286, 287, 288, 297, 298, 301, 305, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 322, 325, 338, 353, 356, 361, 364, 369, 375, 380, 386, 387, 388, 389, 390, 391, 395, 396, 397, 398, 399, 405, 419, 421], "464": [3, 33, 98], "get": [3, 6, 14, 22, 33, 35, 40, 41, 51, 52, 56, 58, 62, 66, 68, 69, 71, 75, 78, 81, 86, 88, 100, 101, 104, 108, 114, 127, 132, 147, 149, 152, 153, 154, 159, 161, 163, 166, 168, 174, 179, 180, 181, 189, 195, 196, 198, 199, 224, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 256, 257, 264, 277, 279, 287, 292, 296, 308, 309, 310, 311, 312, 313, 314, 315, 325, 326, 328, 329, 356, 386, 387, 388, 389, 397, 420], "coef_img_": [3, 29, 30, 31, 39, 42, 43, 154, 174, 242, 243, 244, 245, 247, 248], "coef_img": [3, 30, 43, 113], "niftiimag": [3, 149, 163, 172, 173], "save": [3, 6, 9, 14, 23, 29, 42, 43, 48, 49, 50, 51, 61, 66, 72, 86, 91, 92, 94, 98, 99, 100, 103, 107, 114, 133, 142, 147, 152, 161, 172, 173, 174, 222, 224, 247, 248, 257, 264, 277, 304, 309, 310, 312, 313, 314, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 397, 399, 421], "to_filenam": [3, 4, 6, 29, 48, 49, 55, 64, 86, 94, 173], "haxby_svc_weight": 3, "titl": [3, 6, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 26, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 68, 69, 71, 75, 76, 77, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 98, 100, 101, 102, 103, 105, 106, 107, 108, 113, 135, 136, 141, 144, 147, 152, 154, 162, 170, 174, 264, 277, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 365, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 397, 399, 419], "dim": [3, 21, 23, 29, 47, 56, 91, 123, 125, 129, 147, 154, 252, 254, 256, 257, 360, 373, 374, 375, 382], "doe": [3, 6, 29, 49, 66, 68, 75, 102, 113, 114, 122, 131, 135, 144, 147, 154, 155, 159, 161, 162, 163, 164, 169, 174, 189, 199, 211, 253, 255, 258, 267, 288, 300, 302, 321, 329, 386, 402, 419], "than": [3, 4, 6, 15, 31, 32, 35, 36, 39, 40, 41, 42, 43, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 64, 66, 67, 69, 70, 77, 79, 81, 86, 88, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 112, 113, 114, 122, 125, 126, 127, 128, 129, 131, 135, 140, 142, 147, 148, 151, 153, 154, 155, 156, 157, 159, 161, 162, 164, 167, 170, 172, 173, 174, 195, 196, 222, 224, 228, 242, 243, 244, 245, 249, 250, 264, 273, 279, 280, 281, 288, 293, 301, 302, 305, 306, 308, 310, 311, 313, 314, 325, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 356, 361, 362, 371, 380, 381, 383, 385, 389, 398, 400, 402, 405], "answer": [3, 420], "question": [3, 51, 65, 66, 99, 151, 169, 170, 174, 208, 420], "random": [3, 40, 41, 44, 51, 55, 63, 98, 99, 102, 127, 139, 147, 151, 152, 153, 154, 161, 162, 192, 249, 250, 254, 256, 257, 264, 273, 279, 325, 386, 387, 389, 391], "compar": [3, 6, 30, 31, 33, 35, 39, 41, 46, 51, 56, 58, 59, 64, 66, 77, 79, 80, 83, 86, 94, 96, 99, 110, 111, 114, 116, 135, 147, 149, 150, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 167, 174, 179, 181, 194, 197, 203, 208, 293, 294, 308, 309, 310, 311, 312, 313, 314, 315, 357, 358, 362, 369, 375, 380, 401, 419, 421], "dummi": [3, 99, 140, 147, 154, 155, 157, 162, 242, 243, 244, 245, 271], "replac": [3, 4, 30, 32, 35, 36, 40, 41, 42, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 70, 77, 79, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 126, 127, 132, 135, 138, 139, 140, 141, 142, 145, 147, 157, 161, 162, 170, 226, 282, 299, 305, 316, 319, 401], "initi": [3, 12, 48, 49, 50, 67, 69, 94, 100, 152, 160, 163, 172, 174, 181, 183, 249, 250, 251, 255, 309, 310, 312, 313, 315, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 386, 389], "dummy_decod": 3, "dummy_classifi": [3, 32, 242, 244], "simpli": [3, 64, 66, 67, 68, 69, 89, 101, 103, 105, 108, 114, 164, 174, 191, 281, 293, 299, 373, 374, 375], "mean": [3, 6, 14, 15, 16, 18, 21, 22, 23, 25, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 49, 50, 51, 55, 56, 58, 61, 64, 66, 67, 70, 71, 77, 83, 89, 91, 92, 94, 95, 96, 98, 102, 103, 104, 110, 114, 125, 129, 132, 135, 139, 141, 147, 148, 151, 152, 154, 161, 162, 164, 167, 169, 173, 174, 179, 180, 181, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 256, 257, 264, 272, 273, 277, 279, 280, 281, 283, 288, 293, 294, 301, 305, 306, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 325, 360, 373, 374, 375, 376, 380, 382, 386, 387, 388, 389, 391, 392, 395, 396, 399, 401, 402], "over": [3, 20, 48, 49, 51, 69, 71, 89, 113, 138, 139, 147, 153, 154, 159, 160, 161, 166, 170, 173, 194, 250, 264, 290, 294, 305, 326, 328, 329, 373, 377, 405, 419], "38888888888888895": 3, "6111111111111112": [3, 29], "anova": [3, 28, 35, 42, 45, 105, 106, 110, 127, 147, 158, 159, 160, 167, 174, 211, 242, 243, 244, 245, 247, 248, 289, 375, 380, 382, 421], "hous": [3, 18, 28, 32, 33, 45, 94, 97, 109, 110, 159, 168, 172, 173, 211, 242, 244, 246, 287, 289, 292, 294, 295, 308, 314, 325, 353, 368, 375, 380, 382], "For": [3, 6, 9, 14, 15, 19, 23, 24, 29, 30, 32, 34, 35, 36, 40, 48, 50, 51, 63, 64, 66, 67, 69, 71, 72, 79, 80, 86, 89, 98, 100, 103, 105, 108, 113, 114, 132, 142, 147, 148, 149, 151, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 166, 167, 169, 172, 173, 174, 179, 186, 189, 190, 191, 195, 196, 198, 199, 200, 202, 203, 212, 222, 224, 226, 237, 241, 242, 243, 244, 245, 247, 248, 249, 250, 254, 255, 256, 257, 264, 271, 277, 279, 294, 302, 305, 306, 310, 312, 313, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 358, 360, 365, 368, 370, 373, 374, 375, 376, 377, 378, 379, 387, 389, 390, 391, 397, 398, 399, 405, 419, 420], "precomput": [3, 248], "frem": [3, 28, 45, 110, 111, 138, 147, 154, 155, 158, 160, 167, 168, 211, 220, 244, 245, 248, 289, 294, 375, 380, 421], "fast": [3, 31, 39, 48, 49, 65, 66, 72, 100, 111, 135, 138, 147, 151, 153, 154, 155, 158, 161, 162, 167, 168, 217, 224, 244, 245, 250, 299, 387, 388, 394, 421], "ensembl": [3, 31, 39, 42, 111, 154, 155, 158, 160, 167, 168, 244, 245, 421], "regular": [3, 31, 39, 56, 66, 91, 94, 111, 114, 138, 147, 154, 155, 158, 160, 161, 167, 168, 169, 173, 180, 181, 183, 244, 245, 247, 248, 292, 420, 421], "robust": [3, 31, 39, 94, 111, 137, 147, 152, 154, 158, 167, 244, 245, 305, 306, 421], "spacenet": [3, 125, 147, 154, 155, 156, 158, 167, 247, 248, 421], "spatial": [3, 6, 31, 39, 43, 46, 49, 50, 54, 59, 69, 86, 94, 95, 98, 104, 108, 110, 111, 138, 142, 147, 151, 153, 154, 157, 158, 164, 167, 168, 171, 174, 189, 192, 197, 199, 208, 219, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 277, 279, 290, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 373, 375, 380, 387, 389, 391, 421], "43": [3, 7, 33, 36, 42, 43, 44, 86, 91, 96, 102, 111, 120, 147, 192, 325], "364": [3, 7, 33], "976": [3, 7], "plot_decoding_tutori": [3, 7, 135, 147, 154, 162], "download": [4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 122, 123, 125, 126, 128, 132, 135, 138, 139, 141, 147, 148, 149, 151, 154, 162, 169, 176, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 241, 421], "exist": [4, 6, 20, 48, 64, 72, 102, 152, 159, 162, 173, 222, 224, 291, 372, 419], "ship": [4, 12, 14, 94, 132, 147, 419], "mni152_file_path": [4, 169], "variabl": [4, 6, 14, 39, 42, 43, 44, 56, 69, 75, 77, 94, 100, 101, 108, 111, 124, 142, 144, 147, 149, 154, 155, 156, 158, 159, 161, 162, 164, 167, 172, 174, 188, 233, 242, 243, 244, 245, 246, 247, 248, 251, 255, 264, 277, 293, 305], "path": [4, 6, 15, 62, 64, 72, 86, 94, 101, 108, 112, 113, 114, 124, 135, 141, 143, 144, 147, 154, 160, 161, 162, 170, 171, 174, 180, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 242, 243, 244, 245, 247, 248, 249, 250, 264, 267, 277, 283, 292, 302, 303, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 339, 387, 388, 389, 397, 401, 403, 404, 405, 421], "mni152": [4, 93, 141, 145, 147, 164, 190, 192, 199, 203, 212, 213, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 247, 248, 249, 250, 264, 277, 289, 311, 314, 318, 321, 373, 374, 375, 382, 387], "templat": [4, 16, 22, 23, 48, 69, 75, 83, 96, 108, 110, 111, 120, 125, 130, 135, 138, 141, 144, 145, 147, 152, 164, 167, 169, 173, 174, 189, 191, 203, 212, 213, 225, 226, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 249, 250, 264, 277, 292, 297, 298, 306, 311, 314, 318, 321, 360, 373, 374, 375, 380, 382, 387, 397], "mni_icbm152_t1_tal_nlin_sym_09a_convert": [4, 169], "quickli": [4, 33, 61, 62, 64, 75, 148, 151, 161, 162, 170], "plot_img": [4, 6, 36, 135, 142, 147, 169, 336, 338, 341, 343, 345, 347, 349, 351, 353, 419], "0x7fdb583e42e0": 4, "veri": [4, 30, 31, 32, 35, 36, 39, 40, 42, 44, 49, 54, 66, 75, 76, 77, 79, 86, 94, 103, 113, 135, 147, 148, 149, 151, 154, 155, 156, 157, 160, 161, 162, 164, 167, 170, 174, 244, 245, 310, 313, 356, 373, 400], "pretti": [4, 103], "simplest": [4, 71, 98, 114, 157, 161, 419], "possibl": [4, 6, 14, 15, 44, 69, 71, 80, 81, 84, 86, 94, 100, 113, 114, 125, 142, 144, 147, 148, 151, 154, 159, 161, 162, 164, 167, 169, 170, 173, 174, 179, 180, 181, 187, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 254, 256, 257, 264, 267, 277, 279, 286, 297, 302, 305, 308, 309, 310, 311, 312, 313, 314, 315, 355, 356, 362, 367, 371, 386, 387, 388, 389, 399, 419], "whole": [4, 6, 14, 42, 48, 50, 70, 89, 94, 111, 114, 141, 147, 159, 160, 162, 163, 168, 173, 174, 192, 212, 222, 224, 234, 237, 242, 243, 244, 245, 249, 250, 311, 314, 318, 321, 325, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 367, 373, 375, 379, 387, 389, 419], "make": [4, 6, 8, 15, 22, 27, 30, 36, 41, 47, 49, 51, 56, 58, 66, 68, 69, 70, 71, 75, 77, 79, 80, 84, 98, 104, 110, 111, 114, 120, 121, 126, 132, 141, 142, 144, 145, 147, 152, 154, 155, 159, 160, 163, 166, 167, 168, 169, 172, 174, 193, 201, 211, 222, 225, 226, 231, 242, 243, 244, 245, 247, 248, 252, 297, 329, 339, 367, 370, 375, 377, 379, 380, 381, 382, 383, 385, 386, 405, 419, 420], "prettier": 4, "exercis": [4, 169], "own": [4, 6, 49, 58, 100, 112, 114, 154, 157, 162, 213, 421], "noth": [4, 159, 181, 249, 250, 253, 255, 258, 264, 277, 311, 312, 313, 314, 315, 368, 370, 373, 374, 375, 382], "string": [4, 15, 29, 33, 43, 48, 55, 72, 77, 79, 88, 92, 100, 101, 108, 113, 129, 130, 142, 144, 147, 162, 172, 180, 187, 189, 204, 211, 214, 215, 216, 217, 221, 223, 225, 226, 227, 229, 230, 233, 241, 246, 247, 248, 249, 250, 254, 256, 257, 261, 262, 264, 266, 271, 277, 280, 281, 282, 283, 292, 293, 296, 301, 302, 304, 305, 311, 312, 313, 314, 315, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 360, 361, 362, 363, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 390, 399, 401], "should": [4, 6, 14, 15, 32, 35, 36, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 65, 66, 68, 69, 70, 79, 88, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 114, 128, 129, 139, 142, 143, 147, 152, 153, 154, 155, 157, 161, 162, 164, 169, 170, 174, 181, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 246, 249, 250, 261, 264, 266, 267, 271, 272, 278, 280, 281, 282, 292, 293, 295, 298, 300, 301, 303, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 325, 326, 359, 360, 362, 365, 367, 368, 373, 374, 375, 376, 377, 379, 383, 386, 387, 389, 390, 391, 395, 397, 398, 401, 416, 419, 420], "volum": [4, 8, 27, 31, 32, 36, 39, 43, 54, 56, 61, 64, 69, 79, 87, 91, 100, 111, 113, 129, 132, 140, 145, 147, 159, 160, 167, 168, 169, 172, 189, 191, 194, 211, 221, 226, 242, 243, 244, 245, 247, 248, 249, 264, 286, 294, 297, 298, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 326, 328, 329, 361, 365, 370, 374, 379, 380, 382, 389, 390, 391, 395, 401, 405, 419, 420, 421], "smooth_img": [4, 70, 94, 95, 103, 129, 135, 147, 172, 173, 174], "mm": [4, 15, 33, 37, 55, 84, 87, 91, 132, 147, 152, 173, 194, 199, 207, 264, 277, 305, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 358, 389, 390, 391, 399, 405], "smooth_anat_img": 4, "fwhm": [4, 66, 94, 95, 103, 105, 129, 135, 147, 167, 169, 173, 174, 299], "nibabel": [4, 33, 36, 44, 49, 54, 56, 62, 75, 84, 91, 126, 127, 129, 135, 140, 142, 144, 145, 147, 161, 172, 173, 249, 250, 283, 284, 285, 292, 297, 298, 299, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 387, 389, 390, 391, 395, 396], "nifti1": [4, 33, 36, 49, 54, 56, 75, 91, 135, 147, 299, 309, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 387, 389, 390, 391, 395, 396], "nifti1imag": [4, 33, 36, 40, 43, 44, 48, 49, 54, 56, 75, 84, 91, 127, 128, 130, 135, 147, 152, 172, 193, 195, 196, 198, 199, 202, 213, 220, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 249, 250, 259, 261, 264, 277, 279, 280, 281, 283, 285, 289, 290, 292, 293, 294, 297, 298, 299, 300, 301, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 336, 341, 343, 347, 353, 357, 358, 359, 387, 389, 390, 391, 395, 396], "0x7fdb59d70b80": 4, "0x7fdb58329760": 4, "could": [4, 6, 36, 49, 58, 66, 69, 70, 79, 85, 86, 93, 100, 105, 113, 114, 122, 138, 142, 143, 147, 154, 157, 159, 161, 162, 164, 169, 174, 252, 374, 405], "more_smooth_anat_img": 4, "0x7fdb5834ab80": 4, "ani": [4, 6, 49, 56, 58, 75, 80, 81, 100, 103, 104, 113, 136, 138, 144, 147, 149, 151, 154, 155, 158, 159, 161, 162, 163, 164, 167, 174, 187, 211, 222, 224, 228, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 264, 277, 280, 284, 289, 293, 299, 302, 303, 305, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 370, 373, 389, 393, 398, 405, 419, 420, 421], "necessari": [4, 62, 89, 92, 101, 108, 135, 142, 145, 147, 148, 151, 154, 162, 163, 170, 174, 189, 222, 224, 242, 243, 244, 245, 257, 264, 277, 314, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 397], "tool": [4, 8, 10, 11, 20, 23, 27, 32, 36, 48, 49, 79, 86, 87, 94, 100, 104, 110, 113, 125, 144, 147, 150, 155, 162, 163, 166, 168, 169, 171, 172, 174, 175, 177, 211, 225, 294, 336, 338, 341, 343, 345, 347, 349, 351, 353, 360, 365, 367, 374, 375, 380, 382, 409, 419, 420], "632": [4, 7, 33, 48], "189": [4, 7, 33, 41, 93, 111, 282, 289, 401], "plot_nilearn_101": [4, 7], "matplotlib": [5, 6, 8, 9, 11, 18, 24, 25, 27, 30, 32, 35, 38, 40, 41, 42, 43, 44, 48, 49, 51, 52, 54, 55, 56, 57, 58, 62, 63, 65, 66, 68, 70, 72, 78, 79, 80, 84, 91, 94, 99, 100, 101, 102, 105, 106, 110, 118, 122, 127, 129, 130, 132, 135, 137, 142, 143, 147, 149, 154, 173, 310, 313, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 419, 420], "line": [5, 9, 14, 21, 24, 48, 51, 91, 154, 161, 162, 170, 226, 282, 381, 401, 405, 420], "line2d": [5, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362], "0x7fdb59c3e6a0": 5, "modul": [5, 19, 26, 32, 34, 35, 36, 40, 41, 42, 47, 50, 51, 52, 53, 54, 55, 56, 58, 61, 87, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 103, 104, 105, 106, 111, 113, 114, 120, 127, 129, 130, 138, 142, 144, 145, 147, 157, 162, 165, 169, 170, 174, 178, 222, 226, 242, 243, 244, 245, 254, 256, 257, 271, 279, 281, 291, 293, 409, 413, 414, 416, 419], "np": [5, 6, 9, 11, 12, 14, 20, 21, 22, 23, 24, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 77, 79, 80, 84, 85, 87, 89, 94, 98, 100, 102, 103, 104, 105, 106, 107, 108, 144, 147, 152, 162, 172, 173, 179, 199, 226, 253, 254, 255, 256, 257, 258, 283, 293, 386, 388], "linspac": [5, 49, 61, 68], "2000": [5, 42, 49, 102, 111, 135, 138, 147, 151, 172, 202], "pyplot": [5, 6, 11, 12, 18, 24, 25, 30, 32, 34, 35, 38, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 62, 63, 65, 66, 68, 70, 72, 78, 79, 80, 84, 91, 94, 99, 100, 101, 102, 105, 106, 149, 173, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 379, 380, 419], "scientif": [5, 111, 139, 142, 147, 162, 169, 198, 209, 217, 227, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 365, 367, 368, 374, 375, 376, 378, 379], "plt": [5, 6, 11, 12, 18, 24, 25, 30, 32, 34, 35, 38, 40, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 62, 63, 65, 66, 68, 70, 72, 78, 79, 80, 84, 91, 94, 99, 100, 101, 102, 105, 106, 173, 360, 361, 362, 365, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382], "co": [5, 24, 84, 111, 163, 202, 231], "190": [5, 7, 33, 36, 41, 42, 44, 102, 105], "plot_python_101": [5, 7], "tutori": [6, 7, 66, 98, 122, 132, 147, 154, 162, 167, 168, 169, 174, 211, 242, 289, 294, 365, 374, 382], "model": [6, 23, 28, 31, 32, 33, 34, 39, 41, 44, 45, 48, 50, 51, 60, 61, 63, 69, 71, 73, 74, 75, 81, 82, 97, 98, 102, 104, 105, 108, 109, 110, 111, 129, 135, 138, 140, 142, 143, 144, 147, 148, 150, 152, 154, 158, 159, 160, 161, 162, 165, 167, 168, 169, 174, 175, 179, 180, 183, 210, 213, 214, 217, 218, 219, 221, 232, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 279, 280, 283, 284, 287, 288, 293, 294, 298, 301, 304, 305, 306, 308, 311, 314, 315, 325, 337, 338, 352, 353, 363, 364, 367, 374, 375, 380, 397, 399, 412, 420, 421], "period": [6, 41, 66, 69, 108, 242, 243, 244, 245, 247, 248, 282, 309, 310, 361, 387, 389, 401], "auditori": [6, 66, 69, 72, 77, 103, 105, 164, 207, 216, 217, 223, 229], "stimul": [6, 72, 154], "versu": [6, 66, 69, 79, 80, 94, 98, 154, 155, 167], "analys": [6, 100, 111, 154, 159, 163, 164, 165, 166, 167, 168, 172, 174, 220, 406, 420], "nativ": [6, 60, 73, 110, 128, 147, 163, 230, 264, 271, 283, 291, 294, 297, 315, 375, 380], "scan": [6, 23, 33, 36, 55, 58, 63, 65, 66, 68, 94, 100, 111, 140, 147, 151, 159, 167, 172, 217, 249, 250, 264, 266, 268, 269, 270, 271, 274, 275, 276, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 361, 387, 389, 392, 393, 395, 401], "preprocess": [6, 11, 23, 29, 34, 37, 40, 41, 44, 89, 92, 99, 101, 104, 108, 111, 112, 127, 147, 152, 153, 159, 160, 164, 167, 174, 187, 188, 208, 226, 232, 264, 267, 282, 303, 305, 308, 309, 310, 311, 312, 313, 314, 315, 389, 401, 409, 421], "sensit": [6, 40, 48, 56, 111, 164, 167, 282, 306, 325, 401], "would": [6, 9, 14, 42, 50, 58, 64, 66, 67, 75, 78, 103, 114, 140, 144, 147, 154, 161, 162, 163, 164, 170, 241, 242, 243, 244, 245, 247, 248, 250, 264, 266, 267, 271, 277, 279, 302, 316, 321, 361], "like": [6, 10, 11, 16, 34, 36, 40, 47, 49, 54, 56, 66, 79, 81, 86, 89, 91, 92, 94, 100, 114, 135, 139, 142, 143, 144, 147, 160, 161, 162, 163, 164, 166, 167, 170, 171, 173, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 259, 264, 266, 267, 277, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 360, 361, 365, 367, 368, 370, 371, 373, 374, 375, 376, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 405, 407, 419, 421], "obtain": [6, 15, 22, 42, 43, 49, 54, 58, 63, 66, 69, 75, 77, 91, 94, 102, 105, 142, 147, 148, 149, 151, 153, 154, 156, 159, 161, 164, 167, 174, 181, 190, 192, 200, 212, 217, 234, 235, 238, 241, 247, 248, 281, 286, 297, 301, 312, 313, 315, 325, 339, 366, 389], "correct": [6, 42, 43, 48, 56, 75, 77, 79, 81, 92, 101, 102, 105, 106, 111, 135, 138, 144, 145, 147, 148, 159, 164, 165, 167, 170, 227, 240, 242, 243, 244, 245, 247, 248, 279, 280, 305, 306, 325, 361, 402, 421], "normal": [6, 24, 37, 40, 41, 44, 55, 58, 69, 70, 101, 104, 108, 113, 122, 147, 154, 161, 162, 163, 164, 167, 170, 180, 183, 189, 215, 226, 256, 257, 405], "smooth": [6, 29, 34, 42, 44, 48, 49, 55, 70, 75, 81, 83, 94, 96, 101, 105, 110, 111, 128, 129, 147, 151, 153, 154, 155, 161, 169, 171, 172, 208, 242, 243, 244, 245, 249, 250, 264, 277, 279, 294, 299, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 325, 365, 376, 380, 386, 387, 389, 391, 421], "conduct": [6, 32, 114, 164], "fil": [6, 229, 230], "geraint": 6, "ree": 6, "under": [6, 102, 144, 147, 154, 155, 159, 160, 161, 162, 163, 164, 167, 170, 246, 286, 297, 298, 303, 318, 321, 325], "direct": [6, 15, 40, 51, 94, 98, 111, 129, 138, 147, 149, 150, 162, 170, 174, 194, 200, 226, 232, 242, 243, 264, 277, 299, 301, 302, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 342, 344, 345, 346, 348, 349, 350, 351, 352, 355, 356, 360, 362, 365, 367, 368, 371, 373, 374, 375, 390, 399, 419, 421], "karl": 6, "friston": [6, 111, 282, 401], "develop": [6, 47, 55, 56, 85, 89, 91, 92, 111, 130, 135, 147, 148, 149, 151, 153, 161, 162, 169, 170, 181, 202, 208, 361, 418], "spm": [6, 10, 11, 36, 49, 61, 66, 68, 71, 79, 86, 94, 111, 143, 144, 147, 158, 163, 167, 172, 189, 229, 230, 264, 266, 271, 274, 275, 276, 293, 421], "accord": [6, 41, 44, 69, 94, 100, 108, 127, 128, 129, 132, 138, 140, 144, 147, 152, 159, 162, 180, 187, 199, 240, 242, 243, 244, 245, 247, 248, 251, 282, 302, 325, 371, 376, 378, 379, 388, 389, 400, 401, 419], "96": [6, 30, 32, 33, 36, 42, 43, 44, 49, 54, 63, 72, 84, 102], "tr": [6, 11, 23, 25, 33, 63, 68, 71, 108, 131, 143, 147, 164, 167, 173, 208, 268, 269, 270, 274, 275, 276], "altern": [6, 9, 16, 20, 22, 52, 54, 58, 66, 150, 151, 159, 167, 174, 254, 256, 257, 325, 421], "42": [6, 24, 33, 36, 42, 43, 62, 91, 92, 100, 102, 104, 419], "block": [6, 33, 51, 56, 58, 63, 100, 101, 112, 154, 161, 173, 372, 407], "bi": 6, "syllab": 6, "word": [6, 14, 77, 94, 103, 105, 114, 154, 155, 162, 222, 224], "binaur": 6, "60": [6, 15, 33, 36, 40, 41, 42, 43, 44, 63, 99, 102, 105, 111, 221, 419], "fm00223_004": 6, "2t": 6, "siemen": 6, "magnetom": 6, "vision": 6, "system": [6, 23, 42, 43, 111, 154, 161, 170, 172, 190, 231, 233], "64": [6, 10, 11, 19, 21, 31, 33, 34, 36, 42, 43, 44, 47, 49, 61, 66, 79, 84, 86, 94, 102, 105, 139, 144, 147, 172, 187, 190, 191, 194], "contigu": [6, 151, 161, 325], "64x64x64": 6, "3mm": 6, "took": [6, 43, 48, 92], "05": [6, 7, 12, 27, 30, 32, 33, 44, 51, 53, 59, 75, 76, 77, 79, 81, 82, 96, 99, 109, 164, 188, 189, 192, 197, 198, 199, 202, 203, 226, 229, 230, 232, 254, 256, 257, 259], "repeat": [6, 58, 66, 68, 154, 164, 268, 269, 270, 274, 275, 276], "arbitrarili": [6, 248], "subject_data": [6, 70, 71, 163], "abid": [6, 111, 126, 147, 162, 187], "bid": [6, 60, 72, 73, 97, 100, 109, 110, 135, 138, 140, 142, 144, 147, 163, 167, 204, 209, 214, 227, 228, 240, 241, 264, 267, 277, 305, 306, 307, 314, 363, 367, 369, 380, 397, 398, 399], "organ": [6, 58, 111, 122, 135, 141, 143, 147, 162, 167, 169, 199, 203, 206, 279, 306, 325, 341, 404, 405, 420], "fetch_spm_auditori": [6, 70], "spm_auditori": [6, 229], "sub001": [6, 229, 230], "fm00223": 6, "fm00223_005": 6, "fm00223_006": 6, "fm00223_007": 6, "fm00223_008": 6, "fm00223_009": 6, "fm00223_010": 6, "fm00223_011": 6, "fm00223_012": 6, "fm00223_013": 6, "fm00223_014": 6, "fm00223_015": 6, "fm00223_016": 6, "fm00223_017": 6, "fm00223_018": 6, "fm00223_019": 6, "fm00223_020": 6, "fm00223_021": 6, "fm00223_022": 6, "fm00223_023": 6, "fm00223_024": 6, "fm00223_025": 6, "fm00223_026": 6, "fm00223_027": 6, "fm00223_028": 6, "fm00223_029": 6, "fm00223_030": 6, "fm00223_031": 6, "fm00223_032": 6, "fm00223_033": 6, "fm00223_034": 6, "fm00223_035": 6, "fm00223_036": 6, "fm00223_037": 6, "fm00223_038": 6, "fm00223_039": 6, "fm00223_040": 6, "fm00223_041": 6, "fm00223_042": 6, "fm00223_043": 6, "fm00223_044": 6, "fm00223_045": 6, "fm00223_046": 6, "fm00223_047": 6, "fm00223_048": 6, "fm00223_049": 6, "fm00223_050": 6, "fm00223_051": 6, "fm00223_052": 6, "fm00223_053": 6, "fm00223_054": 6, "fm00223_055": 6, "fm00223_056": 6, "fm00223_057": 6, "fm00223_058": 6, "fm00223_059": 6, "fm00223_060": 6, "fm00223_061": 6, "fm00223_062": 6, "fm00223_063": 6, "fm00223_064": 6, "fm00223_065": 6, "fm00223_066": 6, "fm00223_067": 6, "fm00223_068": 6, "fm00223_069": 6, "fm00223_070": 6, "fm00223_071": 6, "fm00223_072": 6, "fm00223_073": 6, "fm00223_074": 6, "fm00223_075": 6, "fm00223_076": 6, "fm00223_077": 6, "fm00223_078": 6, "fm00223_079": 6, "fm00223_080": 6, "fm00223_081": 6, "fm00223_082": 6, "fm00223_083": 6, "fm00223_084": 6, "fm00223_085": 6, "fm00223_086": 6, "fm00223_087": 6, "fm00223_088": 6, "fm00223_089": 6, "fm00223_090": 6, "fm00223_091": 6, "fm00223_092": 6, "fm00223_093": 6, "fm00223_094": 6, "fm00223_095": 6, "fm00223_096": 6, "fm00223_097": 6, "fm00223_098": 6, "fm00223_099": 6, "anatomi": [6, 42, 69, 75, 203], "plot_anat": [6, 15, 18, 50, 142, 147, 152, 375, 419], "cbar_tick_format": [6, 25, 139, 142, 147, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 365, 367, 368, 374, 375, 376, 378, 379], "0x7fdb582fa400": 6, "next": [6, 14, 54, 55, 58, 63, 64, 65, 66, 69, 70, 75, 78, 79, 80, 81, 108, 130, 133, 142, 147, 149, 160, 161, 162, 164, 170], "concaten": [6, 37, 47, 49, 53, 57, 100, 148, 173, 283, 289, 305, 389], "averag": [6, 9, 24, 30, 37, 49, 51, 70, 94, 111, 138, 141, 147, 151, 155, 156, 166, 167, 212, 220, 231, 237, 242, 243, 294, 299, 305, 372, 376, 387, 405], "activ": [6, 14, 15, 30, 32, 40, 41, 49, 64, 66, 69, 70, 71, 76, 77, 79, 80, 81, 100, 108, 111, 113, 148, 149, 152, 153, 154, 158, 159, 161, 162, 163, 164, 166, 167, 169, 170, 174, 181, 189, 197, 200, 219, 220, 221, 259, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 359, 389, 391, 420], "fmri_img": [6, 34, 36, 37, 64, 65, 66, 67, 69, 70, 71, 94, 108, 163], "must": [6, 34, 72, 94, 144, 147, 154, 155, 157, 159, 161, 162, 163, 164, 170, 172, 174, 180, 181, 183, 189, 211, 242, 243, 244, 245, 246, 247, 248, 249, 251, 255, 264, 277, 278, 279, 282, 288, 294, 297, 299, 304, 305, 308, 309, 311, 312, 314, 317, 319, 320, 321, 322, 323, 324, 325, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 366, 373, 375, 376, 377, 378, 379, 381, 383, 385, 387, 392, 395, 396, 398, 399, 401, 402, 405, 419], "descript": [6, 58, 112, 114, 138, 142, 145, 147, 162, 170, 172, 173, 187, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 219, 222, 223, 224, 225, 232, 266, 279, 282, 286, 294, 299, 300, 306, 325, 421], "typic": [6, 72, 78, 79, 100, 151, 153, 155, 159, 162, 164, 167, 172, 173, 174, 233, 244, 245, 248, 254, 304, 315, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 373, 374, 375, 382, 387, 419], "event": [6, 60, 62, 63, 65, 66, 68, 69, 70, 71, 73, 100, 101, 108, 110, 111, 138, 139, 147, 154, 164, 165, 218, 264, 265, 266, 271, 366, 420, 421], "tsv": [6, 47, 53, 54, 55, 56, 58, 60, 62, 73, 101, 108, 110, 208, 304, 305, 306, 366], "read_tabl": [6, 65, 66, 69, 70, 71], "onset": [6, 33, 63, 65, 66, 68, 72, 100, 138, 147, 163, 230, 264, 265, 266, 268, 269, 270, 271, 274, 275, 276, 366], "durat": [6, 33, 63, 66, 68, 72, 163, 164, 172, 266, 271, 366], "trial_typ": [6, 33, 63, 65, 66, 72, 100, 101, 271], "84": [6, 33, 36, 42, 43, 91, 100, 102, 105, 111, 284, 305], "126": [6, 33, 41, 43, 56, 67, 91, 141, 147], "168": [6, 27, 33, 41, 54, 55, 56, 58, 89, 91, 152], "210": [6, 33, 36, 41, 42, 44, 72, 102, 111, 212, 282, 401], "252": [6, 33, 41], "294": [6, 33, 41], "336": [6, 33, 41, 96], "378": [6, 33], "420": [6, 33, 36, 42, 44, 102], "462": [6, 33], "12": [6, 25, 30, 32, 33, 36, 40, 41, 42, 43, 44, 48, 49, 55, 56, 59, 62, 63, 68, 70, 75, 77, 78, 80, 91, 98, 101, 102, 103, 105, 107, 111, 115, 118, 120, 122, 138, 143, 144, 145, 147, 160, 161, 173, 174, 189, 191, 198, 200, 208, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 389], "504": [6, 33, 62], "13": [6, 30, 33, 36, 42, 43, 44, 53, 56, 62, 71, 77, 91, 102, 103, 107, 111, 115, 120, 147, 151, 159, 207, 226, 251, 255, 325], "546": [6, 33, 86], "14": [6, 18, 30, 33, 35, 36, 42, 43, 44, 53, 62, 69, 70, 73, 77, 89, 91, 96, 102, 103, 111, 116, 118, 125, 127, 128, 129, 132, 135, 147, 159, 193, 199, 378], "588": [6, 33], "15": [6, 10, 24, 27, 30, 33, 36, 41, 42, 43, 44, 48, 49, 51, 53, 58, 59, 61, 62, 66, 72, 77, 78, 84, 91, 94, 96, 102, 103, 105, 107, 109, 111, 115, 119, 128, 132, 142, 147, 189, 201, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "630": [6, 33, 36, 42, 102], "firstlevelmodel": [6, 61, 64, 65, 66, 67, 70, 71, 100, 140, 142, 144, 147, 163, 267, 277, 304, 399], "design": [6, 33, 41, 44, 60, 61, 62, 64, 65, 67, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 101, 105, 108, 110, 111, 138, 139, 140, 142, 147, 154, 157, 161, 162, 164, 165, 166, 167, 217, 251, 254, 255, 256, 257, 262, 264, 265, 271, 273, 277, 278, 279, 280, 287, 293, 304, 307, 363, 364, 375, 380, 399, 421], "matrix": [6, 22, 33, 37, 40, 41, 44, 47, 50, 51, 53, 61, 62, 63, 64, 66, 69, 70, 71, 74, 75, 76, 77, 79, 80, 81, 82, 84, 91, 92, 100, 101, 103, 105, 108, 110, 130, 135, 138, 145, 147, 151, 152, 154, 155, 161, 164, 165, 166, 167, 168, 169, 172, 173, 174, 179, 180, 181, 182, 183, 184, 186, 222, 224, 242, 243, 244, 245, 247, 248, 249, 250, 251, 254, 255, 256, 257, 262, 264, 265, 271, 273, 277, 278, 279, 284, 294, 295, 297, 300, 304, 307, 308, 311, 314, 317, 319, 320, 322, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 363, 364, 372, 386, 387, 388, 399, 421], "first_level": [6, 33, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 78, 100, 101, 108, 140, 142, 144, 147, 163, 366, 399, 418], "level": [6, 9, 10, 14, 15, 18, 21, 33, 39, 48, 49, 50, 51, 56, 63, 70, 71, 73, 75, 82, 87, 88, 97, 104, 105, 109, 111, 138, 139, 144, 147, 150, 151, 155, 158, 161, 164, 165, 167, 170, 172, 178, 179, 180, 181, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 254, 256, 257, 259, 260, 264, 267, 271, 273, 277, 278, 279, 280, 282, 287, 288, 293, 298, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 321, 323, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 362, 363, 364, 367, 369, 373, 374, 375, 376, 377, 378, 379, 380, 382, 386, 387, 388, 389, 394, 397, 398, 399, 401, 405, 419, 421], "t_r": [6, 11, 33, 49, 51, 53, 54, 55, 56, 58, 61, 62, 65, 66, 69, 70, 89, 91, 92, 99, 100, 108, 132, 143, 147, 174, 242, 243, 244, 245, 247, 248, 249, 250, 264, 266, 267, 271, 282, 309, 310, 311, 312, 313, 314, 315, 361, 387, 389, 401], "noise_model": [6, 33, 66, 264, 267, 273], "ar1": [6, 33, 66, 264, 267, 273], "covari": [6, 42, 46, 57, 58, 59, 61, 64, 69, 102, 110, 111, 128, 147, 149, 150, 152, 168, 179, 180, 181, 182, 183, 197, 208, 219, 251, 253, 254, 255, 256, 257, 308, 313, 325, 358, 362, 372, 380, 381, 421], "lag": [6, 47, 65, 66], "depend": [6, 14, 15, 39, 66, 89, 95, 100, 102, 105, 111, 122, 127, 132, 135, 145, 147, 155, 159, 161, 162, 164, 167, 170, 172, 187, 195, 196, 203, 208, 219, 242, 243, 244, 245, 247, 248, 249, 250, 251, 255, 264, 277, 279, 280, 287, 311, 314, 324, 325, 373, 387, 398, 399, 419], "rescal": [6, 33, 40, 80, 141, 147, 326, 328, 329, 364], "seri": [6, 33, 46, 47, 51, 56, 60, 66, 73, 92, 94, 95, 97, 109, 110, 111, 113, 122, 139, 143, 145, 147, 148, 150, 152, 154, 159, 164, 165, 171, 172, 173, 179, 214, 226, 227, 229, 232, 240, 249, 250, 251, 264, 267, 282, 283, 294, 299, 305, 308, 314, 315, 316, 319, 338, 353, 361, 364, 375, 391, 398, 402, 410, 421], "varianc": [6, 33, 40, 42, 48, 50, 55, 56, 57, 58, 66, 70, 80, 92, 103, 104, 135, 138, 139, 147, 154, 159, 161, 167, 174, 183, 242, 243, 244, 245, 249, 250, 252, 254, 256, 257, 260, 261, 264, 273, 277, 282, 288, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 387, 389, 392, 401, 402], "hrf_model": [6, 33, 61, 63, 65, 66, 69, 71, 108, 264, 266, 267, 271], "canon": [6, 50, 66, 71, 84, 125, 147, 167, 178, 249], "hrf": [6, 65, 66, 68, 69, 108, 142, 144, 147, 154, 165, 167, 264, 266, 268, 269, 270, 271, 274, 275, 276, 421], "dispers": [6, 66, 68, 163, 254, 256, 257, 264, 266, 268, 271, 274], "deriv": [6, 46, 59, 62, 68, 69, 71, 100, 101, 104, 108, 110, 139, 141, 142, 147, 153, 161, 163, 167, 168, 174, 187, 208, 249, 250, 264, 266, 267, 268, 270, 271, 274, 276, 277, 279, 290, 302, 303, 305, 306, 326, 327, 354, 361, 373, 375, 376, 380, 387], "drift_model": [6, 33, 63, 66, 70, 71, 163, 264, 267, 271], "cosin": [6, 33, 66, 69, 70, 71, 108, 140, 145, 147, 264, 267, 271, 305, 401], "drift": [6, 69, 70, 71, 100, 108, 264, 271, 305, 401], "slow": [6, 36, 44, 66, 160, 161, 162, 174, 419], "oscil": [6, 66, 111], "high_pass": [6, 33, 49, 51, 53, 54, 55, 56, 58, 61, 66, 71, 89, 91, 92, 99, 100, 132, 147, 174, 242, 243, 244, 245, 247, 248, 249, 250, 264, 267, 271, 282, 305, 306, 309, 310, 311, 312, 313, 314, 315, 387, 389, 400, 401], "hz": [6, 33, 66, 71, 174, 264, 271], "cutoff": [6, 66, 69, 71, 89, 108, 140, 147, 171, 242, 243, 244, 245, 247, 248, 282, 309, 310, 387, 389, 400, 401, 421], "frequenc": [6, 66, 118, 147, 174, 242, 243, 244, 245, 247, 248, 264, 271, 282, 305, 309, 310, 387, 389, 400, 401], "invers": [6, 46, 58, 59, 98, 110, 137, 147, 149, 150, 154, 161, 168, 171, 181, 186, 197, 208, 254, 256, 257, 261, 308, 313, 358, 362, 371, 372, 380, 381, 386, 421], "fmri_glm": [6, 64, 67, 70, 71, 163], "inspect": [6, 40, 48, 55, 66, 67, 70, 89, 92, 149, 154, 169, 264, 277], "repres": [6, 15, 20, 33, 35, 51, 52, 54, 55, 69, 76, 79, 94, 111, 127, 139, 147, 148, 149, 152, 153, 162, 164, 166, 167, 172, 173, 174, 191, 194, 208, 236, 237, 239, 264, 277, 286, 297, 308, 309, 310, 311, 312, 313, 314, 315, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 357, 362, 367, 371, 389, 392, 399, 403, 405, 419], "predictor": [6, 40, 163, 164, 256, 257, 306], "design_matrix": [6, 41, 61, 62, 65, 66, 69, 70, 71, 75, 76, 77, 78, 79, 80, 81, 108, 265, 271, 277, 278, 279, 307, 363, 364, 418], "design_matrices_": [6, 65, 66, 70, 100], "formal": 6, "taken": [6, 66, 100, 155, 161, 267, 277, 279, 298, 309, 310, 312, 313, 315, 389], "implictili": 6, "plot_design_matrix": [6, 63, 65, 66, 73, 75, 78, 80, 100, 163, 166], "write": [6, 41, 64, 110, 114, 142, 144, 147, 161, 162, 170, 304, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 397], "o": [6, 40, 41, 62, 64, 72, 86, 100, 101, 108, 111, 122, 147, 162, 187, 189, 199, 206, 219, 305], "outdir": [6, 72], "mkdir": [6, 64, 72], "join": [6, 62, 64, 86, 103, 108, 162, 405, 420], "output_fil": [6, 15, 23, 339, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 419], "png": [6, 9, 15, 23, 61, 168, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 419], "respons": [6, 60, 70, 71, 73, 79, 80, 110, 142, 147, 154, 163, 164, 167, 169, 170, 218, 264, 266, 268, 269, 270, 271, 274, 276, 363, 364, 375], "profil": [6, 161, 251, 255], "region": [6, 10, 15, 16, 19, 23, 40, 42, 43, 44, 46, 48, 49, 52, 55, 56, 58, 59, 66, 70, 71, 83, 96, 99, 110, 111, 120, 124, 126, 127, 130, 135, 138, 140, 142, 145, 147, 148, 150, 153, 154, 160, 163, 164, 167, 169, 171, 173, 179, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 207, 208, 211, 220, 223, 249, 250, 287, 289, 292, 294, 295, 299, 301, 306, 308, 309, 310, 312, 313, 315, 338, 356, 357, 358, 359, 360, 362, 365, 372, 373, 374, 375, 377, 378, 380, 381, 397, 419, 421], "xlabel": [6, 25, 30, 32, 34, 42, 48, 49, 51, 55, 58, 68, 99, 173], "access": [6, 33, 48, 56, 61, 62, 64, 66, 75, 111, 113, 142, 147, 149, 153, 161, 162, 163, 171, 172, 174, 188, 189, 192, 197, 198, 199, 202, 203, 226, 229, 230, 232, 252, 339, 409, 421], "beta": [6, 26, 39, 42, 66, 71, 97, 109, 110, 111, 143, 163, 167, 214, 219, 242, 243, 244, 245, 251, 254, 255, 256, 257, 264, 267, 283, 308, 314, 315, 338, 364, 375], "role": [6, 142, 147], "potenti": [6, 55, 91, 94, 100, 111, 141, 147, 159, 162, 167, 170, 200, 279], "weight": [6, 29, 39, 42, 43, 44, 113, 114, 135, 147, 148, 155, 157, 158, 161, 162, 164, 174, 212, 222, 224, 242, 243, 244, 245, 247, 248, 261, 304, 381, 393, 421], "associ": [6, 14, 47, 72, 75, 77, 105, 154, 159, 164, 166, 167, 189, 227, 246, 252, 279, 305, 306, 325, 398, 405], "nutshel": 6, "combin": [6, 15, 40, 41, 102, 104, 111, 141, 145, 147, 154, 159, 164, 167, 174, 221, 242, 243, 244, 245, 247, 248, 249, 250, 264, 277, 305, 344, 345, 348, 349, 350, 351, 363], "consid": [6, 32, 39, 53, 54, 55, 66, 68, 80, 92, 94, 102, 104, 113, 122, 135, 142, 147, 159, 162, 203, 242, 243, 244, 245, 247, 248, 249, 250, 251, 255, 264, 266, 267, 271, 277, 279, 286, 292, 303, 310, 311, 313, 314, 319, 322, 325, 329, 374, 387, 390, 392, 393], "two": [6, 14, 24, 25, 34, 40, 48, 55, 56, 58, 60, 66, 67, 73, 74, 77, 82, 86, 88, 89, 94, 98, 100, 101, 102, 108, 110, 114, 127, 130, 135, 138, 139, 147, 148, 151, 153, 154, 156, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 173, 174, 181, 185, 191, 210, 217, 230, 242, 243, 244, 245, 249, 250, 254, 256, 257, 264, 271, 277, 278, 279, 283, 289, 294, 297, 305, 306, 310, 313, 315, 325, 337, 364, 367, 369, 370, 375, 376, 377, 378, 379, 380, 385, 387, 389, 390, 391, 397, 398, 399, 404, 405, 419, 421], "isol": [6, 70, 71, 100, 154, 164], "active_minus_rest": 6, "plot_contrast_matrix": [6, 62, 65, 66], "axessubplot": [6, 65, 66], "label": [6, 9, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 47, 49, 52, 53, 54, 58, 65, 66, 68, 69, 83, 91, 94, 96, 98, 100, 102, 103, 108, 110, 111, 113, 124, 127, 132, 135, 139, 140, 142, 144, 147, 149, 151, 154, 155, 157, 159, 162, 167, 172, 173, 174, 189, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 207, 211, 221, 242, 243, 244, 245, 246, 247, 248, 260, 264, 267, 271, 273, 278, 302, 305, 306, 309, 312, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 358, 360, 361, 365, 367, 368, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 403], "below": [6, 9, 16, 20, 22, 39, 44, 49, 52, 54, 58, 65, 70, 94, 111, 127, 147, 151, 154, 155, 159, 161, 162, 163, 164, 166, 173, 174, 180, 181, 183, 187, 208, 242, 243, 244, 245, 247, 248, 250, 302, 309, 310, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 367, 368, 370, 374, 375, 376, 379, 382, 387, 389, 400, 401, 419], "unit": [6, 15, 55, 57, 92, 103, 104, 111, 152, 154, 160, 161, 162, 174, 246, 256, 257, 279, 282, 309, 310, 311, 312, 313, 314, 315, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 400, 401], "account": [6, 66, 76, 94, 159, 170, 174, 305, 309, 310, 312, 313, 315, 389], "eff_map": 6, "compute_contrast": [6, 33, 61, 62, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77, 79, 80, 81, 100, 101, 108, 145, 147, 163, 264, 277, 279, 399], "output_typ": [6, 61, 64, 65, 66, 67, 70, 71, 75, 76, 77, 79, 80, 81, 100, 105, 264, 277, 325], "effect_s": [6, 67, 80, 100, 167, 252, 264, 277], "form": [6, 33, 40, 44, 49, 72, 105, 148, 149, 151, 152, 164, 167, 172, 179, 180, 181, 227, 228, 242, 243, 244, 245, 246, 247, 248, 249, 250, 259, 264, 267, 271, 277, 279, 280, 302, 303, 308, 309, 310, 311, 312, 313, 314, 315, 325, 369, 382, 386, 387, 388, 389, 398, 399], "scale": [6, 15, 41, 49, 54, 61, 68, 70, 71, 72, 94, 111, 114, 125, 132, 142, 147, 155, 159, 174, 191, 217, 222, 224, 236, 237, 239, 247, 248, 251, 254, 255, 256, 257, 259, 264, 272, 277, 279, 280, 309, 310, 311, 312, 313, 314, 315, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 386, 387, 388, 398, 399, 401, 405, 421], "gaussian": [6, 44, 79, 94, 111, 148, 161, 164, 174, 175, 180, 183, 299], "z_map": [6, 33, 61, 62, 64, 65, 66, 70, 71, 75, 76, 77, 79, 81, 101, 264, 277], "z_score": [6, 61, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77, 79, 80, 81, 108, 252, 264, 277], "top": [6, 12, 15, 17, 25, 44, 56, 63, 103, 138, 147, 162, 169, 173, 241, 362, 367, 368, 371, 373, 374, 375, 382, 419], "axial": [6, 14, 94, 264, 277, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 360, 362, 365, 367, 368, 371, 373, 374, 375, 399], "view": [6, 13, 14, 16, 22, 23, 33, 37, 42, 52, 54, 58, 61, 62, 64, 66, 71, 75, 84, 102, 129, 138, 140, 144, 147, 154, 159, 161, 169, 174, 242, 243, 244, 245, 249, 250, 297, 311, 314, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 370, 373, 376, 378, 379, 381, 382, 384, 387, 419, 421], "black_bg": [6, 13, 14, 36, 71, 141, 147, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 362, 365, 367, 368, 371, 373, 374, 375, 382, 383, 385], "minu": [6, 114, 164], "worri": [6, 24, 113], "valid": [6, 28, 32, 33, 36, 37, 40, 42, 44, 45, 51, 99, 102, 105, 106, 107, 110, 122, 125, 138, 142, 143, 147, 148, 150, 155, 158, 174, 181, 194, 211, 219, 242, 243, 244, 245, 246, 247, 248, 264, 265, 266, 271, 282, 286, 289, 294, 299, 300, 305, 306, 309, 312, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 385, 392, 398, 403, 404, 405, 421], "procedur": [6, 31, 76, 77, 79, 84, 87, 102, 149, 154, 159, 164, 166, 167, 217, 263, 279, 325, 401, 414], "arbitrari": [6, 48, 50, 65, 76, 164, 246, 277], "risk": 6, "aka": [6, 66, 108, 151, 164, 259], "control": [6, 8, 9, 11, 14, 15, 20, 23, 27, 33, 38, 40, 48, 56, 76, 79, 98, 110, 111, 120, 128, 129, 133, 135, 139, 147, 148, 152, 153, 154, 155, 158, 159, 161, 162, 164, 167, 171, 187, 215, 222, 224, 250, 259, 263, 264, 277, 280, 283, 294, 301, 305, 306, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 365, 367, 368, 374, 375, 376, 378, 379, 380, 386, 399, 405, 419, 421], "posit": [6, 14, 16, 17, 24, 48, 51, 58, 66, 71, 74, 79, 80, 81, 82, 84, 94, 99, 110, 111, 113, 138, 142, 147, 154, 159, 161, 164, 166, 167, 174, 180, 183, 187, 217, 219, 259, 264, 277, 279, 280, 301, 325, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 359, 360, 362, 365, 367, 368, 371, 373, 374, 375, 379, 380, 382, 383, 398, 399, 405, 419], "fpr": [6, 33, 81, 166, 167, 264, 277, 280, 399], "alpha": [6, 15, 23, 24, 37, 39, 40, 44, 48, 57, 68, 75, 76, 77, 81, 106, 144, 148, 153, 160, 164, 180, 181, 183, 247, 248, 250, 254, 256, 257, 259, 263, 264, 277, 280, 301, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 362, 367, 371, 373, 374, 376, 378, 379, 399, 419], "certain": [6, 56, 132, 147, 154, 164, 222, 297, 373], "g": [6, 9, 14, 24, 30, 31, 40, 42, 43, 47, 48, 49, 55, 61, 64, 67, 68, 92, 94, 99, 100, 105, 111, 114, 140, 144, 147, 149, 153, 159, 161, 162, 163, 164, 166, 167, 169, 173, 174, 192, 202, 219, 226, 242, 243, 244, 245, 249, 256, 257, 264, 271, 277, 281, 284, 301, 305, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 362, 373, 376, 377, 378, 379, 381, 382, 383, 385, 392, 393, 395, 405, 419], "001": [6, 41, 43, 44, 62, 76, 79, 80, 81, 101, 164, 180, 181, 183, 247, 248, 264, 277, 280, 399], "chanc": [6, 33, 37, 51, 77, 79, 139, 147, 158, 159, 164, 421], "declar": [6, 164, 180, 183], "inact": [6, 164, 170], "threshold_stats_img": [6, 75, 77, 81, 166, 301], "_": [6, 22, 30, 37, 42, 49, 51, 62, 75, 77, 80, 94, 98, 100, 101, 102, 105, 106, 108, 140, 144, 145, 147, 154, 162, 227, 228, 267, 304], "height_control": [6, 75, 77, 81, 264, 277, 280, 399], "uncorrect": [6, 62, 76, 79, 80, 81, 101], "291": [6, 33, 41, 66, 72], "n_voxel": [6, 55, 77, 79, 92, 98, 154, 157, 164, 249, 252, 254, 256, 257, 260, 264, 272, 273, 389], "ten": [6, 81, 387], "hundr": [6, 49, 387], "conserv": [6, 77, 79, 102, 159, 164, 180, 185], "solut": [6, 65, 66, 148, 149, 155, 160, 161, 169, 172, 250], "famili": [6, 81, 102, 129, 144, 147, 159, 167, 279, 325, 389, 391], "wise": [6, 15, 40, 47, 55, 81, 94, 100, 102, 144, 147, 159, 163, 167, 174, 242, 243, 244, 245, 279, 325], "probabl": [6, 11, 21, 31, 32, 39, 43, 48, 61, 66, 77, 79, 81, 92, 94, 149, 159, 161, 164, 167, 169, 170, 195, 196, 226], "sai": [6, 65, 70, 98, 114, 164, 254], "bonferroni": [6, 81, 102, 105, 106, 159, 164, 167, 264, 277, 280, 399], "934": 6, "inde": [6, 42, 49, 86, 148, 149, 157, 164, 265, 419], "popular": [6, 48, 168, 172, 242, 243], "proport": [6, 49, 51, 70, 74, 82, 99, 110, 152, 164, 166, 167, 217, 256, 259, 277, 371, 375, 380], "discoveri": [6, 23, 76, 77, 79, 81, 111, 164, 167, 169, 232], "among": [6, 79, 164, 167, 191, 242, 243, 244, 245], "fdr": [6, 75, 77, 81, 166, 167, 263, 264, 277, 280, 399], "904": 6, "discard": [6, 114, 164, 186, 222, 241, 267, 302, 319, 322, 405], "small": [6, 18, 49, 51, 58, 64, 65, 86, 99, 102, 103, 121, 123, 124, 147, 151, 152, 159, 161, 162, 169, 170, 246, 252, 282, 373, 374, 387, 390, 401, 405, 419], "cluster": [6, 19, 31, 32, 33, 39, 46, 59, 62, 74, 79, 81, 82, 86, 91, 110, 111, 135, 138, 142, 143, 144, 147, 150, 156, 157, 159, 164, 166, 167, 168, 169, 191, 192, 208, 217, 244, 245, 259, 264, 273, 277, 279, 280, 287, 289, 294, 301, 312, 325, 345, 365, 372, 374, 375, 380, 386, 387, 388, 392, 394, 395, 398, 399, 421], "remov": [6, 30, 32, 33, 35, 40, 41, 42, 48, 50, 77, 86, 89, 103, 104, 105, 106, 111, 113, 118, 122, 126, 127, 128, 130, 132, 133, 135, 137, 138, 140, 142, 145, 147, 155, 160, 161, 170, 171, 173, 226, 228, 264, 280, 282, 286, 288, 299, 301, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 321, 322, 325, 373, 389, 390, 397, 400, 401, 402, 421], "cluster_threshold": [6, 61, 70, 81, 142, 147, 264, 277, 280, 301, 398, 399], "clean_map": 6, "zscore": [6, 135, 147, 249, 309, 310, 311, 312, 313, 314, 315, 401], "active_vs_rest_z_map": 6, "active_vs_rest_eff_map": 6, "furthermor": [6, 42, 55], "extract": [6, 22, 28, 30, 32, 40, 43, 45, 46, 48, 49, 59, 60, 62, 72, 73, 83, 86, 92, 94, 96, 98, 100, 101, 104, 110, 114, 119, 120, 127, 128, 130, 131, 132, 133, 139, 143, 144, 145, 147, 150, 151, 154, 157, 165, 167, 169, 171, 179, 188, 194, 195, 197, 200, 205, 206, 208, 211, 219, 223, 226, 242, 243, 244, 245, 246, 249, 250, 264, 271, 277, 278, 279, 288, 289, 291, 294, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 320, 322, 338, 357, 358, 359, 360, 362, 371, 372, 373, 375, 380, 381, 383, 387, 389, 390, 391, 392, 393, 395, 397, 399, 402, 405, 414, 419, 421], "report": [6, 49, 53, 54, 56, 70, 89, 91, 92, 103, 111, 135, 140, 142, 144, 147, 164, 165, 170, 174, 202, 259, 264, 277, 309, 310, 312, 313, 314, 325, 376, 378, 379, 389, 420], "tabl": [6, 33, 62, 70, 91, 101, 143, 147, 306, 398], "get_clusters_t": [6, 62, 70, 139, 143, 144, 147], "stat_threshold": [6, 70, 398], "20": [6, 21, 22, 24, 27, 33, 36, 39, 41, 42, 43, 44, 48, 50, 52, 53, 54, 57, 58, 61, 62, 70, 72, 73, 78, 81, 91, 94, 100, 102, 103, 105, 106, 111, 118, 120, 125, 147, 148, 152, 154, 191, 200, 219, 242, 243, 244, 245, 247, 248, 249, 250, 405], "id": [6, 33, 62, 70, 71, 103, 107, 114, 187, 189, 198, 199, 202, 222, 224, 232, 264, 398], "y": [6, 14, 15, 24, 31, 33, 34, 35, 36, 37, 40, 41, 42, 44, 52, 54, 58, 62, 70, 71, 84, 92, 94, 101, 102, 105, 106, 114, 127, 129, 132, 144, 147, 154, 155, 159, 167, 170, 173, 174, 179, 180, 181, 197, 220, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 264, 272, 273, 277, 279, 284, 308, 309, 310, 311, 312, 313, 314, 315, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 362, 365, 367, 368, 371, 373, 374, 375, 376, 377, 378, 379, 382, 385, 386, 387, 388, 389, 390, 398, 399, 419], "peak": [6, 33, 62, 64, 67, 70, 155, 157, 161, 356, 389, 391, 398], "stat": [6, 23, 33, 62, 64, 68, 76, 79, 94, 101, 103, 107, 108, 111, 144, 147, 165, 173, 180, 183, 252, 264, 277, 304, 379, 383, 385, 398, 399, 419], "size": [6, 9, 15, 22, 23, 26, 33, 40, 44, 48, 49, 53, 62, 69, 77, 79, 80, 81, 84, 91, 94, 102, 103, 105, 108, 122, 132, 133, 135, 142, 147, 152, 159, 160, 161, 164, 219, 226, 264, 277, 279, 280, 301, 309, 310, 312, 313, 317, 320, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 362, 371, 372, 376, 378, 379, 381, 384, 386, 387, 388, 389, 390, 391, 398, 399, 405], "mm3": [6, 33, 62, 91, 389, 391, 398], "811979": 6, "4050": [6, 102], "1a": [6, 33, 62], "63": [6, 32, 33, 36, 42, 43, 44, 62, 77, 79, 93, 102, 111, 190, 198], "36": [6, 9, 15, 16, 17, 27, 33, 36, 42, 43, 62, 90, 91, 93, 102, 129, 132, 147, 191, 419], "601922": 6, "1b": [6, 62], "435063": 6, "1c": [6, 62], "48": [6, 20, 33, 36, 42, 43, 44, 48, 49, 53, 59, 62, 64, 72, 73, 91, 102, 190, 195, 197, 220, 284], "39": [6, 15, 33, 36, 42, 43, 44, 51, 54, 72, 91, 102, 120, 122, 125, 147, 190, 197, 208], "364058": 6, "605128": 6, "1512": 6, "2a": [6, 62], "45": [6, 32, 33, 39, 42, 43, 45, 55, 62, 91, 102, 105, 106], "590200": 6, "27": [6, 15, 16, 17, 33, 36, 42, 43, 44, 62, 64, 67, 80, 82, 90, 91, 93, 94, 96, 102, 103, 111, 306, 389, 391, 419], "253889": 6, "972": 6, "3a": [6, 62, 111, 202, 231], "51": [6, 9, 33, 35, 36, 42, 43, 45, 48, 53, 62, 102, 105, 111, 153, 191, 249], "968355": 6, "3b": 6, "54": [6, 33, 36, 42, 43, 44, 45, 62, 87, 91, 96, 100, 102, 111, 191, 212, 237], "565609": 6, "087451": 6, "1188": 6, "18": [6, 12, 13, 16, 25, 27, 30, 32, 33, 36, 40, 42, 43, 44, 45, 55, 58, 62, 65, 72, 73, 91, 102, 103, 107, 111, 116, 125, 132, 142, 147, 174, 208, 219, 246, 376, 378, 379, 419], "807510": 6, "594": [6, 33], "5a": [6, 33, 62], "21": [6, 33, 36, 42, 43, 54, 62, 63, 66, 77, 91, 98, 102, 103, 108, 109, 122, 140, 147, 232], "646352": 6, "5b": [6, 33, 62], "33": [6, 30, 33, 36, 42, 43, 44, 45, 62, 72, 91, 102, 111, 192, 208], "416271": 6, "57": [6, 33, 42, 43, 44, 62, 91, 102, 111, 115, 118, 132, 147, 191], "710963": 6, "702": [6, 33], "6a": [6, 62], "633746": 6, "6b": 6, "66": [6, 16, 17, 33, 36, 42, 43, 62, 90, 93, 102], "796135": 6, "16": [6, 7, 25, 30, 32, 33, 34, 36, 39, 42, 43, 44, 48, 49, 54, 62, 66, 68, 76, 77, 79, 80, 82, 84, 91, 102, 103, 105, 133, 140, 147, 161, 173, 198, 310, 313, 389, 419], "6c": 6, "69": [6, 33, 36, 42, 43, 44, 48, 72, 79, 102], "254544": 6, "17": [6, 27, 30, 32, 33, 36, 42, 43, 47, 62, 77, 80, 91, 102, 103, 111, 132, 147, 161, 189, 199, 203, 219], "93": [6, 30, 32, 33, 36, 42, 43, 44, 77, 91, 102, 193], "522477": 6, "621": [6, 33], "7a": [6, 33, 62], "99": [6, 12, 30, 32, 33, 42, 43, 44, 58, 102, 141, 147, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "713852": 6, "19": [6, 33, 36, 42, 43, 44, 53, 62, 77, 81, 82, 91, 102, 103, 105, 111, 120, 122, 135, 145, 147, 188, 189, 197, 198, 199, 202, 203, 226, 229, 230, 256, 257], "7b": 6, "90": [6, 9, 12, 22, 30, 32, 33, 36, 42, 43, 44, 47, 50, 53, 56, 63, 77, 79, 91, 102, 103, 105, 111, 120, 133, 141, 147, 152, 305, 306, 382, 402, 419], "270733": 6, "7c": 6, "085568": 6, "24": [6, 14, 27, 33, 34, 36, 42, 43, 44, 45, 51, 62, 66, 70, 73, 79, 91, 102, 103, 140, 147, 264, 266, 267, 271, 305], "331806": 6, "648": [6, 33, 62], "22": [6, 33, 36, 42, 43, 44, 62, 91, 102, 103, 107, 109, 111, 122, 133, 142, 147, 193, 284], "8a": [6, 33], "700088": 6, "23": [6, 33, 36, 42, 43, 44, 45, 62, 72, 82, 91, 100, 102, 103, 109, 111, 191, 200, 248], "8b": 6, "037845": 6, "8c": 6, "527477": 6, "25": [6, 15, 29, 30, 32, 33, 36, 40, 41, 42, 43, 44, 45, 62, 70, 71, 73, 77, 91, 94, 95, 98, 102, 103, 105, 115, 147, 149, 219, 254, 256, 257, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 373, 381, 383, 384, 385], "835099": 6, "837": 6, "26": [6, 33, 36, 42, 43, 44, 61, 62, 72, 75, 91, 102, 103, 125, 147, 390], "9a": 6, "615642": 6, "9b": 6, "091568": 6, "to_csv": [6, 72], "baselin": [6, 30, 32, 111, 138, 139, 147, 155, 157, 190, 252, 272], "anoth": [6, 39, 66, 69, 79, 89, 124, 129, 147, 154, 161, 162, 164, 169, 171, 172, 179, 247, 248, 283, 284, 303, 397, 419, 421], "seek": [6, 77, 105, 153, 373], "whether": [6, 9, 70, 89, 94, 102, 133, 147, 154, 162, 164, 170, 174, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 208, 211, 212, 213, 217, 219, 220, 221, 222, 224, 226, 232, 249, 250, 261, 279, 280, 286, 301, 308, 309, 310, 311, 314, 317, 318, 319, 321, 322, 325, 326, 328, 329, 367, 375, 376, 377, 379, 387, 389, 398, 399, 401, 402], "possibli": [6, 66, 174], "three": [6, 14, 19, 24, 32, 40, 49, 63, 65, 66, 75, 89, 94, 111, 133, 141, 147, 161, 162, 170, 172, 208, 264, 277, 297, 299, 336, 338, 341, 355, 360, 362, 365, 366, 367, 368, 371, 373, 374, 375, 399, 405], "higher": [6, 64, 67, 113, 127, 147, 148, 159, 164, 180, 200, 242, 243, 244, 245, 247, 248, 249, 250, 264, 277, 283, 294, 309, 310, 311, 312, 313, 314, 315, 387, 388, 389, 400], "dimension": [6, 26, 49, 71, 94, 122, 139, 144, 147, 161, 169, 185, 186, 194, 200, 219, 249, 250, 252, 283, 324, 386, 387, 388], "explain": [6, 40, 42, 48, 56, 66, 70, 138, 147, 151, 154, 162, 164, 169, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405], "might": [6, 34, 61, 104, 153, 157, 159, 164, 167, 170, 172, 193, 208, 271, 300, 306, 317, 318, 319, 321, 322, 385], "specif": [6, 14, 15, 16, 17, 30, 32, 33, 48, 49, 61, 62, 63, 64, 65, 66, 67, 69, 71, 76, 79, 80, 84, 94, 101, 108, 111, 112, 117, 125, 138, 144, 147, 148, 151, 152, 153, 154, 155, 157, 159, 162, 164, 166, 167, 169, 170, 171, 174, 209, 219, 224, 227, 228, 252, 254, 256, 257, 278, 282, 302, 304, 310, 313, 325, 357, 376, 377, 378, 379, 385, 389, 401, 403, 404, 405, 419, 421], "exactli": [6, 84, 94, 98, 108, 161, 162, 242, 243, 244, 245, 246, 302, 382, 405], "effects_of_interest": [6, 64, 70, 71], "vstack": [6, 40, 41, 58, 70, 71, 75, 80, 103], "easier": [6, 66, 121, 126, 141, 147, 153, 154, 161, 162], "oop": 6, "lot": [6, 65, 71, 86, 118, 132, 135, 147, 148, 154, 155, 161, 162, 169, 183], "non": [6, 15, 39, 42, 50, 56, 65, 66, 68, 77, 79, 91, 94, 102, 103, 112, 128, 132, 135, 139, 140, 142, 143, 147, 148, 152, 153, 159, 160, 161, 162, 166, 167, 169, 174, 192, 219, 226, 242, 243, 244, 245, 249, 254, 256, 257, 264, 282, 286, 291, 297, 299, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 360, 374, 375, 376, 378, 379, 389, 395, 401, 419, 421], "neural": [6, 68, 111, 153, 164, 167, 169, 174, 209, 227, 246], "ventricl": 6, "arteri": 6, "016": [6, 7, 41, 66], "301": [6, 33, 39, 41], "plot_single_subject_single_run": [6, 7], "56": [7, 33, 36, 37, 42, 43, 44, 72, 102, 111, 155, 192], "022": [7, 41], "execut": [7, 27, 45, 59, 73, 82, 87, 96, 109, 110, 162, 174, 297, 376, 419, 420], "auto_examples_00_tutori": 7, "00": [7, 27, 30, 32, 33, 36, 42, 44, 45, 48, 53, 59, 73, 82, 89, 96, 102, 105, 109], "300": [7, 26, 33, 36, 41, 42, 44, 55, 61, 70, 100, 102, 199, 207, 219], "glass": [8, 9, 27, 47, 61, 107, 110, 125, 126, 127, 129, 130, 135, 138, 147, 168, 225, 233, 264, 277, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 367, 371, 375, 380, 381, 384, 399, 419], "megatrawl": [8, 27, 110, 111, 122, 147, 219, 372, 380], "connectom": [8, 12, 22, 27, 46, 48, 49, 51, 54, 56, 57, 59, 99, 110, 111, 116, 120, 124, 125, 129, 132, 133, 135, 138, 140, 147, 150, 152, 153, 167, 168, 169, 174, 187, 194, 197, 203, 205, 206, 208, 219, 249, 250, 289, 306, 308, 309, 310, 312, 313, 315, 338, 357, 358, 359, 360, 362, 371, 372, 373, 375, 380, 381, 382, 384, 389, 421], "atla": [8, 11, 27, 46, 48, 50, 59, 83, 91, 94, 96, 110, 111, 114, 119, 123, 124, 126, 127, 128, 129, 132, 135, 138, 139, 140, 141, 143, 144, 147, 150, 152, 161, 167, 173, 174, 179, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 208, 212, 222, 231, 289, 301, 308, 309, 310, 312, 313, 338, 357, 358, 359, 361, 362, 372, 373, 374, 375, 378, 380, 381, 382, 383, 385, 389, 390, 391, 397, 404, 414, 419, 421], "multiscal": [8, 27, 40, 41, 110, 111, 123, 147, 191, 221, 374, 380], "parcel": [8, 9, 22, 23, 27, 46, 59, 110, 111, 114, 123, 127, 130, 131, 132, 135, 142, 144, 147, 150, 167, 168, 169, 174, 179, 189, 191, 192, 193, 195, 196, 197, 199, 201, 203, 208, 219, 222, 287, 289, 294, 305, 306, 308, 312, 345, 357, 358, 362, 365, 372, 374, 380, 389, 390, 419, 421], "colormap": [8, 19, 21, 23, 27, 86, 110, 127, 130, 131, 132, 133, 135, 140, 147, 203, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 360, 361, 362, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 421], "probabilist": [8, 27, 46, 51, 59, 99, 110, 111, 132, 143, 147, 150, 167, 173, 174, 179, 190, 192, 194, 195, 196, 197, 198, 200, 208, 212, 289, 308, 313, 338, 357, 358, 362, 372, 373, 374, 375, 380, 381, 393, 397, 419, 421], "mode": [8, 14, 16, 21, 27, 55, 60, 73, 83, 94, 96, 110, 111, 125, 130, 133, 139, 144, 147, 162, 163, 168, 173, 174, 188, 194, 197, 200, 219, 222, 224, 259, 264, 271, 289, 308, 313, 315, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 370, 373, 375, 380, 389, 397, 399, 421], "msdl": [8, 21, 27, 52, 54, 110, 149, 173, 197, 289, 338, 357, 373, 375, 380, 419], "global": [8, 27, 110, 111, 138, 147, 161, 172, 187, 188, 199, 212, 233, 249, 250, 283, 295, 305, 306, 319, 361, 387], "carpet": [8, 27, 110, 138, 147, 188, 212, 283, 295, 319, 361], "haxbi": [8, 15, 16, 27, 28, 45, 94, 102, 110, 111, 113, 126, 127, 147, 158, 160, 168, 172, 174, 211, 242, 287, 289, 294, 308, 314, 353, 360, 372, 375, 380, 382, 419, 421], "technic": [8, 27, 64, 67, 100, 110, 148, 160, 161, 219, 226, 251, 255, 379, 380, 405], "illustr": [8, 27, 49, 66, 67, 68, 85, 90, 93, 101, 108, 110, 154, 162, 173, 174, 379, 380, 405], "surfac": [8, 12, 27, 28, 45, 55, 60, 73, 97, 109, 110, 111, 113, 127, 129, 131, 132, 133, 135, 138, 139, 142, 144, 147, 165, 167, 168, 169, 193, 201, 211, 214, 218, 225, 231, 232, 252, 260, 267, 271, 273, 289, 325, 339, 362, 367, 370, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 421], "scheme": [8, 27, 29, 33, 36, 37, 98, 110, 138, 147, 148, 154, 155, 157, 161, 181, 242, 243, 244, 245, 325, 379, 380, 405], "seed": [8, 27, 46, 48, 59, 61, 100, 110, 132, 144, 147, 162, 163, 171, 201, 208, 231, 232, 244, 245, 264, 271, 273, 308, 314, 315, 325, 338, 375, 378, 379, 380, 381, 384, 389, 391, 403, 419, 421], "connect": [8, 22, 26, 27, 49, 50, 58, 59, 88, 94, 97, 109, 111, 120, 125, 127, 128, 135, 138, 143, 147, 149, 151, 153, 162, 163, 164, 167, 168, 169, 173, 179, 180, 181, 187, 191, 197, 199, 200, 201, 203, 208, 214, 219, 231, 232, 264, 267, 280, 283, 291, 301, 305, 306, 308, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 338, 359, 362, 364, 372, 375, 378, 379, 380, 381, 387, 390, 391, 403, 419, 420, 421], "cortic": [8, 23, 24, 27, 28, 45, 55, 64, 67, 69, 110, 111, 127, 129, 132, 138, 147, 149, 163, 168, 193, 201, 203, 207, 211, 212, 231, 289, 362, 378, 379, 380, 381, 382, 383, 384, 385, 404, 405, 421], "option": [8, 9, 13, 15, 21, 23, 27, 42, 51, 56, 68, 72, 89, 102, 105, 106, 110, 113, 118, 125, 127, 128, 129, 130, 135, 138, 139, 140, 141, 142, 144, 145, 147, 149, 154, 156, 162, 163, 167, 170, 172, 174, 179, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 288, 292, 294, 295, 296, 297, 298, 299, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 419], "onto": [9, 16, 23, 40, 50, 69, 127, 147, 152, 162, 168, 172, 318, 321, 364, 373, 419], "vol_to_surf": [9, 37, 69, 108, 129, 138, 140, 147, 163, 370, 376, 377, 378, 379, 383, 419], "plot_surf_stat_map": [9, 23, 24, 27, 37, 69, 108, 127, 129, 131, 135, 138, 142, 143, 144, 147, 163, 370, 376, 377, 421], "add": [9, 14, 15, 20, 40, 41, 50, 56, 63, 69, 102, 114, 119, 125, 127, 128, 130, 132, 135, 140, 144, 147, 152, 154, 157, 159, 162, 167, 170, 181, 198, 199, 222, 224, 240, 282, 305, 314, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 381, 383, 385, 401, 419], "contour": [9, 15, 18, 21, 48, 50, 87, 88, 127, 135, 138, 140, 144, 147, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 373, 374, 377, 421], "plot_surf_contour": [9, 138, 147], "stat_img": [9, 13, 14, 15, 16, 90, 93, 259, 264, 277, 280, 398, 399], "fsaverag": [9, 22, 23, 24, 37, 62, 69, 108, 132, 140, 147, 231, 370, 383, 405, 419], "fetch_surf_fsaverag": [9, 22, 23, 37, 69, 108, 132, 138, 140, 144, 147, 163, 201, 370, 376, 377, 378, 379, 383, 405, 419], "textur": [9, 69, 108, 405], "pial_right": [9, 69, 108, 231, 370, 383, 419], "fig": [9, 11, 18, 24, 38, 40, 41, 42, 49, 57, 63, 65, 66, 68, 79, 91, 100, 101, 105, 106, 370, 376, 419], "infl_right": [9, 69, 108, 231, 370, 383], "hemi": [9, 22, 23, 37, 69, 108, 376, 378, 379, 419], "right": [9, 12, 20, 22, 25, 32, 40, 44, 50, 58, 63, 65, 66, 69, 72, 76, 79, 80, 86, 94, 98, 108, 125, 130, 135, 138, 140, 147, 151, 152, 158, 162, 169, 173, 187, 193, 195, 196, 201, 215, 217, 225, 231, 232, 244, 245, 264, 277, 278, 296, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 360, 362, 363, 365, 367, 368, 370, 371, 372, 373, 374, 375, 376, 378, 379, 383, 399, 419, 421], "hemispher": [9, 22, 23, 37, 58, 79, 86, 94, 108, 125, 126, 130, 147, 152, 173, 193, 201, 202, 231, 232, 264, 277, 300, 334, 357, 362, 367, 370, 371, 376, 378, 379, 383, 399, 419], "bg_map": [9, 22, 23, 37, 69, 108, 376, 378, 379, 385, 419], "sulc_right": [9, 69, 108, 231, 370, 383, 419], "recent": [9, 126, 129, 130, 132, 142, 147, 153, 170], "version": [9, 19, 20, 22, 32, 35, 36, 40, 41, 42, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 64, 67, 70, 71, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 118, 120, 122, 125, 126, 127, 128, 129, 130, 132, 134, 135, 138, 140, 141, 142, 143, 144, 145, 147, 160, 161, 162, 170, 172, 174, 179, 185, 186, 187, 189, 191, 194, 196, 198, 199, 201, 202, 203, 207, 208, 209, 213, 222, 224, 226, 227, 228, 231, 232, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 248, 249, 250, 264, 273, 277, 279, 281, 282, 286, 291, 292, 293, 298, 301, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 318, 321, 325, 361, 372, 373, 376, 378, 379, 386, 387, 388, 389, 391, 395, 398, 401, 405, 419], "instal": [9, 110, 127, 132, 135, 142, 143, 145, 147, 169, 170, 195, 196, 284, 310, 313, 376, 378, 379, 389, 419], "configur": [9, 15, 162, 170, 173, 174, 306], "instead": [9, 32, 35, 36, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 66, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 120, 122, 125, 126, 128, 129, 130, 132, 135, 139, 141, 142, 143, 144, 145, 147, 160, 161, 162, 163, 173, 174, 226, 248, 254, 325], "graph_object": 9, "noqa": 9, "f401": 9, "except": [9, 49, 52, 53, 57, 58, 63, 78, 100, 103, 139, 142, 147, 160, 248, 292, 325], "importerror": [9, 52, 53, 57, 58, 63, 78, 135, 147], "f": [9, 29, 34, 40, 41, 42, 64, 66, 71, 72, 75, 80, 98, 100, 102, 105, 106, 108, 111, 154, 157, 159, 160, 163, 189, 200, 205, 207, 209, 212, 219, 227, 242, 243, 244, 245, 252, 253, 254, 256, 257, 260, 264, 265, 277, 297, 298, 304, 305, 306, 316, 324, 392, 395], "specifi": [9, 14, 15, 32, 48, 50, 56, 61, 62, 66, 69, 71, 75, 78, 79, 80, 81, 84, 86, 89, 94, 95, 101, 107, 108, 114, 119, 129, 132, 133, 135, 138, 139, 140, 141, 142, 144, 147, 148, 149, 159, 161, 163, 164, 170, 172, 173, 174, 195, 196, 200, 222, 223, 225, 227, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 247, 248, 249, 250, 254, 256, 257, 260, 264, 267, 271, 272, 273, 277, 278, 282, 286, 294, 297, 299, 305, 309, 310, 316, 317, 319, 320, 322, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 365, 367, 368, 370, 372, 373, 374, 375, 376, 378, 379, 382, 384, 387, 389, 399, 400, 401, 405, 419], "js_plotting_util": [9, 132, 147], "81": [9, 33, 36, 42, 43, 44, 102, 116, 147], "vmin": [9, 36, 40, 44, 49, 50, 52, 53, 54, 56, 57, 58, 80, 84, 118, 133, 135, 147, 152, 360, 361, 365, 367, 368, 373, 374, 375, 376, 378, 379, 382, 383, 385], "chosen": [9, 22, 66, 100, 161, 179, 376, 379, 382, 383, 385, 405], "symmetr": [9, 19, 47, 79, 128, 147, 161, 185, 186, 191, 195, 196, 212, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 370, 375, 376, 379, 381, 382, 383, 385], "matplolib": 9, "With": [9, 14, 32, 56, 78, 89, 157, 161, 164, 180, 183, 260, 306, 401, 404, 420], "custom": [9, 15, 23, 47, 68, 132, 140, 142, 147, 159, 171, 264, 266, 271, 339, 376, 397, 419, 421], "plotlysurfacefigur": [9, 142, 147, 376], "similar": [9, 23, 24, 30, 48, 55, 79, 94, 100, 101, 113, 120, 132, 133, 135, 142, 147, 148, 151, 153, 155, 156, 159, 166, 167, 174, 244, 245, 306], "api": [9, 44, 104, 142, 144, 145, 162, 170, 321, 386, 388, 421], "static": [9, 327, 382], "requir": [9, 20, 36, 42, 47, 55, 63, 68, 69, 72, 75, 78, 93, 114, 120, 125, 127, 129, 138, 142, 143, 147, 149, 152, 157, 159, 161, 162, 164, 167, 169, 170, 172, 173, 174, 181, 226, 280, 300, 305, 306, 310, 313, 325, 389, 390, 419, 420], "kaleido": [9, 142, 147, 376, 378, 379, 419, 420], "uncom": [9, 16, 22, 52, 54, 58], "savefig": [9, 15, 41, 55, 61, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 362, 365, 367, 368, 371, 373, 374, 375, 419], "right_hemispher": 9, "plot_glass_brain": [9, 13, 14, 62, 79, 80, 101, 105, 107, 125, 135, 143, 144, 147, 166, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 375, 419], "plot_ab": [9, 14, 62, 79, 80, 101, 105, 329, 367, 419], "rang": [9, 10, 15, 18, 21, 23, 41, 44, 47, 48, 49, 50, 53, 55, 57, 62, 68, 70, 78, 79, 80, 87, 88, 91, 95, 100, 102, 105, 125, 129, 139, 147, 161, 162, 180, 183, 194, 281, 301, 367, 375, 379, 381, 382, 383, 385], "xslicer": [9, 15, 347, 353, 355], "0x7fdb600b4a30": 9, "destrieux_atla": [9, 22, 23], "fetch_atlas_surf_destrieux": [9, 22, 23, 127, 147, 419], "map_right": [9, 201], "regions_dict": 9, "b": [9, 14, 15, 23, 30, 40, 41, 49, 56, 58, 72, 91, 111, 114, 162, 170, 189, 193, 199, 200, 203, 209, 219, 227, 231, 255, 305, 306, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 419], "g_postcentr": 9, "postcentr": [9, 91], "gyru": [9, 91, 202], "g_precentr": 9, "precentr": [9, 91], "indic": [9, 23, 30, 32, 41, 50, 54, 66, 72, 79, 86, 124, 127, 132, 147, 152, 159, 167, 170, 172, 187, 189, 190, 193, 195, 196, 198, 199, 202, 203, 211, 222, 229, 230, 242, 243, 244, 245, 247, 248, 249, 250, 264, 283, 295, 297, 298, 300, 308, 310, 311, 312, 313, 314, 315, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 365, 368, 373, 374, 375, 376, 377, 378, 379, 382, 385, 389, 391, 398], "regions_indic": 9, "legend": [9, 18, 30, 32, 34, 42, 43, 49, 58, 68, 91, 377], "color": [9, 14, 15, 18, 21, 24, 30, 32, 34, 49, 50, 51, 70, 86, 88, 133, 135, 138, 140, 144, 147, 151, 152, 162, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 365, 366, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 419], "k": [9, 18, 22, 30, 32, 34, 35, 41, 42, 49, 51, 68, 81, 84, 91, 98, 111, 154, 157, 159, 161, 181, 209, 219, 227, 242, 243, 244, 245, 247, 248, 256, 257, 264, 273, 282, 305, 306, 312, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 362, 365, 367, 368, 371, 373, 374, 375, 386, 401], "low": [9, 42, 66, 71, 94, 104, 132, 138, 147, 154, 160, 161, 162, 164, 170, 172, 173, 174, 231, 242, 243, 244, 245, 247, 248, 282, 305, 309, 310, 370, 383, 387, 389, 400, 401], "fsaverage5": [9, 22, 23, 24, 37, 69, 108, 127, 132, 147, 201, 231, 232, 370, 383, 405], "high": [9, 31, 39, 49, 56, 65, 66, 89, 94, 111, 132, 138, 139, 140, 147, 155, 156, 161, 162, 164, 167, 169, 170, 173, 174, 189, 198, 219, 231, 242, 243, 244, 245, 247, 248, 252, 264, 271, 282, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 370, 383, 387, 389, 400, 401], "finer": [9, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "big_fsaverag": 9, "big_textur": 9, "fine": [9, 89, 111, 126, 147, 149, 174, 194, 246, 249, 250, 305, 311, 314, 387, 419], "470x400": [9, 23, 108], "ax": [9, 10, 11, 18, 21, 22, 23, 24, 38, 40, 49, 51, 57, 63, 65, 66, 70, 75, 78, 79, 80, 84, 91, 100, 101, 105, 108, 129, 139, 140, 147, 296, 297, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379], "plot_img_on_surf": [9, 138, 140, 147], "choic": [9, 19, 66, 68, 71, 122, 147, 148, 149, 155, 157, 158, 161, 162, 181, 247, 248, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 389, 421], "orient": [9, 135, 138, 147, 161, 162, 296], "surf_mesh": [9, 370, 376, 377, 378, 379, 383, 385, 404, 405, 419], "freesurf": [9, 22, 23, 69, 108, 127, 132, 144, 147, 163, 201, 231, 376, 377, 378, 379, 385, 403, 404, 405], "medial": [9, 23, 37, 58, 91, 111, 159, 370, 376, 378, 379], "left": [9, 12, 20, 22, 23, 25, 30, 34, 37, 40, 44, 49, 50, 51, 58, 63, 65, 66, 68, 72, 76, 77, 79, 80, 86, 94, 101, 105, 108, 125, 126, 130, 135, 138, 140, 147, 152, 169, 173, 187, 193, 195, 196, 201, 215, 217, 225, 231, 232, 264, 277, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 360, 361, 362, 365, 367, 368, 370, 371, 372, 373, 374, 375, 376, 378, 379, 383, 399], "view_surf": [9, 22, 132, 135, 147, 381, 382, 383, 384, 421], "view_img_on_surf": [9, 132, 133, 135, 140, 147, 381, 382, 384, 385, 421], "atlas": [9, 10, 21, 22, 46, 58, 59, 110, 111, 114, 139, 140, 147, 150, 153, 162, 164, 167, 172, 173, 174, 179, 194, 195, 196, 203, 208, 212, 237, 308, 309, 310, 312, 313, 357, 358, 362, 373, 374, 377, 378, 380, 381, 382, 384, 421], "output": [9, 16, 22, 33, 34, 36, 41, 44, 51, 52, 54, 56, 58, 66, 67, 69, 80, 94, 108, 112, 113, 124, 130, 142, 144, 147, 148, 153, 158, 162, 167, 169, 171, 173, 174, 179, 180, 182, 183, 184, 185, 186, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 256, 257, 264, 277, 279, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 360, 361, 367, 368, 370, 373, 374, 375, 382, 383, 387, 389, 392, 393, 395, 396, 399, 405, 419, 421], "cell": [9, 16, 22, 36, 49, 52, 53, 54, 58, 62, 75, 77, 164, 167], "open": [9, 16, 22, 52, 54, 58, 89, 91, 92, 98, 108, 111, 145, 147, 161, 162, 167, 168, 169, 171, 176, 208, 226, 252, 264, 277, 317, 318, 319, 320, 321, 322, 381, 382, 383, 384, 385, 388, 397, 399, 419, 420, 421], "open_in_brows": [9, 16, 22, 33, 52, 54, 58, 61, 62, 64, 75, 91, 92, 132, 147, 174, 381, 382, 383, 384, 385, 397, 399, 419], "don": [9, 24, 33, 66, 81, 114, 162, 169, 170, 222, 224, 370, 405, 419], "ourselv": 9, "vol_to_surf_kwarg": [9, 140, 147, 383], "allow": [9, 20, 24, 40, 48, 51, 58, 63, 89, 99, 100, 101, 102, 113, 126, 128, 133, 135, 139, 140, 143, 144, 147, 148, 154, 161, 162, 163, 165, 167, 174, 209, 217, 228, 242, 243, 244, 245, 267, 277, 302, 305, 372], "grain": [9, 70, 111, 194, 246], "interpol": [9, 24, 40, 41, 44, 54, 66, 75, 84, 124, 147, 222, 296, 297, 298, 367, 368, 374, 375, 382, 401, 405], "volumetr": [9, 23, 163, 172, 325], "avoid": [9, 52, 53, 54, 58, 71, 130, 135, 144, 147, 159, 161, 162, 164, 172, 242, 243, 244, 245, 252, 277, 279, 286, 291, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 400, 419], "neighbor": [9, 37, 49, 94, 135, 147, 168, 246, 367, 368, 374, 375, 382, 387, 388, 394, 405], "nearest": [9, 40, 41, 44, 49, 66, 75, 84, 111, 135, 144, 147, 167, 222, 296, 297, 298, 367, 368, 374, 375, 382, 388, 394, 398, 405], "zero": [9, 20, 22, 23, 36, 39, 44, 47, 53, 54, 64, 67, 70, 77, 79, 94, 118, 135, 139, 143, 147, 148, 152, 154, 155, 159, 160, 161, 164, 167, 173, 174, 179, 180, 181, 183, 226, 242, 243, 244, 245, 247, 248, 249, 251, 256, 257, 271, 277, 279, 282, 286, 299, 305, 309, 310, 311, 312, 313, 314, 315, 316, 319, 322, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 374, 375, 377, 378, 387, 388, 389, 392, 395, 396, 401], "radiu": [9, 36, 37, 44, 55, 58, 61, 100, 122, 147, 158, 163, 167, 174, 207, 246, 315, 405, 421], "achiev": [9, 15, 55, 71, 93, 154, 161, 169, 173, 174, 183], "destrieux": [9, 22, 23, 111, 119, 127, 138, 147, 193, 201, 419], "fetch_atlas_destrieux_2009": [9, 149], "legacy_format": [9, 17, 21, 42, 43, 47, 58, 75, 76, 77, 79, 80, 81, 105, 106, 142, 147, 187, 193, 194, 205, 206, 207, 215, 216, 217, 226], "n_sampl": [9, 44, 47, 77, 81, 102, 105, 106, 179, 180, 181, 242, 243, 244, 245, 247, 248, 249, 250, 264, 277, 282, 308, 311, 314, 325, 386, 388, 394, 400, 401, 405], "symmetric_cmap": [9, 22, 133, 147, 376, 381, 382, 383, 385, 419], "129": [9, 27, 33, 41, 67, 118, 147], "566": [9, 27, 33], "plot_3d_map_to_surface_project": [9, 27, 140, 147, 383], "refer": [10, 19, 46, 48, 59, 62, 66, 69, 78, 93, 94, 98, 101, 106, 108, 110, 111, 112, 113, 120, 125, 133, 140, 142, 143, 144, 147, 154, 158, 162, 163, 164, 166, 167, 172, 173, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 419, 421], "dataset_ho": 10, "fetch_atlas_harvard_oxford": [10, 21, 56, 91, 122, 143, 147, 149, 162, 196, 390], "cort": [10, 21, 56, 91, 149, 195, 196], "maxprob": [10, 56, 91, 150, 195, 196, 421], "thr25": [10, 56, 91, 149, 195, 196], "2mm": [10, 21, 56, 91, 141, 145, 147, 149, 159, 194, 195, 196], "dataset_ju": 10, "fetch_atlas_juelich": [10, 141, 143, 147, 195], "thr0": [10, 195, 196], "1mm": [10, 141, 145, 147, 195, 196, 199, 236, 237, 239, 318], "atlas_ho_filenam": 10, "atlas_ju_filenam": 10, "roi": [10, 17, 21, 23, 25, 28, 33, 45, 56, 58, 83, 86, 88, 91, 96, 99, 110, 111, 114, 127, 135, 138, 147, 154, 169, 171, 193, 199, 205, 206, 207, 211, 222, 242, 287, 289, 292, 294, 295, 299, 300, 308, 312, 314, 365, 367, 374, 375, 377, 378, 380, 419, 421], "locat": [10, 15, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 47, 49, 53, 54, 55, 56, 58, 70, 75, 77, 89, 91, 92, 94, 95, 101, 102, 105, 108, 132, 141, 147, 161, 164, 170, 172, 174, 180, 183, 189, 205, 207, 208, 223, 225, 246, 247, 248, 249, 250, 264, 267, 277, 283, 309, 310, 311, 312, 313, 314, 315, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 387, 389, 419], "fsl": [10, 11, 36, 49, 62, 79, 86, 94, 141, 142, 144, 147, 172, 195, 196, 293], "harvardoxford": 10, "0x7fdb59cfdc10": 10, "0x7fdb59bf12e0": 10, "view_typ": [10, 50, 87, 88, 138, 147, 152, 373, 374], "img_plot": 10, "572": [10, 33], "int": [10, 11, 23, 36, 40, 41, 49, 68, 78, 79, 84, 86, 94, 100, 101, 144, 147, 162, 180, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 257, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 283, 288, 294, 305, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 360, 361, 362, 365, 367, 368, 371, 373, 374, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 389, 394, 397, 398, 399, 400, 402, 405], "due": [10, 11, 34, 36, 39, 49, 66, 71, 79, 86, 94, 135, 141, 142, 143, 144, 145, 147, 151, 155, 157, 162, 164, 170, 187, 247, 248, 419], "deal": [10, 11, 36, 49, 68, 79, 86, 94, 113, 118, 138, 147, 164, 311], "int64": [10, 11, 36, 49, 79, 86, 94, 101, 144, 147, 172, 386, 388], "compat": [10, 11, 36, 49, 72, 79, 86, 94, 122, 142, 144, 147, 157, 162, 163, 195, 196, 264, 277, 279, 289, 308, 309, 310, 311, 312, 313, 314, 315, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 363, 389], "int32": [10, 11, 36, 49, 79, 84, 86, 94, 144, 147, 172, 292, 309, 310, 311, 312, 313, 314, 315], "new_img_lik": [10, 11, 36, 94, 107, 135, 144, 147, 173], "roi_img": [10, 70, 374], "affin": [10, 40, 43, 49, 56, 71, 83, 89, 91, 93, 94, 96, 110, 126, 141, 147, 167, 171, 174, 242, 243, 244, 245, 247, 248, 249, 250, 264, 277, 282, 283, 284, 285, 287, 292, 293, 294, 295, 296, 297, 298, 300, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 326, 328, 329, 380, 387, 392, 395, 396, 405, 407, 421], "_ax": [10, 15, 18, 21, 48, 50, 87, 88], "71": [10, 15, 18, 21, 32, 33, 36, 42, 43, 44, 48, 50, 72, 87, 88, 102, 105], "No": [10, 15, 18, 21, 48, 50, 56, 66, 77, 87, 88, 91, 105, 161, 162], "within": [10, 15, 18, 21, 37, 47, 48, 50, 55, 66, 68, 79, 87, 88, 100, 102, 135, 138, 144, 147, 151, 153, 159, 163, 166, 242, 243, 246, 261, 264, 266, 271, 277, 281, 301, 323, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 361, 362, 387, 390, 399], "im": [10, 18, 21, 107], "getattr": [10, 18, 21], "data_2d": [10, 18, 21, 326, 328, 329], "921": [10, 27], "195": [10, 33, 41, 50, 59, 72], "plot_atla": [10, 27], "common": [11, 49, 66, 68, 71, 94, 100, 127, 135, 141, 143, 147, 148, 154, 157, 159, 161, 162, 164, 166, 171, 173, 183, 192, 289, 297, 298, 302, 311, 320, 322, 421], "qualiti": [11, 62, 70, 77, 105, 111, 132, 147, 162, 163, 164, 170, 174, 187, 219, 309, 312, 361, 387], "mri": [11, 41, 56, 60, 73, 94, 100, 110, 111, 113, 142, 147, 162, 163, 164, 165, 167, 169, 172, 187, 189, 199, 208, 212, 226, 266, 305, 306], "known": [11, 33, 34, 100, 138, 154, 155, 159, 162, 164, 199, 254, 256, 257, 264, 361], "power": [11, 56, 58, 75, 77, 79, 111, 113, 119, 126, 138, 147, 148, 155, 156, 160, 167, 172, 174, 205, 206, 305, 306, 361], "grayplot": [11, 138, 147, 361], "plot_carpet": [11, 27, 138, 139, 143, 144, 147, 419], "adhd_dataset": [11, 61, 163], "fetch_adhd": [11, 61, 122, 147], "n_subject": [11, 23, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 75, 76, 77, 78, 79, 80, 81, 85, 89, 91, 92, 95, 99, 104, 105, 106, 122, 126, 147, 152, 161, 174, 179, 180, 181, 183, 187, 188, 208, 216, 217, 220, 226, 232, 241], "infer": [11, 49, 62, 65, 76, 79, 84, 100, 102, 111, 164, 166, 167, 259, 279, 297, 304, 325, 361], "often": [11, 30, 32, 35, 36, 43, 48, 86, 92, 94, 113, 153, 154, 155, 159, 164, 167, 169, 172, 173, 174, 254, 256, 257], "overwrit": [11, 56, 222, 224, 326, 328, 329], "particular": [11, 15, 33, 66, 87, 98, 114, 121, 142, 147, 149, 157, 159, 161, 169, 170, 172, 224, 242, 243, 244, 245, 254, 256, 257, 271, 302, 405], "field": [11, 44, 114, 135, 147, 164, 167, 172, 222, 242, 243, 244, 245, 249, 250, 265, 267, 297, 302, 303, 311, 314, 387, 404, 405], "explicit": [11, 48, 60, 72, 73, 110, 135, 141, 147, 162, 167, 169, 210, 224, 261, 264, 280, 294, 306, 375, 380], "0010042": 11, "0010042_rest_tshift_rpi_voreg_mni": 11, "build": [11, 18, 41, 46, 49, 50, 51, 58, 71, 100, 110, 112, 127, 145, 147, 150, 155, 157, 159, 164, 172, 174, 264, 387, 421], "mask_img": [11, 25, 29, 32, 33, 34, 35, 36, 39, 40, 41, 44, 49, 53, 54, 56, 58, 64, 66, 67, 70, 75, 89, 91, 92, 98, 102, 103, 113, 129, 133, 137, 138, 142, 147, 154, 159, 173, 174, 234, 246, 259, 264, 267, 277, 280, 281, 282, 288, 301, 309, 310, 311, 312, 313, 314, 315, 316, 323, 324, 359, 361, 370, 388, 389, 391, 392, 393, 394, 395, 396, 405], "compute_epi_mask": [11, 25, 70, 89, 173, 174, 242, 243, 244, 245, 249, 250, 311, 314, 387], "grai": [11, 38, 40, 41, 42, 43, 75, 89, 132, 147, 159, 166, 168, 226, 242, 243, 244, 245, 249, 250, 311, 314, 360, 361, 387, 405], "matter": [11, 24, 42, 43, 56, 66, 75, 89, 125, 138, 141, 147, 154, 159, 161, 162, 166, 168, 173, 174, 208, 212, 213, 226, 235, 236, 237, 238, 239, 242, 243, 244, 245, 249, 250, 305, 311, 314, 318, 321, 387, 405], "white": [11, 24, 40, 42, 56, 66, 75, 89, 123, 138, 140, 141, 147, 161, 173, 174, 208, 212, 226, 231, 236, 237, 238, 239, 242, 243, 244, 245, 249, 250, 305, 311, 314, 318, 321, 376, 377, 378, 379, 382, 383, 385, 387, 404, 405], "cerebrospin": [11, 56, 212, 305], "fluid": [11, 56, 212, 305], "icbm152": [11, 141, 147, 167, 212, 213, 236, 237, 239], "fetch_icbm152_2009": [11, 21, 75, 213, 237], "atlas_img": [11, 53], "gm": [11, 21, 89, 141, 147, 174, 212, 213, 242, 243, 244, 245, 249, 250, 311, 314, 318, 321, 387], "wm": [11, 21, 56, 89, 141, 147, 174, 212, 242, 243, 244, 245, 249, 250, 306, 311, 314, 318, 321, 387], "csf": [11, 21, 56, 208, 212, 305, 306], "map_label": 11, "atlas_data": [11, 20], "get_fdata": [11, 80, 135, 147, 172], "discrete_vers": 11, "argmax": 11, "max": [11, 30, 34, 42, 44, 49, 53, 55, 57, 58, 70, 80, 84, 88, 102, 103, 105, 111, 140, 147, 161, 179, 297, 298, 325, 329, 360, 361, 365, 367, 368, 370, 373, 374, 375, 376, 379, 382, 383, 385], "discrete_atlas_img": 11, "01_plot": [11, 140, 147, 367, 383], "61": [11, 33, 42, 43, 44, 68, 102], "subplot": [11, 12, 24, 38, 40, 41, 43, 44, 49, 51, 57, 63, 65, 66, 68, 70, 79, 80, 94, 100, 101, 105, 145, 147, 366, 376, 377, 378, 379], "figsiz": [11, 12, 18, 25, 30, 34, 35, 40, 42, 44, 48, 51, 57, 62, 63, 65, 66, 68, 72, 79, 91, 94, 99, 100, 101, 105, 106, 173, 372], "mask_label": [11, 361], "545": [11, 33, 44, 45, 84, 99, 109], "cast": [11, 84, 122, 135, 147, 174, 189, 295], "float32": [11, 33, 84, 174, 283, 292, 309, 310, 311, 312, 313, 314, 315], "aux": 11, "coerc": 11, "atlas_valu": 11, "780": [11, 27, 42, 102], "1050": [11, 27, 42, 102], "hcp": [12, 26, 111, 219], "workbench": 12, "cm": [12, 19, 20, 38, 41, 42, 44, 50, 53, 58, 102, 132, 147, 152, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 365, 371, 372, 373, 374, 375, 381, 382, 383, 385, 419], "_cmap_d": 12, "nilearn_cmap": 12, "nmap": 12, "outer": [12, 89, 405], "arang": [12, 22, 30, 32, 33, 34, 48, 51, 63, 66, 69, 71, 94, 108], "ones": [12, 33, 44, 63, 66, 75, 79, 81, 100, 103, 105, 106, 156, 157, 159, 161, 247, 248, 271, 325, 386], "subplots_adjust": [12, 25, 40, 44, 49, 57, 63, 68, 173], "bottom": [12, 15, 25, 40, 63, 68, 173, 372], "enumer": [12, 22, 30, 34, 40, 47, 48, 51, 57, 64, 65, 66, 68, 69, 71, 79, 94, 100, 101, 102, 103, 105], "imshow": [12, 38, 40, 41, 44, 84, 149, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 365, 367, 368, 370, 372, 373, 374, 375, 376, 379], "off": [12, 14, 38, 40, 41, 66, 112, 125, 145, 147, 161, 244, 245, 264, 277, 317, 318, 319, 321, 322, 373, 374, 375, 382, 399], "fontsiz": [12, 25, 40, 49, 63, 75, 78, 80, 105, 133, 135, 147, 173, 326, 328, 329, 381, 383, 384, 385], "va": 12, "rotat": [12, 32, 63, 84, 94, 174, 305], "deprecated_cmap": 12, "vega10": 12, "vega20": 12, "vega20b": 12, "vega20c": 12, "spectral": [12, 23, 111, 192], "m_cmap": 12, "m": [12, 30, 37, 40, 41, 49, 64, 66, 67, 71, 75, 100, 102, 111, 125, 147, 159, 160, 162, 170, 189, 193, 198, 199, 200, 202, 203, 205, 206, 209, 211, 219, 227, 231, 254, 256, 257, 279, 325, 420], "datad": 12, "endswith": 12, "_r": 12, "append": [12, 22, 33, 34, 40, 41, 44, 50, 51, 53, 64, 71, 100, 103, 107, 108, 152, 170], "sort": [12, 21, 30, 35, 42, 43, 62, 113, 140, 147, 170, 172, 209, 228, 241, 277, 279, 292, 325], "get_cmap": 12, "aspect": [12, 40, 131, 147, 157, 161, 174, 264, 277, 305, 399], "auto": [12, 125, 140, 147, 174, 249, 250, 292, 309, 310, 311, 312, 313, 314, 315, 327, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 356, 360, 362, 365, 367, 368, 370, 371, 373, 374, 375, 376, 378, 379, 381, 382, 384, 405], "274": [12, 27, 33, 41], "plot_colormap": [12, 27], "_projector": [13, 14, 16, 47, 50, 51, 52, 58, 142, 147], "orthoprojector": [13, 14, 16, 47, 50, 51, 52, 58, 142, 147, 354], "0x7fdb600b44f0": 13, "On": [13, 36, 49, 52, 53, 56, 58, 62, 66, 69, 75, 77, 111, 133, 147, 149, 161, 169, 173, 174, 180, 183], "xz": [13, 14, 15, 49, 264, 277, 344, 345, 354, 355, 360, 362, 365, 367, 368, 371, 373, 374, 375, 399, 419], "xzprojector": [13, 14, 348, 350, 354], "0x7fdb58065b20": 13, "lyrz": [13, 14, 58, 264, 277, 333, 354, 362, 367, 371, 399, 419], "471": [13, 27, 33], "plot_demo_glass_brain": [13, 27], "part": [14, 15, 49, 51, 55, 69, 89, 91, 111, 135, 141, 144, 145, 147, 155, 161, 162, 163, 168, 173, 179, 185, 186, 195, 196, 212, 217, 242, 243, 244, 245, 249, 250, 279, 280, 301, 302, 303, 305, 311, 314, 317, 318, 319, 321, 322, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 372, 387], "through": [14, 31, 39, 42, 48, 51, 56, 64, 75, 91, 100, 139, 140, 142, 145, 147, 148, 154, 155, 156, 159, 162, 167, 169, 222, 226, 244, 245, 264, 277, 279, 305, 306, 309, 312, 321, 326, 328, 329, 331, 332, 333, 334, 335, 342, 344, 346, 348, 350, 352, 386, 397, 405], "includ": [14, 37, 39, 42, 43, 54, 58, 63, 66, 70, 77, 79, 80, 91, 100, 101, 105, 108, 118, 125, 135, 137, 138, 142, 144, 147, 152, 154, 159, 160, 162, 163, 167, 168, 169, 170, 172, 178, 179, 186, 189, 190, 191, 198, 199, 208, 213, 227, 234, 235, 238, 251, 255, 264, 277, 279, 289, 303, 304, 305, 311, 314, 317, 318, 319, 321, 322, 325, 362, 398, 409, 414], "neg": [14, 17, 42, 51, 58, 66, 77, 79, 80, 90, 102, 106, 111, 139, 142, 147, 159, 164, 167, 187, 219, 248, 279, 280, 297, 301, 325, 367, 375, 379, 405, 419], "ortho": [14, 15, 62, 264, 277, 337, 338, 354, 355, 360, 362, 365, 367, 368, 371, 373, 374, 375, 399, 419], "equival": [14, 81, 105, 145, 147, 159, 161, 164, 170, 217, 242, 243, 244, 245, 249, 250, 293, 311, 312, 313, 314, 317, 318, 319, 321, 322, 380, 387], "sagitt": [14, 94, 264, 277, 334, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 360, 362, 365, 367, 368, 371, 373, 374, 375, 399], "cut": [14, 49, 66, 94, 120, 130, 132, 133, 144, 147, 168, 264, 277, 318, 321, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 360, 362, 365, 367, 368, 371, 373, 374, 375, 382, 399, 419], "0x7fdb3d9e8d60": 14, "produc": [14, 24, 46, 59, 62, 64, 79, 100, 105, 110, 142, 144, 147, 164, 167, 174, 208, 240, 306, 308, 309, 310, 311, 312, 313, 314, 315, 338, 375, 389, 405, 419], "0x7fdb581d89d0": 14, "black": [14, 40, 104, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 362, 365, 367, 368, 371, 373, 374, 375, 382, 383, 385], "0x7fdb49d44760": 14, "sign": [14, 42, 102, 103, 159, 172, 247, 248, 281, 301, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 367, 373, 381, 383, 385], "addition": [14, 15, 58, 70, 141, 147, 162, 166, 170, 173, 174, 325], "coron": [14, 94, 264, 277, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 360, 362, 365, 367, 368, 371, 373, 374, 375, 399], "yz": [14, 15, 31, 39, 264, 277, 350, 351, 354, 355, 360, 362, 365, 367, 368, 371, 373, 374, 375, 399, 419], "yzprojector": [14, 344, 348, 354], "0x7fdb4b479e80": 14, "yx": [14, 15, 113, 264, 277, 348, 349, 354, 355, 360, 362, 365, 367, 368, 371, 373, 374, 375, 399, 419], "yxprojector": [14, 344, 350, 354], "0x7fdb4aa5d040": 14, "saw": 14, "lzr": [14, 53, 264, 277, 334, 354, 362, 367, 371, 399, 419], "enabl": [14, 79, 104, 138, 142, 147, 154, 157, 168, 174, 305, 330, 331, 332, 333, 334, 335, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 420], "lzrprojector": [14, 332, 354], "0x7fdb49eff670": 14, "lyrzprojector": [14, 335, 354], "0x7fdb4b4209d0": 14, "xprojector": [14, 346, 352, 354], "yprojector": [14, 342, 352, 354], "zprojector": [14, 342, 346, 354], "l": [14, 37, 41, 51, 56, 70, 71, 76, 94, 111, 135, 142, 147, 155, 160, 187, 189, 199, 200, 202, 203, 205, 206, 207, 211, 219, 226, 264, 277, 305, 306, 326, 328, 329, 330, 331, 332, 333, 334, 335, 354, 362, 367, 371, 399, 419], "lprojector": [14, 340, 354], "rprojector": [14, 330, 354], "0x7fdb4ba403a0": 14, "inherit": [14, 255, 397], "customis": [14, 56, 149, 306], "focu": [14, 79, 149, 151, 161, 389], "add_contour": [14, 18, 128, 135, 147, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 419], "lzryprojector": [14, 333, 354], "sinc": [14, 19, 33, 39, 58, 64, 66, 75, 77, 81, 101, 108, 113, 140, 145, 147, 161, 164, 189, 195, 196, 228, 302, 303, 325, 329, 419], "empti": [14, 102, 108, 114, 135, 143, 147, 162, 195, 196, 211, 242, 243, 244, 245, 302, 359, 372], "lzry": [14, 264, 277, 335, 354, 362, 367, 371, 399, 419], "choos": [14, 15, 24, 33, 34, 44, 47, 87, 157, 158, 164, 174, 242, 243, 244, 245, 264, 277, 306, 360, 362, 365, 367, 368, 371, 373, 374, 375, 386, 387, 399, 405, 421], "red": [14, 15, 18, 40, 51, 133, 147, 163, 164, 167, 419], "demonstr": [14, 39, 40, 56, 62, 65, 94, 104, 143, 147, 153, 154, 325, 419], "insid": [14, 21, 24, 34, 49, 55, 98, 157, 282, 288, 302, 311, 314, 361, 373, 374, 377, 378, 386, 405], "kei": [14, 43, 54, 58, 66, 79, 113, 114, 149, 162, 169, 172, 189, 190, 191, 192, 195, 196, 203, 212, 218, 222, 242, 243, 244, 245, 251, 255, 260, 264, 271, 273, 277, 279, 303, 304, 325, 336, 361, 370, 383], "vari": [14, 34, 66, 94, 95, 141, 147, 151, 157, 161, 169, 180, 181, 183, 283], "lr": [14, 264, 277, 331, 354, 362, 367, 371, 399, 419], "lrprojector": [14, 354], "ad": [14, 15, 20, 21, 30, 40, 68, 69, 84, 128, 129, 139, 141, 142, 143, 144, 145, 147, 157, 161, 162, 163, 170, 198, 199, 242, 243, 244, 245, 247, 248, 279, 286, 297, 301, 303, 304, 305, 308, 309, 310, 311, 312, 313, 314, 315, 325, 326, 328, 329, 360, 361, 362, 365, 367, 368, 371, 373, 374, 375, 382, 389, 421], "chang": [14, 19, 40, 42, 51, 62, 68, 102, 105, 106, 116, 155, 157, 161, 162, 164, 170, 171, 231, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 264, 272, 277, 280, 291, 295, 297, 300, 301, 309, 310, 311, 312, 313, 314, 315, 316, 325, 376, 378, 379, 385, 392, 395, 398, 401, 418, 420, 421], "lyr": [14, 264, 277, 332, 354, 362, 367, 371, 399, 419], "lyrprojector": [14, 334, 354], "draw": [14, 15, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 364, 405], "thick": [14, 47, 140, 147, 203, 231, 373, 374, 376, 379, 385, 403, 405], "width": [14, 32, 51, 66, 94, 167, 174, 242, 243, 244, 245, 249, 250, 264, 277, 279, 299, 309, 310, 311, 312, 313, 314, 315, 316, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 365, 367, 368, 371, 372, 373, 374, 375, 381, 387, 389, 391, 397, 399], "linewidth": [14, 18, 21, 42, 43, 48, 50, 91, 373, 374, 381], "enough": [14, 58, 154, 161, 169, 174, 297], "unlik": [14, 20, 159, 164, 172, 306], "upper": [14, 40, 161, 254, 256, 257, 319, 322, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 365, 367, 368, 370, 371, 373, 374, 375, 376, 379, 383, 385], "bound": [14, 84, 89, 128, 135, 147, 173, 249, 297, 326, 328, 329, 360, 361, 365, 367, 368, 370, 371, 373, 374, 375, 376, 379, 383, 385], "kept": [14, 114, 185, 195, 196, 242, 243, 244, 245, 281, 282, 299, 301, 317, 318, 319, 320, 321, 322, 323, 389, 391, 401], "infin": 14, "inf": [14, 54, 103, 282, 310, 313, 316, 319, 401], "873": [14, 27], "plot_demo_glass_brain_extens": [14, 27, 367], "techniqu": [15, 44, 111, 152, 153, 154, 155, 156, 157, 161, 167, 169, 174, 389], "essenti": [15, 68, 80, 167], "what": [15, 56, 66, 108, 143, 155, 161, 165, 170, 172, 174, 180, 251, 255, 288, 302, 402, 419, 421], "shown": [15, 21, 40, 54, 66, 70, 94, 114, 140, 147, 148, 153, 154, 163, 164, 200, 306, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 370, 371, 374, 381, 383, 385], "subclass": [15, 355], "implement": [15, 48, 49, 56, 62, 66, 68, 98, 120, 127, 129, 135, 138, 139, 142, 143, 147, 148, 151, 152, 153, 155, 157, 159, 160, 161, 162, 167, 169, 170, 175, 195, 196, 242, 243, 246, 247, 248, 252, 254, 259, 264, 266, 268, 269, 270, 271, 274, 275, 276, 277, 279, 288, 305, 306, 325, 326, 327, 329, 339, 376, 378, 379, 389, 401, 402], "interact": [15, 22, 47, 52, 54, 58, 100, 132, 133, 137, 142, 147, 150, 152, 162, 167, 168, 169, 381, 382, 384, 421], "precis": [15, 41, 52, 57, 91, 148, 151, 152, 161, 169, 174, 179, 180, 181, 183, 184, 217, 242, 244, 254, 256, 257, 279, 325], "overlai": [15, 20, 21, 50, 152, 173, 382, 421], "tile": [15, 133, 147, 341, 355, 360, 365, 368, 373, 374, 375, 419], "mosaic": [15, 139, 147, 336, 355, 360, 365, 368, 373, 374, 375, 419], "wherea": [15, 49, 141, 147, 151, 155, 173, 320, 322, 323, 387], "mni": [15, 48, 52, 54, 66, 69, 93, 101, 108, 111, 114, 125, 135, 138, 144, 147, 149, 166, 167, 169, 173, 174, 189, 191, 197, 205, 206, 207, 212, 236, 237, 239, 242, 243, 244, 245, 284, 315, 318, 321, 360, 362, 365, 367, 368, 373, 374, 375, 381, 382, 384, 419], "accordingli": [15, 142, 147, 302], "help": [15, 33, 58, 67, 94, 128, 132, 133, 147, 149, 155, 163, 174, 183, 420, 421], "haxby_anat_filenam": [15, 16], "haxby_mask_filenam": [15, 16], "haxby_func_filenam": [15, 16], "local": [15, 40, 41, 49, 60, 65, 66, 73, 76, 77, 79, 80, 81, 88, 90, 93, 97, 100, 101, 103, 107, 108, 109, 110, 111, 135, 136, 144, 147, 162, 164, 167, 170, 172, 174, 195, 196, 199, 204, 214, 215, 216, 217, 218, 221, 222, 224, 246, 287, 299, 302, 308, 314, 325, 353, 366, 367, 375, 380], "xyz": [15, 296, 336, 341, 343, 347, 353], "integ": [15, 84, 94, 122, 126, 135, 139, 142, 144, 147, 167, 172, 174, 181, 183, 187, 189, 191, 193, 195, 196, 198, 199, 202, 203, 222, 224, 247, 248, 249, 250, 264, 283, 317, 318, 319, 321, 322, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 365, 367, 368, 373, 374, 375, 377, 378, 390, 395, 396], "0x7fdb58425ac0": 15, "zslicer": [15, 70, 88, 343, 347, 355], "rather": [15, 54, 66, 94, 100, 114, 125, 127, 129, 131, 135, 140, 142, 147, 148, 161, 162, 172, 173, 180, 189, 222, 224, 249, 250, 279, 310, 313, 398], "impli": [15, 139, 147, 161, 179, 297, 316], "maximum": [15, 66, 79, 89, 92, 94, 104, 135, 147, 159, 167, 174, 179, 180, 181, 183, 188, 195, 196, 222, 232, 242, 243, 244, 245, 249, 250, 251, 252, 255, 264, 273, 277, 279, 281, 299, 301, 309, 310, 311, 312, 313, 314, 315, 316, 329, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 367, 387, 389, 391, 392, 419], "0x7fdb582785e0": 15, "0x7fdb4ab7e820": 15, "yslicer": [15, 92, 343, 353, 355], "again": [15, 49, 91, 103, 113, 166, 169, 222, 224], "0x7fdb4776efa0": 15, "0x7fdb4b7c8250": 15, "stand": [15, 44, 135, 147, 167, 173, 419], "thu": [15, 31, 34, 39, 102, 104, 149, 154, 155, 156, 159, 160, 161, 167, 173, 174, 244, 245, 246, 247, 248, 252, 286, 306, 325], "xzslicer": [15, 49, 349, 351, 355], "0x7fdb5819bbe0": 15, "similarli": [15, 55, 94, 172], "yxslicer": [15, 345, 351], "assign": [15, 86, 94, 151, 152, 164, 195, 196, 205, 207, 389, 390, 394], "0x7fdb4b29dee0": 15, "yzslicer": [15, 39, 345, 349, 355], "0x7fdb581d8610": 15, "case": [15, 23, 34, 40, 43, 48, 49, 50, 54, 62, 65, 66, 68, 72, 84, 89, 91, 92, 100, 101, 108, 114, 125, 135, 138, 147, 148, 149, 151, 154, 155, 159, 161, 169, 170, 172, 186, 189, 193, 195, 196, 242, 243, 244, 245, 247, 248, 264, 266, 271, 277, 279, 280, 289, 297, 298, 299, 300, 303, 311, 312, 313, 314, 315, 319, 357, 360, 361, 362, 365, 367, 368, 370, 373, 374, 375, 382, 398, 405, 419], "tiledslic": [15, 336, 338, 355], "0x7fdb4bb615e0": 15, "situat": [15, 58, 148, 154, 155, 172, 299], "mosaicslic": [15, 338, 341, 355], "0x7fdb4ab79940": 15, "still": [15, 49, 66, 79, 91, 114, 142, 147, 159, 161, 170, 174, 222, 419], "0x7fdb477a1040": 15, "tupl": [15, 174, 190, 197, 232, 242, 243, 244, 245, 247, 248, 249, 250, 254, 256, 257, 264, 267, 277, 286, 294, 297, 299, 302, 305, 311, 314, 317, 319, 320, 322, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 365, 368, 372, 373, 374, 375, 382, 387, 392, 401, 404, 405], "0x7fdb49d72730": 15, "interpret": [15, 51, 70, 111, 150, 159, 160, 161, 164, 189, 193, 195, 196, 199, 200, 203, 293, 325, 419, 421], "process": [15, 16, 32, 36, 39, 42, 44, 50, 53, 62, 91, 94, 101, 102, 105, 111, 112, 113, 120, 147, 149, 152, 153, 154, 157, 161, 162, 164, 166, 167, 169, 170, 172, 173, 174, 180, 197, 212, 213, 217, 242, 243, 244, 245, 247, 248, 249, 250, 264, 277, 282, 283, 288, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 387, 388, 389, 395, 396, 401], "dimens": [15, 21, 29, 33, 34, 40, 47, 49, 66, 94, 113, 140, 147, 158, 164, 167, 173, 174, 185, 186, 194, 219, 226, 242, 243, 244, 245, 249, 250, 252, 254, 256, 257, 264, 279, 282, 283, 289, 290, 293, 294, 299, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 358, 372, 373, 387, 389, 401, 421], "mean_haxby_img": [15, 16], "coregistr": [15, 124, 147, 167], "edg": [15, 47, 52, 54, 58, 94, 135, 147, 148, 149, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 362, 372, 381, 421], "being": [15, 89, 94, 132, 135, 142, 147, 148, 161, 164, 167, 170, 249, 271, 304, 310, 313, 320, 322, 361, 376, 378, 379, 389], "outlin": [15, 48, 89, 92, 153, 162, 377, 419], "manual": [15, 16, 19, 32, 34, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 62, 70, 81, 83, 89, 91, 92, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 113, 148, 154, 169, 171, 174, 198, 199, 211, 249, 250, 287, 292, 294, 295, 299, 308, 312, 365, 374, 375, 380, 419, 421], "34": [15, 33, 42, 43, 44, 53, 59, 62, 91, 102, 111, 159], "blue": [15, 18, 40, 49, 70, 86], "fill": [15, 21, 62, 68, 94, 101, 108, 127, 135, 141, 147, 161, 174, 297, 298, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 373, 374, 397, 421], "transpar": [15, 23, 135, 147, 174, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 362, 367, 368, 370, 371, 373, 374, 375, 376, 379, 381, 382, 383, 384, 385], "contourf": [15, 21, 48, 50, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "sphere": [15, 36, 37, 46, 55, 59, 110, 137, 140, 147, 158, 174, 179, 205, 206, 208, 231, 308, 315, 357, 362, 371, 372, 376, 377, 378, 379, 380, 381, 385, 404, 405, 419, 421], "marker_color": [15, 40, 55, 61, 100, 133, 135, 147, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 384, 419], "yellow": 15, "third": [15, 66, 81, 152, 273], "marker_s": [15, 40, 55, 61, 100, 133, 135, 147, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 384, 419], "coord": [15, 37, 40, 50, 52, 54, 58, 70, 87, 100, 133, 135, 147, 152, 326, 328, 329, 357, 358, 362, 376, 377, 378, 379, 385, 419], "alter": [15, 139, 147], "bar": [15, 42, 102, 105, 132, 147, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 421], "scalebar": [15, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 419], "scale_": 15, "keyword": [15, 62, 98, 114, 135, 147, 157, 161, 174, 181, 187, 222, 233, 293, 306, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 366, 368, 370, 372, 378, 379, 383], "arg": [15, 242, 243, 244, 245, 308], "scale_s": [15, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "scale_unit": [15, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "built": [15, 33, 42, 48, 164, 170, 387], "extens": [15, 127, 141, 147, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379], "pdf": [15, 55, 68, 102, 111, 144, 147, 159, 160, 192, 193, 199, 200, 202, 205, 211, 219, 226, 231, 282, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 401], "svg": [15, 62, 304, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379], "plot_stat_map_from_displai": 15, "sure": [15, 94, 110, 145, 147, 159, 162, 170, 247, 248, 420], "close": [15, 23, 37, 40, 49, 86, 142, 147, 148, 155, 161, 162, 164, 167, 213, 242, 243, 244, 245, 317, 318, 319, 321, 322, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 394, 419], "59": [15, 27, 33, 36, 42, 43, 44, 45, 47, 49, 54, 59, 72, 82, 91, 100, 102, 111, 115, 147, 190, 305, 306], "472": [15, 27, 33], "916": [15, 18, 29, 34, 36, 37, 45, 98], "plot_demo_more_plot": [15, 27], "easi": [16, 61, 69, 75, 94, 113, 114, 152, 153, 155, 158, 162, 163, 167, 169, 174, 305, 421], "coordin": [16, 19, 22, 23, 40, 49, 52, 54, 70, 94, 100, 111, 113, 119, 124, 127, 129, 130, 132, 138, 142, 144, 147, 150, 152, 161, 163, 164, 174, 197, 205, 206, 207, 231, 250, 284, 297, 315, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 358, 359, 360, 361, 362, 365, 367, 368, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 384, 385, 398, 404, 405, 419, 421], "0x7fdb58287c70": 16, "web": [16, 111, 114, 132, 135, 147, 162, 222, 224, 264, 277, 381, 383, 384, 385, 399, 419], "alwai": [16, 100, 154, 157, 161, 162, 164, 174, 248, 254, 256, 257, 305, 367, 375, 379, 382, 383, 385, 419], "fix": [16, 30, 43, 48, 58, 60, 64, 71, 73, 92, 110, 117, 161, 162, 170, 173, 210, 251, 252, 255, 261, 264, 267, 294, 375, 380], "0x7fdb58104190": 16, "0x7fdb59bcd610": 16, "overlaid": [16, 71, 89, 92, 138, 140, 147, 373], "0x7fdb5829db20": 16, "voxel_wis": 16, "reduc": [16, 29, 33, 34, 44, 49, 66, 79, 87, 94, 100, 131, 132, 135, 139, 147, 156, 160, 161, 162, 167, 174, 181, 226, 244, 245, 249, 250, 305, 306, 309, 312, 376, 378, 379, 386, 387, 388, 392], "0x7fdb4b3370d0": 16, "ie": [16, 144, 147, 148, 153, 172, 254, 256, 257, 310, 313, 315], "631": [16, 27, 33], "888": [16, 45], "plot_demo_plot": [16, 27], "modifi": [17, 49, 94, 103, 125, 142, 147, 162, 174, 222, 224, 297, 298, 301, 400, 401], "leav": [17, 29, 33, 154, 159, 286], "unchang": [17, 66, 159], "localizer_dataset": [17, 77, 81, 105, 106], "fetch_localizer_button_task": [17, 125, 147, 216, 217, 419], "localizer_tmap_filenam": 17, "tmap": [17, 79, 215, 217, 419], "localizer_anat_filenam": 17, "0x7fdb4b3ac7c0": 17, "0x7fdb4b7c86a0": 17, "0x7fdb4a9c4370": 17, "426": [17, 27, 33], "plot_dim_plot": [17, 27], "kwarg": [18, 135, 147, 187, 306, 308, 321, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 362, 365, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382], "func_filenam": [18, 25, 30, 31, 32, 33, 35, 48, 50, 53, 55, 58, 91, 92, 102, 104, 152, 173], "z_slice": [18, 42, 105, 106], "facecolor": [18, 32, 40, 42, 106, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 362, 365, 367, 368, 371, 373, 374, 375], "mask_vt_filenam": [18, 94], "mask_house_filenam": 18, "mask_hous": [18, 32, 113, 172, 211], "mask_face_filenam": 18, "mask_fac": [18, 32, 113, 172, 211], "antialias": 18, "limegreen": 18, "trick": [18, 169], "http": [18, 22, 23, 34, 49, 56, 62, 64, 67, 71, 72, 98, 101, 102, 103, 111, 114, 140, 144, 147, 152, 155, 156, 159, 160, 161, 162, 164, 169, 170, 180, 183, 187, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 237, 242, 243, 244, 245, 249, 250, 251, 255, 256, 257, 279, 282, 305, 306, 325, 361, 367, 383, 384, 387, 388, 389, 394, 401, 402, 419, 420], "sourceforg": 18, "net": [18, 28, 44, 45, 110, 160, 226, 242, 243, 247, 248, 375, 380], "user": [18, 29, 34, 39, 58, 66, 68, 100, 106, 114, 129, 132, 133, 135, 136, 140, 142, 143, 144, 145, 147, 161, 162, 163, 164, 167, 168, 170, 171, 174, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 410, 411, 420], "legend_guid": 18, "httpml": 18, "proxi": 18, "artist": 18, "patch": [18, 40, 41, 49, 170], "rectangl": [18, 40, 49, 84], "p_v": 18, "fc": 18, "p_h": 18, "p_f": 18, "face": [18, 28, 32, 33, 38, 45, 71, 94, 97, 98, 100, 109, 110, 111, 113, 127, 140, 147, 154, 159, 163, 168, 172, 173, 174, 211, 212, 230, 242, 244, 246, 287, 289, 292, 294, 295, 308, 314, 325, 353, 368, 375, 376, 377, 378, 379, 380, 382, 385, 404, 405], "337": [18, 27, 33, 41, 89], "plot_haxby_mask": [18, 27], "fetch_atlas_basc_multiscale_2015": [19, 123, 147], "sym": [19, 186, 191], "197": [19, 31, 32, 33, 39, 41, 77, 82, 93, 191, 289], "444": [19, 33, 191], "networks_64": 19, "scale064": [19, 191], "networks_197": 19, "scale197": [19, 191], "networks_444": 19, "scale444": [19, 191], "itself": [19, 34, 66, 151, 179, 180, 181, 249, 250, 287, 387, 405], "bwr": [19, 53, 133, 147, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 381], "bwr_r": 19, "633": [19, 27, 33], "141": [19, 33, 41, 119, 147, 202], "plot_multiscale_parcel": [19, 27], "compos": [20, 98, 167, 173, 174, 206, 242, 243, 244, 245], "node": [20, 23, 24, 58, 108, 133, 135, 138, 140, 147, 149, 174, 198, 231, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 370, 371, 381, 383, 384, 405, 419], "constitut": [20, 153], "leverag": [20, 138, 147, 168, 169, 242, 243, 387, 420], "less": [20, 48, 49, 50, 56, 66, 69, 77, 79, 88, 94, 100, 114, 132, 133, 140, 147, 159, 161, 162, 164, 170, 255, 356, 421], "fetch_atlas_msdl": [20, 21, 51, 52, 53, 54, 99, 124, 147, 149], "atlas_filenam": [20, 52, 54, 56, 149], "pcc": [20, 23, 51, 55], "dmn": [20, 51, 61], "acc": 20, "pariet": [20, 58, 91, 103, 197], "black_blu": 20, "black_green": 20, "black_pink": 20, "ma": [20, 21, 36, 40, 48, 50, 54, 64, 106], "2826": [20, 21, 48, 50, 54, 140, 147], "element": [20, 21, 48, 49, 50, 54, 125, 144, 147, 153, 159, 167, 179, 185, 186, 189, 242, 243, 244, 245, 246, 282, 299, 308, 309, 310, 311, 312, 313, 314, 315, 321, 370, 389, 395, 401, 405], "nan": [20, 21, 48, 50, 54, 56, 91, 94, 103, 118, 122, 127, 135, 139, 147, 226, 282, 297, 310, 313, 316, 319, 401, 405], "_data": [20, 21], "3rd": [20, 367, 368, 374, 375, 382], "4th": [20, 94, 111, 160, 167, 173, 256, 257, 294, 297, 373], "5th": 20, "6th": 20, "dmn_node": 20, "40": [20, 33, 36, 42, 43, 44, 53, 63, 91, 94, 102, 105, 188, 197, 222, 405], "35": [20, 33, 36, 42, 43, 44, 53, 72, 91, 102, 105, 115, 147, 197, 222], "55": [20, 33, 36, 38, 41, 42, 43, 44, 45, 68, 102, 105, 125, 147], "29": [20, 33, 36, 42, 43, 62, 72, 75, 81, 91, 102, 103, 120, 147], "711": [20, 27, 33], "341": [20, 27, 33, 41, 111, 305], "plot_overlai": [20, 27], "delin": 21, "filled_contour": [21, 50, 152, 373], "continu": [21, 39, 43, 54, 56, 149, 154, 155, 156, 160, 162, 167, 174, 222, 292, 296, 297, 298, 309, 310, 311, 312, 313, 314, 315, 367, 368, 373, 374, 375, 382, 390, 391], "plot_prob_atla": [21, 27, 48, 50, 87, 88, 122, 129, 130, 139, 147, 152, 153, 374, 419], "pick": [21, 152, 161, 164, 167, 213], "randomli": [21, 159], "alreadi": [21, 22, 33, 34, 49, 64, 89, 94, 101, 103, 107, 108, 114, 135, 142, 147, 152, 154, 155, 162, 169, 174, 222, 224, 277, 279, 298, 325, 389], "know": [21, 84, 114, 161, 164, 167, 186, 224], "tune": [21, 31, 32, 34, 39, 43, 89, 126, 147, 149, 154, 155, 157, 161, 164, 249, 250, 305, 311, 314, 387, 419], "readi": [21, 61, 75, 113, 126, 147, 153, 162, 170], "harvard": [21, 91, 149, 195, 203, 357, 358], "oxford": [21, 91, 111, 149, 195, 256, 257, 357, 358], "atlasf": 21, "harvard_oxford": 21, "prob": [21, 195, 196, 198, 373], "harvard_oxford_sub": 21, "sub": [21, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 78, 85, 91, 92, 95, 100, 101, 104, 108, 140, 147, 195, 196, 264, 277, 302, 399], "multi": [21, 28, 41, 42, 43, 45, 46, 48, 58, 59, 100, 110, 111, 148, 149, 150, 152, 158, 161, 169, 172, 173, 174, 175, 180, 181, 183, 191, 197, 208, 211, 230, 249, 264, 308, 311, 313, 314, 358, 362, 372, 380, 421], "dictionari": [21, 23, 33, 46, 59, 66, 69, 101, 104, 108, 110, 111, 114, 139, 147, 150, 154, 155, 167, 168, 174, 179, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 242, 243, 244, 245, 249, 250, 264, 277, 279, 289, 290, 303, 304, 308, 313, 325, 336, 338, 358, 359, 360, 361, 362, 370, 372, 373, 375, 380, 383, 389, 421], "ica": [21, 46, 50, 54, 59, 87, 92, 97, 104, 109, 110, 111, 114, 120, 147, 149, 150, 167, 168, 169, 178, 190, 200, 208, 219, 222, 234, 249, 250, 290, 299, 305, 306, 308, 313, 314, 373, 375, 380, 393, 419, 421], "icbm": [21, 66, 75, 132, 147, 212], "tissu": [21, 167, 202], "allen": [21, 111, 127, 147, 190], "fetch_atlas_allen_2011": [21, 127, 147], "pauli": [21, 111, 198], "subcort": [21, 111, 132, 147, 195, 196, 198, 207], "subcortex": [21, 111, 207], "fetch_atlas_pauli_2017": [21, 132, 135, 147], "difumo": [21, 47, 139, 147, 194], "fetch_atlas_difumo": [21, 47, 139, 147], "resolution_mm": [21, 47, 194, 199], "atlas_typ": 21, "smith2009": 21, "rsn20": [21, 200], "70": [21, 30, 32, 33, 36, 42, 43, 44, 63, 102, 105, 111, 159, 200], "rsn70": [21, 200], "brainmap": [21, 200], "bm20": [21, 200], "bm70": [21, 200], "allen2011": 21, "rsn28": [21, 190], "pauli2017": 21, "resolut": [21, 75, 76, 93, 111, 113, 128, 140, 141, 145, 147, 152, 171, 189, 194, 198, 199, 208, 231, 234, 235, 236, 237, 238, 239, 259, 314, 318, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 370, 383, 389, 421], "item": [21, 64, 65, 66, 69, 71, 100, 105, 114, 222, 223, 224, 225, 267, 311, 320, 322], "bm10": [21, 200], "47": [21, 27, 33, 36, 42, 43, 91, 98, 102, 111, 187, 192, 193, 212, 237], "618": [21, 27, 33], "1116": [21, 27], "2010": [22, 23, 48, 58, 102, 111, 127, 147, 148, 153, 155, 179, 180, 191, 201, 205, 212, 237, 249], "plot_surf_roi": [22, 23, 127, 129, 131, 135, 139, 147, 376, 419], "pial": [22, 23, 24, 37, 138, 144, 147, 231, 370, 376, 377, 378, 379, 383, 385, 404, 405], "gyri": [22, 23, 111, 201], "sulci": [22, 23, 111, 201], "nomenclatur": [22, 23, 111, 201], "53": [22, 23, 33, 36, 42, 43, 44, 61, 91, 93, 102, 103, 109, 111, 190, 191, 201], "url": [22, 23, 62, 111, 136, 144, 147, 155, 156, 159, 160, 180, 183, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 211, 212, 215, 216, 217, 219, 220, 221, 222, 224, 226, 227, 228, 231, 232, 237, 241, 244, 245, 251, 255, 256, 257, 279, 282, 305, 306, 325, 361, 388, 389, 394, 401, 402], "dx": [22, 23, 71], "doi": [22, 23, 56, 71, 72, 76, 111, 114, 155, 156, 159, 160, 179, 187, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 211, 212, 217, 219, 220, 221, 222, 224, 226, 227, 231, 232, 237, 244, 245, 259, 279, 282, 305, 306, 325, 361, 388, 394, 401, 402], "org": [22, 23, 34, 36, 49, 52, 53, 56, 58, 62, 71, 72, 75, 77, 98, 111, 114, 156, 159, 160, 161, 164, 169, 170, 180, 183, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 231, 232, 237, 242, 243, 244, 245, 279, 282, 305, 306, 325, 361, 384, 388, 394, 401, 402], "1016": [22, 23, 56, 76, 111, 155, 156, 159, 160, 191, 193, 194, 197, 201, 206, 207, 212, 217, 220, 221, 237, 244, 245, 256, 257, 259, 279, 305, 306, 325, 361, 402], "06": [22, 23, 30, 32, 33, 36, 91, 96, 111, 191, 201, 246, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 375, 382], "010": [22, 23, 41, 111, 201], "map_left": [22, 23, 201, 419], "inflat": [22, 23, 37, 69, 231, 370, 376, 377, 378, 379, 383, 385, 404, 405], "sulcal": [22, 23, 111, 193, 231, 376, 378, 379, 383, 385], "depth": [22, 23, 24, 111, 138, 147, 193, 231, 376, 378, 379, 383, 385, 405], "shade": [22, 376, 378, 379, 385], "pial_left": [22, 23, 69, 108, 231, 370, 383, 405], "infl_left": [22, 23, 69, 108, 231, 370, 383, 419], "sulc_left": [22, 23, 69, 108, 231, 370, 383], "gii": [22, 23, 305, 306, 376, 377, 378, 379, 385, 403, 404, 405], "roi_map": [22, 23, 377, 378], "bg_on_data": [22, 23, 376, 378, 379], "dark": [22, 23, 376, 378, 379], "400x400": [22, 23], "posterior": [22, 23, 55, 58, 61, 91, 103, 129, 147, 163, 205, 207, 376, 378, 379], "convent": [22, 72, 144, 147, 162, 170, 240, 300, 302, 303, 360, 365, 367, 375, 386, 388], "vertic": [22, 37, 41, 66, 72, 80, 127, 147, 148, 217, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 376, 377, 378, 379, 385], "vert": 22, "map_": 22, "rr": 22, "load_surf_mesh": [22, 37, 127, 144, 147, 419], "pial_": [22, 37], "unknown": [22, 56, 91, 154, 189, 190, 203], "str": [22, 77, 79, 100, 141, 147, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 240, 241, 242, 243, 244, 245, 247, 248, 264, 266, 267, 271, 277, 278, 279, 281, 282, 293, 297, 298, 301, 302, 303, 304, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 392, 395, 397, 401, 403, 404, 405], "omit": 22, "synthet": [22, 57, 84, 162], "n_parcel": [22, 49, 387], "corr": [22, 369], "n_parcels_hemi": 22, "plot_connectom": [22, 47, 50, 51, 52, 53, 54, 58, 116, 118, 124, 125, 130, 133, 135, 144, 145, 147, 149, 152, 381, 384, 419], "edge_threshold": [22, 47, 50, 53, 54, 58, 133, 135, 147, 152, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 381, 419], "gist_ncar": [22, 131, 147, 361, 374, 378, 419], "view_connectom": [22, 52, 54, 58, 132, 133, 135, 140, 147, 382, 384, 419], "214": [22, 27, 33, 41], "plot_surf_atla": [22, 27], "subset": [23, 36, 44, 94, 155, 159, 162, 241, 254, 289, 305], "enhanc": [23, 64, 66, 67, 68, 111, 167, 170, 232, 252, 279, 325], "nki": [23, 111, 127, 147, 232], "rockland": [23, 111, 232], "fcon_1000": [23, 188, 232], "nitrc": [23, 188, 192, 200, 232], "indi": [23, 188, 232], "nooner": [23, 111, 232], "2012": [23, 44, 100, 111, 144, 147, 149, 154, 160, 161, 169, 192, 220, 232, 305, 306], "645m": 23, "102": [23, 33, 40, 41, 43, 111, 232, 306], "com": [23, 103, 111, 144, 147, 156, 159, 160, 162, 189, 191, 192, 193, 194, 197, 199, 201, 202, 207, 212, 217, 219, 220, 221, 231, 237, 244, 245, 282, 305, 306, 325, 361, 401, 402, 419, 420], "fliem": 23, "nki_nilearn": 23, "dale": [23, 111, 193, 201, 231], "1999": [23, 111, 212, 231], "fischl": [23, 111, 193, 199, 201, 203, 231], "cingul": [23, 55, 58, 61, 91, 163], "pearson": [23, 111, 251, 255, 369], "product": [23, 55, 161], "moment": [23, 113], "correl": [23, 26, 42, 43, 46, 47, 52, 59, 71, 99, 100, 110, 111, 152, 154, 161, 164, 167, 174, 179, 182, 184, 186, 208, 219, 249, 305, 306, 308, 314, 315, 338, 369, 375, 419], "acceler": [23, 111, 232], "pace": [23, 111, 232], "psychiatri": [23, 111, 232], "frontier": [23, 49, 111, 151, 187, 190, 222, 224, 232], "neurosci": [23, 49, 66, 72, 111, 151, 159, 167, 169, 187, 190, 200, 217, 219, 226, 232, 421], "152": [23, 33, 41, 56, 78, 82, 111, 167, 232], "3389": [23, 111, 114, 187, 190, 222, 224, 232], "fnin": [23, 111, 232], "00152": [23, 111, 232], "segment": [23, 56, 111, 152, 167, 197, 203, 212, 226, 305, 389, 391, 405], "reconstruct": [23, 28, 40, 45, 110, 111, 174, 179, 186, 221, 249, 250, 308, 311, 314, 380, 395, 396], "1006": [23, 111, 189], "nimg": [23, 111, 189], "1998": [23, 189], "0395": 23, "ii": [23, 111, 217, 306], "flatten": [23, 24, 40, 41, 70, 179, 185, 186], "0396": 23, "nki_dataset": 23, "fetch_surf_nki_enhanc": [23, 127, 135, 147], "fsaverag5": 23, "func_left": [23, 232], "nki_enhanced_surfac": 23, "a00028185": 23, "a00028185_left_preprocessed_fwhm6": 23, "timeseri": [23, 26, 48, 50, 58, 89, 104, 126, 139, 147, 148, 152, 194, 219, 282, 306, 309, 310, 311, 312, 313, 314, 315, 401, 402], "load_surf_data": [23, 127, 147], "pcc_region": 23, "g_cingul": 23, "post": [23, 51, 66, 94, 111, 120, 147, 173, 179, 213, 389], "dorsal": [23, 376, 378, 379], "pcc_label": 23, "seed_timeseri": 23, "scipi": [23, 44, 56, 62, 68, 76, 79, 94, 101, 103, 107, 108, 118, 125, 129, 130, 132, 135, 140, 142, 144, 145, 147, 161, 169, 173, 213, 235, 238, 291, 317, 318, 319, 321, 322, 372], "stat_map": [23, 280, 370, 378, 379], "pearsonr": 23, "wall": [23, 161], "_stats_pi": 23, "4427": 23, "constantinputwarn": 23, "constant": [23, 31, 66, 161, 173, 242, 243, 244, 245, 247, 248, 279, 325, 419], "msg": 23, "pcc_map": 23, "unthreshold": [23, 81, 111, 114, 167, 190, 222, 224], "slightli": [23, 48, 49, 66, 84, 112, 129, 147, 155, 179, 181, 297, 298], "captur": [23, 51, 58, 66, 103, 149, 150, 151, 154, 179, 217], "half": [23, 49, 66, 94, 135, 147, 161, 167, 174, 242, 243, 244, 245, 249, 250, 264, 277, 279, 299, 309, 310, 311, 312, 313, 314, 315, 316, 376, 378, 379, 387, 389, 391], "after": [23, 28, 32, 34, 40, 45, 50, 56, 66, 67, 77, 94, 98, 100, 105, 110, 143, 147, 151, 152, 154, 159, 161, 162, 163, 164, 167, 170, 173, 174, 183, 211, 242, 243, 244, 245, 249, 264, 272, 273, 277, 282, 286, 289, 294, 305, 306, 314, 390, 397, 398, 399], "789": [23, 27], "32": [23, 27, 33, 34, 36, 37, 40, 42, 43, 44, 45, 58, 66, 75, 82, 84, 91, 102, 105, 174, 268, 269, 270, 274, 275, 276, 419], "measur": [24, 29, 34, 48, 49, 51, 58, 66, 77, 99, 100, 105, 111, 128, 138, 147, 148, 149, 151, 152, 158, 159, 161, 164, 167, 169, 174, 219, 306, 369, 371, 386, 405, 419, 421], "toi": [24, 104], "drawn": [24, 66, 94, 264, 277, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 365, 368, 373, 374, 375, 382, 399, 405], "around": [24, 34, 84, 86, 131, 133, 147, 161, 162, 181, 279, 286, 297, 315, 326, 328, 329, 405], "vertex": [24, 201, 376, 377, 378, 379, 405], "spread": [24, 98, 157, 316], "nest": [24, 29, 42, 138, 147, 157, 179, 180, 181, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 277, 308, 309, 310, 311, 312, 313, 314, 315, 386, 387, 388, 389, 405], "along": [24, 25, 66, 84, 86, 100, 135, 140, 147, 153, 160, 162, 167, 173, 174, 247, 248, 264, 272, 297, 299, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 326, 328, 329, 338, 341, 355, 356, 360, 365, 368, 369, 373, 374, 375, 389, 390, 401, 405, 419], "ball": [24, 119, 147, 159, 161, 167, 246, 405], "too": [24, 38, 40, 42, 52, 54, 56, 71, 86, 114, 155, 161, 222, 224, 419], "almost": [24, 39, 49, 104, 161, 174], "ident": [24, 69, 80, 161, 282, 299, 391, 401], "most": [24, 33, 40, 42, 43, 49, 61, 75, 94, 100, 129, 132, 147, 154, 155, 156, 157, 159, 161, 162, 164, 170, 173, 174, 264, 266, 271, 376, 378, 379, 385, 387, 389, 391, 418, 419], "recommend": [24, 62, 89, 92, 100, 103, 133, 134, 135, 140, 142, 144, 147, 154, 159, 164, 169, 172, 174, 305, 389, 401, 405, 420], "n_z": 24, "n_t": 24, "mgrid": [24, 84], "triangul": 24, "tri": [24, 51, 155, 222, 360, 372, 386], "angl": [24, 84, 250], "pi": [24, 84, 251, 255], "sin": [24, 84], "asarrai": [24, 41, 51, 103, 253, 258], "triangl": [24, 405], "inner_mesh": [24, 405], "nested_sample_point": 24, "_sample_locations_between_surfac": 24, "ey": [24, 41, 44, 64, 65, 66, 69, 71, 80, 84, 89, 162, 169, 212], "line_sample_point": 24, "_line_sample_loc": 24, "segment_half_width": 24, "n_point": 24, "ball_sample_point": 24, "_ball_sample_loc": 24, "ball_radiu": 24, "view_init": 24, "67": [24, 32, 33, 36, 42, 43, 44, 102, 118, 147, 190], "plot_trisurf": 24, "scatter": [24, 94, 144, 147, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 371], "sample_point": 24, "910": [24, 27, 42, 102], "plot_surface_projection_strategi": [24, 27], "mean_haxbi": [25, 173], "0x7fdb4a9d4ee0": 25, "0x7fdb4abb4370": 25, "apply_mask": [25, 173, 311, 314], "masked_data": [25, 99, 173], "timepoint": [25, 173], "150": [25, 33, 36, 41, 42, 44, 102, 105, 111, 173, 361], "And": [25, 41, 148, 163, 170, 173], "ylabel": [25, 30, 32, 42, 48, 49, 55, 57, 58, 65, 66, 173], "intens": [25, 50, 70, 81, 88, 94, 172, 173, 249, 281, 301, 305, 360, 361, 367, 373, 374, 375, 382, 389, 405, 419], "xlim": [25, 30, 173], "95": [25, 33, 36, 42, 43, 44, 91, 102, 105, 141, 147, 173, 254, 256, 257], "506": [25, 27, 33], "1367": [25, 27], "plot_visu": [25, 27], "releas": [26, 111, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 191, 199, 212, 213, 219, 232, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 264, 277, 280, 282], "fetch_megatrawls_netmat": 26, "partial": [26, 48, 52, 99, 148, 152, 179, 184, 219, 306], "eigen": [26, 219], "regress": [26, 30, 31, 39, 40, 44, 55, 56, 111, 113, 122, 132, 138, 139, 140, 144, 147, 149, 154, 158, 159, 160, 162, 163, 164, 167, 187, 242, 243, 244, 245, 248, 250, 251, 256, 257, 264, 277, 305, 306, 309, 310, 311, 312, 313, 314, 315, 401, 421], "netmat": [26, 122, 147], "eigen_regress": [26, 219], "partial_correl": [26, 58, 184, 219], "correlation_matric": [26, 47, 51, 219], "util": [26, 43, 44, 48, 50, 87, 88, 102, 105, 106, 120, 127, 131, 138, 142, 147, 152, 162, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 302, 413], "n": [26, 41, 42, 49, 51, 56, 57, 58, 62, 70, 71, 77, 79, 80, 84, 88, 91, 93, 94, 99, 100, 102, 103, 105, 106, 107, 111, 115, 116, 118, 119, 120, 122, 125, 147, 155, 161, 162, 164, 189, 198, 205, 208, 209, 219, 227, 249, 250, 251, 255, 256, 257, 264, 273, 305, 306, 310, 313, 317, 318, 319, 321, 322, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 371, 389, 392, 393, 420], "plot_matrix": [26, 35, 50, 51, 52, 53, 54, 56, 57, 58, 129, 130, 135, 147, 152], "474": [26, 27, 33], "plot_visualize_megatrawls_netmat": [26, 27], "08": [27, 30, 32, 33, 36, 49, 59, 63, 96, 111, 219, 286, 305, 361], "37": [27, 33, 36, 42, 43, 44, 77, 81, 82, 91, 94, 102, 111, 118, 147, 305, 306, 402], "auto_examples_01_plot": 27, "194": [27, 33, 41], "915": [27, 40, 41, 45, 109, 111, 221], "887": 27, "09": [27, 30, 32, 33, 44, 59, 73, 111, 193, 206, 212, 217, 226, 237, 264, 277, 282, 399, 401], "140": [27, 33, 36, 40, 41, 42, 44, 72, 102, 105], "07": [27, 30, 32, 33, 36, 44, 45, 49, 76, 91, 96, 111, 155, 199, 212, 237, 259, 388, 394], "mvpa": [28, 110, 167, 169, 421], "stimuli": [28, 30, 32, 33, 45, 66, 80, 98, 110, 148, 149, 151, 152, 154, 164, 169, 172, 174, 211, 221, 284, 301, 308, 311, 314, 353, 375, 380], "jimura": [28, 45, 110, 111, 220, 245, 248, 375], "mix": [28, 44, 45, 110, 158, 160, 187, 220, 245, 247, 248, 375, 421], "gambl": [28, 45, 110, 158, 160, 220, 245, 248, 375, 421], "morphometri": [28, 45, 74, 82, 110, 154, 165, 167, 168, 169, 212, 213, 226, 243, 248, 277, 280, 287, 298, 308, 314, 325, 353, 364, 375, 380, 397, 399, 421], "oasi": [28, 45, 74, 82, 110, 111, 160, 166, 168, 212, 213, 226, 243, 248, 277, 280, 287, 298, 308, 314, 325, 353, 364, 375, 380, 397, 399], "prior": [28, 45, 48, 54, 66, 91, 110, 111, 140, 147, 148, 160, 163, 180, 199, 226, 242, 243, 247, 248, 264, 277, 312, 313, 315, 361, 375, 380], "svm": [28, 34, 35, 39, 42, 44, 45, 51, 99, 110, 113, 127, 147, 156, 158, 160, 167, 174, 211, 242, 289, 375, 380, 382, 421], "searchlight": [28, 44, 45, 110, 111, 126, 129, 132, 138, 147, 154, 158, 167, 168, 169, 211, 231, 287, 289, 292, 294, 295, 308, 314, 368, 375, 379, 380, 404, 405, 421], "cross": [28, 32, 33, 36, 37, 40, 42, 44, 45, 51, 55, 97, 99, 109, 110, 111, 114, 138, 147, 148, 155, 158, 181, 211, 222, 226, 234, 242, 243, 244, 245, 246, 247, 248, 289, 299, 308, 314, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 360, 365, 368, 373, 374, 375, 380, 382, 419, 421], "simul": [28, 45, 46, 59, 63, 68, 100, 110, 150, 159, 181, 246, 324, 372, 380, 421], "encod": [28, 41, 45, 71, 75, 84, 110, 111, 155, 156, 174, 221, 244, 245, 284, 301, 305, 308, 311, 314, 353, 375], "miyawaki": [28, 45, 89, 110, 111, 174, 221, 284, 301, 308, 311, 314, 353, 375, 380], "2008": [28, 45, 110, 111, 174, 221, 279, 284, 301, 308, 311, 314, 325, 353, 375, 380], "effici": [29, 66, 111, 153, 155, 161, 162, 180, 183, 222, 244, 245], "featur": [29, 31, 32, 33, 34, 35, 42, 44, 49, 51, 66, 94, 99, 103, 104, 111, 113, 130, 132, 133, 138, 142, 155, 156, 157, 158, 159, 160, 161, 162, 169, 170, 174, 180, 181, 183, 242, 243, 244, 245, 246, 247, 248, 249, 252, 324, 386, 388, 389, 391, 401, 402, 416, 420, 421], "func_img": [29, 154], "identifi": [29, 30, 32, 33, 50, 58, 62, 94, 111, 142, 145, 147, 152, 160, 163, 164, 166, 189, 260, 264, 266, 271, 273], "sep": [29, 30, 31, 32, 33, 34, 35, 36, 37, 72, 94, 102, 152, 172, 326, 328, 329], "restrict": [29, 30, 31, 89, 91, 94, 102, 132, 147, 154, 159, 174, 187, 241], "place": [29, 98, 129, 147, 222, 273, 301, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 361, 368, 405], "uniqu": [29, 30, 32, 33, 35, 49, 51, 58, 65, 86, 94, 100, 102, 127, 147, 148, 156, 172, 189, 195, 196, 271, 312, 389, 390, 391], "aim": [29, 34, 122, 147, 154, 162, 167, 247, 248], "act": [29, 34, 111, 128, 147, 167, 185, 186, 256, 257], "sever": [29, 31, 33, 34, 49, 51, 61, 62, 64, 66, 75, 86, 94, 99, 103, 113, 126, 132, 147, 148, 156, 158, 159, 161, 162, 164, 167, 170, 172, 173, 174, 181, 264, 282, 293, 320, 322, 323, 363, 373, 387, 401, 421], "niftimask": [29, 32, 34, 35, 36, 40, 41, 42, 43, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 83, 91, 94, 96, 98, 99, 100, 102, 103, 104, 105, 106, 110, 113, 132, 135, 138, 139, 140, 141, 142, 147, 154, 157, 171, 208, 221, 242, 243, 244, 245, 247, 248, 249, 250, 261, 264, 277, 279, 289, 294, 305, 306, 308, 309, 310, 312, 313, 315, 319, 325, 365, 369, 374, 375, 380, 387, 397, 410, 421], "relev": [29, 34, 49, 56, 66, 69, 104, 114, 140, 144, 147, 154, 155, 161, 162, 170, 173, 174, 279, 305, 306, 325], "classic": [29, 34, 94, 155, 172], "univari": [29, 33, 34, 97, 109, 110, 111, 156, 158, 160, 211, 216, 217, 242, 243, 244, 245, 247, 248, 287, 289, 294, 308, 314, 325, 353, 367, 375, 380, 421], "vector": [29, 32, 33, 34, 35, 40, 44, 51, 64, 84, 98, 99, 102, 105, 106, 113, 128, 147, 154, 155, 157, 167, 179, 242, 243, 244, 245, 251, 254, 255, 256, 257, 260, 262, 305, 371, 405], "screening_percentil": [29, 32, 33, 34, 42, 43, 154, 242, 243, 244, 245, 247, 248], "percent": [29, 34, 41, 42, 43, 62, 100, 101, 108, 135, 147, 154, 272, 281, 301, 309, 310, 311, 312, 313, 314, 315, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 373, 381, 383, 385, 401], "smoothing_fwhm": [29, 33, 34, 35, 42, 49, 50, 53, 54, 55, 56, 58, 62, 66, 67, 75, 76, 77, 79, 89, 91, 92, 98, 100, 101, 102, 104, 105, 106, 128, 147, 152, 154, 174, 242, 243, 244, 245, 249, 250, 264, 267, 277, 279, 309, 310, 311, 312, 313, 314, 315, 316, 387, 389, 391], "accuraci": [29, 30, 31, 32, 33, 35, 37, 41, 51, 98, 99, 139, 147, 158, 159, 167, 169, 242, 244, 246, 247, 421], "y_pred": [29, 31, 34, 41, 43, 154, 242, 243, 244, 245, 247, 248], "out": [29, 33, 34, 35, 36, 40, 42, 43, 44, 48, 51, 53, 54, 55, 56, 57, 58, 64, 69, 98, 100, 102, 105, 106, 113, 114, 132, 135, 139, 147, 149, 154, 155, 157, 159, 161, 162, 163, 167, 173, 212, 242, 243, 244, 245, 247, 248, 289, 297, 309, 310, 311, 312, 313, 314, 315, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 370, 387, 389, 390, 400, 401, 405, 419], "9444444444444444": 29, "weight_img": [29, 42, 98, 154, 174], "Or": [29, 114, 154, 198, 199, 419], "dynam": [29, 111, 154, 306], "html": [29, 33, 34, 36, 49, 52, 53, 54, 56, 58, 61, 62, 64, 75, 77, 98, 132, 136, 140, 142, 147, 154, 162, 165, 174, 190, 202, 211, 242, 243, 244, 245, 249, 250, 264, 277, 306, 310, 313, 367, 381, 382, 383, 384, 385, 387, 389, 397, 399, 419, 420], "viewer": [29, 132, 147, 154, 173, 382, 419], "haxby_face_vs_hous": 29, "392": [29, 33, 45, 66, 73], "plot_haxby_anova_svm": [29, 45, 127, 147], "fetcher": [30, 32, 122, 123, 124, 127, 132, 135, 136, 139, 141, 142, 143, 144, 147, 163, 187, 193, 194, 205, 206, 207, 208, 215, 216, 217, 226, 230], "get_data": [30, 36, 42, 49, 77, 79, 84, 94, 102, 105, 106, 107, 127, 135, 147, 172, 292], "abl": [30, 32, 162, 170, 302, 376, 378, 379, 419], "resting_st": 30, "task_mask": [30, 32], "logical_not": [30, 36, 77, 105], "find": [30, 32, 44, 50, 56, 71, 79, 100, 118, 147, 152, 153, 154, 156, 158, 161, 162, 164, 167, 170, 174, 183, 191, 284, 319, 320, 322, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 359, 360, 382, 386, 388, 394, 419, 420, 421], "remain": [30, 32, 36, 40, 42, 43, 44, 48, 53, 56, 89, 100, 102, 105, 138, 147, 159, 162, 405], "categori": [30, 32, 33, 98, 102, 113, 154, 156, 162, 172, 211], "tag": [30, 32, 69, 108, 114, 162, 170, 302, 303], "classification_target": [30, 32], "svc_l2": [30, 155, 242, 244], "svc_l1": [30, 32, 155, 242, 244], "logistic_l1": [30, 155, 242, 244], "logistic_l2": [30, 155, 242, 244], "ridge_classifi": [30, 155, 242, 244], "predict": [30, 31, 33, 39, 40, 44, 51, 58, 60, 73, 97, 109, 111, 113, 139, 140, 142, 147, 156, 157, 159, 160, 162, 164, 165, 167, 168, 169, 179, 197, 205, 208, 219, 229, 242, 243, 244, 245, 246, 247, 248, 256, 257, 264, 277, 282, 283, 294, 299, 308, 313, 315, 319, 353, 375, 398, 420, 421], "score": [30, 32, 37, 41, 42, 44, 48, 51, 80, 98, 99, 102, 103, 105, 106, 138, 139, 147, 154, 155, 157, 158, 160, 169, 181, 226, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 277, 281, 301, 305, 309, 310, 311, 312, 313, 314, 315, 325, 361, 387, 389, 401, 421], "classifiers_data": 30, "classifier_nam": 30, "roc_auc": [30, 32, 98, 157, 242, 244], "t0": [30, 41], "2f": [30, 32, 41, 42, 43, 44, 49, 57, 89], "auc": [30, 32, 154, 167], "std": [30, 32, 44, 51, 89, 104], "______________________________________________________________________": 30, "scissor": [30, 32, 33, 172], "92": [30, 32, 33, 36, 42, 43, 44, 77, 102, 111, 325], "98": [30, 32, 33, 36, 42, 43, 44, 87, 91, 93, 102, 105, 111, 141, 147, 279, 325], "cat": [30, 32, 33, 98, 113, 154, 168, 172], "shoe": [30, 32, 33, 34, 172], "scrambledpix": [30, 32, 33, 94, 172], "bottl": [30, 32, 33, 34, 172], "chair": [30, 32, 33, 172], "49": [30, 33, 42, 43, 67, 86, 91, 102, 111, 132, 147], "97": [30, 33, 36, 42, 43, 44, 88, 102], "82": [30, 32, 33, 36, 42, 43, 89, 102], "89": [30, 32, 33, 36, 42, 43, 44, 72, 77, 102, 105], "85": [30, 33, 36, 42, 43, 44, 47, 91, 102, 105, 120, 147, 319, 320, 322], "28": [30, 33, 36, 42, 43, 44, 45, 62, 89, 91, 99, 102, 103, 109, 111, 115, 132, 147, 190, 199], "46": [30, 33, 36, 42, 43, 44, 45, 49, 58, 62, 73, 91, 93, 102, 107, 115, 147, 174, 190, 192, 419], "83": [30, 32, 33, 36, 42, 43, 44, 72, 102, 111, 115, 147, 279, 325], "87": [30, 32, 33, 36, 41, 42, 43, 44, 72, 91, 102, 111], "rudimentari": 30, "diagram": [30, 164], "all_categori": 30, "hstack": [30, 64, 67, 77, 80, 254, 256, 257], "tick_posit": [30, 32], "ytick": [30, 44, 48, 51, 99], "height": [30, 33, 51, 99, 135, 147, 264, 277, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 361, 362, 365, 367, 368, 371, 372, 373, 374, 375, 381, 383, 385, 397, 399], "zip": [30, 32, 34, 38, 41, 50, 51, 53, 58, 99, 101, 103, 108, 110, 152, 170, 197, 212], "score_mean": [30, 32], "barh": [30, 48, 51, 99], "xmin": [30, 360, 361, 362, 365, 367, 368, 371, 373, 374, 375], "loc": [30, 32, 34, 42, 43, 49, 68, 70, 91, 100, 326, 328, 329], "lower": [30, 31, 32, 39, 51, 70, 77, 89, 94, 122, 147, 153, 156, 160, 161, 167, 173, 179, 185, 186, 242, 243, 244, 245, 254, 256, 257, 319, 322, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 359, 360, 361, 365, 367, 368, 371, 372, 373, 374, 376, 400], "ncol": [30, 63, 79, 100, 101, 105], "tight_layout": [30, 32, 48, 51, 55, 58, 70, 78, 80, 99], "penalti": [30, 39, 43, 155, 160, 167, 242, 243, 244, 247, 248], "logist": [30, 31, 111, 155, 156, 160, 242, 244, 247, 248], "main": [30, 56, 66, 67, 68, 71, 94, 116, 144, 147, 154, 159, 162, 163, 167, 172, 174, 189, 264, 266, 271, 302, 320, 322, 327], "ell_1": 30, "ell_2": 30, "spars": [30, 39, 40, 46, 48, 49, 57, 58, 59, 110, 111, 149, 150, 152, 153, 155, 160, 167, 168, 175, 180, 181, 183, 197, 208, 242, 243, 244, 245, 247, 248, 249, 250, 308, 313, 358, 362, 372, 376, 380, 381, 389, 421], "intra": [30, 32], "logical_or": 30, "assert": 30, "fmri_niimgs_condit": 30, "mean_epi_img": 30, "ab": [30, 43, 44, 53, 58, 81, 84, 102, 103, 104, 111, 161, 180, 183, 192, 202, 231, 282, 325, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 401], "1e": [30, 39, 40, 49, 180, 181, 183, 226, 247, 248, 252, 286, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 375, 378, 382, 388, 394], "612": [30, 33, 45], "1350": [30, 42, 45, 50, 102, 152, 389, 391], "plot_haxby_different_estim": [30, 45, 135, 147], "implicit": [31, 39, 138, 147, 156, 167, 244, 245], "aggreg": [31, 39, 58, 138, 147, 156, 167, 190, 244, 245], "cost": [31, 39, 53, 79, 138, 147, 151, 155, 156, 160, 161, 162, 167, 174, 244, 245], "data_fil": 31, "behavior": [31, 34, 35, 48, 50, 75, 77, 98, 111, 113, 122, 129, 139, 144, 147, 154, 155, 157, 158, 162, 167, 171, 174, 200, 219, 308, 309, 310, 311, 312, 313, 314, 315, 389, 421], "condition_mask_train": 31, "condition_mask_test": 31, "x_train": [31, 41, 44], "x_test": [31, 41, 44, 242, 243, 244, 245, 246], "y_train": [31, 34, 41, 44], "y_test": [31, 34, 41, 44, 242, 243, 244, 245, 246], "background_img": [31, 43], "fremclassifi": [31, 138, 139, 147, 155, 156, 242, 245], "_util": [31, 32, 39, 47, 49, 52, 54, 57, 62, 77, 79, 122, 141, 144, 147, 161, 418], "param_valid": [31, 32, 39, 127, 147], "bigger": [31, 39, 43], "feature_select": [31, 35, 36, 41, 42, 44, 94, 98, 102, 105, 106, 157], "_univariate_select": 31, "110": [31, 33, 36, 41, 42, 43, 44, 86, 102, 105, 111, 202, 209, 227], "10420": 31, "111": [31, 33, 41, 43, 53, 91], "runtimewarn": [31, 58, 77, 79], "invalid": [31, 58, 122, 145, 147], "encount": [31, 58, 77, 79, 376, 378, 379], "divid": [31, 55, 76, 77, 79, 125, 147, 155, 164, 167, 185, 387], "4444": [31, 34], "coef": [31, 44, 98, 264, 273], "52": [31, 33, 36, 42, 43, 44, 48, 55, 58, 59, 91, 102, 174, 191, 419], "improv": [31, 63, 75, 111, 125, 128, 131, 132, 135, 142, 143, 144, 147, 154, 155, 156, 160, 161, 162, 164, 167, 172, 174, 207, 212, 282, 309, 312, 386, 401], "mechan": [31, 154], "reason": [31, 43, 48, 66, 92, 114, 155, 157, 159, 161, 162, 164, 170, 405], "even": [31, 42, 49, 50, 65, 79, 100, 114, 135, 140, 147, 161, 162, 169, 222, 224], "heavier": 31, "l2": [31, 155, 156, 242, 244, 386, 387, 388], "ridg": [31, 40, 44, 155, 156, 160, 242, 243, 244, 245], "fremregressor": [31, 39, 138, 139, 147, 155, 156, 243, 244], "solv": [31, 39, 161, 162, 169, 170, 250, 325], "182": [31, 33, 41, 45, 195, 196, 199], "1353": [31, 45], "plot_haxby_frem": [31, 45], "area": [32, 64, 67, 80, 94, 140, 147, 152, 154, 159, 163, 164, 167, 168, 174, 202, 212, 231, 286, 326, 328, 329, 338, 341, 376, 379, 385], "older": [32, 35, 36, 40, 41, 42, 47, 48, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 111, 113, 127, 128, 129, 130, 147, 162, 172, 226, 284], "upgrad": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 127, 129, 135, 140, 142, 147], "masker": [32, 33, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 119, 120, 135, 138, 139, 140, 141, 142, 144, 145, 147, 149, 151, 154, 157, 163, 171, 173, 242, 243, 244, 245, 247, 248, 249, 250, 264, 277, 279, 305, 306, 325, 369, 387, 389, 392, 393, 395, 396, 421], "input_data": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 142, 147], "That": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 139, 147, 167, 251, 255, 264, 266, 271], "occurr": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 159], "practic": [32, 51, 69, 99, 148, 151, 155, 157, 159, 161, 162, 163, 164, 166, 169, 172, 173], "unmask": [32, 33, 44, 112, 127, 130, 147, 171, 173, 249, 250, 421], "task_data": 32, "mask_nam": 32, "mask_scor": 32, "mask_chance_scor": 32, "tobe": [32, 111, 232], "518": [32, 33], "screen": [32, 111, 160, 242, 243, 244, 245, 247, 248], "rais": [32, 48, 50, 63, 78, 94, 122, 129, 131, 132, 135, 142, 144, 145, 147, 172, 271, 277, 279, 280, 283, 292, 296, 297, 309, 310, 312, 313, 315, 321, 420], "clustering_percentil": [32, 244, 245], "76": [32, 33, 42, 43, 44, 66, 72, 92, 102, 193, 201], "73": [32, 33, 36, 42, 43, 91, 102], "86": [32, 33, 36, 42, 43, 102], "xtick": [32, 34, 35, 44, 94], "rgb": [32, 384], "score_ch": 32, "edgecolor": [32, 40, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 362, 365, 367, 368, 371, 373, 374, 375], "ylim": 32, "411": [32, 33, 45], "1352": [32, 45], "plot_haxby_full_analysi": [32, 45, 135, 147], "record": [33, 40, 66, 154, 164, 167], "unique_sess": 33, "datafram": [33, 62, 63, 64, 66, 67, 72, 75, 76, 77, 78, 79, 80, 81, 100, 101, 114, 138, 142, 143, 147, 179, 187, 193, 194, 205, 206, 207, 215, 216, 217, 226, 249, 250, 264, 265, 267, 271, 277, 278, 279, 305, 306, 307, 309, 311, 312, 314, 315, 363, 364, 366, 387, 398, 401], "conditions_sess": 33, "frame": [33, 63, 69, 89, 174, 266, 289, 305, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 397], "n_scan": [33, 61, 63, 69, 71, 108, 164, 266], "frame_tim": [33, 63, 68, 69, 71, 108, 163, 265, 266, 271], "events_": 33, "insert": [33, 198, 199, 264, 277, 381, 382, 383, 384, 385, 397, 399, 419], "togeth": [33, 48, 68, 69, 70, 80, 148, 156, 157, 164, 167, 205, 207, 241, 244, 245, 249, 267, 282, 389], "conditions_label": 33, "008": [33, 41], "nilearn_cach": [33, 35, 36, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 92, 98, 99, 100, 102, 103, 104, 105, 106, 152], "grab": [33, 47, 48, 49, 65, 100, 114], "fmri_sess": 33, "condition_": 33, "________________________________________________________________________________": [33, 43, 48, 49, 53, 54, 56, 58], "nifti_mask": [33, 35, 36, 42, 92, 102, 105, 106, 113], "_filter_and_mask": 33, "0x7fdb4b7695e0": 33, "0x7fdb4b769880": 33, "detrend": [33, 40, 41, 49, 51, 53, 54, 55, 56, 58, 61, 89, 91, 92, 94, 99, 100, 113, 118, 132, 140, 142, 147, 173, 174, 249, 250, 282, 288, 309, 310, 311, 312, 313, 314, 315, 361, 387, 389, 401, 402], "high_variance_confound": [33, 49, 53, 54, 56, 58, 66, 89, 91, 92, 122, 139, 147, 174, 309, 310, 311, 312, 313, 314, 315], "low_pass": [33, 49, 51, 53, 54, 55, 56, 58, 61, 89, 91, 92, 99, 100, 132, 147, 174, 242, 243, 244, 245, 247, 248, 249, 250, 282, 309, 310, 311, 312, 313, 314, 315, 387, 389, 400, 401], "standardize_confound": [33, 49, 53, 54, 56, 58, 89, 91, 92, 142, 147, 174, 249, 309, 310, 311, 312, 313, 314, 315, 401], "target_affin": [33, 49, 53, 54, 56, 84, 89, 92, 173, 174, 242, 243, 244, 245, 247, 248, 249, 250, 264, 267, 277, 294, 297, 311, 314, 317, 319, 320, 321, 322, 387], "target_shap": [33, 49, 53, 54, 56, 84, 89, 92, 173, 174, 242, 243, 244, 245, 247, 248, 249, 250, 264, 267, 277, 294, 297, 311, 314, 317, 319, 320, 322, 387], "memory_level": [33, 35, 36, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 89, 91, 92, 98, 99, 100, 102, 103, 104, 105, 106, 152, 174, 180, 242, 243, 244, 245, 247, 248, 249, 250, 264, 267, 277, 283, 309, 310, 311, 312, 313, 314, 315, 387, 388, 389], "joblib": [33, 43, 48, 49, 53, 54, 56, 58, 92, 135, 138, 142, 145, 147, 151, 180, 242, 243, 244, 245, 247, 248, 249, 250, 264, 277, 283, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 387, 388, 389], "verbos": [33, 35, 36, 42, 43, 44, 48, 49, 52, 53, 54, 55, 56, 57, 58, 61, 89, 91, 92, 98, 99, 100, 102, 105, 132, 147, 174, 180, 181, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 242, 243, 244, 245, 246, 247, 248, 249, 250, 259, 264, 267, 273, 277, 279, 283, 294, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 325, 386, 387, 388, 389, 394], "confound": [33, 47, 49, 50, 51, 52, 53, 54, 55, 58, 62, 77, 78, 99, 100, 101, 105, 108, 111, 113, 118, 122, 132, 138, 139, 140, 142, 144, 147, 149, 152, 153, 154, 161, 167, 171, 173, 179, 188, 208, 249, 250, 264, 277, 278, 279, 282, 288, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 325, 387, 389, 401, 402, 409, 421], "sample_mask": [33, 49, 53, 54, 56, 58, 66, 140, 142, 144, 145, 147, 264, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 389, 401], "__________________________________________________filter_and_mask": 33, "0min": [33, 43, 48, 49, 52, 53, 54, 56, 58], "run_glm": [33, 69, 108, 140, 144, 147], "114769": 33, "149296": 33, "367151": 33, "779998": 33, "bin": [33, 49, 264, 273, 420], "random_st": [33, 36, 42, 43, 44, 48, 49, 50, 51, 92, 99, 103, 104, 144, 147, 152, 242, 244, 249, 250, 264, 273, 279, 325, 386, 387], "__________________________________________________________run_glm": 33, "44475": 33, "379275": 33, "___________________________________________________________unmask": 33, "013524": 33, "844135": 33, "217486": 33, "430348": 33, "106474": 33, "182434": 33, "747494": 33, "660679": 33, "080159": 33, "32614": 33, "253894": 33, "452682": 33, "240914": 33, "244136": 33, "0x7fdb4b253e50": 33, "0x7fdb4b753700": 33, "660587": 33, "536042": 33, "254408": 33, "842804": 33, "871458": 33, "990755": 33, "627194": 33, "290147": 33, "153013": 33, "320123": 33, "15748": 33, "082416": 33, "997775": 33, "754066": 33, "109412": 33, "330079": 33, "030863": 33, "731439": 33, "559734": 33, "720924": 33, "0x7fdb4ba28640": 33, "0x7fdb4a9fe7f0": 33, "205584": 33, "587189": 33, "836576": 33, "676956": 33, "695564": 33, "455092": 33, "457214": 33, "537178": 33, "803925": 33, "570463": 33, "614932": 33, "232909": 33, "527175": 33, "062723": 33, "126756": 33, "274819": 33, "635166": 33, "395548": 33, "250365": 33, "364311": 33, "0x7fdb49ccd1c0": 33, "0x7fdb476f73d0": 33, "026206": 33, "974948": 33, "616334": 33, "104535": 33, "503142": 33, "639351": 33, "271132": 33, "047089": 33, "318104": 33, "724813": 33, "073279": 33, "316956": 33, "380183": 33, "690685": 33, "631912": 33, "753286": 33, "155784": 33, "065658": 33, "186135": 33, "69267": 33, "0x7fdb4b97e700": 33, "0x7fdb4bc84d90": 33, "033577": 33, "45955": 33, "57195": 33, "994713": 33, "158342": 33, "068131": 33, "396497": 33, "424937": 33, "091867": 33, "463109": 33, "054041": 33, "122921": 33, "025223": 33, "562991": 33, "001653": 33, "968729": 33, "274665": 33, "667": 33, "564329": 33, "496068": 33, "0x7fdb4b2b3c10": 33, "0x7fdb5829dcd0": 33, "150482": 33, "81308": 33, "204891": 33, "417917": 33, "987059": 33, "41717": 33, "24774": 33, "674399": 33, "731234": 33, "341998": 33, "714869": 33, "182988": 33, "222674": 33, "480354": 33, "366899": 33, "091153": 33, "2708": 33, "247146": 33, "251249": 33, "413063": 33, "0x7fdb4b464dc0": 33, "0x7fdb475b8670": 33, "51173": 33, "279282": 33, "911755": 33, "839058": 33, "290412": 33, "609221": 33, "090297": 33, "822602": 33, "747918": 33, "108861": 33, "095788": 33, "376995": 33, "807425": 33, "826947": 33, "017351": 33, "622242": 33, "625042": 33, "231224": 33, "056424": 33, "672737": 33, "0x7fdb4b78bee0": 33, "0x7fdb4a9dfc10": 33, "915996": 33, "07737": 33, "981215": 33, "372383": 33, "200737": 33, "008536": 33, "066075": 33, "168487": 33, "636238": 33, "145684": 33, "932773": 33, "580823": 33, "455655": 33, "685537": 33, "715791": 33, "245273": 33, "099707": 33, "79538": 33, "913842": 33, "519925": 33, "629218": 33, "0x7fdb580516a0": 33, "0x7fdb4b769af0": 33, "292987": 33, "392956": 33, "935719": 33, "602484": 33, "425611": 33, "348025": 33, "31867": 33, "408223": 33, "534932": 33, "150519": 33, "149007": 33, "640215": 33, "640699": 33, "50369": 33, "246384": 33, "346316": 33, "162243": 33, "519251": 33, "203695": 33, "335337": 33, "0x7fdb4b6f3f70": 33, "0x7fdb4bc841f0": 33, "223948": 33, "959582": 33, "677519": 33, "024363": 33, "034515": 33, "612397": 33, "62798": 33, "160445": 33, "506632": 33, "459388": 33, "261016": 33, "747236": 33, "231796": 33, "098904": 33, "148582": 33, "999934": 33, "548262": 33, "09934": 33, "222824": 33, "318977": 33, "0x7fdb4b253430": 33, "0x7fdb475b8250": 33, "66533": 33, "299562": 33, "647343": 33, "331865": 33, "175763": 33, "429485": 33, "146358": 33, "947626": 33, "806852": 33, "720554": 33, "008926": 33, "4544": 33, "279543": 33, "828183": 33, "463642": 33, "26599": 33, "058735": 33, "191442": 33, "390268": 33, "112207": 33, "0x7fdb4abb4fa0": 33, "0x7fdb4b97eb50": 33, "095605": 33, "449202": 33, "59974": 33, "179998": 33, "340751": 33, "056108": 33, "043261": 33, "144442": 33, "517954": 33, "611394": 33, "797134e": 33, "317655e": 33, "398581": 33, "488427": 33, "714396": 33, "869941": 33, "924894": 33, "723724": 33, "145297": 33, "821272": 33, "summari": [33, 62, 64, 91, 140, 162, 252], "make_glm_report": [33, 61, 62, 64, 75, 139, 142, 147], "mean_img_": [33, 64, 67], "drift_ord": [33, 63, 66, 163, 264, 267, 271], "fir_delai": [33, 63, 65, 264, 266, 267, 271], "glover": [33, 63, 66, 68, 69, 108, 163, 264, 266, 267, 268, 269, 270, 271], "scaling_axi": [33, 100, 142, 147, 264], "signal_sc": [33, 70, 100, 142, 147, 264, 267], "slice_time_ref": [33, 61, 66, 69, 71, 264, 267], "subject_label": [33, 62, 78, 101, 264, 277, 278, 279], "\u03b1": 33, "minimum": [33, 77, 79, 89, 118, 120, 125, 127, 128, 129, 132, 135, 138, 140, 142, 145, 147, 152, 264, 277, 281, 301, 309, 312, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 356, 362, 382, 389, 390, 391, 392, 398, 399], "distanc": [33, 247, 248, 264, 277, 356, 398, 399, 405], "75": [33, 36, 40, 41, 42, 43, 66, 72, 91, 93, 102, 105, 111, 190, 325], "88": [33, 36, 42, 43, 81, 89, 91, 102, 111, 325], "147": [33, 41, 42], "62": [33, 36, 42, 43, 44, 49, 62, 72, 100, 102, 107, 111, 129, 147, 196], "38": [33, 42, 43, 62, 77, 91, 102, 105, 132, 147], "393": 33, "196": [33, 41, 43], "2264": 33, "31": [33, 36, 40, 42, 43, 44, 91, 102, 111, 160, 200], "77": [33, 36, 42, 43, 66, 72, 102, 105], "246": [33, 41, 45, 72], "541": [33, 56, 59], "94": [33, 36, 42, 43, 44, 77, 91, 102, 105, 106, 216, 217], "344": [33, 41], "492": 33, "12a": 33, "58": [33, 36, 42, 43, 91, 102, 105, 132, 147], "1132": 33, "639": [33, 101, 109], "984": 33, "16a": 33, "787": 33, "23a": 33, "65": [33, 36, 42, 43, 44, 91, 102, 105, 120, 147], "27a": 33, "44": [33, 36, 42, 43, 44, 72, 91, 102, 111, 118, 147, 279, 325], "295": [33, 37, 41, 45, 111, 202], "590": [33, 36, 42, 73, 102], "31a": 33, "31b": 33, "41": [33, 36, 42, 43, 44, 49, 72, 91, 101, 102, 109, 111, 388, 394], "41a": 33, "2214": [33, 135, 147], "42a": 33, "42b": 33, "442": 33, "43a": 33, "58a": 33, "64a": 33, "67a": 33, "68": [33, 42, 43, 58, 102, 174, 419], "72": [33, 36, 42, 43, 44, 56, 58, 62, 91, 93, 102, 111, 141, 147, 160, 206], "80": [33, 36, 42, 43, 44, 47, 54, 65, 66, 72, 84, 102, 103, 105, 111, 162, 197, 281, 301, 336, 341, 343, 347, 353, 359, 405], "74": [33, 36, 42, 43, 44, 49, 91, 96, 102], "79": [33, 36, 42, 43, 66, 72, 91, 102], "78": [33, 36, 42, 43, 44, 49, 53, 54, 66, 72, 93, 102, 111, 159], "96a": 33, "101": [33, 40, 41, 43, 111, 305, 306, 402], "103": [33, 41, 43, 111, 159, 246], "104": [33, 41, 43, 194], "105": [33, 41, 43, 105], "106": [33, 41, 43, 111, 199, 200, 203, 219], "107": [33, 41, 43], "108": [33, 41, 43, 72], "112": [33, 41, 43, 92, 93, 105, 111, 305, 306], "113": [33, 41, 43], "114": [33, 41, 43, 44, 132, 147], "115": [33, 41, 43, 132, 147], "116": [33, 41, 43, 72, 189], "117": [33, 41, 43, 141, 147, 189], "118": [33, 41, 43], "119": [33, 41, 43, 56, 72, 120, 147], "120": [33, 36, 41, 42, 43, 44, 84, 92, 99, 102, 104, 105, 111, 202], "121": [33, 41, 66, 105], "122": [33, 41, 66, 72, 115, 147, 191, 208], "123": [33, 41, 194], "124": [33, 40, 41], "124a": 33, "125": [33, 40, 41, 72, 100, 111], "127": [33, 41, 129, 147], "128": [33, 41, 63, 66, 69, 84, 108, 139, 147, 194], "130": [33, 36, 41, 42, 44, 102, 105], "131": [33, 41, 72, 111, 202], "132": [33, 41, 49, 54], "133": [33, 41, 44], "134": [33, 41, 93, 105, 141, 147], "135": [33, 41, 72], "136": [33, 41], "137": [33, 41, 72], "138": [33, 41], "139": [33, 41], "142": [33, 41, 120, 147], "143": [33, 41, 62, 72], "144": [33, 41, 111, 217], "144a": 33, "145": [33, 41], "146": [33, 41, 72, 123, 147], "146a": 33, "148": [33, 41], "149": [33, 41, 72], "151": [33, 41, 107], "153": [33, 41, 72], "154": [33, 41, 56, 111, 305, 306, 361], "155": [33, 41, 208], "156": [33, 41, 72], "157": [33, 41], "158": [33, 41, 111, 361], "159": [33, 41, 72], "160": [33, 36, 41, 42, 44, 58, 84, 102, 105, 111, 156, 205, 244, 245, 405], "161": [33, 41], "162": [33, 41, 72], "163": [33, 41, 56], "164": [33, 41, 56, 72], "165": [33, 41, 56, 105, 109], "166": [33, 41, 47, 56], "167": [33, 41, 56, 72, 151], "169": [33, 41], "170": [33, 36, 41, 42, 44, 72, 102, 105], "171": [33, 41, 56, 111, 306], "172": [33, 41, 111, 156, 202, 244, 245], "173": [33, 41, 72], "174": [33, 41, 56, 111, 305, 306], "175": [33, 41], "176": [33, 41, 61, 72], "177": [33, 41], "178": [33, 41], "179": [33, 41], "180": [33, 36, 41, 42, 44, 84, 102, 105, 111, 132, 147, 156, 244, 245], "181": [33, 41, 76, 111, 259], "183": [33, 41], "184": [33, 41], "185": [33, 41], "186": [33, 41], "187": [33, 41, 56, 106, 109, 111, 305, 306], "188": [33, 41, 72, 101], "191": [33, 41, 72], "192": [33, 41, 84], "193": [33, 41, 198], "198": [33, 41, 72, 96, 198], "199": [33, 41, 95], "200": [33, 36, 41, 42, 43, 44, 94, 102, 103, 105, 111, 179, 191, 199, 219, 247, 248], "201": [33, 41, 72], "202": [33, 41], "203": [33, 41, 72], "204": [33, 41], "738": [33, 34], "204a": 33, "205": [33, 41], "206": [33, 41, 82, 111, 207], "207": [33, 41, 72, 76, 81, 82, 88, 90, 96, 100, 106, 109], "208": [33, 41, 111, 179], "209": [33, 41], "211": [33, 41, 43, 95], "212": [33, 41, 43, 72, 73, 109, 198], "213": [33, 41, 107], "215": [33, 41, 72], "217": [33, 41, 189], "218": [33, 41, 49, 59, 72, 195, 196, 199], "219": [33, 41], "220": [33, 36, 41, 42, 44, 102], "221": [33, 41, 72, 111, 194], "222": [33, 41], "223": [33, 41, 47, 49, 52, 54, 111, 212], "224": [33, 41, 72], "225": [33, 41], "226": [33, 41], "227": [33, 41, 72, 75, 82], "228": [33, 41, 98, 109], "229": [33, 41, 104, 109, 198], "230": [33, 36, 41, 42, 44, 69, 72, 73, 102], "231": [33, 41], "232": [33, 41], "233": [33, 41, 58, 93, 289], "234": [33, 41, 72], "235": [33, 41, 94], "236": [33, 41, 72], "237": [33, 41], "238": [33, 41, 111, 202], "239": [33, 41], "240": [33, 36, 41, 42, 44, 102], "241": [33, 41], "242": [33, 41, 111, 202], "243": [33, 41], "244": [33, 41, 82], "245": [33, 41, 57, 77], "247": [33, 41], "248": [33, 41, 72], "249": [33, 41], "250": [33, 36, 41, 42, 44, 66, 102, 111], "251": [33, 41, 72], "253": [33, 41], "254": [33, 41, 72, 115, 147], "255": [33, 41, 141, 147], "256": [33, 41, 84, 139, 147, 194, 203], "257": [33, 41, 72, 85, 96], "258": [33, 41, 94], "259": [33, 41], "260": [33, 36, 41, 42, 44, 72, 76, 82, 102], "261": [33, 41, 111, 159], "262": [33, 41, 111], "263": [33, 41, 73, 198], "264": [33, 41, 58, 65, 72, 206], "265": [33, 41], "266": [33, 41, 72], "267": [33, 41, 111, 305, 306], "268": [33, 41], "269": [33, 41, 72, 111, 159], "270": [33, 36, 41, 42, 44, 102], "271": [33, 41], "272": [33, 41, 47, 59, 111, 231], "273": [33, 41, 58, 59, 111, 189], "275": [33, 41, 72], "276": [33, 41], "277": [33, 41, 84, 96, 111, 305, 306], "278": [33, 41, 72], "279": [33, 41], "280": [33, 36, 41, 42, 44, 102], "281": [33, 41], "282": [33, 41], "283": [33, 41], "284": [33, 41, 66, 72, 94, 111, 231], "285": [33, 41], "286": [33, 41], "287": [33, 41], "288": [33, 41, 43, 48, 66, 71, 72, 73, 153, 249], "289": [33, 41, 111, 189], "290": [33, 36, 41, 42, 44, 94, 102], "292": [33, 41, 111, 325], "296": [33, 41, 66, 72], "297": [33, 41], "297a": 33, "298": [33, 41, 111, 231, 325], "299": [33, 41, 48, 153, 249], "302": [33, 41, 115, 147], "303": [33, 41], "304": [33, 41, 59, 111, 160], "305": [33, 41, 48, 50, 52], "306": [33, 41], "307": [33, 41, 68, 73], "308": [33, 41], "309": [33, 41, 111, 217], "311": [33, 41], "312": [33, 41], "313": [33, 41, 111, 212, 237], "314": [33, 41, 111, 217], "315": [33, 41], "316": [33, 41], "317": [33, 41], "318": [33, 41, 66, 73], "319": [33, 41], "320": [33, 36, 41, 42, 44, 102, 111, 305], "321": [33, 41, 111, 160], "322": [33, 41, 52, 59], "323": [33, 41], "324": [33, 41], "325": [33, 41, 191], "326": [33, 41], "327": [33, 41, 111, 212, 237], "328": [33, 41, 44], "329": [33, 41, 58, 111, 205], "330": [33, 36, 41, 42, 44, 102], "331": [33, 41], "332": [33, 41], "333": [33, 41], "334": [33, 41, 59, 62, 73], "335": [33, 41], "338": [33, 41], "339": [33, 41], "340": [33, 36, 41, 42, 44, 102], "342": [33, 41], "343": [33, 41, 91], "345": [33, 41, 44], "346": [33, 41], "347": [33, 41], "348": [33, 41, 56, 91], "349": [33, 41], "350": [33, 36, 41, 42, 44, 102], "351": [33, 41], "352": [33, 41], "353": [33, 41], "354": [33, 41], "355": [33, 41], "356": [33, 41, 102, 109], "357": [33, 41], "358": [33, 41], "359": [33, 41], "360": [33, 36, 41, 42, 44, 62, 64, 67, 102], "361": [33, 41, 64, 71], "362": 33, "363": 33, "365": 33, "366": [33, 73], "367": [33, 64], "368": 33, "369": 33, "370": [33, 36, 42, 44, 102], "371": [33, 64, 67], "372": 33, "373": 33, "373a": 33, "374": 33, "375": 33, "376": [33, 36], "377": 33, "379": 33, "380": [33, 36, 42, 44, 102], "381": [33, 111, 325], "382": 33, "383": 33, "384": 33, "385": 33, "386": 33, "387": 33, "388": 33, "389": 33, "390": [33, 36, 42, 44, 102], "391": [33, 79, 82], "394": 33, "395": [33, 34, 45], "396": 33, "397": [33, 111, 325], "398": 33, "399": 33, "400": [33, 36, 42, 44, 102, 111, 155, 199], "401": 33, "402": [33, 35, 45], "403": 33, "404": 33, "405": [33, 111, 197], "406": 33, "407": 33, "408": 33, "409": 33, "412": [33, 90, 96], "413": 33, "414": 33, "415": [33, 56, 111, 197, 306], "416": [33, 41, 45, 226], "417": 33, "418": 33, "419": 33, "421": [33, 45], "422": [33, 40], "423": 33, "424": 33, "425": 33, "427": 33, "428": 33, "429": 33, "430": [33, 36, 42, 44, 102], "431": 33, "432": [33, 44, 62], "433": 33, "434": 33, "435": 33, "436": [33, 56, 111, 306], "437": 33, "438": 33, "439": 33, "440": [33, 36, 42, 102], "441": 33, "443": 33, "445": 33, "446": [33, 91, 96], "447": 33, "448": [33, 107, 109], "449": 33, "450": [33, 36, 42, 102], "451": 33, "452": 33, "454": 33, "455": 33, "456": 33, "457": 33, "458": 33, "459": 33, "460": [33, 36, 42, 102], "461": [33, 219], "463": [33, 189], "465": 33, "466": 33, "467": 33, "468": [33, 62, 189], "469": 33, "470": [33, 36, 42, 102], "473": 33, "475": 33, "476": [33, 78], "477": 33, "478": 33, "479": 33, "480": [33, 36, 42, 72, 73, 89, 96, 102], "481": 33, "482": 33, "483": [33, 54, 59, 115, 147], "484": 33, "485": [33, 49], "486": 33, "487": 33, "488": 33, "489": 33, "490": [33, 36, 42, 102], "491": 33, "493": 33, "494": [33, 92, 103, 104], "495": 33, "496": 33, "497": [33, 108, 109], "498": 33, "499": [33, 91, 96], "500": [33, 35, 36, 41, 42, 49, 79, 98, 102, 199], "501": 33, "502": [33, 48, 98], "503": 33, "505": 33, "507": 33, "508": 33, "509": 33, "510": [33, 36, 42, 102], "511": 33, "512": [33, 84, 139, 147, 194], "513": [33, 64, 73], "514": 33, "515": 33, "516": 33, "517": [33, 55, 59], "519": 33, "520": [33, 36, 42, 102], "521": 33, "522": 33, "523": 33, "524": 33, "525": 33, "526": 33, "527": 33, "528": [33, 44], "529": 33, "530": [33, 36, 42, 102], "531": 33, "532": 33, "533": 33, "534": 33, "535": 33, "536": 33, "537": [33, 51, 59], "538": 33, "539": 33, "540": [33, 36, 42, 62, 102], "542": 33, "543": 33, "544": [33, 111, 220], "547": [33, 42, 45], "548": 33, "549": [33, 111, 159], "550": [33, 36, 42, 102], "551": 33, "552": [33, 89, 111, 220], "553": 33, "554": 33, "555": [33, 56, 59], "556": 33, "557": 33, "558": [33, 108, 109], "559": [33, 111, 159], "560": [33, 36, 42, 102], "561": 33, "562": [33, 111, 197], "563": 33, "564": 33, "565": [33, 36, 45], "567": 33, "568": [33, 48, 62, 73], "569": 33, "570": [33, 36, 42, 102], "571": [33, 63, 73], "573": [33, 111, 197], "574": 33, "575": 33, "576": 33, "577": 33, "578": 33, "579": 33, "580": [33, 36, 42, 102], "581": [33, 59, 88, 96], "582": [33, 37, 58], "583": 33, "584": 33, "585": [33, 53, 59, 100, 109], "586": 33, "587": [33, 61, 73], "589": 33, "591": [33, 67], "592": [33, 37], "593": 33, "595": 33, "596": 33, "597": 33, "598": 33, "599": [33, 111, 187], "600": [33, 36, 42, 49, 102, 115, 147, 199], "601": 33, "602": 33, "603": 33, "604": 33, "605": 33, "606": 33, "607": 33, "608": 33, "609": 33, "610": [33, 36, 42, 102], "611": 33, "613": 33, "614": 33, "615": 33, "616": 33, "617": 33, "619": 33, "620": [33, 36, 42, 102], "622": 33, "623": [33, 70, 73], "624": 33, "625": 33, "626": [33, 105, 109], "627": 33, "628": 33, "629": 33, "634": 33, "635": 33, "636": 33, "637": 33, "638": 33, "640": [33, 36, 42, 81, 82, 102], "641": 33, "642": [33, 231, 383], "643": 33, "644": 33, "645": 33, "646": [33, 55], "647": 33, "649": 33, "650": [33, 36, 42, 92, 96, 102], "651": 33, "652": 33, "653": 33, "654": 33, "655": [33, 39, 45], "656": 33, "657": 33, "658": 33, "659": 33, "660": [33, 36, 42, 102], "661": 33, "662": 33, "663": 33, "664": 33, "665": [33, 58, 111, 114, 206, 222, 224], "666": 33, "668": 33, "669": [33, 49, 111, 388, 394], "670": [33, 36, 42, 102, 111, 114, 222, 224], "671": 33, "672": 33, "673": 33, "674": 33, "675": 33, "676": 33, "677": 33, "678": [33, 58, 111, 206], "679": 33, "680": [33, 36, 42, 102], "681": [33, 49, 111, 388, 394], "682": 33, "683": 33, "684": 33, "685": 33, "686": 33, "687": 33, "688": 33, "689": 33, "690": [33, 36, 42, 102], "691": 33, "692": 33, "693": 33, "694": 33, "695": 33, "696": [33, 64, 71], "697": 33, "699": 33, "700": [33, 36, 42, 86, 96, 102, 135, 147, 199], "701": 33, "703": 33, "704": 33, "705": 33, "706": 33, "707": 33, "708": 33, "709": 33, "710": [33, 36, 42, 102], "712": 33, "713": 33, "714": 33, "715": 33, "716": 33, "717": 33, "718": 33, "719": 33, "720": [33, 36, 42, 102], "721": 33, "722": [33, 55, 59], "723": 33, "724": 33, "725": 33, "726": 33, "727": 33, "728": 33, "729": 33, "730": [33, 36, 42, 102], "731": 33, "732": [33, 48, 50], "733": 33, "734": [33, 73], "735": [33, 70, 96], "736": [33, 34, 87], "737": 33, "739": [33, 36], "740": [33, 42, 102], "741": 33, "742": 33, "743": 33, "745": 33, "746": 33, "13a": 33, "32a": 33, "bug": [33, 118, 125, 126, 127, 131, 144, 169, 170, 376, 378, 379], "request": [33, 100, 122, 135, 147, 151, 161, 167, 194, 195, 196, 279, 302, 325, 354, 355, 382, 419, 420], "save_as_html": [33, 61, 62, 64, 75, 91, 92, 174, 381, 382, 383, 384, 385, 397, 399, 419], "although": [33, 39, 49, 79, 155, 167, 170, 174], "usual": [33, 48, 77, 79, 94, 142, 147, 153, 155, 156, 157, 162, 164, 167, 169, 170, 173, 189, 244, 245, 251, 254, 319, 371, 387, 418], "classification_accuraci": [33, 98], "chance_level": 33, "4f": [33, 34, 98], "7173": 33, "994": [33, 45], "plot_haxby_glm_decod": [33, 45], "approach": [34, 40, 41, 48, 49, 66, 69, 111, 132, 147, 150, 153, 154, 155, 159, 161, 162, 163, 164, 168, 246, 282, 305, 306, 401, 405, 420, 421], "maxim": [34, 167, 254, 256, 257, 286, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "signific": [34, 49, 66, 75, 80, 111, 154, 159, 161, 164, 167, 279, 325, 398], "optimist": [34, 154], "lead": [34, 47, 48, 57, 84, 138, 145, 147, 160, 161, 162, 164, 167, 181, 252, 310, 313, 400, 419], "overfit": [34, 155, 159], "loop": [34, 44, 71, 100, 138, 147, 154, 161, 173, 242, 243, 244, 245], "judg": [34, 86], "never": [34, 154, 161, 169, 297, 298, 397], "grid": [34, 51, 68, 79, 84, 99, 155, 160, 167, 173, 181, 222, 224, 242, 243, 244, 245, 268, 269, 270, 274, 275, 276, 297, 336, 338, 341, 355, 360, 365, 368, 372, 373, 374, 375, 419], "difficulti": 34, "composit": 34, "800": [34, 42, 87, 102, 199, 264, 277, 361, 399], "complet": [34, 60, 73, 94, 110, 113, 114, 135, 147, 148, 154, 156, 163, 170, 173, 174, 209, 211, 227, 241, 264, 267, 304, 307, 314, 325, 360, 361, 362, 363, 365, 367, 368, 369, 371, 372, 373, 374, 375, 387, 397, 398, 399], "stabl": [34, 48, 56, 98, 111, 132, 145, 147, 153, 155, 156, 161, 169, 191, 231, 242, 243, 244, 245, 249, 250, 305, 383, 405, 420], "cross_valid": [34, 98, 132, 147, 157, 242, 243, 244, 245], "excel": 34, "explan": [34, 84, 102, 154, 155, 156, 157, 162, 172, 174, 188], "param": [34, 179, 180, 181, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 277, 308, 309, 310, 311, 312, 313, 314, 315, 386, 387, 388, 389], "cv_score": [34, 98], "1f": [34, 44, 376, 379], "901": 34, "918": 34, "749": 34, "screening_percentile_rang": 34, "val_scor": 34, "sp": 34, "sreen": 34, "000": [34, 42, 79, 94, 159], "8107": 34, "6111": 34, "8493": 34, "3889": 34, "8437": 34, "8389": 34, "5000": [34, 49, 55, 98, 102], "8059": 34, "8141": 34, "kfold": [34, 36, 37, 40, 44, 247, 248], "nested_cv_scor": 34, "5880": [34, 102], "tight": [34, 161], "axhlin": [34, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "frameon": [34, 326, 328, 329], "plot_haxby_grid_search": [34, 45], "overal": [35, 66, 70, 161, 162, 247, 248], "non_rest": 35, "unique_condit": 35, "return_index": 35, "appear": [35, 54, 89, 264, 277, 363, 398], "argsort": [35, 42, 43, 103], "fit_transform": [35, 36, 42, 47, 49, 50, 51, 52, 54, 55, 56, 58, 61, 70, 89, 92, 98, 99, 100, 102, 103, 104, 105, 106, 113, 149, 152, 163, 174, 179, 249, 250, 264, 277, 308, 309, 310, 311, 312, 313, 314, 315, 386, 387, 388, 389], "selectkbest": [35, 41, 127, 147], "f_classif": [35, 36, 41, 94, 98, 157], "multiclass": [35, 155], "onevsoneclassifi": [35, 155], "onevsrestclassifi": [35, 155], "svc_ovo": 35, "svc_ova": 35, "cross_val_scor": [35, 98, 157], "cv_scores_ovo": 35, "cv_scores_ova": 35, "ovo": 35, "ova": 35, "parallel": [35, 36, 42, 43, 44, 47, 48, 53, 57, 58, 79, 98, 102, 105, 145, 147, 161, 164, 279, 311, 325], "backend": [35, 36, 42, 43, 44, 48, 53, 57, 58, 98, 102, 105, 122, 132, 137, 142, 147, 250, 380], "sequentialbackend": [35, 36, 42, 43, 44, 48, 53, 57, 58, 98, 102, 105], "concurr": [35, 36, 42, 43, 44, 48, 53, 57, 58, 98, 101, 102, 105, 108], "worker": [35, 36, 42, 43, 44, 48, 53, 57, 58, 98, 102, 105, 325], "elaps": [35, 36, 42, 43, 44, 48, 53, 57, 58, 98, 102, 105], "finish": [35, 36, 42, 43, 44, 48, 53, 57, 58, 98, 102, 105, 161, 281, 301, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 373, 381, 383, 385], "601855088049469": 35, "6712058072321548": 35, "boxplot": [35, 94], "text": [35, 63, 75, 94, 98, 105, 111, 154, 162, 171, 203, 211, 221, 251, 255, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 421], "metric": [35, 40, 41, 51, 79, 135, 147, 154, 155, 159, 167, 242, 243, 244, 245], "confusion_matrix": [35, 155], "y_pred_ovo": 35, "hot_r": 35, "y_pred_ova": 35, "3174": [35, 45, 143, 147], "plot_haxby_multiclass": [35, 45], "intrins": [36, 111, 151, 199, 200, 203, 306], "process_mask_img": [36, 44, 159, 246], "back": [36, 41, 42, 48, 55, 98, 100, 102, 104, 113, 120, 128, 129, 147, 151, 159, 162, 174, 249, 250, 308, 311, 314, 324, 356, 386, 387, 388], "astyp": [36, 40, 41, 43, 44, 68, 75, 84, 94], "process_mask": [36, 44, 126, 147], "picked_slic": 36, "02_decod": 36, "plot_haxby_searchlight": [36, 45], "thread": 36, "progress": [36, 42, 102, 105, 122, 147, 264], "mess": 36, "onc": [36, 49, 57, 114, 142, 147, 148, 153, 154, 161, 163, 164, 166, 167, 170, 174, 386, 405], "job": [36, 42, 44, 79, 102, 105, 114, 264, 277, 279, 325], "shuffl": [36, 37, 48, 244, 245], "lt": [36, 75, 89, 91, 92], "0x7fdb4b753c10": 36, "gt": [36, 75, 89, 91, 92], "0x7fdb5829d820": 36, "environ": [36, 49, 52, 53, 58, 62, 75, 77, 132, 133, 135, 142, 147, 154, 169, 172, 233, 382, 420], "rerun": [36, 49, 52, 53, 58, 62, 75, 77], "trust": [36, 49, 52, 53, 58, 62, 75, 77, 164], "unabl": [36, 49, 52, 53, 58, 62, 70, 75, 77, 135, 147], "render": [36, 49, 52, 53, 58, 62, 75, 77, 133, 147, 162, 339, 367, 369, 376, 378, 379, 381, 383, 384, 385], "page": [36, 49, 52, 53, 58, 62, 75, 77, 111, 132, 136, 142, 143, 144, 147, 151, 155, 159, 161, 162, 164, 170, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405], "nbviewer": [36, 49, 52, 53, 58, 62, 75, 77], "searchlightsearchlight": 36, "fmri_mask": [36, 92, 98, 102, 105, 106, 113], "f_valu": [36, 44], "p_valu": [36, 44, 77, 79, 94, 107, 139, 147, 252, 264, 277], "log10": [36, 42, 44, 77, 79, 94, 102, 105, 106, 279, 325, 398], "p_unmask": 36, "inverse_transform": [36, 40, 42, 49, 55, 92, 98, 100, 102, 103, 104, 105, 106, 112, 128, 135, 144, 147, 151, 179, 249, 250, 308, 309, 310, 311, 312, 313, 314, 315, 386, 387, 388, 389, 421], "surrog": [36, 102], "mean_fmri": 36, "searchlight_img": 36, "scores_": [36, 44, 159], "center": [36, 47, 50, 51, 55, 58, 61, 79, 99, 105, 106, 133, 144, 147, 149, 152, 174, 181, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 358, 359, 386, 387, 389, 398, 405], "hot": [36, 305], "f_score": [36, 158, 421], "p_ma": 36, "f_score_img": 36, "demo": [37, 100, 101, 108, 113, 138, 142, 147, 162, 214], "chen": [37, 111, 144, 147, 219], "namburi": 37, "elliott": [37, 56, 111, 305, 306], "heinzl": 37, "soon": [37, 71, 170], "chee": 37, "w": [37, 44, 106, 111, 179, 181, 199, 202, 203, 205, 209, 219, 227, 247, 248], "hayn": [37, 111, 159], "2011": [37, 49, 58, 111, 114, 119, 127, 147, 148, 155, 159, 160, 190, 197, 199, 200, 203, 206, 212, 220, 222, 224, 237, 305, 306], "coars": 37, "mesh": [37, 69, 108, 127, 132, 135, 140, 144, 147, 163, 168, 231, 370, 376, 377, 378, 379, 383, 385, 403, 404, 405, 421], "pial_mesh": 37, "term": [37, 54, 66, 89, 92, 112, 143, 147, 153, 155, 161, 164, 167, 169, 172, 173, 219, 222, 247, 248, 251, 271, 305, 401], "adjac": [37, 135, 147], "nearbi": 37, "infl_mesh": 37, "infl_": 37, "nn": 37, "nearestneighbor": 37, "radius_neighbors_graph": 37, "tolil": 37, "make_pipelin": [37, 40, 44], "standardscal": [37, 39, 40, 41, 44], "linear_model": [37, 40, 41, 44, 250], "ridgeclassifi": 37, "search_light": [37, 246], "preced": [37, 162, 174, 264], "search": [37, 89, 162, 170, 181, 242, 243, 244, 245, 302], "light": [37, 127, 133, 135, 147, 162, 279], "sulc_": 37, "plot_haxby_searchlight_surfac": [37, 45], "overview": [38, 159, 161, 169], "fetch_stimuli": [38, 211], "stimulus_inform": 38, "stim_typ": 38, "skip": [38, 49, 56, 377, 380], "file_nam": [38, 397], "suptitl": [38, 40, 42, 43, 44, 66, 79, 100, 101, 105], "img_path": [38, 303], "ravel": [38, 41, 43, 44, 102, 105, 106], "imread": 38, "077": [38, 41, 45], "plot_haxby_stimuli": [38, 45], "gain": [39, 66, 156, 161, 220], "fetch_mixed_gambl": [39, 143, 147], "zmap_filenam": 39, "zmap": [39, 101, 220], "behavioral_target": 39, "svr": [39, 42, 44, 135, 147, 155, 243, 245, 246], "_base": [39, 48], "convergencewarn": [39, 92, 104], "solver": [39, 111, 160, 242, 244, 247, 248], "termin": [39, 154, 420], "earli": [39, 111, 160, 222, 224, 282, 386, 401], "max_it": [39, 40, 43, 48, 50, 57, 180, 181, 183, 242, 243, 244, 245, 247, 248], "10000": [39, 42, 49, 55, 102, 105, 279, 325], "pre": [39, 64, 67, 94, 101, 127, 132, 144, 147, 164, 174, 255], "minmaxscal": 39, "0x7fdb583399d0": 39, "observ": [39, 44, 58, 61, 63, 66, 71, 79, 80, 81, 102, 155, 159, 163, 164, 167, 169, 174, 255, 386], "learnt": 39, "impos": [39, 120, 147], "relat": [39, 46, 49, 50, 63, 64, 65, 66, 67, 68, 69, 71, 81, 100, 106, 110, 111, 114, 126, 127, 147, 149, 150, 152, 154, 155, 158, 161, 162, 167, 168, 169, 170, 174, 179, 208, 213, 234, 235, 238, 249, 250, 252, 264, 288, 302, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 387, 389, 402, 420, 421], "guid": [39, 138, 145, 147, 162, 166, 168, 169, 174, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 410, 411, 418, 420], "unstructur": 39, "graph_net": 39, "heavi": [39, 42, 148, 162], "spacenetregressor": [39, 43, 160, 247], "regressor": [39, 43, 56, 62, 63, 66, 100, 101, 105, 108, 138, 139, 143, 145, 147, 149, 155, 163, 219, 243, 245, 248, 260, 264, 266, 271, 279, 305, 306, 325], "tv_l1": 39, "ep": [39, 43, 247, 248], "prefer": [39, 51, 99, 151, 162, 172], "1805": 39, "plot_mixed_gambles_frem": [39, 45], "partli": [40, 42, 161, 164, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 208, 211, 212, 213, 217, 219, 220, 221, 226, 232], "uchida": [40, 41, 111, 221], "h": [40, 41, 56, 65, 111, 193, 202, 209, 226, 227, 231, 251, 255, 305, 306], "yamashita": [40, 41, 111, 221], "sato": [40, 41, 111, 221], "morito": [40, 41, 111, 221], "tanab": [40, 41, 111, 221], "kamitani": [40, 41, 111, 221], "neuron": [40, 41, 58, 111, 159, 206, 221], "929": [40, 41, 111, 221], "sound": [40, 164], "real": [40, 154, 159, 161, 164, 172, 174], "world": [40, 172, 174, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 359, 362, 371], "stimulu": [40, 41, 65, 100, 164], "particip": [40, 56, 66, 111, 162, 164, 167, 305, 306], "10x10": [40, 41], "binari": [40, 41, 66, 75, 144, 147, 167, 170, 174, 213, 242, 243, 244, 245, 247, 248, 374, 398], "pixel": [40, 41, 164, 264, 277, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 381, 384, 399], "fetch_miyawaki2008": [40, 41, 89], "fmri_random_runs_filenam": 40, "stimuli_random_runs_filenam": 40, "multiniftimask": [40, 41, 48, 49, 139, 141, 147, 171, 242, 243, 244, 245, 247, 248, 249, 250, 277, 279, 325, 387, 421], "clean": [40, 43, 48, 49, 53, 54, 56, 58, 70, 103, 111, 125, 131, 132, 135, 139, 140, 142, 145, 147, 170, 173, 174, 179, 249, 250, 264, 282, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 361, 387, 389], "fmri_data": [40, 94, 264, 277], "wiht": 40, "stimulus_shap": 40, "stimulus_run": 40, "reshap": [40, 41, 44, 50, 68, 77, 105, 128, 147, 152, 179], "loadtxt": [40, 41], "pylab": [40, 372], "wspace": [40, 44, 63], "stack": [40, 51, 58, 140, 147, 167, 186], "offset": [40, 51, 84, 138, 147, 173, 198, 199, 297], "begin": [40, 62, 66, 71, 138, 147, 167], "end": [40, 44, 49, 62, 86, 94, 102, 129, 139, 147, 159, 161, 162, 173, 233, 303, 304], "fmri_run": 40, "stimuli_run": 40, "2860": [40, 102], "5438": 40, "proce": [40, 55, 65, 113], "independ": [40, 48, 66, 97, 109, 110, 120, 147, 151, 153, 154, 159, 161, 164, 167, 174, 208, 242, 243, 244, 245, 249, 282, 289, 294, 305, 306, 308, 314, 325, 375, 380, 401], "hold": [40, 78, 161, 162, 170, 249, 250, 271, 325, 336, 387], "held": [40, 159, 162, 242, 243, 244, 245, 420], "10th": 40, "r2_score": [40, 248], "multioutput": [40, 248], "raw_valu": 40, "threshold_img": [40, 81, 88, 120, 142, 147, 280, 281], "cut_scor": 40, "bring": [40, 48, 156, 162, 169, 324], "score_map_img": 40, "thresholded_score_map_img": 40, "mark": [40, 56, 100, 111, 219, 305, 306], "four": [40, 44, 66, 142, 147, 174], "coord_transform": [40, 129, 147], "def": [40, 41, 44, 47, 53, 64, 66, 68, 100, 107, 376], "index_to_xy_coord": 40, "newaxi": [40, 44, 80, 84], "xy_indices_of_special_voxel": 40, "marker": [40, 133, 135, 138, 140, 147, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 362, 371, 381, 382, 384, 389, 391, 421], "add_mark": [40, 55, 61, 70, 100, 124, 130, 133, 147, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 419], "magenta": [40, 70, 419], "lw": [40, 70], "construct": [40, 52, 54, 98, 150, 153, 159, 162, 163, 168, 169, 278], "gcf": 40, "set_size_inch": [40, 70], "closer": [40, 49, 161, 398], "presenc": [40, 66, 102, 389, 391], "lasso": [40, 57, 58, 148, 160, 161, 247, 248, 250], "lassolarscv": 40, "sparsiti": [40, 48, 111, 120, 147, 148, 152, 153, 155, 156, 160, 161, 167, 181, 183, 247, 248, 250, 389], "marked_pixel": 40, "gridspec": [40, 140, 147], "gs1": 40, "1780": [40, 42, 102], "1951": [40, 135, 147], "2131": [40, 135, 147], "rf": [40, 68], "named_step": [40, 44, 98], "zeros_lik": [40, 68, 84, 102], "vmax": [40, 44, 49, 50, 52, 53, 54, 55, 56, 57, 58, 76, 79, 80, 84, 90, 100, 102, 105, 107, 118, 135, 145, 147, 152, 360, 361, 365, 367, 368, 370, 373, 374, 375, 376, 378, 379, 381, 382, 383, 385, 419], "ax_im": 40, "masked_less": [40, 106], "green": [40, 49, 89, 92, 111, 140, 147, 207, 251, 255], "add_patch": 40, "updat": [40, 93, 100, 122, 126, 127, 132, 135, 141, 142, 144, 147, 170, 179, 180, 181, 199, 222, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 277, 308, 309, 310, 311, 312, 313, 314, 315, 386, 387, 388, 389], "1935": [40, 111], "rdpu": 40, "0x7fdb581ee070": 40, "rel": [40, 49, 65, 66, 91, 162, 164, 167, 170, 242, 243, 244, 245, 246, 247, 248, 264, 266, 271, 286, 381, 383, 385], "roughli": [40, 155, 162, 164], "relationship": [40, 42, 75, 159, 166, 168, 169, 219, 325], "774": [40, 45], "plot_miyawaki_encod": [40, 45], "elabor": [41, 120, 147, 419], "articl": [41, 111, 156, 159, 160, 161, 169, 187, 189, 190, 191, 193, 194, 197, 199, 200, 201, 207, 212, 217, 219, 220, 221, 222, 224, 226, 232, 237, 244, 245, 305, 306, 325, 361, 402], "sy": 41, "stderr": 41, "miyawaki_dataset": [41, 89], "x_random_filenam": 41, "x_figure_filenam": 41, "y_random_filenam": 41, "y_figure_filenam": 41, "y_shape": 41, "miyawaki2008": [41, 89], "data_figure_run01": [41, 89], "n_pixel": 41, "n_featur": [41, 47, 57, 161, 179, 180, 181, 183, 185, 242, 243, 244, 245, 247, 248, 249, 250, 251, 264, 277, 386, 388, 394], "list_of_2d_arrai": 41, "squar": [41, 43, 49, 66, 100, 102, 105, 111, 149, 155, 160, 161, 163, 179, 248, 251, 254, 255, 256, 264, 277, 288, 304, 305, 310, 313, 325, 386, 387, 388, 402], "y_row": 41, "y_col": 41, "height_tf": 41, "width_tf": 41, "yt_tall": 41, "dot": [41, 44, 55, 100, 103, 161, 254, 255, 256, 257, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "yt_larg": 41, "yt_big": 41, "r_": 41, "omp": 41, "orthogon": [41, 132, 147, 167, 264, 266, 271, 277, 282, 327, 336, 337, 338, 341, 355, 360, 362, 365, 367, 368, 371, 373, 374, 375, 399, 401], "pursuit": 41, "orthogonalmatchingpursuit": 41, "clf": [41, 129, 147], "n_clf": 41, "03d": [41, 100], "scl": 41, "n_nonzero_coef": 41, "002": 41, "003": 41, "004": [41, 111, 221], "005": [41, 111, 156, 244, 245], "006": [41, 111, 206], "007": [41, 111, 197, 220], "009": [41, 111, 361], "011": 41, "012": [41, 80, 82], "013": 41, "014": 41, "015": 41, "017": 41, "018": [41, 111, 305, 306], "019": [41, 48, 59], "020": [41, 56, 111, 305, 306], "021": 41, "023": 41, "024": 41, "025": 41, "026": 41, "027": 41, "028": 41, "029": 41, "030": 41, "031": 41, "032": 41, "033": [41, 111, 212, 237], "034": 41, "035": 41, "036": 41, "037": [41, 111], "038": 41, "039": 41, "040": 41, "041": [41, 111, 159], "042": [41, 111, 305, 306, 402], "043": 41, "044": 41, "045": 41, "046": 41, "047": 41, "048": [41, 111, 305], "049": [41, 104, 109], "050": 41, "051": [41, 57, 59], "052": [41, 111, 217], "053": 41, "054": [41, 109, 111, 159], "055": 41, "056": 41, "057": 41, "058": 41, "059": [41, 61, 73], "060": [41, 76, 111, 259, 325], "061": [41, 111, 279, 325], "062": [41, 111, 160], "063": 41, "064": [41, 111, 305, 306], "065": 41, "066": 41, "067": 41, "068": 41, "069": [41, 87, 96], "070": 41, "071": [41, 96], "072": 41, "073": [41, 56, 111, 155, 306], "074": 41, "075": 41, "076": 41, "078": 41, "079": 41, "080": [41, 111], "081": 41, "082": [41, 111, 191], "083": 41, "084": 41, "085": 41, "086": 41, "087": 41, "088": 41, "089": 41, "090": 41, "091": 41, "092": 41, "093": 41, "094": 41, "095": 41, "096": 41, "097": 41, "098": 41, "099": 41, "split_multi_scal": 41, "multi_scal": 41, "yw": 41, "yh": 41, "split_index": 41, "tall": 41, "y_pred_tal": 41, "1x2": 41, "applic": [41, 140, 147, 149, 155, 161, 168, 264, 277, 311, 325, 392, 393, 399, 419, 420, 421], "calculu": 41, "height_tf_i": 41, "flat": [41, 173], "y_pred_larg": 41, "2x1": 41, "width_tf_i": 41, "y_pred_big": 41, "2x2": [41, 133, 147, 336, 338, 341, 355, 360, 365, 368, 373, 374, 375, 419], "accuracy_scor": [41, 51], "precision_scor": 41, "recall_scor": 41, "f1_score": 41, "recal": [41, 242, 244], "zero_divis": 41, "f1": [41, 154, 242, 244], "801208": 41, "413969": 41, "572388": 41, "465973": 41, "six": 41, "ground": [41, 44, 57, 154], "truth": [41, 44, 57, 154], "sp1": 41, "sp2": 41, "sp3": 41, "binar": [41, 94, 141, 147, 281], "miyawaki2008_reconstruction_": 41, "805": [41, 45, 71], "plot_miyawaki_reconstruct": [41, 45], "densiti": [42, 57, 75, 161, 166, 168, 212, 226], "agre": [42, 75, 162, 226, 277, 279], "agreement": [42, 62, 75, 226], "spm8": [42, 75, 189, 226], "newseg": [42, 75], "limit": [42, 75, 88, 149, 159, 161, 162, 222, 306, 361], "ran": 42, "prepar": [42, 58, 94, 99, 101, 108, 113, 122, 147, 158, 171, 309, 310, 311, 312, 313, 315, 389, 421], "impact": [42, 66, 78, 142, 147, 159, 162, 170, 174, 264, 277, 306], "significantli": [42, 66, 132, 147, 159, 161], "noisi": [42, 92, 148], "detriment": [42, 306], "permut": [42, 77, 79, 102, 105, 111, 138, 147, 157, 159, 164, 279, 296, 325, 412], "exact": [42, 159, 162, 164, 212, 213, 419], "comparison": [42, 49, 51, 57, 62, 66, 81, 93, 99, 100, 102, 111, 114, 148, 151, 158, 159, 160, 165, 167, 190, 421], "clearer": [42, 162], "author": [42, 47, 55, 75, 77, 102, 103, 105, 106, 107, 111, 161, 162, 170], "dhomatob": [42, 75], "fr": [42, 49, 75, 102, 105, 106, 111, 160, 189, 197, 389], "apr": [42, 75, 111, 198], "2014": [42, 49, 75, 77, 100, 102, 105, 106, 111, 151, 152, 159, 160, 219, 305, 325, 389], "andr": [42, 111, 388, 394], "2017": [42, 56, 111, 127, 128, 129, 147, 154, 156, 198, 199, 217, 244, 245, 305, 306, 361], "oasis_dataset": [42, 75], "fetch_oasis_vbm": [42, 43, 75], "gray_matter_map_filenam": [42, 75], "gray_matter_map": [42, 43, 75, 226], "ext_var": [42, 43, 75, 77, 79, 105, 226], "train_test_split": [42, 43], "gm_imgs_train": [42, 43], "gm_imgs_test": [42, 43], "age_train": [42, 43], "age_test": [42, 43], "train_siz": [42, 43], "white_matter_map": [42, 75, 226], "oasis1": [42, 43, 75], "oas1_0001_mr1": [42, 43, 75], "mwrc1oas1_0001_mr1_mpr_anon_fslswapdim_bet": [42, 43, 75], "mwrc2oas1_0001_mr1_mpr_anon_fslswapdim_bet": [42, 75], "cach": [42, 43, 49, 52, 56, 102, 105, 106, 119, 120, 147, 151, 180, 242, 243, 244, 245, 247, 248, 249, 250, 264, 277, 283, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 387, 388, 389, 405], "gm_maps_mask": 42, "variancethreshold": 42, "variance_threshold": 42, "gm_maps_threshold": 42, "get_support": 42, "decoderregressor": [42, 135, 138, 139, 147, 155, 242, 245], "benefit": [42, 49, 56, 66, 135, 147, 162, 173], "some_high_valu": [42, 43], "advantag": [42, 43, 69, 161, 174], "hyperparamet": 42, "neg_mean_absolute_error": [42, 243, 245], "trend": [42, 43, 89, 174], "etc": [42, 43, 80, 89, 92, 94, 114, 160, 163, 167, 172, 219, 242, 243, 244, 245, 247, 248, 256, 314], "perm": [42, 43], "age_pr": 42, "prediction_scor": 42, "670598": 42, "bg_filenam": 42, "absolut": [42, 43, 58, 135, 147, 159, 161, 162, 204, 214, 227, 286, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 359, 360, 362, 367, 368, 370, 374, 375, 376, 379, 382, 383, 385, 419], "year": [42, 43, 111, 161, 170, 208, 226], "0x7fdb5831ad00": 42, "mass_univari": [42, 79, 102, 105, 138, 144, 147, 159, 166], "permuted_ol": [42, 79, 102, 105, 138, 143, 144, 147, 159, 166, 279], "neg_log_pv": [42, 77, 79, 102], "t_scores_original_data": [42, 102], "intercept": [42, 75, 76, 77, 79, 80, 81, 102, 106, 159, 242, 243, 244, 245, 247, 248, 278, 279, 325], "n_perm": [42, 77, 79, 102, 105, 279, 325], "signed_neg_log_pv": [42, 102], "signed_neg_log_pvals_unmask": [42, 102], "rdbu_r": [42, 44, 102, 372], "log_": [42, 102, 105, 106], "parametr": [42, 65, 66, 77, 79, 102, 105, 106, 111, 159, 166, 167, 252, 253, 258, 282, 401], "n_detect": [42, 102, 105], "detect": [42, 68, 77, 79, 89, 100, 102, 106, 111, 159, 164, 167, 174, 179, 305, 306, 386, 419], "1877098083496": 42, "49169397354126": 42, "218757390975952": 42, "841973145802818": 42, "50553798675537": 42, "22144055366516": 42, "02575476964315": 42, "833818537848337": 42, "619007110595703": 42, "435540384716457": 42, "21909785270691": 42, "013102596456356": 42, "826216061909992": 42, "634241305864776": 42, "502215794154576": 42, "38632893562317": 42, "264697909355164": 42, "127422515083765": 42, "982342349158394": 42, "843823897211177": 42, "704411268234253": 42, "577195894150506": 42, "539940357208256": 42, "406146360480268": 42, "27853473027547": 42, "14507222175598": 42, "009883587176983": 42, "88684555336281": 42, "758284977504186": 42, "63157479516391": 42, "50290036201477": 42, "37844880165592": 42, "255251288414": 42, "135075215137366": 42, "015046484330124": 42, "89222768374852": 42, "77702021598816": 42, "66719097060126": 42, "55400310064617": 42, "43271802021907": 42, "314868927001953": 42, "189402615151753": 42, "068797100157965": 42, "949572890303855": 42, "8333852074363": 42, "714613967471653": 42, "598694718402367": 42, "480673840705386": 42, "37928851445516": 42, "26330685128971": 42, "163650035858154": 42, "08408524943333": 42, "00320258507362": 42, "89560205081724": 42, "782715329417478": 42, "664495663209394": 42, "549641609191895": 42, "4332467589462": 42, "316654723266073": 42, "193930880498076": 42, "076152324676514": 42, "955237638754923": 42, "83736382761309": 42, "721006022559271": 42, "607367128133774": 42, "491711524816662": 42, "37774338866725": 42, "324429262929888": 42, "209892006481395": 42, "09744039480237": 42, "978672402245659": 42, "861266418242119": 42, "745148128933376": 42, "628311186620634": 42, "505280572014886": 42, "750": [42, 102], "387948910395306": 42, "760": [42, 102], "272430081116525": 42, "770": [42, 102], "154259647641863": 42, "036756821167774": 42, "790": [42, 102], "918798950654041": 42, "801994919776917": 42, "810": [42, 48, 102], "682344692724723": 42, "820": [42, 102], "56544523122834": 42, "830": [42, 102], "443404200565384": 42, "840": [42, 102], "320097276142665": 42, "850": [42, 102], "197232653112973": 42, "860": [42, 102], "076137054798213": 42, "870": [42, 102], "959194542347701": 42, "880": [42, 102], "839556520635432": 42, "890": [42, 102], "720244597852899": 42, "900": [42, 102, 135, 147, 199], "60182817776998": 42, "486116317602304": 42, "920": [42, 102], "372072240580684": 42, "930": [42, 102], "256927449216127": 42, "940": [42, 62, 100, 101, 102, 108], "142981498799426": 42, "950": [42, 102], "029030762220685": 42, "960": [42, 55, 79, 102], "913230935732523": 42, "970": [42, 102], "799452093458667": 42, "980": [42, 102], "685882393194705": 42, "990": [42, 102], "5718792688967": 42, "1000": [42, 49, 77, 94, 102, 151, 164, 199, 386], "46236276626587": 42, "1010": [42, 102], "348815002063713": 42, "1020": [42, 102], "232249933130602": 42, "1030": [42, 102], "116391624061807": 42, "1040": [42, 102], "001569454486553": 42, "88440972282773": 42, "1060": [42, 102], "765240151927157": 42, "1070": [42, 102], "648023705616176": 42, "1080": [42, 102, 111, 325], "531324545542398": 42, "1090": [42, 48, 102], "412822167807763": 42, "1100": [42, 102], "293934887105769": 42, "1110": [42, 102], "174279756374188": 42, "1120": [42, 102], "053861004965645": 42, "1130": [42, 102], "935542370365784": 42, "1140": [42, 102], "817211987679466": 42, "1150": [42, 102], "699465886406276": 42, "1160": [42, 102], "580585857917523": 42, "1170": [42, 102], "462476832234962": 42, "1180": [42, 102], "343745086152675": 42, "1190": [42, 102], "225015572139196": 42, "1200": [42, 50, 59, 102], "107048829396565": 42, "1210": [42, 102], "989309269534656": 42, "1220": [42, 102], "872588751746006": 42, "1230": [42, 102, 109], "756767484230723": 42, "1240": [42, 102], "64002480814534": 42, "1250": [42, 59, 102], "522315740585327": 42, "1260": [42, 54, 59, 102], "406779781220452": 42, "1270": [42, 102], "2907042353172": 42, "1280": [42, 102], "176415652036667": 42, "1290": [42, 102], "060451015945553": 42, "1300": [42, 102], "943920777394221": 42, "1310": [42, 102], "828985900369309": 42, "1320": [42, 102], "7127087766473945": 42, "1330": [42, 102], "597074947859112": 42, "1340": [42, 102, 111, 160], "4807276263165825": 42, "365306907229953": 42, "1360": [42, 102], "249362721162684": 42, "1370": [42, 102, 130, 147], "133420188931653": 42, "1380": [42, 102], "018191085345503": 42, "1390": [42, 102], "90296693156949": 42, "1400": [42, 102], "787266867501395": 42, "1410": [42, 102], "671607129117276": 42, "1420": [42, 102], "556604099945283": 42, "1430": [42, 102], "441162951342709": 42, "1440": [42, 102], "326677680015564": 42, "212657468072299": 42, "1460": [42, 102], "098268094128125": 42, "1470": [42, 102], "9839541441729285": 42, "1480": [42, 102], "869365679251182": 42, "1490": [42, 102], "756075174216456": 42, "1500": [42, 88, 102], "641944169998169": 42, "1510": [42, 102], "52745916827625": 42, "1520": [42, 102], "413270373093455": 42, "1530": [42, 102], "299103394053341": 42, "1540": [42, 102], "18513646373501": 42, "1550": [42, 102], "071254591788016": 42, "1560": [42, 102], "957909828577286": 42, "1570": [42, 102], "84359429748195": 42, "1580": [42, 102], "730394810060911": 42, "1590": [42, 102], "616522768008634": 42, "1600": [42, 102, 264, 277, 399], "502670586109161": 42, "1610": [42, 102], "388773570149582": 42, "1620": [42, 102], "275002773897147": 42, "1630": [42, 102], "161301165270659": 42, "1640": [42, 102], "047540856570732": 42, "1650": [42, 102], "933944622675578": 42, "1660": [42, 102], "820662570286946": 42, "1670": [42, 102], "707696092342902": 42, "1680": [42, 102], "594409533909389": 42, "1690": [42, 102], "481179412300065": 42, "1700": [42, 102], "367964113459868": 42, "1710": [42, 102], "2550773202327257": 42, "1720": [42, 102], "1421282235966173": 42, "1730": [42, 102], "0292807714098453": 42, "1740": [42, 102], "9167658953831115": 42, "1750": [42, 102], "8040762288229804": 42, "1760": [42, 102], "691288503733548": 42, "1770": [42, 102], "578491286369367": 42, "465796526898159": 42, "1790": [42, 102], "3531432378225485": 42, "1800": [42, 102], "2405298286014133": 42, "1810": [42, 102], "1280305161660547": 42, "1820": [42, 102], "015497142141992": 42, "1830": [42, 102], "9030351417312206": 42, "1840": [42, 102], "7907560182654338": 42, "1850": [42, 102], "6786416350184261": 42, "1860": [42, 102], "566422575263567": 42, "1870": [42, 102], "4542961694340018": 42, "1880": [42, 102], "3421930049328092": 42, "1890": [42, 102], "2300925052985943": 42, "1900": [42, 102], "118195508655749": 42, "1910": [42, 102], "006262027780423": 42, "1920": [42, 102], "8943600257237752": 42, "1930": [42, 102], "7824754171420872": 42, "1940": [42, 102], "6706258144575297": 42, "1950": [42, 102], "5588053862253824": 42, "1960": [42, 102], "4470205161036277": 42, "1970": [42, 102], "3352194038139382": 42, "1980": [42, 102], "22345447781110053": 42, "1990": [42, 102], "11172896773371864": 42, "1976": 42, "1896": [42, 45], "plot_oasis_vbm": [42, 45, 135, 147], "ag": [43, 46, 59, 78, 97, 109, 110, 111, 135, 147, 148, 155, 156, 160, 166, 167, 168, 169, 179, 187, 197, 208, 212, 219, 226, 232, 237, 242, 243, 244, 245, 247, 248, 308, 313, 362, 372, 380], "concentr": [43, 162, 164, 167], "increas": [43, 44, 66, 70, 79, 89, 92, 103, 104, 129, 147, 158, 159, 161, 164, 167, 170, 173, 183, 279, 306, 319, 325, 360, 373, 374, 375, 382, 387, 400, 421], "ram": 43, "box": [43, 84, 98, 104, 128, 147, 155, 162, 173, 297], "dataset_fil": 43, "gm_img": 43, "check_random_st": [43, 44], "rng": [43, 162], "intermedi": [43, 69, 157, 169], "graph": [43, 47, 53, 57, 148, 150, 160, 161, 167, 168, 242, 243, 247, 248, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 371, 421], "beauti": 43, "tv": [43, 111, 160, 242, 243, 247, 248], "l1": [43, 111, 155, 156, 160, 180, 183, 242, 243, 244, 247, 248], "expens": 43, "longer": [43, 104, 118, 129, 133, 135, 138, 140, 142, 144, 145, 147, 164], "runtim": [43, 144, 147, 162, 247, 248], "mse": [43, 247, 248, 256], "oas1_0003_mr1": 43, "mwrc1oas1_0003_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0086_mr1": 43, "mwrc1oas1_0086_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0052_mr1": 43, "mwrc1oas1_0052_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0211_mr1": 43, "mwrc1oas1_0211_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0216_mr1": 43, "mwrc1oas1_0216_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0096_mr1": 43, "mwrc1oas1_0096_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0182_mr1": 43, "mwrc1oas1_0182_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0041_mr1": 43, "mwrc1oas1_0041_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0214_mr1": 43, "mwrc1oas1_0214_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0069_mr1": 43, "mwrc1oas1_0069_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0025_mr1": 43, "mwrc1oas1_0025_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0159_mr1": 43, "mwrc1oas1_0159_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0113_mr1": 43, "mwrc1oas1_0113_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0038_mr1": 43, "mwrc1oas1_0038_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0013_mr1": 43, "mwrc1oas1_0013_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0220_mr1": 43, "mwrc1oas1_0220_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0180_mr1": 43, "mwrc1oas1_0180_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0007_mr1": 43, "mwrc1oas1_0007_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0031_mr1": 43, "mwrc1oas1_0031_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0135_mr1": 43, "mwrc1oas1_0135_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0005_mr1": 43, "mwrc1oas1_0005_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0037_mr1": 43, "mwrc1oas1_0037_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0160_mr1": 43, "mwrc1oas1_0160_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0163_mr1": 43, "mwrc1oas1_0163_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0123_mr1": 43, "mwrc1oas1_0123_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0162_mr1": 43, "mwrc1oas1_0162_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0012_mr1": 43, "mwrc1oas1_0012_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0070_mr1": 43, "mwrc1oas1_0070_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0126_mr1": 43, "mwrc1oas1_0126_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0164_mr1": 43, "mwrc1oas1_0164_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0188_mr1": 43, "mwrc1oas1_0188_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0226_mr1": 43, "mwrc1oas1_0226_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0173_mr1": 43, "mwrc1oas1_0173_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0078_mr1": 43, "mwrc1oas1_0078_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0138_mr1": 43, "mwrc1oas1_0138_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0072_mr1": 43, "mwrc1oas1_0072_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0050_mr1": 43, "mwrc1oas1_0050_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0184_mr1": 43, "mwrc1oas1_0184_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0032_mr1": 43, "mwrc1oas1_0032_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0045_mr1": 43, "mwrc1oas1_0045_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0121_mr1": 43, "mwrc1oas1_0121_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0176_mr1": 43, "mwrc1oas1_0176_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0177_mr1": 43, "mwrc1oas1_0177_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0029_mr1": 43, "mwrc1oas1_0029_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0026_mr1": 43, "mwrc1oas1_0026_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0208_mr1": 43, "mwrc1oas1_0208_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0165_mr1": 43, "mwrc1oas1_0165_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0091_mr1": 43, "mwrc1oas1_0091_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0044_mr1": 43, "mwrc1oas1_0044_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0190_mr1": 43, "mwrc1oas1_0190_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0053_mr1": 43, "mwrc1oas1_0053_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0106_mr1": 43, "mwrc1oas1_0106_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0174_mr1": 43, "mwrc1oas1_0174_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0049_mr1": 43, "mwrc1oas1_0049_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0155_mr1": 43, "mwrc1oas1_0155_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0004_mr1": 43, "mwrc1oas1_0004_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0117_mr1": 43, "mwrc1oas1_0117_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0060_mr1": 43, "mwrc1oas1_0060_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0148_mr1": 43, "mwrc1oas1_0148_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0204_mr1": 43, "mwrc1oas1_0204_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0202_mr1": 43, "mwrc1oas1_0202_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0209_mr1": 43, "mwrc1oas1_0209_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0055_mr1": 43, "mwrc1oas1_0055_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0090_mr1": 43, "mwrc1oas1_0090_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0039_mr1": 43, "mwrc1oas1_0039_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0009_mr1": 43, "mwrc1oas1_0009_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0124_mr1": 43, "mwrc1oas1_0124_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0103_mr1": 43, "mwrc1oas1_0103_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0094_mr1": 43, "mwrc1oas1_0094_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0200_mr1": 43, "mwrc1oas1_0200_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0205_mr1": 43, "mwrc1oas1_0205_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0101_mr1": 43, "mwrc1oas1_0101_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0010_mr1": 43, "mwrc1oas1_0010_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0015_mr1": 43, "mwrc1oas1_0015_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0067_mr1": 43, "mwrc1oas1_0067_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0193_mr1": 43, "mwrc1oas1_0193_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0146_mr1": 43, "mwrc1oas1_0146_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0019_mr1": 43, "mwrc1oas1_0019_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0080_mr1": 43, "mwrc1oas1_0080_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0199_mr1": 43, "mwrc1oas1_0199_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0150_mr1": 43, "mwrc1oas1_0150_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0189_mr1": 43, "mwrc1oas1_0189_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0207_mr1": 43, "mwrc1oas1_0207_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0071_mr1": 43, "mwrc1oas1_0071_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0061_mr1": 43, "mwrc1oas1_0061_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0120_mr1": 43, "mwrc1oas1_0120_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0056_mr1": 43, "mwrc1oas1_0056_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0223_mr1": 43, "mwrc1oas1_0223_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0065_mr1": 43, "mwrc1oas1_0065_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0054_mr1": 43, "mwrc1oas1_0054_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0099_mr1": 43, "mwrc1oas1_0099_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0023_mr1": 43, "mwrc1oas1_0023_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0064_mr1": 43, "mwrc1oas1_0064_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0181_mr1": 43, "mwrc1oas1_0181_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0217_mr1": 43, "mwrc1oas1_0217_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0144_mr1": 43, "mwrc1oas1_0144_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0042_mr1": 43, "mwrc1oas1_0042_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0178_mr1": 43, "mwrc1oas1_0178_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0218_mr1": 43, "mwrc1oas1_0218_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0002_mr1": 43, "mwrc1oas1_0002_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0059_mr1": 43, "mwrc1oas1_0059_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0167_mr1": 43, "mwrc1oas1_0167_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0145_mr1": 43, "mwrc1oas1_0145_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0169_mr1": 43, "mwrc1oas1_0169_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0115_mr1": 43, "mwrc1oas1_0115_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0111_mr1": 43, "mwrc1oas1_0111_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0131_mr1": 43, "mwrc1oas1_0131_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0098_mr1": 43, "mwrc1oas1_0098_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0082_mr1": 43, "mwrc1oas1_0082_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0136_mr1": 43, "mwrc1oas1_0136_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0227_mr1": 43, "mwrc1oas1_0227_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0022_mr1": 43, "mwrc1oas1_0022_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0212_mr1": 43, "mwrc1oas1_0212_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0079_mr1": 43, "mwrc1oas1_0079_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0119_mr1": 43, "mwrc1oas1_0119_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0016_mr1": 43, "mwrc1oas1_0016_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0104_mr1": 43, "mwrc1oas1_0104_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0203_mr1": 43, "mwrc1oas1_0203_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0114_mr1": 43, "mwrc1oas1_0114_mr1_mpr_anon_fslswapdim_bet": 43, "transform_single_img": [43, 48, 49, 53, 54, 56, 58, 308, 309, 310, 311, 312, 313, 314, 315, 389], "space_net": 43, "841": 43, "path_scor": 43, "_graph_net_squared_loss": 43, "0x7fdb58090670": 43, "tol": [43, 180, 181, 183, 247, 248], "0001": [43, 247, 248], "n_alpha": [43, 181, 247, 248], "is_classif": 43, "debia": [43, 247, 248], "2652228933482088": 43, "persist": [43, 48, 92], "happen": [43, 48, 92, 159, 174, 405], "caus": [43, 48, 49, 84, 92, 120, 147, 300], "wrap": [43, 48, 92, 154, 397], "issu": [43, 48, 68, 92, 127, 128, 129, 130, 131, 139, 141, 142, 144, 161, 162, 164, 166, 167, 286, 291], "kindli": [43, 48, 92, 170], "team": [43, 48, 92, 162, 169, 170, 197, 420], "_____________________________________________________path_scor": 43, "3min": 43, "ax1": [43, 63, 369], "set_ylabel": [43, 70, 75, 78], "ax2": [43, 63, 369], "set_xlabel": [43, 70], "986": [43, 45], "2486": [43, 45], "plot_oasis_vbm_space_net": [43, 45], "sketch": 44, "mathbf": 44, "opposit": [44, 71, 159], "corner": [44, 125, 147, 162, 299], "middl": [44, 66, 91, 111, 132, 140, 147, 226, 303], "licenc": [44, 189, 190, 192, 199, 203], "bsd": [44, 103, 107], "__doc__": [44, 71, 72], "linalg": [44, 161], "ndimag": [44, 94, 173, 213, 235, 238, 291, 317, 318, 319, 321, 322], "gaussian_filt": 44, "f_regress": [44, 102, 105, 106], "create_simulation_data": 44, "snr": [44, 167, 282, 401], "roi_siz": 44, "smooth_x": 44, "xx": 44, "randn": [44, 63], "xi": [44, 111, 199], "norm_nois": 44, "norm": [44, 55, 62, 76, 79, 101, 107, 108, 185, 242, 243, 244, 245, 247, 248, 249, 250, 264, 386, 387, 388, 389], "exp": 44, "noise_coef": 44, "log": [44, 49, 53, 77, 79, 94, 122, 147, 159, 161, 251, 254, 255, 256, 257, 293, 369], "db": [44, 111, 256, 257], "plot_slic": 44, "hspace": [44, 49, 57], "bool": [44, 94, 103, 179, 180, 181, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 205, 206, 207, 208, 211, 212, 213, 215, 216, 217, 219, 220, 221, 222, 224, 226, 232, 242, 243, 244, 245, 246, 247, 248, 249, 250, 259, 261, 264, 277, 279, 280, 282, 286, 288, 292, 295, 297, 298, 301, 302, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 360, 361, 362, 363, 364, 365, 367, 368, 370, 371, 372, 373, 374, 375, 376, 378, 379, 381, 382, 383, 385, 386, 387, 388, 389, 390, 398, 399, 400, 401, 402], "uint8": [44, 56, 91, 144, 147, 295], "recov": [44, 58, 128, 147, 148], "elast": 44, "bayesian": [44, 164], "metaprior": 44, "ridgecv": [44, 243, 245], "elasticnetcv": 44, "bayesian_ridg": 44, "bayesianridg": 44, "enet_cv": 44, "l1_ratio": [44, 247, 248], "ridge_cv": 44, "r2": [44, 139, 147, 243, 245, 256], "expos": [44, 49, 114, 124, 128, 129, 147, 162, 172, 222, 223, 224, 225], "fairli": [44, 155, 164], "attribut": [44, 48, 49, 50, 84, 89, 113, 114, 130, 139, 140, 142, 143, 144, 147, 148, 151, 152, 153, 159, 162, 172, 174, 179, 180, 181, 188, 192, 194, 197, 208, 211, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 242, 243, 244, 245, 247, 248, 249, 250, 254, 255, 256, 257, 264, 284, 292, 305, 306, 311, 312, 313, 314, 315, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 376, 378, 379, 386, 387, 388, 389, 404, 405], "t1": [44, 75, 141, 147, 189, 212, 234, 236, 237, 239, 360, 419], "els": [44, 47, 68, 70, 94, 100, 220, 242, 243, 244, 245, 247, 248, 377], "del": 44, "elapsed_tim": 44, "__class__": [44, 48, 49], "__name__": [44, 48, 49], "isnan": [44, 77, 94, 102, 105, 106], "recurs": [44, 49, 98, 111, 135, 147, 151, 157, 167, 168, 387, 388, 394], "elimin": [44, 98, 157, 160, 373, 374], "rfe": [44, 98, 157], "tip": [44, 169], "plot_simulated_data": [44, 45], "auto_examples_02_decod": 45, "1804": 45, "turn": [47, 66, 84, 149, 151, 161, 174, 264, 277, 317, 318, 319, 321, 322, 373, 374, 375, 382, 399], "find_parcellation_cut_coord": [47, 58, 132, 142, 147, 149, 358, 362], "find_probabilistic_atlas_cut_coord": [47, 50, 53, 132, 147, 149, 152, 357, 362], "intermediari": 47, "multiniftilabelsmask": [47, 145, 147, 171, 421], "multiniftimapsmask": [47, 145, 147, 171, 421], "connectivitymeasur": [47, 50, 51, 54, 56, 58, 99, 120, 122, 125, 128, 138, 147, 148, 149, 152], "amadeu": [47, 125, 147], "kanaan": [47, 125, 147], "fetch_atlas_yeo_2011": [47, 86, 149], "liber": [47, 79], "thick_17": [47, 203], "yeo_2011": 47, "yeo_jneurophysiol11_mni152": 47, "yeo2011_17networks_mni152_freesurferconformed1mm_liberalmask": 47, "fetch_development_fmri": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 85, 89, 91, 92, 95, 99, 104, 135, 147, 148, 149, 151, 152, 169, 174], "counfound": 47, "development_fmri": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "pixar123_task": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "pixar_spac": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "mni152nlin2009casym_desc": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "preproc_bold": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 100, 101, 104, 108], "pixar_desc": [47, 53, 54, 55, 56, 58], "reducedconfounds_regressor": [47, 53, 54, 55, 56, 58], "conenctivitymeasur": 47, "connectome_measur": [47, 50, 152], "labels_img": [47, 49, 56, 91, 94, 149, 309, 312, 357, 390, 392, 395], "time_seri": [47, 51, 52, 54, 56, 58, 148, 149], "mean_correlation_matrix": [47, 51], "mean_": [47, 51, 148, 179], "strength": [47, 135, 138, 147, 299, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 419], "0x7fdb46d140d0": 47, "latter": [47, 155, 161, 179, 180, 181, 195, 196, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 277, 308, 309, 310, 311, 312, 313, 314, 315, 367, 375, 379, 386, 387, 388, 389], "lag_correl": 47, "lag_cor": 47, "corrcoef": 47, "lag_correlation_matrix": 47, "adjacency_matrix": [47, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 381], "maps_img": [47, 52, 53, 54, 149, 174, 309, 310, 312, 313, 358, 373, 389, 391, 393, 396], "cache_mixin": [47, 49, 52, 54], "current": [47, 48, 49, 50, 52, 54, 64, 68, 86, 144, 147, 159, 161, 162, 167, 170, 174, 183, 226, 227, 252, 302, 304, 308, 309, 310, 311, 312, 313, 314, 315, 376, 378, 379, 382, 389], "1676": 47, "plot_atlas_comparison": [47, 59], "fmr": 48, "exhibit": [48, 164, 174], "fluctuat": [48, 66, 161, 164, 167], "decomposit": [48, 50, 92, 97, 103, 109, 110, 111, 120, 127, 130, 138, 144, 147, 152, 153, 168, 208, 288, 289, 294, 308, 311, 314, 375, 380, 389, 402], "simultan": [48, 161, 183], "priori": 48, "children": [48, 99, 135, 147, 168, 208], "young": [48, 111, 168, 191, 219, 226], "adult": [48, 51, 99, 111, 135, 147, 168, 208, 226], "watch": [48, 49, 50, 52, 54, 55, 85, 89, 92, 104, 135, 147, 150, 168, 169, 174, 208, 421], "movi": [48, 49, 50, 52, 54, 55, 85, 89, 92, 104, 135, 147, 150, 168, 169, 174, 208, 421], "algorithm": [48, 49, 89, 92, 94, 102, 104, 105, 113, 148, 151, 152, 153, 156, 157, 159, 167, 174, 175, 177, 180, 183, 226, 249, 250, 288, 320, 322, 386, 389, 391, 402], "preprint": 48, "rest_dataset": [48, 50, 53, 152], "faster": [48, 49, 104, 129, 147, 160, 161, 162, 222, 250, 297, 298, 367, 368, 374, 375, 382, 405], "n_compon": [48, 50, 92, 103, 104, 152, 249, 250, 394], "mask_strategi": [48, 89, 92, 104, 135, 141, 147, 174, 242, 243, 244, 245, 249, 250, 311, 314, 387], "compon": [48, 50, 54, 66, 92, 94, 97, 109, 110, 111, 120, 127, 128, 130, 138, 147, 149, 150, 151, 152, 164, 167, 172, 173, 179, 180, 181, 190, 200, 208, 219, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 256, 257, 264, 277, 289, 291, 294, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 359, 375, 380, 386, 387, 388, 389, 390, 391, 402, 421], "components_img_": [48, 50, 130, 147, 152, 153, 249, 250], "canica_components_img": 48, "components_img": [48, 50, 152], "canica_resting_st": 48, "pixar124_task": 48, "pixar125_task": 48, "pixar126_task": 48, "pixar127_task": 48, "pixar128_task": 48, "pixar001_task": [48, 53, 85], "pixar002_task": [48, 53], "pixar003_task": [48, 53], "pixar004_task": 48, "pixar005_task": 48, "pixar006_task": 48, "pixar007_task": 48, "pixar008_task": 48, "pixar009_task": 48, "pixar010_task": 48, "pixar011_task": 48, "pixar012_task": 48, "pixar013_task": 48, "pixar014_task": 48, "pixar015_task": 48, "pixar016_task": 48, "pixar017_task": 48, "pixar018_task": 48, "pixar019_task": 48, "pixar020_task": 48, "pixar021_task": 48, "pixar022_task": 48, "pixar023_task": 48, "pixar024_task": 48, "self": [48, 49, 94, 162, 179, 180, 181, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 264, 277, 308, 309, 310, 311, 312, 313, 314, 315, 386, 387, 388, 389], "functool": 48, "compute_multi_brain_mask": [48, 141, 145, 147, 311], "0x7fdb589ec310": 48, "mask_typ": [48, 318, 321], "extmath": 48, "randomized_svd": 48, "003659": 48, "013254": 48, "012477": 48, "002881": 48, "transpos": [48, 138, 147, 161], "n_iter": [48, 49, 50, 213, 235, 238, 387, 388, 394], "___________________________________________________randomized_svd": 48, "_fastica": [48, 50, 92, 103, 104], "fastica": [48, 92, 103, 104, 249], "004071": 48, "000497": 48, "005856": 48, "004765": 48, "whiten": [48, 50, 92, 103, 104, 251, 255, 256, 257], "fun": 48, "cube": [48, 174, 398], "209652396": 48, "futurewarn": [48, 50, 62, 92, 103, 104], "v1": [48, 50, 92, 103, 104, 132, 140, 142, 145, 147], "behaviour": [48, 50, 111, 120, 132, 139, 144, 147, 160, 174, 219], "deprec": [48, 50, 62, 122, 126, 127, 128, 129, 130, 132, 135, 137, 138, 140, 142, 144, 145, 147, 170, 228, 242, 243, 244, 245, 249, 250, 308, 309, 310, 311, 312, 313, 314, 315, 325, 387, 389], "valueerror": [48, 50, 145, 147, 292, 296, 309, 310, 312, 313, 405], "__________________________________________________________fastica": 48, "398764591": 48, "924231285": 48, "1478610112": 48, "441365315": 48, "1537364731": 48, "192771779": 48, "1491434855": 48, "1819583497": 48, "530702035": 48, "0x7fdb4ac32790": 48, "cur_img": [48, 87], "ic": [48, 103], "natur": [48, 111, 114, 167, 208, 219, 222, 224], "cleaner": [48, 66, 132, 147], "arthur": [48, 111, 119, 120, 122, 125, 147, 153, 194, 250], "mensch": [48, 111, 119, 120, 122, 125, 147, 153, 194, 250], "compress": [48, 132, 147, 150, 153, 172, 250, 421], "onlin": [48, 153, 162, 250, 420], "isbi": [48, 153, 249, 250], "2016": [48, 100, 111, 122, 123, 124, 125, 126, 147, 153, 209, 227, 250, 361], "lectur": [48, 111, 153, 169, 179], "dictlearn": [48, 50, 120, 130, 147, 152, 153], "dict_learn": [48, 50, 152], "n_epoch": [48, 250], "umask": 48, "dictlearning_components_img": 48, "dictionary_learning_resting_st": 48, "001315": 48, "004387": 48, "011243": 48, "004194": 48, "00289": 48, "002135": 48, "005107": 48, "012507": 48, "_compute_load": 48, "001073": 48, "01446": 48, "00109": 48, "00525": 48, "624512": 48, "338654": 48, "779528": 48, "745343": 48, "_________________________________________________compute_load": 48, "_dict_learn": [48, 50], "dict_learning_onlin": 48, "batch_siz": [48, 250, 386], "cd": [48, 170, 250], "dict_init": [48, 250], "009402": 48, "329364": 48, "141558": 48, "101277": 48, "return_cod": 48, "_____________________________________________dict_learning_onlin": 48, "0x7fdb4bbe6f40": [48, 89], "comp": [48, 190], "per_compon": [48, 138, 147, 249, 250, 387], "ticker": [48, 49], "formatstrformatt": 48, "gca": [48, 51, 99], "xaxi": [48, 49], "set_major_formatt": [48, 49], "_explained_vari": 48, "245714e": 48, "338591e": 48, "410084e": 48, "451895e": 48, "007634": 48, "______________________________________________explained_vari": 48, "8min": 48, "2694": [48, 59], "plot_compare_decomposit": [48, 59, 135, 147], "constrain": [49, 50, 111, 151, 168, 192, 197, 387], "agglomer": [49, 111, 167, 168, 244, 245, 386, 387, 388, 394], "regim": 49, "subsequ": [49, 84, 174, 222, 224, 226, 305, 306], "empir": [49, 151, 158, 159, 160, 161, 180, 183, 306, 421], "baptist": [49, 111, 180, 217, 222, 224], "polin": [49, 64, 67, 111, 114, 180, 217, 222, 224, 282, 401], "good": [49, 56, 65, 66, 113, 127, 147, 148, 151, 153, 155, 156, 157, 158, 160, 161, 162, 163, 170, 172, 174, 222, 244, 245, 356, 421], "supervis": [49, 155, 157, 158, 167, 169], "evelyn": [49, 111, 160], "eger": [49, 111, 160], "christin": [49, 111, 232], "keribin": 49, "elsevi": 49, "pictur": [49, 113, 151, 159, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405], "discuss": [49, 56, 132, 147, 151, 154, 157, 159, 164, 166, 170, 173, 306, 325, 420], "long": [49, 114, 162, 164, 305, 306, 361], "agglom": [49, 135, 147, 151, 387], "_estimator_fit": 49, "007267": 49, "006992": 49, "004896": 49, "009609": 49, "agglomerativeclust": [49, 387], "24256x24256": 49, "162682": 49, "n_cluster": [49, 386, 388, 394], "_agglom": 49, "ward_tre": 49, "return_dist": 49, "________________________________________________________ward_tre": 49, "____________________________________________________estimator_fit": 49, "858": [49, 79, 98], "labels_img_": [49, 151, 312, 387], "ward_labels_img": 49, "ward_parcel": 49, "first_plot": 49, "effect": [49, 53, 60, 61, 64, 66, 69, 70, 71, 73, 75, 79, 80, 89, 95, 100, 102, 110, 111, 131, 147, 153, 155, 159, 161, 163, 164, 174, 179, 195, 196, 210, 223, 242, 243, 244, 245, 246, 252, 253, 254, 256, 257, 258, 260, 261, 264, 267, 277, 279, 294, 306, 325, 360, 373, 374, 375, 380, 382], "approxim": [49, 64, 71, 111, 151, 256, 257, 388, 394], "mask_img_": [49, 66, 77, 79, 89, 92, 113, 174, 242, 243, 244, 245, 247, 248, 249, 250, 311, 312, 314], "original_voxel": 49, "mean_func_img": [49, 92], "min": [49, 53, 55, 58, 102, 103, 140, 141, 147, 297, 298, 360, 361, 365, 367, 368, 371, 373, 374, 376, 382, 383, 385], "opportun": 49, "fmri_reduc": 49, "fmri_compress": 49, "60000": 49, "base_mask": [49, 53, 54, 56, 58, 92], "_filter_and_extract": [49, 52, 53, 54, 56, 58], "0x7fdb4bc007f0": 49, "nifti_labels_mask": [49, 56, 91], "_extractionfunctor": [49, 53, 54, 56, 58], "0x7fdb4a752e20": 49, "background_label": [49, 56, 91, 174, 309, 312, 357, 392, 395], "0x7fdb4bc00bb0": 49, "0x7fdb4bc00070": 49, "niftilabelsmask": [49, 54, 56, 83, 94, 96, 110, 132, 133, 135, 138, 139, 140, 142, 144, 147, 149, 171, 195, 208, 308, 309, 310, 313, 392, 395, 397, 421], "_______________________________________________filter_and_extract": [49, 53, 54, 56, 58], "0x7fdb4b9f37c0": 49, "But": [49, 80, 98, 152, 161, 164, 174], "10mm": 49, "ON": 49, "003007": 49, "004092": 49, "005569": 49, "00225": 49, "minibatchkmean": [49, 386, 387], "kmeans_labels_img": 49, "kmeans_parcel": 49, "grow": [49, 148], "unbalanc": 49, "singleton": [49, 308, 309, 310, 311, 312, 313, 314, 315, 389], "tailor": [49, 69, 151], "enforc": [49, 89, 144, 147, 148, 161, 162, 247, 248, 264], "root": [49, 161, 179, 195, 196, 255, 305, 386, 387, 388], "piec": [49, 172, 421], "adapt": [49, 65, 113, 152, 155, 162, 264, 273, 305], "hierarchical_kmean": [49, 142, 147, 387], "hkmean": 49, "hierarchicalkmean": [49, 142, 147], "x27": [49, 62, 89, 91], "parcellationsparcel": 49, "hkmeans_labels_img": 49, "hierarchical_kmeans_parcel": 49, "count": [49, 222, 224, 254], "kmeans_label": 49, "kmeans_count": 49, "return_count": 49, "hkmeans_count": 49, "voxel_ratio": 49, "round": [49, 376, 379], "3000": [49, 102], "nrow": [49, 63, 79, 100, 101], "sharex": 49, "gridspec_kw": [49, 80, 100], "height_ratio": 49, "semilogx": 49, "hist": [49, 70, 369], "set_ylim": 49, "scalarformatt": 49, "yaxi": 49, "set_label_coord": 49, "ec": 49, "0x7fdb4a0e6160": 49, "thousand": [49, 174, 387], "properti": [49, 71, 157, 161, 164, 167, 174, 264, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "notabl": [49, 149], "constraint": [49, 151, 161, 302], "kahn": [49, 111, 388, 394], "ieee": [49, 111, 160, 249, 250, 388, 394], "transact": [49, 111, 160], "intellig": [49, 84], "pp": [49, 250], "march": [49, 117, 130, 139, 147, 246], "2019": [49, 51, 77, 99, 111, 133, 134, 135, 147, 207, 388, 394], "hal": [49, 111, 160, 389], "archiv": [49, 226], "ouvert": 49, "01366651": 49, "0x7fdb47474be0": 49, "rena_clust": [49, 145, 147], "recursive_neighbor_agglomer": [49, 145, 147], "_________________________________recursive_neighbor_agglomer": 49, "0x7fdb580513a0": 49, "0x7fdb4b9bdeb0": 49, "0x7fdb58051070": 49, "0x7fdb58051ee0": 49, "rena_labels_img": 49, "rena_parcel": 49, "0x7fdb4aa50ee0": 49, "fmri_reduced_rena": 49, "compressed_img_rena": 49, "0x7fdb4a188910": 49, "0x7fdb59baf370": 49, "0x7fdb4a1880d0": 49, "0x7fdb4a188ac0": 49, "0x7fdb49134cd0": 49, "notic": [49, 58, 66, 101, 108, 302], "accur": [49, 58, 66, 69, 135, 143, 147, 159, 163, 164], "said": [49, 164], "2303": 49, "plot_data_driven_parcel": [49, 59], "regionextractor": [50, 87, 120, 122, 128, 133, 147, 152, 390, 391], "decompos": [50, 148, 152, 164, 389], "inspir": [50, 160, 162, 170], "idea": [50, 88, 94, 154, 161, 164], "canica": [50, 130, 141, 147, 150, 167, 250, 311, 421], "instanti": [50, 51, 91, 142, 147, 246, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "0x7fdb491210a0": 50, "nomin": 50, "nonzero": [50, 299, 389], "surviv": [50, 139, 147, 252, 389], "extractor": [50, 87, 152, 389, 391], "thresholding_strategi": [50, 87, 152, 389], "ratio_n_voxel": [50, 152, 389], "local_region": [50, 152, 389, 391], "min_region_s": [50, 87, 88, 152, 389, 391], "regions_img_": [50, 87, 152, 389], "regions_extracted_img": [50, 152, 391], "index_": [50, 87, 152, 389], "regions_index": [50, 152], "n_regions_extract": [50, 152], "neach": [50, 152], "0x7fdb58051910": 50, "those": [50, 62, 66, 69, 71, 80, 89, 108, 142, 147, 153, 155, 157, 161, 162, 164, 170, 222, 304, 361, 383, 389, 395, 396, 405], "timeseries_each_subject": [50, 152], "mean_correl": [50, 152], "regions_img": [50, 87, 152], "coords_connectom": [50, 152], "0x7fdb47a25640": 50, "find_xyz_cut_coord": [50, 87, 122, 129, 147, 152], "side": [50, 53, 63, 66, 94, 102, 139, 147, 159, 222, 252, 317, 320, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 361, 369, 370, 398, 399], "nice": [50, 152], "regions_indices_of_map3": [50, 152], "rgbcmyk": [50, 152], "each_index_of_map3": [50, 152], "add_overlai": [50, 118, 147, 152, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 419], "alpha_cmap": [50, 152], "plot_extract_regions_dictlearning_map": [50, 59], "tangent": [51, 99, 128, 147, 152, 179], "embed": [51, 99, 397], "outperform": [51, 99, 148, 153], "dadi": [51, 99, 111, 194], "care": [51, 99, 113, 154, 155, 157, 161, 198, 199, 251], "development_dataset": [51, 99], "msdl_data": [51, 99], "msdl_coord": [51, 99], "region_coord": [51, 52, 54, 99, 124, 147, 197], "n_region": [51, 91], "aud": 51, "striat": 51, "occ": 51, "att": 51, "basal": 51, "vi": 51, "sec": [51, 208], "salienc": [51, 207], "languag": [51, 64, 67, 100, 101, 108, 114, 204, 214, 217], "cereb": [51, 71], "dor": 51, "cing": 51, "Ins": 51, "ant": 51, "ip": 51, "niftimapsmask": [51, 52, 53, 54, 91, 99, 117, 132, 139, 142, 147, 149, 171, 310, 312, 389, 393, 396, 421], "filter": [51, 55, 56, 58, 66, 68, 94, 103, 112, 113, 118, 132, 135, 140, 142, 144, 145, 147, 154, 167, 171, 173, 187, 222, 224, 226, 241, 242, 243, 244, 245, 247, 248, 249, 250, 264, 267, 282, 299, 301, 302, 305, 309, 310, 311, 387, 389, 400, 401, 421], "band": [51, 58, 144, 147, 187, 305, 400], "resampling_target": [51, 53, 54, 91, 94, 99, 174, 309, 310, 312, 313], "phenotyp": [51, 62, 99, 143, 147, 154, 158, 171, 187, 188, 208, 232, 421], "pooled_subject": 51, "child": [51, 208], "func_fil": 51, "confound_fil": 51, "child_adult": [51, 99], "simpler": 51, "commonli": [51, 151, 163, 167, 169, 170, 174, 306], "margin": [51, 297], "pairwis": [51, 148], "correlation_measur": [51, 54, 56], "individu": [51, 58, 62, 66, 69, 72, 76, 78, 79, 80, 81, 94, 100, 101, 108, 111, 148, 153, 166, 167, 169, 171, 174, 179, 180, 205, 217, 279, 323, 377, 421], "2d": [51, 54, 84, 91, 92, 98, 103, 112, 144, 147, 154, 157, 171, 174, 180, 181, 182, 183, 184, 249, 250, 251, 260, 284, 304, 308, 309, 310, 311, 312, 313, 314, 315, 316, 326, 328, 329, 330, 331, 332, 333, 334, 335, 340, 342, 344, 346, 348, 350, 352, 367, 386, 387, 388, 389, 395, 396, 403, 405, 411, 421], "reflect": [51, 101, 148, 162, 164, 191, 373, 374], "visibl": [51, 79, 141, 147, 153, 297, 376, 378, 379, 419], "0x7fdb486ce760": 51, "reveal": [51, 101, 102, 159], "partial_correlation_measur": 51, "partial_correlation_matric": 51, "weaker": [51, 66, 79], "0x7fdb4a6f3460": 51, "tangent_measur": 51, "deviat": [51, 148, 242, 243, 244, 245, 247, 248], "tangent_matric": 51, "perturb": 51, "anticorrel": [51, 111, 306], "distinguish": [51, 94, 98, 99, 155, 159, 164, 168, 172], "stratifiedshufflesplit": [51, 99], "preserv": [51, 58, 99, 287, 299, 370, 386, 387, 388], "linearsvc": [51, 98, 99, 159, 242, 244], "return_invers": 51, "test_siz": [51, 99], "1d": [51, 102, 105, 106, 113, 144, 147, 172, 174, 179, 246, 254, 256, 257, 260, 266, 282, 304, 308, 309, 310, 311, 312, 313, 314, 315, 336, 343, 347, 353, 356, 389, 390, 395, 400, 401, 403, 405], "mean_scor": [51, 99], "scores_std": [51, 99], "align": [51, 56, 91, 99, 298, 300, 367], "xerr": [51, 99], "set_axisbelow": [51, 99], "axvlin": 51, "linestyl": 51, "showcas": [51, 60, 74, 76, 99, 110, 151, 156, 162], "larger": [51, 75, 80, 86, 99, 153, 155, 159, 161, 162, 164, 247, 248, 360, 373, 374, 375, 382], "cohort": [51, 99], "clinic": [51, 99, 155, 169], "1251": 51, "plot_group_level_connect": [51, 59, 128, 135, 147], "link": [52, 111, 114, 125, 132, 137, 147, 150, 154, 157, 162, 164, 167, 170, 189, 194, 219, 232, 327, 337, 338, 362, 421], "negat": [52, 83, 96, 110, 225, 293, 375, 380], "dens": [52, 54, 148, 161, 319], "highest": [52, 54, 242, 243, 244, 245, 267, 288, 402], "msdl_atla": [52, 53, 54], "msdl_roi": [52, 53, 54, 197], "resample_img": [52, 54, 71, 84, 89, 93, 129, 135, 144, 147, 173, 174, 222, 249, 250, 264, 277, 296, 298, 311, 314, 317, 319, 320, 322, 387], "________________________________________resample_img": 52, "__________________________________filter_and_extract": [52, 56], "graphicallassocv": [52, 53, 57, 58, 148, 161, 181], "scitkit": [52, 53, 57, 58], "v0": [52, 53, 57, 58, 132, 135, 140, 142, 147, 199], "graphlassocv": [52, 53, 57, 58], "graphicallassocvgraphicallassocv": [52, 53, 58], "covariance_": [52, 53, 58, 148], "axesimag": [52, 54, 56], "0x7fdb4aae1310": 52, "0x7fdb49e73af0": 52, "precision_": [52, 53, 57, 148], "0x7fdb40654340": 52, "plot_inverse_covariance_connectom": [52, 59], "plot_matric": 53, "cov": [53, 254, 256, 257, 420], "prec": [53, 161], "put": [53, 54, 64, 67, 71, 98, 118, 147, 162, 242, 243, 244, 245, 249, 250, 264, 309, 310, 311, 312, 313, 314, 315, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 387, 389, 401], "diagon": [53, 54, 56, 58, 86, 125, 147, 161, 173, 179, 183, 185, 186, 296, 297, 356, 372, 390], "clariti": 53, "span": [53, 71, 164, 360, 373, 374, 375, 382], "msdl_atlas_dataset": 53, "recomput": [53, 66, 98, 159, 261], "mem": 53, "subject_time_seri": 53, "confound_filenam": [53, 55], "region_t": 53, "__________________________________________high_variance_confound": 53, "nifti_maps_mask": [53, 54], "0x7fdb4b3edf10": 53, "allow_overlap": [53, 54, 58, 310, 313, 315], "174325": 53, "048779": 53, "044073": 53, "155444": 53, "1min": [53, 105], "0x7fdb6007ffa0": 53, "151677": 53, "057023": 53, "206928": 53, "102714": 53, "0x7fdb4b58c370": 53, "127944": 53, "087084": 53, "015679": 53, "02587": 53, "0x7fdb4bbe6ee0": 53, "089762": 53, "062316": 53, "065223": 53, "022868": 53, "groupsparsecovariancecv": [53, 57, 148, 161], "gsc": [53, 57], "gl": [53, 57], "likelihood": [53, 161, 164, 179, 251, 254, 255, 256, 257], "decreas": [53, 66, 95, 161, 162, 360, 373, 374, 375, 382], "stop": [53, 97, 109, 110, 111, 114, 160, 180, 183, 222, 224, 287, 292, 293, 295, 367, 375, 380, 386], "iter": [53, 69, 71, 92, 104, 135, 147, 154, 159, 180, 181, 183, 242, 243, 244, 245, 247, 248, 249, 250, 283, 287, 290, 291, 294, 299, 356, 387, 388, 394], "refin": [53, 57, 58, 181], "optim": [53, 57, 100, 111, 135, 139, 147, 155, 157, 160, 161, 181, 183, 194], "toler": [53, 92, 104, 161, 180, 181, 183, 247, 248, 286], "reach": [53, 161, 162, 164, 169, 222, 305], "789e": 53, "graphical_lasso": 53, "68e": 53, "dual": [53, 111, 161, 180, 242, 244], "gap": [53, 180, 183], "123e": 53, "664e": 53, "158e": 53, "389e": 53, "530e": 53, "318e": 53, "844e": 53, "atlas_region_coord": [53, 149], "graphicallasso": [53, 148], "edge_vmax": [53, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362], "edge_vmin": [53, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362], "groupsparsecovari": [53, 148, 161, 181], "precisions_": [53, 57, 148, 180, 181], "covariances_": [53, 148, 180, 181], "907": [53, 59], "plot_multi_subject_connectom": [53, 59], "0x7fdb4a98fe50": 54, "_____________________________________________________resample_img": 54, "0x7fdb4a98f550": 54, "generate_report": [54, 89, 91, 92, 142, 147, 174, 264, 277, 309, 310, 311, 312, 313, 314, 389], "displayed_map": [54, 310, 313, 389], "contrarili": [54, 91, 312, 313], "summar": [54, 91, 154, 162, 256, 312, 313, 315, 398], "pca": [54, 249, 313], "miss": [54, 77, 84, 141, 147, 162, 167, 271, 310, 313, 319, 322], "correlation_matrix": [54, 56, 419], "major": [54, 94, 162, 169], "fill_diagon": [54, 56], "0x7fdb4b6a2f10": 54, "plot_probabilistic_atlas_extract": [54, 59], "depict": [55, 162, 173], "advanc": [55, 109, 111, 154, 156, 157, 162, 163, 169, 173, 211, 242, 244, 245, 289, 308, 314, 361, 375, 421], "lie": [55, 180, 183], "franz": [55, 133, 135, 137, 147], "liem": [55, 133, 135, 137, 147], "1st": 55, "hard": [55, 149, 161, 167, 172], "drive": 55, "wide": [55, 71, 105, 111, 154, 155, 157, 161, 162, 209, 227, 246], "pcc_coord": [55, 61, 163], "niftispheresmask": [55, 58, 61, 70, 100, 119, 120, 122, 133, 137, 139, 147, 163, 171, 421], "bandpass": 55, "seed_mask": [55, 61, 100, 163], "seed_time_seri": [55, 61, 163], "brain_mask": [55, 100], "brain_time_seri": 55, "n_volum": 55, "32504": 55, "exemplarili": 55, "seed_to_voxel_correl": 55, "extrem": [55, 118, 147, 398], "seed_to_voxel_correlations_img": 55, "marker_coord": [55, 61, 100, 133, 135, 147, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 384], "At": [55, 63, 65, 69, 77, 80, 91, 152, 169, 170, 277, 279], "pcc_seed_correl": 55, "seed_to_voxel_correlations_fisher_z": 55, "arctanh": 55, "768": 55, "941": 55, "eventu": [55, 419], "seed_to_voxel_correlations_fisher_z_img": 55, "pcc_seed_correlation_z": 55, "plot_seed_to_voxel_correl": [55, 59, 133, 147], "movement": [56, 169, 174], "load_confound": [56, 66, 142, 147, 149, 174, 306], "flexibli": 56, "guidelin": [56, 94, 141, 144, 147, 154, 170], "en": [56, 164, 189, 306, 309], "craddock": [56, 111, 144, 147, 148, 149, 192, 197, 232], "2013": [56, 111, 135, 147, 148, 149, 159, 160, 187, 191, 197, 305], "reorder": [56, 130, 147, 296, 356, 372], "reduce_confound": [56, 208], "reduced_confound": 56, "preselect": 56, "metadata": [56, 91, 114, 135, 147, 173, 222, 223, 224, 225, 304], "nifti1head": [56, 91], "endian": [56, 91, 128, 147, 291, 297], "sizeof_hdr": [56, 91], "data_typ": [56, 91], "db_name": [56, 91], "extent": [56, 91, 95, 167, 338, 341], "session_error": [56, 91], "dim_info": [56, 91], "intent_p1": [56, 91], "intent_p2": [56, 91], "intent_p3": [56, 91], "intent_cod": [56, 91], "datatyp": [56, 91], "bitpix": [56, 91], "slice_start": [56, 91], "pixdim": [56, 91], "vox_offset": [56, 91], "scl_slope": [56, 91], "scl_inter": [56, 91], "slice_end": [56, 91], "slice_cod": [56, 91], "xyzt_unit": [56, 91], "cal_max": [56, 91], "cal_min": [56, 91], "slice_dur": [56, 91], "toffset": [56, 91], "glmax": [56, 91], "glmin": [56, 91], "descrip": [56, 91], "aux_fil": [56, 91], "qform_cod": [56, 91], "sform_cod": [56, 91], "quatern_b": [56, 91], "quatern_c": [56, 91], "quatern_d": [56, 91], "qoffset_x": [56, 91], "qoffset_i": [56, 91], "qoffset_z": [56, 91], "srow_x": [56, 91], "srow_i": [56, 91], "srow_z": [56, 91], "intent_nam": [56, 91], "magic": [56, 91, 360, 367, 368, 370, 374, 375], "0x7fdb474160a0": 56, "0x7fdb473a5310": 56, "0x7fdb4786a520": 56, "cover": [56, 162, 174, 205, 207, 356], "firstli": 56, "did": [56, 92, 104, 126, 142, 147, 164], "bad": [56, 105, 161], "0x7fdb477078e0": 56, "0x7fdb58051130": 56, "ensur": [56, 58, 100, 132, 139, 147, 159, 161, 162, 164, 227, 252, 277, 279, 326, 328, 329], "steadi": [56, 66, 140, 147, 264, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 389, 401], "correctli": [56, 66, 93, 133, 135, 136, 144, 147, 157, 164, 170, 264, 305, 306, 420], "confounds_simpl": 56, "wm_csf": [56, 305, 306], "cosine00": 56, "cosine01": 56, "cosine02": 56, "cosine03": 56, "rot_x": 56, "rot_i": 56, "rot_z": 56, "trans_x": 56, "trans_i": 56, "trans_z": 56, "white_matt": 56, "0x7fdb4b8e5e80": 56, "109104": 56, "109090": 56, "109066": 56, "026078": 56, "055006": 56, "876886": 56, "108937": 56, "108723": 56, "027587": 56, "049458": 56, "418909": 56, "108990": 56, "108632": 56, "108038": 56, "019085": 56, "075787": 56, "540842": 56, "108875": 56, "108176": 56, "107012": 56, "023900": 56, "053022": 56, "922085": 56, "107567": 56, "105651": 56, "033396": 56, "077764": 56, "843388": 56, "064873": 56, "022169": 56, "221217": 56, "064266": 56, "042248": 56, "237783": 56, "053241": 56, "029500": 56, "590905": 56, "081559": 56, "034236": 56, "122246": 56, "069287": 56, "007294": 56, "000828": 56, "0x7fdb49cb88e0": 56, "exceed": [56, 129, 147], "framewis": [56, 208, 305], "displac": [56, 208, 305], "standardis": 56, "dvar": [56, 305], "five": [56, 66, 387], "percentag": [56, 154, 242, 243, 244, 245, 264], "volumn": [56, 305], "suitabl": [56, 69, 132, 147, 155, 159, 174, 220, 306], "confounds_scrub": 56, "fd_threshold": [56, 305, 306], "std_dvars_threshold": [56, 305, 306], "0x7fdb581cac40": 56, "097319": 56, "110228": 56, "100980": 56, "024472": 56, "048861": 56, "796008": 56, "097281": 56, "110075": 56, "100637": 56, "025982": 56, "043313": 56, "338031": 56, "097205": 56, "109770": 56, "099952": 56, "017480": 56, "069643": 56, "459963": 56, "097090": 56, "109313": 56, "098926": 56, "022294": 56, "046877": 56, "841207": 56, "096938": 56, "108705": 56, "097565": 56, "031791": 56, "071620": 56, "762509": 56, "120508": 56, "113737": 56, "066478": 56, "028314": 56, "302095": 56, "120661": 56, "115099": 56, "062660": 56, "048393": 56, "318661": 56, "120775": 56, "116124": 56, "054846": 56, "035645": 56, "671784": 56, "120851": 56, "116809": 56, "079953": 56, "040381": 56, "203124": 56, "120889": 56, "117152": 56, "070892": 56, "013439": 56, "081706": 56, "0x7fdb4b3230a0": 56, "grand": [56, 264], "physiolog": [56, 66, 70, 306], "artifact": [56, 111, 174, 282, 305, 306, 401], "minim": [56, 62, 162, 167, 264, 266, 271, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 373], "degre": [56, 68, 100, 107, 164, 252, 255, 306], "freedom": [56, 100, 107, 149, 164, 252, 255, 306], "downsid": [56, 66], "insight": [56, 141, 147, 148], "confounds_minimal_no_gsr": 56, "global_sign": [56, 305, 306], "gsr": 56, "0x7fdb4a398700": 56, "0x7fdb5804fcd0": 56, "load_confounds_strategi": [56, 142, 147, 149, 174, 305], "benchmark": [56, 111, 160, 305, 306], "compcor": [56, 66, 111, 142, 147, 149, 208, 288, 305, 306, 402], "ica_aroma": [56, 142, 147, 305, 306], "denoise_strategi": [56, 306], "2min": 56, "rastko": [56, 111, 305, 306], "ciric": [56, 111, 305, 306], "daniel": [56, 111, 132, 135, 141, 144, 147, 219, 222, 224, 226, 232, 305, 306], "wolf": [56, 58, 111, 161, 305, 306], "jonathan": [56, 58, 111, 160, 199, 203, 205, 206, 259, 305, 306, 361], "david": [56, 111, 114, 144, 147, 193, 200, 219, 222, 224, 232, 305, 306, 325], "roalf": [56, 111, 305, 306], "graham": [56, 111, 305, 306], "baum": [56, 111, 305, 306], "kosha": [56, 111, 305, 306], "ruparel": [56, 111, 305, 306], "russel": [56, 100, 111, 114, 169, 220, 222, 224, 232, 256, 257, 305, 306], "shinohara": [56, 111, 305, 306], "simon": [56, 111, 132, 137, 147, 199, 200, 305, 306], "eickhoff": [56, 111, 199, 200, 305, 306], "christo": [56, 111, 305, 306], "davatziko": [56, 111, 305, 306], "ruben": [56, 111, 305, 306], "gur": [56, 111, 305, 306], "raquel": [56, 111, 305, 306], "bassett": [56, 111, 305, 306], "theodor": [56, 111, 305, 306], "satterthwait": [56, 111, 305, 306], "linden": [56, 111, 306], "park": [56, 111, 306], "fulcher": [56, 111, 306], "murat": [56, 111, 306], "y\u00fccel": [56, 111, 306], "alex": [56, 111, 129, 132, 147, 159, 212, 306], "fornito": [56, 111, 306], "evalu": [56, 111, 157, 161, 167, 202, 242, 243, 244, 245, 251, 255, 306, 398, 399], "efficaci": [56, 111, 306], "reliabl": [56, 111, 132, 147, 164, 217, 306], "2018": [56, 75, 76, 77, 111, 130, 131, 132, 147, 156, 198, 199, 208, 244, 245, 259, 282, 306, 388, 394, 401], "plot_signal_extract": [56, 59, 174], "group_sparse_cov": 57, "instabl": [57, 66, 161, 400], "data_gen": [57, 144, 147, 161], "generate_group_sparse_gaussian_graph": [57, 161], "n_displai": 57, "topologi": [57, 161], "min_n_sampl": 57, "max_n_sampl": 57, "max_precis": 57, "alpha_": [57, 181], "plot_simulated_connectom": [57, 59], "spheric": 58, "nardo": [58, 111, 205], "1358": [58, 111, 205], "1361": [58, 111, 205], "dmn_coord": [58, 174, 419], "temporopariet": 58, "junction": 58, "prefront": 58, "sequenc": [58, 61, 64, 66, 69, 79, 154, 163, 167, 172, 174, 217, 242, 243, 244, 245, 254, 256, 257, 264, 277, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 381, 399, 400, 405], "confounds_filenam": 58, "nifti_spheres_mask": 58, "0x7fdb49fe2430": 58, "Its": [58, 148, 156, 161, 246, 257, 264, 277, 280, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 399], "ledoit": [58, 161], "connectivity_measur": 58, "partial_correlation_matrix": 58, "0x7fdb473eff10": 58, "suppli": [58, 246, 247, 248, 271, 305, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 401], "mass": [58, 79, 144, 147, 279, 325, 357, 398], "fetch_coords_power_2011": 58, "dict_kei": 58, "collect": [58, 100, 103, 107, 111, 112, 162, 167, 222, 223, 224, 225, 305, 421], "spheres_mask": 58, "exce": [58, 181], "graphic": [58, 111, 148, 161, 162, 175, 180, 183], "covariance_estim": 58, "_method": 58, "subtract": [58, 66, 101, 169, 223], "tweak": [58, 89, 152], "strongest": 58, "node_s": [58, 133, 135, 142, 147, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 371, 381], "0x7fdb47a25f10": 58, "sometim": [58, 66, 80, 114, 118, 147, 154, 162, 167, 251, 255], "overwhelm": 58, "plot_mark": [58, 138, 142, 144, 147, 419], "node_strength": 58, "0x7fdb5804fb50": 58, "clip": [58, 84, 297, 298], "positive_edg": 58, "negative_edg": 58, "node_strength_posit": 58, "node_strength_neg": 58, "node_cmap": [58, 371], "ylorrd": 58, "pubu": 58, "0x7fdb4b3375b0": 58, "fetch_coords_dosenbach_2010": [58, 123, 126, 147], "0x7fdb4a765fd0": 58, "cerebellum": [58, 111, 205, 207, 219], "cingulo": 58, "opercular": [58, 91], "fronto": [58, 101], "occipit": [58, 91], "sensorimotor": 58, "plot_sphere_based_connectom": [58, 59, 135, 147], "auto_examples_03_connect": 59, "1675": 59, "2302": [59, 137, 147], "focus": [60, 74, 98, 110, 113, 124, 130, 147, 155, 158, 159, 162], "neurospin": [60, 65, 73, 110, 366], "adhd": [60, 73, 85, 110, 135, 144, 147, 148, 163, 188, 264, 271, 308, 315, 338, 375, 397, 399], "finit": [60, 73, 77, 79, 103, 110, 128, 147, 163, 167, 218, 264, 266, 271, 282, 299, 316, 319, 360, 363, 364, 374, 375, 401], "impul": [60, 73, 110, 218, 264, 363, 364, 375], "fir": [60, 63, 73, 110, 163, 167, 218, 264, 266, 271, 363, 364, 375], "residu": [60, 62, 73, 110, 142, 147, 159, 165, 229, 248, 251, 252, 255, 256, 257, 264, 277, 282, 283, 294, 299, 308, 315, 319, 353, 375, 398, 421], "openneuro": [60, 73, 110, 163, 208, 209, 227, 228, 241, 264, 267, 304, 307, 314, 363, 367, 369, 397, 398, 399], "understand": [60, 73, 83, 96, 110, 126, 147, 155, 157, 162, 169, 171, 208, 213, 215, 216, 218, 221, 264, 288, 289, 294, 298, 305, 308, 314, 319, 363, 364, 365, 374, 375, 380, 397, 421], "workflow": [61, 162, 306], "make_first_level_design_matrix": [61, 63, 69, 71, 108, 142, 147, 163], "frametim": 61, "add_reg": [61, 63, 108, 163, 271], "add_reg_nam": [61, 63, 271], "pcc_seed": 61, "dmn_contrast": 61, "seed_based_glm": 61, "setup": [61, 69, 108, 143, 147, 162, 166, 170, 187, 188, 189, 190, 191, 192, 193, 197, 200, 201, 203, 211, 212, 215, 216, 217, 220, 221, 226, 232, 389, 420], "first_level_model": [61, 65, 66], "run_img": [61, 101, 108, 264], "design_matric": [61, 62, 64, 67, 71, 100, 163, 264], "snapshot": 61, "dmn_z_map": 61, "portabl": [61, 75, 174], "pertin": [61, 75], "min_dist": [61, 264, 277, 398, 399], "plot_typ": [61, 264, 277, 399], "plot_adhd_dmn": [61, 73], "exploit": [62, 153, 161], "io": [62, 101, 140, 147, 152, 187, 194, 198, 208, 217, 249, 250, 367, 383, 387, 420], "s3": 62, "bucket": 62, "assur": 62, "nistat": [62, 121, 138, 147, 168], "against": [62, 154, 163, 167, 222, 279, 325, 372], "stopsign": 62, "ds000030": [62, 209], "v4": 62, "emploi": [62, 166, 167, 398, 399], "fetch_ds000030_url": [62, 144, 147, 227], "fetch_openneuro_dataset": 62, "select_from_index": 62, "exclusion_pattern": 62, "mriqc": 62, "parameter_plot": 62, "physio_plot": 62, "t1w": 62, "dwi": 62, "beh": 62, "bart": 62, "scap": 62, "exclusion_filt": [62, 241], "data_dir": [62, 100, 101, 108, 141, 147, 172, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233], "subject_id": [62, 101, 108, 229, 230], "moreov": [62, 101, 108, 144, 147, 162, 169, 302], "task_label": [62, 101, 108, 267], "space_label": [62, 267], "folder": [62, 86, 94, 101, 108, 142, 147, 162, 170, 172, 195, 196, 233, 267, 292, 302], "fmriprep": [62, 66, 142, 144, 147, 149, 153, 164, 167, 174, 208, 212, 213, 237, 267], "app": [62, 111, 219, 226, 267], "first_level_from_bid": [62, 100, 101, 108, 366], "mni152nlin2009casym": 62, "derivatives_fold": [62, 267], "models_run_img": [62, 100, 101, 108, 267], "models_ev": [62, 101, 108, 267], "models_confound": [62, 100, 101, 108, 267], "slicetimingref": [62, 100, 101, 108], "ds000030_r1": [62, 227, 228], "uncompress": [62, 127, 131, 147], "10159": 62, "10159_task": 62, "stopsignal_bold": 62, "json": [62, 100, 101, 108, 114, 267, 302, 304, 305, 306], "assum": [62, 64, 66, 71, 78, 79, 100, 101, 108, 159, 164, 170, 186, 227, 228, 254, 255, 256, 257, 264, 277, 279, 282, 297, 300, 324, 363, 372, 400, 401], "minimize_memori": [62, 64, 67, 70, 163, 264, 267, 277], "overrid": [62, 100, 139, 147, 187, 188, 189, 190, 191, 192, 193, 197, 200, 201, 203, 211, 212, 215, 216, 217, 220, 221, 226, 232, 387], "interfac": [62, 138, 142, 147, 153, 161, 162, 167, 242, 243], "get_design_from_fslmat": [62, 142, 147], "fsl_design_matrix_path": [62, 307], "feat": 62, "mat": [62, 307, 372], "column_nam": [62, 307], "stopsuccess": 62, "definit": [62, 94, 149, 157, 158, 161, 163, 167, 171, 194, 304, 309, 312, 315, 363, 392, 393, 395, 396, 421], "design_column": [62, 262], "cond_": 62, "02d": [62, 78, 80], "firstlevelmodelfirstlevelmodel": 62, "nib": 62, "fsl_z_map": 62, "zstat12": 62, "isf": [62, 76, 79, 101, 107, 108], "unc": [62, 79, 80, 101], "plot_img_comparison": 62, "masker_": [62, 66, 77, 79, 242, 243, 244, 245, 247, 248, 249, 250, 387], "ref_label": [62, 369], "src_label": [62, 369], "latex": [62, 145, 147, 170], "purpos": [62, 64, 67, 69, 71, 79, 101, 108, 113, 161, 166, 174, 208, 264, 277, 327, 399, 418, 419], "to_latex": 62, "04_glm_first_level": 62, "plot_bids_featur": [62, 73], "utilis": 62, "styler": 62, "signatur": [62, 133, 147, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405], "therefor": [62, 142, 147, 153, 159, 161, 189, 191], "style": [62, 120, 142, 147, 241], "tabular": 62, "llrrrrl": 62, "toprul": 62, "midrul": 62, "307532": 62, "6300": [62, 102], "668929": 62, "534376": 62, "254210": 62, "918703": 62, "2520": [62, 102], "715845": 62, "2b": 62, "683343": 62, "2c": 62, "587956": 62, "692869": 62, "664250": 62, "461193": 62, "257986": 62, "078390": 62, "815609": 62, "5c": 62, "798387": 62, "208105": 62, "348351": 62, "190472": 62, "385929": 62, "163956": 62, "079389": 62, "056165": 62, "792": 62, "10a": 62, "726486": 62, "10b": 62, "710553": 62, "043724": 62, "950054": 62, "937283": 62, "906274": 62, "756": [62, 100, 111], "14a": 62, "882906": 62, "776293": 62, "bottomrul": 62, "save_glm_to_bid": [62, 144, 147], "contrast_typ": [62, 69, 108, 252, 260, 304], "out_dir": [62, 304], "nilearn_glm": 62, "prefix": [62, 304], "_task": [62, 267], "line_termin": 62, "linetermin": 62, "stopsuccessminusgo": 62, "r_squar": [62, 70, 142, 147, 256, 264, 277], "glob": [62, 120, 130, 147, 171, 283, 302, 421], "dataset_descript": [62, 304], "stopsignal_contrast": 62, "stopsuccessminusgo_design": 62, "stopsuccessminusgo_stat": 62, "effect_statmap": [62, 304], "p_statmap": 62, "t_statmap": 62, "variance_statmap": [62, 304], "z_statmap": 62, "stopsignal_design": 62, "stopsignal_stat": 62, "errorts_statmap": [62, 304], "rsquare_statmap": [62, 304], "stopsignal_statmap": 62, "runtimeerror": [63, 78], "librari": [63, 78, 94, 113, 132, 147, 157, 162, 169, 173, 409, 419, 420], "compris": [63, 66, 86, 390, 398], "trial": [63, 66, 72, 111, 154, 163, 167, 220], "c0": 63, "c1": 63, "c3": 63, "motion": [63, 66, 70, 101, 111, 140, 147, 163, 208, 264, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 389, 401], "jointli": [63, 162, 294], "cumsum": 63, "translat": [63, 135, 147, 173, 264, 277, 280, 305, 399], "rigid": 63, "bodi": [63, 397], "tx": 63, "ty": 63, "tz": 63, "rx": 63, "ry": 63, "rz": 63, "varieti": [63, 100, 153, 154, 155, 156, 157, 162, 167], "x1": [63, 94, 405], "polynomi": [63, 66, 163, 264, 271], "x2": [63, 94], "x3": 63, "ax3": 63, "set_titl": [63, 70, 75, 78, 79, 80, 91, 100, 105], "1753015208063937": 63, "layout": [63, 132, 147, 246, 327], "fiac": [64, 210], "dehaen": [64, 67, 111, 217], "lambertz": [64, 67], "anton": [64, 67], "jl": [64, 67], "campagn": [64, 67], "ciuciu": [64, 67], "denghien": [64, 67], "jobert": [64, 67, 111, 217], "lebihan": [64, 67], "sigman": [64, 67], "pallier": [64, 67], "jb": [64, 67], "segreg": [64, 67], "sentenc": [64, 65, 66, 67, 69, 72, 81, 101, 217], "hum": [64, 67], "mapp": [64, 67], "2006": [64, 67, 111, 159, 169, 246, 256, 257], "www": [64, 67, 71, 111, 114, 156, 159, 160, 187, 188, 189, 190, 191, 192, 194, 197, 200, 201, 207, 211, 212, 213, 217, 219, 220, 221, 222, 224, 226, 229, 230, 232, 237, 244, 245, 282, 305, 306, 325, 361, 401, 402], "pubmedcentr": [64, 67, 111, 305, 306], "nih": [64, 67, 111, 155, 305, 306], "gov": [64, 67, 111, 155, 305, 306], "articlerend": [64, 67, 111, 305, 306], "fcgi": [64, 67, 111, 305, 306], "artid": [64, 67, 111, 305, 306], "2653076": [64, 67], "r11": [64, 67], "subdirectori": [64, 222, 224], "getcwd": 64, "write_dir": 64, "fetch_fiac_first_level": [64, 67], "func1": [64, 67, 71, 230], "func2": [64, 67, 71, 230], "design_fil": [64, 67], "design_matrix1": [64, 67], "design_matrix2": [64, 67], "df": [64, 67, 100, 107, 398], "n_column": [64, 67, 164, 186], "pad_vector": 64, "contrast_": 64, "routin": [64, 66, 89, 172, 220, 419], "sstssp_minus_dstdsp": 64, "dstdsp_minus_sstssp": 64, "dst_minus_sst": [64, 67], "dsp_minus_ssp": 64, "dst_minus_sst_for_dsp": 64, "dsp_minus_ssp_for_dst": 64, "deactiv": 64, "contrast_id": [64, 65, 66, 67, 69, 71], "contrast_v": [64, 65, 66, 67, 69, 71], "2i": 64, "contast": 64, "implicitli": [64, 66, 69, 80, 102, 108, 154, 161], "z_image_path": 64, "s_z_map": 64, "0x7fdb46cc3940": 64, "0x7fdb490e3f70": 64, "unexpectedli": [64, 67], "ratio": [64, 67, 94, 131, 147, 167, 208, 247, 249, 250, 387, 389], "plot_fiac_analysi": [64, 73], "hemodyam": 65, "audio_comput": [65, 66, 69], "audio_left_hand_button_press": [65, 66, 69], "audio_right_hand_button_press": [65, 66, 69], "horizontal_checkerboard": [65, 66], "sentence_listen": [65, 66, 69], "sentence_read": [65, 66, 69], "vertical_checkerboard": [65, 66], "visual_comput": [65, 66, 69], "visual_left_hand_button_press": [65, 66, 69], "visual_right_hand_button_press": [65, 66, 69], "fetch_localizer_first_level": [65, 66, 69], "epi_img": [65, 66, 69, 89, 174, 218, 319, 322, 365], "events_fil": [65, 66, 69], "impuls": [65, 68, 163, 164, 167, 264, 266, 271], "behind": 65, "concret": [65, 162, 164], "interv": [65, 66, 100, 242, 243, 244, 245, 247, 248, 254, 256, 257, 388, 394, 405], "character": [65, 66, 111, 169, 305], "hairi": 65, "sorri": 65, "price": [65, 159], "flexibl": [65, 121, 147], "contrast_matrix": [65, 66, 69, 71], "dict": [65, 66, 69, 71, 89, 105, 114, 179, 180, 181, 190, 222, 223, 224, 225, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 260, 264, 273, 277, 279, 303, 304, 308, 309, 310, 311, 312, 313, 314, 315, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 361, 362, 370, 371, 378, 379, 383, 386, 387, 388, 389, 397, 399], "audio": [65, 66, 69], "video": 65, "breath": [65, 66], "ask": [65, 114, 132, 135, 147, 162, 170], "814": [65, 73], "plot_fir_model": [65, 73], "clarifi": [66, 140, 147], "exploratori": 66, "increment": [66, 95, 169, 170], "outcom": [66, 167, 306], "reader": [66, 169, 421], "familiar": [66, 162, 169], "concept": [66, 98, 135, 147, 154, 155, 162, 167, 171, 421], "paradigm": [66, 69, 71, 97, 109, 110, 114, 154, 164, 224, 271, 287, 292, 293, 295, 367, 375, 380], "pinel": [66, 72, 111, 217], "bmc": [66, 72, 111, 217], "2007": [66, 72, 111, 148, 217, 226, 288, 305, 306, 402], "probe": [66, 69, 158, 167], "button": [66, 69, 72, 76, 77, 79, 80, 105, 142, 147, 162, 164, 215, 217, 225], "press": [66, 69, 72, 76, 77, 79, 80, 105, 111, 164, 215, 217, 225, 256, 257], "horizont": [66, 72, 80, 217, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "checkerboard": [66, 72, 80, 217], "listen": [66, 69, 81, 217], "short": [66, 100, 114, 161, 162, 167, 198, 199, 202, 222, 223, 224, 225], "mental": [66, 69, 72, 81, 217, 223], "subract": 66, "epoch": [66, 250], "100m": 66, "male": [66, 187], "voic": 66, "instruct": [66, 69, 72, 110, 143, 145, 147, 162, 168, 223, 420], "passiv": 66, "verifi": [66, 101, 162, 174], "understood": [66, 222], "flash": 66, "narr": [66, 81, 162], "000000": 66, "400000": 66, "700000": 66, "399994": 66, "700012": 66, "make_localizer_contrast": 66, "involv": [66, 69, 71, 100, 164], "differenti": [66, 71], "content": [66, 69, 84, 111, 158, 159, 162, 169, 200, 205, 211, 219, 282, 401], "stori": [66, 69, 111, 220], "comptat": 66, "encapsul": 66, "plot_contrast": 66, "discret": [66, 71, 139, 140, 145, 147, 264, 273, 292, 305, 309, 310, 311, 312, 313, 314, 315, 401], "spuriou": [66, 111, 152, 162, 305, 306, 390], "heart": 66, "scanner": [66, 164, 167, 305], "01hz": [66, 187], "longest": 66, "multipli": [66, 84, 90, 125, 147, 159, 161, 186, 251, 254, 256, 257, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 376, 378, 379], "shall": 66, "wors": [66, 248], "poorli": [66, 94, 174], "mayb": [66, 114, 325], "useless": 66, "haven": [66, 103], "basi": [66, 69, 108, 163, 264, 266, 271, 305], "undershoot": 66, "strong": [66, 89, 161, 162], "seem": [66, 75, 98, 161], "someth": 66, "inclus": [66, 241], "sole": [66, 114, 161, 311, 314], "discount": 66, "misspecif": 66, "hint": [66, 148, 149], "misfit": 66, "valuabl": [66, 162], "adjust": [66, 68, 130, 145, 147, 306, 327, 338, 341], "shift": [66, 138, 144, 147, 309, 310, 311, 312, 313, 314, 315, 401], "mi": 66, "sake": [66, 79, 105], "simplic": [66, 69, 154], "readabl": 66, "drop": [66, 70, 100, 127, 128, 129, 133, 147, 170], "far": [66, 108, 161, 297, 303], "autoregress": [66, 264, 273], "ordinari": [66, 102, 105, 255, 325], "least": [66, 68, 100, 102, 103, 105, 111, 154, 160, 162, 250, 251, 255, 264, 273, 277, 278, 279, 310, 313, 315, 319, 325, 356, 420], "explicitli": [66, 67, 107, 132, 144, 147, 154, 222, 304, 306, 387], "obviou": 66, "stick": 66, "arguabl": 66, "greater": [66, 100, 140, 142, 147, 164, 264, 273, 281, 288, 301, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 371, 381, 383, 385, 398, 402, 405], "complex": [66, 77, 87, 111, 114, 154, 156, 159, 162, 166, 169, 174], "ar3": [66, 273], "wish": [66, 79, 105, 142, 147, 162, 167, 170, 212, 213, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 362, 365, 367, 368, 371, 373, 374, 375], "computation": [66, 155, 159], "problemat": 66, "uncontrol": 66, "spike": 66, "phenomena": 66, "respir": 66, "blood": [66, 164, 167], "oxygen": [66, 164, 167], "themselv": [66, 114, 174], "percentil": [66, 87, 88, 98, 242, 243, 244, 245, 247, 248, 281, 288, 301, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 346, 347, 348, 350, 352, 353, 359, 362, 373, 381, 382, 383, 385, 389, 402], "kill": 66, "somewhat": 66, "colinear": 66, "scrub": [66, 140, 142, 145, 147, 149, 264, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 389, 401], "scenario": [66, 163, 164, 174], "exclud": [66, 114, 170, 390], "unwant": 66, "wecan": 66, "discrep": [66, 161], "drawback": 66, "bias": 66, "mild": 66, "5mm": [66, 95, 169], "smoother": 66, "firstlevemodel": 66, "grei": [66, 89, 125, 135, 141, 147, 173, 174, 212, 213, 235, 236, 237, 239, 318, 321], "data_mask": [66, 104], "fetch_icbm152_brain_gm_mask": [66, 75, 125, 147, 212], "icbm_mask": 66, "driven": [66, 153, 162, 169, 191, 271], "resample_to_img": [66, 75, 93, 124, 147, 173, 174, 297], "resampled_icbm_mask": 66, "spot": 66, "interestingli": 66, "resili": 66, "reassur": 66, "plot_first_level_detail": [66, 73], "summary_statistics_session1": 67, "0x7fdb47707a00": 67, "summary_statistics_session2": 67, "0x7fdb3c6a0550": 67, "compute_fixed_effect": 67, "contrast_img": [67, 261], "variance_img": [67, 261], "effect_vari": [67, 80, 252, 264, 277], "fixed_fx_contrast": 67, "fixed_fx_vari": 67, "fixed_fx_stat": 67, "0x7fdb580c37c0": 67, "868": [67, 73], "plot_fixed_effect": [67, 73], "hemodynam": [68, 71, 154, 167], "propos": [68, 100, 162, 163, 170, 319], "primat": 68, "agent": 68, "mion": 68, "monkei": 68, "coupl": [68, 148, 170], "metabol": [68, 164, 167], "phenomenolog": 68, "framework": [68, 148, 208], "whenev": [68, 155, 280], "uncertainti": [68, 76, 79, 161, 163, 164, 167], "occur": [68, 120, 147, 164, 167, 420], "time_length": [68, 268, 269, 270, 274, 275, 276], "amplitud": [68, 266, 271, 381, 383, 385], "exp_condit": [68, 266], "stim": 68, "oversampl": [68, 264, 266, 268, 269, 270, 271, 274, 275, 276], "gamma": [68, 144, 147, 163], "mion_response_funct": 68, "factor": [68, 70, 100, 104, 129, 147, 156, 167, 254, 256, 257, 266, 268, 269, 270, 271, 274, 275, 276, 280, 360, 373, 374, 375, 382], "response_funct": 68, "dt": 68, "time_stamp": 68, "rint": 68, "delai": [68, 170, 264, 266, 271], "mion_time_deriv": 68, "drf": 68, "derived_response_funct": 68, "rf_model": 68, "main_deriv": 68, "compute_regressor": [68, 142, 147, 163], "model_titl": 68, "convolut": [68, 164, 266, 271], "_label": 68, "con_id": [68, 266], "plot_hrf": [68, 73], "capabl": [69, 142, 147, 174], "coregist": 69, "obvious": 69, "geometri": [69, 111, 293, 370, 376, 377, 378, 379, 385, 404, 405], "resort": 69, "whose": [69, 161, 167, 180, 181, 183, 255, 289, 405], "basic_contrast": [69, 71, 163], "Of": 69, "cours": [69, 151, 164, 167, 310, 313], "impress": 69, "littl": [69, 75, 154, 155, 162], "963": [69, 73], "plot_localizer_surface_analysi": [69, 73], "assess": [70, 78, 111, 154, 161, 162, 163, 187, 246, 325, 361], "clean_img": [70, 125, 127, 132, 142, 147, 173, 401], "0x7fdb4a1888b0": 70, "set_index": 70, "head": [70, 264, 277, 305, 397, 399], "real_timeseri": 70, "predicted_timeseri": [70, 163], "navi": 70, "purpl": 70, "oliv": [70, 111, 159, 191], "teal": 70, "fig1": 70, "axs1": 70, "labelpad": 70, "resid": [70, 144, 147, 305, 306], "fig2": 70, "axs2": 70, "006256025894389561": 70, "07049870657347272": 70, "0034931346633929974": 70, "0008347353074654359": 70, "01560692294143525": 70, "005982784657046168": 70, "markedli": 70, "deep": [70, 179, 180, 181, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 277, 308, 309, 310, 311, 312, 313, 314, 315, 386, 387, 388, 389], "awai": [70, 161, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "receiv": [70, 100, 154, 167, 369], "coil": 70, "salt": 70, "necessarili": [70, 152, 164], "influenc": [70, 161, 248], "0x7fdb4aa9df10": 70, "tell": [70, 86, 111, 161, 220], "everywher": [70, 160], "z_map_ftest": 70, "stat_typ": [70, 264], "0x7fdb3b141ac0": 70, "plot_predictions_residu": [70, 73], "percept": [71, 135, 147, 164, 217], "realign": [71, 220], "scrambl": [71, 94, 163], "supposedli": 71, "henson": [71, 100, 111], "goshen": 71, "gottstein": 71, "ganel": 71, "otten": 71, "quayl": 71, "rugg": 71, "electrophysiolog": 71, "haemodynam": [71, 163, 164, 167], "prime": 71, "2003": [71, 111, 251, 255], "jul": 71, "793": [71, 120, 147], "1093": [71, 111, 193, 199, 219], "cercor": [71, 111, 193, 199, 219], "multimodal_fac": 71, "fetch_spm_multimodal_fmri": [71, 163], "specfii": 71, "catch_warn": [71, 103], "simplefilt": [71, 103], "auto_resampl": [71, 283], "mean_imag": 71, "idx": [71, 199], "revious": 71, "tail": [71, 254, 256, 257], "tcontrast": [71, 254, 256, 257], "sophist": [71, 98, 157], "implic": [71, 100, 111], "portion": 71, "sparser": [71, 94, 153, 247, 248, 389, 391], "anterior": [71, 91, 103, 129, 147, 205, 207, 296, 376, 378, 379], "frontal": [71, 91, 111, 159, 360, 365, 367, 368, 374, 375], "lobe": [71, 202], "1013": [71, 73, 102, 109], "plot_spm_multimodal_fac": [71, 73], "protocol": [72, 167, 217], "archi": 72, "meriaux": [72, 111, 217], "identif": [72, 94, 111, 167, 217], "databas": [72, 103, 111, 217, 222], "cognit": [72, 100, 103, 111, 154, 164, 167, 169, 174, 200, 209, 217, 220, 226, 227], "1186": 72, "1471": 72, "2202": 72, "hardcod": [72, 145, 147, 240], "trial_type_idx": 72, "condition_id": 72, "ones_lik": [72, 77], "export": [72, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379], "tsvfile": 72, "localizer_ev": 72, "plot_ev": [72, 138, 147, 163], "plot_write_events_fil": [72, 73], "auto_examples_04_glm_first_level": 73, "unpair": [74, 82, 110, 166, 217, 277, 337, 364, 367, 380], "sex": [75, 78, 166, 187, 219, 232, 242, 243, 244, 245, 247, 248], "juli": [75, 111, 119, 147, 161, 306], "mf": [75, 111, 219], "gm_mask": 75, "adequ": 75, "000000000000007": 75, "second_level": [75, 76, 77, 78, 79, 80, 81, 101, 144, 147, 166, 399, 418], "secondlevelmodel": [75, 76, 77, 79, 80, 81, 101, 142, 147, 166, 264, 304, 399], "second_level_model": [75, 76, 79, 81, 101], "0x7fdb49fe20d0": 75, "secondlevelmodelsecondlevelmodel": [75, 77], "second_level_contrast": [75, 77, 79, 264, 277, 279, 399], "03g": 75, "40175": 75, "0x7fdb582fafd0": 75, "icbm152_2009": 75, "1457": 75, "plot_oasi": [75, 82], "circular": 76, "rosenblatt": [76, 111, 259], "jd": 76, "fino": [76, 111, 259], "weeda": [76, 111, 259], "wd": 76, "solari": [76, 111, 259], "goeman": [76, 111, 259], "jj": 76, "nov": [76, 111, 206], "786": [76, 111, 259], "796": [76, 111, 259], "fetch_localizer_contrast": [76, 77, 79, 80, 105, 125, 147, 215, 216], "get_tmap": [76, 79, 80, 217], "second_level_input": [76, 79, 80, 101, 142, 144, 147, 277, 279], "p_val": [76, 77, 79], "p001_uncorrect": 76, "cluster_level_infer": [76, 142, 147, 166], "proportion_true_discoveries_img": [76, 259], "plot_proportion_activated_voxel": [76, 82], "cue": [77, 105, 216, 217], "variat": [77, 101, 105, 106, 111, 159, 160, 167, 226, 263, 279, 325], "pseudo": [77, 105, 249, 250, 256, 279, 281, 387], "brainomics_loc": [77, 105], "brainomics_data": [77, 105], "s01": [77, 105], "cmaps_leftauditoryclick": [77, 105], "tested_var": [77, 105, 106, 325], "float64": 77, "worth": 77, "aualiti": 77, "mask_quality_check": [77, 105], "contrast_map_filenam": [77, 105], "fluenci": 77, "math_img": [77, 79, 83, 85, 96, 107, 110, 123, 147, 173, 225, 294, 375, 380], "logarithm": [77, 79, 279], "equal": [77, 98, 135, 142, 144, 147, 157, 192, 197, 198, 199, 203, 242, 243, 244, 245, 247, 248, 252, 277, 294, 297, 317, 319, 320, 322, 382, 383, 385, 387], "fwer": [77, 81, 166, 167, 279], "non_parametric_infer": [77, 79, 142, 144, 147, 166], "neg_log_pvals_permuted_ols_unmask": [77, 105], "model_intercept": [77, 79, 105, 279, 325], "two_sided_test": [77, 79, 102, 159, 279, 325], "cap": [77, 79], "1e3": 77, "plot_second_level_association_test": [77, 82], "characterist": [78, 154, 167, 306], "subjects_label": [78, 278], "extra": [78, 114, 156, 170, 171, 187, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 366, 368, 372, 419, 421], "extra_info_subject": 78, "make_second_level_design_matrix": [78, 166, 418], "attent": [78, 271], "singular": [78, 254, 256, 257, 288, 402], "aberr": 78, "plot_second_level_design_matrix": [78, 82], "elicit": 79, "participant_id": 79, "tolist": [79, 100], "cidx": 79, "determin": [79, 94, 100, 101, 102, 107, 159, 161, 162, 181, 248, 267, 278, 302, 317, 318, 319, 320, 321, 322, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 367, 368, 370, 374, 375, 382, 386, 405], "p001_unc": [79, 101], "nonparametr": 79, "pend": 79, "reformat": 79, "assumpt": [79, 159, 164], "null": [79, 143, 147, 154, 159, 164, 167, 252, 279, 325], "out_dict": 79, "ideal": [79, 105, 151, 164, 170, 191], "permuted_least_squar": [79, 144, 147], "tend": [79, 100, 156, 161, 172], "logp_max_t": [79, 105, 279, 325], "logp_max_s": [79, 279, 325], "logp_max_mass": [79, 279, 325], "img_count": 79, "i_row": 79, "j_col": 79, "plot_second_level_one_sample_test": [79, 82], "retinotop": 80, "distinct": [80, 100, 111, 161, 193, 219], "border": [80, 286, 317, 320, 326, 328, 329], "primari": [80, 264, 277, 399], "sample_vert": 80, "sample_horizont": 80, "s1": 80, "s2": 80, "condition_effect": 80, "doesn": [80, 103, 162], "subject_effect": 80, "assembl": [80, 112, 164], "unpaired_design_matrix": 80, "paired_design_matrix": 80, "ax_unpair": 80, "ax_pair": 80, "width_ratio": [80, 100], "second_level_model_unpair": 80, "second_level_model_pair": 80, "stat_maps_unpair": 80, "stat_maps_pair": 80, "992007221626409e": 80, "unsurprisingli": 80, "plot_second_level_two_sample_test": [80, 82], "bunch": [81, 113, 127, 147, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232], "oppos": [81, 173, 174], "fetch_localizer_calculation_task": [81, 106, 215, 217], "statstic": 81, "cmap_filenam": [81, 106], "trivial": 81, "thresholded_map": [81, 280], "two_sid": [81, 139, 142, 147, 280, 301, 398, 399], "thresholded_map1": 81, "threshold1": 81, "thresholded_map2": 81, "threshold2": 81, "3g": 81, "thresholded_map3": 81, "threshold3": 81, "raw": [81, 92, 101, 108, 139, 147, 154, 172, 174, 194, 242, 243, 244, 245, 249, 250, 311, 314, 375, 387, 397], "0x7fdb4b84a550": 81, "0x7fdb3c6a0dc0": 81, "fourth": [81, 84, 140, 147, 264, 279, 289, 290, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 358, 389, 401], "0x7fdb4a1886a0": 81, "plot_threshold": [81, 82], "881": 82, "auto_examples_05_glm_second_level": 82, "1456": 82, "4x4": [84, 173, 242, 243, 244, 245, 247, 248, 249, 250, 264, 277, 284, 294, 295, 297, 311, 314, 317, 319, 320, 322, 328, 329, 387], "millimet": [84, 159, 174, 242, 243, 244, 245, 246, 249, 250, 264, 277, 279, 299, 309, 310, 311, 312, 313, 314, 315, 316, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 387, 389, 391, 398], "entri": [84, 162, 242, 243, 244, 245, 254, 256, 257, 286, 377, 405], "3x3": [84, 173, 242, 243, 244, 245, 247, 248, 249, 250, 264, 277, 294, 297, 311, 314, 317, 319, 320, 322, 387], "closest": [84, 297], "union": [84, 320, 322, 323], "messag": [84, 122, 147, 170, 180, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 225, 226, 227, 228, 229, 230, 232, 242, 243, 244, 245, 246, 247, 248, 277, 279, 283, 294, 309, 310, 317, 318, 319, 321, 325, 387, 388, 389], "circl": 84, "diamond": 84, "source_affin": 84, "rotation_matrix": 84, "0mm": [84, 169], "img_in_mm_spac": 84, "target_affine_3x3": 84, "target_affine_4x4": 84, "img_3d_affin": 84, "img_4d_affin": 84, "target_affine_mm_space_offset_chang": 84, "img_3d_affine_in_mm_spac": 84, "img_4d_affine_in_mm_spac": 84, "anchor": 84, "plot_affine_transform": [84, 96], "goal": [85, 90, 93, 113, 161, 162], "result_img": [85, 172, 293], "img1": [85, 293], "img2": [85, 293], "892": 85, "plot_compare_mean_imag": [85, 96], "connected_label_region": [86, 127, 147, 151, 173, 389, 391], "oper": [86, 89, 91, 94, 104, 113, 140, 147, 154, 161, 162, 164, 167, 171, 172, 174, 179, 180, 213, 241, 264, 277, 291, 293, 294, 317, 318, 319, 321, 322, 363, 407, 411, 421], "atlas_yeo_2011": 86, "atlas_yeo": 86, "thick_7": [86, 203], "0x7fdb4785c610": 86, "apart": [86, 127, 147, 151, 152, 161], "region_label": 86, "region_extractor": [86, 142, 147], "0x7fdb58102190": 86, "difficult": [86, 148, 155, 160, 174], "eg": [86, 89, 129, 132, 138, 147, 148, 149, 154, 173, 174, 357, 358, 397], "broken": [86, 125, 133, 147, 159], "relabeled_yeo_atla": 86, "folder_path": 86, "connect_diag": [86, 390], "region_labels_not_diag": 86, "0x7fdb2ca86400": 86, "100mm": 86, "region_labels_min_s": 86, "876": [86, 96], "plot_extract_regions_labels_imag": [86, 96], "smith_atla": 87, "atlas_network": 87, "dmn_network": 87, "regions_indices_network3": 87, "blob": [87, 94, 153, 173, 199], "network3": 87, "plot_extract_rois_smith_atla": [87, 96], "fetch_neurovault_auditory_computation_task": [88, 132, 147, 225], "foreground": [88, 152], "connected_region": [88, 120, 133, 147, 152, 173, 389, 390], "scoreatpercentil": [88, 103], "threshold_percentile_img": 88, "threshold_value_img": 88, "0x7fdb46b768b0": 88, "regions_percentile_img": 88, "regions_value_img": 88, "plot_extract_rois_statistical_map": [88, 96], "li": [89, 111, 232], "homogen": [89, 151, 173, 192, 242, 243, 244, 245, 249, 250, 297, 311, 314, 387], "miyawaki_filenam": [89, 174], "miyawaki_mean_img": [89, 174], "0x7fdb58045a30": 89, "0x7fdb49134fa0": 89, "mask_arg": [89, 92, 174, 249, 250, 311, 314, 387], "uniform": 89, "epi_filenam": [89, 174], "eros": [89, 167, 213, 235, 238, 317, 318, 319, 321, 322], "dilat": [89, 94, 167, 173, 213, 235, 238, 317, 318, 319, 321, 322], "layer": 89, "skull": [89, 212, 317, 318, 319, 321, 322], "lower_cutoff": [89, 319, 322], "upper_cutoff": [89, 319, 320, 322], "bright": 89, "hover": 89, "trended_data": 89, "detrended_data": 89, "plot_mask_comput": [89, 96, 174], "negative_stat_img": 90, "plot_negate_imag": [90, 96], "output_filepath": [91, 92, 174], "mni152templ": [91, 264, 277, 360, 373, 374, 375, 399], "ward": [91, 151, 167, 168, 312, 387], "pole": 91, "123176": 91, "insular": 91, "18728": 91, "superior": [91, 103, 160, 296], "40640": 91, "42528": 91, "inferior": 91, "par": 91, "triangulari": 91, "8824": 91, "operculari": 91, "11072": 91, "68584": 91, "37688": 91, "divis": 91, "4168": 91, "14640": 91, "6784": 91, "20200": 91, "temporooccipit": 91, "16032": 91, "5176": 91, "15536": 91, "11760": 91, "55160": 91, "lobul": 91, "23264": 91, "supramargin": 91, "13936": 91, "18072": 91, "angular": 91, "19272": 91, "78232": 91, "32712": 91, "intracalcarin": 91, "11208": 91, "7808": 91, "juxtaposit": 91, "formerli": [91, 132, 147], "supplementari": [91, 113, 159], "11872": 91, "subcallos": 91, "9136": 91, "paracingul": 91, "23552": 91, "20736": 91, "19296": 91, "precun": 91, "44984": 91, "cuneal": 91, "9816": 91, "orbit": 91, "25184": 91, "parahippocamp": 91, "9984": 91, "5680": [91, 102], "lingual": 91, "27048": 91, "fusiform": [91, 159], "4880": [91, 102], "12752": 91, "11752": 91, "14448": 91, "operculum": 91, "5496": 91, "central": 91, "15088": 91, "8952": 91, "planum": [91, 103], "polar": 91, "5992": 91, "heschl": 91, "h1": 91, "h2": 91, "4832": 91, "temporal": [91, 103], "7616": 91, "supracalcarin": 91, "2088": 91, "42208": 91, "quot": 91, "niftilablesmask": 91, "n_time_point": [91, 92, 272, 273], "add_subplot": 91, "label_idx": 91, "plot_nifti_labels_simpl": [91, 96], "0x7fdb49d93fd0": 92, "components_mask": [92, 104], "converg": [92, 104, 161, 180, 183, 247, 248, 386], "revers": [92, 128, 135, 147], "765": 92, "plot_nifti_simpl": [92, 96, 174], "load_mni152_templ": [93, 141, 147, 212, 213, 234, 236, 239, 281, 284, 289, 293, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 405], "resampled_stat_img": 93, "tmap_img": 93, "original_shap": 93, "original_affin": 93, "resampled_shap": 93, "resampled_affin": 93, "template_img": 93, "template_shap": 93, "template_affin": 93, "992": [93, 96], "plot_resample_to_templ": [93, 96], "allevi": 94, "curs": 94, "aris": [94, 111, 164, 305, 306], "context": [94, 100, 111, 162, 167], "chain": [94, 173, 179, 180], "clear": [94, 114, 135, 144, 147, 162, 242, 243, 244, 245, 249, 250, 311, 314, 387], "student": [94, 164, 173, 252, 421], "haxby_label": 94, "txt": [94, 226], "especi": [94, 133, 142, 147, 148, 154, 172, 383, 421], "Such": [94, 148, 302], "4mm": [94, 152, 159, 208, 250], "12mm": 94, "anisotropi": 94, "indent": 94, "analog": 94, "0x7fdb4ba58160": 94, "brief": [94, 162, 164], "motiv": 94, "realm": 94, "ttest_ind": [94, 173], "establish": [94, 160, 162], "log_p_valu": 94, "log_p_values_img": 94, "0x7fdb4a9feb80": 94, "extend": [94, 138, 143, 147, 164, 174, 297], "annot": [94, 112, 127, 138, 147, 199, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 362, 365, 367, 368, 371, 373, 374, 375, 376, 377, 378, 379, 382, 385, 403, 419, 421], "0x7fdb486ce9d0": 94, "intersect": [94, 173, 320, 322, 323, 393], "investig": [94, 98, 153, 170, 246], "bin_p_valu": 94, "boolean": [94, 114, 139, 144, 147, 185, 187, 211, 217, 226, 246, 249, 250, 264, 283, 295, 305, 308, 317, 318, 319, 321, 322, 360, 365, 367, 369, 374, 377, 382, 395, 396], "logic": [94, 114, 162, 241], "logical_and": [94, 102], "jargon": 94, "AND": [94, 114], "conjunct": 94, "bin_p_values_and_vt": 94, "otherwis": [94, 102, 103, 132, 147, 164, 170, 185, 187, 193, 194, 205, 206, 207, 215, 216, 217, 219, 226, 249, 250, 267, 292, 296, 305, 306, 373, 382, 383, 385, 389, 390, 405], "bin_p_values_and_vt_img": 94, "06_manipulating_imag": 94, "plot_roi_extract": [94, 96], "0x7fdb58043a00": 94, "consolid": [94, 143, 147], "toward": [94, 142, 147, 179, 292, 309, 310, 311, 312, 313, 314, 315, 421], "morpholog": [94, 173, 317, 318, 319, 321, 322], "forget": [94, 162, 419], "hole": 94, "binary_dil": [94, 173, 317, 318, 319, 321, 322], "dil_bin_p_values_and_vt": 94, "dil_bin_p_values_and_vt_img": 94, "0x7fdb47d7e910": 94, "immedi": [94, 306], "n_label": [94, 357], "first_roi_data": 94, "second_roi_data": 94, "first_roi_img": 94, "second_roi_img": 94, "0x7fdb581e6f70": 94, "suit": [94, 100, 149, 155, 169, 191], "condition_nam": [94, 100], "n_cond_img": 94, "n_cond": 94, "gather": [94, 162, 164], "cond": [94, 100, 266], "cond_map": 94, "mask_data": 94, "mask_atla": 94, "2274": [94, 96], "lose": [95, 419], "first_epi_fil": 95, "mean_func": 95, "20mm": [95, 169], "smoothed_img": [95, 172], "imm": 95, "914": [95, 96], "plot_smooth_mean_imag": [95, 96], "auto_examples_06_manipulating_imag": 96, "764": 96, "891": 96, "multivari": [97, 109, 110, 111, 153, 167, 168, 169, 190, 208, 289, 294, 308, 314, 375, 380, 420], "massiv": [97, 109, 110, 158, 211, 216, 217, 287, 289, 294, 308, 314, 325, 353, 367, 375, 380, 412, 421], "bridg": 98, "integr": [98, 120, 135, 147, 162, 173, 311], "usecas": [98, 151, 155, 157, 162], "pointer": [98, 157], "unclear": 98, "n_timepoint": [98, 154, 157], "meaning": [98, 100, 122, 132, 135, 147, 162, 164, 282, 401], "stipul": 98, "823": 98, "processor": [98, 157], "dummyclassifi": [98, 99, 140, 147, 157, 242, 243, 244, 245], "pure": [98, 102, 247, 248], "slower": [98, 157, 161, 297], "permutation_test_scor": [98, 157], "null_cv_scor": 98, "selectpercentil": [98, 127, 147], "anova_svc": 98, "return_estim": 98, "fitted_pipelin": 98, "test_scor": 98, "801": 98, "first_pipelin": 98, "svc_coef": 98, "invert": [98, 104, 138, 147, 161, 179, 254, 256, 257], "full_coef": 98, "0x7fdb4a100190": 98, "fisher": [98, 111, 252], "lda": 98, "discriminant_analysi": 98, "lineardiscriminantanalysi": 98, "anova_lda": 98, "n_condit": 98, "8009": 98, "principl": [98, 151, 154, 158, 160, 167, 246, 421], "fanci": 98, "n_features_to_select": 98, "rfe_svc": 98, "awar": [98, 181, 400], "plot_advanced_decoding_scikit": [98, 109], "gridsearchcv": [99, 157], "pipe": [99, 162], "param_grid": [99, 155, 242, 243, 244, 245], "most_frequ": 99, "connectivity__kind": 99, "labelencod": 99, "pheno": 99, "refit": 99, "cv_results_": 99, "mean_test_scor": 99, "std_test_scor": 99, "candid": 99, "param_connectivity__kind": 99, "1231": 99, "plot_age_group_prediction_cross_v": [99, 109, 135, 147], "substitut": [100, 397], "psychophysiolog": 100, "ppi": 100, "cisler": [100, 111], "everyth": [100, 170], "systemat": [100, 111, 122, 147, 217, 305, 306], "incorpor": [100, 153], "literatur": [100, 149, 187, 288, 306, 402], "mention": [100, 162, 163, 164], "appropri": [100, 111, 174, 189, 208, 212, 237, 264, 266, 271, 390], "abdulrahman": [100, 111], "decis": [100, 111, 155, 159, 242, 243, 244, 245, 247, 248, 252], "inter": [100, 105, 149, 173, 174, 320, 322], "mumford": [100, 111, 154, 169, 209, 227], "primarili": 100, "fetch_language_localizer_demo_dataset": [100, 101, 108, 163], "events_df": 100, "languageloc": [100, 101, 108], "img_filt": [100, 101, 108, 267], "desc": [100, 101, 108, 267, 305, 306], "preproc": [100, 101, 108, 267], "standard_glm": 100, "fmri_fil": 100, "glm_paramet": 100, "get_param": [100, 179, 180, 181, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 277, 308, 309, 310, 311, 312, 313, 314, 315, 386, 387, 388, 389], "01_task": [100, 101, 108], "languagelocalizer_desc": [100, 101, 108], "highlight": [100, 170], "lsa_events_df": 100, "condition_count": 100, "i_trial": 100, "iterrow": 100, "trial_condit": 100, "__": [100, 179, 180, 181, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 277, 308, 309, 310, 311, 312, 313, 314, 315, 386, 387, 388, 389], "shouldn": [100, 170, 189], "trial_nam": 100, "lsa_glm": 100, "lsa_beta_map": 100, "trialwise_condit": 100, "beta_map": 100, "relabel": [100, 390], "lss_transform": 100, "row_numb": 100, "compliant": [100, 162, 174, 227, 240, 306], "trial_type_seri": 100, "trial_type_list": 100, "trial_numb": 100, "left_001": 100, "track": [100, 103, 161, 170], "lss_beta_map": 100, "lss_design_matric": 100, "lss_events_df": 100, "lss_glm": 100, "dm_titl": 100, "i_ax": 100, "though": [100, 104, 154, 255, 376, 400], "vastli": 100, "quick": [100, 169, 418], "neurosynth": [100, 103, 112, 222, 224, 421], "lang_seed_beta_seri": 100, "lang_beta_seri": 100, "lang_corr": 100, "language_connectivity_img": 100, "string_seed_beta_seri": 100, "string_beta_seri": 100, "string_corr": 100, "string_connectivity_img": 100, "josh": [100, 111], "keith": [100, 111], "bush": [100, 111], "scott": [100, 111, 207], "steel": [100, 111], "1042": [100, 111], "1052": [100, 111], "jess": [100, 111], "rissman": [100, 111], "adam": [100, 111], "gazzalei": [100, 111], "esposito": [100, 111], "stage": [100, 111, 169], "752": [100, 111], "763": [100, 111], "2004": [100, 111, 193, 256, 257], "jeanett": [100, 111, 169], "benjamin": [100, 111, 207], "turner": [100, 111, 190, 200], "gregori": [100, 111], "ashbi": [100, 111], "poldrack": [100, 111, 114, 169, 209, 220, 222, 224, 227], "deconvolv": [100, 111, 154], "multivoxel": [100, 111, 154, 220], "2636": [100, 111], "2643": [100, 111, 139, 147], "spatiotempor": [100, 111], "rapid": [100, 111], "1429": [100, 111], "1438": [100, 111], "hunar": [100, 111], "richard": [100, 111], "766": [100, 111], "plot_beta_seri": [100, 109], "consult": 101, "simplifi": [101, 108, 113, 125, 135, 143, 147, 174, 215, 216], "basenam": 101, "rotx": 101, "roti": 101, "rotz": 101, "conson": 101, "value_count": 101, "scalar": [101, 159, 174, 251, 252, 254, 255, 256, 257, 299, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 362, 371], "model_and_arg": 101, "midx": 101, "8mm": [101, 264, 277, 399], "first_level_contrast": [101, 142, 147, 277, 279], "plot_bids_analysi": [101, 109], "behav": [102, 264, 266, 271], "exchang": [102, 104, 187], "winkler": [102, 111, 219, 325], "anderson": [102, 111, 187, 219, 325], "robinson": [102, 111, 219, 325], "australian": [102, 111, 325], "zealand": [102, 111, 325], "journal": [102, 111, 159, 199, 200, 203, 226, 325], "avesbiodiv": 102, "mncn": 102, "csic": 102, "estadistica": 102, "permut2": 102, "feb": 102, "conditions_encod": 102, "func_reduc": 102, "n_session": 102, "grouped_fmri_mask": 102, "grouped_conditions_encod": 102, "session_mask": 102, "session_house_mask": 102, "session_face_mask": 102, "ol": [102, 105, 254, 256, 257, 264, 273, 325, 412], "tracepvals_bonferroni": 102, "neg_log_pvals_bonferroni": 102, "neg_log_pvals_bonferroni_unmask": 102, "1111": [102, 105, 106, 111, 325], "dataconversionwarn": [102, 105, 106], "mean_fmri_img": 102, "neg_log_pvals_bonferroni_data": 102, "plot_haxby_mass_univari": [102, 109], "fetch_neurovault": [103, 107, 114, 128, 135, 139, 147, 223, 224, 225], "licens": [103, 107, 192], "port": 103, "filo": 103, "neurovault_analysi": 103, "load_mni152_brain_mask": [103, 125, 141, 147, 212], "nv_data": [103, 107], "max_imag": [103, 107, 114, 222], "fetch_neurosynth_word": [103, 114, 222, 224], "term_weight": 103, "word_frequ": [103, 114, 222, 224], "vocabulari": [103, 114, 167, 169, 222, 224], "total_scor": 103, "ntop": 103, "term_idx": 103, "1307": 103, "insula": 103, "nreshap": 103, "deprecationwarn": [103, 308, 309, 310, 311, 312, 313, 314, 315, 389], "fail": [103, 135, 144, 147, 161, 162, 222, 224, 389], "failur": [103, 127, 147, 162, 319], "is_us": 103, "image_path": 103, "images_meta": [103, 107, 114, 222, 223, 224, 225], "collection_id": [103, 107, 114, 222, 224], "fast_ica": 103, "ica_map": 103, "term_weights_for_compon": 103, "components_": [103, 130, 147, 249, 250], "ic_map": 103, "ic_term": 103, "flip": [103, 126, 147, 191], "ic_threshold": 103, "ic_img": 103, "important_term": 103, "neurolog": [103, 164, 167, 189], "834": [103, 109], "1722": [103, 109], "plot_ica_neurovault": [103, 109], "advis": [104, 162, 172, 213, 319, 387], "unsupervis": [104, 167, 249, 250, 264, 277, 386, 388], "latent": [104, 167], "sens": [104, 154, 169, 242, 243, 244, 245, 254, 256, 257, 329], "component_img": 104, "plot_ica_resting_st": [104, 109], "pvals_anova": [105, 106], "neg_log_pvals_anova": [105, 106], "neg_log_pvals_anova_unmask": [105, 106], "fwe": [105, 325], "tfce": [105, 144, 147, 167, 279, 325], "ols_output": 105, "neg_log_pvals_tfce_unmask": 105, "logp_max_tfc": [105, 279, 325], "6525": 105, "8049964904785": 105, "8811173439026": 105, "76287364959717": 105, "92654236157736": 105, "32541751861572": 105, "11392116546631": 105, "20400500297546": 105, "43263363838196": 105, "80132126808167": 105, "25999440087213": 105, "71800684928894": 105, "21366433663802": 105, "720000902811684": 105, "22916757143461": 105, "74170551981245": 105, "259927908579506": 105, "793605387210846": 105, "332050295437085": 105, "881553173065186": 105, "4394035213872005": 105, "amax": 105, "images_to_plot": 105, "i_col": 105, "new_titl": 105, "sig": 105, "plot_localizer_mass_univariate_method": [105, 106, 109], "masked_pv": 106, "plot_localizer_simple_analysi": [106, 109], "fetch_neurovault_id": [107, 114, 128, 147, 222, 223, 225], "stop_go_image_id": 107, "3041": 107, "3042": [107, 142, 147], "2676": 107, "2675": 107, "2818": 107, "2834": 107, "queri": [107, 222, 224, 241], "cognitive_paradigm_cogatla": 107, "contrast_definit": 107, "succ": 107, "map_typ": [107, 222], "image_id": [107, 114, 224], "collections_meta": [107, 114, 222, 223, 224, 225], "nplot": 107, "absolute_path": 107, "t_to_z": 107, "t_score": 107, "deg_of_freedom": 107, "sf": 107, "z_valu": 107, "mean_map": 107, "z_img": 107, "current_collect": 107, "ncomput": 107, "this_meta": 107, "ncollect": 107, "t_img": 107, "number_of_subject": 107, "meta_analysis_img": 107, "sqrt": [107, 125, 147, 185, 186, 256, 257], "plot_neurovault_meta_analysi": [107, 109], "downsampl": [108, 152, 173, 208, 361], "10k": 108, "sidecar": 108, "json_fil": 108, "repetitiontim": 108, "z_scores_right": 108, "z_scores_left": 108, "contrast_valu": 108, "accumul": [108, 419], "z_score_left": 108, "az_scores_right": 108, "popul": [108, 111, 148, 163, 180, 219], "ttest_1samp": 108, "t_left": 108, "pval_left": 108, "t_right": 108, "pval_right": 108, "z_val_left": 108, "z_val_right": 108, "plot_surface_bids_analysi": [108, 109], "auto_examples_07_advanc": 109, "permiss": [110, 135, 147], "auto_examples_python": 110, "auto_examples_jupyt": 110, "arrang": [111, 133, 147, 336, 338, 341, 355, 360, 365, 368, 373, 374, 375, 419], "alphabet": [111, 135, 147, 172], "bib": 111, "dimitri": [111, 120, 132, 145, 147, 161, 180, 183, 217, 389], "samara": [111, 161, 180, 183, 389], "medic": [111, 152, 160, 179, 197, 212, 389], "septemb": [111, 126, 141, 147, 389], "01093944": [111, 389], "elena": [111, 190], "erik": [111, 190], "erhardt": [111, 190], "eswar": [111, 190], "damaraju": [111, 190], "william": [111, 190, 219, 232, 251, 255], "gruner": [111, 190], "judith": [111, 190], "segal": [111, 190], "roger": [111, 190, 231], "silva": [111, 190], "havlicek": [111, 190], "sriniva": [111, 190], "rachakonda": [111, 190], "jill": [111, 190, 193, 219], "fri": [111, 190], "ravi": [111, 190], "kalyanam": [111, 190], "andrew": [111, 187, 190, 192, 212], "arvind": [111, 190], "caprihan": [111, 190], "jessica": [111, 190, 200, 205, 206], "tom": [111, 140, 147, 190], "eichel": [111, 190], "steven": [111, 190, 205, 206, 207, 305, 306], "adelsheim": [111, 190], "angela": [111, 190, 200], "bryan": [111, 190], "juan": [111, 190], "bustillo": [111, 190], "clark": [111, 145, 147, 159, 190], "sarah": [111, 190], "feldstein": [111, 190], "ew": [111, 190], "francesca": [111, 190], "filbei": [111, 190], "corei": [111, 190], "ford": [111, 190], "kent": [111, 190], "hutchison": [111, 190], "rex": [111, 190], "jung": [111, 190], "kiehl": [111, 190], "piyadasa": [111, 190], "kodituwakku": [111, 190], "yuko": [111, 190], "komesu": [111, 190], "mayer": [111, 190], "godfrei": [111, 190], "pearlson": [111, 190], "john": [111, 129, 147, 159, 161, 190, 205, 226, 232, 325], "phillip": [111, 190], "joseph": [111, 190, 205], "sadek": [111, 190], "ursina": [111, 190], "teuscher": [111, 190], "robert": [111, 140, 147, 161, 190, 212, 237], "vinc": [111, 190], "calhoun": [111, 190, 232], "frontiersin": [111, 187, 190, 222, 224, 232], "fnsy": [111, 190], "00002": [111, 190], "marti": [111, 202, 325], "onlinelibrari": [111, 192, 202, 231, 282, 325, 401], "wilei": [111, 192, 202, 231, 256, 257, 282, 325, 401], "1467": [111, 325], "842x": [111, 325], "00156": [111, 325], "arxiv": [111, 159, 161, 180, 183, 192, 193, 199, 200, 202, 203, 205, 211, 219, 226, 231, 282, 325, 401], "luca": [111, 160], "baldassarr": [111, 160], "janaina": [111, 160], "mourao": [111, 160, 169], "miranda": [111, 160, 169], "massimiliano": [111, 160], "pontil": [111, 160], "intern": [111, 160, 161, 162, 164, 181, 191, 250, 291, 293], "workshop": [111, 160, 191], "www0": [111, 160], "ucl": [111, 160, 229, 230], "ac": [111, 160, 200, 212, 229, 230, 237], "uk": [111, 160, 200, 229, 230], "staff": [111, 160], "neurosparse_prni": [111, 160], "1109": [111, 160, 191, 388, 394], "prni": [111, 160, 191], "yashar": [111, 305, 306, 402], "behzadi": [111, 288, 305, 306, 402], "khale": [111, 305, 306, 402], "restom": [111, 305, 306, 402], "joi": [111, 305, 306, 402], "liau": [111, 305, 306, 402], "liu": [111, 199, 203, 305, 306, 402], "perfus": [111, 305, 306, 402], "sciencedirect": [111, 156, 159, 160, 189, 191, 194, 197, 201, 207, 212, 217, 220, 221, 237, 244, 245, 305, 306, 325, 361, 402], "pii": [111, 156, 159, 160, 189, 191, 194, 197, 201, 207, 212, 217, 220, 221, 237, 244, 245, 305, 306, 325, 361, 402], "s1053811907003837": [111, 305, 306, 402], "mine": [111, 169, 191], "hierarchi": [111, 191], "pedro": [111, 191], "rosa": [111, 191], "neto": [111, 191], "lyttelton": [111, 191], "habib": [111, 191], "benali": [111, 191], "alan": [111, 191, 212, 237], "evan": [111, 140, 147, 191, 199, 202, 212, 237], "bootstrap": [111, 191], "1126": [111, 191, 205, 211], "1139": [111, 191], "s1053811910002697": [111, 191], "lorrain": [111, 159], "tyler": [111, 159], "semant": [111, 140, 142, 147, 159], "perirhin": [111, 159], "4766": [111, 159], "4775": [111, 159], "jneurosci": [111, 159], "1523": [111, 129, 147, 159], "2828": [111, 159], "loui": [111, 212, 237], "collin": [111, 189, 212, 237], "zijdenbo": [111, 212], "wim": [111, 212], "baar": [111, 212], "\u00e9": [111, 212, 217], "anim": [111, 212], "insect": [111, 212], "attila": [111, 212], "kuba": [111, 212], "\u0161": [111, 212], "\u00e1": [111, 212], "amal": [111, 212], "todd": [111, 159, 212], "pokropek": [111, 212], "editor": [111, 179, 212], "berlin": [111, 179, 197, 212], "heidelberg": [111, 179, 197, 212], "springer": [111, 179, 197, 212], "cameron": [111, 192, 197, 232], "jame": [111, 192, 211, 256, 257], "paul": [111, 145, 147, 192, 219], "holtzheim": [111, 192], "iii": [111, 192], "xiaop": [111, 192], "hu": [111, 192], "helen": [111, 192], "mayberg": [111, 192], "1914": [111, 192], "1928": [111, 192], "1002": [111, 192, 202, 231, 282, 401], "hbm": [111, 192, 282, 401], "21333": [111, 192], "kamalak": [111, 194], "ga\u00ebl": [111, 156, 194, 197, 244, 245], "antonia": [111, 194], "machlouzarid": [111, 194], "shalit": [111, 194], "krzysztof": [111, 194, 222, 224], "demian": [111, 118, 132, 147, 194], "wassermann": [111, 118, 132, 147, 194], "117126": [111, 194], "s1053811920306121": [111, 194], "davidson": [111, 256, 257], "mackinnon": [111, 256, 257], "econometr": [111, 251, 255, 256, 257], "theori": [111, 167, 220, 256, 257], "univ": [111, 256, 257], "york": [111, 256, 257], "ny": [111, 256, 257], "isbn": [111, 251, 255, 256, 257], "978": [111, 256, 257], "512372": [111, 256, 257], "gso": [111, 256, 257], "gbv": [111, 256, 257], "de": [111, 132, 135, 147, 256, 257, 272], "cmd": [111, 256, 257], "srcha": [111, 256, 257], "srt": [111, 256, 257], "yop": [111, 256, 257], "ikt": [111, 256, 257], "trm": [111, 256, 257], "ppn": [111, 256, 257], "393847152": [111, 256, 257], "sourceid": [111, 256, 257], "fbw_bibsonomi": [111, 256, 257], "am": [111, 193], "halgren": [111, 193, 201], "cerebr": [111, 164, 193, 199, 203, 205, 217, 219], "supplement": [111, 193, 212, 237], "s151": [111, 193], "s1053": [111, 193, 212, 237], "8119": [111, 193, 212, 237], "71561": [111, 193], "christoph": [111, 129, 132, 147, 193, 201], "bruce": [111, 193, 199, 201, 203, 231], "ander": [111, 193, 201, 231], "eric": [111, 129, 132, 133, 135, 147, 193, 201, 205], "s1053811910008542": [111, 201], "ga": [111, 160], "\u00eb": [111, 160], "graphnet": [111, 160], "stanford": [111, 160], "june": [111, 125, 128, 131, 140, 147, 160, 161], "2015": [111, 114, 115, 116, 117, 118, 119, 120, 121, 147, 160, 180, 183, 197, 217, 219, 222, 224, 305, 306], "01147731": [111, 160], "\u00fc": [111, 160], "bingen": [111, 160], "germani": [111, 160], "00991743": [111, 160], "nico": [111, 205, 207], "dosenbach": [111, 123, 147, 205, 207], "binyam": [111, 205], "alexand": [111, 187, 199, 205, 206], "cohen": [111, 205, 206], "damien": [111, 205], "fair": [111, 153, 205], "church": [111, 205, 206], "nelson": [111, 205, 206], "gagan": [111, 205, 206], "wig": [111, 205, 206], "alecia": [111, 205, 206], "vogel": [111, 135, 147, 205, 206], "christina": [111, 205], "lessov": [111, 205], "schlaggar": [111, 205, 206, 207, 305, 306], "kelli": [111, 205, 206, 212, 232, 237, 305, 306], "ann": [111, 205, 206], "barn": [111, 205, 206, 305, 306], "dubi": [111, 205], "feczko": [111, 205], "rebecca": [111, 205, 208], "coalson": [111, 205], "pruett": [111, 205], "deanna": [111, 205, 207, 219], "barch": [111, 205, 219], "petersen": [111, 205, 206, 207, 305, 306], "bradlei": [111, 205, 206, 207, 219, 305, 306], "5997": [111, 205], "sciencemag": [111, 205, 211], "1194144": [111, 205], "duchi": [111, 161], "stephen": [111, 161, 200, 219, 232, 279, 325], "gould": [111, 161], "daphn": [111, 161], "koller": [111, 161], "subgradi": [111, 161], "1206": [111, 161], "3249": [111, 161], "joset": [111, 159], "etzel": [111, 159], "jeffrei": [111, 159, 187], "zack": [111, 159], "braver": [111, 159], "promis": [111, 159], "pitfal": [111, 154, 159], "s1053811913002917": [111, 159], "filippini": [111, 200, 219], "macintosh": [111, 219], "morgan": [111, 219], "hough": [111, 219], "gui": [111, 219], "goodwin": [111, 219], "giovanni": [111, 219], "frisoni": [111, 219], "matthew": [111, 219, 232, 325], "christian": [111, 129, 132, 147, 200, 219, 305, 306], "beckmann": [111, 200, 219, 305, 306], "clare": [111, 200, 219, 232], "mackai": [111, 200, 219], "carrier": [111, 219], "apo": [111, 219], "\u03b54": [111, 219], "allel": [111, 219], "proceed": [111, 159, 163, 200, 219, 246, 306], "nation": [111, 159, 200, 219, 246, 306], "academi": [111, 159, 200, 219, 246, 306], "7209": [111, 219], "7214": [111, 219], "pna": [111, 159, 200, 219, 306], "1073": [111, 159, 200, 219, 306], "0811879106": [111, 219], "sereno": [111, 231], "tootel": [111, 231], "intersubject": [111, 231], "28sici": [111, 202, 231], "291097": [111, 202, 231], "0193": [111, 202, 231], "281999": [111, 231], "3a4": [111, 202, 231], "3c272": [111, 231], "3aaid": [111, 202, 231], "hbm10": [111, 231], "3e3": [111, 202, 231], "3b2": [111, 202, 231], "sici": [111, 202, 231], "1097": [111, 202, 231], "aid": [111, 202, 231], "van": [111, 114, 193, 219, 222, 224, 305, 306], "der": [111, 193], "kouw": [111, 193], "florent": [111, 193], "s\u00e9gonn": [111, 193], "salat": [111, 193], "evelina": [111, 193], "busa": [111, 193], "larri": [111, 193], "seidman": [111, 193], "goldstein": [111, 193], "kennedi": [111, 193], "vern": [111, 193], "cavi": [111, 193], "niko": [111, 193], "makri": [111, 193], "rosen": [111, 193], "bhg087": [111, 193], "academ": [111, 193, 199, 219], "oup": [111, 193, 199, 219], "1193353": [111, 193], "boyd": 111, "edinburgh": 111, "fletcher": [111, 187], "sarang": 111, "joshi": 111, "riemannian": 111, "diffus": [111, 154, 167], "tensor": 111, "s0165168406001691": 111, "sigpro": 111, "2005": [111, 306], "vladimir": [111, 212, 237], "fonov": [111, 212, 237], "botteron": [111, 212, 237], "almli": [111, 212, 237], "mckinstri": [111, 212, 237], "unbias": [111, 154, 212, 237], "pediatr": [111, 212, 237], "s1053811910010062": [111, 212, 237], "rc": [111, 212, 237], "cr": [111, 212, 237], "dl": [111, 212, 237], "nonlinear": [111, 212, 237], "birth": [111, 212, 237], "adulthood": [111, 212, 237], "s102": [111, 212, 237], "70884": [111, 212, 237], "fox": [111, 200, 202, 306], "snyder": [111, 305, 306], "justin": [111, 306], "maurizio": [111, 306], "corbetta": [111, 306], "essen": [111, 114, 219, 222, 224, 306], "marcu": [111, 159, 219, 226, 306], "raichl": [111, 306], "9673": [111, 306], "9678": [111, 306], "0504136102": [111, 306], "freedman": [111, 325], "lane": [111, 144, 147, 325], "nonstochast": [111, 325], "busi": [111, 325], "econom": [111, 325], "1983": [111, 325], "tandfonlin": [111, 325], "07350015": [111, 325], "10509354": [111, 325], "holm": [111, 199, 282, 401], "worslei": [111, 282, 401], "frith": [111, 282, 401], "frackowiak": [111, 282, 401], "1994": [111, 282, 401], "460020402": [111, 282, 401], "gabriel": [111, 222, 224], "rivera": [111, 114, 222, 224], "yannick": [111, 115, 147, 156, 217, 222, 224, 244, 245], "schwarz": [111, 222, 224], "satrajit": [111, 222, 224], "ghosh": [111, 114, 222, 224], "camil": [111, 222, 224], "maumet": [111, 114, 222, 224], "vanessa": [111, 222, 224], "sochat": [111, 114, 222, 224], "nichol": [111, 114, 167, 169, 219, 222, 224, 279, 319, 325], "tal": [111, 114, 174, 222, 224, 315], "yarkoni": [111, 114, 222, 224], "marguli": [111, 114, 222, 224], "neuroinformat": [111, 222, 224], "fninf": [111, 114, 222, 224], "00008": [111, 114, 222, 224], "philadelphia": [111, 160], "00839984": [111, 160], "educ": [111, 219, 226, 251, 255, 382], "fifth": [111, 213, 251, 255], "edit": [111, 140, 147, 170, 251, 255], "066189": [111, 251, 255], "stern": [111, 251, 255], "nyu": [111, 251, 255], "edu": [111, 200, 203, 226, 251, 255], "wgreen": [111, 251, 255], "econometricanalysi": [111, 251, 255], "htm": [111, 251, 255], "logan": [111, 160], "grosenick": [111, 160], "brad": [111, 160], "klingenberg": [111, 160], "kiefer": [111, 160], "katovich": [111, 160], "brian": [111, 160, 232, 282, 401], "knutson": [111, 160], "s1053811912012487": [111, 160], "ida": [111, 211], "gobbini": [111, 211], "maura": [111, 211], "furei": [111, 211], "alumit": [111, 211], "ishai": [111, 211], "jennif": [111, 211], "schouten": [111, 211], "pietro": [111, 211], "pietrini": [111, 211], "5539": [111, 211], "1063736": [111, 211], "honorio": [111, 161, 180, 183], "tommi": [111, 180, 183], "jaakkola": [111, 180, 183], "1207": [111, 161, 180, 183], "4255": [111, 161, 180, 183], "jona": [111, 129, 147, 388, 394], "rena": [111, 135, 147, 151, 156, 167, 168, 244, 245, 387, 394], "tran": [111, 189, 388, 394], "anal": [111, 388, 394], "mach": [111, 388, 394], "intel": [111, 388, 394], "tpami": [111, 388, 394], "2815524": [111, 388, 394], "schwartz": [111, 114, 115, 147, 156, 217, 244, 245], "scalabl": [111, 156, 244, 245], "s1053811917308182": [111, 156, 244, 245], "koji": [111, 220], "complementari": [111, 220], "neuropsychologia": [111, 220], "s0028393211005070": [111, 220], "thorsten": [111, 159], "kahnt": [111, 159], "grueschow": [111, 159], "speck": [111, 159], "dylan": [111, 159, 232], "perceptu": [111, 159], "s0896627311002960": [111, 159], "nikolau": [111, 159, 246], "kriegeskort": [111, 159, 169, 246], "rainer": [111, 159, 246], "goebel": [111, 159, 246], "peter": [111, 159, 200, 202, 246], "bandettini": [111, 159, 246], "3863": [111, 159, 246], "3868": [111, 159, 246], "0600244103": [111, 159], "laird": [111, 200], "mickl": [111, 200], "kimberli": [111, 200], "rai": [111, 200], "rees": [111, 200], "mckai": [111, 200], "glahn": [111, 200], "4022": [111, 200], "4037": [111, 200], "1162": [111, 200, 226], "jocn": [111, 200, 226], "_a": [111, 200], "_00077": [111, 200], "mit": [111, 199, 200, 226], "1777164": [111, 200], "jocn_a_00077": [111, 200], "lancast": [111, 202], "rainei": [111, 202], "summerlin": [111, 202], "freita": [111, 202], "toga": [111, 202], "mazziotta": [111, 202], "autom": [111, 114, 189, 202, 222, 224], "preliminari": [111, 202], "forward": [111, 202], "1997": [111, 135, 147, 202], "281997": [111, 202], "3c238": [111, 202], "hbm6": [111, 202], "jack": [111, 155, 202], "woldorff": [111, 202], "lawrenc": [111, 202], "parson": [111, 202], "mario": [111, 202], "liotti": [111, 202], "catarina": [111, 202], "laci": [111, 202], "kochunov": [111, 202], "dan": [111, 132, 135, 147, 202], "nickerson": [111, 202], "shawn": [111, 202], "mikiten": [111, 202], "talairach": [111, 129, 147, 166, 202], "28200007": [111, 202], "3a3": [111, 202], "3c120": [111, 202], "hbm30": [111, 202], "200007": [111, 202], "lindquist": [111, 132, 147, 282, 401], "stephan": [111, 282, 401], "geuter": [111, 282, 401], "tor": [111, 114, 222, 224, 282, 401], "wager": [111, 114, 222, 224, 282, 401], "caffo": [111, 282, 401], "modular": [111, 162, 282, 401], "reintroduc": [111, 282, 401], "biorxiv": [111, 282, 401], "407676": [111, 282, 401], "1101": [111, 282, 401], "traci": [111, 226], "jami": [111, 226], "parker": [111, 226], "csernanski": [111, 226], "morri": [111, 226], "randi": [111, 199, 203, 226], "buckner": [111, 199, 203, 226], "nondement": [111, 226], "dement": [111, 226], "1498": [111, 226], "1507": [111, 226], "1756878": [111, 226], "1328": [111, 160], "februari": [111, 115, 116, 122, 123, 127, 137, 147, 160], "00563468": [111, 160], "tmi": [111, 160], "2113378": [111, 160], "yoichi": [111, 221], "hajim": [111, 221], "okito": [111, 221], "masa": [111, 221], "aki": [111, 132, 147, 221], "yusuk": [111, 221], "hiroki": [111, 221], "norihiro": [111, 221], "sadato": [111, 221], "yukiyasu": [111, 221], "s0896627308009586": [111, 221], "dougla": [111, 256, 257], "montgomeri": [111, 256, 257], "peck": [111, 256, 257], "geoffrei": [111, 256, 257], "vine": [111, 256, 257], "ed": [111, 256, 257], "son": [111, 256, 257], "0471754951": [111, 256, 257], "naselari": [111, 155], "kendrick": [111, 155], "kai": [111, 155], "shinji": [111, 155], "nishimoto": [111, 155], "gallant": [111, 155], "20691790": [111, 155], "pmid": [111, 155, 199, 203], "pubm": [111, 155, 189, 305, 306], "ncbi": [111, 155, 305, 306], "nlm": [111, 155, 305, 306], "jare": [111, 187], "nielsen": [111, 187], "brandon": [111, 187], "zielinski": [111, 187], "nichola": [111, 187], "lang": [111, 187, 189], "erin": [111, 187], "bigler": [111, 187], "janet": [111, 187], "lainhart": [111, 187], "multisit": [111, 187], "autism": [111, 187], "fnhum": [111, 187], "00599": [111, 187], "kate": [111, 200, 232], "stanlei": [111, 232], "colcomb": [111, 232], "maarten": [111, 232, 305, 306], "menn": [111, 232, 305, 306], "melissa": [111, 232], "benedict": [111, 232], "moreno": [111, 217, 232], "laura": [111, 232], "panek": [111, 232], "shaquanna": [111, 232], "brown": [111, 232], "zavitz": [111, 232], "qingyang": [111, 232], "sharad": [111, 232], "sikka": [111, 232], "gutman": [111, 232], "saroja": [111, 232], "bangaru": [111, 232], "rochel": [111, 232], "tziona": [111, 232], "schlachter": [111, 232], "stephani": [111, 232], "kamiel": [111, 232], "ayesha": [111, 232], "anwar": [111, 232], "caitlin": [111, 232], "hinz": [111, 232], "kaplan": [111, 232], "anna": [111, 232], "rachlin": [111, 232], "samantha": [111, 232], "adelsberg": [111, 232], "cheung": [111, 232], "ranjit": [111, 232], "khanuja": [111, 232], "chaogan": [111, 232], "yan": [111, 232], "courtnei": [111, 232], "margaret": [111, 232], "king": [111, 129, 132, 147, 232], "wood": [111, 232], "cox": [111, 232], "adriana": [111, 232], "dimartino": [111, 232], "eva": [111, 232], "petkova": [111, 232], "philip": [111, 232], "reiss": [111, 232], "nanci": [111, 232], "duan": [111, 232], "dawn": [111, 232], "thompsen": [111, 232], "bharat": [111, 232], "biswal": [111, 232], "barbara": [111, 232], "coffei": [111, 232], "hoptman": [111, 232], "javitt": [111, 232], "nunzio": [111, 232], "pomara": [111, 232], "sidti": [111, 232], "harold": [111, 232], "koplewicz": [111, 232], "francisco": [111, 232], "castellano": [111, 232], "bennett": [111, 232], "leventh": [111, 232], "milham": [111, 232], "reilli": [111, 219], "valentina": [111, 219], "tomassini": [111, 219], "narend": [111, 219], "ramnani": [111, 219], "heidi": [111, 219], "johansen": [111, 219], "berg": [111, 219], "zone": [111, 219], "953": [111, 219], "965": [111, 219], "bhp157": [111, 219], "17303287": [111, 219], "wolfgang": [111, 198], "amanda": [111, 198], "nili": [111, 198], "tyszka": [111, 198], "vivo": [111, 198], "nuclei": [111, 198], "180063": [111, 198], "1038": [111, 198, 209, 227], "sdata": [111, 198, 209, 227], "bastien": [111, 217], "antoinett": [111, 217], "julien": [111, 217], "serr": [111, 217], "deni": [111, 217], "le": [111, 217], "bihan": [111, 217], "stanisla": [111, 217], "congdon": [111, 209, 227], "triplett": [111, 209, 227], "karlsgodt": [111, 209, 227], "sabb": [111, 209, 227], "freimer": [111, 209, 227], "london": [111, 167, 209, 227], "cannon": [111, 209, 227], "bilder": [111, 209, 227], "phenom": [111, 209, 227], "160110": [111, 209, 227], "decemb": [111, 120, 121, 135, 147, 209, 227], "mitig": [111, 361], "s1053811916303871": [111, 361], "2142": [111, 305, 306], "2154": [111, 305, 306], "22019881": [111, 305, 306], "pmc3254728": [111, 305, 306], "timothi": [111, 199, 206, 219, 305], "laumann": [111, 199, 206, 305], "fran": [111, 206], "miezin": [111, 206], "anish": [111, 305], "mitra": [111, 305], "s1053811913009117": [111, 305], "raimon": [111, 305, 306], "pruim": [111, 305, 306], "daan": [111, 305, 306], "rooij": [111, 305, 306], "alberto": [111, 305, 306], "llera": [111, 305, 306], "jan": [111, 115, 147, 305, 306], "buitelaar": [111, 305, 306], "aroma": [111, 149, 305, 306], "hilari": [111, 208], "richardson": [111, 208], "grace": [111, 208], "lisandrelli": [111, 208], "alexa": [111, 208], "riobueno": [111, 208], "naylor": [111, 208], "sax": [111, 208], "social": [111, 208], "twelv": [111, 208], "livio": [111, 259], "wouter": [111, 259], "aldo": [111, 259], "jell": [111, 259], "novemb": [111, 129, 132, 135, 138, 147, 259], "schaefer": [111, 199], "ru": [111, 199], "kong": [111, 199], "gordon": [111, 199], "nian": [111, 199], "zuo": [111, 199], "avram": [111, 199], "yeo": [111, 199, 203, 357], "3095": [111, 199], "3114": [111, 199], "bhx179": [111, 199], "25696344": [111, 199], "_schaeferfullsupp": [111, 199], "seitzman": [111, 135, 147, 207], "caterina": [111, 207], "gratton": [111, 207], "marek": [111, 207], "ryan": [111, 135, 147, 207], "raut": [111, 207], "116290": [111, 207], "s105381191930881x": [111, 207], "zarrar": 111, "shehzad": 111, "gee": 111, "kristin": 111, "gotim": 111, "lucina": 111, "q": [111, 164, 170, 180, 260, 264, 277, 280, 399], "uddin": 111, "sang": 111, "han": 111, "lee": 111, "ami": 111, "krain": 111, "xavier": 111, "unconstrain": 111, "2209": 111, "2229": 111, "bhn256": 111, "17300841": 111, "sm": [111, 219], "glasser": [111, 219], "salimi": [111, 219], "khorshidi": [111, 219], "duff": [111, 219], "dc": [111, 219], "mw": [111, 219], "woolrich": [111, 219], "jenkinson": [111, 219], "cf": [111, 174, 219], "rfmri": [111, 219], "ohbm": [111, 131, 147, 219], "annual": [111, 219], "meet": [111, 144, 147, 219], "free": [111, 155, 162, 164, 167, 279, 325], "address": [111, 164, 166, 170, 279, 325], "localis": [111, 279, 325], "diego": [111, 219], "vidaurr": [111, 219], "ej": [111, 219], "behren": [111, 219], "kamil": [111, 219], "ugurbil": [111, 219], "karla": [111, 200, 219], "miller": [111, 200, 219], "demograph": [111, 219], "1565": [111, 219], "1567": [111, 219], "watkin": [111, 200], "roberto": [111, 125, 135, 147, 200], "toro": [111, 200], "textquoteright": [111, 200], "architectur": [111, 151, 200], "13040": [111, 200], "13045": [111, 200], "0905267106": [111, 200], "mccarthi": [111, 219], "emma": [111, 219], "clair": [111, 219], "xu": [111, 219], "horton": [111, 219], "eugen": [111, 219], "\u00e2": [111, 219], "mil": [111, 219], "u\u011furbil": [111, 219], "humanconnectom": [111, 219], "storag": [111, 174, 219, 223, 225], "media": [111, 219], "s500": [111, 219], "hcp500_megatrawl_april2015": [111, 219], "fenna": [111, 199, 203], "krienen": [111, 199, 203], "jorg": [111, 199, 203], "sepulcr": [111, 199, 203], "mert": [111, 199, 203], "sabuncu": [111, 199, 203], "danial": [111, 199, 203], "lashkari": [111, 199, 203], "marisa": [111, 199, 203], "hollinshead": [111, 199, 203], "joshua": [111, 137, 147, 199, 203], "roffman": [111, 199, 203], "jordan": [111, 199, 203], "smoller": [111, 199, 203], "lilla": [111, 199, 203], "z\u00f6llei": [111, 199, 203], "polimeni": [111, 199, 203], "hesheng": [111, 199, 203], "neurophysiologi": [111, 199, 203], "1125": [111, 199, 203], "1165": [111, 199, 203], "21653723": [111, 199, 203], "1152": [111, 199, 203], "jn": [111, 199, 203], "00338": [111, 199, 203], "tzourio": [111, 189], "mazoy": [111, 189], "landeau": [111, 189], "papathanassi": [111, 189], "crivello": [111, 189], "etard": [111, 189], "delcroix": [111, 189], "joliot": [111, 189], "macroscop": [111, 189], "2002": [111, 189], "s1053811901909784": [111, 189], "0978": [111, 189], "flore": [111, 179], "baronnet": [111, 179], "andrea": [111, 179], "kleinschmidt": [111, 179], "fillard": [111, 179], "stroke": [111, 179], "patient": [111, 167, 179], "tianzi": [111, 179], "jiang": [111, 179], "nassir": [111, 179], "navab": [111, 179], "josien": [111, 179], "pluim": [111, 179], "viergev": [111, 179], "assist": [111, 179], "intervent": [111, 179], "miccai": [111, 148, 179], "cn2h9c": [111, 179], "spontan": [111, 197], "1008": [111, 180], "5071": [111, 180], "bio": [111, 180], "s1053811913003340": [111, 197], "gerard": [111, 325], "ridgwai": [111, 325], "webster": [111, 325], "s1053811914000913": [111, 325], "synthesi": [111, 114, 161, 222, 224], "adelstein": 111, "donald": 111, "klein": 111, "retest": 111, "2163": 111, "2177": [111, 135, 147], "s1053811909011525": 111, "di": 111, "martino": 111, "1432": 111, "1445": 111, "s1053811909010167": 111, "papadopoulo": [111, 120, 132, 145, 147, 217], "orfano": [111, 120, 132, 145, 147, 217], "antonio": [111, 217], "frouin": [111, 217], "brainom": [111, 132, 147, 217], "s1053811915008745": [111, 217], "abstract": [112, 308], "knowledg": [112, 149, 164, 315], "beaten": 112, "mask_face_littl": [113, 172, 211], "mask_house_littl": [113, 172, 211], "comfort": [113, 162], "plenti": 113, "hesit": [113, 162], "rarr": [113, 174], "tube": 113, "clever": [113, 161], "resp": 113, "brighter": 113, "scratch": 113, "elementari": 113, "brows": [114, 142, 147], "introduc": [114, 125, 135, 144, 147, 154, 155, 159, 162, 174, 180], "upload": 114, "modal": [114, 154, 162, 230, 302], "went": 114, "webpag": 114, "brainpedia": 114, "1952": [114, 135, 147], "brainpedia_subset": 114, "32015": 114, "32016": 114, "criteria": [114, 162, 167, 187, 222], "collection_term": [114, 222], "collection_metadata": [114, 222], "everi": [114, 148, 149, 153, 154, 155, 159, 161, 162, 164, 174, 181, 195, 196, 222, 310, 313, 360, 365, 368, 373, 374, 375, 377, 392, 393, 420], "image_term": [114, 222], "snippet": 114, "is_valid": [114, 135, 147], "treat": 114, "cbf": 114, "cbv": 114, "express": [114, 120, 145, 147, 167, 172, 222, 247, 248, 262, 264, 292, 373], "ignorecas": 114, "special": [114, 135, 147], "isnul": [114, 222], "notnul": [114, 222], "notequ": [114, 222], "greaterorequ": [114, 222], "greaterthan": [114, 222], "lessorequ": [114, 222], "lessthan": [114, 222], "notin": [114, 222], "notcontain": [114, 222], "resultfilt": [114, 222], "OR": 114, "xor": 114, "NOT": 114, "conveni": [114, 173, 174, 208, 370], "collection_filt": [114, 222], "callabl": [114, 142, 147, 183, 222, 242, 243, 244, 245, 246], "image_filt": [114, 222], "anyth": [114, 161, 162], "lambda": 114, "disabl": [114, 133, 135, 139, 147, 161, 386], "rewritten": 114, "suppos": [114, 161, 170, 172, 174, 256, 257], "weird": 114, "small_meta_imag": 114, "platform": [114, 128, 147, 170], "unless": [114, 161, 162, 227, 279, 325, 370, 401], "vectorize_word": [114, 222, 224], "kj": 114, "ss": 114, "vv": 114, "te": 114, "ra": [114, 296], "front": [114, 251, 254], "neuroinform": 114, "contributor": [115, 116, 118, 119, 162, 170], "git": [115, 116, 118, 119, 120, 122, 125, 147, 162, 170], "shortlog": [115, 116, 118, 119, 120, 122, 125, 147], "jaqu": [115, 147], "grobler": [115, 147], "ronald": [115, 147], "phlypo": [115, 147], "\u00f3scar": [115, 118, 120, 122, 147], "n\u00e1jera": [115, 118, 120, 122, 147], "konstantin": [115, 147], "shmelkov": [115, 147], "jason": [115, 132, 147], "gor": [115, 132, 147], "savio": [115, 147], "margeta": [115, 147], "matthia": [115, 147], "ekman": [115, 147], "waskom": [115, 147], "bugfix": [117, 118, 121, 122, 125, 143, 147, 162], "minor": [118, 128, 130, 147, 154], "rewamp": [118, 147], "brok": [118, 147], "obei": [119, 147], "debian": [119, 147], "rule": [119, 147, 154, 155, 162, 242, 243, 244, 245], "sym_to_vec": [120, 125, 128, 140, 147], "helper": [120, 127, 128, 147, 162, 176, 222], "modernis": [120, 147], "784": [120, 147], "copy_img": [120, 147], "indexerror": [120, 142, 147], "fast_abs_percentil": [120, 147], "875": [120, 147], "group_sparse_covari": [120, 147, 161, 181], "move": [120, 127, 140, 147], "n_cut": [120, 147, 356], "find_cut_slic": [120, 127, 147], "822": [120, 147], "aina": [120, 147], "frau": [120, 147], "pascual": [120, 147], "ariel": [120, 132, 147], "rokem": [120, 132, 147], "targett": [121, 147], "renew": [122, 147], "flake8": [122, 144, 147, 162], "pull": [122, 144, 147, 167, 169], "rework": [122, 128, 135, 141, 145, 147], "symmetric_split": [122, 147, 195, 196], "mac": [122, 147], "numpy_convers": [122, 147], "csv_to_arrai": [122, 147], "refresh": [122, 147], "sparsifi": [122, 147], "circleci": [122, 127, 147], "brainhack": [123, 128, 147], "mathemat": [123, 147, 167, 293, 407], "cobr": [123, 127, 147], "fetch_cobr": [123, 127, 138, 142, 147], "basc": [123, 147, 191], "april": [124, 127, 133, 134, 143, 147], "expand": [124, 147, 167, 172, 292, 386, 388], "homedir": [124, 147], "uniformli": [124, 147, 155, 376, 378, 379], "aal": [124, 147, 189], "fetch_atlas_a": [124, 143, 147], "august": [125, 132, 144, 147], "wrong": [125, 143, 147, 164], "doc": [125, 141, 144, 145, 147, 162, 170], "ivan": [125, 132, 147], "gonzalez": [125, 132, 147], "guidotti": [125, 135, 147], "refactor": [126, 140, 142, 144, 147, 170], "resolv": [126, 136, 147], "1238": [126, 147], "outdat": [126, 145, 147], "get_affin": [126, 147, 172, 284], "checkout": [127, 147, 162, 170], "latest": [127, 147, 162, 170, 306], "changelog": 127, "_get_mask_volum": [127, 147], "_adjust_screening_percentil": [127, 147], "tar": [127, 147, 170], "set_axis_bgcolor": [127, 147], "fast_svd": [127, 147], "switch": [127, 134, 147, 162, 170, 367], "lapack": [127, 147, 161], "svd": [127, 147, 250, 288, 387, 402], "heurist": [127, 147, 160, 161, 181, 319, 360, 373, 374, 375, 382, 419], "pip": [127, 132, 135, 147, 162, 170, 420], "_safe_get_data": [127, 147], "safe": [127, 147], "ensure_finit": [127, 147, 282, 316, 319, 401], "cov_to_corr": [127, 147], "prec_to_parti": [127, 147], "qualit": [127, 147], "plot_surf": [127, 129, 135, 139, 140, 141, 142, 145, 147, 163, 378, 379, 419], "fetch_surf_fsaverage5": [127, 132, 147], "surf_plot": [127, 147], "schizophrenia": [127, 147, 167], "coveral": [127, 147], "codecov": [127, 147], "sym_matrix_to_vec": [128, 147, 186], "largest_connected_compon": [128, 147], "workaround": [128, 147], "vec_to_sym_matrix": [128, 147], "renam": [128, 132, 145, 147, 170], "plot_connectivity_measur": [128, 147], "tighter": [128, 147, 161], "largest_connected_component_img": [128, 147], "largest": [128, 147, 161, 291, 317, 318, 319, 320, 321, 322, 323, 359], "joe": [129, 147], "necu": [129, 147], "fetch_atlas_talairach": [129, 147], "resampling_interpol": [129, 147, 367, 368, 374, 375, 382], "backward": [129, 142, 147, 162, 195, 196], "incompat": [129, 147, 264], "cautious": [129, 147], "anat_img": [129, 147, 360], "contribut": [129, 132, 133, 134, 135, 136, 137, 141, 142, 144, 147, 155, 164, 170, 420], "jeff": [129, 147], "chiang": [129, 147], "sassenhagen": [129, 147], "sylvain": [129, 132, 135, 147], "lan": [129, 132, 147], "olivi": [129, 147], "quirion": [129, 147], "analu": [129, 132, 147], "r\u00e9mi": [129, 147], "madhyastha": [129, 132, 147], "meghana": [129, 132, 147], "sfvnmac": [129, 132, 147], "larson": [129, 132, 133, 135, 147], "horea": [129, 132, 147], "moritz": [129, 132, 135, 147], "boo": [129, 132, 135, 147], "rothberg": [129, 132, 147], "bedetti": [129, 132, 147], "griffith": [129, 147], "lannuzel": [129, 132, 147], "1536": [130, 147], "usabl": [130, 147, 159, 161, 221, 246], "node_color": [130, 140, 147, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 381], "1595": [130, 147], "nifti2imag": [130, 147], "confer": [131, 147], "cold_hot": [131, 147, 370, 375, 379, 382, 383, 385], "lock": [131, 147], "whitespac": [131, 147], "had": [131, 147], "pradeep": [131, 147], "raamana": [131, 147], "attributeerror": [131, 147], "httperror": [131, 147], "glaser": [131, 147], "view_mark": [132, 133, 135, 140, 147, 381, 382, 419], "view_stat_map": [132, 147], "bump": [132, 135, 140, 141, 142, 145, 147, 155, 157, 170], "python2": [132, 133, 134, 135, 147], "navig": [132, 147], "anaconda": [132, 147, 420], "feel": [132, 147, 162], "shout": [132, 147], "pbellec": [132, 147], "great": [132, 147], "awesom": [132, 147], "sportingli": [132, 147], "accommod": [132, 147], "feedback": [132, 147, 162, 170], "notter": [132, 147], "miykael": [132, 147], "brainsprit": [132, 133, 147, 419], "himanshupathak21061998": [132, 133, 147], "octob": [132, 135, 147], "oscar": [132, 147], "esteban": [132, 147], "uniti": [132, 147], "channel": [132, 147], "life": [132, 147], "gale": [132, 135, 147], "img_to_signals_label": [132, 135, 147, 393, 395], "sourav": [132, 147], "singh": [132, 147], "remi": [132, 147], "steinkamp": [132, 137, 147], "akshai": [132, 147], "gomez": [132, 135, 141, 144, 147], "guillaum": [132, 135, 147], "lemaitr": [132, 135, 147], "erramuzp": [132, 147], "foucault": [132, 147], "jehan": [132, 147], "nikolaidi": [132, 147], "dillon": [132, 147], "plunkett": [132, 147], "greg": [132, 135, 147], "operto": [132, 147], "dtyulman": [132, 147], "0a0": 132, "1705": [132, 147], "grid_search": [132, 147, 242, 243, 244, 245], "gill": [132, 135, 147], "holland": [132, 135, 147], "menuet": [132, 147], "romuald": [132, 147], "peer": [132, 147], "herholz": [132, 147], "consum": [133, 147, 157, 161, 170, 172], "noteworthi": [133, 147, 155], "fetch_atlas_schaefer_2018": [133, 135, 147], "fetch_coords_seitzman_2018": [133, 147], "node_coord": [133, 135, 147, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 371, 381], "edge_cmap": [133, 135, 147, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 381], "load_niimg": [133, 147], "silent": [133, 142, 147], "book": [133, 147], "docstr": [133, 138, 141, 144, 147, 162, 254, 256, 257], "mgz": [133, 134, 147, 376, 377, 378, 379, 385, 403], "mne": [133, 134, 147], "lowest": [134, 147], "broke": [134, 147], "v2": [135, 140, 147], "viewabl": [135, 147], "vscode": [135, 147], "biap8": [135, 147], "input_output": [135, 147, 249, 250, 387], "2172": [135, 147], "creation": [135, 147, 249, 250, 264, 277, 399], "giant": [135, 147], "1336": [135, 147], "plot_connectome_strength": [135, 138, 142, 147], "2028": [135, 147], "pad": [135, 147, 173, 174, 286, 297, 298, 319, 322, 326, 328, 329], "2025": [135, 147], "kiar": [135, 147], "1953": [135, 147], "ticklabel": [135, 147], "psc": [135, 139, 147, 309, 310, 311, 312, 313, 314, 315, 401], "median": [135, 147, 309, 312, 376, 392], "standard_devi": [135, 147, 309, 312, 392], "2221": [135, 147], "2057": [135, 147], "2157": [135, 147], "truncat": [135, 147], "2195": [135, 147], "det": [135, 147, 198], "2235": [135, 147], "hammond": [135, 147], "old": [135, 141, 142, 147], "2255": [135, 147], "ndarrai": [135, 147, 179, 180, 181, 182, 183, 184, 185, 186, 199, 201, 205, 207, 208, 219, 220, 242, 243, 244, 245, 247, 248, 249, 250, 251, 254, 255, 256, 257, 260, 264, 277, 282, 284, 287, 288, 294, 295, 297, 299, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 322, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 358, 363, 369, 372, 376, 377, 378, 379, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405], "2107": [135, 147], "paula": [135, 147], "sanz": [135, 147], "leon": [135, 147], "attempt": [135, 147, 267], "2212": [135, 147], "nose": [135, 147], "2231": [135, 147], "2248": [135, 147], "markiewicz": [135, 147], "derek": [135, 147], "pisner": [135, 147], "johann": [135, 147], "wiesner": [135, 147], "tetrel": [135, 147], "2169": [135, 147], "jake": [135, 147], "05_advanc": [135, 147], "03_connect": [135, 147], "2063": [135, 147], "merg": [135, 147, 151, 162, 167, 170, 173, 388], "plot_adhd_spher": [135, 147], "duplic": [135, 147], "review": [135, 147, 159, 170], "plot_canica_analysi": [135, 147], "plot_haxby_decod": [135, 147], "2166": [135, 147], "unsuit": [135, 147], "redund": [135, 147, 162], "crash": [135, 147], "1888": [135, 147], "2083": [135, 147], "2052": [135, 147], "ian": [135, 147], "aben": [135, 147], "2118": [135, 147], "2138": [135, 147], "faulti": [135, 147], "ana": [135, 139, 141, 147], "luisa": [135, 139, 141, 147], "pinho": [135, 139, 141, 147], "colin": [135, 147], "reining": [135, 147], "c\u00e9line": [135, 147], "delettr": [135, 147], "takerkart": [135, 147], "januari": [136, 142, 147], "2272": [136, 147], "developmental_fmri": [136, 147], "launch": [137, 147, 154], "2429": [137, 147], "typo": [137, 147], "2312": [137, 147], "jon": [137, 147], "haitz": [137, 147], "legarreta": [137, 147], "gorrono": [137, 147], "fetch_nyu_rest": [137, 140, 147], "2308": [137, 147], "teve": [137, 147], "zvi": [137, 147], "baratz": [137, 147], "2299": [138, 147], "2304": [138, 147], "2307": [138, 147], "2509": [138, 147], "2327": [138, 147], "art": [138, 147, 155, 242, 243, 244, 245], "nodal": [138, 147, 371, 419], "decim": [138, 147, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 368], "interchang": [138, 147], "compute_brain_mask": [138, 141, 147, 173, 242, 243, 244, 245, 249, 250, 314, 321, 387], "compute_gray_matter_mask": [138, 142, 147], "regard": [138, 147, 160, 213, 237, 306], "erron": [138, 147, 199], "readm": [138, 147], "2021": [139, 140, 141, 147, 188, 189, 192, 197, 198, 199, 202, 203, 226, 229, 230, 232], "serv": [139, 147, 162, 170, 194, 208], "1024": [139, 147, 194], "2619": [139, 147], "2622": [139, 147], "2684": [139, 147], "2702": [139, 147], "one_minus_pvalu": [139, 147, 252], "stabil": [139, 147, 153, 244, 245, 252], "cumul": [139, 147, 252], "2567": [139, 147], "2674": [139, 147], "2553": [139, 147], "wegrzyn": [139, 147], "arm": [139, 147], "2606": [139, 147], "whatev": [139, 147], "2669": [139, 147], "notat": [139, 142, 147, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 365, 367, 368, 374, 375, 376, 378, 379], "2697": [139, 147], "2712": [139, 147], "handi": [139, 147, 163], "2696": [139, 147], "raphael": [139, 140, 141, 142, 143, 144, 145, 147], "meudec": [139, 140, 141, 142, 143, 144, 145, 147], "2714": [139, 147], "2719": [139, 147], "2707": [140, 147], "2858": [140, 147], "inher": [140, 147], "basemask": [140, 147], "fsaverage3": [140, 147, 231, 383], "fsaverage4": [140, 147, 231, 383], "fsaverage6": [140, 147, 231, 383], "2815": [140, 147], "curv": [140, 147, 154, 155, 157, 161, 167, 376, 379, 385, 403], "2532": [140, 147], "luke": [140, 147], "struct": [140, 147], "footcit": [140, 142, 144, 147], "footbibliographi": [140, 142, 144, 147], "2806": [140, 147], "jeremi": [140, 147], "lefort": [140, 147], "besnard": [140, 147], "2732": [140, 147], "javier": [140, 147], "rasero": [140, 147], "_get_voxelwise_model_attribut": [140, 147], "2792": [140, 147], "ascend": [140, 147, 292], "1155": [140, 147], "2831": [140, 147], "edmond": [140, 147], "zoom": [140, 147], "surround": [140, 147, 405], "2798": [140, 147], "vanass": [140, 147], "inconsist": [140, 147, 277, 279], "2767": [140, 147], "marker_label": [140, 147, 384], "2745": [140, 147], "greydon": [140, 147], "gilmor": [140, 147], "avg_method": [140, 147, 376], "auto_exampl": [140, 147, 162, 367, 383], "2805": [140, 147], "viridi": [140, 147], "flow": [140, 147, 164, 167], "2821": [140, 142, 147], "butterwoth": [140, 147], "butterworth": [140, 144, 145, 147, 401], "stratifi": [140, 147, 154, 242, 244, 246], "2869": [140, 147], "2867": [140, 147], "2868": [140, 147], "juelich": [141, 147, 196], "2723": [141, 147], "ahmad": [141, 142, 144, 145, 147], "chamma": [141, 142, 144, 145, 147], "load_mni152_gm_templ": [141, 147, 212, 235, 237, 238, 239], "load_mni152_wm_templ": [141, 147, 212, 236, 237, 238], "load_mni152_gm_mask": [141, 147, 212], "load_mni152_wm_mask": [141, 147, 212], "2738": [141, 147], "2755": [141, 147], "binarize_img": [141, 147], "skullstrip": [141, 147, 167, 237], "2904": [141, 147], "compute_multi_grey_matter_mask": [141, 147], "2876": [141, 147], "2941": [141, 147], "preset": [141, 142, 147, 306, 419], "nevertheless": [141, 147], "8339": [141, 147], "decor": [141, 147], "fill_doc": [141, 147], "2875": [141, 147], "pathlib": [141, 147, 172, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 242, 243, 244, 245, 247, 248, 264, 277, 309, 310, 317, 318, 319, 320, 321, 322, 387, 388, 389, 401, 403, 404, 405], "affect": [141, 147, 164, 167], "2928": [141, 147], "jqueri": [141, 147], "vulner": [141, 147], "2944": [141, 147], "2022": [142, 143, 144, 147], "plotli": [142, 147, 339, 376, 378, 379, 419, 420], "2902": [142, 147], "3061": [142, 147], "2946": [142, 147], "3016": [142, 147], "kmean": [142, 144, 147, 151, 168, 173, 264, 273, 386, 387], "2282": [142, 147], "3065": [142, 147], "mainten": [142, 147], "encourag": [142, 147, 162], "3026": [142, 147], "submodul": [142, 144, 147, 162], "3126": [142, 147], "get_bids_fil": [142, 147], "parse_bids_filenam": [142, 147], "subpart": [142, 147], "3036": [142, 147], "3009": [142, 147], "3013": [142, 147], "leonard": [142, 147], "sass": [142, 147], "threw": [142, 147], "typeerror": [142, 147, 292], "3035": [142, 147], "3078": [142, 147], "myeong": [142, 147], "seop": [142, 147], "song": [142, 147], "3111": [142, 147], "neelai": [142, 147], "shah": [142, 147], "hommel": [142, 147], "3109": [142, 147], "benjamini": [142, 147, 164, 263], "hocheberg": [142, 147], "3137": [142, 147], "3135": [142, 147], "retain": [142, 147, 154, 155, 164, 241, 264, 305], "2965": [142, 147], "demean": [142, 147, 305, 306], "3003": [142, 147], "triag": [142, 147], "clearli": [142, 147, 162], "polici": [142, 147], "spm_hrf": [142, 147, 264, 266, 271], "2942": [142, 147], "3008": [142, 147], "test_img_plot": [142, 147], "reorgan": [142, 147, 162], "3015": [142, 147], "3033": [142, 147], "3077": [142, 147], "2859": [142, 147], "3106": [142, 147], "3081": [142, 147], "3082": [142, 147], "3093": [142, 147], "3133": [142, 147], "cond_id": [142, 147], "ex": [142, 147, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 365, 367, 368, 374, 375, 376, 378, 379], "3025": [142, 147], "3039": [142, 147], "slicer": [142, 147, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 419], "projector": [142, 147, 354], "3073": [142, 147], "byte": [142, 147, 162, 291, 297], "2655": [142, 147], "recarrai": [142, 147, 187, 193, 194, 205, 206, 207, 215, 216, 217, 226], "2829": [142, 147], "h0_fmax": [143, 147, 325], "3184": [143, 147], "fetch_abide_pcp": [143, 147], "func_preproc": [143, 147, 187], "3179": [143, 147], "_apply_cluster_size_threshold": [143, 147], "cluster_s": [143, 147], "3201": [143, 147], "beyond": [143, 147], "newest": [143, 147, 222], "3188": [143, 147], "3098": [143, 147], "3127": [143, 147], "3165": [143, 147], "determinist": [143, 147, 167, 189, 191, 193, 195, 196, 198, 199, 201, 202, 203, 386], "glossari": [143, 147], "3152": [143, 147], "3207": [143, 147], "3178": [143, 147], "cfg": [143, 147, 162, 420], "2953": [143, 147], "theme": [144, 147], "furo": [144, 147], "3125": [144, 147], "3196": [144, 147], "3181": [144, 147], "2715": [144, 147], "_neurovault_base_url": [144, 147], "_neurosynth_fetch_words_url": [144, 147], "3281": [144, 147], "manon": [144, 147], "pietrantoni": [144, 147], "bibtex": [144, 147], "3222": [144, 147], "3233": [144, 147], "vasco": [144, 147], "diogo": [144, 147], "3241": [144, 147], "3255": [144, 147], "caglar": [144, 147], "cakan": [144, 147], "anymor": [144, 145, 147], "c_ra": [144, 147], "3235": [144, 147], "_check_second_level_input": [144, 147], "flm_object": [144, 147], "3283": [144, 147], "matthieu": [144, 147], "joulot": [144, 147], "3284": [144, 147], "_gamma_difference_hrf": [144, 147], "hemodynamic_model": [144, 147, 418], "slight": [144, 147], "distort": [144, 147, 305], "3297": [144, 147], "kun": [144, 147], "0rc1": [144, 147], "wn": [144, 147], "unfilt": [144, 147], "3293": [144, 147], "3306": [144, 147], "koen": [144, 147], "helwegen": [144, 147], "3312": [144, 147], "typograph": [144, 147], "3337": [144, 147], "sachin": [144, 147], "patalasingh": [144, 147], "censor": [144, 147, 401], "3193": [144, 147], "3185": [144, 147], "sami": [144, 147], "jawhar": [144, 147], "conform": [144, 147, 164], "3262": [144, 147], "fall": [144, 147, 162, 370, 405], "3292": [144, 147], "connor": [144, 147], "n_elements_": [144, 147, 311, 312, 313, 314, 315], "3311": [144, 147], "filesystem": [144, 147], "branch": [144, 147, 162, 170], "diff": [144, 147, 162], "3317": [144, 147], "3333": [144, 147], "sage": [144, 147], "hahn": [144, 147], "3322": [144, 147], "carpet_plot": [144, 147], "deleg": [144, 147], "cmap_label": [144, 147, 361], "3209": [144, 147], "fsaverage5_spher": [144, 147], "3229": [144, 147], "regressionresult": [144, 147, 251, 255, 260, 264, 273], "simpleregressionresult": [144, 147, 264], "olsmodel": [144, 147, 254, 256, 257], "likelihoodmodelresult": [144, 147, 256, 257], "shorten": [144, 147], "df_resid": [144, 147], "wdesign": [144, 147], "wresid": [144, 147], "norm_resid": [144, 147], "wy": [144, 147], "fetch_openneuro_dataset_index": [144, 147], "favor": [144, 147], "3216": [144, 147], "afni": [144, 147], "nipi": [144, 147, 162, 168], "1046": [144, 147], "pr": [144, 147, 170], "1082": [144, 147], "overflow": [144, 147], "3227": [144, 147], "pars": [144, 147, 303], "3274": [144, 147], "elli": [144, 147], "privat": [144, 145, 147, 162], "charact": [144, 147, 273], "3141": [144, 147], "3302": [144, 147], "int8": [144, 147, 295], "3286": [144, 147], "3237": [145, 147], "tick": [145, 147, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 365, 367, 368, 374, 375, 376, 378, 379, 381, 383, 385], "3105": [145, 147], "3374": [145, 147], "bogdan": [145, 147], "3385": [145, 147], "compute_multi_epi_mask": [145, 147, 173, 311], "3412": [145, 147], "natasha": [145, 147], "3403": [145, 147], "imput": [145, 147], "cubic": [145, 147, 174, 183, 401], "spline": [145, 147, 367, 368, 374, 375, 382, 401], "friendli": [145, 147, 420], "deploi": [145, 147], "3426": [145, 147], "weighted_connectivity_graph": [145, 147], "nearest_neighbor_group": [145, 147], "3347": [145, 147], "alias": [145, 147], "builtin": [145, 147], "3422": [145, 147], "compute_multi_gray_matter_mask": [145, 147], "3427": [145, 147], "3424": [145, 147], "3429": [145, 147], "_safe_cach": [145, 147], "deem": [145, 147], "3375": [145, 147], "v3": [145, 147], "3433": [145, 147], "focuss": 148, "naturalist": [148, 149, 151, 152], "indirect": [148, 149], "friedman": 148, "biostatist": 148, "time_series_1": 148, "time_series_2": 148, "challeng": 148, "toll": 148, "stronger": 148, "nip": 148, "geometr": [148, 179], "group_connect": 148, "heterogen": 148, "fetch_atlas_craddock_2012": 149, "easiest": [149, 154, 155], "frmi_fil": 149, "confounds_datafram": 149, "imperfect": 149, "boundari": [149, 159, 173, 373, 374, 376], "registr": [149, 164, 298, 419], "csv_file": 149, "consider": [149, 155, 279, 325], "readili": [149, 154, 157, 169, 172, 173, 389], "zaleski": 149, "rise": 151, "debat": 151, "cite": [151, 197, 208, 217], "quicker": [151, 162], "loss": [151, 156, 247, 306], "downsiz": 151, "hierarch": [151, 167, 168, 386], "neighborhood": 151, "tree": [151, 199], "admittedli": 151, "isotrop": 152, "publicli": 152, "osf": [152, 194, 198, 208, 217], "5hju4": [152, 208], "walker": [152, 389, 391], "likewis": 152, "newer": [153, 222, 224], "arriv": 153, "consensu": [153, 162], "explor": [153, 157, 161, 163, 168, 169, 181, 209, 222, 228, 242, 243, 244, 245], "resembl": 153, "coactiv": 153, "neuro": [153, 167, 242, 300], "offer": [153, 163, 165, 419], "articul": 154, "diagnost": [154, 158], "statu": [154, 167, 226], "vbm": [154, 167, 169], "fa": 154, "unusu": 154, "rich": 154, "strongli": [154, 162, 167], "recfromcsv": 154, "seemingli": 154, "misleadingli": 154, "chose": 154, "Be": [154, 155, 162, 181, 251, 400], "got": 154, "thumb": [154, 162], "advic": 154, "worst": 154, "caveat": 154, "entir": [154, 159, 174, 392], "sensibl": [154, 157, 180, 183], "imbalanc": 154, "domin": [154, 232], "roc": [154, 167], "guess": [154, 161, 317, 382], "notion": [154, 159, 303, 371], "00_tutori": 154, "tackl": [155, 170], "extern": [155, 158, 226], "trait": 155, "userguid": 155, "categor": [155, 170], "harder": 155, "vote": 155, "costli": [155, 159, 279, 325], "former": [155, 161, 222], "confus": [155, 300], "penal": [155, 161, 181, 247, 248], "variant": [155, 178], "counterpart": 155, "ridge_regressor": [155, 243, 245], "dummy_regressor": [155, 243, 245], "lunch": 155, "insensit": 155, "cheap": 155, "ill": 155, "importantli": [155, 157, 162], "ugli": 155, "nuisanc": [155, 167, 188, 251, 254, 255, 256, 306, 401], "hyper": [155, 156], "computationnali": 155, "bia": [155, 242, 243, 244, 245, 247, 248], "cancel": 155, "hood": [155, 160], "promot": [155, 156, 170], "memor": [156, 164], "versatil": [157, 168, 420], "mimic": [157, 195, 196], "unfortun": [157, 161], "prognosi": [158, 169], "reduct": [158, 250, 387, 421], "bag": [158, 247, 248, 421], "briefli": 159, "critic": [159, 161], "lorocv": 159, "properli": [159, 174, 362, 367], "isovoxel": 159, "volunt": 159, "ot": 159, "theoret": 159, "hypothesi": [159, 164, 246, 252, 279, 325], "swap": [159, 173, 226, 300], "descriptor": [159, 265, 325], "herebi": 159, "rank": [159, 254, 255, 256, 257, 325], "phenomenon": 159, "statistician": 159, "crucial": 159, "symmetri": [159, 161], "adopt": [159, 167], "spacenetclassifi": [160, 242, 243, 248], "tvl1": 160, "blobbi": 160, "mainli": 161, "devis": 161, "descent": [161, 250], "innermost": 161, "hoc": 161, "histori": 161, "prove": [161, 174], "amplifi": 161, "mandatori": [161, 282], "_update_submatrix": 161, "perfect": 161, "newton": 161, "raphson": 161, "debug": [161, 162, 169, 181, 183], "kern": 161, "bottleneck": 161, "overhead": 161, "neglig": [161, 286], "evenli": [161, 282, 401], "highli": [161, 162], "serial": 161, "boil": 161, "written": [161, 397], "inlin": [161, 397], "naiv": 161, "clock": 161, "nr": 161, "loos": 161, "fortran": [161, 297, 298, 325], "couldn": 161, "weren": 161, "ubuntu": 161, "synthes": 161, "wasn": 161, "hopefulli": 161, "govern": 161, "hardest": 161, "unrealist": 161, "perfectli": 161, "spectrum": 161, "decorrel": 161, "whatsoev": 161, "mostli": [161, 301], "weakli": 161, "optimum": 161, "wast": 161, "convex": 161, "group_sparse_covariance_cost": 161, "feasibl": 161, "semi": 161, "primal": 161, "satisfi": [161, 170], "quantiti": [161, 252], "lost": 161, "rapidli": 161, "prohibit": 161, "slowli": 161, "tricki": 161, "paragraph": 161, "fewer": [161, 361], "dwindl": 161, "speedup": 161, "complic": [161, 172, 254, 256, 257], "program": [161, 419], "earlystopprob": 161, "unpen": 161, "fastest": 161, "fulli": [161, 164, 420], "compute_alpha_max": 161, "straightforward": [161, 252], "sequenti": [161, 172, 373], "trajectori": 161, "smallest": 161, "fact": [161, 164, 167], "energi": 161, "brute": 161, "slowest": 161, "hardwar": 161, "commod": 161, "moder": 161, "sought": [161, 167], "push": [161, 162, 170], "stress": 161, "rare": 161, "spent": 161, "early_stop": [161, 181], "neurostar": [162, 169, 170], "forum": 162, "weekli": [162, 169], "offic": [162, 169], "hour": [162, 169, 170, 279, 325], "fridai": [162, 420], "4pm": [162, 420], "5pm": [162, 420], "utc": [162, 420], "troubleshoot": 162, "appreci": [162, 172], "topic": [162, 170], "burn": 162, "board": 162, "welcom": [162, 170, 420], "think": [162, 164, 174], "runnabl": 162, "ongo": 162, "comment": [162, 174], "opinion": 162, "approv": 162, "burden": 162, "member": [162, 170, 420], "expert": [162, 169], "eas": 162, "prototyp": 162, "beginn": [162, 169], "parsimoni": 162, "concern": [162, 167], "sustain": 162, "weigh": 162, "thoroughli": 162, "codebas": 162, "discourag": 162, "exhaust": [162, 169], "modif": [162, 164, 167], "ultim": [162, 255], "emerg": 162, "host": 162, "effort": [162, 170], "everyon": 162, "send": [162, 386, 388], "infrastructur": [162, 170], "gigabyt": 162, "deploy": 162, "xxxx": 162, "unrel": [162, 174], "rst": [162, 170], "pep8": [162, 170], "numpydoc": 162, "versionad": [162, 170], "versionchang": [162, 170, 295], "dev": [162, 170, 211, 325], "coverag": [162, 420], "mock": 162, "atom": [162, 167], "convei": [162, 325], "smoothen": 162, "wip": 162, "draft": 162, "mrg": 162, "enh": 162, "maint": 162, "underscor": 162, "a_nice_funct": 162, "parent": 162, "init": [162, 386], "camelcas": 162, "randomst": [162, 249, 250, 264, 273, 279, 386, 387], "my_numb": 162, "didn": 162, "pytest": [162, 420], "test_modul": 162, "he": 162, "plain": 162, "repo": [162, 170, 420], "fork": 162, "clone": 162, "your_usernam": 162, "conda": [162, 420], "your_branch": 162, "lint": 162, "complianc": 162, "ancestor": 162, "commit": [162, 170], "test_surf_plot": 162, "your_fork": 162, "restructuredtext": 162, "strict": 162, "window": [162, 264, 277, 399, 420], "_build": 162, "doctre": 162, "noplot": 162, "ci": [162, 170, 254, 256, 257], "filename_pattern": 162, "sphinx_gallery_conf": 162, "thorough": 162, "comprehens": [162, 169, 217, 240], "servic": 162, "temporarili": 162, "unavail": [162, 211], "frustrat": 162, "successfulli": 162, "_get_dataset_dir": 162, "_fetch_fil": 162, "server": [162, 222, 224, 420], "fake": 162, "request_mock": 162, "fixtur": 162, "_test": 162, "sender": 162, "essenc": 163, "timecours": [163, 305], "convolv": [163, 266], "doubl": [163, 195, 196], "plug": [163, 174, 251, 255], "ascertain": 163, "spm_multimodal_fmri": [163, 230], "referenc": 163, "symbol": [163, 292], "fistlevelmodel": 163, "flag": [163, 305, 306], "observed_timeseri": 163, "magnet": [164, 167, 191, 217], "reson": [164, 167, 191, 217], "oxyhaemoglobin": [164, 167], "carri": [164, 167], "deoxyhaemoglobin": [164, 167], "deliv": [164, 167], "diamagnet": [164, 167], "paramagnet": [164, 167], "success": [164, 174], "mr": 164, "irrespect": [164, 373], "microarchitectur": 164, "regist": [164, 191], "montreal": [164, 167, 189], "institut": [164, 167, 189], "nipyp": 164, "action": [164, 217], "sensori": 164, "stimui": 164, "hypothes": [164, 167], "oxi": 164, "deoxi": 164, "haemoglobin": 164, "sluggish": 164, "plai": [164, 174], "remark": 164, "respond": 164, "alon": [164, 419], "colour": 164, "enter": 164, "conceptu": 164, "physic": [164, 326, 328, 329], "decid": 164, "dof": [164, 252], "_scan": 164, "_column": 164, "quantil": 164, "reject": [164, 167], "frequent": 164, "misconcept": 164, "frequentist": 164, "wikipedia": 164, "wiki": 164, "frequentist_infer": 164, "cumbersom": 164, "absenc": [164, 170, 392], "_voxel": 164, "danger": 164, "frac": [164, 248, 251, 255], "truli": 164, "surpass": 164, "proportion": 164, "compromis": [164, 306], "hochberg": [164, 263], "supra": 164, "rational": 164, "primer": [165, 421], "broader": 166, "morphologi": 167, "treatment": [167, 169], "contrari": [167, 303, 309, 310], "fundament": 167, "eeg": 167, "electroencephalographi": 167, "monitor": 167, "electr": 167, "echo": [167, 267], "planar": 167, "incorrect": 167, "unwarp": 167, "submit": [167, 170], "diamet": 167, "tradition": 167, "subcompon": 167, "meg": 167, "magnetoencephalographi": 167, "mni305": 167, "mutli": 167, "pe": 167, "signifi": [167, 242, 243, 244, 245], "soft": 167, "tpr": 167, "wellcom": 167, "depart": 167, "univers": [167, 169], "colleg": 167, "unlabel": 167, "emot": 167, "reaction": 167, "iq": [167, 242, 243, 244, 245], "diagnosi": [167, 169], "healthi": [167, 191], "outlier": [167, 226, 305, 306, 308, 311, 314], "magnitud": [167, 364], "benedikt": 167, "ehing": 167, "coher": [167, 169], "neurobiolog": 167, "subgroup": 167, "psychiatr": 167, "disord": 167, "toolbox": [168, 420], "migrat": 168, "quickstart": 168, "ecosystem": 168, "domain": [169, 250], "ok": 169, "walk": 169, "manner": [169, 367], "dive": 169, "command": [169, 170, 420], "oftentim": 169, "comer": 169, "montr\u00e9al": 169, "gentl": 169, "greatli": 169, "facilit": [169, 174], "visualis": 169, "besid": 169, "transfer": 169, "psycholog": 169, "knop": 169, "despit": 169, "connection": 169, "tracker": 170, "mislabel": 170, "seriou": 170, "dai": 170, "decent": 170, "quantifi": 170, "prioriti": [170, 172, 233], "urgent": 170, "month": 170, "medium": [170, 231, 383], "stall": 170, "repli": 170, "week": 170, "redirect": 170, "ping": 170, "beforehand": 170, "currentmodul": 170, "whats_new": 170, "_latest": 170, "_vx": 170, "__version__": 170, "manifest": 170, "touch": [170, 286], "master": [170, 199], "upstream": 170, "workspac": 170, "dist": 170, "rm": 170, "wheel": 170, "twine": 170, "sdist": 170, "bdist_wheel": 170, "subfold": 170, "packagenam": 170, "packagevers": 170, "pythonvers": 170, "pythoncvers": 170, "whl": 170, "tab": [170, 174], "drag": 170, "dvipng": 170, "texliv": 170, "manag": [170, 420], "wget": 170, "mirror": [170, 187, 188, 189, 190, 191, 192, 193, 197, 200, 201, 203, 211, 212, 215, 216, 217, 220, 221, 226, 232], "ctan": 170, "dviwar": 170, "unzip": 170, "linux": 170, "pkg": 170, "bewar": [170, 172], "expans": [171, 421], "resiz": [171, 173, 242, 243, 244, 245, 247, 248, 277, 294, 297, 317, 319, 320, 322, 381, 383, 384, 385, 387, 397, 421], "t_map001": 172, "abbrevi": 172, "subject1": 172, "subject2": 172, "wildcard": [172, 173, 241, 292], "unix": [172, 241], "shell": [172, 241], "subject_01": 172, "subject_03": 172, "subject_": 172, "subj1": 172, "resourc": 172, "nilearn_shared_data": [172, 233], "get_head": 172, "spatialimag": [172, 285], "memoryerror": 172, "decompress": 172, "uncach": 172, "comma": 172, "aren": 172, "chapter": [173, 174], "swap_img_hemispher": 173, "fslview": 173, "crop": [173, 174, 286], "consumpt": [173, 264, 277, 310, 313, 400], "3x3x3": [173, 222, 224, 389, 391], "diag": [173, 372], "compute_background_mask": [173, 242, 243, 244, 245, 249, 250, 311, 314, 387], "compute_multi_background_mask": [173, 311], "intersect_mask": 173, "restructur": 173, "recip": 173, "swiss": 174, "armi": 174, "knive": 174, "intend": [174, 257, 297, 298], "set_config": 174, "print_changed_onli": 174, "fight": 174, "neuroanatomi": 174, "anisotrop": 174, "convers": [174, 189], "loss_pass": 174, "prespecifi": 174, "abrupt": 174, "transient": 174, "acquis": 174, "saniti": 174, "recast": 174, "excerpt": 174, "disadvantag": 174, "nonpres": 174, "linearli": 174, "nor": 174, "5d": 174, "cov_estim": 179, "ledoitwolf": 179, "store_precis": 179, "discard_diagon": [179, 185], "shrunk": 179, "triangular": [179, 185, 186, 372], "cov_estimator_": 179, "whitening_": 179, "__init__": [179, 180, 181, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 264, 277, 308, 309, 310, 311, 312, 313, 314, 315, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 386, 387, 388, 389, 397], "connectivitymatrix": 179, "n_confound": [179, 288, 402], "vetor": 179, "subobject": [179, 180, 181, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 277, 308, 309, 310, 311, 312, 313, 314, 315, 386, 387, 388, 389], "set_param": [179, 180, 181, 242, 243, 244, 245, 246, 247, 248, 249, 250, 264, 277, 308, 309, 310, 311, 312, 313, 314, 315, 386, 387, 388, 389], "aggress": [180, 306, 312, 313, 315], "ndarray": 180, "n_refin": 181, "tol_cv": 181, "max_iter_cv": 181, "phase": 181, "cv_alphas_": 181, "probe_funct": 183, "precisions_init": 183, "dualiti": 183, "prematur": 183, "emp_cov": 183, "vec": 186, "encompass": 186, "cpac": 187, "band_pass_filt": 187, "global_signal_regress": 187, "quality_check": 187, "wrt": [187, 248, 264, 266, 271], "pcp": 187, "css": 187, "dparsf": 187, "niak": 187, "cc": 187, "controversi": 187, "1hz": 187, "alff": 187, "degree_binar": 187, "degree_weight": 187, "dual_regress": 187, "eigenvector_binar": 187, "eigenvector_weight": 187, "falff": 187, "func_mask": 187, "func_mean": 187, "lfcd": 187, "reho": 187, "rois_aal": 187, "rois_cc200": 187, "rois_cc400": 187, "rois_dosenbach160": 187, "rois_ez": 187, "rois_ho": 187, "rois_tt": 187, "vmhc": 187, "rater": 187, "sub_id": 187, "50001": 187, "50607": 187, "dx_group": 187, "dsm_iv_tr": 187, "asperg": 187, "ppd": 187, "NOS": 187, "age_at_scan": 187, "femal": 187, "handedness_categori": 187, "ambi": 187, "ambidextr": 187, "handedness_scor": 187, "resum": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 208, 211, 212, 213, 217, 219, 220, 221, 226, 232], "ftp": 188, "htdoc": 188, "adhd200": 188, "adhd200_40sub_preprocess": 188, "tgz": 188, "spm12": 189, "med": 189, "consecut": [189, 191, 193, 199, 202, 203, 386], "5021": 189, "lingual_l": 189, "precentral_l": 189, "spm5": 189, "gin": 189, "cnr": 189, "mialab": 190, "rsn_indic": 190, "mrn": 190, "mstep": 191, "asym": 191, "asymmetr": [191, 212, 213], "homotop": 191, "scale007": 191, "scale012": 191, "scale020": 191, "scale036": 191, "scale122": 191, "scale325": 191, "figshar": 191, "1285615": 191, "scorr_mean": 192, "obj": [192, 387], "emphas": 192, "tcorr_mean": 192, "scorr_2level": 192, "tcorr_2level": 192, "creativ": 192, "commerci": 192, "alik": 192, "creativecommon": 192, "nc": 192, "sa": 192, "cluster_roi": 192, "rec": [193, 205, 206, 207, 267], "pqu9r": 194, "wjvd5": 194, "3vrct": 194, "9b76y": 194, "34792": 194, "atlas_nam": [195, 196], "cortl": 195, "thr50": [195, 196], "strictli": [195, 196], "probabilit": 198, "prepend": [198, 199, 303, 304], "nac": 198, "idx_nac": 198, "r2hvk": 198, "n_roi": 199, "yeo_network": 199, "base_url": 199, "7networks_lh_vis_3": 199, "thomasyeolab": 199, "cbig": 199, "stable_project": 199, "brain_parcel": 199, "schaefer2018_localglob": 199, "update_20190916_readm": 199, "md": 199, "update_yeo2011_schaefer2018_labelnam": 199, "bandwidth": 200, "fmrib": 200, "ox": 200, "sulco": 201, "gryal": 201, "level_nam": 202, "ba": 202, "brodmann": 202, "thin_7": 203, "thin": 203, "colors_7": 203, "thin_17": 203, "colors_17": 203, "tick_7": 203, "tick_17": 203, "surfer": 203, "nmr": 203, "mgh": 203, "fswiki": 203, "corticalparcellation_yeo2011": 203, "downloaded_fil": [204, 214, 227], "ordered_region": [205, 207], "cerebellar": 207, "cinguloopercular": 207, "defaultmod": 207, "dorsalattent": 207, "frontopariet": 207, "medialtemporallob": 207, "parietomedi": 207, "reward": 207, "somatomotordors": 207, "somatomotorlater": 207, "ventralattent": 207, "cortexl": 207, "cortexr": 207, "thalamu": 207, "hippocampu": 207, "basalganglia": 207, "amygdala": 207, "cortexmid": 207, "age_group": 208, "realist": [208, 376, 378, 379, 385], "gender": [208, 226], "handed": 208, "ds000228": 208, "wjtyq": 208, "ucla": [209, 227], "consortium": [209, 227], "neuropsychiatr": [209, 227], "la5c": [209, 227], "urls_path": [209, 228], "fullbrain": 211, "pymvpa": 211, "datadb": 211, "mni152nlin2009csasym": [212, 213], "templateflow": [212, 213], "t2": [212, 365, 419], "t2_relax": 212, "relaxometri": 212, "proton": 212, "eye_mask": 212, "face_mask": 212, "bic": [212, 254], "mcgill": 212, "ca": 212, "servicesatlas": 212, "icbm152nlin2009": 212, "vfonov": 212, "mni_icbm152_nlin_sym_09a_nifti": 212, "tpl": 212, "mni152nlin2009csym": 212, "binary_clos": [213, 235, 238], "gm_mask_img": [213, 235], "particularli": [213, 389], "caller": [215, 216], "get_mask": 217, "get_anat": 217, "vhtf6": 217, "paardigm": 218, "multiple_spatial_regress": 219, "princip": [219, 306], "full_correl": 219, "return_raw_data": 220, "betamap": 220, "make_xi": 220, "153mb": 221, "brainlin": 221, "number_of_imag": 222, "_empty_filt": 222, "image_typ": 222, "is_threshold": 222, "not_mni": 222, "download_new": [222, 224], "kwarg_image_filt": 222, "until": [222, 325], "skim": 222, "basic_collection_term": 222, "empty_filt": 222, "image_metadata": 222, "basic_image_term": 222, "offlin": [222, 224, 421], "regardless": [222, 224, 247], "countvector": [222, 224], "info": [222, 224, 370, 376, 377, 378, 379], "remot": [222, 224], "concis": 222, "_col_filters_available_on_serv": 222, "owner": 222, "modify_d": 222, "auditory_calculation_vs_baselin": 223, "32980": 223, "10426": 225, "dartel_vers": 226, "dartel": 226, "data_usage_agr": 226, "gross": 226, "intracrani": 226, "socioeconom": 226, "dementia": 226, "demand": 226, "dedic": 226, "openli": 226, "usageagr": 226, "vm": 226, "dataset_vers": [227, 228], "patch_openneuro_dataset": 227, "symlink": [227, 240], "data_nam": [229, 230], "ion": [229, 230], "trials_ses1": 230, "trials_ses2": 230, "mmface": 230, "2562": [231, 383], "10242": [231, 370, 383], "40962": [231, 383], "fsaverage7": [231, 383], "163842": [231, 370, 383], "area_left": 231, "gifti": [231, 232], "area_right": 231, "curv_left": 231, "curvatur": 231, "curv_right": 231, "sphere_left": 231, "sphere_right": 231, "thick_left": 231, "thick_right": 231, "white_left": [231, 405], "white_right": 231, "func_right": 232, "gm_mni152_templ": 236, "mni152_templ": 237, "wm_mask_img": 238, "wm_mni152_templ": 239, "file_list": 240, "inclusion_filt": 241, "exclus": [241, 247, 248], "wrapper": [242, 243, 279], "1e4": [242, 243, 244, 245], "logisticregress": [242, 244], "liblinear": [242, 244], "ridgeclassifiercv": [242, 244], "inbuilt": [242, 243, 244, 245], "model_evalu": [242, 243, 244, 245], "scorer": [242, 243, 244, 245], "hertz": [242, 243, 244, 245, 247, 248, 282, 309, 310, 387, 389, 400, 401], "rough": [242, 243, 244, 245, 247, 248, 249, 250, 264, 277, 283, 309, 310, 311, 314, 387, 388, 389], "decision_funct": [242, 243, 244, 245, 247, 248], "learner": [242, 243, 244, 245, 247, 248], "ye": [242, 243, 244, 245], "leavepgroupsout": [242, 243, 244, 245], "classes_": [242, 243, 244, 245, 247, 248], "screening_percentile_": [242, 243, 244, 245, 247, 248], "n_class": [242, 243, 244, 245, 247, 248], "intercept_": [242, 243, 244, 245, 247, 248], "nclass": [242, 243, 244, 245], "cv_": [242, 243, 244, 245, 247, 248], "std_coef_": [242, 243, 244, 245], "std_coef_img_": [242, 243, 244, 245], "inner": [242, 243, 244, 245, 302, 405], "scorer_": [242, 243, 244, 245], "misclassif": [242, 243, 244, 245, 247, 248], "n_outputs_": [242, 243, 244, 245], "dummy_output_": [242, 243, 244, 245], "class_prior": [242, 243, 244, 245], "dummyregressor": [242, 243, 244, 245], "confid": [242, 243, 244, 245, 247, 248, 254, 256, 257], "sample_weight": [242, 243, 244, 245, 248], "neg_mean_squared_error": [243, 245], "trade": [244, 245], "cluster_percentil": [244, 245], "america": 246, "fit_intercept": [247, 248], "hybrid": [247, 248], "mutual": [247, 248], "alpha_min": [247, 248], "alpha_max": [247, 248], "premultipli": 247, "nearli": [247, 248], "debias": [247, 248], "all_coef_": [247, 248], "n_l1_ratio": [247, 248], "alpha_grids_": [247, 248], "best_model_params_": [247, 248], "n_paramet": [247, 248], "n_classes_": 247, "mask_": [247, 248], "memory_": [247, 248], "narrai": [247, 248], "w_": [247, 248], "ymean_": [247, 248], "xmean_": [247, 248], "xstd_": [247, 248], "supported_loss": [247, 248], "supported_penalti": [247, 248], "check_param": [247, 248], "sane": [247, 248], "hyperplan": [247, 248], "qi": [247, 248], "y_true": 248, "disregard": 248, "n_samples_fit": 248, "n_output": [248, 249, 250, 264, 277, 386, 388], "uniform_averag": 248, "multioutputregressor": 248, "do_cca": 249, "n_init": [249, 386], "6mm": [249, 389], "restart": 249, "recoveri": 249, "1177": 249, "manipulating_imag": [249, 250, 387], "fit_param": [249, 250, 264, 277, 308, 311, 314, 386, 388], "x_new": [249, 250, 264, 277, 308, 311, 314, 386, 388], "n_features_new": [249, 250, 264, 277, 308, 311, 314, 386, 388], "reconstructed_img": [249, 250], "decompositionestim": [249, 250, 387], "squeez": [249, 250, 387], "reduction_ratio": 250, "batch": [250, 386], "lar": 250, "lars_path": 250, "13th": 250, "symposium": 250, "biomed": 250, "1282": 250, "1285": 250, "rho": 251, "likelihoodmodel": [251, 254], "sigma": [251, 254, 255, 256, 257], "whitened_x": [251, 255], "logl": [251, 254, 255, 256, 257], "loglikelihood": [251, 255], "df_model": [251, 254, 255], "loglf": [251, 255], "ell": [251, 255], "hat": [251, 255], "sse": [251, 255, 256, 257], "10000000000": 252, "tini": 252, "dofmax": 252, "breakag": 252, "contrast_dim": 252, "def_dofmax": 252, "underflow": 252, "def_tini": 252, "h0": [252, 325], "df_num": [253, 254, 256, 257], "df_den": [253, 254, 256, 257, 258], "theta": [254, 256, 257], "aic": 254, "llf": 254, "wald": [254, 256, 257], "vcov": [254, 256, 257], "sd": [254, 256, 257, 258], "tcontrastresult": [254, 256, 257], "fcontrast": [254, 256, 257], "invcov": [254, 256, 257], "px": [254, 256, 257], "f_re": [254, 256, 257], "fcontrastresult": [254, 256, 257], "conf_int": [254, 256, 257], "col": [254, 256, 257], "standard_norm": [254, 256, 257], "stan": [254, 256, 257], "confidence_interv": [254, 256, 257], "whitened_design": 255, "calc_beta": 255, "moor": 255, "penros": 255, "pseudoinvers": 255, "normalized_cov_beta": 255, "df_residu": 255, "__init___": 255, "wlsmodel": 255, "armodel": 255, "whitened_i": 256, "whitened_residu": 256, "normalized_residu": [256, 257], "stanard": [256, 257], "d_i": [256, 257], "e_i": [256, 257], "ms_e": [256, 257], "presum": [259, 280], "dsicoveri": 259, "regression_result": 260, "con_val": 260, "con": 260, "precision_weight": 261, "fixed_fx_contrast_img": 261, "fixed_fx_variance_img": 261, "fixed_fx_t_img": 261, "z_val": 263, "min_onset": [264, 266, 267, 271], "plu": [264, 266, 271], "spm_time_deriv": [264, 266, 271], "idem": [264, 266, 271], "spm_dispersion_deriv": [264, 266, 271], "glover_hrf": [264, 266, 271], "glover_time_deriv": [264, 266, 271], "glover_dispersion_deriv": [264, 266, 271], "dirac": [264, 266, 271], "n_onset": [264, 271], "rid": [264, 277], "labels_": [264, 386, 388], "results_": 264, "array_lik": [264, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 371], "histogram": [264, 273, 319, 322, 369], "quantif": [264, 273], "contrast_def": [264, 277, 363, 399], "t_map": [264, 277], "n_col": [264, 277, 279, 304, 363], "eval": [264, 277, 363], "report_dim": [264, 277, 399], "htmlreport": [264, 277, 310, 313, 389, 399], "standalon": [264, 277, 399], "ce": [264, 267, 277, 399], "autogener": [264, 277, 399], "subpeak": [264, 277, 398, 399], "report_text": [264, 277, 399], "voxelwis": [264, 277], "triplet": [265, 266, 315, 384], "n_frame": [265, 271], "n_regressor": [265, 273, 279, 325], "n_event": [265, 266, 271], "computed_regressor": 266, "n_reg": 266, "reg_nam": 266, "dataset_path": 267, "alongsid": 267, "_space": 267, "acq": 267, "dir": [267, 302], "den": 267, "pa": 267, "dhrf": [268, 270, 274, 276], "n_add_reg": 271, "reg_i": 271, "frames_tim": 271, "map_nam": [277, 279], "effects_map_path": [277, 279], "liter": [277, 279], "second_level_stat_typ": 277, "output_imag": 277, "unsign": [279, 325], "neg_log10_vfwe_pvals_img": 279, "explanatori": [279, 325], "n_descriptor": [279, 325], "prescrib": 280, "rigor": 280, "anatomical_imag": [281, 293], "brainmask": 281, "instant": [282, 401], "ensure_ndim": 283, "img_copi": 285, "rtol": 286, "return_offset": 286, "Will": [286, 330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362], "croppabl": 286, "toggl": 286, "x1_pre": 286, "x1_post": 286, "x2_pre": 286, "x2_post": 286, "xn_pre": 286, "xn_post": 286, "number_of_scan": 288, "joint_mni_imag": 289, "single_mni_imag": 289, "five_mni_imag": 289, "first_three_imag": 289, "imcal": 293, "fslmath": 293, "log_img": 293, "ref_niimg": 295, "copy_head": 295, "2dev": [295, 304, 309, 312, 395, 398], "imposs": 296, "fill_valu": [297, 298], "force_resampl": [297, 298], "extrapol": 297, "prevent": [297, 298, 317, 318, 319, 321, 322], "optimz": [297, 298], "boundingboxerror": 297, "crop_img": 297, "infinit": 297, "gracefulli": 297, "source_img": 298, "target_img": [298, 318, 321], "arr": 299, "normalis": 299, "filtered_img": 299, "synchron": 300, "sagit": 300, "caution": 300, "radio": 300, "main_path": 302, "file_tag": [302, 303], "file_typ": [302, 303], "sub_label": 302, "modality_fold": 302, "sub_fold": 302, "se": 302, "ap": 302, "file_path": 303, "file_basenam": 303, "file_field": 303, "_tag": 303, "revis": 303, "parser": 303, "statmap": 304, "_stat": 304, "_statmap": 304, "_design": 304, "img_fil": [305, 306], "anat_combin": [305, 306], "n_compcor": [305, 306], "dtseri": [305, 306], "compli": 305, "non_steady_st": 305, "power2": 305, "quadrat": 305, "power2d": 305, "excess": 305, "temov": 305, "var": 305, "anat_separ": 305, "temporal_anat_combin": 305, "temporal_anat_separ": 305, "acompcor_combin": 305, "smootharomanonaggr_bold": [305, 306], "nifitmask": 305, "srub": 306, "denois": 306, "physiologi": 306, "suffer": 306, "aggres": 306, "suffix": 306, "mni152nlin6asym": 306, "niprep": 306, "region_sign": [308, 309, 310, 311, 312, 313, 314, 315, 387, 389, 393, 396], "imgs_list": [308, 309, 310, 311, 314], "transform_img": [309, 310, 311], "unus": [309, 310, 311, 312, 313, 314, 315], "html_report": [310, 313, 389], "voxel_sign": [310, 313, 315, 389], "multipca": 311, "affine_": [311, 314], "maps_img_": 313, "seeds_": 315, "throw": 315, "session_seri": 316, "data_img": [317, 320], "border_s": [317, 320], "binary_eros": [317, 318, 319, 321, 322], "exclude_zero": [319, 320, 322], "fraction": [319, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 405], "reslic": [319, 322], "grp_mask": 323, "ndim": 324, "target_var": 325, "confounding_var": 325, "legaci": 325, "criterion": [325, 388], "amongst": [325, 419], "n_covar": 325, "pval": 325, "score_orig_data": 325, "h0_max_t": 325, "h0_max_tfc": 325, "h0_max_siz": 325, "h0_max_mass": 325, "mpl": [326, 328, 329], "transform_to_2d": [326, 328, 329], "add_object_bound": [326, 328, 329], "draw_2d": [326, 328, 329], "data_bound": [326, 328, 329], "bounding_box": [326, 328, 329], "get_object_bound": [326, 328, 329], "draw_left_right": [326, 328, 329], "bg_color": [326, 328, 329], "draw_scale_bar": [326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "fontproperti": [326, 328, 329], "borderpad": [326, 328, 329], "size_vert": [326, 328, 329], "label_top": [326, 328, 329], "font": [326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 376, 378, 379], "anchoredoffsetbox": [326, 328, 329], "draw_posit": [326, 328, 329], "brain_color": [327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "frame_ax": [327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "subdivid": [327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "find_cut_coord": [327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "classmethod": [327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "init_with_figur": [327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "leave_spac": [327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "bgcolor": [327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "2g": [327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 365, 367, 368, 374, 375, 376, 378, 379], "cbar_vmin": [327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 376], "cbar_vmax": [327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 376], "contour_fil": [327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "add_edg": [327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 419], "n_marker": [327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "left_right": [327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "scale_loc": [327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "leak": [327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "dpi": [327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "inch": [327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "schemat": [329, 362, 367, 371], "glassbrainax": [330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352], "add_graph": [330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352], "linearsegmentedcolormap": [330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 360, 361, 362, 365, 372, 373, 374, 375, 381, 382, 383, 385], "edge_kwarg": [330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362], "node_kwarg": [330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362, 371], "undirect": [330, 331, 332, 333, 334, 335, 337, 340, 342, 344, 346, 348, 350, 352, 362], "draw_cross": [330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 365, 368, 373, 374, 375, 382], "crossbar": [330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "cutax": [343, 345, 347, 349, 351, 353], "baseslic": 355, "img_length": 356, "return_label_nam": 357, "label_hemispher": 357, "labels_list": 357, "n_map": 358, "activation_threshold": 359, "tupleof": [360, 361, 362, 365, 367, 368, 371, 373, 374, 375], "ymin": [360, 361, 362, 365, 367, 368, 371, 373, 374, 375], "pronounc": [360, 373, 374, 375, 382], "get_zoom": 361, "matlotlib": 362, "nipy_spectr": 365, "model_ev": 366, "fig_kwarg": 366, "event_typ": 366, "stat_map_img": [367, 375, 382, 383], "symmetric_cbar": [367, 375, 379], "destin": [367, 368, 374, 375, 382], "noisier": [367, 368, 374, 375, 382], "ref_img": 369, "src_img": 369, "plot_hist": 369, "output_dir": 369, "superimpos": 369, "nifti_lik": 369, "montag": 370, "node_valu": 371, "listedcolormap": 371, "node_vmin": 371, "node_vmax": 371, "node_threshold": 371, "viridis_r": 371, "auto_fit": 372, "newli": 372, "room": 372, "linkag": 372, "sent": 372, "gist_rainbow": 373, "surf_map": [376, 385], "title_font_s": [376, 378, 379], "orig": [376, 377, 378, 379, 385, 404, 405], "sulc": [376, 379, 385, 403], "underneath": [376, 378, 379, 385], "surf_data": [376, 378, 379, 385, 403, 405], "greyscal": [376, 378, 379, 385], "sharp": [376, 419], "apply_along_axi": 376, "custom_funct": 376, "beneath": [376, 378, 379], "subplot_kw": [376, 377, 378, 379], "tab20": 377, "rgba": [377, 384], "agg": 380, "emit": 380, "colorbar_height": [381, 383, 385], "colorbar_fonts": [381, 383, 385], "title_fonts": [381, 383, 384, 385], "n_node": [381, 384], "connectomeview": [381, 384], "opac": 382, "th": 382, "opaqu": 382, "html_view": [382, 419], "plane": 382, "surfaceview": [383, 385], "hex": 384, "gnist_ncar": 385, "max_no_improv": 386, "smart": 386, "k_init": 386, "centroid": 386, "mini": 386, "inertia": 386, "reassign": 386, "sizes_": [386, 388], "x_red": [386, 388], "x_inv": [386, 388], "fit_predict": [386, 388], "connectivity_": 387, "valid_method": 387, "eccentr": [388, 394], "n_clusters_": 388, "27mm": [389, 391], "1350mm": [389, 391], "img_valu": 389, "connected_compon": [389, 391], "ly": 389, "min_siz": 390, "new_labels_img": 390, "new_label": 390, "extract_typ": 391, "_smooth_arrai": 391, "index_of_each_map": 391, "signals_to_img_label": [392, 396], "img_to_signals_map": [392, 396], "signals_to_img_map": [393, 395], "head_tpl": 397, "head_valu": 397, "html_document": 397, "htmldocument": 397, "get_ifram": 397, "get_standalon": 397, "temp_file_lifetim": 397, "temporari": 397, "remove_temp_fil": 397, "letter": 398, "destination_path": 399, "sampling_r": 400, "n_sourc": 400, "decai": 400, "ring": 400, "sharpen": 400, "inplac": 400, "filtered_sign": 400, "cleaned_sign": 401, "namedtupl": [404, 405], "neighbourhood": 405, "trilinear": 405, "x20": 405, "regularli": 405, "halfwai": 405, "inward": 405, "surface_mesh": 405, "neighbour": 405, "experimental_paradigm": 418, "tour": 419, "canni": 419, "purple_green": 419, "alia": 419, "pretty_brain": 419, "emb": 419, "surface_plot": 419, "cyan": 419, "orang": 419, "simexp": 419, "offici": 420, "virtual": 420, "venv": 420, "miniconda": 420, "path_to_new_env": 420, "bat": 420, "prompt": 420, "discord": 420, "anyon": 420, "engag": 420, "grad": 421, "biologi": 421, "throughout": 421}, "objects": {"nilearn": [[175, 0, 0, "-", "connectome"], [176, 0, 0, "-", "datasets"], [177, 0, 0, "-", "decoding"], [178, 0, 0, "-", "decomposition"], [406, 0, 0, "-", "glm"], [407, 0, 0, "-", "image"], [409, 0, 0, "-", "interfaces"], [410, 0, 0, "-", "maskers"], [411, 0, 0, "-", "masking"], [412, 0, 0, "-", "mass_univariate"], [413, 0, 0, "-", "plotting"], [414, 0, 0, "-", "regions"], [415, 0, 0, "-", "reporting"], [416, 0, 0, "-", "signal"], [417, 0, 0, "-", "surface"]], "nilearn.connectome": [[179, 1, 1, "", "ConnectivityMeasure"], [180, 1, 1, "", "GroupSparseCovariance"], [181, 1, 1, "", "GroupSparseCovarianceCV"], [182, 3, 1, "", "cov_to_corr"], [183, 3, 1, "", "group_sparse_covariance"], [184, 3, 1, "", "prec_to_partial"], [185, 3, 1, "", "sym_matrix_to_vec"], [186, 3, 1, "", "vec_to_sym_matrix"]], "nilearn.connectome.ConnectivityMeasure": [[179, 2, 1, "", "__init__"], [179, 2, 1, "", "fit"], [179, 2, 1, "", "fit_transform"], [179, 2, 1, "", "get_params"], [179, 2, 1, "", "inverse_transform"], [179, 2, 1, "", "set_params"], [179, 2, 1, "", "transform"]], "nilearn.connectome.GroupSparseCovariance": [[180, 2, 1, "", "__init__"], [180, 2, 1, "", "fit"], [180, 2, 1, "", "get_params"], [180, 2, 1, "", "set_params"]], "nilearn.connectome.GroupSparseCovarianceCV": [[181, 2, 1, "", "__init__"], [181, 2, 1, "", "fit"], [181, 2, 1, "", "get_params"], [181, 2, 1, "", "set_params"]], "nilearn.datasets": [[187, 3, 1, "", "fetch_abide_pcp"], [188, 3, 1, "", "fetch_adhd"], [189, 3, 1, "", "fetch_atlas_aal"], [190, 3, 1, "", "fetch_atlas_allen_2011"], [191, 3, 1, "", "fetch_atlas_basc_multiscale_2015"], [192, 3, 1, "", "fetch_atlas_craddock_2012"], [193, 3, 1, "", "fetch_atlas_destrieux_2009"], [194, 3, 1, "", "fetch_atlas_difumo"], [195, 3, 1, "", "fetch_atlas_harvard_oxford"], [196, 3, 1, "", "fetch_atlas_juelich"], [197, 3, 1, "", "fetch_atlas_msdl"], [198, 3, 1, "", "fetch_atlas_pauli_2017"], [199, 3, 1, "", "fetch_atlas_schaefer_2018"], [200, 3, 1, "", "fetch_atlas_smith_2009"], [201, 3, 1, "", "fetch_atlas_surf_destrieux"], [202, 3, 1, "", "fetch_atlas_talairach"], [203, 3, 1, "", "fetch_atlas_yeo_2011"], [204, 3, 1, "", "fetch_bids_langloc_dataset"], [205, 3, 1, "", "fetch_coords_dosenbach_2010"], [206, 3, 1, "", "fetch_coords_power_2011"], [207, 3, 1, "", "fetch_coords_seitzman_2018"], [208, 3, 1, "", "fetch_development_fmri"], [209, 3, 1, "", "fetch_ds000030_urls"], [210, 3, 1, "", "fetch_fiac_first_level"], [211, 3, 1, "", "fetch_haxby"], [212, 3, 1, "", "fetch_icbm152_2009"], [213, 3, 1, "", "fetch_icbm152_brain_gm_mask"], [214, 3, 1, "", "fetch_language_localizer_demo_dataset"], [215, 3, 1, "", "fetch_localizer_button_task"], [216, 3, 1, "", "fetch_localizer_calculation_task"], [217, 3, 1, "", "fetch_localizer_contrasts"], [218, 3, 1, "", "fetch_localizer_first_level"], [219, 3, 1, "", "fetch_megatrawls_netmats"], [220, 3, 1, "", "fetch_mixed_gambles"], [221, 3, 1, "", "fetch_miyawaki2008"], [222, 3, 1, "", "fetch_neurovault"], [223, 3, 1, "", "fetch_neurovault_auditory_computation_task"], [224, 3, 1, "", "fetch_neurovault_ids"], [225, 3, 1, "", "fetch_neurovault_motor_task"], [226, 3, 1, "", "fetch_oasis_vbm"], [227, 3, 1, "", "fetch_openneuro_dataset"], [228, 3, 1, "", "fetch_openneuro_dataset_index"], [229, 3, 1, "", "fetch_spm_auditory"], [230, 3, 1, "", "fetch_spm_multimodal_fmri"], [231, 3, 1, "", "fetch_surf_fsaverage"], [232, 3, 1, "", "fetch_surf_nki_enhanced"], [233, 3, 1, "", "get_data_dirs"], [234, 3, 1, "", "load_mni152_brain_mask"], [235, 3, 1, "", "load_mni152_gm_mask"], [236, 3, 1, "", "load_mni152_gm_template"], [237, 3, 1, "", "load_mni152_template"], [238, 3, 1, "", "load_mni152_wm_mask"], [239, 3, 1, "", "load_mni152_wm_template"], [240, 3, 1, "", "patch_openneuro_dataset"], [241, 3, 1, "", "select_from_index"]], "nilearn.decoding": [[242, 1, 1, "", "Decoder"], [243, 1, 1, "", "DecoderRegressor"], [244, 1, 1, "", "FREMClassifier"], [245, 1, 1, "", "FREMRegressor"], [246, 1, 1, "", "SearchLight"], [247, 1, 1, "", "SpaceNetClassifier"], [248, 1, 1, "", "SpaceNetRegressor"]], "nilearn.decoding.Decoder": [[242, 2, 1, "", "__init__"], [242, 2, 1, "", "decision_function"], [242, 2, 1, "", "fit"], [242, 2, 1, "", "get_params"], [242, 2, 1, "", "predict"], [242, 2, 1, "", "score"], [242, 2, 1, "", "set_params"]], "nilearn.decoding.DecoderRegressor": [[243, 2, 1, "", "__init__"], [243, 2, 1, "", "decision_function"], [243, 2, 1, "", "fit"], [243, 2, 1, "", "get_params"], [243, 2, 1, "", "predict"], [243, 2, 1, "", "score"], [243, 2, 1, "", "set_params"]], "nilearn.decoding.FREMClassifier": [[244, 2, 1, "", "__init__"], [244, 2, 1, "", "decision_function"], [244, 2, 1, "", "fit"], [244, 2, 1, "", "get_params"], [244, 2, 1, "", "predict"], [244, 2, 1, "", "score"], [244, 2, 1, "", "set_params"]], "nilearn.decoding.FREMRegressor": [[245, 2, 1, "", "__init__"], [245, 2, 1, "", "decision_function"], [245, 2, 1, "", "fit"], [245, 2, 1, "", "get_params"], [245, 2, 1, "", "predict"], [245, 2, 1, "", "score"], [245, 2, 1, "", "set_params"]], "nilearn.decoding.SearchLight": [[246, 2, 1, "", "__init__"], [246, 2, 1, "", "fit"], [246, 2, 1, "", "get_params"], [246, 2, 1, "", "set_params"]], "nilearn.decoding.SpaceNetClassifier": [[247, 4, 1, "", "SUPPORTED_LOSSES"], [247, 4, 1, "", "SUPPORTED_PENALTIES"], [247, 2, 1, "", "__init__"], [247, 2, 1, "", "check_params"], [247, 2, 1, "", "decision_function"], [247, 2, 1, "", "fit"], [247, 2, 1, "", "get_params"], [247, 2, 1, "", "predict"], [247, 2, 1, "", "score"], [247, 2, 1, "", "set_params"]], "nilearn.decoding.SpaceNetRegressor": [[248, 4, 1, "", "SUPPORTED_LOSSES"], [248, 4, 1, "", "SUPPORTED_PENALTIES"], [248, 2, 1, "", "__init__"], [248, 2, 1, "", "check_params"], [248, 2, 1, "", "decision_function"], [248, 2, 1, "", "fit"], [248, 2, 1, "", "get_params"], [248, 2, 1, "", "predict"], [248, 2, 1, "", "score"], [248, 2, 1, "", "set_params"]], "nilearn.decomposition": [[249, 1, 1, "", "CanICA"], [250, 1, 1, "", "DictLearning"]], "nilearn.decomposition.CanICA": [[249, 2, 1, "", "__init__"], [249, 2, 1, "", "fit"], [249, 2, 1, "", "fit_transform"], [249, 2, 1, "", "get_params"], [249, 2, 1, "", "inverse_transform"], [249, 2, 1, "", "score"], [249, 2, 1, "", "set_params"], [249, 2, 1, "", "transform"]], "nilearn.decomposition.DictLearning": [[250, 2, 1, "", "__init__"], [250, 2, 1, "", "fit"], [250, 2, 1, "", "fit_transform"], [250, 2, 1, "", "get_params"], [250, 2, 1, "", "inverse_transform"], [250, 2, 1, "", "score"], [250, 2, 1, "", "set_params"], [250, 2, 1, "", "transform"]], "nilearn.glm": [[251, 1, 1, "", "ARModel"], [252, 1, 1, "", "Contrast"], [253, 1, 1, "", "FContrastResults"], [254, 1, 1, "", "LikelihoodModelResults"], [255, 1, 1, "", "OLSModel"], [256, 1, 1, "", "RegressionResults"], [257, 1, 1, "", "SimpleRegressionResults"], [258, 1, 1, "", "TContrastResults"], [259, 3, 1, "", "cluster_level_inference"], [260, 3, 1, "", "compute_contrast"], [261, 3, 1, "", "compute_fixed_effects"], [262, 3, 1, "", "expression_to_contrast_vector"], [263, 3, 1, "", "fdr_threshold"], [406, 0, 0, "-", "first_level"], [406, 0, 0, "-", "second_level"], [280, 3, 1, "", "threshold_stats_img"]], "nilearn.glm.ARModel": [[251, 2, 1, "", "__init__"], [251, 2, 1, "", "fit"], [251, 2, 1, "", "initialize"], [251, 2, 1, "", "logL"], [251, 2, 1, "", "whiten"]], "nilearn.glm.Contrast": [[252, 2, 1, "", "__init__"], [252, 2, 1, "", "effect_size"], [252, 2, 1, "", "effect_variance"], [252, 2, 1, "", "one_minus_pvalue"], [252, 2, 1, "", "p_value"], [252, 2, 1, "", "stat"], [252, 2, 1, "", "z_score"]], "nilearn.glm.FContrastResults": [[253, 2, 1, "", "__init__"]], "nilearn.glm.LikelihoodModelResults": [[254, 2, 1, "", "Fcontrast"], [254, 2, 1, "", "Tcontrast"], [254, 2, 1, "", "__init__"], [254, 2, 1, "", "conf_int"], [254, 2, 1, "", "logL"], [254, 2, 1, "", "t"], [254, 2, 1, "", "vcov"]], "nilearn.glm.OLSModel": [[255, 2, 1, "", "__init__"], [255, 2, 1, "", "fit"], [255, 2, 1, "", "initialize"], [255, 2, 1, "", "logL"], [255, 2, 1, "", "whiten"]], "nilearn.glm.RegressionResults": [[256, 2, 1, "", "Fcontrast"], [256, 2, 1, "", "MSE"], [256, 2, 1, "", "SSE"], [256, 2, 1, "", "Tcontrast"], [256, 2, 1, "", "__init__"], [256, 2, 1, "", "conf_int"], [256, 2, 1, "", "logL"], [256, 2, 1, "", "normalized_residuals"], [256, 2, 1, "", "predicted"], [256, 2, 1, "", "r_square"], [256, 2, 1, "", "residuals"], [256, 2, 1, "", "t"], [256, 2, 1, "", "vcov"]], "nilearn.glm.SimpleRegressionResults": [[257, 2, 1, "", "Fcontrast"], [257, 2, 1, "", "Tcontrast"], [257, 2, 1, "", "__init__"], [257, 2, 1, "", "conf_int"], [257, 2, 1, "", "logL"], [257, 2, 1, "", "normalized_residuals"], [257, 2, 1, "", "predicted"], [257, 2, 1, "", "residuals"], [257, 2, 1, "", "t"], [257, 2, 1, "", "vcov"]], "nilearn.glm.TContrastResults": [[258, 2, 1, "", "__init__"]], "nilearn.glm.first_level": [[264, 1, 1, "", "FirstLevelModel"], [265, 3, 1, "", "check_design_matrix"], [266, 3, 1, "", "compute_regressor"], [267, 3, 1, "", "first_level_from_bids"], [268, 3, 1, "", "glover_dispersion_derivative"], [269, 3, 1, "", "glover_hrf"], [270, 3, 1, "", "glover_time_derivative"], [271, 3, 1, "", "make_first_level_design_matrix"], [272, 3, 1, "", "mean_scaling"], [273, 3, 1, "", "run_glm"], [274, 3, 1, "", "spm_dispersion_derivative"], [275, 3, 1, "", "spm_hrf"], [276, 3, 1, "", "spm_time_derivative"]], "nilearn.glm.first_level.FirstLevelModel": [[264, 2, 1, "", "__init__"], [264, 2, 1, "", "compute_contrast"], [264, 2, 1, "", "fit"], [264, 2, 1, "", "fit_transform"], [264, 2, 1, "", "generate_report"], [264, 2, 1, "", "get_params"], [264, 2, 1, "", "predicted"], [264, 2, 1, "", "r_square"], [264, 2, 1, "", "residuals"], [264, 5, 1, "", "scaling_axis"], [264, 2, 1, "", "set_params"]], "nilearn.glm.second_level": [[277, 1, 1, "", "SecondLevelModel"], [278, 3, 1, "", "make_second_level_design_matrix"], [279, 3, 1, "", "non_parametric_inference"]], "nilearn.glm.second_level.SecondLevelModel": [[277, 2, 1, "", "__init__"], [277, 2, 1, "", "compute_contrast"], [277, 2, 1, "", "fit"], [277, 2, 1, "", "fit_transform"], [277, 2, 1, "", "generate_report"], [277, 2, 1, "", "get_params"], [277, 2, 1, "", "predicted"], [277, 2, 1, "", "r_square"], [277, 2, 1, "", "residuals"], [277, 2, 1, "", "set_params"]], "nilearn.image": [[281, 3, 1, "", "binarize_img"], [282, 3, 1, "", "clean_img"], [283, 3, 1, "", "concat_imgs"], [284, 3, 1, "", "coord_transform"], [285, 3, 1, "", "copy_img"], [286, 3, 1, "", "crop_img"], [287, 3, 1, "", "get_data"], [288, 3, 1, "", "high_variance_confounds"], [289, 3, 1, "", "index_img"], [290, 3, 1, "", "iter_img"], [291, 3, 1, "", "largest_connected_component_img"], [292, 3, 1, "", "load_img"], [293, 3, 1, "", "math_img"], [294, 3, 1, "", "mean_img"], [295, 3, 1, "", "new_img_like"], [296, 3, 1, "", "reorder_img"], [297, 3, 1, "", "resample_img"], [298, 3, 1, "", "resample_to_img"], [299, 3, 1, "", "smooth_img"], [300, 3, 1, "", "swap_img_hemispheres"], [301, 3, 1, "", "threshold_img"]], "nilearn.interfaces": [[409, 0, 0, "-", "bids"], [409, 0, 0, "-", "fmriprep"], [409, 0, 0, "-", "fsl"]], "nilearn.interfaces.bids": [[302, 3, 1, "", "get_bids_files"], [303, 3, 1, "", "parse_bids_filename"], [304, 3, 1, "", "save_glm_to_bids"]], "nilearn.interfaces.fmriprep": [[305, 3, 1, "", "load_confounds"], [306, 3, 1, "", "load_confounds_strategy"]], "nilearn.interfaces.fsl": [[307, 3, 1, "", "get_design_from_fslmat"]], "nilearn.maskers": [[308, 1, 1, "", "BaseMasker"], [309, 1, 1, "", "MultiNiftiLabelsMasker"], [310, 1, 1, "", "MultiNiftiMapsMasker"], [311, 1, 1, "", "MultiNiftiMasker"], [312, 1, 1, "", "NiftiLabelsMasker"], [313, 1, 1, "", "NiftiMapsMasker"], [314, 1, 1, "", "NiftiMasker"], [315, 1, 1, "", "NiftiSpheresMasker"]], "nilearn.maskers.BaseMasker": [[308, 2, 1, "", "__init__"], [308, 2, 1, "", "fit_transform"], [308, 2, 1, "", "get_params"], [308, 2, 1, "", "inverse_transform"], [308, 2, 1, "", "set_params"], [308, 2, 1, "", "transform"], [308, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[309, 2, 1, "", "__init__"], [309, 2, 1, "", "fit"], [309, 2, 1, "", "fit_transform"], [309, 2, 1, "", "generate_report"], [309, 2, 1, "", "get_params"], [309, 2, 1, "", "inverse_transform"], [309, 2, 1, "", "set_params"], [309, 2, 1, "", "transform"], [309, 2, 1, "", "transform_imgs"], [309, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMapsMasker": [[310, 2, 1, "", "__init__"], [310, 2, 1, "", "fit"], [310, 2, 1, "", "fit_transform"], [310, 2, 1, "", "generate_report"], [310, 2, 1, "", "get_params"], [310, 2, 1, "", "inverse_transform"], [310, 2, 1, "", "set_params"], [310, 2, 1, "", "transform"], [310, 2, 1, "", "transform_imgs"], [310, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMasker": [[311, 2, 1, "", "__init__"], [311, 2, 1, "", "fit"], [311, 2, 1, "", "fit_transform"], [311, 2, 1, "", "generate_report"], [311, 2, 1, "", "get_params"], [311, 2, 1, "", "inverse_transform"], [311, 2, 1, "", "set_params"], [311, 2, 1, "", "transform"], [311, 2, 1, "", "transform_imgs"], [311, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiLabelsMasker": [[312, 2, 1, "", "__init__"], [312, 2, 1, "", "fit"], [312, 2, 1, "", "fit_transform"], [312, 2, 1, "", "generate_report"], [312, 2, 1, "", "get_params"], [312, 2, 1, "", "inverse_transform"], [312, 2, 1, "", "set_params"], [312, 2, 1, "", "transform"], [312, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMapsMasker": [[313, 2, 1, "", "__init__"], [313, 2, 1, "", "fit"], [313, 2, 1, "", "fit_transform"], [313, 2, 1, "", "generate_report"], [313, 2, 1, "", "get_params"], [313, 2, 1, "", "inverse_transform"], [313, 2, 1, "", "set_params"], [313, 2, 1, "", "transform"], [313, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMasker": [[314, 2, 1, "", "__init__"], [314, 2, 1, "", "fit"], [314, 2, 1, "", "fit_transform"], [314, 2, 1, "", "generate_report"], [314, 2, 1, "", "get_params"], [314, 2, 1, "", "inverse_transform"], [314, 2, 1, "", "set_params"], [314, 2, 1, "", "transform"], [314, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiSpheresMasker": [[315, 2, 1, "", "__init__"], [315, 2, 1, "", "fit"], [315, 2, 1, "", "fit_transform"], [315, 2, 1, "", "get_params"], [315, 2, 1, "", "inverse_transform"], [315, 2, 1, "", "set_params"], [315, 2, 1, "", "transform"], [315, 2, 1, "", "transform_single_imgs"]], "nilearn.masking": [[316, 3, 1, "", "apply_mask"], [317, 3, 1, "", "compute_background_mask"], [318, 3, 1, "", "compute_brain_mask"], [319, 3, 1, "", "compute_epi_mask"], [320, 3, 1, "", "compute_multi_background_mask"], [321, 3, 1, "", "compute_multi_brain_mask"], [322, 3, 1, "", "compute_multi_epi_mask"], [323, 3, 1, "", "intersect_masks"], [324, 3, 1, "", "unmask"]], "nilearn.mass_univariate": [[325, 3, 1, "", "permuted_ols"]], "nilearn.plotting": [[413, 0, 0, "-", "displays"], [356, 3, 1, "", "find_cut_slices"], [357, 3, 1, "", "find_parcellation_cut_coords"], [358, 3, 1, "", "find_probabilistic_atlas_cut_coords"], [359, 3, 1, "", "find_xyz_cut_coords"], [360, 3, 1, "", "plot_anat"], [361, 3, 1, "", "plot_carpet"], [362, 3, 1, "", "plot_connectome"], [363, 3, 1, "", "plot_contrast_matrix"], [364, 3, 1, "", "plot_design_matrix"], [365, 3, 1, "", "plot_epi"], [366, 3, 1, "", "plot_event"], [367, 3, 1, "", "plot_glass_brain"], [368, 3, 1, "", "plot_img"], [369, 3, 1, "", "plot_img_comparison"], [370, 3, 1, "", "plot_img_on_surf"], [371, 3, 1, "", "plot_markers"], [372, 3, 1, "", "plot_matrix"], [373, 3, 1, "", "plot_prob_atlas"], [374, 3, 1, "", "plot_roi"], [375, 3, 1, "", "plot_stat_map"], [376, 3, 1, "", "plot_surf"], [377, 3, 1, "", "plot_surf_contours"], [378, 3, 1, "", "plot_surf_roi"], [379, 3, 1, "", "plot_surf_stat_map"], [380, 3, 1, "", "show"], [381, 3, 1, "", "view_connectome"], [382, 3, 1, "", "view_img"], [383, 3, 1, "", "view_img_on_surf"], [384, 3, 1, "", "view_markers"], [385, 3, 1, "", "view_surf"]], "nilearn.plotting.displays": [[326, 1, 1, "", "BaseAxes"], [327, 1, 1, "", "BaseSlicer"], [328, 1, 1, "", "CutAxes"], [329, 1, 1, "", "GlassBrainAxes"], [330, 1, 1, "", "LProjector"], [331, 1, 1, "", "LRProjector"], [332, 1, 1, "", "LYRProjector"], [333, 1, 1, "", "LYRZProjector"], [334, 1, 1, "", "LZRProjector"], [335, 1, 1, "", "LZRYProjector"], [336, 1, 1, "", "MosaicSlicer"], [337, 1, 1, "", "OrthoProjector"], [338, 1, 1, "", "OrthoSlicer"], [339, 1, 1, "", "PlotlySurfaceFigure"], [340, 1, 1, "", "RProjector"], [341, 1, 1, "", "TiledSlicer"], [342, 1, 1, "", "XProjector"], [343, 1, 1, "", "XSlicer"], [344, 1, 1, "", "XZProjector"], [345, 1, 1, "", "XZSlicer"], [346, 1, 1, "", "YProjector"], [347, 1, 1, "", "YSlicer"], [348, 1, 1, "", "YXProjector"], [349, 1, 1, "", "YXSlicer"], [350, 1, 1, "", "YZProjector"], [351, 1, 1, "", "YZSlicer"], [352, 1, 1, "", "ZProjector"], [353, 1, 1, "", "ZSlicer"], [354, 3, 1, "", "get_projector"], [355, 3, 1, "", "get_slicer"]], "nilearn.plotting.displays.BaseAxes": [[326, 2, 1, "", "__init__"], [326, 2, 1, "", "add_object_bounds"], [326, 2, 1, "", "draw_2d"], [326, 2, 1, "", "draw_left_right"], [326, 2, 1, "", "draw_position"], [326, 2, 1, "", "draw_scale_bar"], [326, 2, 1, "", "get_object_bounds"], [326, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.BaseSlicer": [[327, 2, 1, "", "__init__"], [327, 2, 1, "", "add_contours"], [327, 2, 1, "", "add_edges"], [327, 2, 1, "", "add_markers"], [327, 2, 1, "", "add_overlay"], [327, 2, 1, "", "annotate"], [327, 5, 1, "", "black_bg"], [327, 5, 1, "", "brain_color"], [327, 2, 1, "", "close"], [327, 2, 1, "", "find_cut_coords"], [327, 2, 1, "", "init_with_figure"], [327, 2, 1, "", "savefig"], [327, 2, 1, "", "title"]], "nilearn.plotting.displays.CutAxes": [[328, 2, 1, "", "__init__"], [328, 2, 1, "", "add_object_bounds"], [328, 2, 1, "", "draw_2d"], [328, 2, 1, "", "draw_left_right"], [328, 2, 1, "", "draw_position"], [328, 2, 1, "", "draw_scale_bar"], [328, 2, 1, "", "get_object_bounds"], [328, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.GlassBrainAxes": [[329, 2, 1, "", "__init__"], [329, 2, 1, "", "add_object_bounds"], [329, 2, 1, "", "draw_2d"], [329, 2, 1, "", "draw_left_right"], [329, 2, 1, "", "draw_position"], [329, 2, 1, "", "draw_scale_bar"], [329, 2, 1, "", "get_object_bounds"], [329, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.LProjector": [[330, 2, 1, "", "__init__"], [330, 2, 1, "", "add_contours"], [330, 2, 1, "", "add_edges"], [330, 2, 1, "", "add_graph"], [330, 2, 1, "", "add_markers"], [330, 2, 1, "", "add_overlay"], [330, 2, 1, "", "annotate"], [330, 5, 1, "", "black_bg"], [330, 5, 1, "", "brain_color"], [330, 2, 1, "", "close"], [330, 2, 1, "", "draw_cross"], [330, 2, 1, "", "find_cut_coords"], [330, 2, 1, "", "init_with_figure"], [330, 2, 1, "", "savefig"], [330, 2, 1, "", "title"]], "nilearn.plotting.displays.LRProjector": [[331, 2, 1, "", "__init__"], [331, 2, 1, "", "add_contours"], [331, 2, 1, "", "add_edges"], [331, 2, 1, "", "add_graph"], [331, 2, 1, "", "add_markers"], [331, 2, 1, "", "add_overlay"], [331, 2, 1, "", "annotate"], [331, 5, 1, "", "black_bg"], [331, 5, 1, "", "brain_color"], [331, 2, 1, "", "close"], [331, 2, 1, "", "draw_cross"], [331, 2, 1, "", "find_cut_coords"], [331, 2, 1, "", "init_with_figure"], [331, 2, 1, "", "savefig"], [331, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRProjector": [[332, 2, 1, "", "__init__"], [332, 2, 1, "", "add_contours"], [332, 2, 1, "", "add_edges"], [332, 2, 1, "", "add_graph"], [332, 2, 1, "", "add_markers"], [332, 2, 1, "", "add_overlay"], [332, 2, 1, "", "annotate"], [332, 5, 1, "", "black_bg"], [332, 5, 1, "", "brain_color"], [332, 2, 1, "", "close"], [332, 2, 1, "", "draw_cross"], [332, 2, 1, "", "find_cut_coords"], [332, 2, 1, "", "init_with_figure"], [332, 2, 1, "", "savefig"], [332, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRZProjector": [[333, 2, 1, "", "__init__"], [333, 2, 1, "", "add_contours"], [333, 2, 1, "", "add_edges"], [333, 2, 1, "", "add_graph"], [333, 2, 1, "", "add_markers"], [333, 2, 1, "", "add_overlay"], [333, 2, 1, "", "annotate"], [333, 5, 1, "", "black_bg"], [333, 5, 1, "", "brain_color"], [333, 2, 1, "", "close"], [333, 2, 1, "", "draw_cross"], [333, 2, 1, "", "find_cut_coords"], [333, 2, 1, "", "init_with_figure"], [333, 2, 1, "", "savefig"], [333, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRProjector": [[334, 2, 1, "", "__init__"], [334, 2, 1, "", "add_contours"], [334, 2, 1, "", "add_edges"], [334, 2, 1, "", "add_graph"], [334, 2, 1, "", "add_markers"], [334, 2, 1, "", "add_overlay"], [334, 2, 1, "", "annotate"], [334, 5, 1, "", "black_bg"], [334, 5, 1, "", "brain_color"], [334, 2, 1, "", "close"], [334, 2, 1, "", "draw_cross"], [334, 2, 1, "", "find_cut_coords"], [334, 2, 1, "", "init_with_figure"], [334, 2, 1, "", "savefig"], [334, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRYProjector": [[335, 2, 1, "", "__init__"], [335, 2, 1, "", "add_contours"], [335, 2, 1, "", "add_edges"], [335, 2, 1, "", "add_graph"], [335, 2, 1, "", "add_markers"], [335, 2, 1, "", "add_overlay"], [335, 2, 1, "", "annotate"], [335, 5, 1, "", "black_bg"], [335, 5, 1, "", "brain_color"], [335, 2, 1, "", "close"], [335, 2, 1, "", "draw_cross"], [335, 2, 1, "", "find_cut_coords"], [335, 2, 1, "", "init_with_figure"], [335, 2, 1, "", "savefig"], [335, 2, 1, "", "title"]], "nilearn.plotting.displays.MosaicSlicer": [[336, 2, 1, "", "__init__"], [336, 2, 1, "", "add_contours"], [336, 2, 1, "", "add_edges"], [336, 2, 1, "", "add_markers"], [336, 2, 1, "", "add_overlay"], [336, 2, 1, "", "annotate"], [336, 5, 1, "", "black_bg"], [336, 5, 1, "", "brain_color"], [336, 2, 1, "", "close"], [336, 2, 1, "", "draw_cross"], [336, 2, 1, "", "find_cut_coords"], [336, 2, 1, "", "init_with_figure"], [336, 2, 1, "", "savefig"], [336, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoProjector": [[337, 2, 1, "", "__init__"], [337, 2, 1, "", "add_contours"], [337, 2, 1, "", "add_edges"], [337, 2, 1, "", "add_graph"], [337, 2, 1, "", "add_markers"], [337, 2, 1, "", "add_overlay"], [337, 2, 1, "", "annotate"], [337, 5, 1, "", "black_bg"], [337, 5, 1, "", "brain_color"], [337, 2, 1, "", "close"], [337, 2, 1, "", "draw_cross"], [337, 2, 1, "", "find_cut_coords"], [337, 2, 1, "", "init_with_figure"], [337, 2, 1, "", "savefig"], [337, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoSlicer": [[338, 2, 1, "", "__init__"], [338, 2, 1, "", "add_contours"], [338, 2, 1, "", "add_edges"], [338, 2, 1, "", "add_markers"], [338, 2, 1, "", "add_overlay"], [338, 2, 1, "", "annotate"], [338, 5, 1, "", "black_bg"], [338, 5, 1, "", "brain_color"], [338, 2, 1, "", "close"], [338, 2, 1, "", "draw_cross"], [338, 2, 1, "", "find_cut_coords"], [338, 2, 1, "", "init_with_figure"], [338, 2, 1, "", "savefig"], [338, 2, 1, "", "title"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[339, 2, 1, "", "__init__"], [339, 2, 1, "", "savefig"], [339, 2, 1, "", "show"]], "nilearn.plotting.displays.RProjector": [[340, 2, 1, "", "__init__"], [340, 2, 1, "", "add_contours"], [340, 2, 1, "", "add_edges"], [340, 2, 1, "", "add_graph"], [340, 2, 1, "", "add_markers"], [340, 2, 1, "", "add_overlay"], [340, 2, 1, "", "annotate"], [340, 5, 1, "", "black_bg"], [340, 5, 1, "", "brain_color"], [340, 2, 1, "", "close"], [340, 2, 1, "", "draw_cross"], [340, 2, 1, "", "find_cut_coords"], [340, 2, 1, "", "init_with_figure"], [340, 2, 1, "", "savefig"], [340, 2, 1, "", "title"]], "nilearn.plotting.displays.TiledSlicer": [[341, 2, 1, "", "__init__"], [341, 2, 1, "", "add_contours"], [341, 2, 1, "", "add_edges"], [341, 2, 1, "", "add_markers"], [341, 2, 1, "", "add_overlay"], [341, 2, 1, "", "annotate"], [341, 5, 1, "", "black_bg"], [341, 5, 1, "", "brain_color"], [341, 2, 1, "", "close"], [341, 2, 1, "", "draw_cross"], [341, 2, 1, "", "find_cut_coords"], [341, 2, 1, "", "init_with_figure"], [341, 2, 1, "", "savefig"], [341, 2, 1, "", "title"]], "nilearn.plotting.displays.XProjector": [[342, 2, 1, "", "__init__"], [342, 2, 1, "", "add_contours"], [342, 2, 1, "", "add_edges"], [342, 2, 1, "", "add_graph"], [342, 2, 1, "", "add_markers"], [342, 2, 1, "", "add_overlay"], [342, 2, 1, "", "annotate"], [342, 5, 1, "", "black_bg"], [342, 5, 1, "", "brain_color"], [342, 2, 1, "", "close"], [342, 2, 1, "", "draw_cross"], [342, 2, 1, "", "find_cut_coords"], [342, 2, 1, "", "init_with_figure"], [342, 2, 1, "", "savefig"], [342, 2, 1, "", "title"]], "nilearn.plotting.displays.XSlicer": [[343, 2, 1, "", "__init__"], [343, 2, 1, "", "add_contours"], [343, 2, 1, "", "add_edges"], [343, 2, 1, "", "add_markers"], [343, 2, 1, "", "add_overlay"], [343, 2, 1, "", "annotate"], [343, 5, 1, "", "black_bg"], [343, 5, 1, "", "brain_color"], [343, 2, 1, "", "close"], [343, 2, 1, "", "draw_cross"], [343, 2, 1, "", "find_cut_coords"], [343, 2, 1, "", "init_with_figure"], [343, 2, 1, "", "savefig"], [343, 2, 1, "", "title"]], "nilearn.plotting.displays.XZProjector": [[344, 2, 1, "", "__init__"], [344, 2, 1, "", "add_contours"], [344, 2, 1, "", "add_edges"], [344, 2, 1, "", "add_graph"], [344, 2, 1, "", "add_markers"], [344, 2, 1, "", "add_overlay"], [344, 2, 1, "", "annotate"], [344, 5, 1, "", "black_bg"], [344, 5, 1, "", "brain_color"], [344, 2, 1, "", "close"], [344, 2, 1, "", "draw_cross"], [344, 2, 1, "", "find_cut_coords"], [344, 2, 1, "", "init_with_figure"], [344, 2, 1, "", "savefig"], [344, 2, 1, "", "title"]], "nilearn.plotting.displays.XZSlicer": [[345, 2, 1, "", "__init__"], [345, 2, 1, "", "add_contours"], [345, 2, 1, "", "add_edges"], [345, 2, 1, "", "add_markers"], [345, 2, 1, "", "add_overlay"], [345, 2, 1, "", "annotate"], [345, 5, 1, "", "black_bg"], [345, 5, 1, "", "brain_color"], [345, 2, 1, "", "close"], [345, 2, 1, "", "draw_cross"], [345, 2, 1, "", "find_cut_coords"], [345, 2, 1, "", "init_with_figure"], [345, 2, 1, "", "savefig"], [345, 2, 1, "", "title"]], "nilearn.plotting.displays.YProjector": [[346, 2, 1, "", "__init__"], [346, 2, 1, "", "add_contours"], [346, 2, 1, "", "add_edges"], [346, 2, 1, "", "add_graph"], [346, 2, 1, "", "add_markers"], [346, 2, 1, "", "add_overlay"], [346, 2, 1, "", "annotate"], [346, 5, 1, "", "black_bg"], [346, 5, 1, "", "brain_color"], [346, 2, 1, "", "close"], [346, 2, 1, "", "draw_cross"], [346, 2, 1, "", "find_cut_coords"], [346, 2, 1, "", "init_with_figure"], [346, 2, 1, "", "savefig"], [346, 2, 1, "", "title"]], "nilearn.plotting.displays.YSlicer": [[347, 2, 1, "", "__init__"], [347, 2, 1, "", "add_contours"], [347, 2, 1, "", "add_edges"], [347, 2, 1, "", "add_markers"], [347, 2, 1, "", "add_overlay"], [347, 2, 1, "", "annotate"], [347, 5, 1, "", "black_bg"], [347, 5, 1, "", "brain_color"], [347, 2, 1, "", "close"], [347, 2, 1, "", "draw_cross"], [347, 2, 1, "", "find_cut_coords"], [347, 2, 1, "", "init_with_figure"], [347, 2, 1, "", "savefig"], [347, 2, 1, "", "title"]], "nilearn.plotting.displays.YXProjector": [[348, 2, 1, "", "__init__"], [348, 2, 1, "", "add_contours"], [348, 2, 1, "", "add_edges"], [348, 2, 1, "", "add_graph"], [348, 2, 1, "", "add_markers"], [348, 2, 1, "", "add_overlay"], [348, 2, 1, "", "annotate"], [348, 5, 1, "", "black_bg"], [348, 5, 1, "", "brain_color"], [348, 2, 1, "", "close"], [348, 2, 1, "", "draw_cross"], [348, 2, 1, "", "find_cut_coords"], [348, 2, 1, "", "init_with_figure"], [348, 2, 1, "", "savefig"], [348, 2, 1, "", "title"]], "nilearn.plotting.displays.YXSlicer": [[349, 2, 1, "", "__init__"], [349, 2, 1, "", "add_contours"], [349, 2, 1, "", "add_edges"], [349, 2, 1, "", "add_markers"], [349, 2, 1, "", "add_overlay"], [349, 2, 1, "", "annotate"], [349, 5, 1, "", "black_bg"], [349, 5, 1, "", "brain_color"], [349, 2, 1, "", "close"], [349, 2, 1, "", "draw_cross"], [349, 2, 1, "", "find_cut_coords"], [349, 2, 1, "", "init_with_figure"], [349, 2, 1, "", "savefig"], [349, 2, 1, "", "title"]], "nilearn.plotting.displays.YZProjector": [[350, 2, 1, "", "__init__"], [350, 2, 1, "", "add_contours"], [350, 2, 1, "", "add_edges"], [350, 2, 1, "", "add_graph"], [350, 2, 1, "", "add_markers"], [350, 2, 1, "", "add_overlay"], [350, 2, 1, "", "annotate"], [350, 5, 1, "", "black_bg"], [350, 5, 1, "", "brain_color"], [350, 2, 1, "", "close"], [350, 2, 1, "", "draw_cross"], [350, 2, 1, "", "find_cut_coords"], [350, 2, 1, "", "init_with_figure"], [350, 2, 1, "", "savefig"], [350, 2, 1, "", "title"]], "nilearn.plotting.displays.YZSlicer": [[351, 2, 1, "", "__init__"], [351, 2, 1, "", "add_contours"], [351, 2, 1, "", "add_edges"], [351, 2, 1, "", "add_markers"], [351, 2, 1, "", "add_overlay"], [351, 2, 1, "", "annotate"], [351, 5, 1, "", "black_bg"], [351, 5, 1, "", "brain_color"], [351, 2, 1, "", "close"], [351, 2, 1, "", "draw_cross"], [351, 2, 1, "", "find_cut_coords"], [351, 2, 1, "", "init_with_figure"], [351, 2, 1, "", "savefig"], [351, 2, 1, "", "title"]], "nilearn.plotting.displays.ZProjector": [[352, 2, 1, "", "__init__"], [352, 2, 1, "", "add_contours"], [352, 2, 1, "", "add_edges"], [352, 2, 1, "", "add_graph"], [352, 2, 1, "", "add_markers"], [352, 2, 1, "", "add_overlay"], [352, 2, 1, "", "annotate"], [352, 5, 1, "", "black_bg"], [352, 5, 1, "", "brain_color"], [352, 2, 1, "", "close"], [352, 2, 1, "", "draw_cross"], [352, 2, 1, "", "find_cut_coords"], [352, 2, 1, "", "init_with_figure"], [352, 2, 1, "", "savefig"], [352, 2, 1, "", "title"]], "nilearn.plotting.displays.ZSlicer": [[353, 2, 1, "", "__init__"], [353, 2, 1, "", "add_contours"], [353, 2, 1, "", "add_edges"], [353, 2, 1, "", "add_markers"], [353, 2, 1, "", "add_overlay"], [353, 2, 1, "", "annotate"], [353, 5, 1, "", "black_bg"], [353, 5, 1, "", "brain_color"], [353, 2, 1, "", "close"], [353, 2, 1, "", "draw_cross"], [353, 2, 1, "", "find_cut_coords"], [353, 2, 1, "", "init_with_figure"], [353, 2, 1, "", "savefig"], [353, 2, 1, "", "title"]], "nilearn.regions": [[386, 1, 1, "", "HierarchicalKMeans"], [387, 1, 1, "", "Parcellations"], [388, 1, 1, "", "ReNA"], [389, 1, 1, "", "RegionExtractor"], [390, 3, 1, "", "connected_label_regions"], [391, 3, 1, "", "connected_regions"], [392, 3, 1, "", "img_to_signals_labels"], [393, 3, 1, "", "img_to_signals_maps"], [394, 3, 1, "", "recursive_neighbor_agglomeration"], [395, 3, 1, "", "signals_to_img_labels"], [396, 3, 1, "", "signals_to_img_maps"]], "nilearn.regions.HierarchicalKMeans": [[386, 2, 1, "", "__init__"], [386, 2, 1, "", "fit"], [386, 2, 1, "", "fit_predict"], [386, 2, 1, "", "fit_transform"], [386, 2, 1, "", "get_params"], [386, 2, 1, "", "inverse_transform"], [386, 2, 1, "", "set_params"], [386, 2, 1, "", "transform"]], "nilearn.regions.Parcellations": [[387, 4, 1, "", "VALID_METHODS"], [387, 2, 1, "", "__init__"], [387, 2, 1, "", "fit"], [387, 2, 1, "", "fit_transform"], [387, 2, 1, "", "get_params"], [387, 2, 1, "", "inverse_transform"], [387, 2, 1, "", "score"], [387, 2, 1, "", "set_params"], [387, 2, 1, "", "transform"]], "nilearn.regions.ReNA": [[388, 2, 1, "", "__init__"], [388, 2, 1, "", "fit"], [388, 2, 1, "", "fit_predict"], [388, 2, 1, "", "fit_transform"], [388, 2, 1, "", "get_params"], [388, 2, 1, "", "inverse_transform"], [388, 2, 1, "", "set_params"], [388, 2, 1, "", "transform"]], "nilearn.regions.RegionExtractor": [[389, 2, 1, "", "__init__"], [389, 2, 1, "", "fit"], [389, 2, 1, "", "fit_transform"], [389, 2, 1, "", "generate_report"], [389, 2, 1, "", "get_params"], [389, 2, 1, "", "inverse_transform"], [389, 2, 1, "", "set_params"], [389, 2, 1, "", "transform"], [389, 2, 1, "", "transform_single_imgs"]], "nilearn.reporting": [[397, 1, 1, "", "HTMLReport"], [398, 3, 1, "", "get_clusters_table"], [399, 3, 1, "", "make_glm_report"]], "nilearn.reporting.HTMLReport": [[397, 2, 1, "", "__init__"], [397, 2, 1, "", "get_iframe"], [397, 2, 1, "", "get_standalone"], [397, 2, 1, "", "open_in_browser"], [397, 2, 1, "", "remove_temp_file"], [397, 2, 1, "", "resize"], [397, 2, 1, "", "save_as_html"]], "nilearn.signal": [[400, 3, 1, "", "butterworth"], [401, 3, 1, "", "clean"], [402, 3, 1, "", "high_variance_confounds"]], "nilearn.surface": [[403, 3, 1, "", "load_surf_data"], [404, 3, 1, "", "load_surf_mesh"], [405, 3, 1, "", "vol_to_surf"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"]}, "titleterms": {"team": 0, "core": 0, "develop": [0, 48, 49, 50, 51, 58, 99, 420], "other": [0, 157], "contributor": [0, 120, 122, 125, 129, 132, 133, 134, 135, 136, 137, 147], "fund": 0, "cite": 0, "nilearn": [0, 4, 12, 13, 14, 15, 16, 29, 34, 153, 154, 162, 168, 169, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420], "scikit": [0, 35, 98, 113, 157, 174], "learn": [0, 35, 48, 49, 50, 98, 113, 152, 153, 157, 169, 174], "basic": [1, 4, 5, 10, 66, 110], "tutori": [1, 2, 3, 110], "3d": [2, 9, 22, 52, 54, 58, 88, 172, 419], "4d": [2, 21, 113, 172, 173], "niimg": [2, 172], "handl": 2, "visual": [2, 3, 8, 9, 10, 11, 15, 16, 19, 20, 21, 22, 25, 26, 29, 30, 31, 36, 37, 40, 41, 42, 43, 49, 52, 54, 58, 81, 84, 98, 107, 110, 113, 151, 152, 153, 154, 159, 174, 419], "download": [2, 3, 49, 98, 113, 114, 172], "dataset": [2, 6, 11, 15, 16, 17, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 48, 49, 50, 51, 53, 58, 61, 62, 65, 75, 76, 79, 80, 99, 101, 105, 106, 108, 152, 156, 161, 162, 172, 176, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 418], "from": [2, 3, 11, 13, 15, 16, 24, 26, 28, 33, 39, 40, 41, 48, 49, 50, 56, 58, 62, 89, 91, 94, 98, 100, 105, 106, 110, 113, 114, 149, 158, 172, 173, 174, 409, 410, 418], "internet": [2, 13, 172], "file": [2, 4, 15, 29, 56, 72, 172, 419], "one": [2, 50, 62, 79, 173], "volum": [2, 3, 9, 24, 25, 66, 83, 110, 171, 173, 174], "loop": [2, 3], "all": [2, 14, 154], "through": 2, "select": [2, 98, 114, 148, 154], "A": [3, 4, 44, 66, 149, 154, 164], "introduct": [3, 154, 164, 169], "fmri": [3, 6, 35, 48, 49, 51, 58, 64, 65, 67, 69, 76, 79, 80, 98, 99, 104, 148, 149, 154, 164, 165], "decod": [3, 28, 29, 30, 31, 32, 33, 34, 35, 37, 41, 43, 98, 100, 110, 154, 156, 157, 158, 160, 177, 242, 243, 244, 245, 246, 247, 248], "retriev": [3, 6, 10, 13, 14, 15, 16, 17, 19, 23, 29, 52, 54, 56, 58, 66, 98], "load": [3, 22, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 47, 48, 51, 56, 75, 94, 98, 99, 113, 151, 154, 172, 174, 409], "data": [3, 4, 6, 9, 10, 11, 13, 14, 15, 16, 17, 22, 23, 25, 29, 30, 32, 33, 35, 39, 40, 41, 42, 44, 47, 48, 49, 52, 54, 55, 56, 57, 61, 64, 66, 67, 69, 71, 75, 89, 94, 98, 100, 103, 107, 113, 148, 151, 153, 154, 157, 159, 164, 172, 173, 174, 411, 413, 417], "haxbi": [3, 18, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 98, 154, 156], "studi": [3, 51, 98, 103, 107, 108, 156], "first": [3, 4, 15, 41, 60, 61, 62, 66, 69, 98, 100, 101, 108, 110, 154, 163, 169, 174, 418], "featur": [3, 15, 98, 120, 123, 147, 154, 168], "extract": [3, 23, 25, 33, 47, 50, 51, 52, 53, 54, 55, 56, 58, 61, 70, 87, 88, 89, 91, 148, 149, 152, 153, 163, 173, 174, 410], "matrix": [3, 35, 49, 52, 54, 56, 58, 78, 148, 149, 163, 418], "behavior": [3, 29, 33, 172], "label": [3, 11, 56, 86, 170], "restrict": [3, 36, 37], "analysi": [3, 6, 32, 36, 42, 55, 60, 61, 62, 64, 65, 67, 69, 74, 75, 81, 97, 100, 101, 102, 104, 105, 106, 107, 108, 110, 154, 157, 159, 163, 164, 412], "cat": 3, "face": [3, 29, 30, 31, 36, 37, 102], "support": 3, "vector": 3, "machin": [3, 113, 169], "measur": [3, 47, 98, 154, 157], "predict": [3, 28, 29, 34, 35, 41, 42, 43, 70, 98, 99, 110, 154, 155, 158, 163], "score": [3, 6, 29, 34, 35, 36, 40, 159], "us": [3, 9, 15, 34, 35, 39, 48, 50, 51, 56, 87, 88, 91, 92, 98, 114, 151, 152, 154, 157, 165, 169, 172, 179, 181, 188, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 237, 241, 242, 243, 244, 245, 246, 248, 249, 250, 252, 259, 260, 261, 264, 266, 267, 271, 273, 277, 278, 279, 280, 282, 283, 284, 287, 288, 289, 290, 292, 293, 294, 295, 297, 298, 299, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 324, 325, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 385, 387, 389, 390, 391, 397, 398, 399, 403, 404, 405, 419], "cross": [3, 29, 34, 35, 98, 103, 154, 157, 159, 161], "valid": [3, 29, 34, 35, 98, 152, 154, 157, 159, 161], "manual": [3, 94, 112, 173], "leav": 3, "out": 3, "implement": 3, "kfold": 3, "inspect": 3, "model": [3, 40, 42, 62, 64, 65, 66, 67, 68, 70, 76, 77, 79, 80, 100, 101, 153, 155, 156, 157, 163, 164, 166, 406, 418], "weight": [3, 31, 98, 154], "turn": [3, 49], "nifti": [3, 55, 172, 173], "imag": [3, 4, 8, 9, 16, 17, 28, 69, 81, 83, 85, 90, 93, 95, 97, 103, 107, 110, 113, 114, 158, 172, 173, 174, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 407, 410, 419], "plot": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 24, 32, 34, 35, 44, 47, 50, 55, 58, 66, 68, 70, 80, 107, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 413, 418, 419], "svm": [3, 29, 98, 154, 157], "what": [3, 51, 99, 147, 162, 164, 169], "i": [3, 51, 99, 164, 169, 172, 174], "chanc": [3, 98, 154, 157], "level": [3, 60, 61, 62, 66, 69, 74, 76, 77, 78, 79, 80, 81, 98, 101, 108, 110, 148, 154, 157, 163, 166, 418], "accuraci": [3, 154], "further": [3, 44, 98, 113, 157, 159], "read": [3, 159, 172], "exampl": [4, 33, 39, 44, 63, 64, 67, 68, 69, 77, 78, 92, 101, 108, 110, 114, 148, 149, 151, 153, 154, 159, 160, 168, 169, 173, 174, 179, 181, 188, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 237, 241, 242, 243, 244, 245, 246, 248, 249, 250, 252, 259, 260, 261, 264, 266, 267, 271, 273, 277, 278, 279, 280, 282, 283, 284, 287, 288, 289, 290, 292, 293, 294, 295, 297, 298, 299, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 324, 325, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 385, 387, 389, 390, 391, 397, 398, 399, 403, 404, 405, 419], "manipul": [4, 83, 110, 171, 173, 417], "look": 4, "step": [4, 169, 174], "our": [4, 41], "simpl": [4, 32, 44, 62, 64, 78, 81, 92, 154], "smooth": [4, 66, 95, 173, 174], "save": [4, 15, 55, 62, 419], "result": [4, 9, 29, 32, 50, 53, 80, 81, 113, 151, 152, 153, 154], "numer": [5, 161], "python": [5, 172], "intro": 6, "glm": [6, 33, 60, 64, 67, 74, 110, 164, 165, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 406], "singl": [6, 15, 55, 71], "session": [6, 33, 64, 71], "subject": [6, 51, 53, 55, 62, 71, 79, 148, 153, 174], "The": [6, 35, 56, 66, 86, 154, 160, 174], "specifi": 6, "experiment": [6, 78, 418], "paradigm": [6, 78, 107, 418], "perform": [6, 55, 61, 69, 81, 98, 154, 156, 157], "detect": 6, "voxel": [6, 42, 43, 55, 75, 94, 159, 166, 173], "signific": [6, 70], "effect": [6, 67], "threshold": [6, 62, 166, 418], "z": [6, 55, 107], "map": [6, 9, 12, 16, 17, 21, 30, 40, 42, 43, 47, 48, 55, 88, 94, 100, 103, 107, 114, 152, 154, 156, 160, 166, 176, 418, 419], "an": [6, 9, 44, 58, 65, 72, 86, 90, 93, 95, 153, 154, 162, 164, 419], "f": [6, 36, 70], "test": [6, 70, 79, 80, 81, 94, 98, 162], "comput": [7, 27, 34, 35, 36, 37, 45, 50, 52, 53, 56, 58, 59, 73, 82, 89, 94, 96, 107, 109, 113, 148, 149, 152, 163, 173, 174], "time": [7, 11, 23, 25, 27, 45, 52, 54, 55, 58, 59, 66, 70, 73, 82, 89, 96, 109, 149, 161, 163, 169, 174, 416], "brain": [8, 13, 14, 16, 19, 25, 28, 40, 42, 47, 48, 49, 50, 51, 56, 58, 83, 91, 97, 99, 110, 149, 151, 152, 153, 158, 171, 173, 410, 413, 419], "make": [9, 16, 32, 162, 170], "surfac": [9, 22, 23, 24, 37, 69, 108, 163, 403, 404, 405, 417, 419], "statist": [9, 16, 62, 81, 88, 94, 97, 107, 110, 114, 164, 166, 176, 418, 419], "get": [9, 24, 55, 70, 103, 162], "cortic": [9, 22, 37, 419], "mesh": [9, 24, 419], "sampl": [9, 24, 68, 79, 80], "around": [9, 51, 58], "each": [9, 33], "node": 9, "interact": [9, 16, 148, 149, 413, 419], "plotli": 9, "comparison": [9, 156, 164, 166], "atla": [9, 10, 20, 21, 22, 47, 51, 52, 54, 56, 58, 86, 87, 99, 149, 162], "choos": [9, 100, 154, 155], "region": [9, 50, 51, 53, 54, 86, 87, 88, 91, 94, 149, 151, 152, 174, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 414], "outlin": 9, "displai": [9, 14, 15, 52, 53, 54, 56, 58, 79, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 413, 419], "interest": [9, 94], "top": 9, "higher": [9, 66], "resolut": [9, 173, 174], "multipl": [9, 15, 148, 164, 166, 174], "view": [9, 15], "web": [9, 22, 52, 54, 58], "browser": [9, 22, 52, 54, 58], "impact": [9, 56], "paramet": [9, 34, 61, 63, 64, 66, 67, 68, 69, 86, 98, 100, 148, 155, 157, 174], "harvard": 10, "oxford": 10, "juelich": 10, "contour": [10, 14, 419], "global": [11, 56], "pattern": [11, 44], "carpet": 11, "fetch": [11, 20, 25, 26, 33, 47, 50, 53, 62, 76, 79, 80, 101, 107, 108, 152, 172, 176], "adhd": [11, 61], "deriv": [11, 48, 66, 176], "mask": [11, 16, 18, 25, 32, 36, 41, 66, 89, 94, 98, 103, 113, 154, 157, 159, 173, 174, 316, 317, 318, 319, 320, 321, 322, 323, 324, 411], "over": [11, 47], "base": [11, 23, 32, 37, 42, 43, 56, 69, 75, 100, 108, 152, 163, 166], "separ": [11, 86], "tissu": 11, "type": 11, "matplotlib": [12, 34], "colormap": [12, 419], "color": 12, "glass": [13, 14, 16], "whole": 13, "sagitt": [13, 15], "cut": [13, 15], "black": 13, "background": [13, 17, 89], "hemispher": [13, 14, 69], "option": 14, "demo": 14, "differ": [14, 30, 32, 34, 35, 44, 47, 86, 148, 155, 174, 419], "project": [14, 26, 69, 162, 170], "left": [14, 69], "right": [14, 15, 100, 155], "fill": [14, 419], "both": 14, "more": [15, 17, 157], "tool": [15, 16], "we": [15, 32, 35, 41, 162], "provid": [15, 16], "gener": [15, 16, 33, 44, 61, 62, 64, 72, 75, 77, 103, 111, 176, 406], "purpos": [15, 16], "coron": 15, "axial": 15, "given": [15, 173], "coordin": [15, 47, 58, 149], "number": [15, 161], "5": [15, 17, 125, 132, 133, 134, 147], "onli": [15, 50, 174], "two": [15, 64, 71, 80, 155], "slice": [15, 44, 419], "without": [15, 56, 98, 154, 157], "colorbar": 15, "side": 15, "chang": [15, 17, 66, 98, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 140, 141, 142, 143, 144, 145, 147, 174], "now": [15, 35, 52, 54], "ar": [15, 66], "three": [15, 100], "2x2": 15, "fashion": 15, "along": 15, "row": 15, "column": 15, "anoth": [15, 173], "wai": 15, "limit": 15, "demonstr": 15, "variou": 15, "show": [15, 38, 100, 380], "how": [15, 162, 170, 174], "add_edg": 15, "add_contour": 15, "seed": [15, 23, 55, 58, 174], "add_mark": 15, "annot": [15, 114], "function": [16, 19, 23, 41, 44, 46, 47, 50, 51, 54, 68, 99, 100, 110, 148, 149, 150, 152, 153, 157, 159, 173, 175, 176, 415, 418, 419], "plot_stat_map": [16, 20, 375], "view_img": [16, 382], "plot_glass_brain": [16, 367], "anatom": 16, "plot_anat": [16, 360], "roi": [16, 32, 51, 94, 173], "here": [16, 41], "plot_roi": [16, 374], "epi": [16, 89], "plot_epi": [16, 365], "control": [17, 157, 174], "contrast": [17, 61, 62, 66, 69, 70, 163, 252, 418], "when": [17, 172], "local": [17, 72, 105, 106], "enhanc": [17, 120, 122, 126, 127, 128, 129, 130, 132, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 162], "dim": 17, "0": [17, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147], "decreas": [17, 172], "1": [17, 66, 115, 116, 117, 118, 119, 121, 125, 128, 130, 133, 136, 139, 141, 143, 147], "multiscal": 19, "parcel": [19, 47, 49, 56, 149, 151, 152, 387], "group": [19, 48, 51, 53, 99, 108, 148, 161], "probabilist": [20, 21, 47, 54, 149], "default": [20, 58, 61, 87], "mode": [20, 58, 61, 86, 87, 419], "msdl": [20, 51, 99], "add_overlai": 20, "object": [20, 29, 31, 34, 62, 101, 108, 153, 172, 174], "plot_prob_atla": [20, 373], "refer": [22, 23, 47, 49, 56, 58, 100, 102, 114, 148, 149, 151, 152, 153, 155, 156, 159, 160, 169, 408], "fetcher": [22, 162], "connect": [23, 46, 47, 51, 56, 57, 86, 99, 100, 110, 148, 150, 152, 175], "seri": [23, 25, 52, 54, 55, 58, 70, 89, 100, 149, 163, 174, 416], "calcul": [23, 70, 106], "technic": 24, "point": [24, 174], "illustr": 24, "scheme": 24, "build": [24, 33, 35, 40, 54, 94, 113, 149, 162, 170], "cylind": 24, "locat": 24, "which": [24, 151], "vol_to_surf": [24, 405], "would": 24, "draw": 24, "its": 24, "adjust": 24, "neuroimag": [25, 113, 155, 169, 172, 174], "appli": [25, 48, 113, 151, 173, 174], "correspond": [25, 52, 54], "megatrawl": 26, "network": [26, 50, 58, 61, 87, 153], "matric": [26, 53, 63, 100, 152, 174], "human": 26, "connectom": [26, 47, 50, 52, 53, 58, 148, 149, 175, 179, 180, 181, 182, 183, 184, 185, 186, 419], "anova": [29, 34, 98, 154, 157], "v": [29, 30, 31, 36, 102], "hous": [29, 30, 31, 36, 37, 102], "pipelin": [29, 33, 34, 112, 113, 156, 157, 174], "fit": [29, 31, 33, 34, 39, 43, 62, 64, 67, 70, 101, 108, 153, 163, 166], "obtain": [29, 62, 101, 108], "via": 29, "classifi": [30, 159], "train": 30, "frem": [31, 39, 156], "recognit": [31, 36, 44, 102], "et": [32, 38, 39, 40, 41], "al": [32, 38, 39, 40, 41], "prepar": [32, 35, 36, 41, 61, 64, 67, 69, 81, 100, 154, 159, 170, 173, 174], "bar": [32, 419], "summar": 32, "after": [33, 89], "signal": [33, 51, 53, 54, 56, 58, 91, 149, 174, 400, 401, 402, 410, 416], "proper": 33, "event": [33, 72, 163], "structur": [33, 57, 160, 162], "instanti": 33, "run": [33, 41, 44, 66, 103, 157], "firstlevelmodel": [33, 62, 101, 108, 264], "report": [33, 61, 62, 64, 75, 162, 397, 398, 399, 415, 418], "set": [34, 155, 157, 159, 162], "respons": [34, 37, 65, 66, 68], "valu": [34, 161], "screen": 34, "percentil": 34, "nest": 34, "multi": [35, 53, 153, 155], "class": [35, 155], "strategi": [35, 56, 154, 174], "barplot": 35, "confus": 35, "searchlight": [36, 37, 159, 246], "bold": [37, 164], "stimuli": [38, 40, 41], "jimura": 39, "mix": [39, 156], "gambl": [39, 156], "experi": [39, 113, 154], "tv": 39, "l1": 39, "spacenet": [39, 43, 160], "encod": 40, "miyawaki": [40, 41], "2008": [40, 41], "estim": [40, 44, 57, 58, 61, 62, 64, 66, 67, 69, 76, 77, 79, 80, 98, 101, 154, 155, 157, 161], "recept": 40, "field": 40, "reconstruct": 41, "Then": 41, "defin": [41, 56, 63, 68, 100], "itself": 41, "let": 41, "u": 41, "quantifi": 41, "error": 41, "morphometri": [42, 43, 75, 166], "oasi": [42, 43, 75], "vbm": [42, 43, 75], "bio": 42, "marker": [42, 419], "ag": [42, 51, 75, 99], "mass": [42, 412], "univari": [42, 102, 105, 106, 159, 412], "preprocess": [42, 113, 176, 416], "qualiti": [42, 43, 94], "infer": 42, "massiv": [42, 102, 105, 106, 159], "space": [43, 71, 148], "net": 43, "prior": 43, "simul": [44, 57, 148, 157], "creat": [44, 63, 78, 173], "exercic": 44, "go": [44, 98, 107, 113, 157], "compar": [47, 48, 49, 85, 100, 148, 159], "atlas": [47, 149, 176, 419], "yeo": [47, 86], "direct": [47, 148], "asymmetr": 47, "iter": [47, 161], "spatial": [48, 156, 160, 173], "ica": [48, 103, 153], "dictionari": [48, 50, 152, 153], "canica": [48, 153, 249], "cluster": [49, 70, 76, 151], "method": [49, 113], "ward": 49, "compress": [49, 151], "represent": [49, 151, 172], "kmean": 49, "hierarch": 49, "those": 49, "rena": [49, 388], "correl": [50, 51, 54, 55, 56, 58, 148, 149], "coeffici": 50, "specif": [50, 114, 173], "classif": [51, 99, 155], "children": 51, "partial": [51, 58], "variabl": 51, "kind": [51, 99], "most": [51, 70, 99], "power": [51, 99], "spars": [52, 53, 148, 161], "invers": [52, 53, 148, 174], "covari": [52, 53, 148, 161], "And": [52, 54], "graph": [52, 54, 58, 149], "precis": 53, "produc": 55, "fisher": 55, "transform": [55, 173, 174], "confound": [56, 66, 174], "remov": [56, 66, 174], "flexibl": 56, "fmriprep": [56, 305, 306, 409], "interfac": [56, 302, 303, 304, 305, 306, 307, 409], "motion": 56, "scrub": 56, "predefin": 56, "sphere": [58, 159], "dmn": 58, "within": 58, "averag": 58, "strength": 58, "dosenbach": 58, "": [58, 98, 147, 154], "see": 58, "also": 58, "complet": 62, "bid": [62, 101, 108, 302, 303, 304, 409], "openneuro": 62, "automat": [62, 101, 108, 113, 176], "argument": [62, 101, 108, 174], "output": [62, 114, 172], "disk": 62, "design": [63, 66, 77, 78, 100, 163, 174, 418], "finit": 65, "impul": 65, "fir": 65, "understand": [66, 89, 172, 174], "drift": 66, "hemodynam": [66, 418], "ad": [66, 419], "nois": 66, "ol": 66, "order": 66, "censor": 66, "conclus": 66, "explicit": 67, "fix": [67, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147], "mri": 68, "stimulu": 68, "analys": [69, 75], "residu": [70, 163], "import": [70, 420], "modul": 70, "largest": 70, "actual": 70, "6": [70, 126, 135, 136, 137, 147], "distribut": [70, 170], "r": 70, "squar": 70, "nativ": 71, "tsv": 72, "neurospin": 72, "task": [72, 100, 105, 106], "second": [74, 76, 77, 78, 79, 80, 81, 101, 108, 110, 166, 418], "true": 76, "posit": 76, "proport": 76, "t_map": 79, "unpair": 80, "pair": 80, "some": 81, "t": [81, 88], "affin": [84, 172, 173], "resampl": [84, 89, 93, 173, 174, 407], "mean": 85, "2": [85, 117, 120, 121, 122, 123, 124, 125, 126, 131, 134, 137, 144, 147], "break": 86, "origin": 86, "relabel": 86, "min_siz": 86, "smith": 87, "niftimask": [89, 92, 174, 314], "raw": 89, "mni": 89, "templat": [89, 93, 176], "negat": 90, "math_img": [90, 293], "niftilabelsmask": [91, 174, 312], "find": [94, 159, 169], "thi": 94, "improv": 94, "advanc": [97, 98, 110, 112, 174], "tune": 98, "dummi": 98, "permut": 98, "lean": 98, "svc": 98, "discrimin": 98, "engin": 98, "beta": [100, 127, 132, 147, 154], "your": [100, 113, 162], "standard": 100, "lsa": 100, "aggreg": 100, "condit": 100, "lss": 100, "few": [100, 154], "trial": 100, "approach": [100, 148], "applic": [100, 169], "quick": 101, "saniti": 101, "check": [101, 420], "neurovault": [103, 107, 114], "term": 103, "reshap": 103, "compon": [103, 104, 153, 409], "figur": [103, 413], "multivari": [104, 178], "decomposit": [104, 178, 249, 250], "independ": 104, "motor": 105, "meta": 107, "stop": [107, 161], "success": 107, "minu": 107, "like": [107, 172], "protocol": 107, "combin": 107, "bibliographi": 111, "usag": [112, 174], "scale": [112, 419], "up": [112, 159, 162], "own": 113, "non": 113, "descript": [113, 161], "2d": [113, 173], "arrai": [113, 173], "unmask": [113, 174, 324], "inverse_transform": 113, "repositori": 114, "collect": 114, "filter": [114, 174], "neurosynth": 114, "changelog": [115, 116, 117, 118, 120, 121, 123, 147], "3": [118, 123, 127, 128, 145, 147], "4": [119, 124, 129, 130, 131, 147], "highlight": [119, 127, 128, 129, 132, 135, 138, 139, 140, 141, 142, 144, 147], "new": [120, 122, 123, 124, 125, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 147], "bug": [120, 123, 130, 147, 162], "api": [120, 147, 169, 408], "summari": [120, 147, 148, 149, 152, 153, 163, 166], "rc": [132, 147], "alpha": [132, 147, 161], "known": [133, 147], "issu": [133, 147, 170], "0rc": [135, 147], "0b0": [135, 147], "0a0": [135, 147], "7": [138, 139, 147], "8": [140, 141, 147], "9": [142, 143, 144, 145, 147], "dev": [145, 147], "page": [148, 149, 152, 153, 163, 166], "full": [148, 149, 154], "exercis": [148, 149, 174], "rest": [148, 149, 150], "link": [148, 420], "total": 148, "tangent": 148, "maxprob": 149, "state": 150, "movi": [151, 152], "watch": [151, 152], "code": [151, 154, 156, 159, 162, 170, 173, 419], "better": [152, 160, 174], "relat": [153, 160], "interpret": 153, "altern": 153, "2001": 154, "definit": [154, 174], "made": 154, "easi": 154, "good": 154, "choic": 154, "put": 154, "togeth": 154, "dimens": 154, "reduct": 154, "final": 154, "script": 154, "regress": [155, 418], "linear": [155, 406], "bag": 155, "sever": 155, "fast": 156, "ensembl": 156, "regular": 156, "robust": 156, "empir": 156, "increas": 156, "ani": 157, "mvpa": 158, "contain": 159, "inform": 159, "principl": [159, 161], "radiu": 159, "f_score": 159, "spm": 159, "stabil": 161, "execut": 161, "synthet": 161, "criteria": 161, "maximum": 161, "dualiti": 161, "gap": 161, "variat": 161, "norm": 161, "initi": 161, "modifi": 161, "criterion": 161, "algorithm": 161, "bound": 161, "grid": 161, "search": 161, "warm": 161, "restart": 161, "contribut": 162, "conduct": 162, "help": [162, 169], "discuss": 162, "idea": 162, "answer": 162, "question": 162, "review": 162, "pull": [162, 170], "request": [162, 170], "do": 162, "decid": 162, "goe": 162, "scope": 162, "who": 162, "decis": 162, "guidelin": 162, "pr": 162, "style": 162, "document": [162, 170], "environ": 162, "instal": [162, 420], "recommend": 162, "addit": 162, "case": [162, 173], "mainten": [162, 170], "hrf": 163, "primer": 164, "analyz": [165, 172], "correct": 166, "glossari": 167, "organ": 170, "close": 170, "polici": 170, "releas": [170, 420], "upload": 170, "them": 170, "pypi": 170, "deploi": 170, "post": 170, "input": 172, "name": 172, "match": [172, 173], "glob": 172, "user": [172, 421], "path": 172, "expans": 172, "open": [172, 174], "nilearn_data": 172, "where": 172, "store": 172, "format": 172, "shape": [172, 173], "memori": 172, "text": 172, "phenotyp": 172, "csv": 172, "panda": 172, "target": 173, "special": 173, "size": 173, "access": 173, "individu": 173, "oper": [173, 414], "masker": [174, 308, 309, 310, 311, 312, 313, 314, 315, 410], "concept": 174, "philosophi": 174, "custom": 174, "100": 174, "extra": 174, "cutoff": 174, "common": 174, "dtype": 174, "tempor": 174, "resiz": 174, "niftimapsmask": [174, 313], "multiniftimask": [174, 311], "multiniftilabelsmask": [174, 309], "multiniftimapsmask": [174, 310], "niftispheresmask": [174, 315], "connectivitymeasur": 179, "groupsparsecovari": 180, "groupsparsecovariancecv": 181, "cov_to_corr": 182, "group_sparse_covari": 183, "prec_to_parti": 184, "sym_matrix_to_vec": 185, "vec_to_sym_matrix": 186, "fetch_abide_pcp": 187, "fetch_adhd": 188, "fetch_atlas_a": 189, "fetch_atlas_allen_2011": 190, "fetch_atlas_basc_multiscale_2015": 191, "fetch_atlas_craddock_2012": 192, "fetch_atlas_destrieux_2009": 193, "fetch_atlas_difumo": 194, "fetch_atlas_harvard_oxford": 195, "fetch_atlas_juelich": 196, "fetch_atlas_msdl": 197, "fetch_atlas_pauli_2017": 198, "fetch_atlas_schaefer_2018": 199, "fetch_atlas_smith_2009": 200, "fetch_atlas_surf_destrieux": 201, "fetch_atlas_talairach": 202, "fetch_atlas_yeo_2011": 203, "fetch_bids_langloc_dataset": 204, "fetch_coords_dosenbach_2010": 205, "fetch_coords_power_2011": 206, "fetch_coords_seitzman_2018": 207, "fetch_development_fmri": 208, "fetch_ds000030_url": 209, "fetch_fiac_first_level": 210, "fetch_haxbi": 211, "fetch_icbm152_2009": 212, "fetch_icbm152_brain_gm_mask": 213, "fetch_language_localizer_demo_dataset": 214, "fetch_localizer_button_task": 215, "fetch_localizer_calculation_task": 216, "fetch_localizer_contrast": 217, "fetch_localizer_first_level": 218, "fetch_megatrawls_netmat": 219, "fetch_mixed_gambl": 220, "fetch_miyawaki2008": 221, "fetch_neurovault": 222, "fetch_neurovault_auditory_computation_task": 223, "fetch_neurovault_id": 224, "fetch_neurovault_motor_task": 225, "fetch_oasis_vbm": 226, "fetch_openneuro_dataset": 227, "fetch_openneuro_dataset_index": 228, "fetch_spm_auditori": 229, "fetch_spm_multimodal_fmri": 230, "fetch_surf_fsaverag": 231, "fetch_surf_nki_enhanc": 232, "get_data_dir": 233, "load_mni152_brain_mask": 234, "load_mni152_gm_mask": 235, "load_mni152_gm_templ": 236, "load_mni152_templ": 237, "load_mni152_wm_mask": 238, "load_mni152_wm_templ": 239, "patch_openneuro_dataset": 240, "select_from_index": 241, "decoderregressor": 243, "fremclassifi": 244, "fremregressor": 245, "spacenetclassifi": 247, "spacenetregressor": 248, "dictlearn": 250, "armodel": 251, "fcontrastresult": 253, "likelihoodmodelresult": 254, "olsmodel": 255, "regressionresult": 256, "simpleregressionresult": 257, "tcontrastresult": 258, "cluster_level_infer": 259, "compute_contrast": 260, "compute_fixed_effect": 261, "expression_to_contrast_vector": 262, "fdr_threshold": 263, "first_level": [264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 406], "check_design_matrix": 265, "compute_regressor": 266, "first_level_from_bid": 267, "glover_dispersion_deriv": 268, "glover_hrf": 269, "glover_time_deriv": 270, "make_first_level_design_matrix": 271, "mean_scal": 272, "run_glm": 273, "spm_dispersion_deriv": 274, "spm_hrf": 275, "spm_time_deriv": 276, "second_level": [277, 278, 279, 406], "secondlevelmodel": 277, "make_second_level_design_matrix": 278, "non_parametric_infer": 279, "threshold_stats_img": 280, "binarize_img": 281, "clean_img": 282, "concat_img": 283, "coord_transform": 284, "copy_img": 285, "crop_img": 286, "get_data": 287, "high_variance_confound": [288, 402], "index_img": 289, "iter_img": 290, "largest_connected_component_img": 291, "load_img": 292, "mean_img": 294, "new_img_lik": 295, "reorder_img": 296, "resample_img": 297, "resample_to_img": 298, "smooth_img": 299, "swap_img_hemispher": 300, "threshold_img": 301, "get_bids_fil": 302, "parse_bids_filenam": 303, "save_glm_to_bid": 304, "load_confound": 305, "load_confounds_strategi": 306, "fsl": [307, 409], "get_design_from_fslmat": 307, "basemask": 308, "apply_mask": 316, "compute_background_mask": 317, "compute_brain_mask": 318, "compute_epi_mask": 319, "compute_multi_background_mask": 320, "compute_multi_brain_mask": 321, "compute_multi_epi_mask": 322, "intersect_mask": 323, "mass_univari": [325, 412], "permuted_ol": 325, "baseax": 326, "baseslic": 327, "cutax": 328, "glassbrainax": 329, "lprojector": 330, "lrprojector": 331, "lyrprojector": 332, "lyrzprojector": 333, "lzrprojector": 334, "lzryprojector": 335, "mosaicslic": 336, "orthoprojector": 337, "orthoslic": 338, "plotlysurfacefigur": 339, "rprojector": 340, "tiledslic": 341, "xprojector": 342, "xslicer": 343, "xzprojector": 344, "xzslicer": 345, "yprojector": 346, "yslicer": 347, "yxprojector": 348, "yxslicer": 349, "yzprojector": 350, "yzslicer": 351, "zprojector": 352, "zslicer": 353, "get_projector": 354, "get_slic": 355, "find_cut_slic": 356, "find_parcellation_cut_coord": 357, "find_probabilistic_atlas_cut_coord": 358, "find_xyz_cut_coord": 359, "plot_carpet": 361, "plot_connectom": 362, "plot_contrast_matrix": 363, "plot_design_matrix": 364, "plot_ev": 366, "plot_img": 368, "plot_img_comparison": 369, "plot_img_on_surf": 370, "plot_mark": 371, "plot_matrix": 372, "plot_surf": 376, "plot_surf_contour": 377, "plot_surf_roi": 378, "plot_surf_stat_map": [379, 419], "view_connectom": 381, "view_img_on_surf": [383, 419], "view_mark": 384, "view_surf": [385, 419], "hierarchicalkmean": 386, "regionextractor": 389, "connected_label_region": 390, "connected_region": 391, "img_to_signals_label": 392, "img_to_signals_map": 393, "recursive_neighbor_agglomer": 394, "signals_to_img_label": 395, "signals_to_img_map": 396, "htmlreport": 397, "get_clusters_t": 398, "make_glm_report": 399, "butterworth": 400, "clean": 401, "load_surf_data": 403, "load_surf_mesh": 404, "process": 407, "util": [407, 411, 418], "migrat": 418, "nistat": 418, "avail": 419, "overlai": 419, "edg": 419, "quickstart": 420, "latest": 420, "version": 420, "offic": 420, "hour": 420, "depend": 420, "guid": 421, "tabl": 421, "content": 421}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"Team": [[0, "team"]], "Core developers": [[0, "core-developers"]], "Other contributors": [[0, "other-contributors"]], "Funding": [[0, "funding"]], "Citing nilearn": [[0, "citing-nilearn"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Basic tutorials": [[1, "basic-tutorials"], [110, "basic-tutorials"]], "3D and 4D niimgs: handling and visualizing": [[2, "d-and-4d-niimgs-handling-and-visualizing"]], "Downloading tutorial datasets from Internet": [[2, "downloading-tutorial-datasets-from-internet"]], "Visualizing a 3D file": [[2, "visualizing-a-3d-file"]], "Visualizing one volume in a 4D file": [[2, "visualizing-one-volume-in-a-4d-file"]], "Looping on all volumes in a 4D file": [[2, "looping-on-all-volumes-in-a-4d-file"]], "Looping through selected volumes in a 4D file": [[2, "looping-through-selected-volumes-in-a-4d-file"]], "A introduction tutorial to fMRI decoding": [[3, "a-introduction-tutorial-to-fmri-decoding"]], "Retrieve and load the fMRI data from the Haxby study": [[3, "retrieve-and-load-the-fmri-data-from-the-haxby-study"], [98, "retrieve-and-load-the-fmri-data-from-the-haxby-study"]], "First download the data": [[3, "first-download-the-data"], [98, "first-download-the-data"]], "Visualizing the fmri volume": [[3, "visualizing-the-fmri-volume"]], "Feature extraction: from fMRI volumes to a data matrix": [[3, "feature-extraction-from-fmri-volumes-to-a-data-matrix"]], "Load the behavioral labels": [[3, "load-the-behavioral-labels"]], "Restrict the analysis to cats and faces": [[3, "restrict-the-analysis-to-cats-and-faces"]], "Decoding with Support Vector Machine": [[3, "decoding-with-support-vector-machine"]], "Measuring prediction scores using cross-validation": [[3, "measuring-prediction-scores-using-cross-validation"]], "Manually leaving out data": [[3, "manually-leaving-out-data"]], "Implementing a KFold loop": [[3, "implementing-a-kfold-loop"]], "Cross-validation with the decoder": [[3, "cross-validation-with-the-decoder"]], "Inspecting the model weights": [[3, "inspecting-the-model-weights"]], "Turning the weights into a nifti image": [[3, "turning-the-weights-into-a-nifti-image"]], "Plotting the SVM weights": [[3, "plotting-the-svm-weights"]], "What is the chance level accuracy?": [[3, "what-is-the-chance-level-accuracy"]], "Further reading": [[3, "further-reading"]], "Basic nilearn example: manipulating and looking at data": [[4, "basic-nilearn-example-manipulating-and-looking-at-data"]], "A first step: looking at our data": [[4, "a-first-step-looking-at-our-data"]], "Simple image manipulation: smoothing": [[4, "simple-image-manipulation-smoothing"]], "Saving results to a file": [[4, "saving-results-to-a-file"]], "Basic numerics and plotting with Python": [[5, "basic-numerics-and-plotting-with-python"]], "Intro to GLM Analysis: a single-session, single-subject fMRI dataset": [[6, "intro-to-glm-analysis-a-single-session-single-subject-fmri-dataset"]], "The data": [[6, "the-data"]], "Retrieving the data": [[6, "retrieving-the-data"], [23, "retrieving-the-data"], [66, "retrieving-the-data"]], "Specifying the experimental paradigm": [[6, "specifying-the-experimental-paradigm"]], "Performing the GLM analysis": [[6, "performing-the-glm-analysis"]], "Detecting voxels with significant effects": [[6, "detecting-voxels-with-significant-effects"]], "Plot thresholded z scores map": [[6, "plot-thresholded-z-scores-map"]], "Performing an F-test": [[6, "performing-an-f-test"]], "Computation times": [[7, "computation-times"], [27, "computation-times"], [45, "computation-times"], [59, "computation-times"], [73, "computation-times"], [82, "computation-times"], [96, "computation-times"], [109, "computation-times"]], "Visualization of brain images": [[8, "visualization-of-brain-images"], [110, "visualization-of-brain-images"]], "Making a surface plot of a 3D statistical map": [[9, "making-a-surface-plot-of-a-3d-statistical-map"]], "Get a statistical map": [[9, "get-a-statistical-map"]], "Get a cortical mesh": [[9, "get-a-cortical-mesh"]], "Sample the 3D data around each node of the mesh": [[9, "sample-the-3d-data-around-each-node-of-the-mesh"]], "Plot the result": [[9, "plot-the-result"]], "Interactive plotting with Plotly": [[9, "interactive-plotting-with-plotly"]], "Plot 3D image for comparison": [[9, "plot-3d-image-for-comparison"]], "Use an atlas and choose regions to outline": [[9, "use-an-atlas-and-choose-regions-to-outline"]], "Display outlines of the regions of interest on top of a statistical map": [[9, "display-outlines-of-the-regions-of-interest-on-top-of-a-statistical-map"]], "Plot with higher-resolution mesh": [[9, "plot-with-higher-resolution-mesh"]], "Plot multiple views of the 3D volume on a surface": [[9, "plot-multiple-views-of-the-3d-volume-on-a-surface"]], "3D visualization in a web browser": [[9, "d-visualization-in-a-web-browser"], [22, "d-visualization-in-a-web-browser"], [52, "d-visualization-in-a-web-browser"], [54, "d-visualization-in-a-web-browser"], [58, "d-visualization-in-a-web-browser"]], "Impact of plot parameters on visualization": [[9, "impact-of-plot-parameters-on-visualization"]], "Basic Atlas plotting": [[10, "basic-atlas-plotting"]], "Retrieving the atlas data": [[10, "retrieving-the-atlas-data"]], "Visualizing the Harvard-Oxford atlas": [[10, "visualizing-the-harvard-oxford-atlas"]], "Visualizing the Juelich atlas": [[10, "visualizing-the-juelich-atlas"]], "Visualizing the Harvard-Oxford atlas with contours": [[10, "visualizing-the-harvard-oxford-atlas-with-contours"]], "Visualizing the Juelich atlas with contours": [[10, "visualizing-the-juelich-atlas-with-contours"]], "Visualizing global patterns with a carpet plot": [[11, "visualizing-global-patterns-with-a-carpet-plot"]], "Fetching data from ADHD dataset": [[11, "fetching-data-from-adhd-dataset"]], "Deriving a mask": [[11, "deriving-a-mask"]], "Visualizing global patterns over time": [[11, "visualizing-global-patterns-over-time"]], "Deriving a label-based mask": [[11, "deriving-a-label-based-mask"]], "Visualizing global patterns, separated by tissue type": [[11, "visualizing-global-patterns-separated-by-tissue-type"]], "Matplotlib colormaps in Nilearn": [[12, "matplotlib-colormaps-in-nilearn"]], "Plot color maps": [[12, "plot-color-maps"]], "Plot matplotlib color maps": [[12, "plot-matplotlib-color-maps"]], "Glass brain plotting in nilearn": [[13, "glass-brain-plotting-in-nilearn"]], "Retrieve data from Internet": [[13, "retrieve-data-from-internet"]], "Glass brain plotting: whole brain sagittal cuts": [[13, "glass-brain-plotting-whole-brain-sagittal-cuts"]], "Glass brain plotting: black background": [[13, "glass-brain-plotting-black-background"]], "Glass brain plotting: Hemispheric sagittal cuts": [[13, "glass-brain-plotting-hemispheric-sagittal-cuts"]], "Glass brain plotting in nilearn (all options)": [[14, "glass-brain-plotting-in-nilearn-all-options"]], "Retrieve the data": [[14, "retrieve-the-data"]], "Demo glass brain plotting": [[14, "demo-glass-brain-plotting"]], "Different projections for the left and right hemispheres": [[14, "different-projections-for-the-left-and-right-hemispheres"]], "Demo glass brain plotting with contours and with fillings": [[14, "demo-glass-brain-plotting-with-contours-and-with-fillings"]], "Display contour projections in both hemispheres": [[14, "display-contour-projections-in-both-hemispheres"]], "More plotting tools from nilearn": [[15, "more-plotting-tools-from-nilearn"]], "First, we retrieve data from nilearn provided (general-purpose) datasets": [[15, "first-we-retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Visualizing in - \u2018sagittal\u2019, \u2018coronal\u2019 and \u2018axial\u2019 with given coordinates": [[15, "visualizing-in-sagittal-coronal-and-axial-with-given-coordinates"]], "Visualizing in - single view \u2018axial\u2019 with number of cuts=5": [[15, "visualizing-in-single-view-axial-with-number-of-cuts-5"]], "Visualizing in - single view \u2018sagittal\u2019 with only two slices": [[15, "visualizing-in-single-view-sagittal-with-only-two-slices"]], "Visualizing in - \u2018coronal\u2019 view with single cut": [[15, "visualizing-in-coronal-view-with-single-cut"]], "Visualizing without a colorbar on the right side": [[15, "visualizing-without-a-colorbar-on-the-right-side"]], "Visualize in - two views \u2018sagittal\u2019 and \u2018axial\u2019 with given coordinates": [[15, "visualize-in-two-views-sagittal-and-axial-with-given-coordinates"]], "Changing the views to \u2018coronal\u2019, \u2018sagittal\u2019 views with coordinates": [[15, "changing-the-views-to-coronal-sagittal-views-with-coordinates"]], "Now, views are changed to \u2018coronal\u2019 and \u2018axial\u2019 views with coordinates": [[15, "now-views-are-changed-to-coronal-and-axial-views-with-coordinates"]], "Visualizing three views in 2x2 fashion": [[15, "visualizing-three-views-in-2x2-fashion"]], "Visualizing three views along multiple rows and columns": [[15, "visualizing-three-views-along-multiple-rows-and-columns"]], "Now, changing the number of slices along columns": [[15, "now-changing-the-number-of-slices-along-columns"]], "Now, another way of limiting the number of slices along rows and columns": [[15, "now-another-way-of-limiting-the-number-of-slices-along-rows-and-columns"]], "Demonstrating various display features": [[15, "demonstrating-various-display-features"]], "Showing how to use add_edges": [[15, "showing-how-to-use-add-edges"]], "How to use add_contours": [[15, "how-to-use-add-contours"]], "Plotting seeds using add_markers": [[15, "plotting-seeds-using-add-markers"]], "Annotating plots": [[15, "annotating-plots"]], "Saving plots to file": [[15, "saving-plots-to-file"]], "Plotting tools in nilearn": [[16, "plotting-tools-in-nilearn"]], "Retrieve data from nilearn provided (general-purpose) datasets": [[16, "retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Plotting statistical maps with function plot_stat_map": [[16, "plotting-statistical-maps-with-function-plot-stat-map"]], "Making interactive visualizations with function view_img": [[16, "making-interactive-visualizations-with-function-view-img"]], "Plotting statistical maps in a glass brain with function plot_glass_brain": [[16, "plotting-statistical-maps-in-a-glass-brain-with-function-plot-glass-brain"]], "Plotting anatomical images with function plot_anat": [[16, "plotting-anatomical-images-with-function-plot-anat"]], "Plotting ROIs (here the mask) with function plot_roi": [[16, "plotting-rois-here-the-mask-with-function-plot-roi"]], "Plotting EPI image with function plot_epi": [[16, "plotting-epi-image-with-function-plot-epi"]], "Controlling the contrast of the background when plotting": [[17, "controlling-the-contrast-of-the-background-when-plotting"]], "Retrieve the data: the localizer dataset with contrast maps": [[17, "retrieve-the-data-the-localizer-dataset-with-contrast-maps"]], "Plotting with enhancement of background image with dim=-.5": [[17, "plotting-with-enhancement-of-background-image-with-dim-5"]], "Plotting with no change of contrast in background image with dim=0": [[17, "plotting-with-no-change-of-contrast-in-background-image-with-dim-0"]], "Plotting with decrease of contrast in background image with dim=.5": [[17, "plotting-with-decrease-of-contrast-in-background-image-with-dim-5"]], "Plotting with more decrease in contrast with dim=1": [[17, "plotting-with-more-decrease-in-contrast-with-dim-1"]], "Plot Haxby masks": [[18, "plot-haxby-masks"]], "Visualizing multiscale functional brain parcellations": [[19, "visualizing-multiscale-functional-brain-parcellations"]], "Retrieving multiscale group brain parcellations": [[19, "retrieving-multiscale-group-brain-parcellations"]], "Visualizing brain parcellations": [[19, "visualizing-brain-parcellations"]], "Visualizing a probabilistic atlas: the default mode in the MSDL atlas": [[20, "visualizing-a-probabilistic-atlas-the-default-mode-in-the-msdl-atlas"]], "Fetching probabilistic atlas - MSDL atlas": [[20, "fetching-probabilistic-atlas-msdl-atlas"]], "Visualizing a probabilistic atlas with plot_stat_map and add_overlay object": [[20, "visualizing-a-probabilistic-atlas-with-plot-stat-map-and-add-overlay-object"]], "Visualizing a probabilistic atlas with plot_prob_atlas": [[20, "visualizing-a-probabilistic-atlas-with-plot-prob-atlas"]], "Visualizing 4D probabilistic atlas maps": [[21, "visualizing-4d-probabilistic-atlas-maps"]], "Loading and plotting of a cortical surface atlas": [[22, "loading-and-plotting-of-a-cortical-surface-atlas"]], "References": [[22, "references"], [23, "references"], [49, "references"], [49, "id1"], [56, "references"], [58, "references"], [100, "references"], [102, "references"], [114, "references"], [148, null], [149, null], [149, null], [152, null], [153, null], [153, null], [155, "references"], [156, "references"], [159, "references"], [160, "references"]], "Data fetcher": [[22, "data-fetcher"]], "Visualization": [[22, "visualization"], [25, "visualization"], [26, "visualization"], [30, "visualization"], [36, "visualization"], [37, "visualization"], [42, "visualization"], [159, "visualization"]], "Seed-based connectivity on the surface": [[23, "seed-based-connectivity-on-the-surface"]], "Extracting the seed time series": [[23, "extracting-the-seed-time-series"]], "Calculating seed-based functional connectivity": [[23, "calculating-seed-based-functional-connectivity"]], "Technical point: Illustration of the volume to surface sampling schemes": [[24, "technical-point-illustration-of-the-volume-to-surface-sampling-schemes"]], "Build a mesh (of a cylinder)": [[24, "build-a-mesh-of-a-cylinder"]], "Get the locations from which vol_to_surf would draw its samples": [[24, "get-the-locations-from-which-vol-to-surf-would-draw-its-samples"]], "Plot the mesh and the sample locations": [[24, "plot-the-mesh-and-the-sample-locations"]], "Adjust the sample locations": [[24, "adjust-the-sample-locations"]], "NeuroImaging volumes visualization": [[25, "neuroimaging-volumes-visualization"]], "Fetch data": [[25, "fetch-data"]], "Extracting a brain mask": [[25, "extracting-a-brain-mask"], [173, "extracting-a-brain-mask"]], "Applying the mask to extract the corresponding time series": [[25, "applying-the-mask-to-extract-the-corresponding-time-series"]], "Visualizing Megatrawls Network Matrices from Human Connectome Project": [[26, "visualizing-megatrawls-network-matrices-from-human-connectome-project"]], "Fetching the Megatrawls Network matrices": [[26, "fetching-the-megatrawls-network-matrices"]], "Decoding and predicting from brain images": [[28, "decoding-and-predicting-from-brain-images"], [110, "decoding-and-predicting-from-brain-images"]], "Decoding with ANOVA + SVM: face vs house in the Haxby dataset": [[29, "decoding-with-anova-svm-face-vs-house-in-the-haxby-dataset"]], "Retrieve the files of the Haxby dataset": [[29, "retrieve-the-files-of-the-haxby-dataset"]], "Load the behavioral data": [[29, "load-the-behavioral-data"], [33, "load-the-behavioral-data"]], "ANOVA pipeline with nilearn.decoding.Decoder object": [[29, "anova-pipeline-with-nilearn-decoding-decoder-object"], [34, "anova-pipeline-with-nilearn-decoding-decoder-object"]], "Fit the decoder and predict": [[29, "fit-the-decoder-and-predict"]], "Obtain prediction scores via cross validation": [[29, "obtain-prediction-scores-via-cross-validation"]], "Visualize the results": [[29, "visualize-the-results"], [81, "visualize-the-results"]], "Different classifiers in decoding the Haxby dataset": [[30, "different-classifiers-in-decoding-the-haxby-dataset"]], "Loading the data": [[30, "loading-the-data"], [40, "loading-the-data"], [94, "loading-the-data"]], "Training the decoder": [[30, "training-the-decoder"]], "Visualizing the face vs house map": [[30, "visualizing-the-face-vs-house-map"]], "Decoding with FREM: face vs house object recognition": [[31, "decoding-with-frem-face-vs-house-object-recognition"]], "Load the Haxby dataset": [[31, "load-the-haxby-dataset"], [34, "load-the-haxby-dataset"]], "Fit FREM": [[31, "fit-frem"], [39, "fit-frem"]], "Visualization of FREM weights": [[31, "visualization-of-frem-weights"]], "ROI-based decoding analysis in Haxby et al. dataset": [[32, "roi-based-decoding-analysis-in-haxby-et-al-dataset"]], "Load and prepare the data": [[32, "load-and-prepare-the-data"]], "Decoding on the different masks": [[32, "decoding-on-the-different-masks"]], "We make a simple bar plot to summarize the results": [[32, "we-make-a-simple-bar-plot-to-summarize-the-results"]], "Decoding of a dataset after GLM fit for signal extraction": [[33, "decoding-of-a-dataset-after-glm-fit-for-signal-extraction"]], "Fetch example Haxby dataset": [[33, "fetch-example-haxby-dataset"]], "Build a proper event structure for each session": [[33, "build-a-proper-event-structure-for-each-session"]], "Instantiate and run FirstLevelModel": [[33, "instantiate-and-run-firstlevelmodel"]], "Run the glm on data from each session": [[33, "run-the-glm-on-data-from-each-session"]], "Generating a report": [[33, "generating-a-report"], [61, "generating-a-report"], [62, "generating-a-report"], [64, "generating-a-report"], [75, "generating-a-report"]], "Build the decoding pipeline": [[33, "build-the-decoding-pipeline"]], "Setting a parameter by cross-validation": [[34, "setting-a-parameter-by-cross-validation"]], "Fit the Decoder and predict the responses": [[34, "fit-the-decoder-and-predict-the-responses"]], "Compute prediction scores with different values of screening percentile": [[34, "compute-prediction-scores-with-different-values-of-screening-percentile"]], "Nested cross-validation": [[34, "nested-cross-validation"]], "Plot the prediction scores using matplotlib": [[34, "plot-the-prediction-scores-using-matplotlib"]], "The haxby dataset: different multi-class strategies": [[35, "the-haxby-dataset-different-multi-class-strategies"]], "Load the Haxby data dataset": [[35, "load-the-haxby-data-dataset"]], "Prepare the fMRI data": [[35, "prepare-the-fmri-data"]], "Build the decoders, using scikit-learn": [[35, "build-the-decoders-using-scikit-learn"]], "Now we compute cross-validation scores": [[35, "now-we-compute-cross-validation-scores"]], "Plot barplots of the prediction scores": [[35, "plot-barplots-of-the-prediction-scores"]], "Plot a confusion matrix": [[35, "plot-a-confusion-matrix"]], "Searchlight analysis of face vs house recognition": [[36, "searchlight-analysis-of-face-vs-house-recognition"]], "Load Haxby dataset": [[36, "load-haxby-dataset"], [37, "load-haxby-dataset"]], "Restrict to faces and houses": [[36, "restrict-to-faces-and-houses"], [37, "restrict-to-faces-and-houses"]], "Prepare masks": [[36, "prepare-masks"]], "Searchlight computation": [[36, "searchlight-computation"], [37, "searchlight-computation"]], "F-scores computation": [[36, "f-scores-computation"]], "Cortical surface-based searchlight decoding": [[37, "cortical-surface-based-searchlight-decoding"]], "Surface bold response": [[37, "surface-bold-response"]], "Show stimuli of Haxby et al. dataset": [[38, "show-stimuli-of-haxby-et-al-dataset"]], "FREM on Jimura et al \u201cmixed gambles\u201d dataset.": [[39, "frem-on-jimura-et-al-mixed-gambles-dataset"]], "Load the data from the Jimura mixed-gamble experiment": [[39, "load-the-data-from-the-jimura-mixed-gamble-experiment"]], "Example use of TV-L1 SpaceNet": [[39, "example-use-of-tv-l1-spacenet"]], "Encoding models for visual stimuli from Miyawaki et al. 2008": [[40, "encoding-models-for-visual-stimuli-from-miyawaki-et-al-2008"]], "Building the encoding models": [[40, "building-the-encoding-models"]], "Mapping the encoding scores on the brain": [[40, "mapping-the-encoding-scores-on-the-brain"]], "Estimating receptive fields": [[40, "estimating-receptive-fields"]], "Reconstruction of visual stimuli from Miyawaki et al. 2008": [[41, "reconstruction-of-visual-stimuli-from-miyawaki-et-al-2008"]], "First we load the Miyawaki dataset": [[41, "first-we-load-the-miyawaki-dataset"]], "Then we prepare and mask the data": [[41, "then-we-prepare-and-mask-the-data"]], "We define our prediction function": [[41, "we-define-our-prediction-function"]], "Here we run the prediction: the decoding itself": [[41, "here-we-run-the-prediction-the-decoding-itself"]], "Let us quantify our prediction error": [[41, "let-us-quantify-our-prediction-error"]], "Voxel-Based Morphometry on Oasis dataset": [[42, "voxel-based-morphometry-on-oasis-dataset"]], "Predictive modeling analysis: VBM bio-markers of aging?": [[42, "predictive-modeling-analysis-vbm-bio-markers-of-aging"]], "Brain mapping with mass univariate": [[42, "brain-mapping-with-mass-univariate"]], "Load Oasis dataset": [[42, "load-oasis-dataset"], [75, "load-oasis-dataset"]], "Preprocess data": [[42, "preprocess-data"]], "Visualize the quality of predictions": [[42, "visualize-the-quality-of-predictions"]], "Inference with massively univariate model": [[42, "inference-with-massively-univariate-model"]], "Voxel-Based Morphometry on Oasis dataset with Space-Net prior": [[43, "voxel-based-morphometry-on-oasis-dataset-with-space-net-prior"]], "Load the Oasis VBM dataset": [[43, "load-the-oasis-vbm-dataset"]], "Fit the SpaceNet and predict with it": [[43, "fit-the-spacenet-and-predict-with-it"]], "Visualize the decoding maps and quality of predictions": [[43, "visualize-the-decoding-maps-and-quality-of-predictions"]], "Example of pattern recognition on simulated data": [[44, "example-of-pattern-recognition-on-simulated-data"]], "A function to generate data": [[44, "a-function-to-generate-data"]], "A simple function to plot slices": [[44, "a-simple-function-to-plot-slices"]], "Create data": [[44, "create-data"]], "Run different estimators": [[44, "run-different-estimators"]], "An exercice to go further": [[44, "an-exercice-to-go-further"]], "Functional connectivity": [[46, "functional-connectivity"], [110, "functional-connectivity"]], "Comparing connectomes on different reference atlases": [[47, "comparing-connectomes-on-different-reference-atlases"]], "Load atlases": [[47, "load-atlases"]], "Load functional data": [[47, "load-functional-data"]], "Extract coordinates on Yeo atlas - parcellations": [[47, "extract-coordinates-on-yeo-atlas-parcellations"]], "Plot a directed connectome - asymmetric connectivity measure": [[47, "plot-a-directed-connectome-asymmetric-connectivity-measure"]], "Load probabilistic atlases - extracting coordinates on brain maps": [[47, "load-probabilistic-atlases-extracting-coordinates-on-brain-maps"]], "Iterate over fetched atlases to extract coordinates - probabilistic": [[47, "iterate-over-fetched-atlases-to-extract-coordinates-probabilistic"]], "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning": [[48, "deriving-spatial-maps-from-group-fmri-data-using-ica-and-dictionary-learning"]], "Load brain development fmri dataset": [[48, "load-brain-development-fmri-dataset"]], "Apply CanICA on the data": [[48, "apply-canica-on-the-data"]], "Compare CanICA to dictionary learning": [[48, "compare-canica-to-dictionary-learning"]], "Clustering methods to learn a brain parcellation from fMRI": [[49, "clustering-methods-to-learn-a-brain-parcellation-from-fmri"]], "Download a brain development fmri dataset and turn it to a data matrix": [[49, "download-a-brain-development-fmri-dataset-and-turn-it-to-a-data-matrix"]], "Brain parcellations with Ward Clustering": [[49, "brain-parcellations-with-ward-clustering"]], "Visualize: Brain parcellations (Ward)": [[49, "visualize-brain-parcellations-ward"]], "Compressed representation of Ward clustering": [[49, "compressed-representation-of-ward-clustering"]], "Brain parcellations with KMeans Clustering": [[49, "brain-parcellations-with-kmeans-clustering"]], "Visualize: Brain parcellations (KMeans)": [[49, "visualize-brain-parcellations-kmeans"]], "Brain parcellations with Hierarchical KMeans Clustering": [[49, "brain-parcellations-with-hierarchical-kmeans-clustering"]], "Visualize: Brain parcellations (Hierarchical KMeans)": [[49, "visualize-brain-parcellations-hierarchical-kmeans"]], "Compare Hierarchical Kmeans clusters with those from Kmeans": [[49, "compare-hierarchical-kmeans-clusters-with-those-from-kmeans"]], "Brain parcellations with ReNA Clustering": [[49, "brain-parcellations-with-rena-clustering"]], "Visualize: Brain parcellations (ReNA)": [[49, "visualize-brain-parcellations-rena"]], "Compressed representation of ReNA clustering": [[49, "compressed-representation-of-rena-clustering"]], "Regions extraction using dictionary learning and functional connectomes": [[50, "regions-extraction-using-dictionary-learning-and-functional-connectomes"]], "Fetch brain development functional datasets": [[50, "fetch-brain-development-functional-datasets"]], "Extract functional networks with Dictionary learning": [[50, "extract-functional-networks-with-dictionary-learning"]], "Extract regions from networks": [[50, "extract-regions-from-networks"]], "Compute correlation coefficients": [[50, "compute-correlation-coefficients"]], "Plot resulting connectomes": [[50, "plot-resulting-connectomes"]], "Plot regions extracted for only one specific network": [[50, "plot-regions-extracted-for-only-one-specific-network"]], "Classification of age groups using functional connectivity": [[51, "classification-of-age-groups-using-functional-connectivity"]], "Load brain development fMRI dataset and MSDL atlas": [[51, "load-brain-development-fmri-dataset-and-msdl-atlas"], [99, "load-brain-development-fmri-dataset-and-msdl-atlas"]], "Region signals extraction": [[51, "region-signals-extraction"]], "ROI-to-ROI correlations of children": [[51, "roi-to-roi-correlations-of-children"]], "Studying partial correlations": [[51, "studying-partial-correlations"]], "Extract subjects variabilities around a group connectivity": [[51, "extract-subjects-variabilities-around-a-group-connectivity"]], "What kind of connectivity is most powerful for classification?": [[51, "what-kind-of-connectivity-is-most-powerful-for-classification"], [99, "what-kind-of-connectivity-is-most-powerful-for-classification"]], "Computing a connectome with sparse inverse covariance": [[52, "computing-a-connectome-with-sparse-inverse-covariance"]], "Retrieve the atlas and the data": [[52, "retrieve-the-atlas-and-the-data"], [54, "retrieve-the-atlas-and-the-data"], [56, "retrieve-the-atlas-and-the-data"]], "Extract time series": [[52, "extract-time-series"]], "Compute the sparse inverse covariance": [[52, "compute-the-sparse-inverse-covariance"]], "Display the connectome matrix": [[52, "display-the-connectome-matrix"]], "And now display the corresponding graph": [[52, "and-now-display-the-corresponding-graph"], [52, "id1"], [54, "and-now-display-the-corresponding-graph"]], "Display the sparse inverse covariance": [[52, "display-the-sparse-inverse-covariance"]], "Group Sparse inverse covariance for multi-subject connectome": [[53, "group-sparse-inverse-covariance-for-multi-subject-connectome"]], "Fetching datasets": [[53, "fetching-datasets"]], "Extracting region signals": [[53, "extracting-region-signals"]], "Computing group-sparse precision matrices": [[53, "computing-group-sparse-precision-matrices"]], "Displaying results": [[53, "displaying-results"]], "Extracting signals of a probabilistic atlas of functional regions": [[54, "extracting-signals-of-a-probabilistic-atlas-of-functional-regions"]], "Extract the time series": [[54, "extract-the-time-series"]], "Build and display a correlation matrix": [[54, "build-and-display-a-correlation-matrix"]], "Producing single subject maps of seed-to-voxel correlation": [[55, "producing-single-subject-maps-of-seed-to-voxel-correlation"]], "Getting the data": [[55, "getting-the-data"]], "Time series extraction": [[55, "time-series-extraction"]], "Performing the seed-to-voxel correlation analysis": [[55, "performing-the-seed-to-voxel-correlation-analysis"]], "Plotting the seed-to-voxel correlation map": [[55, "plotting-the-seed-to-voxel-correlation-map"]], "Fisher-z transformation and save nifti": [[55, "fisher-z-transformation-and-save-nifti"]], "Extracting signals from a brain parcellation": [[56, "extracting-signals-from-a-brain-parcellation"]], "Extract signals on a parcellation defined by labels": [[56, "extract-signals-on-a-parcellation-defined-by-labels"]], "Compute and display a correlation matrix": [[56, "compute-and-display-a-correlation-matrix"]], "Extract signals and compute a connectivity matrix without confounds removal": [[56, "extract-signals-and-compute-a-connectivity-matrix-without-confounds-removal"]], "Load confounds from file using a flexible strategy with fmriprep interface": [[56, "load-confounds-from-file-using-a-flexible-strategy-with-fmriprep-interface"]], "Motion-based scrubbing": [[56, "motion-based-scrubbing"]], "The impact of global signal removal": [[56, "the-impact-of-global-signal-removal"]], "Using predefined strategies": [[56, "using-predefined-strategies"]], "Connectivity structure estimation on simulated data": [[57, "connectivity-structure-estimation-on-simulated-data"]], "Extract signals on spheres and plot a connectome": [[58, "extract-signals-on-spheres-and-plot-a-connectome"]], "Retrieve the brain development fmri dataset": [[58, "retrieve-the-brain-development-fmri-dataset"]], "Coordinates of Default Mode Network": [[58, "coordinates-of-default-mode-network"]], "Extracts signal from sphere around DMN seeds": [[58, "extracts-signal-from-sphere-around-dmn-seeds"]], "Display time series": [[58, "display-time-series"]], "Compute partial correlation matrix": [[58, "compute-partial-correlation-matrix"]], "Display connectome": [[58, "display-connectome"]], "Extract signals on spheres from an atlas": [[58, "extract-signals-on-spheres-from-an-atlas"]], "Compute within spheres averaged time-series": [[58, "compute-within-spheres-averaged-time-series"]], "Estimate correlations": [[58, "estimate-correlations"]], "Plot matrix, graph, and strength": [[58, "plot-matrix-graph-and-strength"]], "Connectome extracted from Dosenbach\u2019s atlas": [[58, "connectome-extracted-from-dosenbach-s-atlas"]], "See also": [[58, "see-also"]], "GLM: First level analysis": [[60, "glm-first-level-analysis"], [110, "glm-first-level-analysis"]], "Default Mode Network extraction of ADHD dataset": [[61, "default-mode-network-extraction-of-adhd-dataset"]], "Prepare data and analysis parameters": [[61, "prepare-data-and-analysis-parameters"], [64, "prepare-data-and-analysis-parameters"], [67, "prepare-data-and-analysis-parameters"], [69, "prepare-data-and-analysis-parameters"], [100, "prepare-data-and-analysis-parameters"]], "Estimate contrasts": [[61, "estimate-contrasts"], [69, "estimate-contrasts"]], "Perform first level analysis": [[61, "perform-first-level-analysis"], [69, "perform-first-level-analysis"]], "First level analysis of a complete BIDS dataset from openneuro": [[62, "first-level-analysis-of-a-complete-bids-dataset-from-openneuro"]], "Fetch openneuro BIDS dataset": [[62, "fetch-openneuro-bids-dataset"]], "Obtain FirstLevelModel objects automatically and fit arguments": [[62, "obtain-firstlevelmodel-objects-automatically-and-fit-arguments"]], "First level model estimation (one subject)": [[62, "first-level-model-estimation-one-subject"]], "Simple statistical report of thresholded contrast": [[62, "simple-statistical-report-of-thresholded-contrast"]], "Saving model outputs to disk": [[62, "saving-model-outputs-to-disk"]], "Examples of design matrices": [[63, "examples-of-design-matrices"]], "Define parameters": [[63, "define-parameters"]], "Create design matrices": [[63, "create-design-matrices"]], "Simple example of two-session fMRI model fitting": [[64, "simple-example-of-two-session-fmri-model-fitting"]], "GLM estimation": [[64, "glm-estimation"], [67, "glm-estimation"]], "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model": [[65, "analysis-of-an-fmri-dataset-with-a-finite-impule-response-fir-model"]], "Understanding parameters of the first-level model": [[66, "understanding-parameters-of-the-first-level-model"]], "Running a basic model": [[66, "running-a-basic-model"]], "A first contrast estimation and plotting": [[66, "a-first-contrast-estimation-and-plotting"]], "Changing the drift model": [[66, "changing-the-drift-model"]], "Changing the hemodynamic response model": [[66, "changing-the-hemodynamic-response-model"]], "Adding a time derivative to the design": [[66, "adding-a-time-derivative-to-the-design"]], "The noise model: ar(1), ols, or higher order ar?": [[66, "the-noise-model-ar-1-ols-or-higher-order-ar"]], "Removing confounds": [[66, "removing-confounds"]], "Volume censoring": [[66, "volume-censoring"]], "Smoothing": [[66, "smoothing"], [174, "smoothing"]], "Masking": [[66, "masking"], [159, "masking"]], "Conclusion": [[66, "conclusion"]], "Example of explicit fixed effects fMRI model fitting": [[67, "example-of-explicit-fixed-effects-fmri-model-fitting"]], "Example of MRI response functions": [[68, "example-of-mri-response-functions"]], "Define stimulus parameters and response models": [[68, "define-stimulus-parameters-and-response-models"]], "Sample and plot response functions": [[68, "sample-and-plot-response-functions"]], "Example of surface-based first-level analysis": [[69, "example-of-surface-based-first-level-analysis"]], "Project the fMRI image to the surface": [[69, "project-the-fmri-image-to-the-surface"]], "Analysing the left hemisphere": [[69, "analysing-the-left-hemisphere"]], "Predicted time series and residuals": [[70, "predicted-time-series-and-residuals"]], "Import modules": [[70, "import-modules"]], "Fit model": [[70, "fit-model"]], "Calculate and plot contrast": [[70, "calculate-and-plot-contrast"]], "Extract the largest clusters": [[70, "extract-the-largest-clusters"]], "Plot predicted and actual time series for 6 most significant clusters": [[70, "plot-predicted-and-actual-time-series-for-6-most-significant-clusters"]], "Get residuals": [[70, "get-residuals"]], "Plot distribution of residuals": [[70, "plot-distribution-of-residuals"]], "Plot R-squared": [[70, "plot-r-squared"]], "Calculate and Plot F-test": [[70, "calculate-and-plot-f-test"]], "Single-subject data (two sessions) in native space": [[71, "single-subject-data-two-sessions-in-native-space"]], "Generate an events.tsv file for the NeuroSpin localizer task": [[72, "generate-an-events-tsv-file-for-the-neurospin-localizer-task"]], "GLM: Second level analysis": [[74, "glm-second-level-analysis"], [110, "glm-second-level-analysis"]], "Voxel-Based Morphometry on OASIS dataset": [[75, "voxel-based-morphometry-on-oasis-dataset"]], "VBM analysis of aging": [[75, "vbm-analysis-of-aging"]], "Analyse data": [[75, "analyse-data"]], "Second-level fMRI model: true positive proportion in clusters": [[76, "second-level-fmri-model-true-positive-proportion-in-clusters"]], "Fetch dataset": [[76, "fetch-dataset"], [79, "fetch-dataset"], [80, "fetch-dataset"]], "Estimate second level model": [[76, "estimate-second-level-model"], [77, "estimate-second-level-model"], [79, "estimate-second-level-model"]], "Example of generic design in second-level models": [[77, "example-of-generic-design-in-second-level-models"]], "Example of second level design matrix": [[78, "example-of-second-level-design-matrix"]], "Create a simple experimental paradigm": [[78, "create-a-simple-experimental-paradigm"]], "Create a second level design matrix": [[78, "create-a-second-level-design-matrix"]], "Second-level fMRI model: one sample test": [[79, "second-level-fmri-model-one-sample-test"]], "Display subject t_maps": [[79, "display-subject-t-maps"]], "Second-level fMRI model: two-sample test, unpaired and paired": [[80, "second-level-fmri-model-two-sample-test-unpaired-and-paired"]], "Estimate second level models": [[80, "estimate-second-level-models"]], "Plot the results": [[80, "plot-the-results"]], "Statistical testing of a second-level analysis": [[81, "statistical-testing-of-a-second-level-analysis"]], "Prepare some images for a simple t test": [[81, "prepare-some-images-for-a-simple-t-test"]], "Perform the second level analysis": [[81, "perform-the-second-level-analysis"]], "Manipulating brain image volumes": [[83, "manipulating-brain-image-volumes"], [110, "manipulating-brain-image-volumes"]], "Visualization of affine resamplings": [[84, "visualization-of-affine-resamplings"]], "Comparing the means of 2 images": [[85, "comparing-the-means-of-2-images"]], "Breaking an atlas of labels in separated regions": [[86, "breaking-an-atlas-of-labels-in-separated-regions"]], "The original Yeo atlas": [[86, "the-original-yeo-atlas"]], "Relabeling the atlas into separated regions": [[86, "relabeling-the-atlas-into-separated-regions"]], "Different connectivity modes": [[86, "different-connectivity-modes"]], "Parameter min_size": [[86, "parameter-min-size"]], "Regions Extraction of Default Mode Networks using Smith Atlas": [[87, "regions-extraction-of-default-mode-networks-using-smith-atlas"]], "Region Extraction using a t-statistical map (3D)": [[88, "region-extraction-using-a-t-statistical-map-3d"]], "Understanding NiftiMasker and mask computation": [[89, "understanding-niftimasker-and-mask-computation"]], "Computing a mask from the background": [[89, "computing-a-mask-from-the-background"]], "Computing a mask from raw EPI data": [[89, "computing-a-mask-from-raw-epi-data"]], "Computing the mask from the MNI template": [[89, "computing-the-mask-from-the-mni-template"]], "Compute and resample a mask": [[89, "compute-and-resample-a-mask"]], "After mask computation: extracting time series": [[89, "after-mask-computation-extracting-time-series"]], "Negating an image with math_img": [[90, "negating-an-image-with-math-img"]], "Extracting signals from brain regions using the NiftiLabelsMasker": [[91, "extracting-signals-from-brain-regions-using-the-niftilabelsmasker"]], "Simple example of NiftiMasker use": [[92, "simple-example-of-niftimasker-use"]], "Resample an image to a template": [[93, "resample-an-image-to-a-template"]], "Computing a Region of Interest (ROI) mask manually": [[94, "computing-a-region-of-interest-roi-mask-manually"]], "Build a statistical test to find voxels of interest": [[94, "build-a-statistical-test-to-find-voxels-of-interest"]], "Build a mask from this statistical map (Improving the quality of the mask)": [[94, "build-a-mask-from-this-statistical-map-improving-the-quality-of-the-mask"]], "Smoothing an image": [[95, "smoothing-an-image"]], "Advanced statistical analysis of brain images": [[97, "advanced-statistical-analysis-of-brain-images"], [110, "advanced-statistical-analysis-of-brain-images"]], "Advanced decoding using scikit learn": [[98, "advanced-decoding-using-scikit-learn"]], "Performing decoding with scikit-learn": [[98, "performing-decoding-with-scikit-learn"], [157, "performing-decoding-with-scikit-learn"]], "Masking the data": [[98, "masking-the-data"]], "Cross-validation with scikit-learn": [[98, "cross-validation-with-scikit-learn"], [157, "cross-validation-with-scikit-learn"]], "Tuning cross-validation parameters": [[98, "tuning-cross-validation-parameters"]], "Measuring the chance level": [[98, "measuring-the-chance-level"], [157, "measuring-the-chance-level"]], "Dummy estimator": [[98, "dummy-estimator"]], "Permutation test": [[98, "permutation-test"]], "Decoding without a mask: Anova-SVM in scikit-lean": [[98, "decoding-without-a-mask-anova-svm-in-scikit-lean"]], "Visualize the ANOVA + SVC\u2019s discriminating weights": [[98, "visualize-the-anova-svc-s-discriminating-weights"]], "Going further with scikit-learn": [[98, "going-further-with-scikit-learn"], [157, "going-further-with-scikit-learn"]], "Changing the prediction engine": [[98, "changing-the-prediction-engine"]], "Changing the feature selection": [[98, "changing-the-feature-selection"]], "Functional connectivity predicts age group": [[99, "functional-connectivity-predicts-age-group"]], "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding": [[100, "beta-series-modeling-for-task-based-functional-connectivity-and-decoding"]], "Choosing the right model for your analysis": [[100, null]], "Define the standard model": [[100, "define-the-standard-model"]], "Define the LSA model": [[100, "define-the-lsa-model"]], "Aggregate beta maps from the LSA model based on condition": [[100, "aggregate-beta-maps-from-the-lsa-model-based-on-condition"]], "Define the LSS models": [[100, "define-the-lss-models"]], "Show the design matrices for the first few trials": [[100, "show-the-design-matrices-for-the-first-few-trials"]], "Compare the three modeling approaches": [[100, "compare-the-three-modeling-approaches"]], "Applications of beta series": [[100, "applications-of-beta-series"]], "BIDS dataset first and second level analysis": [[101, "bids-dataset-first-and-second-level-analysis"]], "Fetch example BIDS dataset": [[101, "fetch-example-bids-dataset"], [108, "fetch-example-bids-dataset"]], "Obtain automatically FirstLevelModel objects and fit arguments": [[101, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"], [108, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"]], "Quick sanity check on fit arguments": [[101, "quick-sanity-check-on-fit-arguments"]], "First level model estimation": [[101, "first-level-model-estimation"]], "Second level model estimation": [[101, "second-level-model-estimation"]], "Massively univariate analysis of face vs house recognition": [[102, "massively-univariate-analysis-of-face-vs-house-recognition"]], "NeuroVault cross-study ICA maps.": [[103, "neurovault-cross-study-ica-maps"]], "Get image and term data": [[103, "get-image-and-term-data"]], "Reshape and mask images": [[103, "reshape-and-mask-images"]], "Run ICA and map components to terms": [[103, "run-ica-and-map-components-to-terms"]], "Generate figures": [[103, "generate-figures"]], "Multivariate decompositions: Independent component analysis of fMRI": [[104, "multivariate-decompositions-independent-component-analysis-of-fmri"]], "Massively univariate analysis of a motor task from the Localizer dataset": [[105, "massively-univariate-analysis-of-a-motor-task-from-the-localizer-dataset"]], "Massively univariate analysis of a calculation task from the Localizer dataset": [[106, "massively-univariate-analysis-of-a-calculation-task-from-the-localizer-dataset"]], "NeuroVault meta-analysis of stop-go paradigm studies.": [[107, "neurovault-meta-analysis-of-stop-go-paradigm-studies"]], "Fetch images for \u201csuccessful stop minus go\u201d-like protocols.": [[107, "fetch-images-for-successful-stop-minus-go-like-protocols"]], "Visualize the data": [[107, "visualize-the-data"]], "Compute statistics": [[107, "compute-statistics"]], "Plot the combined z maps": [[107, "plot-the-combined-z-maps"]], "Surface-based dataset first and second level analysis of a dataset": [[108, "surface-based-dataset-first-and-second-level-analysis-of-a-dataset"]], "Group study": [[108, "group-study"]], "Examples": [[110, "examples"], [173, null], [174, null], [174, null], [174, null], [174, null], [174, null], [174, null]], "General bibliography": [[111, "general-bibliography"]], "Advanced usage: manual pipelines and scaling up": [[112, "advanced-usage-manual-pipelines-and-scaling-up"]], "Building your own neuroimaging machine-learning pipeline": [[113, "building-your-own-neuroimaging-machine-learning-pipeline"]], "Data loading and preprocessing": [[113, "data-loading-and-preprocessing"]], "Downloading the data": [[113, "downloading-the-data"]], "Loading non image data: experiment description": [[113, "loading-non-image-data-experiment-description"]], "Masking the data: from 4D image to 2D array": [[113, "masking-the-data-from-4d-image-to-2d-array"]], "Applying a mask": [[113, "applying-a-mask"]], "Automatically computing a mask": [[113, "automatically-computing-a-mask"]], "Applying a scikit-learn machine learning method": [[113, "applying-a-scikit-learn-machine-learning-method"]], "Unmasking (inverse_transform)": [[113, "unmasking-inverse-transform"]], "Visualizing results": [[113, "visualizing-results"], [153, "visualizing-results"]], "Going further": [[113, "going-further"]], "Downloading statistical maps from the Neurovault repository": [[114, "downloading-statistical-maps-from-the-neurovault-repository"]], "Specific images or collections": [[114, "specific-images-or-collections"]], "Selection filters": [[114, "selection-filters"]], "Output": [[114, "output"]], "Neurosynth annotations": [[114, "neurosynth-annotations"]], "Examples using Neurovault": [[114, "examples-using-neurovault"]], "0.1.0": [[115, "id1"], [147, "id3495"]], "Changelog": [[115, "changelog"], [116, "changelog"], [117, "changelog"], [118, "changelog"], [120, "changelog"], [121, "changelog"], [123, "changelog"], [147, "changelog"], [147, "id2789"], [147, "id2906"], [147, "id3144"], [147, "id3262"], [147, "id3379"], [147, "id3496"]], "0.1.1": [[116, "id1"], [147, "id3378"]], "0.1.2": [[117, "id1"], [147, "id3261"]], "0.1.3": [[118, "id1"], [147, "id3143"]], "Fixes": [[118, "fixes"], [122, "fixes"], [125, "fixes"], [126, "fixes"], [127, "fixes"], [127, "id3"], [128, "fixes"], [129, "fixes"], [131, "fixes"], [132, "fixes"], [133, "fixes"], [134, "fixes"], [135, "id4"], [135, "id9"], [135, "id13"], [136, "fixes"], [137, "fixes"], [138, "fixes"], [139, "fixes"], [140, "fixes"], [141, "fixes"], [142, "fixes"], [143, "fixes"], [144, "fixes"], [145, "fixes"], [147, "fixes"], [147, "id119"], [147, "id238"], [147, "id359"], [147, "id480"], [147, "id601"], [147, "id722"], [147, "id843"], [147, "id962"], [147, "id1081"], [147, "id1206"], [147, "id1212"], [147, "id1216"], [147, "id1335"], [147, "id1455"], [147, "id1583"], [147, "id1707"], [147, "id1944"], [147, "id2065"], [147, "id2184"], [147, "id2189"], [147, "id2307"], [147, "id2428"], [147, "id2785"], [147, "id3145"]], "0.1.4": [[119, "id1"], [147, "id3026"]], "Highlights": [[119, "highlights"], [127, "highlights"], [128, "highlights"], [129, "highlights"], [132, "highlights"], [132, "id4"], [132, "id8"], [147, "id1577"], [147, "id1581"], [147, "id1586"], [147, "id1942"], [147, "id2063"], [147, "id2187"], [147, "id3027"]], "0.2.0": [[120, "id1"], [147, "id2905"]], "New features": [[120, "new-features"], [123, "new-features"], [147, "new-features"], [147, "id2907"]], "Enhancements": [[120, "enhancements"], [122, "enhancements"], [126, "enhancements"], [127, "enhancements"], [127, "id4"], [128, "enhancements"], [129, "enhancements"], [130, "enhancements"], [132, "id2"], [132, "id5"], [132, "id9"], [139, "enhancements"], [140, "enhancements"], [141, "enhancements"], [142, "enhancements"], [143, "enhancements"], [144, "enhancements"], [145, "enhancements"], [147, "enhancements"], [147, "id120"], [147, "id239"], [147, "id360"], [147, "id481"], [147, "id602"], [147, "id723"], [147, "id1578"], [147, "id1582"], [147, "id1587"], [147, "id1824"], [147, "id1943"], [147, "id2066"], [147, "id2185"], [147, "id2190"], [147, "id2308"], [147, "id2784"], [147, "id2908"]], "Bug fixes": [[120, "bug-fixes"], [123, "bug-fixes"], [130, "bug-fixes"], [147, "bug-fixes"], [147, "id2666"], [147, "id2909"]], "API changes summary": [[120, "api-changes-summary"], [147, "api-changes-summary"]], "Contributors": [[120, "contributors"], [122, "contributors"], [125, "contributors"], [129, "contributors"], [132, "contributors"], [132, "id7"], [132, "id11"], [133, "contributors"], [134, "contributors"], [135, "contributors"], [135, "id10"], [135, "id14"], [136, "contributors"], [137, "contributors"], [147, "contributors"], [147, "id1082"], [147, "id1207"], [147, "id1213"], [147, "id1217"], [147, "id1336"], [147, "id1456"], [147, "id1580"], [147, "id1585"], [147, "id1589"], [147, "id1946"], [147, "id2431"], [147, "id2787"], [147, "id2910"]], "0.2.1": [[121, "id1"], [147, "v0-2-1"]], "0.2.2": [[122, "id1"], [147, "id2782"]], "New": [[122, "new"], [124, "new"], [125, "new"], [125, "id3"], [147, "id2427"], [147, "id2430"], [147, "id2548"], [147, "id2783"]], "Changes": [[122, "changes"], [124, "changes"], [125, "changes"], [126, "changes"], [127, "changes"], [127, "id2"], [128, "changes"], [129, "changes"], [130, "changes"], [131, "changes"], [132, "changes"], [132, "id3"], [132, "id6"], [132, "id10"], [133, "changes"], [135, "id3"], [135, "id8"], [135, "id12"], [137, "changes"], [138, "changes"], [140, "changes"], [141, "changes"], [142, "changes"], [143, "changes"], [144, "changes"], [145, "changes"], [147, "changes"], [147, "id121"], [147, "id240"], [147, "id361"], [147, "id482"], [147, "id603"], [147, "id844"], [147, "id963"], [147, "id1205"], [147, "id1211"], [147, "id1215"], [147, "id1454"], [147, "id1575"], [147, "id1579"], [147, "id1584"], [147, "id1588"], [147, "id1706"], [147, "id1825"], [147, "id1945"], [147, "id2064"], [147, "id2183"], [147, "id2188"], [147, "id2309"], [147, "id2426"], [147, "id2549"], [147, "id2786"]], "0.2.3": [[123, "id1"], [147, "id2665"]], "0.2.4": [[124, "id1"], [147, "id2547"]], "0.2.5.1": [[125, "id1"], [147, "id2425"]], "0.2.5": [[125, "id2"], [147, "id2429"]], "0.2.6": [[126, "id1"], [147, "id2306"]], "0.3.0": [[127, "id1"], [147, "id2182"]], "0.3.0 beta": [[127, "beta"], [147, "id2186"]], "0.3.1": [[128, "id1"], [147, "id2062"]], "0.4.0": [[129, "id1"], [147, "id1941"]], "0.4.1": [[130, "id1"], [147, "id1823"]], "0.4.2": [[131, "id1"], [147, "id1705"]], "0.5.0": [[132, "id1"], [147, "id1572"]], "NEW": [[132, "new"], [133, "new"], [134, "new"], [135, "new"], [135, "id2"], [135, "id5"], [135, "id11"], [138, "new"], [139, "new"], [140, "new"], [141, "new"], [142, "new"], [144, "new"], [145, "new"], [147, "new"], [147, "id117"], [147, "id358"], [147, "id479"], [147, "id600"], [147, "id721"], [147, "id841"], [147, "id1200"], [147, "id1204"], [147, "id1208"], [147, "id1214"], [147, "id1334"], [147, "id1453"], [147, "id1573"]], "ENHANCEMENTS": [[132, "enhancements"], [135, "enhancements"], [136, "enhancements"], [137, "enhancements"], [147, "id961"], [147, "id1080"], [147, "id1201"], [147, "id1574"]], "0.5.0 rc": [[132, "rc"], [147, "id1576"]], "0.5.0 beta": [[132, "beta"], [147, "beta"]], "0.5.0 alpha": [[132, "alpha"], [147, "alpha"]], "0.5.1": [[133, "id1"], [147, "id1452"]], "Known Issues": [[133, "known-issues"], [147, "known-issues"]], "0.5.2": [[134, "id1"], [147, "id1333"]], "0.6.0": [[135, "id1"], [147, "id1198"]], "HIGHLIGHTS": [[135, "highlights"], [138, "highlights"], [139, "highlights"], [140, "highlights"], [141, "highlights"], [142, "highlights"], [144, "highlights"], [147, "highlights"], [147, "id357"], [147, "id478"], [147, "id599"], [147, "id720"], [147, "id840"], [147, "id1199"]], "CHANGES": [[135, "changes"], [147, "id1202"]], "FIXES": [[135, "fixes"], [147, "id1203"]], "0.6.0rc": [[135, "rc"], [147, "rc"]], "0.6.0b0": [[135, "b0"], [147, "b0"]], "0.6.0a0": [[135, "a0"], [147, "a0"]], "0.6.1": [[136, "id1"], [147, "id1079"]], "0.6.2": [[137, "id1"], [147, "id960"]], "0.7.0": [[138, "id1"], [147, "id839"]], "0.7.1": [[139, "id1"], [147, "id719"]], "0.8.0": [[140, "id1"], [147, "id598"]], "0.8.1": [[141, "id1"], [147, "id477"]], "0.9.0": [[142, "id1"], [147, "id356"]], "0.9.1": [[143, "id1"], [147, "id237"]], "0.9.2": [[144, "id1"], [147, "id116"]], "0.9.3.dev": [[145, "dev"], [147, "dev"]], "What\u2019s new": [[147, "what-s-new"]], "Connectome extraction: inverse covariance for direct connections": [[148, "connectome-extraction-inverse-covariance-for-direct-connections"]], "Page summary": [[148, null], [149, null], [152, null], [153, null], [163, null], [166, null]], "Sparse inverse covariance for functional connectomes": [[148, "sparse-inverse-covariance-for-functional-connectomes"]], "Parameter selection": [[148, null]], "Full example": [[148, null], [148, null], [148, null], [149, null], [149, null]], "Exercise: computing sparse inverse covariance": [[148, null]], "Reference": [[148, null], [148, null], [148, null], [148, null], [151, null]], "Sparse inverse covariance on multiple subjects": [[148, "sparse-inverse-covariance-on-multiple-subjects"]], "Exercise: computing the correlation matrix of rest fmri": [[148, null], [149, null]], "Comparing the different approaches on simulated data": [[148, "comparing-the-different-approaches-on-simulated-data"]], "Full Example": [[148, null]], "Linking total and direct interactions at the group level": [[148, "linking-total-and-direct-interactions-at-the-group-level"]], "Exercise: computing connectivity in tangent space": [[148, null]], "Extracting times series to build a functional connectome": [[149, "extracting-times-series-to-build-a-functional-connectome"]], "Time-series from a brain parcellation or \u201cMaxProb\u201d atlas": [[149, "time-series-from-a-brain-parcellation-or-maxprob-atlas"]], "Brain parcellations": [[149, "brain-parcellations"]], "Extracting signals on a parcellation": [[149, "extracting-signals-on-a-parcellation"]], "Time-series from a probabilistic atlas": [[149, "time-series-from-a-probabilistic-atlas"]], "Probabilistic atlases": [[149, "probabilistic-atlases"]], "Extracting signals from a probabilistic atlas": [[149, "extracting-signals-from-a-probabilistic-atlas"]], "Exercise: correlation matrix of rest fMRI on probabilistic atlas": [[149, null]], "A functional connectome: a graph of interactions": [[149, "a-functional-connectome-a-graph-of-interactions"]], "A functional connectome: extracting coordinates of regions": [[149, "a-functional-connectome-extracting-coordinates-of-regions"]], "Functional connectivity and resting state": [[150, "functional-connectivity-and-resting-state"]], "Clustering to parcellate the brain in regions": [[151, "clustering-to-parcellate-the-brain-in-regions"]], "Data loading: movie-watching data": [[151, "data-loading-movie-watching-data"]], "Applying clustering": [[151, "applying-clustering"]], "Which clustering to use": [[151, null]], "Using and visualizing the resulting parcellation": [[151, "using-and-visualizing-the-resulting-parcellation"]], "Visualizing the parcellation": [[151, "visualizing-the-parcellation"]], "Compressed representation": [[151, "compressed-representation"]], "Example code": [[151, null], [159, null]], "Region Extraction for better brain parcellations": [[152, "region-extraction-for-better-brain-parcellations"]], "Fetching movie-watching based functional datasets": [[152, "fetching-movie-watching-based-functional-datasets"]], "Brain maps using Dictionary learning": [[152, "brain-maps-using-dictionary-learning"]], "Visualization of Dictionary learning maps": [[152, "visualization-of-dictionary-learning-maps"]], "Region Extraction with Dictionary learning maps": [[152, "region-extraction-with-dictionary-learning-maps"]], "Visualization of Region Extraction results": [[152, "visualization-of-region-extraction-results"]], "Computing functional connectivity matrices": [[152, "computing-functional-connectivity-matrices"]], "Visualization of functional connectivity matrices": [[152, "visualization-of-functional-connectivity-matrices"]], "Validating results": [[152, "validating-results"]], "Extracting functional brain networks: ICA and related": [[153, "extracting-functional-brain-networks-ica-and-related"]], "Multi-subject ICA: CanICA": [[153, "multi-subject-ica-canica"]], "Objective": [[153, "objective"]], "Nilearn data for examples": [[153, null]], "Fitting CanICA model with nilearn": [[153, "fitting-canica-model-with-nilearn"]], "Interpreting such components": [[153, "interpreting-such-components"]], "An alternative to ICA: Dictionary learning": [[153, "an-alternative-to-ica-dictionary-learning"]], "An introduction to decoding": [[154, "an-introduction-to-decoding"]], "Loading and preparing the data": [[154, "loading-and-preparing-the-data"]], "The Haxby 2001 experiment": [[154, "the-haxby-2001-experiment"]], "fMRI: using beta maps of a first-level analysis": [[154, null]], "Loading the data into nilearn": [[154, "loading-the-data-into-nilearn"]], "Full code example": [[154, null]], "Performing a simple decoding analysis": [[154, "performing-a-simple-decoding-analysis"]], "A few definitions": [[154, "a-few-definitions"]], "A first estimator": [[154, "a-first-estimator"]], "Decoding made easy": [[154, "decoding-made-easy"]], "Measuring prediction performance": [[154, "measuring-prediction-performance"]], "Cross-validation": [[154, "cross-validation"]], "Choosing a good cross-validation strategy": [[154, "choosing-a-good-cross-validation-strategy"]], "Choice of the prediction accuracy measure": [[154, "choice-of-the-prediction-accuracy-measure"]], "Prediction accuracy at chance using simple strategies": [[154, "prediction-accuracy-at-chance-using-simple-strategies"]], "Putting it all together": [[154, null]], "Visualizing the decoder\u2019s weights": [[154, "visualizing-the-decoder-s-weights"]], "Decoding without a mask: Anova-SVM": [[154, "decoding-without-a-mask-anova-svm"]], "Dimension reduction with feature selection": [[154, "dimension-reduction-with-feature-selection"]], "Visualizing the results": [[154, "visualizing-the-results"]], "Final script": [[154, null]], "Choosing the right predictive model for neuroimaging": [[155, "choosing-the-right-predictive-model-for-neuroimaging"]], "Predictions: regression, classification and multi-class": [[155, "predictions-regression-classification-and-multi-class"]], "Regression": [[155, "regression"]], "Classification: two classes or multi-class": [[155, "classification-two-classes-or-multi-class"]], "Different linear models": [[155, "different-linear-models"]], "Setting estimator parameters": [[155, "setting-estimator-parameters"], [157, "setting-estimator-parameters"]], "Bagging several models": [[155, "bagging-several-models"]], "FREM: fast ensembling of regularized models for robust decoding": [[156, "frem-fast-ensembling-of-regularized-models-for-robust-decoding"]], "FREM pipeline": [[156, "frem-pipeline"]], "Empirical comparisons": [[156, "empirical-comparisons"]], "Decoding performance increase on Haxby dataset": [[156, "decoding-performance-increase-on-haxby-dataset"]], "Code": [[156, null], [156, null], [173, null]], "Spatial regularization of decoding maps on mixed gambles study": [[156, "spatial-regularization-of-decoding-maps-on-mixed-gambles-study"]], "Running scikit-learn functions for more control on the analysis": [[157, "running-scikit-learn-functions-for-more-control-on-the-analysis"]], "Using scikit-learn estimators": [[157, "using-scikit-learn-estimators"]], "Decoding on simulated data": [[157, null]], "Decoding without a mask: Anova-SVM using scikit-learn": [[157, "decoding-without-a-mask-anova-svm-using-scikit-learn"]], "Using any other model in the pipeline": [[157, "using-any-other-model-in-the-pipeline"]], "Decoding and MVPA: predicting from brain images": [[158, "decoding-and-mvpa-predicting-from-brain-images"]], "Searchlight : finding voxels containing information": [[159, "searchlight-finding-voxels-containing-information"]], "Principle of the Searchlight": [[159, "principle-of-the-searchlight"]], "Further Reading": [[159, null]], "Preparing the data": [[159, "preparing-the-data"]], "Setting up the searchlight": [[159, "setting-up-the-searchlight"]], "Classifier": [[159, "classifier"]], "Score function": [[159, "score-function"]], "Cross validation": [[159, "cross-validation"]], "Sphere radius": [[159, "sphere-radius"]], "Searchlight": [[159, "id6"]], "Comparing to massively univariate analysis: F_score or SPM": [[159, "comparing-to-massively-univariate-analysis-f-score-or-spm"]], "SpaceNet: decoding with spatial structure for better maps": [[160, "spacenet-decoding-with-spatial-structure-for-better-maps"]], "The SpaceNet decoder": [[160, "the-spacenet-decoder"]], "Related example": [[160, "related-example"]], "Group-sparse covariance estimation": [[161, "group-sparse-covariance-estimation"]], "Description": [[161, "description"]], "Numerical stability": [[161, "numerical-stability"]], "Execution time": [[161, "execution-time"]], "Synthetic dataset": [[161, "synthetic-dataset"]], "Stopping criteria": [[161, "stopping-criteria"]], "Maximum number of iterations": [[161, "maximum-number-of-iterations"]], "Duality gap": [[161, "duality-gap"]], "Variation of norm of estimate": [[161, "variation-of-norm-of-estimate"]], "Initial estimate value": [[161, "initial-estimate-value"]], "Modifying the stopping criterion": [[161, "modifying-the-stopping-criterion"]], "Cross-validation algorithm": [[161, "cross-validation-algorithm"]], "Principle of cross-validation": [[161, "principle-of-cross-validation"]], "Bounds on alpha": [[161, "bounds-on-alpha"]], "Iterative grid search": [[161, "iterative-grid-search"]], "Warm restart": [[161, "warm-restart"]], "Stopping criterion": [[161, "stopping-criterion"]], "Contributing": [[162, "contributing"], [162, "id3"]], "Code of Conduct": [[162, "code-of-conduct"]], "How to get help?": [[162, "how-to-get-help"]], "How to help the project?": [[162, "how-to-help-the-project"]], "Report bugs or discuss enhancement ideas": [[162, "report-bugs-or-discuss-enhancement-ideas"]], "Answer questions": [[162, "answer-questions"]], "Review Pull Requests": [[162, "review-pull-requests"]], "Contribute code": [[162, "contribute-code"]], "How do we decide what code goes in?": [[162, "how-do-we-decide-what-code-goes-in"]], "Scope of the project": [[162, "scope-of-the-project"]], "Who makes decisions": [[162, "who-makes-decisions"]], "How to contribute to nilearn": [[162, "how-to-contribute-to-nilearn"]], "Contribution Guidelines": [[162, "contribution-guidelines"]], "PR Structure": [[162, "pr-structure"]], "Coding Style": [[162, "coding-style"]], "Tests": [[162, "tests"]], "Documentation": [[162, "documentation"]], "Setting up your environment": [[162, "setting-up-your-environment"]], "Installing": [[162, "installing"]], "Recommendation": [[162, null]], "Building documentation": [[162, "building-documentation"]], "Additional cases": [[162, "additional-cases"]], "How to contribute an atlas": [[162, "how-to-contribute-an-atlas"]], "How to contribute a dataset fetcher": [[162, "how-to-contribute-a-dataset-fetcher"]], "Maintenance": [[162, "maintenance"], [170, "maintenance"]], "First level models": [[163, "first-level-models"]], "HRF models": [[163, "hrf-models"]], "Design matrix: event-based and time series-based": [[163, "design-matrix-event-based-and-time-series-based"]], "Event-based": [[163, "event-based"]], "Time series-based": [[163, "time-series-based"]], "Fitting a first level model": [[163, "fitting-a-first-level-model"]], "Computing contrasts": [[163, "computing-contrasts"]], "Extracting predicted time series and residuals": [[163, "extracting-predicted-time-series-and-residuals"]], "Surface-based analysis": [[163, "surface-based-analysis"]], "An introduction to GLMs in fMRI statistical analysis": [[164, "an-introduction-to-glms-in-fmri-statistical-analysis"]], "A primer on BOLD-fMRI data analysis": [[164, "a-primer-on-bold-fmri-data-analysis"]], "What is fMRI ?": [[164, "what-is-fmri"]], "fMRI data modelling": [[164, "fmri-data-modelling"]], "fMRI statistical analysis": [[164, "fmri-statistical-analysis"]], "Multiple Comparisons": [[164, "multiple-comparisons"]], "Analyzing fMRI using GLMs": [[165, "analyzing-fmri-using-glms"]], "Second level models": [[166, "second-level-models"]], "Fitting a second level model": [[166, "fitting-a-second-level-model"]], "Thresholding statistical maps": [[166, "thresholding-statistical-maps"]], "Multiple comparisons correction": [[166, "multiple-comparisons-correction"]], "Voxel based morphometry": [[166, "voxel-based-morphometry"]], "Glossary": [[167, "glossary"]], "Nilearn": [[168, "nilearn"]], "Featured examples": [[168, "featured-examples"]], "Introduction": [[169, "introduction"]], "What is nilearn?": [[169, "what-is-nilearn"]], "Using nilearn for the first time": [[169, "using-nilearn-for-the-first-time"]], "First steps with nilearn": [[169, "first-steps-with-nilearn"]], "Learning with the API references": [[169, "learning-with-the-api-references"]], "Learning with examples": [[169, "learning-with-examples"]], "Finding help": [[169, "finding-help"]], "Machine learning applications to Neuroimaging": [[169, "machine-learning-applications-to-neuroimaging"]], "Project Organization": [[170, "project-organization"]], "Issues": [[170, "issues"]], "Labels": [[170, "labels"]], "Closing policy": [[170, "closing-policy"]], "Pull Requests": [[170, "pull-requests"]], "How to make a release?": [[170, "how-to-make-a-release"]], "Prepare code for the release": [[170, "prepare-code-for-the-release"]], "Prepare the release": [[170, "prepare-the-release"]], "Build the distributions and upload them to Pypi": [[170, "build-the-distributions-and-upload-them-to-pypi"]], "Build and deploy the documentation": [[170, "build-and-deploy-the-documentation"]], "Post-release": [[170, "post-release"]], "Manipulation brain volumes with nilearn": [[171, "manipulation-brain-volumes-with-nilearn"]], "Input and output: neuroimaging data representation": [[172, "input-and-output-neuroimaging-data-representation"]], "Inputing data: file names or image objects": [[172, "inputing-data-file-names-or-image-objects"]], "File names and objects, 3D and 4D images": [[172, "file-names-and-objects-3d-and-4d-images"]], "File name matching: \u201cglobbing\u201d and user path expansion": [[172, "file-name-matching-globbing-and-user-path-expansion"]], "Python globbing": [[172, null]], "Fetching open datasets from Internet": [[172, "fetching-open-datasets-from-internet"]], "nilearn_data: Where is the downloaded data stored?": [[172, null]], "Understanding neuroimaging data": [[172, "understanding-neuroimaging-data"]], "Nifti and Analyze data": [[172, "nifti-and-analyze-data"]], "Dataset formatting: data shape": [[172, null]], "Niimg-like objects": [[172, "niimg-like-objects"]], "Image affines": [[172, null]], "Decreasing memory used when loading Nifti images": [[172, null]], "Text files: phenotype or behavior": [[172, "text-files-phenotype-or-behavior"]], "Reading CSV with pandas": [[172, null]], "Manipulating images: resampling, smoothing, masking, ROIs\u2026": [[173, "manipulating-images-resampling-smoothing-masking-rois"]], "Functions for data preparation and image transformation": [[173, "functions-for-data-preparation-and-image-transformation"]], "Resampling images": [[173, "resampling-images"]], "Resampling one image to match another one": [[173, "resampling-one-image-to-match-another-one"]], "Example": [[173, null]], "Resampling to a specific target affine, shape, or resolution": [[173, "resampling-to-a-specific-target-affine-shape-or-resolution"]], "Special case: resampling to a given voxel size": [[173, null]], "Accessing individual volumes in 4D images": [[173, "accessing-individual-volumes-in-4d-images"]], "Computing and applying spatial masks": [[173, "computing-and-applying-spatial-masks"]], "Masking data: from 4D Nifti images to 2D data arrays": [[173, "masking-data-from-4d-nifti-images-to-2d-data-arrays"]], "Image operations: creating a ROI mask manually": [[173, "image-operations-creating-a-roi-mask-manually"]], "From neuroimaging volumes to data matrices: the masker objects": [[174, "from-neuroimaging-volumes-to-data-matrices-the-masker-objects"]], "The concept of \u201cmasker\u201d objects": [[174, "the-concept-of-masker-objects"]], "Advanced: Design philosophy of \u201cMaskers\u201d": [[174, null]], "NiftiMasker: applying a mask to load time-series": [[174, "niftimasker-applying-a-mask-to-load-time-series"]], "Advanced: scikit-learn Pipelines": [[174, null]], "Custom data loading: loading only the first 100 time points": [[174, "custom-data-loading-loading-only-the-first-100-time-points"]], "Controlling how the mask is computed from the data": [[174, "controlling-how-the-mask-is-computed-from-the-data"]], "Visualizing the computed mask": [[174, "visualizing-the-computed-mask"]], "Different masking strategies": [[174, "different-masking-strategies"]], "Extra mask parameters: opening, cutoff\u2026": [[174, "extra-mask-parameters-opening-cutoff"]], "Common data preparation steps: smoothing, filtering, resampling": [[174, "common-data-preparation-steps-smoothing-filtering-resampling"]], "`dtype` argument": [[174, null]], "Temporal Filtering and confound removal": [[174, "temporal-filtering-and-confound-removal"]], "Exercise": [[174, null]], "Resampling: resizing and changing resolutions of images": [[174, "resampling-resizing-and-changing-resolutions-of-images"]], "Inverse transform: unmasking data": [[174, "inverse-transform-unmasking-data"]], "Examples to better understand the NiftiMasker": [[174, null]], "Extraction of signals from regions: NiftiLabelsMasker, NiftiMapsMasker": [[174, "extraction-of-signals-from-regions-niftilabelsmasker-niftimapsmasker"]], "Regions definition": [[174, "regions-definition"]], "NiftiLabelsMasker Usage": [[174, "niftilabelsmasker-usage"]], "NiftiMapsMasker Usage": [[174, "niftimapsmasker-usage"]], "Extraction of signals from regions for multiple subjects: MultiNiftiMasker, MultiNiftiLabelsMasker, MultiNiftiMapsMasker": [[174, "extraction-of-signals-from-regions-for-multiple-subjects-multiniftimasker-multiniftilabelsmasker-multiniftimapsmasker"]], "MultiNiftiMasker Usage": [[174, "multiniftimasker-usage"]], "MultiNiftiLabelsMasker Usage": [[174, "multiniftilabelsmasker-usage"]], "MultiNiftiMapsMasker Usage": [[174, "multiniftimapsmasker-usage"]], "Extraction of signals from seeds: NiftiSpheresMasker": [[174, "extraction-of-signals-from-seeds-niftispheresmasker"]], "nilearn.connectome: Functional Connectivity": [[175, "module-nilearn.connectome"]], "nilearn.datasets: Automatic Dataset Fetching": [[176, "module-nilearn.datasets"]], "Templates": [[176, "templates"]], "Atlases": [[176, "atlases"]], "Preprocessed datasets": [[176, "preprocessed-datasets"]], "Statistical maps/derivatives": [[176, "statistical-maps-derivatives"]], "General functions": [[176, "general-functions"]], "nilearn.decoding: Decoding": [[177, "module-nilearn.decoding"]], "nilearn.decomposition: Multivariate Decompositions": [[178, "module-nilearn.decomposition"]], "nilearn.connectome.ConnectivityMeasure": [[179, "nilearn-connectome-connectivitymeasure"]], "Examples using nilearn.connectome.ConnectivityMeasure": [[179, "examples-using-nilearn-connectome-connectivitymeasure"]], "nilearn.connectome.GroupSparseCovariance": [[180, "nilearn-connectome-groupsparsecovariance"]], "nilearn.connectome.GroupSparseCovarianceCV": [[181, "nilearn-connectome-groupsparsecovariancecv"]], "Examples using nilearn.connectome.GroupSparseCovarianceCV": [[181, "examples-using-nilearn-connectome-groupsparsecovariancecv"]], "nilearn.connectome.cov_to_corr": [[182, "nilearn-connectome-cov-to-corr"]], "nilearn.connectome.group_sparse_covariance": [[183, "nilearn-connectome-group-sparse-covariance"]], "nilearn.connectome.prec_to_partial": [[184, "nilearn-connectome-prec-to-partial"]], "nilearn.connectome.sym_matrix_to_vec": [[185, "nilearn-connectome-sym-matrix-to-vec"]], "nilearn.connectome.vec_to_sym_matrix": [[186, "nilearn-connectome-vec-to-sym-matrix"]], "nilearn.datasets.fetch_abide_pcp": [[187, "nilearn-datasets-fetch-abide-pcp"]], "nilearn.datasets.fetch_adhd": [[188, "nilearn-datasets-fetch-adhd"]], "Examples using nilearn.datasets.fetch_adhd": [[188, "examples-using-nilearn-datasets-fetch-adhd"]], "nilearn.datasets.fetch_atlas_aal": [[189, "nilearn-datasets-fetch-atlas-aal"]], "nilearn.datasets.fetch_atlas_allen_2011": [[190, "nilearn-datasets-fetch-atlas-allen-2011"]], "Examples using nilearn.datasets.fetch_atlas_allen_2011": [[190, "examples-using-nilearn-datasets-fetch-atlas-allen-2011"]], "nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[191, "nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "Examples using nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[191, "examples-using-nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "nilearn.datasets.fetch_atlas_craddock_2012": [[192, "nilearn-datasets-fetch-atlas-craddock-2012"]], "nilearn.datasets.fetch_atlas_destrieux_2009": [[193, "nilearn-datasets-fetch-atlas-destrieux-2009"]], "Examples using nilearn.datasets.fetch_atlas_destrieux_2009": [[193, "examples-using-nilearn-datasets-fetch-atlas-destrieux-2009"]], "nilearn.datasets.fetch_atlas_difumo": [[194, "nilearn-datasets-fetch-atlas-difumo"]], "Examples using nilearn.datasets.fetch_atlas_difumo": [[194, "examples-using-nilearn-datasets-fetch-atlas-difumo"]], "nilearn.datasets.fetch_atlas_harvard_oxford": [[195, "nilearn-datasets-fetch-atlas-harvard-oxford"]], "Examples using nilearn.datasets.fetch_atlas_harvard_oxford": [[195, "examples-using-nilearn-datasets-fetch-atlas-harvard-oxford"]], "nilearn.datasets.fetch_atlas_juelich": [[196, "nilearn-datasets-fetch-atlas-juelich"]], "Examples using nilearn.datasets.fetch_atlas_juelich": [[196, "examples-using-nilearn-datasets-fetch-atlas-juelich"]], "nilearn.datasets.fetch_atlas_msdl": [[197, "nilearn-datasets-fetch-atlas-msdl"]], "Examples using nilearn.datasets.fetch_atlas_msdl": [[197, "examples-using-nilearn-datasets-fetch-atlas-msdl"]], "nilearn.datasets.fetch_atlas_pauli_2017": [[198, "nilearn-datasets-fetch-atlas-pauli-2017"]], "Examples using nilearn.datasets.fetch_atlas_pauli_2017": [[198, "examples-using-nilearn-datasets-fetch-atlas-pauli-2017"]], "nilearn.datasets.fetch_atlas_schaefer_2018": [[199, "nilearn-datasets-fetch-atlas-schaefer-2018"]], "nilearn.datasets.fetch_atlas_smith_2009": [[200, "nilearn-datasets-fetch-atlas-smith-2009"]], "Examples using nilearn.datasets.fetch_atlas_smith_2009": [[200, "examples-using-nilearn-datasets-fetch-atlas-smith-2009"]], "nilearn.datasets.fetch_atlas_surf_destrieux": [[201, "nilearn-datasets-fetch-atlas-surf-destrieux"]], "Examples using nilearn.datasets.fetch_atlas_surf_destrieux": [[201, "examples-using-nilearn-datasets-fetch-atlas-surf-destrieux"]], "nilearn.datasets.fetch_atlas_talairach": [[202, "nilearn-datasets-fetch-atlas-talairach"]], "nilearn.datasets.fetch_atlas_yeo_2011": [[203, "nilearn-datasets-fetch-atlas-yeo-2011"]], "Examples using nilearn.datasets.fetch_atlas_yeo_2011": [[203, "examples-using-nilearn-datasets-fetch-atlas-yeo-2011"]], "nilearn.datasets.fetch_bids_langloc_dataset": [[204, "nilearn-datasets-fetch-bids-langloc-dataset"]], "nilearn.datasets.fetch_coords_dosenbach_2010": [[205, "nilearn-datasets-fetch-coords-dosenbach-2010"]], "Examples using nilearn.datasets.fetch_coords_dosenbach_2010": [[205, "examples-using-nilearn-datasets-fetch-coords-dosenbach-2010"]], "nilearn.datasets.fetch_coords_power_2011": [[206, "nilearn-datasets-fetch-coords-power-2011"]], "Examples using nilearn.datasets.fetch_coords_power_2011": [[206, "examples-using-nilearn-datasets-fetch-coords-power-2011"]], "nilearn.datasets.fetch_coords_seitzman_2018": [[207, "nilearn-datasets-fetch-coords-seitzman-2018"]], "nilearn.datasets.fetch_development_fmri": [[208, "nilearn-datasets-fetch-development-fmri"]], "Examples using nilearn.datasets.fetch_development_fmri": [[208, "examples-using-nilearn-datasets-fetch-development-fmri"]], "nilearn.datasets.fetch_ds000030_urls": [[209, "nilearn-datasets-fetch-ds000030-urls"]], "Examples using nilearn.datasets.fetch_ds000030_urls": [[209, "examples-using-nilearn-datasets-fetch-ds000030-urls"]], "nilearn.datasets.fetch_fiac_first_level": [[210, "nilearn-datasets-fetch-fiac-first-level"]], "Examples using nilearn.datasets.fetch_fiac_first_level": [[210, "examples-using-nilearn-datasets-fetch-fiac-first-level"]], "nilearn.datasets.fetch_haxby": [[211, "nilearn-datasets-fetch-haxby"]], "Examples using nilearn.datasets.fetch_haxby": [[211, "examples-using-nilearn-datasets-fetch-haxby"]], "nilearn.datasets.fetch_icbm152_2009": [[212, "nilearn-datasets-fetch-icbm152-2009"]], "Examples using nilearn.datasets.fetch_icbm152_2009": [[212, "examples-using-nilearn-datasets-fetch-icbm152-2009"]], "nilearn.datasets.fetch_icbm152_brain_gm_mask": [[213, "nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "Examples using nilearn.datasets.fetch_icbm152_brain_gm_mask": [[213, "examples-using-nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "nilearn.datasets.fetch_language_localizer_demo_dataset": [[214, "nilearn-datasets-fetch-language-localizer-demo-dataset"]], "Examples using nilearn.datasets.fetch_language_localizer_demo_dataset": [[214, "examples-using-nilearn-datasets-fetch-language-localizer-demo-dataset"]], "nilearn.datasets.fetch_localizer_button_task": [[215, "nilearn-datasets-fetch-localizer-button-task"]], "Examples using nilearn.datasets.fetch_localizer_button_task": [[215, "examples-using-nilearn-datasets-fetch-localizer-button-task"]], "nilearn.datasets.fetch_localizer_calculation_task": [[216, "nilearn-datasets-fetch-localizer-calculation-task"]], "Examples using nilearn.datasets.fetch_localizer_calculation_task": [[216, "examples-using-nilearn-datasets-fetch-localizer-calculation-task"]], "nilearn.datasets.fetch_localizer_contrasts": [[217, "nilearn-datasets-fetch-localizer-contrasts"]], "Examples using nilearn.datasets.fetch_localizer_contrasts": [[217, "examples-using-nilearn-datasets-fetch-localizer-contrasts"]], "nilearn.datasets.fetch_localizer_first_level": [[218, "nilearn-datasets-fetch-localizer-first-level"]], "Examples using nilearn.datasets.fetch_localizer_first_level": [[218, "examples-using-nilearn-datasets-fetch-localizer-first-level"]], "nilearn.datasets.fetch_megatrawls_netmats": [[219, "nilearn-datasets-fetch-megatrawls-netmats"]], "Examples using nilearn.datasets.fetch_megatrawls_netmats": [[219, "examples-using-nilearn-datasets-fetch-megatrawls-netmats"]], "nilearn.datasets.fetch_mixed_gambles": [[220, "nilearn-datasets-fetch-mixed-gambles"]], "Examples using nilearn.datasets.fetch_mixed_gambles": [[220, "examples-using-nilearn-datasets-fetch-mixed-gambles"]], "nilearn.datasets.fetch_miyawaki2008": [[221, "nilearn-datasets-fetch-miyawaki2008"]], "Examples using nilearn.datasets.fetch_miyawaki2008": [[221, "examples-using-nilearn-datasets-fetch-miyawaki2008"]], "nilearn.datasets.fetch_neurovault": [[222, "nilearn-datasets-fetch-neurovault"]], "Examples using nilearn.datasets.fetch_neurovault": [[222, "examples-using-nilearn-datasets-fetch-neurovault"]], "nilearn.datasets.fetch_neurovault_auditory_computation_task": [[223, "nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "Examples using nilearn.datasets.fetch_neurovault_auditory_computation_task": [[223, "examples-using-nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "nilearn.datasets.fetch_neurovault_ids": [[224, "nilearn-datasets-fetch-neurovault-ids"]], "Examples using nilearn.datasets.fetch_neurovault_ids": [[224, "examples-using-nilearn-datasets-fetch-neurovault-ids"]], "nilearn.datasets.fetch_neurovault_motor_task": [[225, "nilearn-datasets-fetch-neurovault-motor-task"]], "Examples using nilearn.datasets.fetch_neurovault_motor_task": [[225, "examples-using-nilearn-datasets-fetch-neurovault-motor-task"]], "nilearn.datasets.fetch_oasis_vbm": [[226, "nilearn-datasets-fetch-oasis-vbm"]], "Examples using nilearn.datasets.fetch_oasis_vbm": [[226, "examples-using-nilearn-datasets-fetch-oasis-vbm"]], "nilearn.datasets.fetch_openneuro_dataset": [[227, "nilearn-datasets-fetch-openneuro-dataset"]], "Examples using nilearn.datasets.fetch_openneuro_dataset": [[227, "examples-using-nilearn-datasets-fetch-openneuro-dataset"]], "nilearn.datasets.fetch_openneuro_dataset_index": [[228, "nilearn-datasets-fetch-openneuro-dataset-index"]], "nilearn.datasets.fetch_spm_auditory": [[229, "nilearn-datasets-fetch-spm-auditory"]], "Examples using nilearn.datasets.fetch_spm_auditory": [[229, "examples-using-nilearn-datasets-fetch-spm-auditory"]], "nilearn.datasets.fetch_spm_multimodal_fmri": [[230, "nilearn-datasets-fetch-spm-multimodal-fmri"]], "Examples using nilearn.datasets.fetch_spm_multimodal_fmri": [[230, "examples-using-nilearn-datasets-fetch-spm-multimodal-fmri"]], "nilearn.datasets.fetch_surf_fsaverage": [[231, "nilearn-datasets-fetch-surf-fsaverage"]], "Examples using nilearn.datasets.fetch_surf_fsaverage": [[231, "examples-using-nilearn-datasets-fetch-surf-fsaverage"]], "nilearn.datasets.fetch_surf_nki_enhanced": [[232, "nilearn-datasets-fetch-surf-nki-enhanced"]], "Examples using nilearn.datasets.fetch_surf_nki_enhanced": [[232, "examples-using-nilearn-datasets-fetch-surf-nki-enhanced"]], "nilearn.datasets.get_data_dirs": [[233, "nilearn-datasets-get-data-dirs"]], "Examples using nilearn.datasets.get_data_dirs": [[233, "examples-using-nilearn-datasets-get-data-dirs"]], "nilearn.datasets.load_mni152_brain_mask": [[234, "nilearn-datasets-load-mni152-brain-mask"]], "Examples using nilearn.datasets.load_mni152_brain_mask": [[234, "examples-using-nilearn-datasets-load-mni152-brain-mask"]], "nilearn.datasets.load_mni152_gm_mask": [[235, "nilearn-datasets-load-mni152-gm-mask"]], "nilearn.datasets.load_mni152_gm_template": [[236, "nilearn-datasets-load-mni152-gm-template"]], "nilearn.datasets.load_mni152_template": [[237, "nilearn-datasets-load-mni152-template"]], "Examples using nilearn.datasets.load_mni152_template": [[237, "examples-using-nilearn-datasets-load-mni152-template"]], "nilearn.datasets.load_mni152_wm_mask": [[238, "nilearn-datasets-load-mni152-wm-mask"]], "nilearn.datasets.load_mni152_wm_template": [[239, "nilearn-datasets-load-mni152-wm-template"]], "nilearn.datasets.patch_openneuro_dataset": [[240, "nilearn-datasets-patch-openneuro-dataset"]], "nilearn.datasets.select_from_index": [[241, "nilearn-datasets-select-from-index"]], "Examples using nilearn.datasets.select_from_index": [[241, "examples-using-nilearn-datasets-select-from-index"]], "nilearn.decoding.Decoder": [[242, "nilearn-decoding-decoder"]], "Examples using nilearn.decoding.Decoder": [[242, "examples-using-nilearn-decoding-decoder"]], "nilearn.decoding.DecoderRegressor": [[243, "nilearn-decoding-decoderregressor"]], "Examples using nilearn.decoding.DecoderRegressor": [[243, "examples-using-nilearn-decoding-decoderregressor"]], "nilearn.decoding.FREMClassifier": [[244, "nilearn-decoding-fremclassifier"]], "Examples using nilearn.decoding.FREMClassifier": [[244, "examples-using-nilearn-decoding-fremclassifier"]], "nilearn.decoding.FREMRegressor": [[245, "nilearn-decoding-fremregressor"]], "Examples using nilearn.decoding.FREMRegressor": [[245, "examples-using-nilearn-decoding-fremregressor"]], "nilearn.decoding.SearchLight": [[246, "nilearn-decoding-searchlight"]], "Examples using nilearn.decoding.SearchLight": [[246, "examples-using-nilearn-decoding-searchlight"]], "nilearn.decoding.SpaceNetClassifier": [[247, "nilearn-decoding-spacenetclassifier"]], "nilearn.decoding.SpaceNetRegressor": [[248, "nilearn-decoding-spacenetregressor"]], "Examples using nilearn.decoding.SpaceNetRegressor": [[248, "examples-using-nilearn-decoding-spacenetregressor"]], "nilearn.decomposition.CanICA": [[249, "nilearn-decomposition-canica"]], "Examples using nilearn.decomposition.CanICA": [[249, "examples-using-nilearn-decomposition-canica"]], "nilearn.decomposition.DictLearning": [[250, "nilearn-decomposition-dictlearning"]], "Examples using nilearn.decomposition.DictLearning": [[250, "examples-using-nilearn-decomposition-dictlearning"]], "nilearn.glm.ARModel": [[251, "nilearn-glm-armodel"]], "nilearn.glm.Contrast": [[252, "nilearn-glm-contrast"]], "Examples using nilearn.glm.Contrast": [[252, "examples-using-nilearn-glm-contrast"]], "nilearn.glm.FContrastResults": [[253, "nilearn-glm-fcontrastresults"]], "nilearn.glm.LikelihoodModelResults": [[254, "nilearn-glm-likelihoodmodelresults"]], "nilearn.glm.OLSModel": [[255, "nilearn-glm-olsmodel"]], "nilearn.glm.RegressionResults": [[256, "nilearn-glm-regressionresults"]], "nilearn.glm.SimpleRegressionResults": [[257, "nilearn-glm-simpleregressionresults"]], "nilearn.glm.TContrastResults": [[258, "nilearn-glm-tcontrastresults"]], "nilearn.glm.cluster_level_inference": [[259, "nilearn-glm-cluster-level-inference"]], "Examples using nilearn.glm.cluster_level_inference": [[259, "examples-using-nilearn-glm-cluster-level-inference"]], "nilearn.glm.compute_contrast": [[260, "nilearn-glm-compute-contrast"]], "Examples using nilearn.glm.compute_contrast": [[260, "examples-using-nilearn-glm-compute-contrast"]], "nilearn.glm.compute_fixed_effects": [[261, "nilearn-glm-compute-fixed-effects"]], "Examples using nilearn.glm.compute_fixed_effects": [[261, "examples-using-nilearn-glm-compute-fixed-effects"]], "nilearn.glm.expression_to_contrast_vector": [[262, "nilearn-glm-expression-to-contrast-vector"]], "nilearn.glm.fdr_threshold": [[263, "nilearn-glm-fdr-threshold"]], "nilearn.glm.first_level.FirstLevelModel": [[264, "nilearn-glm-first-level-firstlevelmodel"]], "Examples using nilearn.glm.first_level.FirstLevelModel": [[264, "examples-using-nilearn-glm-first-level-firstlevelmodel"]], "nilearn.glm.first_level.check_design_matrix": [[265, "nilearn-glm-first-level-check-design-matrix"]], "nilearn.glm.first_level.compute_regressor": [[266, "nilearn-glm-first-level-compute-regressor"]], "Examples using nilearn.glm.first_level.compute_regressor": [[266, "examples-using-nilearn-glm-first-level-compute-regressor"]], "nilearn.glm.first_level.first_level_from_bids": [[267, "nilearn-glm-first-level-first-level-from-bids"]], "Examples using nilearn.glm.first_level.first_level_from_bids": [[267, "examples-using-nilearn-glm-first-level-first-level-from-bids"]], "nilearn.glm.first_level.glover_dispersion_derivative": [[268, "nilearn-glm-first-level-glover-dispersion-derivative"]], "nilearn.glm.first_level.glover_hrf": [[269, "nilearn-glm-first-level-glover-hrf"]], "nilearn.glm.first_level.glover_time_derivative": [[270, "nilearn-glm-first-level-glover-time-derivative"]], "nilearn.glm.first_level.make_first_level_design_matrix": [[271, "nilearn-glm-first-level-make-first-level-design-matrix"]], "Examples using nilearn.glm.first_level.make_first_level_design_matrix": [[271, "examples-using-nilearn-glm-first-level-make-first-level-design-matrix"]], "nilearn.glm.first_level.mean_scaling": [[272, "nilearn-glm-first-level-mean-scaling"]], "nilearn.glm.first_level.run_glm": [[273, "nilearn-glm-first-level-run-glm"]], "Examples using nilearn.glm.first_level.run_glm": [[273, "examples-using-nilearn-glm-first-level-run-glm"]], "nilearn.glm.first_level.spm_dispersion_derivative": [[274, "nilearn-glm-first-level-spm-dispersion-derivative"]], "nilearn.glm.first_level.spm_hrf": [[275, "nilearn-glm-first-level-spm-hrf"]], "nilearn.glm.first_level.spm_time_derivative": [[276, "nilearn-glm-first-level-spm-time-derivative"]], "nilearn.glm.second_level.SecondLevelModel": [[277, "nilearn-glm-second-level-secondlevelmodel"]], "Examples using nilearn.glm.second_level.SecondLevelModel": [[277, "examples-using-nilearn-glm-second-level-secondlevelmodel"]], "nilearn.glm.second_level.make_second_level_design_matrix": [[278, "nilearn-glm-second-level-make-second-level-design-matrix"]], "Examples using nilearn.glm.second_level.make_second_level_design_matrix": [[278, "examples-using-nilearn-glm-second-level-make-second-level-design-matrix"]], "nilearn.glm.second_level.non_parametric_inference": [[279, "nilearn-glm-second-level-non-parametric-inference"]], "Examples using nilearn.glm.second_level.non_parametric_inference": [[279, "examples-using-nilearn-glm-second-level-non-parametric-inference"]], "nilearn.glm.threshold_stats_img": [[280, "nilearn-glm-threshold-stats-img"]], "Examples using nilearn.glm.threshold_stats_img": [[280, "examples-using-nilearn-glm-threshold-stats-img"]], "nilearn.image.binarize_img": [[281, "nilearn-image-binarize-img"]], "nilearn.image.clean_img": [[282, "nilearn-image-clean-img"]], "Examples using nilearn.image.clean_img": [[282, "examples-using-nilearn-image-clean-img"]], "nilearn.image.concat_imgs": [[283, "nilearn-image-concat-imgs"]], "Examples using nilearn.image.concat_imgs": [[283, "examples-using-nilearn-image-concat-imgs"]], "nilearn.image.coord_transform": [[284, "nilearn-image-coord-transform"]], "Examples using nilearn.image.coord_transform": [[284, "examples-using-nilearn-image-coord-transform"]], "nilearn.image.copy_img": [[285, "nilearn-image-copy-img"]], "nilearn.image.crop_img": [[286, "nilearn-image-crop-img"]], "nilearn.image.get_data": [[287, "nilearn-image-get-data"]], "Examples using nilearn.image.get_data": [[287, "examples-using-nilearn-image-get-data"]], "nilearn.image.high_variance_confounds": [[288, "nilearn-image-high-variance-confounds"]], "Examples using nilearn.image.high_variance_confounds": [[288, "examples-using-nilearn-image-high-variance-confounds"]], "nilearn.image.index_img": [[289, "nilearn-image-index-img"]], "Examples using nilearn.image.index_img": [[289, "examples-using-nilearn-image-index-img"]], "nilearn.image.iter_img": [[290, "nilearn-image-iter-img"]], "Examples using nilearn.image.iter_img": [[290, "examples-using-nilearn-image-iter-img"]], "nilearn.image.largest_connected_component_img": [[291, "nilearn-image-largest-connected-component-img"]], "nilearn.image.load_img": [[292, "nilearn-image-load-img"]], "Examples using nilearn.image.load_img": [[292, "examples-using-nilearn-image-load-img"]], "nilearn.image.math_img": [[293, "nilearn-image-math-img"]], "Examples using nilearn.image.math_img": [[293, "examples-using-nilearn-image-math-img"]], "nilearn.image.mean_img": [[294, "nilearn-image-mean-img"]], "Examples using nilearn.image.mean_img": [[294, "examples-using-nilearn-image-mean-img"]], "nilearn.image.new_img_like": [[295, "nilearn-image-new-img-like"]], "Examples using nilearn.image.new_img_like": [[295, "examples-using-nilearn-image-new-img-like"]], "nilearn.image.reorder_img": [[296, "nilearn-image-reorder-img"]], "nilearn.image.resample_img": [[297, "nilearn-image-resample-img"]], "Examples using nilearn.image.resample_img": [[297, "examples-using-nilearn-image-resample-img"]], "nilearn.image.resample_to_img": [[298, "nilearn-image-resample-to-img"]], "Examples using nilearn.image.resample_to_img": [[298, "examples-using-nilearn-image-resample-to-img"]], "nilearn.image.smooth_img": [[299, "nilearn-image-smooth-img"]], "Examples using nilearn.image.smooth_img": [[299, "examples-using-nilearn-image-smooth-img"]], "nilearn.image.swap_img_hemispheres": [[300, "nilearn-image-swap-img-hemispheres"]], "nilearn.image.threshold_img": [[301, "nilearn-image-threshold-img"]], "Examples using nilearn.image.threshold_img": [[301, "examples-using-nilearn-image-threshold-img"]], "nilearn.interfaces.bids.get_bids_files": [[302, "nilearn-interfaces-bids-get-bids-files"]], "nilearn.interfaces.bids.parse_bids_filename": [[303, "nilearn-interfaces-bids-parse-bids-filename"]], "nilearn.interfaces.bids.save_glm_to_bids": [[304, "nilearn-interfaces-bids-save-glm-to-bids"]], "Examples using nilearn.interfaces.bids.save_glm_to_bids": [[304, "examples-using-nilearn-interfaces-bids-save-glm-to-bids"]], "nilearn.interfaces.fmriprep.load_confounds": [[305, "nilearn-interfaces-fmriprep-load-confounds"]], "Examples using nilearn.interfaces.fmriprep.load_confounds": [[305, "examples-using-nilearn-interfaces-fmriprep-load-confounds"]], "nilearn.interfaces.fmriprep.load_confounds_strategy": [[306, "nilearn-interfaces-fmriprep-load-confounds-strategy"]], "Examples using nilearn.interfaces.fmriprep.load_confounds_strategy": [[306, "examples-using-nilearn-interfaces-fmriprep-load-confounds-strategy"]], "nilearn.interfaces.fsl.get_design_from_fslmat": [[307, "nilearn-interfaces-fsl-get-design-from-fslmat"]], "Examples using nilearn.interfaces.fsl.get_design_from_fslmat": [[307, "examples-using-nilearn-interfaces-fsl-get-design-from-fslmat"]], "nilearn.maskers.BaseMasker": [[308, "nilearn-maskers-basemasker"]], "Examples using nilearn.maskers.BaseMasker": [[308, "examples-using-nilearn-maskers-basemasker"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[309, "nilearn-maskers-multiniftilabelsmasker"]], "Examples using nilearn.maskers.MultiNiftiLabelsMasker": [[309, "examples-using-nilearn-maskers-multiniftilabelsmasker"]], "nilearn.maskers.MultiNiftiMapsMasker": [[310, "nilearn-maskers-multiniftimapsmasker"]], "Examples using nilearn.maskers.MultiNiftiMapsMasker": [[310, "examples-using-nilearn-maskers-multiniftimapsmasker"]], "nilearn.maskers.MultiNiftiMasker": [[311, "nilearn-maskers-multiniftimasker"]], "Examples using nilearn.maskers.MultiNiftiMasker": [[311, "examples-using-nilearn-maskers-multiniftimasker"]], "nilearn.maskers.NiftiLabelsMasker": [[312, "nilearn-maskers-niftilabelsmasker"]], "Examples using nilearn.maskers.NiftiLabelsMasker": [[312, "examples-using-nilearn-maskers-niftilabelsmasker"]], "nilearn.maskers.NiftiMapsMasker": [[313, "nilearn-maskers-niftimapsmasker"]], "Examples using nilearn.maskers.NiftiMapsMasker": [[313, "examples-using-nilearn-maskers-niftimapsmasker"]], "nilearn.maskers.NiftiMasker": [[314, "nilearn-maskers-niftimasker"]], "Examples using nilearn.maskers.NiftiMasker": [[314, "examples-using-nilearn-maskers-niftimasker"]], "nilearn.maskers.NiftiSpheresMasker": [[315, "nilearn-maskers-niftispheresmasker"]], "Examples using nilearn.maskers.NiftiSpheresMasker": [[315, "examples-using-nilearn-maskers-niftispheresmasker"]], "nilearn.masking.apply_mask": [[316, "nilearn-masking-apply-mask"]], "Examples using nilearn.masking.apply_mask": [[316, "examples-using-nilearn-masking-apply-mask"]], "nilearn.masking.compute_background_mask": [[317, "nilearn-masking-compute-background-mask"]], "nilearn.masking.compute_brain_mask": [[318, "nilearn-masking-compute-brain-mask"]], "nilearn.masking.compute_epi_mask": [[319, "nilearn-masking-compute-epi-mask"]], "Examples using nilearn.masking.compute_epi_mask": [[319, "examples-using-nilearn-masking-compute-epi-mask"]], "nilearn.masking.compute_multi_background_mask": [[320, "nilearn-masking-compute-multi-background-mask"]], "nilearn.masking.compute_multi_brain_mask": [[321, "nilearn-masking-compute-multi-brain-mask"]], "nilearn.masking.compute_multi_epi_mask": [[322, "nilearn-masking-compute-multi-epi-mask"]], "nilearn.masking.intersect_masks": [[323, "nilearn-masking-intersect-masks"]], "nilearn.masking.unmask": [[324, "nilearn-masking-unmask"]], "Examples using nilearn.masking.unmask": [[324, "examples-using-nilearn-masking-unmask"]], "nilearn.mass_univariate.permuted_ols": [[325, "nilearn-mass-univariate-permuted-ols"]], "Examples using nilearn.mass_univariate.permuted_ols": [[325, "examples-using-nilearn-mass-univariate-permuted-ols"]], "nilearn.plotting.displays.BaseAxes": [[326, "nilearn-plotting-displays-baseaxes"]], "nilearn.plotting.displays.BaseSlicer": [[327, "nilearn-plotting-displays-baseslicer"]], "nilearn.plotting.displays.CutAxes": [[328, "nilearn-plotting-displays-cutaxes"]], "nilearn.plotting.displays.GlassBrainAxes": [[329, "nilearn-plotting-displays-glassbrainaxes"]], "nilearn.plotting.displays.LProjector": [[330, "nilearn-plotting-displays-lprojector"]], "Examples using nilearn.plotting.displays.LProjector": [[330, "examples-using-nilearn-plotting-displays-lprojector"]], "nilearn.plotting.displays.LRProjector": [[331, "nilearn-plotting-displays-lrprojector"]], "Examples using nilearn.plotting.displays.LRProjector": [[331, "examples-using-nilearn-plotting-displays-lrprojector"]], "nilearn.plotting.displays.LYRProjector": [[332, "nilearn-plotting-displays-lyrprojector"]], "Examples using nilearn.plotting.displays.LYRProjector": [[332, "examples-using-nilearn-plotting-displays-lyrprojector"]], "nilearn.plotting.displays.LYRZProjector": [[333, "nilearn-plotting-displays-lyrzprojector"]], "Examples using nilearn.plotting.displays.LYRZProjector": [[333, "examples-using-nilearn-plotting-displays-lyrzprojector"]], "nilearn.plotting.displays.LZRProjector": [[334, "nilearn-plotting-displays-lzrprojector"]], "Examples using nilearn.plotting.displays.LZRProjector": [[334, "examples-using-nilearn-plotting-displays-lzrprojector"]], "nilearn.plotting.displays.LZRYProjector": [[335, "nilearn-plotting-displays-lzryprojector"]], "Examples using nilearn.plotting.displays.LZRYProjector": [[335, "examples-using-nilearn-plotting-displays-lzryprojector"]], "nilearn.plotting.displays.MosaicSlicer": [[336, "nilearn-plotting-displays-mosaicslicer"]], "Examples using nilearn.plotting.displays.MosaicSlicer": [[336, "examples-using-nilearn-plotting-displays-mosaicslicer"]], "nilearn.plotting.displays.OrthoProjector": [[337, "nilearn-plotting-displays-orthoprojector"]], "Examples using nilearn.plotting.displays.OrthoProjector": [[337, "examples-using-nilearn-plotting-displays-orthoprojector"]], "nilearn.plotting.displays.OrthoSlicer": [[338, "nilearn-plotting-displays-orthoslicer"]], "Examples using nilearn.plotting.displays.OrthoSlicer": [[338, "examples-using-nilearn-plotting-displays-orthoslicer"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[339, "nilearn-plotting-displays-plotlysurfacefigure"]], "Examples using nilearn.plotting.displays.PlotlySurfaceFigure": [[339, "examples-using-nilearn-plotting-displays-plotlysurfacefigure"]], "nilearn.plotting.displays.RProjector": [[340, "nilearn-plotting-displays-rprojector"]], "Examples using nilearn.plotting.displays.RProjector": [[340, "examples-using-nilearn-plotting-displays-rprojector"]], "nilearn.plotting.displays.TiledSlicer": [[341, "nilearn-plotting-displays-tiledslicer"]], "Examples using nilearn.plotting.displays.TiledSlicer": [[341, "examples-using-nilearn-plotting-displays-tiledslicer"]], "nilearn.plotting.displays.XProjector": [[342, "nilearn-plotting-displays-xprojector"]], "Examples using nilearn.plotting.displays.XProjector": [[342, "examples-using-nilearn-plotting-displays-xprojector"]], "nilearn.plotting.displays.XSlicer": [[343, "nilearn-plotting-displays-xslicer"]], "Examples using nilearn.plotting.displays.XSlicer": [[343, "examples-using-nilearn-plotting-displays-xslicer"]], "nilearn.plotting.displays.XZProjector": [[344, "nilearn-plotting-displays-xzprojector"]], "Examples using nilearn.plotting.displays.XZProjector": [[344, "examples-using-nilearn-plotting-displays-xzprojector"]], "nilearn.plotting.displays.XZSlicer": [[345, "nilearn-plotting-displays-xzslicer"]], "Examples using nilearn.plotting.displays.XZSlicer": [[345, "examples-using-nilearn-plotting-displays-xzslicer"]], "nilearn.plotting.displays.YProjector": [[346, "nilearn-plotting-displays-yprojector"]], "Examples using nilearn.plotting.displays.YProjector": [[346, "examples-using-nilearn-plotting-displays-yprojector"]], "nilearn.plotting.displays.YSlicer": [[347, "nilearn-plotting-displays-yslicer"]], "Examples using nilearn.plotting.displays.YSlicer": [[347, "examples-using-nilearn-plotting-displays-yslicer"]], "nilearn.plotting.displays.YXProjector": [[348, "nilearn-plotting-displays-yxprojector"]], "Examples using nilearn.plotting.displays.YXProjector": [[348, "examples-using-nilearn-plotting-displays-yxprojector"]], "nilearn.plotting.displays.YXSlicer": [[349, "nilearn-plotting-displays-yxslicer"]], "Examples using nilearn.plotting.displays.YXSlicer": [[349, "examples-using-nilearn-plotting-displays-yxslicer"]], "nilearn.plotting.displays.YZProjector": [[350, "nilearn-plotting-displays-yzprojector"]], "Examples using nilearn.plotting.displays.YZProjector": [[350, "examples-using-nilearn-plotting-displays-yzprojector"]], "nilearn.plotting.displays.YZSlicer": [[351, "nilearn-plotting-displays-yzslicer"]], "Examples using nilearn.plotting.displays.YZSlicer": [[351, "examples-using-nilearn-plotting-displays-yzslicer"]], "nilearn.plotting.displays.ZProjector": [[352, "nilearn-plotting-displays-zprojector"]], "Examples using nilearn.plotting.displays.ZProjector": [[352, "examples-using-nilearn-plotting-displays-zprojector"]], "nilearn.plotting.displays.ZSlicer": [[353, "nilearn-plotting-displays-zslicer"]], "Examples using nilearn.plotting.displays.ZSlicer": [[353, "examples-using-nilearn-plotting-displays-zslicer"]], "nilearn.plotting.displays.get_projector": [[354, "nilearn-plotting-displays-get-projector"]], "nilearn.plotting.displays.get_slicer": [[355, "nilearn-plotting-displays-get-slicer"]], "nilearn.plotting.find_cut_slices": [[356, "nilearn-plotting-find-cut-slices"]], "nilearn.plotting.find_parcellation_cut_coords": [[357, "nilearn-plotting-find-parcellation-cut-coords"]], "Examples using nilearn.plotting.find_parcellation_cut_coords": [[357, "examples-using-nilearn-plotting-find-parcellation-cut-coords"]], "nilearn.plotting.find_probabilistic_atlas_cut_coords": [[358, "nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "Examples using nilearn.plotting.find_probabilistic_atlas_cut_coords": [[358, "examples-using-nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "nilearn.plotting.find_xyz_cut_coords": [[359, "nilearn-plotting-find-xyz-cut-coords"]], "Examples using nilearn.plotting.find_xyz_cut_coords": [[359, "examples-using-nilearn-plotting-find-xyz-cut-coords"]], "nilearn.plotting.plot_anat": [[360, "nilearn-plotting-plot-anat"]], "Examples using nilearn.plotting.plot_anat": [[360, "examples-using-nilearn-plotting-plot-anat"]], "nilearn.plotting.plot_carpet": [[361, "nilearn-plotting-plot-carpet"]], "Examples using nilearn.plotting.plot_carpet": [[361, "examples-using-nilearn-plotting-plot-carpet"]], "nilearn.plotting.plot_connectome": [[362, "nilearn-plotting-plot-connectome"]], "Examples using nilearn.plotting.plot_connectome": [[362, "examples-using-nilearn-plotting-plot-connectome"]], "nilearn.plotting.plot_contrast_matrix": [[363, "nilearn-plotting-plot-contrast-matrix"]], "Examples using nilearn.plotting.plot_contrast_matrix": [[363, "examples-using-nilearn-plotting-plot-contrast-matrix"]], "nilearn.plotting.plot_design_matrix": [[364, "nilearn-plotting-plot-design-matrix"]], "Examples using nilearn.plotting.plot_design_matrix": [[364, "examples-using-nilearn-plotting-plot-design-matrix"]], "nilearn.plotting.plot_epi": [[365, "nilearn-plotting-plot-epi"]], "Examples using nilearn.plotting.plot_epi": [[365, "examples-using-nilearn-plotting-plot-epi"]], "nilearn.plotting.plot_event": [[366, "nilearn-plotting-plot-event"]], "Examples using nilearn.plotting.plot_event": [[366, "examples-using-nilearn-plotting-plot-event"]], "nilearn.plotting.plot_glass_brain": [[367, "nilearn-plotting-plot-glass-brain"]], "Examples using nilearn.plotting.plot_glass_brain": [[367, "examples-using-nilearn-plotting-plot-glass-brain"]], "nilearn.plotting.plot_img": [[368, "nilearn-plotting-plot-img"]], "Examples using nilearn.plotting.plot_img": [[368, "examples-using-nilearn-plotting-plot-img"]], "nilearn.plotting.plot_img_comparison": [[369, "nilearn-plotting-plot-img-comparison"]], "Examples using nilearn.plotting.plot_img_comparison": [[369, "examples-using-nilearn-plotting-plot-img-comparison"]], "nilearn.plotting.plot_img_on_surf": [[370, "nilearn-plotting-plot-img-on-surf"]], "Examples using nilearn.plotting.plot_img_on_surf": [[370, "examples-using-nilearn-plotting-plot-img-on-surf"]], "nilearn.plotting.plot_markers": [[371, "nilearn-plotting-plot-markers"]], "Examples using nilearn.plotting.plot_markers": [[371, "examples-using-nilearn-plotting-plot-markers"]], "nilearn.plotting.plot_matrix": [[372, "nilearn-plotting-plot-matrix"]], "Examples using nilearn.plotting.plot_matrix": [[372, "examples-using-nilearn-plotting-plot-matrix"]], "nilearn.plotting.plot_prob_atlas": [[373, "nilearn-plotting-plot-prob-atlas"]], "Examples using nilearn.plotting.plot_prob_atlas": [[373, "examples-using-nilearn-plotting-plot-prob-atlas"]], "nilearn.plotting.plot_roi": [[374, "nilearn-plotting-plot-roi"]], "Examples using nilearn.plotting.plot_roi": [[374, "examples-using-nilearn-plotting-plot-roi"]], "nilearn.plotting.plot_stat_map": [[375, "nilearn-plotting-plot-stat-map"]], "Examples using nilearn.plotting.plot_stat_map": [[375, "examples-using-nilearn-plotting-plot-stat-map"]], "nilearn.plotting.plot_surf": [[376, "nilearn-plotting-plot-surf"]], "nilearn.plotting.plot_surf_contours": [[377, "nilearn-plotting-plot-surf-contours"]], "Examples using nilearn.plotting.plot_surf_contours": [[377, "examples-using-nilearn-plotting-plot-surf-contours"]], "nilearn.plotting.plot_surf_roi": [[378, "nilearn-plotting-plot-surf-roi"]], "Examples using nilearn.plotting.plot_surf_roi": [[378, "examples-using-nilearn-plotting-plot-surf-roi"]], "nilearn.plotting.plot_surf_stat_map": [[379, "nilearn-plotting-plot-surf-stat-map"]], "Examples using nilearn.plotting.plot_surf_stat_map": [[379, "examples-using-nilearn-plotting-plot-surf-stat-map"]], "nilearn.plotting.show": [[380, "nilearn-plotting-show"]], "Examples using nilearn.plotting.show": [[380, "examples-using-nilearn-plotting-show"]], "nilearn.plotting.view_connectome": [[381, "nilearn-plotting-view-connectome"]], "Examples using nilearn.plotting.view_connectome": [[381, "examples-using-nilearn-plotting-view-connectome"]], "nilearn.plotting.view_img": [[382, "nilearn-plotting-view-img"]], "Examples using nilearn.plotting.view_img": [[382, "examples-using-nilearn-plotting-view-img"]], "nilearn.plotting.view_img_on_surf": [[383, "nilearn-plotting-view-img-on-surf"]], "Examples using nilearn.plotting.view_img_on_surf": [[383, "examples-using-nilearn-plotting-view-img-on-surf"]], "nilearn.plotting.view_markers": [[384, "nilearn-plotting-view-markers"]], "nilearn.plotting.view_surf": [[385, "nilearn-plotting-view-surf"]], "Examples using nilearn.plotting.view_surf": [[385, "examples-using-nilearn-plotting-view-surf"]], "nilearn.regions.HierarchicalKMeans": [[386, "nilearn-regions-hierarchicalkmeans"]], "nilearn.regions.Parcellations": [[387, "nilearn-regions-parcellations"]], "Examples using nilearn.regions.Parcellations": [[387, "examples-using-nilearn-regions-parcellations"]], "nilearn.regions.ReNA": [[388, "nilearn-regions-rena"]], "nilearn.regions.RegionExtractor": [[389, "nilearn-regions-regionextractor"]], "Examples using nilearn.regions.RegionExtractor": [[389, "examples-using-nilearn-regions-regionextractor"]], "nilearn.regions.connected_label_regions": [[390, "nilearn-regions-connected-label-regions"]], "Examples using nilearn.regions.connected_label_regions": [[390, "examples-using-nilearn-regions-connected-label-regions"]], "nilearn.regions.connected_regions": [[391, "nilearn-regions-connected-regions"]], "Examples using nilearn.regions.connected_regions": [[391, "examples-using-nilearn-regions-connected-regions"]], "nilearn.regions.img_to_signals_labels": [[392, "nilearn-regions-img-to-signals-labels"]], "nilearn.regions.img_to_signals_maps": [[393, "nilearn-regions-img-to-signals-maps"]], "nilearn.regions.recursive_neighbor_agglomeration": [[394, "nilearn-regions-recursive-neighbor-agglomeration"]], "nilearn.regions.signals_to_img_labels": [[395, "nilearn-regions-signals-to-img-labels"]], "nilearn.regions.signals_to_img_maps": [[396, "nilearn-regions-signals-to-img-maps"]], "nilearn.reporting.HTMLReport": [[397, "nilearn-reporting-htmlreport"]], "Examples using nilearn.reporting.HTMLReport": [[397, "examples-using-nilearn-reporting-htmlreport"]], "nilearn.reporting.get_clusters_table": [[398, "nilearn-reporting-get-clusters-table"]], "Examples using nilearn.reporting.get_clusters_table": [[398, "examples-using-nilearn-reporting-get-clusters-table"]], "nilearn.reporting.make_glm_report": [[399, "nilearn-reporting-make-glm-report"]], "Examples using nilearn.reporting.make_glm_report": [[399, "examples-using-nilearn-reporting-make-glm-report"]], "nilearn.signal.butterworth": [[400, "nilearn-signal-butterworth"]], "nilearn.signal.clean": [[401, "nilearn-signal-clean"]], "nilearn.signal.high_variance_confounds": [[402, "nilearn-signal-high-variance-confounds"]], "nilearn.surface.load_surf_data": [[403, "nilearn-surface-load-surf-data"]], "Examples using nilearn.surface.load_surf_data": [[403, "examples-using-nilearn-surface-load-surf-data"]], "nilearn.surface.load_surf_mesh": [[404, "nilearn-surface-load-surf-mesh"]], "Examples using nilearn.surface.load_surf_mesh": [[404, "examples-using-nilearn-surface-load-surf-mesh"]], "nilearn.surface.vol_to_surf": [[405, "nilearn-surface-vol-to-surf"]], "Examples using nilearn.surface.vol_to_surf": [[405, "examples-using-nilearn-surface-vol-to-surf"]], "nilearn.glm: Generalized Linear Models": [[406, "module-nilearn.glm"]], "nilearn.glm.first_level": [[406, "module-nilearn.glm.first_level"]], "nilearn.glm.second_level": [[406, "module-nilearn.glm.second_level"]], "nilearn.image: Image Processing and Resampling Utilities": [[407, "module-nilearn.image"]], "API References": [[408, "api-references"]], "nilearn.interfaces: Loading components from interfaces": [[409, "module-nilearn.interfaces"]], "nilearn.interfaces.bids": [[409, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.fmriprep": [[409, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fsl": [[409, "module-nilearn.interfaces.fsl"]], "nilearn.maskers: Extracting Signals from Brain Images": [[410, "module-nilearn.maskers"]], "nilearn.masking: Data Masking Utilities": [[411, "module-nilearn.masking"]], "nilearn.mass_univariate: Mass-Univariate Analysis": [[412, "module-nilearn.mass_univariate"]], "nilearn.plotting: Plotting Brain Data": [[413, "module-nilearn.plotting"]], "nilearn.plotting.displays: Interacting with figures": [[413, "module-nilearn.plotting.displays"]], "nilearn.regions: Operating on Regions": [[414, "module-nilearn.regions"]], "nilearn.reporting: Reporting Functions": [[415, "module-nilearn.reporting"]], "nilearn.signal: Preprocessing Time Series": [[416, "module-nilearn.signal"]], "nilearn.surface: Manipulating Surface Data": [[417, "module-nilearn.surface"]], "Migrating from Nistats": [[418, "migrating-from-nistats"]], "Datasets": [[418, "datasets"]], "Hemodynamic Models": [[418, "hemodynamic-models"]], "Design matrix": [[418, "design-matrix"]], "Experimental Paradigm": [[418, "experimental-paradigm"]], "Statistical Models": [[418, "statistical-models"]], "Regression Models": [[418, "regression-models"]], "First Level Model": [[418, "first-level-model"]], "Second Level Model": [[418, "second-level-model"]], "Contrasts": [[418, "contrasts"]], "Thresholding Maps": [[418, "thresholding-maps"]], "Report plotting functions": [[418, "report-plotting-functions"]], "Utility functions": [[418, "utility-functions"]], "Plotting brain images": [[419, "plotting-brain-images"]], "Code examples": [[419, null]], "Different plotting functions": [[419, "different-plotting-functions"]], "Different display modes": [[419, "different-display-modes"]], "Available Colormaps": [[419, "available-colormaps"]], "Adding overlays, edges, contours, contour fillings, markers, scale bar": [[419, "adding-overlays-edges-contours-contour-fillings-markers-scale-bar"]], "Displaying or saving to an image file": [[419, "displaying-or-saving-to-an-image-file"]], "Surface plotting": [[419, "surface-plotting"]], "Interactive plots": [[419, "interactive-plots"]], "3D Plots of statistical maps or atlases on the cortical surface": [[419, "d-plots-of-statistical-maps-or-atlases-on-the-cortical-surface"]], "view_img_on_surf: Surface plot using a 3D statistical map": [[419, "view-img-on-surf-surface-plot-using-a-3d-statistical-map"]], "view_surf: Surface plot using a surface map and a cortical mesh": [[419, "view-surf-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "plot_surf_stat_map: Surface plot using a surface map and a cortical mesh": [[419, "plot-surf-stat-map-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "3D Plots of connectomes": [[419, "d-plots-of-connectomes"]], "3D Plots of markers": [[419, "d-plots-of-markers"]], "Interactive visualization of statistical map slices": [[419, "interactive-visualization-of-statistical-map-slices"]], "Quickstart": [[420, "quickstart"]], "nilearn": [[420, "nilearn"]], "Important links": [[420, "important-links"]], "Install": [[420, "install"]], "Latest release": [[420, "latest-release"]], "Development version": [[420, "development-version"]], "Check installation": [[420, "check-installation"]], "Office Hours": [[420, "office-hours"]], "Dependencies": [[420, "dependencies"]], "Development": [[420, "development"]], "User guide": [[421, "user-guide"]], "Table of contents": [[421, "table-of-contents"]]}, "indexentries": {"anova": [[167, "term-ANOVA"]], "auc": [[167, "term-AUC"]], "bids": [[167, "term-BIDS"]], "bold": [[167, "term-BOLD"]], "beta": [[167, "term-Beta"]], "canica": [[167, "term-CanICA"]], "closing": [[167, "term-Closing"]], "decoding": [[167, "term-Decoding"]], "deterministic atlas": [[167, "term-Deterministic-atlas"]], "dictionary learning": [[167, "term-Dictionary-learning"]], "dilation": [[167, "term-Dilation"]], "eeg": [[167, "term-EEG"]], "epi": [[167, "term-EPI"]], "erosion": [[167, "term-Erosion"]], "fdr correction": [[167, "term-FDR-correction"]], "fir": [[167, "term-FIR"]], "fpr correction": [[167, "term-FPR-correction"]], "frem": [[167, "term-FREM"]], "fwer correction": [[167, "term-FWER-correction"]], "fwhm": [[167, "term-FWHM"]], "glm": [[167, "term-GLM"]], "hrf": [[167, "term-HRF"]], "ica": [[167, "term-ICA"]], "meg": [[167, "term-MEG"]], "mni": [[167, "term-MNI"]], "mvpa": [[167, "term-MVPA"]], "neurovault": [[167, "term-Neurovault"]], "opening": [[167, "term-Opening"]], "parameter estimate": [[167, "term-Parameter-estimate"]], "probabilistic atlas": [[167, "term-Probabilistic-atlas"]], "roc": [[167, "term-ROC"]], "rena": [[167, "term-ReNA"]], "snr": [[167, "term-SNR"]], "spm": [[167, "term-SPM"]], "svm": [[167, "term-SVM"]], "searchlight": [[167, "term-Searchlight"]], "spacenet": [[167, "term-SpaceNet"]], "tfce": [[167, "term-TFCE"]], "tr": [[167, "term-TR"]], "unsupervised learning": [[167, "term-Unsupervised-learning"]], "vbm": [[167, "term-VBM"]], "ward clustering": [[167, "term-Ward-clustering"]], "classification": [[167, "term-classification"]], "contrast": [[167, "term-contrast"]], "fmri": [[167, "term-fMRI"]], "fmriprep": [[167, "term-fMRIPrep"]], "functional connectivity": [[167, "term-functional-connectivity"]], "functional connectome": [[167, "term-functional-connectome"]], "parcellation": [[167, "term-parcellation"]], "predictive modelling": [[167, "term-predictive-modelling"]], "regression": [[167, "term-regression"]], "resting-state": [[167, "term-resting-state"]], "supervised learning": [[167, "term-supervised-learning"]], "voxel": [[167, "term-voxel"]], "module": [[175, "module-nilearn.connectome"], [176, "module-nilearn.datasets"], [177, "module-nilearn.decoding"], [178, "module-nilearn.decomposition"], [406, "module-nilearn.glm"], [406, "module-nilearn.glm.first_level"], [406, "module-nilearn.glm.second_level"], [407, "module-nilearn.image"], [409, "module-nilearn.interfaces"], [409, "module-nilearn.interfaces.bids"], [409, "module-nilearn.interfaces.fmriprep"], [409, "module-nilearn.interfaces.fsl"], [410, "module-nilearn.maskers"], [411, "module-nilearn.masking"], [412, "module-nilearn.mass_univariate"], [413, "module-nilearn.plotting"], [413, "module-nilearn.plotting.displays"], [414, "module-nilearn.regions"], [415, "module-nilearn.reporting"], [416, "module-nilearn.signal"], [417, "module-nilearn.surface"]], "nilearn.connectome": [[175, "module-nilearn.connectome"]], "nilearn.datasets": [[176, "module-nilearn.datasets"]], "nilearn.decoding": [[177, "module-nilearn.decoding"]], "nilearn.decomposition": [[178, "module-nilearn.decomposition"]], "connectivitymeasure (class in nilearn.connectome)": [[179, "nilearn.connectome.ConnectivityMeasure"]], "__init__() (nilearn.connectome.connectivitymeasure method)": [[179, "nilearn.connectome.ConnectivityMeasure.__init__"]], "fit() (nilearn.connectome.connectivitymeasure method)": [[179, "nilearn.connectome.ConnectivityMeasure.fit"]], "fit_transform() (nilearn.connectome.connectivitymeasure method)": [[179, "nilearn.connectome.ConnectivityMeasure.fit_transform"]], "get_params() (nilearn.connectome.connectivitymeasure method)": [[179, "nilearn.connectome.ConnectivityMeasure.get_params"]], "inverse_transform() (nilearn.connectome.connectivitymeasure method)": [[179, "nilearn.connectome.ConnectivityMeasure.inverse_transform"]], "set_params() (nilearn.connectome.connectivitymeasure method)": [[179, "nilearn.connectome.ConnectivityMeasure.set_params"]], "transform() (nilearn.connectome.connectivitymeasure method)": [[179, "nilearn.connectome.ConnectivityMeasure.transform"]], "groupsparsecovariance (class in nilearn.connectome)": [[180, "nilearn.connectome.GroupSparseCovariance"]], "__init__() (nilearn.connectome.groupsparsecovariance method)": [[180, "nilearn.connectome.GroupSparseCovariance.__init__"]], "fit() (nilearn.connectome.groupsparsecovariance method)": [[180, "nilearn.connectome.GroupSparseCovariance.fit"]], "get_params() (nilearn.connectome.groupsparsecovariance method)": [[180, "nilearn.connectome.GroupSparseCovariance.get_params"]], "set_params() (nilearn.connectome.groupsparsecovariance method)": [[180, "nilearn.connectome.GroupSparseCovariance.set_params"]], "groupsparsecovariancecv (class in nilearn.connectome)": [[181, "nilearn.connectome.GroupSparseCovarianceCV"]], "__init__() (nilearn.connectome.groupsparsecovariancecv method)": [[181, "nilearn.connectome.GroupSparseCovarianceCV.__init__"]], "fit() (nilearn.connectome.groupsparsecovariancecv method)": [[181, "nilearn.connectome.GroupSparseCovarianceCV.fit"]], "get_params() (nilearn.connectome.groupsparsecovariancecv method)": [[181, "nilearn.connectome.GroupSparseCovarianceCV.get_params"]], "set_params() (nilearn.connectome.groupsparsecovariancecv method)": [[181, "nilearn.connectome.GroupSparseCovarianceCV.set_params"]], "cov_to_corr() (in module nilearn.connectome)": [[182, "nilearn.connectome.cov_to_corr"]], "group_sparse_covariance() (in module nilearn.connectome)": [[183, "nilearn.connectome.group_sparse_covariance"]], "prec_to_partial() (in module nilearn.connectome)": [[184, "nilearn.connectome.prec_to_partial"]], "sym_matrix_to_vec() (in module nilearn.connectome)": [[185, "nilearn.connectome.sym_matrix_to_vec"]], "vec_to_sym_matrix() (in module nilearn.connectome)": [[186, "nilearn.connectome.vec_to_sym_matrix"]], "fetch_abide_pcp() (in module nilearn.datasets)": [[187, "nilearn.datasets.fetch_abide_pcp"]], "fetch_adhd() (in module nilearn.datasets)": [[188, "nilearn.datasets.fetch_adhd"]], "fetch_atlas_aal() (in module nilearn.datasets)": [[189, "nilearn.datasets.fetch_atlas_aal"]], "fetch_atlas_allen_2011() (in module nilearn.datasets)": [[190, "nilearn.datasets.fetch_atlas_allen_2011"]], "fetch_atlas_basc_multiscale_2015() (in module nilearn.datasets)": [[191, "nilearn.datasets.fetch_atlas_basc_multiscale_2015"]], "fetch_atlas_craddock_2012() (in module nilearn.datasets)": [[192, "nilearn.datasets.fetch_atlas_craddock_2012"]], "fetch_atlas_destrieux_2009() (in module nilearn.datasets)": [[193, "nilearn.datasets.fetch_atlas_destrieux_2009"]], "fetch_atlas_difumo() (in module nilearn.datasets)": [[194, "nilearn.datasets.fetch_atlas_difumo"]], "fetch_atlas_harvard_oxford() (in module nilearn.datasets)": [[195, "nilearn.datasets.fetch_atlas_harvard_oxford"]], "fetch_atlas_juelich() (in module nilearn.datasets)": [[196, "nilearn.datasets.fetch_atlas_juelich"]], "fetch_atlas_msdl() (in module nilearn.datasets)": [[197, "nilearn.datasets.fetch_atlas_msdl"]], "fetch_atlas_pauli_2017() (in module nilearn.datasets)": [[198, "nilearn.datasets.fetch_atlas_pauli_2017"]], "fetch_atlas_schaefer_2018() (in module nilearn.datasets)": [[199, "nilearn.datasets.fetch_atlas_schaefer_2018"]], "fetch_atlas_smith_2009() (in module nilearn.datasets)": [[200, "nilearn.datasets.fetch_atlas_smith_2009"]], "fetch_atlas_surf_destrieux() (in module nilearn.datasets)": [[201, "nilearn.datasets.fetch_atlas_surf_destrieux"]], "fetch_atlas_talairach() (in module nilearn.datasets)": [[202, "nilearn.datasets.fetch_atlas_talairach"]], "fetch_atlas_yeo_2011() (in module nilearn.datasets)": [[203, "nilearn.datasets.fetch_atlas_yeo_2011"]], "fetch_bids_langloc_dataset() (in module nilearn.datasets)": [[204, "nilearn.datasets.fetch_bids_langloc_dataset"]], "fetch_coords_dosenbach_2010() (in module nilearn.datasets)": [[205, "nilearn.datasets.fetch_coords_dosenbach_2010"]], "fetch_coords_power_2011() (in module nilearn.datasets)": [[206, "nilearn.datasets.fetch_coords_power_2011"]], "fetch_coords_seitzman_2018() (in module nilearn.datasets)": [[207, "nilearn.datasets.fetch_coords_seitzman_2018"]], "fetch_development_fmri() (in module nilearn.datasets)": [[208, "nilearn.datasets.fetch_development_fmri"]], "fetch_ds000030_urls() (in module nilearn.datasets)": [[209, "nilearn.datasets.fetch_ds000030_urls"]], "fetch_fiac_first_level() (in module nilearn.datasets)": [[210, "nilearn.datasets.fetch_fiac_first_level"]], "fetch_haxby() (in module nilearn.datasets)": [[211, "nilearn.datasets.fetch_haxby"]], "fetch_icbm152_2009() (in module nilearn.datasets)": [[212, "nilearn.datasets.fetch_icbm152_2009"]], "fetch_icbm152_brain_gm_mask() (in module nilearn.datasets)": [[213, "nilearn.datasets.fetch_icbm152_brain_gm_mask"]], "fetch_language_localizer_demo_dataset() (in module nilearn.datasets)": [[214, "nilearn.datasets.fetch_language_localizer_demo_dataset"]], "fetch_localizer_button_task() (in module nilearn.datasets)": [[215, "nilearn.datasets.fetch_localizer_button_task"]], "fetch_localizer_calculation_task() (in module nilearn.datasets)": [[216, "nilearn.datasets.fetch_localizer_calculation_task"]], "fetch_localizer_contrasts() (in module nilearn.datasets)": [[217, "nilearn.datasets.fetch_localizer_contrasts"]], "fetch_localizer_first_level() (in module nilearn.datasets)": [[218, "nilearn.datasets.fetch_localizer_first_level"]], "fetch_megatrawls_netmats() (in module nilearn.datasets)": [[219, "nilearn.datasets.fetch_megatrawls_netmats"]], "fetch_mixed_gambles() (in module nilearn.datasets)": [[220, "nilearn.datasets.fetch_mixed_gambles"]], "fetch_miyawaki2008() (in module nilearn.datasets)": [[221, "nilearn.datasets.fetch_miyawaki2008"]], "fetch_neurovault() (in module nilearn.datasets)": [[222, "nilearn.datasets.fetch_neurovault"]], "fetch_neurovault_auditory_computation_task() (in module nilearn.datasets)": [[223, "nilearn.datasets.fetch_neurovault_auditory_computation_task"]], "fetch_neurovault_ids() (in module nilearn.datasets)": [[224, "nilearn.datasets.fetch_neurovault_ids"]], "fetch_neurovault_motor_task() (in module nilearn.datasets)": [[225, "nilearn.datasets.fetch_neurovault_motor_task"]], "fetch_oasis_vbm() (in module nilearn.datasets)": [[226, "nilearn.datasets.fetch_oasis_vbm"]], "fetch_openneuro_dataset() (in module nilearn.datasets)": [[227, "nilearn.datasets.fetch_openneuro_dataset"]], "fetch_openneuro_dataset_index() (in module nilearn.datasets)": [[228, "nilearn.datasets.fetch_openneuro_dataset_index"]], "fetch_spm_auditory() (in module nilearn.datasets)": [[229, "nilearn.datasets.fetch_spm_auditory"]], "fetch_spm_multimodal_fmri() (in module nilearn.datasets)": [[230, "nilearn.datasets.fetch_spm_multimodal_fmri"]], "fetch_surf_fsaverage() (in module nilearn.datasets)": [[231, "nilearn.datasets.fetch_surf_fsaverage"]], "fetch_surf_nki_enhanced() (in module nilearn.datasets)": [[232, "nilearn.datasets.fetch_surf_nki_enhanced"]], "get_data_dirs() (in module nilearn.datasets)": [[233, "nilearn.datasets.get_data_dirs"]], "load_mni152_brain_mask() (in module nilearn.datasets)": [[234, "nilearn.datasets.load_mni152_brain_mask"]], "load_mni152_gm_mask() (in module nilearn.datasets)": [[235, "nilearn.datasets.load_mni152_gm_mask"]], "load_mni152_gm_template() (in module nilearn.datasets)": [[236, "nilearn.datasets.load_mni152_gm_template"]], "load_mni152_template() (in module nilearn.datasets)": [[237, "nilearn.datasets.load_mni152_template"]], "load_mni152_wm_mask() (in module nilearn.datasets)": [[238, "nilearn.datasets.load_mni152_wm_mask"]], "load_mni152_wm_template() (in module nilearn.datasets)": [[239, "nilearn.datasets.load_mni152_wm_template"]], "patch_openneuro_dataset() (in module nilearn.datasets)": [[240, "nilearn.datasets.patch_openneuro_dataset"]], "select_from_index() (in module nilearn.datasets)": [[241, "nilearn.datasets.select_from_index"]], "decoder (class in nilearn.decoding)": [[242, "nilearn.decoding.Decoder"]], "__init__() (nilearn.decoding.decoder method)": [[242, "nilearn.decoding.Decoder.__init__"]], "decision_function() (nilearn.decoding.decoder method)": [[242, "nilearn.decoding.Decoder.decision_function"]], "fit() (nilearn.decoding.decoder method)": [[242, "nilearn.decoding.Decoder.fit"]], "get_params() (nilearn.decoding.decoder method)": [[242, "nilearn.decoding.Decoder.get_params"]], "predict() (nilearn.decoding.decoder method)": [[242, "nilearn.decoding.Decoder.predict"]], "score() (nilearn.decoding.decoder method)": [[242, "nilearn.decoding.Decoder.score"]], "set_params() (nilearn.decoding.decoder method)": [[242, "nilearn.decoding.Decoder.set_params"]], "decoderregressor (class in nilearn.decoding)": [[243, "nilearn.decoding.DecoderRegressor"]], "__init__() (nilearn.decoding.decoderregressor method)": [[243, "nilearn.decoding.DecoderRegressor.__init__"]], "decision_function() (nilearn.decoding.decoderregressor method)": [[243, "nilearn.decoding.DecoderRegressor.decision_function"]], "fit() (nilearn.decoding.decoderregressor method)": [[243, "nilearn.decoding.DecoderRegressor.fit"]], "get_params() (nilearn.decoding.decoderregressor method)": [[243, "nilearn.decoding.DecoderRegressor.get_params"]], "predict() (nilearn.decoding.decoderregressor method)": [[243, "nilearn.decoding.DecoderRegressor.predict"]], "score() (nilearn.decoding.decoderregressor method)": [[243, "nilearn.decoding.DecoderRegressor.score"]], "set_params() (nilearn.decoding.decoderregressor method)": [[243, "nilearn.decoding.DecoderRegressor.set_params"]], "fremclassifier (class in nilearn.decoding)": [[244, "nilearn.decoding.FREMClassifier"]], "__init__() (nilearn.decoding.fremclassifier method)": [[244, "nilearn.decoding.FREMClassifier.__init__"]], "decision_function() (nilearn.decoding.fremclassifier method)": [[244, "nilearn.decoding.FREMClassifier.decision_function"]], "fit() (nilearn.decoding.fremclassifier method)": [[244, "nilearn.decoding.FREMClassifier.fit"]], "get_params() (nilearn.decoding.fremclassifier method)": [[244, "nilearn.decoding.FREMClassifier.get_params"]], "predict() (nilearn.decoding.fremclassifier method)": [[244, "nilearn.decoding.FREMClassifier.predict"]], "score() (nilearn.decoding.fremclassifier method)": [[244, "nilearn.decoding.FREMClassifier.score"]], "set_params() (nilearn.decoding.fremclassifier method)": [[244, "nilearn.decoding.FREMClassifier.set_params"]], "fremregressor (class in nilearn.decoding)": [[245, "nilearn.decoding.FREMRegressor"]], "__init__() (nilearn.decoding.fremregressor method)": [[245, "nilearn.decoding.FREMRegressor.__init__"]], "decision_function() (nilearn.decoding.fremregressor method)": [[245, "nilearn.decoding.FREMRegressor.decision_function"]], "fit() (nilearn.decoding.fremregressor method)": [[245, "nilearn.decoding.FREMRegressor.fit"]], "get_params() (nilearn.decoding.fremregressor method)": [[245, "nilearn.decoding.FREMRegressor.get_params"]], "predict() (nilearn.decoding.fremregressor method)": [[245, "nilearn.decoding.FREMRegressor.predict"]], "score() (nilearn.decoding.fremregressor method)": [[245, "nilearn.decoding.FREMRegressor.score"]], "set_params() (nilearn.decoding.fremregressor method)": [[245, "nilearn.decoding.FREMRegressor.set_params"]], "searchlight (class in nilearn.decoding)": [[246, "nilearn.decoding.SearchLight"]], "__init__() (nilearn.decoding.searchlight method)": [[246, "nilearn.decoding.SearchLight.__init__"]], "fit() (nilearn.decoding.searchlight method)": [[246, "nilearn.decoding.SearchLight.fit"]], "get_params() (nilearn.decoding.searchlight method)": [[246, "nilearn.decoding.SearchLight.get_params"]], "set_params() (nilearn.decoding.searchlight method)": [[246, "nilearn.decoding.SearchLight.set_params"]], "supported_losses (nilearn.decoding.spacenetclassifier attribute)": [[247, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_LOSSES"]], "supported_penalties (nilearn.decoding.spacenetclassifier attribute)": [[247, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_PENALTIES"]], "spacenetclassifier (class in nilearn.decoding)": [[247, "nilearn.decoding.SpaceNetClassifier"]], "__init__() (nilearn.decoding.spacenetclassifier method)": [[247, "nilearn.decoding.SpaceNetClassifier.__init__"]], "check_params() (nilearn.decoding.spacenetclassifier method)": [[247, "nilearn.decoding.SpaceNetClassifier.check_params"]], "decision_function() (nilearn.decoding.spacenetclassifier method)": [[247, "nilearn.decoding.SpaceNetClassifier.decision_function"]], "fit() (nilearn.decoding.spacenetclassifier method)": [[247, "nilearn.decoding.SpaceNetClassifier.fit"]], "get_params() (nilearn.decoding.spacenetclassifier method)": [[247, "nilearn.decoding.SpaceNetClassifier.get_params"]], "predict() (nilearn.decoding.spacenetclassifier method)": [[247, "nilearn.decoding.SpaceNetClassifier.predict"]], "score() (nilearn.decoding.spacenetclassifier method)": [[247, "nilearn.decoding.SpaceNetClassifier.score"]], "set_params() (nilearn.decoding.spacenetclassifier method)": [[247, "nilearn.decoding.SpaceNetClassifier.set_params"]], "supported_losses (nilearn.decoding.spacenetregressor attribute)": [[248, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_LOSSES"]], "supported_penalties (nilearn.decoding.spacenetregressor attribute)": [[248, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_PENALTIES"]], "spacenetregressor (class in nilearn.decoding)": [[248, "nilearn.decoding.SpaceNetRegressor"]], "__init__() (nilearn.decoding.spacenetregressor method)": [[248, "nilearn.decoding.SpaceNetRegressor.__init__"]], "check_params() (nilearn.decoding.spacenetregressor method)": [[248, "nilearn.decoding.SpaceNetRegressor.check_params"]], "decision_function() (nilearn.decoding.spacenetregressor method)": [[248, "nilearn.decoding.SpaceNetRegressor.decision_function"]], "fit() (nilearn.decoding.spacenetregressor method)": [[248, "nilearn.decoding.SpaceNetRegressor.fit"]], "get_params() (nilearn.decoding.spacenetregressor method)": [[248, "nilearn.decoding.SpaceNetRegressor.get_params"]], "predict() (nilearn.decoding.spacenetregressor method)": [[248, "nilearn.decoding.SpaceNetRegressor.predict"]], "score() (nilearn.decoding.spacenetregressor method)": [[248, "nilearn.decoding.SpaceNetRegressor.score"]], "set_params() (nilearn.decoding.spacenetregressor method)": [[248, "nilearn.decoding.SpaceNetRegressor.set_params"]], "canica (class in nilearn.decomposition)": [[249, "nilearn.decomposition.CanICA"]], "__init__() (nilearn.decomposition.canica method)": [[249, "nilearn.decomposition.CanICA.__init__"]], "fit() (nilearn.decomposition.canica method)": [[249, "nilearn.decomposition.CanICA.fit"]], "fit_transform() (nilearn.decomposition.canica method)": [[249, "nilearn.decomposition.CanICA.fit_transform"]], "get_params() (nilearn.decomposition.canica method)": [[249, "nilearn.decomposition.CanICA.get_params"]], "inverse_transform() (nilearn.decomposition.canica method)": [[249, "nilearn.decomposition.CanICA.inverse_transform"]], "score() (nilearn.decomposition.canica method)": [[249, "nilearn.decomposition.CanICA.score"]], "set_params() (nilearn.decomposition.canica method)": [[249, "nilearn.decomposition.CanICA.set_params"]], "transform() (nilearn.decomposition.canica method)": [[249, "nilearn.decomposition.CanICA.transform"]], "dictlearning (class in nilearn.decomposition)": [[250, "nilearn.decomposition.DictLearning"]], "__init__() (nilearn.decomposition.dictlearning method)": [[250, "nilearn.decomposition.DictLearning.__init__"]], "fit() (nilearn.decomposition.dictlearning method)": [[250, "nilearn.decomposition.DictLearning.fit"]], "fit_transform() (nilearn.decomposition.dictlearning method)": [[250, "nilearn.decomposition.DictLearning.fit_transform"]], "get_params() (nilearn.decomposition.dictlearning method)": [[250, "nilearn.decomposition.DictLearning.get_params"]], "inverse_transform() (nilearn.decomposition.dictlearning method)": [[250, "nilearn.decomposition.DictLearning.inverse_transform"]], "score() (nilearn.decomposition.dictlearning method)": [[250, "nilearn.decomposition.DictLearning.score"]], "set_params() (nilearn.decomposition.dictlearning method)": [[250, "nilearn.decomposition.DictLearning.set_params"]], "transform() (nilearn.decomposition.dictlearning method)": [[250, "nilearn.decomposition.DictLearning.transform"]], "armodel (class in nilearn.glm)": [[251, "nilearn.glm.ARModel"]], "__init__() (nilearn.glm.armodel method)": [[251, "nilearn.glm.ARModel.__init__"]], "fit() (nilearn.glm.armodel method)": [[251, "nilearn.glm.ARModel.fit"]], "initialize() (nilearn.glm.armodel method)": [[251, "nilearn.glm.ARModel.initialize"]], "logl() (nilearn.glm.armodel method)": [[251, "nilearn.glm.ARModel.logL"]], "whiten() (nilearn.glm.armodel method)": [[251, "nilearn.glm.ARModel.whiten"]], "contrast (class in nilearn.glm)": [[252, "nilearn.glm.Contrast"]], "__init__() (nilearn.glm.contrast method)": [[252, "nilearn.glm.Contrast.__init__"]], "effect_size() (nilearn.glm.contrast method)": [[252, "nilearn.glm.Contrast.effect_size"]], "effect_variance() (nilearn.glm.contrast method)": [[252, "nilearn.glm.Contrast.effect_variance"]], "one_minus_pvalue() (nilearn.glm.contrast method)": [[252, "nilearn.glm.Contrast.one_minus_pvalue"]], "p_value() (nilearn.glm.contrast method)": [[252, "nilearn.glm.Contrast.p_value"]], "stat() (nilearn.glm.contrast method)": [[252, "nilearn.glm.Contrast.stat"]], "z_score() (nilearn.glm.contrast method)": [[252, "nilearn.glm.Contrast.z_score"]], "fcontrastresults (class in nilearn.glm)": [[253, "nilearn.glm.FContrastResults"]], "__init__() (nilearn.glm.fcontrastresults method)": [[253, "nilearn.glm.FContrastResults.__init__"]], "fcontrast() (nilearn.glm.likelihoodmodelresults method)": [[254, "nilearn.glm.LikelihoodModelResults.Fcontrast"]], "likelihoodmodelresults (class in nilearn.glm)": [[254, "nilearn.glm.LikelihoodModelResults"]], "tcontrast() (nilearn.glm.likelihoodmodelresults method)": [[254, "nilearn.glm.LikelihoodModelResults.Tcontrast"]], "__init__() (nilearn.glm.likelihoodmodelresults method)": [[254, "nilearn.glm.LikelihoodModelResults.__init__"]], "conf_int() (nilearn.glm.likelihoodmodelresults method)": [[254, "nilearn.glm.LikelihoodModelResults.conf_int"]], "logl() (nilearn.glm.likelihoodmodelresults method)": [[254, "nilearn.glm.LikelihoodModelResults.logL"]], "t() (nilearn.glm.likelihoodmodelresults method)": [[254, "nilearn.glm.LikelihoodModelResults.t"]], "vcov() (nilearn.glm.likelihoodmodelresults method)": [[254, "nilearn.glm.LikelihoodModelResults.vcov"]], "olsmodel (class in nilearn.glm)": [[255, "nilearn.glm.OLSModel"]], "__init__() (nilearn.glm.olsmodel method)": [[255, "nilearn.glm.OLSModel.__init__"]], "fit() (nilearn.glm.olsmodel method)": [[255, "nilearn.glm.OLSModel.fit"]], "initialize() (nilearn.glm.olsmodel method)": [[255, "nilearn.glm.OLSModel.initialize"]], "logl() (nilearn.glm.olsmodel method)": [[255, "nilearn.glm.OLSModel.logL"]], "whiten() (nilearn.glm.olsmodel method)": [[255, "nilearn.glm.OLSModel.whiten"]], "fcontrast() (nilearn.glm.regressionresults method)": [[256, "nilearn.glm.RegressionResults.Fcontrast"]], "mse() (nilearn.glm.regressionresults method)": [[256, "nilearn.glm.RegressionResults.MSE"]], "regressionresults (class in nilearn.glm)": [[256, "nilearn.glm.RegressionResults"]], "sse() (nilearn.glm.regressionresults method)": [[256, "nilearn.glm.RegressionResults.SSE"]], "tcontrast() (nilearn.glm.regressionresults method)": [[256, "nilearn.glm.RegressionResults.Tcontrast"]], "__init__() (nilearn.glm.regressionresults method)": [[256, "nilearn.glm.RegressionResults.__init__"]], "conf_int() (nilearn.glm.regressionresults method)": [[256, "nilearn.glm.RegressionResults.conf_int"]], "logl() (nilearn.glm.regressionresults method)": [[256, "nilearn.glm.RegressionResults.logL"]], "normalized_residuals() (nilearn.glm.regressionresults method)": [[256, "nilearn.glm.RegressionResults.normalized_residuals"]], "predicted() (nilearn.glm.regressionresults method)": [[256, "nilearn.glm.RegressionResults.predicted"]], "r_square() (nilearn.glm.regressionresults method)": [[256, "nilearn.glm.RegressionResults.r_square"]], "residuals() (nilearn.glm.regressionresults method)": [[256, "nilearn.glm.RegressionResults.residuals"]], "t() (nilearn.glm.regressionresults method)": [[256, "nilearn.glm.RegressionResults.t"]], "vcov() (nilearn.glm.regressionresults method)": [[256, "nilearn.glm.RegressionResults.vcov"]], "fcontrast() (nilearn.glm.simpleregressionresults method)": [[257, "nilearn.glm.SimpleRegressionResults.Fcontrast"]], "simpleregressionresults (class in nilearn.glm)": [[257, "nilearn.glm.SimpleRegressionResults"]], "tcontrast() (nilearn.glm.simpleregressionresults method)": [[257, "nilearn.glm.SimpleRegressionResults.Tcontrast"]], "__init__() (nilearn.glm.simpleregressionresults method)": [[257, "nilearn.glm.SimpleRegressionResults.__init__"]], "conf_int() (nilearn.glm.simpleregressionresults method)": [[257, "nilearn.glm.SimpleRegressionResults.conf_int"]], "logl() (nilearn.glm.simpleregressionresults method)": [[257, "nilearn.glm.SimpleRegressionResults.logL"]], "normalized_residuals() (nilearn.glm.simpleregressionresults method)": [[257, "nilearn.glm.SimpleRegressionResults.normalized_residuals"]], "predicted() (nilearn.glm.simpleregressionresults method)": [[257, "nilearn.glm.SimpleRegressionResults.predicted"]], "residuals() (nilearn.glm.simpleregressionresults method)": [[257, "nilearn.glm.SimpleRegressionResults.residuals"]], "t() (nilearn.glm.simpleregressionresults method)": [[257, "nilearn.glm.SimpleRegressionResults.t"]], "vcov() (nilearn.glm.simpleregressionresults method)": [[257, "nilearn.glm.SimpleRegressionResults.vcov"]], "tcontrastresults (class in nilearn.glm)": [[258, "nilearn.glm.TContrastResults"]], "__init__() (nilearn.glm.tcontrastresults method)": [[258, "nilearn.glm.TContrastResults.__init__"]], "cluster_level_inference() (in module nilearn.glm)": [[259, "nilearn.glm.cluster_level_inference"]], "compute_contrast() (in module nilearn.glm)": [[260, "nilearn.glm.compute_contrast"]], "compute_fixed_effects() (in module nilearn.glm)": [[261, "nilearn.glm.compute_fixed_effects"]], "expression_to_contrast_vector() (in module nilearn.glm)": [[262, "nilearn.glm.expression_to_contrast_vector"]], "fdr_threshold() (in module nilearn.glm)": [[263, "nilearn.glm.fdr_threshold"]], "firstlevelmodel (class in nilearn.glm.first_level)": [[264, "nilearn.glm.first_level.FirstLevelModel"]], "__init__() (nilearn.glm.first_level.firstlevelmodel method)": [[264, "nilearn.glm.first_level.FirstLevelModel.__init__"]], "compute_contrast() (nilearn.glm.first_level.firstlevelmodel method)": [[264, "nilearn.glm.first_level.FirstLevelModel.compute_contrast"]], "fit() (nilearn.glm.first_level.firstlevelmodel method)": [[264, "nilearn.glm.first_level.FirstLevelModel.fit"]], "fit_transform() (nilearn.glm.first_level.firstlevelmodel method)": [[264, "nilearn.glm.first_level.FirstLevelModel.fit_transform"]], "generate_report() (nilearn.glm.first_level.firstlevelmodel method)": [[264, "nilearn.glm.first_level.FirstLevelModel.generate_report"]], "get_params() (nilearn.glm.first_level.firstlevelmodel method)": [[264, "nilearn.glm.first_level.FirstLevelModel.get_params"]], "predicted() (nilearn.glm.first_level.firstlevelmodel method)": [[264, "nilearn.glm.first_level.FirstLevelModel.predicted"]], "r_square() (nilearn.glm.first_level.firstlevelmodel method)": [[264, "nilearn.glm.first_level.FirstLevelModel.r_square"]], "residuals() (nilearn.glm.first_level.firstlevelmodel method)": [[264, "nilearn.glm.first_level.FirstLevelModel.residuals"]], "scaling_axis (nilearn.glm.first_level.firstlevelmodel property)": [[264, "nilearn.glm.first_level.FirstLevelModel.scaling_axis"]], "set_params() (nilearn.glm.first_level.firstlevelmodel method)": [[264, "nilearn.glm.first_level.FirstLevelModel.set_params"]], "check_design_matrix() (in module nilearn.glm.first_level)": [[265, "nilearn.glm.first_level.check_design_matrix"]], "compute_regressor() (in module nilearn.glm.first_level)": [[266, "nilearn.glm.first_level.compute_regressor"]], "first_level_from_bids() (in module nilearn.glm.first_level)": [[267, "nilearn.glm.first_level.first_level_from_bids"]], "glover_dispersion_derivative() (in module nilearn.glm.first_level)": [[268, "nilearn.glm.first_level.glover_dispersion_derivative"]], "glover_hrf() (in module nilearn.glm.first_level)": [[269, "nilearn.glm.first_level.glover_hrf"]], "glover_time_derivative() (in module nilearn.glm.first_level)": [[270, "nilearn.glm.first_level.glover_time_derivative"]], "make_first_level_design_matrix() (in module nilearn.glm.first_level)": [[271, "nilearn.glm.first_level.make_first_level_design_matrix"]], "mean_scaling() (in module nilearn.glm.first_level)": [[272, "nilearn.glm.first_level.mean_scaling"]], "run_glm() (in module nilearn.glm.first_level)": [[273, "nilearn.glm.first_level.run_glm"]], "spm_dispersion_derivative() (in module nilearn.glm.first_level)": [[274, "nilearn.glm.first_level.spm_dispersion_derivative"]], "spm_hrf() (in module nilearn.glm.first_level)": [[275, "nilearn.glm.first_level.spm_hrf"]], "spm_time_derivative() (in module nilearn.glm.first_level)": [[276, "nilearn.glm.first_level.spm_time_derivative"]], "secondlevelmodel (class in nilearn.glm.second_level)": [[277, "nilearn.glm.second_level.SecondLevelModel"]], "__init__() (nilearn.glm.second_level.secondlevelmodel method)": [[277, "nilearn.glm.second_level.SecondLevelModel.__init__"]], "compute_contrast() (nilearn.glm.second_level.secondlevelmodel method)": [[277, "nilearn.glm.second_level.SecondLevelModel.compute_contrast"]], "fit() (nilearn.glm.second_level.secondlevelmodel method)": [[277, "nilearn.glm.second_level.SecondLevelModel.fit"]], "fit_transform() (nilearn.glm.second_level.secondlevelmodel method)": [[277, "nilearn.glm.second_level.SecondLevelModel.fit_transform"]], "generate_report() (nilearn.glm.second_level.secondlevelmodel method)": [[277, "nilearn.glm.second_level.SecondLevelModel.generate_report"]], "get_params() (nilearn.glm.second_level.secondlevelmodel method)": [[277, "nilearn.glm.second_level.SecondLevelModel.get_params"]], "predicted() (nilearn.glm.second_level.secondlevelmodel method)": [[277, "nilearn.glm.second_level.SecondLevelModel.predicted"]], "r_square() (nilearn.glm.second_level.secondlevelmodel method)": [[277, "nilearn.glm.second_level.SecondLevelModel.r_square"]], "residuals() (nilearn.glm.second_level.secondlevelmodel method)": [[277, "nilearn.glm.second_level.SecondLevelModel.residuals"]], "set_params() (nilearn.glm.second_level.secondlevelmodel method)": [[277, "nilearn.glm.second_level.SecondLevelModel.set_params"]], "make_second_level_design_matrix() (in module nilearn.glm.second_level)": [[278, "nilearn.glm.second_level.make_second_level_design_matrix"]], "non_parametric_inference() (in module nilearn.glm.second_level)": [[279, "nilearn.glm.second_level.non_parametric_inference"]], "threshold_stats_img() (in module nilearn.glm)": [[280, "nilearn.glm.threshold_stats_img"]], "binarize_img() (in module nilearn.image)": [[281, "nilearn.image.binarize_img"]], "clean_img() (in module nilearn.image)": [[282, "nilearn.image.clean_img"]], "concat_imgs() (in module nilearn.image)": [[283, "nilearn.image.concat_imgs"]], "coord_transform() (in module nilearn.image)": [[284, "nilearn.image.coord_transform"]], "copy_img() (in module nilearn.image)": [[285, "nilearn.image.copy_img"]], "crop_img() (in module nilearn.image)": [[286, "nilearn.image.crop_img"]], "get_data() (in module nilearn.image)": [[287, "nilearn.image.get_data"]], "high_variance_confounds() (in module nilearn.image)": [[288, "nilearn.image.high_variance_confounds"]], "index_img() (in module nilearn.image)": [[289, "nilearn.image.index_img"]], "iter_img() (in module nilearn.image)": [[290, "nilearn.image.iter_img"]], "largest_connected_component_img() (in module nilearn.image)": [[291, "nilearn.image.largest_connected_component_img"]], "load_img() (in module nilearn.image)": [[292, "nilearn.image.load_img"]], "math_img() (in module nilearn.image)": [[293, "nilearn.image.math_img"]], "mean_img() (in module nilearn.image)": [[294, "nilearn.image.mean_img"]], "new_img_like() (in module nilearn.image)": [[295, "nilearn.image.new_img_like"]], "reorder_img() (in module nilearn.image)": [[296, "nilearn.image.reorder_img"]], "resample_img() (in module nilearn.image)": [[297, "nilearn.image.resample_img"]], "resample_to_img() (in module nilearn.image)": [[298, "nilearn.image.resample_to_img"]], "smooth_img() (in module nilearn.image)": [[299, "nilearn.image.smooth_img"]], "swap_img_hemispheres() (in module nilearn.image)": [[300, "nilearn.image.swap_img_hemispheres"]], "threshold_img() (in module nilearn.image)": [[301, "nilearn.image.threshold_img"]], "get_bids_files() (in module nilearn.interfaces.bids)": [[302, "nilearn.interfaces.bids.get_bids_files"]], "parse_bids_filename() (in module nilearn.interfaces.bids)": [[303, "nilearn.interfaces.bids.parse_bids_filename"]], "save_glm_to_bids() (in module nilearn.interfaces.bids)": [[304, "nilearn.interfaces.bids.save_glm_to_bids"]], "load_confounds() (in module nilearn.interfaces.fmriprep)": [[305, "nilearn.interfaces.fmriprep.load_confounds"]], "load_confounds_strategy() (in module nilearn.interfaces.fmriprep)": [[306, "nilearn.interfaces.fmriprep.load_confounds_strategy"]], "get_design_from_fslmat() (in module nilearn.interfaces.fsl)": [[307, "nilearn.interfaces.fsl.get_design_from_fslmat"]], "basemasker (class in nilearn.maskers)": [[308, "nilearn.maskers.BaseMasker"]], "__init__() (nilearn.maskers.basemasker method)": [[308, "nilearn.maskers.BaseMasker.__init__"]], "fit_transform() (nilearn.maskers.basemasker method)": [[308, "nilearn.maskers.BaseMasker.fit_transform"]], "get_params() (nilearn.maskers.basemasker method)": [[308, "nilearn.maskers.BaseMasker.get_params"]], "inverse_transform() (nilearn.maskers.basemasker method)": [[308, "nilearn.maskers.BaseMasker.inverse_transform"]], "set_params() (nilearn.maskers.basemasker method)": [[308, "nilearn.maskers.BaseMasker.set_params"]], "transform() (nilearn.maskers.basemasker method)": [[308, "nilearn.maskers.BaseMasker.transform"]], "transform_single_imgs() (nilearn.maskers.basemasker method)": [[308, "nilearn.maskers.BaseMasker.transform_single_imgs"]], "multiniftilabelsmasker (class in nilearn.maskers)": [[309, "nilearn.maskers.MultiNiftiLabelsMasker"]], "__init__() (nilearn.maskers.multiniftilabelsmasker method)": [[309, "nilearn.maskers.MultiNiftiLabelsMasker.__init__"]], "fit() (nilearn.maskers.multiniftilabelsmasker method)": [[309, "nilearn.maskers.MultiNiftiLabelsMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[309, "nilearn.maskers.MultiNiftiLabelsMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftilabelsmasker method)": [[309, "nilearn.maskers.MultiNiftiLabelsMasker.generate_report"]], "get_params() (nilearn.maskers.multiniftilabelsmasker method)": [[309, "nilearn.maskers.MultiNiftiLabelsMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[309, "nilearn.maskers.MultiNiftiLabelsMasker.inverse_transform"]], "set_params() (nilearn.maskers.multiniftilabelsmasker method)": [[309, "nilearn.maskers.MultiNiftiLabelsMasker.set_params"]], "transform() (nilearn.maskers.multiniftilabelsmasker method)": [[309, "nilearn.maskers.MultiNiftiLabelsMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[309, "nilearn.maskers.MultiNiftiLabelsMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[309, "nilearn.maskers.MultiNiftiLabelsMasker.transform_single_imgs"]], "multiniftimapsmasker (class in nilearn.maskers)": [[310, "nilearn.maskers.MultiNiftiMapsMasker"]], "__init__() (nilearn.maskers.multiniftimapsmasker method)": [[310, "nilearn.maskers.MultiNiftiMapsMasker.__init__"]], "fit() (nilearn.maskers.multiniftimapsmasker method)": [[310, "nilearn.maskers.MultiNiftiMapsMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftimapsmasker method)": [[310, "nilearn.maskers.MultiNiftiMapsMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftimapsmasker method)": [[310, "nilearn.maskers.MultiNiftiMapsMasker.generate_report"]], "get_params() (nilearn.maskers.multiniftimapsmasker method)": [[310, "nilearn.maskers.MultiNiftiMapsMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftimapsmasker method)": [[310, "nilearn.maskers.MultiNiftiMapsMasker.inverse_transform"]], "set_params() (nilearn.maskers.multiniftimapsmasker method)": [[310, "nilearn.maskers.MultiNiftiMapsMasker.set_params"]], "transform() (nilearn.maskers.multiniftimapsmasker method)": [[310, "nilearn.maskers.MultiNiftiMapsMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[310, "nilearn.maskers.MultiNiftiMapsMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[310, "nilearn.maskers.MultiNiftiMapsMasker.transform_single_imgs"]], "multiniftimasker (class in nilearn.maskers)": [[311, "nilearn.maskers.MultiNiftiMasker"]], "__init__() (nilearn.maskers.multiniftimasker method)": [[311, "nilearn.maskers.MultiNiftiMasker.__init__"]], "fit() (nilearn.maskers.multiniftimasker method)": [[311, "nilearn.maskers.MultiNiftiMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftimasker method)": [[311, "nilearn.maskers.MultiNiftiMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftimasker method)": [[311, "nilearn.maskers.MultiNiftiMasker.generate_report"]], "get_params() (nilearn.maskers.multiniftimasker method)": [[311, "nilearn.maskers.MultiNiftiMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftimasker method)": [[311, "nilearn.maskers.MultiNiftiMasker.inverse_transform"]], "set_params() (nilearn.maskers.multiniftimasker method)": [[311, "nilearn.maskers.MultiNiftiMasker.set_params"]], "transform() (nilearn.maskers.multiniftimasker method)": [[311, "nilearn.maskers.MultiNiftiMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftimasker method)": [[311, "nilearn.maskers.MultiNiftiMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftimasker method)": [[311, "nilearn.maskers.MultiNiftiMasker.transform_single_imgs"]], "niftilabelsmasker (class in nilearn.maskers)": [[312, "nilearn.maskers.NiftiLabelsMasker"]], "__init__() (nilearn.maskers.niftilabelsmasker method)": [[312, "nilearn.maskers.NiftiLabelsMasker.__init__"]], "fit() (nilearn.maskers.niftilabelsmasker method)": [[312, "nilearn.maskers.NiftiLabelsMasker.fit"]], "fit_transform() (nilearn.maskers.niftilabelsmasker method)": [[312, "nilearn.maskers.NiftiLabelsMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftilabelsmasker method)": [[312, "nilearn.maskers.NiftiLabelsMasker.generate_report"]], "get_params() (nilearn.maskers.niftilabelsmasker method)": [[312, "nilearn.maskers.NiftiLabelsMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftilabelsmasker method)": [[312, "nilearn.maskers.NiftiLabelsMasker.inverse_transform"]], "set_params() (nilearn.maskers.niftilabelsmasker method)": [[312, "nilearn.maskers.NiftiLabelsMasker.set_params"]], "transform() (nilearn.maskers.niftilabelsmasker method)": [[312, "nilearn.maskers.NiftiLabelsMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftilabelsmasker method)": [[312, "nilearn.maskers.NiftiLabelsMasker.transform_single_imgs"]], "niftimapsmasker (class in nilearn.maskers)": [[313, "nilearn.maskers.NiftiMapsMasker"]], "__init__() (nilearn.maskers.niftimapsmasker method)": [[313, "nilearn.maskers.NiftiMapsMasker.__init__"]], "fit() (nilearn.maskers.niftimapsmasker method)": [[313, "nilearn.maskers.NiftiMapsMasker.fit"]], "fit_transform() (nilearn.maskers.niftimapsmasker method)": [[313, "nilearn.maskers.NiftiMapsMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftimapsmasker method)": [[313, "nilearn.maskers.NiftiMapsMasker.generate_report"]], "get_params() (nilearn.maskers.niftimapsmasker method)": [[313, "nilearn.maskers.NiftiMapsMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftimapsmasker method)": [[313, "nilearn.maskers.NiftiMapsMasker.inverse_transform"]], "set_params() (nilearn.maskers.niftimapsmasker method)": [[313, "nilearn.maskers.NiftiMapsMasker.set_params"]], "transform() (nilearn.maskers.niftimapsmasker method)": [[313, "nilearn.maskers.NiftiMapsMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftimapsmasker method)": [[313, "nilearn.maskers.NiftiMapsMasker.transform_single_imgs"]], "niftimasker (class in nilearn.maskers)": [[314, "nilearn.maskers.NiftiMasker"]], "__init__() (nilearn.maskers.niftimasker method)": [[314, "nilearn.maskers.NiftiMasker.__init__"]], "fit() (nilearn.maskers.niftimasker method)": [[314, "nilearn.maskers.NiftiMasker.fit"]], "fit_transform() (nilearn.maskers.niftimasker method)": [[314, "nilearn.maskers.NiftiMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftimasker method)": [[314, "nilearn.maskers.NiftiMasker.generate_report"]], "get_params() (nilearn.maskers.niftimasker method)": [[314, "nilearn.maskers.NiftiMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftimasker method)": [[314, "nilearn.maskers.NiftiMasker.inverse_transform"]], "set_params() (nilearn.maskers.niftimasker method)": [[314, "nilearn.maskers.NiftiMasker.set_params"]], "transform() (nilearn.maskers.niftimasker method)": [[314, "nilearn.maskers.NiftiMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftimasker method)": [[314, "nilearn.maskers.NiftiMasker.transform_single_imgs"]], "niftispheresmasker (class in nilearn.maskers)": [[315, "nilearn.maskers.NiftiSpheresMasker"]], "__init__() (nilearn.maskers.niftispheresmasker method)": [[315, "nilearn.maskers.NiftiSpheresMasker.__init__"]], "fit() (nilearn.maskers.niftispheresmasker method)": [[315, "nilearn.maskers.NiftiSpheresMasker.fit"]], "fit_transform() (nilearn.maskers.niftispheresmasker method)": [[315, "nilearn.maskers.NiftiSpheresMasker.fit_transform"]], "get_params() (nilearn.maskers.niftispheresmasker method)": [[315, "nilearn.maskers.NiftiSpheresMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftispheresmasker method)": [[315, "nilearn.maskers.NiftiSpheresMasker.inverse_transform"]], "set_params() (nilearn.maskers.niftispheresmasker method)": [[315, "nilearn.maskers.NiftiSpheresMasker.set_params"]], "transform() (nilearn.maskers.niftispheresmasker method)": [[315, "nilearn.maskers.NiftiSpheresMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftispheresmasker method)": [[315, "nilearn.maskers.NiftiSpheresMasker.transform_single_imgs"]], "apply_mask() (in module nilearn.masking)": [[316, "nilearn.masking.apply_mask"]], "compute_background_mask() (in module nilearn.masking)": [[317, "nilearn.masking.compute_background_mask"]], "compute_brain_mask() (in module nilearn.masking)": [[318, "nilearn.masking.compute_brain_mask"]], "compute_epi_mask() (in module nilearn.masking)": [[319, "nilearn.masking.compute_epi_mask"]], "compute_multi_background_mask() (in module nilearn.masking)": [[320, "nilearn.masking.compute_multi_background_mask"]], "compute_multi_brain_mask() (in module nilearn.masking)": [[321, "nilearn.masking.compute_multi_brain_mask"]], "compute_multi_epi_mask() (in module nilearn.masking)": [[322, "nilearn.masking.compute_multi_epi_mask"]], "intersect_masks() (in module nilearn.masking)": [[323, "nilearn.masking.intersect_masks"]], "unmask() (in module nilearn.masking)": [[324, "nilearn.masking.unmask"]], "permuted_ols() (in module nilearn.mass_univariate)": [[325, "nilearn.mass_univariate.permuted_ols"]], "baseaxes (class in nilearn.plotting.displays)": [[326, "nilearn.plotting.displays.BaseAxes"]], "__init__() (nilearn.plotting.displays.baseaxes method)": [[326, "nilearn.plotting.displays.BaseAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[326, "nilearn.plotting.displays.BaseAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.baseaxes method)": [[326, "nilearn.plotting.displays.BaseAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.baseaxes method)": [[326, "nilearn.plotting.displays.BaseAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.baseaxes method)": [[326, "nilearn.plotting.displays.BaseAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.baseaxes method)": [[326, "nilearn.plotting.displays.BaseAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[326, "nilearn.plotting.displays.BaseAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.baseaxes method)": [[326, "nilearn.plotting.displays.BaseAxes.transform_to_2d"]], "baseslicer (class in nilearn.plotting.displays)": [[327, "nilearn.plotting.displays.BaseSlicer"]], "__init__() (nilearn.plotting.displays.baseslicer method)": [[327, "nilearn.plotting.displays.BaseSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.baseslicer method)": [[327, "nilearn.plotting.displays.BaseSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.baseslicer method)": [[327, "nilearn.plotting.displays.BaseSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.baseslicer method)": [[327, "nilearn.plotting.displays.BaseSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.baseslicer method)": [[327, "nilearn.plotting.displays.BaseSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.baseslicer method)": [[327, "nilearn.plotting.displays.BaseSlicer.annotate"]], "black_bg (nilearn.plotting.displays.baseslicer property)": [[327, "nilearn.plotting.displays.BaseSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.baseslicer property)": [[327, "nilearn.plotting.displays.BaseSlicer.brain_color"]], "close() (nilearn.plotting.displays.baseslicer method)": [[327, "nilearn.plotting.displays.BaseSlicer.close"]], "find_cut_coords() (nilearn.plotting.displays.baseslicer static method)": [[327, "nilearn.plotting.displays.BaseSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.baseslicer class method)": [[327, "nilearn.plotting.displays.BaseSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.baseslicer method)": [[327, "nilearn.plotting.displays.BaseSlicer.savefig"]], "title() (nilearn.plotting.displays.baseslicer method)": [[327, "nilearn.plotting.displays.BaseSlicer.title"]], "cutaxes (class in nilearn.plotting.displays)": [[328, "nilearn.plotting.displays.CutAxes"]], "__init__() (nilearn.plotting.displays.cutaxes method)": [[328, "nilearn.plotting.displays.CutAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[328, "nilearn.plotting.displays.CutAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.cutaxes method)": [[328, "nilearn.plotting.displays.CutAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.cutaxes method)": [[328, "nilearn.plotting.displays.CutAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.cutaxes method)": [[328, "nilearn.plotting.displays.CutAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.cutaxes method)": [[328, "nilearn.plotting.displays.CutAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[328, "nilearn.plotting.displays.CutAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.cutaxes method)": [[328, "nilearn.plotting.displays.CutAxes.transform_to_2d"]], "glassbrainaxes (class in nilearn.plotting.displays)": [[329, "nilearn.plotting.displays.GlassBrainAxes"]], "__init__() (nilearn.plotting.displays.glassbrainaxes method)": [[329, "nilearn.plotting.displays.GlassBrainAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[329, "nilearn.plotting.displays.GlassBrainAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[329, "nilearn.plotting.displays.GlassBrainAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.glassbrainaxes method)": [[329, "nilearn.plotting.displays.GlassBrainAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.glassbrainaxes method)": [[329, "nilearn.plotting.displays.GlassBrainAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.glassbrainaxes method)": [[329, "nilearn.plotting.displays.GlassBrainAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[329, "nilearn.plotting.displays.GlassBrainAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[329, "nilearn.plotting.displays.GlassBrainAxes.transform_to_2d"]], "lprojector (class in nilearn.plotting.displays)": [[330, "nilearn.plotting.displays.LProjector"]], "__init__() (nilearn.plotting.displays.lprojector method)": [[330, "nilearn.plotting.displays.LProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lprojector method)": [[330, "nilearn.plotting.displays.LProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lprojector method)": [[330, "nilearn.plotting.displays.LProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lprojector method)": [[330, "nilearn.plotting.displays.LProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lprojector method)": [[330, "nilearn.plotting.displays.LProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lprojector method)": [[330, "nilearn.plotting.displays.LProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lprojector method)": [[330, "nilearn.plotting.displays.LProjector.annotate"]], "black_bg (nilearn.plotting.displays.lprojector property)": [[330, "nilearn.plotting.displays.LProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lprojector property)": [[330, "nilearn.plotting.displays.LProjector.brain_color"]], "close() (nilearn.plotting.displays.lprojector method)": [[330, "nilearn.plotting.displays.LProjector.close"]], "draw_cross() (nilearn.plotting.displays.lprojector method)": [[330, "nilearn.plotting.displays.LProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lprojector class method)": [[330, "nilearn.plotting.displays.LProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lprojector class method)": [[330, "nilearn.plotting.displays.LProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lprojector method)": [[330, "nilearn.plotting.displays.LProjector.savefig"]], "title() (nilearn.plotting.displays.lprojector method)": [[330, "nilearn.plotting.displays.LProjector.title"]], "lrprojector (class in nilearn.plotting.displays)": [[331, "nilearn.plotting.displays.LRProjector"]], "__init__() (nilearn.plotting.displays.lrprojector method)": [[331, "nilearn.plotting.displays.LRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lrprojector method)": [[331, "nilearn.plotting.displays.LRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lrprojector method)": [[331, "nilearn.plotting.displays.LRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lrprojector method)": [[331, "nilearn.plotting.displays.LRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lrprojector method)": [[331, "nilearn.plotting.displays.LRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lrprojector method)": [[331, "nilearn.plotting.displays.LRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lrprojector method)": [[331, "nilearn.plotting.displays.LRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lrprojector property)": [[331, "nilearn.plotting.displays.LRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lrprojector property)": [[331, "nilearn.plotting.displays.LRProjector.brain_color"]], "close() (nilearn.plotting.displays.lrprojector method)": [[331, "nilearn.plotting.displays.LRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lrprojector method)": [[331, "nilearn.plotting.displays.LRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lrprojector class method)": [[331, "nilearn.plotting.displays.LRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lrprojector class method)": [[331, "nilearn.plotting.displays.LRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lrprojector method)": [[331, "nilearn.plotting.displays.LRProjector.savefig"]], "title() (nilearn.plotting.displays.lrprojector method)": [[331, "nilearn.plotting.displays.LRProjector.title"]], "lyrprojector (class in nilearn.plotting.displays)": [[332, "nilearn.plotting.displays.LYRProjector"]], "__init__() (nilearn.plotting.displays.lyrprojector method)": [[332, "nilearn.plotting.displays.LYRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lyrprojector method)": [[332, "nilearn.plotting.displays.LYRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lyrprojector method)": [[332, "nilearn.plotting.displays.LYRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lyrprojector method)": [[332, "nilearn.plotting.displays.LYRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lyrprojector method)": [[332, "nilearn.plotting.displays.LYRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lyrprojector method)": [[332, "nilearn.plotting.displays.LYRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lyrprojector method)": [[332, "nilearn.plotting.displays.LYRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lyrprojector property)": [[332, "nilearn.plotting.displays.LYRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lyrprojector property)": [[332, "nilearn.plotting.displays.LYRProjector.brain_color"]], "close() (nilearn.plotting.displays.lyrprojector method)": [[332, "nilearn.plotting.displays.LYRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lyrprojector method)": [[332, "nilearn.plotting.displays.LYRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lyrprojector class method)": [[332, "nilearn.plotting.displays.LYRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lyrprojector class method)": [[332, "nilearn.plotting.displays.LYRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lyrprojector method)": [[332, "nilearn.plotting.displays.LYRProjector.savefig"]], "title() (nilearn.plotting.displays.lyrprojector method)": [[332, "nilearn.plotting.displays.LYRProjector.title"]], "lyrzprojector (class in nilearn.plotting.displays)": [[333, "nilearn.plotting.displays.LYRZProjector"]], "__init__() (nilearn.plotting.displays.lyrzprojector method)": [[333, "nilearn.plotting.displays.LYRZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lyrzprojector method)": [[333, "nilearn.plotting.displays.LYRZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lyrzprojector method)": [[333, "nilearn.plotting.displays.LYRZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lyrzprojector method)": [[333, "nilearn.plotting.displays.LYRZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lyrzprojector method)": [[333, "nilearn.plotting.displays.LYRZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lyrzprojector method)": [[333, "nilearn.plotting.displays.LYRZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lyrzprojector method)": [[333, "nilearn.plotting.displays.LYRZProjector.annotate"]], "black_bg (nilearn.plotting.displays.lyrzprojector property)": [[333, "nilearn.plotting.displays.LYRZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lyrzprojector property)": [[333, "nilearn.plotting.displays.LYRZProjector.brain_color"]], "close() (nilearn.plotting.displays.lyrzprojector method)": [[333, "nilearn.plotting.displays.LYRZProjector.close"]], "draw_cross() (nilearn.plotting.displays.lyrzprojector method)": [[333, "nilearn.plotting.displays.LYRZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lyrzprojector class method)": [[333, "nilearn.plotting.displays.LYRZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lyrzprojector class method)": [[333, "nilearn.plotting.displays.LYRZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lyrzprojector method)": [[333, "nilearn.plotting.displays.LYRZProjector.savefig"]], "title() (nilearn.plotting.displays.lyrzprojector method)": [[333, "nilearn.plotting.displays.LYRZProjector.title"]], "lzrprojector (class in nilearn.plotting.displays)": [[334, "nilearn.plotting.displays.LZRProjector"]], "__init__() (nilearn.plotting.displays.lzrprojector method)": [[334, "nilearn.plotting.displays.LZRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lzrprojector method)": [[334, "nilearn.plotting.displays.LZRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lzrprojector method)": [[334, "nilearn.plotting.displays.LZRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lzrprojector method)": [[334, "nilearn.plotting.displays.LZRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lzrprojector method)": [[334, "nilearn.plotting.displays.LZRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lzrprojector method)": [[334, "nilearn.plotting.displays.LZRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lzrprojector method)": [[334, "nilearn.plotting.displays.LZRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lzrprojector property)": [[334, "nilearn.plotting.displays.LZRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lzrprojector property)": [[334, "nilearn.plotting.displays.LZRProjector.brain_color"]], "close() (nilearn.plotting.displays.lzrprojector method)": [[334, "nilearn.plotting.displays.LZRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lzrprojector method)": [[334, "nilearn.plotting.displays.LZRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lzrprojector class method)": [[334, "nilearn.plotting.displays.LZRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lzrprojector class method)": [[334, "nilearn.plotting.displays.LZRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lzrprojector method)": [[334, "nilearn.plotting.displays.LZRProjector.savefig"]], "title() (nilearn.plotting.displays.lzrprojector method)": [[334, "nilearn.plotting.displays.LZRProjector.title"]], "lzryprojector (class in nilearn.plotting.displays)": [[335, "nilearn.plotting.displays.LZRYProjector"]], "__init__() (nilearn.plotting.displays.lzryprojector method)": [[335, "nilearn.plotting.displays.LZRYProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lzryprojector method)": [[335, "nilearn.plotting.displays.LZRYProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lzryprojector method)": [[335, "nilearn.plotting.displays.LZRYProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lzryprojector method)": [[335, "nilearn.plotting.displays.LZRYProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lzryprojector method)": [[335, "nilearn.plotting.displays.LZRYProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lzryprojector method)": [[335, "nilearn.plotting.displays.LZRYProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lzryprojector method)": [[335, "nilearn.plotting.displays.LZRYProjector.annotate"]], "black_bg (nilearn.plotting.displays.lzryprojector property)": [[335, "nilearn.plotting.displays.LZRYProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lzryprojector property)": [[335, "nilearn.plotting.displays.LZRYProjector.brain_color"]], "close() (nilearn.plotting.displays.lzryprojector method)": [[335, "nilearn.plotting.displays.LZRYProjector.close"]], "draw_cross() (nilearn.plotting.displays.lzryprojector method)": [[335, "nilearn.plotting.displays.LZRYProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lzryprojector class method)": [[335, "nilearn.plotting.displays.LZRYProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lzryprojector class method)": [[335, "nilearn.plotting.displays.LZRYProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lzryprojector method)": [[335, "nilearn.plotting.displays.LZRYProjector.savefig"]], "title() (nilearn.plotting.displays.lzryprojector method)": [[335, "nilearn.plotting.displays.LZRYProjector.title"]], "mosaicslicer (class in nilearn.plotting.displays)": [[336, "nilearn.plotting.displays.MosaicSlicer"]], "__init__() (nilearn.plotting.displays.mosaicslicer method)": [[336, "nilearn.plotting.displays.MosaicSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.mosaicslicer method)": [[336, "nilearn.plotting.displays.MosaicSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.mosaicslicer method)": [[336, "nilearn.plotting.displays.MosaicSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.mosaicslicer method)": [[336, "nilearn.plotting.displays.MosaicSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.mosaicslicer method)": [[336, "nilearn.plotting.displays.MosaicSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.mosaicslicer method)": [[336, "nilearn.plotting.displays.MosaicSlicer.annotate"]], "black_bg (nilearn.plotting.displays.mosaicslicer property)": [[336, "nilearn.plotting.displays.MosaicSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.mosaicslicer property)": [[336, "nilearn.plotting.displays.MosaicSlicer.brain_color"]], "close() (nilearn.plotting.displays.mosaicslicer method)": [[336, "nilearn.plotting.displays.MosaicSlicer.close"]], "draw_cross() (nilearn.plotting.displays.mosaicslicer method)": [[336, "nilearn.plotting.displays.MosaicSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.mosaicslicer class method)": [[336, "nilearn.plotting.displays.MosaicSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.mosaicslicer class method)": [[336, "nilearn.plotting.displays.MosaicSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.mosaicslicer method)": [[336, "nilearn.plotting.displays.MosaicSlicer.savefig"]], "title() (nilearn.plotting.displays.mosaicslicer method)": [[336, "nilearn.plotting.displays.MosaicSlicer.title"]], "orthoprojector (class in nilearn.plotting.displays)": [[337, "nilearn.plotting.displays.OrthoProjector"]], "__init__() (nilearn.plotting.displays.orthoprojector method)": [[337, "nilearn.plotting.displays.OrthoProjector.__init__"]], "add_contours() (nilearn.plotting.displays.orthoprojector method)": [[337, "nilearn.plotting.displays.OrthoProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.orthoprojector method)": [[337, "nilearn.plotting.displays.OrthoProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.orthoprojector method)": [[337, "nilearn.plotting.displays.OrthoProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.orthoprojector method)": [[337, "nilearn.plotting.displays.OrthoProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.orthoprojector method)": [[337, "nilearn.plotting.displays.OrthoProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.orthoprojector method)": [[337, "nilearn.plotting.displays.OrthoProjector.annotate"]], "black_bg (nilearn.plotting.displays.orthoprojector property)": [[337, "nilearn.plotting.displays.OrthoProjector.black_bg"]], "brain_color (nilearn.plotting.displays.orthoprojector property)": [[337, "nilearn.plotting.displays.OrthoProjector.brain_color"]], "close() (nilearn.plotting.displays.orthoprojector method)": [[337, "nilearn.plotting.displays.OrthoProjector.close"]], "draw_cross() (nilearn.plotting.displays.orthoprojector method)": [[337, "nilearn.plotting.displays.OrthoProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.orthoprojector class method)": [[337, "nilearn.plotting.displays.OrthoProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.orthoprojector class method)": [[337, "nilearn.plotting.displays.OrthoProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.orthoprojector method)": [[337, "nilearn.plotting.displays.OrthoProjector.savefig"]], "title() (nilearn.plotting.displays.orthoprojector method)": [[337, "nilearn.plotting.displays.OrthoProjector.title"]], "orthoslicer (class in nilearn.plotting.displays)": [[338, "nilearn.plotting.displays.OrthoSlicer"]], "__init__() (nilearn.plotting.displays.orthoslicer method)": [[338, "nilearn.plotting.displays.OrthoSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.orthoslicer method)": [[338, "nilearn.plotting.displays.OrthoSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.orthoslicer method)": [[338, "nilearn.plotting.displays.OrthoSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.orthoslicer method)": [[338, "nilearn.plotting.displays.OrthoSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.orthoslicer method)": [[338, "nilearn.plotting.displays.OrthoSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.orthoslicer method)": [[338, "nilearn.plotting.displays.OrthoSlicer.annotate"]], "black_bg (nilearn.plotting.displays.orthoslicer property)": [[338, "nilearn.plotting.displays.OrthoSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.orthoslicer property)": [[338, "nilearn.plotting.displays.OrthoSlicer.brain_color"]], "close() (nilearn.plotting.displays.orthoslicer method)": [[338, "nilearn.plotting.displays.OrthoSlicer.close"]], "draw_cross() (nilearn.plotting.displays.orthoslicer method)": [[338, "nilearn.plotting.displays.OrthoSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.orthoslicer class method)": [[338, "nilearn.plotting.displays.OrthoSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.orthoslicer class method)": [[338, "nilearn.plotting.displays.OrthoSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.orthoslicer method)": [[338, "nilearn.plotting.displays.OrthoSlicer.savefig"]], "title() (nilearn.plotting.displays.orthoslicer method)": [[338, "nilearn.plotting.displays.OrthoSlicer.title"]], "plotlysurfacefigure (class in nilearn.plotting.displays)": [[339, "nilearn.plotting.displays.PlotlySurfaceFigure"]], "__init__() (nilearn.plotting.displays.plotlysurfacefigure method)": [[339, "nilearn.plotting.displays.PlotlySurfaceFigure.__init__"]], "savefig() (nilearn.plotting.displays.plotlysurfacefigure method)": [[339, "nilearn.plotting.displays.PlotlySurfaceFigure.savefig"]], "show() (nilearn.plotting.displays.plotlysurfacefigure method)": [[339, "nilearn.plotting.displays.PlotlySurfaceFigure.show"]], "rprojector (class in nilearn.plotting.displays)": [[340, "nilearn.plotting.displays.RProjector"]], "__init__() (nilearn.plotting.displays.rprojector method)": [[340, "nilearn.plotting.displays.RProjector.__init__"]], "add_contours() (nilearn.plotting.displays.rprojector method)": [[340, "nilearn.plotting.displays.RProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.rprojector method)": [[340, "nilearn.plotting.displays.RProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.rprojector method)": [[340, "nilearn.plotting.displays.RProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.rprojector method)": [[340, "nilearn.plotting.displays.RProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.rprojector method)": [[340, "nilearn.plotting.displays.RProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.rprojector method)": [[340, "nilearn.plotting.displays.RProjector.annotate"]], "black_bg (nilearn.plotting.displays.rprojector property)": [[340, "nilearn.plotting.displays.RProjector.black_bg"]], "brain_color (nilearn.plotting.displays.rprojector property)": [[340, "nilearn.plotting.displays.RProjector.brain_color"]], "close() (nilearn.plotting.displays.rprojector method)": [[340, "nilearn.plotting.displays.RProjector.close"]], "draw_cross() (nilearn.plotting.displays.rprojector method)": [[340, "nilearn.plotting.displays.RProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.rprojector class method)": [[340, "nilearn.plotting.displays.RProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.rprojector class method)": [[340, "nilearn.plotting.displays.RProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.rprojector method)": [[340, "nilearn.plotting.displays.RProjector.savefig"]], "title() (nilearn.plotting.displays.rprojector method)": [[340, "nilearn.plotting.displays.RProjector.title"]], "tiledslicer (class in nilearn.plotting.displays)": [[341, "nilearn.plotting.displays.TiledSlicer"]], "__init__() (nilearn.plotting.displays.tiledslicer method)": [[341, "nilearn.plotting.displays.TiledSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.tiledslicer method)": [[341, "nilearn.plotting.displays.TiledSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.tiledslicer method)": [[341, "nilearn.plotting.displays.TiledSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.tiledslicer method)": [[341, "nilearn.plotting.displays.TiledSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.tiledslicer method)": [[341, "nilearn.plotting.displays.TiledSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.tiledslicer method)": [[341, "nilearn.plotting.displays.TiledSlicer.annotate"]], "black_bg (nilearn.plotting.displays.tiledslicer property)": [[341, "nilearn.plotting.displays.TiledSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.tiledslicer property)": [[341, "nilearn.plotting.displays.TiledSlicer.brain_color"]], "close() (nilearn.plotting.displays.tiledslicer method)": [[341, "nilearn.plotting.displays.TiledSlicer.close"]], "draw_cross() (nilearn.plotting.displays.tiledslicer method)": [[341, "nilearn.plotting.displays.TiledSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.tiledslicer class method)": [[341, "nilearn.plotting.displays.TiledSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.tiledslicer class method)": [[341, "nilearn.plotting.displays.TiledSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.tiledslicer method)": [[341, "nilearn.plotting.displays.TiledSlicer.savefig"]], "title() (nilearn.plotting.displays.tiledslicer method)": [[341, "nilearn.plotting.displays.TiledSlicer.title"]], "xprojector (class in nilearn.plotting.displays)": [[342, "nilearn.plotting.displays.XProjector"]], "__init__() (nilearn.plotting.displays.xprojector method)": [[342, "nilearn.plotting.displays.XProjector.__init__"]], "add_contours() (nilearn.plotting.displays.xprojector method)": [[342, "nilearn.plotting.displays.XProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.xprojector method)": [[342, "nilearn.plotting.displays.XProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.xprojector method)": [[342, "nilearn.plotting.displays.XProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.xprojector method)": [[342, "nilearn.plotting.displays.XProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.xprojector method)": [[342, "nilearn.plotting.displays.XProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.xprojector method)": [[342, "nilearn.plotting.displays.XProjector.annotate"]], "black_bg (nilearn.plotting.displays.xprojector property)": [[342, "nilearn.plotting.displays.XProjector.black_bg"]], "brain_color (nilearn.plotting.displays.xprojector property)": [[342, "nilearn.plotting.displays.XProjector.brain_color"]], "close() (nilearn.plotting.displays.xprojector method)": [[342, "nilearn.plotting.displays.XProjector.close"]], "draw_cross() (nilearn.plotting.displays.xprojector method)": [[342, "nilearn.plotting.displays.XProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xprojector class method)": [[342, "nilearn.plotting.displays.XProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xprojector class method)": [[342, "nilearn.plotting.displays.XProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.xprojector method)": [[342, "nilearn.plotting.displays.XProjector.savefig"]], "title() (nilearn.plotting.displays.xprojector method)": [[342, "nilearn.plotting.displays.XProjector.title"]], "xslicer (class in nilearn.plotting.displays)": [[343, "nilearn.plotting.displays.XSlicer"]], "__init__() (nilearn.plotting.displays.xslicer method)": [[343, "nilearn.plotting.displays.XSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.xslicer method)": [[343, "nilearn.plotting.displays.XSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.xslicer method)": [[343, "nilearn.plotting.displays.XSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.xslicer method)": [[343, "nilearn.plotting.displays.XSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.xslicer method)": [[343, "nilearn.plotting.displays.XSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.xslicer method)": [[343, "nilearn.plotting.displays.XSlicer.annotate"]], "black_bg (nilearn.plotting.displays.xslicer property)": [[343, "nilearn.plotting.displays.XSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.xslicer property)": [[343, "nilearn.plotting.displays.XSlicer.brain_color"]], "close() (nilearn.plotting.displays.xslicer method)": [[343, "nilearn.plotting.displays.XSlicer.close"]], "draw_cross() (nilearn.plotting.displays.xslicer method)": [[343, "nilearn.plotting.displays.XSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xslicer class method)": [[343, "nilearn.plotting.displays.XSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xslicer class method)": [[343, "nilearn.plotting.displays.XSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.xslicer method)": [[343, "nilearn.plotting.displays.XSlicer.savefig"]], "title() (nilearn.plotting.displays.xslicer method)": [[343, "nilearn.plotting.displays.XSlicer.title"]], "xzprojector (class in nilearn.plotting.displays)": [[344, "nilearn.plotting.displays.XZProjector"]], "__init__() (nilearn.plotting.displays.xzprojector method)": [[344, "nilearn.plotting.displays.XZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.xzprojector method)": [[344, "nilearn.plotting.displays.XZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.xzprojector method)": [[344, "nilearn.plotting.displays.XZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.xzprojector method)": [[344, "nilearn.plotting.displays.XZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.xzprojector method)": [[344, "nilearn.plotting.displays.XZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.xzprojector method)": [[344, "nilearn.plotting.displays.XZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.xzprojector method)": [[344, "nilearn.plotting.displays.XZProjector.annotate"]], "black_bg (nilearn.plotting.displays.xzprojector property)": [[344, "nilearn.plotting.displays.XZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.xzprojector property)": [[344, "nilearn.plotting.displays.XZProjector.brain_color"]], "close() (nilearn.plotting.displays.xzprojector method)": [[344, "nilearn.plotting.displays.XZProjector.close"]], "draw_cross() (nilearn.plotting.displays.xzprojector method)": [[344, "nilearn.plotting.displays.XZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xzprojector class method)": [[344, "nilearn.plotting.displays.XZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xzprojector class method)": [[344, "nilearn.plotting.displays.XZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.xzprojector method)": [[344, "nilearn.plotting.displays.XZProjector.savefig"]], "title() (nilearn.plotting.displays.xzprojector method)": [[344, "nilearn.plotting.displays.XZProjector.title"]], "xzslicer (class in nilearn.plotting.displays)": [[345, "nilearn.plotting.displays.XZSlicer"]], "__init__() (nilearn.plotting.displays.xzslicer method)": [[345, "nilearn.plotting.displays.XZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.xzslicer method)": [[345, "nilearn.plotting.displays.XZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.xzslicer method)": [[345, "nilearn.plotting.displays.XZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.xzslicer method)": [[345, "nilearn.plotting.displays.XZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.xzslicer method)": [[345, "nilearn.plotting.displays.XZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.xzslicer method)": [[345, "nilearn.plotting.displays.XZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.xzslicer property)": [[345, "nilearn.plotting.displays.XZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.xzslicer property)": [[345, "nilearn.plotting.displays.XZSlicer.brain_color"]], "close() (nilearn.plotting.displays.xzslicer method)": [[345, "nilearn.plotting.displays.XZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.xzslicer method)": [[345, "nilearn.plotting.displays.XZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xzslicer class method)": [[345, "nilearn.plotting.displays.XZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xzslicer class method)": [[345, "nilearn.plotting.displays.XZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.xzslicer method)": [[345, "nilearn.plotting.displays.XZSlicer.savefig"]], "title() (nilearn.plotting.displays.xzslicer method)": [[345, "nilearn.plotting.displays.XZSlicer.title"]], "yprojector (class in nilearn.plotting.displays)": [[346, "nilearn.plotting.displays.YProjector"]], "__init__() (nilearn.plotting.displays.yprojector method)": [[346, "nilearn.plotting.displays.YProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yprojector method)": [[346, "nilearn.plotting.displays.YProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yprojector method)": [[346, "nilearn.plotting.displays.YProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yprojector method)": [[346, "nilearn.plotting.displays.YProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yprojector method)": [[346, "nilearn.plotting.displays.YProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yprojector method)": [[346, "nilearn.plotting.displays.YProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yprojector method)": [[346, "nilearn.plotting.displays.YProjector.annotate"]], "black_bg (nilearn.plotting.displays.yprojector property)": [[346, "nilearn.plotting.displays.YProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yprojector property)": [[346, "nilearn.plotting.displays.YProjector.brain_color"]], "close() (nilearn.plotting.displays.yprojector method)": [[346, "nilearn.plotting.displays.YProjector.close"]], "draw_cross() (nilearn.plotting.displays.yprojector method)": [[346, "nilearn.plotting.displays.YProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yprojector class method)": [[346, "nilearn.plotting.displays.YProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yprojector class method)": [[346, "nilearn.plotting.displays.YProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yprojector method)": [[346, "nilearn.plotting.displays.YProjector.savefig"]], "title() (nilearn.plotting.displays.yprojector method)": [[346, "nilearn.plotting.displays.YProjector.title"]], "yslicer (class in nilearn.plotting.displays)": [[347, "nilearn.plotting.displays.YSlicer"]], "__init__() (nilearn.plotting.displays.yslicer method)": [[347, "nilearn.plotting.displays.YSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yslicer method)": [[347, "nilearn.plotting.displays.YSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yslicer method)": [[347, "nilearn.plotting.displays.YSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yslicer method)": [[347, "nilearn.plotting.displays.YSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yslicer method)": [[347, "nilearn.plotting.displays.YSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yslicer method)": [[347, "nilearn.plotting.displays.YSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yslicer property)": [[347, "nilearn.plotting.displays.YSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yslicer property)": [[347, "nilearn.plotting.displays.YSlicer.brain_color"]], "close() (nilearn.plotting.displays.yslicer method)": [[347, "nilearn.plotting.displays.YSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yslicer method)": [[347, "nilearn.plotting.displays.YSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yslicer class method)": [[347, "nilearn.plotting.displays.YSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yslicer class method)": [[347, "nilearn.plotting.displays.YSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yslicer method)": [[347, "nilearn.plotting.displays.YSlicer.savefig"]], "title() (nilearn.plotting.displays.yslicer method)": [[347, "nilearn.plotting.displays.YSlicer.title"]], "yxprojector (class in nilearn.plotting.displays)": [[348, "nilearn.plotting.displays.YXProjector"]], "__init__() (nilearn.plotting.displays.yxprojector method)": [[348, "nilearn.plotting.displays.YXProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yxprojector method)": [[348, "nilearn.plotting.displays.YXProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yxprojector method)": [[348, "nilearn.plotting.displays.YXProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yxprojector method)": [[348, "nilearn.plotting.displays.YXProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yxprojector method)": [[348, "nilearn.plotting.displays.YXProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yxprojector method)": [[348, "nilearn.plotting.displays.YXProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yxprojector method)": [[348, "nilearn.plotting.displays.YXProjector.annotate"]], "black_bg (nilearn.plotting.displays.yxprojector property)": [[348, "nilearn.plotting.displays.YXProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yxprojector property)": [[348, "nilearn.plotting.displays.YXProjector.brain_color"]], "close() (nilearn.plotting.displays.yxprojector method)": [[348, "nilearn.plotting.displays.YXProjector.close"]], "draw_cross() (nilearn.plotting.displays.yxprojector method)": [[348, "nilearn.plotting.displays.YXProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yxprojector class method)": [[348, "nilearn.plotting.displays.YXProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yxprojector class method)": [[348, "nilearn.plotting.displays.YXProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yxprojector method)": [[348, "nilearn.plotting.displays.YXProjector.savefig"]], "title() (nilearn.plotting.displays.yxprojector method)": [[348, "nilearn.plotting.displays.YXProjector.title"]], "yxslicer (class in nilearn.plotting.displays)": [[349, "nilearn.plotting.displays.YXSlicer"]], "__init__() (nilearn.plotting.displays.yxslicer method)": [[349, "nilearn.plotting.displays.YXSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yxslicer method)": [[349, "nilearn.plotting.displays.YXSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yxslicer method)": [[349, "nilearn.plotting.displays.YXSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yxslicer method)": [[349, "nilearn.plotting.displays.YXSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yxslicer method)": [[349, "nilearn.plotting.displays.YXSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yxslicer method)": [[349, "nilearn.plotting.displays.YXSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yxslicer property)": [[349, "nilearn.plotting.displays.YXSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yxslicer property)": [[349, "nilearn.plotting.displays.YXSlicer.brain_color"]], "close() (nilearn.plotting.displays.yxslicer method)": [[349, "nilearn.plotting.displays.YXSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yxslicer method)": [[349, "nilearn.plotting.displays.YXSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yxslicer class method)": [[349, "nilearn.plotting.displays.YXSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yxslicer class method)": [[349, "nilearn.plotting.displays.YXSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yxslicer method)": [[349, "nilearn.plotting.displays.YXSlicer.savefig"]], "title() (nilearn.plotting.displays.yxslicer method)": [[349, "nilearn.plotting.displays.YXSlicer.title"]], "yzprojector (class in nilearn.plotting.displays)": [[350, "nilearn.plotting.displays.YZProjector"]], "__init__() (nilearn.plotting.displays.yzprojector method)": [[350, "nilearn.plotting.displays.YZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yzprojector method)": [[350, "nilearn.plotting.displays.YZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yzprojector method)": [[350, "nilearn.plotting.displays.YZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yzprojector method)": [[350, "nilearn.plotting.displays.YZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yzprojector method)": [[350, "nilearn.plotting.displays.YZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yzprojector method)": [[350, "nilearn.plotting.displays.YZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yzprojector method)": [[350, "nilearn.plotting.displays.YZProjector.annotate"]], "black_bg (nilearn.plotting.displays.yzprojector property)": [[350, "nilearn.plotting.displays.YZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yzprojector property)": [[350, "nilearn.plotting.displays.YZProjector.brain_color"]], "close() (nilearn.plotting.displays.yzprojector method)": [[350, "nilearn.plotting.displays.YZProjector.close"]], "draw_cross() (nilearn.plotting.displays.yzprojector method)": [[350, "nilearn.plotting.displays.YZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yzprojector class method)": [[350, "nilearn.plotting.displays.YZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yzprojector class method)": [[350, "nilearn.plotting.displays.YZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yzprojector method)": [[350, "nilearn.plotting.displays.YZProjector.savefig"]], "title() (nilearn.plotting.displays.yzprojector method)": [[350, "nilearn.plotting.displays.YZProjector.title"]], "yzslicer (class in nilearn.plotting.displays)": [[351, "nilearn.plotting.displays.YZSlicer"]], "__init__() (nilearn.plotting.displays.yzslicer method)": [[351, "nilearn.plotting.displays.YZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yzslicer method)": [[351, "nilearn.plotting.displays.YZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yzslicer method)": [[351, "nilearn.plotting.displays.YZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yzslicer method)": [[351, "nilearn.plotting.displays.YZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yzslicer method)": [[351, "nilearn.plotting.displays.YZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yzslicer method)": [[351, "nilearn.plotting.displays.YZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yzslicer property)": [[351, "nilearn.plotting.displays.YZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yzslicer property)": [[351, "nilearn.plotting.displays.YZSlicer.brain_color"]], "close() (nilearn.plotting.displays.yzslicer method)": [[351, "nilearn.plotting.displays.YZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yzslicer method)": [[351, "nilearn.plotting.displays.YZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yzslicer class method)": [[351, "nilearn.plotting.displays.YZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yzslicer class method)": [[351, "nilearn.plotting.displays.YZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yzslicer method)": [[351, "nilearn.plotting.displays.YZSlicer.savefig"]], "title() (nilearn.plotting.displays.yzslicer method)": [[351, "nilearn.plotting.displays.YZSlicer.title"]], "zprojector (class in nilearn.plotting.displays)": [[352, "nilearn.plotting.displays.ZProjector"]], "__init__() (nilearn.plotting.displays.zprojector method)": [[352, "nilearn.plotting.displays.ZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.zprojector method)": [[352, "nilearn.plotting.displays.ZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.zprojector method)": [[352, "nilearn.plotting.displays.ZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.zprojector method)": [[352, "nilearn.plotting.displays.ZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.zprojector method)": [[352, "nilearn.plotting.displays.ZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.zprojector method)": [[352, "nilearn.plotting.displays.ZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.zprojector method)": [[352, "nilearn.plotting.displays.ZProjector.annotate"]], "black_bg (nilearn.plotting.displays.zprojector property)": [[352, "nilearn.plotting.displays.ZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.zprojector property)": [[352, "nilearn.plotting.displays.ZProjector.brain_color"]], "close() (nilearn.plotting.displays.zprojector method)": [[352, "nilearn.plotting.displays.ZProjector.close"]], "draw_cross() (nilearn.plotting.displays.zprojector method)": [[352, "nilearn.plotting.displays.ZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.zprojector class method)": [[352, "nilearn.plotting.displays.ZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.zprojector class method)": [[352, "nilearn.plotting.displays.ZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.zprojector method)": [[352, "nilearn.plotting.displays.ZProjector.savefig"]], "title() (nilearn.plotting.displays.zprojector method)": [[352, "nilearn.plotting.displays.ZProjector.title"]], "zslicer (class in nilearn.plotting.displays)": [[353, "nilearn.plotting.displays.ZSlicer"]], "__init__() (nilearn.plotting.displays.zslicer method)": [[353, "nilearn.plotting.displays.ZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.zslicer method)": [[353, "nilearn.plotting.displays.ZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.zslicer method)": [[353, "nilearn.plotting.displays.ZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.zslicer method)": [[353, "nilearn.plotting.displays.ZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.zslicer method)": [[353, "nilearn.plotting.displays.ZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.zslicer method)": [[353, "nilearn.plotting.displays.ZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.zslicer property)": [[353, "nilearn.plotting.displays.ZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.zslicer property)": [[353, "nilearn.plotting.displays.ZSlicer.brain_color"]], "close() (nilearn.plotting.displays.zslicer method)": [[353, "nilearn.plotting.displays.ZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.zslicer method)": [[353, "nilearn.plotting.displays.ZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.zslicer class method)": [[353, "nilearn.plotting.displays.ZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.zslicer class method)": [[353, "nilearn.plotting.displays.ZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.zslicer method)": [[353, "nilearn.plotting.displays.ZSlicer.savefig"]], "title() (nilearn.plotting.displays.zslicer method)": [[353, "nilearn.plotting.displays.ZSlicer.title"]], "get_projector() (in module nilearn.plotting.displays)": [[354, "nilearn.plotting.displays.get_projector"]], "get_slicer() (in module nilearn.plotting.displays)": [[355, "nilearn.plotting.displays.get_slicer"]], "find_cut_slices() (in module nilearn.plotting)": [[356, "nilearn.plotting.find_cut_slices"]], "find_parcellation_cut_coords() (in module nilearn.plotting)": [[357, "nilearn.plotting.find_parcellation_cut_coords"]], "find_probabilistic_atlas_cut_coords() (in module nilearn.plotting)": [[358, "nilearn.plotting.find_probabilistic_atlas_cut_coords"]], "find_xyz_cut_coords() (in module nilearn.plotting)": [[359, "nilearn.plotting.find_xyz_cut_coords"]], "plot_anat() (in module nilearn.plotting)": [[360, "nilearn.plotting.plot_anat"]], "plot_carpet() (in module nilearn.plotting)": [[361, "nilearn.plotting.plot_carpet"]], "plot_connectome() (in module nilearn.plotting)": [[362, "nilearn.plotting.plot_connectome"]], "plot_contrast_matrix() (in module nilearn.plotting)": [[363, "nilearn.plotting.plot_contrast_matrix"]], "plot_design_matrix() (in module nilearn.plotting)": [[364, "nilearn.plotting.plot_design_matrix"]], "plot_epi() (in module nilearn.plotting)": [[365, "nilearn.plotting.plot_epi"]], "plot_event() (in module nilearn.plotting)": [[366, "nilearn.plotting.plot_event"]], "plot_glass_brain() (in module nilearn.plotting)": [[367, "nilearn.plotting.plot_glass_brain"]], "plot_img() (in module nilearn.plotting)": [[368, "nilearn.plotting.plot_img"]], "plot_img_comparison() (in module nilearn.plotting)": [[369, "nilearn.plotting.plot_img_comparison"]], "plot_img_on_surf() (in module nilearn.plotting)": [[370, "nilearn.plotting.plot_img_on_surf"]], "plot_markers() (in module nilearn.plotting)": [[371, "nilearn.plotting.plot_markers"]], "plot_matrix() (in module nilearn.plotting)": [[372, "nilearn.plotting.plot_matrix"]], "plot_prob_atlas() (in module nilearn.plotting)": [[373, "nilearn.plotting.plot_prob_atlas"]], "plot_roi() (in module nilearn.plotting)": [[374, "nilearn.plotting.plot_roi"]], "plot_stat_map() (in module nilearn.plotting)": [[375, "nilearn.plotting.plot_stat_map"]], "plot_surf() (in module nilearn.plotting)": [[376, "nilearn.plotting.plot_surf"]], "plot_surf_contours() (in module nilearn.plotting)": [[377, "nilearn.plotting.plot_surf_contours"]], "plot_surf_roi() (in module nilearn.plotting)": [[378, "nilearn.plotting.plot_surf_roi"]], "plot_surf_stat_map() (in module nilearn.plotting)": [[379, "nilearn.plotting.plot_surf_stat_map"]], "show() (in module nilearn.plotting)": [[380, "nilearn.plotting.show"]], "view_connectome() (in module nilearn.plotting)": [[381, "nilearn.plotting.view_connectome"]], "view_img() (in module nilearn.plotting)": [[382, "nilearn.plotting.view_img"]], "view_img_on_surf() (in module nilearn.plotting)": [[383, "nilearn.plotting.view_img_on_surf"]], "view_markers() (in module nilearn.plotting)": [[384, "nilearn.plotting.view_markers"]], "view_surf() (in module nilearn.plotting)": [[385, "nilearn.plotting.view_surf"]], "hierarchicalkmeans (class in nilearn.regions)": [[386, "nilearn.regions.HierarchicalKMeans"]], "__init__() (nilearn.regions.hierarchicalkmeans method)": [[386, "nilearn.regions.HierarchicalKMeans.__init__"]], "fit() (nilearn.regions.hierarchicalkmeans method)": [[386, "nilearn.regions.HierarchicalKMeans.fit"]], "fit_predict() (nilearn.regions.hierarchicalkmeans method)": [[386, "nilearn.regions.HierarchicalKMeans.fit_predict"]], "fit_transform() (nilearn.regions.hierarchicalkmeans method)": [[386, "nilearn.regions.HierarchicalKMeans.fit_transform"]], "get_params() (nilearn.regions.hierarchicalkmeans method)": [[386, "nilearn.regions.HierarchicalKMeans.get_params"]], "inverse_transform() (nilearn.regions.hierarchicalkmeans method)": [[386, "nilearn.regions.HierarchicalKMeans.inverse_transform"]], "set_params() (nilearn.regions.hierarchicalkmeans method)": [[386, "nilearn.regions.HierarchicalKMeans.set_params"]], "transform() (nilearn.regions.hierarchicalkmeans method)": [[386, "nilearn.regions.HierarchicalKMeans.transform"]], "parcellations (class in nilearn.regions)": [[387, "nilearn.regions.Parcellations"]], "valid_methods (nilearn.regions.parcellations attribute)": [[387, "nilearn.regions.Parcellations.VALID_METHODS"]], "__init__() (nilearn.regions.parcellations method)": [[387, "nilearn.regions.Parcellations.__init__"]], "fit() (nilearn.regions.parcellations method)": [[387, "nilearn.regions.Parcellations.fit"]], "fit_transform() (nilearn.regions.parcellations method)": [[387, "nilearn.regions.Parcellations.fit_transform"]], "get_params() (nilearn.regions.parcellations method)": [[387, "nilearn.regions.Parcellations.get_params"]], "inverse_transform() (nilearn.regions.parcellations method)": [[387, "nilearn.regions.Parcellations.inverse_transform"]], "score() (nilearn.regions.parcellations method)": [[387, "nilearn.regions.Parcellations.score"]], "set_params() (nilearn.regions.parcellations method)": [[387, "nilearn.regions.Parcellations.set_params"]], "transform() (nilearn.regions.parcellations method)": [[387, "nilearn.regions.Parcellations.transform"]], "rena (class in nilearn.regions)": [[388, "nilearn.regions.ReNA"]], "__init__() (nilearn.regions.rena method)": [[388, "nilearn.regions.ReNA.__init__"]], "fit() (nilearn.regions.rena method)": [[388, "nilearn.regions.ReNA.fit"]], "fit_predict() (nilearn.regions.rena method)": [[388, "nilearn.regions.ReNA.fit_predict"]], "fit_transform() (nilearn.regions.rena method)": [[388, "nilearn.regions.ReNA.fit_transform"]], "get_params() (nilearn.regions.rena method)": [[388, "nilearn.regions.ReNA.get_params"]], "inverse_transform() (nilearn.regions.rena method)": [[388, "nilearn.regions.ReNA.inverse_transform"]], "set_params() (nilearn.regions.rena method)": [[388, "nilearn.regions.ReNA.set_params"]], "transform() (nilearn.regions.rena method)": [[388, "nilearn.regions.ReNA.transform"]], "regionextractor (class in nilearn.regions)": [[389, "nilearn.regions.RegionExtractor"]], "__init__() (nilearn.regions.regionextractor method)": [[389, "nilearn.regions.RegionExtractor.__init__"]], "fit() (nilearn.regions.regionextractor method)": [[389, "nilearn.regions.RegionExtractor.fit"]], "fit_transform() (nilearn.regions.regionextractor method)": [[389, "nilearn.regions.RegionExtractor.fit_transform"]], "generate_report() (nilearn.regions.regionextractor method)": [[389, "nilearn.regions.RegionExtractor.generate_report"]], "get_params() (nilearn.regions.regionextractor method)": [[389, "nilearn.regions.RegionExtractor.get_params"]], "inverse_transform() (nilearn.regions.regionextractor method)": [[389, "nilearn.regions.RegionExtractor.inverse_transform"]], "set_params() (nilearn.regions.regionextractor method)": [[389, "nilearn.regions.RegionExtractor.set_params"]], "transform() (nilearn.regions.regionextractor method)": [[389, "nilearn.regions.RegionExtractor.transform"]], "transform_single_imgs() (nilearn.regions.regionextractor method)": [[389, "nilearn.regions.RegionExtractor.transform_single_imgs"]], "connected_label_regions() (in module nilearn.regions)": [[390, "nilearn.regions.connected_label_regions"]], "connected_regions() (in module nilearn.regions)": [[391, "nilearn.regions.connected_regions"]], "img_to_signals_labels() (in module nilearn.regions)": [[392, "nilearn.regions.img_to_signals_labels"]], "img_to_signals_maps() (in module nilearn.regions)": [[393, "nilearn.regions.img_to_signals_maps"]], "recursive_neighbor_agglomeration() (in module nilearn.regions)": [[394, "nilearn.regions.recursive_neighbor_agglomeration"]], "signals_to_img_labels() (in module nilearn.regions)": [[395, "nilearn.regions.signals_to_img_labels"]], "signals_to_img_maps() (in module nilearn.regions)": [[396, "nilearn.regions.signals_to_img_maps"]], "htmlreport (class in nilearn.reporting)": [[397, "nilearn.reporting.HTMLReport"]], "__init__() (nilearn.reporting.htmlreport method)": [[397, "nilearn.reporting.HTMLReport.__init__"]], "get_iframe() (nilearn.reporting.htmlreport method)": [[397, "nilearn.reporting.HTMLReport.get_iframe"]], "get_standalone() (nilearn.reporting.htmlreport method)": [[397, "nilearn.reporting.HTMLReport.get_standalone"]], "open_in_browser() (nilearn.reporting.htmlreport method)": [[397, "nilearn.reporting.HTMLReport.open_in_browser"]], "remove_temp_file() (nilearn.reporting.htmlreport method)": [[397, "nilearn.reporting.HTMLReport.remove_temp_file"]], "resize() (nilearn.reporting.htmlreport method)": [[397, "nilearn.reporting.HTMLReport.resize"]], "save_as_html() (nilearn.reporting.htmlreport method)": [[397, "nilearn.reporting.HTMLReport.save_as_html"]], "get_clusters_table() (in module nilearn.reporting)": [[398, "nilearn.reporting.get_clusters_table"]], "make_glm_report() (in module nilearn.reporting)": [[399, "nilearn.reporting.make_glm_report"]], "butterworth() (in module nilearn.signal)": [[400, "nilearn.signal.butterworth"]], "clean() (in module nilearn.signal)": [[401, "nilearn.signal.clean"]], "high_variance_confounds() (in module nilearn.signal)": [[402, "nilearn.signal.high_variance_confounds"]], "load_surf_data() (in module nilearn.surface)": [[403, "nilearn.surface.load_surf_data"]], "load_surf_mesh() (in module nilearn.surface)": [[404, "nilearn.surface.load_surf_mesh"]], "vol_to_surf() (in module nilearn.surface)": [[405, "nilearn.surface.vol_to_surf"]], "nilearn.glm": [[406, "module-nilearn.glm"]], "nilearn.glm.first_level": [[406, "module-nilearn.glm.first_level"]], "nilearn.glm.second_level": [[406, "module-nilearn.glm.second_level"]], "nilearn.image": [[407, "module-nilearn.image"]], "nilearn.interfaces": [[409, "module-nilearn.interfaces"]], "nilearn.interfaces.bids": [[409, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.fmriprep": [[409, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fsl": [[409, "module-nilearn.interfaces.fsl"]], "nilearn.maskers": [[410, "module-nilearn.maskers"]], "nilearn.masking": [[411, "module-nilearn.masking"]], "nilearn.mass_univariate": [[412, "module-nilearn.mass_univariate"]], "nilearn.plotting": [[413, "module-nilearn.plotting"]], "nilearn.plotting.displays": [[413, "module-nilearn.plotting.displays"]], "nilearn.regions": [[414, "module-nilearn.regions"]], "nilearn.reporting": [[415, "module-nilearn.reporting"]], "nilearn.signal": [[416, "module-nilearn.signal"]], "nilearn.surface": [[417, "module-nilearn.surface"]]}})