Search.setIndex({"docnames": ["authors", "auto_examples/00_tutorials/index", "auto_examples/00_tutorials/plot_3d_and_4d_niimg", "auto_examples/00_tutorials/plot_decoding_tutorial", "auto_examples/00_tutorials/plot_nilearn_101", "auto_examples/00_tutorials/plot_python_101", "auto_examples/00_tutorials/plot_single_subject_single_run", "auto_examples/00_tutorials/sg_execution_times", "auto_examples/01_plotting/index", "auto_examples/01_plotting/plot_3d_map_to_surface_projection", "auto_examples/01_plotting/plot_atlas", "auto_examples/01_plotting/plot_carpet", "auto_examples/01_plotting/plot_colormaps", "auto_examples/01_plotting/plot_demo_glass_brain", "auto_examples/01_plotting/plot_demo_glass_brain_extensive", "auto_examples/01_plotting/plot_demo_more_plotting", "auto_examples/01_plotting/plot_demo_plotting", "auto_examples/01_plotting/plot_dim_plotting", "auto_examples/01_plotting/plot_haxby_masks", "auto_examples/01_plotting/plot_multiscale_parcellations", "auto_examples/01_plotting/plot_overlay", "auto_examples/01_plotting/plot_prob_atlas", "auto_examples/01_plotting/plot_surf_atlas", "auto_examples/01_plotting/plot_surf_stat_map", "auto_examples/01_plotting/plot_surface_projection_strategies", "auto_examples/01_plotting/plot_visualization", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats", "auto_examples/01_plotting/sg_execution_times", "auto_examples/02_decoding/index", "auto_examples/02_decoding/plot_haxby_anova_svm", "auto_examples/02_decoding/plot_haxby_different_estimators", "auto_examples/02_decoding/plot_haxby_frem", "auto_examples/02_decoding/plot_haxby_full_analysis", "auto_examples/02_decoding/plot_haxby_glm_decoding", "auto_examples/02_decoding/plot_haxby_grid_search", "auto_examples/02_decoding/plot_haxby_multiclass", "auto_examples/02_decoding/plot_haxby_searchlight", "auto_examples/02_decoding/plot_haxby_searchlight_surface", "auto_examples/02_decoding/plot_haxby_stimuli", "auto_examples/02_decoding/plot_mixed_gambles_frem", "auto_examples/02_decoding/plot_miyawaki_encoding", "auto_examples/02_decoding/plot_miyawaki_reconstruction", "auto_examples/02_decoding/plot_oasis_vbm", "auto_examples/02_decoding/plot_oasis_vbm_space_net", "auto_examples/02_decoding/plot_simulated_data", "auto_examples/02_decoding/sg_execution_times", "auto_examples/03_connectivity/index", "auto_examples/03_connectivity/plot_atlas_comparison", "auto_examples/03_connectivity/plot_compare_decomposition", "auto_examples/03_connectivity/plot_data_driven_parcellations", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps", "auto_examples/03_connectivity/plot_group_level_connectivity", "auto_examples/03_connectivity/plot_inverse_covariance_connectome", "auto_examples/03_connectivity/plot_multi_subject_connectome", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation", "auto_examples/03_connectivity/plot_signal_extraction", "auto_examples/03_connectivity/plot_simulated_connectome", "auto_examples/03_connectivity/plot_sphere_based_connectome", "auto_examples/03_connectivity/sg_execution_times", "auto_examples/04_glm_first_level/index", "auto_examples/04_glm_first_level/plot_adhd_dmn", "auto_examples/04_glm_first_level/plot_bids_features", "auto_examples/04_glm_first_level/plot_design_matrix", "auto_examples/04_glm_first_level/plot_fiac_analysis", "auto_examples/04_glm_first_level/plot_fir_model", "auto_examples/04_glm_first_level/plot_first_level_details", "auto_examples/04_glm_first_level/plot_fixed_effects", "auto_examples/04_glm_first_level/plot_hrf", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis", "auto_examples/04_glm_first_level/plot_predictions_residuals", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces", "auto_examples/04_glm_first_level/plot_write_events_file", "auto_examples/04_glm_first_level/sg_execution_times", "auto_examples/05_glm_second_level/index", "auto_examples/05_glm_second_level/plot_oasis", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels", "auto_examples/05_glm_second_level/plot_second_level_association_test", "auto_examples/05_glm_second_level/plot_second_level_design_matrix", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test", "auto_examples/05_glm_second_level/plot_thresholding", "auto_examples/05_glm_second_level/sg_execution_times", "auto_examples/06_manipulating_images/index", "auto_examples/06_manipulating_images/plot_affine_transformation", "auto_examples/06_manipulating_images/plot_compare_mean_image", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps", "auto_examples/06_manipulating_images/plot_mask_computation", "auto_examples/06_manipulating_images/plot_negate_image", "auto_examples/06_manipulating_images/plot_nifti_labels_simple", "auto_examples/06_manipulating_images/plot_nifti_simple", "auto_examples/06_manipulating_images/plot_resample_to_template", "auto_examples/06_manipulating_images/plot_roi_extraction", "auto_examples/06_manipulating_images/plot_smooth_mean_image", "auto_examples/06_manipulating_images/sg_execution_times", "auto_examples/07_advanced/index", "auto_examples/07_advanced/plot_advanced_decoding_scikit", "auto_examples/07_advanced/plot_age_group_prediction_cross_val", "auto_examples/07_advanced/plot_beta_series", "auto_examples/07_advanced/plot_bids_analysis", "auto_examples/07_advanced/plot_haxby_mass_univariate", "auto_examples/07_advanced/plot_ica_neurovault", "auto_examples/07_advanced/plot_ica_resting_state", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods", "auto_examples/07_advanced/plot_localizer_simple_analysis", "auto_examples/07_advanced/plot_neurovault_meta_analysis", "auto_examples/07_advanced/plot_surface_bids_analysis", "auto_examples/07_advanced/sg_execution_times", "auto_examples/index", "bibliography", "building_blocks/index", "building_blocks/manual_pipeline", "building_blocks/neurovault", "changes/0.1.0", "changes/0.1.1", "changes/0.1.2", "changes/0.1.3", "changes/0.1.4", "changes/0.10.0", "changes/0.10.1", "changes/0.2.0", "changes/0.2.1", "changes/0.2.2", "changes/0.2.3", "changes/0.2.4", "changes/0.2.5", "changes/0.2.6", "changes/0.3.0", "changes/0.3.1", "changes/0.4.0", "changes/0.4.1", "changes/0.4.2", "changes/0.5.0", "changes/0.5.1", "changes/0.5.2", "changes/0.6.0", "changes/0.6.1", "changes/0.6.2", "changes/0.7.0", "changes/0.7.1", "changes/0.8.0", "changes/0.8.1", "changes/0.9.0", "changes/0.9.1", "changes/0.9.2", "changes/latest", "changes/names", "changes/whats_new", "connectivity/connectome_extraction", "connectivity/functional_connectomes", "connectivity/index", "connectivity/parcellating", "connectivity/region_extraction", "connectivity/resting_state_networks", "decoding/decoding_intro", "decoding/estimator_choice", "decoding/frem", "decoding/going_further", "decoding/index", "decoding/searchlight", "decoding/space_net", "developers/group_sparse_covariance", "development", "glm/first_level_model", "glm/glm_intro", "glm/index", "glm/second_level_model", "glossary", "index", "introduction", "maintenance", "manipulating_images/index", "manipulating_images/input_output", "manipulating_images/manipulating_images", "manipulating_images/masker_objects", "modules/connectome", "modules/datasets", "modules/decoding", "modules/decomposition", "modules/generated/nilearn.connectome.ConnectivityMeasure", "modules/generated/nilearn.connectome.GroupSparseCovariance", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV", "modules/generated/nilearn.connectome.cov_to_corr", "modules/generated/nilearn.connectome.group_sparse_covariance", "modules/generated/nilearn.connectome.prec_to_partial", "modules/generated/nilearn.connectome.sym_matrix_to_vec", "modules/generated/nilearn.connectome.vec_to_sym_matrix", "modules/generated/nilearn.datasets.fetch_abide_pcp", "modules/generated/nilearn.datasets.fetch_adhd", "modules/generated/nilearn.datasets.fetch_atlas_aal", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009", "modules/generated/nilearn.datasets.fetch_atlas_difumo", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford", "modules/generated/nilearn.datasets.fetch_atlas_juelich", "modules/generated/nilearn.datasets.fetch_atlas_msdl", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux", "modules/generated/nilearn.datasets.fetch_atlas_talairach", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010", "modules/generated/nilearn.datasets.fetch_coords_power_2011", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018", "modules/generated/nilearn.datasets.fetch_development_fmri", "modules/generated/nilearn.datasets.fetch_ds000030_urls", "modules/generated/nilearn.datasets.fetch_fiac_first_level", "modules/generated/nilearn.datasets.fetch_haxby", "modules/generated/nilearn.datasets.fetch_icbm152_2009", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset", "modules/generated/nilearn.datasets.fetch_localizer_button_task", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task", "modules/generated/nilearn.datasets.fetch_localizer_contrasts", "modules/generated/nilearn.datasets.fetch_localizer_first_level", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats", "modules/generated/nilearn.datasets.fetch_mixed_gambles", "modules/generated/nilearn.datasets.fetch_miyawaki2008", "modules/generated/nilearn.datasets.fetch_neurovault", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task", "modules/generated/nilearn.datasets.fetch_neurovault_ids", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task", "modules/generated/nilearn.datasets.fetch_oasis_vbm", "modules/generated/nilearn.datasets.fetch_openneuro_dataset", "modules/generated/nilearn.datasets.fetch_openneuro_dataset_index", "modules/generated/nilearn.datasets.fetch_spm_auditory", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri", "modules/generated/nilearn.datasets.fetch_surf_fsaverage", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced", "modules/generated/nilearn.datasets.get_data_dirs", "modules/generated/nilearn.datasets.load_mni152_brain_mask", "modules/generated/nilearn.datasets.load_mni152_gm_mask", "modules/generated/nilearn.datasets.load_mni152_gm_template", "modules/generated/nilearn.datasets.load_mni152_template", "modules/generated/nilearn.datasets.load_mni152_wm_mask", "modules/generated/nilearn.datasets.load_mni152_wm_template", "modules/generated/nilearn.datasets.load_sample_motor_activation_image", "modules/generated/nilearn.datasets.patch_openneuro_dataset", "modules/generated/nilearn.datasets.select_from_index", "modules/generated/nilearn.decoding.Decoder", "modules/generated/nilearn.decoding.DecoderRegressor", "modules/generated/nilearn.decoding.FREMClassifier", "modules/generated/nilearn.decoding.FREMRegressor", "modules/generated/nilearn.decoding.SearchLight", "modules/generated/nilearn.decoding.SpaceNetClassifier", "modules/generated/nilearn.decoding.SpaceNetRegressor", "modules/generated/nilearn.decomposition.CanICA", "modules/generated/nilearn.decomposition.DictLearning", "modules/generated/nilearn.glm.ARModel", "modules/generated/nilearn.glm.Contrast", "modules/generated/nilearn.glm.FContrastResults", "modules/generated/nilearn.glm.LikelihoodModelResults", "modules/generated/nilearn.glm.OLSModel", "modules/generated/nilearn.glm.RegressionResults", "modules/generated/nilearn.glm.SimpleRegressionResults", "modules/generated/nilearn.glm.TContrastResults", "modules/generated/nilearn.glm.cluster_level_inference", "modules/generated/nilearn.glm.compute_contrast", "modules/generated/nilearn.glm.compute_fixed_effects", "modules/generated/nilearn.glm.expression_to_contrast_vector", "modules/generated/nilearn.glm.fdr_threshold", "modules/generated/nilearn.glm.first_level.FirstLevelModel", "modules/generated/nilearn.glm.first_level.check_design_matrix", "modules/generated/nilearn.glm.first_level.compute_regressor", "modules/generated/nilearn.glm.first_level.first_level_from_bids", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative", "modules/generated/nilearn.glm.first_level.glover_hrf", "modules/generated/nilearn.glm.first_level.glover_time_derivative", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix", "modules/generated/nilearn.glm.first_level.mean_scaling", "modules/generated/nilearn.glm.first_level.run_glm", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative", "modules/generated/nilearn.glm.first_level.spm_hrf", "modules/generated/nilearn.glm.first_level.spm_time_derivative", "modules/generated/nilearn.glm.second_level.SecondLevelModel", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix", "modules/generated/nilearn.glm.second_level.non_parametric_inference", "modules/generated/nilearn.glm.threshold_stats_img", "modules/generated/nilearn.image.binarize_img", "modules/generated/nilearn.image.clean_img", "modules/generated/nilearn.image.concat_imgs", "modules/generated/nilearn.image.coord_transform", "modules/generated/nilearn.image.copy_img", "modules/generated/nilearn.image.crop_img", "modules/generated/nilearn.image.get_data", "modules/generated/nilearn.image.high_variance_confounds", "modules/generated/nilearn.image.index_img", "modules/generated/nilearn.image.iter_img", "modules/generated/nilearn.image.largest_connected_component_img", "modules/generated/nilearn.image.load_img", "modules/generated/nilearn.image.math_img", "modules/generated/nilearn.image.mean_img", "modules/generated/nilearn.image.new_img_like", "modules/generated/nilearn.image.reorder_img", "modules/generated/nilearn.image.resample_img", "modules/generated/nilearn.image.resample_to_img", "modules/generated/nilearn.image.smooth_img", "modules/generated/nilearn.image.swap_img_hemispheres", "modules/generated/nilearn.image.threshold_img", "modules/generated/nilearn.interfaces.bids.get_bids_files", "modules/generated/nilearn.interfaces.bids.parse_bids_filename", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids", "modules/generated/nilearn.interfaces.fmriprep.load_confounds", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat", "modules/generated/nilearn.maskers.BaseMasker", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker", "modules/generated/nilearn.maskers.MultiNiftiMasker", "modules/generated/nilearn.maskers.NiftiLabelsMasker", "modules/generated/nilearn.maskers.NiftiMapsMasker", "modules/generated/nilearn.maskers.NiftiMasker", "modules/generated/nilearn.maskers.NiftiSpheresMasker", "modules/generated/nilearn.masking.apply_mask", "modules/generated/nilearn.masking.compute_background_mask", "modules/generated/nilearn.masking.compute_brain_mask", "modules/generated/nilearn.masking.compute_epi_mask", "modules/generated/nilearn.masking.compute_multi_background_mask", "modules/generated/nilearn.masking.compute_multi_brain_mask", "modules/generated/nilearn.masking.compute_multi_epi_mask", "modules/generated/nilearn.masking.intersect_masks", "modules/generated/nilearn.masking.unmask", "modules/generated/nilearn.mass_univariate.permuted_ols", "modules/generated/nilearn.plotting.displays.BaseAxes", "modules/generated/nilearn.plotting.displays.BaseSlicer", "modules/generated/nilearn.plotting.displays.CutAxes", "modules/generated/nilearn.plotting.displays.GlassBrainAxes", "modules/generated/nilearn.plotting.displays.LProjector", "modules/generated/nilearn.plotting.displays.LRProjector", "modules/generated/nilearn.plotting.displays.LYRProjector", "modules/generated/nilearn.plotting.displays.LYRZProjector", "modules/generated/nilearn.plotting.displays.LZRProjector", "modules/generated/nilearn.plotting.displays.LZRYProjector", "modules/generated/nilearn.plotting.displays.MosaicSlicer", "modules/generated/nilearn.plotting.displays.OrthoProjector", "modules/generated/nilearn.plotting.displays.OrthoSlicer", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure", "modules/generated/nilearn.plotting.displays.RProjector", "modules/generated/nilearn.plotting.displays.TiledSlicer", "modules/generated/nilearn.plotting.displays.XProjector", "modules/generated/nilearn.plotting.displays.XSlicer", "modules/generated/nilearn.plotting.displays.XZProjector", "modules/generated/nilearn.plotting.displays.XZSlicer", "modules/generated/nilearn.plotting.displays.YProjector", "modules/generated/nilearn.plotting.displays.YSlicer", "modules/generated/nilearn.plotting.displays.YXProjector", "modules/generated/nilearn.plotting.displays.YXSlicer", "modules/generated/nilearn.plotting.displays.YZProjector", "modules/generated/nilearn.plotting.displays.YZSlicer", "modules/generated/nilearn.plotting.displays.ZProjector", "modules/generated/nilearn.plotting.displays.ZSlicer", "modules/generated/nilearn.plotting.displays.get_projector", "modules/generated/nilearn.plotting.displays.get_slicer", "modules/generated/nilearn.plotting.find_cut_slices", "modules/generated/nilearn.plotting.find_parcellation_cut_coords", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords", "modules/generated/nilearn.plotting.find_xyz_cut_coords", "modules/generated/nilearn.plotting.plot_anat", "modules/generated/nilearn.plotting.plot_carpet", "modules/generated/nilearn.plotting.plot_connectome", "modules/generated/nilearn.plotting.plot_contrast_matrix", "modules/generated/nilearn.plotting.plot_design_matrix", "modules/generated/nilearn.plotting.plot_epi", "modules/generated/nilearn.plotting.plot_event", "modules/generated/nilearn.plotting.plot_glass_brain", "modules/generated/nilearn.plotting.plot_img", "modules/generated/nilearn.plotting.plot_img_comparison", "modules/generated/nilearn.plotting.plot_img_on_surf", "modules/generated/nilearn.plotting.plot_markers", "modules/generated/nilearn.plotting.plot_matrix", "modules/generated/nilearn.plotting.plot_prob_atlas", "modules/generated/nilearn.plotting.plot_roi", "modules/generated/nilearn.plotting.plot_stat_map", "modules/generated/nilearn.plotting.plot_surf", "modules/generated/nilearn.plotting.plot_surf_contours", "modules/generated/nilearn.plotting.plot_surf_roi", "modules/generated/nilearn.plotting.plot_surf_stat_map", "modules/generated/nilearn.plotting.show", "modules/generated/nilearn.plotting.view_connectome", "modules/generated/nilearn.plotting.view_img", "modules/generated/nilearn.plotting.view_img_on_surf", "modules/generated/nilearn.plotting.view_markers", "modules/generated/nilearn.plotting.view_surf", "modules/generated/nilearn.regions.HierarchicalKMeans", "modules/generated/nilearn.regions.Parcellations", "modules/generated/nilearn.regions.ReNA", "modules/generated/nilearn.regions.RegionExtractor", "modules/generated/nilearn.regions.connected_label_regions", "modules/generated/nilearn.regions.connected_regions", "modules/generated/nilearn.regions.img_to_signals_labels", "modules/generated/nilearn.regions.img_to_signals_maps", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration", "modules/generated/nilearn.regions.signals_to_img_labels", "modules/generated/nilearn.regions.signals_to_img_maps", "modules/generated/nilearn.reporting.HTMLReport", "modules/generated/nilearn.reporting.get_clusters_table", "modules/generated/nilearn.reporting.make_glm_report", "modules/generated/nilearn.signal.butterworth", "modules/generated/nilearn.signal.clean", "modules/generated/nilearn.signal.high_variance_confounds", "modules/generated/nilearn.surface.load_surf_data", "modules/generated/nilearn.surface.load_surf_mesh", "modules/generated/nilearn.surface.vol_to_surf", "modules/glm", "modules/image", "modules/index", "modules/interfaces", "modules/maskers", "modules/masking", "modules/mass_univariate", "modules/plotting", "modules/regions", "modules/reporting", "modules/signal", "modules/surface", "plotting/index", "quickstart", "user_guide"], "filenames": ["authors.rst", "auto_examples/00_tutorials/index.rst", "auto_examples/00_tutorials/plot_3d_and_4d_niimg.rst", "auto_examples/00_tutorials/plot_decoding_tutorial.rst", "auto_examples/00_tutorials/plot_nilearn_101.rst", "auto_examples/00_tutorials/plot_python_101.rst", "auto_examples/00_tutorials/plot_single_subject_single_run.rst", "auto_examples/00_tutorials/sg_execution_times.rst", "auto_examples/01_plotting/index.rst", "auto_examples/01_plotting/plot_3d_map_to_surface_projection.rst", "auto_examples/01_plotting/plot_atlas.rst", "auto_examples/01_plotting/plot_carpet.rst", "auto_examples/01_plotting/plot_colormaps.rst", "auto_examples/01_plotting/plot_demo_glass_brain.rst", "auto_examples/01_plotting/plot_demo_glass_brain_extensive.rst", "auto_examples/01_plotting/plot_demo_more_plotting.rst", "auto_examples/01_plotting/plot_demo_plotting.rst", "auto_examples/01_plotting/plot_dim_plotting.rst", "auto_examples/01_plotting/plot_haxby_masks.rst", "auto_examples/01_plotting/plot_multiscale_parcellations.rst", "auto_examples/01_plotting/plot_overlay.rst", "auto_examples/01_plotting/plot_prob_atlas.rst", "auto_examples/01_plotting/plot_surf_atlas.rst", "auto_examples/01_plotting/plot_surf_stat_map.rst", "auto_examples/01_plotting/plot_surface_projection_strategies.rst", "auto_examples/01_plotting/plot_visualization.rst", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats.rst", "auto_examples/01_plotting/sg_execution_times.rst", "auto_examples/02_decoding/index.rst", "auto_examples/02_decoding/plot_haxby_anova_svm.rst", "auto_examples/02_decoding/plot_haxby_different_estimators.rst", "auto_examples/02_decoding/plot_haxby_frem.rst", "auto_examples/02_decoding/plot_haxby_full_analysis.rst", "auto_examples/02_decoding/plot_haxby_glm_decoding.rst", "auto_examples/02_decoding/plot_haxby_grid_search.rst", "auto_examples/02_decoding/plot_haxby_multiclass.rst", "auto_examples/02_decoding/plot_haxby_searchlight.rst", "auto_examples/02_decoding/plot_haxby_searchlight_surface.rst", "auto_examples/02_decoding/plot_haxby_stimuli.rst", "auto_examples/02_decoding/plot_mixed_gambles_frem.rst", "auto_examples/02_decoding/plot_miyawaki_encoding.rst", "auto_examples/02_decoding/plot_miyawaki_reconstruction.rst", "auto_examples/02_decoding/plot_oasis_vbm.rst", "auto_examples/02_decoding/plot_oasis_vbm_space_net.rst", "auto_examples/02_decoding/plot_simulated_data.rst", "auto_examples/02_decoding/sg_execution_times.rst", "auto_examples/03_connectivity/index.rst", "auto_examples/03_connectivity/plot_atlas_comparison.rst", "auto_examples/03_connectivity/plot_compare_decomposition.rst", "auto_examples/03_connectivity/plot_data_driven_parcellations.rst", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps.rst", "auto_examples/03_connectivity/plot_group_level_connectivity.rst", "auto_examples/03_connectivity/plot_inverse_covariance_connectome.rst", "auto_examples/03_connectivity/plot_multi_subject_connectome.rst", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction.rst", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation.rst", "auto_examples/03_connectivity/plot_signal_extraction.rst", "auto_examples/03_connectivity/plot_simulated_connectome.rst", "auto_examples/03_connectivity/plot_sphere_based_connectome.rst", "auto_examples/03_connectivity/sg_execution_times.rst", "auto_examples/04_glm_first_level/index.rst", "auto_examples/04_glm_first_level/plot_adhd_dmn.rst", "auto_examples/04_glm_first_level/plot_bids_features.rst", "auto_examples/04_glm_first_level/plot_design_matrix.rst", "auto_examples/04_glm_first_level/plot_fiac_analysis.rst", "auto_examples/04_glm_first_level/plot_fir_model.rst", "auto_examples/04_glm_first_level/plot_first_level_details.rst", "auto_examples/04_glm_first_level/plot_fixed_effects.rst", "auto_examples/04_glm_first_level/plot_hrf.rst", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis.rst", "auto_examples/04_glm_first_level/plot_predictions_residuals.rst", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces.rst", "auto_examples/04_glm_first_level/plot_write_events_file.rst", "auto_examples/04_glm_first_level/sg_execution_times.rst", "auto_examples/05_glm_second_level/index.rst", "auto_examples/05_glm_second_level/plot_oasis.rst", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels.rst", "auto_examples/05_glm_second_level/plot_second_level_association_test.rst", "auto_examples/05_glm_second_level/plot_second_level_design_matrix.rst", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test.rst", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test.rst", "auto_examples/05_glm_second_level/plot_thresholding.rst", "auto_examples/05_glm_second_level/sg_execution_times.rst", "auto_examples/06_manipulating_images/index.rst", "auto_examples/06_manipulating_images/plot_affine_transformation.rst", "auto_examples/06_manipulating_images/plot_compare_mean_image.rst", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image.rst", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas.rst", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps.rst", "auto_examples/06_manipulating_images/plot_mask_computation.rst", "auto_examples/06_manipulating_images/plot_negate_image.rst", "auto_examples/06_manipulating_images/plot_nifti_labels_simple.rst", "auto_examples/06_manipulating_images/plot_nifti_simple.rst", "auto_examples/06_manipulating_images/plot_resample_to_template.rst", "auto_examples/06_manipulating_images/plot_roi_extraction.rst", "auto_examples/06_manipulating_images/plot_smooth_mean_image.rst", "auto_examples/06_manipulating_images/sg_execution_times.rst", "auto_examples/07_advanced/index.rst", "auto_examples/07_advanced/plot_advanced_decoding_scikit.rst", "auto_examples/07_advanced/plot_age_group_prediction_cross_val.rst", "auto_examples/07_advanced/plot_beta_series.rst", "auto_examples/07_advanced/plot_bids_analysis.rst", "auto_examples/07_advanced/plot_haxby_mass_univariate.rst", "auto_examples/07_advanced/plot_ica_neurovault.rst", "auto_examples/07_advanced/plot_ica_resting_state.rst", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods.rst", "auto_examples/07_advanced/plot_localizer_simple_analysis.rst", "auto_examples/07_advanced/plot_neurovault_meta_analysis.rst", "auto_examples/07_advanced/plot_surface_bids_analysis.rst", "auto_examples/07_advanced/sg_execution_times.rst", "auto_examples/index.rst", "bibliography.rst", "building_blocks/index.rst", "building_blocks/manual_pipeline.rst", "building_blocks/neurovault.rst", "changes/0.1.0.rst", "changes/0.1.1.rst", "changes/0.1.2.rst", "changes/0.1.3.rst", "changes/0.1.4.rst", "changes/0.10.0.rst", "changes/0.10.1.rst", "changes/0.2.0.rst", "changes/0.2.1.rst", "changes/0.2.2.rst", "changes/0.2.3.rst", "changes/0.2.4.rst", "changes/0.2.5.rst", "changes/0.2.6.rst", "changes/0.3.0.rst", "changes/0.3.1.rst", "changes/0.4.0.rst", "changes/0.4.1.rst", "changes/0.4.2.rst", "changes/0.5.0.rst", "changes/0.5.1.rst", "changes/0.5.2.rst", "changes/0.6.0.rst", "changes/0.6.1.rst", "changes/0.6.2.rst", "changes/0.7.0.rst", "changes/0.7.1.rst", "changes/0.8.0.rst", "changes/0.8.1.rst", "changes/0.9.0.rst", "changes/0.9.1.rst", "changes/0.9.2.rst", "changes/latest.rst", "changes/names.rst", "changes/whats_new.rst", "connectivity/connectome_extraction.rst", "connectivity/functional_connectomes.rst", "connectivity/index.rst", "connectivity/parcellating.rst", "connectivity/region_extraction.rst", "connectivity/resting_state_networks.rst", "decoding/decoding_intro.rst", "decoding/estimator_choice.rst", "decoding/frem.rst", "decoding/going_further.rst", "decoding/index.rst", "decoding/searchlight.rst", "decoding/space_net.rst", "developers/group_sparse_covariance.rst", "development.rst", "glm/first_level_model.rst", "glm/glm_intro.rst", "glm/index.rst", "glm/second_level_model.rst", "glossary.rst", "index.rst", "introduction.rst", "maintenance.rst", "manipulating_images/index.rst", "manipulating_images/input_output.rst", "manipulating_images/manipulating_images.rst", "manipulating_images/masker_objects.rst", "modules/connectome.rst", "modules/datasets.rst", "modules/decoding.rst", "modules/decomposition.rst", "modules/generated/nilearn.connectome.ConnectivityMeasure.rst", "modules/generated/nilearn.connectome.GroupSparseCovariance.rst", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV.rst", "modules/generated/nilearn.connectome.cov_to_corr.rst", "modules/generated/nilearn.connectome.group_sparse_covariance.rst", "modules/generated/nilearn.connectome.prec_to_partial.rst", "modules/generated/nilearn.connectome.sym_matrix_to_vec.rst", "modules/generated/nilearn.connectome.vec_to_sym_matrix.rst", "modules/generated/nilearn.datasets.fetch_abide_pcp.rst", "modules/generated/nilearn.datasets.fetch_adhd.rst", "modules/generated/nilearn.datasets.fetch_atlas_aal.rst", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011.rst", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015.rst", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012.rst", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_difumo.rst", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford.rst", "modules/generated/nilearn.datasets.fetch_atlas_juelich.rst", "modules/generated/nilearn.datasets.fetch_atlas_msdl.rst", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017.rst", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018.rst", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux.rst", "modules/generated/nilearn.datasets.fetch_atlas_talairach.rst", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011.rst", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset.rst", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010.rst", "modules/generated/nilearn.datasets.fetch_coords_power_2011.rst", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018.rst", "modules/generated/nilearn.datasets.fetch_development_fmri.rst", "modules/generated/nilearn.datasets.fetch_ds000030_urls.rst", "modules/generated/nilearn.datasets.fetch_fiac_first_level.rst", "modules/generated/nilearn.datasets.fetch_haxby.rst", "modules/generated/nilearn.datasets.fetch_icbm152_2009.rst", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask.rst", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset.rst", "modules/generated/nilearn.datasets.fetch_localizer_button_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_contrasts.rst", "modules/generated/nilearn.datasets.fetch_localizer_first_level.rst", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats.rst", "modules/generated/nilearn.datasets.fetch_mixed_gambles.rst", "modules/generated/nilearn.datasets.fetch_miyawaki2008.rst", "modules/generated/nilearn.datasets.fetch_neurovault.rst", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task.rst", "modules/generated/nilearn.datasets.fetch_neurovault_ids.rst", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task.rst", "modules/generated/nilearn.datasets.fetch_oasis_vbm.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset_index.rst", "modules/generated/nilearn.datasets.fetch_spm_auditory.rst", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri.rst", "modules/generated/nilearn.datasets.fetch_surf_fsaverage.rst", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced.rst", "modules/generated/nilearn.datasets.get_data_dirs.rst", "modules/generated/nilearn.datasets.load_mni152_brain_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_template.rst", "modules/generated/nilearn.datasets.load_mni152_template.rst", "modules/generated/nilearn.datasets.load_mni152_wm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_wm_template.rst", "modules/generated/nilearn.datasets.load_sample_motor_activation_image.rst", "modules/generated/nilearn.datasets.patch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.select_from_index.rst", "modules/generated/nilearn.decoding.Decoder.rst", "modules/generated/nilearn.decoding.DecoderRegressor.rst", "modules/generated/nilearn.decoding.FREMClassifier.rst", "modules/generated/nilearn.decoding.FREMRegressor.rst", "modules/generated/nilearn.decoding.SearchLight.rst", "modules/generated/nilearn.decoding.SpaceNetClassifier.rst", "modules/generated/nilearn.decoding.SpaceNetRegressor.rst", "modules/generated/nilearn.decomposition.CanICA.rst", "modules/generated/nilearn.decomposition.DictLearning.rst", "modules/generated/nilearn.glm.ARModel.rst", "modules/generated/nilearn.glm.Contrast.rst", "modules/generated/nilearn.glm.FContrastResults.rst", "modules/generated/nilearn.glm.LikelihoodModelResults.rst", "modules/generated/nilearn.glm.OLSModel.rst", "modules/generated/nilearn.glm.RegressionResults.rst", "modules/generated/nilearn.glm.SimpleRegressionResults.rst", "modules/generated/nilearn.glm.TContrastResults.rst", "modules/generated/nilearn.glm.cluster_level_inference.rst", "modules/generated/nilearn.glm.compute_contrast.rst", "modules/generated/nilearn.glm.compute_fixed_effects.rst", "modules/generated/nilearn.glm.expression_to_contrast_vector.rst", "modules/generated/nilearn.glm.fdr_threshold.rst", "modules/generated/nilearn.glm.first_level.FirstLevelModel.rst", "modules/generated/nilearn.glm.first_level.check_design_matrix.rst", "modules/generated/nilearn.glm.first_level.compute_regressor.rst", "modules/generated/nilearn.glm.first_level.first_level_from_bids.rst", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.glover_hrf.rst", "modules/generated/nilearn.glm.first_level.glover_time_derivative.rst", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix.rst", "modules/generated/nilearn.glm.first_level.mean_scaling.rst", "modules/generated/nilearn.glm.first_level.run_glm.rst", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.spm_hrf.rst", "modules/generated/nilearn.glm.first_level.spm_time_derivative.rst", "modules/generated/nilearn.glm.second_level.SecondLevelModel.rst", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix.rst", "modules/generated/nilearn.glm.second_level.non_parametric_inference.rst", "modules/generated/nilearn.glm.threshold_stats_img.rst", "modules/generated/nilearn.image.binarize_img.rst", "modules/generated/nilearn.image.clean_img.rst", "modules/generated/nilearn.image.concat_imgs.rst", "modules/generated/nilearn.image.coord_transform.rst", "modules/generated/nilearn.image.copy_img.rst", "modules/generated/nilearn.image.crop_img.rst", "modules/generated/nilearn.image.get_data.rst", "modules/generated/nilearn.image.high_variance_confounds.rst", "modules/generated/nilearn.image.index_img.rst", "modules/generated/nilearn.image.iter_img.rst", "modules/generated/nilearn.image.largest_connected_component_img.rst", "modules/generated/nilearn.image.load_img.rst", "modules/generated/nilearn.image.math_img.rst", "modules/generated/nilearn.image.mean_img.rst", "modules/generated/nilearn.image.new_img_like.rst", "modules/generated/nilearn.image.reorder_img.rst", "modules/generated/nilearn.image.resample_img.rst", "modules/generated/nilearn.image.resample_to_img.rst", "modules/generated/nilearn.image.smooth_img.rst", "modules/generated/nilearn.image.swap_img_hemispheres.rst", "modules/generated/nilearn.image.threshold_img.rst", "modules/generated/nilearn.interfaces.bids.get_bids_files.rst", "modules/generated/nilearn.interfaces.bids.parse_bids_filename.rst", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy.rst", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat.rst", "modules/generated/nilearn.maskers.BaseMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.NiftiMapsMasker.rst", "modules/generated/nilearn.maskers.NiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiSpheresMasker.rst", "modules/generated/nilearn.masking.apply_mask.rst", "modules/generated/nilearn.masking.compute_background_mask.rst", "modules/generated/nilearn.masking.compute_brain_mask.rst", "modules/generated/nilearn.masking.compute_epi_mask.rst", "modules/generated/nilearn.masking.compute_multi_background_mask.rst", "modules/generated/nilearn.masking.compute_multi_brain_mask.rst", "modules/generated/nilearn.masking.compute_multi_epi_mask.rst", "modules/generated/nilearn.masking.intersect_masks.rst", "modules/generated/nilearn.masking.unmask.rst", "modules/generated/nilearn.mass_univariate.permuted_ols.rst", "modules/generated/nilearn.plotting.displays.BaseAxes.rst", "modules/generated/nilearn.plotting.displays.BaseSlicer.rst", "modules/generated/nilearn.plotting.displays.CutAxes.rst", "modules/generated/nilearn.plotting.displays.GlassBrainAxes.rst", "modules/generated/nilearn.plotting.displays.LProjector.rst", "modules/generated/nilearn.plotting.displays.LRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRZProjector.rst", "modules/generated/nilearn.plotting.displays.LZRProjector.rst", "modules/generated/nilearn.plotting.displays.LZRYProjector.rst", "modules/generated/nilearn.plotting.displays.MosaicSlicer.rst", "modules/generated/nilearn.plotting.displays.OrthoProjector.rst", "modules/generated/nilearn.plotting.displays.OrthoSlicer.rst", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure.rst", "modules/generated/nilearn.plotting.displays.RProjector.rst", "modules/generated/nilearn.plotting.displays.TiledSlicer.rst", "modules/generated/nilearn.plotting.displays.XProjector.rst", "modules/generated/nilearn.plotting.displays.XSlicer.rst", "modules/generated/nilearn.plotting.displays.XZProjector.rst", "modules/generated/nilearn.plotting.displays.XZSlicer.rst", "modules/generated/nilearn.plotting.displays.YProjector.rst", "modules/generated/nilearn.plotting.displays.YSlicer.rst", "modules/generated/nilearn.plotting.displays.YXProjector.rst", "modules/generated/nilearn.plotting.displays.YXSlicer.rst", "modules/generated/nilearn.plotting.displays.YZProjector.rst", "modules/generated/nilearn.plotting.displays.YZSlicer.rst", "modules/generated/nilearn.plotting.displays.ZProjector.rst", "modules/generated/nilearn.plotting.displays.ZSlicer.rst", "modules/generated/nilearn.plotting.displays.get_projector.rst", "modules/generated/nilearn.plotting.displays.get_slicer.rst", "modules/generated/nilearn.plotting.find_cut_slices.rst", "modules/generated/nilearn.plotting.find_parcellation_cut_coords.rst", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords.rst", "modules/generated/nilearn.plotting.find_xyz_cut_coords.rst", "modules/generated/nilearn.plotting.plot_anat.rst", "modules/generated/nilearn.plotting.plot_carpet.rst", "modules/generated/nilearn.plotting.plot_connectome.rst", "modules/generated/nilearn.plotting.plot_contrast_matrix.rst", "modules/generated/nilearn.plotting.plot_design_matrix.rst", "modules/generated/nilearn.plotting.plot_epi.rst", "modules/generated/nilearn.plotting.plot_event.rst", "modules/generated/nilearn.plotting.plot_glass_brain.rst", "modules/generated/nilearn.plotting.plot_img.rst", "modules/generated/nilearn.plotting.plot_img_comparison.rst", "modules/generated/nilearn.plotting.plot_img_on_surf.rst", "modules/generated/nilearn.plotting.plot_markers.rst", "modules/generated/nilearn.plotting.plot_matrix.rst", "modules/generated/nilearn.plotting.plot_prob_atlas.rst", "modules/generated/nilearn.plotting.plot_roi.rst", "modules/generated/nilearn.plotting.plot_stat_map.rst", "modules/generated/nilearn.plotting.plot_surf.rst", "modules/generated/nilearn.plotting.plot_surf_contours.rst", "modules/generated/nilearn.plotting.plot_surf_roi.rst", "modules/generated/nilearn.plotting.plot_surf_stat_map.rst", "modules/generated/nilearn.plotting.show.rst", "modules/generated/nilearn.plotting.view_connectome.rst", "modules/generated/nilearn.plotting.view_img.rst", "modules/generated/nilearn.plotting.view_img_on_surf.rst", "modules/generated/nilearn.plotting.view_markers.rst", "modules/generated/nilearn.plotting.view_surf.rst", "modules/generated/nilearn.regions.HierarchicalKMeans.rst", "modules/generated/nilearn.regions.Parcellations.rst", "modules/generated/nilearn.regions.ReNA.rst", "modules/generated/nilearn.regions.RegionExtractor.rst", "modules/generated/nilearn.regions.connected_label_regions.rst", "modules/generated/nilearn.regions.connected_regions.rst", "modules/generated/nilearn.regions.img_to_signals_labels.rst", "modules/generated/nilearn.regions.img_to_signals_maps.rst", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration.rst", "modules/generated/nilearn.regions.signals_to_img_labels.rst", "modules/generated/nilearn.regions.signals_to_img_maps.rst", "modules/generated/nilearn.reporting.HTMLReport.rst", "modules/generated/nilearn.reporting.get_clusters_table.rst", "modules/generated/nilearn.reporting.make_glm_report.rst", "modules/generated/nilearn.signal.butterworth.rst", "modules/generated/nilearn.signal.clean.rst", "modules/generated/nilearn.signal.high_variance_confounds.rst", "modules/generated/nilearn.surface.load_surf_data.rst", "modules/generated/nilearn.surface.load_surf_mesh.rst", "modules/generated/nilearn.surface.vol_to_surf.rst", "modules/glm.rst", "modules/image.rst", "modules/index.rst", "modules/interfaces.rst", "modules/maskers.rst", "modules/masking.rst", "modules/mass_univariate.rst", "modules/plotting.rst", "modules/regions.rst", "modules/reporting.rst", "modules/signal.rst", "modules/surface.rst", "plotting/index.rst", "quickstart.md", "user_guide.rst"], "titles": ["Team", "Basic tutorials", "3D and 4D niimgs: handling and visualizing", "A introduction tutorial to fMRI decoding", "Basic nilearn example: manipulating and looking at data", "Basic numerics and plotting with Python", "Intro to GLM Analysis: a single-session, single-subject fMRI dataset", "Computation times", "Visualization of brain images", "Making a surface plot of a 3D statistical map", "Basic Atlas plotting", "Visualizing global patterns with a carpet plot", "Matplotlib colormaps in Nilearn", "Glass brain plotting in nilearn", "Glass brain plotting in nilearn (all options)", "More plotting tools from nilearn", "Plotting tools in nilearn", "Controlling the contrast of the background when plotting", "Plot Haxby masks", "Visualizing multiscale functional brain parcellations", "Visualizing a probabilistic atlas: the default mode in the MSDL atlas", "Visualizing 4D probabilistic atlas maps", "Loading and plotting of a cortical surface atlas", "Seed-based connectivity on the surface", "Technical point: Illustration of the volume to surface sampling schemes", "NeuroImaging volumes visualization", "Visualizing Megatrawls Network Matrices from Human Connectome Project", "Computation times", "Decoding and predicting from brain images", "Decoding with ANOVA + SVM: face vs house in the Haxby dataset", "Different classifiers in decoding the Haxby dataset", "Decoding with FREM: face vs house vs chair object recognition", "ROI-based decoding analysis in Haxby et al. dataset", "Decoding of a dataset after GLM fit for signal extraction", "Setting a parameter by cross-validation", "The haxby dataset: different multi-class strategies", "Searchlight analysis of face vs house recognition", "Cortical surface-based searchlight decoding", "Show stimuli of Haxby et al. dataset", "FREM on Jimura et al \u201cmixed gambles\u201d dataset", "Encoding models for visual stimuli from Miyawaki et al. 2008", "Reconstruction of visual stimuli from Miyawaki et al. 2008", "Voxel-Based Morphometry on Oasis dataset", "Voxel-Based Morphometry on Oasis dataset with Space-Net prior", "Example of pattern recognition on simulated data", "Computation times", "Functional connectivity", "Comparing connectomes on different reference atlases", "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning", "Clustering methods to learn a brain parcellation from fMRI", "Regions extraction using dictionary learning and functional connectomes", "Classification of age groups using functional connectivity", "Computing a connectome with sparse inverse covariance", "Group Sparse inverse covariance for multi-subject connectome", "Extracting signals of a probabilistic atlas of functional regions", "Producing single subject maps of seed-to-voxel correlation", "Extracting signals from a brain parcellation", "Connectivity structure estimation on simulated data", "Extract signals on spheres and plot a connectome", "Computation times", "GLM: First level analysis", "Default Mode Network extraction of ADHD dataset", "First level analysis of a complete BIDS dataset from openneuro", "Examples of design matrices", "Simple example of two-session fMRI model fitting", "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model", "Understanding parameters of the first-level model", "Example of explicit fixed effects fMRI model fitting", "Example of MRI response functions", "Example of surface-based first-level analysis", "Predicted time series and residuals", "Single-subject data (two sessions) in native space", "Generate an events.tsv file for the NeuroSpin localizer task", "Computation times", "GLM: Second level analysis", "Voxel-Based Morphometry on OASIS dataset", "Second-level fMRI model: true positive proportion in clusters", "Example of generic design in second-level models", "Example of second level design matrix", "Second-level fMRI model: one sample test", "Second-level fMRI model: two-sample test, unpaired and paired", "Statistical testing of a second-level analysis", "Computation times", "Manipulating brain image volumes", "Visualization of affine resamplings", "Comparing the means of 2 images", "Breaking an atlas of labels in separated regions", "Regions Extraction of Default Mode Networks using Smith Atlas", "Region Extraction using a t-statistical map (3D)", "Understanding NiftiMasker and mask computation", "Negating an image with math_img", "Extracting signals from brain regions using the NiftiLabelsMasker", "Simple example of NiftiMasker use", "Resample an image to a template", "Computing a Region of Interest (ROI) mask manually", "Smoothing an image", "Computation times", "Advanced statistical analysis of brain images", "Advanced decoding using scikit learn", "Functional connectivity predicts age group", "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding", "BIDS dataset first and second level analysis", "Massively univariate analysis of face vs house recognition", "NeuroVault cross-study ICA maps", "Multivariate decompositions: Independent component analysis of fMRI", "Massively univariate analysis of a motor task from the Localizer dataset", "Massively univariate analysis of a calculation task from the Localizer dataset", "NeuroVault meta-analysis of stop-go paradigm studies", "Surface-based dataset first and second level analysis of a dataset", "Computation times", "Examples", "General bibliography", "<span class=\"section-number\">10. </span>Advanced usage: manual pipelines and scaling up", "<span class=\"section-number\">10.1. </span>Building your own neuroimaging machine-learning pipeline", "<span class=\"section-number\">10.2. </span>Downloading statistical maps from the Neurovault repository", "0.1.0", "0.1.1", "0.1.2", "0.1.3", "0.1.4", "0.10.0", "0.10.1", "0.2.0", "0.2.1", "0.2.2", "0.2.3", "0.2.4", "0.2.5.1", "0.2.6", "0.3.0", "0.3.1", "0.4.0", "0.4.1", "0.4.2", "0.5.0", "0.5.1", "0.5.2", "0.6.0", "0.6.1", "0.6.2", "0.7.0", "0.7.1", "0.8.0", "0.8.1", "0.9.0", "0.9.1", "0.9.2", "0.10.2.dev", "&lt;no title&gt;", "What\u2019s new", "<span class=\"section-number\">6.2. </span>Connectome extraction: inverse covariance for direct connections", "<span class=\"section-number\">6.1. </span>Extracting times series to build a functional connectome", "<span class=\"section-number\">6. </span>Functional connectivity and resting state", "<span class=\"section-number\">6.5. </span>Clustering to parcellate the brain in regions", "<span class=\"section-number\">6.4. </span>Region Extraction for better brain parcellations", "<span class=\"section-number\">6.3. </span>Extracting functional brain networks: ICA and related", "<span class=\"section-number\">5.1. </span>An introduction to decoding", "<span class=\"section-number\">5.2. </span>Choosing the right predictive model for neuroimaging", "<span class=\"section-number\">5.3. </span>FREM: fast ensembling of regularized models for robust decoding", "<span class=\"section-number\">5.6. </span>Running scikit-learn functions for more control on the analysis", "<span class=\"section-number\">5. </span>Decoding and MVPA: predicting from brain images", "<span class=\"section-number\">5.5. </span>Searchlight : finding voxels containing information", "<span class=\"section-number\">5.4. </span>SpaceNet: decoding with spatial structure for better maps", "<span class=\"section-number\">6.2.3.1. </span>Group-sparse covariance estimation", "Contributing", "<span class=\"section-number\">8.2. </span>First level models", "<span class=\"section-number\">8.1. </span>An introduction to GLMs in fMRI statistical analysis", "<span class=\"section-number\">8. </span>Analyzing fMRI using GLMs", "<span class=\"section-number\">8.3. </span>Second level models", "Glossary", "Nilearn", "<span class=\"section-number\">1. </span>Introduction", "Maintenance", "<span class=\"section-number\">9. </span>Manipulation brain volumes with nilearn", "<span class=\"section-number\">9.1. </span>Input and output: neuroimaging data representation", "<span class=\"section-number\">9.2. </span>Manipulating images: resampling, smoothing, masking, ROIs\u2026", "<span class=\"section-number\">9.3. </span>From neuroimaging volumes to data matrices: the masker objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.connectome</span></code>: Functional Connectivity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.datasets</span></code>: Automatic Dataset Fetching", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decoding</span></code>: Decoding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decomposition</span></code>: Multivariate Decompositions", "nilearn.connectome.ConnectivityMeasure", "nilearn.connectome.GroupSparseCovariance", "nilearn.connectome.GroupSparseCovarianceCV", "nilearn.connectome.cov_to_corr", "nilearn.connectome.group_sparse_covariance", "nilearn.connectome.prec_to_partial", "nilearn.connectome.sym_matrix_to_vec", "nilearn.connectome.vec_to_sym_matrix", "nilearn.datasets.fetch_abide_pcp", "nilearn.datasets.fetch_adhd", "nilearn.datasets.fetch_atlas_aal", "nilearn.datasets.fetch_atlas_allen_2011", "nilearn.datasets.fetch_atlas_basc_multiscale_2015", "nilearn.datasets.fetch_atlas_craddock_2012", "nilearn.datasets.fetch_atlas_destrieux_2009", "nilearn.datasets.fetch_atlas_difumo", "nilearn.datasets.fetch_atlas_harvard_oxford", "nilearn.datasets.fetch_atlas_juelich", "nilearn.datasets.fetch_atlas_msdl", "nilearn.datasets.fetch_atlas_pauli_2017", "nilearn.datasets.fetch_atlas_schaefer_2018", "nilearn.datasets.fetch_atlas_smith_2009", "nilearn.datasets.fetch_atlas_surf_destrieux", "nilearn.datasets.fetch_atlas_talairach", "nilearn.datasets.fetch_atlas_yeo_2011", "nilearn.datasets.fetch_bids_langloc_dataset", "nilearn.datasets.fetch_coords_dosenbach_2010", "nilearn.datasets.fetch_coords_power_2011", "nilearn.datasets.fetch_coords_seitzman_2018", "nilearn.datasets.fetch_development_fmri", "nilearn.datasets.fetch_ds000030_urls", "nilearn.datasets.fetch_fiac_first_level", "nilearn.datasets.fetch_haxby", "nilearn.datasets.fetch_icbm152_2009", "nilearn.datasets.fetch_icbm152_brain_gm_mask", "nilearn.datasets.fetch_language_localizer_demo_dataset", "nilearn.datasets.fetch_localizer_button_task", "nilearn.datasets.fetch_localizer_calculation_task", "nilearn.datasets.fetch_localizer_contrasts", "nilearn.datasets.fetch_localizer_first_level", "nilearn.datasets.fetch_megatrawls_netmats", "nilearn.datasets.fetch_mixed_gambles", "nilearn.datasets.fetch_miyawaki2008", "nilearn.datasets.fetch_neurovault", "nilearn.datasets.fetch_neurovault_auditory_computation_task", "nilearn.datasets.fetch_neurovault_ids", "nilearn.datasets.fetch_neurovault_motor_task", "nilearn.datasets.fetch_oasis_vbm", "nilearn.datasets.fetch_openneuro_dataset", "nilearn.datasets.fetch_openneuro_dataset_index", "nilearn.datasets.fetch_spm_auditory", "nilearn.datasets.fetch_spm_multimodal_fmri", "nilearn.datasets.fetch_surf_fsaverage", "nilearn.datasets.fetch_surf_nki_enhanced", "nilearn.datasets.get_data_dirs", "nilearn.datasets.load_mni152_brain_mask", "nilearn.datasets.load_mni152_gm_mask", "nilearn.datasets.load_mni152_gm_template", "nilearn.datasets.load_mni152_template", "nilearn.datasets.load_mni152_wm_mask", "nilearn.datasets.load_mni152_wm_template", "nilearn.datasets.load_sample_motor_activation_image", "nilearn.datasets.patch_openneuro_dataset", "nilearn.datasets.select_from_index", "nilearn.decoding.Decoder", "nilearn.decoding.DecoderRegressor", "nilearn.decoding.FREMClassifier", "nilearn.decoding.FREMRegressor", "nilearn.decoding.SearchLight", "nilearn.decoding.SpaceNetClassifier", "nilearn.decoding.SpaceNetRegressor", "nilearn.decomposition.CanICA", "nilearn.decomposition.DictLearning", "nilearn.glm.ARModel", "nilearn.glm.Contrast", "nilearn.glm.FContrastResults", "nilearn.glm.LikelihoodModelResults", "nilearn.glm.OLSModel", "nilearn.glm.RegressionResults", "nilearn.glm.SimpleRegressionResults", "nilearn.glm.TContrastResults", "nilearn.glm.cluster_level_inference", "nilearn.glm.compute_contrast", "nilearn.glm.compute_fixed_effects", "nilearn.glm.expression_to_contrast_vector", "nilearn.glm.fdr_threshold", "nilearn.glm.first_level.FirstLevelModel", "nilearn.glm.first_level.check_design_matrix", "nilearn.glm.first_level.compute_regressor", "nilearn.glm.first_level.first_level_from_bids", "nilearn.glm.first_level.glover_dispersion_derivative", "nilearn.glm.first_level.glover_hrf", "nilearn.glm.first_level.glover_time_derivative", "nilearn.glm.first_level.make_first_level_design_matrix", "nilearn.glm.first_level.mean_scaling", "nilearn.glm.first_level.run_glm", "nilearn.glm.first_level.spm_dispersion_derivative", "nilearn.glm.first_level.spm_hrf", "nilearn.glm.first_level.spm_time_derivative", "nilearn.glm.second_level.SecondLevelModel", "nilearn.glm.second_level.make_second_level_design_matrix", "nilearn.glm.second_level.non_parametric_inference", "nilearn.glm.threshold_stats_img", "nilearn.image.binarize_img", "nilearn.image.clean_img", "nilearn.image.concat_imgs", "nilearn.image.coord_transform", "nilearn.image.copy_img", "nilearn.image.crop_img", "nilearn.image.get_data", "nilearn.image.high_variance_confounds", "nilearn.image.index_img", "nilearn.image.iter_img", "nilearn.image.largest_connected_component_img", "nilearn.image.load_img", "nilearn.image.math_img", "nilearn.image.mean_img", "nilearn.image.new_img_like", "nilearn.image.reorder_img", "nilearn.image.resample_img", "nilearn.image.resample_to_img", "nilearn.image.smooth_img", "nilearn.image.swap_img_hemispheres", "nilearn.image.threshold_img", "nilearn.interfaces.bids.get_bids_files", "nilearn.interfaces.bids.parse_bids_filename", "nilearn.interfaces.bids.save_glm_to_bids", "nilearn.interfaces.fmriprep.load_confounds", "nilearn.interfaces.fmriprep.load_confounds_strategy", "nilearn.interfaces.fsl.get_design_from_fslmat", "nilearn.maskers.BaseMasker", "nilearn.maskers.MultiNiftiLabelsMasker", "nilearn.maskers.MultiNiftiMapsMasker", "nilearn.maskers.MultiNiftiMasker", "nilearn.maskers.NiftiLabelsMasker", "nilearn.maskers.NiftiMapsMasker", "nilearn.maskers.NiftiMasker", "nilearn.maskers.NiftiSpheresMasker", "nilearn.masking.apply_mask", "nilearn.masking.compute_background_mask", "nilearn.masking.compute_brain_mask", "nilearn.masking.compute_epi_mask", "nilearn.masking.compute_multi_background_mask", "nilearn.masking.compute_multi_brain_mask", "nilearn.masking.compute_multi_epi_mask", "nilearn.masking.intersect_masks", "nilearn.masking.unmask", "nilearn.mass_univariate.permuted_ols", "nilearn.plotting.displays.BaseAxes", "nilearn.plotting.displays.BaseSlicer", "nilearn.plotting.displays.CutAxes", "nilearn.plotting.displays.GlassBrainAxes", "nilearn.plotting.displays.LProjector", "nilearn.plotting.displays.LRProjector", "nilearn.plotting.displays.LYRProjector", "nilearn.plotting.displays.LYRZProjector", "nilearn.plotting.displays.LZRProjector", "nilearn.plotting.displays.LZRYProjector", "nilearn.plotting.displays.MosaicSlicer", "nilearn.plotting.displays.OrthoProjector", "nilearn.plotting.displays.OrthoSlicer", "nilearn.plotting.displays.PlotlySurfaceFigure", "nilearn.plotting.displays.RProjector", "nilearn.plotting.displays.TiledSlicer", "nilearn.plotting.displays.XProjector", "nilearn.plotting.displays.XSlicer", "nilearn.plotting.displays.XZProjector", "nilearn.plotting.displays.XZSlicer", "nilearn.plotting.displays.YProjector", "nilearn.plotting.displays.YSlicer", "nilearn.plotting.displays.YXProjector", "nilearn.plotting.displays.YXSlicer", "nilearn.plotting.displays.YZProjector", "nilearn.plotting.displays.YZSlicer", "nilearn.plotting.displays.ZProjector", "nilearn.plotting.displays.ZSlicer", "nilearn.plotting.displays.get_projector", "nilearn.plotting.displays.get_slicer", "nilearn.plotting.find_cut_slices", "nilearn.plotting.find_parcellation_cut_coords", "nilearn.plotting.find_probabilistic_atlas_cut_coords", "nilearn.plotting.find_xyz_cut_coords", "nilearn.plotting.plot_anat", "nilearn.plotting.plot_carpet", "nilearn.plotting.plot_connectome", "nilearn.plotting.plot_contrast_matrix", "nilearn.plotting.plot_design_matrix", "nilearn.plotting.plot_epi", "nilearn.plotting.plot_event", "nilearn.plotting.plot_glass_brain", "nilearn.plotting.plot_img", "nilearn.plotting.plot_img_comparison", "nilearn.plotting.plot_img_on_surf", "nilearn.plotting.plot_markers", "nilearn.plotting.plot_matrix", "nilearn.plotting.plot_prob_atlas", "nilearn.plotting.plot_roi", "nilearn.plotting.plot_stat_map", "nilearn.plotting.plot_surf", "nilearn.plotting.plot_surf_contours", "nilearn.plotting.plot_surf_roi", "nilearn.plotting.plot_surf_stat_map", "nilearn.plotting.show", "nilearn.plotting.view_connectome", "nilearn.plotting.view_img", "nilearn.plotting.view_img_on_surf", "nilearn.plotting.view_markers", "nilearn.plotting.view_surf", "nilearn.regions.HierarchicalKMeans", "nilearn.regions.Parcellations", "nilearn.regions.ReNA", "nilearn.regions.RegionExtractor", "nilearn.regions.connected_label_regions", "nilearn.regions.connected_regions", "nilearn.regions.img_to_signals_labels", "nilearn.regions.img_to_signals_maps", "nilearn.regions.recursive_neighbor_agglomeration", "nilearn.regions.signals_to_img_labels", "nilearn.regions.signals_to_img_maps", "nilearn.reporting.HTMLReport", "nilearn.reporting.get_clusters_table", "nilearn.reporting.make_glm_report", "nilearn.signal.butterworth", "nilearn.signal.clean", "nilearn.signal.high_variance_confounds", "nilearn.surface.load_surf_data", "nilearn.surface.load_surf_mesh", "nilearn.surface.vol_to_surf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.glm</span></code>: Generalized Linear Models", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.image</span></code>: Image Processing and Resampling Utilities", "API References", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.interfaces</span></code>: Loading components from interfaces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.maskers</span></code>: Extracting Signals from Brain Images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.masking</span></code>: Data Masking Utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.mass_univariate</span></code>: Mass-Univariate Analysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.plotting</span></code>: Plotting Brain Data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.regions</span></code>: Operating on Regions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.reporting</span></code>: Reporting Functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.signal</span></code>: Preprocessing Time Series", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.surface</span></code>: Manipulating Surface Data", "<span class=\"section-number\">7. </span>Plotting brain images", "Quickstart", "User guide"], "terms": {"thi": [0, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 121, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 418, 419, 421, 423], "work": [0, 2, 3, 6, 10, 11, 16, 18, 20, 23, 25, 29, 30, 31, 32, 34, 35, 36, 39, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 61, 64, 75, 77, 78, 80, 84, 85, 89, 91, 92, 94, 95, 98, 100, 101, 102, 104, 105, 108, 129, 130, 137, 144, 145, 149, 150, 155, 156, 157, 159, 163, 164, 165, 166, 172, 174, 175, 176, 181, 182, 183, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 307, 311, 312, 313, 314, 315, 316, 317, 318, 359, 365, 370, 389, 390, 391, 392, 401, 410, 412], "i": [0, 2, 4, 6, 9, 10, 11, 14, 15, 16, 18, 20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 111, 112, 113, 114, 116, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 170, 172, 173, 175, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 421, 422, 423], "made": [0, 21, 101, 108, 121, 140, 143, 144, 149, 160, 163, 164, 166, 169, 171, 172, 245, 246, 247, 248, 250, 251, 328, 385, 423], "avail": [0, 3, 15, 23, 24, 31, 39, 42, 62, 75, 80, 89, 94, 101, 106, 108, 114, 121, 137, 142, 149, 151, 154, 157, 159, 163, 165, 168, 171, 172, 189, 193, 196, 202, 210, 219, 221, 223, 228, 250, 251, 375, 380, 408, 422, 423], "commun": [0, 111, 164, 170, 172, 210, 422], "peopl": [0, 6, 131, 134, 135, 136, 137, 138, 139, 149, 163, 164], "which": [0, 3, 6, 9, 11, 12, 14, 15, 21, 22, 23, 25, 29, 30, 32, 33, 34, 36, 37, 40, 42, 44, 47, 49, 50, 51, 54, 56, 58, 61, 66, 68, 69, 70, 75, 76, 79, 84, 89, 91, 94, 98, 100, 108, 113, 114, 119, 120, 121, 122, 127, 128, 131, 132, 133, 134, 135, 137, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 169, 171, 172, 174, 175, 176, 188, 195, 197, 198, 200, 201, 204, 205, 210, 224, 225, 226, 227, 231, 232, 233, 235, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 266, 267, 270, 274, 275, 280, 282, 284, 289, 295, 300, 304, 306, 307, 312, 313, 314, 315, 316, 317, 318, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 379, 380, 381, 382, 385, 390, 392, 393, 394, 400, 402, 408, 421, 422], "origin": [0, 6, 36, 40, 41, 49, 50, 66, 70, 84, 89, 93, 100, 121, 128, 141, 143, 144, 149, 153, 161, 163, 172, 176, 181, 182, 183, 202, 210, 214, 219, 228, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 304, 311, 312, 313, 314, 315, 316, 317, 318, 364, 379, 381, 382, 386, 389, 390, 391, 392, 404], "from": [0, 4, 6, 8, 9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 99, 101, 102, 103, 104, 107, 108, 109, 111, 112, 115, 116, 118, 119, 120, 121, 122, 124, 127, 130, 131, 134, 135, 137, 142, 143, 144, 146, 147, 149, 150, 152, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 178, 181, 182, 183, 185, 190, 191, 193, 195, 196, 197, 198, 200, 201, 202, 204, 205, 207, 209, 210, 211, 213, 214, 215, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 234, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 264, 266, 267, 270, 274, 280, 281, 282, 284, 285, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 363, 364, 366, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 408, 414, 416, 421, 422, 423], "inria": [0, 111, 162, 199, 392], "mind": [0, 51, 156, 157, 164, 169], "project": [0, 8, 9, 15, 23, 24, 27, 42, 58, 75, 108, 110, 111, 127, 129, 131, 139, 143, 144, 149, 163, 165, 170, 189, 194, 221, 228, 234, 252, 253, 285, 332, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 370, 373, 375, 379, 380, 381, 382, 383, 384, 387, 404, 408, 421], "grew": 0, "much": [0, 3, 24, 40, 42, 51, 77, 79, 99, 100, 134, 149, 156, 163, 164, 166, 171, 207, 289, 300, 408], "further": [0, 14, 15, 55, 66, 70, 84, 94, 112, 150, 158, 160, 163, 172, 174, 178, 224, 267, 280, 308, 342, 413, 414, 421, 423], "an": [0, 2, 3, 4, 11, 14, 15, 16, 20, 21, 22, 23, 25, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 54, 55, 56, 60, 62, 63, 66, 68, 69, 70, 71, 73, 75, 79, 80, 83, 84, 88, 89, 91, 92, 94, 96, 100, 101, 102, 103, 105, 108, 110, 111, 113, 114, 120, 121, 122, 125, 126, 127, 129, 130, 131, 132, 134, 137, 139, 140, 141, 142, 144, 146, 149, 150, 151, 152, 154, 157, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 171, 172, 174, 175, 176, 181, 182, 183, 187, 191, 194, 195, 199, 205, 210, 219, 220, 222, 224, 226, 228, 229, 239, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 263, 267, 274, 276, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 294, 295, 296, 297, 299, 300, 301, 302, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 400, 402, 404, 405, 406, 408, 410, 423], "up": [0, 3, 6, 33, 36, 47, 84, 86, 89, 94, 98, 103, 111, 120, 134, 135, 137, 142, 144, 149, 153, 159, 160, 162, 163, 165, 166, 167, 169, 176, 229, 254, 257, 281, 328, 364, 389, 408, 423], "date": [0, 143, 149, 192, 195, 214, 224, 226], "list": [0, 2, 3, 6, 9, 14, 15, 16, 30, 33, 44, 47, 48, 49, 51, 53, 55, 61, 62, 64, 67, 71, 72, 75, 76, 79, 80, 85, 94, 99, 100, 101, 103, 108, 113, 114, 120, 122, 125, 127, 128, 129, 133, 134, 137, 143, 144, 146, 149, 150, 156, 164, 171, 174, 175, 176, 181, 182, 183, 185, 187, 188, 189, 191, 192, 195, 197, 198, 199, 200, 201, 203, 204, 206, 207, 210, 211, 213, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 262, 264, 265, 267, 269, 270, 274, 280, 281, 282, 283, 285, 286, 294, 295, 297, 300, 302, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 366, 369, 372, 373, 375, 376, 379, 380, 381, 382, 387, 388, 390, 392, 393, 394, 395, 396, 401, 402, 404, 406, 407, 408, 422], "can": [0, 2, 3, 4, 6, 9, 11, 12, 14, 15, 20, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 61, 62, 64, 65, 66, 68, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 86, 88, 89, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 112, 113, 114, 120, 121, 122, 125, 127, 129, 134, 135, 137, 140, 141, 142, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 174, 175, 176, 182, 183, 185, 188, 189, 192, 195, 196, 197, 198, 199, 200, 201, 205, 219, 221, 224, 228, 245, 246, 247, 248, 249, 250, 251, 257, 259, 260, 267, 269, 270, 274, 280, 282, 285, 286, 287, 292, 295, 296, 297, 300, 301, 304, 305, 308, 309, 314, 317, 320, 321, 322, 323, 324, 325, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 366, 368, 369, 370, 371, 372, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 390, 392, 393, 394, 400, 401, 402, 403, 404, 408, 421, 422, 423], "seen": [0, 3, 14, 41, 49, 113, 151, 153, 157, 159, 161, 166, 171, 172, 390, 421], "github": [0, 23, 33, 36, 49, 52, 53, 58, 62, 75, 77, 142, 146, 149, 164, 171, 172, 189, 201, 214, 309, 386, 421, 422], "addit": [0, 14, 15, 55, 63, 66, 69, 70, 79, 86, 89, 101, 113, 114, 116, 121, 129, 134, 140, 149, 156, 159, 163, 165, 169, 171, 172, 191, 213, 223, 245, 246, 247, 248, 252, 253, 255, 267, 274, 280, 282, 305, 308, 309, 311, 314, 317, 389, 390, 391, 400, 421], "credit": 0, "goe": [0, 14, 40, 86, 94, 100, 163, 182, 185], "michael": [0, 111, 115, 119, 122, 134, 149, 162, 192, 200, 234, 309], "hank": [0, 119, 122, 149], "yaroslav": [0, 131, 134, 149], "halchenko": [0, 131, 134, 149], "data": [0, 1, 2, 7, 18, 20, 21, 24, 26, 28, 31, 34, 36, 43, 45, 46, 50, 51, 53, 58, 59, 60, 63, 65, 68, 70, 73, 76, 77, 78, 79, 80, 81, 84, 86, 90, 91, 92, 95, 99, 101, 102, 104, 105, 106, 108, 110, 111, 112, 114, 120, 121, 124, 127, 128, 129, 130, 131, 132, 134, 135, 137, 140, 141, 142, 144, 145, 146, 149, 151, 152, 154, 157, 158, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 182, 183, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 267, 274, 275, 276, 280, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 363, 364, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 402, 404, 406, 408, 409, 410, 412, 421, 423], "packag": [0, 3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 61, 62, 63, 64, 71, 77, 78, 79, 80, 84, 86, 87, 91, 92, 94, 95, 98, 100, 101, 102, 104, 105, 106, 108, 118, 119, 120, 121, 134, 137, 142, 144, 149, 164, 166, 171, 172, 174, 197, 198, 421], "The": [0, 2, 3, 11, 14, 15, 17, 18, 19, 20, 21, 22, 23, 26, 28, 29, 30, 31, 32, 33, 34, 36, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 54, 55, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 106, 108, 110, 111, 113, 114, 116, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 204, 205, 210, 211, 213, 214, 215, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 233, 234, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 269, 270, 274, 275, 276, 280, 281, 282, 283, 284, 285, 286, 287, 291, 295, 296, 297, 298, 299, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 408, 412, 413, 417, 421, 422, 423], "ar": [0, 2, 3, 4, 6, 9, 10, 14, 19, 20, 21, 23, 24, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 86, 87, 89, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 118, 120, 121, 127, 129, 130, 132, 134, 135, 137, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 174, 175, 176, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 228, 229, 230, 231, 232, 233, 234, 235, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 263, 267, 269, 270, 274, 276, 280, 282, 284, 285, 289, 291, 297, 299, 300, 301, 302, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 398, 399, 400, 401, 402, 404, 406, 407, 408, 416, 421, 422], "alexi": [0, 111, 120, 121, 134, 137, 142, 144, 146, 149, 234], "thual": [0, 120, 121, 142, 144, 146, 149], "bertrand": [0, 49, 111, 115, 118, 122, 127, 131, 134, 135, 137, 144, 145, 149, 158, 162, 181, 182, 196, 199, 219, 247, 248, 252, 253, 391, 392, 397], "thirion": [0, 49, 72, 111, 115, 118, 122, 127, 131, 134, 135, 137, 144, 145, 149, 153, 158, 162, 181, 182, 196, 199, 219, 247, 248, 252, 253, 391, 392, 397], "elizabeth": [0, 111, 131, 135, 137, 138, 139, 149, 259, 260], "dupr": [0, 131, 135, 137, 138, 139, 149], "hao": [0, 120, 121, 141, 142, 144, 146, 149], "ting": [0, 120, 121, 141, 142, 144, 146, 149], "wang": [0, 111, 120, 121, 141, 142, 144, 146, 147, 149, 228], "jerom": [0, 127, 131, 133, 134, 135, 137, 138, 146, 149], "dock": [0, 127, 131, 133, 134, 135, 137, 138, 146, 149], "nicola": [0, 111, 141, 142, 143, 144, 145, 146, 149, 202, 221], "gensollen": [0, 141, 142, 143, 144, 145, 146, 149], "r\u00e9mi": [0, 121, 131, 147, 149], "gau": [0, 121, 147, 149], "taylor": [0, 111, 120, 121, 141, 144, 145, 146, 147, 149, 162], "salo": [0, 120, 121, 141, 144, 145, 146, 147, 149], "yasmin": [0, 120, 121, 146, 147, 149, 171], "mzayek": [0, 120, 121, 146, 147, 149], "some": [0, 3, 6, 14, 15, 30, 40, 41, 43, 48, 49, 56, 66, 68, 69, 71, 80, 84, 86, 92, 98, 103, 104, 113, 114, 127, 134, 140, 143, 144, 146, 149, 156, 157, 159, 161, 163, 164, 166, 168, 171, 172, 174, 175, 176, 181, 182, 183, 189, 195, 197, 198, 200, 201, 204, 224, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 267, 280, 283, 285, 307, 311, 312, 313, 314, 315, 316, 317, 318, 370, 371, 374, 377, 378, 385, 389, 390, 391, 392, 395, 401, 404, 421, 422], "past": [0, 56, 113, 151, 309], "present": [0, 3, 6, 40, 41, 54, 56, 65, 69, 70, 101, 108, 113, 121, 130, 149, 154, 155, 156, 163, 165, 166, 167, 172, 174, 176, 185, 195, 213, 245, 246, 247, 248, 252, 253, 295, 308, 309, 313, 314, 315, 316, 317, 389, 390, 391, 395], "ahmad": [0, 120, 121, 143, 144, 146, 149], "chamma": [0, 120, 121, 143, 144, 146, 149], "aina": [0, 122, 149], "frau": [0, 122, 149], "pascual": [0, 122, 149], "alex": [0, 56, 111, 131, 134, 149, 161, 214, 309], "rothberg": [0, 131, 134, 149], "alexandr": [0, 49, 111, 115, 116, 118, 119, 122, 124, 127, 134, 136, 137, 149, 162, 182, 199, 392], "abadi": [0, 122, 124, 127, 134, 149], "abraham": [0, 111, 115, 116, 118, 119, 122, 124, 127, 137, 149, 154, 308, 309, 392], "gramfort": [0, 49, 111, 115, 118, 136, 137, 149, 162, 182, 199], "savio": [0, 115, 149], "amadeu": [0, 47, 127, 149], "kanaan": [0, 47, 127, 149], "ana": [0, 137, 141, 143, 149], "luisa": [0, 137, 141, 143, 149], "pinho": [0, 137, 141, 143, 149], "andr\u00e9": [0, 111, 137, 149, 158, 195, 247, 248], "hoyo": [0, 49, 111, 137, 149, 158, 247, 248, 391, 397], "idrobo": [0, 49, 111, 137, 149, 158, 247, 248, 391, 397], "ann": [0, 111, 121, 149, 207, 208], "sophi": [0, 121, 149], "kiesling": [0, 121, 149], "ariel": [0, 122, 134, 149], "rokem": [0, 122, 134, 149], "arthur": [0, 48, 111, 119, 122, 124, 127, 149, 155, 196, 253], "mensch": [0, 48, 111, 119, 122, 124, 127, 149, 155, 196, 253], "audrei": [0, 120, 149], "duran": [0, 120, 149], "ben": [0, 56, 111, 115, 116, 118, 122, 124, 149, 309], "cipollini": [0, 115, 116, 118, 122, 124, 149], "binh": [0, 137, 140, 142, 149], "nguyen": [0, 137, 140, 142, 149], "caglar": [0, 146, 149], "cakan": [0, 146, 149], "chri": [0, 115, 122, 137, 149], "gorgolewski": [0, 111, 114, 115, 122, 149, 196, 211, 224, 226, 229], "markiewicz": [0, 137, 149], "christian": [0, 111, 121, 131, 134, 149, 202, 221, 308, 309], "horea": [0, 131, 134, 149], "gerloff": [0, 121, 149], "colin": [0, 137, 149], "reining": [0, 137, 149], "connor": [0, 146, 149], "lane": [0, 111, 146, 149, 328], "czarina": [0, 147, 149], "sy": [0, 41, 147, 149], "c\u00e9line": [0, 137, 149], "delettr": [0, 137, 149], "dan": [0, 111, 134, 137, 149, 204], "gale": [0, 134, 137, 149], "daniel": [0, 56, 111, 134, 137, 143, 146, 149, 221, 224, 226, 228, 234, 308, 309], "gomez": [0, 134, 137, 143, 146, 149], "danilo": [0, 115, 116, 118, 119, 122, 124, 149], "bzdok": [0, 115, 116, 118, 119, 122, 124, 149], "david": [0, 56, 111, 114, 146, 149, 195, 202, 221, 224, 226, 234, 308, 309, 328], "g": [0, 6, 9, 14, 22, 24, 30, 31, 40, 42, 43, 47, 48, 49, 55, 61, 64, 67, 68, 94, 99, 100, 105, 111, 114, 121, 142, 146, 149, 151, 155, 161, 163, 164, 165, 166, 168, 169, 171, 175, 176, 181, 182, 183, 194, 204, 221, 228, 245, 246, 247, 248, 249, 250, 251, 252, 253, 259, 260, 267, 274, 280, 284, 287, 304, 308, 311, 312, 313, 314, 315, 316, 317, 318, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 365, 373, 376, 379, 380, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 395, 396, 398, 408, 421], "elli": [0, 146, 149], "demian": [0, 111, 118, 134, 149, 196], "wassermann": [0, 111, 118, 134, 149, 196], "derek": [0, 137, 149], "pisner": [0, 137, 149], "dimitri": [0, 111, 120, 122, 134, 149, 163, 164, 182, 185, 219, 392], "papadopoulo": [0, 111, 120, 122, 134, 149, 164, 219], "orfano": [0, 111, 120, 122, 134, 149, 164, 219], "elvi": [0, 49, 111, 115, 118, 122, 124, 127, 149, 162, 392, 418], "dohmatob": [0, 49, 111, 115, 118, 122, 124, 127, 149, 162, 392, 418], "eric": [0, 111, 131, 134, 135, 137, 149, 195, 203, 207], "larson": [0, 131, 134, 135, 137, 149], "evan": [0, 111, 142, 149, 193, 201, 204, 214, 239], "edmond": [0, 142, 149], "fabian": [0, 111, 115, 149, 199], "pedregosa": [0, 111, 115, 149, 199], "franz": [0, 55, 135, 137, 139, 149], "liem": [0, 55, 135, 137, 139, 149], "gael": [0, 49, 111, 115, 116, 118, 119, 122, 124, 127, 131, 134, 135, 136, 137, 139, 149, 181, 182, 199, 224, 226, 252, 253, 391, 392, 397], "varoquaux": [0, 48, 49, 56, 111, 114, 115, 116, 118, 119, 122, 124, 127, 131, 134, 135, 136, 137, 139, 149, 150, 151, 155, 156, 158, 162, 171, 181, 182, 196, 199, 224, 226, 247, 248, 252, 253, 391, 392, 397], "gill": [0, 134, 137, 149], "de": [0, 111, 134, 137, 149, 259, 260, 275], "holland": [0, 134, 137, 149], "greg": [0, 134, 137, 149], "kiar": [0, 137, 149], "greydon": [0, 142, 149], "gilmor": [0, 142, 149], "guillaum": [0, 134, 137, 149], "lemaitr": [0, 134, 137, 149], "himanshu": 0, "aggarw": 0, "ian": [0, 137, 149], "aben": [0, 137, 149], "jake": [0, 137, 149], "vogel": [0, 111, 137, 149, 207, 208], "jan": [0, 111, 115, 149, 308, 309], "margeta": [0, 115, 149], "jaqu": [0, 115, 149], "grobler": [0, 115, 149], "jason": [0, 115, 134, 149], "gor": [0, 115, 134, 149], "javier": [0, 142, 149], "rasero": [0, 142, 149], "jean": [0, 49, 111, 115, 131, 134, 149, 163, 182, 185, 219, 224, 226, 252], "kossaifi": [0, 115, 149], "king": [0, 111, 131, 134, 149, 234], "jell": [0, 111, 120, 121, 149, 262], "roelof": [0, 120, 121, 149], "dalenberg": [0, 120, 121, 149], "jeremi": [0, 142, 149], "lefort": [0, 142, 149], "besnard": [0, 142, 149], "chevali": [0, 134, 137, 149], "johann": [0, 137, 149], "wiesner": [0, 137, 149], "jon": [0, 139, 149], "haitz": [0, 139, 149], "legarreta": [0, 139, 149], "gorrono": [0, 139, 149], "jona": [0, 111, 131, 149, 391, 397], "sassenhagen": [0, 131, 149], "joshua": [0, 111, 139, 149, 201, 205], "teve": [0, 139, 149], "julia": [0, 122, 137, 149], "huntenburg": [0, 122, 137, 149], "julio": [0, 121, 149], "A": [0, 1, 5, 6, 7, 11, 15, 16, 21, 23, 40, 41, 42, 47, 48, 49, 56, 61, 64, 67, 69, 71, 75, 76, 79, 80, 84, 86, 89, 98, 100, 102, 105, 106, 110, 111, 114, 121, 129, 130, 134, 137, 143, 149, 150, 152, 153, 155, 157, 159, 160, 161, 163, 164, 165, 167, 169, 171, 172, 174, 175, 176, 181, 182, 183, 192, 194, 195, 200, 202, 204, 207, 208, 209, 211, 213, 221, 222, 224, 225, 226, 227, 229, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 258, 259, 260, 263, 266, 267, 270, 276, 280, 285, 286, 292, 297, 298, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 328, 339, 340, 344, 360, 361, 364, 368, 373, 377, 380, 385, 389, 390, 391, 392, 393, 394, 399, 400, 402, 403, 404, 405, 421, 423], "peraza": [0, 121, 149], "kamalakar": [0, 118, 122, 124, 127, 131, 132, 134, 137, 141, 149], "reddi": [0, 118, 122, 124, 127, 131, 132, 133, 134, 137, 141, 149], "daddi": [0, 118, 122, 124, 127, 131, 132, 134, 137, 141, 149], "kevin": [0, 121, 149], "sitek": [0, 121, 149], "koen": [0, 146, 149], "helwegen": [0, 146, 149], "konstantin": [0, 115, 149], "shmelkov": [0, 115, 149], "kshitij": [0, 134, 135, 136, 137, 138, 139, 140, 149], "chawla": [0, 134, 135, 136, 137, 138, 139, 140, 149], "kun": [0, 146, 149], "chen": [0, 37, 111, 146, 149, 221], "leonard": [0, 144, 149], "sass": [0, 144, 149], "loic": [0, 115, 116, 118, 119, 122, 124, 127, 137, 149], "est\u00e8v": [0, 115, 116, 118, 119, 122, 124, 127, 149], "tetrel": [0, 137, 149], "luz": 0, "paz": 0, "manon": [0, 146, 149], "pietrantoni": [0, 146, 149], "martin": [0, 111, 122, 127, 141, 149, 192, 214, 233, 285, 404, 418], "perez": [0, 122, 127, 149, 418], "guevara": [0, 122, 127, 149, 418], "wegrzyn": [0, 141, 149], "mathia": [0, 121, 149], "goncalv": [0, 121, 149], "matthia": [0, 115, 149], "ekman": [0, 115, 149], "matthieu": [0, 146, 149], "joulot": [0, 146, 149], "mehdi": [0, 115, 119, 122, 131, 137, 149], "rahim": [0, 115, 119, 122, 131, 137, 149], "eickenberg": [0, 111, 115, 149, 162], "notter": [0, 134, 149], "waskom": [0, 115, 149], "michel": [0, 44, 49, 111, 115, 121, 147, 149, 162, 199, 219, 234], "mohammad": [0, 121, 147, 149], "torabi": [0, 121, 147, 149], "moritz": [0, 131, 134, 137, 149], "boo": [0, 131, 134, 137, 149], "myeong": [0, 144, 149], "seop": [0, 144, 149], "song": [0, 144, 149], "natasha": [0, 120, 149], "clark": [0, 111, 120, 149, 161, 192], "neelai": [0, 144, 149], "shah": [0, 144, 149], "oliv": [0, 70, 111, 147, 149, 161, 193], "warrington": [0, 147, 149], "oscar": [0, 134, 149], "esteban": [0, 134, 149], "paul": [0, 111, 120, 149, 194, 221], "bogdan": [0, 120, 149], "paula": [0, 137, 149], "sanz": [0, 137, 149], "leon": [0, 137, 149], "peer": [0, 134, 149], "herholz": [0, 134, 149], "philipp": [0, 111, 115, 149, 219, 252], "gervai": [0, 115, 149], "pierr": [0, 111, 131, 133, 134, 135, 149, 181, 193], "bellec": [0, 111, 134, 135, 149, 193], "glaser": [0, 133, 149], "olivi": [0, 131, 149], "quirion": [0, 131, 149], "pradeep": [0, 133, 149], "raamana": [0, 133, 149], "raphael": [0, 120, 141, 142, 143, 144, 145, 146, 149], "meudec": [0, 120, 141, 142, 143, 144, 145, 146, 149], "robert": [0, 111, 120, 121, 142, 149, 163, 192, 214, 239], "luke": [0, 142, 149], "williamson": [0, 120, 121, 149], "roberto": [0, 111, 127, 137, 149, 202], "guidotti": [0, 127, 137, 149], "ronald": [0, 115, 149], "phlypo": [0, 115, 149], "ryan": [0, 111, 137, 149, 209], "hammond": [0, 137, 149], "sachin": [0, 146, 149], "patalasingh": [0, 146, 149], "sage": [0, 146, 149], "hahn": [0, 146, 149], "salma": [0, 115, 118, 122, 124, 131, 134, 135, 149], "bougacha": [0, 115, 118, 122, 124, 131, 134, 135, 149], "sam": [0, 121, 149], "buck": [0, 121, 149], "johnson": [0, 121, 149], "sami": [0, 146, 149], "jawhar": [0, 146, 149], "simon": [0, 56, 111, 134, 139, 149, 201, 202, 308, 309], "steinkamp": [0, 134, 139, 149], "sourav": [0, 134, 149], "singh": [0, 134, 149], "steven": [0, 111, 121, 149, 192, 207, 208, 209, 308, 309], "meisler": [0, 121, 149], "sylvain": [0, 131, 134, 137, 149], "lan": [0, 131, 134, 149], "takerkart": [0, 137, 149], "tarun": [0, 147, 149], "samanta": [0, 147, 149], "thoma": [0, 111, 114, 137, 140, 143, 144, 149, 157, 171, 192, 201, 205, 221, 224, 226, 282, 308, 309, 328, 405], "bazeil": [0, 137, 140, 143, 144, 149], "tom": [0, 111, 142, 149, 192], "vanass": [0, 142, 149], "vasco": [0, 146, 149], "diogo": [0, 146, 149], "vincent": [0, 49, 111, 115, 149, 162, 192, 199, 219, 234, 309], "virgil": [0, 115, 149], "fritsch": [0, 115, 149], "zvi": [0, 139, 149], "baratz": [0, 139, 149], "\u00f3scar": [0, 115, 118, 122, 124, 149], "n\u00e1jera": [0, 115, 118, 122, 124, 149], "paid": 0, "grant": 0, "chan": 0, "zuckerberg": 0, "initi": [0, 3, 12, 48, 49, 50, 67, 69, 94, 100, 147, 149, 154, 162, 165, 174, 176, 183, 185, 252, 253, 254, 258, 312, 313, 315, 316, 318, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 389, 392], "were": [0, 6, 18, 23, 40, 49, 62, 64, 66, 67, 79, 91, 94, 98, 101, 107, 108, 113, 118, 120, 137, 140, 144, 145, 146, 149, 156, 163, 164, 166, 224, 226, 285, 315, 318, 404], "niconnect": 0, "french": [0, 171], "investiss": 0, "d": [0, 26, 37, 41, 50, 51, 56, 58, 64, 67, 71, 100, 111, 114, 154, 163, 164, 191, 202, 207, 208, 211, 214, 224, 226, 229, 239, 255, 262, 285, 308, 309, 364, 375, 404, 410], "avenir": 0, "wa": [0, 3, 40, 64, 67, 69, 91, 102, 105, 106, 113, 114, 120, 134, 141, 142, 143, 144, 145, 147, 149, 156, 158, 161, 163, 166, 200, 201, 250, 251, 252, 253, 274, 280, 282, 364, 373, 379, 381, 382, 386, 395], "human": [0, 8, 22, 23, 27, 31, 32, 39, 40, 41, 43, 58, 68, 110, 111, 114, 161, 164, 169, 189, 194, 195, 200, 201, 203, 204, 205, 208, 221, 223, 224, 226, 233, 285, 309, 375, 383, 404], "brain": [0, 2, 3, 4, 6, 9, 12, 15, 20, 21, 22, 23, 27, 31, 32, 36, 39, 41, 43, 44, 46, 52, 54, 55, 59, 64, 66, 67, 69, 70, 76, 78, 79, 80, 85, 89, 92, 94, 96, 98, 100, 104, 107, 111, 113, 114, 121, 122, 125, 127, 128, 129, 131, 132, 134, 135, 137, 140, 142, 143, 149, 150, 152, 156, 157, 158, 159, 161, 162, 164, 165, 166, 169, 170, 171, 174, 176, 181, 182, 189, 191, 193, 194, 196, 197, 199, 200, 202, 204, 207, 208, 209, 210, 214, 215, 221, 223, 224, 226, 227, 228, 233, 236, 239, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 262, 285, 287, 290, 292, 297, 308, 309, 311, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 361, 362, 365, 368, 370, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 392, 393, 394, 395, 400, 404, 414, 422, 423], "previous": [0, 3, 23, 98, 113, 137, 140, 144, 146, 149, 156, 166], "hbp": 0, "also": [0, 3, 4, 11, 14, 15, 17, 22, 23, 29, 31, 34, 39, 40, 41, 42, 43, 49, 50, 51, 55, 56, 62, 63, 66, 68, 70, 71, 72, 75, 77, 79, 86, 89, 91, 93, 94, 95, 98, 108, 113, 114, 118, 120, 122, 127, 128, 130, 134, 137, 140, 143, 144, 146, 147, 149, 150, 151, 154, 155, 157, 158, 159, 161, 163, 164, 165, 166, 168, 169, 171, 172, 174, 175, 176, 177, 183, 197, 198, 199, 224, 226, 229, 245, 246, 247, 248, 250, 251, 267, 269, 274, 280, 292, 296, 300, 305, 306, 308, 319, 320, 321, 322, 323, 324, 325, 363, 364, 368, 369, 371, 376, 377, 378, 379, 390, 393, 394, 398, 399, 402, 421, 423], "support": [0, 9, 15, 29, 32, 33, 34, 35, 44, 98, 105, 113, 118, 120, 121, 129, 130, 131, 134, 135, 136, 137, 141, 142, 144, 145, 146, 149, 156, 157, 159, 161, 166, 169, 170, 245, 246, 247, 248, 255, 307, 308, 312, 315, 379, 381, 382, 398, 408, 422], "digicosm": 0, "dataia": 0, "There": [0, 4, 21, 66, 153, 156, 157, 158, 164, 169, 199, 257, 259, 260, 281, 308, 399, 421], "paper": [0, 48, 49, 113, 114, 153, 163, 164, 166, 224], "publish": [0, 224, 291, 405], "yet": [0, 65, 80, 104, 111, 144, 149, 156, 164, 171, 376], "about": [0, 2, 3, 6, 14, 19, 24, 49, 62, 76, 78, 79, 94, 100, 101, 108, 113, 114, 120, 121, 122, 137, 145, 147, 149, 153, 156, 157, 159, 161, 163, 164, 165, 166, 169, 170, 171, 174, 193, 202, 204, 213, 214, 215, 228, 236, 237, 238, 239, 240, 241, 309, 403, 408], "we": [0, 2, 3, 4, 6, 9, 11, 14, 18, 19, 20, 22, 23, 24, 25, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 120, 127, 135, 136, 137, 142, 144, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 161, 163, 165, 166, 169, 171, 172, 173, 174, 175, 176, 188, 197, 198, 215, 224, 226, 250, 251, 252, 257, 259, 260, 280, 284, 292, 296, 304, 305, 306, 320, 322, 323, 325, 332, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 367, 392, 394, 421, 422], "wait": [0, 114, 163], "matur": [0, 58, 111, 207], "bit": [0, 10, 11, 36, 41, 49, 65, 66, 75, 79, 86, 94, 102, 122, 135, 146, 149, 150, 162, 174, 175, 215], "howev": [0, 48, 49, 66, 67, 70, 86, 94, 100, 150, 156, 159, 163, 166, 176, 191, 300, 307, 309, 423], "pattern": [0, 8, 27, 28, 45, 49, 51, 100, 110, 111, 114, 132, 140, 149, 150, 155, 156, 159, 162, 163, 169, 171, 174, 183, 185, 190, 193, 203, 214, 221, 222, 224, 243, 249, 286, 298, 322, 327, 364, 383, 391, 397], "underli": [0, 89, 166, 169, 171, 176, 342], "have": [0, 2, 3, 6, 9, 11, 15, 16, 18, 24, 29, 31, 32, 33, 39, 41, 42, 43, 44, 49, 52, 54, 55, 56, 57, 61, 62, 64, 65, 66, 67, 71, 75, 85, 86, 93, 94, 98, 100, 101, 103, 108, 110, 113, 114, 120, 121, 122, 124, 126, 127, 128, 131, 132, 133, 134, 137, 140, 141, 142, 144, 145, 149, 150, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 166, 168, 169, 171, 172, 174, 175, 176, 181, 182, 183, 185, 188, 193, 200, 201, 205, 209, 210, 224, 228, 245, 246, 247, 248, 249, 250, 251, 252, 253, 259, 260, 267, 270, 274, 275, 280, 281, 282, 284, 285, 287, 296, 300, 301, 302, 305, 307, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 327, 328, 364, 369, 379, 381, 382, 386, 389, 390, 391, 392, 398, 399, 401, 402, 404, 421, 422], "been": [0, 6, 10, 11, 32, 36, 39, 42, 47, 49, 52, 54, 55, 61, 66, 71, 72, 75, 79, 81, 85, 86, 89, 91, 93, 94, 104, 108, 120, 121, 122, 124, 127, 128, 134, 136, 137, 139, 140, 142, 143, 144, 145, 146, 149, 155, 162, 163, 164, 165, 168, 169, 172, 176, 182, 193, 224, 228, 267, 280, 282, 291, 320, 321, 322, 324, 325, 328, 396, 405, 408], "describ": [0, 6, 18, 37, 63, 64, 66, 69, 72, 112, 113, 114, 157, 163, 164, 166, 171, 172, 176, 182, 219, 220, 262, 265, 268, 274, 282, 309, 328, 367], "machin": [0, 29, 34, 44, 49, 94, 112, 141, 149, 157, 158, 159, 164, 169, 170, 222, 422, 423], "neuroimag": [0, 2, 8, 22, 23, 27, 37, 48, 56, 62, 76, 94, 100, 101, 102, 110, 111, 112, 114, 134, 149, 150, 151, 155, 156, 158, 160, 161, 162, 164, 169, 170, 173, 178, 191, 193, 195, 196, 199, 203, 209, 213, 214, 219, 224, 226, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 262, 267, 280, 282, 285, 286, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 305, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 363, 364, 368, 370, 371, 373, 376, 377, 378, 383, 385, 386, 390, 392, 395, 396, 398, 399, 402, 405, 408, 412, 421, 423], "suggest": [0, 6, 86, 144, 149, 153, 171, 174, 285, 320, 322, 323, 325, 404], "you": [0, 2, 4, 6, 9, 14, 15, 22, 23, 24, 32, 35, 36, 39, 40, 41, 42, 43, 44, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 66, 70, 75, 79, 86, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 110, 111, 113, 114, 129, 130, 134, 137, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 168, 169, 171, 172, 174, 175, 176, 181, 182, 183, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 210, 213, 214, 215, 217, 218, 219, 222, 223, 224, 228, 229, 234, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 269, 274, 280, 311, 312, 313, 314, 315, 316, 317, 318, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 365, 368, 370, 371, 374, 376, 377, 378, 379, 381, 382, 385, 386, 388, 389, 390, 391, 392, 408, 421, 422, 423], "read": [0, 23, 44, 66, 69, 77, 81, 101, 103, 105, 107, 111, 114, 140, 149, 162, 164, 170, 171, 217, 218, 219, 319], "thank": [0, 134, 149, 164, 280, 281, 282], "huge": [0, 66, 68, 134, 149], "amount": [0, 24, 34, 36, 50, 66, 95, 157, 159, 164, 170, 171, 172, 224, 245, 246, 247, 248, 250, 251, 252, 253, 267, 280, 286, 297, 312, 313, 314, 315, 316, 317, 318, 390, 391, 392], "upon": [0, 225, 267, 280, 363, 376, 377, 378, 385, 392, 394, 402], "reli": [0, 6, 30, 66, 92, 94, 127, 143, 149, 153, 163, 166, 169, 174, 215, 408, 421], "heavili": 0, "research": [0, 169, 174, 176, 210, 309], "who": [0, 114, 176, 309], "invest": 0, "time": [0, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 56, 57, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 120, 121, 124, 133, 134, 140, 141, 142, 144, 146, 149, 150, 152, 153, 154, 155, 156, 159, 161, 164, 166, 167, 169, 170, 172, 173, 174, 175, 181, 183, 185, 210, 231, 233, 234, 245, 246, 247, 248, 250, 251, 252, 253, 267, 268, 269, 270, 271, 272, 273, 274, 277, 278, 279, 280, 282, 285, 286, 297, 300, 302, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 328, 356, 364, 376, 378, 385, 386, 390, 392, 394, 395, 396, 400, 401, 403, 404, 405, 408, 413, 421, 423], "maintain": [0, 120, 137, 143, 149, 164, 172], "deserv": [0, 176], "recognit": [0, 3, 28, 30, 45, 49, 71, 97, 109, 110, 111, 121, 149, 159, 161, 162, 170, 193, 213, 247, 249, 290, 292, 295, 297, 298, 311, 317, 327, 328, 356, 371, 375, 378, 383], "citat": [0, 164], "In": [0, 4, 6, 9, 11, 14, 15, 16, 22, 24, 32, 33, 36, 38, 39, 40, 42, 47, 49, 50, 51, 52, 53, 54, 56, 58, 62, 65, 66, 68, 72, 75, 77, 79, 81, 86, 87, 89, 91, 94, 95, 99, 100, 111, 112, 113, 114, 120, 121, 129, 134, 144, 146, 149, 150, 151, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 174, 175, 176, 181, 188, 191, 193, 197, 198, 199, 214, 221, 224, 226, 228, 245, 246, 247, 248, 250, 251, 252, 253, 254, 257, 259, 260, 267, 269, 274, 280, 282, 283, 300, 301, 302, 304, 322, 328, 364, 365, 376, 389, 398, 401, 408, 421, 422], "need": [0, 2, 3, 6, 9, 16, 20, 30, 31, 33, 41, 42, 48, 49, 50, 51, 55, 56, 63, 66, 69, 75, 77, 78, 79, 80, 81, 84, 89, 91, 92, 98, 99, 100, 103, 104, 108, 113, 114, 134, 137, 144, 149, 150, 154, 156, 157, 158, 159, 164, 166, 168, 169, 172, 174, 175, 176, 188, 254, 257, 258, 302, 307, 308, 312, 313, 315, 324, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 365, 368, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 390, 408, 421, 422], "order": [0, 2, 3, 6, 15, 16, 23, 30, 32, 35, 36, 40, 41, 42, 49, 54, 56, 79, 80, 91, 100, 102, 107, 113, 120, 128, 134, 137, 142, 144, 149, 155, 161, 163, 164, 165, 169, 170, 171, 172, 174, 175, 176, 185, 207, 209, 217, 218, 236, 237, 240, 254, 258, 267, 274, 276, 280, 281, 282, 285, 287, 289, 294, 295, 299, 300, 301, 312, 313, 315, 316, 317, 320, 321, 322, 324, 325, 327, 328, 363, 368, 370, 371, 373, 377, 378, 385, 392, 393, 395, 398, 403, 404, 408, 421, 422], "justifi": 0, "pai": [0, 65], "softwar": [0, 6, 69, 72, 166, 169, 307, 422], "engin": [0, 9, 144, 149, 171, 176, 342, 379, 381, 382, 421, 422], "To": [0, 2, 3, 4, 6, 15, 22, 23, 31, 33, 37, 39, 40, 42, 43, 48, 49, 50, 51, 52, 54, 55, 62, 66, 68, 70, 76, 77, 79, 80, 87, 89, 94, 98, 101, 104, 108, 113, 114, 129, 134, 146, 149, 150, 151, 153, 156, 157, 158, 159, 161, 164, 165, 166, 168, 172, 174, 175, 200, 201, 224, 257, 259, 260, 267, 276, 280, 284, 296, 308, 376, 377, 378, 379, 381, 382, 385, 389, 402, 421], "guarante": [0, 6, 81, 157, 163, 233, 243, 295, 300, 301, 307, 314], "futur": [0, 6, 128, 134, 140, 146, 149, 163, 169, 174, 176, 255], "toolkit": 0, "us": [0, 1, 2, 4, 6, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 26, 29, 30, 31, 32, 33, 36, 38, 40, 41, 42, 43, 44, 46, 47, 49, 52, 53, 54, 55, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 89, 90, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 120, 121, 122, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 175, 176, 182, 184, 185, 186, 187, 188, 189, 191, 194, 201, 204, 206, 209, 230, 237, 238, 240, 241, 243, 250, 254, 256, 257, 258, 259, 260, 261, 265, 266, 268, 271, 272, 273, 275, 277, 278, 279, 284, 288, 289, 294, 299, 303, 305, 306, 320, 321, 323, 324, 325, 326, 329, 330, 331, 332, 357, 358, 359, 379, 387, 389, 391, 395, 396, 397, 398, 399, 403, 404, 405, 409, 418, 422, 423], "pleas": [0, 3, 11, 19, 29, 30, 32, 33, 34, 35, 36, 47, 49, 50, 51, 52, 53, 54, 56, 58, 62, 64, 67, 71, 72, 75, 77, 98, 100, 102, 103, 105, 106, 129, 135, 144, 149, 154, 156, 159, 164, 169, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 422], "see": [0, 3, 6, 8, 9, 12, 13, 14, 15, 16, 20, 21, 22, 23, 26, 28, 30, 31, 34, 36, 39, 40, 41, 43, 46, 48, 49, 50, 51, 52, 54, 55, 56, 60, 64, 67, 71, 72, 74, 80, 83, 86, 89, 94, 99, 100, 102, 103, 106, 107, 110, 113, 114, 116, 122, 128, 134, 135, 137, 141, 142, 144, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 169, 172, 174, 176, 178, 181, 182, 183, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 213, 214, 219, 221, 222, 223, 224, 226, 228, 231, 232, 233, 234, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 259, 260, 267, 269, 274, 280, 285, 286, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 363, 364, 370, 371, 373, 376, 377, 378, 385, 386, 387, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 402, 403, 404, 408, 413, 414, 421, 422], "document": [0, 2, 3, 4, 6, 19, 26, 43, 44, 49, 50, 56, 98, 100, 103, 107, 111, 112, 113, 116, 118, 121, 122, 124, 126, 127, 128, 129, 134, 137, 139, 144, 145, 149, 151, 153, 154, 155, 156, 157, 158, 159, 161, 162, 170, 171, 174, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 421, 422], "how": [0, 1, 2, 3, 4, 5, 6, 9, 14, 19, 21, 26, 34, 40, 44, 47, 48, 49, 50, 53, 55, 56, 58, 61, 62, 64, 66, 67, 68, 70, 78, 79, 84, 86, 87, 88, 89, 91, 94, 95, 100, 103, 106, 107, 110, 113, 121, 129, 140, 141, 144, 145, 149, 151, 153, 154, 155, 156, 157, 159, 161, 163, 166, 169, 170, 171, 173, 175, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 422, 423], "introductori": [1, 110], "exampl": [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 65, 66, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 112, 113, 121, 122, 127, 128, 129, 130, 131, 134, 135, 137, 139, 140, 143, 144, 145, 149, 154, 157, 158, 159, 160, 163, 164, 165, 166, 168, 172, 174, 189, 191, 206, 250, 257, 259, 260, 284, 305, 379, 389, 391, 410, 411, 422, 423], "teach": [1, 110, 126, 137, 149, 164], "nilearn": [1, 2, 3, 6, 7, 8, 9, 10, 11, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 114, 115, 119, 120, 121, 122, 124, 125, 127, 128, 129, 132, 134, 135, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 172, 174, 175, 176, 411, 421, 423], "numer": [1, 7, 29, 33, 35, 57, 110, 141, 149, 164, 165, 176, 185, 255, 257, 259, 260, 268, 376, 377, 403], "plot": [1, 2, 4, 7, 8, 19, 20, 21, 23, 25, 26, 27, 29, 30, 33, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 51, 52, 53, 54, 56, 57, 59, 61, 62, 63, 64, 65, 67, 69, 71, 72, 75, 76, 77, 78, 79, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 110, 113, 116, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 144, 145, 146, 149, 151, 154, 155, 156, 161, 164, 165, 166, 168, 169, 170, 171, 172, 175, 176, 181, 190, 195, 197, 198, 203, 207, 208, 210, 213, 214, 217, 227, 233, 242, 267, 280, 286, 297, 298, 311, 318, 322, 400, 402, 406, 407, 408, 418, 422, 423], "python": [1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 118, 120, 121, 129, 135, 136, 137, 142, 144, 149, 156, 163, 164, 170, 171, 172, 296, 422], "manipul": [1, 7, 55, 66, 89, 113, 129, 149, 171, 174, 302, 371, 383, 423], "look": [1, 6, 7, 23, 29, 32, 40, 44, 56, 65, 66, 69, 70, 72, 104, 110, 114, 134, 135, 145, 149, 156, 164, 165, 166, 171, 172, 176, 224, 226, 235, 302, 371, 383], "3d": [1, 3, 4, 6, 7, 8, 15, 16, 18, 19, 23, 24, 25, 27, 29, 30, 32, 34, 36, 37, 42, 44, 47, 71, 75, 77, 83, 84, 94, 96, 100, 102, 104, 105, 110, 113, 118, 121, 124, 131, 133, 134, 135, 137, 141, 142, 146, 149, 166, 169, 170, 171, 173, 175, 176, 195, 197, 198, 201, 202, 203, 204, 225, 227, 233, 235, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 282, 284, 286, 287, 290, 292, 293, 294, 295, 304, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 361, 362, 364, 365, 370, 373, 374, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 394, 398, 406, 408, 423], "4d": [1, 3, 4, 6, 7, 8, 11, 16, 18, 20, 25, 27, 29, 30, 31, 32, 34, 36, 41, 47, 48, 49, 52, 53, 54, 56, 58, 84, 85, 87, 89, 91, 92, 94, 95, 98, 100, 102, 104, 110, 112, 120, 121, 124, 131, 134, 135, 140, 149, 151, 154, 155, 156, 159, 169, 171, 173, 176, 192, 194, 196, 197, 198, 199, 200, 202, 210, 214, 220, 227, 235, 249, 252, 253, 282, 284, 285, 286, 290, 291, 292, 293, 295, 297, 304, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 360, 361, 364, 376, 377, 378, 383, 385, 392, 394, 408, 414, 417, 421, 423], "niimg": [1, 7, 33, 54, 77, 79, 89, 91, 92, 98, 110, 113, 121, 131, 134, 137, 142, 146, 149, 153, 171, 173, 175, 176, 202, 227, 235, 245, 246, 247, 248, 249, 250, 251, 252, 253, 262, 267, 270, 280, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 363, 364, 370, 371, 373, 376, 377, 378, 383, 385, 386, 390, 391, 392, 394, 395, 396, 397, 398, 399, 401, 402, 404, 408, 410, 423], "handl": [1, 7, 49, 64, 110, 121, 124, 130, 146, 149, 156, 171, 174, 175, 176, 202, 227, 235, 255, 259, 286, 292, 293, 294, 295, 300, 306, 308, 367, 378, 383, 391, 397], "visual": [1, 7, 12, 14, 27, 28, 32, 33, 39, 45, 47, 48, 50, 56, 64, 66, 69, 71, 72, 79, 80, 83, 86, 87, 88, 89, 91, 92, 94, 96, 101, 102, 104, 105, 106, 108, 111, 112, 121, 129, 131, 134, 140, 142, 149, 150, 151, 152, 160, 164, 165, 168, 171, 173, 175, 190, 192, 193, 196, 197, 199, 200, 202, 209, 213, 214, 218, 219, 221, 223, 227, 235, 286, 287, 290, 292, 293, 295, 297, 298, 300, 304, 311, 314, 317, 319, 322, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 367, 368, 369, 375, 376, 377, 378, 381, 382, 383, 423], "introduct": [1, 7, 110, 111, 120, 134, 149, 157, 159, 160, 164, 167, 168, 170, 176, 213, 245, 259, 260, 292, 297, 368, 377, 385, 423], "fmri": [1, 7, 15, 23, 25, 30, 31, 32, 33, 36, 40, 41, 44, 46, 55, 56, 59, 60, 61, 62, 63, 66, 70, 71, 73, 74, 81, 82, 85, 89, 91, 94, 97, 100, 101, 102, 108, 109, 110, 111, 113, 114, 125, 132, 137, 149, 153, 154, 155, 157, 159, 162, 163, 165, 168, 169, 170, 171, 174, 175, 176, 193, 194, 196, 202, 207, 210, 212, 213, 219, 220, 231, 245, 249, 252, 253, 262, 264, 267, 276, 280, 282, 283, 285, 286, 290, 292, 293, 296, 297, 308, 309, 311, 317, 322, 325, 328, 340, 348, 355, 363, 364, 366, 367, 368, 370, 371, 376, 377, 378, 383, 385, 390, 392, 400, 401, 402, 404, 405, 409, 423], "decod": [1, 7, 36, 39, 40, 42, 44, 45, 97, 109, 111, 113, 114, 121, 129, 130, 134, 137, 140, 141, 142, 143, 144, 145, 147, 149, 157, 161, 165, 169, 170, 171, 176, 213, 216, 223, 233, 267, 270, 286, 290, 292, 297, 311, 317, 318, 341, 367, 368, 375, 377, 378, 382, 383, 385, 400, 402, 407, 408, 422, 423], "intro": [1, 7, 66, 110, 171, 231, 267, 283, 286, 297, 363, 366, 367, 371, 378, 401], "glm": [1, 7, 28, 32, 42, 45, 61, 62, 63, 65, 66, 68, 69, 70, 71, 75, 76, 77, 78, 79, 80, 81, 100, 101, 108, 120, 140, 141, 142, 144, 146, 149, 156, 165, 168, 169, 170, 171, 172, 213, 231, 245, 286, 292, 297, 304, 307, 363, 366, 367, 369, 371, 378, 400, 401, 402, 422, 423], "analysi": [1, 7, 15, 23, 28, 29, 34, 45, 48, 49, 63, 66, 68, 71, 73, 77, 78, 79, 80, 82, 95, 98, 109, 111, 112, 114, 150, 151, 155, 157, 160, 162, 167, 168, 169, 170, 171, 175, 176, 193, 196, 210, 211, 213, 216, 218, 219, 220, 222, 226, 229, 231, 233, 244, 245, 249, 252, 254, 255, 258, 259, 260, 263, 267, 270, 274, 276, 280, 283, 286, 290, 292, 295, 296, 297, 298, 304, 307, 308, 309, 310, 311, 317, 328, 341, 356, 363, 366, 367, 370, 371, 372, 373, 377, 378, 382, 383, 392, 400, 401, 402, 408, 418, 422, 423], "singl": [1, 3, 7, 14, 23, 30, 31, 46, 49, 59, 60, 64, 65, 66, 67, 68, 73, 77, 79, 86, 94, 100, 104, 110, 111, 114, 118, 140, 141, 142, 143, 146, 149, 150, 157, 161, 163, 164, 165, 171, 174, 176, 191, 210, 224, 231, 232, 242, 245, 246, 247, 248, 257, 259, 260, 267, 274, 280, 282, 283, 286, 297, 300, 311, 312, 313, 314, 315, 316, 317, 318, 341, 363, 366, 367, 371, 373, 375, 376, 378, 383, 385, 390, 392, 401, 421], "session": [1, 3, 7, 29, 34, 35, 36, 37, 60, 66, 67, 73, 102, 110, 113, 142, 144, 149, 150, 156, 157, 165, 166, 171, 174, 175, 212, 213, 223, 231, 232, 253, 267, 270, 274, 283, 285, 286, 297, 300, 305, 323, 325, 363, 366, 367, 371, 378, 383, 400, 401, 402, 422], "subject": [1, 3, 7, 11, 15, 16, 17, 18, 21, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 59, 60, 64, 65, 66, 69, 73, 75, 77, 78, 80, 85, 91, 94, 95, 99, 100, 101, 102, 104, 105, 106, 108, 110, 111, 113, 114, 120, 121, 125, 127, 128, 137, 140, 149, 151, 152, 153, 154, 156, 163, 165, 166, 168, 171, 173, 174, 175, 177, 180, 181, 182, 183, 185, 189, 190, 191, 193, 199, 210, 213, 218, 219, 221, 222, 228, 231, 232, 233, 234, 244, 252, 253, 267, 270, 274, 280, 281, 283, 286, 297, 300, 305, 308, 309, 311, 312, 313, 314, 316, 317, 318, 323, 325, 341, 361, 363, 365, 366, 367, 371, 375, 378, 383, 390, 401, 421, 423], "dataset": [1, 3, 4, 7, 9, 10, 13, 14, 19, 20, 21, 22, 23, 24, 25, 26, 28, 40, 45, 47, 52, 54, 55, 56, 57, 60, 64, 66, 67, 69, 70, 71, 73, 74, 77, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 107, 109, 110, 111, 113, 114, 121, 124, 125, 129, 133, 134, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 155, 156, 157, 160, 162, 165, 168, 169, 170, 171, 172, 173, 176, 245, 246, 247, 248, 251, 252, 255, 263, 267, 270, 274, 276, 280, 283, 284, 286, 287, 290, 292, 296, 297, 301, 305, 307, 309, 310, 311, 317, 318, 328, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 366, 367, 370, 371, 372, 373, 375, 378, 379, 380, 381, 382, 383, 385, 386, 393, 400, 401, 402, 408, 421, 423], "go": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 114, 130, 149, 150, 156, 160, 164, 168, 171, 172, 176, 226, 290, 295, 296, 298, 365, 370, 374, 378, 383, 385, 423], "end": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 131, 141, 149, 161, 163, 164, 175, 235, 306, 307, 403], "full": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 118, 120, 149, 153, 154, 155, 157, 159, 161, 163, 164, 165, 169, 175, 176, 197, 198, 202, 207, 210, 213, 221, 245, 246, 247, 248, 252, 253, 254, 257, 258, 259, 260, 267, 280, 282, 285, 302, 308, 309, 312, 313, 314, 315, 316, 317, 318, 319, 375, 390, 392, 394, 400, 404], "code": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 120, 121, 123, 140, 144, 145, 146, 147, 149, 150, 154, 155, 157, 159, 163, 165, 169, 176, 189, 249, 253, 267, 280, 313, 316, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 374, 392, 400, 402, 416, 418, 422], "run": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 113, 124, 128, 142, 144, 146, 149, 150, 151, 153, 157, 160, 161, 162, 163, 164, 165, 171, 172, 174, 176, 183, 185, 213, 219, 252, 253, 267, 270, 285, 309, 317, 328, 366, 389, 404, 421, 422, 423], "your": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 112, 114, 151, 155, 156, 157, 159, 161, 172, 174, 176, 197, 198, 210, 215, 245, 246, 247, 248, 252, 253, 258, 314, 317, 390, 421, 423], "browser": [2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 134, 137, 139, 149, 176, 267, 280, 342, 384, 385, 386, 387, 388, 400, 402, 421], "via": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 116, 149, 151, 152, 156, 159, 162, 165, 174, 194, 250, 251, 267, 276, 320, 321, 322, 324, 325], "binder": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 139, 149], "here": [2, 3, 4, 6, 9, 14, 15, 19, 20, 23, 29, 30, 31, 32, 33, 34, 35, 36, 42, 43, 44, 48, 49, 54, 55, 56, 58, 61, 63, 64, 65, 66, 67, 69, 70, 75, 88, 89, 92, 94, 95, 98, 100, 101, 103, 104, 108, 111, 113, 114, 150, 151, 153, 154, 155, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 171, 172, 175, 176, 210, 250, 251, 257, 259, 260, 282, 321, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 343, 347, 348, 351, 352, 353, 354, 379], "discov": [2, 164, 170], "come": [2, 3, 6, 16, 42, 52, 54, 58, 75, 80, 94, 113, 121, 149, 151, 156, 157, 163, 164, 171, 172, 175, 176, 210, 421], "function": [2, 3, 4, 6, 8, 9, 11, 13, 14, 15, 17, 18, 21, 22, 25, 26, 27, 29, 30, 32, 34, 35, 36, 43, 48, 49, 52, 53, 55, 56, 58, 59, 60, 64, 65, 66, 67, 69, 71, 72, 73, 74, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 102, 104, 108, 109, 111, 113, 114, 116, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 145, 146, 149, 153, 156, 157, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 419, 420, 422, 423], "public": [2, 62, 100, 114, 120, 144, 146, 149, 164, 169, 228], "let": [2, 3, 4, 6, 15, 40, 49, 56, 64, 66, 69, 71, 75, 77, 78, 79, 86, 93, 98, 157, 171, 284, 296], "": [2, 3, 4, 6, 9, 23, 29, 30, 33, 34, 37, 40, 41, 44, 49, 50, 55, 56, 64, 65, 66, 67, 68, 69, 71, 72, 75, 77, 78, 79, 80, 86, 91, 93, 94, 100, 102, 103, 108, 111, 114, 127, 134, 144, 145, 150, 153, 157, 160, 161, 163, 164, 166, 167, 168, 169, 171, 172, 174, 175, 176, 181, 182, 183, 191, 193, 194, 202, 204, 205, 207, 208, 214, 219, 221, 224, 226, 228, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 259, 260, 267, 280, 284, 285, 294, 296, 300, 301, 302, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 364, 365, 373, 374, 379, 380, 381, 382, 384, 386, 388, 389, 390, 391, 392, 402, 404, 421, 423], "first": [2, 6, 11, 14, 16, 18, 20, 23, 25, 30, 32, 33, 35, 40, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 64, 65, 67, 70, 73, 75, 77, 80, 81, 84, 86, 89, 91, 92, 93, 94, 95, 97, 104, 105, 109, 111, 113, 114, 115, 121, 134, 135, 137, 140, 142, 144, 145, 149, 150, 151, 153, 154, 155, 157, 159, 160, 163, 164, 166, 167, 168, 172, 173, 174, 175, 183, 185, 211, 212, 215, 216, 220, 221, 224, 226, 229, 233, 236, 237, 240, 244, 245, 246, 247, 248, 252, 253, 255, 263, 267, 270, 274, 276, 280, 282, 286, 291, 292, 301, 302, 305, 307, 308, 310, 313, 316, 317, 324, 328, 366, 367, 370, 372, 377, 378, 379, 380, 381, 382, 383, 388, 389, 390, 392, 400, 401, 402, 404, 408, 423], "check": [2, 3, 15, 29, 30, 32, 33, 34, 35, 36, 77, 93, 94, 98, 105, 113, 121, 124, 127, 149, 151, 156, 159, 163, 164, 171, 172, 174, 176, 181, 182, 183, 185, 215, 235, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 268, 280, 295, 308, 311, 312, 313, 314, 315, 316, 317, 318, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 389, 390, 391, 392, 421], "where": [2, 6, 9, 15, 16, 23, 24, 40, 44, 50, 70, 77, 84, 87, 94, 100, 105, 110, 127, 141, 147, 149, 150, 154, 156, 161, 162, 164, 166, 169, 172, 175, 176, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 228, 229, 230, 231, 232, 233, 234, 235, 245, 246, 247, 248, 250, 251, 254, 257, 258, 259, 260, 263, 267, 280, 282, 319, 339, 341, 344, 346, 348, 350, 352, 354, 356, 360, 363, 366, 368, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 392, 394, 401, 402, 408, 421], "our": [2, 3, 14, 19, 29, 34, 40, 49, 51, 56, 58, 66, 68, 94, 98, 101, 113, 114, 134, 144, 149, 151, 156, 163, 164, 166], "disk": [2, 3, 4, 6, 101, 103, 107, 108, 113, 114, 120, 134, 140, 141, 146, 149, 156, 164, 174, 175, 176, 206, 216, 224, 226, 229, 245, 246, 267, 280, 319, 379, 381, 382, 400, 402], "import": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 113, 114, 127, 133, 134, 135, 137, 142, 144, 149, 150, 151, 154, 156, 157, 158, 159, 161, 163, 164, 165, 168, 169, 171, 172, 174, 175, 176, 255, 257, 259, 260, 267, 280, 284, 287, 292, 296, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 374, 402, 408, 421], "print": [2, 3, 4, 6, 9, 10, 11, 16, 18, 20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 62, 64, 69, 70, 71, 72, 75, 77, 81, 85, 89, 91, 92, 93, 94, 95, 98, 101, 102, 103, 104, 105, 107, 108, 113, 156, 163, 171, 174, 183, 191, 252, 253, 267, 280, 292], "f": [2, 3, 4, 9, 10, 11, 16, 18, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 64, 66, 67, 69, 71, 72, 75, 77, 78, 79, 80, 81, 85, 88, 89, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 154, 156, 159, 161, 162, 165, 191, 202, 207, 209, 211, 214, 221, 229, 245, 246, 247, 248, 255, 256, 257, 259, 260, 263, 267, 268, 280, 300, 301, 307, 308, 309, 319, 327, 395, 398], "store": [2, 3, 26, 29, 44, 49, 50, 51, 52, 54, 70, 94, 101, 108, 114, 154, 156, 161, 164, 197, 198, 235, 257, 259, 260, 298, 319, 328, 372], "get_data_dir": [2, 127, 149, 174], "r": [2, 4, 9, 14, 15, 24, 30, 34, 40, 41, 47, 51, 56, 71, 94, 108, 111, 137, 144, 149, 165, 172, 189, 194, 199, 201, 202, 205, 207, 211, 229, 250, 251, 267, 280, 285, 307, 308, 309, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 365, 370, 374, 402, 404, 421], "home": [2, 3, 6, 10, 11, 16, 18, 23, 25, 29, 30, 31, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 75, 77, 78, 80, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108, 171, 174, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 228, 229, 230, 231, 232, 233, 234, 235, 295], "runner": [2, 3, 6, 10, 11, 16, 18, 23, 25, 29, 30, 31, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 75, 77, 78, 80, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108], "nilearn_data": [2, 3, 6, 10, 11, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 75, 77, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108, 197, 198, 235], "now": [2, 3, 6, 14, 16, 20, 22, 25, 29, 40, 44, 49, 50, 51, 55, 56, 63, 65, 66, 71, 79, 81, 84, 86, 92, 93, 94, 100, 101, 103, 104, 108, 113, 118, 120, 121, 122, 124, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 149, 156, 162, 164, 172, 175, 245, 246, 247, 248, 252, 253, 254, 257, 258, 259, 260, 284, 292, 296, 312, 314, 315, 317, 390], "retriev": [2, 20, 22, 44, 48, 90, 91, 92, 113, 144, 149, 151, 156, 159, 170, 174, 176, 205, 231, 232, 235, 308, 309, 357, 358], "motor": [2, 14, 15, 16, 17, 51, 66, 69, 77, 79, 90, 91, 93, 97, 109, 110, 219, 242, 290, 311, 317, 328, 370, 421], "contrast": [2, 6, 8, 14, 15, 27, 33, 64, 65, 67, 68, 71, 75, 76, 77, 78, 79, 80, 81, 88, 90, 93, 101, 105, 106, 108, 110, 121, 127, 131, 132, 141, 144, 149, 155, 161, 166, 167, 168, 169, 217, 218, 219, 225, 227, 256, 257, 259, 260, 261, 263, 264, 265, 267, 280, 282, 307, 363, 366, 376, 377, 378, 383, 385, 389, 402, 421, 423], "neurovault": [2, 97, 109, 110, 111, 112, 130, 137, 142, 146, 149, 169, 224, 225, 226, 227, 236, 290, 295, 296, 298, 302, 311, 317, 370, 378, 383, 423], "repositori": [2, 111, 112, 164, 169, 172, 174, 214, 224, 226, 423], "motor_imag": [2, 421], "fetch_neurovault_motor_task": [2, 14, 134, 149, 225, 421], "imag": [2, 6, 10, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 62, 63, 64, 66, 67, 68, 70, 71, 75, 76, 77, 78, 79, 80, 84, 86, 87, 88, 89, 91, 92, 94, 96, 98, 100, 101, 102, 104, 105, 106, 108, 111, 112, 118, 120, 121, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 141, 142, 143, 144, 145, 146, 149, 151, 153, 154, 155, 156, 157, 161, 162, 164, 166, 169, 171, 173, 181, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 210, 213, 214, 215, 217, 219, 220, 221, 223, 224, 225, 226, 227, 228, 231, 232, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 262, 264, 267, 270, 280, 281, 282, 283, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 401, 402, 404, 405, 408, 414, 423], "collection_658": 2, "image_10426": [2, 14], "nii": [2, 3, 4, 6, 10, 11, 14, 16, 18, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 64, 75, 77, 85, 86, 89, 91, 92, 94, 95, 101, 102, 104, 105, 108, 113, 171, 174, 270, 305, 307, 308, 309, 379, 380, 381, 382, 388, 406], "gz": [2, 3, 4, 6, 10, 11, 14, 16, 18, 22, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 64, 75, 77, 85, 86, 89, 91, 92, 94, 95, 101, 102, 104, 105, 113, 171, 172, 174, 307, 308, 309, 379, 380, 381, 382, 388, 406, 407], "filenam": [2, 3, 4, 10, 15, 50, 55, 61, 94, 113, 127, 137, 144, 145, 149, 151, 154, 155, 174, 175, 197, 198, 229, 243, 245, 246, 247, 248, 250, 251, 295, 307, 311, 314, 317, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 368, 376], "take": [2, 3, 4, 6, 9, 24, 29, 33, 40, 42, 43, 49, 50, 65, 66, 68, 69, 71, 72, 77, 79, 94, 98, 100, 103, 108, 113, 121, 131, 134, 137, 143, 149, 150, 151, 153, 156, 159, 161, 163, 164, 165, 166, 174, 176, 181, 215, 224, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 249, 253, 267, 269, 274, 282, 327, 328, 332, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 390, 392, 394, 408, 419, 421], "tmap_filenam": [2, 88], "0": [2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 150, 151, 154, 156, 162, 163, 164, 165, 166, 174, 175, 176, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 262, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 304, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 363, 364, 365, 370, 374, 375, 376, 377, 378, 379, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 401, 402, 404, 405, 408, 421, 422], "contain": [2, 3, 4, 6, 10, 11, 22, 23, 36, 40, 49, 52, 55, 62, 64, 69, 79, 84, 86, 91, 94, 101, 106, 107, 108, 113, 114, 121, 124, 129, 134, 137, 146, 147, 149, 150, 156, 157, 160, 163, 164, 166, 169, 172, 174, 176, 181, 182, 183, 185, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 213, 223, 224, 225, 226, 227, 228, 234, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 259, 260, 261, 267, 270, 280, 281, 282, 285, 286, 294, 300, 304, 305, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 328, 373, 374, 379, 380, 381, 382, 386, 388, 389, 390, 391, 392, 393, 395, 396, 400, 402, 404, 406, 407, 408, 413, 423], "easili": [2, 3, 9, 15, 23, 30, 31, 39, 49, 58, 94, 113, 114, 144, 149, 156, 157, 159, 161, 162, 163, 164, 165, 169, 172, 197, 198, 219, 280, 282], "statist": [2, 6, 8, 14, 22, 23, 27, 33, 36, 40, 42, 49, 64, 65, 66, 67, 69, 71, 74, 75, 82, 83, 96, 100, 101, 102, 103, 105, 108, 111, 112, 120, 122, 129, 130, 140, 142, 146, 149, 150, 155, 158, 161, 164, 165, 167, 169, 170, 171, 175, 176, 182, 185, 195, 203, 218, 224, 225, 226, 233, 242, 255, 256, 257, 259, 260, 261, 262, 263, 267, 280, 282, 283, 285, 304, 307, 328, 341, 342, 370, 373, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 394, 401, 402, 404, 406, 408, 417, 422, 423], "map": [2, 3, 8, 11, 14, 15, 19, 20, 22, 23, 27, 33, 37, 39, 44, 46, 50, 51, 52, 53, 54, 56, 59, 61, 62, 64, 66, 67, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 83, 84, 87, 89, 90, 91, 92, 93, 96, 97, 99, 101, 102, 104, 108, 109, 110, 111, 112, 121, 122, 126, 129, 130, 134, 135, 137, 140, 141, 144, 149, 151, 152, 155, 157, 159, 160, 161, 164, 165, 166, 167, 169, 170, 171, 174, 175, 176, 181, 182, 183, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 210, 214, 217, 218, 219, 224, 225, 226, 227, 228, 233, 236, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 262, 263, 267, 276, 280, 282, 283, 285, 287, 293, 302, 304, 307, 311, 312, 313, 314, 315, 316, 317, 318, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 362, 364, 370, 371, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 396, 399, 401, 402, 404, 406, 408, 417, 423], "plot_stat_map": [2, 6, 9, 15, 17, 29, 30, 31, 36, 39, 40, 42, 43, 48, 50, 55, 61, 64, 65, 66, 67, 70, 71, 75, 76, 77, 81, 85, 87, 88, 90, 92, 93, 94, 98, 100, 102, 103, 104, 106, 107, 113, 122, 133, 134, 141, 142, 144, 145, 149, 154, 156, 168, 176, 385, 421], "displai": [2, 3, 4, 6, 10, 11, 13, 16, 17, 18, 20, 21, 22, 23, 25, 26, 39, 40, 42, 47, 48, 49, 50, 51, 55, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 75, 80, 81, 84, 86, 87, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 105, 106, 120, 126, 131, 132, 134, 135, 137, 141, 142, 144, 146, 149, 151, 154, 155, 161, 166, 170, 175, 267, 274, 280, 313, 316, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 392, 400, 402, 423], "_slicer": [2, 3, 4, 6, 9, 10, 15, 16, 17, 25, 39, 48, 49, 50, 64, 67, 70, 75, 81, 86, 88, 89, 92, 94, 98, 144, 149], "orthoslic": [2, 3, 4, 6, 10, 15, 16, 17, 25, 48, 50, 64, 67, 70, 75, 81, 86, 89, 94, 98, 144, 149, 339, 344, 346, 348, 350, 352, 354, 356, 358, 421], "object": [2, 3, 4, 5, 6, 9, 10, 13, 14, 15, 16, 17, 25, 28, 30, 32, 33, 36, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 64, 67, 70, 75, 81, 86, 88, 89, 91, 92, 94, 98, 110, 111, 113, 114, 121, 126, 129, 137, 140, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 163, 164, 165, 169, 170, 171, 173, 175, 181, 182, 183, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 259, 260, 262, 267, 270, 280, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 407, 408, 410, 413, 416, 421, 423], "0x7f34e67b13a0": 2, "better": [2, 3, 30, 33, 42, 43, 49, 66, 94, 100, 103, 111, 119, 121, 125, 128, 134, 142, 149, 151, 152, 153, 155, 156, 157, 158, 159, 160, 163, 165, 175, 182, 376, 392, 408, 423], "threshold": [2, 3, 9, 13, 14, 16, 17, 23, 30, 33, 36, 37, 39, 40, 42, 48, 49, 50, 54, 55, 56, 61, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77, 79, 80, 81, 87, 88, 89, 90, 93, 94, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 114, 122, 135, 137, 141, 144, 146, 149, 151, 154, 163, 166, 167, 169, 175, 215, 236, 237, 240, 252, 262, 266, 267, 280, 282, 283, 284, 304, 308, 309, 321, 322, 323, 324, 325, 326, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 362, 363, 365, 370, 371, 373, 376, 377, 378, 379, 381, 382, 384, 385, 386, 388, 391, 392, 397, 401, 402, 421, 423], "3": [2, 3, 4, 6, 11, 13, 14, 15, 16, 17, 20, 21, 23, 25, 27, 30, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 48, 49, 51, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 98, 99, 100, 102, 103, 105, 106, 107, 108, 111, 115, 119, 120, 124, 127, 128, 131, 134, 135, 136, 137, 142, 143, 144, 145, 154, 161, 162, 165, 166, 175, 176, 181, 182, 183, 185, 187, 188, 189, 193, 194, 196, 199, 200, 201, 203, 204, 205, 210, 211, 214, 221, 224, 226, 229, 233, 234, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 259, 260, 262, 267, 269, 274, 280, 283, 292, 294, 296, 297, 300, 302, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 322, 323, 325, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 363, 365, 368, 370, 371, 374, 376, 377, 378, 379, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 397, 402, 408, 410, 421, 422], "0x7f34e67f8310": 2, "rest": [2, 3, 6, 21, 23, 30, 32, 33, 35, 41, 48, 50, 54, 55, 56, 62, 70, 85, 87, 89, 92, 98, 100, 111, 125, 129, 147, 149, 153, 154, 155, 159, 163, 169, 171, 174, 190, 192, 193, 202, 221, 234, 244, 253, 306, 308, 309, 317, 375, 392, 423], "state": [2, 23, 30, 32, 48, 49, 50, 54, 56, 66, 85, 87, 89, 92, 100, 111, 129, 140, 142, 147, 149, 150, 151, 153, 154, 155, 157, 162, 166, 169, 171, 172, 190, 192, 193, 221, 234, 245, 246, 247, 248, 249, 252, 253, 267, 276, 282, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 390, 392, 404, 423], "network": [2, 8, 19, 20, 21, 27, 46, 47, 48, 51, 54, 55, 60, 72, 73, 83, 86, 94, 96, 101, 110, 111, 114, 126, 140, 146, 149, 150, 151, 152, 154, 164, 165, 169, 170, 171, 176, 190, 192, 193, 199, 201, 202, 205, 207, 208, 209, 219, 221, 267, 274, 292, 308, 309, 311, 316, 318, 341, 362, 374, 375, 376, 378, 383, 392, 400, 402, 421, 423], "smith": [2, 21, 83, 94, 96, 110, 111, 150, 169, 202, 221, 282, 292, 311, 316, 328, 362, 376, 378, 383, 392], "2009": [2, 21, 111, 119, 140, 143, 149, 169, 171, 195, 202, 214, 215, 221, 239, 282, 328], "studi": [2, 6, 9, 31, 33, 40, 42, 56, 66, 71, 75, 97, 99, 109, 110, 111, 114, 152, 157, 159, 160, 162, 163, 166, 170, 174, 193, 214, 224, 226, 228, 236, 239, 249, 290, 295, 296, 298, 302, 308, 309, 311, 317, 370, 378, 383, 423], "correspond": [2, 3, 6, 14, 24, 29, 30, 33, 34, 36, 39, 40, 44, 49, 55, 56, 63, 65, 66, 69, 70, 72, 77, 78, 79, 80, 81, 86, 91, 92, 94, 101, 102, 108, 111, 139, 141, 147, 149, 151, 156, 157, 159, 161, 163, 164, 166, 169, 170, 172, 176, 181, 191, 196, 199, 202, 209, 215, 219, 226, 228, 236, 237, 240, 245, 246, 247, 248, 250, 251, 252, 253, 263, 267, 269, 270, 274, 276, 280, 281, 282, 296, 297, 300, 305, 312, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 328, 357, 358, 363, 364, 368, 371, 372, 374, 376, 377, 378, 380, 390, 392, 393, 395, 396, 398, 401, 402, 408], "between": [2, 6, 9, 22, 23, 24, 30, 40, 42, 49, 50, 51, 55, 62, 66, 69, 71, 72, 75, 77, 79, 80, 86, 89, 92, 99, 100, 102, 105, 122, 129, 134, 137, 140, 143, 149, 150, 151, 152, 154, 156, 157, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 189, 201, 221, 239, 247, 248, 253, 267, 270, 280, 285, 322, 328, 329, 331, 332, 359, 363, 365, 370, 372, 374, 376, 377, 378, 379, 381, 382, 385, 386, 390, 401, 402, 404, 408], "task": [2, 3, 17, 29, 30, 31, 34, 39, 48, 49, 60, 62, 66, 69, 73, 77, 81, 89, 92, 97, 103, 109, 110, 111, 134, 145, 149, 155, 156, 157, 160, 163, 165, 166, 169, 170, 171, 172, 176, 182, 185, 213, 216, 218, 219, 244, 267, 270, 286, 290, 305, 311, 317, 318, 328, 341, 356, 367, 369, 370, 378, 383], "rsn": [2, 21, 87, 129, 149, 192, 202], "fetch_atlas_smith_2009": [2, 21, 87, 121, 149], "true": [2, 6, 9, 11, 13, 14, 15, 21, 22, 23, 25, 26, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 64, 67, 69, 70, 71, 74, 75, 77, 79, 80, 81, 82, 86, 89, 91, 92, 94, 98, 99, 100, 101, 102, 103, 105, 108, 110, 113, 114, 129, 132, 137, 144, 149, 151, 154, 156, 159, 161, 163, 166, 168, 169, 176, 181, 182, 183, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 226, 228, 234, 245, 246, 247, 248, 249, 250, 251, 252, 253, 262, 267, 270, 280, 282, 283, 285, 286, 289, 291, 295, 300, 301, 304, 305, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 395, 396, 398, 401, 403, 404, 405, 421], "dimens": [2, 15, 21, 29, 33, 34, 40, 47, 49, 66, 87, 94, 113, 142, 149, 160, 166, 169, 175, 176, 187, 188, 196, 202, 221, 228, 245, 246, 247, 248, 252, 253, 255, 257, 259, 260, 267, 282, 285, 286, 292, 293, 296, 297, 302, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 361, 375, 376, 390, 392, 404, 423], "10": [2, 5, 6, 9, 11, 12, 15, 20, 21, 22, 23, 24, 27, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 53, 55, 56, 57, 58, 61, 62, 63, 66, 71, 72, 76, 77, 79, 81, 87, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 111, 114, 119, 134, 144, 150, 153, 156, 157, 158, 161, 162, 163, 165, 166, 181, 182, 185, 189, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 213, 214, 219, 221, 222, 223, 224, 226, 228, 229, 233, 234, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 262, 270, 282, 285, 308, 309, 313, 315, 316, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 364, 389, 390, 391, 392, 395, 396, 397, 401, 404, 405, 408, 421], "smith_2009": 2, "pnas_smith09_rsn10": 2, "It": [2, 3, 6, 9, 14, 15, 22, 34, 41, 42, 44, 48, 51, 61, 65, 66, 71, 75, 77, 81, 86, 89, 94, 98, 100, 101, 108, 112, 113, 114, 118, 124, 127, 128, 130, 141, 142, 143, 144, 149, 150, 151, 156, 157, 159, 160, 161, 163, 164, 166, 169, 170, 171, 172, 174, 175, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 422], "nifti": [2, 4, 10, 11, 16, 18, 25, 29, 30, 32, 34, 35, 36, 41, 47, 48, 49, 52, 53, 54, 56, 58, 77, 79, 84, 86, 89, 91, 92, 94, 95, 102, 104, 105, 113, 122, 140, 146, 149, 151, 155, 156, 164, 173, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 205, 210, 213, 217, 218, 219, 222, 223, 228, 245, 246, 250, 251, 252, 253, 286, 287, 290, 294, 295, 296, 300, 303, 368, 390, 393, 408, 421, 423], "load": [2, 4, 6, 8, 9, 21, 23, 27, 49, 52, 53, 54, 58, 61, 62, 64, 67, 69, 70, 77, 88, 89, 91, 93, 102, 103, 104, 105, 106, 107, 108, 110, 112, 120, 121, 127, 129, 132, 134, 143, 144, 146, 147, 149, 152, 155, 159, 160, 163, 164, 171, 173, 175, 189, 190, 193, 195, 197, 198, 199, 202, 203, 207, 208, 209, 210, 213, 214, 215, 218, 219, 222, 223, 224, 226, 228, 233, 234, 236, 237, 238, 239, 240, 241, 242, 252, 253, 270, 284, 295, 296, 298, 308, 309, 365, 381, 383, 384, 388, 406, 407, 413, 421, 423], "memori": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 126, 134, 135, 149, 153, 154, 163, 175, 176, 182, 233, 245, 246, 247, 248, 250, 251, 252, 253, 255, 260, 267, 270, 280, 286, 290, 300, 301, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 386, 390, 391, 392, 403, 421], "its": [2, 3, 15, 19, 26, 29, 30, 31, 32, 33, 34, 35, 36, 40, 44, 56, 66, 69, 84, 88, 89, 90, 92, 94, 98, 100, 108, 113, 114, 126, 129, 137, 140, 142, 144, 146, 149, 150, 153, 155, 156, 157, 159, 161, 162, 163, 164, 166, 168, 169, 172, 176, 188, 201, 203, 213, 224, 225, 226, 227, 245, 246, 247, 248, 250, 251, 252, 253, 254, 258, 267, 269, 274, 280, 281, 282, 284, 295, 363, 364, 365, 368, 370, 371, 374, 376, 377, 378, 379, 380, 381, 382, 389, 390, 391, 392, 417], "shape": [2, 3, 20, 23, 25, 40, 41, 43, 47, 49, 50, 51, 53, 54, 55, 56, 58, 61, 64, 65, 66, 67, 68, 69, 71, 84, 91, 93, 94, 98, 100, 102, 103, 105, 106, 107, 108, 113, 142, 143, 149, 151, 153, 154, 156, 159, 165, 166, 169, 171, 173, 176, 181, 182, 183, 185, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 222, 228, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 263, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 285, 286, 287, 290, 291, 292, 296, 297, 300, 301, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 365, 366, 374, 384, 387, 389, 390, 391, 392, 395, 396, 397, 398, 399, 404, 405, 423], "load_img": [2, 36, 93, 94, 107, 127, 149, 174, 175], "91": [2, 30, 33, 42, 43, 44, 56, 72, 77, 91, 102, 143, 149, 191, 202], "109": [2, 33, 41, 43, 56, 91, 143, 149, 191, 202], "note": [2, 3, 4, 6, 14, 15, 20, 23, 42, 43, 44, 48, 49, 52, 54, 55, 56, 58, 64, 65, 66, 67, 69, 70, 75, 76, 79, 84, 86, 91, 94, 95, 101, 102, 104, 108, 111, 113, 114, 121, 144, 149, 150, 151, 155, 161, 162, 163, 164, 165, 166, 171, 172, 174, 175, 176, 181, 182, 183, 188, 189, 191, 192, 193, 196, 201, 202, 205, 210, 213, 214, 215, 217, 218, 221, 223, 224, 225, 226, 227, 228, 229, 235, 236, 237, 240, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 267, 280, 283, 285, 291, 294, 296, 297, 300, 303, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 363, 364, 368, 370, 377, 378, 389, 390, 391, 392, 393, 404, 405, 408, 421], "index": [2, 6, 12, 20, 22, 23, 33, 40, 41, 50, 55, 56, 64, 65, 66, 69, 72, 87, 88, 100, 101, 103, 126, 144, 149, 154, 191, 192, 200, 201, 203, 211, 230, 244, 245, 246, 247, 248, 257, 259, 260, 274, 292, 300, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 380, 392, 394, 404, 408], "start": [2, 3, 6, 30, 40, 49, 56, 58, 69, 71, 84, 91, 94, 146, 149, 156, 163, 164, 169, 170, 172, 176, 193, 194, 202, 204, 267, 269, 274, 311, 312, 313, 314, 315, 316, 317, 318, 328, 392, 408], "first_rsn": 2, "index_img": [2, 3, 20, 29, 30, 31, 32, 33, 34, 36, 37, 49, 50, 87, 89, 92, 98, 102, 104, 151, 154, 175, 176, 286, 293], "0x7f34e891d340": 2, "If": [2, 9, 14, 15, 24, 32, 34, 35, 36, 40, 41, 42, 43, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 70, 75, 79, 84, 86, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 110, 113, 114, 134, 141, 142, 144, 149, 150, 154, 156, 157, 159, 161, 163, 164, 166, 169, 171, 172, 174, 175, 176, 181, 182, 183, 185, 187, 188, 189, 190, 193, 194, 195, 196, 197, 198, 200, 202, 207, 208, 209, 210, 214, 215, 217, 218, 219, 222, 224, 226, 228, 229, 234, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 263, 264, 267, 270, 274, 276, 280, 281, 282, 283, 284, 285, 286, 290, 291, 295, 297, 298, 299, 300, 301, 302, 304, 305, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 408, 421, 422], "want": [2, 6, 9, 14, 15, 42, 49, 54, 66, 71, 72, 78, 86, 94, 98, 100, 110, 113, 114, 150, 157, 159, 163, 164, 166, 175, 176, 224, 226, 250, 251, 300, 309, 381, 388, 421, 422], "iter_img": [2, 48, 175, 292], "them": [2, 3, 6, 14, 19, 30, 32, 39, 42, 44, 49, 50, 54, 55, 58, 62, 64, 65, 67, 69, 71, 72, 79, 80, 86, 89, 94, 100, 103, 104, 108, 110, 113, 114, 118, 122, 134, 140, 141, 143, 146, 149, 150, 151, 155, 157, 159, 164, 166, 169, 170, 171, 174, 176, 191, 224, 226, 270, 327, 328, 390, 421], "Then": [2, 3, 14, 30, 40, 42, 50, 51, 55, 62, 63, 69, 94, 95, 154, 156, 158, 159, 164, 175, 176, 181, 183, 215, 389], "give": [2, 3, 4, 9, 14, 15, 16, 24, 29, 33, 42, 49, 52, 54, 55, 56, 58, 69, 84, 91, 94, 98, 103, 113, 121, 127, 129, 144, 149, 150, 151, 153, 155, 156, 157, 158, 159, 161, 163, 171, 175, 176, 217, 218, 226, 245, 246, 247, 248, 249, 252, 253, 254, 262, 267, 269, 274, 280, 282, 297, 302, 305, 312, 313, 314, 315, 316, 317, 318, 319, 326, 375, 380, 381, 389, 390, 392, 394, 398, 399, 408], "few": [2, 14, 15, 25, 39, 40, 49, 77, 81, 91, 102, 132, 133, 149, 155, 157, 160, 162, 164, 165, 172, 175, 390, 408, 423], "argument": [2, 6, 9, 14, 15, 17, 43, 48, 55, 68, 70, 80, 89, 92, 94, 114, 121, 126, 127, 129, 130, 131, 132, 134, 135, 137, 140, 141, 142, 143, 144, 146, 149, 156, 157, 159, 161, 163, 164, 165, 168, 174, 185, 189, 197, 198, 224, 235, 245, 246, 247, 248, 249, 270, 280, 282, 285, 296, 299, 309, 312, 313, 314, 315, 316, 317, 318, 324, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 369, 371, 373, 375, 381, 382, 386, 404, 421], "more": [2, 3, 4, 6, 8, 9, 13, 14, 16, 19, 21, 22, 23, 26, 27, 28, 29, 31, 33, 39, 40, 42, 43, 46, 48, 49, 50, 52, 54, 55, 56, 58, 60, 61, 62, 64, 66, 69, 70, 71, 74, 75, 77, 79, 80, 83, 86, 89, 91, 94, 98, 100, 101, 102, 103, 105, 107, 108, 110, 112, 113, 114, 116, 120, 121, 123, 127, 129, 131, 133, 134, 137, 139, 143, 144, 145, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 169, 171, 172, 174, 175, 176, 182, 189, 191, 192, 193, 194, 199, 201, 202, 204, 205, 210, 213, 214, 215, 219, 221, 224, 226, 228, 233, 236, 237, 239, 240, 242, 244, 245, 246, 247, 248, 250, 251, 252, 253, 255, 257, 259, 260, 267, 280, 282, 286, 297, 305, 309, 312, 313, 314, 315, 316, 317, 318, 328, 339, 341, 344, 346, 348, 350, 352, 354, 356, 363, 376, 377, 378, 383, 385, 386, 389, 390, 391, 392, 394, 401, 403, 408, 411, 421, 422, 423], "compact": [2, 94, 175, 215], "img": [2, 4, 6, 10, 50, 62, 71, 77, 79, 84, 90, 101, 105, 129, 137, 149, 154, 174, 249, 252, 253, 280, 282, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 311, 312, 313, 314, 315, 316, 317, 318, 319, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 362, 364, 371, 372, 390, 392, 395, 396, 398, 399, 401, 408, 421], "display_mod": [2, 6, 9, 13, 14, 15, 18, 30, 31, 36, 39, 40, 42, 43, 48, 49, 53, 58, 62, 65, 66, 70, 71, 75, 76, 79, 87, 88, 92, 101, 102, 105, 106, 107, 113, 127, 144, 149, 267, 280, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 363, 365, 368, 370, 371, 374, 376, 377, 378, 402, 421], "z": [2, 13, 14, 15, 18, 24, 30, 33, 36, 40, 42, 43, 48, 52, 54, 58, 61, 62, 65, 66, 67, 69, 70, 71, 75, 76, 79, 80, 81, 84, 87, 88, 94, 101, 102, 105, 106, 108, 111, 129, 131, 135, 146, 149, 164, 166, 169, 172, 175, 176, 199, 224, 255, 262, 266, 267, 280, 283, 287, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 328, 329, 331, 332, 336, 337, 338, 339, 340, 347, 348, 353, 354, 355, 356, 357, 358, 359, 362, 363, 364, 365, 368, 370, 371, 374, 376, 377, 378, 379, 380, 381, 382, 385, 388, 393, 401, 402, 404, 421], "cut_coord": [2, 6, 9, 15, 16, 17, 18, 20, 30, 31, 36, 39, 40, 42, 43, 48, 49, 50, 55, 61, 65, 66, 67, 70, 71, 75, 77, 79, 81, 86, 87, 88, 90, 92, 93, 94, 100, 102, 105, 106, 107, 120, 122, 149, 154, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 363, 368, 371, 376, 377, 378, 385, 402, 421], "1": [2, 3, 5, 6, 7, 9, 10, 11, 12, 15, 18, 19, 22, 23, 24, 27, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 114, 120, 122, 124, 128, 129, 131, 134, 136, 137, 144, 146, 150, 154, 156, 157, 158, 159, 161, 162, 163, 164, 166, 172, 174, 176, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 262, 267, 270, 274, 276, 280, 282, 284, 285, 289, 292, 294, 297, 300, 302, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 364, 365, 370, 372, 374, 375, 376, 377, 379, 381, 382, 385, 386, 388, 389, 390, 391, 392, 397, 399, 401, 404, 405, 408, 421, 422], "colorbar": [2, 6, 9, 14, 20, 21, 23, 25, 26, 36, 37, 40, 48, 50, 51, 54, 57, 58, 62, 69, 70, 75, 76, 77, 79, 80, 86, 87, 88, 94, 101, 103, 105, 108, 118, 120, 126, 129, 134, 135, 137, 141, 142, 143, 144, 145, 149, 154, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 366, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 384, 385, 386, 388, 421], "fals": [2, 6, 9, 14, 15, 17, 18, 20, 21, 22, 33, 34, 36, 37, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 62, 70, 72, 75, 76, 77, 79, 80, 81, 86, 87, 88, 89, 91, 92, 94, 99, 101, 102, 103, 105, 106, 114, 137, 140, 141, 142, 144, 146, 149, 154, 161, 165, 166, 169, 176, 181, 182, 183, 185, 187, 189, 195, 196, 197, 198, 207, 208, 209, 210, 213, 219, 222, 224, 226, 228, 245, 246, 247, 248, 249, 250, 251, 252, 253, 262, 264, 267, 270, 280, 282, 283, 285, 286, 289, 298, 300, 301, 304, 305, 308, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 363, 365, 366, 368, 370, 371, 373, 374, 375, 376, 377, 379, 380, 381, 382, 385, 386, 388, 389, 390, 391, 392, 393, 395, 396, 398, 399, 401, 402, 403, 404, 421], "slice": [2, 3, 6, 9, 16, 36, 89, 94, 105, 113, 121, 133, 140, 142, 149, 161, 174, 176, 267, 270, 280, 292, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 371, 402, 423], "constructor": [2, 114, 259, 260, 292], "desir": [2, 62, 172, 176, 252, 253, 266, 267, 269, 274, 280, 283, 305, 357, 358, 366, 390], "afterward": [2, 163, 172], "ll": [2, 6, 49, 58, 250, 251], "follow": [2, 4, 9, 14, 18, 22, 29, 32, 34, 35, 36, 40, 41, 42, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 66, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 110, 113, 114, 131, 134, 135, 136, 137, 138, 139, 143, 149, 150, 151, 154, 155, 161, 164, 165, 166, 169, 171, 172, 174, 228, 233, 235, 285, 291, 305, 307, 308, 309, 313, 316, 320, 321, 322, 324, 325, 386, 392, 404, 405, 421, 422], "same": [2, 3, 6, 14, 15, 21, 23, 34, 37, 40, 41, 47, 49, 50, 55, 58, 63, 64, 66, 69, 70, 71, 84, 86, 88, 94, 98, 100, 101, 102, 108, 114, 122, 129, 134, 140, 141, 142, 143, 144, 149, 150, 151, 154, 155, 156, 157, 161, 163, 164, 166, 168, 169, 174, 175, 176, 181, 182, 183, 185, 197, 198, 207, 209, 214, 215, 233, 245, 246, 247, 248, 250, 251, 252, 253, 267, 270, 280, 282, 285, 287, 296, 298, 300, 305, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 324, 326, 328, 334, 335, 336, 337, 338, 347, 348, 351, 352, 353, 354, 359, 363, 365, 366, 368, 370, 371, 375, 376, 377, 378, 386, 389, 390, 393, 398, 399, 401, 402, 404], "formula": [2, 125, 149, 163, 280, 282, 296, 366], "befor": [2, 15, 49, 55, 56, 89, 94, 98, 103, 113, 120, 134, 137, 140, 142, 144, 146, 149, 153, 154, 156, 157, 159, 164, 165, 166, 168, 171, 172, 174, 175, 176, 185, 224, 226, 252, 253, 267, 269, 274, 285, 289, 291, 308, 309, 312, 313, 315, 316, 318, 364, 379, 381, 382, 386, 390, 395, 396, 404, 405, 421], "selected_volum": 2, "5": [2, 3, 6, 12, 18, 20, 22, 23, 24, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 81, 82, 88, 89, 91, 94, 95, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 111, 120, 124, 131, 137, 142, 143, 144, 145, 150, 154, 156, 161, 162, 163, 166, 175, 176, 192, 194, 197, 198, 200, 201, 204, 209, 210, 213, 214, 215, 219, 221, 223, 236, 239, 250, 251, 257, 259, 260, 285, 291, 292, 295, 308, 309, 321, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 376, 377, 379, 381, 382, 384, 386, 387, 388, 403, 404, 405, 408, 421], "re": [2, 6, 21, 23, 40, 65, 66, 69, 71, 84, 114, 143, 149, 164, 224, 236, 237, 238, 239, 240, 241, 257, 259, 260, 270, 393], "new": [2, 3, 10, 11, 20, 36, 47, 49, 50, 51, 54, 56, 66, 72, 79, 84, 86, 87, 94, 98, 102, 107, 111, 113, 119, 128, 129, 130, 131, 132, 145, 156, 157, 158, 159, 164, 169, 171, 172, 175, 176, 181, 182, 183, 187, 188, 193, 196, 198, 201, 203, 204, 209, 210, 211, 215, 224, 226, 234, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 259, 260, 267, 276, 280, 282, 284, 285, 294, 295, 296, 297, 298, 299, 300, 301, 304, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 328, 363, 364, 365, 366, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 389, 390, 391, 392, 393, 394, 400, 401, 404, 408, 421, 422], "thing": [2, 3, 56, 66, 121, 149, 153, 162, 163, 164, 172, 176, 257, 285, 404, 421], "base": [2, 8, 20, 27, 28, 29, 34, 45, 47, 48, 49, 55, 60, 61, 66, 67, 71, 73, 74, 81, 82, 88, 89, 91, 92, 97, 98, 105, 109, 110, 111, 114, 120, 125, 129, 137, 140, 142, 145, 149, 150, 151, 152, 153, 155, 156, 159, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 176, 182, 185, 190, 195, 201, 203, 210, 213, 214, 215, 216, 219, 220, 221, 224, 226, 228, 231, 232, 233, 234, 245, 246, 247, 248, 249, 251, 252, 253, 255, 263, 267, 270, 274, 276, 280, 282, 283, 284, 285, 286, 290, 292, 296, 301, 304, 307, 308, 309, 311, 317, 318, 322, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 367, 376, 377, 378, 381, 382, 383, 385, 389, 390, 392, 393, 394, 400, 402, 404, 405, 406, 407, 408, 421, 422, 423], "confirm": [2, 29, 164], "match": [2, 6, 15, 114, 121, 137, 141, 142, 144, 149, 155, 161, 169, 173, 176, 191, 202, 224, 244, 245, 246, 247, 248, 250, 251, 252, 253, 267, 270, 280, 282, 286, 295, 297, 300, 305, 307, 312, 313, 315, 316, 320, 322, 323, 325, 376, 390, 393, 423], "previou": [2, 9, 14, 41, 49, 54, 62, 66, 77, 94, 143, 144, 149, 150, 153, 157, 159, 163, 166, 185, 245, 246, 247, 248, 252, 253, 314, 317, 390], "abov": [2, 3, 4, 14, 21, 33, 42, 48, 49, 56, 66, 69, 86, 94, 100, 114, 129, 149, 150, 151, 153, 155, 156, 161, 163, 164, 165, 169, 174, 175, 176, 191, 215, 236, 237, 240, 245, 246, 247, 248, 250, 251, 254, 257, 258, 259, 260, 300, 301, 308, 312, 313, 314, 315, 316, 317, 318, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 376, 384, 386, 388, 390, 392, 403, 404], "show": [2, 4, 6, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 129, 135, 140, 142, 144, 149, 150, 151, 154, 156, 157, 159, 161, 164, 166, 168, 175, 176, 213, 225, 242, 254, 267, 280, 339, 341, 342, 344, 346, 348, 350, 352, 354, 356, 380, 384, 387, 392, 402, 421], "forc": [2, 94, 124, 149, 163, 176, 193, 202, 224, 225, 226, 227], "figur": [2, 4, 9, 12, 14, 15, 18, 22, 23, 24, 25, 26, 30, 31, 32, 34, 35, 36, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 56, 57, 58, 61, 62, 63, 65, 66, 68, 70, 78, 79, 80, 84, 91, 94, 99, 100, 101, 105, 106, 108, 131, 140, 141, 144, 145, 146, 147, 149, 164, 165, 166, 175, 307, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 421], "when": [2, 3, 4, 8, 9, 16, 24, 27, 54, 66, 67, 68, 69, 75, 89, 91, 92, 94, 100, 102, 105, 106, 110, 113, 114, 120, 121, 122, 124, 128, 129, 130, 132, 135, 137, 140, 141, 144, 145, 146, 147, 149, 150, 151, 153, 155, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 169, 172, 175, 181, 191, 194, 200, 201, 217, 219, 224, 226, 245, 246, 247, 248, 249, 250, 251, 255, 256, 260, 261, 267, 280, 282, 300, 302, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 319, 328, 329, 331, 332, 360, 366, 370, 371, 376, 377, 378, 379, 381, 382, 383, 385, 386, 388, 390, 395, 402, 403, 404, 408, 421], "outsid": [2, 4, 16, 66, 146, 149, 164, 171, 176, 300, 301, 315, 379, 381, 382, 388, 395, 396, 401, 408], "ipython": [2, 4, 16, 156, 171, 422], "recap": [2, 4], "call": [2, 4, 6, 14, 15, 16, 33, 43, 48, 49, 50, 52, 53, 54, 56, 58, 66, 69, 72, 76, 81, 87, 89, 91, 94, 98, 104, 113, 114, 137, 149, 150, 151, 153, 154, 156, 157, 161, 163, 164, 165, 166, 168, 169, 174, 176, 180, 183, 185, 193, 205, 224, 226, 229, 251, 253, 256, 261, 267, 280, 285, 295, 312, 313, 314, 315, 316, 317, 318, 324, 365, 374, 390, 404, 421], "differ": [2, 6, 9, 15, 19, 20, 21, 22, 23, 28, 29, 45, 46, 51, 52, 54, 55, 58, 59, 63, 66, 67, 68, 69, 70, 71, 72, 75, 79, 80, 81, 89, 91, 94, 98, 99, 100, 102, 103, 110, 111, 113, 120, 135, 141, 143, 147, 149, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, 169, 173, 174, 181, 183, 196, 205, 210, 213, 236, 237, 238, 239, 240, 241, 245, 247, 248, 250, 251, 259, 260, 263, 267, 269, 270, 274, 276, 280, 286, 290, 292, 297, 305, 308, 311, 312, 313, 315, 316, 317, 327, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 363, 365, 368, 370, 371, 375, 376, 377, 378, 383, 390, 392, 401, 402, 408, 423], "flavor": 2, "onli": [2, 3, 6, 13, 14, 19, 29, 31, 32, 33, 34, 36, 37, 40, 42, 43, 49, 51, 52, 54, 55, 58, 66, 69, 75, 79, 81, 84, 86, 91, 94, 98, 99, 100, 101, 103, 104, 108, 113, 114, 121, 127, 132, 137, 142, 144, 145, 149, 150, 151, 153, 154, 156, 157, 158, 159, 161, 163, 164, 166, 168, 169, 173, 174, 175, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 421, 423], "multipl": [2, 6, 19, 42, 47, 77, 79, 81, 101, 121, 140, 141, 149, 152, 157, 159, 161, 164, 167, 169, 173, 174, 175, 193, 194, 202, 244, 257, 275, 280, 282, 292, 295, 296, 314, 328, 339, 341, 344, 358, 363, 368, 371, 373, 376, 377, 378, 385, 421, 423], "detail": [2, 3, 8, 9, 12, 14, 15, 16, 19, 22, 23, 26, 28, 29, 31, 33, 39, 46, 48, 50, 52, 54, 58, 60, 62, 64, 67, 71, 72, 74, 81, 83, 95, 100, 101, 102, 103, 107, 110, 113, 114, 116, 129, 134, 137, 146, 149, 150, 153, 154, 156, 157, 158, 159, 161, 162, 163, 164, 167, 172, 173, 174, 176, 178, 181, 189, 193, 197, 198, 201, 210, 215, 219, 221, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 252, 253, 260, 267, 280, 285, 289, 297, 302, 303, 309, 311, 312, 313, 314, 315, 316, 317, 318, 328, 386, 389, 390, 392, 394, 413, 414, 421, 422], "input": [2, 3, 4, 6, 9, 14, 15, 23, 32, 43, 48, 49, 54, 55, 57, 64, 67, 68, 71, 76, 77, 79, 80, 85, 88, 89, 92, 94, 98, 108, 113, 121, 123, 124, 127, 128, 129, 130, 132, 133, 134, 137, 141, 143, 144, 145, 146, 149, 153, 156, 159, 161, 163, 164, 165, 169, 173, 175, 176, 181, 182, 183, 184, 185, 186, 187, 188, 193, 194, 202, 220, 221, 245, 246, 247, 248, 249, 250, 251, 252, 253, 262, 264, 266, 267, 269, 274, 275, 280, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 363, 364, 370, 371, 373, 376, 377, 378, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 404, 408, 421, 423], "format": [2, 49, 100, 113, 121, 141, 144, 146, 149, 164, 165, 176, 181, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 368, 370, 371, 377, 378, 379, 380, 381, 382, 387, 388, 389, 390, 391, 392, 406, 407, 408, 412], "given": [2, 3, 9, 14, 16, 44, 47, 50, 53, 54, 64, 65, 66, 69, 71, 79, 84, 86, 94, 95, 100, 104, 121, 126, 128, 132, 137, 146, 149, 150, 153, 156, 157, 159, 161, 162, 163, 164, 166, 169, 171, 172, 176, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 197, 198, 218, 219, 221, 222, 228, 234, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 263, 264, 267, 270, 274, 280, 281, 282, 284, 286, 291, 294, 297, 300, 302, 304, 305, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 364, 365, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 402, 403, 405], "section": [2, 3, 4, 14, 39, 47, 48, 49, 56, 70, 94, 98, 100, 111, 112, 113, 121, 129, 134, 144, 149, 150, 151, 153, 154, 156, 157, 159, 161, 164, 166, 168, 172, 173, 176, 178, 224, 228, 359, 389, 400, 413, 414, 421], "name": [2, 3, 4, 6, 11, 14, 21, 22, 23, 26, 30, 32, 44, 51, 58, 62, 65, 72, 75, 76, 77, 79, 80, 91, 94, 100, 101, 103, 108, 113, 120, 126, 135, 137, 142, 144, 146, 147, 149, 153, 157, 161, 164, 165, 169, 171, 172, 173, 176, 181, 182, 183, 191, 192, 194, 195, 197, 198, 199, 200, 201, 203, 204, 205, 207, 209, 219, 224, 226, 229, 230, 231, 232, 233, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 265, 267, 268, 269, 270, 274, 280, 282, 285, 296, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 385, 389, 390, 391, 392, 393, 395, 402, 404, 423], "accept": [2, 3, 47, 65, 120, 121, 128, 129, 131, 134, 135, 137, 140, 141, 142, 143, 144, 145, 146, 149, 164, 165, 174, 280, 282, 283, 305, 319, 320, 321, 322, 323, 324, 325, 363, 373, 375, 376, 377, 378, 385, 387, 398, 399], "either": [2, 4, 9, 32, 35, 36, 39, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 134, 141, 143, 149, 151, 153, 164, 165, 168, 169, 174, 176, 200, 201, 202, 205, 213, 257, 259, 260, 267, 280, 283, 284, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 363, 364, 365, 368, 369, 370, 373, 375, 376, 377, 378, 379, 380, 381, 382, 385, 386, 392, 402, 406, 407, 408, 421, 422], "hand": [2, 66, 69, 94, 163, 164, 174, 176, 234], "break": [2, 83, 96, 110, 129, 149, 153, 161, 164, 205, 377, 383, 393], "down": [2, 70, 103, 153, 163, 164, 247], "other": [2, 4, 14, 23, 24, 31, 33, 36, 39, 40, 48, 56, 66, 69, 70, 94, 98, 100, 103, 104, 112, 113, 121, 134, 137, 141, 149, 150, 151, 156, 157, 158, 160, 161, 163, 164, 165, 169, 172, 174, 176, 181, 182, 183, 210, 224, 230, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 259, 260, 267, 269, 270, 274, 280, 282, 305, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 324, 328, 383, 389, 390, 391, 392, 421, 423], "concat_img": [2, 6, 11, 70, 71, 100, 128, 149, 175, 292], "group": [2, 3, 6, 29, 30, 32, 33, 46, 57, 58, 59, 62, 74, 76, 77, 78, 79, 80, 97, 98, 101, 104, 105, 109, 110, 111, 131, 137, 149, 151, 152, 155, 156, 161, 166, 168, 169, 170, 171, 181, 182, 183, 193, 194, 199, 207, 209, 210, 221, 227, 245, 246, 247, 248, 249, 252, 253, 293, 305, 308, 311, 316, 328, 361, 364, 365, 375, 376, 378, 383, 397, 423], "total": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 152, 154, 156, 162, 200, 210, 251, 322, 323, 325, 376, 393, 423], "script": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 143, 149, 158, 164, 174, 175, 176, 421, 422], "minut": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 166, 219], "24": [2, 6, 7, 27, 33, 36, 42, 43, 44, 51, 62, 70, 79, 91, 102, 103, 142, 149, 267, 269, 270, 274, 308], "101": [2, 7, 30, 33, 40, 41, 43, 111, 308, 309, 405], "second": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 111, 153, 154, 162, 163, 164, 166, 167, 169, 176, 216, 218, 219, 233, 245, 246, 247, 248, 250, 251, 255, 262, 263, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 285, 290, 296, 304, 307, 312, 313, 314, 315, 316, 317, 318, 328, 340, 341, 355, 364, 367, 370, 372, 378, 379, 380, 381, 382, 383, 388, 390, 392, 400, 401, 402, 403, 404, 408, 423], "estim": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 63, 65, 68, 70, 71, 72, 75, 78, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 120, 132, 140, 141, 146, 149, 150, 155, 158, 160, 161, 164, 166, 168, 169, 171, 172, 181, 182, 183, 185, 201, 205, 221, 228, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 263, 264, 267, 280, 282, 286, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 328, 375, 383, 389, 390, 391, 392, 415, 423], "usag": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 128, 137, 141, 146, 149, 150, 164, 165, 168, 171, 172, 173, 221, 228, 233, 386, 411, 423], "127": [2, 7, 33, 41, 131, 149], "mb": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "sourc": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 150, 151, 155, 163, 164, 172, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 422], "plot_3d_and_4d_niimg": [2, 7], "py": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 121, 137, 142, 143, 144, 146, 149, 164, 172, 176], "jupyt": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 135, 137, 149, 156, 171, 176, 267, 280, 384, 385, 386, 387, 388, 400, 402, 421], "notebook": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 122, 134, 137, 149, 156, 171, 176, 267, 280, 309, 384, 385, 386, 387, 388, 400, 402, 421], "ipynb": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "galleri": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 122, 124, 128, 129, 131, 149, 164, 421], "gener": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 113, 120, 134, 135, 137, 139, 140, 142, 144, 147, 149, 156, 157, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 193, 194, 196, 219, 229, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 259, 260, 267, 274, 280, 282, 283, 284, 285, 290, 296, 297, 307, 308, 309, 312, 313, 314, 315, 316, 317, 326, 328, 369, 373, 378, 379, 380, 381, 382, 383, 389, 390, 392, 400, 404, 412, 421, 422], "sphinx": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 122, 124, 128, 129, 131, 149, 164], "simpl": [3, 5, 25, 29, 31, 35, 37, 40, 47, 56, 60, 65, 67, 71, 73, 75, 76, 77, 79, 80, 83, 84, 87, 89, 91, 94, 96, 98, 100, 101, 110, 111, 113, 114, 127, 129, 134, 144, 149, 150, 151, 157, 159, 160, 163, 164, 165, 168, 169, 171, 175, 176, 181, 182, 183, 210, 212, 219, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 258, 267, 280, 292, 297, 309, 311, 312, 313, 314, 315, 316, 317, 318, 364, 377, 378, 383, 389, 390, 391, 392, 400, 402, 423], "reproduc": [3, 32, 40, 41, 48, 51, 72, 98, 100, 111, 170, 219, 247, 248], "2001": [3, 31, 38, 98, 102, 111, 113, 160, 170, 174, 191, 213, 328, 423], "v": [3, 6, 24, 28, 35, 45, 51, 65, 66, 76, 79, 80, 89, 97, 98, 109, 110, 111, 121, 149, 156, 157, 161, 163, 164, 170, 172, 204, 209, 213, 214, 217, 219, 224, 226, 227, 239, 245, 247, 249, 251, 290, 292, 295, 297, 298, 308, 311, 317, 328, 356, 371, 375, 378, 383, 385, 405], "discrimin": [3, 29, 31, 51, 94, 99, 113, 156, 170, 171], "mask": [3, 8, 15, 20, 21, 23, 27, 29, 30, 31, 33, 34, 35, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 64, 67, 70, 75, 77, 79, 83, 91, 92, 96, 102, 104, 105, 106, 110, 112, 114, 120, 121, 127, 128, 129, 131, 134, 137, 140, 142, 143, 144, 149, 153, 157, 160, 162, 170, 171, 173, 174, 182, 210, 213, 214, 215, 219, 223, 224, 236, 237, 240, 245, 246, 247, 248, 250, 251, 252, 253, 262, 264, 267, 280, 282, 283, 284, 285, 290, 291, 292, 295, 297, 298, 302, 304, 308, 311, 312, 313, 314, 315, 316, 317, 318, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 368, 370, 372, 373, 377, 378, 383, 390, 391, 392, 394, 395, 396, 397, 400, 402, 404, 408, 413, 421, 423], "ventral": [3, 16, 22, 32, 33, 38, 94, 98, 111, 113, 156, 170, 176, 213, 379, 381, 382], "stream": [3, 32, 113, 170, 176], "j": [3, 22, 23, 37, 41, 47, 49, 56, 68, 71, 76, 84, 98, 100, 102, 111, 114, 131, 134, 143, 149, 157, 158, 161, 162, 193, 195, 196, 199, 200, 201, 203, 204, 208, 209, 211, 214, 219, 221, 222, 223, 224, 226, 229, 239, 247, 248, 252, 262, 282, 285, 308, 309, 328, 364, 404, 405, 421], "et": [3, 22, 23, 28, 44, 45, 48, 51, 58, 66, 72, 98, 99, 100, 102, 110, 129, 134, 149, 150, 151, 153, 154, 155, 156, 157, 158, 161, 162, 176, 191, 200, 203, 207, 208, 209, 213, 222, 223, 245, 248, 251, 285, 287, 292, 304, 311, 314, 317, 328, 356, 378, 383], "al": [3, 22, 23, 28, 44, 45, 48, 51, 58, 66, 72, 98, 99, 100, 102, 110, 129, 134, 149, 150, 151, 153, 154, 155, 156, 157, 158, 161, 162, 176, 191, 200, 203, 207, 208, 209, 213, 222, 223, 245, 248, 251, 285, 287, 292, 304, 311, 314, 317, 328, 356, 378, 383], "distribut": [3, 6, 14, 15, 22, 23, 32, 38, 48, 49, 55, 79, 94, 98, 111, 141, 145, 149, 156, 161, 163, 166, 169, 203, 213, 255, 282, 328, 372], "overlap": [3, 32, 38, 54, 58, 89, 91, 92, 98, 111, 120, 147, 149, 164, 169, 176, 213, 221, 312, 313, 315, 316, 318, 376], "represent": [3, 16, 32, 33, 36, 38, 52, 53, 56, 58, 62, 75, 77, 84, 94, 98, 100, 104, 111, 113, 152, 155, 161, 169, 173, 175, 209, 213, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 285, 286, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 363, 364, 370, 371, 373, 376, 377, 378, 385, 386, 390, 392, 395, 396, 398, 399, 402, 408, 423], "tempor": [3, 6, 16, 32, 33, 38, 51, 55, 66, 68, 91, 94, 98, 101, 103, 111, 113, 134, 142, 149, 155, 156, 169, 173, 194, 213, 253, 267, 271, 272, 273, 274, 276, 277, 278, 279, 285, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 392, 404, 423], "cortex": [3, 23, 32, 33, 38, 55, 58, 61, 69, 71, 75, 79, 80, 91, 98, 111, 154, 156, 161, 165, 166, 195, 201, 205, 207, 213, 221, 223], "scienc": [3, 23, 38, 48, 58, 98, 111, 155, 158, 161, 162, 171, 181, 191, 193, 196, 199, 202, 203, 207, 209, 210, 213, 214, 219, 221, 222, 223, 234, 239, 247, 248, 249, 308, 309, 328, 364, 405, 423], "vol": [3, 48, 49, 98, 155, 249], "293": [3, 33, 41, 66, 72, 80, 82, 98, 111, 213], "p": [3, 6, 37, 42, 48, 62, 64, 67, 72, 75, 76, 77, 79, 80, 81, 94, 98, 101, 102, 105, 106, 108, 111, 141, 149, 155, 161, 163, 166, 181, 182, 185, 189, 194, 202, 204, 214, 221, 254, 255, 263, 267, 280, 282, 283, 285, 307, 328, 401, 402, 404], "2425": [3, 98, 111, 213], "2430": [3, 98, 102, 111, 213], "meant": [3, 6, 104, 188, 255, 400], "variou": [3, 20, 30, 31, 39, 48, 105, 106, 137, 140, 144, 149, 156, 158, 159, 164, 166, 169, 175, 193, 247, 248, 309, 390, 408], "step": [3, 11, 20, 33, 35, 37, 42, 44, 47, 49, 50, 55, 58, 61, 62, 64, 65, 66, 69, 79, 80, 89, 94, 98, 101, 108, 113, 120, 132, 140, 146, 149, 150, 153, 154, 155, 156, 158, 159, 161, 163, 164, 169, 172, 173, 174, 175, 183, 190, 215, 228, 237, 240, 247, 248, 252, 253, 267, 270, 282, 309, 311, 314, 317, 320, 321, 322, 324, 325, 390, 404, 423], "meta": [3, 14, 97, 100, 103, 109, 110, 114, 181, 182, 183, 226, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 290, 295, 296, 298, 311, 312, 313, 314, 315, 316, 317, 318, 370, 378, 383, 389, 390, 391, 392], "minimalist": 3, "strive": 3, "didact": [3, 127, 149, 157, 159, 164], "copi": [3, 18, 20, 21, 33, 36, 40, 53, 88, 100, 110, 113, 137, 149, 163, 164, 174, 228, 229, 252, 253, 288, 289, 290, 300, 301, 304, 311, 314, 317, 403], "analyz": [3, 33, 49, 60, 74, 94, 110, 155, 164, 166, 169, 171, 173, 328, 423], "mani": [3, 10, 11, 15, 23, 36, 38, 39, 41, 42, 43, 48, 49, 51, 56, 71, 79, 86, 94, 98, 99, 100, 106, 114, 142, 149, 152, 153, 154, 156, 157, 158, 159, 162, 163, 166, 169, 172, 175, 176, 183, 224, 226, 245, 246, 247, 248, 249, 282, 289, 328, 373, 398, 399, 408, 421], "unnecessari": [3, 260], "fetch_haxbi": [3, 15, 16, 18, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 94, 98, 102, 113, 128, 149, 156, 164, 174], "directori": [3, 6, 62, 64, 94, 101, 108, 110, 153, 164, 174, 182, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 244, 245, 246, 247, 248, 250, 251, 252, 253, 267, 270, 280, 286, 305, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 372, 390, 391, 392], "while": [3, 4, 6, 48, 55, 56, 66, 84, 94, 98, 100, 101, 103, 108, 113, 120, 122, 132, 134, 149, 155, 156, 161, 163, 164, 165, 171, 175, 176, 193, 245, 246, 247, 248, 274, 328], "310": [3, 33, 36, 41, 42, 44, 102], "mo": 3, "internet": [3, 49, 155, 173, 178, 423], "By": [3, 14, 15, 25, 29, 33, 35, 70, 71, 141, 149, 157, 164, 172, 176, 181, 182, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 228, 229, 230, 231, 232, 233, 234, 235, 245, 246, 247, 248, 250, 251, 252, 253, 267, 280, 286, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 363, 368, 371, 372, 374, 376, 377, 378, 385, 390, 391, 392, 395, 421], "default": [3, 8, 9, 11, 14, 15, 23, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 42, 47, 50, 51, 54, 55, 56, 60, 62, 66, 73, 79, 83, 89, 94, 96, 102, 103, 110, 114, 120, 121, 122, 124, 127, 128, 133, 134, 135, 137, 140, 141, 142, 143, 144, 146, 147, 149, 156, 157, 161, 163, 164, 165, 174, 175, 176, 181, 182, 183, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 262, 263, 264, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 289, 291, 292, 295, 297, 298, 299, 300, 301, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 408, 421], "2nd": [3, 25, 29, 30, 32, 33, 34, 35, 36, 37, 213], "fetch": [3, 9, 14, 19, 24, 29, 30, 32, 34, 35, 36, 37, 41, 58, 71, 85, 86, 87, 88, 91, 94, 103, 114, 121, 128, 129, 131, 133, 137, 149, 152, 155, 173, 189, 196, 202, 210, 211, 214, 217, 218, 219, 222, 224, 225, 226, 227, 228, 231, 233, 423], "haxby_dataset": [3, 15, 16, 18, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 94, 98, 102, 113, 156, 174, 176], "func": [3, 6, 11, 15, 16, 18, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 64, 65, 66, 67, 70, 85, 89, 91, 92, 94, 95, 98, 99, 100, 101, 102, 104, 108, 113, 142, 149, 154, 164, 165, 174, 176, 190, 210, 213, 223, 231, 305, 308, 309], "one": [3, 4, 6, 9, 14, 15, 16, 20, 24, 29, 30, 31, 33, 35, 36, 40, 44, 47, 48, 49, 55, 56, 57, 58, 64, 66, 69, 70, 71, 72, 74, 77, 78, 80, 81, 82, 86, 91, 92, 94, 100, 101, 103, 105, 108, 110, 113, 114, 120, 121, 126, 128, 131, 140, 142, 143, 144, 149, 150, 151, 154, 155, 156, 157, 161, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 176, 181, 183, 189, 193, 194, 200, 201, 202, 209, 215, 219, 222, 233, 245, 246, 247, 248, 250, 252, 253, 255, 267, 269, 270, 274, 276, 280, 281, 282, 285, 286, 287, 289, 290, 292, 296, 300, 305, 307, 312, 315, 317, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 365, 366, 370, 373, 374, 375, 376, 380, 381, 383, 385, 386, 390, 394, 395, 401, 404, 408, 422, 423], "each": [3, 6, 14, 15, 20, 21, 22, 24, 29, 34, 36, 37, 39, 40, 47, 48, 49, 50, 51, 55, 56, 58, 61, 62, 64, 70, 71, 78, 80, 86, 88, 94, 98, 99, 100, 101, 102, 105, 108, 114, 129, 134, 135, 137, 140, 142, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 161, 163, 164, 165, 166, 169, 171, 172, 174, 175, 176, 181, 182, 183, 185, 192, 203, 209, 210, 221, 224, 226, 234, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 259, 260, 267, 269, 270, 274, 280, 282, 285, 291, 297, 302, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 323, 325, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 363, 365, 368, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 389, 390, 391, 392, 393, 394, 395, 396, 398, 402, 404, 405, 407, 408, 421], "fmri_filenam": [3, 36, 37, 56, 94, 98, 113], "basic": [3, 7, 8, 11, 15, 16, 18, 25, 27, 29, 30, 32, 34, 35, 36, 41, 42, 48, 49, 52, 53, 56, 58, 69, 71, 75, 77, 85, 89, 91, 92, 94, 95, 98, 100, 102, 104, 105, 106, 163, 165, 166, 169, 171, 172, 176, 197, 198, 280, 282, 302, 308, 309, 366, 371, 377, 383], "inform": [3, 6, 9, 11, 16, 18, 21, 23, 25, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 48, 49, 51, 52, 53, 58, 61, 62, 66, 68, 72, 75, 77, 78, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108, 111, 113, 114, 118, 121, 131, 135, 145, 149, 150, 151, 154, 155, 156, 158, 160, 163, 164, 165, 168, 169, 171, 172, 174, 176, 181, 182, 183, 191, 192, 193, 194, 199, 201, 202, 204, 205, 213, 214, 221, 222, 223, 224, 226, 228, 236, 237, 239, 240, 245, 246, 247, 248, 249, 250, 251, 252, 253, 260, 267, 280, 282, 294, 300, 306, 307, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392, 402, 403, 404, 411, 422, 423], "haxby2001": [3, 16, 18, 25, 29, 30, 32, 34, 35, 36, 94, 102, 113, 174, 213], "subj2": [3, 16, 18, 25, 29, 30, 32, 34, 35, 36, 94, 102, 113], "bold": [3, 6, 16, 18, 25, 29, 30, 32, 34, 35, 36, 48, 65, 66, 76, 79, 94, 100, 101, 102, 108, 111, 113, 114, 137, 141, 147, 149, 155, 156, 165, 167, 169, 174, 196, 213, 223, 270, 305, 308, 309, 405, 423], "One": [3, 6, 14, 34, 35, 48, 49, 56, 64, 71, 79, 142, 149, 150, 151, 156, 157, 161, 163, 165, 166, 168, 172, 174, 176, 267, 300, 308, 309, 313, 314, 316, 395], "wai": [3, 6, 33, 61, 62, 64, 66, 75, 76, 84, 98, 108, 111, 113, 114, 141, 142, 144, 149, 150, 152, 155, 156, 157, 159, 162, 163, 164, 165, 166, 169, 174, 176, 226, 247, 248, 257, 259, 260, 305, 364, 389, 421, 422], "plot_epi": [3, 25, 49, 89, 94, 95, 141, 144, 149, 378, 421], "becaus": [3, 6, 11, 15, 18, 30, 31, 32, 36, 39, 42, 43, 44, 54, 66, 70, 71, 79, 84, 101, 102, 120, 137, 149, 151, 156, 161, 163, 164, 166, 172, 224, 250, 251, 373, 379, 381, 382, 386, 408], "thei": [3, 6, 24, 39, 42, 44, 49, 65, 66, 69, 71, 94, 98, 108, 113, 114, 121, 144, 146, 149, 155, 158, 159, 161, 163, 164, 166, 169, 171, 172, 174, 176, 205, 213, 224, 229, 267, 270, 280, 282, 286, 300, 312, 313, 315, 316, 318, 366, 393, 421], "consist": [3, 6, 34, 40, 44, 66, 69, 108, 113, 121, 127, 133, 134, 135, 144, 147, 149, 156, 157, 160, 161, 163, 164, 166, 169, 183, 193, 221, 251, 270, 312, 315, 389, 391, 394], "epi": [3, 6, 11, 15, 25, 30, 31, 92, 94, 95, 104, 169, 171, 175, 176, 245, 246, 247, 248, 252, 253, 314, 317, 322, 368, 378, 390, 421], "cannot": [3, 9, 10, 11, 36, 48, 49, 51, 56, 79, 86, 92, 94, 102, 114, 134, 146, 149, 150, 156, 159, 164, 176, 183, 385, 386, 388], "directli": [3, 6, 32, 33, 47, 48, 51, 64, 86, 89, 108, 126, 130, 132, 134, 149, 153, 156, 159, 166, 174, 176, 224, 270, 328, 376], "just": [3, 4, 6, 14, 21, 40, 42, 44, 49, 50, 51, 56, 58, 65, 66, 71, 75, 76, 77, 79, 81, 87, 91, 98, 100, 101, 113, 126, 149, 154, 156, 163, 166, 171, 172, 176, 267, 280, 285, 302, 305, 308, 376, 377, 378, 385, 402, 404, 408, 421], "mean_img": [3, 6, 15, 16, 18, 25, 30, 31, 33, 36, 49, 64, 67, 70, 71, 85, 89, 92, 94, 95, 102, 104, 175, 296], "view_img": [3, 29, 134, 135, 143, 146, 149, 156, 421], "none": [3, 14, 15, 32, 33, 36, 40, 43, 44, 49, 52, 53, 54, 56, 58, 62, 66, 68, 77, 79, 89, 91, 92, 94, 95, 100, 103, 107, 114, 121, 124, 134, 137, 141, 146, 149, 164, 176, 181, 182, 183, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 269, 270, 274, 276, 280, 281, 282, 283, 284, 285, 286, 291, 295, 297, 298, 299, 300, 302, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 408, 421], "usr": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 61, 62, 63, 64, 71, 77, 78, 79, 80, 84, 86, 87, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 197, 198], "share": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 61, 62, 63, 64, 71, 77, 78, 79, 80, 84, 86, 87, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111, 114, 140, 149, 150, 155, 174, 185, 194, 197, 198, 219, 224, 226], "miniconda3": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 61, 62, 63, 64, 71, 77, 78, 79, 80, 84, 86, 87, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108], "env": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 61, 62, 63, 64, 71, 77, 78, 79, 80, 84, 86, 87, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108], "testenv": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 61, 62, 63, 64, 71, 77, 78, 79, 80, 84, 86, 87, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108], "lib": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 61, 62, 63, 64, 71, 77, 78, 79, 80, 84, 86, 87, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108], "python3": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 61, 62, 63, 64, 71, 77, 78, 79, 80, 84, 86, 87, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 135, 137, 149, 164, 422], "9": [3, 4, 5, 6, 7, 9, 10, 11, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 68, 70, 71, 72, 76, 77, 78, 79, 80, 82, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 113, 114, 115, 118, 131, 140, 142, 169, 201, 210, 211, 224, 226, 228, 230, 254, 258, 267, 276, 282, 298, 304, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 364, 379, 381, 382, 398, 401, 421, 422], "site": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 61, 62, 63, 64, 71, 77, 78, 79, 80, 84, 86, 87, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 189, 190], "numpi": [3, 5, 6, 9, 10, 11, 12, 14, 16, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 77, 79, 80, 84, 86, 87, 89, 94, 98, 100, 102, 103, 104, 105, 106, 108, 118, 120, 125, 129, 131, 134, 137, 140, 142, 144, 149, 153, 154, 156, 163, 172, 174, 175, 181, 182, 183, 184, 185, 186, 187, 188, 195, 196, 201, 203, 207, 208, 209, 210, 245, 246, 247, 248, 250, 251, 252, 253, 257, 259, 260, 263, 267, 269, 274, 276, 280, 282, 285, 286, 287, 290, 291, 292, 296, 297, 298, 300, 302, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 325, 327, 328, 332, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 360, 361, 363, 365, 366, 368, 370, 372, 374, 375, 378, 379, 380, 381, 382, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408], "core": [3, 16, 20, 21, 29, 42, 43, 48, 50, 54, 58, 163, 164, 172, 183, 422], "fromnumer": [3, 16, 29], "771": [3, 16, 29], "userwarn": [3, 9, 10, 11, 16, 18, 20, 21, 26, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 63, 64, 71, 77, 78, 79, 80, 84, 86, 91, 92, 94, 95, 98, 100, 101, 103, 108], "warn": [3, 9, 11, 16, 20, 21, 29, 48, 50, 54, 71, 103, 120, 121, 134, 135, 137, 142, 144, 146, 147, 149, 156, 193, 194, 202, 270, 274, 287, 311, 312, 313, 314, 315, 316, 317, 318, 383, 392], "partit": [3, 16, 29, 40], "ignor": [3, 16, 21, 29, 48, 50, 71, 103, 135, 140, 149, 181, 182, 183, 224, 226, 230, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 274, 280, 282, 305, 308, 311, 312, 313, 314, 315, 316, 317, 318, 373, 389, 390, 391, 392, 408], "maskedarrai": [3, 16, 29], "kth": [3, 16], "axi": [3, 11, 12, 16, 22, 23, 25, 30, 31, 34, 38, 40, 41, 44, 47, 50, 58, 84, 85, 94, 103, 104, 107, 144, 146, 149, 154, 175, 193, 245, 246, 247, 248, 250, 251, 267, 275, 300, 302, 329, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 359, 366], "kind": [3, 16, 47, 50, 54, 56, 58, 79, 113, 130, 149, 150, 154, 157, 163, 169, 181, 408, 421], "These": [3, 4, 6, 15, 55, 58, 60, 72, 74, 77, 79, 81, 89, 94, 107, 110, 113, 137, 140, 141, 144, 149, 156, 159, 160, 162, 163, 164, 168, 169, 176, 196, 207, 209, 243, 416, 421, 422], "realli": [3, 70, 135, 149, 156, 309], "love": 3, "learn": [3, 21, 34, 36, 44, 46, 52, 53, 56, 57, 58, 59, 94, 97, 102, 104, 109, 110, 111, 112, 114, 118, 120, 122, 127, 129, 130, 131, 132, 134, 137, 142, 144, 149, 150, 151, 152, 153, 156, 157, 158, 160, 161, 163, 164, 169, 170, 172, 177, 181, 182, 185, 199, 210, 213, 222, 245, 246, 247, 248, 249, 252, 253, 290, 292, 293, 297, 311, 312, 313, 314, 315, 316, 317, 318, 341, 348, 361, 362, 363, 365, 368, 375, 376, 377, 378, 383, 390, 392, 422, 423], "matric": [3, 8, 27, 41, 47, 50, 51, 56, 60, 64, 67, 71, 73, 80, 99, 110, 122, 127, 130, 131, 141, 142, 144, 149, 150, 151, 152, 163, 165, 173, 174, 175, 177, 181, 182, 183, 185, 188, 221, 257, 259, 260, 267, 274, 300, 367, 375, 379, 383, 419, 423], "actual": [3, 6, 42, 66, 68, 71, 77, 86, 105, 147, 149, 163, 164, 166, 169, 174, 183, 228, 267, 280, 283, 402], "fortun": [3, 68], "later": [3, 6, 9, 22, 23, 40, 62, 69, 71, 91, 100, 101, 103, 166, 174, 195, 197, 198, 289, 360, 363, 368, 370, 371, 373, 377, 378, 379, 381, 382, 400, 421], "automat": [3, 15, 16, 19, 22, 23, 33, 34, 40, 54, 89, 92, 94, 111, 112, 118, 121, 127, 129, 141, 142, 143, 149, 154, 161, 164, 174, 175, 176, 195, 203, 245, 246, 247, 248, 250, 251, 252, 253, 267, 280, 282, 300, 307, 313, 316, 328, 339, 359, 363, 368, 371, 376, 377, 378, 385, 390, 392, 394, 402, 421, 423], "transform": [3, 23, 24, 40, 41, 48, 49, 50, 51, 53, 54, 66, 69, 71, 84, 91, 92, 94, 98, 99, 100, 103, 108, 111, 113, 130, 131, 135, 137, 139, 140, 141, 142, 144, 146, 149, 153, 154, 159, 166, 169, 173, 174, 181, 204, 222, 245, 246, 247, 248, 252, 253, 267, 280, 283, 287, 298, 300, 308, 311, 312, 313, 314, 315, 316, 317, 318, 329, 389, 390, 391, 392, 404, 408, 423], "all": [3, 4, 6, 8, 15, 19, 23, 27, 30, 32, 35, 36, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 66, 67, 69, 70, 71, 72, 76, 77, 79, 80, 87, 89, 91, 92, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 113, 114, 120, 121, 122, 127, 134, 137, 140, 142, 144, 145, 149, 150, 151, 153, 154, 155, 157, 159, 161, 163, 164, 166, 168, 171, 172, 174, 175, 176, 182, 183, 185, 189, 190, 192, 193, 194, 210, 218, 219, 222, 224, 227, 228, 229, 234, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 259, 260, 262, 267, 270, 276, 280, 281, 282, 285, 286, 291, 296, 297, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 323, 324, 325, 326, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 363, 365, 366, 368, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 388, 390, 392, 395, 402, 404, 408, 419, 421, 422], "do": [3, 6, 9, 22, 24, 25, 30, 31, 34, 40, 42, 49, 50, 51, 57, 61, 64, 65, 66, 67, 68, 70, 75, 77, 79, 80, 94, 98, 100, 101, 108, 113, 131, 135, 140, 144, 149, 150, 154, 155, 156, 157, 159, 161, 163, 166, 171, 172, 174, 175, 176, 181, 191, 215, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 276, 280, 282, 285, 297, 312, 313, 314, 315, 316, 317, 318, 323, 324, 325, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 390, 404, 408, 421], "defin": [3, 6, 9, 21, 23, 29, 30, 32, 33, 36, 37, 42, 47, 49, 54, 58, 61, 64, 66, 67, 69, 71, 72, 76, 77, 80, 81, 91, 98, 101, 111, 120, 121, 141, 142, 143, 144, 149, 151, 153, 154, 155, 156, 161, 164, 165, 166, 168, 169, 172, 175, 176, 191, 195, 209, 221, 223, 245, 246, 247, 248, 250, 251, 254, 258, 262, 267, 269, 274, 300, 308, 364, 373, 392, 393, 394, 395, 396, 398, 399, 415], "vt": [3, 18, 94], "mask_filenam": [3, 30, 32, 35, 39, 98, 102, 113, 156], "mask_vt": [3, 15, 16, 18, 30, 32, 94, 98, 113, 156, 174, 213], "anatom": [3, 6, 9, 11, 15, 17, 18, 22, 23, 25, 30, 32, 36, 94, 102, 111, 114, 130, 149, 154, 161, 169, 176, 191, 193, 195, 203, 210, 213, 214, 217, 219, 224, 308, 363, 376, 378, 385, 421], "background": [3, 6, 8, 14, 15, 16, 22, 23, 27, 30, 31, 40, 44, 49, 56, 69, 91, 92, 94, 104, 110, 113, 121, 125, 127, 129, 130, 131, 132, 134, 137, 140, 146, 149, 164, 169, 175, 176, 191, 197, 198, 200, 201, 204, 205, 217, 223, 245, 246, 247, 248, 252, 253, 267, 280, 312, 314, 315, 317, 320, 323, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 363, 365, 368, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 388, 390, 393, 395, 396, 402, 421, 423], "plot_roi": [3, 10, 17, 19, 25, 49, 66, 86, 89, 92, 94, 133, 140, 141, 146, 149, 151, 175, 176, 376, 421], "bg_img": [3, 6, 16, 17, 29, 30, 33, 36, 40, 42, 64, 67, 70, 71, 75, 88, 93, 113, 131, 137, 143, 149, 156, 176, 267, 280, 371, 376, 377, 378, 385, 402], "anat": [3, 6, 15, 16, 17, 18, 25, 29, 30, 32, 42, 43, 94, 113, 156, 174, 176, 205, 213, 217, 219, 231, 232, 305], "cmap": [3, 9, 11, 12, 19, 20, 22, 23, 31, 35, 36, 38, 40, 41, 42, 44, 50, 53, 76, 77, 79, 80, 81, 86, 102, 105, 106, 135, 137, 146, 149, 154, 217, 218, 219, 363, 364, 368, 369, 370, 373, 375, 376, 377, 378, 379, 380, 381, 382, 385, 386, 388, 421], "pair": [3, 74, 82, 86, 98, 110, 114, 156, 157, 168, 219, 222, 224, 245, 246, 247, 248, 250, 251, 280, 306, 307, 308, 309, 340, 367, 370, 375, 379, 381, 382, 383, 391, 408], "0x7f34e85a27c0": 3, "convert": [3, 6, 10, 11, 20, 21, 36, 42, 48, 49, 50, 54, 66, 79, 86, 94, 98, 107, 108, 113, 137, 142, 144, 146, 149, 154, 156, 161, 169, 175, 265, 286, 287, 295, 312, 313, 314, 315, 316, 317, 318], "appli": [3, 29, 31, 32, 42, 44, 50, 56, 61, 64, 66, 69, 79, 80, 89, 92, 94, 98, 100, 101, 103, 104, 112, 114, 120, 125, 127, 131, 134, 137, 142, 143, 144, 147, 149, 150, 151, 152, 155, 157, 158, 159, 161, 165, 168, 169, 173, 181, 189, 224, 244, 245, 246, 247, 248, 252, 253, 258, 267, 280, 282, 283, 284, 285, 296, 302, 304, 305, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 327, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 363, 373, 376, 377, 378, 379, 381, 382, 385, 386, 389, 390, 391, 392, 394, 395, 396, 401, 403, 404, 408, 413, 423], "instanc": [3, 4, 6, 15, 31, 49, 51, 66, 68, 86, 131, 137, 144, 149, 150, 151, 153, 155, 156, 164, 165, 166, 168, 169, 171, 174, 175, 181, 182, 183, 188, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 263, 264, 267, 274, 276, 280, 282, 286, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 375, 379, 380, 381, 382, 389, 390, 391, 392, 422], "csv": [3, 6, 29, 40, 47, 55, 113, 124, 149, 151, 156, 189, 190, 220, 228, 252, 253, 267, 285, 311, 312, 313, 314, 315, 316, 317, 318, 390, 392, 404], "file": [3, 6, 7, 9, 14, 22, 23, 27, 30, 32, 33, 34, 35, 36, 40, 45, 47, 48, 49, 51, 53, 55, 59, 60, 62, 64, 66, 73, 82, 86, 91, 92, 94, 96, 98, 100, 101, 108, 109, 110, 111, 113, 114, 122, 124, 129, 133, 134, 135, 136, 137, 140, 144, 145, 146, 147, 149, 150, 151, 153, 154, 156, 164, 165, 172, 173, 176, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 243, 245, 246, 252, 253, 267, 270, 280, 285, 295, 296, 298, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 384, 386, 387, 388, 390, 392, 400, 402, 404, 406, 407, 408, 422, 423], "separ": [3, 34, 48, 50, 64, 66, 67, 83, 88, 94, 96, 100, 110, 127, 144, 146, 149, 154, 155, 157, 161, 164, 166, 169, 172, 174, 175, 188, 205, 297, 308, 329, 331, 332, 359, 375, 377, 383, 392, 393, 394], "space": [3, 6, 15, 22, 23, 28, 40, 45, 48, 51, 55, 60, 62, 66, 69, 73, 84, 99, 101, 108, 110, 113, 114, 121, 127, 129, 131, 134, 137, 142, 149, 151, 164, 165, 166, 168, 169, 176, 192, 194, 199, 201, 203, 205, 207, 208, 209, 224, 226, 228, 232, 234, 251, 252, 253, 267, 270, 274, 285, 286, 287, 297, 300, 311, 314, 317, 318, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 361, 363, 364, 365, 368, 370, 371, 374, 376, 377, 378, 383, 384, 385, 387, 389, 391, 404, 408], "panda": [3, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 94, 98, 100, 102, 113, 114, 120, 131, 134, 140, 142, 144, 145, 149, 156, 181, 189, 195, 196, 207, 208, 209, 217, 218, 219, 228, 252, 253, 267, 268, 270, 274, 280, 281, 282, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 366, 367, 369, 389, 390, 391, 392, 401, 404], "arrai": [3, 5, 9, 10, 11, 20, 21, 22, 23, 26, 33, 34, 36, 40, 41, 42, 43, 44, 48, 49, 50, 51, 53, 54, 55, 56, 58, 61, 68, 70, 72, 79, 84, 86, 87, 89, 94, 98, 102, 105, 106, 108, 112, 129, 131, 137, 140, 143, 144, 146, 149, 150, 153, 154, 156, 159, 163, 173, 174, 176, 181, 182, 183, 185, 187, 188, 195, 196, 201, 207, 208, 209, 221, 222, 234, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 263, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 285, 290, 292, 300, 301, 304, 307, 311, 312, 313, 314, 315, 316, 317, 318, 319, 323, 325, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 363, 365, 366, 368, 370, 374, 378, 379, 380, 381, 382, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 402, 404, 405, 406, 407, 408, 414, 423], "pd": [3, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 63, 64, 65, 66, 67, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 94, 98, 102, 113, 174, 214], "read_csv": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 94, 98, 102, 113, 174], "session_target": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 94, 98, 102, 113, 174, 213], "delimit": [3, 40, 41, 98, 100, 113, 174], "chunk": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 98, 102], "2": [3, 6, 9, 11, 12, 14, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 111, 114, 116, 118, 119, 120, 129, 131, 132, 134, 135, 142, 143, 144, 154, 157, 161, 162, 163, 164, 166, 171, 172, 175, 176, 181, 182, 183, 187, 188, 189, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 204, 205, 210, 211, 212, 213, 214, 215, 219, 221, 224, 226, 228, 230, 232, 233, 234, 236, 237, 239, 240, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 267, 269, 274, 276, 280, 282, 283, 285, 291, 292, 295, 296, 297, 298, 301, 302, 304, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 365, 372, 374, 375, 376, 377, 378, 379, 383, 385, 391, 392, 394, 395, 396, 398, 401, 404, 405, 408, 421, 422], "4": [3, 6, 12, 13, 14, 15, 18, 19, 20, 21, 23, 24, 27, 29, 31, 33, 34, 35, 36, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 62, 64, 65, 66, 67, 68, 69, 72, 73, 75, 76, 77, 79, 81, 82, 84, 86, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 107, 108, 111, 115, 122, 127, 130, 134, 135, 136, 137, 142, 154, 156, 161, 162, 163, 171, 183, 189, 204, 208, 211, 221, 222, 228, 229, 230, 233, 245, 246, 247, 248, 250, 251, 252, 253, 280, 285, 300, 301, 308, 309, 320, 322, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 368, 370, 371, 374, 375, 376, 377, 378, 390, 404, 408, 421], "1447": [3, 98], "11": [3, 6, 33, 36, 42, 43, 44, 48, 49, 53, 56, 58, 62, 65, 66, 72, 91, 98, 102, 103, 111, 115, 122, 131, 134, 135, 136, 144, 149, 182, 194, 195, 221, 222, 223, 230], "1448": [3, 98], "1449": [3, 98], "1450": [3, 42, 98, 102], "1451": [3, 98], "1452": [3, 94, 98], "row": [3, 6, 40, 56, 66, 72, 98, 100, 114, 141, 149, 169, 224, 226, 257, 258, 259, 260, 267, 280, 281, 282, 339, 341, 344, 358, 363, 368, 371, 373, 375, 376, 377, 378, 389, 401, 408], "x": [3, 6, 9, 13, 14, 15, 24, 31, 33, 35, 37, 40, 41, 44, 52, 54, 56, 58, 62, 64, 66, 67, 70, 84, 91, 92, 94, 101, 103, 111, 124, 129, 131, 137, 142, 144, 146, 149, 156, 161, 164, 169, 172, 175, 176, 181, 193, 199, 221, 222, 245, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 267, 276, 280, 287, 308, 311, 312, 314, 315, 317, 318, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 362, 363, 365, 368, 370, 371, 374, 376, 377, 378, 379, 380, 381, 382, 385, 388, 389, 391, 392, 393, 397, 401, 402, 403, 419, 421], "column": [3, 6, 56, 62, 65, 66, 69, 70, 71, 72, 75, 76, 77, 79, 80, 81, 98, 100, 101, 102, 105, 106, 108, 114, 141, 149, 166, 182, 183, 185, 245, 246, 247, 248, 254, 257, 258, 259, 260, 265, 267, 274, 280, 281, 282, 285, 300, 308, 309, 310, 328, 339, 341, 344, 358, 363, 366, 367, 368, 369, 371, 375, 376, 377, 378, 399, 401, 403, 404, 405], "denot": [3, 6, 15, 134, 149, 166, 174, 175, 176, 308, 309, 339, 361, 377, 392, 393, 394, 395], "experiment": [3, 63, 64, 65, 66, 69, 71, 80, 94, 120, 140, 141, 144, 149, 156, 163, 166, 175, 196, 267, 270, 274, 379, 381, 382], "condit": [3, 6, 29, 30, 31, 33, 35, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 80, 94, 98, 101, 102, 108, 113, 141, 144, 146, 149, 150, 156, 163, 169, 172, 175, 196, 221, 267, 269, 274, 280, 282, 366], "type": [3, 6, 15, 18, 21, 29, 34, 42, 49, 63, 65, 66, 69, 72, 88, 94, 100, 102, 114, 120, 123, 126, 128, 131, 134, 137, 143, 144, 145, 146, 149, 158, 161, 164, 165, 166, 169, 174, 189, 193, 197, 198, 204, 221, 249, 255, 263, 267, 280, 285, 289, 290, 292, 294, 295, 297, 298, 302, 303, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 376, 377, 390, 392, 393, 394, 401, 402, 403, 404], "try": [3, 4, 9, 36, 39, 40, 49, 52, 53, 56, 57, 58, 62, 63, 65, 66, 75, 77, 78, 89, 98, 103, 114, 146, 149, 150, 151, 156, 157, 162, 163, 164, 172, 176, 422], "length": [3, 15, 55, 68, 77, 154, 164, 196, 199, 245, 246, 247, 248, 250, 251, 254, 258, 259, 260, 271, 272, 273, 277, 278, 279, 286, 311, 314, 317, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 363, 368, 371, 374, 375, 376, 377, 378, 390, 402, 408], "dtype": [3, 10, 11, 20, 21, 23, 33, 36, 40, 41, 44, 49, 52, 53, 54, 56, 58, 68, 77, 79, 86, 89, 91, 92, 94, 101, 103, 128, 129, 130, 134, 135, 149, 174, 268, 271, 272, 273, 277, 278, 279, 284, 286, 294, 295, 298, 300, 312, 313, 314, 315, 316, 317, 318, 319, 389, 391, 398], "As": [3, 15, 34, 36, 44, 49, 52, 54, 66, 79, 81, 92, 94, 95, 98, 101, 103, 113, 120, 137, 149, 150, 151, 153, 155, 156, 157, 161, 163, 164, 166, 168, 174, 270, 308, 309], "target": [3, 29, 33, 40, 84, 89, 94, 98, 100, 121, 134, 149, 156, 157, 161, 163, 164, 169, 172, 173, 213, 223, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 282, 300, 301, 311, 314, 317, 321, 324, 328, 389, 391, 392, 423], "experi": [3, 6, 29, 33, 34, 41, 66, 70, 94, 111, 112, 160, 165, 166, 169, 423], "consequ": [3, 15, 86, 176], "quit": [3, 6, 66, 154, 163, 219], "big": [3, 41, 49, 134, 149, 153, 156, 164, 174, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408], "Not": [3, 64, 66, 67, 197, 198, 332, 389, 391], "ha": [3, 6, 10, 11, 26, 29, 30, 31, 32, 33, 34, 35, 36, 42, 47, 49, 50, 51, 52, 54, 58, 63, 66, 68, 70, 72, 75, 78, 79, 80, 81, 86, 89, 91, 94, 98, 100, 104, 114, 120, 121, 122, 124, 128, 131, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 155, 157, 158, 161, 163, 164, 166, 168, 172, 176, 181, 182, 183, 191, 192, 193, 195, 200, 204, 224, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 274, 280, 282, 291, 294, 295, 297, 300, 301, 305, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 328, 330, 383, 389, 390, 391, 392, 396, 403, 405, 408, 421], "interest": [3, 6, 14, 15, 16, 23, 35, 42, 49, 51, 55, 68, 70, 71, 83, 96, 98, 99, 100, 101, 104, 107, 110, 114, 122, 140, 149, 150, 156, 158, 159, 161, 163, 164, 165, 166, 169, 171, 175, 176, 190, 196, 199, 201, 210, 213, 214, 217, 218, 219, 222, 223, 228, 231, 232, 233, 234, 257, 259, 260, 290, 295, 297, 298, 302, 305, 311, 315, 368, 377, 378, 380, 383, 392, 423], "u": [3, 4, 15, 24, 40, 55, 58, 63, 66, 77, 79, 89, 94, 111, 156, 157, 159, 164, 207, 209, 251, 259, 260, 422], "so": [3, 6, 10, 11, 14, 22, 33, 36, 40, 43, 49, 52, 64, 66, 67, 69, 70, 72, 76, 79, 80, 81, 86, 89, 94, 100, 101, 103, 108, 114, 142, 149, 161, 162, 163, 164, 166, 172, 174, 176, 181, 182, 183, 191, 197, 198, 205, 224, 229, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 270, 280, 282, 305, 306, 311, 312, 313, 314, 315, 316, 317, 318, 328, 373, 379, 381, 382, 386, 389, 390, 391, 392, 408], "keep": [3, 31, 33, 34, 36, 50, 51, 54, 58, 66, 69, 70, 84, 86, 94, 98, 102, 103, 114, 118, 121, 134, 141, 149, 154, 156, 157, 158, 161, 162, 164, 224, 228, 244, 250, 251, 252, 285, 291, 304, 306, 320, 321, 322, 323, 324, 325, 326, 392, 393, 404, 405], "signal": [3, 6, 28, 43, 44, 45, 46, 48, 49, 50, 52, 55, 57, 59, 61, 64, 66, 67, 68, 70, 71, 78, 83, 86, 94, 96, 100, 107, 110, 111, 119, 120, 121, 133, 135, 137, 141, 142, 146, 147, 149, 150, 152, 153, 154, 155, 156, 158, 161, 163, 165, 166, 169, 173, 175, 181, 182, 183, 185, 189, 196, 197, 199, 207, 208, 210, 213, 221, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 282, 285, 291, 292, 297, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 328, 360, 365, 374, 375, 383, 384, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 402, 423], "creat": [3, 6, 10, 11, 20, 23, 33, 36, 40, 41, 42, 47, 48, 49, 55, 62, 64, 66, 67, 69, 71, 72, 75, 79, 84, 86, 94, 98, 100, 107, 108, 112, 113, 120, 126, 134, 146, 149, 150, 151, 155, 156, 157, 159, 164, 165, 166, 169, 170, 172, 173, 174, 176, 224, 226, 244, 252, 253, 267, 270, 280, 281, 292, 298, 307, 330, 339, 340, 341, 344, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 398, 399, 400, 401, 421, 422, 423], "sampl": [3, 8, 11, 23, 27, 31, 34, 36, 40, 47, 49, 50, 51, 54, 56, 58, 63, 66, 69, 71, 74, 75, 77, 78, 81, 82, 84, 94, 101, 105, 108, 110, 111, 113, 140, 142, 143, 149, 151, 156, 161, 163, 165, 166, 168, 176, 181, 182, 183, 185, 210, 219, 234, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 268, 269, 271, 272, 273, 274, 277, 278, 279, 280, 282, 285, 289, 290, 296, 312, 313, 314, 315, 316, 317, 318, 327, 328, 340, 355, 364, 367, 370, 373, 382, 383, 389, 390, 391, 392, 403, 404, 405, 408, 419], "belong": [3, 30, 32, 144, 149, 156, 169, 176], "classif": [3, 30, 31, 32, 33, 35, 43, 46, 49, 59, 98, 100, 110, 111, 113, 140, 149, 150, 155, 156, 160, 161, 162, 169, 170, 171, 181, 189, 199, 210, 245, 246, 247, 248, 250, 309, 311, 316, 365, 375, 383, 422, 423], "becom": [3, 66, 114, 157, 158, 159, 166], "smaller": [3, 6, 32, 81, 124, 134, 142, 146, 149, 153, 161, 162, 163, 166, 169, 174, 197, 198, 251, 283, 296, 304, 389], "e": [3, 6, 15, 22, 24, 29, 39, 40, 44, 47, 48, 56, 66, 76, 86, 88, 94, 100, 102, 103, 105, 111, 113, 114, 121, 122, 140, 142, 143, 146, 149, 151, 154, 156, 159, 161, 162, 163, 164, 165, 166, 168, 169, 171, 175, 176, 181, 182, 183, 185, 194, 195, 202, 207, 208, 209, 211, 221, 224, 226, 229, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 259, 260, 267, 274, 280, 282, 283, 284, 285, 286, 287, 289, 304, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 365, 373, 376, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 395, 396, 398, 404, 408, 421], "shorter": [3, 66, 163, 308], "condition_mask": [3, 29, 30, 31, 34, 36, 37, 98, 102, 113], "isin": [3, 29, 31, 34, 36, 37, 98, 102, 113, 114, 224], "larg": [3, 30, 31, 36, 39, 41, 43, 48, 49, 54, 56, 65, 70, 71, 72, 92, 111, 114, 135, 149, 153, 156, 157, 158, 159, 161, 163, 164, 166, 169, 170, 171, 174, 176, 219, 224, 226, 267, 269, 274, 313, 316, 320, 321, 322, 324, 325, 359, 390], "split": [3, 30, 31, 32, 34, 36, 39, 40, 41, 42, 43, 44, 49, 51, 86, 94, 99, 100, 140, 149, 154, 156, 158, 163, 164, 169, 175, 197, 198, 245, 246, 247, 248], "fmri_niimg": [3, 30, 34, 98, 156], "valu": [3, 4, 6, 9, 14, 15, 17, 23, 24, 30, 31, 33, 40, 42, 44, 47, 52, 54, 55, 58, 61, 66, 69, 70, 72, 77, 79, 88, 89, 90, 91, 92, 94, 98, 100, 101, 102, 103, 105, 106, 107, 108, 114, 118, 120, 121, 122, 126, 129, 130, 134, 137, 141, 142, 144, 149, 150, 153, 154, 157, 158, 160, 161, 162, 164, 166, 168, 169, 171, 174, 176, 181, 182, 183, 185, 187, 189, 191, 193, 194, 195, 197, 198, 200, 201, 202, 204, 205, 215, 219, 224, 228, 230, 233, 236, 237, 240, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 263, 267, 268, 270, 276, 280, 282, 283, 284, 285, 286, 289, 291, 300, 301, 302, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 385, 386, 388, 389, 390, 391, 392, 394, 395, 396, 400, 401, 402, 403, 404, 405, 408, 421], "216": [3, 30, 33, 41], "classifi": [3, 28, 32, 33, 36, 41, 45, 51, 98, 99, 110, 137, 140, 141, 149, 156, 157, 158, 159, 160, 169, 170, 171, 213, 245, 247, 248, 249, 250, 290, 292, 297, 378, 383, 423], "linear": [3, 6, 29, 33, 34, 35, 37, 44, 66, 69, 98, 102, 111, 131, 149, 156, 160, 165, 166, 167, 169, 170, 175, 176, 185, 224, 245, 246, 247, 248, 250, 251, 252, 253, 257, 259, 260, 267, 280, 285, 299, 300, 301, 309, 328, 372, 404, 408, 415, 422, 423], "kernel": [3, 29, 33, 34, 35, 44, 55, 94, 98, 156, 246, 248, 251, 271, 272, 273, 277, 278, 279], "svc": [3, 29, 30, 31, 32, 33, 34, 35, 113, 137, 149, 156, 157, 159, 245, 247, 249], "standard": [3, 6, 9, 11, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 66, 69, 70, 72, 75, 89, 91, 92, 94, 98, 99, 101, 104, 105, 106, 108, 111, 113, 121, 134, 137, 141, 143, 144, 149, 151, 154, 156, 157, 161, 164, 165, 166, 169, 174, 175, 176, 203, 228, 245, 246, 247, 248, 250, 251, 252, 253, 259, 260, 267, 269, 270, 274, 285, 305, 308, 312, 313, 314, 315, 316, 317, 318, 390, 392, 404, 422], "zscore_sampl": [3, 11, 29, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 91, 92, 98, 99, 100, 104, 121, 149, 154, 156, 312, 313, 314, 315, 316, 317, 318, 404], "fit": [3, 6, 28, 30, 32, 35, 36, 37, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 65, 66, 69, 71, 73, 75, 76, 77, 79, 80, 81, 87, 89, 91, 92, 94, 98, 99, 100, 103, 110, 113, 134, 142, 144, 146, 149, 150, 152, 153, 154, 156, 157, 159, 161, 163, 166, 167, 169, 170, 171, 176, 181, 182, 183, 205, 212, 213, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 264, 267, 270, 276, 280, 282, 292, 297, 311, 312, 313, 314, 315, 316, 317, 318, 324, 328, 341, 344, 366, 378, 383, 389, 390, 391, 392, 395, 400, 402, 423], "train": [3, 31, 32, 34, 39, 40, 41, 42, 43, 44, 51, 98, 99, 140, 149, 156, 157, 158, 161, 163, 169, 171, 176, 182, 245, 246, 247, 248, 250, 251, 389, 391, 397], "without": [3, 6, 14, 23, 48, 50, 66, 78, 81, 84, 94, 114, 121, 128, 137, 146, 149, 151, 154, 160, 162, 163, 169, 174, 176, 194, 283, 289, 309, 311, 314, 317, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 364, 371, 376, 421, 423], "resampl": [3, 9, 11, 29, 30, 32, 33, 34, 35, 36, 43, 48, 49, 52, 53, 54, 56, 66, 71, 75, 83, 91, 92, 96, 98, 110, 113, 121, 126, 127, 130, 131, 137, 141, 143, 144, 149, 173, 224, 226, 228, 238, 239, 241, 242, 245, 246, 247, 248, 250, 251, 252, 253, 280, 286, 290, 295, 297, 299, 300, 301, 312, 313, 314, 315, 316, 317, 320, 322, 323, 324, 325, 370, 371, 377, 378, 383, 385, 390, 395, 408, 423], "494": [3, 29, 30, 32, 33, 34, 35, 36, 98], "provid": [3, 5, 6, 9, 29, 30, 32, 33, 34, 35, 36, 44, 47, 48, 49, 52, 54, 56, 62, 64, 66, 67, 68, 71, 75, 76, 77, 79, 80, 84, 91, 94, 98, 101, 105, 112, 113, 114, 124, 132, 135, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 152, 153, 155, 156, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 176, 181, 182, 183, 185, 188, 189, 191, 192, 193, 194, 201, 202, 205, 213, 224, 228, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 258, 267, 268, 269, 273, 274, 279, 280, 282, 285, 291, 300, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 362, 364, 366, 367, 374, 376, 380, 389, 390, 391, 392, 393, 400, 404, 408, 421, 422], "sform": [3, 29, 30, 32, 33, 34, 35, 36, 98, 146, 149], "header": [3, 11, 29, 30, 32, 33, 34, 35, 36, 94, 98, 101, 118, 135, 137, 145, 147, 149, 174, 285, 288, 298, 364, 404], "result": [3, 6, 14, 15, 23, 24, 30, 33, 34, 35, 36, 40, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 64, 65, 66, 67, 69, 71, 72, 75, 77, 78, 79, 84, 86, 87, 88, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 108, 111, 112, 114, 121, 127, 134, 137, 140, 145, 146, 147, 149, 150, 152, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 174, 175, 176, 189, 191, 201, 219, 224, 226, 233, 245, 246, 249, 256, 257, 259, 260, 261, 267, 276, 280, 282, 285, 295, 296, 297, 300, 307, 315, 316, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 379, 386, 395, 396, 401, 408, 418, 421, 423], "mai": [3, 17, 29, 30, 32, 33, 34, 35, 36, 43, 49, 56, 66, 72, 80, 86, 98, 100, 103, 111, 113, 114, 118, 135, 137, 145, 149, 150, 156, 157, 159, 164, 166, 169, 174, 176, 181, 219, 224, 251, 255, 270, 282, 300, 307, 309, 313, 315, 316, 328, 379, 381, 382, 395, 401, 408], "expect": [3, 6, 29, 30, 32, 33, 34, 35, 36, 61, 66, 78, 79, 81, 95, 98, 101, 102, 105, 106, 114, 122, 137, 146, 149, 154, 161, 164, 166, 169, 172, 175, 176, 251, 267, 269, 274, 280, 282, 286, 305], "both": [3, 9, 15, 24, 39, 47, 49, 51, 58, 69, 79, 80, 89, 94, 100, 105, 108, 114, 137, 144, 149, 150, 153, 155, 161, 162, 164, 165, 169, 174, 175, 176, 181, 188, 200, 210, 267, 269, 274, 282, 283, 285, 304, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 375, 394, 404, 408, 422], "class": [3, 11, 28, 32, 42, 43, 45, 49, 51, 54, 56, 91, 94, 98, 99, 110, 119, 120, 121, 122, 124, 130, 131, 132, 135, 137, 140, 142, 143, 144, 146, 149, 155, 156, 160, 163, 164, 165, 168, 176, 177, 179, 180, 181, 182, 183, 213, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 267, 280, 286, 298, 308, 311, 312, 313, 314, 315, 316, 317, 318, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 375, 383, 389, 390, 391, 392, 393, 394, 400, 409, 411, 413, 416, 417, 418, 423], "number": [3, 6, 29, 31, 33, 34, 39, 42, 43, 49, 50, 53, 54, 55, 58, 65, 66, 69, 72, 77, 79, 86, 89, 92, 94, 98, 100, 103, 104, 105, 114, 122, 134, 137, 140, 141, 142, 144, 149, 150, 153, 154, 156, 157, 158, 161, 164, 166, 169, 171, 172, 176, 181, 182, 183, 185, 189, 190, 193, 196, 197, 198, 201, 202, 204, 210, 213, 215, 218, 219, 222, 224, 228, 234, 237, 240, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 258, 263, 267, 276, 280, 282, 283, 285, 287, 289, 291, 297, 304, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 323, 324, 325, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 363, 364, 365, 366, 368, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 401, 402, 403, 404, 405, 421], "problem": [3, 6, 31, 33, 39, 43, 48, 92, 94, 111, 156, 157, 158, 161, 162, 163, 164, 166, 169, 171, 172, 185, 250, 251, 253, 254, 257, 258, 259, 260, 282, 328], "balanc": [3, 49, 144, 149, 153], "perform": [3, 30, 33, 34, 43, 44, 48, 51, 62, 66, 71, 79, 80, 89, 91, 92, 94, 95, 99, 100, 101, 102, 105, 106, 113, 114, 121, 140, 141, 142, 144, 149, 150, 155, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 174, 175, 176, 185, 215, 228, 237, 240, 245, 246, 247, 248, 250, 251, 252, 253, 267, 269, 276, 280, 282, 299, 300, 301, 302, 303, 304, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 328, 339, 341, 344, 346, 348, 350, 352, 354, 356, 358, 363, 365, 368, 370, 371, 374, 376, 377, 378, 385, 389, 390, 391, 392, 395, 397, 402, 403, 404, 408, 423], "done": [3, 6, 34, 41, 48, 49, 51, 53, 57, 58, 64, 66, 94, 103, 113, 114, 144, 146, 149, 150, 151, 153, 156, 157, 159, 161, 163, 166, 172, 175, 182, 183, 245, 246, 247, 248, 250, 251, 252, 253, 267, 280, 285, 286, 294, 304, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 390, 391, 392, 404], "sum": [3, 41, 42, 49, 58, 65, 68, 77, 79, 84, 101, 102, 105, 106, 107, 137, 149, 163, 250, 251, 254, 258, 259, 291, 312, 315, 395, 405], "float": [3, 40, 41, 43, 68, 75, 137, 140, 149, 182, 183, 185, 189, 215, 236, 237, 240, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 262, 266, 267, 269, 270, 271, 272, 273, 274, 277, 278, 279, 280, 282, 283, 284, 285, 289, 291, 300, 301, 304, 308, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 362, 363, 364, 365, 368, 370, 371, 373, 374, 376, 377, 378, 379, 381, 382, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 397, 400, 401, 402, 403, 404, 405, 408], "len": [3, 12, 22, 30, 32, 33, 34, 47, 48, 51, 62, 63, 64, 65, 66, 68, 69, 76, 79, 91, 94, 98, 103, 114, 185, 245, 246, 247, 248, 250, 251, 257, 259, 260, 280, 297, 300, 320, 322, 323, 325, 390], "meaningless": [3, 156, 166, 283], "why": [3, 94, 163, 176], "proper": [3, 34, 144, 149, 163, 200, 201, 422], "error": [3, 6, 42, 43, 66, 76, 79, 81, 84, 94, 103, 120, 124, 131, 134, 137, 146, 149, 151, 156, 157, 161, 164, 166, 169, 181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 259, 267, 274, 280, 282, 283, 285, 286, 307, 311, 312, 313, 314, 315, 316, 317, 318, 324, 389, 390, 391, 392, 422], "rate": [3, 6, 66, 81, 124, 149, 163, 166, 169, 176, 262, 282], "test": [3, 29, 31, 34, 36, 40, 42, 43, 44, 51, 53, 66, 71, 74, 77, 78, 82, 99, 101, 102, 105, 106, 110, 111, 120, 133, 141, 144, 147, 149, 156, 158, 159, 161, 162, 163, 166, 167, 168, 169, 172, 175, 183, 189, 190, 191, 192, 193, 194, 195, 199, 202, 203, 205, 213, 214, 217, 218, 219, 222, 223, 228, 234, 245, 246, 247, 248, 249, 250, 251, 255, 264, 280, 282, 283, 290, 296, 300, 301, 304, 307, 328, 340, 341, 355, 367, 370, 378, 383, 385, 415, 422], "30": [3, 6, 14, 27, 32, 33, 36, 40, 42, 43, 44, 48, 51, 57, 62, 63, 68, 82, 91, 99, 102, 103, 105, 107, 111, 124, 134, 149, 162, 190, 247, 248, 257, 259, 260, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 400], "last": [3, 6, 33, 35, 40, 55, 72, 136, 149, 166, 171, 172, 187, 188, 285, 292, 306, 421, 422], "point": [3, 4, 8, 15, 22, 23, 27, 54, 55, 84, 86, 91, 94, 110, 113, 134, 137, 146, 149, 154, 156, 163, 166, 171, 172, 173, 174, 183, 245, 246, 247, 248, 267, 300, 301, 311, 314, 317, 322, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 365, 368, 371, 374, 376, 377, 378, 382, 383, 385, 395, 396, 402, 408, 423], "dure": [3, 6, 55, 56, 65, 94, 100, 101, 111, 113, 134, 141, 149, 156, 157, 163, 164, 166, 169, 176, 183, 185, 202, 280, 282, 320, 321, 322, 324, 325, 373, 389], "fmri_niimgs_train": 3, "fmri_niimgs_test": 3, "conditions_train": 3, "conditions_test": 3, "calcul": [3, 11, 31, 41, 47, 48, 50, 51, 54, 56, 58, 92, 97, 109, 110, 121, 135, 149, 165, 218, 219, 245, 246, 247, 248, 252, 253, 257, 259, 260, 275, 282, 290, 308, 311, 314, 317, 321, 324, 328, 339, 356, 363, 368, 371, 376, 377, 378, 383, 385, 390, 402], "hasn": [3, 163], "t": [3, 5, 6, 9, 16, 22, 24, 33, 37, 41, 55, 56, 58, 62, 66, 67, 68, 69, 71, 72, 75, 76, 77, 79, 80, 83, 90, 92, 93, 94, 96, 99, 100, 102, 103, 104, 105, 107, 108, 110, 111, 114, 140, 149, 161, 162, 163, 164, 166, 167, 168, 169, 171, 172, 174, 175, 191, 192, 201, 202, 204, 205, 211, 219, 224, 225, 226, 229, 250, 251, 255, 257, 258, 259, 260, 261, 263, 264, 267, 280, 282, 304, 307, 308, 309, 322, 328, 373, 376, 378, 383, 394, 402, 405, 408, 421], "examin": [3, 111, 169, 211, 229], "well": [3, 6, 15, 44, 48, 51, 58, 66, 68, 70, 79, 89, 100, 127, 134, 141, 143, 149, 150, 151, 153, 154, 156, 157, 159, 162, 164, 166, 169, 171, 181, 182, 183, 196, 202, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 286, 300, 309, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "predicton_accuraci": 3, "3f": [3, 6, 34, 44, 48, 55, 98], "767": 3, "set": [3, 6, 14, 15, 16, 21, 22, 28, 29, 30, 31, 33, 36, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 65, 66, 70, 79, 80, 81, 89, 94, 95, 98, 99, 101, 110, 111, 114, 120, 121, 127, 131, 137, 140, 141, 143, 144, 146, 149, 150, 151, 154, 156, 158, 160, 163, 165, 166, 167, 168, 169, 170, 174, 176, 181, 182, 183, 189, 195, 196, 207, 208, 209, 213, 217, 218, 219, 224, 226, 228, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 259, 260, 266, 267, 269, 274, 280, 281, 283, 285, 292, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 385, 386, 388, 389, 390, 391, 392, 394, 397, 402, 404, 408, 421, 423], "repetit": [3, 6, 33, 63, 64, 67, 71, 133, 149, 166, 169, 210, 215, 237, 240, 245, 246, 247, 248, 250, 251, 267, 270, 285, 312, 313, 314, 315, 316, 317, 318, 364, 390, 392, 404], "strategi": [3, 11, 24, 28, 45, 47, 48, 49, 50, 51, 54, 66, 88, 89, 91, 92, 99, 110, 111, 121, 137, 141, 142, 144, 149, 154, 157, 160, 161, 163, 166, 173, 183, 213, 245, 246, 247, 248, 249, 252, 253, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 324, 364, 375, 376, 383, 390, 395, 404, 408, 423], "scikit": [3, 34, 49, 94, 97, 102, 104, 109, 110, 112, 118, 120, 122, 127, 129, 130, 131, 134, 137, 142, 144, 149, 150, 153, 156, 157, 158, 160, 161, 163, 164, 170, 171, 172, 213, 245, 246, 247, 248, 249, 292, 311, 312, 313, 314, 315, 316, 317, 318, 378, 390, 422, 423], "sklearn": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 57, 58, 92, 94, 98, 99, 102, 103, 104, 105, 106, 134, 137, 141, 142, 149, 150, 156, 157, 159, 163, 176, 181, 182, 183, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 213, 214, 220, 224, 226, 231, 232, 233, 234, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 276, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "model_select": [3, 29, 30, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 51, 98, 99, 134, 149, 156, 159, 245, 246, 247, 248], "cv": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 44, 51, 58, 98, 99, 131, 149, 156, 161, 183, 245, 246, 247, 248, 249, 250, 251], "n_split": [3, 34, 36, 37, 40, 44, 51, 99], "fold": [3, 29, 31, 34, 36, 40, 51, 69, 94, 98, 99, 156, 157, 159, 161, 163, 176, 183, 245, 246, 247, 248, 249, 250, 251], "enumer": [3, 12, 22, 34, 40, 47, 48, 51, 57, 64, 65, 66, 68, 69, 71, 79, 94, 100, 101, 102, 103, 105], "01d": 3, "886": 3, "698": [3, 33], "744": [3, 33], "return": [3, 4, 9, 14, 15, 31, 33, 39, 40, 41, 44, 47, 56, 64, 66, 68, 80, 84, 94, 100, 107, 113, 114, 121, 126, 130, 137, 140, 142, 144, 145, 146, 147, 149, 151, 156, 158, 161, 163, 164, 169, 171, 172, 174, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 367, 369, 372, 373, 375, 379, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 416, 421], "paramet": [3, 6, 14, 15, 21, 23, 24, 28, 29, 32, 42, 44, 45, 49, 51, 54, 56, 60, 71, 73, 87, 89, 91, 92, 94, 95, 104, 105, 106, 108, 110, 113, 114, 120, 121, 128, 131, 134, 135, 137, 141, 142, 143, 144, 145, 146, 147, 149, 151, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 169, 171, 173, 174, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 421, 423], "n_fold": [3, 183, 245, 246, 247, 248, 250, 251], "pipelin": [3, 35, 37, 39, 40, 41, 42, 44, 75, 98, 99, 111, 140, 149, 155, 156, 157, 160, 161, 162, 169, 175, 181, 182, 183, 189, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 285, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392, 404, 423], "found": [3, 6, 49, 52, 55, 81, 100, 101, 103, 107, 108, 113, 114, 134, 149, 150, 153, 154, 155, 156, 157, 158, 159, 161, 163, 164, 171, 172, 175, 176, 224, 226, 228, 285, 287, 305, 319, 322, 363, 377, 378, 404, 421], "websit": [3, 42, 75, 122, 134, 149, 164, 189, 202, 223], "best": [3, 34, 42, 43, 44, 95, 140, 146, 149, 156, 157, 158, 161, 163, 164, 166, 175, 245, 246, 247, 248, 250, 251, 307, 341, 344, 389, 390], "per": [3, 6, 30, 31, 33, 40, 48, 57, 66, 78, 94, 101, 102, 108, 142, 149, 150, 156, 164, 176, 183, 203, 222, 245, 246, 247, 248, 250, 251, 253, 255, 267, 268, 270, 274, 281, 305, 308, 312, 313, 314, 316, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 366, 403], "cv_params_": [3, 34, 121, 147, 149, 245, 246, 247, 248], "c": [3, 34, 37, 40, 41, 42, 43, 44, 49, 56, 64, 67, 70, 98, 99, 100, 102, 111, 114, 157, 161, 162, 164, 182, 185, 193, 195, 202, 204, 207, 208, 214, 215, 221, 223, 224, 226, 228, 239, 259, 260, 285, 300, 301, 308, 309, 328, 395, 398, 404], "100": [3, 15, 31, 33, 34, 36, 40, 41, 42, 43, 44, 49, 55, 63, 75, 86, 89, 102, 105, 114, 157, 166, 173, 183, 189, 201, 221, 224, 245, 246, 247, 248, 250, 251, 267, 275, 276, 284, 291, 304, 405, 421, 423], "speed": [3, 36, 37, 47, 77, 89, 98, 105, 111, 153, 159, 162, 163, 175, 176, 328, 389, 408], "cpu": [3, 42, 102, 105, 159, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 276, 280, 282, 297, 312, 313, 314, 323, 324, 325, 328, 390], "comput": [3, 6, 9, 15, 16, 22, 25, 29, 30, 31, 33, 39, 40, 41, 43, 44, 46, 47, 48, 49, 51, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 77, 79, 81, 83, 85, 90, 92, 95, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 114, 122, 134, 140, 141, 142, 144, 149, 152, 153, 155, 156, 157, 158, 159, 161, 162, 163, 166, 167, 169, 170, 171, 173, 174, 177, 181, 183, 185, 199, 210, 213, 223, 233, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 259, 260, 263, 264, 266, 267, 269, 274, 276, 280, 282, 283, 290, 291, 292, 295, 296, 297, 298, 302, 304, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 362, 365, 368, 375, 376, 377, 378, 383, 384, 386, 389, 390, 391, 392, 400, 402, 403, 405, 408, 414, 421, 423], "n_job": [3, 33, 36, 37, 42, 43, 44, 47, 48, 77, 79, 98, 99, 102, 105, 159, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 270, 276, 280, 282, 297, 312, 313, 314, 323, 324, 325, 328, 390], "respect": [3, 62, 108, 137, 146, 149, 150, 164, 166, 169, 172, 176, 207, 209, 245, 246, 247, 248, 267, 269, 270, 274, 280, 289, 300, 301, 392, 394], "structur": [3, 6, 23, 39, 41, 43, 46, 49, 51, 58, 59, 63, 66, 110, 111, 150, 156, 158, 159, 160, 161, 163, 169, 174, 183, 191, 193, 202, 205, 213, 214, 219, 228, 250, 251, 254, 257, 305, 320, 321, 322, 324, 325, 375, 383, 386, 391, 397, 423], "acquisit": [3, 6, 30, 32, 63, 66, 71, 101, 111, 161, 166, 169, 219, 274, 364], "select": [3, 6, 14, 15, 19, 20, 23, 29, 32, 33, 34, 35, 41, 42, 55, 56, 66, 76, 89, 94, 100, 105, 111, 112, 127, 128, 129, 131, 139, 140, 142, 144, 147, 149, 151, 154, 157, 158, 159, 160, 161, 162, 163, 175, 176, 182, 183, 193, 210, 211, 221, 224, 226, 228, 230, 244, 245, 246, 247, 248, 250, 251, 280, 282, 292, 304, 308, 309, 370, 376, 378, 379, 381, 382, 389, 390, 392, 408, 421, 423], "session_label": [3, 29, 30, 32, 33, 98, 156], "acquir": [3, 6, 66, 68, 113, 166, 169, 171], "nois": [3, 6, 34, 44, 56, 64, 67, 69, 70, 94, 95, 100, 103, 108, 111, 120, 142, 149, 151, 157, 159, 163, 166, 169, 176, 257, 259, 260, 274, 308, 309, 364, 376, 377, 405], "autocorrel": [3, 69, 108], "henc": [3, 56, 58, 72, 75, 86, 140, 149, 161, 164, 166], "across": [3, 6, 15, 16, 47, 50, 51, 56, 64, 65, 66, 80, 94, 98, 99, 100, 103, 111, 121, 137, 143, 149, 150, 151, 154, 155, 156, 157, 159, 161, 166, 169, 181, 199, 233, 245, 246, 247, 248, 250, 251, 252, 253, 303, 319, 364, 390, 392, 408, 421], "pass": [3, 4, 9, 10, 11, 24, 29, 36, 42, 43, 49, 51, 54, 55, 56, 58, 79, 86, 89, 94, 102, 105, 106, 113, 114, 120, 130, 132, 134, 137, 142, 144, 146, 149, 156, 157, 161, 163, 164, 165, 174, 175, 176, 181, 182, 183, 189, 224, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 269, 274, 280, 282, 285, 299, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 322, 323, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 385, 386, 389, 390, 391, 392, 394, 402, 403, 404, 408], "leaveonegroupout": [3, 29, 30, 32, 33, 98, 131, 149, 156, 159, 161, 245, 246, 247, 248], "cv_scores_": [3, 29, 30, 32, 33, 34, 42, 156, 183, 245, 246, 247, 248, 250, 251], "9629629629629629": 3, "8518518518518519": 3, "9753086419753086": 3, "40740740740740744": 3, "9876543209876543": 3, "9259259259259259": 3, "8765432098765432": 3, "final": [3, 4, 6, 14, 15, 30, 41, 48, 53, 55, 56, 57, 63, 69, 84, 93, 94, 100, 142, 149, 150, 157, 163, 164, 165, 171, 172, 175, 176, 183, 280, 305, 312, 313, 315, 316, 421], "coef_": [3, 40, 44, 98, 113, 245, 246, 247, 248, 250, 251], "89376929e": 3, "02": [3, 30, 33, 36, 44, 45, 53, 59, 62, 73, 78, 82, 109, 111, 161, 193, 252, 308, 309], "87167388e": 3, "23027038e": 3, "88747466e": 3, "18696596e": 3, "10743741e": 3, "69998346e": 3, "50956105e": 3, "94204097e": 3, "51224532e": 3, "08511230e": 3, "28797632e": 3, "54677526e": 3, "78907452e": 3, "69169228e": 3, "28086987e": 3, "6": [3, 4, 6, 20, 21, 22, 23, 24, 30, 31, 33, 34, 36, 38, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 58, 59, 62, 63, 64, 66, 72, 80, 91, 94, 96, 99, 100, 102, 103, 104, 106, 107, 111, 115, 118, 120, 127, 129, 131, 134, 135, 136, 142, 143, 144, 154, 161, 162, 163, 165, 175, 189, 207, 210, 213, 234, 252, 308, 309, 313, 316, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 378, 384, 385, 392, 394, 422], "56427282e": 3, "03": [3, 30, 32, 33, 41, 44, 45, 53, 56, 59, 73, 91, 96, 109, 111, 161, 282, 308, 309, 328], "7": [3, 6, 7, 15, 17, 24, 25, 27, 33, 36, 37, 42, 43, 44, 45, 48, 49, 52, 53, 54, 57, 58, 59, 62, 63, 64, 66, 70, 71, 72, 73, 82, 86, 91, 94, 96, 102, 103, 105, 107, 109, 111, 114, 115, 118, 120, 122, 124, 129, 131, 134, 135, 137, 142, 144, 162, 174, 175, 189, 193, 195, 196, 201, 205, 257, 259, 260, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 365, 370, 374, 376, 377, 379, 381, 382, 386, 388, 391, 397, 421], "65761439e": 3, "67105288e": 3, "8": [3, 6, 7, 9, 12, 14, 19, 24, 27, 31, 33, 34, 36, 38, 40, 42, 43, 45, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 66, 68, 72, 73, 76, 78, 79, 81, 82, 84, 86, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 103, 104, 106, 107, 109, 111, 114, 118, 122, 127, 135, 137, 139, 145, 153, 154, 162, 194, 198, 204, 213, 215, 224, 226, 233, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 250, 251, 252, 253, 267, 280, 284, 289, 308, 311, 312, 313, 314, 315, 316, 317, 318, 321, 324, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 390, 392, 401, 402, 404], "02143010e": 3, "29514730e": 3, "17594944e": 3, "36991862e": 3, "41325818e": 3, "59875563e": 3, "22602935e": 3, "77309416e": 3, "22196645e": 3, "53196028e": 3, "76046375e": 3, "14300251e": 3, "14226211e": 3, "03670044e": 3, "89275333e": 3, "89029952e": 3, "35114316e": 3, "21396020e": 3, "73143739e": 3, "37415577e": 3, "41274741e": 3, "81648743e": 3, "65405884e": 3, "70784953e": 3, "56843319e": 3, "21663300e": 3, "47673613e": 3, "13275061e": 3, "60954069e": 3, "52761075e": 3, "02913868e": 3, "28104825e": 3, "08009456e": 3, "09956236e": 3, "72429680e": 3, "77395496e": 3, "03857883e": 3, "38236372e": 3, "48881058e": 3, "43028646e": 3, "47419210e": 3, "01": [3, 6, 7, 12, 27, 30, 32, 33, 36, 42, 45, 48, 51, 53, 55, 58, 59, 61, 71, 73, 82, 96, 99, 100, 101, 108, 109, 111, 183, 195, 199, 267, 270, 274, 305, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "34042931e": 3, "87115201e": 3, "65860353e": 3, "07602464e": 3, "22035004e": 3, "95635215e": 3, "22092248e": 3, "04054014e": 3, "15346315e": 3, "12248714e": 3, "93776907e": 3, "30542048e": 3, "42975674e": 3, "23065569e": 3, "88147318e": 3, "69390595e": 3, "78947583e": 3, "00276397e": 3, "99186653e": 3, "52170946e": 3, "06156342e": 3, "31945951e": 3, "21508170e": 3, "23347999e": 3, "42561428e": 3, "53122938e": 3, "98227050e": 3, "32638306e": 3, "55124202e": 3, "41589042e": 3, "79199730e": 3, "80910968e": 3, "70158977e": 3, "71452141e": 3, "98950709e": 3, "20162491e": 3, "35448254e": 3, "37626701e": 3, "04260879e": 3, "68460615e": 3, "19387846e": 3, "94178865e": 3, "07296953e": 3, "48931488e": 3, "43559268e": 3, "09027009e": 3, "67697994e": 3, "73787429e": 3, "96432194e": 3, "09420986e": 3, "57927075e": 3, "16719154e": 3, "00106770e": 3, "40260964e": 3, "82612059e": 3, "12100760e": 3, "45402566e": 3, "32178382e": 3, "49996709e": 3, "47544690e": 3, "56644261e": 3, "83881704e": 3, "19958434e": 3, "72173745e": 3, "25525334e": 3, "58655636e": 3, "79165691e": 3, "51835669e": 3, "31721295e": 3, "35332895e": 3, "76993619e": 3, "40831440e": 3, "20590395e": 3, "35709516e": 3, "68303209e": 3, "92569936e": 3, "24492820e": 3, "30213456e": 3, "00013902e": 3, "17135037e": 3, "92631504e": 3, "33222554e": 3, "80299847e": 3, "75293173e": 3, "17803892e": 3, "09941069e": 3, "43033400e": 3, "06832053e": 3, "84813550e": 3, "71509274e": 3, "72568257e": 3, "76642622e": 3, "09077943e": 3, "04": [3, 27, 30, 32, 33, 44, 45, 53, 96, 111, 163, 199, 285, 308, 309, 404, 405], "00768947e": 3, "53995741e": 3, "25605968e": 3, "82603904e": 3, "50555751e": 3, "61202357e": 3, "16488317e": 3, "95405336e": 3, "57883748e": 3, "89306497e": 3, "82973239e": 3, "23920367e": 3, "13673531e": 3, "68751159e": 3, "66514702e": 3, "35521922e": 3, "80213200e": 3, "46410012e": 3, "53244981e": 3, "67292651e": 3, "62260043e": 3, "86831191e": 3, "39667420e": 3, "21719012e": 3, "73612424e": 3, "01697785e": 3, "17096675e": 3, "91413049e": 3, "37777161e": 3, "84697898e": 3, "22620652e": 3, "82637836e": 3, "13780657e": 3, "80790113e": 3, "79688649e": 3, "78902806e": 3, "11431326e": 3, "65019862e": 3, "89088769e": 3, "42850121e": 3, "22347053e": 3, "92870970e": 3, "89845166e": 3, "39533433e": 3, "65278206e": 3, "65323920e": 3, "58041434e": 3, "93380653e": 3, "13630858e": 3, "09405830e": 3, "50178343e": 3, "38817135e": 3, "12624725e": 3, "41483580e": 3, "10216860e": 3, "33810895e": 3, "12339305e": 3, "37423681e": 3, "13075392e": 3, "64226078e": 3, "22399117e": 3, "31920722e": 3, "98654988e": 3, "29727783e": 3, "28090959e": 3, "89710101e": 3, "13475190e": 3, "28714444e": 3, "71051371e": 3, "34907802e": 3, "04393575e": 3, "26795627e": 3, "71216534e": 3, "29126366e": 3, "33451502e": 3, "77913548e": 3, "74666540e": 3, "76490739e": 3, "38275230e": 3, "28051366e": 3, "78033965e": 3, "32696509e": 3, "22688839e": 3, "28029108e": 3, "57414631e": 3, "03623247e": 3, "90249278e": 3, "15035176e": 3, "81419938e": 3, "12305926e": 3, "17432817e": 3, "23480095e": 3, "54788247e": 3, "73679645e": 3, "53965513e": 3, "06521765e": 3, "21984686e": 3, "98727324e": 3, "85519518e": 3, "05702403e": 3, "02838251e": 3, "10050155e": 3, "42459134e": 3, "93849751e": 3, "01770600e": 3, "09407777e": 3, "49253558e": 3, "92749367e": 3, "05310478e": 3, "07539982e": 3, "84045339e": 3, "48728020e": 3, "00654660e": 3, "63085761e": 3, "64685898e": 3, "90209439e": 3, "04858165e": 3, "68079919e": 3, "36718757e": 3, "08855289e": 3, "10242427e": 3, "41964495e": 3, "16497002e": 3, "98671285e": 3, "61629114e": 3, "96234281e": 3, "03900006e": 3, "56493913e": 3, "98920364e": 3, "13038348e": 3, "21952385e": 3, "14991065e": 3, "31276592e": 3, "67255766e": 3, "14427790e": 3, "67110379e": 3, "28702871e": 3, "20150528e": 3, "68523163e": 3, "25602761e": 3, "04616644e": 3, "10342164e": 3, "85357229e": 3, "81664723e": 3, "48434054e": 3, "18823671e": 3, "18499205e": 3, "10845340e": 3, "11778498e": 3, "63470251e": 3, "25916531e": 3, "12227922e": 3, "57649202e": 3, "70217241e": 3, "32373668e": 3, "06447204e": 3, "23386173e": 3, "27355881e": 3, "33871967e": 3, "75530669e": 3, "88832391e": 3, "45132471e": 3, "03299245e": 3, "16784758e": 3, "32226253e": 3, "17562712e": 3, "40062819e": 3, "31131172e": 3, "17557073e": 3, "75889178e": 3, "18128842e": 3, "15887173e": 3, "34028105e": 3, "22783198e": 3, "00229752e": 3, "74914665e": 3, "12758676e": 3, "98717243e": 3, "04068318e": 3, "65059697e": 3, "03003639e": 3, "05706073e": 3, "80743622e": 3, "75451989e": 3, "72590974e": 3, "00662591e": 3, "46108765e": 3, "46869640e": 3, "13410708e": 3, "81704668e": 3, "40978365e": 3, "14637938e": 3, "63834504e": 3, "66533126e": 3, "15669342e": 3, "45093371e": 3, "35866888e": 3, "34598333e": 3, "81060572e": 3, "15344271e": 3, "39361238e": 3, "07246113e": 3, "15470132e": 3, "15424790e": 3, "88767485e": 3, "60262973e": 3, "09703015e": 3, "29171352e": 3, "59462355e": 3, "60401562e": 3, "64627560e": 3, "12882167e": 3, "17267525e": 3, "51637240e": 3, "82885915e": 3, "42549691e": 3, "47013228e": 3, "63034034e": 3, "17303371e": 3, "24180969e": 3, "17987865e": 3, "85681403e": 3, "23640472e": 3, "86600911e": 3, "54629284e": 3, "50537296e": 3, "20594062e": 3, "19791073e": 3, "59526247e": 3, "12133472e": 3, "93191297e": 3, "54342470e": 3, "23478156e": 3, "03926809e": 3, "37294528e": 3, "82792647e": 3, "98744615e": 3, "66894839e": 3, "23292243e": 3, "10332177e": 3, "18106647e": 3, "18719695e": 3, "63537763e": 3, "05280467e": 3, "84618266e": 3, "36038407e": 3, "65210287e": 3, "49397998e": 3, "49353761e": 3, "11599068e": 3, "69104340e": 3, "00058628e": 3, "99014307e": 3, "01872163e": 3, "09866728e": 3, "11779534e": 3, "72052321e": 3, "16426194e": 3, "55502000e": 3, "27699615e": 3, "95493714e": 3, "48736314e": 3, "19936402e": 3, "88665637e": 3, "61421198e": 3, "77020905e": 3, "90073886e": 3, "58286892e": 3, "31739372e": 3, "24913671e": 3, "36175819e": 3, "07356740e": 3, "08862059e": 3, "12811588e": 3, "63143606e": 3, "04804292e": 3, "07013899e": 3, "89177425e": 3, "71611040e": 3, "13383560e": 3, "10363749e": 3, "23260316e": 3, "50403321e": 3, "85904796e": 3, "04965615e": 3, "41704990e": 3, "18519578e": 3, "83203605e": 3, "82245088e": 3, "17677505e": 3, "03260368e": 3, "09184952e": 3, "23390791e": 3, "19385380e": 3, "53770367e": 3, "21212395e": 3, "55620076e": 3, "93483882e": 3, "92528109e": 3, "76694808e": 3, "67992070e": 3, "76553511e": 3, "38162917e": 3, "60399268e": 3, "50400704e": 3, "27425137e": 3, "29243500e": 3, "06664857e": 3, "81937927e": 3, "77511981e": 3, "64243392e": 3, "coeffici": [3, 6, 23, 39, 40, 44, 51, 98, 99, 130, 146, 149, 150, 156, 157, 158, 162, 163, 166, 169, 181, 183, 250, 251, 256, 258, 261, 267, 276, 280, 402], "voxel": [3, 15, 25, 28, 33, 36, 37, 39, 40, 41, 44, 45, 46, 49, 50, 59, 66, 69, 70, 74, 79, 81, 82, 84, 87, 89, 90, 92, 98, 100, 102, 105, 108, 110, 111, 113, 121, 124, 127, 128, 129, 135, 144, 146, 149, 153, 154, 156, 158, 159, 160, 162, 165, 166, 167, 169, 170, 171, 174, 176, 197, 198, 205, 210, 214, 215, 228, 246, 249, 250, 251, 252, 253, 255, 262, 263, 267, 276, 280, 282, 283, 284, 285, 287, 289, 290, 291, 300, 301, 304, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 323, 325, 328, 341, 356, 359, 364, 367, 372, 378, 383, 389, 390, 391, 392, 393, 394, 398, 399, 400, 401, 402, 408, 421, 423], "464": [3, 33, 98], "get": [3, 6, 14, 22, 33, 35, 40, 41, 51, 52, 56, 58, 62, 66, 68, 69, 71, 75, 78, 81, 86, 88, 100, 101, 104, 108, 114, 129, 134, 149, 151, 154, 155, 156, 161, 163, 165, 168, 170, 176, 181, 182, 183, 191, 197, 198, 200, 201, 226, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 259, 260, 267, 280, 282, 290, 295, 299, 311, 312, 313, 314, 315, 316, 317, 318, 328, 329, 331, 332, 359, 389, 390, 391, 392, 400, 422], "coef_img_": [3, 29, 30, 31, 39, 42, 43, 156, 176, 245, 246, 247, 248, 250, 251], "coef_img": [3, 30, 43, 113], "niftiimag": [3, 151, 165, 174, 175], "save": [3, 6, 9, 14, 23, 29, 42, 43, 48, 49, 50, 51, 61, 66, 72, 86, 91, 92, 94, 98, 99, 100, 103, 107, 114, 135, 144, 149, 154, 163, 174, 175, 176, 224, 226, 250, 251, 260, 267, 280, 307, 312, 313, 315, 316, 317, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 400, 402, 423], "to_filenam": [3, 4, 6, 29, 48, 49, 55, 64, 86, 94, 175], "haxby_svc_weight": 3, "titl": [3, 6, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 26, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 68, 69, 71, 75, 76, 77, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 98, 100, 101, 102, 103, 105, 106, 107, 108, 113, 137, 138, 143, 146, 147, 149, 154, 156, 164, 172, 176, 267, 280, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 400, 402, 421], "dim": [3, 21, 23, 29, 47, 56, 91, 125, 127, 131, 149, 156, 255, 257, 259, 260, 363, 376, 377, 378, 385], "doe": [3, 6, 29, 49, 66, 68, 75, 102, 113, 114, 124, 133, 137, 146, 149, 156, 157, 161, 163, 164, 165, 166, 171, 176, 191, 201, 213, 256, 258, 261, 270, 291, 303, 305, 307, 324, 332, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 389, 405, 421], "than": [3, 4, 6, 15, 31, 32, 35, 36, 39, 40, 41, 42, 43, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 64, 66, 67, 69, 70, 77, 79, 81, 86, 88, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 112, 113, 114, 124, 127, 128, 129, 130, 131, 133, 137, 142, 144, 149, 150, 153, 155, 156, 157, 158, 159, 161, 163, 164, 166, 169, 172, 174, 175, 176, 197, 198, 224, 226, 230, 245, 246, 247, 248, 252, 253, 267, 276, 282, 283, 284, 291, 296, 304, 305, 308, 309, 311, 313, 314, 316, 317, 328, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 359, 364, 365, 374, 383, 384, 386, 388, 392, 401, 403, 405, 408], "answer": [3, 422], "question": [3, 51, 65, 66, 99, 153, 171, 172, 176, 210, 422], "random": [3, 40, 41, 44, 51, 55, 63, 98, 99, 102, 129, 141, 149, 153, 154, 155, 156, 163, 164, 194, 252, 253, 257, 259, 260, 267, 276, 282, 328, 389, 390, 392, 394], "compar": [3, 6, 30, 31, 33, 35, 39, 41, 46, 51, 56, 58, 59, 64, 66, 77, 79, 80, 83, 86, 94, 96, 99, 110, 111, 114, 116, 137, 149, 151, 152, 155, 156, 157, 158, 159, 160, 163, 165, 166, 169, 176, 181, 183, 196, 199, 205, 210, 296, 297, 311, 312, 313, 314, 315, 316, 317, 318, 360, 361, 365, 372, 378, 383, 404, 421, 423], "dummi": [3, 99, 142, 149, 156, 157, 159, 164, 245, 246, 247, 248, 274], "replac": [3, 4, 11, 30, 32, 35, 36, 40, 41, 42, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 70, 77, 79, 87, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 120, 121, 128, 129, 134, 137, 140, 141, 142, 143, 144, 149, 159, 163, 164, 172, 228, 285, 302, 308, 319, 322, 404], "dummy_decod": 3, "dummy_classifi": [3, 32, 245, 247], "simpli": [3, 64, 66, 67, 68, 69, 89, 101, 103, 105, 108, 114, 166, 176, 193, 284, 296, 302, 376, 377, 378], "mean": [3, 6, 14, 15, 16, 18, 21, 22, 23, 25, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 49, 50, 51, 55, 56, 58, 61, 64, 66, 67, 70, 71, 77, 83, 89, 91, 92, 94, 95, 96, 98, 102, 103, 104, 110, 114, 127, 131, 134, 137, 141, 143, 149, 150, 153, 154, 156, 163, 164, 166, 169, 171, 175, 176, 181, 182, 183, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 259, 260, 267, 275, 276, 280, 282, 283, 284, 286, 291, 296, 297, 308, 309, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 328, 363, 376, 377, 378, 379, 383, 385, 389, 390, 391, 392, 394, 395, 398, 399, 402, 404, 405], "over": [3, 20, 48, 49, 51, 69, 71, 89, 113, 121, 140, 141, 149, 155, 156, 161, 162, 163, 168, 172, 175, 196, 253, 267, 293, 297, 308, 329, 331, 332, 376, 380, 408, 421], "38888888888888895": 3, "6111111111111112": [3, 29], "anova": [3, 28, 35, 42, 45, 105, 106, 110, 129, 149, 160, 161, 162, 169, 176, 213, 245, 246, 247, 248, 250, 251, 292, 378, 383, 385, 423], "hous": [3, 18, 28, 32, 33, 45, 94, 97, 109, 110, 121, 149, 161, 170, 174, 175, 213, 245, 247, 249, 290, 292, 295, 297, 298, 311, 317, 328, 356, 371, 375, 378, 383, 385], "For": [3, 6, 9, 14, 15, 19, 23, 24, 29, 30, 32, 34, 35, 36, 40, 41, 48, 50, 51, 63, 64, 66, 67, 69, 71, 72, 79, 80, 86, 89, 98, 100, 103, 105, 108, 113, 114, 134, 144, 149, 150, 151, 153, 155, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 169, 171, 174, 175, 176, 181, 188, 191, 192, 193, 197, 198, 200, 201, 202, 204, 205, 214, 224, 226, 228, 239, 244, 245, 246, 247, 248, 250, 251, 252, 253, 257, 258, 259, 260, 267, 274, 280, 282, 297, 305, 308, 309, 313, 315, 316, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 363, 368, 371, 373, 376, 377, 378, 379, 380, 381, 382, 390, 392, 393, 394, 400, 401, 402, 403, 408, 421, 422], "precomput": [3, 251], "frem": [3, 28, 45, 110, 111, 121, 140, 149, 156, 157, 160, 162, 169, 170, 213, 222, 247, 248, 251, 292, 297, 375, 378, 383, 423], "fast": [3, 31, 39, 48, 49, 65, 66, 72, 100, 111, 137, 140, 149, 153, 155, 156, 157, 160, 163, 164, 169, 170, 219, 226, 247, 248, 253, 302, 390, 391, 397, 423], "ensembl": [3, 31, 39, 42, 111, 156, 157, 160, 162, 169, 170, 247, 248, 423], "regular": [3, 31, 39, 56, 66, 91, 94, 111, 114, 140, 149, 156, 157, 160, 162, 163, 169, 170, 171, 175, 182, 183, 185, 247, 248, 250, 251, 295, 422, 423], "robust": [3, 31, 39, 94, 111, 139, 149, 154, 156, 160, 169, 247, 248, 308, 309, 423], "spacenet": [3, 127, 149, 156, 157, 158, 160, 169, 250, 251, 423], "spatial": [3, 6, 31, 39, 43, 46, 49, 50, 54, 59, 69, 86, 94, 95, 98, 104, 108, 110, 111, 121, 140, 144, 149, 153, 155, 156, 159, 160, 166, 169, 170, 173, 176, 191, 194, 199, 201, 210, 221, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 282, 293, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 376, 378, 383, 390, 392, 394, 423], "44": [3, 7, 33, 36, 41, 42, 43, 44, 45, 72, 87, 91, 96, 102, 111, 118, 149, 282, 328], "005": [3, 7, 41, 111, 158, 247, 248], "916": [3, 18, 29, 34, 36, 37, 62, 73, 98], "plot_decoding_tutori": [3, 7, 137, 149, 156, 164], "download": [4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 124, 125, 127, 128, 130, 134, 137, 140, 141, 143, 149, 150, 151, 153, 156, 164, 171, 178, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 244, 423], "exist": [4, 6, 20, 48, 64, 72, 102, 154, 161, 164, 175, 181, 182, 183, 224, 226, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 294, 311, 312, 313, 314, 315, 316, 317, 318, 375, 389, 390, 391, 392, 421], "ship": [4, 12, 94, 134, 149, 421], "mni152_file_path": [4, 171], "variabl": [4, 6, 14, 39, 42, 43, 44, 56, 69, 75, 77, 94, 100, 101, 108, 111, 126, 144, 146, 149, 151, 156, 157, 158, 160, 161, 163, 164, 166, 169, 174, 176, 190, 235, 245, 246, 247, 248, 249, 250, 251, 254, 258, 267, 280, 296, 308], "path": [4, 6, 15, 62, 64, 72, 86, 94, 101, 108, 112, 113, 114, 126, 137, 143, 145, 146, 149, 156, 162, 163, 164, 172, 173, 176, 182, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 242, 245, 246, 247, 248, 250, 251, 252, 253, 267, 270, 280, 286, 295, 305, 306, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 342, 390, 391, 392, 400, 404, 406, 407, 408, 423], "mni152": [4, 93, 120, 143, 149, 166, 192, 194, 201, 205, 214, 215, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 250, 251, 252, 253, 267, 280, 292, 314, 317, 321, 324, 376, 377, 378, 385, 390], "templat": [4, 16, 22, 23, 48, 69, 75, 83, 96, 108, 110, 111, 120, 122, 127, 132, 137, 140, 143, 146, 149, 154, 166, 169, 171, 175, 176, 191, 193, 205, 214, 215, 228, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 252, 253, 267, 280, 295, 300, 301, 309, 314, 317, 321, 324, 363, 376, 377, 378, 383, 385, 390, 400], "mni_icbm152_t1_tal_nlin_sym_09a_convert": [4, 171], "quickli": [4, 33, 61, 62, 64, 75, 150, 153, 163, 164, 172], "plot_img": [4, 6, 36, 137, 144, 149, 171, 339, 341, 344, 346, 348, 350, 352, 354, 356, 421], "0x7f34e8b15eb0": 4, "veri": [4, 30, 31, 32, 35, 36, 39, 40, 42, 44, 49, 54, 66, 75, 76, 77, 79, 86, 94, 103, 113, 137, 149, 150, 151, 153, 156, 157, 158, 159, 162, 163, 164, 166, 169, 172, 176, 247, 248, 313, 316, 359, 376, 403], "pretti": [4, 103], "simplest": [4, 71, 98, 114, 159, 163, 421], "possibl": [4, 6, 14, 15, 44, 69, 71, 80, 81, 84, 86, 94, 100, 113, 114, 127, 144, 146, 149, 150, 153, 156, 161, 163, 164, 166, 169, 171, 172, 175, 176, 181, 182, 183, 189, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 259, 260, 267, 270, 280, 282, 289, 300, 305, 308, 311, 312, 313, 314, 315, 316, 317, 318, 358, 359, 365, 370, 374, 389, 390, 391, 392, 402, 421], "whole": [4, 6, 14, 42, 48, 50, 70, 89, 94, 111, 114, 143, 147, 149, 161, 162, 164, 165, 170, 175, 176, 194, 214, 224, 226, 236, 239, 245, 246, 247, 248, 252, 253, 314, 317, 321, 324, 328, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 370, 376, 378, 382, 390, 392, 421], "make": [4, 6, 8, 15, 22, 23, 27, 30, 31, 36, 41, 47, 49, 51, 56, 58, 66, 68, 69, 70, 71, 75, 77, 79, 80, 84, 98, 104, 110, 111, 114, 120, 122, 123, 128, 134, 143, 144, 146, 147, 149, 154, 156, 157, 161, 162, 165, 168, 169, 170, 171, 174, 176, 195, 203, 213, 224, 228, 233, 242, 245, 246, 247, 248, 250, 251, 255, 300, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 345, 347, 349, 351, 353, 355, 370, 373, 378, 380, 382, 383, 384, 385, 386, 388, 389, 406, 408, 421, 422], "prettier": 4, "exercis": [4, 171], "own": [4, 6, 49, 58, 100, 112, 114, 156, 159, 164, 215, 423], "noth": [4, 161, 183, 252, 253, 256, 258, 261, 267, 280, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 371, 373, 376, 377, 378, 385], "string": [4, 15, 29, 33, 55, 72, 77, 79, 88, 100, 101, 108, 113, 131, 132, 144, 146, 149, 164, 174, 182, 189, 191, 206, 213, 216, 217, 218, 219, 223, 225, 227, 228, 229, 231, 232, 235, 244, 249, 250, 251, 252, 253, 257, 259, 260, 264, 265, 267, 269, 274, 280, 282, 283, 284, 285, 286, 295, 296, 299, 304, 305, 307, 308, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 363, 364, 365, 366, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 393, 402, 404], "should": [4, 6, 14, 15, 32, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 66, 68, 69, 70, 79, 88, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 114, 130, 131, 141, 144, 145, 149, 154, 155, 156, 157, 159, 163, 164, 166, 171, 172, 176, 181, 182, 183, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 228, 229, 230, 231, 232, 233, 234, 235, 245, 246, 247, 248, 249, 250, 251, 252, 253, 264, 267, 269, 270, 274, 275, 280, 281, 283, 284, 285, 295, 296, 298, 301, 303, 304, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 328, 329, 362, 363, 365, 368, 370, 371, 376, 377, 378, 379, 380, 382, 386, 389, 390, 391, 392, 393, 394, 398, 400, 401, 402, 404, 419, 421, 422], "volum": [4, 8, 27, 31, 32, 36, 39, 43, 54, 56, 61, 64, 69, 79, 87, 91, 100, 111, 113, 120, 131, 134, 142, 149, 161, 162, 169, 170, 171, 174, 191, 193, 196, 213, 223, 228, 245, 246, 247, 248, 250, 251, 252, 253, 267, 289, 297, 300, 301, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 329, 331, 332, 364, 368, 373, 377, 382, 383, 385, 392, 393, 394, 398, 404, 408, 421, 422, 423], "smooth_img": [4, 70, 94, 95, 103, 131, 137, 149, 174, 175, 176], "mm": [4, 15, 33, 37, 55, 84, 87, 91, 95, 134, 149, 154, 175, 196, 201, 209, 267, 280, 308, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 392, 393, 394, 402, 408], "smooth_anat_img": 4, "fwhm": [4, 66, 94, 95, 103, 105, 131, 137, 149, 169, 171, 175, 176, 302], "nibabel": [4, 33, 36, 44, 49, 54, 56, 62, 75, 81, 84, 91, 120, 121, 128, 129, 131, 137, 142, 144, 146, 149, 163, 174, 175, 252, 253, 286, 287, 288, 295, 300, 301, 302, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 390, 392, 393, 394, 398, 399], "nifti1": [4, 33, 36, 49, 54, 56, 75, 81, 91, 137, 149, 302, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 390, 392, 393, 394, 398, 399], "nifti1imag": [4, 33, 36, 40, 43, 44, 48, 49, 54, 56, 75, 81, 84, 91, 129, 130, 132, 137, 149, 154, 174, 195, 197, 198, 200, 201, 204, 215, 222, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 252, 253, 262, 264, 267, 280, 282, 283, 284, 286, 288, 292, 293, 295, 296, 297, 300, 301, 302, 303, 304, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 339, 344, 346, 350, 356, 360, 361, 362, 390, 392, 393, 394, 398, 399], "0x7f34f2d80df0": 4, "0x7f34e8ae1bb0": 4, "could": [4, 6, 36, 49, 58, 66, 69, 70, 79, 85, 86, 93, 100, 105, 113, 114, 124, 140, 144, 145, 149, 156, 159, 161, 163, 164, 166, 171, 176, 255, 377, 408], "more_smooth_anat_img": 4, "0x7f34e8a91790": 4, "ani": [4, 6, 49, 56, 58, 75, 80, 81, 100, 103, 104, 113, 120, 138, 140, 146, 149, 151, 153, 156, 157, 160, 161, 163, 164, 165, 166, 169, 176, 189, 213, 224, 226, 230, 287, 292, 296, 302, 305, 306, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 373, 376, 392, 396, 401, 404, 408, 421, 422, 423], "necessari": [4, 62, 89, 92, 101, 108, 120, 137, 144, 149, 150, 153, 156, 164, 165, 172, 176, 191, 224, 226, 245, 246, 247, 248, 260, 267, 280, 317, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 400], "tool": [4, 8, 10, 11, 20, 23, 27, 32, 36, 48, 49, 79, 86, 87, 94, 100, 104, 110, 113, 127, 146, 149, 152, 157, 164, 165, 168, 170, 171, 173, 174, 176, 177, 179, 213, 242, 297, 339, 341, 344, 346, 348, 350, 352, 354, 356, 363, 368, 370, 377, 378, 383, 385, 412, 421, 422], "755": [4, 7], "256": [4, 33, 41, 84, 141, 149, 196, 205], "plot_nilearn_101": [4, 7], "modul": [5, 19, 26, 32, 34, 35, 36, 40, 41, 42, 47, 50, 51, 52, 53, 54, 55, 56, 58, 61, 87, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 103, 104, 105, 106, 111, 113, 114, 120, 121, 122, 129, 131, 132, 140, 144, 146, 149, 159, 164, 167, 171, 172, 176, 180, 224, 228, 245, 246, 247, 248, 257, 259, 260, 274, 282, 284, 294, 296, 412, 416, 417, 418, 419, 421], "np": [5, 6, 9, 11, 12, 14, 20, 21, 22, 23, 24, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 77, 79, 80, 84, 85, 87, 89, 94, 98, 100, 102, 103, 104, 105, 106, 107, 108, 146, 149, 154, 164, 174, 175, 181, 201, 228, 256, 257, 258, 259, 260, 261, 286, 296, 389, 391], "linspac": [5, 49, 61, 68], "2000": [5, 42, 49, 102, 111, 137, 140, 149, 153, 174, 204], "matplotlib": [5, 6, 8, 9, 11, 18, 24, 25, 27, 30, 32, 35, 38, 40, 41, 42, 43, 44, 48, 49, 51, 52, 54, 55, 56, 57, 58, 61, 62, 63, 65, 66, 68, 70, 72, 78, 79, 80, 84, 91, 94, 99, 100, 101, 102, 105, 106, 110, 118, 124, 129, 131, 132, 134, 137, 139, 144, 145, 149, 151, 156, 175, 313, 316, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 421, 422], "pyplot": [5, 6, 11, 12, 18, 24, 25, 30, 32, 34, 35, 38, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 63, 65, 66, 68, 70, 72, 78, 79, 80, 84, 91, 94, 99, 100, 101, 102, 105, 106, 151, 175, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 368, 369, 370, 371, 373, 374, 376, 377, 378, 379, 382, 383, 421], "scientif": [5, 111, 141, 144, 149, 164, 171, 200, 211, 219, 229, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 368, 370, 371, 377, 378, 379, 381, 382], "plt": [5, 6, 11, 12, 18, 24, 25, 30, 32, 34, 35, 38, 40, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 63, 65, 66, 68, 70, 72, 78, 79, 80, 84, 91, 94, 99, 100, 101, 102, 105, 106, 175, 363, 364, 365, 368, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 385], "co": [5, 24, 84, 111, 165, 204, 233], "line": [5, 9, 14, 21, 24, 48, 51, 91, 156, 163, 164, 228, 285, 384, 404, 408, 422], "line2d": [5, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365], "0x7f34f27c9e20": 5, "200": [5, 7, 33, 36, 41, 42, 43, 44, 94, 102, 103, 105, 111, 181, 193, 201, 221, 250, 251], "plot_python_101": [5, 7], "tutori": [6, 7, 66, 98, 124, 134, 149, 156, 164, 169, 170, 171, 176, 213, 245, 292, 297, 368, 377, 385], "model": [6, 23, 28, 31, 32, 33, 34, 39, 41, 44, 45, 48, 50, 51, 60, 61, 63, 69, 71, 73, 74, 75, 81, 82, 97, 98, 102, 104, 105, 108, 109, 110, 111, 120, 121, 131, 137, 140, 142, 144, 145, 146, 149, 150, 152, 154, 156, 160, 161, 162, 163, 164, 167, 169, 170, 171, 176, 177, 181, 182, 185, 212, 215, 216, 219, 220, 221, 223, 234, 245, 246, 247, 248, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 286, 287, 290, 291, 296, 297, 301, 304, 307, 308, 309, 311, 314, 317, 318, 328, 340, 341, 355, 356, 366, 367, 370, 377, 378, 383, 400, 402, 415, 422, 423], "period": [6, 41, 66, 69, 108, 245, 246, 247, 248, 250, 251, 285, 312, 313, 314, 315, 316, 317, 318, 364, 390, 392, 404], "auditori": [6, 66, 69, 72, 77, 103, 105, 166, 209, 218, 219, 225, 231], "stimul": [6, 72, 156], "versu": [6, 66, 69, 79, 80, 94, 98, 156, 157, 169], "analys": [6, 100, 111, 156, 161, 165, 166, 167, 168, 169, 170, 174, 176, 222, 409, 422], "nativ": [6, 60, 73, 110, 121, 130, 149, 165, 232, 267, 274, 286, 294, 297, 300, 318, 378, 383], "scan": [6, 23, 33, 36, 55, 58, 63, 65, 66, 68, 94, 100, 111, 142, 149, 153, 161, 169, 174, 219, 252, 253, 267, 269, 271, 272, 273, 274, 277, 278, 279, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 364, 390, 392, 395, 396, 398, 404], "preprocess": [6, 11, 23, 29, 34, 37, 40, 41, 44, 89, 92, 99, 101, 104, 108, 111, 112, 121, 129, 149, 154, 155, 161, 162, 166, 169, 176, 189, 190, 210, 228, 234, 267, 270, 285, 306, 308, 311, 312, 313, 314, 315, 316, 317, 318, 392, 404, 412, 423], "sensit": [6, 40, 48, 56, 111, 166, 169, 285, 309, 328, 404], "would": [6, 9, 14, 42, 50, 58, 64, 66, 67, 75, 78, 103, 114, 142, 146, 147, 149, 156, 163, 164, 165, 166, 172, 244, 245, 246, 247, 248, 250, 251, 253, 267, 269, 270, 274, 280, 282, 305, 319, 324, 364], "like": [6, 10, 11, 16, 34, 36, 40, 47, 49, 54, 56, 66, 79, 81, 86, 89, 91, 92, 94, 100, 114, 137, 141, 144, 145, 146, 149, 162, 163, 164, 165, 166, 168, 169, 172, 173, 175, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 262, 267, 269, 270, 280, 282, 283, 284, 285, 286, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 363, 364, 368, 370, 371, 373, 374, 376, 377, 378, 379, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 408, 410, 421, 423], "obtain": [6, 15, 22, 42, 43, 49, 54, 58, 63, 66, 69, 75, 77, 91, 94, 102, 105, 144, 149, 150, 151, 153, 155, 156, 158, 161, 163, 166, 169, 176, 183, 192, 194, 202, 214, 219, 236, 237, 240, 244, 250, 251, 284, 289, 300, 304, 315, 316, 318, 328, 342, 369, 392], "correct": [6, 11, 42, 43, 47, 48, 50, 51, 54, 56, 75, 77, 79, 81, 92, 101, 102, 105, 106, 111, 120, 121, 137, 140, 146, 149, 150, 161, 166, 167, 169, 172, 229, 243, 245, 246, 247, 248, 250, 251, 282, 283, 308, 309, 328, 364, 405, 423], "normal": [6, 24, 31, 37, 44, 55, 58, 69, 70, 101, 104, 108, 113, 124, 149, 156, 163, 164, 165, 166, 169, 182, 185, 191, 217, 228, 259, 260, 408], "smooth": [6, 29, 34, 42, 44, 48, 49, 55, 70, 75, 81, 83, 94, 96, 101, 105, 110, 111, 130, 131, 149, 153, 155, 156, 157, 163, 171, 173, 174, 210, 245, 246, 247, 248, 252, 253, 267, 280, 282, 297, 302, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 328, 368, 379, 383, 389, 390, 392, 394, 423], "conduct": [6, 32, 114, 166], "fil": [6, 231, 232], "geraint": 6, "ree": 6, "under": [6, 9, 102, 146, 149, 156, 157, 161, 162, 163, 164, 165, 166, 169, 172, 249, 289, 300, 301, 306, 321, 324, 328], "direct": [6, 15, 40, 51, 94, 98, 111, 131, 140, 149, 151, 152, 164, 172, 176, 196, 202, 228, 234, 245, 246, 267, 280, 302, 304, 305, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 345, 347, 348, 349, 351, 352, 353, 354, 355, 358, 359, 363, 365, 368, 370, 371, 374, 376, 377, 378, 393, 402, 421, 423], "karl": 6, "friston": [6, 111, 285, 404], "method": [6, 14, 15, 26, 31, 36, 39, 44, 46, 48, 58, 59, 86, 89, 91, 92, 94, 100, 105, 110, 111, 112, 114, 121, 122, 126, 130, 134, 137, 140, 141, 142, 144, 146, 149, 150, 151, 153, 157, 158, 162, 163, 164, 169, 170, 171, 174, 175, 176, 181, 182, 183, 193, 204, 210, 221, 224, 226, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 262, 267, 280, 282, 287, 290, 291, 292, 297, 300, 301, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 368, 377, 384, 386, 387, 388, 389, 390, 391, 392, 400, 404, 405, 421, 423], "develop": [6, 47, 55, 56, 85, 89, 91, 92, 111, 132, 137, 149, 150, 151, 153, 155, 163, 164, 171, 172, 183, 204, 210, 364], "spm": [6, 10, 11, 36, 49, 61, 66, 68, 71, 79, 86, 94, 111, 145, 146, 149, 160, 165, 169, 174, 191, 231, 232, 267, 269, 274, 277, 278, 279, 296, 423], "accord": [6, 41, 44, 69, 94, 100, 108, 120, 129, 130, 131, 134, 140, 142, 146, 149, 154, 161, 164, 182, 189, 201, 243, 245, 246, 247, 248, 250, 251, 254, 285, 305, 328, 373, 374, 379, 381, 382, 386, 391, 392, 403, 404, 421], "96": [6, 30, 32, 33, 36, 42, 43, 44, 49, 54, 72, 84, 102], "tr": [6, 11, 23, 25, 33, 63, 68, 71, 108, 121, 133, 145, 149, 166, 169, 175, 210, 271, 272, 273, 277, 278, 279], "altern": [6, 9, 16, 20, 22, 52, 54, 58, 66, 152, 153, 161, 169, 176, 257, 259, 260, 328, 423], "42": [6, 9, 24, 27, 33, 36, 42, 43, 53, 59, 62, 91, 92, 100, 102, 104, 421], "block": [6, 33, 51, 56, 58, 63, 100, 101, 112, 156, 163, 175, 375, 410], "bi": 6, "syllab": 6, "word": [6, 14, 77, 94, 103, 105, 114, 156, 157, 164, 224, 226], "binaur": 6, "60": [6, 15, 33, 36, 40, 41, 42, 43, 44, 63, 99, 102, 105, 111, 223, 421], "fm00223_004": 6, "2t": 6, "siemen": 6, "magnetom": 6, "vision": 6, "system": [6, 23, 42, 43, 111, 156, 163, 172, 174, 192, 233, 235], "64": [6, 10, 11, 19, 21, 33, 34, 36, 42, 43, 44, 47, 49, 66, 79, 84, 86, 94, 102, 141, 146, 149, 174, 189, 192, 193, 196], "contigu": [6, 153, 163, 328], "64x64x64": 6, "3mm": 6, "took": [6, 43, 48, 92], "05": [6, 12, 27, 30, 32, 33, 44, 51, 53, 75, 76, 77, 79, 81, 99, 166, 190, 191, 194, 199, 200, 201, 204, 205, 228, 231, 232, 234, 257, 259, 260, 262], "repeat": [6, 58, 66, 68, 156, 166, 271, 272, 273, 277, 278, 279], "arbitrarili": [6, 251], "subject_data": [6, 70, 71, 165], "abid": [6, 111, 128, 149, 164, 189], "bid": [6, 60, 72, 73, 97, 100, 109, 110, 120, 137, 140, 142, 144, 146, 147, 149, 165, 169, 206, 211, 216, 229, 230, 243, 244, 267, 270, 280, 308, 309, 310, 317, 366, 370, 372, 383, 400, 401, 402], "organ": [6, 58, 111, 124, 137, 143, 145, 149, 164, 169, 171, 201, 205, 208, 282, 309, 328, 344, 407, 408, 422], "fetch_spm_auditori": [6, 70], "sep": [6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 72, 94, 102, 154, 174, 329, 331, 332], "n": [6, 26, 41, 42, 49, 51, 56, 57, 58, 62, 70, 71, 77, 79, 80, 84, 88, 91, 94, 99, 100, 102, 103, 105, 106, 107, 111, 115, 116, 118, 119, 122, 124, 127, 149, 157, 163, 164, 166, 191, 200, 207, 210, 211, 221, 229, 252, 253, 254, 258, 259, 260, 267, 276, 308, 309, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 374, 392, 395, 396, 404, 422], "spm_auditori": [6, 231], "sub001": [6, 231, 232], "fm00223": 6, "fm00223_005": 6, "fm00223_006": 6, "fm00223_007": 6, "fm00223_008": 6, "anatomi": [6, 42, 69, 75, 205], "plot_anat": [6, 15, 18, 50, 144, 149, 154, 378, 421], "cbar_tick_format": [6, 25, 141, 144, 149, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 368, 370, 371, 377, 378, 379, 381, 382], "0x7f34e67fc1f0": 6, "next": [6, 14, 54, 55, 58, 63, 64, 65, 66, 69, 70, 75, 78, 79, 80, 81, 108, 132, 135, 144, 149, 151, 162, 163, 164, 166, 172], "concaten": [6, 37, 47, 49, 53, 57, 100, 150, 175, 286, 292, 308, 392], "averag": [6, 9, 24, 30, 37, 49, 51, 70, 94, 111, 140, 143, 149, 153, 157, 158, 168, 169, 214, 222, 233, 239, 245, 246, 297, 302, 308, 375, 379, 390, 408], "activ": [6, 14, 15, 16, 30, 32, 40, 41, 49, 64, 66, 69, 70, 71, 76, 77, 79, 80, 81, 100, 108, 111, 113, 150, 151, 154, 155, 156, 160, 161, 163, 164, 165, 166, 168, 169, 171, 172, 176, 183, 191, 199, 202, 221, 222, 223, 242, 262, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 362, 392, 394, 422], "fmri_img": [6, 34, 36, 37, 64, 65, 66, 67, 69, 70, 71, 94, 108, 165], "must": [6, 34, 72, 94, 146, 149, 156, 157, 159, 161, 163, 164, 165, 166, 172, 174, 176, 182, 183, 185, 191, 213, 245, 246, 247, 248, 249, 250, 251, 252, 254, 258, 267, 280, 281, 282, 285, 291, 297, 300, 302, 307, 308, 311, 312, 314, 315, 317, 320, 322, 323, 324, 325, 326, 327, 328, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 369, 376, 378, 379, 380, 381, 382, 384, 386, 388, 390, 395, 398, 399, 401, 402, 404, 405, 408, 421], "descript": [6, 58, 112, 114, 120, 140, 144, 147, 149, 164, 172, 174, 175, 189, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 221, 224, 225, 226, 227, 234, 269, 282, 285, 289, 297, 302, 303, 309, 328, 423], "typic": [6, 72, 78, 79, 100, 153, 155, 157, 161, 164, 166, 169, 174, 175, 176, 235, 247, 248, 251, 257, 307, 318, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 376, 377, 378, 385, 390, 421], "event": [6, 60, 62, 63, 65, 66, 68, 69, 70, 71, 73, 100, 101, 108, 110, 111, 140, 141, 149, 156, 166, 167, 220, 267, 268, 269, 274, 369, 422, 423], "tsv": [6, 47, 52, 53, 54, 55, 56, 58, 60, 62, 73, 101, 108, 110, 210, 307, 308, 309, 369], "read_tabl": [6, 65, 66, 69, 70, 71], "onset": [6, 33, 63, 65, 66, 68, 72, 100, 140, 149, 165, 232, 267, 268, 269, 271, 272, 273, 274, 277, 278, 279, 369], "durat": [6, 33, 63, 66, 68, 72, 165, 166, 174, 269, 274, 369], "trial_typ": [6, 33, 63, 65, 66, 72, 100, 101, 274], "84": [6, 30, 33, 36, 42, 43, 49, 91, 100, 102, 111, 287, 308], "126": [6, 33, 41, 43, 56, 67, 91, 105, 143, 149], "168": [6, 33, 41, 54, 55, 56, 58, 89, 91, 154], "210": [6, 22, 33, 36, 41, 42, 44, 72, 95, 100, 102, 109, 111, 214, 285, 404], "252": [6, 33, 41], "294": [6, 33, 41, 55, 59], "336": [6, 33, 41], "378": [6, 33], "420": [6, 33, 36, 42, 44, 102], "462": [6, 33], "12": [6, 25, 32, 33, 36, 40, 41, 42, 43, 44, 48, 49, 56, 62, 63, 65, 68, 70, 73, 75, 77, 78, 80, 91, 101, 102, 103, 105, 107, 111, 115, 118, 120, 121, 122, 124, 140, 145, 146, 149, 162, 163, 175, 176, 191, 193, 200, 202, 210, 270, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 392], "504": [6, 33, 62], "13": [6, 11, 27, 33, 36, 42, 43, 44, 47, 50, 51, 52, 54, 56, 59, 62, 71, 77, 87, 91, 92, 96, 102, 103, 107, 111, 115, 121, 122, 149, 153, 161, 193, 194, 202, 209, 228, 254, 258, 315, 316, 328, 395, 396], "546": [6, 33], "14": [6, 16, 18, 23, 27, 30, 33, 36, 41, 42, 43, 48, 55, 56, 59, 62, 69, 70, 73, 77, 91, 102, 103, 105, 111, 116, 118, 127, 129, 130, 131, 134, 137, 149, 161, 195, 201, 381], "588": [6, 33], "15": [6, 23, 24, 27, 30, 33, 36, 42, 43, 44, 48, 49, 51, 61, 62, 66, 67, 72, 73, 77, 78, 81, 82, 84, 91, 94, 102, 103, 105, 107, 111, 115, 119, 130, 134, 144, 147, 149, 191, 203, 315, 316, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 395, 396], "630": [6, 33, 36, 42, 102], "firstlevelmodel": [6, 61, 64, 65, 66, 67, 70, 71, 100, 142, 144, 146, 149, 165, 270, 280, 282, 307, 402], "design": [6, 33, 41, 44, 60, 61, 62, 64, 65, 67, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 101, 105, 108, 110, 111, 121, 140, 141, 142, 144, 149, 156, 159, 163, 164, 166, 167, 168, 169, 219, 254, 257, 258, 259, 260, 265, 267, 268, 274, 276, 280, 281, 282, 283, 290, 296, 307, 310, 366, 367, 378, 383, 402, 423], "matrix": [6, 22, 33, 37, 40, 41, 44, 47, 50, 51, 53, 61, 62, 63, 64, 66, 69, 70, 71, 74, 75, 76, 77, 79, 80, 81, 82, 84, 91, 92, 100, 101, 103, 105, 108, 110, 120, 121, 132, 137, 140, 149, 153, 154, 156, 157, 163, 166, 167, 168, 169, 170, 171, 174, 175, 176, 181, 182, 183, 184, 185, 186, 188, 224, 226, 245, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 265, 267, 268, 274, 276, 280, 281, 282, 287, 297, 298, 300, 303, 307, 310, 311, 314, 317, 320, 322, 323, 325, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 366, 367, 375, 389, 390, 391, 402, 423], "first_level": [6, 33, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 78, 100, 101, 108, 142, 144, 146, 149, 165, 369, 402], "level": [6, 9, 14, 15, 18, 33, 39, 48, 49, 51, 56, 63, 70, 71, 73, 75, 82, 97, 104, 105, 109, 111, 120, 121, 140, 141, 146, 149, 152, 153, 157, 160, 163, 166, 167, 169, 172, 174, 180, 181, 182, 183, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 259, 260, 262, 263, 267, 270, 274, 276, 280, 281, 282, 283, 285, 290, 291, 296, 301, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 326, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 365, 366, 367, 370, 372, 376, 377, 378, 379, 380, 381, 382, 383, 385, 389, 390, 391, 392, 397, 400, 401, 402, 404, 408, 421, 423], "t_r": [6, 11, 33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 62, 65, 66, 69, 70, 89, 91, 92, 99, 100, 108, 134, 145, 149, 176, 245, 246, 247, 248, 250, 251, 252, 253, 267, 269, 270, 274, 285, 312, 313, 314, 315, 316, 317, 318, 364, 390, 392, 404], "noise_model": [6, 33, 66, 267, 270, 276], "ar1": [6, 33, 66, 267, 270, 276], "covari": [6, 42, 46, 57, 58, 59, 61, 64, 69, 102, 110, 111, 130, 149, 151, 152, 154, 170, 181, 182, 183, 184, 185, 199, 210, 221, 254, 256, 257, 258, 259, 260, 311, 316, 328, 361, 365, 375, 383, 384, 423], "lag": [6, 47, 65, 66], "depend": [6, 14, 15, 39, 66, 89, 95, 100, 102, 105, 111, 120, 124, 129, 134, 137, 149, 157, 161, 163, 164, 166, 169, 172, 174, 189, 193, 194, 197, 198, 202, 205, 210, 221, 245, 246, 247, 248, 250, 251, 252, 253, 254, 258, 267, 280, 282, 283, 290, 314, 317, 327, 328, 376, 390, 401, 402, 421], "rescal": [6, 23, 33, 40, 80, 121, 143, 149, 329, 331, 332, 367, 379, 381, 382, 388], "seri": [6, 33, 46, 47, 51, 56, 60, 66, 73, 92, 94, 95, 97, 109, 110, 111, 113, 120, 124, 141, 145, 149, 150, 152, 154, 156, 161, 166, 167, 173, 174, 175, 181, 216, 228, 229, 231, 234, 243, 252, 253, 254, 267, 270, 285, 286, 297, 302, 308, 311, 315, 316, 317, 318, 319, 322, 341, 356, 364, 367, 378, 394, 395, 396, 401, 405, 413, 423], "varianc": [6, 33, 40, 42, 48, 55, 56, 57, 58, 66, 70, 80, 137, 140, 141, 149, 156, 161, 163, 169, 176, 185, 245, 246, 247, 248, 252, 253, 255, 257, 259, 260, 263, 264, 267, 276, 280, 285, 291, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 390, 392, 395, 404, 405], "hrf_model": [6, 33, 61, 63, 65, 66, 69, 71, 108, 267, 269, 270, 274], "canon": [6, 50, 66, 71, 84, 127, 149, 169, 180, 252], "hrf": [6, 65, 66, 68, 69, 108, 144, 146, 149, 156, 167, 169, 267, 269, 271, 272, 273, 274, 277, 278, 279, 423], "dispers": [6, 66, 68, 165, 257, 259, 260, 267, 269, 271, 274, 277], "deriv": [6, 46, 59, 62, 68, 69, 71, 100, 101, 104, 108, 110, 141, 143, 144, 147, 149, 155, 163, 165, 169, 170, 176, 189, 210, 252, 253, 267, 269, 270, 271, 273, 274, 277, 279, 280, 282, 293, 305, 306, 307, 308, 309, 329, 330, 357, 364, 376, 378, 379, 383, 390], "drift_model": [6, 33, 63, 66, 70, 71, 165, 267, 270, 274], "cosin": [6, 33, 66, 69, 70, 71, 108, 120, 142, 149, 267, 270, 274, 308, 404], "drift": [6, 69, 70, 71, 100, 108, 267, 274, 308, 404], "slow": [6, 36, 44, 66, 162, 163, 164, 176, 421], "oscil": [6, 66, 111], "high_pass": [6, 33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 66, 71, 89, 91, 92, 99, 100, 134, 149, 176, 245, 246, 247, 248, 250, 251, 252, 253, 267, 270, 274, 285, 308, 309, 312, 313, 314, 315, 316, 317, 318, 390, 392, 403, 404], "hz": [6, 33, 66, 71, 176, 267, 274], "cutoff": [6, 66, 69, 71, 89, 108, 142, 149, 173, 245, 246, 247, 248, 250, 251, 285, 312, 313, 314, 315, 316, 317, 318, 390, 392, 403, 404, 423], "frequenc": [6, 66, 118, 149, 176, 245, 246, 247, 248, 250, 251, 267, 274, 285, 308, 312, 313, 314, 315, 316, 317, 318, 390, 392, 403, 404], "invers": [6, 46, 58, 59, 98, 110, 139, 149, 151, 152, 156, 163, 170, 173, 183, 188, 199, 210, 257, 259, 260, 264, 311, 316, 361, 365, 374, 375, 383, 384, 389, 423], "fmri_glm": [6, 64, 67, 70, 71, 165], "inspect": [6, 40, 48, 55, 66, 67, 70, 89, 92, 151, 156, 171, 267, 280], "repres": [6, 15, 20, 33, 35, 51, 52, 54, 55, 69, 76, 79, 94, 111, 129, 141, 149, 150, 151, 154, 155, 164, 166, 168, 169, 174, 175, 176, 193, 196, 210, 238, 239, 241, 267, 280, 289, 300, 311, 312, 313, 314, 315, 316, 317, 318, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 360, 365, 370, 374, 392, 395, 402, 406, 408, 421], "predictor": [6, 40, 165, 166, 259, 260, 309], "design_matrix": [6, 41, 61, 62, 65, 66, 69, 70, 71, 75, 76, 77, 78, 79, 80, 81, 108, 268, 274, 280, 281, 282, 310, 366, 367], "design_matrices_": [6, 65, 66, 70, 100], "formal": 6, "taken": [6, 66, 100, 157, 163, 270, 280, 282, 301, 312, 313, 315, 316, 318, 392], "implictili": 6, "plot_design_matrix": [6, 63, 65, 66, 73, 75, 78, 80, 100, 165, 168], "write": [6, 41, 64, 110, 114, 120, 144, 146, 149, 163, 164, 172, 307, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 400], "o": [6, 40, 41, 62, 64, 86, 100, 101, 108, 111, 124, 149, 164, 189, 191, 201, 208, 221, 308], "outdir": [6, 72], "mkdir": [6, 64, 72], "join": [6, 62, 64, 86, 103, 108, 164, 408, 422], "output_fil": [6, 15, 23, 342, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 421], "png": [6, 9, 15, 23, 61, 170, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 421], "respons": [6, 60, 70, 71, 73, 79, 80, 110, 144, 149, 156, 165, 166, 169, 171, 172, 220, 267, 269, 271, 272, 273, 274, 277, 279, 366, 367, 378], "profil": [6, 163, 164, 254, 258], "region": [6, 10, 15, 16, 19, 23, 40, 42, 43, 44, 46, 48, 49, 52, 55, 56, 58, 59, 66, 70, 71, 83, 96, 99, 110, 111, 120, 122, 126, 128, 129, 132, 137, 140, 142, 144, 147, 149, 150, 152, 155, 156, 162, 165, 166, 169, 171, 173, 175, 181, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 213, 222, 225, 252, 253, 290, 292, 295, 297, 298, 302, 304, 309, 311, 312, 313, 315, 316, 318, 341, 359, 360, 361, 362, 363, 365, 368, 375, 376, 377, 378, 380, 381, 383, 384, 400, 421, 423], "xlabel": [6, 25, 30, 32, 34, 42, 48, 49, 51, 55, 58, 68, 99, 175], "access": [6, 33, 48, 56, 61, 62, 64, 66, 75, 111, 113, 121, 144, 149, 151, 155, 163, 164, 165, 173, 174, 176, 190, 191, 194, 199, 200, 201, 204, 205, 228, 231, 232, 234, 255, 342, 412, 423], "beta": [6, 26, 39, 42, 66, 71, 97, 109, 110, 111, 145, 165, 169, 216, 221, 245, 246, 247, 248, 254, 257, 258, 259, 260, 267, 270, 286, 311, 317, 318, 341, 367, 378], "role": [6, 144, 149], "potenti": [6, 55, 91, 94, 100, 111, 143, 149, 161, 164, 169, 172, 202, 282], "weight": [6, 29, 39, 42, 43, 44, 113, 114, 137, 149, 150, 157, 159, 160, 163, 164, 166, 176, 214, 224, 226, 245, 246, 247, 248, 250, 251, 264, 307, 384, 396, 423], "associ": [6, 14, 47, 72, 75, 77, 105, 120, 149, 156, 161, 164, 166, 168, 169, 191, 229, 249, 255, 282, 308, 309, 328, 401, 408], "nutshel": 6, "combin": [6, 15, 40, 41, 102, 104, 111, 120, 143, 149, 156, 161, 166, 169, 176, 223, 245, 246, 247, 248, 250, 251, 252, 253, 267, 280, 282, 308, 347, 348, 351, 352, 353, 354, 366], "consid": [6, 32, 39, 53, 54, 55, 66, 68, 80, 92, 94, 102, 104, 113, 124, 137, 144, 149, 161, 164, 205, 245, 246, 247, 248, 250, 251, 252, 253, 254, 258, 267, 269, 270, 274, 280, 282, 289, 295, 306, 313, 314, 316, 317, 322, 325, 328, 332, 377, 390, 393, 395, 396], "two": [6, 14, 24, 25, 34, 40, 48, 55, 56, 58, 60, 66, 67, 73, 74, 77, 82, 86, 88, 89, 94, 98, 100, 101, 102, 108, 110, 114, 120, 129, 132, 137, 140, 141, 149, 150, 153, 155, 156, 158, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 183, 187, 193, 212, 219, 232, 245, 246, 247, 248, 252, 253, 257, 259, 260, 267, 274, 280, 281, 282, 286, 292, 297, 300, 308, 309, 313, 316, 318, 328, 340, 367, 370, 372, 373, 378, 379, 380, 381, 382, 383, 388, 390, 392, 393, 394, 400, 401, 402, 407, 408, 421, 423], "isol": [6, 70, 71, 100, 156, 166], "zero": [6, 9, 20, 22, 23, 31, 36, 39, 44, 47, 53, 54, 64, 67, 70, 77, 79, 94, 118, 137, 141, 145, 149, 150, 154, 156, 157, 161, 162, 163, 166, 169, 175, 176, 181, 182, 183, 185, 228, 245, 246, 247, 248, 250, 251, 252, 254, 259, 260, 274, 280, 282, 285, 289, 302, 304, 308, 312, 313, 314, 315, 316, 317, 318, 319, 322, 325, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 377, 378, 380, 381, 390, 391, 392, 395, 396, 398, 399, 404], "16": [6, 25, 30, 32, 33, 34, 36, 39, 42, 43, 44, 48, 49, 54, 62, 66, 68, 76, 77, 79, 80, 84, 91, 102, 103, 105, 135, 142, 149, 163, 175, 200, 313, 316, 392, 421], "active_minus_rest": 6, "plot_contrast_matrix": [6, 62, 65, 66], "ax": [6, 9, 11, 18, 21, 22, 23, 24, 31, 38, 40, 49, 51, 57, 61, 63, 65, 66, 70, 75, 78, 79, 80, 84, 91, 100, 101, 105, 108, 131, 141, 142, 149, 299, 300, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "label": [6, 9, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 47, 49, 52, 53, 54, 58, 61, 65, 66, 68, 69, 83, 91, 94, 96, 98, 100, 102, 103, 108, 110, 111, 113, 120, 121, 126, 129, 134, 137, 141, 142, 144, 146, 149, 151, 153, 156, 157, 159, 161, 164, 169, 174, 175, 176, 191, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 209, 213, 223, 245, 246, 247, 248, 249, 250, 251, 263, 267, 270, 274, 276, 281, 305, 308, 309, 312, 315, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 363, 364, 368, 370, 371, 375, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 406], "below": [6, 9, 16, 20, 22, 39, 44, 49, 52, 54, 58, 65, 70, 94, 111, 129, 149, 153, 156, 157, 161, 163, 164, 165, 166, 168, 172, 175, 176, 182, 183, 185, 189, 210, 245, 246, 247, 248, 250, 251, 253, 305, 312, 313, 314, 315, 316, 317, 318, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 370, 371, 373, 377, 378, 379, 382, 385, 390, 392, 403, 404, 421], "unit": [6, 15, 55, 57, 111, 154, 156, 162, 163, 164, 176, 249, 259, 260, 282, 285, 312, 313, 314, 315, 316, 317, 318, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 404], "account": [6, 66, 76, 94, 161, 172, 176, 308, 312, 313, 315, 316, 318, 392], "eff_map": 6, "compute_contrast": [6, 33, 61, 62, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77, 79, 80, 81, 100, 101, 108, 120, 149, 165, 267, 280, 282, 402], "output_typ": [6, 61, 64, 65, 66, 67, 70, 71, 75, 76, 77, 79, 80, 81, 100, 105, 267, 280, 328], "effect_s": [6, 67, 80, 100, 169, 255, 267, 280], "form": [6, 33, 40, 44, 49, 72, 105, 150, 151, 153, 154, 166, 169, 174, 181, 182, 183, 229, 230, 245, 246, 247, 248, 249, 250, 251, 252, 253, 262, 267, 270, 274, 280, 282, 283, 305, 306, 311, 312, 313, 314, 315, 316, 317, 318, 328, 372, 385, 389, 390, 391, 392, 401, 402], "scale": [6, 15, 41, 49, 54, 61, 68, 70, 71, 72, 94, 111, 114, 127, 134, 144, 149, 157, 161, 176, 193, 219, 224, 226, 238, 239, 241, 250, 251, 254, 257, 258, 259, 260, 262, 267, 275, 280, 282, 283, 312, 313, 314, 315, 316, 317, 318, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 389, 390, 391, 401, 402, 404, 408, 423], "gaussian": [6, 44, 79, 94, 111, 150, 163, 166, 176, 177, 182, 185, 302], "z_map": [6, 33, 61, 62, 64, 65, 66, 70, 71, 75, 76, 77, 79, 81, 101, 267, 280], "z_score": [6, 61, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77, 79, 80, 81, 108, 255, 267, 280], "top": [6, 12, 15, 17, 25, 44, 56, 103, 140, 149, 164, 171, 175, 244, 365, 370, 371, 374, 376, 377, 378, 385, 421], "axial": [6, 14, 94, 267, 280, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 363, 365, 368, 370, 371, 374, 376, 377, 378, 402], "view": [6, 13, 14, 16, 22, 23, 33, 37, 42, 52, 54, 58, 61, 62, 64, 66, 71, 75, 84, 102, 121, 131, 140, 142, 146, 149, 156, 161, 163, 171, 176, 245, 246, 247, 248, 252, 253, 300, 314, 317, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 373, 376, 379, 381, 382, 384, 385, 387, 390, 421, 423], "black_bg": [6, 13, 14, 36, 71, 143, 149, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 365, 368, 370, 371, 374, 376, 377, 378, 385, 386, 388], "minu": [6, 114, 166], "worri": [6, 24, 113], "valid": [6, 28, 32, 33, 36, 37, 40, 42, 44, 45, 51, 99, 102, 105, 106, 107, 110, 121, 124, 127, 140, 144, 145, 149, 150, 152, 157, 160, 176, 183, 193, 196, 202, 213, 221, 245, 246, 247, 248, 249, 250, 251, 267, 268, 269, 274, 285, 289, 292, 297, 302, 303, 308, 309, 312, 315, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 388, 395, 401, 406, 407, 408, 423], "procedur": [6, 31, 76, 77, 79, 84, 87, 102, 151, 156, 161, 166, 168, 169, 219, 266, 282, 328, 404, 417], "arbitrari": [6, 48, 65, 76, 166, 249, 280, 282], "risk": 6, "aka": [6, 66, 108, 153, 166, 262], "control": [6, 8, 9, 11, 14, 15, 20, 23, 27, 33, 38, 40, 48, 56, 76, 79, 98, 110, 111, 121, 122, 130, 131, 135, 137, 141, 149, 150, 154, 155, 156, 157, 160, 161, 163, 164, 166, 169, 173, 189, 217, 224, 226, 253, 262, 266, 267, 280, 283, 286, 297, 304, 308, 309, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 368, 370, 371, 377, 378, 379, 381, 382, 383, 389, 402, 408, 421, 423], "posit": [6, 9, 14, 16, 17, 24, 48, 51, 58, 66, 71, 74, 79, 80, 81, 82, 84, 94, 99, 110, 111, 113, 140, 144, 149, 156, 161, 163, 166, 168, 169, 176, 182, 185, 189, 219, 221, 262, 267, 280, 282, 283, 304, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 362, 363, 365, 368, 370, 371, 374, 376, 377, 378, 382, 383, 385, 386, 401, 402, 408, 421], "fpr": [6, 33, 81, 168, 169, 267, 280, 283, 402], "alpha": [6, 15, 23, 24, 37, 39, 40, 44, 48, 57, 68, 75, 76, 77, 81, 106, 146, 150, 155, 162, 166, 182, 183, 185, 250, 251, 253, 257, 259, 260, 262, 266, 267, 280, 283, 304, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 365, 370, 374, 376, 377, 379, 381, 382, 402, 421], "certain": [6, 56, 134, 149, 156, 164, 166, 224, 300, 376], "001": [6, 41, 43, 44, 62, 76, 79, 80, 81, 101, 166, 182, 183, 185, 250, 251, 267, 280, 283, 402], "chanc": [6, 33, 37, 51, 77, 79, 141, 149, 160, 161, 166, 423], "declar": [6, 166, 182, 185], "inact": [6, 166, 172], "threshold_stats_img": [6, 75, 77, 81, 168, 304], "_": [6, 22, 30, 36, 37, 42, 44, 49, 51, 57, 62, 67, 75, 77, 80, 94, 98, 100, 101, 102, 105, 106, 108, 120, 142, 146, 149, 156, 164, 229, 230, 270, 307], "height_control": [6, 75, 77, 81, 267, 280, 283, 402], "uncorrect": [6, 62, 76, 79, 80, 81, 101], "291": [6, 33, 41, 66, 72], "n_voxel": [6, 55, 77, 79, 92, 98, 156, 159, 166, 252, 255, 257, 259, 260, 263, 267, 275, 276, 392], "ten": [6, 81, 390], "hundr": [6, 49, 390], "conserv": [6, 77, 79, 102, 161, 166, 182, 187], "solut": [6, 65, 66, 150, 151, 157, 162, 163, 171, 174, 253], "famili": [6, 81, 102, 120, 121, 131, 146, 149, 161, 164, 169, 282, 328, 392, 394], "wise": [6, 15, 40, 47, 55, 81, 94, 100, 102, 120, 146, 149, 161, 165, 169, 176, 245, 246, 247, 248, 282, 328], "probabl": [6, 11, 21, 31, 32, 39, 43, 48, 61, 66, 77, 79, 81, 92, 94, 151, 161, 163, 166, 169, 171, 172, 197, 198, 228], "sai": [6, 65, 70, 98, 114, 166, 257], "bonferroni": [6, 81, 102, 105, 106, 161, 166, 169, 267, 280, 283, 402], "934": 6, "inde": [6, 42, 49, 86, 150, 151, 159, 166, 268, 421], "popular": [6, 48, 170, 174, 245, 246], "proport": [6, 49, 51, 70, 74, 82, 99, 110, 154, 166, 168, 169, 219, 259, 262, 280, 374, 378, 383], "discoveri": [6, 23, 76, 77, 79, 81, 111, 166, 169, 171, 234], "among": [6, 79, 121, 149, 166, 169, 193, 245, 246, 247, 248], "fdr": [6, 75, 77, 81, 168, 169, 266, 267, 280, 283, 402], "904": 6, "discard": [6, 114, 166, 188, 224, 244, 270, 305, 322, 325, 408], "small": [6, 18, 49, 51, 58, 65, 86, 99, 102, 103, 123, 125, 126, 149, 153, 154, 161, 163, 164, 171, 172, 249, 255, 285, 376, 377, 390, 393, 404, 408, 421], "cluster": [6, 19, 31, 32, 33, 39, 46, 59, 62, 74, 79, 81, 82, 86, 91, 110, 111, 120, 121, 137, 140, 144, 145, 146, 149, 152, 158, 159, 161, 166, 168, 169, 170, 171, 193, 194, 210, 219, 247, 248, 262, 267, 276, 280, 282, 283, 290, 292, 297, 304, 315, 328, 348, 368, 375, 377, 378, 383, 389, 390, 391, 395, 397, 398, 401, 402, 423], "remov": [6, 11, 30, 32, 33, 35, 40, 41, 42, 47, 48, 50, 51, 54, 77, 86, 89, 103, 104, 105, 106, 111, 113, 118, 120, 124, 128, 129, 130, 132, 134, 135, 137, 139, 140, 142, 144, 147, 149, 157, 162, 163, 172, 173, 175, 228, 230, 267, 283, 285, 289, 291, 302, 304, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 328, 376, 392, 393, 395, 396, 400, 403, 404, 405, 423], "cluster_threshold": [6, 61, 70, 81, 144, 149, 267, 280, 283, 304, 401, 402], "clean_map": 6, "zscore": [6, 11, 47, 50, 51, 54, 56, 121, 137, 149, 252, 312, 313, 314, 315, 316, 317, 318, 404], "active_vs_rest_z_map": 6, "active_vs_rest_eff_map": 6, "furthermor": [6, 42, 55], "extract": [6, 22, 28, 30, 32, 40, 43, 45, 46, 48, 49, 59, 60, 62, 72, 73, 83, 86, 92, 94, 96, 98, 100, 101, 104, 110, 114, 119, 120, 121, 122, 129, 130, 132, 133, 134, 135, 141, 145, 146, 149, 152, 153, 156, 159, 167, 169, 171, 172, 173, 181, 190, 196, 197, 199, 202, 207, 208, 210, 213, 221, 225, 228, 245, 246, 247, 248, 249, 252, 253, 267, 274, 280, 281, 282, 291, 292, 294, 297, 304, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 323, 325, 341, 360, 361, 362, 363, 365, 374, 375, 376, 378, 383, 384, 386, 390, 392, 393, 394, 395, 396, 398, 400, 402, 405, 408, 417, 421, 423], "report": [6, 49, 52, 53, 54, 56, 70, 89, 91, 92, 103, 111, 137, 142, 144, 146, 149, 166, 167, 172, 176, 204, 262, 267, 280, 312, 313, 314, 315, 316, 317, 328, 379, 381, 382, 392, 422], "tabl": [6, 33, 62, 70, 91, 101, 121, 145, 149, 309, 401], "get_clusters_t": [6, 62, 70, 121, 141, 145, 146, 149], "stat_threshold": [6, 70, 401], "20": [6, 12, 21, 24, 33, 34, 36, 39, 41, 42, 43, 44, 45, 48, 50, 52, 53, 54, 57, 58, 61, 62, 70, 72, 73, 78, 81, 91, 94, 100, 102, 103, 105, 106, 111, 118, 122, 127, 149, 150, 154, 156, 193, 202, 221, 245, 246, 247, 248, 250, 251, 252, 253, 408], "id": [6, 33, 62, 70, 71, 103, 107, 114, 121, 149, 189, 191, 200, 201, 204, 224, 226, 234, 267, 401], "y": [6, 14, 15, 24, 31, 33, 34, 35, 36, 37, 40, 41, 42, 44, 52, 54, 58, 62, 70, 71, 84, 92, 94, 101, 102, 105, 106, 114, 129, 131, 134, 146, 149, 156, 157, 161, 164, 169, 172, 175, 176, 181, 182, 183, 199, 222, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 267, 275, 276, 280, 282, 287, 311, 312, 313, 314, 315, 316, 317, 318, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 362, 363, 365, 368, 370, 371, 374, 376, 377, 378, 379, 380, 381, 382, 385, 388, 389, 390, 391, 392, 393, 401, 402, 421], "peak": [6, 33, 62, 64, 67, 70, 157, 159, 163, 359, 392, 394, 401], "stat": [6, 23, 33, 62, 64, 68, 76, 79, 94, 101, 103, 107, 108, 111, 146, 149, 167, 175, 182, 185, 255, 267, 280, 304, 307, 382, 386, 388, 401, 402, 421], "size": [6, 9, 15, 22, 23, 26, 33, 40, 44, 48, 49, 53, 62, 69, 77, 79, 80, 81, 84, 91, 94, 102, 103, 105, 108, 124, 134, 135, 137, 144, 149, 154, 161, 162, 163, 166, 221, 228, 267, 280, 282, 283, 304, 312, 313, 315, 316, 320, 323, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 365, 374, 375, 379, 381, 382, 384, 387, 389, 390, 391, 392, 393, 394, 401, 402, 403, 408], "mm3": [6, 33, 62, 91, 392, 394, 401], "811979": 6, "4050": [6, 102], "1a": [6, 33, 62], "63": [6, 11, 32, 33, 36, 42, 43, 44, 62, 93, 102, 111, 192, 200], "36": [6, 7, 15, 16, 17, 33, 36, 42, 43, 62, 90, 91, 93, 100, 102, 105, 109, 131, 134, 149, 193, 421], "601922": 6, "1b": [6, 62], "435063": 6, "1c": [6, 62], "48": [6, 20, 33, 36, 42, 43, 44, 53, 62, 72, 91, 102, 192, 197, 199, 222, 287], "39": [6, 15, 27, 33, 36, 42, 43, 44, 45, 51, 54, 59, 72, 91, 102, 122, 124, 127, 149, 192, 199, 210], "364058": 6, "605128": 6, "1512": 6, "2a": [6, 62], "45": [6, 30, 32, 33, 41, 42, 43, 55, 62, 73, 91, 102, 105, 106], "590200": 6, "27": [6, 15, 16, 17, 33, 36, 42, 43, 44, 62, 64, 67, 90, 91, 93, 102, 103, 111, 309, 392, 394, 421], "253889": 6, "972": 6, "3a": [6, 62, 111, 204, 233], "51": [6, 9, 33, 36, 42, 43, 48, 53, 62, 75, 80, 82, 102, 105, 111, 155, 193, 252], "968355": 6, "3b": 6, "54": [6, 30, 33, 36, 42, 43, 44, 62, 77, 82, 91, 100, 102, 108, 109, 111, 193, 214, 239], "565609": 6, "087451": 6, "1188": 6, "18": [6, 33, 36, 42, 43, 44, 49, 55, 58, 62, 72, 89, 91, 96, 102, 103, 107, 111, 116, 127, 134, 144, 149, 176, 210, 221, 249, 379, 381, 382, 421], "807510": 6, "594": [6, 33], "5a": [6, 33, 62], "21": [6, 7, 33, 36, 42, 43, 44, 54, 62, 66, 77, 91, 98, 102, 103, 105, 109, 124, 142, 149, 234], "646352": 6, "5b": [6, 33, 62], "33": [6, 33, 36, 42, 43, 44, 62, 70, 71, 72, 73, 91, 102, 105, 109, 111, 194, 210], "416271": 6, "57": [6, 31, 33, 42, 43, 44, 62, 91, 102, 111, 115, 118, 134, 149, 193], "710963": 6, "702": [6, 33], "6a": [6, 62], "633746": 6, "6b": 6, "66": [6, 16, 17, 33, 36, 42, 43, 62, 90, 92, 93, 102], "796135": 6, "6c": 6, "69": [6, 33, 36, 42, 43, 44, 72, 79, 102], "254544": 6, "17": [6, 13, 27, 30, 32, 33, 36, 42, 43, 44, 45, 47, 58, 59, 62, 77, 80, 91, 102, 103, 107, 109, 111, 134, 149, 163, 191, 201, 205, 221], "93": [6, 30, 32, 33, 36, 42, 43, 44, 77, 91, 102, 195], "522477": 6, "621": [6, 33], "7a": [6, 33, 62], "99": [6, 12, 30, 32, 33, 41, 42, 43, 44, 58, 93, 102, 143, 149, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "713852": 6, "19": [6, 25, 27, 31, 33, 36, 42, 43, 44, 45, 53, 62, 77, 91, 96, 102, 103, 111, 120, 122, 124, 137, 149, 190, 191, 199, 200, 201, 204, 205, 228, 231, 232, 259, 260], "7b": 6, "90": [6, 9, 12, 22, 30, 32, 33, 36, 42, 43, 44, 47, 50, 53, 56, 63, 77, 79, 91, 102, 103, 105, 111, 122, 135, 143, 149, 154, 308, 309, 379, 381, 382, 385, 405, 421], "270733": 6, "7c": 6, "085568": 6, "331806": 6, "648": [6, 33, 62], "22": [6, 33, 36, 42, 43, 44, 62, 80, 82, 91, 102, 103, 107, 111, 124, 135, 144, 149, 195, 287], "8a": [6, 33], "700088": 6, "23": [6, 33, 36, 42, 43, 44, 62, 72, 82, 91, 100, 102, 103, 111, 193, 202, 251], "8b": 6, "037845": 6, "8c": 6, "527477": 6, "25": [6, 15, 23, 30, 32, 33, 36, 40, 41, 42, 43, 44, 48, 59, 62, 77, 91, 94, 95, 98, 102, 103, 105, 115, 149, 151, 221, 257, 259, 260, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 376, 384, 386, 387, 388], "835099": 6, "837": 6, "26": [6, 22, 27, 33, 36, 40, 42, 43, 44, 45, 61, 62, 72, 75, 91, 102, 103, 109, 127, 149, 393], "9a": 6, "615642": 6, "9b": 6, "091568": 6, "to_csv": [6, 72], "baselin": [6, 30, 32, 111, 140, 141, 149, 157, 159, 192, 255, 275], "anoth": [6, 39, 66, 69, 79, 89, 126, 131, 149, 156, 163, 164, 166, 171, 173, 174, 181, 250, 251, 286, 287, 306, 400, 421, 423], "seek": [6, 77, 105, 155, 376], "whether": [6, 9, 70, 89, 94, 102, 135, 149, 156, 164, 166, 172, 176, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 210, 213, 214, 215, 219, 221, 222, 223, 224, 226, 228, 234, 252, 253, 264, 282, 283, 289, 304, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 328, 329, 331, 332, 370, 378, 379, 380, 382, 390, 392, 401, 402, 404, 405], "possibli": [6, 66, 176], "three": [6, 14, 19, 24, 32, 40, 49, 63, 65, 66, 75, 89, 94, 111, 135, 143, 149, 163, 164, 172, 174, 210, 267, 280, 300, 302, 339, 341, 344, 358, 363, 365, 368, 369, 370, 371, 374, 376, 377, 378, 402, 408], "higher": [6, 64, 67, 113, 129, 149, 150, 161, 166, 182, 202, 245, 246, 247, 248, 250, 251, 252, 253, 267, 280, 286, 297, 312, 313, 314, 315, 316, 317, 318, 390, 391, 392, 403], "dimension": [6, 26, 49, 71, 94, 124, 141, 146, 149, 163, 171, 187, 188, 196, 202, 221, 252, 253, 255, 286, 327, 389, 390, 391], "explain": [6, 40, 42, 48, 56, 66, 70, 140, 149, 153, 156, 164, 166, 171, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408], "might": [6, 34, 61, 104, 155, 159, 161, 166, 169, 172, 174, 195, 210, 274, 303, 309, 320, 321, 322, 324, 325, 388], "specif": [6, 14, 15, 16, 17, 30, 32, 33, 48, 49, 61, 62, 63, 64, 65, 66, 67, 69, 71, 76, 79, 80, 84, 94, 101, 108, 111, 112, 117, 127, 140, 146, 149, 150, 153, 154, 155, 156, 157, 159, 161, 164, 166, 168, 169, 171, 172, 173, 176, 211, 221, 226, 229, 230, 255, 257, 259, 260, 281, 285, 305, 307, 313, 316, 328, 360, 379, 380, 381, 382, 388, 392, 404, 406, 407, 408, 421, 423], "exactli": [6, 84, 94, 98, 108, 163, 164, 245, 246, 247, 248, 249, 305, 385, 408], "effects_of_interest": [6, 64, 70, 71], "vstack": [6, 40, 41, 58, 70, 71, 75, 80, 103], "easier": [6, 23, 66, 123, 128, 143, 149, 155, 156, 163, 164], "oop": 6, "lot": [6, 65, 71, 86, 118, 134, 137, 149, 150, 156, 157, 163, 164, 171, 185], "non": [6, 15, 39, 42, 50, 56, 65, 66, 68, 77, 79, 91, 94, 102, 103, 112, 130, 134, 137, 141, 142, 144, 145, 149, 150, 154, 155, 161, 162, 163, 164, 168, 169, 171, 176, 194, 221, 228, 245, 246, 247, 248, 252, 257, 259, 260, 267, 285, 289, 294, 300, 302, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 363, 373, 377, 378, 379, 381, 382, 386, 392, 398, 404, 421, 423], "neural": [6, 68, 111, 155, 166, 169, 171, 176, 211, 229, 249], "ventricl": 6, "arteri": 6, "824": [6, 7], "270": [6, 7, 33, 36, 41, 42, 44, 102, 379, 381, 382], "plot_single_subject_single_run": [6, 7], "885": 7, "execut": [7, 27, 45, 59, 73, 82, 87, 96, 109, 110, 164, 176, 300, 379, 421, 422], "auto_examples_00_tutori": 7, "00": [7, 27, 30, 32, 33, 36, 42, 44, 45, 48, 53, 59, 73, 82, 89, 96, 102, 105, 109], "915": [7, 27, 40, 41, 45, 109, 111, 223], "06": [7, 22, 23, 27, 32, 33, 36, 49, 59, 91, 109, 111, 193, 203, 249, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 378, 385], "255": [7, 33, 41, 143, 149], "glass": [8, 9, 27, 47, 61, 107, 110, 127, 128, 129, 131, 132, 137, 140, 149, 170, 227, 242, 267, 280, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 370, 374, 378, 383, 384, 387, 402, 421], "megatrawl": [8, 27, 110, 111, 124, 149, 221, 375, 383], "connectom": [8, 12, 22, 27, 46, 48, 49, 51, 54, 56, 57, 59, 99, 110, 111, 116, 122, 126, 127, 131, 134, 135, 137, 140, 142, 149, 152, 154, 155, 169, 170, 171, 176, 189, 196, 199, 205, 207, 208, 210, 221, 252, 253, 292, 309, 311, 312, 313, 315, 316, 318, 341, 360, 361, 362, 363, 365, 374, 375, 376, 378, 383, 384, 385, 387, 392, 423], "atla": [8, 11, 27, 46, 48, 50, 59, 83, 91, 94, 96, 110, 111, 114, 119, 121, 125, 126, 128, 129, 130, 131, 134, 137, 140, 141, 142, 143, 145, 146, 149, 152, 154, 163, 169, 175, 176, 181, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 210, 214, 224, 233, 292, 304, 311, 312, 313, 315, 316, 341, 360, 361, 362, 364, 365, 375, 376, 377, 378, 381, 383, 384, 385, 386, 388, 392, 393, 394, 395, 396, 400, 407, 417, 421, 423], "probabilist": [8, 27, 46, 51, 59, 99, 110, 111, 121, 134, 145, 149, 152, 169, 175, 176, 181, 192, 194, 196, 197, 198, 199, 200, 202, 210, 214, 292, 311, 316, 341, 360, 361, 365, 375, 376, 377, 378, 383, 384, 396, 400, 421, 423], "mode": [8, 14, 16, 21, 27, 55, 60, 73, 83, 94, 96, 110, 111, 127, 132, 135, 141, 146, 149, 164, 165, 170, 175, 176, 190, 196, 199, 202, 221, 224, 226, 262, 267, 274, 292, 311, 316, 318, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 362, 373, 376, 378, 383, 392, 400, 402, 423], "msdl": [8, 21, 27, 52, 54, 110, 151, 175, 199, 292, 341, 360, 376, 378, 383, 421], "multiscal": [8, 27, 40, 41, 110, 111, 121, 125, 149, 193, 223, 377, 383], "parcel": [8, 9, 22, 23, 27, 46, 59, 110, 111, 114, 121, 125, 129, 132, 133, 134, 137, 144, 146, 149, 152, 169, 170, 171, 176, 181, 191, 193, 194, 195, 197, 198, 199, 201, 203, 205, 210, 221, 224, 290, 292, 297, 308, 309, 311, 315, 348, 360, 361, 365, 368, 375, 377, 383, 392, 393, 421, 423], "colormap": [8, 19, 21, 23, 27, 86, 110, 129, 132, 133, 134, 135, 137, 142, 149, 205, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 363, 364, 365, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 423], "global": [8, 27, 110, 111, 140, 149, 163, 174, 189, 190, 201, 214, 235, 252, 253, 286, 298, 308, 309, 322, 364, 390], "carpet": [8, 27, 110, 140, 149, 190, 214, 286, 298, 322, 364], "haxbi": [8, 15, 16, 27, 28, 45, 94, 102, 110, 111, 113, 128, 129, 149, 160, 162, 170, 174, 176, 213, 245, 290, 292, 297, 311, 317, 356, 363, 375, 378, 383, 385, 421, 423], "technic": [8, 27, 64, 67, 100, 110, 150, 162, 163, 221, 228, 254, 258, 382, 383, 408], "illustr": [8, 27, 49, 66, 67, 68, 85, 90, 93, 101, 108, 110, 156, 164, 175, 176, 382, 383, 408], "surfac": [8, 12, 27, 28, 45, 55, 60, 73, 97, 109, 110, 111, 113, 121, 129, 131, 133, 134, 135, 137, 140, 141, 144, 146, 147, 149, 167, 169, 170, 171, 195, 203, 213, 216, 220, 233, 234, 242, 255, 263, 270, 274, 276, 292, 328, 342, 365, 370, 373, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 423], "scheme": [8, 27, 29, 33, 36, 37, 98, 110, 140, 149, 150, 156, 157, 159, 163, 183, 245, 246, 247, 248, 328, 382, 383, 408], "cortic": [8, 23, 24, 27, 28, 45, 55, 64, 67, 69, 110, 111, 129, 131, 134, 140, 149, 151, 165, 170, 195, 203, 205, 209, 213, 214, 233, 292, 365, 381, 382, 383, 384, 385, 386, 387, 388, 407, 408, 423], "option": [8, 9, 11, 13, 15, 21, 23, 27, 42, 47, 50, 51, 54, 56, 68, 72, 89, 102, 110, 113, 118, 120, 121, 127, 129, 130, 131, 132, 137, 140, 141, 142, 143, 144, 146, 149, 151, 156, 158, 164, 165, 169, 172, 174, 176, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 262, 263, 264, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 289, 291, 295, 297, 298, 299, 300, 301, 302, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 421], "seed": [8, 27, 46, 48, 59, 100, 110, 134, 146, 149, 164, 165, 173, 203, 210, 233, 234, 247, 248, 267, 274, 276, 311, 317, 318, 328, 341, 378, 381, 382, 383, 384, 387, 392, 394, 406, 421, 423], "connect": [8, 22, 26, 27, 49, 50, 58, 59, 88, 94, 97, 109, 111, 122, 127, 129, 130, 137, 140, 145, 149, 151, 153, 155, 164, 165, 166, 169, 170, 171, 175, 181, 182, 183, 189, 193, 199, 201, 202, 203, 205, 210, 216, 221, 233, 234, 267, 270, 283, 286, 294, 304, 308, 309, 311, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 341, 362, 365, 367, 375, 378, 381, 382, 383, 384, 390, 393, 394, 406, 421, 422, 423], "onto": [9, 16, 23, 40, 50, 69, 129, 149, 154, 164, 170, 174, 321, 324, 367, 376, 421], "vol_to_surf": [9, 37, 69, 108, 131, 140, 142, 149, 165, 373, 379, 380, 381, 382, 386, 421], "plot_surf_stat_map": [9, 23, 24, 27, 37, 69, 108, 129, 131, 133, 137, 140, 144, 145, 146, 149, 165, 373, 379, 380, 423], "add": [9, 14, 15, 20, 31, 40, 41, 50, 56, 63, 69, 102, 114, 119, 120, 121, 127, 129, 130, 132, 134, 137, 142, 146, 149, 154, 156, 159, 161, 164, 169, 172, 183, 200, 201, 224, 226, 243, 285, 308, 317, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 384, 386, 388, 403, 404, 421], "contour": [9, 15, 18, 21, 87, 88, 129, 137, 140, 142, 146, 149, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 376, 377, 380, 423], "plot_surf_contour": [9, 140, 149], "stat_img": [9, 13, 14, 15, 16, 90, 93, 262, 267, 280, 283, 401, 402], "load_sample_motor_activation_imag": [9, 13, 14, 15, 16, 90, 93, 121, 149], "fsaverag": [9, 22, 23, 24, 37, 62, 69, 108, 121, 134, 142, 149, 233, 373, 386, 408, 421], "fetch_surf_fsaverag": [9, 22, 23, 37, 69, 108, 121, 134, 140, 142, 146, 149, 165, 203, 373, 379, 380, 381, 382, 386, 408, 421], "curvatur": [9, 23, 121, 149, 233], "inflat": [9, 22, 23, 37, 69, 233, 373, 379, 380, 381, 382, 386, 388, 407, 408], "hemispher": [9, 22, 23, 37, 58, 79, 86, 94, 108, 127, 128, 132, 149, 154, 175, 195, 203, 204, 233, 234, 267, 280, 303, 337, 360, 365, 370, 373, 374, 379, 381, 382, 386, 402, 421], "whose": [9, 69, 163, 169, 182, 183, 185, 258, 292, 408], "vertex": [9, 24, 203, 379, 380, 381, 382, 408], "neg": [9, 14, 17, 42, 51, 58, 66, 77, 79, 80, 90, 102, 106, 111, 141, 144, 149, 161, 166, 169, 189, 221, 251, 282, 283, 300, 304, 328, 370, 378, 382, 401, 408, 421], "curv_right": [9, 233], "load_surf_data": [9, 23, 129, 149], "curv_right_sign": 9, "sign": [9, 14, 23, 42, 102, 103, 121, 149, 161, 174, 250, 251, 284, 304, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 370, 376, 384, 386, 388], "textur": [9, 69, 108, 408], "pial_right": [9, 69, 108, 233, 373, 386, 421], "fig": [9, 11, 18, 24, 26, 38, 40, 41, 42, 49, 57, 61, 63, 65, 68, 79, 91, 100, 101, 105, 106, 373, 379, 421], "infl_right": [9, 69, 108, 233, 373, 386], "hemi": [9, 22, 23, 37, 69, 108, 379, 381, 382, 421], "right": [9, 12, 20, 22, 25, 32, 40, 44, 50, 58, 65, 66, 69, 72, 76, 79, 80, 86, 94, 98, 108, 127, 132, 137, 140, 142, 149, 153, 154, 160, 164, 171, 175, 189, 195, 197, 198, 203, 217, 219, 227, 233, 234, 247, 248, 267, 280, 281, 299, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 363, 365, 366, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 386, 402, 421, 423], "bg_map": [9, 22, 23, 37, 69, 108, 373, 379, 381, 382, 386, 388, 421], "recent": [9, 128, 131, 132, 134, 144, 149, 155, 172], "version": [9, 19, 20, 22, 32, 35, 36, 40, 41, 42, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 61, 64, 67, 70, 71, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 118, 120, 122, 124, 127, 128, 129, 130, 131, 132, 134, 136, 137, 140, 142, 143, 144, 145, 146, 149, 162, 163, 164, 172, 174, 176, 181, 182, 183, 187, 188, 189, 191, 193, 194, 196, 198, 200, 201, 202, 203, 204, 205, 209, 210, 211, 215, 224, 226, 228, 229, 230, 233, 234, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 270, 276, 280, 282, 284, 285, 289, 294, 295, 296, 301, 304, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 321, 324, 328, 364, 375, 376, 379, 381, 382, 389, 390, 391, 392, 394, 395, 396, 398, 401, 404, 408, 421], "instal": [9, 110, 120, 129, 134, 137, 144, 145, 149, 171, 172, 197, 198, 287, 313, 316, 379, 381, 382, 392, 421], "configur": [9, 15, 121, 149, 164, 172, 175, 176, 181, 252, 253, 267, 280, 309, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "instead": [9, 11, 32, 35, 36, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 66, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 120, 121, 122, 124, 127, 128, 130, 131, 132, 134, 137, 141, 143, 144, 145, 146, 149, 162, 163, 164, 165, 175, 176, 181, 182, 183, 228, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 328, 389, 390, 391, 392], "graph_object": 9, "noqa": [9, 58, 72, 98, 201, 370], "f401": 9, "except": [9, 49, 52, 53, 57, 58, 63, 78, 100, 103, 141, 144, 149, 162, 251, 295, 328], "importerror": [9, 52, 53, 57, 58, 63, 78, 137, 149], "bg_on_data": [9, 22, 23, 373, 379, 381, 382, 386, 388], "specifi": [9, 14, 15, 32, 56, 61, 62, 66, 69, 71, 75, 78, 79, 80, 81, 84, 86, 89, 94, 95, 101, 107, 108, 114, 119, 131, 134, 135, 137, 140, 141, 142, 143, 144, 146, 149, 150, 151, 161, 163, 165, 166, 172, 174, 175, 176, 197, 198, 202, 224, 225, 227, 229, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 250, 251, 252, 253, 257, 259, 260, 263, 267, 270, 274, 275, 276, 280, 281, 285, 289, 297, 300, 302, 308, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 325, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 368, 370, 371, 373, 375, 376, 377, 378, 379, 381, 382, 385, 386, 387, 390, 392, 402, 403, 404, 408, 421], "js_plotting_util": [9, 134, 149], "81": [9, 33, 36, 42, 43, 44, 102, 116, 149], "vmin": [9, 31, 36, 40, 44, 49, 50, 52, 53, 54, 56, 57, 58, 80, 84, 118, 135, 137, 149, 154, 363, 364, 368, 370, 371, 376, 377, 378, 379, 381, 382, 385, 386, 388], "chosen": [9, 22, 34, 66, 100, 163, 181, 379, 382, 385, 386, 388, 408], "symmetr": [9, 19, 47, 79, 130, 149, 163, 187, 188, 193, 197, 198, 214, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 373, 378, 379, 382, 384, 385, 386, 388], "matplolib": 9, "With": [9, 14, 32, 56, 78, 89, 159, 163, 166, 182, 185, 263, 309, 404, 407, 422], "custom": [9, 15, 22, 23, 47, 68, 121, 134, 142, 144, 149, 161, 173, 267, 269, 274, 342, 379, 381, 382, 400, 421, 423], "plotlysurfacefigur": [9, 144, 149, 379], "similar": [9, 23, 24, 30, 48, 55, 79, 94, 100, 101, 113, 122, 134, 135, 137, 144, 149, 150, 153, 155, 157, 158, 161, 168, 169, 176, 247, 248, 309], "api": [9, 44, 104, 120, 121, 144, 145, 146, 164, 172, 181, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 324, 389, 390, 391, 392, 423], "static": [9, 330, 385], "requir": [9, 20, 36, 42, 47, 55, 63, 68, 69, 72, 75, 78, 93, 114, 122, 127, 129, 131, 140, 144, 145, 149, 151, 154, 159, 161, 163, 164, 166, 169, 171, 172, 174, 175, 176, 183, 228, 283, 303, 308, 309, 313, 316, 328, 392, 393, 421, 422], "kaleido": [9, 144, 149, 379, 381, 382, 421, 422], "uncom": [9, 16, 22, 52, 54, 58], "savefig": [9, 15, 41, 55, 61, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 365, 368, 370, 371, 374, 376, 377, 378, 421], "right_hemispher": 9, "plot_glass_brain": [9, 13, 14, 62, 79, 80, 101, 105, 107, 127, 137, 145, 146, 149, 168, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 378, 421], "plot_ab": [9, 14, 62, 79, 80, 101, 105, 332, 370, 421], "rang": [9, 23, 41, 44, 47, 49, 53, 55, 57, 62, 68, 70, 78, 79, 80, 91, 95, 100, 102, 105, 127, 131, 141, 149, 163, 164, 182, 185, 196, 284, 304, 370, 378, 382, 384, 385, 386, 388], "xslicer": [9, 15, 350, 356, 358], "0x7f34e712e460": 9, "destrieux_atla": [9, 22, 23], "fetch_atlas_surf_destrieux": [9, 22, 23, 129, 147, 149, 421], "map_right": [9, 203], "regions_dict": 9, "b": [9, 14, 15, 23, 30, 40, 41, 49, 56, 58, 72, 91, 111, 114, 164, 172, 191, 195, 201, 202, 205, 211, 221, 229, 233, 258, 308, 309, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 421], "g_postcentr": 9, "postcentr": [9, 91], "gyru": [9, 91, 204], "g_precentr": 9, "precentr": [9, 91], "indic": [9, 23, 30, 32, 41, 50, 54, 66, 72, 79, 86, 126, 129, 134, 149, 154, 161, 169, 172, 174, 189, 191, 192, 195, 197, 198, 200, 201, 204, 205, 213, 224, 231, 232, 245, 246, 247, 248, 250, 251, 252, 253, 267, 270, 286, 298, 300, 301, 303, 311, 313, 314, 316, 317, 318, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 368, 371, 376, 377, 378, 379, 380, 381, 382, 385, 386, 388, 392, 394, 401], "regions_indic": 9, "sulc_right": [9, 69, 108, 233, 373, 386, 421], "legend": [9, 18, 30, 32, 34, 42, 43, 49, 58, 61, 68, 91, 380], "color": [9, 14, 15, 18, 21, 24, 30, 32, 34, 49, 50, 51, 70, 86, 88, 135, 137, 140, 142, 146, 149, 153, 154, 164, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 421], "k": [9, 18, 22, 30, 32, 34, 35, 41, 42, 49, 51, 68, 81, 84, 91, 98, 111, 156, 159, 161, 163, 183, 211, 221, 229, 245, 246, 247, 248, 250, 251, 259, 260, 267, 276, 285, 308, 309, 315, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 365, 368, 370, 371, 374, 376, 377, 378, 389, 404], "low": [9, 42, 66, 71, 94, 104, 134, 140, 149, 156, 162, 163, 164, 166, 172, 174, 175, 176, 233, 245, 246, 247, 248, 250, 251, 285, 308, 312, 313, 314, 315, 316, 317, 318, 373, 386, 390, 392, 403, 404], "fsaverage5": [9, 22, 23, 24, 37, 69, 108, 129, 134, 149, 203, 233, 234, 373, 386, 408], "high": [9, 31, 39, 49, 56, 65, 66, 89, 94, 111, 134, 140, 141, 142, 149, 157, 158, 163, 164, 166, 169, 171, 172, 175, 176, 191, 200, 221, 233, 245, 246, 247, 248, 250, 251, 255, 267, 274, 285, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 373, 386, 390, 392, 403, 404], "finer": [9, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "big_fsaverag": 9, "big_textur": 9, "fine": [9, 89, 111, 128, 149, 151, 176, 196, 249, 252, 253, 308, 314, 317, 390, 421], "470x400": [9, 23, 108], "plot_img_on_surf": [9, 140, 142, 149], "choic": [9, 19, 66, 68, 71, 124, 149, 150, 151, 157, 159, 160, 163, 164, 183, 194, 250, 251, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 392, 423], "orient": [9, 137, 140, 149, 163, 164, 299], "surf_mesh": [9, 373, 379, 380, 381, 382, 386, 388, 407, 408, 421], "freesurf": [9, 22, 23, 69, 108, 129, 134, 146, 149, 165, 203, 233, 379, 380, 381, 382, 388, 406, 407, 408], "medial": [9, 23, 37, 58, 91, 111, 161, 373, 379, 381, 382], "left": [9, 12, 20, 22, 23, 25, 30, 34, 37, 40, 44, 49, 50, 51, 58, 65, 66, 68, 72, 76, 77, 79, 80, 86, 94, 101, 105, 108, 127, 128, 132, 137, 140, 142, 149, 154, 171, 175, 189, 195, 197, 198, 203, 217, 219, 227, 233, 234, 267, 280, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 363, 364, 365, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 386, 402], "view_surf": [9, 22, 134, 137, 149, 384, 385, 386, 387, 423], "view_img_on_surf": [9, 134, 135, 137, 142, 149, 384, 385, 387, 388, 423], "atlas": [9, 10, 21, 22, 46, 58, 59, 110, 111, 114, 141, 142, 149, 152, 155, 164, 166, 169, 174, 175, 176, 181, 196, 197, 198, 205, 210, 214, 239, 311, 312, 313, 315, 316, 360, 361, 365, 376, 377, 380, 381, 383, 384, 385, 387, 423], "output": [9, 16, 22, 33, 34, 36, 41, 44, 51, 52, 54, 56, 58, 66, 67, 69, 80, 94, 108, 112, 113, 120, 121, 126, 132, 144, 146, 149, 150, 155, 160, 164, 169, 171, 173, 175, 176, 181, 182, 184, 185, 186, 187, 188, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 259, 260, 267, 280, 282, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 363, 364, 370, 371, 373, 376, 377, 378, 385, 386, 389, 390, 391, 392, 395, 396, 398, 399, 401, 402, 408, 421, 423], "cell": [9, 16, 22, 36, 49, 52, 53, 54, 58, 62, 75, 77, 166, 169], "open": [9, 16, 22, 52, 54, 58, 89, 91, 92, 98, 108, 111, 120, 149, 163, 164, 169, 170, 171, 173, 178, 210, 228, 255, 267, 280, 320, 321, 322, 323, 324, 325, 384, 385, 386, 387, 388, 391, 400, 402, 421, 422, 423], "open_in_brows": [9, 16, 22, 33, 52, 54, 58, 61, 62, 64, 75, 91, 92, 134, 149, 176, 384, 385, 386, 387, 388, 400, 402, 421], "don": [9, 24, 33, 66, 81, 114, 164, 171, 172, 224, 226, 373, 408, 421], "ourselv": 9, "vol_to_surf_kwarg": [9, 142, 149, 386], "allow": [9, 20, 24, 40, 48, 51, 58, 63, 89, 99, 100, 101, 102, 113, 121, 128, 130, 135, 137, 141, 142, 145, 146, 149, 150, 156, 163, 164, 165, 167, 169, 176, 181, 182, 183, 211, 219, 230, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 270, 280, 282, 305, 308, 311, 312, 313, 314, 315, 316, 317, 318, 375, 389, 390, 391, 392], "grain": [9, 70, 111, 196, 249], "interpol": [9, 24, 40, 41, 44, 54, 66, 75, 84, 126, 149, 224, 299, 300, 301, 370, 371, 377, 378, 385, 404, 408], "volumetr": [9, 23, 165, 174, 328], "avoid": [9, 52, 53, 54, 58, 71, 132, 137, 146, 149, 161, 163, 164, 166, 174, 245, 246, 247, 248, 255, 280, 282, 289, 294, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 403, 421], "neighbor": [9, 37, 49, 94, 137, 149, 170, 249, 370, 371, 377, 378, 385, 390, 391, 397, 408], "nearest": [9, 40, 41, 44, 49, 66, 75, 84, 111, 137, 146, 149, 169, 224, 299, 300, 301, 370, 371, 377, 378, 385, 391, 397, 401, 408], "radiu": [9, 36, 37, 44, 55, 58, 61, 100, 124, 149, 160, 165, 169, 176, 209, 249, 318, 408, 423], "achiev": [9, 15, 55, 71, 93, 156, 163, 171, 175, 176, 185], "destrieux": [9, 22, 23, 111, 119, 129, 140, 147, 149, 195, 203, 421], "fetch_atlas_destrieux_2009": [9, 151], "legacy_format": [9, 17, 21, 42, 43, 47, 58, 75, 76, 77, 79, 80, 81, 105, 106, 144, 149, 189, 195, 196, 207, 208, 209, 217, 218, 219, 228], "n_sampl": [9, 44, 47, 77, 81, 102, 105, 106, 181, 182, 183, 245, 246, 247, 248, 250, 251, 252, 253, 267, 280, 285, 311, 314, 317, 328, 389, 391, 397, 403, 404, 408], "symmetric_cmap": [9, 22, 135, 149, 379, 384, 385, 386, 388, 421], "330": [9, 27, 33, 36, 41, 42, 44, 102], "713": [9, 33], "plot_3d_map_to_surface_project": [9, 27, 142, 149, 386], "refer": [10, 19, 46, 48, 59, 66, 69, 78, 93, 94, 98, 106, 110, 111, 112, 113, 120, 121, 122, 127, 135, 142, 144, 145, 146, 149, 156, 160, 164, 165, 166, 168, 169, 174, 175, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 421, 423], "dataset_ho": 10, "fetch_atlas_harvard_oxford": [10, 21, 56, 91, 124, 145, 149, 151, 164, 198, 393], "cort": [10, 21, 56, 91, 151, 197, 198], "maxprob": [10, 56, 91, 152, 197, 198, 423], "thr25": [10, 56, 91, 151, 197, 198], "2mm": [10, 21, 56, 91, 120, 143, 149, 151, 161, 196, 197, 198], "dataset_ju": 10, "fetch_atlas_juelich": [10, 143, 145, 149, 197], "thr0": [10, 197, 198], "1mm": [10, 120, 143, 149, 197, 198, 201, 238, 239, 241, 321], "atlas_ho_filenam": 10, "atlas_ju_filenam": 10, "roi": [10, 17, 21, 23, 25, 28, 33, 45, 56, 58, 83, 86, 88, 91, 96, 99, 110, 111, 114, 129, 137, 140, 149, 156, 171, 173, 195, 201, 207, 208, 209, 213, 224, 245, 290, 292, 295, 297, 298, 302, 303, 311, 315, 317, 368, 370, 377, 378, 380, 381, 383, 421, 423], "locat": [10, 15, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 47, 49, 52, 53, 54, 55, 56, 58, 70, 75, 77, 89, 91, 92, 94, 95, 101, 102, 105, 108, 134, 143, 149, 163, 166, 172, 174, 176, 182, 185, 191, 207, 209, 210, 225, 227, 249, 250, 251, 252, 253, 267, 270, 280, 286, 312, 313, 314, 315, 316, 317, 318, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 390, 392, 421], "fsl": [10, 11, 36, 49, 62, 79, 86, 94, 143, 144, 146, 149, 174, 197, 198, 296], "harvardoxford": 10, "0x7f34e89b04f0": 10, "0x7f34f0747100": 10, "view_typ": [10, 50, 87, 88, 140, 149, 154, 376, 377], "img_plot": [10, 11], "577": [10, 33, 58], "int": [10, 11, 23, 36, 40, 41, 42, 48, 49, 50, 57, 62, 68, 77, 78, 79, 84, 86, 94, 95, 100, 101, 103, 105, 146, 149, 154, 164, 182, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260, 267, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 284, 286, 291, 297, 308, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 363, 364, 365, 368, 370, 371, 374, 376, 377, 378, 379, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 392, 397, 400, 401, 402, 403, 405, 408], "due": [10, 11, 34, 36, 39, 49, 66, 71, 79, 86, 94, 120, 137, 143, 144, 145, 146, 149, 153, 157, 159, 164, 166, 172, 189, 250, 251, 421], "deal": [10, 11, 36, 49, 68, 79, 86, 94, 113, 118, 140, 149, 166, 314], "int64": [10, 11, 36, 49, 79, 86, 94, 101, 146, 149, 174, 389, 391], "compat": [10, 11, 36, 49, 72, 79, 86, 94, 121, 124, 144, 146, 149, 159, 164, 165, 197, 198, 267, 280, 282, 292, 307, 311, 312, 313, 314, 315, 316, 317, 318, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 366, 392, 404], "int32": [10, 11, 36, 49, 79, 84, 86, 94, 146, 149, 174, 295, 312, 313, 314, 315, 316, 317, 318], "new_img_lik": [10, 11, 36, 94, 107, 137, 146, 149, 175], "roi_img": [10, 70, 377], "affin": [10, 40, 43, 49, 56, 71, 83, 89, 91, 93, 94, 96, 110, 128, 143, 149, 169, 173, 176, 245, 246, 247, 248, 250, 251, 252, 253, 267, 280, 285, 286, 287, 288, 290, 295, 296, 297, 298, 299, 300, 301, 303, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 329, 331, 332, 383, 390, 395, 398, 399, 408, 410, 423], "47": [10, 27, 33, 36, 42, 43, 48, 91, 98, 99, 102, 109, 111, 189, 194, 195, 214, 239], "380": [10, 27, 33, 36, 42, 44, 102], "160": [10, 27, 33, 36, 41, 42, 44, 58, 84, 102, 105, 111, 158, 207, 247, 248, 408], "plot_atla": [10, 27], "common": [11, 49, 66, 68, 71, 94, 100, 129, 137, 143, 145, 149, 150, 156, 159, 161, 163, 164, 166, 168, 173, 175, 185, 194, 292, 300, 301, 305, 314, 323, 325, 423], "qualiti": [11, 62, 70, 77, 105, 111, 134, 149, 164, 165, 166, 172, 176, 189, 221, 312, 315, 364, 390], "mri": [11, 41, 56, 60, 73, 94, 100, 110, 111, 113, 144, 149, 164, 165, 166, 167, 169, 171, 174, 189, 191, 201, 210, 214, 228, 269, 308, 309], "known": [11, 33, 34, 100, 140, 156, 157, 161, 164, 166, 201, 257, 259, 260, 267, 364], "power": [11, 56, 58, 75, 77, 79, 111, 113, 119, 128, 140, 149, 150, 157, 158, 162, 169, 174, 176, 207, 208, 308, 309, 364], "grayplot": [11, 140, 149, 364], "plot_carpet": [11, 27, 140, 141, 145, 146, 149, 421], "adhd_dataset": [11, 61, 165], "fetch_adhd": [11, 61, 124, 149], "n_subject": [11, 23, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 75, 76, 77, 78, 79, 80, 81, 85, 89, 91, 92, 95, 99, 104, 105, 106, 124, 128, 149, 154, 163, 176, 181, 182, 183, 185, 189, 190, 210, 218, 219, 222, 228, 234, 244], "infer": [11, 49, 62, 65, 76, 79, 84, 100, 102, 111, 166, 168, 169, 262, 270, 282, 300, 307, 328, 364], "often": [11, 30, 32, 35, 36, 43, 48, 86, 92, 94, 113, 155, 156, 157, 161, 166, 169, 171, 174, 175, 176, 257, 259, 260], "overwrit": [11, 56, 224, 226, 329, 331, 332], "particular": [11, 15, 33, 66, 87, 98, 114, 123, 144, 149, 151, 159, 161, 163, 171, 172, 174, 226, 245, 246, 247, 248, 257, 259, 260, 274, 305, 408], "field": [11, 44, 114, 137, 149, 166, 169, 174, 224, 245, 246, 247, 248, 252, 253, 268, 270, 300, 305, 306, 314, 317, 390, 407, 408], "explicit": [11, 48, 60, 72, 73, 110, 137, 143, 149, 164, 169, 171, 212, 226, 264, 267, 283, 297, 309, 378, 383, 404], "0010042": 11, "0010042_rest_tshift_rpi_voreg_mni": 11, "build": [11, 18, 41, 46, 49, 50, 51, 58, 71, 100, 110, 112, 120, 121, 129, 149, 152, 157, 159, 161, 166, 174, 176, 267, 390, 423], "mask_img": [11, 25, 29, 32, 33, 34, 35, 36, 39, 40, 41, 44, 49, 52, 53, 54, 56, 58, 64, 66, 67, 70, 75, 89, 91, 92, 98, 102, 103, 113, 131, 135, 139, 140, 144, 147, 149, 156, 161, 175, 176, 236, 249, 262, 267, 270, 280, 283, 284, 285, 291, 304, 312, 313, 314, 315, 316, 317, 318, 319, 326, 327, 362, 364, 373, 391, 392, 394, 395, 396, 397, 398, 399, 408], "compute_epi_mask": [11, 25, 70, 89, 175, 176, 245, 246, 247, 248, 252, 253, 314, 317, 390], "1434": 11, "futurewarn": [11, 47, 48, 50, 51, 54, 56, 87, 193, 194, 202], "current": [11, 47, 49, 50, 51, 52, 54, 56, 64, 68, 86, 146, 149, 161, 163, 164, 169, 172, 176, 185, 193, 194, 202, 228, 229, 255, 305, 307, 311, 312, 313, 314, 315, 316, 317, 318, 379, 381, 382, 385, 392], "incorrectli": [11, 47, 50, 51, 54, 56], "popul": [11, 47, 50, 51, 54, 56, 108, 111, 150, 165, 182, 221, 312, 313, 314, 315, 316, 317, 318, 404], "std": [11, 30, 32, 44, 47, 50, 51, 54, 56, 89, 104, 312, 313, 314, 315, 316, 317, 318, 404], "behavior": [11, 31, 34, 35, 47, 50, 51, 54, 56, 75, 77, 87, 98, 111, 113, 121, 124, 131, 141, 146, 147, 149, 156, 157, 159, 160, 164, 169, 173, 176, 193, 194, 202, 221, 311, 312, 313, 314, 315, 316, 317, 318, 392, 423], "releas": [11, 26, 47, 50, 51, 54, 56, 87, 111, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 193, 201, 214, 215, 221, 234, 285], "clean": [11, 40, 43, 48, 49, 52, 53, 54, 56, 58, 70, 103, 111, 120, 121, 127, 133, 134, 137, 141, 142, 144, 149, 172, 175, 176, 181, 252, 253, 267, 285, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 364, 390, 392], "detrend": [11, 33, 40, 41, 49, 51, 52, 53, 54, 55, 56, 58, 61, 89, 91, 92, 94, 99, 100, 113, 118, 134, 142, 144, 149, 175, 176, 252, 253, 285, 291, 312, 313, 314, 315, 316, 317, 318, 364, 390, 392, 404, 405], "grai": [11, 38, 40, 41, 42, 43, 75, 89, 134, 149, 161, 168, 170, 228, 245, 246, 247, 248, 252, 253, 314, 317, 363, 364, 390, 408], "matter": [11, 24, 42, 43, 56, 66, 75, 89, 127, 140, 143, 149, 156, 161, 163, 164, 168, 170, 175, 176, 210, 214, 215, 228, 237, 238, 239, 240, 241, 245, 246, 247, 248, 252, 253, 308, 314, 317, 321, 324, 390, 408], "white": [11, 24, 40, 42, 56, 66, 75, 89, 125, 140, 142, 143, 149, 163, 175, 176, 210, 214, 228, 233, 238, 239, 240, 241, 245, 246, 247, 248, 252, 253, 308, 314, 317, 321, 324, 379, 380, 381, 382, 385, 386, 388, 390, 407, 408], "cerebrospin": [11, 56, 214, 308], "fluid": [11, 56, 214, 308], "icbm152": [11, 143, 149, 169, 214, 215, 238, 239, 241], "fetch_icbm152_2009": [11, 21, 75, 215, 239], "atlas_img": [11, 53], "gm": [11, 21, 89, 143, 149, 176, 214, 215, 245, 246, 247, 248, 252, 253, 314, 317, 321, 324, 390], "wm": [11, 21, 56, 89, 143, 149, 176, 214, 245, 246, 247, 248, 252, 253, 309, 314, 317, 321, 324, 390], "csf": [11, 21, 56, 210, 214, 308, 309], "map_label": 11, "atlas_data": [11, 20], "get_fdata": [11, 80, 137, 149, 174], "discrete_vers": 11, "argmax": 11, "max": [11, 30, 34, 42, 44, 49, 53, 55, 57, 58, 70, 80, 84, 88, 102, 103, 105, 111, 142, 149, 163, 181, 300, 301, 328, 332, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 363, 364, 368, 370, 371, 373, 376, 377, 378, 379, 382, 385, 386, 388], "discrete_atlas_img": 11, "01_plot": [11, 142, 149, 386], "subplot": [11, 12, 24, 38, 40, 41, 43, 44, 49, 51, 57, 63, 65, 66, 68, 70, 79, 80, 94, 100, 101, 105, 120, 149, 369, 379, 380, 381, 382], "figsiz": [11, 12, 18, 25, 30, 34, 35, 40, 42, 44, 48, 51, 57, 61, 62, 63, 65, 66, 68, 72, 79, 91, 94, 99, 100, 101, 105, 106, 147, 149, 175, 375], "mask_label": [11, 364], "592": [11, 33, 37, 84], "cast": [11, 84, 124, 137, 149, 176, 191, 298], "float32": [11, 33, 84, 176, 286, 295, 312, 313, 314, 315, 316, 317, 318], "aux": 11, "coerc": 11, "atlas_valu": 11, "013": [11, 27, 41], "1036": [11, 27], "hcp": [12, 26, 111, 221], "workbench": 12, "cm": [12, 19, 20, 38, 41, 42, 44, 50, 53, 58, 102, 134, 149, 154, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 368, 374, 375, 376, 377, 378, 384, 385, 386, 388, 421], "_cmap_d": 12, "nilearn_cmap": 12, "nmap": 12, "outer": [12, 89, 408], "arang": [12, 22, 30, 32, 33, 34, 48, 51, 63, 66, 69, 71, 94, 108], "ones": [12, 33, 44, 63, 66, 75, 79, 81, 100, 103, 105, 106, 121, 149, 158, 159, 161, 163, 250, 251, 274, 328, 389], "subplots_adjust": [12, 25, 40, 44, 49, 57, 68, 175], "bottom": [12, 15, 25, 40, 68, 175, 375], "imshow": [12, 38, 40, 41, 44, 84, 151, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 368, 370, 371, 373, 375, 376, 377, 378, 379, 382], "off": [12, 14, 38, 40, 41, 66, 72, 112, 120, 127, 149, 163, 164, 247, 248, 267, 280, 320, 321, 322, 324, 325, 376, 377, 378, 385, 402], "fontsiz": [12, 25, 40, 49, 63, 75, 78, 80, 105, 135, 137, 149, 175, 329, 331, 332, 384, 386, 387, 388], "va": 12, "rotat": [12, 32, 63, 84, 94, 176, 308], "deprecated_cmap": 12, "vega10": 12, "vega20": 12, "vega20b": 12, "vega20c": 12, "spectral": [12, 23, 111, 194], "m_cmap": 12, "m": [12, 30, 37, 40, 41, 49, 64, 66, 67, 71, 75, 100, 102, 111, 127, 149, 161, 162, 164, 172, 191, 195, 200, 201, 202, 204, 205, 207, 208, 211, 213, 221, 229, 233, 257, 259, 260, 282, 328, 422], "datad": 12, "endswith": 12, "_r": 12, "sort": [12, 21, 30, 31, 35, 42, 43, 62, 113, 142, 149, 172, 174, 211, 230, 244, 280, 282, 295, 328], "get_cmap": 12, "aspect": [12, 40, 133, 149, 159, 163, 176, 267, 280, 308, 402], "auto": [12, 127, 142, 149, 176, 252, 253, 295, 312, 313, 314, 315, 316, 317, 318, 330, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 359, 363, 365, 368, 370, 371, 373, 374, 376, 377, 378, 379, 381, 382, 384, 385, 387, 408], "122": [12, 27, 33, 41, 66, 72, 92, 115, 149, 193, 210], "plot_colormap": [12, 27], "_projector": [13, 14, 16, 47, 50, 51, 52, 58, 144, 149], "orthoprojector": [13, 14, 16, 47, 50, 51, 52, 58, 144, 149, 357], "0x7f34f07079d0": 13, "On": [13, 36, 49, 52, 53, 56, 58, 62, 66, 69, 75, 77, 111, 135, 149, 151, 163, 171, 175, 176, 182, 185], "xz": [13, 14, 15, 49, 267, 280, 347, 348, 357, 358, 363, 365, 368, 370, 371, 374, 376, 377, 378, 402, 421], "xzprojector": [13, 14, 351, 353, 357], "0x7f34e81e3cd0": 13, "lyrz": [13, 14, 58, 267, 280, 336, 357, 365, 370, 374, 402, 421], "565": [13, 27, 33], "plot_demo_glass_brain": [13, 27], "part": [14, 15, 49, 51, 55, 69, 89, 91, 111, 120, 137, 143, 146, 149, 157, 163, 164, 165, 170, 175, 181, 187, 188, 197, 198, 214, 219, 245, 246, 247, 248, 252, 253, 282, 283, 304, 305, 306, 308, 314, 317, 320, 321, 322, 324, 325, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 375, 390], "through": [14, 31, 39, 42, 48, 51, 56, 64, 75, 91, 100, 120, 121, 141, 142, 144, 149, 150, 156, 157, 158, 161, 164, 169, 171, 224, 228, 247, 248, 267, 280, 282, 308, 309, 312, 315, 324, 329, 331, 332, 334, 335, 336, 337, 338, 345, 347, 349, 351, 353, 355, 389, 395, 400, 408], "includ": [14, 37, 39, 42, 43, 54, 58, 63, 66, 70, 77, 79, 80, 91, 100, 101, 105, 108, 118, 121, 127, 137, 139, 140, 144, 146, 149, 154, 156, 161, 162, 164, 165, 169, 171, 172, 174, 180, 181, 188, 191, 192, 193, 200, 201, 210, 215, 229, 236, 237, 240, 245, 246, 247, 248, 254, 258, 267, 280, 282, 292, 306, 307, 308, 314, 317, 320, 321, 322, 324, 325, 328, 365, 401, 412, 417], "ortho": [14, 15, 62, 267, 280, 340, 341, 357, 358, 363, 365, 368, 370, 371, 374, 376, 377, 378, 402, 421], "equival": [14, 81, 105, 120, 149, 161, 163, 166, 172, 219, 245, 246, 247, 248, 252, 253, 296, 312, 313, 314, 315, 316, 317, 320, 321, 322, 324, 325, 383, 390], "sagitt": [14, 94, 267, 280, 337, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 363, 365, 368, 370, 371, 374, 376, 377, 378, 402], "cut": [14, 49, 66, 94, 122, 132, 134, 135, 146, 149, 170, 267, 280, 321, 324, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 363, 365, 368, 370, 371, 374, 376, 377, 378, 385, 402, 421], "0x7f34e7454550": 14, "produc": [14, 24, 46, 59, 62, 64, 79, 100, 105, 110, 144, 146, 149, 166, 169, 176, 210, 243, 309, 311, 312, 313, 314, 315, 316, 317, 318, 341, 378, 392, 408, 421], "0x7f34e7c560a0": 14, "black": [14, 40, 104, 121, 149, 164, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 365, 368, 370, 371, 374, 376, 377, 378, 385, 386, 388], "0x7f34e88205b0": 14, "addition": [14, 15, 58, 70, 143, 149, 164, 168, 172, 175, 176, 328, 401], "coron": [14, 94, 267, 280, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 363, 365, 368, 370, 371, 374, 376, 377, 378, 402], "yz": [14, 15, 31, 39, 267, 280, 353, 354, 357, 358, 363, 365, 368, 370, 371, 374, 376, 377, 378, 402, 421], "yzprojector": [14, 347, 351, 357], "0x7f34e89f6910": 14, "yx": [14, 15, 113, 267, 280, 351, 352, 357, 358, 363, 365, 368, 370, 371, 374, 376, 377, 378, 402, 421], "yxprojector": [14, 347, 353, 357], "0x7f34e71f1df0": 14, "saw": 14, "lzr": [14, 53, 267, 280, 337, 357, 365, 370, 374, 402, 421], "enabl": [14, 79, 104, 140, 144, 147, 149, 156, 159, 170, 176, 308, 333, 334, 335, 336, 337, 338, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 422], "lzrprojector": [14, 335, 357], "0x7f34e7152640": 14, "lyrzprojector": [14, 338, 357], "0x7f34e81fc520": 14, "xprojector": [14, 349, 355, 357], "yprojector": [14, 345, 355, 357], "zprojector": [14, 345, 349, 357], "l": [14, 37, 41, 51, 56, 70, 71, 76, 94, 111, 137, 144, 149, 157, 162, 189, 191, 201, 202, 204, 205, 207, 208, 209, 213, 221, 228, 267, 280, 308, 309, 329, 331, 332, 333, 334, 335, 336, 337, 338, 357, 365, 370, 374, 402, 421], "lprojector": [14, 343, 357], "rprojector": [14, 333, 357], "0x7f34e857d7c0": 14, "inherit": [14, 258, 400], "customis": [14, 56, 151, 309], "focu": [14, 79, 151, 153, 163, 392], "add_contour": [14, 18, 130, 137, 149, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 421], "lzryprojector": [14, 336, 357], "sinc": [14, 19, 33, 39, 58, 64, 66, 75, 77, 81, 101, 108, 113, 120, 142, 149, 163, 166, 191, 197, 198, 230, 270, 305, 306, 315, 316, 328, 332, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 395, 396, 421], "empti": [14, 102, 108, 114, 137, 145, 147, 149, 164, 197, 198, 213, 245, 246, 247, 248, 305, 315, 316, 362, 375, 395, 396], "lzry": [14, 267, 280, 338, 357, 365, 370, 374, 402, 421], "choos": [14, 15, 24, 33, 34, 44, 47, 87, 159, 160, 166, 176, 245, 246, 247, 248, 267, 280, 309, 363, 365, 368, 370, 371, 374, 376, 377, 378, 389, 390, 402, 408, 423], "red": [14, 15, 18, 40, 51, 135, 149, 165, 166, 169, 421], "demonstr": [14, 39, 40, 56, 62, 65, 94, 104, 145, 149, 155, 156, 328, 421], "insid": [14, 21, 24, 34, 49, 55, 98, 159, 181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 285, 291, 305, 311, 312, 313, 314, 315, 316, 317, 318, 364, 376, 377, 380, 381, 389, 390, 391, 392, 408], "kei": [14, 43, 54, 58, 66, 79, 113, 114, 147, 149, 151, 164, 171, 174, 191, 192, 193, 194, 197, 198, 205, 214, 220, 224, 245, 246, 247, 248, 254, 258, 263, 267, 274, 276, 280, 282, 306, 307, 328, 339, 364, 373, 386], "vari": [14, 34, 66, 94, 95, 143, 149, 153, 159, 163, 171, 182, 183, 185, 286], "lr": [14, 267, 280, 334, 357, 365, 370, 374, 402, 421], "lrprojector": [14, 357], "ad": [14, 15, 20, 21, 30, 40, 68, 69, 84, 120, 121, 130, 131, 141, 143, 144, 145, 146, 149, 159, 163, 164, 165, 172, 200, 201, 245, 246, 247, 248, 250, 251, 282, 289, 300, 304, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 328, 329, 331, 332, 363, 364, 365, 368, 370, 371, 374, 376, 377, 378, 385, 392, 423], "chang": [14, 19, 26, 31, 40, 42, 50, 51, 58, 62, 63, 68, 78, 80, 100, 102, 105, 106, 116, 157, 159, 163, 164, 166, 172, 173, 181, 182, 183, 233, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 270, 275, 280, 294, 298, 300, 303, 304, 311, 312, 313, 314, 315, 316, 317, 318, 319, 328, 373, 379, 381, 382, 386, 388, 389, 390, 391, 392, 395, 396, 398, 401, 404, 422, 423], "lyr": [14, 267, 280, 335, 357, 365, 370, 374, 402, 421], "lyrprojector": [14, 337, 357], "draw": [14, 15, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 367, 408], "thick": [14, 47, 142, 149, 205, 233, 376, 377, 379, 382, 388, 406, 408], "width": [14, 32, 51, 66, 94, 169, 176, 245, 246, 247, 248, 252, 253, 267, 280, 282, 302, 312, 313, 314, 315, 316, 317, 318, 319, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 368, 370, 371, 374, 375, 376, 377, 378, 384, 390, 392, 394, 400, 402], "linewidth": [14, 18, 21, 42, 43, 48, 50, 61, 91, 376, 377, 384], "enough": [14, 58, 156, 163, 171, 176, 300], "unlik": [14, 20, 161, 166, 174, 309], "upper": [14, 40, 163, 257, 259, 260, 322, 325, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 368, 370, 371, 373, 374, 376, 377, 378, 379, 382, 386, 388], "bound": [14, 84, 89, 130, 137, 149, 175, 252, 300, 329, 331, 332, 363, 364, 368, 370, 371, 373, 374, 376, 377, 378, 379, 382, 386, 388], "kept": [14, 114, 147, 149, 187, 197, 198, 245, 246, 247, 248, 284, 285, 302, 320, 321, 322, 323, 324, 325, 326, 392, 394, 404], "infin": 14, "inf": [14, 54, 103, 285, 313, 316, 319, 322, 404], "391": [14, 27, 33], "plot_demo_glass_brain_extens": [14, 27], "techniqu": [15, 44, 111, 154, 155, 156, 157, 158, 159, 163, 169, 171, 176, 392], "essenti": [15, 68, 80, 169], "what": [15, 56, 66, 108, 145, 157, 163, 167, 172, 174, 176, 182, 254, 258, 291, 305, 405, 421, 423], "shown": [15, 21, 40, 54, 66, 70, 94, 114, 142, 149, 150, 155, 156, 165, 166, 202, 309, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 373, 374, 377, 384, 386, 388], "subclass": [15, 358], "implement": [15, 48, 49, 56, 66, 68, 98, 122, 129, 131, 137, 140, 141, 144, 145, 149, 150, 153, 154, 155, 157, 159, 161, 162, 163, 164, 169, 171, 172, 177, 197, 198, 245, 246, 249, 250, 251, 255, 257, 262, 267, 269, 271, 272, 273, 274, 277, 278, 279, 280, 282, 291, 308, 309, 328, 329, 330, 332, 342, 379, 381, 382, 392, 404, 405, 418], "interact": [15, 22, 47, 52, 54, 58, 100, 134, 135, 139, 144, 149, 152, 154, 164, 169, 170, 171, 384, 385, 387, 423], "precis": [15, 41, 52, 57, 61, 91, 121, 149, 150, 153, 154, 163, 171, 176, 181, 182, 183, 185, 186, 219, 245, 247, 257, 259, 260, 282, 328], "overlai": [15, 20, 21, 50, 154, 175, 385, 423], "tile": [15, 135, 149, 344, 358, 363, 368, 371, 376, 377, 378, 402, 421], "mosaic": [15, 141, 149, 339, 358, 363, 368, 371, 376, 377, 378, 402, 421], "wherea": [15, 49, 143, 149, 153, 157, 175, 323, 325, 326, 390], "mni": [15, 48, 52, 54, 66, 69, 93, 101, 108, 111, 114, 127, 137, 140, 146, 149, 151, 168, 169, 171, 175, 176, 191, 193, 199, 207, 208, 209, 214, 238, 239, 241, 245, 246, 247, 248, 287, 318, 321, 324, 363, 365, 368, 370, 371, 376, 377, 378, 384, 385, 387, 402, 421], "accordingli": [15, 144, 149, 305], "help": [15, 33, 58, 67, 94, 130, 134, 135, 149, 151, 157, 165, 176, 185, 422, 423], "haxby_anat_filenam": [15, 16], "haxby_mask_filenam": [15, 16], "haxby_func_filenam": [15, 16], "xyz": [15, 299, 339, 344, 346, 350, 356], "integ": [15, 84, 94, 124, 128, 137, 141, 144, 146, 149, 169, 174, 176, 183, 185, 189, 191, 193, 195, 197, 198, 200, 201, 204, 205, 224, 226, 250, 251, 252, 253, 267, 286, 320, 321, 322, 324, 325, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 368, 370, 371, 376, 377, 378, 380, 381, 393, 398, 399, 402], "0x7f34e8477700": 15, "zslicer": [15, 70, 88, 346, 350, 358], "rather": [15, 54, 66, 94, 100, 114, 127, 129, 131, 133, 137, 142, 144, 149, 150, 163, 164, 174, 175, 182, 191, 224, 226, 252, 253, 282, 313, 316, 401], "impli": [15, 141, 149, 163, 181, 300, 319], "maximum": [15, 66, 79, 89, 92, 94, 104, 137, 149, 161, 169, 176, 181, 182, 183, 185, 190, 197, 198, 224, 234, 245, 246, 247, 248, 252, 253, 254, 255, 258, 267, 276, 280, 282, 284, 302, 304, 312, 313, 314, 315, 316, 317, 318, 319, 332, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 370, 390, 392, 394, 395, 421], "0x7f34df3c3bb0": 15, "0x7f34df37d940": 15, "yslicer": [15, 92, 346, 356, 358], "again": [15, 49, 91, 103, 113, 164, 168, 171, 224, 226], "0x7f34e80c01f0": 15, "0x7f34e7973a90": 15, "stand": [15, 44, 137, 149, 169, 175, 421], "thu": [15, 31, 34, 39, 102, 104, 151, 156, 157, 158, 161, 162, 163, 169, 175, 176, 247, 248, 249, 250, 251, 255, 289, 309, 328], "xzslicer": [15, 49, 352, 354, 358], "0x7f34e7e1e9a0": 15, "similarli": [15, 55, 94, 174], "yxslicer": [15, 348, 354], "assign": [15, 86, 94, 153, 154, 166, 197, 198, 207, 209, 392, 393, 397], "0x7f34e72cf610": 15, "yzslicer": [15, 39, 348, 352, 358], "0x7f34e7115250": 15, "case": [15, 23, 34, 40, 43, 48, 49, 50, 54, 62, 65, 66, 68, 72, 84, 89, 91, 92, 101, 108, 114, 127, 137, 140, 149, 150, 151, 153, 156, 157, 161, 163, 171, 172, 174, 188, 191, 195, 197, 198, 245, 246, 247, 248, 250, 251, 267, 269, 274, 280, 282, 283, 292, 300, 301, 302, 303, 306, 314, 315, 316, 317, 318, 322, 360, 363, 364, 365, 368, 370, 371, 373, 376, 377, 378, 385, 401, 402, 408, 421], "tiledslic": [15, 339, 341, 358], "0x7f34e71c3730": 15, "situat": [15, 58, 150, 156, 157, 174, 302], "mosaicslic": [15, 341, 344, 358], "0x7f34e84bcfd0": 15, "still": [15, 49, 66, 79, 91, 114, 144, 149, 161, 163, 172, 176, 224, 421], "0x7f34e8652cd0": 15, "tupl": [15, 176, 192, 199, 234, 245, 246, 247, 248, 250, 251, 252, 253, 257, 259, 260, 267, 270, 280, 289, 297, 300, 302, 305, 308, 314, 317, 320, 322, 323, 325, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 368, 371, 375, 376, 377, 378, 385, 390, 395, 402, 407, 408], "0x7f34e8963c40": 15, "interpret": [15, 51, 70, 111, 152, 161, 162, 163, 166, 191, 195, 197, 198, 201, 202, 205, 296, 328, 421, 423], "process": [15, 16, 32, 36, 39, 42, 44, 50, 53, 62, 91, 94, 101, 102, 105, 111, 112, 113, 122, 149, 151, 154, 155, 156, 159, 163, 164, 166, 168, 169, 171, 172, 174, 175, 176, 182, 199, 214, 215, 219, 245, 246, 247, 248, 250, 251, 252, 253, 267, 280, 285, 286, 291, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 390, 391, 392, 398, 399, 404], "mean_haxby_img": [15, 16], "coregistr": [15, 126, 149, 169], "edg": [15, 47, 52, 54, 58, 94, 137, 149, 150, 151, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 365, 375, 384, 423], "being": [15, 89, 94, 120, 121, 134, 137, 144, 147, 149, 150, 163, 166, 169, 172, 252, 274, 307, 313, 316, 323, 325, 364, 379, 381, 382, 386, 392], "outlin": [15, 48, 89, 92, 155, 164, 380, 421], "manual": [15, 16, 19, 32, 34, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 81, 83, 89, 91, 92, 96, 98, 99, 100, 102, 103, 104, 105, 106, 110, 113, 150, 156, 171, 173, 176, 200, 201, 213, 252, 253, 290, 295, 297, 298, 302, 311, 315, 368, 377, 378, 379, 381, 382, 383, 421, 423], "34": [15, 33, 36, 42, 43, 44, 62, 91, 102, 103, 109, 111, 161], "blue": [15, 18, 40, 49, 70, 86], "fill": [15, 21, 62, 68, 94, 101, 108, 129, 137, 143, 149, 163, 176, 300, 301, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 376, 377, 400, 423], "transpar": [15, 23, 137, 149, 176, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 365, 370, 371, 373, 374, 376, 377, 378, 379, 382, 384, 385, 386, 387, 388], "contourf": [15, 21, 48, 50, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "sphere": [15, 36, 37, 46, 55, 59, 110, 139, 142, 149, 160, 176, 181, 207, 208, 210, 233, 311, 318, 360, 365, 374, 375, 379, 380, 381, 382, 383, 384, 388, 407, 408, 421, 423], "marker_color": [15, 40, 55, 61, 100, 135, 137, 149, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 387, 421], "yellow": 15, "third": [15, 66, 81, 154, 276], "marker_s": [15, 40, 55, 61, 100, 135, 137, 149, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 387, 421], "coord": [15, 37, 40, 50, 52, 54, 58, 70, 87, 100, 135, 137, 149, 154, 329, 331, 332, 360, 361, 365, 379, 380, 381, 382, 388, 421], "alter": [15, 141, 149], "bar": [15, 42, 102, 105, 134, 149, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 423], "scalebar": [15, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 421], "scale_": 15, "keyword": [15, 98, 114, 137, 149, 159, 163, 176, 183, 189, 224, 235, 285, 296, 309, 312, 313, 314, 315, 316, 317, 318, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 369, 371, 373, 375, 381, 382, 386, 404], "arg": [15, 245, 246, 247, 248, 311], "scale_s": [15, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "scale_unit": [15, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "built": [15, 33, 42, 48, 121, 149, 166, 172, 245, 246, 247, 248, 390], "extens": [15, 129, 143, 149, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382], "pdf": [15, 55, 68, 102, 111, 146, 149, 161, 162, 194, 195, 201, 202, 204, 207, 213, 221, 228, 233, 285, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 404], "svg": [15, 62, 307, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382], "plot_stat_map_from_displai": 15, "sure": [15, 94, 110, 120, 149, 161, 164, 172, 250, 251, 422], "close": [15, 23, 37, 40, 49, 86, 144, 149, 150, 157, 163, 164, 166, 169, 215, 245, 246, 247, 248, 320, 321, 322, 324, 325, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 397, 421], "508": [15, 27, 33], "911": [15, 27], "plot_demo_more_plot": [15, 27], "easi": [16, 61, 69, 75, 94, 113, 114, 154, 155, 157, 160, 164, 165, 169, 171, 176, 308, 423], "coordin": [16, 19, 22, 23, 40, 49, 52, 54, 70, 94, 100, 111, 113, 119, 126, 129, 131, 132, 134, 140, 144, 146, 149, 152, 154, 163, 165, 166, 176, 199, 207, 208, 209, 233, 253, 287, 300, 318, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 368, 370, 371, 374, 376, 377, 378, 379, 380, 381, 382, 384, 385, 387, 388, 401, 402, 407, 408, 421, 423], "0x7f34e70a5af0": 16, "web": [16, 111, 114, 134, 137, 149, 164, 224, 226, 267, 280, 384, 386, 387, 388, 402, 421], "alwai": [16, 100, 156, 159, 163, 164, 166, 176, 251, 257, 259, 260, 308, 370, 378, 382, 385, 386, 388, 421], "fix": [16, 30, 58, 60, 64, 71, 73, 110, 117, 163, 164, 172, 175, 212, 254, 255, 258, 264, 267, 270, 297, 378, 383], "0x7f34e7185160": 16, "0x7f34e8448310": 16, "overlaid": [16, 71, 89, 92, 140, 142, 149, 376], "0x7f34e857d160": 16, "voxel_wis": 16, "reduc": [16, 29, 33, 34, 44, 49, 66, 79, 87, 94, 100, 133, 134, 137, 141, 149, 158, 162, 163, 164, 169, 176, 183, 228, 247, 248, 252, 253, 308, 309, 312, 315, 379, 381, 382, 386, 389, 390, 391, 395], "0x7f34e7f758e0": 16, "ie": [16, 146, 149, 150, 155, 174, 257, 259, 260, 313, 316, 318], "133": [16, 27, 33, 41], "890": [16, 42, 102], "plot_demo_plot": [16, 27], "modifi": [17, 49, 58, 94, 103, 127, 144, 149, 164, 176, 224, 226, 300, 301, 304, 379, 381, 382, 388, 403, 404], "leav": [17, 29, 33, 156, 161, 289], "unchang": [17, 66, 161, 181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "localizer_dataset": [17, 77, 81, 105, 106], "fetch_localizer_button_task": [17, 127, 149, 218, 219, 421], "localizer_tmap_filenam": 17, "tmap": [17, 79, 217, 219, 421], "localizer_anat_filenam": 17, "0x7f34e8751730": 17, "0x7f34e89b5a00": 17, "0x7f34e84f9d00": 17, "251": [17, 27, 33, 41, 72, 94], "plot_dim_plot": [17, 27], "func_filenam": [18, 25, 30, 31, 32, 33, 35, 48, 50, 53, 55, 58, 91, 92, 102, 104, 154, 175], "z_slice": [18, 42, 105], "facecolor": [18, 32, 40, 42, 106, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 365, 368, 370, 371, 374, 376, 377, 378], "mask_vt_filenam": [18, 94], "mask_house_filenam": 18, "mask_hous": [18, 32, 113, 174, 213], "mask_face_filenam": 18, "mask_fac": [18, 32, 113, 174, 213], "limegreen": 18, "zip": [18, 20, 30, 32, 34, 38, 41, 50, 51, 53, 58, 88, 99, 101, 103, 108, 110, 154, 172, 199, 214], "antialias": 18, "trick": [18, 171], "http": [18, 22, 23, 34, 49, 56, 62, 64, 67, 71, 72, 98, 101, 102, 111, 114, 142, 146, 149, 154, 157, 158, 161, 162, 163, 164, 166, 171, 172, 182, 185, 189, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 239, 245, 246, 247, 248, 252, 254, 258, 259, 260, 282, 285, 308, 309, 328, 364, 386, 387, 391, 392, 397, 404, 405, 421, 422], "sourceforg": 18, "net": [18, 28, 44, 45, 110, 162, 228, 245, 246, 250, 251, 378, 383], "user": [18, 29, 34, 39, 58, 66, 68, 100, 106, 114, 120, 121, 131, 134, 135, 137, 138, 142, 144, 145, 146, 149, 163, 164, 165, 166, 169, 170, 172, 173, 176, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 413, 414, 422], "legend_guid": 18, "httpml": 18, "proxi": 18, "artist": 18, "patch": [18, 40, 41, 49, 172], "rectangl": [18, 40, 49, 84], "p_v": 18, "fc": 18, "p_h": 18, "p_f": 18, "face": [18, 28, 32, 33, 38, 45, 71, 94, 97, 98, 100, 109, 110, 111, 113, 121, 129, 142, 149, 156, 161, 165, 170, 174, 175, 176, 213, 214, 232, 245, 247, 249, 290, 292, 295, 297, 298, 311, 317, 328, 356, 371, 375, 378, 379, 380, 381, 382, 383, 385, 388, 407, 408], "_ax": [18, 21, 48, 50], "70": [18, 21, 30, 32, 33, 36, 42, 43, 44, 48, 50, 63, 102, 105, 111, 161, 202], "kwarg": [18, 58, 121, 137, 149, 189, 285, 309, 311, 312, 313, 314, 315, 316, 317, 318, 324, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 365, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 385, 404], "im": [18, 21, 31, 107], "getattr": [18, 21], "data_2d": [18, 21, 329, 331, 332], "848": [18, 27], "plot_haxby_mask": [18, 27], "fetch_atlas_basc_multiscale_2015": [19, 121, 125, 149], "sym": [19, 188, 193], "resolut": [19, 21, 75, 76, 93, 103, 111, 113, 120, 121, 130, 142, 143, 149, 154, 173, 191, 193, 196, 200, 201, 202, 210, 233, 236, 237, 238, 239, 240, 241, 262, 317, 321, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 373, 386, 392, 423], "197": [19, 33, 41, 193, 292], "444": [19, 33, 67, 73, 193], "networks_64": 19, "networks_197": 19, "networks_444": 19, "itself": [19, 34, 66, 153, 181, 182, 183, 252, 253, 290, 390, 408], "bwr": [19, 53, 135, 149, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 384], "bwr_r": 19, "111": [19, 27, 33, 41, 43, 53, 61, 91], "plot_multiscale_parcel": [19, 27], "compos": [20, 98, 169, 175, 176, 208, 245, 246, 247, 248], "node": [20, 23, 24, 58, 108, 135, 137, 140, 142, 149, 151, 176, 200, 233, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 373, 374, 384, 386, 387, 408, 421], "constitut": [20, 155], "leverag": [20, 140, 149, 170, 171, 245, 246, 390, 422], "less": [20, 48, 49, 50, 56, 66, 69, 77, 79, 88, 94, 100, 114, 134, 135, 142, 149, 161, 163, 164, 166, 172, 258, 304, 359, 423], "fetch_atlas_msdl": [20, 21, 51, 52, 53, 54, 99, 126, 149, 151], "atlas_filenam": [20, 52, 54, 56, 151], "pcc": [20, 23, 51, 55], "dmn": [20, 51, 61], "acc": 20, "pariet": [20, 58, 91, 103, 199], "black_blu": 20, "black_green": 20, "black_pink": 20, "ma": [20, 21, 36, 40, 48, 50, 54, 64, 106], "2820": [20, 21, 48, 50, 54, 102], "element": [20, 21, 48, 49, 50, 54, 127, 146, 149, 155, 161, 169, 181, 187, 188, 191, 245, 246, 247, 248, 249, 285, 302, 311, 312, 313, 314, 315, 316, 317, 318, 324, 373, 392, 398, 404, 408], "nan": [20, 21, 48, 50, 54, 56, 91, 94, 103, 118, 124, 129, 137, 141, 149, 228, 285, 300, 313, 316, 319, 322, 373, 379, 381, 382, 386, 404, 408], "_data": [20, 21], "3rd": [20, 370, 371, 377, 378, 385], "4th": [20, 94, 111, 162, 169, 175, 259, 260, 297, 300, 376], "5th": 20, "6th": 20, "dmn_node": 20, "40": [20, 33, 36, 42, 43, 44, 53, 63, 91, 94, 102, 105, 190, 199, 224, 408], "35": [20, 30, 33, 36, 42, 43, 44, 53, 72, 91, 102, 105, 115, 149, 199, 224], "55": [20, 33, 36, 42, 43, 44, 49, 66, 68, 73, 86, 96, 102, 105, 127, 149], "29": [20, 29, 30, 33, 36, 41, 42, 43, 45, 62, 72, 75, 81, 91, 102, 103, 105, 122, 149], "237": [20, 27, 33, 41], "plot_overlai": [20, 27], "delin": 21, "filled_contour": [21, 50, 154, 376], "continu": [21, 39, 43, 54, 56, 151, 156, 157, 158, 162, 164, 169, 176, 224, 295, 299, 300, 301, 312, 313, 314, 315, 316, 317, 318, 370, 371, 376, 377, 378, 385, 393, 394], "plot_prob_atla": [21, 27, 48, 50, 87, 88, 124, 131, 132, 141, 149, 154, 155, 377, 421], "pick": [21, 154, 163, 166, 169, 215], "randomli": [21, 161], "alreadi": [21, 22, 33, 34, 49, 64, 89, 94, 101, 103, 107, 108, 114, 137, 144, 149, 154, 156, 157, 164, 171, 176, 224, 226, 280, 282, 301, 328, 392], "know": [21, 84, 114, 163, 166, 169, 188, 226], "tune": [21, 31, 32, 34, 39, 43, 89, 128, 149, 151, 156, 157, 159, 163, 166, 252, 253, 308, 314, 317, 390, 421], "harvard": [21, 91, 151, 197, 205, 360, 361], "oxford": [21, 91, 111, 151, 197, 259, 260, 360, 361], "harvard_oxford": 21, "prob": [21, 197, 198, 200, 376], "harvard_oxford_sub": 21, "sub": [21, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 78, 85, 91, 92, 95, 100, 101, 104, 108, 142, 149, 181, 182, 183, 197, 198, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 305, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392, 402], "multi": [21, 28, 41, 42, 43, 45, 46, 48, 58, 59, 100, 110, 111, 150, 151, 152, 154, 160, 163, 171, 174, 175, 176, 177, 182, 183, 185, 193, 199, 210, 213, 232, 252, 267, 311, 314, 316, 317, 361, 365, 375, 383, 423], "dictionari": [21, 23, 33, 46, 59, 66, 69, 101, 104, 108, 110, 111, 114, 141, 149, 152, 156, 157, 169, 170, 176, 181, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 245, 246, 247, 248, 252, 253, 267, 280, 282, 292, 293, 306, 307, 311, 316, 328, 339, 341, 361, 362, 363, 364, 365, 373, 375, 376, 378, 383, 386, 392, 423], "ica": [21, 46, 50, 54, 59, 87, 92, 97, 104, 109, 110, 111, 114, 122, 149, 151, 152, 169, 170, 171, 180, 192, 202, 210, 221, 224, 236, 252, 253, 293, 302, 308, 309, 311, 316, 317, 376, 378, 383, 396, 421, 423], "smith_rsn10": 21, "smith_rsn20": 21, "smith_rsn70": 21, "smith_bm10": 21, "smith_bm20": 21, "smith_bm70": 21, "icbm": [21, 66, 75, 134, 149, 214], "tissu": [21, 169, 204], "allen": [21, 111, 129, 149, 192], "fetch_atlas_allen_2011": [21, 129, 149], "pauli": [21, 111, 200], "subcort": [21, 111, 134, 149, 197, 198, 200, 209], "subcortex": [21, 111, 209], "fetch_atlas_pauli_2017": [21, 134, 137, 149], "difumo": [21, 47, 141, 149, 196], "fetch_atlas_difumo": [21, 47, 141, 149], "resolution_mm": [21, 47, 196, 201], "atlas_typ": 21, "smith2009": 21, "brainmap": [21, 202], "allen2011": 21, "rsn28": [21, 192], "pauli2017": 21, "item": [21, 64, 65, 66, 69, 71, 100, 105, 114, 224, 225, 226, 227, 270, 314, 323, 325], "readi": [21, 61, 75, 113, 128, 149, 155, 164, 172], "302": [21, 27, 33, 41, 115, 149], "1163": [21, 27], "2010": [22, 23, 48, 58, 102, 111, 129, 149, 150, 155, 157, 181, 182, 193, 203, 207, 214, 239, 252], "plot_surf_roi": [22, 23, 129, 131, 133, 137, 141, 149, 379, 421], "pial": [22, 23, 24, 37, 140, 146, 149, 233, 373, 379, 380, 381, 382, 386, 388, 407, 408], "gyri": [22, 23, 111, 203], "sulci": [22, 23, 111, 203], "nomenclatur": [22, 23, 111, 203], "53": [22, 23, 33, 35, 36, 38, 42, 43, 44, 45, 61, 91, 93, 102, 111, 192, 193, 203], "url": [22, 23, 62, 111, 138, 146, 149, 157, 158, 161, 162, 182, 185, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 213, 214, 217, 218, 219, 221, 222, 223, 224, 226, 228, 229, 230, 233, 234, 239, 244, 247, 248, 252, 254, 258, 259, 260, 282, 285, 308, 309, 328, 364, 391, 392, 397, 404, 405], "dx": [22, 23, 71], "doi": [22, 23, 56, 71, 72, 76, 111, 114, 157, 158, 161, 162, 181, 189, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 213, 214, 219, 221, 222, 223, 224, 226, 228, 229, 233, 234, 239, 247, 248, 252, 253, 262, 282, 285, 308, 309, 328, 364, 391, 397, 404, 405], "org": [22, 23, 34, 36, 49, 52, 53, 56, 58, 62, 71, 72, 75, 77, 98, 111, 114, 158, 161, 162, 163, 164, 166, 171, 172, 182, 185, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 233, 234, 239, 245, 246, 247, 248, 282, 285, 308, 309, 328, 364, 387, 391, 397, 404, 405], "1016": [22, 23, 56, 76, 102, 109, 111, 157, 158, 161, 162, 193, 195, 196, 199, 203, 208, 209, 214, 219, 222, 223, 239, 247, 248, 252, 259, 260, 262, 282, 308, 309, 328, 364, 405], "010": [22, 23, 41, 108, 109, 111, 203, 252], "map_left": [22, 23, 203, 421], "sulcal": [22, 23, 111, 195, 233, 373, 379, 381, 382, 386, 388], "depth": [22, 23, 24, 111, 140, 149, 195, 233, 373, 379, 381, 382, 386, 388, 408], "shade": [22, 379, 381, 382, 388], "pial_left": [22, 23, 69, 108, 233, 373, 386, 408], "infl_left": [22, 23, 69, 108, 233, 373, 386, 421], "sulc_left": [22, 23, 69, 108, 233, 373, 386], "gii": [22, 23, 308, 309, 379, 380, 381, 382, 388, 406, 407, 408], "roi_map": [22, 23, 380, 381], "dark": [22, 23, 379, 381, 382, 386, 388], "400x400": [22, 23], "posterior": [22, 23, 55, 58, 61, 91, 103, 131, 149, 165, 207, 209, 379, 381, 382], "explicitli": [22, 66, 67, 107, 134, 146, 149, 156, 224, 307, 309, 390], "angl": [22, 24, 84, 121, 149, 253, 379, 381, 382], "elev": [22, 379, 381, 382], "azim": [22, 379, 381, 382], "appropri": [22, 100, 111, 164, 176, 191, 210, 214, 239, 267, 269, 274, 307, 393], "ot": [22, 161], "convent": [22, 72, 120, 146, 149, 164, 172, 243, 303, 305, 306, 363, 368, 370, 378, 389, 391], "vertic": [22, 37, 41, 66, 72, 80, 129, 149, 150, 219, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 379, 380, 381, 382, 388], "vert": 22, "map_": 22, "rr": 22, "load_surf_mesh": [22, 37, 129, 146, 149, 421], "pial_": [22, 37], "unknown": [22, 56, 91, 156, 191, 192, 205], "str": [22, 77, 79, 100, 143, 149, 164, 181, 182, 183, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 228, 229, 230, 231, 232, 233, 234, 235, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 269, 270, 274, 280, 281, 282, 284, 285, 296, 300, 301, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 398, 400, 404, 406, 407, 408], "omit": 22, "append": [22, 33, 34, 40, 41, 44, 50, 51, 53, 64, 71, 100, 103, 107, 108, 154], "synthet": [22, 57, 84, 164], "n_parcel": [22, 49, 390], "corr": [22, 372], "n_parcels_hemi": 22, "plot_connectom": [22, 47, 50, 51, 52, 53, 54, 58, 116, 118, 120, 126, 127, 132, 135, 137, 146, 149, 151, 154, 384, 387, 421], "edge_threshold": [22, 47, 50, 53, 54, 58, 135, 137, 149, 154, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 384, 421], "gist_ncar": [22, 133, 149, 364, 377, 381, 421], "view_connectom": [22, 52, 54, 58, 134, 135, 137, 142, 149, 385, 387, 421], "826": [22, 27], "plot_surf_atla": [22, 27], "subset": [23, 36, 44, 94, 157, 161, 164, 244, 257, 270, 292, 308], "enhanc": [23, 64, 66, 67, 68, 111, 169, 172, 234, 255, 282, 328], "nki": [23, 111, 129, 149, 234], "rockland": [23, 111, 234], "fcon_1000": [23, 190, 234], "nitrc": [23, 190, 194, 202, 234], "indi": [23, 190, 234], "nooner": [23, 111, 234], "2012": [23, 44, 100, 111, 146, 149, 151, 156, 162, 163, 171, 194, 222, 234, 308, 309], "645m": 23, "102": [23, 33, 40, 41, 43, 105, 111, 234, 309], "com": [23, 111, 146, 149, 158, 161, 162, 164, 191, 193, 194, 195, 196, 199, 201, 203, 204, 209, 214, 219, 221, 222, 223, 233, 239, 247, 248, 285, 308, 309, 328, 364, 404, 405, 421, 422], "fliem": 23, "nki_nilearn": 23, "dale": [23, 111, 195, 203, 233], "1999": [23, 111, 214, 233], "fischl": [23, 111, 195, 201, 203, 205, 233], "cingul": [23, 55, 58, 61, 91, 165], "pearson": [23, 111, 254, 258, 372], "product": [23, 55, 79, 163], "moment": [23, 113], "correl": [23, 26, 42, 43, 46, 47, 52, 59, 61, 71, 99, 100, 110, 111, 154, 156, 163, 166, 169, 176, 181, 184, 186, 188, 210, 221, 252, 308, 309, 311, 317, 318, 341, 372, 378, 421], "acceler": [23, 111, 234], "pace": [23, 111, 234], "psychiatri": [23, 111, 234], "frontier": [23, 49, 111, 153, 189, 192, 224, 226, 234], "neurosci": [23, 49, 66, 72, 111, 153, 161, 169, 171, 189, 192, 202, 219, 221, 228, 234, 423], "152": [23, 33, 41, 56, 111, 169, 234], "3389": [23, 111, 114, 189, 192, 224, 226, 234], "fnin": [23, 111, 234], "00152": [23, 111, 234], "segment": [23, 56, 111, 154, 169, 199, 205, 214, 228, 308, 392, 394, 408], "reconstruct": [23, 28, 40, 45, 110, 111, 176, 181, 188, 223, 252, 253, 311, 314, 317, 383, 398, 399], "1006": [23, 111, 191], "nimg": [23, 111, 191], "1998": [23, 191], "0395": 23, "ii": [23, 111, 219, 309], "flatten": [23, 24, 40, 41, 70, 181, 187, 188], "0396": 23, "nki_dataset": 23, "fetch_surf_nki_enhanc": [23, 129, 137, 149], "fsaverag5": 23, "func_left": [23, 234], "flat_left": [23, 233], "curv_left": [23, 233], "nki_enhanced_surfac": 23, "a00028185": 23, "a00028185_left_preprocessed_fwhm6": 23, "timeseri": [23, 26, 48, 50, 58, 89, 104, 128, 141, 149, 150, 154, 196, 221, 285, 309, 312, 313, 314, 315, 316, 317, 318, 404, 405], "pcc_region": 23, "g_cingul": 23, "post": [23, 51, 66, 94, 111, 122, 149, 175, 181, 215, 392], "dorsal": [23, 379, 381, 382], "pcc_label": 23, "seed_timeseri": 23, "scipi": [23, 44, 56, 62, 68, 76, 79, 94, 101, 103, 107, 108, 118, 120, 127, 131, 132, 134, 137, 142, 144, 146, 149, 163, 171, 175, 215, 237, 240, 294, 304, 320, 321, 322, 324, 325, 375, 403], "stat_map": [23, 283, 373, 381, 382], "pearsonr": 23, "wall": [23, 163], "_stats_pi": 23, "4781": 23, "constantinputwarn": 23, "constant": [23, 31, 66, 163, 175, 245, 246, 247, 248, 250, 251, 282, 328, 403, 421], "pcc_map": 23, "flat": [23, 41, 121, 149, 175, 233], "mesh": [23, 37, 69, 108, 121, 129, 134, 137, 142, 146, 149, 165, 170, 233, 373, 379, 380, 381, 382, 386, 388, 406, 407, 408, 423], "area": [23, 32, 64, 67, 80, 94, 142, 149, 154, 156, 161, 165, 166, 169, 170, 176, 204, 214, 233, 289, 329, 331, 332, 341, 344, 379, 382, 388], "yield": [23, 31, 39, 49, 77, 79, 84, 114, 137, 140, 144, 149, 155, 156, 157, 158, 161, 162, 165, 166, 224, 249, 253, 263, 267, 269, 274, 283, 304, 389], "75": [23, 30, 33, 36, 40, 42, 43, 66, 72, 91, 102, 105, 111, 192, 328], "nicer": 23, "bg_map_resc": 23, "unthreshold": [23, 81, 111, 114, 169, 192, 224, 226], "slightli": [23, 48, 49, 66, 84, 112, 131, 149, 157, 181, 183, 300, 301], "captur": [23, 51, 58, 66, 103, 151, 152, 153, 156, 181, 219], "half": [23, 49, 66, 94, 137, 149, 163, 169, 176, 245, 246, 247, 248, 252, 253, 267, 280, 282, 302, 312, 313, 314, 315, 316, 317, 318, 319, 379, 381, 382, 386, 390, 392, 394], "after": [23, 28, 32, 34, 40, 45, 50, 56, 66, 67, 77, 94, 98, 100, 105, 110, 145, 149, 153, 154, 156, 161, 163, 164, 165, 166, 169, 172, 175, 176, 185, 213, 245, 246, 247, 248, 252, 267, 275, 276, 280, 285, 289, 292, 297, 308, 309, 316, 317, 393, 396, 400, 401, 402], "720": [23, 27, 33, 36, 42, 102], "measur": [24, 29, 34, 48, 49, 51, 58, 66, 77, 99, 100, 105, 111, 130, 140, 149, 150, 151, 153, 154, 160, 161, 163, 166, 169, 171, 176, 221, 309, 372, 374, 389, 408, 421, 423], "toi": [24, 104], "drawn": [24, 66, 94, 267, 280, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 368, 371, 376, 377, 378, 385, 402, 408], "around": [24, 34, 84, 86, 133, 135, 149, 163, 164, 183, 282, 289, 300, 318, 329, 331, 332, 408], "spread": [24, 98, 159, 319], "nest": [24, 29, 42, 140, 149, 159, 181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392, 408], "along": [24, 25, 66, 84, 86, 100, 121, 137, 142, 149, 155, 162, 164, 169, 175, 176, 250, 251, 267, 275, 300, 302, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 329, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 347, 349, 351, 353, 355, 358, 359, 363, 368, 371, 372, 376, 377, 378, 392, 393, 404, 408, 421], "ball": [24, 119, 149, 161, 163, 169, 249, 408], "too": [24, 34, 38, 40, 42, 52, 54, 56, 71, 86, 114, 157, 163, 224, 226, 421], "almost": [24, 39, 49, 104, 163, 176], "ident": [24, 69, 80, 163, 285, 302, 394, 404], "most": [24, 33, 40, 42, 43, 49, 61, 75, 94, 100, 131, 134, 149, 156, 157, 158, 159, 161, 163, 164, 166, 172, 175, 176, 267, 269, 274, 379, 381, 382, 388, 390, 392, 394, 421], "recommend": [24, 89, 92, 100, 103, 120, 135, 136, 137, 142, 144, 146, 149, 156, 161, 166, 171, 174, 176, 308, 392, 404, 408, 422], "n_z": 24, "n_t": 24, "mgrid": [24, 84], "triangul": 24, "tri": [24, 51, 157, 224, 363, 375, 389], "pi": [24, 84, 254, 258], "sin": [24, 84], "asarrai": [24, 41, 51, 103, 256, 261], "triangl": [24, 408], "inner_mesh": [24, 408], "nested_sample_point": 24, "_sample_locations_between_surfac": 24, "ey": [24, 41, 44, 64, 65, 66, 69, 71, 80, 84, 89, 164, 171, 214], "line_sample_point": 24, "_line_sample_loc": 24, "segment_half_width": 24, "n_point": 24, "ball_sample_point": 24, "_ball_sample_loc": 24, "ball_radiu": 24, "view_init": 24, "67": [24, 33, 36, 42, 43, 44, 48, 102, 118, 149, 192], "plot_trisurf": 24, "scatter": [24, 94, 146, 149, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 374], "sample_point": 24, "043": [24, 27, 41], "plot_surface_projection_strategi": [24, 27], "mean_haxbi": [25, 175], "0x7f34e70aa790": 25, "0x7f34e84f9160": 25, "apply_mask": [25, 175, 314, 317], "masked_data": [25, 99, 175], "timepoint": [25, 175], "150": [25, 33, 36, 41, 42, 44, 102, 105, 111, 175, 364], "And": [25, 41, 150, 165, 172, 175], "ylabel": [25, 30, 32, 42, 48, 49, 55, 57, 58, 65, 66, 175], "intens": [25, 50, 70, 81, 88, 94, 174, 175, 252, 284, 304, 308, 363, 364, 370, 376, 377, 378, 385, 392, 408, 421], "xlim": [25, 30, 175], "95": [25, 30, 31, 33, 36, 42, 43, 44, 91, 93, 102, 105, 143, 149, 175, 257, 259, 260], "282": [25, 27, 33, 41], "1355": [25, 27], "plot_visu": [25, 27], "fetch_megatrawls_netmat": 26, "partial": [26, 48, 52, 99, 150, 154, 181, 186, 221, 309], "300": [26, 33, 36, 41, 42, 44, 55, 61, 70, 100, 102, 201, 209, 221], "eigen": [26, 221], "regress": [26, 30, 31, 39, 40, 44, 55, 56, 111, 113, 124, 134, 140, 141, 142, 146, 149, 151, 156, 160, 161, 162, 164, 165, 166, 169, 189, 245, 246, 247, 248, 251, 253, 254, 259, 260, 267, 280, 308, 309, 312, 313, 314, 315, 316, 317, 318, 404, 423], "netmat": [26, 124, 149], "eigen_regress": [26, 221], "partial_correl": [26, 58, 186, 221], "correlation_matric": [26, 47, 51, 221], "util": [26, 43, 44, 48, 50, 87, 88, 102, 105, 106, 122, 129, 133, 140, 144, 149, 154, 164, 181, 182, 183, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 305, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392, 416], "plot_matrix": [26, 31, 35, 50, 51, 52, 53, 54, 56, 57, 58, 131, 132, 137, 149, 154], "matrix_plot": [26, 50, 58, 63, 80, 100], "325": [26, 33, 41, 50, 58, 193], "layout": [26, 31, 50, 58, 63, 78, 80, 100, 134, 149, 249, 330], "tight": [26, 31, 34, 50, 58, 63, 78, 80, 100, 163], "tight_layout": [26, 30, 31, 32, 48, 51, 55, 58, 70, 78, 80, 99], "574": [26, 27, 33], "plot_visualize_megatrawls_netmat": [26, 27], "09": [27, 30, 32, 33, 44, 45, 96, 111, 195, 208, 214, 219, 228, 239, 267, 280, 285, 402, 404], "635": [27, 33], "auto_examples_01_plot": 27, "712": [27, 33], "889": 27, "07": [27, 30, 32, 33, 36, 44, 45, 49, 76, 82, 91, 96, 111, 157, 201, 214, 239, 262, 391, 397], "mvpa": [28, 110, 169, 171, 423], "stimuli": [28, 30, 32, 33, 45, 66, 80, 98, 110, 150, 151, 153, 154, 156, 166, 171, 174, 176, 213, 223, 287, 304, 311, 314, 317, 356, 378, 383], "jimura": [28, 45, 110, 111, 222, 248, 251, 378], "mix": [28, 44, 45, 110, 160, 162, 189, 222, 248, 250, 251, 378, 423], "gambl": [28, 45, 110, 160, 162, 222, 248, 251, 378, 423], "morphometri": [28, 45, 74, 82, 110, 156, 167, 169, 170, 171, 214, 215, 228, 246, 251, 280, 283, 290, 301, 311, 317, 328, 356, 367, 378, 383, 400, 402, 423], "oasi": [28, 45, 74, 82, 110, 111, 162, 168, 170, 214, 215, 228, 246, 251, 280, 283, 290, 301, 311, 317, 328, 356, 367, 378, 383, 400, 402], "prior": [28, 45, 48, 54, 66, 91, 110, 111, 142, 149, 150, 162, 165, 182, 201, 228, 245, 246, 250, 251, 267, 280, 315, 316, 318, 364, 378, 383], "searchlight": [28, 44, 45, 110, 111, 128, 131, 134, 140, 149, 156, 160, 169, 170, 171, 213, 233, 290, 292, 295, 297, 298, 311, 317, 371, 378, 382, 383, 407, 408, 423], "svm": [28, 34, 35, 39, 42, 44, 45, 51, 99, 110, 113, 129, 149, 158, 160, 162, 169, 176, 213, 245, 292, 378, 383, 385, 423], "chair": [28, 30, 32, 33, 45, 110, 121, 149, 174, 213, 247, 292, 297, 375, 378, 383], "cross": [28, 32, 33, 36, 37, 40, 42, 44, 45, 51, 55, 97, 99, 109, 110, 111, 114, 121, 140, 149, 150, 157, 160, 183, 213, 224, 228, 236, 245, 246, 247, 248, 249, 250, 251, 292, 302, 311, 317, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 363, 368, 371, 376, 377, 378, 383, 385, 421, 423], "simul": [28, 45, 46, 59, 63, 68, 100, 110, 152, 161, 183, 249, 327, 375, 383, 423], "encod": [28, 41, 45, 71, 75, 84, 110, 111, 157, 158, 176, 223, 247, 248, 287, 304, 308, 311, 314, 317, 356, 378], "miyawaki": [28, 45, 110, 111, 176, 223, 287, 304, 311, 314, 317, 356, 378, 383], "2008": [28, 45, 110, 111, 176, 223, 282, 287, 304, 311, 314, 317, 328, 356, 378, 383], "effici": [29, 66, 111, 147, 149, 155, 157, 163, 164, 182, 185, 224, 247, 248], "featur": [29, 31, 32, 33, 34, 35, 42, 44, 49, 51, 66, 94, 99, 103, 104, 111, 113, 132, 134, 135, 140, 144, 157, 158, 159, 160, 161, 162, 163, 164, 171, 172, 176, 182, 183, 185, 245, 246, 247, 248, 249, 250, 251, 252, 255, 327, 389, 391, 392, 394, 404, 405, 419, 422, 423], "func_img": [29, 156], "identifi": [29, 30, 32, 33, 50, 58, 62, 94, 111, 120, 144, 149, 154, 162, 165, 166, 168, 191, 263, 267, 269, 274, 276], "restrict": [29, 30, 31, 89, 91, 94, 102, 134, 149, 156, 161, 176, 189, 244], "place": [29, 98, 131, 149, 224, 276, 304, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 364, 371, 408], "uniqu": [29, 30, 31, 32, 33, 35, 49, 51, 58, 65, 86, 94, 100, 102, 129, 149, 150, 158, 174, 191, 197, 198, 274, 312, 315, 392, 393, 394], "aim": [29, 34, 124, 149, 156, 164, 169, 250, 251], "act": [29, 34, 111, 130, 149, 169, 187, 188, 259, 260, 330], "sever": [29, 31, 33, 34, 49, 51, 61, 62, 64, 66, 75, 86, 94, 99, 103, 113, 121, 128, 134, 149, 150, 158, 160, 161, 163, 164, 166, 169, 172, 174, 175, 176, 183, 267, 285, 296, 323, 325, 326, 366, 376, 390, 404, 423], "niftimask": [29, 32, 34, 35, 36, 40, 41, 42, 43, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 83, 91, 94, 96, 98, 99, 100, 102, 103, 104, 105, 106, 110, 113, 121, 134, 137, 140, 141, 142, 143, 144, 149, 156, 159, 173, 210, 223, 245, 246, 247, 248, 250, 251, 252, 253, 264, 267, 280, 282, 292, 297, 308, 309, 311, 312, 313, 315, 316, 318, 322, 328, 368, 372, 377, 378, 383, 390, 400, 413, 423], "relev": [29, 34, 49, 56, 66, 69, 104, 114, 142, 146, 149, 156, 157, 163, 164, 172, 175, 176, 181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 282, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 328, 389, 390, 391, 392], "classic": [29, 34, 94, 157, 174], "univari": [29, 33, 34, 97, 109, 110, 111, 158, 160, 162, 213, 218, 219, 245, 246, 247, 248, 250, 251, 290, 292, 297, 311, 317, 328, 356, 370, 378, 383, 423], "vector": [29, 32, 33, 34, 35, 40, 44, 51, 64, 84, 98, 99, 102, 105, 106, 113, 130, 149, 156, 157, 159, 169, 181, 245, 246, 247, 248, 254, 257, 258, 259, 260, 263, 265, 308, 374, 408], "screening_percentil": [29, 32, 33, 34, 42, 43, 156, 245, 246, 247, 248, 250, 251], "percent": [29, 34, 41, 42, 43, 137, 149, 156, 275, 284, 304, 312, 313, 314, 315, 316, 317, 318, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 376, 384, 386, 388, 404], "smoothing_fwhm": [29, 33, 34, 35, 42, 49, 50, 52, 53, 54, 55, 56, 58, 62, 66, 67, 75, 76, 77, 79, 89, 91, 92, 98, 100, 101, 102, 104, 105, 106, 130, 149, 154, 156, 176, 245, 246, 247, 248, 252, 253, 267, 270, 280, 282, 312, 313, 314, 315, 316, 317, 318, 319, 390, 392, 394], "accuraci": [29, 30, 31, 32, 33, 35, 37, 41, 51, 98, 99, 141, 149, 160, 161, 169, 171, 245, 247, 249, 250, 423], "y_pred": [29, 31, 34, 41, 43, 156, 245, 246, 247, 248, 250, 251], "out": [29, 33, 34, 40, 44, 51, 53, 54, 55, 56, 57, 58, 64, 69, 100, 106, 113, 114, 134, 137, 141, 149, 151, 156, 157, 159, 161, 163, 164, 165, 169, 175, 214, 245, 246, 247, 248, 250, 251, 292, 300, 312, 313, 314, 315, 316, 317, 318, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 373, 390, 392, 393, 403, 404, 408, 421], "9444444444444444": 29, "weight_img": [29, 42, 98, 156, 176], "Or": [29, 114, 156, 200, 201, 421], "dynam": [29, 111, 156, 309], "html": [29, 33, 34, 36, 49, 52, 53, 54, 56, 58, 61, 62, 64, 75, 77, 98, 134, 138, 142, 144, 149, 156, 164, 167, 176, 192, 204, 213, 245, 246, 247, 248, 267, 280, 309, 313, 316, 384, 385, 386, 387, 388, 392, 400, 402, 421, 422], "viewer": [29, 134, 149, 156, 175, 385, 421], "haxby_face_vs_hous": 29, "019": [29, 41, 45], "plot_haxby_anova_svm": [29, 45, 129, 149], "fetcher": [30, 32, 124, 125, 126, 129, 134, 137, 138, 141, 143, 144, 145, 146, 149, 165, 189, 195, 196, 207, 208, 209, 210, 217, 218, 219, 228, 232], "get_data": [30, 36, 42, 49, 77, 79, 84, 94, 102, 105, 106, 107, 129, 137, 149, 174, 295], "abl": [30, 32, 164, 172, 305, 379, 381, 382, 421], "resting_st": 30, "task_mask": [30, 32], "logical_not": [30, 36, 77, 105], "find": [30, 32, 44, 50, 56, 71, 79, 100, 118, 149, 154, 155, 156, 158, 160, 163, 164, 166, 169, 172, 176, 185, 193, 287, 322, 323, 325, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 362, 363, 385, 389, 391, 397, 421, 422, 423], "remain": [30, 32, 36, 40, 42, 44, 56, 89, 100, 102, 105, 140, 149, 161, 164, 408], "categori": [30, 32, 33, 98, 102, 113, 156, 158, 164, 174, 213], "tag": [30, 32, 69, 108, 114, 164, 172, 305, 306], "classification_target": [30, 32], "svc_l2": [30, 157, 245, 247], "svc_l1": [30, 32, 157, 245, 247], "logistic_l1": [30, 157, 245, 247], "logistic_l2": [30, 157, 245, 247], "ridge_classifi": [30, 157, 245, 247], "predict": [30, 31, 33, 39, 40, 44, 51, 58, 60, 73, 97, 109, 111, 113, 141, 142, 144, 149, 158, 159, 161, 162, 164, 166, 167, 169, 170, 171, 181, 199, 207, 210, 221, 231, 245, 246, 247, 248, 249, 250, 251, 259, 260, 267, 280, 285, 286, 297, 302, 311, 316, 318, 322, 356, 378, 401, 422, 423], "score": [30, 32, 37, 41, 42, 44, 48, 51, 80, 98, 99, 102, 103, 105, 106, 107, 140, 141, 149, 156, 157, 159, 160, 162, 171, 183, 228, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 280, 284, 304, 308, 312, 313, 314, 315, 316, 317, 318, 328, 364, 390, 392, 404, 423], "classifiers_data": 30, "classifier_nam": 30, "roc_auc": [30, 32, 98, 159, 245, 247], "t0": [30, 41], "2f": [30, 32, 41, 42, 43, 44, 49, 57, 89], "auc": [30, 32, 156, 169], "______________________________________________________________________": 30, "52": [30, 33, 36, 42, 43, 44, 45, 55, 58, 91, 102, 176, 193, 421], "scissor": [30, 32, 33, 174], "37": [30, 33, 36, 42, 43, 44, 81, 91, 94, 102, 111, 118, 149, 308, 309, 405], "cat": [30, 32, 33, 98, 113, 156, 170, 174], "46": [30, 33, 36, 42, 43, 44, 58, 62, 91, 93, 102, 107, 115, 149, 176, 192, 194, 421], "shoe": [30, 32, 33, 34, 174], "scrambledpix": [30, 32, 33, 94, 174], "98": [30, 32, 33, 36, 42, 43, 44, 87, 91, 93, 102, 111, 143, 149, 282, 328], "bottl": [30, 32, 33, 34, 174], "311": [30, 33, 41, 94], "08": [30, 32, 33, 36, 45, 49, 73, 82, 111, 221, 289, 308, 364], "97": [30, 33, 36, 42, 43, 44, 88, 102], "82": [30, 32, 33, 36, 42, 43, 89, 102], "87": [30, 32, 33, 36, 42, 43, 44, 72, 91, 102, 105, 111], "94": [30, 33, 36, 42, 43, 44, 77, 80, 91, 102, 105, 106, 218, 219], "89": [30, 32, 33, 36, 42, 43, 44, 72, 77, 102, 105], "92": [30, 32, 33, 36, 42, 43, 44, 77, 102, 111, 328], "rudimentari": 30, "diagram": [30, 166], "all_categori": 30, "hstack": [30, 64, 67, 77, 80, 257, 259, 260], "tick_posit": [30, 32], "ytick": [30, 44, 48, 51, 99], "height": [30, 33, 51, 99, 137, 149, 267, 280, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 364, 365, 368, 370, 371, 374, 375, 376, 377, 378, 384, 386, 388, 400, 402], "score_mean": [30, 32], "barh": [30, 48, 51, 99], "xmin": [30, 363, 364, 365, 368, 370, 371, 374, 376, 377, 378], "loc": [30, 32, 34, 42, 43, 49, 61, 68, 70, 91, 100, 329, 331, 332], "lower": [30, 31, 32, 39, 51, 70, 77, 89, 94, 124, 149, 155, 158, 162, 163, 169, 175, 181, 187, 188, 245, 246, 247, 248, 257, 259, 260, 322, 325, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 362, 363, 364, 368, 370, 371, 374, 375, 376, 377, 379, 403], "ncol": [30, 63, 79, 100, 101, 105], "penalti": [30, 34, 39, 43, 157, 162, 169, 245, 246, 247, 250, 251], "logist": [30, 31, 111, 157, 158, 162, 245, 247, 250, 251], "main": [30, 56, 66, 67, 68, 71, 94, 116, 146, 149, 156, 161, 164, 165, 169, 172, 174, 176, 191, 267, 269, 274, 305, 323, 325, 330], "ell_1": 30, "ell_2": 30, "spars": [30, 39, 40, 46, 48, 49, 57, 58, 59, 110, 111, 151, 152, 154, 155, 157, 162, 169, 170, 177, 182, 183, 185, 199, 210, 245, 246, 247, 248, 250, 251, 252, 253, 311, 316, 361, 365, 375, 379, 383, 384, 392, 423], "intra": [30, 32], "logical_or": 30, "assert": 30, "fmri_niimgs_condit": 30, "mean_epi_img": 30, "ab": [30, 43, 44, 53, 58, 81, 84, 102, 103, 104, 111, 163, 182, 185, 194, 204, 233, 285, 328, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 404], "1e": [30, 39, 40, 49, 182, 183, 185, 228, 250, 251, 255, 289, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 378, 381, 385, 391, 397], "32": [30, 33, 34, 36, 40, 42, 43, 44, 45, 51, 58, 59, 66, 84, 91, 94, 96, 102, 109, 176, 271, 272, 273, 277, 278, 279, 421], "338": [30, 33, 41, 45], "1302": [30, 45], "plot_haxby_different_estim": [30, 45, 137, 149], "implicit": [31, 39, 140, 149, 158, 169, 247, 248], "aggreg": [31, 39, 58, 140, 149, 158, 169, 192, 247, 248], "cost": [31, 39, 53, 79, 140, 149, 153, 157, 158, 162, 163, 164, 169, 176, 247, 248], "data_fil": 31, "condition_mask_train": 31, "condition_mask_test": 31, "x_train": [31, 41, 44], "x_test": [31, 41, 44, 245, 246, 247, 248, 249], "y_train": [31, 34, 41, 44], "y_test": [31, 34, 41, 44, 245, 246, 247, 248, 249], "background_img": [31, 43], "fremclassifi": [31, 140, 141, 149, 157, 158, 245, 248], "_util": [31, 32, 39, 47, 49, 52, 54, 57, 62, 77, 79, 121, 124, 143, 146, 149, 163], "param_valid": [31, 32, 39, 129, 149], "213": [31, 32, 33, 39, 41], "bigger": [31, 39, 43], "feature_select": [31, 35, 36, 41, 42, 44, 94, 98, 102, 105, 106, 159], "_univariate_select": 31, "112": [31, 33, 41, 43, 93, 111, 308, 309], "15809": 31, "113": [31, 33, 41, 43], "runtimewarn": [31, 58, 77, 79], "invalid": [31, 58, 120, 124, 149, 316, 396], "encount": [31, 58, 77, 79, 379, 381, 382], "divid": [31, 55, 76, 77, 79, 127, 149, 157, 166, 169, 187, 390], "7778": 31, "metric": [31, 35, 40, 41, 51, 79, 137, 149, 156, 157, 161, 169, 245, 246, 247, 248], "confusion_matrix": [31, 35, 157], "hot_r": [31, 35], "set_ylabel": [31, 43, 70, 75, 78], "set_xlabel": [31, 43, 70], "adjust": [31, 66, 68, 120, 132, 149, 309, 330, 341, 344], "get_figur": 31, "02_decod": [31, 36], "plot_haxby_frem": [31, 45], "coef": [31, 44, 98, 267, 276], "50": [31, 33, 36, 42, 43, 44, 49, 54, 57, 58, 62, 66, 82, 93, 98, 102, 105, 111, 114, 161, 163, 176, 183, 185, 221, 222, 247, 248, 255, 269, 271, 272, 273, 274, 277, 278, 279, 287, 308, 309, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 390, 392, 394, 421], "improv": [31, 75, 111, 120, 121, 127, 130, 133, 134, 137, 144, 145, 146, 149, 156, 157, 158, 162, 163, 164, 166, 169, 174, 176, 209, 214, 285, 312, 315, 389, 404], "mechan": [31, 156, 181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "reason": [31, 43, 48, 66, 92, 114, 157, 159, 161, 163, 164, 166, 172, 408], "even": [31, 42, 49, 50, 58, 65, 79, 100, 114, 137, 142, 147, 149, 163, 164, 171, 224, 226, 403], "heavier": 31, "l2": [31, 34, 157, 158, 245, 247, 389, 390, 391], "ridg": [31, 40, 44, 157, 158, 162, 245, 246, 247, 248], "fremregressor": [31, 39, 140, 141, 149, 157, 158, 246, 247], "solv": [31, 39, 163, 164, 171, 172, 253, 328], "673": [31, 33, 45], "2048": [31, 45], "older": [32, 35, 36, 40, 41, 42, 47, 48, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 111, 113, 129, 130, 131, 132, 149, 164, 174, 228, 287], "upgrad": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 120, 129, 131, 137, 142, 144, 149], "masker": [32, 33, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 119, 120, 121, 122, 137, 140, 141, 142, 143, 144, 146, 149, 151, 153, 156, 159, 165, 173, 175, 245, 246, 247, 248, 250, 251, 252, 253, 267, 280, 282, 308, 309, 328, 372, 390, 392, 395, 396, 398, 399, 423], "input_data": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 144, 149], "That": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 141, 149, 169, 254, 258, 267, 269, 274], "occurr": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 161], "practic": [32, 51, 69, 99, 150, 153, 157, 159, 161, 163, 164, 165, 166, 168, 171, 174, 175], "unmask": [32, 33, 44, 112, 121, 129, 132, 149, 173, 175, 252, 253, 311, 314, 317, 423], "task_data": 32, "mask_nam": 32, "mask_scor": 32, "mask_chance_scor": 32, "739": [32, 33, 36], "screen": [32, 111, 162, 245, 246, 247, 248, 250, 251], "rais": [32, 63, 78, 94, 120, 121, 124, 131, 133, 134, 137, 144, 146, 149, 174, 181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 270, 274, 280, 282, 283, 286, 295, 299, 300, 311, 312, 313, 314, 315, 316, 317, 318, 324, 389, 390, 391, 392, 422], "clustering_percentil": [32, 247, 248], "76": [32, 33, 42, 43, 44, 61, 66, 72, 102, 195, 203], "73": [32, 33, 36, 42, 43, 91, 102, 105], "71": [32, 33, 36, 42, 43, 44, 72, 102], "68": [32, 33, 42, 43, 58, 102, 176, 421], "83": [32, 33, 36, 42, 43, 44, 72, 102, 111, 115, 149, 282, 328], "86": [32, 33, 36, 42, 43, 102], "xtick": [32, 34, 35, 44, 94], "rgb": [32, 387], "score_ch": 32, "edgecolor": [32, 40, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 365, 368, 370, 371, 374, 376, 377, 378], "ylim": 32, "59": [32, 33, 36, 42, 43, 44, 45, 49, 54, 72, 78, 91, 100, 102, 111, 115, 149, 192, 308, 309], "222": [32, 33, 41, 45], "1351": [32, 45], "plot_haxby_full_analysi": [32, 45, 137, 149], "record": [33, 40, 66, 156, 166, 169], "unique_sess": 33, "datafram": [33, 62, 63, 64, 66, 67, 72, 75, 76, 77, 78, 79, 80, 81, 100, 101, 114, 140, 144, 145, 149, 181, 189, 195, 196, 207, 208, 209, 217, 218, 219, 228, 252, 253, 267, 268, 270, 274, 280, 281, 282, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 366, 367, 369, 389, 390, 391, 392, 401, 404], "conditions_sess": 33, "frame": [33, 63, 69, 89, 176, 269, 292, 308, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 400], "n_scan": [33, 61, 63, 69, 71, 108, 166, 269], "frame_tim": [33, 63, 68, 69, 71, 108, 165, 268, 269, 274], "events_": 33, "insert": [33, 200, 201, 267, 280, 384, 385, 386, 387, 388, 400, 402, 421], "togeth": [33, 48, 68, 69, 70, 80, 150, 158, 159, 166, 169, 207, 209, 244, 247, 248, 252, 270, 285, 392], "conditions_label": 33, "008": [33, 41], "nilearn_cach": [33, 35, 36, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 92, 98, 99, 100, 102, 103, 104, 105, 106, 154], "grab": [33, 47, 48, 49, 65, 100, 114], "fmri_sess": 33, "condition_": 33, "________________________________________________________________________________": [33, 43, 48, 49, 52, 53, 54, 56, 58], "nifti_mask": [33, 35, 36, 42, 92, 102, 105, 106, 113], "_filter_and_mask": 33, "0x7f34e892cc10": 33, "0x7f34e71f76d0": 33, "clean_kwarg": [33, 49, 52, 53, 54, 56, 58], "high_variance_confound": [33, 49, 52, 53, 54, 56, 58, 66, 89, 91, 92, 124, 141, 149, 176, 312, 313, 314, 315, 316, 317, 318], "low_pass": [33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 89, 91, 92, 99, 100, 134, 149, 176, 245, 246, 247, 248, 250, 251, 252, 253, 285, 312, 313, 314, 315, 316, 317, 318, 390, 392, 403, 404], "standardize_confound": [33, 47, 49, 51, 52, 53, 54, 55, 56, 58, 89, 91, 92, 99, 144, 149, 176, 252, 312, 313, 314, 315, 316, 317, 318, 404], "target_affin": [33, 49, 52, 53, 54, 56, 84, 89, 92, 175, 176, 245, 246, 247, 248, 250, 251, 252, 253, 267, 270, 280, 297, 300, 314, 317, 320, 322, 323, 324, 325, 390], "target_shap": [33, 49, 52, 53, 54, 56, 84, 89, 92, 175, 176, 245, 246, 247, 248, 250, 251, 252, 253, 267, 270, 280, 297, 300, 314, 317, 320, 322, 323, 325, 390], "memory_level": [33, 35, 36, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 89, 91, 92, 98, 99, 100, 102, 103, 104, 105, 106, 154, 176, 182, 245, 246, 247, 248, 250, 251, 252, 253, 267, 270, 280, 286, 312, 313, 314, 315, 316, 317, 318, 390, 391, 392], "joblib": [33, 43, 48, 49, 50, 52, 53, 54, 56, 58, 92, 120, 137, 140, 144, 149, 153, 182, 245, 246, 247, 248, 250, 251, 252, 253, 267, 280, 286, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 390, 391, 392], "verbos": [33, 35, 36, 42, 43, 44, 48, 49, 52, 53, 54, 55, 56, 57, 58, 61, 89, 91, 92, 98, 99, 100, 102, 105, 134, 149, 176, 182, 183, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 245, 246, 247, 248, 249, 250, 251, 252, 253, 262, 267, 270, 276, 280, 282, 286, 297, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 328, 389, 390, 391, 392, 397], "confound": [33, 47, 49, 50, 51, 52, 53, 54, 55, 58, 62, 77, 78, 99, 100, 101, 105, 108, 111, 113, 118, 121, 124, 134, 140, 141, 142, 144, 146, 147, 149, 151, 154, 155, 156, 163, 169, 173, 175, 181, 190, 210, 252, 253, 267, 280, 281, 282, 285, 291, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 328, 390, 392, 404, 405, 412, 423], "sample_mask": [33, 49, 52, 53, 54, 56, 58, 66, 120, 142, 144, 146, 149, 267, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 392, 404], "__________________________________________________filter_and_mask": 33, "0min": [33, 48, 49, 52, 53, 54, 56, 58], "run_glm": [33, 69, 108, 142, 146, 149], "114769": 33, "149296": 33, "367151": 33, "779998": 33, "bin": [33, 49, 164, 267, 276, 422], "random_st": [33, 36, 42, 43, 44, 48, 49, 50, 51, 92, 99, 103, 104, 146, 149, 154, 245, 247, 252, 253, 267, 276, 282, 328, 389, 390], "__________________________________________________________run_glm": 33, "44475": 33, "379275": 33, "___________________________________________________________unmask": 33, "013524": 33, "844135": 33, "217486": 33, "430348": 33, "106474": 33, "182434": 33, "747494": 33, "660679": 33, "080159": 33, "32614": 33, "253894": 33, "452682": 33, "240914": 33, "244136": 33, "0x7f34e6802070": 33, "0x7f34e7102280": 33, "660587": 33, "536042": 33, "254408": 33, "842804": 33, "871458": 33, "990755": 33, "627194": 33, "290147": 33, "153013": 33, "320123": 33, "15748": 33, "082416": 33, "997775": 33, "754066": 33, "109412": 33, "330079": 33, "030863": 33, "731439": 33, "559734": 33, "720924": 33, "0x7f34e7102d00": 33, "0x7f34e8417700": 33, "205584": 33, "587189": 33, "836576": 33, "676956": 33, "695564": 33, "455092": 33, "457214": 33, "537178": 33, "803925": 33, "570463": 33, "614932": 33, "232909": 33, "527175": 33, "062723": 33, "126756": 33, "274819": 33, "635166": 33, "395548": 33, "250365": 33, "364311": 33, "0x7f34e68027c0": 33, "0x7f34e7aea370": 33, "026206": 33, "974948": 33, "616334": 33, "104535": 33, "503142": 33, "639351": 33, "271132": 33, "047089": 33, "318104": 33, "724813": 33, "073279": 33, "316956": 33, "380183": 33, "690685": 33, "631912": 33, "753286": 33, "155784": 33, "065658": 33, "186135": 33, "69267": 33, "0x7f34e8417190": 33, "0x7f34e71f75e0": 33, "033577": 33, "45955": 33, "57195": 33, "994713": 33, "158342": 33, "068131": 33, "396497": 33, "424937": 33, "091867": 33, "463109": 33, "054041": 33, "122921": 33, "025223": 33, "562991": 33, "001653": 33, "968729": 33, "274665": 33, "667": 33, "564329": 33, "496068": 33, "0x7f34e734ad90": 33, "0x7f34e734aa60": 33, "150482": 33, "81308": 33, "204891": 33, "417917": 33, "987059": 33, "41717": 33, "24774": 33, "674399": 33, "731234": 33, "341998": 33, "714869": 33, "182988": 33, "222674": 33, "480354": 33, "366899": 33, "091153": 33, "2708": 33, "247146": 33, "251249": 33, "413063": 33, "0x7f34e89b5880": 33, "0x7f34e71f7fa0": 33, "129": [33, 41, 67, 118, 149], "51173": 33, "279282": 33, "911755": 33, "839058": 33, "290412": 33, "609221": 33, "090297": 33, "822602": 33, "747918": 33, "108861": 33, "095788": 33, "376995": 33, "807425": 33, "826947": 33, "017351": 33, "622242": 33, "625042": 33, "231224": 33, "056424": 33, "672737": 33, "0x7f34e734a2e0": 33, "0x7f34e734aeb0": 33, "915996": 33, "07737": 33, "981215": 33, "372383": 33, "200737": 33, "008536": 33, "066075": 33, "168487": 33, "636238": 33, "145684": 33, "932773": 33, "580823": 33, "455655": 33, "685537": 33, "715791": 33, "245273": 33, "099707": 33, "79538": 33, "913842": 33, "519925": 33, "629218": 33, "0x7f34e72b7c70": 33, "0x7f34e7eaf5b0": 33, "292987": 33, "392956": 33, "935719": 33, "602484": 33, "425611": 33, "348025": 33, "31867": 33, "408223": 33, "534932": 33, "150519": 33, "149007": 33, "640215": 33, "640699": 33, "50369": 33, "246384": 33, "346316": 33, "162243": 33, "519251": 33, "203695": 33, "335337": 33, "0x7f34e687c460": 33, "0x7f34e734a850": 33, "223948": 33, "959582": 33, "677519": 33, "024363": 33, "034515": 33, "612397": 33, "62798": 33, "160445": 33, "506632": 33, "459388": 33, "261016": 33, "747236": 33, "231796": 33, "098904": 33, "148582": 33, "999934": 33, "548262": 33, "09934": 33, "222824": 33, "318977": 33, "0x7f34e883b400": 33, "0x7f34e87cfb20": 33, "66533": 33, "299562": 33, "647343": 33, "331865": 33, "175763": 33, "429485": 33, "146358": 33, "947626": 33, "806852": 33, "720554": 33, "008926": 33, "4544": 33, "279543": 33, "828183": 33, "463642": 33, "26599": 33, "058735": 33, "191442": 33, "390268": 33, "112207": 33, "0x7f34e72e0280": 33, "0x7f34e734ac70": 33, "095605": 33, "449202": 33, "59974": 33, "179998": 33, "340751": 33, "056108": 33, "043261": 33, "144442": 33, "517954": 33, "611394": 33, "797134e": 33, "317655e": 33, "398581": 33, "488427": 33, "714396": 33, "869941": 33, "924894": 33, "723724": 33, "145297": 33, "821272": 33, "summari": [33, 62, 64, 91, 142, 164, 255], "make_glm_report": [33, 61, 62, 64, 75, 120, 141, 144, 149], "mean_img_": [33, 64, 67], "drift_ord": [33, 63, 66, 165, 267, 270, 274], "fir_delai": [33, 63, 65, 267, 269, 270, 274], "glover": [33, 63, 66, 68, 69, 108, 165, 267, 269, 270, 271, 272, 273, 274], "scaling_axi": [33, 100, 144, 149, 267], "signal_sc": [33, 70, 100, 144, 149, 267, 270], "slice_time_ref": [33, 61, 66, 69, 71, 121, 147, 149, 267, 270], "subject_label": [33, 62, 78, 101, 267, 280, 281, 282], "\u03b1": 33, "minimum": [33, 77, 79, 89, 118, 120, 122, 127, 129, 130, 131, 134, 137, 140, 142, 144, 149, 154, 267, 280, 284, 304, 312, 315, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 359, 365, 385, 392, 393, 394, 395, 401, 402], "distanc": [33, 250, 251, 267, 280, 359, 401, 402, 408], "88": [33, 36, 42, 43, 81, 89, 91, 102, 111, 328], "147": [33, 41], "62": [33, 36, 42, 43, 44, 62, 72, 100, 102, 107, 111, 131, 149, 198], "38": [33, 42, 43, 45, 62, 77, 91, 102, 134, 149], "393": 33, "196": [33, 41], "43": [33, 36, 42, 43, 44, 91, 102, 105, 111, 122, 149, 194, 328], "2264": 33, "31": [33, 36, 40, 42, 43, 44, 91, 102, 111, 162, 202], "77": [33, 36, 42, 43, 66, 72, 102], "28": [33, 36, 42, 43, 44, 62, 89, 91, 102, 103, 111, 115, 134, 149, 192, 201], "246": [33, 41, 72], "541": 33, "344": [33, 41], "61": [33, 36, 42, 43, 44, 68, 77, 79, 102], "492": 33, "12a": 33, "58": [33, 36, 42, 43, 91, 102, 105, 134, 149], "1132": 33, "639": [33, 91, 96], "984": 33, "16a": 33, "49": [33, 42, 43, 67, 86, 91, 100, 101, 102, 108, 109, 111, 134, 149], "787": 33, "23a": 33, "65": [33, 36, 42, 43, 44, 91, 102, 105, 122, 149], "27a": 33, "295": [33, 41, 111, 204], "590": [33, 36, 42, 102], "31a": 33, "31b": 33, "41": [33, 36, 42, 43, 44, 49, 50, 59, 72, 91, 102, 111, 391, 397], "41a": 33, "2214": [33, 137, 149], "42a": 33, "42b": 33, "442": 33, "43a": 33, "56": [33, 36, 37, 39, 42, 43, 44, 45, 49, 59, 72, 79, 82, 102, 111, 157, 194], "58a": 33, "64a": 33, "67a": 33, "72": [33, 36, 42, 43, 44, 56, 58, 62, 91, 93, 102, 111, 143, 149, 162, 208], "80": [33, 36, 42, 43, 44, 47, 54, 65, 66, 72, 84, 102, 103, 105, 111, 164, 199, 284, 304, 339, 344, 346, 350, 356, 362, 408], "74": [33, 36, 42, 43, 44, 91, 102], "79": [33, 36, 42, 43, 66, 72, 91, 102], "78": [33, 36, 42, 43, 44, 49, 53, 54, 66, 72, 93, 102, 111, 161], "85": [33, 36, 41, 42, 43, 44, 47, 91, 102, 105, 122, 149, 322, 323, 325], "96a": 33, "103": [33, 41, 43, 111, 161, 249], "104": [33, 41, 43, 196], "105": [33, 41, 43], "106": [33, 41, 43, 111, 201, 202, 205, 221], "107": [33, 41, 43], "108": [33, 41, 43, 72], "110": [33, 36, 41, 42, 43, 44, 86, 102, 105, 111, 204, 211, 229], "114": [33, 41, 43, 44, 134, 149], "115": [33, 41, 43, 134, 149], "116": [33, 41, 43, 72, 191], "117": [33, 41, 43, 93, 143, 149, 191], "118": [33, 41, 43, 105], "119": [33, 41, 43, 56, 72, 122, 149], "120": [33, 36, 41, 42, 43, 44, 84, 98, 99, 102, 105, 109, 111, 204], "121": [33, 41, 66], "123": [33, 41, 196], "124": [33, 40, 41], "124a": 33, "125": [33, 40, 41, 72, 100, 111], "128": [33, 41, 63, 66, 69, 84, 92, 104, 108, 141, 149, 196], "130": [33, 36, 41, 42, 44, 102, 105], "131": [33, 41, 72, 111, 204], "132": [33, 41, 49, 54], "134": [33, 41, 93, 143, 149], "135": [33, 41, 72], "136": [33, 41, 105], "137": [33, 41, 72], "138": [33, 41, 77, 82], "139": [33, 41], "140": [33, 36, 40, 41, 42, 44, 72, 102, 105], "141": [33, 41, 119, 149, 204], "142": [33, 41, 122, 149], "143": [33, 41, 72], "144": [33, 41, 111, 219], "144a": 33, "145": [33, 41], "146": [33, 41, 49, 59, 72, 87, 96, 125, 149], "146a": 33, "148": [33, 41], "149": [33, 41, 72], "151": [33, 41, 105, 107], "153": [33, 41, 72], "154": [33, 40, 41, 44, 45, 56, 111, 308, 309, 364], "155": [33, 41, 210], "156": [33, 41, 72], "157": [33, 41], "158": [33, 41, 111, 364], "159": [33, 41, 72], "161": [33, 41], "162": [33, 41, 72], "163": [33, 41, 45, 56, 109], "164": [33, 41, 56, 72, 86, 96, 107], "165": [33, 41, 56], "166": [33, 41, 56], "167": [33, 41, 56, 72, 153], "169": [33, 41], "170": [33, 36, 41, 42, 44, 72, 102, 105], "171": [33, 41, 56, 111, 309], "172": [33, 41, 111, 158, 204, 247, 248], "173": [33, 41, 58, 72], "174": [33, 41, 56, 111, 308, 309], "175": [33, 41], "176": [33, 41, 61, 72], "177": [33, 41], "178": [33, 41], "179": [33, 41], "180": [33, 36, 41, 42, 44, 84, 102, 105, 111, 134, 149, 158, 247, 248, 379, 381, 382], "181": [33, 41, 76, 111, 262], "182": [33, 41, 197, 198, 201], "183": [33, 41], "184": [33, 41], "185": [33, 41], "186": [33, 41], "187": [33, 41, 56, 111, 308, 309], "188": [33, 41, 72], "189": [33, 41, 47, 54, 59, 111, 285, 292, 404], "190": [33, 36, 41, 42, 44, 102, 105, 109], "191": [33, 41, 72, 105], "192": [33, 41, 84], "193": [33, 41, 200], "194": [33, 41], "195": [33, 41, 72], "198": [33, 41, 72, 200], "199": [33, 41], "201": [33, 41, 72], "202": [33, 41], "203": [33, 41, 70, 72, 73], "204": [33, 41, 59], "738": 33, "204a": 33, "205": [33, 41], "206": [33, 41, 111, 209], "207": [33, 41, 72], "208": [33, 41, 111, 181], "209": [33, 41], "211": [33, 41, 43], "212": [33, 41, 43, 72, 200], "214": [33, 41], "215": [33, 41, 42, 72], "217": [33, 41, 191], "218": [33, 41, 72, 93, 96, 197, 198, 201], "219": [33, 41], "220": [33, 36, 41, 42, 44, 102], "221": [33, 41, 72, 111, 196], "223": [33, 41, 109, 111, 214], "224": [33, 41, 72, 103], "225": [33, 41], "226": [33, 41], "227": [33, 41, 72], "228": [33, 41], "229": [33, 41, 43, 200], "230": [33, 36, 41, 42, 44, 72, 73, 102], "231": [33, 41, 69], "232": [33, 41], "233": [33, 41, 292], "234": [33, 41, 72], "235": [33, 41], "236": [33, 41, 72], "238": [33, 41, 111, 204], "239": [33, 41], "240": [33, 36, 41, 42, 44, 61, 73, 102], "241": [33, 41, 47, 49, 52, 54], "242": [33, 41, 111, 204], "243": [33, 41], "244": [33, 41], "245": [33, 41], "247": [33, 41, 101, 109], "248": [33, 41, 72], "249": [33, 41], "250": [33, 36, 41, 42, 44, 66, 102, 111], "253": [33, 41], "254": [33, 41, 72, 115, 149], "257": [33, 41, 72], "258": [33, 41], "259": [33, 41], "260": [33, 36, 41, 42, 44, 72, 102], "261": [33, 41, 111, 161], "262": [33, 41, 111], "263": [33, 41, 200], "264": [33, 41, 58, 72, 208], "265": [33, 41, 104, 109], "266": [33, 41, 72], "267": [33, 41, 111, 308, 309], "268": [33, 41], "269": [33, 41, 57, 72, 111, 161], "271": [33, 41], "272": [33, 41, 111, 233], "273": [33, 41, 111, 191], "274": [33, 41], "275": [33, 41, 72], "276": [33, 41], "277": [33, 41, 111, 308, 309], "278": [33, 41, 72, 109], "279": [33, 41, 104], "280": [33, 36, 41, 42, 44, 94, 102], "281": [33, 41], "283": [33, 41], "284": [33, 41, 66, 72, 111, 233], "285": [33, 41], "286": [33, 41, 72, 73], "287": [33, 41], "288": [33, 41, 48, 66, 72, 111, 155, 252], "289": [33, 41, 111, 191], "290": [33, 36, 41, 42, 44, 102], "292": [33, 41, 111, 328], "296": [33, 41, 66, 72], "297": [33, 39, 41], "297a": 33, "298": [33, 41, 65, 73, 111, 233, 328], "299": [33, 41, 48, 111, 155, 252], "301": [33, 41], "303": [33, 41, 73], "304": [33, 41, 66, 111, 162], "305": [33, 41], "306": [33, 41], "307": [33, 41], "308": [33, 41], "309": [33, 41, 111, 219], "312": [33, 41], "313": [33, 41, 111, 214, 239], "314": [33, 41, 95, 96, 111, 219], "315": [33, 41, 91], "316": [33, 41], "317": [33, 41, 94], "318": [33, 41], "319": [33, 41], "320": [33, 36, 41, 42, 44, 102, 111, 308], "321": [33, 41, 111, 162], "322": [33, 41], "323": [33, 41], "324": [33, 41], "326": [33, 41], "327": [33, 41, 111, 214, 239], "328": [33, 41, 44], "329": [33, 41, 58, 111, 207], "331": [33, 41], "332": [33, 41], "333": [33, 41], "334": [33, 41], "335": [33, 41], "337": [33, 41], "339": [33, 41], "340": [33, 36, 41, 42, 44, 102], "341": [33, 41, 111, 308], "342": [33, 41], "343": [33, 41], "345": [33, 41, 44], "346": [33, 41], "347": [33, 41], "348": [33, 41, 56, 91], "349": [33, 41, 64, 71], "350": [33, 36, 41, 42, 44, 102], "351": [33, 41], "352": [33, 41, 79, 82], "353": [33, 41, 50, 54], "354": [33, 41], "355": [33, 41, 101, 109], "356": [33, 41], "357": [33, 41], "358": [33, 41], "359": [33, 41], "360": [33, 36, 41, 42, 44, 62, 64, 67, 102], "361": [33, 34, 41, 45], "362": 33, "363": 33, "364": 33, "365": 33, "366": 33, "367": [33, 96], "368": [33, 89], "369": [33, 96], "370": [33, 36, 42, 44, 95, 102], "371": [33, 64, 67], "372": 33, "373": 33, "373a": 33, "374": 33, "375": [33, 39, 45], "376": 33, "377": 33, "379": 33, "381": [33, 111, 328], "382": 33, "383": 33, "384": 33, "385": [33, 36], "386": 33, "387": 33, "388": 33, "389": 33, "390": [33, 36, 42, 44, 89, 96, 102], "392": 33, "394": 33, "395": 33, "396": 33, "397": [33, 73, 111, 328], "398": 33, "399": 33, "400": [33, 36, 42, 44, 102, 111, 157, 201], "401": 33, "402": 33, "403": 33, "404": 33, "405": [33, 111, 199], "406": 33, "407": 33, "408": 33, "409": 33, "410": [33, 36, 42, 44, 102, 111, 157], "411": [33, 64, 73, 77, 82], "412": 33, "413": 33, "414": 33, "415": [33, 56, 111, 199, 309], "416": [33, 228], "417": 33, "418": 33, "419": 33, "421": 33, "422": 33, "423": 33, "424": 33, "425": 33, "426": 33, "427": [33, 44, 45], "428": 33, "429": 33, "430": [33, 36, 42, 44, 102], "431": [33, 40, 45, 84, 96], "432": [33, 44, 62], "433": [33, 102, 109], "434": 33, "435": 33, "436": [33, 56, 111, 309], "437": 33, "438": 33, "439": 33, "440": [33, 36, 42, 102], "441": 33, "443": [33, 41, 45], "445": 33, "446": 33, "447": 33, "448": [33, 50, 59], "449": 33, "450": [33, 36, 42, 102], "451": 33, "452": 33, "453": 33, "454": 33, "455": 33, "456": 33, "457": 33, "458": 33, "459": 33, "460": [33, 36, 42, 102], "461": [33, 221], "463": [33, 191], "465": 33, "466": 33, "467": 33, "468": [33, 62, 191], "469": 33, "470": [33, 36, 42, 63, 80, 100, 102], "471": 33, "472": 33, "473": 33, "474": 33, "475": 33, "476": [33, 87, 96], "477": 33, "478": 33, "479": 33, "480": [33, 36, 42, 102], "481": 33, "482": 33, "483": [33, 115, 149], "484": 33, "485": [33, 49], "486": [33, 42, 45], "487": [33, 66, 73], "488": 33, "489": 33, "490": [33, 36, 42, 102], "491": 33, "493": 33, "495": [33, 47, 50, 51, 54, 56], "496": 33, "497": 33, "498": [33, 45], "499": 33, "500": [33, 35, 36, 41, 42, 49, 78, 79, 98, 102, 201], "501": 33, "502": [33, 98], "503": 33, "505": 33, "506": 33, "507": [33, 75, 82], "509": 33, "510": [33, 36, 42, 102], "511": 33, "512": [33, 84, 141, 149, 196], "513": 33, "514": 33, "515": 33, "516": [33, 96], "517": 33, "518": [33, 94, 96, 107, 109], "519": 33, "520": [33, 36, 42, 102], "521": 33, "522": 33, "523": 33, "524": 33, "525": 33, "526": 33, "527": 33, "528": [33, 44], "529": 33, "530": [33, 36, 42, 102], "531": 33, "532": [33, 96], "533": [33, 91], "534": 33, "535": 33, "536": 33, "537": 33, "538": 33, "539": 33, "540": [33, 36, 42, 62, 102], "542": 33, "543": [33, 48], "544": [33, 111, 222], "545": 33, "547": 33, "548": 33, "549": [33, 111, 161], "550": [33, 36, 42, 102], "551": [33, 68, 73], "552": [33, 89, 111, 222], "553": 33, "554": 33, "555": 33, "556": 33, "557": 33, "558": 33, "559": [33, 78, 82, 111, 161], "560": [33, 36, 42, 59, 102], "561": [33, 53], "562": [33, 111, 199], "563": 33, "564": 33, "566": 33, "567": [33, 73], "568": [33, 67], "569": 33, "570": [33, 36, 42, 102], "571": 33, "572": 33, "573": [33, 111, 199], "575": 33, "576": [33, 59], "578": 33, "579": 33, "580": [33, 36, 42, 102], "581": 33, "582": [33, 37], "583": 33, "584": 33, "585": [33, 62, 73], "586": [33, 109], "587": [33, 61, 73, 108], "589": 33, "591": 33, "593": 33, "595": 33, "596": 33, "597": 33, "598": [33, 59], "599": [33, 56, 111, 189], "600": [33, 36, 42, 49, 102, 115, 149, 201], "601": 33, "602": 33, "603": 33, "604": [33, 86], "605": 33, "606": 33, "607": 33, "608": 33, "609": 33, "610": [33, 36, 42, 102], "611": 33, "612": 33, "613": [33, 53, 59], "614": 33, "615": 33, "616": 33, "617": 33, "618": 33, "619": 33, "620": [33, 36, 38, 42, 45, 102], "622": 33, "623": 33, "624": 33, "625": 33, "626": 33, "627": 33, "628": [33, 37, 45], "629": 33, "631": [33, 52, 59], "632": 33, "633": 33, "634": 33, "636": 33, "637": 33, "638": 33, "640": [33, 36, 42, 102], "641": 33, "642": [33, 55, 233, 386], "643": 33, "644": 33, "645": 33, "646": 33, "647": 33, "649": 33, "650": [33, 36, 42, 102], "651": 33, "652": 33, "653": 33, "654": 33, "655": 33, "656": 33, "657": 33, "658": [33, 48, 50], "659": 33, "660": [33, 36, 42, 102], "661": 33, "662": [33, 48, 59], "663": 33, "664": 33, "665": [33, 58, 111, 114, 208, 224, 226], "666": [33, 92, 96], "668": 33, "669": [33, 49, 111, 391, 397], "670": [33, 36, 42, 71, 73, 102, 111, 114, 224, 226], "671": 33, "672": 33, "674": 33, "675": 33, "676": 33, "677": 33, "678": [33, 58, 111, 208], "679": 33, "680": [33, 36, 42, 102], "681": [33, 49, 111, 391, 397], "682": 33, "683": 33, "684": 33, "685": 33, "686": 33, "687": 33, "688": 33, "689": 33, "690": [33, 36, 42, 102], "691": 33, "692": 33, "693": [33, 48], "694": 33, "695": 33, "696": 33, "697": 33, "699": 33, "700": [33, 36, 42, 102, 137, 149, 201], "701": 33, "703": 33, "704": 33, "705": 33, "706": 33, "707": [33, 64, 71], "708": 33, "709": 33, "710": [33, 36, 42, 102], "711": 33, "714": 33, "715": 33, "716": [33, 69, 73], "717": 33, "718": 33, "719": 33, "721": 33, "722": 33, "723": 33, "724": 33, "725": 33, "726": 33, "727": 33, "728": 33, "729": 33, "730": [33, 36, 42, 102], "731": 33, "732": 33, "733": [33, 100, 109], "734": 33, "735": 33, "736": 33, "737": 33, "740": [33, 42, 102], "741": 33, "742": 33, "743": 33, "745": 33, "746": [33, 70, 73], "13a": 33, "32a": 33, "bug": [33, 118, 121, 127, 128, 129, 133, 146, 147, 171, 172, 379, 381, 382], "request": [33, 100, 124, 137, 149, 153, 163, 169, 181, 182, 183, 196, 197, 198, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 282, 304, 305, 311, 312, 313, 314, 315, 316, 317, 318, 328, 357, 358, 385, 389, 390, 391, 392, 421, 422], "save_as_html": [33, 61, 62, 64, 75, 91, 92, 176, 384, 385, 386, 387, 388, 400, 402, 421], "although": [33, 39, 49, 79, 157, 169, 172, 176], "usual": [33, 48, 77, 79, 94, 144, 149, 155, 157, 158, 159, 164, 166, 169, 171, 172, 175, 191, 247, 248, 254, 257, 322, 374, 390], "classification_accuraci": [33, 98], "chance_level": 33, "4f": [33, 34, 98], "7173": 33, "961": [33, 41, 45], "plot_haxby_glm_decod": [33, 45], "approach": [34, 40, 41, 48, 49, 66, 69, 111, 134, 149, 152, 155, 156, 157, 161, 163, 164, 165, 166, 170, 249, 285, 308, 309, 404, 408, 422, 423], "maxim": [34, 169, 257, 259, 260, 289, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "signific": [34, 49, 66, 75, 80, 111, 156, 161, 163, 166, 169, 282, 328, 401], "optimist": [34, 156], "lead": [34, 47, 48, 57, 84, 120, 140, 149, 162, 163, 164, 166, 169, 183, 255, 313, 316, 403, 421], "overfit": [34, 157, 161], "loop": [34, 44, 71, 100, 140, 149, 156, 163, 175, 245, 246, 247, 248], "judg": [34, 86], "never": [34, 156, 163, 171, 300, 301, 400], "grid": [34, 51, 68, 79, 84, 99, 157, 162, 169, 175, 183, 224, 226, 245, 246, 247, 248, 271, 272, 273, 277, 278, 279, 300, 339, 341, 344, 358, 363, 368, 371, 375, 376, 377, 378, 421], "difficulti": 34, "composit": 34, "hyperparamet": [34, 42], "intern": [34, 111, 162, 163, 164, 166, 183, 193, 252, 253, 294, 296], "param_grid": [34, 99, 121, 149, 157, 245, 246, 247, 248], "sensibl": [34, 156, 159, 182, 185], "dual": [34, 51, 53, 98, 99, 111, 163, 182, 245, 247], "1000": [34, 42, 49, 77, 94, 102, 153, 166, 201, 389], "l1": [34, 43, 111, 157, 158, 162, 182, 185, 245, 246, 247, 250, 251], "800": [34, 42, 87, 102, 201, 267, 280, 364, 402], "complet": [34, 60, 73, 94, 110, 113, 114, 137, 149, 150, 156, 158, 165, 172, 175, 176, 211, 213, 229, 244, 267, 270, 307, 310, 317, 328, 363, 364, 365, 366, 368, 370, 371, 372, 374, 375, 376, 377, 378, 390, 400, 401, 402], "stabl": [34, 48, 56, 98, 111, 120, 134, 149, 155, 157, 158, 163, 171, 193, 233, 245, 246, 247, 248, 252, 253, 308, 386, 408, 422], "cross_valid": [34, 98, 134, 149, 159, 245, 246, 247, 248], "excel": 34, "explan": [34, 84, 102, 156, 157, 158, 159, 164, 174, 176, 190], "best_c": [34, 245, 246, 247, 248], "best_penalti": 34, "best_dual": 34, "cv_score": [34, 98], "9008264462809916": 34, "9177489177489176": 34, "7900432900432901": 34, "803030303030303": 34, "735930735930736": 34, "screening_percentile_rang": 34, "val_scor": 34, "sp": 34, "sreen": 34, "000": [34, 42, 79, 94, 161], "8456": 34, "6111": 34, "8663": 34, "4444": 34, "8433": 34, "8570": [34, 102], "2222": 34, "5000": [34, 49, 55, 98, 102], "kfold": [34, 36, 37, 40, 44, 250, 251], "nested_cv_scor": 34, "_base": [34, 39, 48], "1242": [34, 164], "convergencewarn": [34, 39, 92, 104], "liblinear": [34, 245, 247], "fail": [34, 103, 120, 121, 137, 146, 149, 163, 164, 224, 226, 392], "converg": [34, 92, 104, 163, 182, 185, 250, 251, 389], "increas": [34, 43, 44, 66, 70, 79, 89, 92, 103, 104, 121, 131, 149, 160, 161, 163, 166, 169, 175, 185, 282, 309, 322, 328, 363, 376, 377, 378, 385, 390, 403, 423], "iter": [34, 53, 69, 71, 92, 104, 137, 149, 156, 161, 182, 183, 185, 245, 246, 247, 248, 250, 251, 252, 253, 286, 290, 293, 294, 297, 302, 359, 390, 391, 397], "6296": 34, "axhlin": [34, 339, 341, 344, 346, 348, 350, 352, 354, 356], "frameon": [34, 329, 331, 332], "plot_haxby_grid_search": [34, 45], "overal": [35, 66, 70, 121, 149, 163, 164, 250, 251], "non_rest": 35, "unique_condit": 35, "return_index": 35, "appear": [35, 54, 89, 267, 280, 282, 366, 401], "argsort": [35, 42, 43, 103], "fit_transform": [35, 36, 42, 47, 49, 50, 51, 52, 54, 55, 56, 58, 61, 70, 89, 92, 98, 99, 100, 102, 103, 104, 105, 106, 113, 151, 154, 165, 176, 181, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "selectkbest": [35, 41, 129, 149], "f_classif": [35, 36, 41, 94, 98, 159], "multiclass": [35, 157], "onevsoneclassifi": [35, 157], "onevsrestclassifi": [35, 157], "svc_ovo": 35, "svc_ova": 35, "cross_val_scor": [35, 98, 159], "cv_scores_ovo": 35, "cv_scores_ova": 35, "ovo": 35, "ova": 35, "601855088049469": 35, "6712058072321548": 35, "boxplot": [35, 94], "text": [35, 75, 94, 98, 105, 111, 156, 164, 173, 205, 213, 223, 254, 258, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 423], "y_pred_ovo": 35, "y_pred_ova": 35, "960": [35, 42, 45, 102], "3120": [35, 102], "plot_haxby_multiclass": [35, 45], "intrins": [36, 111, 153, 201, 202, 205, 309], "process_mask_img": [36, 44, 161, 249], "back": [36, 41, 42, 48, 55, 98, 100, 102, 104, 113, 122, 130, 131, 149, 153, 161, 164, 176, 252, 253, 311, 314, 317, 327, 359, 389, 390, 391], "astyp": [36, 40, 41, 43, 44, 68, 75, 84, 94], "process_mask": [36, 44, 128, 149], "picked_slic": 36, "plot_haxby_searchlight": [36, 45], "parallel": [36, 43, 47, 48, 79, 120, 149, 163, 166, 282, 314, 328], "thread": 36, "progress": [36, 42, 102, 105, 124, 149, 267], "mess": 36, "onc": [36, 49, 57, 114, 144, 149, 150, 155, 156, 163, 165, 166, 168, 169, 172, 176, 389, 408], "job": [36, 42, 44, 79, 102, 105, 114, 267, 280, 282, 328], "1962089538574": 36, "14707433735883": 36, "708970389242985": 36, "061216147662385": 36, "92602385346418": 36, "90610321268902": 36, "77397719157741": 36, "55424009003886": 36, "36769831433741": 36, "98693995796792": 36, "69832620705311": 36, "2584381821335": 36, "920397208829236": 36, "46919138367844": 36, "05579783848498": 36, "514232399428423": 36, "080215831827072": 36, "588055185649708": 36, "095462641301026": 36, "584517445651436": 36, "119856675642115": 36, "573025691014283": 36, "097800528959095": 36, "57757684810609": 36, "067009279880622": 36, "525182751554944": 36, "01730064331909": 36, "515042874482923": 36, "989018755746912": 36, "471149093878743": 36, "934522332816286": 36, "41686762899551": 36, "876412243545744": 36, "35057146738785": 36, "809174742705927": 36, "282672490622545": 36, "748041254469218": 36, "20818218033495": 36, "684547647155707": 36, "23404830763099": 36, "685399647805554": 36, "129833823756172": 36, "585091692323566": 36, "02490248219585": 36, "48552516982745": 36, "947582311476758": 36, "3962210124755": 36, "851556329607213": 36, "303398551529787": 36, "754476483277003": 36, "201445473322249": 36, "6531065464918": 36, "095203418292593": 36, "549413408039007": 36, "995810462917209": 36, "448041895518088": 36, "894745556274357": 36, "341764148688421": 36, "793275754629166": 36, "234495921698741": 36, "68498731064729": 36, "129839167630724": 36, "575182448126843": 36, "021061724581677": 36, "470846384832548": 36, "912899079784693": 36, "361321680170199": 36, "8098902306282167": 36, "253301900357068": 36, "702889297789112": 36, "1500234801221545": 36, "5946997663162836": 36, "0442999941874682": 36, "4948628762155": 36, "shuffl": [36, 37, 48, 247, 248], "lt": [36, 75, 89, 91, 92], "0x7f34e7e1eeb0": 36, "gt": [36, 75, 89, 91, 92], "0x7f34e89b5b80": 36, "environ": [36, 49, 52, 53, 58, 62, 75, 77, 134, 135, 137, 144, 149, 156, 171, 174, 235, 385, 422], "rerun": [36, 49, 52, 53, 58, 62, 75, 77], "trust": [36, 49, 52, 53, 58, 62, 75, 77, 166], "unabl": [36, 49, 52, 53, 58, 62, 70, 75, 77, 137, 149], "render": [36, 49, 52, 53, 58, 62, 75, 77, 135, 149, 164, 342, 370, 372, 379, 381, 382, 384, 386, 387, 388], "page": [36, 49, 52, 53, 58, 62, 75, 77, 111, 134, 138, 144, 145, 146, 149, 153, 157, 161, 163, 164, 166, 172, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408], "nbviewer": [36, 49, 52, 53, 58, 62, 75, 77], "searchlightsearchlight": 36, "fmri_mask": [36, 92, 98, 102, 105, 106, 113], "p_valu": [36, 44, 77, 79, 94, 107, 141, 149, 255, 267, 280], "log10": [36, 42, 44, 77, 79, 94, 102, 105, 106, 282, 328, 401], "p_unmask": 36, "inverse_transform": [36, 40, 42, 49, 55, 92, 98, 100, 102, 103, 104, 105, 106, 112, 121, 130, 137, 146, 149, 153, 181, 252, 253, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392, 423], "surrog": [36, 102], "mean_fmri": 36, "searchlight_img": 36, "scores_": [36, 44, 161], "center": [36, 47, 50, 51, 55, 58, 61, 79, 99, 105, 106, 135, 146, 149, 151, 154, 176, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 389, 390, 392, 401, 408], "hot": [36, 308], "f_score": [36, 160, 423], "p_ma": 36, "f_score_img": 36, "016": [36, 41, 45, 64, 66, 73], "demo": [37, 100, 101, 108, 113, 140, 144, 149, 164, 216], "namburi": 37, "elliott": [37, 56, 111, 308, 309], "heinzl": 37, "soon": [37, 71, 172], "chee": 37, "w": [37, 44, 106, 111, 181, 183, 201, 204, 205, 207, 211, 221, 229, 250, 251], "hayn": [37, 111, 161], "2011": [37, 49, 58, 111, 114, 119, 129, 149, 150, 157, 161, 162, 192, 199, 201, 202, 205, 208, 214, 222, 224, 226, 239, 308, 309], "coars": 37, "pial_mesh": 37, "term": [37, 54, 66, 89, 92, 112, 145, 149, 155, 157, 163, 166, 169, 171, 174, 175, 221, 224, 250, 251, 254, 274, 308, 404], "within": [37, 47, 55, 66, 68, 79, 88, 100, 102, 137, 140, 146, 149, 153, 155, 161, 165, 168, 245, 246, 249, 264, 267, 269, 274, 280, 284, 285, 304, 312, 313, 314, 315, 316, 317, 318, 326, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 364, 365, 390, 393, 402, 404], "adjac": [37, 137, 149], "nearbi": 37, "infl_mesh": 37, "infl_": 37, "nn": 37, "nearestneighbor": 37, "radius_neighbors_graph": 37, "tolil": 37, "linear_model": [37, 40, 41, 44, 253], "ridgeclassifi": 37, "make_pipelin": [37, 40, 44], "standardscal": [37, 39, 40, 41, 44], "search_light": [37, 249], "preced": [37, 164, 176, 267], "search": [37, 89, 121, 149, 164, 172, 183, 245, 246, 247, 248, 305], "light": [37, 129, 135, 137, 149, 164, 282], "sulc_": 37, "plot_haxby_searchlight_surfac": [37, 45], "overview": [38, 161, 163, 171], "fetch_stimuli": [38, 213], "stimulus_inform": 38, "stim_typ": 38, "skip": [38, 49, 56, 380, 383], "file_nam": [38, 400], "suptitl": [38, 40, 42, 43, 44, 66, 79, 100, 101, 105], "img_path": [38, 306], "ravel": [38, 41, 43, 44, 102, 105, 106], "imread": 38, "plot_haxby_stimuli": [38, 45], "gain": [39, 66, 158, 163, 222], "fetch_mixed_gambl": [39, 145, 149], "zmap_filenam": 39, "zmap": [39, 101, 222], "behavioral_target": 39, "svr": [39, 42, 44, 137, 149, 157, 246, 248, 249], "solver": [39, 111, 162, 245, 247, 250, 251], "termin": [39, 156, 422], "earli": [39, 111, 162, 224, 226, 285, 389, 404], "max_it": [39, 40, 43, 48, 50, 57, 182, 183, 185, 245, 246, 247, 248, 250, 251], "10000": [39, 42, 49, 55, 102, 105, 282, 328], "pre": [39, 64, 67, 94, 101, 121, 129, 134, 146, 149, 166, 176, 258], "minmaxscal": 39, "0x7f34e7a277f0": 39, "observ": [39, 44, 58, 61, 63, 66, 71, 79, 80, 81, 102, 157, 161, 165, 166, 169, 171, 176, 258, 389], "learnt": 39, "impos": [39, 122, 149], "relat": [39, 46, 49, 50, 63, 64, 65, 66, 67, 68, 69, 71, 81, 100, 106, 110, 111, 114, 128, 129, 149, 151, 152, 154, 156, 157, 160, 163, 164, 169, 170, 171, 172, 176, 181, 210, 215, 236, 237, 240, 252, 253, 255, 267, 291, 305, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 390, 392, 405, 422, 423], "guid": [39, 120, 149, 164, 168, 170, 171, 176, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 413, 414, 422], "unstructur": 39, "graph_net": 39, "heavi": [39, 42, 150, 164], "spacenetregressor": [39, 43, 162, 250], "regressor": [39, 43, 56, 61, 62, 63, 66, 100, 101, 105, 108, 120, 140, 141, 145, 149, 151, 157, 165, 221, 246, 248, 251, 263, 267, 269, 274, 282, 308, 309, 328], "tv_l1": 39, "ep": [39, 43, 250, 251], "prefer": [39, 51, 99, 153, 164, 174], "1825": 39, "plot_mixed_gambles_frem": [39, 45], "partli": [40, 42, 163, 166, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 210, 213, 214, 215, 219, 221, 222, 223, 228, 234], "local": [40, 41, 49, 60, 65, 66, 73, 76, 77, 79, 80, 81, 88, 97, 100, 101, 103, 107, 108, 109, 110, 111, 137, 138, 146, 149, 164, 166, 169, 172, 174, 176, 197, 198, 201, 206, 216, 217, 218, 219, 220, 223, 224, 226, 249, 290, 302, 305, 311, 317, 328, 356, 369, 370, 378, 383], "uchida": [40, 41, 111, 223], "h": [40, 41, 56, 65, 111, 195, 204, 211, 228, 229, 233, 254, 258, 308, 309], "yamashita": [40, 41, 111, 223], "sato": [40, 41, 111, 223], "morito": [40, 41, 111, 223], "tanab": [40, 41, 111, 223], "kamitani": [40, 41, 111, 223], "neuron": [40, 41, 58, 111, 161, 208, 223], "929": [40, 41, 111, 223], "sound": [40, 166], "real": [40, 156, 161, 163, 166, 174, 176], "world": [40, 174, 176, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 362, 365, 374], "stimulu": [40, 41, 65, 100, 166], "particip": [40, 56, 66, 111, 164, 166, 169, 308, 309], "10x10": [40, 41], "binari": [40, 41, 66, 75, 120, 146, 149, 169, 172, 176, 215, 245, 246, 247, 248, 250, 251, 377, 401, 404], "pixel": [40, 41, 166, 267, 280, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 384, 387, 402], "fetch_miyawaki2008": [40, 41, 89], "fmri_random_runs_filenam": 40, "stimuli_random_runs_filenam": 40, "multiniftimask": [40, 41, 48, 49, 141, 143, 149, 173, 245, 246, 247, 248, 250, 251, 252, 253, 280, 282, 328, 390, 423], "fmri_data": [40, 94, 267, 280], "wiht": 40, "stimulus_shap": 40, "stimulus_run": 40, "reshap": [40, 41, 44, 50, 68, 77, 105, 130, 149, 154, 181], "loadtxt": [40, 41], "pylab": [40, 375], "wspace": [40, 44], "stack": [40, 51, 58, 142, 149, 169, 188], "offset": [40, 51, 84, 140, 149, 175, 200, 201, 300], "begin": [40, 62, 66, 71, 140, 149, 169, 403], "fmri_run": 40, "stimuli_run": 40, "2860": [40, 102], "5438": 40, "proce": [40, 55, 65, 113], "independ": [40, 48, 66, 97, 109, 110, 122, 149, 153, 155, 156, 161, 163, 166, 169, 176, 210, 245, 246, 247, 248, 252, 285, 292, 297, 308, 309, 311, 317, 328, 378, 383, 404], "hold": [40, 78, 163, 164, 172, 252, 253, 274, 328, 339, 390], "held": [40, 161, 164, 245, 246, 247, 248, 422], "10th": 40, "r2_score": [40, 251], "multioutput": [40, 251], "raw_valu": 40, "threshold_img": [40, 81, 88, 121, 122, 144, 149, 283, 284], "cut_scor": 40, "bring": [40, 48, 158, 164, 171, 327], "score_map_img": 40, "thresholded_score_map_img": 40, "mark": [40, 56, 100, 111, 221, 308, 309], "four": [40, 44, 66, 144, 149, 176], "coord_transform": [40, 131, 149], "def": [40, 41, 44, 47, 53, 64, 66, 68, 100, 107, 164, 379], "index_to_xy_coord": 40, "newaxi": [40, 44, 80, 84], "xy_indices_of_special_voxel": 40, "marker": [40, 135, 137, 140, 142, 149, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 365, 374, 384, 385, 387, 392, 394, 423], "add_mark": [40, 55, 61, 70, 100, 126, 132, 135, 149, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 421], "magenta": [40, 70, 421], "lw": [40, 70], "construct": [40, 52, 54, 98, 152, 155, 161, 164, 165, 170, 171, 254, 255, 258, 281, 400], "gcf": 40, "set_size_inch": [40, 70], "closer": [40, 49, 163, 401], "presenc": [40, 66, 102, 392, 394], "lasso": [40, 57, 58, 150, 162, 163, 250, 251, 253], "lassolarscv": 40, "sparsiti": [40, 48, 111, 122, 149, 150, 154, 155, 157, 158, 162, 163, 169, 183, 185, 250, 251, 253, 392], "marked_pixel": 40, "gridspec": [40, 142, 149], "gs1": 40, "1780": [40, 42, 102], "1951": [40, 137, 149], "2131": [40, 137, 149], "rf": [40, 68], "named_step": [40, 44, 98], "zeros_lik": [40, 68, 84, 102], "vmax": [40, 44, 49, 50, 52, 53, 54, 55, 56, 57, 58, 76, 79, 80, 84, 90, 100, 102, 105, 107, 118, 120, 137, 149, 154, 363, 364, 368, 370, 371, 373, 376, 377, 378, 379, 381, 382, 384, 385, 386, 388, 421], "ax_im": 40, "masked_less": [40, 106], "green": [40, 49, 89, 92, 111, 142, 149, 209, 254, 258], "add_patch": 40, "updat": [40, 93, 100, 120, 121, 124, 128, 129, 134, 137, 143, 144, 146, 147, 149, 172, 181, 182, 183, 201, 224, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "1935": [40, 111], "rdpu": 40, "0x7f34df3f02b0": 40, "rel": [40, 49, 65, 66, 91, 164, 166, 169, 172, 245, 246, 247, 248, 249, 250, 251, 267, 269, 274, 289, 384, 386, 388], "roughli": [40, 157, 164, 166], "relationship": [40, 42, 75, 161, 168, 170, 171, 221, 328], "plot_miyawaki_encod": [40, 45], "elabor": [41, 122, 149, 421], "articl": [41, 111, 158, 161, 162, 163, 171, 189, 191, 192, 193, 195, 196, 199, 201, 202, 203, 209, 214, 219, 221, 222, 223, 224, 226, 228, 234, 239, 247, 248, 308, 309, 328, 364, 405], "stderr": 41, "miyawaki_dataset": [41, 89], "x_random_filenam": 41, "x_figure_filenam": 41, "y_random_filenam": 41, "y_figure_filenam": 41, "y_shape": 41, "miyawaki2008": [41, 89], "data_figure_run01": [41, 89], "n_featur": [41, 47, 57, 163, 181, 182, 183, 185, 187, 245, 246, 247, 248, 250, 251, 252, 253, 254, 267, 280, 389, 391, 397], "list_of_2d_arrai": 41, "squar": [41, 43, 49, 66, 100, 102, 105, 111, 151, 157, 162, 163, 165, 181, 251, 254, 257, 258, 259, 267, 280, 291, 307, 308, 313, 316, 328, 389, 390, 391, 405], "y_row": 41, "y_col": 41, "height_tf": 41, "width_tf": 41, "yt_tall": 41, "dot": [41, 44, 55, 100, 103, 163, 257, 258, 259, 260, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "yt_larg": 41, "yt_big": 41, "r_": 41, "orthogonalmatchingpursuit": 41, "omp": 41, "clf": [41, 131, 149], "n_clf": 41, "scl": 41, "n_nonzero_coef": 41, "03d": [41, 100], "002": 41, "003": 41, "004": [41, 111, 223], "006": [41, 111, 208], "007": [41, 111, 199, 222], "009": [41, 111, 364], "011": [41, 109], "012": 41, "014": 41, "015": 41, "017": 41, "018": [41, 111, 308, 309], "020": [41, 56, 111, 308, 309], "021": 41, "022": 41, "023": 41, "024": 41, "025": 41, "026": 41, "027": 41, "028": 41, "029": 41, "030": 41, "031": 41, "032": 41, "033": [41, 111, 214, 239], "034": 41, "035": 41, "036": 41, "037": [41, 111], "038": 41, "039": 41, "040": 41, "041": [41, 111, 161], "042": [41, 111, 308, 309, 405], "044": 41, "045": 41, "046": 41, "047": 41, "048": [41, 111, 308], "049": 41, "050": 41, "051": 41, "052": [41, 111, 219], "053": 41, "054": [41, 111, 161], "055": 41, "056": 41, "057": 41, "058": 41, "059": 41, "060": [41, 76, 111, 262, 328], "061": [41, 111, 282, 328], "062": [41, 111, 162], "063": 41, "064": [41, 111, 308, 309], "065": 41, "066": 41, "067": 41, "068": 41, "069": 41, "070": 41, "071": 41, "072": 41, "073": [41, 56, 111, 157, 309], "074": 41, "075": 41, "076": 41, "077": 41, "078": 41, "079": 41, "080": [41, 111], "081": 41, "082": [41, 111, 193], "083": 41, "084": 41, "085": 41, "086": 41, "087": 41, "088": 41, "089": 41, "090": 41, "091": 41, "092": 41, "093": [41, 43, 45], "094": 41, "095": 41, "096": 41, "097": 41, "098": 41, "099": 41, "split_multi_scal": 41, "multi_scal": 41, "yw": 41, "yh": 41, "split_index": 41, "tall": 41, "y_pred_tal": 41, "1x2": 41, "applic": [41, 142, 149, 151, 157, 163, 170, 267, 280, 314, 328, 395, 396, 402, 421, 422, 423], "calculu": 41, "height_tf_i": 41, "y_pred_larg": 41, "2x1": 41, "width_tf_i": 41, "y_pred_big": 41, "2x2": [41, 135, 149, 339, 341, 344, 358, 363, 368, 371, 376, 377, 378, 421], "accuracy_scor": [41, 51], "f1_score": 41, "precision_scor": 41, "recall_scor": 41, "recal": [41, 245, 247], "zero_divis": 41, "f1": [41, 156, 245, 247], "801208": 41, "413969": 41, "572388": 41, "465973": 41, "six": 41, "ground": [41, 44, 57, 156], "truth": [41, 44, 57, 156], "sp1": 41, "sp2": 41, "sp3": 41, "binar": [41, 94, 143, 149, 284], "miyawaki2008_reconstruction_": 41, "plot_miyawaki_reconstruct": [41, 45], "densiti": [42, 57, 75, 163, 168, 170, 214, 228], "agre": [42, 75, 164, 228, 280, 282], "agreement": [42, 62, 75, 228], "spm8": [42, 75, 191, 228], "newseg": [42, 75], "limit": [42, 75, 88, 121, 149, 151, 161, 163, 164, 224, 309, 364], "ran": 42, "prepar": [42, 58, 94, 99, 101, 108, 113, 124, 149, 160, 173, 312, 313, 314, 315, 316, 318, 392, 423], "impact": [42, 66, 78, 144, 149, 161, 164, 172, 176, 267, 280, 309], "significantli": [42, 66, 134, 149, 161, 163], "noisi": [42, 92, 150], "detriment": [42, 309], "permut": [42, 77, 79, 102, 105, 111, 120, 140, 149, 159, 161, 166, 282, 299, 328, 415], "exact": [42, 161, 164, 166, 214, 215, 421], "comparison": [42, 49, 51, 57, 62, 66, 81, 93, 99, 100, 102, 111, 114, 150, 153, 160, 161, 162, 167, 169, 192, 423], "clearer": [42, 164], "oasis_dataset": [42, 75], "fetch_oasis_vbm": [42, 43, 75], "gray_matter_map_filenam": [42, 75], "gray_matter_map": [42, 43, 75, 228], "ext_var": [42, 43, 75, 77, 79, 105, 228], "train_test_split": [42, 43], "gm_imgs_train": [42, 43], "gm_imgs_test": [42, 43], "age_train": [42, 43], "age_test": [42, 43], "train_siz": [42, 43], "white_matter_map": [42, 75, 228], "oasis1": [42, 43, 75], "oas1_0001_mr1": [42, 43, 75], "mwrc1oas1_0001_mr1_mpr_anon_fslswapdim_bet": [42, 43, 75], "mwrc2oas1_0001_mr1_mpr_anon_fslswapdim_bet": [42, 75], "cach": [42, 43, 49, 52, 56, 102, 119, 122, 149, 153, 182, 245, 246, 247, 248, 250, 251, 252, 253, 267, 280, 286, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 390, 391, 392, 408], "gm_maps_mask": 42, "variancethreshold": 42, "variance_threshold": 42, "get_support": 42, "decoderregressor": [42, 137, 140, 141, 149, 157, 245, 248], "benefit": [42, 49, 56, 66, 137, 149, 164, 175], "some_high_valu": [42, 43], "advantag": [42, 43, 69, 163, 176], "neg_mean_absolute_error": [42, 246, 248], "trend": [42, 43, 89, 176], "etc": [42, 43, 80, 89, 92, 94, 114, 162, 165, 169, 174, 221, 245, 246, 247, 248, 250, 251, 259, 317], "perm": [42, 43], "age_pr": 42, "prediction_scor": 42, "670599": 42, "bg_filenam": 42, "absolut": [42, 43, 58, 137, 149, 161, 163, 164, 206, 216, 229, 289, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 362, 363, 365, 370, 371, 373, 377, 378, 379, 382, 385, 386, 388, 421], "year": [42, 43, 111, 163, 172, 210, 228], "0x7f34e7a93f10": 42, "mass_univari": [42, 79, 102, 105, 140, 146, 149, 161, 168], "permuted_ol": [42, 79, 102, 105, 120, 121, 140, 145, 146, 149, 161, 168, 282], "neg_log_pv": [42, 77, 79, 102], "t_scores_original_data": [42, 102], "intercept": [42, 75, 76, 77, 79, 80, 81, 102, 106, 121, 149, 161, 245, 246, 247, 248, 250, 251, 281, 282, 328], "n_perm": [42, 77, 79, 102, 105, 282, 328], "signed_neg_log_pv": [42, 102], "signed_neg_log_pvals_unmask": [42, 102], "rdbu_r": [42, 44, 102, 375], "log_": [42, 102, 105, 106], "parametr": [42, 65, 66, 77, 79, 102, 105, 106, 111, 161, 168, 169, 255, 256, 261, 285, 404], "n_detect": [42, 102, 105], "detect": [42, 68, 77, 79, 89, 100, 102, 106, 111, 161, 166, 169, 176, 181, 308, 309, 389, 421], "26813507080078": 42, "62768363952637": 42, "83929705619812": 42, "65043346087138": 42, "33819246292114": 42, "88170003890991": 42, "594126303990684": 42, "327076298849924": 42, "10771179199219": 42, "81098249223497": 42, "5684278011322": 42, "32716087861495": 42, "105579773585": 42, "17347675103408": 42, "06174325942993": 42, "984090487162273": 42, "750572323799133": 42, "505417557323682": 42, "2624491320716": 42, "07514498108312": 42, "842466115951538": 42, "66629750388009": 42, "457258116115227": 42, "252744384433914": 42, "049316565195717": 42, "8435218334198": 42, "665042822177593": 42, "45649179705867": 42, "34479880332947": 42, "134928053823007": 42, "934694131215416": 42, "74545021210947": 42, "546455681324005": 42, "37571521238847": 42, "195942570181458": 42, "032560655048915": 42, "840689208772446": 42, "658615563366862": 42, "468259485144365": 42, "288789779711994": 42, "102530479431152": 42, "939837851175447": 42, "762687671752204": 42, "596230728681697": 42, "421562931754373": 42, "238904105292427": 42, "067498144896135": 42, "898991138377088": 42, "827927947044373": 42, "663831803263452": 42, "493298768997192": 42, "33134457644294": 42, "156971949797413": 42, "976024605193228": 42, "824042549839728": 42, "64611903103915": 42, "467539174216135": 42, "29328039654514": 42, "132755846812806": 42, "951823949813843": 42, "78171809514364": 42, "61054156256504": 42, "438149429136704": 42, "2629346128494": 42, "079785734415054": 42, "904646635055546": 42, "725590525251445": 42, "54640385997829": 42, "371243532966165": 42, "19285131537396": 42, "01256891659328": 42, "839436463906733": 42, "667247772216797": 42, "49204582384188": 42, "32290941315728": 42, "750": [42, 102], "15966041882833": 42, "760": [42, 102], "992753543351824": 42, "770": [42, 102], "8134580804156": 42, "780": [42, 102], "633935115276238": 42, "790": [42, 102], "462778441513642": 42, "288406014442444": 42, "810": [42, 102], "11495963438058": 42, "820": [42, 102], "94660707217891": 42, "830": [42, 102], "774099597011705": 42, "840": [42, 102], "598729916981288": 42, "850": [42, 102], "432167880675372": 42, "860": [42, 102], "266440774119175": 42, "870": [42, 102], "096473340330455": 42, "880": [42, 102], "92807219245217": 42, "75649376665608": 42, "900": [42, 102, 137, 149, 201], "59107531441583": 42, "910": [42, 102], "420948248643143": 42, "920": [42, 102], "253923467967823": 42, "930": [42, 102], "088641184632497": 42, "940": [42, 102], "923957758761468": 42, "950": [42, 102], "755660847613687": 42, "586705446243286": 42, "970": [42, 102], "416944498868332": 42, "980": [42, 102], "242581133939783": 42, "990": [42, 102], "073380123485215": 42, "906585693359375": 42, "1010": [42, 102], "731690347784816": 42, "1020": [42, 102], "562368720185525": 42, "1030": [42, 102], "392405280789127": 42, "1040": [42, 102], "21942498133733": 42, "1050": [42, 71, 73, 102], "046113638650805": 42, "1060": [42, 102], "874830722808838": 42, "1070": [42, 102], "705523285910347": 42, "1080": [42, 102, 111, 328], "5363934746495": 42, "1090": [42, 48, 102], "374321808508776": 42, "1100": [42, 102], "20619763027538": 42, "1110": [42, 102], "040226790282103": 42, "1120": [42, 102], "872283969606672": 42, "1130": [42, 102], "705139683411184": 42, "1140": [42, 102], "537921683830128": 42, "1150": [42, 102], "371451108351996": 42, "1160": [42, 102], "204471382601508": 42, "1170": [42, 102], "035623495395368": 42, "1180": [42, 102, 111, 252], "867329751030875": 42, "1190": [42, 102], "699559271836481": 42, "1200": [42, 102], "530914465586344": 42, "1210": [42, 102], "361669599517318": 42, "1220": [42, 102], "19208275685545": 42, "1230": [42, 52, 59, 102], "023570423203754": 42, "1240": [42, 102], "853397807767314": 42, "1250": [42, 102], "685838842391968": 42, "1260": [42, 102], "520715308567835": 42, "1270": [42, 102], "351812818857628": 42, "1280": [42, 102], "182041481137276": 42, "1290": [42, 102], "01450401868007": 42, "1300": [42, 102], "848081203607412": 42, "1310": [42, 102], "679917226310904": 42, "1320": [42, 102], "512794371807214": 42, "1330": [42, 102], "345938847477276": 42, "1340": [42, 102, 111, 162], "176718441408072": 42, "1350": [42, 50, 102, 154, 392, 394], "008875943996287": 42, "1360": [42, 102], "84209846047794": 42, "1370": [42, 102, 132, 149], "673369574720843": 42, "1380": [42, 102], "504042169322139": 42, "1390": [42, 102], "335310375090126": 42, "1400": [42, 102], "16540561403547": 42, "1410": [42, 102], "995777835237218": 42, "1420": [42, 102], "826927087676358": 42, "1430": [42, 102], "656858492564488": 42, "1440": [42, 102], "488602148161995": 42, "318900560510569": 42, "1460": [42, 102], "149214329784863": 42, "1470": [42, 102], "981117209609675": 42, "1480": [42, 102], "810282165939745": 42, "1490": [42, 102], "640585451318113": 42, "1500": [42, 88, 102], "47025426228841": 42, "1510": [42, 102], "300825082703142": 42, "1520": [42, 102], "131331092432925": 42, "1530": [42, 102], "962189200656867": 42, "1540": [42, 102], "792458679768946": 42, "1550": [42, 102], "62320750759494": 42, "1560": [42, 102], "45314990557157": 42, "1570": [42, 102], "283387197810374": 42, "1580": [42, 102], "11314418346067": 42, "1590": [42, 102], "944639718757485": 42, "1600": [42, 102, 267, 280, 402], "775193929672241": 42, "1610": [42, 102], "606886185474278": 42, "1620": [42, 102], "438008691057746": 42, "1630": [42, 102], "268472819240547": 42, "1640": [42, 102], "098894468167933": 42, "1650": [42, 102], "929468458349055": 42, "1660": [42, 102], "760053548468164": 42, "1670": [42, 102], "590648922377718": 42, "1680": [42, 102], "421660150800432": 42, "1690": [42, 102], "25274373652667": 42, "1700": [42, 102], "082754107082591": 42, "1710": [42, 102], "912827370459573": 42, "1720": [42, 102], "743584832479788": 42, "1730": [42, 102], "574720501210648": 42, "1740": [42, 102], "405084300315243": 42, "1750": [42, 102], "2354946817670545": 42, "1760": [42, 102], "066766641356728": 42, "1770": [42, 102], "897115571350701": 42, "727888251958268": 42, "1790": [42, 102], "5583435290352594": 42, "1800": [42, 102], "3887329896291094": 42, "1810": [42, 102], "219257101828222": 42, "1820": [42, 102], "050591288032112": 42, "1830": [42, 102], "88116789645836": 42, "1840": [42, 102], "712086532426917": 42, "1850": [42, 102], "542574740744926": 42, "1860": [42, 102], "3731602135524956": 42, "1870": [42, 102], "2035904517148266": 42, "1880": [42, 102], "0339989154896836": 42, "1890": [42, 102], "8645902954081377": 42, "1900": [42, 102], "6948964595794678": 42, "1910": [42, 102], "525519111393634": 42, "1920": [42, 102], "3561214208602905": 42, "1930": [42, 102], "1865229680748182": 42, "1940": [42, 102], "017000476109613": 42, "1950": [42, 102], "8475060218419784": 42, "1960": [42, 102], "6780561281710255": 42, "1970": [42, 102], "5085640933913023": 42, "1980": [42, 102], "339030612598766": 42, "1990": [42, 102], "1695048737166515": 42, "1981": 42, "1949": 42, "plot_oasis_vbm": [42, 45, 137, 149], "ag": [43, 46, 59, 78, 97, 109, 110, 111, 137, 149, 150, 157, 158, 162, 168, 169, 170, 171, 181, 189, 199, 210, 214, 221, 228, 234, 239, 245, 246, 247, 248, 250, 251, 311, 316, 365, 375, 383], "concentr": [43, 164, 166, 169], "ram": 43, "box": [43, 84, 98, 104, 130, 149, 157, 164, 175, 300], "dataset_fil": 43, "gm_img": 43, "check_random_st": [43, 44], "rng": [43, 164], "intermedi": [43, 69, 159, 171], "graph": [43, 47, 53, 57, 150, 152, 162, 163, 169, 170, 245, 246, 250, 251, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 374, 423], "beauti": 43, "tv": [43, 111, 162, 245, 246, 250, 251], "expens": 43, "longer": [43, 104, 118, 120, 121, 131, 135, 137, 140, 142, 144, 146, 147, 149, 166], "runtim": [43, 146, 149, 164, 250, 251], "mse": [43, 250, 251, 259], "oas1_0003_mr1": 43, "mwrc1oas1_0003_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0086_mr1": 43, "mwrc1oas1_0086_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0052_mr1": 43, "mwrc1oas1_0052_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0211_mr1": 43, "mwrc1oas1_0211_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0216_mr1": 43, "mwrc1oas1_0216_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0096_mr1": 43, "mwrc1oas1_0096_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0182_mr1": 43, "mwrc1oas1_0182_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0041_mr1": 43, "mwrc1oas1_0041_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0214_mr1": 43, "mwrc1oas1_0214_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0069_mr1": 43, "mwrc1oas1_0069_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0025_mr1": 43, "mwrc1oas1_0025_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0159_mr1": 43, "mwrc1oas1_0159_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0113_mr1": 43, "mwrc1oas1_0113_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0038_mr1": 43, "mwrc1oas1_0038_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0013_mr1": 43, "mwrc1oas1_0013_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0220_mr1": 43, "mwrc1oas1_0220_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0180_mr1": 43, "mwrc1oas1_0180_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0007_mr1": 43, "mwrc1oas1_0007_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0031_mr1": 43, "mwrc1oas1_0031_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0135_mr1": 43, "mwrc1oas1_0135_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0005_mr1": 43, "mwrc1oas1_0005_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0037_mr1": 43, "mwrc1oas1_0037_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0160_mr1": 43, "mwrc1oas1_0160_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0163_mr1": 43, "mwrc1oas1_0163_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0123_mr1": 43, "mwrc1oas1_0123_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0162_mr1": 43, "mwrc1oas1_0162_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0012_mr1": 43, "mwrc1oas1_0012_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0070_mr1": 43, "mwrc1oas1_0070_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0126_mr1": 43, "mwrc1oas1_0126_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0164_mr1": 43, "mwrc1oas1_0164_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0188_mr1": 43, "mwrc1oas1_0188_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0226_mr1": 43, "mwrc1oas1_0226_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0173_mr1": 43, "mwrc1oas1_0173_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0078_mr1": 43, "mwrc1oas1_0078_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0138_mr1": 43, "mwrc1oas1_0138_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0072_mr1": 43, "mwrc1oas1_0072_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0050_mr1": 43, "mwrc1oas1_0050_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0184_mr1": 43, "mwrc1oas1_0184_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0032_mr1": 43, "mwrc1oas1_0032_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0045_mr1": 43, "mwrc1oas1_0045_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0121_mr1": 43, "mwrc1oas1_0121_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0176_mr1": 43, "mwrc1oas1_0176_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0177_mr1": 43, "mwrc1oas1_0177_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0029_mr1": 43, "mwrc1oas1_0029_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0026_mr1": 43, "mwrc1oas1_0026_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0208_mr1": 43, "mwrc1oas1_0208_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0165_mr1": 43, "mwrc1oas1_0165_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0091_mr1": 43, "mwrc1oas1_0091_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0044_mr1": 43, "mwrc1oas1_0044_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0190_mr1": 43, "mwrc1oas1_0190_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0053_mr1": 43, "mwrc1oas1_0053_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0106_mr1": 43, "mwrc1oas1_0106_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0174_mr1": 43, "mwrc1oas1_0174_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0049_mr1": 43, "mwrc1oas1_0049_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0155_mr1": 43, "mwrc1oas1_0155_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0004_mr1": 43, "mwrc1oas1_0004_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0117_mr1": 43, "mwrc1oas1_0117_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0060_mr1": 43, "mwrc1oas1_0060_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0148_mr1": 43, "mwrc1oas1_0148_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0204_mr1": 43, "mwrc1oas1_0204_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0202_mr1": 43, "mwrc1oas1_0202_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0209_mr1": 43, "mwrc1oas1_0209_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0055_mr1": 43, "mwrc1oas1_0055_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0090_mr1": 43, "mwrc1oas1_0090_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0039_mr1": 43, "mwrc1oas1_0039_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0009_mr1": 43, "mwrc1oas1_0009_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0124_mr1": 43, "mwrc1oas1_0124_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0103_mr1": 43, "mwrc1oas1_0103_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0094_mr1": 43, "mwrc1oas1_0094_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0200_mr1": 43, "mwrc1oas1_0200_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0205_mr1": 43, "mwrc1oas1_0205_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0101_mr1": 43, "mwrc1oas1_0101_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0010_mr1": 43, "mwrc1oas1_0010_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0015_mr1": 43, "mwrc1oas1_0015_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0067_mr1": 43, "mwrc1oas1_0067_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0193_mr1": 43, "mwrc1oas1_0193_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0146_mr1": 43, "mwrc1oas1_0146_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0019_mr1": 43, "mwrc1oas1_0019_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0080_mr1": 43, "mwrc1oas1_0080_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0199_mr1": 43, "mwrc1oas1_0199_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0150_mr1": 43, "mwrc1oas1_0150_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0189_mr1": 43, "mwrc1oas1_0189_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0207_mr1": 43, "mwrc1oas1_0207_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0071_mr1": 43, "mwrc1oas1_0071_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0061_mr1": 43, "mwrc1oas1_0061_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0120_mr1": 43, "mwrc1oas1_0120_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0056_mr1": 43, "mwrc1oas1_0056_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0223_mr1": 43, "mwrc1oas1_0223_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0065_mr1": 43, "mwrc1oas1_0065_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0054_mr1": 43, "mwrc1oas1_0054_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0099_mr1": 43, "mwrc1oas1_0099_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0023_mr1": 43, "mwrc1oas1_0023_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0064_mr1": 43, "mwrc1oas1_0064_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0181_mr1": 43, "mwrc1oas1_0181_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0217_mr1": 43, "mwrc1oas1_0217_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0144_mr1": 43, "mwrc1oas1_0144_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0042_mr1": 43, "mwrc1oas1_0042_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0178_mr1": 43, "mwrc1oas1_0178_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0218_mr1": 43, "mwrc1oas1_0218_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0002_mr1": 43, "mwrc1oas1_0002_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0059_mr1": 43, "mwrc1oas1_0059_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0167_mr1": 43, "mwrc1oas1_0167_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0145_mr1": 43, "mwrc1oas1_0145_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0169_mr1": 43, "mwrc1oas1_0169_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0115_mr1": 43, "mwrc1oas1_0115_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0111_mr1": 43, "mwrc1oas1_0111_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0131_mr1": 43, "mwrc1oas1_0131_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0098_mr1": 43, "mwrc1oas1_0098_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0082_mr1": 43, "mwrc1oas1_0082_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0136_mr1": 43, "mwrc1oas1_0136_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0227_mr1": 43, "mwrc1oas1_0227_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0022_mr1": 43, "mwrc1oas1_0022_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0212_mr1": 43, "mwrc1oas1_0212_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0079_mr1": 43, "mwrc1oas1_0079_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0119_mr1": 43, "mwrc1oas1_0119_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0016_mr1": 43, "mwrc1oas1_0016_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0104_mr1": 43, "mwrc1oas1_0104_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0203_mr1": 43, "mwrc1oas1_0203_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0114_mr1": 43, "mwrc1oas1_0114_mr1_mpr_anon_fslswapdim_bet": 43, "transform_single_img": [43, 48, 49, 52, 53, 54, 56, 58, 311, 312, 313, 314, 315, 316, 317, 318, 392], "space_net": 43, "941": 43, "path_scor": 43, "_graph_net_squared_loss": 43, "0x7f34e86600d0": 43, "tol": [43, 182, 183, 185, 250, 251], "0001": [43, 250, 251], "n_alpha": [43, 183, 250, 251], "is_classif": 43, "debia": [43, 250, 251], "2652228933482088": 43, "1784": 43, "persist": [43, 48, 92], "happen": [43, 48, 92, 161, 176, 408], "caus": [43, 48, 49, 84, 92, 122, 149, 303], "wrap": [43, 48, 49, 52, 56, 92, 156, 400], "_____________________________________________________path_scor": 43, "4min": 43, "elaps": [43, 48], "77481055259705": 43, "8295801758766173": 43, "ax1": [43, 63, 372], "ax2": [43, 63, 372], "2486": 43, "plot_oasis_vbm_space_net": [43, 45], "sketch": 44, "mathbf": 44, "opposit": [44, 71, 161], "corner": [44, 127, 149, 164, 302], "middl": [44, 66, 91, 111, 134, 142, 149, 228, 306], "__doc__": [44, 71, 72], "linalg": [44, 163], "ndimag": [44, 94, 175, 215, 237, 240, 294, 320, 321, 322, 324, 325], "gaussian_filt": 44, "f_regress": [44, 102, 105, 106], "create_simulation_data": 44, "snr": [44, 169, 285, 404], "roi_siz": 44, "smooth_x": 44, "xx": 44, "randn": [44, 63], "xi": [44, 111, 201], "norm_nois": 44, "norm": [44, 55, 62, 76, 79, 101, 107, 108, 187, 245, 246, 247, 248, 250, 251, 252, 253, 267, 389, 390, 391, 392], "exp": 44, "noise_coef": 44, "log": [44, 49, 53, 77, 79, 94, 124, 149, 161, 163, 254, 257, 258, 259, 260, 296, 372], "1f": [44, 379, 382], "db": [44, 111, 259, 260], "plot_slic": 44, "hspace": [44, 49, 57], "bool": [44, 94, 103, 181, 182, 183, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 207, 208, 209, 210, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 226, 228, 234, 245, 246, 247, 248, 249, 250, 251, 252, 253, 262, 264, 267, 280, 282, 283, 285, 289, 291, 295, 298, 300, 301, 304, 305, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 363, 364, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 393, 395, 396, 401, 402, 403, 404, 405], "uint8": [44, 56, 91, 146, 149, 298], "recov": [44, 58, 130, 149, 150], "elast": 44, "bayesian": [44, 166], "metaprior": 44, "ridgecv": [44, 121, 149, 245, 246, 247, 248], "elasticnetcv": 44, "bayesian_ridg": 44, "bayesianridg": 44, "enet_cv": 44, "l1_ratio": [44, 250, 251], "ridge_cv": 44, "r2": [44, 141, 149, 246, 248, 259], "expos": [44, 49, 114, 126, 130, 131, 149, 164, 174, 224, 225, 226, 227], "fairli": [44, 157, 166], "attribut": [44, 48, 49, 50, 84, 89, 113, 114, 132, 141, 142, 144, 145, 146, 147, 149, 150, 153, 154, 155, 161, 164, 174, 176, 181, 182, 183, 190, 194, 196, 199, 210, 213, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 245, 246, 247, 248, 250, 251, 252, 253, 257, 258, 259, 260, 267, 287, 295, 308, 309, 312, 313, 314, 315, 316, 317, 318, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 379, 381, 382, 389, 390, 391, 392, 407, 408], "t1": [44, 75, 143, 149, 191, 214, 236, 238, 239, 241, 363, 421], "els": [44, 47, 68, 70, 94, 100, 222, 245, 246, 247, 248, 250, 251, 380], "del": 44, "elapsed_tim": 44, "__class__": [44, 48, 49], "__name__": [44, 48, 49], "isnan": [44, 77, 94, 102, 105, 106], "42609786987305": 44, "251228643186164": 44, "285529025944984": 44, "331270793672941": 44, "328995757690001": 44, "32940173581848": 44, "055504072991269": 44, "065853060027699": 44, "019341364792562": 44, "789363666617751": 44, "561954871624644": 44, "429847071888122": 44, "244160148889749": 44, "004691262465452": 44, "823815408072256": 44, "62257690253895": 44, "409833618683125": 44, "207972724071149": 44, "025150233617297": 44, "8362196108708337": 44, "6386352347503728": 44, "465487197112017": 44, "289811733076574": 44, "109710966707798": 44, "9335787298011637": 44, "769449461509635": 44, "6054864308825763": 44, "441338491439819": 44, "278918528222059": 44, "125097739328913": 44, "9803330090738114": 44, "825589575496405": 44, "6765787294716659": 44, "5330913880527106": 44, "3852203779935532": 44, "2354578987753444": 44, "0886234820253864": 44, "9425777603991182": 44, "791235088380482": 44, "6430634080069647": 44, "48927999879206857": 44, "3372178285444216": 44, "18369349543632887": 44, "030363349088684124": 44, "exercic": 44, "recurs": [44, 49, 98, 111, 137, 149, 153, 159, 169, 170, 390, 391, 397], "elimin": [44, 98, 159, 162, 376, 377], "rfe": [44, 98, 159], "tip": [44, 171], "plot_simulated_data": [44, 45], "auto_examples_02_decod": 45, "2485": 45, "1948": 45, "1824": 45, "3119": 45, "turn": [47, 66, 84, 151, 153, 163, 176, 267, 280, 320, 321, 322, 324, 325, 376, 377, 378, 385, 402], "find_parcellation_cut_coord": [47, 58, 134, 144, 149, 151, 361, 365], "find_probabilistic_atlas_cut_coord": [47, 50, 53, 134, 149, 151, 154, 360, 365], "intermediari": 47, "multiniftilabelsmask": [47, 120, 149, 173, 423], "multiniftimapsmask": [47, 120, 149, 173, 423], "connectivitymeasur": [47, 50, 51, 54, 56, 58, 99, 122, 124, 127, 130, 140, 149, 150, 151, 154], "author": [47, 55, 111, 163, 164, 172, 418], "fetch_atlas_yeo_2011": [47, 86, 151], "liber": [47, 79], "thick_17": [47, 205], "yeo_2011": 47, "yeo_jneurophysiol11_mni152": 47, "yeo2011_17networks_mni152_freesurferconformed1mm_liberalmask": 47, "fetch_development_fmri": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 85, 89, 91, 92, 95, 99, 104, 137, 149, 150, 151, 153, 154, 171, 176], "counfound": 47, "development_fmri": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "pixar123_task": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "pixar_spac": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "mni152nlin2009casym_desc": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "preproc_bold": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 100, 101, 104, 108], "pixar_desc": [47, 52, 53, 54, 55, 56, 58], "reducedconfounds_regressor": [47, 52, 53, 54, 55, 56, 58], "conenctivitymeasur": 47, "connectome_measur": [47, 50, 154], "labels_img": [47, 49, 56, 91, 94, 151, 312, 315, 360, 393, 395, 398], "time_seri": [47, 51, 52, 54, 56, 58, 150, 151], "mean_correlation_matrix": [47, 51], "mean_": [47, 51, 150, 181], "strength": [47, 137, 140, 149, 302, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 421], "connectivity_matric": [47, 50, 51, 54, 56], "0x7f34e7b11b50": 47, "latter": [47, 157, 163, 181, 182, 183, 197, 198, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 370, 378, 382, 389, 390, 391, 392], "lag_correl": 47, "lag_cor": 47, "corrcoef": 47, "lag_correlation_matrix": 47, "adjacency_matrix": [47, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 384], "maps_img": [47, 52, 53, 54, 151, 176, 312, 313, 315, 316, 361, 376, 392, 394, 396, 399], "cache_mixin": [47, 49, 52, 54], "769": [47, 59], "1636": [47, 59], "plot_atlas_comparison": [47, 59], "fmr": 48, "exhibit": [48, 166, 176], "fluctuat": [48, 66, 163, 166, 169], "decomposit": [48, 50, 92, 97, 103, 109, 110, 111, 121, 122, 129, 132, 140, 146, 149, 154, 155, 170, 210, 291, 292, 297, 311, 314, 317, 378, 383, 392, 405], "simultan": [48, 163, 185], "priori": 48, "children": [48, 99, 137, 149, 170, 210], "young": [48, 111, 170, 193, 221, 228], "adult": [48, 51, 99, 111, 137, 149, 170, 210, 228], "watch": [48, 49, 50, 52, 54, 55, 85, 89, 92, 104, 137, 149, 152, 170, 171, 176, 210, 423], "movi": [48, 49, 50, 52, 54, 55, 85, 89, 92, 104, 137, 149, 152, 170, 171, 176, 210, 423], "algorithm": [48, 49, 89, 92, 94, 102, 104, 105, 113, 150, 153, 154, 155, 158, 159, 161, 169, 176, 177, 179, 182, 185, 228, 252, 253, 291, 323, 325, 389, 392, 394, 405], "preprint": 48, "rest_dataset": [48, 50, 53, 154], "faster": [48, 49, 104, 131, 149, 162, 163, 164, 224, 253, 300, 301, 370, 371, 377, 378, 385, 408], "n_compon": [48, 50, 92, 103, 104, 154, 252, 253, 397], "mask_strategi": [48, 89, 92, 104, 137, 143, 149, 176, 245, 246, 247, 248, 252, 253, 314, 317, 390], "compon": [48, 50, 54, 66, 92, 94, 97, 109, 110, 111, 122, 129, 130, 132, 140, 149, 151, 152, 153, 154, 166, 169, 174, 175, 181, 182, 183, 192, 202, 210, 221, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 259, 260, 267, 280, 292, 294, 297, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 362, 378, 383, 389, 390, 391, 392, 393, 394, 405, 423], "components_img_": [48, 50, 132, 149, 154, 155, 252, 253], "canica_components_img": 48, "components_img": [48, 50, 154], "canica_resting_st": 48, "pixar124_task": 48, "pixar125_task": 48, "pixar126_task": 48, "pixar127_task": 48, "pixar128_task": 48, "pixar001_task": [48, 53, 85], "pixar002_task": [48, 53], "pixar003_task": [48, 53], "pixar004_task": 48, "pixar005_task": 48, "pixar006_task": 48, "pixar007_task": 48, "pixar008_task": 48, "pixar009_task": 48, "pixar010_task": 48, "pixar011_task": 48, "pixar012_task": 48, "pixar013_task": 48, "pixar014_task": 48, "pixar015_task": 48, "pixar016_task": 48, "pixar017_task": 48, "pixar018_task": 48, "pixar019_task": 48, "pixar020_task": 48, "pixar021_task": 48, "pixar022_task": 48, "pixar023_task": 48, "pixar024_task": 48, "self": [48, 49, 94, 164, 181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "functool": 48, "compute_multi_brain_mask": [48, 120, 143, 149, 314], "0x7f34e8d25310": 48, "mask_typ": [48, 321, 324], "887": [48, 99, 109], "extmath": 48, "randomized_svd": 48, "003659": 48, "013254": 48, "012477": 48, "002881": 48, "transpos": [48, 140, 149, 163], "n_iter": [48, 49, 50, 215, 237, 240, 390, 391, 397], "___________________________________________________randomized_svd": 48, "_fastica": [48, 92, 104], "fastica": [48, 92, 103, 104, 252], "004071": 48, "000497": 48, "005856": 48, "004765": 48, "whiten": [48, 254, 258, 259, 260], "fun": 48, "cube": [48, 176, 401], "209652396": 48, "__________________________________________________________fastica": 48, "398764591": 48, "924231285": 48, "1min": [48, 53], "1478610112": 48, "441365315": 48, "1537364731": 48, "192771779": 48, "1491434855": 48, "1819583497": 48, "530702035": 48, "0x7f34e79cf160": 48, "cur_img": [48, 87], "ic": [48, 103], "natur": [48, 111, 114, 169, 210, 221, 224, 226], "cleaner": [48, 66, 134, 149], "compress": [48, 111, 134, 149, 152, 155, 174, 253, 423], "onlin": [48, 111, 155, 164, 253, 422], "isbi": [48, 111, 155, 252, 253], "2016": [48, 100, 111, 124, 125, 126, 127, 128, 149, 155, 211, 229, 253, 364], "lectur": [48, 111, 155, 171, 181], "dictlearn": [48, 50, 121, 122, 132, 149, 154, 155], "dict_learn": [48, 50, 154], "n_epoch": [48, 253], "umask": 48, "dictlearning_components_img": 48, "dictionary_learning_resting_st": 48, "001315": 48, "004387": 48, "011243": 48, "004194": 48, "00289": 48, "002135": 48, "005107": 48, "012507": 48, "_________________________________________________________fastica": 48, "2min": [48, 56], "_compute_load": 48, "007493": 48, "00709": 48, "000136": 48, "001312": 48, "622651": 48, "322742": 48, "777205": 48, "743122": 48, "_________________________________________________compute_load": 48, "_dict_learn": [48, 50], "dict_learning_onlin": 48, "batch_siz": [48, 253, 389], "cd": [48, 172, 253], "dict_init": [48, 253], "148832": 48, "004228": 48, "244404": 48, "327163": 48, "return_cod": 48, "deprec": [48, 50, 87, 120, 121, 124, 128, 129, 130, 131, 132, 134, 137, 139, 140, 142, 144, 146, 147, 149, 172, 193, 194, 202, 230, 245, 246, 247, 248, 252, 253, 270, 311, 312, 313, 314, 315, 316, 317, 318, 328, 390, 392, 395, 396], "_____________________________________________dict_learning_onlin": 48, "0x7f34e70a5670": 48, "comp": [48, 192], "per_compon": [48, 140, 149, 252, 253, 390], "ticker": [48, 49], "formatstrformatt": 48, "gca": [48, 51, 99], "xaxi": [48, 49], "set_major_formatt": [48, 49], "_explained_vari": 48, "227098e": 48, "322679e": 48, "977029e": 48, "807597e": 48, "______________________________________________explained_vari": 48, "2659": 48, "plot_compare_decomposit": [48, 59, 137, 149], "constrain": [49, 50, 111, 153, 170, 194, 199, 390], "agglomer": [49, 111, 169, 170, 247, 248, 389, 390, 391, 397], "regim": 49, "subsequ": [49, 84, 176, 224, 226, 228, 308, 309], "empir": [49, 153, 160, 161, 162, 163, 182, 185, 309, 423], "baptist": [49, 111, 182, 219, 224, 226, 252], "polin": [49, 64, 67, 111, 114, 182, 219, 224, 226, 252, 285, 404], "good": [49, 56, 65, 66, 113, 129, 149, 150, 153, 155, 157, 158, 159, 160, 162, 163, 164, 165, 172, 174, 176, 224, 247, 248, 359, 423], "2014": [49, 100, 102, 111, 153, 154, 161, 162, 221, 308, 328, 392], "supervis": [49, 157, 159, 160, 169, 171], "evelyn": [49, 111, 162], "eger": [49, 111, 162], "christin": [49, 111, 234], "keribin": 49, "elsevi": 49, "pictur": [49, 113, 153, 161, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408], "discuss": [49, 56, 134, 149, 153, 156, 159, 161, 166, 168, 172, 175, 309, 328, 422], "long": [49, 114, 164, 166, 308, 309, 364], "agglom": [49, 137, 149, 153, 390], "_estimator_fit": 49, "005457": 49, "005033": 49, "009986": 49, "000234": 49, "agglomerativeclust": [49, 390], "24256x24256": 49, "162682": 49, "n_cluster": [49, 389, 391, 397], "_agglom": 49, "ward_tre": 49, "return_dist": 49, "________________________________________________________ward_tre": 49, "____________________________________________________estimator_fit": 49, "974": [49, 79], "labels_img_": [49, 153, 312, 315, 390], "ward_labels_img": 49, "ward_parcel": 49, "first_plot": 49, "effect": [49, 53, 60, 61, 64, 66, 69, 70, 71, 73, 75, 79, 80, 89, 95, 100, 102, 110, 111, 133, 149, 155, 157, 161, 163, 165, 166, 176, 181, 182, 183, 197, 198, 212, 225, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 259, 260, 261, 263, 264, 267, 270, 280, 282, 297, 309, 311, 312, 313, 314, 315, 316, 317, 318, 328, 363, 376, 377, 378, 383, 385, 389, 390, 391, 392], "approxim": [49, 64, 71, 111, 153, 259, 260, 307, 391, 397], "mask_img_": [49, 66, 77, 79, 89, 92, 113, 176, 245, 246, 247, 248, 250, 251, 252, 253, 312, 314, 315, 317], "original_voxel": 49, "mean_func_img": [49, 92], "min": [49, 53, 55, 58, 102, 103, 142, 143, 149, 300, 301, 363, 364, 368, 370, 371, 374, 376, 377, 379, 385, 386, 388], "opportun": 49, "fmri_reduc": 49, "fmri_compress": 49, "60000": 49, "base_mask": [49, 52, 53, 54, 56, 58, 92], "_filter_and_extract": [49, 52, 53, 54, 56, 58], "0x7f34e681c9a0": 49, "nifti_labels_mask": [49, 56, 91], "_extractionfunctor": [49, 52, 53, 54, 56, 58], "0x7f34df404a60": 49, "background_label": [49, 56, 91, 176, 312, 315, 360, 395, 398], "keep_masked_label": [49, 56, 91, 147, 149, 315, 395], "0x7f34e681c1c0": 49, "0x7f34e681c370": 49, "niftilabelsmask": [49, 54, 56, 83, 94, 96, 110, 134, 135, 137, 140, 141, 142, 144, 146, 147, 149, 151, 173, 197, 210, 311, 312, 313, 316, 395, 398, 400, 423], "_______________________________________________filter_and_extract": [49, 52, 53, 54, 56, 58], "0x7f34df38ccd0": 49, "But": [49, 80, 98, 154, 163, 166, 176], "10mm": 49, "ON": 49, "002844": 49, "000787": 49, "00577": 49, "000616": 49, "minibatchkmean": [49, 389, 390], "n_init": [49, 252, 389], "kmeans_labels_img": 49, "kmeans_parcel": 49, "grow": [49, 150], "unbalanc": 49, "singleton": [49, 311, 312, 313, 314, 315, 316, 317, 318, 392], "tailor": [49, 69, 153], "enforc": [49, 89, 146, 149, 150, 163, 164, 250, 251, 267], "root": [49, 163, 181, 197, 198, 258, 308, 389, 390, 391], "piec": [49, 174, 423], "adapt": [49, 65, 113, 154, 157, 164, 267, 276, 308], "hierarchical_kmean": [49, 144, 149, 390], "hkmean": 49, "hierarchicalkmean": [49, 144, 149], "x27": [49, 62, 89, 91], "parcellationsparcel": 49, "hkmeans_labels_img": 49, "hierarchical_kmeans_parcel": 49, "count": [49, 101, 224, 226, 257], "kmeans_count": 49, "return_count": 49, "hkmeans_count": 49, "voxel_ratio": 49, "round": [49, 379, 382], "3000": [49, 102], "nrow": [49, 63, 79, 100, 101], "sharex": 49, "gridspec_kw": [49, 80, 100], "height_ratio": 49, "semilogx": 49, "hist": [49, 70, 372], "set_ylim": 49, "scalarformatt": 49, "yaxi": 49, "set_label_coord": 49, "ec": 49, "0x7f34e3dceac0": 49, "thousand": [49, 176, 390], "properti": [49, 71, 159, 163, 166, 169, 176, 267, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "notabl": [49, 151], "constraint": [49, 153, 163, 305], "kahn": [49, 111, 391, 397], "ieee": [49, 111, 162, 252, 253, 391, 397], "transact": [49, 111, 162], "intellig": [49, 84], "pp": 49, "march": [49, 117, 132, 141, 149, 249], "2019": [49, 51, 99, 111, 135, 136, 137, 149, 209, 391, 397], "hal": [49, 111, 162, 392], "archiv": [49, 228], "ouvert": 49, "fr": [49, 111, 162, 191, 199, 392], "01366651": 49, "0x7f34d8fcfcd0": 49, "rena_clust": [49, 120, 149], "recursive_neighbor_agglomer": [49, 120, 149], "_________________________________recursive_neighbor_agglomer": 49, "0x7f34e7fe6190": 49, "0x7f34e783e760": 49, "0x7f34e7fe6f10": 49, "0x7f34e7fe6d00": 49, "rena_labels_img": 49, "rena_parcel": 49, "0x7f34e7aacb80": 49, "fmri_reduced_rena": 49, "compressed_img_rena": 49, "0x7f34e8501370": 49, "0x7f34e774f070": 49, "0x7f34e8501460": 49, "0x7f34e8501850": 49, "0x7f34e69b5cd0": 49, "notic": [49, 58, 66, 101, 108, 305], "accur": [49, 58, 66, 69, 137, 145, 149, 161, 165, 166], "said": [49, 166], "2304": [49, 140, 149], "plot_data_driven_parcel": [49, 59], "regionextractor": [50, 87, 122, 124, 130, 135, 149, 154, 393, 394], "decompos": [50, 150, 154, 166, 392], "inspir": [50, 162, 164, 172], "idea": [50, 88, 94, 156, 163, 166], "canica": [50, 120, 121, 132, 143, 149, 152, 169, 253, 314, 423], "instanti": [50, 51, 91, 144, 149, 249, 339, 341, 344, 346, 348, 350, 352, 354, 356], "0x7f34e4b07cd0": 50, "nomin": 50, "nonzero": [50, 302, 392], "surviv": [50, 141, 149, 255, 392], "extractor": [50, 87, 154, 392, 394], "thresholding_strategi": [50, 87, 154, 392], "ratio_n_voxel": [50, 154, 392], "local_region": [50, 154, 392, 394], "min_region_s": [50, 87, 88, 154, 392, 394], "regions_img_": [50, 87, 154, 392], "regions_extracted_img": [50, 154, 394], "index_": [50, 87, 154, 392], "regions_index": [50, 154], "n_regions_extract": [50, 154], "neach": [50, 154], "0x7f34e59daf40": 50, "those": [50, 62, 66, 69, 71, 80, 89, 108, 144, 149, 155, 157, 159, 163, 164, 166, 172, 224, 304, 307, 315, 364, 386, 392, 395, 398, 399, 408], "timeseries_each_subject": [50, 154], "mean_correl": [50, 154], "regions_img": [50, 87, 154], "coords_connectom": [50, 154], "0x7f34e4ae5880": 50, "find_xyz_cut_coord": [50, 87, 124, 131, 149, 154], "side": [50, 53, 63, 66, 94, 102, 120, 141, 149, 161, 224, 255, 320, 323, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 364, 372, 373, 401, 402], "nice": [50, 154], "regions_indices_of_map3": [50, 154], "rgbcmyk": [50, 154], "each_index_of_map3": [50, 154], "add_overlai": [50, 118, 149, 154, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 421], "alpha_cmap": [50, 154], "1223": [50, 59], "plot_extract_regions_dictlearning_map": [50, 59], "tangent": [51, 99, 130, 149, 154, 181], "embed": [51, 99, 400], "outperform": [51, 99, 150, 155], "dadi": [51, 99, 111, 196], "care": [51, 99, 113, 156, 157, 159, 163, 200, 201, 254], "development_dataset": [51, 99], "msdl_data": [51, 99], "msdl_coord": [51, 99], "region_coord": [51, 52, 54, 99, 126, 149, 199], "n_region": [51, 91], "aud": 51, "striat": 51, "occ": 51, "att": 51, "basal": 51, "vi": 51, "sec": [51, 210], "salienc": [51, 209], "languag": [51, 64, 67, 100, 101, 108, 114, 206, 216, 219], "cereb": [51, 71], "dor": 51, "cing": 51, "Ins": 51, "ant": 51, "ip": 51, "niftimapsmask": [51, 52, 53, 54, 91, 99, 117, 134, 141, 144, 147, 149, 151, 173, 313, 315, 392, 396, 399, 423], "filter": [51, 55, 56, 58, 66, 68, 94, 103, 112, 113, 118, 120, 121, 134, 137, 142, 144, 146, 149, 156, 169, 173, 175, 189, 224, 226, 228, 244, 245, 246, 247, 248, 250, 251, 252, 253, 267, 270, 285, 302, 304, 305, 308, 311, 312, 313, 314, 315, 316, 317, 318, 390, 392, 403, 404, 423], "band": [51, 58, 146, 149, 189, 308, 403], "resampling_target": [51, 53, 54, 91, 94, 99, 176, 312, 313, 315, 316], "phenotyp": [51, 62, 99, 145, 149, 156, 160, 173, 189, 190, 210, 234, 423], "pooled_subject": 51, "child": [51, 210], "func_fil": 51, "confound_fil": 51, "child_adult": [51, 99], "simpler": 51, "commonli": [51, 153, 165, 169, 171, 172, 176, 309], "margin": [51, 300], "pairwis": [51, 150], "correlation_measur": [51, 54, 56], "individu": [51, 58, 62, 66, 69, 72, 76, 78, 79, 80, 81, 94, 100, 101, 108, 111, 150, 155, 168, 169, 171, 173, 176, 181, 182, 207, 219, 282, 326, 380, 423], "2d": [51, 54, 84, 91, 92, 98, 103, 112, 146, 149, 156, 159, 173, 176, 182, 183, 184, 185, 186, 252, 253, 254, 263, 287, 307, 311, 312, 313, 314, 315, 316, 317, 318, 319, 329, 331, 332, 333, 334, 335, 336, 337, 338, 343, 345, 347, 349, 351, 353, 355, 370, 389, 390, 391, 392, 398, 399, 406, 408, 414, 423], "reflect": [51, 101, 150, 164, 166, 193, 376, 377], "visibl": [51, 79, 143, 149, 155, 300, 373, 379, 381, 382, 386, 421], "0x7f34e739f670": 51, "reveal": [51, 101, 102, 161], "partial_correlation_measur": 51, "partial_correlation_matric": 51, "weaker": [51, 66, 79], "0x7f34e6cc2be0": 51, "tangent_measur": 51, "deviat": [51, 150, 245, 246, 247, 248, 250, 251], "tangent_matric": 51, "perturb": 51, "anticorrel": [51, 111, 309], "distinguish": [51, 94, 98, 99, 157, 161, 166, 170, 174], "stratifiedshufflesplit": [51, 99], "preserv": [51, 58, 99, 290, 302, 373, 389, 390, 391], "linearsvc": [51, 98, 99, 161, 245, 247], "return_invers": 51, "test_siz": [51, 99], "1d": [51, 102, 105, 106, 113, 146, 149, 174, 176, 181, 249, 257, 259, 260, 263, 269, 285, 307, 311, 312, 313, 314, 315, 316, 317, 318, 339, 346, 350, 356, 359, 392, 393, 398, 403, 404, 406, 408], "mean_scor": [51, 99], "scores_std": [51, 99], "align": [51, 56, 91, 99, 301, 303, 370], "xerr": [51, 99], "set_axisbelow": [51, 99], "axvlin": 51, "linestyl": 51, "showcas": [51, 60, 74, 76, 99, 110, 153, 158, 164], "larger": [51, 75, 80, 86, 99, 155, 157, 161, 163, 164, 166, 250, 251, 363, 376, 377, 378, 385], "cohort": [51, 99], "clinic": [51, 99, 157, 171], "948": [51, 59], "1277": 51, "plot_group_level_connect": [51, 59, 130, 137, 149], "link": [52, 111, 114, 127, 134, 139, 149, 152, 156, 159, 164, 166, 169, 172, 191, 196, 221, 234, 330, 340, 341, 365, 423], "negat": [52, 83, 96, 110, 242, 296, 378, 383], "dens": [52, 54, 150, 163, 322], "highest": [52, 54, 245, 246, 247, 248, 270, 291, 405], "resample_img": [52, 54, 71, 84, 89, 93, 121, 131, 137, 146, 149, 175, 176, 224, 252, 253, 267, 280, 299, 301, 314, 317, 320, 322, 323, 325, 390], "________________________________________resample_img": 52, "nifti_maps_mask": [52, 53, 54], "0x7f34e7aacac0": 52, "allow_overlap": [52, 53, 54, 58, 313, 316, 318], "keep_masked_map": [52, 53, 54, 147, 149, 316, 396], "msdl_atla": [52, 53, 54], "msdl_roi": [52, 53, 54, 199], "graphicallassocv": [52, 53, 57, 58, 150, 163, 183], "scitkit": [52, 53, 57, 58], "v0": [52, 53, 57, 58, 134, 137, 142, 144, 149, 201], "graphlassocv": [52, 53, 57, 58], "graphicallassocvgraphicallassocv": [52, 53, 58], "covariance_": [52, 53, 58, 150], "axesimag": [52, 54, 56], "0x7f34e8aa88b0": 52, "0x7f34e71850d0": 52, "precision_": [52, 53, 57, 150], "0x7f34dab33130": 52, "plot_inverse_covariance_connectom": [52, 59], "plot_matric": 53, "cov": [53, 257, 259, 260, 422], "prec": [53, 163], "put": [53, 54, 64, 67, 71, 98, 118, 149, 164, 245, 246, 247, 248, 252, 253, 267, 312, 313, 314, 315, 316, 317, 318, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 390, 392, 404], "diagon": [53, 54, 56, 58, 86, 127, 149, 163, 175, 181, 185, 187, 188, 299, 300, 359, 375, 393], "clariti": 53, "span": [53, 71, 166, 363, 376, 377, 378, 385], "msdl_atlas_dataset": 53, "subject_time_seri": 53, "confound_filenam": [53, 55], "region_t": 53, "__________________________________________high_variance_confound": 53, "0x7f34e8417370": 53, "174325": 53, "048779": 53, "044073": 53, "155444": 53, "0x7f34e71023a0": 53, "151677": 53, "057023": 53, "206928": 53, "102714": 53, "0x7f34e687cb80": 53, "127944": 53, "087084": 53, "015679": 53, "02587": 53, "0x7f34f2e6cca0": 53, "089762": 53, "062316": 53, "065223": 53, "022868": 53, "groupsparsecovariancecv": [53, 57, 150, 163], "gsc": [53, 57], "gl": [53, 57], "likelihood": [53, 163, 166, 181, 254, 257, 258, 259, 260], "decreas": [53, 66, 95, 163, 164, 363, 376, 377, 378, 385], "stop": [53, 97, 109, 110, 111, 114, 162, 182, 185, 224, 226, 290, 295, 296, 298, 370, 378, 383, 389], "refin": [53, 57, 58, 183], "optim": [53, 57, 100, 111, 137, 141, 149, 157, 159, 162, 163, 183, 185, 196, 300, 301], "toler": [53, 92, 104, 163, 182, 183, 185, 250, 251, 289], "reach": [53, 163, 164, 166, 171, 224, 308], "841e": 53, "graphical_lasso": 53, "68e": 53, "gap": [53, 182, 185], "123e": 53, "664e": 53, "158e": 53, "389e": 53, "530e": 53, "318e": 53, "844e": 53, "atlas_region_coord": [53, 151], "graphicallasso": [53, 150], "edge_vmax": [53, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365], "edge_vmin": [53, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365], "groupsparsecovari": [53, 150, 163, 183], "precisions_": [53, 57, 150, 182, 183], "covariances_": [53, 150, 182, 183], "plot_multi_subject_connectom": [53, 59], "0x7f34e79a0e80": 54, "_____________________________________________________resample_img": 54, "0x7f34e89f6670": 54, "generate_report": [54, 89, 91, 92, 144, 149, 176, 267, 280, 312, 313, 314, 315, 316, 317, 392], "displayed_map": [54, 313, 316, 392], "contrarili": [54, 91, 315, 316], "summar": [54, 91, 156, 164, 259, 315, 316, 318, 401], "pca": [54, 252, 316], "miss": [54, 77, 84, 143, 147, 149, 164, 169, 274, 313, 316, 322, 325], "correlation_matrix": [54, 56, 421], "major": [54, 94, 164, 171], "fill_diagon": [54, 56], "0x7f34e880a0d0": 54, "1147": [54, 59], "plot_probabilistic_atlas_extract": [54, 59], "depict": [55, 164, 175], "advanc": [55, 109, 111, 156, 158, 159, 164, 165, 171, 175, 213, 245, 247, 248, 292, 311, 317, 364, 378, 423], "lie": [55, 182, 185, 315, 395], "1st": 55, "hard": [55, 151, 163, 169, 174], "drive": 55, "wide": [55, 71, 105, 111, 156, 157, 159, 163, 164, 211, 229, 249], "pcc_coord": [55, 61, 165], "niftispheresmask": [55, 58, 61, 70, 100, 119, 122, 124, 135, 139, 141, 149, 165, 173, 423], "bandpass": 55, "seed_mask": [55, 61, 100, 165], "seed_time_seri": [55, 61, 165], "brain_mask": [55, 100], "brain_time_seri": 55, "n_volum": 55, "32504": 55, "exemplarili": 55, "seed_to_voxel_correl": 55, "954": 55, "extrem": [55, 118, 149, 401], "seed_to_voxel_correlations_img": 55, "marker_coord": [55, 61, 100, 135, 137, 149, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 387], "At": [55, 63, 65, 69, 77, 80, 91, 154, 171, 172, 280, 282], "pcc_seed_correl": 55, "seed_to_voxel_correlations_fisher_z": 55, "arctanh": 55, "762": 55, "874f": 55, "eventu": [55, 421], "seed_to_voxel_correlations_fisher_z_img": 55, "pcc_seed_correlation_z": 55, "766": [55, 59, 100, 111], "plot_seed_to_voxel_correl": [55, 59, 135, 149], "movement": [56, 171, 176], "load_confound": [56, 66, 121, 144, 147, 149, 151, 176, 309], "flexibli": 56, "guidelin": [56, 94, 120, 143, 146, 149, 156, 172], "en": [56, 166, 191, 309, 312], "craddock": [56, 111, 146, 149, 150, 151, 194, 199, 234], "2013": [56, 111, 137, 149, 150, 151, 161, 162, 189, 193, 199, 308], "reorder": [56, 132, 149, 299, 359, 375], "reduce_confound": [56, 210], "reduced_confound": 56, "preselect": 56, "metadata": [56, 91, 114, 121, 137, 149, 175, 181, 182, 183, 224, 225, 226, 227, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 307, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "nifti1head": [56, 91], "endian": [56, 91, 130, 149, 294, 300], "sizeof_hdr": [56, 91], "data_typ": [56, 91], "db_name": [56, 91], "extent": [56, 91, 95, 169, 341, 344], "session_error": [56, 91], "dim_info": [56, 91], "intent_p1": [56, 91], "intent_p2": [56, 91], "intent_p3": [56, 91], "intent_cod": [56, 91], "datatyp": [56, 91], "bitpix": [56, 91], "slice_start": [56, 91], "pixdim": [56, 91], "vox_offset": [56, 91], "scl_slope": [56, 91], "scl_inter": [56, 91], "slice_end": [56, 91], "slice_cod": [56, 91], "xyzt_unit": [56, 91], "cal_max": [56, 91], "cal_min": [56, 91], "slice_dur": [56, 91], "toffset": [56, 91], "glmax": [56, 91], "glmin": [56, 91], "descrip": [56, 91], "aux_fil": [56, 91], "qform_cod": [56, 91], "sform_cod": [56, 91], "quatern_b": [56, 91], "quatern_c": [56, 91], "quatern_d": [56, 91], "qoffset_x": [56, 91], "qoffset_i": [56, 91], "qoffset_z": [56, 91], "srow_x": [56, 91], "srow_i": [56, 91], "srow_z": [56, 91], "intent_nam": [56, 91], "magic": [56, 91, 363, 370, 371, 373, 377, 378], "0x7f34e441af70": 56, "0x7f34e44143a0": 56, "0x7f34e44eed60": 56, "cover": [56, 164, 176, 207, 209, 359], "firstli": 56, "did": [56, 92, 104, 128, 144, 149, 166], "bad": [56, 105, 163, 164], "No": [56, 66, 77, 91, 105, 163, 164, 301], "0x7f34e441abb0": 56, "0x7f34e45284f0": 56, "ensur": [56, 58, 100, 134, 141, 149, 161, 163, 164, 166, 229, 255, 280, 282, 315, 329, 331, 332, 395], "steadi": [56, 66, 142, 149, 267, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 392, 404], "correctli": [56, 66, 93, 135, 137, 138, 146, 149, 159, 166, 172, 267, 308, 309, 422], "confounds_simpl": 56, "wm_csf": [56, 308, 309], "cosine00": 56, "cosine01": 56, "cosine02": 56, "cosine03": 56, "rot_x": 56, "rot_i": 56, "rot_z": 56, "trans_x": 56, "trans_i": 56, "trans_z": 56, "white_matt": 56, "0x7f34e810b6d0": 56, "109104": 56, "109090": 56, "109066": 56, "026078": 56, "055006": 56, "876886": 56, "108937": 56, "108723": 56, "027587": 56, "049458": 56, "418909": 56, "108990": 56, "108632": 56, "108038": 56, "019085": 56, "075787": 56, "540842": 56, "108875": 56, "108176": 56, "107012": 56, "023900": 56, "053022": 56, "922085": 56, "107567": 56, "105651": 56, "033396": 56, "077764": 56, "843388": 56, "064873": 56, "022169": 56, "221217": 56, "064266": 56, "042248": 56, "237783": 56, "053241": 56, "029500": 56, "590905": 56, "081559": 56, "034236": 56, "122246": 56, "069287": 56, "007294": 56, "000828": 56, "0x7f34e818e430": 56, "exceed": [56, 131, 149], "framewis": [56, 210, 308], "displac": [56, 210, 308], "standardis": 56, "dvar": [56, 308], "five": [56, 66, 390], "percentag": [56, 156, 245, 246, 247, 248], "volumn": [56, 308], "suitabl": [56, 69, 134, 149, 157, 161, 176, 222, 309], "confounds_scrub": 56, "fd_threshold": [56, 308, 309], "std_dvars_threshold": [56, 308, 309], "0x7f34da7d3190": 56, "097319": 56, "110228": 56, "100980": 56, "024472": 56, "048861": 56, "796008": 56, "097281": 56, "110075": 56, "100637": 56, "025982": 56, "043313": 56, "338031": 56, "097205": 56, "109770": 56, "099952": 56, "017480": 56, "069643": 56, "459963": 56, "097090": 56, "109313": 56, "098926": 56, "022294": 56, "046877": 56, "841207": 56, "096938": 56, "108705": 56, "097565": 56, "031791": 56, "071620": 56, "762509": 56, "120508": 56, "113737": 56, "066478": 56, "028314": 56, "302095": 56, "120661": 56, "115099": 56, "062660": 56, "048393": 56, "318661": 56, "120775": 56, "116124": 56, "054846": 56, "035645": 56, "671784": 56, "120851": 56, "116809": 56, "079953": 56, "040381": 56, "203124": 56, "120889": 56, "117152": 56, "070892": 56, "013439": 56, "081706": 56, "0x7f34e7eb28e0": 56, "grand": [56, 267], "physiolog": [56, 66, 70, 309], "artifact": [56, 111, 176, 285, 308, 309, 404], "minim": [56, 62, 164, 169, 267, 269, 274, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 376], "degre": [56, 68, 100, 107, 166, 255, 258, 309, 379, 381, 382], "freedom": [56, 100, 107, 151, 166, 255, 258, 309], "downsid": [56, 66], "insight": [56, 143, 149, 150], "confounds_minimal_no_gsr": 56, "global_sign": [56, 308, 309], "gsr": 56, "0x7f34e87c65b0": 56, "0x7f34df543f70": 56, "load_confounds_strategi": [56, 144, 149, 151, 176, 308], "benchmark": [56, 111, 162, 308, 309], "compcor": [56, 66, 111, 144, 149, 151, 210, 291, 308, 309, 405], "ica_aroma": [56, 144, 149, 308, 309], "denoise_strategi": [56, 309], "__________________________________filter_and_extract": 56, "rastko": [56, 111, 308, 309], "ciric": [56, 111, 308, 309], "wolf": [56, 58, 111, 163, 308, 309], "jonathan": [56, 58, 111, 162, 201, 205, 207, 208, 262, 308, 309, 364], "roalf": [56, 111, 308, 309], "graham": [56, 111, 308, 309], "baum": [56, 111, 308, 309], "kosha": [56, 111, 308, 309], "ruparel": [56, 111, 308, 309], "russel": [56, 100, 111, 114, 171, 222, 224, 226, 234, 259, 260, 308, 309], "shinohara": [56, 111, 308, 309], "eickhoff": [56, 111, 201, 202, 308, 309], "christo": [56, 111, 308, 309], "davatziko": [56, 111, 308, 309], "ruben": [56, 111, 308, 309], "gur": [56, 111, 308, 309], "raquel": [56, 111, 308, 309], "bassett": [56, 111, 308, 309], "theodor": [56, 111, 308, 309], "satterthwait": [56, 111, 308, 309], "2017": [56, 111, 129, 130, 131, 149, 156, 158, 200, 201, 219, 247, 248, 308, 309, 364, 418], "linden": [56, 111, 309], "park": [56, 111, 309], "fulcher": [56, 111, 309], "murat": [56, 111, 309], "y\u00fccel": [56, 111, 309], "fornito": [56, 111, 309], "evalu": [56, 111, 159, 163, 169, 204, 245, 246, 247, 248, 254, 258, 309, 401, 402], "efficaci": [56, 111, 309], "reliabl": [56, 111, 134, 149, 166, 219, 309], "2018": [56, 76, 111, 132, 133, 134, 149, 158, 200, 201, 210, 247, 248, 262, 285, 309, 391, 397, 404], "768": [56, 59], "plot_signal_extract": [56, 59, 176], "data_gen": [57, 121, 146, 149, 163], "generate_group_sparse_gaussian_graph": [57, 163], "n_displai": 57, "min_n_sampl": 57, "max_n_sampl": 57, "max_precis": 57, "alpha_": [57, 183], "group_sparse_cov": 57, "instabl": [57, 66, 163, 403], "772": [57, 59], "plot_simulated_connectom": [57, 59], "spheric": 58, "nardo": [58, 111, 207], "1358": [58, 111, 207], "1361": [58, 111, 207], "dmn_coord": [58, 176, 421], "temporopariet": 58, "junction": 58, "prefront": 58, "sequenc": [58, 61, 64, 66, 69, 79, 147, 149, 156, 165, 169, 174, 176, 219, 245, 246, 247, 248, 257, 259, 260, 267, 280, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 379, 381, 382, 384, 402, 403, 408], "clean__butterworth__padtyp": 58, "butterworth": [58, 120, 121, 142, 146, 149, 285, 312, 313, 314, 315, 316, 317, 318, 404], "confounds_filenam": 58, "nifti_spheres_mask": 58, "0x7f34e79d75b0": 58, "butterworth__padtyp": 58, "Its": [58, 150, 158, 163, 249, 260, 267, 280, 283, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 402], "ledoit": [58, 163], "connectivity_measur": 58, "partial_correlation_matrix": 58, "0x7f34e732fac0": 58, "suppli": [58, 249, 250, 251, 274, 308, 315, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 395, 404], "mass": [58, 79, 146, 149, 282, 328, 360, 401], "fetch_coords_power_2011": 58, "dict_kei": 58, "collect": [58, 100, 103, 107, 111, 112, 164, 169, 224, 225, 226, 227, 308, 423], "spheres_mask": 58, "exce": [58, 183], "graphic": [58, 111, 150, 163, 164, 177, 182, 185], "covariance_estim": 58, "_method": 58, "subtract": [58, 66, 101, 171, 225], "tweak": [58, 89, 154], "strongest": 58, "node_s": [58, 135, 137, 144, 149, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 374, 384], "0x7f34e847dcd0": 58, "sometim": [58, 66, 80, 114, 118, 147, 149, 156, 164, 169, 254, 258], "overwhelm": 58, "plot_mark": [58, 140, 144, 146, 149, 421], "node_strength": 58, "0x7f34e3e36cd0": 58, "clip": [58, 84, 300, 301], "positive_edg": 58, "negative_edg": 58, "node_strength_posit": 58, "node_strength_neg": 58, "node_cmap": [58, 374], "ylorrd": 58, "pubu": 58, "0x7f34ddf24310": 58, "fetch_coords_dosenbach_2010": [58, 125, 128, 149], "0x7f34e550df10": 58, "cerebellum": [58, 111, 207, 209, 221], "cingulo": 58, "opercular": [58, 91], "fronto": [58, 101], "occipit": [58, 91], "sensorimotor": 58, "965": [58, 59, 111, 221], "plot_sphere_based_connectom": [58, 59, 137, 149], "auto_examples_03_connect": 59, "2658": 59, "1276": 59, "2303": 59, "focus": [60, 74, 98, 110, 113, 126, 132, 149, 157, 160, 161, 164], "neurospin": [60, 65, 73, 110, 164, 369], "adhd": [60, 73, 85, 110, 137, 146, 149, 150, 165, 190, 267, 274, 311, 318, 341, 378, 400, 402], "finit": [60, 73, 77, 79, 103, 110, 130, 149, 165, 169, 220, 267, 269, 274, 285, 302, 319, 322, 363, 366, 367, 377, 378, 404], "impul": [60, 73, 110, 220, 267, 366, 367, 378], "fir": [60, 63, 73, 110, 165, 169, 220, 267, 269, 274, 366, 367, 378], "residu": [60, 62, 73, 110, 144, 149, 161, 167, 231, 251, 254, 255, 258, 259, 260, 267, 280, 285, 286, 297, 302, 311, 318, 322, 356, 378, 401, 423], "openneuro": [60, 73, 110, 165, 210, 211, 229, 230, 244, 267, 270, 307, 310, 317, 366, 370, 372, 400, 401, 402], "understand": [60, 73, 83, 96, 110, 128, 149, 157, 159, 164, 171, 173, 210, 215, 217, 218, 220, 223, 267, 291, 292, 297, 301, 308, 311, 317, 322, 366, 367, 368, 377, 378, 383, 400, 423], "workflow": [61, 164, 309], "determin": [61, 79, 94, 100, 101, 102, 107, 161, 163, 164, 183, 251, 270, 281, 305, 320, 321, 322, 323, 324, 325, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 370, 371, 373, 377, 378, 385, 389, 408], "make_first_level_design_matrix": [61, 63, 69, 71, 108, 144, 149, 165], "frametim": 61, "add_subplot": [61, 91], "set_titl": [61, 63, 70, 75, 78, 79, 80, 91, 100, 105], "add_reg": [61, 63, 108, 165, 274], "add_reg_nam": [61, 63, 274], "pcc_seed": 61, "dmn_contrast": 61, "seed_based_glm": 61, "setup": [61, 69, 108, 121, 145, 149, 168, 189, 190, 191, 192, 193, 194, 195, 199, 202, 203, 205, 213, 214, 217, 218, 219, 222, 223, 228, 234, 392, 422], "first_level_model": [61, 65, 66], "run_img": [61, 101, 108, 267], "design_matric": [61, 62, 64, 67, 71, 100, 165, 267], "snapshot": 61, "dmn_z_map": 61, "portabl": [61, 75, 176], "pertin": [61, 75], "min_dist": [61, 267, 280, 401, 402], "plot_typ": [61, 267, 280, 402], "plot_adhd_dmn": [61, 73], "exploit": [62, 155, 163], "io": [62, 101, 142, 149, 154, 189, 196, 200, 210, 219, 386, 422], "s3": 62, "bucket": 62, "assur": 62, "nistat": [62, 120, 123, 140, 149], "against": [62, 156, 165, 169, 224, 282, 328, 375], "stopsign": 62, "ds000030": [62, 211], "v4": 62, "emploi": [62, 168, 169, 401, 402], "fetch_ds000030_url": [62, 146, 149, 229], "fetch_openneuro_dataset": 62, "select_from_index": 62, "exclusion_pattern": 62, "mriqc": 62, "parameter_plot": 62, "physio_plot": 62, "t1w": 62, "dwi": 62, "beh": 62, "bart": 62, "scap": 62, "exclusion_filt": [62, 244], "data_dir": [62, 100, 101, 108, 143, 149, 174, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235], "subject_id": [62, 101, 108, 231, 232], "moreov": [62, 101, 108, 146, 149, 164, 171, 305], "task_label": [62, 101, 108, 270], "space_label": [62, 270], "folder": [62, 86, 94, 101, 108, 144, 149, 164, 172, 174, 197, 198, 235, 270, 295, 305], "fmriprep": [62, 66, 144, 146, 147, 149, 151, 155, 166, 169, 176, 210, 214, 215, 239, 270], "app": [62, 111, 221, 228, 270], "first_level_from_bid": [62, 100, 101, 108, 121, 147, 149, 369], "mni152nlin2009casym": 62, "derivatives_fold": [62, 270], "models_run_img": [62, 100, 101, 108, 270], "models_ev": [62, 101, 108, 270], "models_confound": [62, 100, 101, 108, 270], "minimize_memori": [62, 64, 67, 70, 165, 267, 270, 280], "overrid": [62, 100, 141, 149, 189, 190, 191, 192, 193, 194, 195, 199, 202, 203, 205, 213, 214, 217, 218, 219, 222, 223, 228, 234, 390], "interfac": [62, 100, 101, 108, 140, 144, 149, 155, 163, 164, 169, 245, 246], "get_design_from_fslmat": [62, 144, 149], "fsl_design_matrix_path": [62, 310], "feat": 62, "mat": [62, 310, 375], "column_nam": [62, 310], "stopsuccess": 62, "definit": [62, 94, 151, 159, 160, 163, 164, 165, 169, 173, 196, 307, 312, 315, 318, 366, 395, 396, 398, 399, 423], "design_column": [62, 265], "cond_": 62, "10159": 62, "firstlevelmodelfirstlevelmodel": 62, "nib": 62, "fsl_z_map": 62, "zstat12": 62, "isf": [62, 76, 79, 101, 107, 108], "unc": [62, 79, 80, 101], "plot_img_comparison": 62, "masker_": [62, 66, 77, 79, 245, 246, 247, 248, 250, 251, 252, 253, 390], "ref_label": [62, 372], "src_label": [62, 372], "latex": [62, 120, 149, 172], "purpos": [62, 64, 67, 69, 71, 79, 101, 108, 113, 163, 168, 176, 210, 267, 280, 330, 402, 421], "to_latex": 62, "tabular": 62, "llrrrrl": 62, "toprul": 62, "midrul": 62, "000000": [62, 66], "307532": 62, "6300": [62, 102], "668929": 62, "534376": 62, "254210": 62, "918703": 62, "2520": [62, 102], "715845": 62, "2b": 62, "683343": 62, "2c": 62, "587956": 62, "692869": 62, "664250": 62, "461193": 62, "257986": 62, "078390": 62, "815609": 62, "5c": 62, "798387": 62, "208105": 62, "348351": 62, "190472": 62, "385929": 62, "163956": 62, "079389": 62, "056165": 62, "792": 62, "10a": 62, "726486": 62, "10b": 62, "710553": 62, "043724": 62, "950054": 62, "937283": 62, "906274": 62, "756": [62, 100, 111], "14a": 62, "882906": 62, "776293": 62, "bottomrul": 62, "save_glm_to_bid": [62, 120, 146, 149], "contrast_typ": [62, 69, 108, 255, 263, 307], "out_dir": [62, 307], "nilearn_glm": 62, "prefix": [62, 285, 307, 312, 313, 314, 315, 316, 317, 318, 404], "_task": [62, 270], "stopsuccessminusgo": 62, "r_squar": [62, 70, 144, 149, 259, 267, 280], "glob": [62, 122, 132, 149, 173, 286, 305, 423], "dataset_descript": [62, 307], "json": [62, 100, 101, 108, 114, 270, 305, 307, 308, 309], "10159_task": 62, "stopsignal_contrast": 62, "stopsuccessminusgo_design": 62, "stopsuccessminusgo_stat": 62, "effect_statmap": [62, 307], "p_statmap": 62, "t_statmap": 62, "variance_statmap": [62, 307], "z_statmap": 62, "stopsignal_design": 62, "stopsignal_stat": 62, "errorts_statmap": [62, 307], "rsquare_statmap": [62, 307], "stopsignal_statmap": 62, "plot_bids_featur": [62, 73], "runtimeerror": [63, 78], "librari": [63, 78, 94, 113, 134, 149, 159, 164, 171, 175, 412, 421, 422], "compris": [63, 66, 86, 393, 401], "trial": [63, 66, 72, 111, 156, 165, 169, 222], "c0": 63, "c1": 63, "c3": 63, "motion": [63, 66, 70, 101, 111, 142, 149, 165, 210, 267, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 392, 404], "jointli": [63, 164, 297, 373, 379, 381, 382, 386], "cumsum": 63, "translat": [63, 137, 149, 175, 267, 280, 283, 308, 402], "rigid": 63, "bodi": [63, 400], "tx": 63, "ty": 63, "tz": 63, "rx": 63, "ry": 63, "rz": 63, "varieti": [63, 100, 155, 156, 157, 158, 159, 164, 169], "x1": [63, 94, 408], "polynomi": [63, 66, 165, 267, 274], "x2": [63, 94], "x3": 63, "ax3": 63, "895": [63, 73], "fiac": [64, 212], "dehaen": [64, 67, 111, 219], "lambertz": [64, 67], "anton": [64, 67], "jl": [64, 67], "campagn": [64, 67], "ciuciu": [64, 67, 111, 252], "denghien": [64, 67], "jobert": [64, 67, 111, 219], "lebihan": [64, 67], "sigman": [64, 67], "pallier": [64, 67], "jb": [64, 67], "segreg": [64, 67], "sentenc": [64, 65, 66, 67, 69, 72, 81, 101, 219], "hum": [64, 67], "mapp": [64, 67], "2006": [64, 67, 111, 161, 171, 249, 259, 260], "www": [64, 67, 71, 111, 114, 158, 161, 162, 189, 190, 191, 192, 193, 194, 196, 199, 202, 203, 209, 213, 214, 215, 219, 221, 222, 223, 224, 226, 228, 231, 232, 234, 239, 247, 248, 285, 308, 309, 328, 364, 404, 405], "pubmedcentr": [64, 67, 111, 308, 309], "nih": [64, 67, 111, 157, 252, 308, 309], "gov": [64, 67, 111, 157, 252, 308, 309], "articlerend": [64, 67, 111, 308, 309], "fcgi": [64, 67, 111, 308, 309], "artid": [64, 67, 111, 308, 309], "2653076": [64, 67], "r11": [64, 67], "subdirectori": [64, 224, 226], "getcwd": 64, "write_dir": 64, "fetch_fiac_first_level": [64, 67], "func1": [64, 67, 71, 232], "func2": [64, 67, 71, 232], "design_fil": [64, 67], "design_matrix1": [64, 67], "design_matrix2": [64, 67], "df": [64, 67, 100, 107, 401], "n_column": [64, 67, 166, 188], "pad_vector": 64, "contrast_": 64, "sstssp_minus_dstdsp": 64, "dstdsp_minus_sstssp": 64, "dst_minus_sst": [64, 67], "dsp_minus_ssp": 64, "dst_minus_sst_for_dsp": 64, "dsp_minus_ssp_for_dst": 64, "deactiv": 64, "contrast_id": [64, 65, 66, 67, 69, 71], "contrast_v": [64, 65, 66, 67, 69, 71], "contast": 64, "implicitli": [64, 66, 69, 80, 102, 108, 156, 163], "z_image_path": 64, "_z_map": 64, "assum": [64, 66, 71, 78, 79, 161, 166, 172, 188, 229, 230, 257, 258, 259, 260, 267, 280, 282, 285, 300, 303, 327, 366, 375, 403, 404], "0x7f34e7d63f10": 64, "0x7f34e84bca00": 64, "unexpectedli": [64, 67], "ratio": [64, 67, 94, 133, 149, 169, 210, 250, 252, 253, 390, 392], "plot_fiac_analysi": [64, 73], "hemodyam": 65, "audio_comput": [65, 66, 69], "audio_left_hand_button_press": [65, 66, 69], "audio_right_hand_button_press": [65, 66, 69], "horizontal_checkerboard": [65, 66], "sentence_listen": [65, 66, 69], "sentence_read": [65, 66, 69], "vertical_checkerboard": [65, 66], "visual_comput": [65, 66, 69], "visual_left_hand_button_press": [65, 66, 69], "visual_right_hand_button_press": [65, 66, 69], "fetch_localizer_first_level": [65, 66, 69], "epi_img": [65, 66, 69, 89, 176, 220, 322, 325, 368], "events_fil": [65, 66, 69], "impuls": [65, 68, 165, 166, 169, 267, 269, 274], "behind": 65, "concret": [65, 164, 166], "interv": [65, 66, 100, 245, 246, 247, 248, 250, 251, 257, 259, 260, 391, 397, 408], "character": [65, 66, 111, 171, 308], "hairi": 65, "sorri": 65, "price": [65, 161], "flexibl": [65, 123, 149], "contrast_matrix": [65, 66, 69, 71], "audio": [65, 66, 69], "video": 65, "breath": [65, 66], "ask": [65, 114, 134, 137, 149, 164, 172], "973": [65, 73], "plot_fir_model": [65, 73], "clarifi": [66, 142, 149], "exploratori": 66, "increment": [66, 95, 171, 172], "outcom": [66, 169, 309], "reader": [66, 171, 423], "familiar": [66, 164, 171], "concept": [66, 98, 137, 149, 156, 157, 164, 169, 173, 423], "paradigm": [66, 69, 71, 97, 109, 110, 114, 156, 166, 226, 274, 290, 295, 296, 298, 370, 378, 383], "pinel": [66, 72, 111, 219, 252], "bmc": [66, 72, 111, 219], "2007": [66, 72, 111, 150, 219, 228, 291, 308, 309, 405], "probe": [66, 69, 160, 169], "button": [66, 69, 72, 76, 77, 79, 80, 105, 144, 149, 164, 166, 217, 219, 227], "press": [66, 69, 72, 76, 77, 79, 80, 105, 111, 166, 217, 219, 227, 259, 260], "horizont": [66, 72, 80, 219, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "checkerboard": [66, 72, 80, 219], "listen": [66, 69, 81, 219], "short": [66, 100, 114, 163, 164, 169, 200, 201, 204, 224, 225, 226, 227], "mental": [66, 69, 72, 81, 219, 225], "subract": 66, "epoch": [66, 253], "100m": 66, "male": [66, 189], "voic": 66, "instruct": [66, 69, 72, 110, 120, 145, 149, 164, 170, 225, 422], "passiv": 66, "verifi": [66, 101, 164, 176], "understood": [66, 224], "flash": 66, "narr": [66, 81, 164], "400000": 66, "700000": 66, "399994": 66, "700012": 66, "make_localizer_contrast": 66, "involv": [66, 69, 71, 100, 166], "differenti": [66, 71], "content": [66, 69, 84, 111, 147, 149, 160, 161, 164, 171, 202, 207, 213, 221, 285, 404], "stori": [66, 69, 111, 222], "comptat": 66, "encapsul": [66, 181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "plot_contrast": 66, "discret": [66, 71, 120, 141, 142, 149, 267, 276, 295, 308, 312, 313, 314, 315, 316, 317, 318, 404], "spuriou": [66, 111, 154, 164, 308, 309, 393], "heart": 66, "scanner": [66, 166, 169, 308], "01hz": [66, 189], "longest": 66, "multipli": [66, 84, 90, 127, 149, 161, 163, 188, 254, 257, 259, 260, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 373, 379, 381, 382, 386], "shall": 66, "wors": [66, 251], "poorli": [66, 94, 176], "mayb": [66, 114, 328], "useless": 66, "haven": [66, 103], "basi": [66, 69, 108, 165, 267, 269, 274, 308], "undershoot": 66, "strong": [66, 89, 163, 164], "seem": [66, 75, 98, 163], "someth": 66, "inclus": [66, 244], "sole": [66, 114, 163, 314, 317], "discount": 66, "misspecif": 66, "hint": [66, 150, 151], "misfit": 66, "valuabl": [66, 164], "shift": [66, 140, 146, 149, 312, 313, 314, 315, 316, 317, 318, 404], "mi": 66, "sake": [66, 79, 105], "simplic": [66, 69, 156], "readabl": [66, 121, 149], "drop": [66, 70, 100, 129, 130, 131, 135, 149, 164, 171, 172], "far": [66, 108, 163, 164, 300, 306], "autoregress": [66, 267, 276], "ordinari": [66, 102, 105, 258, 328], "least": [66, 68, 100, 102, 103, 105, 111, 156, 162, 164, 253, 254, 258, 267, 276, 280, 281, 282, 313, 316, 318, 322, 328, 359, 422], "recomput": [66, 98, 161, 264], "obviou": 66, "stick": 66, "arguabl": 66, "greater": [66, 100, 142, 144, 149, 166, 267, 276, 284, 291, 304, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 374, 384, 386, 388, 401, 405, 408], "complex": [66, 77, 87, 111, 114, 156, 158, 161, 164, 168, 171, 176], "ar3": [66, 276], "wish": [66, 79, 105, 144, 149, 164, 169, 172, 214, 215, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 365, 368, 370, 371, 374, 376, 377, 378], "computation": [66, 157, 161], "problemat": 66, "uncontrol": 66, "spike": 66, "phenomena": 66, "respir": 66, "blood": [66, 166, 169], "oxygen": [66, 166, 169], "themselv": [66, 114, 176], "routin": [66, 89, 174, 222, 421], "percentil": [66, 87, 88, 98, 245, 246, 247, 248, 250, 251, 284, 291, 304, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 349, 350, 351, 353, 355, 356, 362, 365, 376, 384, 385, 386, 388, 392, 405], "kill": 66, "somewhat": 66, "colinear": 66, "scrub": [66, 120, 142, 144, 149, 151, 267, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 392, 404], "scenario": [66, 165, 166, 176], "exclud": [66, 114, 393], "unwant": 66, "wecan": 66, "discrep": [66, 163], "drawback": 66, "bias": 66, "mild": 66, "5mm": [66, 95, 171], "smoother": 66, "firstlevemodel": 66, "grei": [66, 89, 127, 137, 143, 149, 175, 176, 214, 215, 237, 238, 239, 241, 321, 324], "fetch_icbm152_brain_gm_mask": [66, 75, 127, 149, 214], "data_mask": [66, 104], "icbm_mask": 66, "driven": [66, 155, 164, 171, 193, 274], "resample_to_img": [66, 75, 93, 126, 149, 175, 176, 300], "resampled_icbm_mask": 66, "spot": 66, "interestingli": 66, "resili": 66, "reassur": 66, "plot_first_level_detail": [66, 73], "summary_statistics_session1": 67, "0x7f34e3e269a0": 67, "summary_statistics_session2": 67, "0x7f34df37da00": 67, "compute_fixed_effect": 67, "contrast_img": [67, 264], "variance_img": [67, 264], "effect_vari": [67, 80, 255, 267, 280], "fixed_fx_stat": 67, "0x7f34df3672e0": 67, "plot_fixed_effect": [67, 73], "hemodynam": [68, 71, 156, 169], "propos": [68, 100, 164, 165, 172, 322], "primat": 68, "agent": 68, "mion": 68, "monkei": 68, "coupl": [68, 150, 172], "metabol": [68, 166, 169], "phenomenolog": 68, "framework": [68, 150, 210], "whenev": [68, 157, 283], "uncertainti": [68, 76, 79, 163, 165, 166, 169], "issu": [68, 129, 130, 131, 132, 133, 141, 143, 144, 146, 163, 164, 166, 168, 169, 289, 294], "occur": [68, 122, 149, 166, 169, 422], "time_length": [68, 271, 272, 273, 277, 278, 279], "amplitud": [68, 269, 274, 384, 386, 388], "exp_condit": [68, 269], "stim": 68, "oversampl": [68, 267, 269, 271, 272, 273, 274, 277, 278, 279], "gamma": [68, 146, 149, 165], "mion_response_funct": 68, "factor": [68, 70, 100, 104, 131, 149, 158, 169, 257, 259, 260, 269, 271, 272, 273, 274, 277, 278, 279, 283, 363, 376, 377, 378, 385], "response_funct": 68, "dt": 68, "time_stamp": 68, "rint": 68, "delai": [68, 172, 267, 269, 274], "mion_time_deriv": 68, "drf": 68, "derived_response_funct": 68, "rf_model": 68, "main_deriv": 68, "compute_regressor": [68, 121, 144, 149, 165], "model_titl": 68, "convolut": [68, 166, 269, 274], "_label": 68, "con_id": [68, 269], "plot_hrf": [68, 73], "capabl": [69, 144, 149, 176], "coregist": 69, "obvious": 69, "geometri": [69, 111, 296, 373, 379, 380, 381, 382, 388, 407, 408], "resort": 69, "basic_contrast": [69, 71, 165], "dict": [69, 89, 105, 114, 147, 149, 181, 182, 183, 192, 224, 225, 226, 227, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 258, 263, 267, 276, 280, 282, 285, 306, 307, 311, 312, 313, 314, 315, 316, 317, 318, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 364, 365, 373, 374, 381, 382, 386, 389, 390, 391, 392, 400, 402, 404], "Of": 69, "cours": [69, 153, 166, 169, 313, 316], "impress": 69, "littl": [69, 75, 156, 157, 164], "plot_localizer_surface_analysi": [69, 73], "assess": [70, 78, 111, 156, 163, 164, 165, 189, 249, 328, 364], "clean_img": [70, 127, 129, 134, 144, 149, 175, 404], "0x7f34da2189d0": 70, "set_index": 70, "head": [70, 267, 280, 308, 400, 402], "real_timeseri": 70, "predicted_timeseri": [70, 165], "navi": 70, "purpl": 70, "teal": 70, "fig1": 70, "axs1": 70, "labelpad": 70, "resid": [70, 146, 149, 308, 309], "fig2": 70, "axs2": 70, "002374945330077797": 70, "0016934773463629742": 70, "01850990756587915": 70, "0704987065734594": 70, "031008074173832483": 70, "7689553525694162e": 70, "markedli": 70, "deep": [70, 181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "awai": [70, 163, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "receiv": [70, 100, 156, 169, 372], "coil": 70, "salt": 70, "necessarili": [70, 154, 166], "influenc": [70, 163, 251], "0x7f34e7379820": 70, "tell": [70, 86, 111, 163, 222], "everywher": [70, 162], "z_map_ftest": 70, "stat_typ": [70, 267], "0x7f34e6f0ae80": 70, "plot_predictions_residu": [70, 73], "percept": [71, 137, 149, 166, 219], "realign": [71, 222], "scrambl": [71, 94, 165], "supposedli": 71, "henson": [71, 100, 111], "goshen": 71, "gottstein": 71, "ganel": 71, "otten": 71, "quayl": 71, "rugg": 71, "electrophysiolog": 71, "haemodynam": [71, 165, 166, 169], "prime": 71, "2003": [71, 111, 254, 258], "jul": 71, "793": [71, 122, 149], "805": 71, "1093": [71, 111, 195, 201, 221], "cercor": [71, 111, 195, 201, 221], "multimodal_fac": 71, "fetch_spm_multimodal_fmri": [71, 165], "specfii": 71, "catch_warn": [71, 103], "simplefilt": [71, 103], "auto_resampl": [71, 286], "mean_imag": 71, "idx": [71, 201], "revious": 71, "tail": [71, 257, 259, 260, 401], "tcontrast": [71, 257, 259, 260], "sophist": [71, 98, 159], "implic": [71, 100, 111], "portion": 71, "sparser": [71, 94, 155, 250, 251, 392, 394], "anterior": [71, 91, 103, 131, 149, 207, 209, 299, 379, 381, 382], "frontal": [71, 91, 111, 161, 363, 368, 370, 371, 377, 378], "lobe": [71, 204], "plot_spm_multimodal_fac": [71, 73], "protocol": [72, 169, 219], "archi": 72, "meriaux": [72, 111, 219], "identif": [72, 94, 111, 169, 219], "databas": [72, 103, 111, 219, 224], "cognit": [72, 100, 103, 111, 156, 166, 169, 171, 176, 202, 211, 219, 222, 228, 229], "1186": 72, "1471": 72, "2202": 72, "hardcod": [72, 120, 149, 243], "fmt": 72, "trial_type_idx": 72, "condition_id": 72, "ones_lik": [72, 77], "export": [72, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382], "pathlib": [72, 143, 149, 174, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 228, 229, 230, 231, 232, 233, 234, 235, 245, 246, 247, 248, 250, 251, 267, 270, 280, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 390, 391, 392, 404, 406, 407, 408], "tsvfile": 72, "localizer_ev": 72, "plot_ev": [72, 140, 149, 165], "plot_write_events_fil": [72, 73], "auto_examples_04_glm_first_level": 73, "unpair": [74, 82, 110, 168, 219, 280, 340, 367, 370, 383], "sex": [75, 78, 168, 189, 221, 234, 245, 246, 247, 248, 250, 251], "mf": [75, 111, 221], "gm_mask": 75, "adequ": 75, "000000000000007": 75, "second_level": [75, 76, 77, 78, 79, 80, 81, 101, 146, 149, 168, 402], "secondlevelmodel": [75, 76, 77, 79, 80, 81, 101, 144, 149, 168, 267, 307, 402], "second_level_model": [75, 76, 79, 81, 101], "0x7f34e71a1a00": 75, "secondlevelmodelsecondlevelmodel": [75, 77], "second_level_contrast": [75, 77, 79, 267, 280, 282, 402], "03g": 75, "40175": 75, "0x7f34e683f340": 75, "icbm152_2009": 75, "1445": [75, 82, 111], "plot_oasi": [75, 82], "circular": 76, "rosenblatt": [76, 111, 262], "jd": 76, "fino": [76, 111, 262], "weeda": [76, 111, 262], "wd": 76, "solari": [76, 111, 262], "goeman": [76, 111, 262], "jj": 76, "nov": [76, 111, 208], "786": [76, 111, 262], "796": [76, 111, 262], "fetch_localizer_contrast": [76, 77, 79, 80, 105, 127, 149, 217, 218], "get_tmap": [76, 79, 80, 219], "second_level_input": [76, 79, 80, 101, 144, 146, 149, 280, 282], "p_val": [76, 77, 79], "p001_uncorrect": 76, "cluster_level_infer": [76, 144, 149, 168], "proportion_true_discoveries_img": [76, 262], "955": [76, 82], "plot_proportion_activated_voxel": [76, 82], "cue": [77, 105, 218, 219], "variat": [77, 101, 105, 106, 111, 121, 149, 161, 162, 169, 228, 266, 282, 328], "pseudo": [77, 105, 252, 253, 259, 282, 284, 390], "brainomics_loc": [77, 105], "brainomics_data": [77, 105], "s01": [77, 105], "cmaps_leftauditoryclick": [77, 105], "tested_var": [77, 105, 106, 328], "float64": 77, "worth": 77, "aualiti": 77, "mask_quality_check": [77, 105], "contrast_map_filenam": [77, 105], "fluenci": 77, "math_img": [77, 79, 83, 85, 96, 107, 110, 125, 149, 175, 242, 297, 378, 383], "logarithm": [77, 79, 282], "equal": [77, 98, 137, 144, 146, 149, 159, 194, 199, 200, 201, 205, 245, 246, 247, 248, 250, 251, 255, 280, 297, 300, 304, 320, 322, 323, 325, 385, 386, 388, 390], "fwer": [77, 81, 168, 169, 282], "non_parametric_infer": [77, 79, 120, 121, 144, 146, 149, 168], "neg_log_pvals_permuted_ols_unmask": [77, 105], "model_intercept": [77, 79, 105, 282, 328], "two_sided_test": [77, 79, 102, 161, 282, 328], "cap": [77, 79], "1e3": 77, "plot_second_level_association_test": [77, 82], "characterist": [78, 156, 169, 309], "subjects_label": [78, 281], "extra": [78, 114, 158, 172, 173, 189, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 369, 371, 375, 421, 423], "extra_info_subject": 78, "make_second_level_design_matrix": [78, 168], "attent": [78, 274], "singular": [78, 257, 259, 260, 291, 405], "aberr": 78, "05_glm_second_level": [78, 80], "plot_second_level_design_matrix": [78, 82], "elicit": 79, "participant_id": 79, "tolist": [79, 100], "cidx": 79, "p001_unc": [79, 101], "nonparametr": 79, "pend": 79, "reformat": [79, 121, 149], "assumpt": [79, 161, 166], "null": [79, 145, 149, 156, 161, 166, 169, 255, 282, 328], "out_dict": 79, "ideal": [79, 105, 153, 166, 172, 193], "permuted_least_squar": [79, 146, 149], "994": 79, "tend": [79, 100, 158, 163, 174], "itertool": 79, "logp_max_t": [79, 105, 282, 328], "logp_max_s": [79, 282, 328], "logp_max_mass": [79, 282, 328], "img_count": 79, "i_row": 79, "j_col": 79, "plot_second_level_one_sample_test": [79, 82], "retinotop": 80, "distinct": [80, 100, 111, 163, 195, 221], "border": [80, 289, 320, 323, 329, 331, 332], "primari": [80, 267, 280, 402], "sample_vert": 80, "sample_horizont": 80, "s1": 80, "s2": 80, "condition_effect": 80, "doesn": [80, 103, 164], "subject_effect": 80, "02d": 80, "assembl": [80, 112, 166], "unpaired_design_matrix": 80, "paired_design_matrix": 80, "ax_unpair": 80, "ax_pair": 80, "width_ratio": [80, 100], "plot_second_level_two_sample_test": [80, 82], "second_level_model_unpair": 80, "second_level_model_pair": 80, "stat_maps_unpair": 80, "stat_maps_pair": 80, "992007221626409e": 80, "unsurprisingli": 80, "bunch": [81, 113, 129, 149, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234], "oppos": [81, 175, 176], "fetch_localizer_calculation_task": [81, 106, 217, 219], "statstic": 81, "cmap_filenam": [81, 106], "trivial": 81, "two_sid": [81, 141, 144, 149, 283, 304, 401, 402], "0x7f34e7dbd700": 81, "thresholded_map1": 81, "threshold1": 81, "thresholded_map2": 81, "threshold2": 81, "3g": 81, "thresholded_map3": 81, "threshold3": 81, "raw": [81, 92, 101, 108, 141, 149, 156, 174, 176, 196, 245, 246, 247, 248, 252, 253, 314, 317, 378, 390, 400], "0x7f34e72a6b50": 81, "0x7f34e48171c0": 81, "fourth": [81, 84, 142, 149, 267, 282, 292, 293, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 361, 392, 404], "0x7f34e7d92580": 81, "906": [81, 82], "plot_threshold": [81, 82], "983": 82, "auto_examples_05_glm_second_level": 82, "4x4": [84, 175, 245, 246, 247, 248, 250, 251, 252, 253, 267, 280, 287, 297, 298, 300, 314, 317, 320, 322, 323, 325, 331, 332, 390], "millimet": [84, 161, 176, 245, 246, 247, 248, 249, 252, 253, 267, 280, 282, 302, 312, 313, 314, 315, 316, 317, 318, 319, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 390, 392, 394, 401], "entri": [84, 120, 147, 149, 164, 245, 246, 247, 248, 257, 259, 260, 289, 380, 408], "3x3": [84, 175, 245, 246, 247, 248, 250, 251, 252, 253, 267, 280, 297, 300, 314, 317, 320, 322, 323, 325, 390], "closest": [84, 300], "union": [84, 323, 325, 326], "messag": [84, 124, 149, 172, 182, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 234, 245, 246, 247, 248, 249, 250, 251, 280, 282, 286, 297, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 328, 390, 391, 392], "circl": 84, "diamond": 84, "source_affin": 84, "rotation_matrix": 84, "0mm": [84, 171], "img_in_mm_spac": 84, "target_affine_3x3": 84, "target_affine_4x4": 84, "img_3d_affin": 84, "img_4d_affin": 84, "target_affine_mm_space_offset_chang": 84, "img_3d_affine_in_mm_spac": 84, "img_4d_affine_in_mm_spac": 84, "anchor": 84, "plot_affine_transform": [84, 96], "goal": [85, 90, 93, 113, 163, 164], "result_img": [85, 174, 296], "img1": [85, 296], "img2": [85, 296], "968": [85, 96], "914": [85, 96], "plot_compare_mean_imag": [85, 96], "connected_label_region": [86, 129, 149, 153, 175, 392, 394], "oper": [86, 89, 91, 94, 104, 113, 142, 149, 156, 163, 164, 166, 169, 173, 174, 176, 181, 182, 215, 244, 267, 280, 282, 294, 296, 297, 320, 321, 322, 324, 325, 366, 410, 414, 423], "atlas_yeo_2011": 86, "atlas_yeo": 86, "thick_7": [86, 205], "0x7f34e6f9c340": 86, "apart": [86, 129, 149, 153, 154, 163], "region_label": 86, "region_extractor": [86, 144, 149], "0x7f34e5c8adc0": 86, "difficult": [86, 150, 157, 162, 176], "eg": [86, 89, 131, 134, 140, 149, 150, 151, 156, 175, 176, 360, 361, 400], "broken": [86, 127, 135, 149, 161], "relabeled_yeo_atla": 86, "folder_path": 86, "connect_diag": [86, 393], "region_labels_not_diag": 86, "0x7f34e730bb20": 86, "100mm": 86, "region_labels_min_s": 86, "849": [86, 96], "plot_extract_regions_labels_imag": [86, 96], "smith_atla": 87, "atlas_network": 87, "rsn10": [87, 202], "1061": 87, "dmn_network": 87, "regions_indices_network3": 87, "blob": [87, 94, 155, 175, 201], "network3": 87, "plot_extract_rois_smith_atla": [87, 96], "fetch_neurovault_auditory_computation_task": [88, 134, 149, 227], "foreground": [88, 154], "connected_region": [88, 122, 135, 149, 154, 175, 392, 393], "scoreatpercentil": [88, 103, 304], "threshold_percentile_img": 88, "threshold_value_img": 88, "0x7f34e59dab50": 88, "regions_percentile_img": 88, "regions_value_img": 88, "839": [88, 96], "plot_extract_rois_statistical_map": [88, 96], "li": [89, 111, 234], "homogen": [89, 153, 175, 194, 245, 246, 247, 248, 252, 253, 300, 314, 317, 390], "miyawaki_filenam": [89, 176], "miyawaki_mean_img": [89, 176], "0x7f34e85b3ca0": 89, "0x7f34e7f46460": 89, "mask_arg": [89, 92, 176, 252, 253, 314, 317, 390], "uniform": 89, "epi_filenam": [89, 176], "0x7f34da7d3760": 89, "eros": [89, 169, 215, 237, 240, 320, 321, 322, 324, 325], "dilat": [89, 94, 169, 175, 215, 237, 240, 320, 321, 322, 324, 325], "layer": 89, "skull": [89, 214, 320, 321, 322, 324, 325], "lower_cutoff": [89, 322, 325], "upper_cutoff": [89, 322, 323, 325], "bright": 89, "hover": 89, "trended_data": 89, "detrended_data": 89, "plot_mask_comput": [89, 96, 176], "negative_stat_img": 90, "899": [90, 96], "plot_negate_imag": [90, 96], "output_filepath": [91, 92, 176], "mni152templ": [91, 267, 280, 363, 376, 377, 378, 402], "ward": [91, 153, 169, 170, 315, 390], "pole": 91, "123176": 91, "insular": 91, "18728": 91, "superior": [91, 103, 162, 299], "40640": 91, "42528": 91, "inferior": 91, "par": 91, "triangulari": 91, "8824": 91, "operculari": 91, "11072": 91, "68584": 91, "37688": 91, "divis": 91, "4168": 91, "14640": 91, "6784": 91, "20200": 91, "temporooccipit": 91, "16032": 91, "5176": 91, "15536": 91, "11760": 91, "55160": 91, "lobul": 91, "23264": 91, "supramargin": 91, "13936": 91, "18072": 91, "angular": 91, "19272": 91, "78232": 91, "32712": 91, "intracalcarin": 91, "11208": 91, "7808": 91, "juxtaposit": 91, "formerli": [91, 134, 149], "supplementari": [91, 113, 161], "11872": 91, "subcallos": 91, "9136": 91, "paracingul": 91, "23552": 91, "20736": 91, "19296": 91, "precun": 91, "44984": 91, "cuneal": 91, "9816": 91, "orbit": 91, "25184": 91, "parahippocamp": 91, "9984": 91, "5680": [91, 102], "lingual": 91, "27048": 91, "fusiform": [91, 161], "4880": [91, 102], "12752": 91, "11752": 91, "14448": 91, "operculum": 91, "5496": 91, "central": 91, "15088": 91, "8952": 91, "planum": [91, 103], "polar": 91, "5992": 91, "heschl": 91, "h1": 91, "h2": 91, "4832": 91, "temporal": [91, 103], "7616": 91, "supracalcarin": 91, "2088": 91, "42208": 91, "quot": 91, "niftilablesmask": 91, "n_time_point": [91, 92, 275, 276], "label_idx": 91, "plot_nifti_labels_simpl": [91, 96], "0x7f34e7c34af0": 92, "components_mask": [92, 104], "revers": [92, 130, 137, 149], "989": [92, 96], "plot_nifti_simpl": [92, 96, 176], "load_mni152_templ": [93, 143, 149, 214, 215, 236, 238, 241, 284, 287, 292, 296, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 408], "resampled_stat_img": 93, "tmap_img": 93, "original_shap": 93, "original_affin": 93, "resampled_shap": 93, "resampled_affin": 93, "template_img": 93, "template_shap": 93, "template_affin": 93, "plot_resample_to_templ": [93, 96], "allevi": 94, "curs": 94, "aris": [94, 111, 166, 308, 309], "context": [94, 100, 111, 164, 169], "chain": [94, 175, 181, 182], "clear": [94, 114, 120, 137, 146, 149, 164, 245, 246, 247, 248, 252, 253, 314, 317, 390], "student": [94, 166, 175, 255, 423], "haxby_label": 94, "txt": [94, 228], "especi": [94, 135, 144, 149, 150, 156, 174, 386, 423], "Such": [94, 150, 305], "4mm": [94, 154, 161, 210, 253], "12mm": 94, "anisotropi": 94, "indent": 94, "analog": 94, "0x7f34da7b8700": 94, "brief": [94, 164, 166], "motiv": 94, "realm": 94, "ttest_ind": [94, 175], "establish": [94, 162, 164], "log_p_valu": 94, "log_p_values_img": 94, "0x7f34de0df490": 94, "extend": [94, 140, 145, 147, 149, 166, 176, 300], "annot": [94, 112, 129, 140, 149, 201, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 365, 368, 370, 371, 374, 376, 377, 378, 379, 380, 381, 382, 385, 388, 406, 421, 423], "0x7f34e66ea2e0": 94, "intersect": [94, 175, 323, 325, 326, 396], "investig": [94, 98, 155, 172, 249], "bin_p_valu": 94, "boolean": [94, 114, 141, 146, 149, 187, 189, 213, 219, 228, 249, 252, 253, 267, 286, 298, 308, 311, 320, 321, 322, 324, 325, 363, 368, 370, 372, 377, 380, 385, 398, 399, 404], "logic": [94, 114, 164, 244], "logical_and": [94, 102], "jargon": 94, "AND": [94, 114], "conjunct": 94, "bin_p_values_and_vt": 94, "otherwis": [94, 102, 103, 134, 149, 166, 172, 181, 182, 183, 187, 189, 195, 196, 207, 208, 209, 217, 218, 219, 221, 228, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 270, 280, 295, 299, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 373, 376, 379, 381, 382, 385, 386, 388, 389, 390, 391, 392, 393, 408], "bin_p_values_and_vt_img": 94, "06_manipulating_imag": 94, "plot_roi_extract": [94, 96], "0x7f34e733eb80": 94, "consolid": [94, 145, 149], "toward": [94, 144, 149, 181, 295, 312, 313, 314, 315, 316, 317, 318, 423], "morpholog": [94, 175, 320, 321, 322, 324, 325], "forget": [94, 164, 421], "hole": 94, "binary_dil": [94, 175, 320, 321, 322, 324, 325], "dil_bin_p_values_and_vt": 94, "dil_bin_p_values_and_vt_img": 94, "0x7f34e6802df0": 94, "immedi": [94, 309], "first_roi_data": 94, "second_roi_data": 94, "first_roi_img": 94, "second_roi_img": 94, "0x7f34e8aa63d0": 94, "suit": [94, 100, 151, 157, 171, 193], "condition_nam": [94, 100], "n_cond_img": 94, "n_cond": 94, "gather": [94, 164, 166], "cond": [94, 100, 269], "cond_map": 94, "mask_data": 94, "mask_atla": 94, "2269": 94, "lose": [95, 421], "first_epi_fil": 95, "mean_func": 95, "20mm": [95, 171], "smoothed_img": [95, 174], "plot_smooth_mean_imag": [95, 96], "auto_examples_06_manipulating_imag": 96, "2268": 96, "massiv": [97, 109, 110, 160, 213, 218, 219, 290, 292, 297, 311, 317, 328, 356, 370, 378, 383, 415, 423], "multivari": [97, 109, 110, 111, 155, 169, 170, 171, 192, 210, 292, 297, 311, 317, 378, 383, 422], "bridg": 98, "integr": [98, 122, 137, 149, 164, 175, 314], "usecas": [98, 153, 157, 159, 164], "pointer": [98, 159], "unclear": 98, "n_timepoint": [98, 156, 159], "meaning": [98, 100, 124, 134, 137, 149, 164, 166, 285, 404], "stipul": 98, "823": 98, "processor": [98, 159], "858": 98, "dummyclassifi": [98, 99, 142, 149, 159, 245, 246, 247, 248], "pure": [98, 102, 250, 251], "slower": [98, 159, 163, 300], "permutation_test_scor": [98, 159], "null_cv_scor": 98, "selectpercentil": [98, 129, 149], "linear_svc": 98, "anova_svc": 98, "return_estim": 98, "fitted_pipelin": 98, "test_scor": 98, "801": 98, "first_pipelin": 98, "svc_coef": 98, "invert": [98, 104, 140, 149, 163, 176, 181, 257, 259, 260, 311, 314, 317], "full_coef": 98, "0x7f34e57ed550": 98, "fisher": [98, 111, 255], "lda": 98, "discriminant_analysi": 98, "lineardiscriminantanalysi": 98, "anova_lda": 98, "n_condit": 98, "8009": 98, "principl": [98, 153, 156, 160, 162, 169, 249, 423], "fanci": 98, "n_features_to_select": 98, "rfe_svc": 98, "awar": [98, 183, 403], "plot_advanced_decoding_scikit": [98, 109], "gridsearchcv": [99, 159], "pipe": 99, "most_frequ": 99, "connectivity__kind": 99, "labelencod": 99, "pheno": 99, "refit": 99, "cv_results_": 99, "mean_test_scor": 99, "std_test_scor": 99, "candid": 99, "param_connectivity__kind": 99, "1315": [99, 109], "plot_age_group_prediction_cross_v": [99, 109, 137, 149], "substitut": [100, 400], "psychophysiolog": 100, "ppi": 100, "cisler": [100, 111], "everyth": [100, 172], "systemat": [100, 111, 124, 149, 219, 308, 309], "incorpor": [100, 155], "literatur": [100, 151, 189, 291, 309, 405], "mention": [100, 120, 147, 149, 164, 165, 166], "abdulrahman": [100, 111], "decis": [100, 111, 157, 161, 245, 246, 247, 248, 250, 251, 255], "inter": [100, 105, 151, 175, 176, 323, 325], "mumford": [100, 111, 156, 171, 211, 229], "primarili": 100, "fetch_language_localizer_demo_dataset": [100, 101, 108, 165], "events_df": 100, "languageloc": [100, 101, 108], "img_filt": [100, 101, 108, 270], "desc": [100, 101, 108, 270, 308, 309], "preproc": [100, 101, 108, 270], "standard_glm": 100, "fmri_fil": 100, "glm_paramet": 100, "get_param": [100, 181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "queri": [100, 101, 107, 108, 224, 226, 244], "starttim": [100, 101, 108], "01_task": [100, 101, 108], "languagelocalizer_desc": [100, 101, 108], "highlight": [100, 172], "lsa_events_df": 100, "condition_count": 100, "i_trial": 100, "iterrow": 100, "trial_condit": 100, "__": [100, 181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "shouldn": [100, 172, 191], "trial_nam": 100, "lsa_glm": 100, "lsa_beta_map": 100, "trialwise_condit": 100, "beta_map": 100, "relabel": [100, 393], "lss_transform": 100, "row_numb": 100, "compliant": [100, 121, 149, 164, 176, 229, 243, 309], "trial_type_seri": 100, "trial_type_list": 100, "trial_numb": 100, "left_001": 100, "track": [100, 103, 163, 172], "lss_beta_map": 100, "lss_design_matric": 100, "lss_events_df": 100, "lss_glm": 100, "dm_titl": 100, "i_ax": 100, "though": [100, 104, 156, 258, 379, 403], "vastli": 100, "quick": [100, 171], "neurosynth": [100, 103, 112, 224, 226, 423], "lang_seed_beta_seri": 100, "lang_beta_seri": 100, "lang_corr": 100, "language_connectivity_img": 100, "string_seed_beta_seri": 100, "string_beta_seri": 100, "string_corr": 100, "string_connectivity_img": 100, "josh": [100, 111], "keith": [100, 111], "bush": [100, 111], "scott": [100, 111, 209], "steel": [100, 111], "1042": [100, 111], "1052": [100, 111], "jess": [100, 111], "rissman": [100, 111], "adam": [100, 111], "gazzalei": [100, 111], "esposito": [100, 111], "stage": [100, 111, 164, 171], "752": [100, 111], "763": [100, 111], "2004": [100, 111, 195, 259, 260], "jeanett": [100, 111, 171], "benjamin": [100, 111, 209], "turner": [100, 111, 192, 202], "gregori": [100, 111], "ashbi": [100, 111], "poldrack": [100, 111, 114, 171, 211, 222, 224, 226, 229], "deconvolv": [100, 111, 156], "multivoxel": [100, 111, 156, 222], "2636": [100, 111], "2643": [100, 111, 141, 149], "spatiotempor": [100, 111], "rapid": [100, 111], "1429": [100, 111], "1438": [100, 111], "hunar": [100, 111], "richard": [100, 111], "plot_beta_seri": [100, 109], "consult": 101, "simplifi": [101, 108, 113, 127, 137, 145, 149, 176, 217, 218], "basenam": 101, "10_task": 101, "rotx": 101, "roti": 101, "rotz": 101, "conson": 101, "value_count": 101, "scalar": [101, 161, 176, 254, 255, 257, 258, 259, 260, 302, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 365, 374], "concurr": [101, 108], "model_and_arg": 101, "midx": 101, "8mm": [101, 267, 280, 402], "first_level_contrast": [101, 144, 149, 280, 282], "plot_bids_analysi": [101, 109], "behav": [102, 267, 269, 274], "exchang": [102, 104, 189], "winkler": [102, 111, 221, 328], "anderson": [102, 111, 189, 221, 328], "robinson": [102, 111, 221, 328], "australian": [102, 111, 328], "zealand": [102, 111, 328], "journal": [102, 111, 161, 201, 202, 205, 228, 328], "avesbiodiv": 102, "mncn": 102, "csic": 102, "estadistica": 102, "permut2": 102, "conditions_encod": 102, "func_reduc": 102, "n_session": 102, "conditions_per_sess": 102, "grouped_fmri_mask": 102, "grouped_conditions_encod": 102, "session_mask": 102, "session_house_mask": 102, "session_face_mask": 102, "ol": [102, 105, 257, 259, 260, 267, 276, 328, 415], "tracepvals_bonferroni": 102, "neg_log_pvals_bonferroni": 102, "neg_log_pvals_bonferroni_unmask": 102, "1184": [102, 105, 106], "dataconversionwarn": [102, 105, 106], "mean_fmri_img": 102, "neg_log_pvals_bonferroni_data": 102, "plot_haxby_mass_univari": [102, 109], "fetch_neurovault": [103, 107, 114, 130, 137, 141, 149, 225, 226, 227], "load_mni152_brain_mask": [103, 127, 143, 149, 214], "nv_data": [103, 107], "max_imag": [103, 107, 114, 224], "fetch_neurosynth_word": [103, 114, 224, 226], "term_weight": 103, "word_frequ": [103, 114, 224, 226], "vocabulari": [103, 114, 169, 171, 224, 226], "total_scor": 103, "ntop": 103, "term_idx": 103, "1307": 103, "insula": 103, "nreshap": 103, "deprecationwarn": [103, 311, 312, 313, 314, 315, 316, 317, 318, 392], "failur": [103, 129, 149, 164, 322], "is_us": 103, "image_path": 103, "images_meta": [103, 107, 114, 224, 225, 226, 227], "collection_id": [103, 107, 114, 224, 226], "fast_ica": 103, "ica_map": 103, "term_weights_for_compon": 103, "components_": [103, 132, 149, 252, 253], "ic_map": 103, "ic_term": 103, "flip": [103, 128, 149, 193], "ic_threshold": 103, "ic_img": 103, "important_term": 103, "neurolog": [103, 166, 169, 191], "851": [103, 109], "plot_ica_neurovault": [103, 109], "advis": [104, 164, 174, 215, 322, 390], "unsupervis": [104, 169, 252, 253, 267, 280, 389, 391], "latent": [104, 169], "sens": [104, 156, 171, 245, 246, 247, 248, 257, 259, 260, 332, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355], "component_img": 104, "plot_ica_resting_st": [104, 109], "pvals_anova": [105, 106], "neg_log_pvals_anova": [105, 106], "neg_log_pvals_anova_unmask": [105, 106], "fwe": [105, 328], "tfce": [105, 120, 146, 149, 169, 282, 328], "ols_output": 105, "neg_log_pvals_tfce_unmask": 105, "logp_max_tfc": [105, 282, 328], "7273": 105, "139953613281": 105, "03186297416687": 105, "255357503891": 105, "59817226727804": 105, "26074886322021": 105, "30975031852722": 105, "69096684455872": 105, "33625817298889": 105, "89695179462433": 105, "49503265486824": 105, "12781167030334": 105, "76648460734975": 105, "40269390741984": 105, "044181530292214": 105, "726652894701274": 105, "44464127222697": 105, "137363255023956": 105, "844451076844162": 105, "558545112609863": 105, "275972880815204": 105, "amax": 105, "images_to_plot": 105, "i_col": 105, "new_titl": 105, "sig": 105, "956": [105, 109], "plot_localizer_mass_univariate_method": [105, 106, 109], "plotted_slic": 106, "masked_pv": 106, "883": [106, 109], "plot_localizer_simple_analysi": [106, 109], "fetch_neurovault_id": [107, 114, 130, 149, 224, 225, 227], "stop_go_image_id": 107, "3041": 107, "3042": [107, 144, 149], "2676": 107, "2675": 107, "2818": 107, "2834": 107, "cognitive_paradigm_cogatla": 107, "contrast_definit": 107, "succ": 107, "map_typ": [107, 224], "image_id": [107, 114, 226], "nplot": 107, "absolute_path": 107, "t_to_z": 107, "t_score": 107, "deg_of_freedom": 107, "sf": 107, "z_valu": 107, "z_img": 107, "current_collect": 107, "ncomput": 107, "this_meta": 107, "ncollect": 107, "t_img": 107, "number_of_subject": 107, "meta_analysis_img": 107, "sqrt": [107, 127, 149, 187, 188, 259, 260], "plot_neurovault_meta_analysi": [107, 109], "downsampl": [108, 154, 175, 210, 364], "10k": 108, "sidecar": 108, "json_fil": 108, "repetitiontim": 108, "z_scores_right": 108, "z_scores_left": 108, "contrast_valu": 108, "accumul": [108, 421], "z_score_left": 108, "az_scores_right": 108, "ttest_1samp": 108, "pval_left": 108, "pval_right": 108, "z_val_left": 108, "z_val_right": 108, "plot_surface_bids_analysi": [108, 109], "auto_examples_07_advanc": 109, "permiss": [110, 137, 149], "auto_examples_python": 110, "auto_examples_jupyt": 110, "arrang": [111, 135, 149, 339, 341, 344, 358, 363, 368, 371, 376, 377, 378, 421], "alphabet": [111, 137, 149, 174], "bib": 111, "samara": [111, 163, 182, 185, 392], "medic": [111, 154, 162, 181, 199, 214, 392], "septemb": [111, 128, 143, 149, 392], "01093944": [111, 392], "elena": [111, 192], "erik": [111, 192], "erhardt": [111, 192], "eswar": [111, 192], "damaraju": [111, 192], "william": [111, 192, 221, 234, 254, 258], "gruner": [111, 192], "judith": [111, 192], "segal": [111, 192], "roger": [111, 192, 233], "silva": [111, 192], "havlicek": [111, 192], "sriniva": [111, 192], "rachakonda": [111, 192], "jill": [111, 192, 195, 221], "fri": [111, 192], "ravi": [111, 192], "kalyanam": [111, 192], "andrew": [111, 189, 192, 194, 214], "arvind": [111, 192], "caprihan": [111, 192], "jessica": [111, 192, 202, 207, 208], "eichel": [111, 192], "adelsheim": [111, 192], "angela": [111, 192, 202], "bryan": [111, 192], "juan": [111, 192], "bustillo": [111, 192], "sarah": [111, 192], "feldstein": [111, 192], "ew": [111, 192], "francesca": [111, 192], "filbei": [111, 192], "corei": [111, 192], "ford": [111, 192], "kent": [111, 192], "hutchison": [111, 192], "rex": [111, 192], "jung": [111, 192], "kiehl": [111, 192], "piyadasa": [111, 192], "kodituwakku": [111, 192], "yuko": [111, 192], "komesu": [111, 192], "mayer": [111, 192], "godfrei": [111, 192], "pearlson": [111, 192], "john": [111, 131, 149, 161, 163, 192, 207, 228, 234, 328], "phillip": [111, 192], "joseph": [111, 192, 207], "sadek": [111, 192], "ursina": [111, 192], "teuscher": [111, 192], "vinc": [111, 192], "calhoun": [111, 192, 234], "frontiersin": [111, 189, 192, 224, 226, 234], "fnsy": [111, 192], "00002": [111, 192], "marti": [111, 204, 328], "onlinelibrari": [111, 194, 204, 233, 285, 328, 404], "wilei": [111, 194, 204, 233, 259, 260, 285, 328, 404], "1111": [111, 328], "1467": [111, 328], "842x": [111, 328], "00156": [111, 328], "arxiv": [111, 161, 163, 182, 185, 194, 195, 201, 202, 204, 205, 207, 213, 221, 228, 233, 285, 328, 404], "luca": [111, 162], "baldassarr": [111, 162], "janaina": [111, 162], "mourao": [111, 162, 171], "miranda": [111, 162, 171], "massimiliano": [111, 162], "pontil": [111, 162], "workshop": [111, 162, 193], "www0": [111, 162], "ucl": [111, 162, 231, 232], "ac": [111, 162, 202, 214, 231, 232, 239], "uk": [111, 162, 202, 231, 232], "staff": [111, 162], "neurosparse_prni": [111, 162], "1109": [111, 162, 193, 252, 253, 391, 397], "prni": [111, 162, 193], "yashar": [111, 308, 309, 405], "behzadi": [111, 291, 308, 309, 405], "khale": [111, 308, 309, 405], "restom": [111, 308, 309, 405], "joi": [111, 308, 309, 405], "liau": [111, 308, 309, 405], "liu": [111, 201, 205, 308, 309, 405], "perfus": [111, 308, 309, 405], "sciencedirect": [111, 158, 161, 162, 191, 193, 196, 199, 203, 209, 214, 219, 222, 223, 239, 247, 248, 308, 309, 328, 364, 405], "pii": [111, 158, 161, 162, 191, 193, 196, 199, 203, 209, 214, 219, 222, 223, 239, 247, 248, 308, 309, 328, 364, 405], "s1053811907003837": [111, 308, 309, 405], "mine": [111, 171, 193], "hierarchi": [111, 193], "pedro": [111, 193], "rosa": [111, 193], "neto": [111, 193], "lyttelton": [111, 193], "habib": [111, 193], "benali": [111, 193], "alan": [111, 193, 214, 239], "bootstrap": [111, 193], "1126": [111, 193, 207, 213], "1139": [111, 193], "s1053811910002697": [111, 193], "lorrain": [111, 161], "tyler": [111, 161], "semant": [111, 142, 144, 149, 161], "perirhin": [111, 161], "4766": [111, 161], "4775": [111, 161], "jneurosci": [111, 161], "1523": [111, 131, 149, 161], "2828": [111, 161], "loui": [111, 214, 239], "collin": [111, 191, 214, 239], "zijdenbo": [111, 214], "wim": [111, 214], "baar": [111, 214], "\u00e9": [111, 214, 219], "anim": [111, 214], "insect": [111, 214], "attila": [111, 214], "kuba": [111, 214], "\u0161": [111, 214], "\u00e1": [111, 214], "amal": [111, 214], "todd": [111, 161, 214], "pokropek": [111, 214], "editor": [111, 181, 214], "berlin": [111, 181, 199, 214], "heidelberg": [111, 181, 199, 214], "springer": [111, 181, 199, 214], "cameron": [111, 194, 199, 234], "jame": [111, 194, 213, 259, 260], "holtzheim": [111, 194], "iii": [111, 194], "xiaop": [111, 194], "hu": [111, 194], "helen": [111, 194], "mayberg": [111, 194], "1914": [111, 194], "1928": [111, 194], "1002": [111, 194, 204, 233, 285, 404], "hbm": [111, 194, 285, 404], "21333": [111, 194], "kamalak": [111, 196], "ga\u00ebl": [111, 158, 196, 199, 247, 248, 252], "antonia": [111, 196], "machlouzarid": [111, 196], "shalit": [111, 196], "krzysztof": [111, 196, 224, 226], "117126": [111, 196], "s1053811920306121": [111, 196], "davidson": [111, 259, 260], "mackinnon": [111, 259, 260], "econometr": [111, 254, 258, 259, 260], "theori": [111, 169, 222, 259, 260], "univ": [111, 259, 260], "york": [111, 259, 260], "ny": [111, 259, 260], "isbn": [111, 254, 258, 259, 260], "978": [111, 259, 260], "512372": [111, 259, 260], "gso": [111, 259, 260], "gbv": [111, 259, 260], "cmd": [111, 259, 260], "srcha": [111, 259, 260], "srt": [111, 259, 260], "yop": [111, 259, 260], "ikt": [111, 259, 260], "trm": [111, 259, 260], "ppn": [111, 259, 260], "393847152": [111, 259, 260], "sourceid": [111, 259, 260], "fbw_bibsonomi": [111, 259, 260], "am": [111, 195], "halgren": [111, 195, 203], "cerebr": [111, 166, 195, 201, 205, 207, 219, 221], "supplement": [111, 195, 214, 239], "s151": [111, 195], "s1053": [111, 195, 214, 239], "8119": [111, 195, 214, 239], "71561": [111, 195], "christoph": [111, 131, 134, 149, 195, 203], "bruce": [111, 195, 201, 203, 205, 233], "ander": [111, 195, 203, 233], "s1053811910008542": [111, 203], "ga": [111, 162], "\u00eb": [111, 162], "graphnet": [111, 162], "stanford": [111, 162], "june": [111, 127, 130, 133, 142, 149, 162, 163], "2015": [111, 114, 115, 116, 117, 118, 119, 122, 123, 149, 162, 182, 185, 199, 219, 221, 224, 226, 308, 309], "01147731": [111, 162], "\u00fc": [111, 162], "bingen": [111, 162], "germani": [111, 162], "00991743": [111, 162], "nico": [111, 207, 209], "dosenbach": [111, 125, 149, 207, 209], "binyam": [111, 207], "alexand": [111, 189, 201, 207, 208], "cohen": [111, 207, 208], "damien": [111, 207], "fair": [111, 155, 207], "church": [111, 207, 208], "nelson": [111, 207, 208], "gagan": [111, 207, 208], "wig": [111, 207, 208], "alecia": [111, 207, 208], "christina": [111, 207], "lessov": [111, 207], "schlaggar": [111, 207, 208, 209, 308, 309], "kelli": [111, 207, 208, 214, 234, 239, 308, 309], "barn": [111, 207, 208, 308, 309], "dubi": [111, 207], "feczko": [111, 207], "rebecca": [111, 207, 210], "coalson": [111, 207], "pruett": [111, 207], "deanna": [111, 207, 209, 221], "barch": [111, 207, 221], "petersen": [111, 207, 208, 209, 308, 309], "bradlei": [111, 207, 208, 209, 221, 308, 309], "5997": [111, 207], "sciencemag": [111, 207, 213], "1194144": [111, 207], "duchi": [111, 163], "stephen": [111, 163, 202, 221, 234, 282, 328], "gould": [111, 163], "daphn": [111, 163], "koller": [111, 163], "subgradi": [111, 163], "1206": [111, 163], "3249": [111, 163], "joset": [111, 161], "etzel": [111, 161], "jeffrei": [111, 161, 189], "zack": [111, 161], "braver": [111, 161], "promis": [111, 161], "pitfal": [111, 156, 161], "s1053811913002917": [111, 161], "filippini": [111, 202, 221], "macintosh": [111, 221], "morgan": [111, 221], "hough": [111, 221], "gui": [111, 221], "goodwin": [111, 221], "giovanni": [111, 221], "frisoni": [111, 221], "matthew": [111, 221, 234, 328], "beckmann": [111, 202, 221, 308, 309], "clare": [111, 202, 221, 234], "mackai": [111, 202, 221], "carrier": [111, 221], "apo": [111, 221], "\u03b54": [111, 221], "allel": [111, 221], "proceed": [111, 161, 165, 202, 221, 249, 309], "nation": [111, 161, 202, 221, 249, 309], "academi": [111, 161, 202, 221, 249, 309], "7209": [111, 221], "7214": [111, 221], "pna": [111, 161, 202, 221, 309], "1073": [111, 161, 202, 221, 309], "0811879106": [111, 221], "sereno": [111, 233], "tootel": [111, 233], "intersubject": [111, 233], "28sici": [111, 204, 233], "291097": [111, 204, 233], "0193": [111, 204, 233], "281999": [111, 233], "3a4": [111, 204, 233], "3c272": [111, 233], "3aaid": [111, 204, 233], "hbm10": [111, 233], "3e3": [111, 204, 233], "3b2": [111, 204, 233], "sici": [111, 204, 233], "1097": [111, 204, 233], "aid": [111, 204, 233], "van": [111, 114, 195, 221, 224, 226, 308, 309], "der": [111, 195], "kouw": [111, 195], "florent": [111, 195], "s\u00e9gonn": [111, 195], "salat": [111, 195], "evelina": [111, 195], "busa": [111, 195], "larri": [111, 195], "seidman": [111, 195], "goldstein": [111, 195], "kennedi": [111, 195], "vern": [111, 195], "cavi": [111, 195], "niko": [111, 195], "makri": [111, 195], "rosen": [111, 195], "bhg087": [111, 195], "academ": [111, 195, 201, 221], "oup": [111, 195, 201, 221], "1193353": [111, 195], "boyd": 111, "edinburgh": 111, "fletcher": [111, 189], "sarang": 111, "joshi": 111, "riemannian": 111, "diffus": [111, 156, 169], "tensor": 111, "s0165168406001691": 111, "sigpro": 111, "2005": [111, 309], "vladimir": [111, 214, 239], "fonov": [111, 214, 239], "botteron": [111, 214, 239], "almli": [111, 214, 239], "mckinstri": [111, 214, 239], "unbias": [111, 156, 214, 239], "pediatr": [111, 214, 239], "s1053811910010062": [111, 214, 239], "rc": [111, 214, 239], "cr": [111, 214, 239], "dl": [111, 214, 239], "nonlinear": [111, 214, 239], "birth": [111, 214, 239], "adulthood": [111, 214, 239], "s102": [111, 214, 239], "70884": [111, 214, 239], "fox": [111, 202, 204, 309], "snyder": [111, 308, 309], "justin": [111, 309], "maurizio": [111, 309], "corbetta": [111, 309], "essen": [111, 114, 221, 224, 226, 309], "marcu": [111, 161, 221, 228, 309], "raichl": [111, 309], "9673": [111, 309], "9678": [111, 309], "juli": [111, 119, 149, 163, 309], "0504136102": [111, 309], "freedman": [111, 328], "nonstochast": [111, 328], "busi": [111, 328], "econom": [111, 328], "1983": [111, 328], "tandfonlin": [111, 328], "07350015": [111, 328], "10509354": [111, 328], "holm": [111, 201, 285, 404], "worslei": [111, 285, 404], "frith": [111, 285, 404], "frackowiak": [111, 285, 404], "1994": [111, 285, 404], "460020402": [111, 285, 404], "gabriel": [111, 224, 226], "rivera": [111, 114, 224, 226], "yannick": [111, 115, 149, 158, 219, 224, 226, 247, 248], "schwarz": [111, 224, 226], "satrajit": [111, 224, 226], "ghosh": [111, 114, 224, 226], "camil": [111, 224, 226], "maumet": [111, 114, 224, 226], "vanessa": [111, 224, 226], "sochat": [111, 114, 224, 226], "nichol": [111, 114, 169, 171, 221, 224, 226, 282, 322, 328], "tal": [111, 114, 176, 224, 226, 318], "yarkoni": [111, 114, 224, 226], "marguli": [111, 114, 224, 226], "neuroinformat": [111, 224, 226], "fninf": [111, 114, 224, 226], "00008": [111, 114, 224, 226], "philadelphia": [111, 162], "00839984": [111, 162], "educ": [111, 221, 228, 254, 258, 385], "fifth": [111, 215, 254, 258], "edit": [111, 142, 149, 164, 172, 254, 258], "066189": [111, 254, 258], "stern": [111, 254, 258], "nyu": [111, 147, 149, 254, 258], "edu": [111, 202, 205, 228, 254, 258], "wgreen": [111, 254, 258], "econometricanalysi": [111, 254, 258], "htm": [111, 254, 258], "logan": [111, 162], "grosenick": [111, 162], "brad": [111, 162], "klingenberg": [111, 162], "kiefer": [111, 162], "katovich": [111, 162], "brian": [111, 162, 234, 285, 404], "knutson": [111, 162], "s1053811912012487": [111, 162], "ida": [111, 213], "gobbini": [111, 213], "maura": [111, 213], "furei": [111, 213], "alumit": [111, 213], "ishai": [111, 213], "jennif": [111, 213], "schouten": [111, 213], "pietro": [111, 213], "pietrini": [111, 213], "5539": [111, 213], "1063736": [111, 213], "honorio": [111, 163, 182, 185], "tommi": [111, 182, 185], "jaakkola": [111, 182, 185], "1207": [111, 163, 182, 185], "4255": [111, 163, 182, 185], "andr": [111, 391, 397], "rena": [111, 137, 149, 153, 158, 169, 170, 247, 248, 390, 397], "tran": [111, 191, 391, 397], "anal": [111, 391, 397], "mach": [111, 391, 397], "intel": [111, 391, 397], "tpami": [111, 391, 397], "2815524": [111, 391, 397], "schwartz": [111, 114, 115, 149, 158, 219, 247, 248], "scalabl": [111, 158, 247, 248], "s1053811917308182": [111, 158, 247, 248], "koji": [111, 222], "complementari": [111, 222], "neuropsychologia": [111, 222], "s0028393211005070": [111, 222], "thorsten": [111, 161], "kahnt": [111, 161], "grueschow": [111, 161], "speck": [111, 161], "dylan": [111, 161, 234], "perceptu": [111, 161], "s0896627311002960": [111, 161], "nikolau": [111, 161, 249], "kriegeskort": [111, 161, 171, 249], "rainer": [111, 161, 249], "goebel": [111, 161, 249], "peter": [111, 161, 202, 204, 249], "bandettini": [111, 161, 249], "3863": [111, 161, 249], "3868": [111, 161, 249], "0600244103": [111, 161], "laird": [111, 202], "mickl": [111, 202], "kimberli": [111, 202], "rai": [111, 202], "rees": [111, 202], "mckai": [111, 202], "glahn": [111, 202], "4022": [111, 202], "4037": [111, 202], "1162": [111, 202, 228], "jocn": [111, 202, 228], "_a": [111, 202], "_00077": [111, 202], "mit": [111, 201, 202, 228], "1777164": [111, 202], "jocn_a_00077": [111, 202], "lancast": [111, 204], "rainei": [111, 204], "summerlin": [111, 204], "freita": [111, 204], "toga": [111, 204], "mazziotta": [111, 204], "autom": [111, 114, 191, 204, 224, 226], "preliminari": [111, 204], "forward": [111, 204], "1997": [111, 137, 149, 204], "281997": [111, 204], "3c238": [111, 204], "hbm6": [111, 204], "jack": [111, 157, 204], "woldorff": [111, 204], "lawrenc": [111, 204], "parson": [111, 204], "mario": [111, 204], "liotti": [111, 204], "catarina": [111, 204], "laci": [111, 204], "kochunov": [111, 204], "nickerson": [111, 204], "shawn": [111, 204], "mikiten": [111, 204], "talairach": [111, 131, 149, 168, 204], "28200007": [111, 204], "3a3": [111, 204], "3c120": [111, 204], "hbm30": [111, 204], "200007": [111, 204], "lindquist": [111, 134, 149, 285, 404], "stephan": [111, 285, 404], "geuter": [111, 285, 404], "tor": [111, 114, 224, 226, 285, 404], "wager": [111, 114, 224, 226, 285, 404], "caffo": [111, 285, 404], "modular": [111, 164, 285, 404], "reintroduc": [111, 285, 404], "biorxiv": [111, 285, 404], "407676": [111, 285, 404], "1101": [111, 285, 404], "traci": [111, 228], "jami": [111, 228], "parker": [111, 228], "csernanski": [111, 228], "morri": [111, 228], "randi": [111, 201, 205, 228], "buckner": [111, 201, 205, 228], "nondement": [111, 228], "dement": [111, 228], "1498": [111, 228], "1507": [111, 228], "1756878": [111, 228], "13th": [111, 253], "symposium": [111, 252, 253], "biomed": [111, 252, 253], "1282": [111, 253], "1285": [111, 253], "7493501": [111, 253], "behaviour": [111, 122, 134, 141, 146, 149, 162, 176, 221], "1328": [111, 162], "februari": [111, 115, 116, 121, 124, 125, 129, 139, 149, 162], "00563468": [111, 162], "tmi": [111, 162], "2113378": [111, 162], "yoichi": [111, 223], "hajim": [111, 223], "okito": [111, 223], "masa": [111, 223], "aki": [111, 134, 149, 223], "yusuk": [111, 223], "hiroki": [111, 223], "norihiro": [111, 223], "sadato": [111, 223], "yukiyasu": [111, 223], "s0896627308009586": [111, 223], "dougla": [111, 259, 260], "montgomeri": [111, 259, 260], "peck": [111, 259, 260], "geoffrei": [111, 259, 260], "vine": [111, 259, 260], "ed": [111, 259, 260], "son": [111, 259, 260], "0471754951": [111, 259, 260], "naselari": [111, 157], "kendrick": [111, 157], "kai": [111, 157], "shinji": [111, 157], "nishimoto": [111, 157], "gallant": [111, 157], "20691790": [111, 157], "pmid": [111, 157, 201, 205], "pubm": [111, 157, 191, 252, 308, 309], "ncbi": [111, 157, 252, 308, 309], "nlm": [111, 157, 252, 308, 309], "jare": [111, 189], "nielsen": [111, 189], "brandon": [111, 189], "zielinski": [111, 189], "nichola": [111, 189], "lang": [111, 189, 191], "erin": [111, 189], "bigler": [111, 189], "janet": [111, 189], "lainhart": [111, 189], "multisit": [111, 189], "autism": [111, 189], "fnhum": [111, 189], "00599": [111, 189], "kate": [111, 202, 234], "stanlei": [111, 234], "colcomb": [111, 234], "tobe": [111, 234], "maarten": [111, 234, 308, 309], "menn": [111, 234, 308, 309], "melissa": [111, 234], "benedict": [111, 234], "moreno": [111, 219, 234], "laura": [111, 234], "panek": [111, 234], "shaquanna": [111, 234], "brown": [111, 234], "zavitz": [111, 234], "qingyang": [111, 234], "sharad": [111, 234], "sikka": [111, 234], "gutman": [111, 234], "saroja": [111, 234], "bangaru": [111, 234], "rochel": [111, 234], "tziona": [111, 234], "schlachter": [111, 234], "stephani": [111, 234], "kamiel": [111, 234], "ayesha": [111, 234], "anwar": [111, 234], "caitlin": [111, 234], "hinz": [111, 234], "kaplan": [111, 234], "anna": [111, 234], "rachlin": [111, 234], "samantha": [111, 234], "adelsberg": [111, 234], "cheung": [111, 234], "ranjit": [111, 234], "khanuja": [111, 234], "chaogan": [111, 234], "yan": [111, 234], "courtnei": [111, 234], "margaret": [111, 234], "wood": [111, 234], "cox": [111, 234], "adriana": [111, 234], "dimartino": [111, 234], "eva": [111, 234], "petkova": [111, 234], "philip": [111, 234], "reiss": [111, 234], "nanci": [111, 234], "duan": [111, 234], "dawn": [111, 234], "thompsen": [111, 234], "bharat": [111, 234], "biswal": [111, 234], "barbara": [111, 234], "coffei": [111, 234], "hoptman": [111, 234], "javitt": [111, 234], "nunzio": [111, 234], "pomara": [111, 234], "sidti": [111, 234], "harold": [111, 234], "koplewicz": [111, 234], "francisco": [111, 234], "castellano": [111, 234], "bennett": [111, 234], "leventh": [111, 234], "milham": [111, 234], "reilli": [111, 221], "valentina": [111, 221], "tomassini": [111, 221], "narend": [111, 221], "ramnani": [111, 221], "heidi": [111, 221], "johansen": [111, 221], "berg": [111, 221], "zone": [111, 221], "953": [111, 221], "bhp157": [111, 221], "17303287": [111, 221], "wolfgang": [111, 200], "amanda": [111, 200], "nili": [111, 200], "tyszka": [111, 200], "vivo": [111, 200], "nuclei": [111, 200], "180063": [111, 200], "apr": [111, 200], "1038": [111, 200, 211, 229], "sdata": [111, 200, 211, 229], "bastien": [111, 219], "antoinett": [111, 219], "julien": [111, 219], "serr": [111, 219], "deni": [111, 219], "le": [111, 219], "bihan": [111, 219], "stanisla": [111, 219], "congdon": [111, 211, 229], "triplett": [111, 211, 229], "karlsgodt": [111, 211, 229], "sabb": [111, 211, 229], "freimer": [111, 211, 229], "london": [111, 169, 211, 229], "cannon": [111, 211, 229], "bilder": [111, 211, 229], "phenom": [111, 211, 229], "160110": [111, 211, 229], "decemb": [111, 122, 123, 137, 149, 211, 229], "mitig": [111, 364], "s1053811916303871": [111, 364], "2142": [111, 308, 309], "2154": [111, 308, 309], "22019881": [111, 308, 309], "pmc3254728": [111, 308, 309], "timothi": [111, 201, 208, 221, 308], "laumann": [111, 201, 208, 308], "fran": [111, 208], "miezin": [111, 208], "anish": [111, 308], "mitra": [111, 308], "s1053811913009117": [111, 308], "raimon": [111, 308, 309], "pruim": [111, 308, 309], "daan": [111, 308, 309], "rooij": [111, 308, 309], "alberto": [111, 308, 309], "llera": [111, 308, 309], "buitelaar": [111, 308, 309], "aroma": [111, 151, 308, 309], "hilari": [111, 210], "richardson": [111, 210], "grace": [111, 210], "lisandrelli": [111, 210], "alexa": [111, 210], "riobueno": [111, 210], "naylor": [111, 210], "sax": [111, 210], "social": [111, 210], "twelv": [111, 210], "livio": [111, 262], "wouter": [111, 262], "aldo": [111, 262], "novemb": [111, 131, 134, 137, 140, 149, 262], "schaefer": [111, 201], "ru": [111, 201], "kong": [111, 201], "gordon": [111, 201], "nian": [111, 201], "zuo": [111, 201], "avram": [111, 201], "yeo": [111, 201, 205, 360], "3095": [111, 201], "3114": [111, 201], "bhx179": [111, 201], "25696344": [111, 201], "_schaeferfullsupp": [111, 201], "seitzman": [111, 137, 149, 209], "caterina": [111, 209], "gratton": [111, 209], "marek": [111, 209], "raut": [111, 209], "116290": [111, 209], "s105381191930881x": [111, 209], "zarrar": 111, "shehzad": 111, "gee": 111, "kristin": 111, "gotim": 111, "lucina": 111, "q": [111, 166, 172, 182, 263, 267, 280, 283, 402], "uddin": 111, "sang": 111, "han": 111, "lee": 111, "ami": 111, "krain": 111, "xavier": 111, "unconstrain": 111, "2209": 111, "2229": 111, "bhn256": 111, "17300841": 111, "sm": [111, 221], "glasser": [111, 221], "salimi": [111, 221], "khorshidi": [111, 221], "duff": [111, 221], "dc": [111, 221], "mw": [111, 221], "woolrich": [111, 221], "jenkinson": [111, 221], "cf": [111, 176, 221], "rfmri": [111, 221], "ohbm": [111, 133, 149, 221], "annual": [111, 221], "meet": [111, 146, 149, 221, 422], "free": [111, 157, 164, 166, 169, 282, 328], "address": [111, 166, 168, 172, 282, 328], "localis": [111, 282, 328], "diego": [111, 221], "vidaurr": [111, 221], "ej": [111, 221], "behren": [111, 221], "kamil": [111, 221], "ugurbil": [111, 221], "karla": [111, 202, 221], "miller": [111, 202, 221], "demograph": [111, 221], "1565": [111, 221], "1567": [111, 221], "watkin": [111, 202], "toro": [111, 202], "textquoteright": [111, 202], "architectur": [111, 153, 202], "13040": [111, 202], "13045": [111, 202], "0905267106": [111, 202], "mccarthi": [111, 221], "emma": [111, 221], "clair": [111, 221], "xu": [111, 221], "horton": [111, 221], "eugen": [111, 221], "\u00e2": [111, 221], "mil": [111, 221], "u\u011furbil": [111, 221], "humanconnectom": [111, 221], "storag": [111, 176, 221, 225, 227], "media": [111, 221], "s500": [111, 221], "hcp500_megatrawl_april2015": [111, 221], "fenna": [111, 201, 205], "krienen": [111, 201, 205], "jorg": [111, 201, 205], "sepulcr": [111, 201, 205], "mert": [111, 201, 205], "sabuncu": [111, 201, 205], "danial": [111, 201, 205], "lashkari": [111, 201, 205], "marisa": [111, 201, 205], "hollinshead": [111, 201, 205], "roffman": [111, 201, 205], "jordan": [111, 201, 205], "smoller": [111, 201, 205], "lilla": [111, 201, 205], "z\u00f6llei": [111, 201, 205], "polimeni": [111, 201, 205], "hesheng": [111, 201, 205], "neurophysiologi": [111, 201, 205], "1125": [111, 201, 205], "1165": [111, 201, 205], "21653723": [111, 201, 205], "1152": [111, 201, 205], "jn": [111, 201, 205], "00338": [111, 201, 205], "tzourio": [111, 191], "mazoy": [111, 191], "landeau": [111, 191], "papathanassi": [111, 191], "crivello": [111, 191], "etard": [111, 191], "delcroix": [111, 191], "joliot": [111, 191], "macroscop": [111, 191], "2002": [111, 191], "s1053811901909784": [111, 191], "0978": [111, 191], "flore": [111, 181], "baronnet": [111, 181], "andrea": [111, 181, 252], "kleinschmidt": [111, 181, 252], "fillard": [111, 181], "stroke": [111, 181], "patient": [111, 169, 181], "tianzi": [111, 181], "jiang": [111, 181], "nassir": [111, 181], "navab": [111, 181], "josien": [111, 181], "pluim": [111, 181], "viergev": [111, 181], "assist": [111, 181], "intervent": [111, 181], "miccai": [111, 150, 181], "cn2h9c": [111, 181], "spontan": [111, 199], "1008": [111, 182], "5071": [111, 182], "bio": [111, 182], "sepideh": [111, 252], "sadaghiani": [111, 252], "20153834": [111, 252], "s1053811913003340": [111, 199], "merlin": [111, 252], "keller": [111, 252], "recoveri": [111, 252], "nano": [111, 252], "macro": [111, 252], "1177": [111, 252], "5490204": [111, 252], "gerard": [111, 328], "ridgwai": [111, 328], "webster": [111, 328], "s1053811914000913": [111, 328], "synthesi": [111, 114, 163, 224, 226], "adelstein": 111, "donald": 111, "klein": 111, "retest": 111, "2163": 111, "2177": [111, 137, 149], "s1053811909011525": 111, "di": 111, "martino": 111, "1432": 111, "s1053811909010167": 111, "antonio": [111, 219], "frouin": [111, 219], "brainom": [111, 134, 149, 219], "s1053811915008745": [111, 219], "abstract": [112, 311], "knowledg": [112, 151, 166, 318], "beaten": 112, "mask_face_littl": [113, 174, 213], "mask_house_littl": [113, 174, 213], "comfort": [113, 164], "plenti": 113, "hesit": [113, 164], "rarr": [113, 176], "tube": 113, "clever": [113, 163], "resp": 113, "brighter": 113, "scratch": 113, "elementari": 113, "brows": [114, 144, 149], "introduc": [114, 127, 137, 146, 149, 156, 157, 161, 164, 176, 181, 182, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "upload": 114, "modal": [114, 156, 164, 232, 305], "went": 114, "webpag": 114, "click": [114, 166, 176, 219, 421], "brainpedia": 114, "1952": [114, 137, 149], "brainpedia_subset": 114, "32015": 114, "32016": 114, "criteria": [114, 164, 169, 189, 224], "collection_term": [114, 224], "collection_metadata": [114, 224], "everi": [114, 150, 151, 155, 156, 157, 161, 163, 164, 166, 176, 183, 197, 198, 224, 313, 316, 363, 368, 371, 376, 377, 378, 380, 395, 396, 402, 422], "image_term": [114, 224], "snippet": 114, "is_valid": [114, 137, 149], "treat": 114, "cbf": 114, "cbv": 114, "express": [114, 120, 122, 149, 169, 174, 224, 250, 251, 265, 267, 270, 295, 376], "ignorecas": 114, "special": [114, 121, 137, 149], "isnul": [114, 224], "notnul": [114, 224], "notequ": [114, 224], "greaterorequ": [114, 224], "greaterthan": [114, 224], "lessorequ": [114, 224], "lessthan": [114, 224], "notin": [114, 224], "notcontain": [114, 224], "resultfilt": [114, 224], "OR": 114, "xor": 114, "NOT": 114, "conveni": [114, 175, 176, 210], "collection_filt": [114, 224], "callabl": [114, 144, 149, 185, 224, 245, 246, 247, 248, 249], "image_filt": [114, 224], "anyth": [114, 163, 164], "lambda": 114, "disabl": [114, 135, 137, 141, 147, 149, 163, 389], "rewritten": 114, "suppos": [114, 163, 172, 174, 176, 259, 260], "weird": 114, "small_meta_imag": 114, "collections_meta": [114, 224, 225, 226, 227], "platform": [114, 130, 149, 172], "unless": [114, 163, 164, 229, 282, 328, 373, 404], "vectorize_word": [114, 224, 226], "kj": 114, "ss": 114, "vv": 114, "te": 114, "ra": [114, 299], "front": [114, 254, 257], "neuroinform": 114, "contributor": [115, 116, 118, 119, 164, 172], "git": [115, 116, 118, 119, 122, 124, 127, 149, 164, 172], "shortlog": [115, 116, 118, 119, 122, 124, 127, 149], "bugfix": [117, 118, 123, 124, 127, 145, 149, 164], "minor": [118, 130, 132, 149, 156], "rewamp": [118, 149], "brok": [118, 149], "obei": [119, 149], "debian": [119, 149], "rule": [119, 149, 156, 157, 164, 245, 246, 247, 248], "januari": [120, 138, 144, 149], "2023": [120, 121, 149], "bump": [120, 134, 137, 142, 143, 144, 149, 157, 159, 172], "v1": [120, 134, 142, 144, 149], "v3": [120, 149], "3237": [120, 149], "doc": [120, 121, 127, 143, 144, 145, 146, 149, 164, 172], "theme": [120, 146, 149], "furo": [120, 146, 149], "3125": [120, 146, 149], "3196": [120, 146, 149], "3181": [120, 146, 149], "2715": [120, 146, 149], "tick": [120, 149, 164, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 368, 370, 371, 377, 378, 379, 381, 382, 384, 386, 388], "plot_surf": [120, 129, 131, 137, 141, 142, 143, 144, 149, 164, 165, 381, 382, 421], "3105": [120, 149, 164], "3374": [120, 149], "valueerror": [120, 149, 295, 299, 312, 313, 315, 316, 408], "3385": [120, 149], "compute_multi_epi_mask": [120, 149, 175, 314], "3412": [120, 149], "3403": [120, 149], "test_cluster_level_parameters_smok": [120, 149], "3436": [120, 149], "creation": [120, 137, 149, 252, 253, 267, 280, 402], "3453": [120, 149], "imput": [120, 149], "cubic": [120, 149, 176, 185, 404], "spline": [120, 149, 370, 371, 377, 378, 385, 404], "friendli": [120, 149, 422], "rework": [120, 124, 130, 137, 143, 149], "deploi": [120, 149], "3426": [120, 149], "3439": [120, 149], "contribut": [120, 131, 134, 135, 136, 137, 138, 139, 143, 144, 146, 149, 157, 166, 172, 422], "changelog": [120, 129], "whatsnew": [120, 149], "3446": [120, 149], "3452": [120, 149], "privat": [120, 146, 149, 164], "weighted_connectivity_graph": [120, 149], "nearest_neighbor_group": [120, 149], "renam": [120, 130, 134, 149, 172], "3347": [120, 149], "alias": [120, 149], "builtin": [120, 149], "3422": [120, 149], "compute_multi_gray_matter_mask": [120, 149], "3427": [120, 149], "3424": [120, 149], "3429": [120, 149], "maint": [120, 121, 144, 145, 146, 147, 149, 164], "_safe_cach": [120, 149], "deem": [120, 149], "outdat": [120, 128, 149], "anymor": [120, 146, 149], "3375": [120, 149], "3433": [120, 149], "docstr": [120, 121, 135, 140, 143, 146, 149, 164, 257, 259, 260], "migrat": [120, 149], "nistats_migr": [120, 149], "rst": [120, 149, 164, 172], "3449": [120, 149], "april": [121, 126, 129, 135, 136, 145, 149], "3498": [121, 149], "3444": [121, 149], "predefin": [121, 149], "3259": [121, 149], "3605": [121, 149], "refactor": [121, 128, 142, 144, 146, 149, 172], "create_fake_bids_dataset": [121, 149], "3525": [121, 149], "3362": [121, 149], "3531": [121, 149], "_standard": [121, 149], "3474": [121, 149], "3563": [121, 149], "confus": [121, 149, 157, 303], "3483": [121, 149], "3173": [121, 149], "sub_label": [121, 149, 270, 305], "3351": [121, 149], "ridgeclassifiercv": [121, 149, 245, 246, 247, 248], "3626": [121, 149], "3631": [121, 149], "3414": [121, 149], "fetch_atlas_craddock_2012": [121, 149, 151], "cycl": [121, 149], "3353": [121, 149], "3548": [121, 147, 149], "pep8": [121, 147, 149, 164, 172], "3549": [121, 149], "3551": [121, 149], "3552": [121, 149], "3553": [121, 149], "3554": [121, 149], "3555": [121, 149], "helper": [121, 122, 129, 130, 149, 164, 178, 224], "img_to_signals_label": [121, 134, 137, 149, 396, 398], "signals_to_img_label": [121, 149, 395, 399], "img_to_signals_map": [121, 149, 395, 399], "signals_to_img_map": [121, 149, 396, 398], "3523": [121, 149], "move": [121, 122, 129, 142, 149], "setuptool": [121, 149], "backend": [121, 124, 134, 139, 144, 149, 253, 383], "pyproject": [121, 149, 164, 172, 422], "toml": [121, 149, 164, 172, 422], "hatchl": [121, 149, 172], "met": [121, 149], "3635": [121, 149], "3557": [121, 149], "bibtex": [121, 146, 149], "3558": [121, 149], "restor": [121, 149], "spatialimag": [121, 149, 174, 288], "3462": [121, 149], "3465": [121, 149], "3445": [121, 149], "3478": [121, 149], "3477": [121, 149], "3485": [121, 149], "3491": [121, 149], "3484": [121, 149], "sym_to_vec": [122, 127, 130, 142, 149], "modernis": [122, 149], "style": [122, 144, 149, 244], "784": [122, 149], "copy_img": [122, 149], "indexerror": [122, 144, 149], "fast_abs_percentil": [122, 149], "875": [122, 149], "group_sparse_covari": [122, 149, 163, 183], "n_cut": [122, 149, 359], "find_cut_slic": [122, 129, 149], "822": [122, 149], "targett": [123, 149], "renew": [124, 149], "flake8": [124, 146, 149, 164], "pull": [124, 146, 149, 169, 171], "symmetric_split": [124, 149, 197, 198], "mac": [124, 149], "numpy_convers": [124, 149], "csv_to_arrai": [124, 149], "refresh": [124, 149], "sparsifi": [124, 149], "circleci": [124, 129, 149], "brainhack": [125, 130, 149], "mathemat": [125, 149, 169, 296, 410], "cobr": [125, 129, 147, 149], "fetch_cobr": [125, 129, 140, 144, 149], "basc": [125, 149, 193], "expand": [126, 149, 169, 174, 295, 389, 391], "homedir": [126, 149], "uniformli": [126, 149, 157, 373, 379, 381, 382, 386], "aal": [126, 149, 191], "fetch_atlas_a": [126, 145, 149], "august": [127, 134, 146, 149], "wrong": [127, 145, 149, 166], "ivan": [127, 134, 149], "gonzalez": [127, 134, 149], "resolv": [128, 138, 149], "1238": [128, 149], "get_affin": [128, 149, 174, 287], "checkout": [129, 149, 164, 172], "latest": [129, 149, 164, 172, 309], "_get_mask_volum": [129, 149], "_adjust_screening_percentil": [129, 149], "uncompress": [129, 133, 149], "tar": [129, 149, 172], "set_axis_bgcolor": [129, 149], "fast_svd": [129, 149], "switch": [129, 136, 149, 164, 172, 370], "lapack": [129, 149, 163], "svd": [129, 149, 253, 291, 390, 405], "heurist": [129, 149, 162, 163, 183, 322, 363, 376, 377, 378, 385, 421], "pip": [129, 134, 137, 149, 164, 172, 422], "_safe_get_data": [129, 149], "safe": [129, 149], "ensure_finit": [129, 149, 285, 319, 322, 404], "cov_to_corr": [129, 149], "prec_to_parti": [129, 149], "qualit": [129, 149], "fetch_surf_fsaverage5": [129, 134, 149], "surf_plot": [129, 149], "schizophrenia": [129, 149, 169], "coveral": [129, 149], "codecov": [129, 149], "sym_matrix_to_vec": [130, 149, 188], "largest_connected_compon": [130, 149], "workaround": [130, 149], "vec_to_sym_matrix": [130, 149], "plot_connectivity_measur": [130, 149], "tighter": [130, 149, 163], "largest_connected_component_img": [130, 149], "largest": [130, 149, 163, 294, 320, 321, 322, 323, 324, 325, 326, 362], "joe": [131, 149], "necu": [131, 149], "fetch_atlas_talairach": [131, 149], "resampling_interpol": [131, 149, 370, 371, 377, 378, 385], "backward": [131, 144, 149, 164, 197, 198], "incompat": [131, 149, 267], "cautious": [131, 149], "anat_img": [131, 149, 363], "jeff": [131, 149], "chiang": [131, 149], "analu": [131, 134, 149], "madhyastha": [131, 134, 149], "meghana": [131, 134, 149], "sfvnmac": [131, 134, 149], "bedetti": [131, 134, 149], "griffith": [131, 149], "lannuzel": [131, 134, 149], "1536": [132, 149], "usabl": [132, 149, 161, 163, 223, 249], "node_color": [132, 142, 149, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 384], "1595": [132, 149], "nifti2imag": [132, 149], "confer": [133, 149], "cold_hot": [133, 149, 373, 378, 382, 385, 386, 388], "lock": [133, 149], "whitespac": [133, 149], "had": [133, 147, 149], "attributeerror": [133, 149], "httperror": [133, 149], "view_mark": [134, 135, 137, 142, 149, 384, 385, 421], "orthogon": [134, 149, 169, 267, 269, 274, 280, 285, 330, 339, 340, 341, 344, 358, 363, 365, 368, 370, 371, 374, 376, 377, 378, 402, 404], "view_stat_map": [134, 149], "python2": [134, 135, 136, 137, 149], "navig": [134, 149], "anaconda": [134, 149, 422], "feel": [134, 149, 164], "shout": [134, 149], "pbellec": [134, 149], "great": [134, 149], "awesom": [134, 149], "sportingli": [134, 149], "accommod": [134, 149], "feedback": [134, 149, 164, 172], "miykael": [134, 149], "brainsprit": [134, 135, 149, 421], "himanshupathak21061998": [134, 135, 149], "octob": [134, 137, 149], "uniti": [134, 149], "channel": [134, 149], "life": [134, 149], "remi": [134, 149], "akshai": [134, 149], "erramuzp": [134, 149], "foucault": [134, 149], "jehan": [134, 149], "nikolaidi": [134, 149], "dillon": [134, 149], "plunkett": [134, 149], "operto": [134, 149], "dtyulman": [134, 149], "0a0": 134, "1705": [134, 149], "grid_search": [134, 149, 245, 246, 247, 248], "menuet": [134, 149], "romuald": [134, 149], "consum": [135, 149, 159, 163, 172, 174], "noteworthi": [135, 149, 157], "fetch_atlas_schaefer_2018": [135, 137, 149], "fetch_coords_seitzman_2018": [135, 149], "node_coord": [135, 137, 149, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 374, 384], "edge_cmap": [135, 137, 149, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 384], "load_niimg": [135, 149], "silent": [135, 144, 149], "book": [135, 149], "signatur": [135, 149, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408], "mgz": [135, 136, 149, 379, 380, 381, 382, 388, 406], "mne": [135, 136, 149], "lowest": [136, 149], "broke": [136, 149], "v2": [137, 142, 149], "viewabl": [137, 149], "vscode": [137, 149], "biap8": [137, 149], "input_output": [137, 149], "2172": [137, 149], "giant": [137, 149], "1336": [137, 149], "plot_connectome_strength": [137, 140, 144, 149], "2028": [137, 149], "pad": [137, 149, 175, 176, 289, 300, 301, 322, 325, 329, 331, 332, 403], "2025": [137, 149], "1953": [137, 149], "ticklabel": [137, 149], "psc": [137, 141, 149, 312, 313, 314, 315, 316, 317, 318, 404], "median": [137, 149, 312, 315, 379, 395], "standard_devi": [137, 149, 312, 315, 395], "2221": [137, 149], "2057": [137, 149], "2157": [137, 149], "truncat": [137, 149], "2195": [137, 149], "det": [137, 149, 200], "2235": [137, 149], "old": [137, 143, 144, 147, 149], "2255": [137, 149], "ndarrai": [137, 149, 181, 182, 183, 184, 185, 186, 187, 188, 201, 203, 207, 209, 210, 221, 222, 245, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 263, 267, 280, 282, 285, 287, 290, 291, 297, 298, 300, 302, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 325, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 366, 372, 375, 379, 380, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408], "2107": [137, 149], "attempt": [137, 149, 270], "2212": [137, 149], "nose": [137, 149], "2231": [137, 149], "2248": [137, 149], "2169": [137, 149], "05_advanc": [137, 149], "03_connect": [137, 149], "2063": [137, 149], "merg": [137, 149, 153, 164, 169, 172, 175, 391], "plot_adhd_spher": [137, 149], "duplic": [137, 149], "review": [137, 149, 161, 172], "plot_canica_analysi": [137, 149], "plot_haxby_decod": [137, 149], "2166": [137, 149], "unsuit": [137, 149], "redund": [137, 149, 164], "crash": [137, 149], "1888": [137, 149], "2083": [137, 149], "2052": [137, 149], "2118": [137, 149], "2138": [137, 149], "faulti": [137, 149], "2272": [138, 149], "developmental_fmri": [138, 149], "launch": [139, 149, 156], "2429": [139, 149], "2302": [139, 149], "typo": [139, 149], "2312": [139, 149], "fetch_nyu_rest": [139, 142, 149], "2308": [139, 149], "2299": [140, 149], "2307": [140, 149], "2509": [140, 149], "2327": [140, 149], "art": [140, 149, 157, 245, 246, 247, 248], "nodal": [140, 149, 374, 421], "decim": [140, 149, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 371], "interchang": [140, 149], "compute_brain_mask": [140, 143, 149, 175, 245, 246, 247, 248, 252, 253, 317, 324, 390], "compute_gray_matter_mask": [140, 144, 149], "regard": [140, 149, 162, 215, 239, 309], "erron": [140, 149, 201], "readm": [140, 149], "2021": [141, 142, 143, 149, 190, 191, 194, 199, 200, 201, 204, 205, 228, 231, 232, 234], "serv": [141, 149, 164, 172, 196, 210], "1024": [141, 149, 196], "2619": [141, 149], "2622": [141, 149], "2684": [141, 149], "2702": [141, 149], "one_minus_pvalu": [141, 149, 255], "stabil": [141, 149, 155, 247, 248, 255], "cumul": [141, 149, 255], "2567": [141, 149], "2674": [141, 149], "2553": [141, 149], "arm": [141, 149], "2606": [141, 149], "whatev": [141, 149], "2669": [141, 149], "notat": [141, 144, 149, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 368, 370, 371, 377, 378, 379, 381, 382], "2697": [141, 149], "2712": [141, 149], "handi": [141, 149, 165], "2696": [141, 149], "2714": [141, 149], "2719": [141, 149], "2707": [142, 149], "2858": [142, 149], "inher": [142, 149], "basemask": [142, 149], "fsaverage3": [142, 149, 233, 386], "fsaverage4": [142, 149, 233, 386], "fsaverage6": [142, 149, 233, 386], "2815": [142, 149], "curv": [142, 149, 156, 157, 159, 163, 169, 379, 382, 388, 406], "2532": [142, 149], "struct": [142, 149], "footcit": [142, 144, 146, 149], "footbibliographi": [142, 144, 146, 149], "2806": [142, 149], "2732": [142, 149], "_get_voxelwise_model_attribut": [142, 149], "2792": [142, 149], "ascend": [142, 149, 295], "1155": [142, 149], "2831": [142, 149], "zoom": [142, 149], "surround": [142, 149, 408], "2798": [142, 149], "inconsist": [142, 149, 280, 282], "2767": [142, 149], "2826": [142, 149], "marker_label": [142, 149, 387], "2745": [142, 149], "avg_method": [142, 149, 379], "auto_exampl": [142, 149, 164, 386], "2805": [142, 149], "viridi": [142, 149], "flow": [142, 149, 166, 169], "2821": [142, 144, 149], "butterwoth": [142, 149], "stratifi": [142, 149, 156, 245, 247, 249], "2869": [142, 149], "2867": [142, 149], "2868": [142, 149], "juelich": [143, 149, 198], "2723": [143, 149], "load_mni152_gm_templ": [143, 149, 214, 237, 239, 240, 241], "load_mni152_wm_templ": [143, 149, 214, 238, 239, 240], "load_mni152_gm_mask": [143, 149, 214], "load_mni152_wm_mask": [143, 149, 214], "2738": [143, 149], "2755": [143, 149], "binarize_img": [143, 149], "skullstrip": [143, 149, 169, 239], "2904": [143, 149], "compute_multi_grey_matter_mask": [143, 149], "2876": [143, 149], "2941": [143, 149], "preset": [143, 144, 149, 309, 421], "nevertheless": [143, 149], "8339": [143, 149], "decor": [143, 149], "fill_doc": [143, 149], "2875": [143, 149], "affect": [143, 149, 164, 166, 169], "2928": [143, 149], "jqueri": [143, 149], "vulner": [143, 149], "2944": [143, 149], "2022": [144, 145, 146, 149], "plotli": [144, 149, 342, 379, 381, 382, 421, 422], "2902": [144, 149], "3061": [144, 149], "2946": [144, 149], "3016": [144, 149], "kmean": [144, 146, 149, 153, 170, 175, 267, 276, 389, 390], "2282": [144, 149], "3065": [144, 149], "mainten": [144, 149], "encourag": [144, 149, 164], "3026": [144, 149], "submodul": [144, 146, 149, 164], "3126": [144, 149], "get_bids_fil": [144, 149], "parse_bids_filenam": [144, 149], "subpart": [144, 149], "3036": [144, 149], "3009": [144, 149], "3013": [144, 149], "threw": [144, 149], "typeerror": [144, 149, 295], "3035": [144, 149], "3078": [144, 149], "3111": [144, 149], "hommel": [144, 149], "3109": [144, 149], "benjamini": [144, 149, 166, 266], "hocheberg": [144, 149], "3137": [144, 149], "3135": [144, 149], "retain": [144, 149, 156, 157, 166, 181, 182, 183, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 308, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392, 395, 396], "2965": [144, 149], "demean": [144, 149, 308, 309], "3003": [144, 149], "triag": [144, 149], "clearli": [144, 149, 164], "polici": [144, 149], "spm_hrf": [144, 149, 267, 269, 274], "2942": [144, 149], "3008": [144, 149], "test_img_plot": [144, 149], "reorgan": [144, 149, 164], "3015": [144, 149], "3033": [144, 149], "3077": [144, 149], "2859": [144, 149], "3106": [144, 149], "3081": [144, 149], "3082": [144, 149], "3093": [144, 149], "3133": [144, 149], "cond_id": [144, 149], "ex": [144, 149, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 368, 370, 371, 377, 378, 379, 381, 382], "3025": [144, 149], "3039": [144, 149], "slicer": [144, 149, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 421], "projector": [144, 149, 357], "3073": [144, 149], "byte": [144, 149, 164, 294, 300], "therefor": [144, 149, 155, 161, 163, 191, 193], "2655": [144, 149], "recarrai": [144, 149, 189, 195, 196, 207, 208, 209, 217, 218, 219, 228], "2829": [144, 149], "h0_fmax": [145, 149, 328], "3184": [145, 149], "fetch_abide_pcp": [145, 149], "func_preproc": [145, 149, 189], "3174": [145, 149], "3179": [145, 149], "_apply_cluster_size_threshold": [145, 149], "cluster_s": [145, 149], "3201": [145, 149], "beyond": [145, 149], "newest": [145, 149, 224], "3188": [145, 149], "3098": [145, 149], "3127": [145, 149], "3165": [145, 149], "determinist": [145, 149, 169, 191, 193, 195, 197, 198, 200, 201, 203, 204, 205, 389], "glossari": [145, 149], "3152": [145, 149], "3207": [145, 149], "3178": [145, 149], "cfg": [145, 149], "2953": [145, 149], "_neurovault_base_url": [146, 149], "_neurosynth_fetch_words_url": [146, 149], "3281": [146, 149], "3222": [146, 149], "3233": [146, 149], "3241": [146, 149], "3255": [146, 149], "c_ra": [146, 149], "3235": [146, 149], "_check_second_level_input": [146, 149], "flm_object": [146, 149], "3283": [146, 149], "3284": [146, 149], "_gamma_difference_hrf": [146, 149], "hemodynamic_model": [146, 149], "slight": [146, 149], "distort": [146, 149, 308], "3297": [146, 149], "0rc1": [146, 149], "wn": [146, 149], "unfilt": [146, 149], "3293": [146, 149], "3306": [146, 149], "3312": [146, 149], "typograph": [146, 149], "3337": [146, 149], "censor": [146, 149, 404], "3193": [146, 149], "3185": [146, 149], "conform": [146, 149, 166], "3262": [146, 149], "fall": [146, 149, 164, 373, 408], "3292": [146, 149], "n_elements_": [146, 149, 312, 313, 314, 315, 316, 317, 318], "3311": [146, 149], "filesystem": [146, 149], "branch": [146, 149, 164, 172], "diff": [146, 149], "3317": [146, 149], "3333": [146, 149], "3322": [146, 149], "carpet_plot": [146, 149], "deleg": [146, 149], "cmap_label": [146, 149, 364], "3209": [146, 149], "fsaverage5_spher": [146, 149], "3229": [146, 149], "regressionresult": [146, 149, 254, 258, 263, 267, 276], "simpleregressionresult": [146, 149, 267], "olsmodel": [146, 149, 257, 259, 260], "likelihoodmodelresult": [146, 149, 259, 260], "shorten": [146, 149], "df_resid": [146, 149], "wdesign": [146, 149], "wresid": [146, 149], "norm_resid": [146, 149], "wy": [146, 149], "fetch_openneuro_dataset_index": [146, 149], "favor": [146, 149], "3216": [146, 149], "afni": [146, 149], "nipi": [146, 149, 164, 170], "1046": [146, 149], "pr": [146, 149, 172], "1082": [146, 149], "overflow": [146, 149], "3227": [146, 149], "pars": [146, 149, 306], "3274": [146, 149], "charact": [146, 149, 276], "3141": [146, 149], "3302": [146, 149], "int8": [146, 149, 298], "3286": [146, 149], "prevent": [147, 149, 300, 301, 320, 321, 322, 324, 325], "gifti": [147, 149, 233, 234], "3819": [147, 149], "entiti": [147, 149], "3742": [147, 149], "throw": [147, 149, 318], "3811": [147, 149], "fitter": [147, 149], "grid_param": [147, 149], "3733": [147, 149], "3794": [147, 149], "3797": [147, 149], "2804": [147, 149], "logisticregressioncv": [147, 149, 245, 246, 247, 248], "3736": [147, 149], "3774": [147, 149], "3743": [147, 149], "isort": [147, 149, 164], "complianc": [147, 149, 164], "codebas": [147, 149, 164], "3538": [147, 149], "3566": [147, 149], "3556": [147, 149], "3601": [147, 149], "3609": [147, 149], "3646": [147, 149], "3647": [147, 149], "3615": [147, 149], "3614": [147, 149], "3648": [147, 149], "3651": [147, 149], "meanwhil": [147, 149], "3722": [147, 149], "3732": [147, 149], "licens": [147, 149, 194], "3838": [147, 149], "focuss": 150, "naturalist": [150, 151, 153, 154], "indirect": [150, 151], "friedman": 150, "biostatist": 150, "time_series_1": 150, "time_series_2": 150, "challeng": 150, "toll": 150, "stronger": 150, "nip": 150, "geometr": [150, 181], "group_connect": 150, "heterogen": 150, "easiest": [151, 156, 157], "frmi_fil": 151, "confounds_datafram": 151, "imperfect": 151, "boundari": [151, 161, 175, 376, 377, 379], "registr": [151, 166, 301, 421], "csv_file": 151, "consider": [151, 157, 282, 328], "readili": [151, 156, 159, 171, 174, 175, 392], "zaleski": 151, "rise": 153, "debat": 153, "cite": [153, 199, 210, 219], "quicker": [153, 164], "loss": [153, 158, 250, 309], "downsiz": 153, "hierarch": [153, 169, 170, 389], "neighborhood": 153, "tree": [153, 201], "admittedli": 153, "isotrop": 154, "publicli": 154, "osf": [154, 196, 200, 210, 219], "5hju4": [154, 210], "walker": [154, 392, 394], "likewis": 154, "sphinx_gallery_dummy_imag": [154, 175], "newer": [155, 224, 226], "arriv": 155, "consensu": [155, 164], "explor": [155, 159, 163, 165, 170, 171, 183, 211, 224, 230, 245, 246, 247, 248], "resembl": 155, "coactiv": 155, "neuro": [155, 169, 245, 303], "offer": [155, 165, 167, 421], "articul": 156, "diagnost": [156, 160], "statu": [156, 169, 228], "vbm": [156, 169, 171], "fa": 156, "unusu": 156, "rich": 156, "strongli": [156, 164, 169], "recfromcsv": 156, "seemingli": 156, "misleadingli": 156, "chose": 156, "Be": [156, 157, 164, 183, 254, 403], "got": 156, "thumb": [156, 164], "advic": 156, "worst": 156, "caveat": 156, "entir": [156, 161, 176, 315, 395], "imbalanc": 156, "domin": [156, 234], "roc": [156, 169], "guess": [156, 163, 320, 385], "notion": [156, 161, 306, 374], "00_tutori": 156, "tackl": [157, 172], "extern": [157, 160, 228], "trait": 157, "userguid": 157, "categor": [157, 172], "harder": 157, "vote": 157, "costli": [157, 161, 282, 328], "former": [157, 163, 224], "penal": [157, 163, 183, 250, 251], "variant": [157, 180], "counterpart": 157, "ridge_regressor": [157, 246, 248], "dummy_regressor": [157, 246, 248], "lunch": 157, "insensit": 157, "cheap": 157, "ill": 157, "importantli": [157, 159, 164], "ugli": 157, "nuisanc": [157, 169, 190, 254, 257, 258, 259, 309, 404], "hyper": [157, 158], "computationnali": 157, "bia": [157, 245, 246, 247, 248, 250, 251], "cancel": 157, "hood": [157, 162], "promot": [157, 158, 172], "memor": [158, 166], "versatil": [159, 170, 422], "mimic": [159, 197, 198], "unfortun": [159, 163], "prognosi": [160, 171], "reduct": [160, 253, 390, 423], "bag": [160, 250, 251, 423], "briefli": 161, "critic": [161, 163], "lorocv": 161, "properli": [161, 176, 365, 370], "isovoxel": 161, "volunt": 161, "theoret": 161, "hypothesi": [161, 166, 249, 255, 282, 328], "swap": [161, 175, 228, 303], "descriptor": [161, 268, 328], "herebi": 161, "rank": [161, 257, 258, 259, 260, 304, 328], "phenomenon": 161, "statistician": 161, "crucial": 161, "symmetri": [161, 163], "adopt": [161, 169], "spacenetclassifi": [162, 245, 246, 251], "tvl1": 162, "blobbi": 162, "mainli": 163, "devis": 163, "descent": [163, 253], "innermost": 163, "hoc": 163, "histori": 163, "prove": [163, 176], "amplifi": 163, "mandatori": [163, 285], "_update_submatrix": 163, "perfect": 163, "newton": 163, "raphson": 163, "debug": [163, 164, 171, 183, 185], "kern": 163, "bottleneck": 163, "overhead": 163, "neglig": [163, 289], "evenli": [163, 285, 404], "highli": [163, 164], "serial": 163, "boil": 163, "written": [163, 400], "inlin": [163, 400], "naiv": 163, "clock": 163, "nr": 163, "loos": 163, "fortran": [163, 300, 301, 328], "couldn": 163, "weren": 163, "ubuntu": 163, "synthes": 163, "wasn": 163, "hopefulli": 163, "topologi": 163, "govern": 163, "hardest": 163, "unrealist": 163, "perfectli": 163, "spectrum": 163, "decorrel": 163, "whatsoev": 163, "mostli": [163, 304], "weakli": 163, "optimum": 163, "wast": 163, "convex": 163, "group_sparse_covariance_cost": 163, "feasibl": 163, "semi": 163, "primal": 163, "satisfi": [163, 172], "quantiti": [163, 255], "lost": 163, "rapidli": 163, "prohibit": 163, "slowli": 163, "tricki": 163, "paragraph": 163, "fewer": [163, 364], "dwindl": 163, "speedup": 163, "complic": [163, 174, 257, 259, 260], "program": [163, 421], "earlystopprob": 163, "unpen": 163, "fastest": 163, "fulli": [163, 166, 422], "compute_alpha_max": 163, "straightforward": [163, 255], "sequenti": [163, 174, 376], "trajectori": 163, "smallest": 163, "fact": [163, 166, 169], "energi": 163, "brute": 163, "finish": [163, 164, 284, 304, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 376, 384, 386, 388], "slowest": 163, "hardwar": 163, "commod": 163, "moder": 163, "sought": [163, 169], "push": [163, 164, 172], "stress": 163, "rare": 163, "spent": 163, "early_stop": [163, 183], "team": [164, 171, 172, 199, 422], "neurostar": [164, 171, 172], "forum": 164, "weekli": [164, 171], "hour": [164, 171, 172, 282, 328], "wednesdai": [164, 422], "4pm": [164, 422], "5pm": [164, 422], "utc": [164, 422], "troubleshoot": 164, "appreci": [164, 174], "topic": [164, 172], "burn": 164, "board": 164, "welcom": [164, 172, 422], "think": [164, 166, 176], "runnabl": 164, "ongo": 164, "comment": [164, 176], "opinion": 164, "approv": 164, "burden": 164, "member": [164, 172, 422], "expert": [164, 171], "eas": 164, "prototyp": 164, "beginn": [164, 171], "parsimoni": 164, "concern": [164, 169], "sustain": 164, "weigh": 164, "thoroughli": 164, "discourag": 164, "exhaust": [164, 171], "modif": [164, 166, 169], "ultim": [164, 258], "emerg": 164, "host": 164, "effort": [164, 172], "everyon": 164, "send": [164, 389, 391], "infrastructur": [164, 172], "gigabyt": 164, "deploy": 164, "xxxx": 164, "unrel": [164, 176], "numpydoc": 164, "versionad": [164, 172, 270], "versionchang": [164, 172, 298], "dev": [164, 172, 213, 315, 316, 395, 396], "coverag": [164, 422], "mock": 164, "atom": [164, 169], "convei": [164, 328], "smoothen": 164, "wip": 164, "draft": 164, "mrg": 164, "enh": 164, "adher": 164, "cff": 164, "gh": 164, "dimitripapadopoulo": 164, "affili": 164, "universit\u00e9": 164, "pari": 164, "saclai": 164, "gif": 164, "sur": 164, "yvett": 164, "franc": 164, "orcid": 164, "0000": 164, "0002": 164, "underscor": 164, "a_nice_funct": 164, "parent": 164, "init": [164, 389], "camelcas": 164, "statement": 164, "gradual": 164, "transit": 164, "formatt": 164, "2528": 164, "obj": [164, 194, 202, 390], "linter": 164, "autoformatt": 164, "hook": 164, "randomst": [164, 252, 253, 267, 276, 282, 389, 390], "my_numb": 164, "didn": 164, "pytest": [164, 422], "test_modul": 164, "he": 164, "plain": 164, "repo": [164, 172, 422], "fork": 164, "clone": 164, "your_usernam": 164, "virtual": [164, 422], "whichev": 164, "manag": [164, 172, 422], "venv": [164, 422], "conda": [164, 422], "your_branch": 164, "lint": 164, "path_to_edited_fil": 164, "command": [164, 171, 172, 422], "test_surf_plot": 164, "your_fork": 164, "restructuredtext": 164, "strict": 164, "window": [164, 267, 280, 402, 422], "_build": 164, "doctre": 164, "noplot": 164, "ci": [164, 172, 257, 259, 260], "filename_pattern": 164, "sphinx_gallery_conf": 164, "thorough": 164, "comprehens": [164, 171, 219, 243], "servic": 164, "temporarili": 164, "unavail": [164, 213], "frustrat": 164, "successfulli": 164, "_get_dataset_dir": 164, "_fetch_fil": 164, "server": [164, 224, 226], "fake": 164, "request_mock": 164, "fixtur": 164, "_test": 164, "sender": 164, "essenc": 165, "timecours": [165, 308], "convolv": [165, 269], "doubl": [165, 197, 198], "plug": [165, 176, 254, 258], "ascertain": 165, "spm_multimodal_fmri": [165, 232], "referenc": 165, "symbol": [165, 295], "fistlevelmodel": 165, "flag": [165, 308, 309], "observed_timeseri": 165, "magnet": [166, 169, 193, 219], "reson": [166, 169, 193, 219], "oxyhaemoglobin": [166, 169], "carri": [166, 169], "deoxyhaemoglobin": [166, 169], "deliv": [166, 169], "diamagnet": [166, 169], "paramagnet": [166, 169], "success": [166, 176], "mr": 166, "irrespect": [166, 376], "microarchitectur": 166, "regist": [166, 193], "montreal": [166, 169, 191], "institut": [166, 169, 191], "nipyp": 166, "action": [166, 219], "sensori": 166, "stimui": 166, "hypothes": [166, 169], "oxi": 166, "deoxi": 166, "haemoglobin": 166, "sluggish": 166, "plai": [166, 176], "remark": 166, "respond": 166, "alon": [166, 421], "colour": 166, "enter": 166, "conceptu": 166, "physic": [166, 329, 331, 332], "decid": 166, "dof": [166, 255], "_scan": 166, "_column": 166, "quantil": 166, "reject": [166, 169], "frequent": 166, "misconcept": 166, "frequentist": 166, "wikipedia": 166, "wiki": 166, "frequentist_infer": 166, "cumbersom": 166, "absenc": [166, 172, 395], "_voxel": 166, "danger": 166, "frac": [166, 251, 254, 258], "truli": 166, "surpass": 166, "proportion": 166, "compromis": [166, 309], "hochberg": [166, 266], "supra": 166, "rational": 166, "primer": [167, 423], "broader": 168, "morphologi": 169, "treatment": [169, 171], "contrari": [169, 306, 312, 313], "fundament": 169, "eeg": 169, "electroencephalographi": 169, "monitor": 169, "electr": 169, "echo": [169, 270], "planar": 169, "incorrect": 169, "unwarp": 169, "submit": [169, 172], "diamet": 169, "tradition": 169, "subcompon": 169, "meg": 169, "magnetoencephalographi": 169, "mni305": 169, "mutli": 169, "pe": 169, "signifi": [169, 245, 246, 247, 248], "soft": 169, "tpr": 169, "wellcom": 169, "depart": 169, "univers": [169, 171], "colleg": 169, "unlabel": 169, "emot": 169, "reaction": 169, "iq": [169, 245, 246, 247, 248], "diagnosi": [169, 171], "healthi": [169, 193], "outlier": [169, 228, 308, 309, 311, 314, 317], "magnitud": [169, 367], "benedikt": 169, "ehing": 169, "coher": [169, 171], "neurobiolog": 169, "subgroup": 169, "psychiatr": 169, "disord": 169, "toolbox": [170, 422], "quickstart": 170, "ecosystem": 170, "domain": [171, 253], "ok": 171, "walk": 171, "manner": [171, 370], "dive": 171, "oftentim": 171, "comer": 171, "montr\u00e9al": 171, "gentl": 171, "greatli": 171, "facilit": [171, 176], "visualis": 171, "besid": 171, "transfer": 171, "psycholog": 171, "knop": 171, "despit": 171, "connection": 171, "tracker": 172, "mislabel": 172, "seriou": 172, "dai": 172, "decent": 172, "quantifi": 172, "prioriti": [172, 174, 235], "urgent": 172, "month": 172, "medium": [172, 233, 386], "stall": 172, "kindli": 172, "repli": 172, "week": 172, "redirect": 172, "ping": 172, "hatch": 172, "vc": 172, "sdist": 172, "wheel": 172, "beforehand": 172, "currentmodul": 172, "whats_new": 172, "_latest": 172, "_vx": 172, "commit": 172, "master": [172, 201], "upstream": 172, "_version": 172, "workspac": 172, "dist": 172, "rm": 172, "twine": 172, "subfold": 172, "packagenam": 172, "packagevers": 172, "pythonvers": 172, "pythoncvers": 172, "whl": 172, "tab": [172, 176], "drag": 172, "dvipng": 172, "texliv": 172, "wget": 172, "mirror": [172, 189, 190, 191, 192, 193, 194, 195, 199, 202, 203, 205, 213, 214, 217, 218, 219, 222, 223, 228, 234], "ctan": 172, "dviwar": 172, "unzip": 172, "linux": 172, "pkg": 172, "bewar": [172, 174], "expans": [173, 423], "resiz": [173, 175, 245, 246, 247, 248, 250, 251, 280, 297, 300, 320, 322, 323, 325, 384, 386, 387, 388, 390, 400, 423], "t_map001": 174, "abbrevi": 174, "subject1": 174, "subject2": 174, "wildcard": [174, 175, 244, 295], "unix": [174, 244], "shell": [174, 244], "subject_01": 174, "subject_03": 174, "subject_": 174, "subj1": 174, "resourc": 174, "nilearn_shared_data": [174, 235], "get_head": 174, "memoryerror": 174, "decompress": 174, "uncach": 174, "comma": 174, "aren": 174, "chapter": [175, 176], "swap_img_hemispher": 175, "fslview": 175, "crop": [175, 176, 289], "consumpt": [175, 267, 280, 313, 316, 403], "3x3x3": [175, 224, 226, 392, 394], "diag": [175, 375], "compute_background_mask": [175, 245, 246, 247, 248, 252, 253, 314, 317, 390], "compute_multi_background_mask": [175, 314], "intersect_mask": 175, "restructur": 175, "recip": 175, "swiss": 176, "armi": 176, "knive": 176, "intend": [176, 260, 300, 301], "set_config": [176, 181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "print_changed_onli": 176, "fight": 176, "neuroanatomi": 176, "anisotrop": 176, "convers": [176, 191], "loss_pass": 176, "prespecifi": 176, "abrupt": 176, "transient": 176, "acquis": 176, "saniti": 176, "recast": 176, "brought": 176, "represenet": 176, "excerpt": 176, "disadvantag": 176, "nonpres": 176, "linearli": 176, "nor": 176, "5d": 176, "cov_estim": 181, "ledoitwolf": 181, "store_precis": 181, "discard_diagon": [181, 187], "shrunk": 181, "triangular": [181, 187, 188, 375], "cov_estimator_": 181, "whitening_": 181, "__init__": [181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 389, 390, 391, 392, 400], "connectivitymatrix": 181, "n_confound": [181, 291, 405], "vetor": 181, "get_metadata_rout": [181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "rout": [181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "metadatarequest": [181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "subobject": [181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "param": [181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "set_inverse_transform_request": [181, 252, 253, 312, 313, 315, 316, 318, 389, 390, 391, 392], "enable_metadata_rout": [181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "alia": [181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392, 421], "metadata_rout": [181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "set_output": [181, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "set_param": [181, 182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 311, 312, 313, 314, 315, 316, 317, 318, 389, 390, 391, 392], "set_transform_request": [181, 252, 253, 311, 312, 313, 314, 315, 316, 317, 318, 390, 392], "aggress": [182, 309], "ndarray": 182, "set_fit_request": [182, 183, 245, 246, 247, 248, 249, 250, 251, 252, 253, 267, 280, 312, 313, 314, 315, 316, 317, 390, 392], "n_refin": 183, "tol_cv": 183, "max_iter_cv": 183, "phase": 183, "cv_alphas_": 183, "probe_funct": 185, "precisions_init": 185, "dualiti": 185, "prematur": 185, "emp_cov": 185, "vec": 188, "encompass": 188, "cpac": 189, "band_pass_filt": 189, "global_signal_regress": 189, "quality_check": 189, "wrt": 189, "pcp": 189, "css": 189, "dparsf": 189, "niak": 189, "cc": 189, "controversi": 189, "1hz": 189, "alff": 189, "degree_binar": 189, "degree_weight": 189, "dual_regress": 189, "eigenvector_binar": 189, "eigenvector_weight": 189, "falff": 189, "func_mask": 189, "func_mean": 189, "lfcd": 189, "reho": 189, "rois_aal": 189, "rois_cc200": 189, "rois_cc400": 189, "rois_dosenbach160": 189, "rois_ez": 189, "rois_ho": 189, "rois_tt": 189, "vmhc": 189, "rater": 189, "sub_id": 189, "50001": 189, "50607": 189, "dx_group": 189, "dsm_iv_tr": 189, "asperg": 189, "ppd": 189, "NOS": 189, "age_at_scan": 189, "femal": 189, "handedness_categori": 189, "ambi": 189, "ambidextr": 189, "handedness_scor": 189, "resum": [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 210, 213, 214, 215, 219, 221, 222, 223, 228, 234], "ftp": 190, "htdoc": 190, "adhd200": 190, "adhd200_40sub_preprocess": 190, "tgz": 190, "spm12": 191, "med": 191, "consecut": [191, 193, 195, 201, 204, 205, 389], "5021": 191, "lingual_l": 191, "precentral_l": 191, "spm5": 191, "licenc": [191, 192, 194, 201, 205], "gin": 191, "cnr": 191, "mialab": 192, "rsn_indic": 192, "mrn": 192, "mstep": 193, "asym": 193, "asymmetr": [193, 214, 215], "homotop": 193, "ob": 193, "scale007": 193, "scale012": 193, "scale020": 193, "scale036": 193, "scale064": 193, "scale122": 193, "scale197": 193, "scale325": 193, "scale444": 193, "figshar": 193, "1285615": 193, "grp_mean": 194, "group_mean": 194, "scorr_mean": 194, "emphas": 194, "tcorr_mean": 194, "scorr_2level": 194, "tcorr_2level": 194, "creativ": 194, "commerci": 194, "alik": 194, "creativecommon": 194, "nc": 194, "sa": 194, "cluster_roi": 194, "rec": [195, 207, 208, 209, 270], "pqu9r": 196, "wjvd5": 196, "3vrct": 196, "9b76y": 196, "34792": 196, "atlas_nam": [197, 198], "cortl": 197, "thr50": [197, 198], "strictli": [197, 198], "probabilit": 200, "prepend": [200, 201, 306, 307], "nac": 200, "idx_nac": 200, "r2hvk": 200, "n_roi": 201, "yeo_network": 201, "base_url": 201, "7networks_lh_vis_3": 201, "thomasyeolab": 201, "cbig": 201, "stable_project": 201, "brain_parcel": 201, "schaefer2018_localglob": 201, "update_20190916_readm": 201, "md": 201, "e501": 201, "update_yeo2011_schaefer2018_labelnam": 201, "bandwidth": 202, "rsn20": 202, "bm20": 202, "bm10": 202, "rsn70": 202, "bm70": 202, "fmrib": 202, "ox": 202, "sulco": 203, "gryal": 203, "level_nam": 204, "ba": 204, "brodmann": 204, "thin_7": 205, "thin": 205, "colors_7": 205, "thin_17": 205, "colors_17": 205, "tick_7": 205, "tick_17": 205, "surfer": 205, "nmr": 205, "mgh": 205, "fswiki": 205, "corticalparcellation_yeo2011": 205, "downloaded_fil": [206, 216, 229], "ordered_region": [207, 209], "cerebellar": 209, "cinguloopercular": 209, "defaultmod": 209, "dorsalattent": 209, "frontopariet": 209, "medialtemporallob": 209, "parietomedi": 209, "reward": 209, "somatomotordors": 209, "somatomotorlater": 209, "ventralattent": 209, "cortexl": 209, "cortexr": 209, "thalamu": 209, "hippocampu": 209, "basalganglia": 209, "amygdala": 209, "cortexmid": 209, "age_group": 210, "realist": [210, 379, 381, 382, 388], "gender": [210, 228], "handed": 210, "ds000228": 210, "wjtyq": 210, "ucla": [211, 229], "consortium": [211, 229], "neuropsychiatr": [211, 229], "la5c": [211, 229], "urls_path": [211, 230], "fullbrain": 213, "pymvpa": 213, "datadb": 213, "mni152nlin2009csasym": [214, 215], "templateflow": [214, 215], "t2": [214, 368, 421], "t2_relax": 214, "relaxometri": 214, "proton": 214, "eye_mask": 214, "face_mask": 214, "bic": [214, 257], "mcgill": 214, "ca": 214, "servicesatlas": 214, "icbm152nlin2009": 214, "vfonov": 214, "mni_icbm152_nlin_sym_09a_nifti": 214, "tpl": 214, "mni152nlin2009csym": 214, "binary_clos": [215, 237, 240], "gm_mask_img": [215, 237], "particularli": [215, 392], "caller": [217, 218], "get_mask": 219, "get_anat": 219, "vhtf6": 219, "paardigm": 220, "multiple_spatial_regress": 221, "princip": [221, 309], "full_correl": 221, "return_raw_data": 222, "betamap": 222, "make_xi": 222, "153mb": 223, "brainlin": 223, "number_of_imag": 224, "_empty_filt": 224, "image_typ": 224, "is_threshold": 224, "not_mni": 224, "download_new": [224, 226], "kwarg_image_filt": 224, "until": [224, 328], "skim": 224, "basic_collection_term": 224, "empty_filt": 224, "image_metadata": 224, "basic_image_term": 224, "offlin": [224, 226, 423], "regardless": [224, 226, 250], "countvector": [224, 226], "info": [224, 226, 373, 379, 380, 381, 382], "remot": [224, 226], "concis": 224, "_col_filters_available_on_serv": 224, "owner": 224, "modify_d": 224, "auditory_calculation_vs_baselin": 225, "32980": 225, "10426": 227, "dartel_vers": 228, "dartel": 228, "data_usage_agr": 228, "gross": 228, "intracrani": 228, "socioeconom": 228, "dementia": 228, "demand": 228, "dedic": 228, "openli": 228, "usageagr": 228, "vm": 228, "dataset_vers": [229, 230], "ds000030_r1": [229, 230], "patch_openneuro_dataset": 229, "symlink": [229, 243], "data_nam": [231, 232], "ion": [231, 232], "trials_ses1": 232, "trials_ses2": 232, "mmface": 232, "2562": [233, 386], "10242": [233, 373, 386], "40962": [233, 386], "fsaverage7": [233, 386], "163842": [233, 373, 386], "area_left": 233, "area_right": 233, "flat_right": 233, "sphere_left": 233, "sphere_right": 233, "thick_left": 233, "thick_right": 233, "white_left": [233, 408], "white_right": 233, "func_right": 234, "gm_mni152_templ": 238, "mni152_templ": 239, "wm_mask_img": 240, "wm_mni152_templ": 241, "file_list": 243, "inclusion_filt": 244, "exclus": [244, 250, 251], "wrapper": [245, 246, 282], "1e4": [245, 246, 247, 248], "logisticregress": [245, 247], "inbuilt": [245, 246, 247, 248], "model_evalu": [245, 246, 247, 248], "scorer": [245, 246, 247, 248], "hertz": [245, 246, 247, 248, 250, 251, 285, 312, 313, 314, 315, 316, 317, 318, 390, 392, 403, 404], "rough": [245, 246, 247, 248, 250, 251, 252, 253, 267, 280, 286, 312, 313, 314, 315, 316, 317, 318, 390, 391, 392], "decision_funct": [245, 246, 247, 248, 250, 251], "learner": [245, 246, 247, 248, 250, 251], "ye": [245, 246, 247, 248], "leavepgroupsout": [245, 246, 247, 248], "classes_": [245, 246, 247, 248, 250, 251], "screening_percentile_": [245, 246, 247, 248, 250, 251], "n_class": [245, 246, 247, 248, 250, 251], "intercept_": [245, 246, 247, 248, 250, 251], "nclass": [245, 246, 247, 248], "cv_": [245, 246, 247, 248, 250, 251], "std_coef_": [245, 246, 247, 248], "std_coef_img_": [245, 246, 247, 248], "inner": [245, 246, 247, 248, 305, 408], "best_alpha": [245, 246, 247, 248], "scorer_": [245, 246, 247, 248], "misclassif": [245, 246, 247, 248, 250, 251], "n_outputs_": [245, 246, 247, 248], "dummy_output_": [245, 246, 247, 248], "class_prior": [245, 246, 247, 248], "dummyregressor": [245, 246, 247, 248], "confid": [245, 246, 247, 248, 250, 251, 257, 259, 260], "sample_weight": [245, 246, 247, 248, 250, 251], "set_score_request": [245, 246, 247, 248, 250, 251, 252, 253, 390], "neg_mean_squared_error": [246, 248], "trade": [247, 248], "cluster_percentil": [247, 248], "america": 249, "fit_intercept": [250, 251], "hybrid": [250, 251], "mutual": [250, 251], "alpha_min": [250, 251], "alpha_max": [250, 251], "premultipli": 250, "nearli": [250, 251], "debias": [250, 251], "all_coef_": [250, 251], "n_l1_ratio": [250, 251], "alpha_grids_": [250, 251], "best_model_params_": [250, 251], "n_paramet": [250, 251], "n_classes_": 250, "mask_": [250, 251], "memory_": [250, 251], "narrai": [250, 251], "w_": [250, 251], "ymean_": [250, 251], "xmean_": [250, 251], "xstd_": [250, 251], "supported_loss": [250, 251], "supported_penalti": [250, 251], "check_param": [250, 251], "sane": [250, 251], "hyperplan": [250, 251], "qi": [250, 251], "y_true": 251, "disregard": 251, "n_samples_fit": 251, "n_output": [251, 252, 253, 267, 280, 389, 391], "uniform_averag": 251, "multioutputregressor": 251, "do_cca": 252, "6mm": [252, 392], "restart": 252, "fit_param": [252, 253, 267, 280, 311, 314, 317, 389, 391], "x_new": [252, 253, 267, 280, 311, 314, 317, 389, 391], "n_features_new": [252, 253, 267, 280, 311, 314, 317, 389, 391], "reconstructed_img": [252, 253], "decompositionestim": [252, 253, 390], "squeez": [252, 253, 390], "reduction_ratio": 253, "batch": [253, 389], "lar": 253, "lars_path": 253, "rho": 254, "likelihoodmodel": [254, 257], "sigma": [254, 257, 258, 259, 260], "whitened_x": [254, 258], "logl": [254, 257, 258, 259, 260], "loglikelihood": [254, 258], "df_model": [254, 257, 258], "loglf": [254, 258], "ell": [254, 258], "hat": [254, 258], "sse": [254, 258, 259, 260], "10000000000": 255, "tini": 255, "dofmax": 255, "breakag": 255, "contrast_dim": 255, "def_dofmax": 255, "underflow": 255, "def_tini": 255, "h0": [255, 328], "df_num": [256, 257, 259, 260], "df_den": [256, 257, 259, 260, 261], "theta": [257, 259, 260], "aic": 257, "llf": 257, "wald": [257, 259, 260], "vcov": [257, 259, 260], "sd": [257, 259, 260, 261], "tcontrastresult": [257, 259, 260], "fcontrast": [257, 259, 260], "invcov": [257, 259, 260], "px": [257, 259, 260], "f_re": [257, 259, 260], "fcontrastresult": [257, 259, 260], "conf_int": [257, 259, 260], "col": [257, 259, 260], "standard_norm": [257, 259, 260], "stan": [257, 259, 260], "confidence_interv": [257, 259, 260], "whitened_design": 258, "calc_beta": 258, "moor": 258, "penros": 258, "pseudoinvers": 258, "normalized_cov_beta": 258, "df_residu": 258, "__init___": 258, "wlsmodel": 258, "armodel": 258, "whitened_i": 259, "whitened_residu": 259, "normalized_residu": [259, 260], "stanard": [259, 260], "d_i": [259, 260], "e_i": [259, 260], "ms_e": [259, 260], "presum": [262, 283], "dsicoveri": 262, "regression_result": 263, "con_val": 263, "con": 263, "precision_weight": 264, "fixed_fx_contrast_img": 264, "fixed_fx_variance_img": 264, "fixed_fx_t_img": 264, "z_val": 266, "min_onset": [267, 269, 270, 274], "fraction": [267, 270, 322, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 408], "plu": [267, 269, 274], "spm_time_deriv": [267, 269, 274], "idem": [267, 269, 274], "spm_dispersion_deriv": [267, 269, 274], "glover_hrf": [267, 269, 274], "glover_time_deriv": [267, 269, 274], "glover_dispersion_deriv": [267, 269, 274], "dirac": [267, 269, 274], "n_onset": [267, 274], "rid": [267, 280], "labels_": [267, 389, 391], "results_": 267, "array_lik": [267, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 374], "histogram": [267, 276, 322, 325, 372], "quantif": [267, 276], "contrast_def": [267, 280, 366, 402], "t_map": [267, 280], "n_col": [267, 280, 282, 307, 366], "eval": [267, 280, 282, 366], "report_dim": [267, 280, 402], "htmlreport": [267, 280, 313, 316, 392, 402], "standalon": [267, 280, 402], "ce": [267, 270, 280, 402], "autogener": [267, 280, 402], "subpeak": [267, 280, 401, 402], "report_text": [267, 280, 402], "voxelwis": [267, 280], "triplet": [268, 269, 318, 387], "n_frame": [268, 274], "n_regressor": [268, 276, 282, 328], "n_event": [268, 269, 274], "computed_regressor": 269, "n_reg": 269, "reg_nam": 269, "dataset_path": 270, "_space": 270, "acq": 270, "dir": [270, 305], "den": 270, "pa": 270, "dhrf": [271, 273, 277, 279], "n_add_reg": 274, "reg_i": 274, "frames_tim": 274, "map_nam": [280, 282], "effects_map_path": [280, 282], "liter": [280, 282], "second_level_stat_typ": 280, "output_imag": 280, "unsign": [282, 328], "neg_log10_vfwe_pvals_img": 282, "explanatori": [282, 328], "n_descriptor": [282, 328], "thresholded_map": 283, "prescrib": 283, "rigor": 283, "anatomical_imag": [284, 296], "brainmask": 284, "instant": [285, 404], "clean__": [285, 312, 313, 314, 315, 316, 317, 318], "butterworth__": [285, 312, 313, 314, 315, 316, 317, 318, 404], "clean__butterworth__": [285, 312, 313, 314, 315, 316, 317, 318], "ensure_ndim": 286, "img_copi": 288, "rtol": 289, "return_offset": 289, "Will": [289, 333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365], "touch": 289, "croppabl": 289, "toggl": 289, "x1_pre": 289, "x1_post": 289, "x2_pre": 289, "x2_post": 289, "xn_pre": 289, "xn_post": 289, "number_of_scan": 291, "joint_mni_imag": 292, "single_mni_imag": 292, "five_mni_imag": 292, "first_three_imag": 292, "imcal": 296, "fslmath": 296, "log_img": 296, "ref_niimg": 298, "copy_head": 298, "imposs": 299, "fill_valu": [300, 301], "force_resampl": [300, 301], "extrapol": 300, "boundingboxerror": 300, "crop_img": 300, "infinit": 300, "gracefulli": 300, "source_img": 301, "target_img": [301, 321, 324], "cllip": 301, "arr": 302, "normalis": 302, "filtered_img": 302, "synchron": 303, "sagit": 303, "caution": 303, "radio": 303, "main_path": 305, "file_tag": [305, 306], "file_typ": [305, 306], "modality_fold": 305, "sub_fold": 305, "se": 305, "ap": 305, "file_path": 306, "file_basenam": 306, "file_field": 306, "_tag": 306, "revis": 306, "parser": 306, "statmap": 307, "_stat": 307, "_statmap": 307, "_design": 307, "img_fil": [308, 309], "anat_combin": [308, 309], "n_compcor": [308, 309], "dtseri": [308, 309], "compli": 308, "non_steady_st": 308, "power2": 308, "quadrat": 308, "power2d": 308, "excess": 308, "temov": 308, "var": 308, "anat_separ": 308, "temporal_anat_combin": 308, "temporal_anat_separ": 308, "acompcor_combin": 308, "smootharomanonaggr_bold": [308, 309], "nifitmask": 308, "denois": 309, "srub": 309, "physiologi": 309, "suffer": 309, "aggres": 309, "suffix": 309, "mni152nlin6asym": 309, "niprep": 309, "region_sign": [311, 312, 313, 314, 315, 316, 317, 318, 390, 392, 396, 399], "imgs_list": [311, 312, 313, 314, 317], "ddof": [312, 313, 314, 315, 316, 317, 318, 404], "transform_img": [312, 313, 314], "unus": [312, 313, 314, 315, 316, 317, 318], "maps_img_": [313, 316], "html_report": [313, 316, 392], "voxel_sign": [313, 316, 318, 392], "multipca": 314, "affine_": [314, 317], "trim": [316, 396], "seeds_": 318, "session_seri": 319, "data_img": [320, 323], "border_s": [320, 323], "binary_eros": [320, 321, 322, 324, 325], "exclude_zero": [322, 323, 325], "reslic": [322, 325], "grp_mask": 326, "ndim": 327, "target_var": 328, "confounding_var": 328, "legaci": 328, "criterion": [328, 391], "amongst": [328, 421], "n_covar": 328, "worker": 328, "pval": 328, "score_orig_data": 328, "h0_max_t": 328, "h0_max_tfc": 328, "h0_max_siz": 328, "h0_max_mass": 328, "mpl": [329, 331, 332], "transform_to_2d": [329, 331, 332], "add_object_bound": [329, 331, 332], "draw_2d": [329, 331, 332], "data_bound": [329, 331, 332], "bounding_box": [329, 331, 332], "get_object_bound": [329, 331, 332], "draw_left_right": [329, 331, 332], "bg_color": [329, 331, 332], "draw_scale_bar": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "fontproperti": [329, 331, 332], "borderpad": [329, 331, 332], "size_vert": [329, 331, 332], "label_top": [329, 331, 332], "font": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 379, 381, 382], "anchoredoffsetbox": [329, 331, 332], "draw_posit": [329, 331, 332], "brain_color": [330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "frame_ax": [330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "subdivid": [330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "find_cut_coord": [330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "placehold": 330, "classmethod": [330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "init_with_figur": [330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "leave_spac": [330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "bgcolor": [330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "2g": [330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 368, 370, 371, 377, 378, 379, 381, 382], "cbar_vmin": [330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 379], "cbar_vmax": [330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 379], "contour_fil": [330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "add_edg": [330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 421], "n_marker": [330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "left_right": [330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "scale_loc": [330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "leak": [330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "dpi": [330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "inch": [330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "schemat": [332, 365, 370, 374], "glassbrainax": [333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355], "add_graph": [333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355], "linearsegmentedcolormap": [333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 363, 364, 365, 368, 375, 376, 377, 378, 384, 385, 386, 388], "edge_kwarg": [333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365], "node_kwarg": [333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365, 374], "undirect": [333, 334, 335, 336, 337, 338, 340, 343, 345, 347, 349, 351, 353, 355, 365], "draw_cross": [333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 363, 368, 371, 376, 377, 378, 385], "crossbar": [339, 341, 344, 346, 348, 350, 352, 354, 356], "cutax": [346, 348, 350, 352, 354, 356], "baseslic": 358, "img_length": 359, "return_label_nam": 360, "label_hemispher": 360, "n_label": 360, "labels_list": 360, "n_map": 361, "activation_threshold": 362, "tupleof": [363, 364, 365, 368, 370, 371, 374, 376, 377, 378], "ymin": [363, 364, 365, 368, 370, 371, 374, 376, 377, 378], "pronounc": [363, 376, 377, 378, 385], "get_zoom": 364, "matlotlib": 365, "nipy_spectr": 368, "model_ev": 369, "fig_kwarg": 369, "event_typ": 369, "stat_map_img": [370, 378, 385, 386], "symmetric_cbar": [370, 378, 382], "destin": [370, 371, 377, 378, 385], "noisier": [370, 371, 377, 378, 385], "ref_img": 372, "src_img": 372, "plot_hist": 372, "output_dir": 372, "superimpos": 372, "nifti_lik": 372, "surf_data": [373, 379, 381, 382, 386, 388, 406, 408], "montag": 373, "node_valu": 374, "listedcolormap": 374, "node_vmin": 374, "node_vmax": 374, "node_threshold": 374, "viridis_r": 374, "auto_fit": 375, "newli": 375, "room": 375, "linkag": 375, "sent": 375, "gist_rainbow": 376, "surf_map": [379, 388], "title_font_s": [379, 381, 382], "orig": [379, 380, 381, 382, 388, 407, 408], "sulc": [379, 382, 388, 406], "underneath": [379, 381, 382, 388], "greyscal": [379, 381, 382, 388], "sharp": [379, 421], "apply_along_axi": 379, "custom_funct": 379, "subplot_kw": [379, 380, 381, 382], "tab20": 380, "rgba": [380, 387], "agg": 383, "emit": 383, "colorbar_height": [384, 386, 388], "colorbar_fonts": [384, 386, 388], "title_fonts": [384, 386, 387, 388], "n_node": [384, 387], "connectomeview": [384, 387], "opac": 385, "th": 385, "opaqu": 385, "html_view": [385, 421], "plane": 385, "surfaceview": [386, 388], "hex": 387, "gnist_ncar": 388, "max_no_improv": 389, "smart": 389, "k_init": 389, "centroid": 389, "mini": 389, "inertia": 389, "reassign": 389, "sizes_": [389, 391], "x_red": [389, 391], "x_inv": [389, 391], "fit_predict": [389, 391], "connectivity_": 390, "valid_method": 390, "eccentr": [391, 397], "n_clusters_": 391, "27mm": [392, 394], "1350mm": [392, 394], "img_valu": 392, "connected_compon": [392, 394], "ly": 392, "min_siz": 393, "new_labels_img": 393, "new_label": 393, "extract_typ": 394, "_smooth_arrai": 394, "index_of_each_map": 394, "head_tpl": 400, "head_valu": 400, "html_document": 400, "htmldocument": 400, "get_ifram": 400, "get_standalon": 400, "temp_file_lifetim": 400, "temporari": 400, "remove_temp_fil": 400, "return_label_map": 401, "letter": 401, "label_map": 401, "destination_path": 402, "sampling_r": 403, "padtyp": 403, "odd": 403, "padlen": 403, "n_sourc": 403, "decai": 403, "ring": 403, "sharpen": 403, "filtfilt": 403, "inplac": 403, "filtered_sign": 403, "cleaned_sign": 404, "namedtupl": [407, 408], "neighbourhood": 408, "trilinear": 408, "x20": 408, "regularli": 408, "halfwai": 408, "inward": 408, "surface_mesh": 408, "neighbour": 408, "tour": 421, "canni": 421, "purple_green": 421, "pretty_brain": 421, "emb": 421, "surface_plot": 421, "cyan": 421, "orang": 421, "simexp": 421, "offici": 422, "miniconda": 422, "path_to_new_env": 422, "bat": 422, "prompt": 422, "jitsi": 422, "anyon": 422, "engag": 422, "grad": 423, "biologi": 423, "throughout": 423}, "objects": {"nilearn": [[177, 0, 0, "-", "connectome"], [178, 0, 0, "-", "datasets"], [179, 0, 0, "-", "decoding"], [180, 0, 0, "-", "decomposition"], [409, 0, 0, "-", "glm"], [410, 0, 0, "-", "image"], [412, 0, 0, "-", "interfaces"], [413, 0, 0, "-", "maskers"], [414, 0, 0, "-", "masking"], [415, 0, 0, "-", "mass_univariate"], [416, 0, 0, "-", "plotting"], [417, 0, 0, "-", "regions"], [418, 0, 0, "-", "reporting"], [419, 0, 0, "-", "signal"], [420, 0, 0, "-", "surface"]], "nilearn.connectome": [[181, 1, 1, "", "ConnectivityMeasure"], [182, 1, 1, "", "GroupSparseCovariance"], [183, 1, 1, "", "GroupSparseCovarianceCV"], [184, 3, 1, "", "cov_to_corr"], [185, 3, 1, "", "group_sparse_covariance"], [186, 3, 1, "", "prec_to_partial"], [187, 3, 1, "", "sym_matrix_to_vec"], [188, 3, 1, "", "vec_to_sym_matrix"]], "nilearn.connectome.ConnectivityMeasure": [[181, 2, 1, "", "__init__"], [181, 2, 1, "", "fit"], [181, 2, 1, "", "fit_transform"], [181, 2, 1, "", "get_metadata_routing"], [181, 2, 1, "", "get_params"], [181, 2, 1, "", "inverse_transform"], [181, 2, 1, "", "set_inverse_transform_request"], [181, 2, 1, "", "set_output"], [181, 2, 1, "", "set_params"], [181, 2, 1, "", "set_transform_request"], [181, 2, 1, "", "transform"]], "nilearn.connectome.GroupSparseCovariance": [[182, 2, 1, "", "__init__"], [182, 2, 1, "", "fit"], [182, 2, 1, "", "get_metadata_routing"], [182, 2, 1, "", "get_params"], [182, 2, 1, "", "set_fit_request"], [182, 2, 1, "", "set_params"]], "nilearn.connectome.GroupSparseCovarianceCV": [[183, 2, 1, "", "__init__"], [183, 2, 1, "", "fit"], [183, 2, 1, "", "get_metadata_routing"], [183, 2, 1, "", "get_params"], [183, 2, 1, "", "set_fit_request"], [183, 2, 1, "", "set_params"]], "nilearn.datasets": [[189, 3, 1, "", "fetch_abide_pcp"], [190, 3, 1, "", "fetch_adhd"], [191, 3, 1, "", "fetch_atlas_aal"], [192, 3, 1, "", "fetch_atlas_allen_2011"], [193, 3, 1, "", "fetch_atlas_basc_multiscale_2015"], [194, 3, 1, "", "fetch_atlas_craddock_2012"], [195, 3, 1, "", "fetch_atlas_destrieux_2009"], [196, 3, 1, "", "fetch_atlas_difumo"], [197, 3, 1, "", "fetch_atlas_harvard_oxford"], [198, 3, 1, "", "fetch_atlas_juelich"], [199, 3, 1, "", "fetch_atlas_msdl"], [200, 3, 1, "", "fetch_atlas_pauli_2017"], [201, 3, 1, "", "fetch_atlas_schaefer_2018"], [202, 3, 1, "", "fetch_atlas_smith_2009"], [203, 3, 1, "", "fetch_atlas_surf_destrieux"], [204, 3, 1, "", "fetch_atlas_talairach"], [205, 3, 1, "", "fetch_atlas_yeo_2011"], [206, 3, 1, "", "fetch_bids_langloc_dataset"], [207, 3, 1, "", "fetch_coords_dosenbach_2010"], [208, 3, 1, "", "fetch_coords_power_2011"], [209, 3, 1, "", "fetch_coords_seitzman_2018"], [210, 3, 1, "", "fetch_development_fmri"], [211, 3, 1, "", "fetch_ds000030_urls"], [212, 3, 1, "", "fetch_fiac_first_level"], [213, 3, 1, "", "fetch_haxby"], [214, 3, 1, "", "fetch_icbm152_2009"], [215, 3, 1, "", "fetch_icbm152_brain_gm_mask"], [216, 3, 1, "", "fetch_language_localizer_demo_dataset"], [217, 3, 1, "", "fetch_localizer_button_task"], [218, 3, 1, "", "fetch_localizer_calculation_task"], [219, 3, 1, "", "fetch_localizer_contrasts"], [220, 3, 1, "", "fetch_localizer_first_level"], [221, 3, 1, "", "fetch_megatrawls_netmats"], [222, 3, 1, "", "fetch_mixed_gambles"], [223, 3, 1, "", "fetch_miyawaki2008"], [224, 3, 1, "", "fetch_neurovault"], [225, 3, 1, "", "fetch_neurovault_auditory_computation_task"], [226, 3, 1, "", "fetch_neurovault_ids"], [227, 3, 1, "", "fetch_neurovault_motor_task"], [228, 3, 1, "", "fetch_oasis_vbm"], [229, 3, 1, "", "fetch_openneuro_dataset"], [230, 3, 1, "", "fetch_openneuro_dataset_index"], [231, 3, 1, "", "fetch_spm_auditory"], [232, 3, 1, "", "fetch_spm_multimodal_fmri"], [233, 3, 1, "", "fetch_surf_fsaverage"], [234, 3, 1, "", "fetch_surf_nki_enhanced"], [235, 3, 1, "", "get_data_dirs"], [236, 3, 1, "", "load_mni152_brain_mask"], [237, 3, 1, "", "load_mni152_gm_mask"], [238, 3, 1, "", "load_mni152_gm_template"], [239, 3, 1, "", "load_mni152_template"], [240, 3, 1, "", "load_mni152_wm_mask"], [241, 3, 1, "", "load_mni152_wm_template"], [242, 3, 1, "", "load_sample_motor_activation_image"], [243, 3, 1, "", "patch_openneuro_dataset"], [244, 3, 1, "", "select_from_index"]], "nilearn.decoding": [[245, 1, 1, "", "Decoder"], [246, 1, 1, "", "DecoderRegressor"], [247, 1, 1, "", "FREMClassifier"], [248, 1, 1, "", "FREMRegressor"], [249, 1, 1, "", "SearchLight"], [250, 1, 1, "", "SpaceNetClassifier"], [251, 1, 1, "", "SpaceNetRegressor"]], "nilearn.decoding.Decoder": [[245, 2, 1, "", "__init__"], [245, 2, 1, "", "decision_function"], [245, 2, 1, "", "fit"], [245, 2, 1, "", "get_metadata_routing"], [245, 2, 1, "", "get_params"], [245, 2, 1, "", "predict"], [245, 2, 1, "", "score"], [245, 2, 1, "", "set_fit_request"], [245, 2, 1, "", "set_params"], [245, 2, 1, "", "set_score_request"]], "nilearn.decoding.DecoderRegressor": [[246, 2, 1, "", "__init__"], [246, 2, 1, "", "decision_function"], [246, 2, 1, "", "fit"], [246, 2, 1, "", "get_metadata_routing"], [246, 2, 1, "", "get_params"], [246, 2, 1, "", "predict"], [246, 2, 1, "", "score"], [246, 2, 1, "", "set_fit_request"], [246, 2, 1, "", "set_params"], [246, 2, 1, "", "set_score_request"]], "nilearn.decoding.FREMClassifier": [[247, 2, 1, "", "__init__"], [247, 2, 1, "", "decision_function"], [247, 2, 1, "", "fit"], [247, 2, 1, "", "get_metadata_routing"], [247, 2, 1, "", "get_params"], [247, 2, 1, "", "predict"], [247, 2, 1, "", "score"], [247, 2, 1, "", "set_fit_request"], [247, 2, 1, "", "set_params"], [247, 2, 1, "", "set_score_request"]], "nilearn.decoding.FREMRegressor": [[248, 2, 1, "", "__init__"], [248, 2, 1, "", "decision_function"], [248, 2, 1, "", "fit"], [248, 2, 1, "", "get_metadata_routing"], [248, 2, 1, "", "get_params"], [248, 2, 1, "", "predict"], [248, 2, 1, "", "score"], [248, 2, 1, "", "set_fit_request"], [248, 2, 1, "", "set_params"], [248, 2, 1, "", "set_score_request"]], "nilearn.decoding.SearchLight": [[249, 2, 1, "", "__init__"], [249, 2, 1, "", "fit"], [249, 2, 1, "", "get_metadata_routing"], [249, 2, 1, "", "get_params"], [249, 2, 1, "", "set_fit_request"], [249, 2, 1, "", "set_params"]], "nilearn.decoding.SpaceNetClassifier": [[250, 4, 1, "", "SUPPORTED_LOSSES"], [250, 4, 1, "", "SUPPORTED_PENALTIES"], [250, 2, 1, "", "__init__"], [250, 2, 1, "", "check_params"], [250, 2, 1, "", "decision_function"], [250, 2, 1, "", "fit"], [250, 2, 1, "", "get_metadata_routing"], [250, 2, 1, "", "get_params"], [250, 2, 1, "", "predict"], [250, 2, 1, "", "score"], [250, 2, 1, "", "set_fit_request"], [250, 2, 1, "", "set_params"], [250, 2, 1, "", "set_score_request"]], "nilearn.decoding.SpaceNetRegressor": [[251, 4, 1, "", "SUPPORTED_LOSSES"], [251, 4, 1, "", "SUPPORTED_PENALTIES"], [251, 2, 1, "", "__init__"], [251, 2, 1, "", "check_params"], [251, 2, 1, "", "decision_function"], [251, 2, 1, "", "fit"], [251, 2, 1, "", "get_metadata_routing"], [251, 2, 1, "", "get_params"], [251, 2, 1, "", "predict"], [251, 2, 1, "", "score"], [251, 2, 1, "", "set_fit_request"], [251, 2, 1, "", "set_params"], [251, 2, 1, "", "set_score_request"]], "nilearn.decomposition": [[252, 1, 1, "", "CanICA"], [253, 1, 1, "", "DictLearning"]], "nilearn.decomposition.CanICA": [[252, 2, 1, "", "__init__"], [252, 2, 1, "", "fit"], [252, 2, 1, "", "fit_transform"], [252, 2, 1, "", "get_metadata_routing"], [252, 2, 1, "", "get_params"], [252, 2, 1, "", "inverse_transform"], [252, 2, 1, "", "score"], [252, 2, 1, "", "set_fit_request"], [252, 2, 1, "", "set_inverse_transform_request"], [252, 2, 1, "", "set_output"], [252, 2, 1, "", "set_params"], [252, 2, 1, "", "set_score_request"], [252, 2, 1, "", "set_transform_request"], [252, 2, 1, "", "transform"]], "nilearn.decomposition.DictLearning": [[253, 2, 1, "", "__init__"], [253, 2, 1, "", "fit"], [253, 2, 1, "", "fit_transform"], [253, 2, 1, "", "get_metadata_routing"], [253, 2, 1, "", "get_params"], [253, 2, 1, "", "inverse_transform"], [253, 2, 1, "", "score"], [253, 2, 1, "", "set_fit_request"], [253, 2, 1, "", "set_inverse_transform_request"], [253, 2, 1, "", "set_output"], [253, 2, 1, "", "set_params"], [253, 2, 1, "", "set_score_request"], [253, 2, 1, "", "set_transform_request"], [253, 2, 1, "", "transform"]], "nilearn.glm": [[254, 1, 1, "", "ARModel"], [255, 1, 1, "", "Contrast"], [256, 1, 1, "", "FContrastResults"], [257, 1, 1, "", "LikelihoodModelResults"], [258, 1, 1, "", "OLSModel"], [259, 1, 1, "", "RegressionResults"], [260, 1, 1, "", "SimpleRegressionResults"], [261, 1, 1, "", "TContrastResults"], [262, 3, 1, "", "cluster_level_inference"], [263, 3, 1, "", "compute_contrast"], [264, 3, 1, "", "compute_fixed_effects"], [265, 3, 1, "", "expression_to_contrast_vector"], [266, 3, 1, "", "fdr_threshold"], [409, 0, 0, "-", "first_level"], [409, 0, 0, "-", "second_level"], [283, 3, 1, "", "threshold_stats_img"]], "nilearn.glm.ARModel": [[254, 2, 1, "", "__init__"], [254, 2, 1, "", "fit"], [254, 2, 1, "", "initialize"], [254, 2, 1, "", "logL"], [254, 2, 1, "", "whiten"]], "nilearn.glm.Contrast": [[255, 2, 1, "", "__init__"], [255, 2, 1, "", "effect_size"], [255, 2, 1, "", "effect_variance"], [255, 2, 1, "", "one_minus_pvalue"], [255, 2, 1, "", "p_value"], [255, 2, 1, "", "stat"], [255, 2, 1, "", "z_score"]], "nilearn.glm.FContrastResults": [[256, 2, 1, "", "__init__"]], "nilearn.glm.LikelihoodModelResults": [[257, 2, 1, "", "Fcontrast"], [257, 2, 1, "", "Tcontrast"], [257, 2, 1, "", "__init__"], [257, 2, 1, "", "conf_int"], [257, 2, 1, "", "logL"], [257, 2, 1, "", "t"], [257, 2, 1, "", "vcov"]], "nilearn.glm.OLSModel": [[258, 2, 1, "", "__init__"], [258, 2, 1, "", "fit"], [258, 2, 1, "", "initialize"], [258, 2, 1, "", "logL"], [258, 2, 1, "", "whiten"]], "nilearn.glm.RegressionResults": [[259, 2, 1, "", "Fcontrast"], [259, 2, 1, "", "MSE"], [259, 2, 1, "", "SSE"], [259, 2, 1, "", "Tcontrast"], [259, 2, 1, "", "__init__"], [259, 2, 1, "", "conf_int"], [259, 2, 1, "", "logL"], [259, 2, 1, "", "normalized_residuals"], [259, 2, 1, "", "predicted"], [259, 2, 1, "", "r_square"], [259, 2, 1, "", "residuals"], [259, 2, 1, "", "t"], [259, 2, 1, "", "vcov"]], "nilearn.glm.SimpleRegressionResults": [[260, 2, 1, "", "Fcontrast"], [260, 2, 1, "", "Tcontrast"], [260, 2, 1, "", "__init__"], [260, 2, 1, "", "conf_int"], [260, 2, 1, "", "logL"], [260, 2, 1, "", "normalized_residuals"], [260, 2, 1, "", "predicted"], [260, 2, 1, "", "residuals"], [260, 2, 1, "", "t"], [260, 2, 1, "", "vcov"]], "nilearn.glm.TContrastResults": [[261, 2, 1, "", "__init__"]], "nilearn.glm.first_level": [[267, 1, 1, "", "FirstLevelModel"], [268, 3, 1, "", "check_design_matrix"], [269, 3, 1, "", "compute_regressor"], [270, 3, 1, "", "first_level_from_bids"], [271, 3, 1, "", "glover_dispersion_derivative"], [272, 3, 1, "", "glover_hrf"], [273, 3, 1, "", "glover_time_derivative"], [274, 3, 1, "", "make_first_level_design_matrix"], [275, 3, 1, "", "mean_scaling"], [276, 3, 1, "", "run_glm"], [277, 3, 1, "", "spm_dispersion_derivative"], [278, 3, 1, "", "spm_hrf"], [279, 3, 1, "", "spm_time_derivative"]], "nilearn.glm.first_level.FirstLevelModel": [[267, 2, 1, "", "__init__"], [267, 2, 1, "", "compute_contrast"], [267, 2, 1, "", "fit"], [267, 2, 1, "", "fit_transform"], [267, 2, 1, "", "generate_report"], [267, 2, 1, "", "get_metadata_routing"], [267, 2, 1, "", "get_params"], [267, 2, 1, "", "predicted"], [267, 2, 1, "", "r_square"], [267, 2, 1, "", "residuals"], [267, 5, 1, "", "scaling_axis"], [267, 2, 1, "", "set_fit_request"], [267, 2, 1, "", "set_output"], [267, 2, 1, "", "set_params"]], "nilearn.glm.second_level": [[280, 1, 1, "", "SecondLevelModel"], [281, 3, 1, "", "make_second_level_design_matrix"], [282, 3, 1, "", "non_parametric_inference"]], "nilearn.glm.second_level.SecondLevelModel": [[280, 2, 1, "", "__init__"], [280, 2, 1, "", "compute_contrast"], [280, 2, 1, "", "fit"], [280, 2, 1, "", "fit_transform"], [280, 2, 1, "", "generate_report"], [280, 2, 1, "", "get_metadata_routing"], [280, 2, 1, "", "get_params"], [280, 2, 1, "", "predicted"], [280, 2, 1, "", "r_square"], [280, 2, 1, "", "residuals"], [280, 2, 1, "", "set_fit_request"], [280, 2, 1, "", "set_output"], [280, 2, 1, "", "set_params"]], "nilearn.image": [[284, 3, 1, "", "binarize_img"], [285, 3, 1, "", "clean_img"], [286, 3, 1, "", "concat_imgs"], [287, 3, 1, "", "coord_transform"], [288, 3, 1, "", "copy_img"], [289, 3, 1, "", "crop_img"], [290, 3, 1, "", "get_data"], [291, 3, 1, "", "high_variance_confounds"], [292, 3, 1, "", "index_img"], [293, 3, 1, "", "iter_img"], [294, 3, 1, "", "largest_connected_component_img"], [295, 3, 1, "", "load_img"], [296, 3, 1, "", "math_img"], [297, 3, 1, "", "mean_img"], [298, 3, 1, "", "new_img_like"], [299, 3, 1, "", "reorder_img"], [300, 3, 1, "", "resample_img"], [301, 3, 1, "", "resample_to_img"], [302, 3, 1, "", "smooth_img"], [303, 3, 1, "", "swap_img_hemispheres"], [304, 3, 1, "", "threshold_img"]], "nilearn.interfaces": [[412, 0, 0, "-", "bids"], [412, 0, 0, "-", "fmriprep"], [412, 0, 0, "-", "fsl"]], "nilearn.interfaces.bids": [[305, 3, 1, "", "get_bids_files"], [306, 3, 1, "", "parse_bids_filename"], [307, 3, 1, "", "save_glm_to_bids"]], "nilearn.interfaces.fmriprep": [[308, 3, 1, "", "load_confounds"], [309, 3, 1, "", "load_confounds_strategy"]], "nilearn.interfaces.fsl": [[310, 3, 1, "", "get_design_from_fslmat"]], "nilearn.maskers": [[311, 1, 1, "", "BaseMasker"], [312, 1, 1, "", "MultiNiftiLabelsMasker"], [313, 1, 1, "", "MultiNiftiMapsMasker"], [314, 1, 1, "", "MultiNiftiMasker"], [315, 1, 1, "", "NiftiLabelsMasker"], [316, 1, 1, "", "NiftiMapsMasker"], [317, 1, 1, "", "NiftiMasker"], [318, 1, 1, "", "NiftiSpheresMasker"]], "nilearn.maskers.BaseMasker": [[311, 2, 1, "", "__init__"], [311, 2, 1, "", "fit_transform"], [311, 2, 1, "", "get_metadata_routing"], [311, 2, 1, "", "get_params"], [311, 2, 1, "", "inverse_transform"], [311, 2, 1, "", "set_output"], [311, 2, 1, "", "set_params"], [311, 2, 1, "", "set_transform_request"], [311, 2, 1, "", "transform"], [311, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[312, 2, 1, "", "__init__"], [312, 2, 1, "", "fit"], [312, 2, 1, "", "fit_transform"], [312, 2, 1, "", "generate_report"], [312, 2, 1, "", "get_metadata_routing"], [312, 2, 1, "", "get_params"], [312, 2, 1, "", "inverse_transform"], [312, 2, 1, "", "set_fit_request"], [312, 2, 1, "", "set_inverse_transform_request"], [312, 2, 1, "", "set_output"], [312, 2, 1, "", "set_params"], [312, 2, 1, "", "set_transform_request"], [312, 2, 1, "", "transform"], [312, 2, 1, "", "transform_imgs"], [312, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMapsMasker": [[313, 2, 1, "", "__init__"], [313, 2, 1, "", "fit"], [313, 2, 1, "", "fit_transform"], [313, 2, 1, "", "generate_report"], [313, 2, 1, "", "get_metadata_routing"], [313, 2, 1, "", "get_params"], [313, 2, 1, "", "inverse_transform"], [313, 2, 1, "", "set_fit_request"], [313, 2, 1, "", "set_inverse_transform_request"], [313, 2, 1, "", "set_output"], [313, 2, 1, "", "set_params"], [313, 2, 1, "", "set_transform_request"], [313, 2, 1, "", "transform"], [313, 2, 1, "", "transform_imgs"], [313, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMasker": [[314, 2, 1, "", "__init__"], [314, 2, 1, "", "fit"], [314, 2, 1, "", "fit_transform"], [314, 2, 1, "", "generate_report"], [314, 2, 1, "", "get_metadata_routing"], [314, 2, 1, "", "get_params"], [314, 2, 1, "", "inverse_transform"], [314, 2, 1, "", "set_fit_request"], [314, 2, 1, "", "set_output"], [314, 2, 1, "", "set_params"], [314, 2, 1, "", "set_transform_request"], [314, 2, 1, "", "transform"], [314, 2, 1, "", "transform_imgs"], [314, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiLabelsMasker": [[315, 2, 1, "", "__init__"], [315, 2, 1, "", "fit"], [315, 2, 1, "", "fit_transform"], [315, 2, 1, "", "generate_report"], [315, 2, 1, "", "get_metadata_routing"], [315, 2, 1, "", "get_params"], [315, 2, 1, "", "inverse_transform"], [315, 2, 1, "", "set_fit_request"], [315, 2, 1, "", "set_inverse_transform_request"], [315, 2, 1, "", "set_output"], [315, 2, 1, "", "set_params"], [315, 2, 1, "", "set_transform_request"], [315, 2, 1, "", "transform"], [315, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMapsMasker": [[316, 2, 1, "", "__init__"], [316, 2, 1, "", "fit"], [316, 2, 1, "", "fit_transform"], [316, 2, 1, "", "generate_report"], [316, 2, 1, "", "get_metadata_routing"], [316, 2, 1, "", "get_params"], [316, 2, 1, "", "inverse_transform"], [316, 2, 1, "", "set_fit_request"], [316, 2, 1, "", "set_inverse_transform_request"], [316, 2, 1, "", "set_output"], [316, 2, 1, "", "set_params"], [316, 2, 1, "", "set_transform_request"], [316, 2, 1, "", "transform"], [316, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMasker": [[317, 2, 1, "", "__init__"], [317, 2, 1, "", "fit"], [317, 2, 1, "", "fit_transform"], [317, 2, 1, "", "generate_report"], [317, 2, 1, "", "get_metadata_routing"], [317, 2, 1, "", "get_params"], [317, 2, 1, "", "inverse_transform"], [317, 2, 1, "", "set_fit_request"], [317, 2, 1, "", "set_output"], [317, 2, 1, "", "set_params"], [317, 2, 1, "", "set_transform_request"], [317, 2, 1, "", "transform"], [317, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiSpheresMasker": [[318, 2, 1, "", "__init__"], [318, 2, 1, "", "fit"], [318, 2, 1, "", "fit_transform"], [318, 2, 1, "", "get_metadata_routing"], [318, 2, 1, "", "get_params"], [318, 2, 1, "", "inverse_transform"], [318, 2, 1, "", "set_inverse_transform_request"], [318, 2, 1, "", "set_output"], [318, 2, 1, "", "set_params"], [318, 2, 1, "", "set_transform_request"], [318, 2, 1, "", "transform"], [318, 2, 1, "", "transform_single_imgs"]], "nilearn.masking": [[319, 3, 1, "", "apply_mask"], [320, 3, 1, "", "compute_background_mask"], [321, 3, 1, "", "compute_brain_mask"], [322, 3, 1, "", "compute_epi_mask"], [323, 3, 1, "", "compute_multi_background_mask"], [324, 3, 1, "", "compute_multi_brain_mask"], [325, 3, 1, "", "compute_multi_epi_mask"], [326, 3, 1, "", "intersect_masks"], [327, 3, 1, "", "unmask"]], "nilearn.mass_univariate": [[328, 3, 1, "", "permuted_ols"]], "nilearn.plotting": [[416, 0, 0, "-", "displays"], [359, 3, 1, "", "find_cut_slices"], [360, 3, 1, "", "find_parcellation_cut_coords"], [361, 3, 1, "", "find_probabilistic_atlas_cut_coords"], [362, 3, 1, "", "find_xyz_cut_coords"], [363, 3, 1, "", "plot_anat"], [364, 3, 1, "", "plot_carpet"], [365, 3, 1, "", "plot_connectome"], [366, 3, 1, "", "plot_contrast_matrix"], [367, 3, 1, "", "plot_design_matrix"], [368, 3, 1, "", "plot_epi"], [369, 3, 1, "", "plot_event"], [370, 3, 1, "", "plot_glass_brain"], [371, 3, 1, "", "plot_img"], [372, 3, 1, "", "plot_img_comparison"], [373, 3, 1, "", "plot_img_on_surf"], [374, 3, 1, "", "plot_markers"], [375, 3, 1, "", "plot_matrix"], [376, 3, 1, "", "plot_prob_atlas"], [377, 3, 1, "", "plot_roi"], [378, 3, 1, "", "plot_stat_map"], [379, 3, 1, "", "plot_surf"], [380, 3, 1, "", "plot_surf_contours"], [381, 3, 1, "", "plot_surf_roi"], [382, 3, 1, "", "plot_surf_stat_map"], [383, 3, 1, "", "show"], [384, 3, 1, "", "view_connectome"], [385, 3, 1, "", "view_img"], [386, 3, 1, "", "view_img_on_surf"], [387, 3, 1, "", "view_markers"], [388, 3, 1, "", "view_surf"]], "nilearn.plotting.displays": [[329, 1, 1, "", "BaseAxes"], [330, 1, 1, "", "BaseSlicer"], [331, 1, 1, "", "CutAxes"], [332, 1, 1, "", "GlassBrainAxes"], [333, 1, 1, "", "LProjector"], [334, 1, 1, "", "LRProjector"], [335, 1, 1, "", "LYRProjector"], [336, 1, 1, "", "LYRZProjector"], [337, 1, 1, "", "LZRProjector"], [338, 1, 1, "", "LZRYProjector"], [339, 1, 1, "", "MosaicSlicer"], [340, 1, 1, "", "OrthoProjector"], [341, 1, 1, "", "OrthoSlicer"], [342, 1, 1, "", "PlotlySurfaceFigure"], [343, 1, 1, "", "RProjector"], [344, 1, 1, "", "TiledSlicer"], [345, 1, 1, "", "XProjector"], [346, 1, 1, "", "XSlicer"], [347, 1, 1, "", "XZProjector"], [348, 1, 1, "", "XZSlicer"], [349, 1, 1, "", "YProjector"], [350, 1, 1, "", "YSlicer"], [351, 1, 1, "", "YXProjector"], [352, 1, 1, "", "YXSlicer"], [353, 1, 1, "", "YZProjector"], [354, 1, 1, "", "YZSlicer"], [355, 1, 1, "", "ZProjector"], [356, 1, 1, "", "ZSlicer"], [357, 3, 1, "", "get_projector"], [358, 3, 1, "", "get_slicer"]], "nilearn.plotting.displays.BaseAxes": [[329, 2, 1, "", "__init__"], [329, 2, 1, "", "add_object_bounds"], [329, 2, 1, "", "draw_2d"], [329, 2, 1, "", "draw_left_right"], [329, 2, 1, "", "draw_position"], [329, 2, 1, "", "draw_scale_bar"], [329, 2, 1, "", "get_object_bounds"], [329, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.BaseSlicer": [[330, 2, 1, "", "__init__"], [330, 2, 1, "", "add_contours"], [330, 2, 1, "", "add_edges"], [330, 2, 1, "", "add_markers"], [330, 2, 1, "", "add_overlay"], [330, 2, 1, "", "annotate"], [330, 5, 1, "", "black_bg"], [330, 5, 1, "", "brain_color"], [330, 2, 1, "", "close"], [330, 2, 1, "", "find_cut_coords"], [330, 2, 1, "", "init_with_figure"], [330, 2, 1, "", "savefig"], [330, 2, 1, "", "title"]], "nilearn.plotting.displays.CutAxes": [[331, 2, 1, "", "__init__"], [331, 2, 1, "", "add_object_bounds"], [331, 2, 1, "", "draw_2d"], [331, 2, 1, "", "draw_left_right"], [331, 2, 1, "", "draw_position"], [331, 2, 1, "", "draw_scale_bar"], [331, 2, 1, "", "get_object_bounds"], [331, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.GlassBrainAxes": [[332, 2, 1, "", "__init__"], [332, 2, 1, "", "add_object_bounds"], [332, 2, 1, "", "draw_2d"], [332, 2, 1, "", "draw_left_right"], [332, 2, 1, "", "draw_position"], [332, 2, 1, "", "draw_scale_bar"], [332, 2, 1, "", "get_object_bounds"], [332, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.LProjector": [[333, 2, 1, "", "__init__"], [333, 2, 1, "", "add_contours"], [333, 2, 1, "", "add_edges"], [333, 2, 1, "", "add_graph"], [333, 2, 1, "", "add_markers"], [333, 2, 1, "", "add_overlay"], [333, 2, 1, "", "annotate"], [333, 5, 1, "", "black_bg"], [333, 5, 1, "", "brain_color"], [333, 2, 1, "", "close"], [333, 2, 1, "", "draw_cross"], [333, 2, 1, "", "find_cut_coords"], [333, 2, 1, "", "init_with_figure"], [333, 2, 1, "", "savefig"], [333, 2, 1, "", "title"]], "nilearn.plotting.displays.LRProjector": [[334, 2, 1, "", "__init__"], [334, 2, 1, "", "add_contours"], [334, 2, 1, "", "add_edges"], [334, 2, 1, "", "add_graph"], [334, 2, 1, "", "add_markers"], [334, 2, 1, "", "add_overlay"], [334, 2, 1, "", "annotate"], [334, 5, 1, "", "black_bg"], [334, 5, 1, "", "brain_color"], [334, 2, 1, "", "close"], [334, 2, 1, "", "draw_cross"], [334, 2, 1, "", "find_cut_coords"], [334, 2, 1, "", "init_with_figure"], [334, 2, 1, "", "savefig"], [334, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRProjector": [[335, 2, 1, "", "__init__"], [335, 2, 1, "", "add_contours"], [335, 2, 1, "", "add_edges"], [335, 2, 1, "", "add_graph"], [335, 2, 1, "", "add_markers"], [335, 2, 1, "", "add_overlay"], [335, 2, 1, "", "annotate"], [335, 5, 1, "", "black_bg"], [335, 5, 1, "", "brain_color"], [335, 2, 1, "", "close"], [335, 2, 1, "", "draw_cross"], [335, 2, 1, "", "find_cut_coords"], [335, 2, 1, "", "init_with_figure"], [335, 2, 1, "", "savefig"], [335, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRZProjector": [[336, 2, 1, "", "__init__"], [336, 2, 1, "", "add_contours"], [336, 2, 1, "", "add_edges"], [336, 2, 1, "", "add_graph"], [336, 2, 1, "", "add_markers"], [336, 2, 1, "", "add_overlay"], [336, 2, 1, "", "annotate"], [336, 5, 1, "", "black_bg"], [336, 5, 1, "", "brain_color"], [336, 2, 1, "", "close"], [336, 2, 1, "", "draw_cross"], [336, 2, 1, "", "find_cut_coords"], [336, 2, 1, "", "init_with_figure"], [336, 2, 1, "", "savefig"], [336, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRProjector": [[337, 2, 1, "", "__init__"], [337, 2, 1, "", "add_contours"], [337, 2, 1, "", "add_edges"], [337, 2, 1, "", "add_graph"], [337, 2, 1, "", "add_markers"], [337, 2, 1, "", "add_overlay"], [337, 2, 1, "", "annotate"], [337, 5, 1, "", "black_bg"], [337, 5, 1, "", "brain_color"], [337, 2, 1, "", "close"], [337, 2, 1, "", "draw_cross"], [337, 2, 1, "", "find_cut_coords"], [337, 2, 1, "", "init_with_figure"], [337, 2, 1, "", "savefig"], [337, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRYProjector": [[338, 2, 1, "", "__init__"], [338, 2, 1, "", "add_contours"], [338, 2, 1, "", "add_edges"], [338, 2, 1, "", "add_graph"], [338, 2, 1, "", "add_markers"], [338, 2, 1, "", "add_overlay"], [338, 2, 1, "", "annotate"], [338, 5, 1, "", "black_bg"], [338, 5, 1, "", "brain_color"], [338, 2, 1, "", "close"], [338, 2, 1, "", "draw_cross"], [338, 2, 1, "", "find_cut_coords"], [338, 2, 1, "", "init_with_figure"], [338, 2, 1, "", "savefig"], [338, 2, 1, "", "title"]], "nilearn.plotting.displays.MosaicSlicer": [[339, 2, 1, "", "__init__"], [339, 2, 1, "", "add_contours"], [339, 2, 1, "", "add_edges"], [339, 2, 1, "", "add_markers"], [339, 2, 1, "", "add_overlay"], [339, 2, 1, "", "annotate"], [339, 5, 1, "", "black_bg"], [339, 5, 1, "", "brain_color"], [339, 2, 1, "", "close"], [339, 2, 1, "", "draw_cross"], [339, 2, 1, "", "find_cut_coords"], [339, 2, 1, "", "init_with_figure"], [339, 2, 1, "", "savefig"], [339, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoProjector": [[340, 2, 1, "", "__init__"], [340, 2, 1, "", "add_contours"], [340, 2, 1, "", "add_edges"], [340, 2, 1, "", "add_graph"], [340, 2, 1, "", "add_markers"], [340, 2, 1, "", "add_overlay"], [340, 2, 1, "", "annotate"], [340, 5, 1, "", "black_bg"], [340, 5, 1, "", "brain_color"], [340, 2, 1, "", "close"], [340, 2, 1, "", "draw_cross"], [340, 2, 1, "", "find_cut_coords"], [340, 2, 1, "", "init_with_figure"], [340, 2, 1, "", "savefig"], [340, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoSlicer": [[341, 2, 1, "", "__init__"], [341, 2, 1, "", "add_contours"], [341, 2, 1, "", "add_edges"], [341, 2, 1, "", "add_markers"], [341, 2, 1, "", "add_overlay"], [341, 2, 1, "", "annotate"], [341, 5, 1, "", "black_bg"], [341, 5, 1, "", "brain_color"], [341, 2, 1, "", "close"], [341, 2, 1, "", "draw_cross"], [341, 2, 1, "", "find_cut_coords"], [341, 2, 1, "", "init_with_figure"], [341, 2, 1, "", "savefig"], [341, 2, 1, "", "title"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[342, 2, 1, "", "__init__"], [342, 2, 1, "", "savefig"], [342, 2, 1, "", "show"]], "nilearn.plotting.displays.RProjector": [[343, 2, 1, "", "__init__"], [343, 2, 1, "", "add_contours"], [343, 2, 1, "", "add_edges"], [343, 2, 1, "", "add_graph"], [343, 2, 1, "", "add_markers"], [343, 2, 1, "", "add_overlay"], [343, 2, 1, "", "annotate"], [343, 5, 1, "", "black_bg"], [343, 5, 1, "", "brain_color"], [343, 2, 1, "", "close"], [343, 2, 1, "", "draw_cross"], [343, 2, 1, "", "find_cut_coords"], [343, 2, 1, "", "init_with_figure"], [343, 2, 1, "", "savefig"], [343, 2, 1, "", "title"]], "nilearn.plotting.displays.TiledSlicer": [[344, 2, 1, "", "__init__"], [344, 2, 1, "", "add_contours"], [344, 2, 1, "", "add_edges"], [344, 2, 1, "", "add_markers"], [344, 2, 1, "", "add_overlay"], [344, 2, 1, "", "annotate"], [344, 5, 1, "", "black_bg"], [344, 5, 1, "", "brain_color"], [344, 2, 1, "", "close"], [344, 2, 1, "", "draw_cross"], [344, 2, 1, "", "find_cut_coords"], [344, 2, 1, "", "init_with_figure"], [344, 2, 1, "", "savefig"], [344, 2, 1, "", "title"]], "nilearn.plotting.displays.XProjector": [[345, 2, 1, "", "__init__"], [345, 2, 1, "", "add_contours"], [345, 2, 1, "", "add_edges"], [345, 2, 1, "", "add_graph"], [345, 2, 1, "", "add_markers"], [345, 2, 1, "", "add_overlay"], [345, 2, 1, "", "annotate"], [345, 5, 1, "", "black_bg"], [345, 5, 1, "", "brain_color"], [345, 2, 1, "", "close"], [345, 2, 1, "", "draw_cross"], [345, 2, 1, "", "find_cut_coords"], [345, 2, 1, "", "init_with_figure"], [345, 2, 1, "", "savefig"], [345, 2, 1, "", "title"]], "nilearn.plotting.displays.XSlicer": [[346, 2, 1, "", "__init__"], [346, 2, 1, "", "add_contours"], [346, 2, 1, "", "add_edges"], [346, 2, 1, "", "add_markers"], [346, 2, 1, "", "add_overlay"], [346, 2, 1, "", "annotate"], [346, 5, 1, "", "black_bg"], [346, 5, 1, "", "brain_color"], [346, 2, 1, "", "close"], [346, 2, 1, "", "draw_cross"], [346, 2, 1, "", "find_cut_coords"], [346, 2, 1, "", "init_with_figure"], [346, 2, 1, "", "savefig"], [346, 2, 1, "", "title"]], "nilearn.plotting.displays.XZProjector": [[347, 2, 1, "", "__init__"], [347, 2, 1, "", "add_contours"], [347, 2, 1, "", "add_edges"], [347, 2, 1, "", "add_graph"], [347, 2, 1, "", "add_markers"], [347, 2, 1, "", "add_overlay"], [347, 2, 1, "", "annotate"], [347, 5, 1, "", "black_bg"], [347, 5, 1, "", "brain_color"], [347, 2, 1, "", "close"], [347, 2, 1, "", "draw_cross"], [347, 2, 1, "", "find_cut_coords"], [347, 2, 1, "", "init_with_figure"], [347, 2, 1, "", "savefig"], [347, 2, 1, "", "title"]], "nilearn.plotting.displays.XZSlicer": [[348, 2, 1, "", "__init__"], [348, 2, 1, "", "add_contours"], [348, 2, 1, "", "add_edges"], [348, 2, 1, "", "add_markers"], [348, 2, 1, "", "add_overlay"], [348, 2, 1, "", "annotate"], [348, 5, 1, "", "black_bg"], [348, 5, 1, "", "brain_color"], [348, 2, 1, "", "close"], [348, 2, 1, "", "draw_cross"], [348, 2, 1, "", "find_cut_coords"], [348, 2, 1, "", "init_with_figure"], [348, 2, 1, "", "savefig"], [348, 2, 1, "", "title"]], "nilearn.plotting.displays.YProjector": [[349, 2, 1, "", "__init__"], [349, 2, 1, "", "add_contours"], [349, 2, 1, "", "add_edges"], [349, 2, 1, "", "add_graph"], [349, 2, 1, "", "add_markers"], [349, 2, 1, "", "add_overlay"], [349, 2, 1, "", "annotate"], [349, 5, 1, "", "black_bg"], [349, 5, 1, "", "brain_color"], [349, 2, 1, "", "close"], [349, 2, 1, "", "draw_cross"], [349, 2, 1, "", "find_cut_coords"], [349, 2, 1, "", "init_with_figure"], [349, 2, 1, "", "savefig"], [349, 2, 1, "", "title"]], "nilearn.plotting.displays.YSlicer": [[350, 2, 1, "", "__init__"], [350, 2, 1, "", "add_contours"], [350, 2, 1, "", "add_edges"], [350, 2, 1, "", "add_markers"], [350, 2, 1, "", "add_overlay"], [350, 2, 1, "", "annotate"], [350, 5, 1, "", "black_bg"], [350, 5, 1, "", "brain_color"], [350, 2, 1, "", "close"], [350, 2, 1, "", "draw_cross"], [350, 2, 1, "", "find_cut_coords"], [350, 2, 1, "", "init_with_figure"], [350, 2, 1, "", "savefig"], [350, 2, 1, "", "title"]], "nilearn.plotting.displays.YXProjector": [[351, 2, 1, "", "__init__"], [351, 2, 1, "", "add_contours"], [351, 2, 1, "", "add_edges"], [351, 2, 1, "", "add_graph"], [351, 2, 1, "", "add_markers"], [351, 2, 1, "", "add_overlay"], [351, 2, 1, "", "annotate"], [351, 5, 1, "", "black_bg"], [351, 5, 1, "", "brain_color"], [351, 2, 1, "", "close"], [351, 2, 1, "", "draw_cross"], [351, 2, 1, "", "find_cut_coords"], [351, 2, 1, "", "init_with_figure"], [351, 2, 1, "", "savefig"], [351, 2, 1, "", "title"]], "nilearn.plotting.displays.YXSlicer": [[352, 2, 1, "", "__init__"], [352, 2, 1, "", "add_contours"], [352, 2, 1, "", "add_edges"], [352, 2, 1, "", "add_markers"], [352, 2, 1, "", "add_overlay"], [352, 2, 1, "", "annotate"], [352, 5, 1, "", "black_bg"], [352, 5, 1, "", "brain_color"], [352, 2, 1, "", "close"], [352, 2, 1, "", "draw_cross"], [352, 2, 1, "", "find_cut_coords"], [352, 2, 1, "", "init_with_figure"], [352, 2, 1, "", "savefig"], [352, 2, 1, "", "title"]], "nilearn.plotting.displays.YZProjector": [[353, 2, 1, "", "__init__"], [353, 2, 1, "", "add_contours"], [353, 2, 1, "", "add_edges"], [353, 2, 1, "", "add_graph"], [353, 2, 1, "", "add_markers"], [353, 2, 1, "", "add_overlay"], [353, 2, 1, "", "annotate"], [353, 5, 1, "", "black_bg"], [353, 5, 1, "", "brain_color"], [353, 2, 1, "", "close"], [353, 2, 1, "", "draw_cross"], [353, 2, 1, "", "find_cut_coords"], [353, 2, 1, "", "init_with_figure"], [353, 2, 1, "", "savefig"], [353, 2, 1, "", "title"]], "nilearn.plotting.displays.YZSlicer": [[354, 2, 1, "", "__init__"], [354, 2, 1, "", "add_contours"], [354, 2, 1, "", "add_edges"], [354, 2, 1, "", "add_markers"], [354, 2, 1, "", "add_overlay"], [354, 2, 1, "", "annotate"], [354, 5, 1, "", "black_bg"], [354, 5, 1, "", "brain_color"], [354, 2, 1, "", "close"], [354, 2, 1, "", "draw_cross"], [354, 2, 1, "", "find_cut_coords"], [354, 2, 1, "", "init_with_figure"], [354, 2, 1, "", "savefig"], [354, 2, 1, "", "title"]], "nilearn.plotting.displays.ZProjector": [[355, 2, 1, "", "__init__"], [355, 2, 1, "", "add_contours"], [355, 2, 1, "", "add_edges"], [355, 2, 1, "", "add_graph"], [355, 2, 1, "", "add_markers"], [355, 2, 1, "", "add_overlay"], [355, 2, 1, "", "annotate"], [355, 5, 1, "", "black_bg"], [355, 5, 1, "", "brain_color"], [355, 2, 1, "", "close"], [355, 2, 1, "", "draw_cross"], [355, 2, 1, "", "find_cut_coords"], [355, 2, 1, "", "init_with_figure"], [355, 2, 1, "", "savefig"], [355, 2, 1, "", "title"]], "nilearn.plotting.displays.ZSlicer": [[356, 2, 1, "", "__init__"], [356, 2, 1, "", "add_contours"], [356, 2, 1, "", "add_edges"], [356, 2, 1, "", "add_markers"], [356, 2, 1, "", "add_overlay"], [356, 2, 1, "", "annotate"], [356, 5, 1, "", "black_bg"], [356, 5, 1, "", "brain_color"], [356, 2, 1, "", "close"], [356, 2, 1, "", "draw_cross"], [356, 2, 1, "", "find_cut_coords"], [356, 2, 1, "", "init_with_figure"], [356, 2, 1, "", "savefig"], [356, 2, 1, "", "title"]], "nilearn.regions": [[389, 1, 1, "", "HierarchicalKMeans"], [390, 1, 1, "", "Parcellations"], [391, 1, 1, "", "ReNA"], [392, 1, 1, "", "RegionExtractor"], [393, 3, 1, "", "connected_label_regions"], [394, 3, 1, "", "connected_regions"], [395, 3, 1, "", "img_to_signals_labels"], [396, 3, 1, "", "img_to_signals_maps"], [397, 3, 1, "", "recursive_neighbor_agglomeration"], [398, 3, 1, "", "signals_to_img_labels"], [399, 3, 1, "", "signals_to_img_maps"]], "nilearn.regions.HierarchicalKMeans": [[389, 2, 1, "", "__init__"], [389, 2, 1, "", "fit"], [389, 2, 1, "", "fit_predict"], [389, 2, 1, "", "fit_transform"], [389, 2, 1, "", "get_metadata_routing"], [389, 2, 1, "", "get_params"], [389, 2, 1, "", "inverse_transform"], [389, 2, 1, "", "set_inverse_transform_request"], [389, 2, 1, "", "set_output"], [389, 2, 1, "", "set_params"], [389, 2, 1, "", "transform"]], "nilearn.regions.Parcellations": [[390, 4, 1, "", "VALID_METHODS"], [390, 2, 1, "", "__init__"], [390, 2, 1, "", "fit"], [390, 2, 1, "", "fit_transform"], [390, 2, 1, "", "get_metadata_routing"], [390, 2, 1, "", "get_params"], [390, 2, 1, "", "inverse_transform"], [390, 2, 1, "", "score"], [390, 2, 1, "", "set_fit_request"], [390, 2, 1, "", "set_inverse_transform_request"], [390, 2, 1, "", "set_output"], [390, 2, 1, "", "set_params"], [390, 2, 1, "", "set_score_request"], [390, 2, 1, "", "set_transform_request"], [390, 2, 1, "", "transform"]], "nilearn.regions.ReNA": [[391, 2, 1, "", "__init__"], [391, 2, 1, "", "fit"], [391, 2, 1, "", "fit_predict"], [391, 2, 1, "", "fit_transform"], [391, 2, 1, "", "get_metadata_routing"], [391, 2, 1, "", "get_params"], [391, 2, 1, "", "inverse_transform"], [391, 2, 1, "", "set_inverse_transform_request"], [391, 2, 1, "", "set_output"], [391, 2, 1, "", "set_params"], [391, 2, 1, "", "transform"]], "nilearn.regions.RegionExtractor": [[392, 2, 1, "", "__init__"], [392, 2, 1, "", "fit"], [392, 2, 1, "", "fit_transform"], [392, 2, 1, "", "generate_report"], [392, 2, 1, "", "get_metadata_routing"], [392, 2, 1, "", "get_params"], [392, 2, 1, "", "inverse_transform"], [392, 2, 1, "", "set_fit_request"], [392, 2, 1, "", "set_inverse_transform_request"], [392, 2, 1, "", "set_output"], [392, 2, 1, "", "set_params"], [392, 2, 1, "", "set_transform_request"], [392, 2, 1, "", "transform"], [392, 2, 1, "", "transform_single_imgs"]], "nilearn.reporting": [[400, 1, 1, "", "HTMLReport"], [401, 3, 1, "", "get_clusters_table"], [402, 3, 1, "", "make_glm_report"]], "nilearn.reporting.HTMLReport": [[400, 2, 1, "", "__init__"], [400, 2, 1, "", "get_iframe"], [400, 2, 1, "", "get_standalone"], [400, 2, 1, "", "open_in_browser"], [400, 2, 1, "", "remove_temp_file"], [400, 2, 1, "", "resize"], [400, 2, 1, "", "save_as_html"]], "nilearn.signal": [[403, 3, 1, "", "butterworth"], [404, 3, 1, "", "clean"], [405, 3, 1, "", "high_variance_confounds"]], "nilearn.surface": [[406, 3, 1, "", "load_surf_data"], [407, 3, 1, "", "load_surf_mesh"], [408, 3, 1, "", "vol_to_surf"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"]}, "titleterms": {"team": 0, "core": 0, "develop": [0, 48, 49, 50, 51, 58, 99, 422], "other": [0, 159], "contributor": [0, 122, 124, 127, 131, 134, 135, 136, 137, 138, 139, 149], "fund": 0, "cite": 0, "nilearn": [0, 4, 12, 13, 14, 15, 16, 29, 34, 155, 156, 164, 170, 171, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422], "scikit": [0, 35, 98, 113, 159, 176], "learn": [0, 35, 48, 49, 50, 98, 113, 154, 155, 159, 171, 176], "basic": [1, 4, 5, 10, 66, 110], "tutori": [1, 2, 3, 110], "3d": [2, 9, 22, 52, 54, 58, 88, 174, 421], "4d": [2, 21, 113, 174, 175], "niimg": [2, 174], "handl": 2, "visual": [2, 3, 8, 9, 10, 11, 15, 16, 19, 20, 21, 22, 25, 26, 29, 30, 31, 36, 37, 40, 41, 42, 43, 49, 52, 54, 58, 81, 84, 98, 107, 110, 113, 153, 154, 155, 156, 161, 176, 421], "download": [2, 3, 49, 98, 113, 114, 174], "dataset": [2, 6, 11, 15, 16, 17, 18, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 48, 49, 50, 51, 53, 58, 61, 62, 65, 75, 76, 79, 80, 99, 101, 105, 106, 108, 154, 158, 163, 164, 174, 178, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], "from": [2, 3, 11, 15, 16, 24, 26, 28, 33, 39, 40, 41, 48, 49, 50, 56, 58, 62, 89, 91, 94, 98, 100, 105, 106, 110, 113, 114, 151, 160, 174, 175, 176, 412, 413], "internet": [2, 174], "file": [2, 4, 15, 29, 56, 72, 174, 421], "one": [2, 50, 62, 79, 175], "volum": [2, 3, 9, 24, 25, 66, 83, 110, 173, 175, 176], "loop": [2, 3], "all": [2, 14, 156], "through": 2, "select": [2, 98, 114, 150, 156], "A": [3, 4, 44, 66, 151, 156, 166], "introduct": [3, 156, 166, 171], "fmri": [3, 6, 35, 48, 49, 51, 58, 64, 65, 67, 69, 76, 79, 80, 98, 99, 104, 150, 151, 156, 166, 167], "decod": [3, 28, 29, 30, 31, 32, 33, 34, 35, 37, 41, 43, 98, 100, 110, 156, 158, 159, 160, 162, 179, 245, 246, 247, 248, 249, 250, 251], "retriev": [3, 6, 10, 15, 16, 17, 19, 23, 29, 52, 54, 56, 58, 66, 98], "load": [3, 13, 14, 18, 22, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 47, 48, 51, 56, 75, 94, 98, 99, 113, 153, 156, 174, 176, 412], "data": [3, 4, 6, 9, 10, 11, 13, 14, 15, 16, 17, 22, 23, 25, 29, 30, 32, 33, 35, 39, 40, 41, 42, 44, 47, 48, 49, 52, 54, 55, 56, 57, 61, 64, 66, 67, 69, 71, 75, 89, 94, 98, 100, 103, 107, 113, 150, 153, 155, 156, 159, 161, 166, 174, 175, 176, 414, 416, 420], "haxbi": [3, 18, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 98, 156, 158], "studi": [3, 51, 98, 103, 107, 108, 158], "first": [3, 4, 15, 41, 60, 61, 62, 66, 69, 98, 100, 101, 108, 110, 156, 165, 171, 176], "featur": [3, 15, 98, 122, 125, 149, 156, 170], "extract": [3, 23, 25, 33, 47, 50, 51, 52, 53, 54, 55, 56, 58, 61, 70, 87, 88, 89, 91, 150, 151, 154, 155, 165, 175, 176, 413], "matrix": [3, 31, 35, 49, 52, 54, 56, 58, 78, 150, 151, 165], "behavior": [3, 29, 33, 174], "label": [3, 11, 56, 86, 172], "restrict": [3, 36, 37], "analysi": [3, 6, 32, 36, 42, 55, 60, 61, 62, 64, 65, 67, 69, 74, 75, 81, 97, 100, 101, 102, 104, 105, 106, 107, 108, 110, 156, 159, 161, 165, 166, 415], "cat": 3, "face": [3, 29, 30, 31, 36, 37, 102], "support": 3, "vector": 3, "machin": [3, 113, 171], "measur": [3, 47, 98, 156, 159], "predict": [3, 28, 29, 34, 35, 41, 42, 43, 70, 98, 99, 110, 156, 157, 160, 165], "score": [3, 6, 29, 34, 35, 36, 40, 161], "us": [3, 9, 15, 34, 35, 39, 48, 50, 51, 56, 87, 88, 91, 92, 98, 114, 153, 154, 156, 159, 167, 171, 174, 181, 183, 190, 192, 193, 195, 196, 197, 198, 199, 200, 202, 203, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 239, 242, 244, 245, 246, 247, 248, 249, 251, 252, 253, 255, 262, 263, 264, 267, 269, 270, 274, 276, 280, 281, 282, 283, 285, 286, 287, 290, 291, 292, 293, 295, 296, 297, 298, 300, 301, 302, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 327, 328, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 388, 390, 392, 393, 394, 400, 401, 402, 406, 407, 408, 421], "cross": [3, 29, 34, 35, 98, 103, 156, 159, 161, 163], "valid": [3, 29, 34, 35, 98, 154, 156, 159, 161, 163], "manual": [3, 94, 112, 175], "leav": 3, "out": 3, "implement": 3, "kfold": 3, "inspect": 3, "model": [3, 40, 42, 62, 64, 65, 66, 67, 68, 70, 76, 77, 79, 80, 100, 101, 155, 157, 158, 159, 165, 166, 168, 409], "weight": [3, 31, 98, 156], "turn": [3, 49], "nifti": [3, 55, 174, 175], "imag": [3, 4, 8, 9, 16, 17, 28, 69, 81, 83, 85, 90, 93, 95, 97, 103, 107, 110, 113, 114, 160, 174, 175, 176, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 410, 413, 421], "plot": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 24, 31, 32, 34, 35, 44, 47, 50, 55, 58, 66, 68, 70, 80, 107, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 416, 421], "svm": [3, 29, 98, 156, 159], "what": [3, 51, 99, 149, 164, 166, 171], "i": [3, 51, 99, 166, 171, 174, 176], "chanc": [3, 98, 156, 159], "level": [3, 60, 61, 62, 66, 69, 74, 76, 77, 78, 79, 80, 81, 98, 101, 108, 110, 150, 156, 159, 165, 168], "accuraci": [3, 156], "further": [3, 44, 98, 113, 159, 161], "read": [3, 161, 174], "exampl": [4, 33, 39, 44, 63, 64, 67, 68, 69, 77, 78, 92, 101, 108, 110, 114, 150, 151, 153, 155, 156, 161, 162, 170, 171, 175, 176, 181, 183, 190, 192, 193, 195, 196, 197, 198, 199, 200, 202, 203, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 239, 242, 244, 245, 246, 247, 248, 249, 251, 252, 253, 255, 262, 263, 264, 267, 269, 270, 274, 276, 280, 281, 282, 283, 285, 286, 287, 290, 291, 292, 293, 295, 296, 297, 298, 300, 301, 302, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 327, 328, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 388, 390, 392, 393, 394, 400, 401, 402, 406, 407, 408, 421], "manipul": [4, 83, 110, 173, 175, 420], "look": 4, "step": [4, 171, 176], "our": [4, 41], "simpl": [4, 32, 44, 62, 64, 78, 81, 92, 156], "smooth": [4, 66, 95, 175, 176], "save": [4, 15, 55, 62, 421], "result": [4, 9, 29, 32, 50, 53, 80, 81, 113, 153, 154, 155, 156], "numer": [5, 163], "python": [5, 174], "intro": 6, "glm": [6, 33, 60, 64, 67, 74, 110, 166, 167, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 409], "singl": [6, 15, 55, 71], "session": [6, 33, 64, 71], "subject": [6, 51, 53, 55, 62, 71, 79, 150, 155, 176], "The": [6, 35, 56, 66, 86, 156, 162, 176], "specifi": 6, "experiment": [6, 78], "paradigm": [6, 78, 107], "perform": [6, 55, 61, 69, 81, 98, 156, 158, 159], "detect": 6, "voxel": [6, 42, 43, 55, 75, 94, 161, 168, 175], "signific": [6, 70], "effect": [6, 67], "threshold": [6, 62, 168], "z": [6, 55, 107], "map": [6, 9, 12, 16, 17, 21, 30, 40, 42, 43, 47, 48, 55, 88, 94, 100, 103, 107, 114, 154, 156, 158, 162, 168, 178, 421], "an": [6, 9, 44, 58, 65, 72, 86, 90, 93, 95, 155, 156, 164, 166, 421], "f": [6, 36, 70], "test": [6, 70, 79, 80, 81, 94, 98, 164], "comput": [7, 27, 34, 35, 36, 37, 45, 50, 52, 53, 56, 58, 59, 73, 82, 89, 94, 96, 107, 109, 113, 150, 151, 154, 165, 175, 176], "time": [7, 11, 23, 25, 27, 45, 52, 54, 55, 58, 59, 61, 66, 70, 73, 82, 89, 96, 109, 151, 163, 165, 171, 176, 419], "brain": [8, 13, 14, 16, 19, 25, 28, 40, 42, 47, 48, 49, 50, 51, 56, 58, 83, 91, 97, 99, 110, 151, 153, 154, 155, 160, 173, 175, 413, 416, 421], "make": [9, 16, 32, 164, 172], "surfac": [9, 22, 23, 24, 37, 69, 108, 165, 406, 407, 408, 420, 421], "statist": [9, 16, 62, 81, 88, 94, 97, 107, 110, 114, 166, 168, 178, 421], "get": [9, 24, 55, 70, 103, 164], "cortic": [9, 22, 37, 421], "mesh": [9, 24, 421], "sampl": [9, 24, 68, 79, 80], "around": [9, 51, 58], "each": [9, 33], "node": 9, "interact": [9, 16, 150, 151, 416, 421], "plotli": 9, "comparison": [9, 158, 166, 168], "atla": [9, 10, 20, 21, 22, 47, 51, 52, 54, 56, 58, 86, 87, 99, 151, 164], "choos": [9, 100, 156, 157], "region": [9, 50, 51, 53, 54, 61, 86, 87, 88, 91, 94, 151, 153, 154, 176, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 417], "outlin": 9, "displai": [9, 14, 15, 52, 53, 54, 56, 58, 79, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 416, 421], "interest": [9, 94], "top": 9, "higher": [9, 66], "resolut": [9, 175, 176], "multipl": [9, 15, 150, 166, 168, 176], "view": [9, 15], "web": [9, 22, 52, 54, 58], "browser": [9, 22, 52, 54, 58], "impact": [9, 56], "paramet": [9, 34, 61, 63, 64, 66, 67, 68, 69, 86, 98, 100, 150, 157, 159, 176], "harvard": 10, "oxford": 10, "juelich": 10, "contour": [10, 14, 421], "global": [11, 56], "pattern": [11, 44], "carpet": 11, "fetch": [11, 20, 25, 26, 33, 47, 50, 53, 62, 76, 79, 80, 101, 107, 108, 154, 174, 178], "adhd": [11, 61], "deriv": [11, 48, 66, 178], "mask": [11, 16, 18, 25, 32, 36, 41, 66, 89, 94, 98, 103, 113, 156, 159, 161, 175, 176, 319, 320, 321, 322, 323, 324, 325, 326, 327, 414], "over": [11, 47], "base": [11, 23, 32, 37, 42, 43, 56, 69, 75, 100, 108, 154, 165, 168], "separ": [11, 86], "tissu": 11, "type": 11, "matplotlib": [12, 34], "colormap": [12, 421], "color": 12, "glass": [13, 14, 16], "whole": 13, "sagitt": [13, 15], "cut": [13, 15], "black": 13, "background": [13, 17, 89], "hemispher": [13, 14, 69], "option": 14, "demo": 14, "differ": [14, 30, 32, 34, 35, 44, 47, 86, 150, 157, 176, 421], "project": [14, 26, 69, 164, 172], "left": [14, 69], "right": [14, 15, 100, 157], "fill": [14, 421], "both": 14, "more": [15, 17, 159], "tool": [15, 16], "we": [15, 32, 35, 41, 164], "provid": [15, 16], "gener": [15, 16, 33, 44, 61, 62, 64, 72, 75, 77, 103, 111, 178, 409], "purpos": [15, 16], "coron": 15, "axial": 15, "given": [15, 175], "coordin": [15, 47, 58, 151], "number": [15, 163], "5": [15, 17, 127, 134, 135, 136, 149], "onli": [15, 50, 176], "two": [15, 64, 71, 80, 157], "slice": [15, 44, 421], "without": [15, 56, 98, 156, 159], "colorbar": 15, "side": 15, "chang": [15, 17, 66, 98, 120, 121, 122, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 142, 143, 144, 145, 146, 147, 149, 176], "now": [15, 35, 52, 54], "ar": [15, 66], "three": [15, 100], "2x2": 15, "fashion": 15, "along": 15, "row": 15, "column": 15, "anoth": [15, 175], "wai": 15, "limit": 15, "demonstr": 15, "variou": 15, "show": [15, 38, 100, 383], "how": [15, 164, 172, 176], "add_edg": 15, "add_contour": 15, "seed": [15, 23, 55, 58, 61, 176], "add_mark": 15, "annot": [15, 114], "function": [16, 19, 23, 41, 44, 46, 47, 50, 51, 54, 68, 99, 100, 110, 150, 151, 152, 154, 155, 159, 161, 175, 177, 178, 418, 421], "plot_stat_map": [16, 20, 378], "view_img": [16, 385], "plot_glass_brain": [16, 370], "anatom": 16, "plot_anat": [16, 363], "roi": [16, 32, 51, 94, 175], "here": [16, 41], "plot_roi": [16, 377], "epi": [16, 89], "plot_epi": [16, 368], "control": [17, 159, 176], "contrast": [17, 61, 62, 66, 69, 70, 165, 255], "when": [17, 174], "local": [17, 72, 105, 106], "enhanc": [17, 120, 121, 122, 124, 128, 129, 130, 131, 132, 134, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 164], "dim": 17, "0": [17, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149], "decreas": [17, 174], "1": [17, 66, 115, 116, 117, 118, 119, 121, 123, 127, 130, 132, 135, 138, 141, 143, 145, 149], "multiscal": 19, "parcel": [19, 47, 49, 56, 151, 153, 154, 390], "group": [19, 48, 51, 53, 99, 108, 150, 163], "probabilist": [20, 21, 47, 54, 151], "default": [20, 58, 61, 87], "mode": [20, 58, 61, 86, 87, 421], "msdl": [20, 51, 99], "add_overlai": 20, "object": [20, 29, 31, 34, 62, 101, 108, 155, 174, 176], "plot_prob_atla": [20, 376], "refer": [22, 23, 47, 49, 56, 58, 100, 102, 114, 150, 151, 153, 154, 155, 157, 158, 161, 162, 171, 411], "fetcher": [22, 164], "connect": [23, 46, 47, 51, 56, 57, 86, 99, 100, 110, 150, 152, 154, 177], "seri": [23, 25, 52, 54, 55, 58, 70, 89, 100, 151, 165, 176, 419], "calcul": [23, 70, 106], "technic": 24, "point": [24, 176], "illustr": 24, "scheme": 24, "build": [24, 33, 35, 40, 54, 94, 113, 151, 164, 172], "cylind": 24, "locat": 24, "which": [24, 153], "vol_to_surf": [24, 408], "would": 24, "draw": 24, "its": 24, "adjust": 24, "neuroimag": [25, 113, 157, 171, 174, 176], "appli": [25, 48, 113, 153, 175, 176], "correspond": [25, 52, 54], "megatrawl": 26, "network": [26, 50, 58, 61, 87, 155], "matric": [26, 53, 63, 100, 154, 176], "human": 26, "connectom": [26, 47, 50, 52, 53, 58, 150, 151, 177, 181, 182, 183, 184, 185, 186, 187, 188, 421], "anova": [29, 34, 98, 156, 159], "v": [29, 30, 31, 36, 102], "hous": [29, 30, 31, 36, 37, 102], "pipelin": [29, 33, 34, 112, 113, 158, 159, 176], "fit": [29, 31, 33, 34, 39, 43, 62, 64, 67, 70, 101, 108, 155, 165, 168], "obtain": [29, 62, 101, 108], "via": 29, "classifi": [30, 161], "train": 30, "frem": [31, 39, 158], "chair": 31, "recognit": [31, 36, 44, 102], "confus": [31, 35], "et": [32, 38, 39, 40, 41], "al": [32, 38, 39, 40, 41], "prepar": [32, 35, 36, 41, 61, 64, 67, 69, 81, 100, 156, 161, 172, 175, 176], "bar": [32, 421], "summar": 32, "after": [33, 89], "signal": [33, 51, 53, 54, 56, 58, 91, 151, 176, 403, 404, 405, 413, 419], "proper": 33, "event": [33, 72, 165], "structur": [33, 57, 162, 164], "instanti": 33, "run": [33, 41, 44, 66, 103, 159], "firstlevelmodel": [33, 62, 101, 108, 267], "report": [33, 61, 62, 64, 75, 164, 400, 401, 402, 418], "set": [34, 157, 159, 161, 164], "respons": [34, 37, 65, 66, 68], "valu": [34, 163], "screen": 34, "percentil": 34, "nest": 34, "multi": [35, 53, 155, 157], "class": [35, 157], "strategi": [35, 56, 156, 176], "barplot": 35, "searchlight": [36, 37, 161, 249], "bold": [37, 166], "stimuli": [38, 40, 41], "jimura": 39, "mix": [39, 158], "gambl": [39, 158], "experi": [39, 113, 156], "tv": 39, "l1": 39, "spacenet": [39, 43, 162], "encod": 40, "miyawaki": [40, 41], "2008": [40, 41], "estim": [40, 44, 57, 58, 61, 62, 64, 66, 67, 69, 76, 77, 79, 80, 98, 101, 156, 157, 159, 163], "recept": 40, "field": 40, "reconstruct": 41, "Then": 41, "defin": [41, 56, 63, 68, 100], "itself": 41, "let": 41, "u": 41, "quantifi": 41, "error": 41, "morphometri": [42, 43, 75, 168], "oasi": [42, 43, 75], "vbm": [42, 43, 75], "bio": 42, "marker": [42, 421], "ag": [42, 51, 75, 99], "mass": [42, 415], "univari": [42, 102, 105, 106, 161, 415], "preprocess": [42, 113, 178, 419], "qualiti": [42, 43, 94], "infer": 42, "massiv": [42, 102, 105, 106, 161], "space": [43, 71, 150], "net": 43, "prior": 43, "simul": [44, 57, 150, 159], "creat": [44, 63, 78, 175], "exercis": [44, 150, 151, 176], "go": [44, 98, 107, 113, 159], "compar": [47, 48, 49, 85, 100, 150, 161], "atlas": [47, 151, 178, 421], "yeo": [47, 86], "direct": [47, 150], "asymmetr": 47, "iter": [47, 163], "spatial": [48, 158, 162, 175], "ica": [48, 103, 155], "dictionari": [48, 50, 154, 155], "canica": [48, 155, 252], "cluster": [49, 70, 76, 153], "method": [49, 113], "ward": 49, "compress": [49, 153], "represent": [49, 153, 174], "kmean": 49, "hierarch": 49, "those": 49, "rena": [49, 391], "correl": [50, 51, 54, 55, 56, 58, 150, 151], "coeffici": 50, "specif": [50, 114, 175], "classif": [51, 99, 157], "children": 51, "partial": [51, 58], "variabl": 51, "kind": [51, 99], "most": [51, 70, 99], "power": [51, 99], "spars": [52, 53, 150, 163], "invers": [52, 53, 150, 176], "covari": [52, 53, 150, 163], "And": [52, 54], "graph": [52, 54, 58, 151], "precis": 53, "produc": 55, "fisher": 55, "transform": [55, 175, 176], "confound": [56, 66, 176], "remov": [56, 66, 176], "flexibl": 56, "fmriprep": [56, 308, 309, 412], "interfac": [56, 305, 306, 307, 308, 309, 310, 412], "motion": 56, "scrub": 56, "predefin": 56, "sphere": [58, 161], "dmn": 58, "within": 58, "averag": 58, "strength": 58, "dosenbach": 58, "": [58, 61, 98, 149, 156], "see": 58, "also": 58, "cours": 61, "complet": 62, "bid": [62, 101, 108, 305, 306, 307, 412], "openneuro": 62, "automat": [62, 101, 108, 113, 178], "argument": [62, 101, 108, 176], "output": [62, 114, 174], "disk": 62, "design": [63, 66, 77, 78, 100, 165, 176], "finit": 65, "impul": 65, "fir": 65, "understand": [66, 89, 174, 176], "drift": 66, "hemodynam": 66, "ad": [66, 421], "nois": 66, "ol": 66, "order": 66, "censor": 66, "conclus": 66, "explicit": 67, "fix": [67, 118, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149], "mri": 68, "stimulu": 68, "analys": [69, 75], "residu": [70, 165], "import": [70, 422], "modul": 70, "largest": 70, "actual": 70, "6": [70, 128, 137, 138, 139, 149], "distribut": [70, 172], "r": 70, "squar": 70, "nativ": 71, "tsv": 72, "neurospin": 72, "task": [72, 100, 105, 106], "second": [74, 76, 77, 78, 79, 80, 81, 101, 108, 110, 168], "true": 76, "posit": 76, "proport": 76, "t_map": 79, "unpair": 80, "pair": 80, "some": 81, "t": [81, 88], "affin": [84, 174, 175], "resampl": [84, 89, 93, 175, 176, 410], "mean": 85, "2": [85, 117, 122, 123, 124, 125, 126, 127, 128, 133, 136, 139, 146, 147, 149], "break": 86, "origin": 86, "relabel": 86, "min_siz": 86, "smith": 87, "niftimask": [89, 92, 176, 317], "raw": 89, "mni": 89, "templat": [89, 93, 178], "negat": 90, "math_img": [90, 296], "niftilabelsmask": [91, 176, 315], "find": [94, 161, 171], "thi": 94, "improv": 94, "advanc": [97, 98, 110, 112, 176], "tune": 98, "dummi": 98, "permut": 98, "lean": 98, "svc": 98, "discrimin": 98, "engin": 98, "beta": [100, 129, 134, 149, 156], "your": [100, 113, 164], "standard": 100, "lsa": 100, "aggreg": 100, "condit": 100, "lss": 100, "few": [100, 156], "trial": 100, "approach": [100, 150], "applic": [100, 171], "quick": 101, "saniti": 101, "check": [101, 422], "neurovault": [103, 107, 114], "term": 103, "reshap": 103, "compon": [103, 104, 155, 412], "figur": [103, 416], "multivari": [104, 180], "decomposit": [104, 180, 252, 253], "independ": 104, "motor": 105, "meta": 107, "stop": [107, 163], "success": 107, "minu": 107, "like": [107, 174], "protocol": 107, "combin": 107, "bibliographi": 111, "usag": [112, 176], "scale": [112, 421], "up": [112, 161, 164], "own": 113, "non": 113, "descript": [113, 163], "2d": [113, 175], "arrai": [113, 175], "unmask": [113, 176, 327], "inverse_transform": 113, "repositori": 114, "collect": 114, "filter": [114, 176], "neurosynth": 114, "changelog": [115, 116, 117, 118, 122, 123, 125, 149, 164], "3": [118, 125, 129, 130, 149], "4": [119, 126, 131, 132, 133, 149], "highlight": [119, 120, 129, 130, 131, 134, 137, 140, 141, 142, 143, 144, 146, 149], "10": [120, 121, 147, 149], "new": [120, 121, 122, 124, 125, 126, 127, 134, 135, 136, 137, 140, 141, 142, 143, 144, 146, 147, 149], "1rc1": [121, 149], "bug": [122, 125, 132, 149, 164], "api": [122, 149, 171, 411], "summari": [122, 149, 150, 151, 154, 155, 165, 168], "rc": [134, 149], "alpha": [134, 149, 163], "known": [135, 149], "issu": [135, 149, 172], "0rc": [137, 149], "0b0": [137, 149], "0a0": [137, 149], "7": [140, 141, 149], "8": [142, 143, 149], "9": [144, 145, 146, 149], "dev": [147, 149], "page": [150, 151, 154, 155, 165, 168], "full": [150, 151, 156], "rest": [150, 151, 152], "link": [150, 422], "total": 150, "tangent": 150, "maxprob": 151, "state": 152, "movi": [153, 154], "watch": [153, 154], "code": [153, 156, 158, 161, 164, 172, 175, 421], "better": [154, 162, 176], "relat": [155, 162], "interpret": 155, "altern": 155, "2001": 156, "definit": [156, 176], "made": 156, "easi": 156, "good": 156, "choic": 156, "put": 156, "togeth": 156, "dimens": 156, "reduct": 156, "final": 156, "script": 156, "regress": 157, "linear": [157, 409], "bag": 157, "sever": 157, "fast": 158, "ensembl": 158, "regular": 158, "robust": 158, "empir": 158, "increas": 158, "ani": 159, "mvpa": 160, "contain": 161, "inform": 161, "principl": [161, 163], "radiu": 161, "f_score": 161, "spm": 161, "stabil": 163, "execut": 163, "synthet": 163, "criteria": 163, "maximum": 163, "dualiti": 163, "gap": 163, "variat": 163, "norm": 163, "initi": 163, "modifi": 163, "criterion": 163, "algorithm": 163, "bound": 163, "grid": 163, "search": 163, "warm": 163, "restart": 163, "contribut": 164, "conduct": 164, "help": [164, 171], "discuss": 164, "idea": 164, "answer": 164, "question": 164, "review": 164, "pull": [164, 172], "request": [164, 172], "do": 164, "decid": 164, "goe": 164, "scope": 164, "who": 164, "decis": 164, "guidelin": 164, "pr": 164, "style": 164, "pre": 164, "commit": 164, "document": [164, 172], "environ": 164, "instal": [164, 422], "recommend": 164, "addit": 164, "case": [164, 175], "mainten": [164, 172], "hrf": 165, "primer": 166, "analyz": [167, 174], "correct": 168, "glossari": 169, "organ": 172, "close": 172, "polici": 172, "releas": [172, 422], "upload": 172, "them": 172, "pypi": 172, "deploi": 172, "post": 172, "input": 174, "name": 174, "match": [174, 175], "glob": 174, "user": [174, 423], "path": 174, "expans": 174, "open": [174, 176], "nilearn_data": 174, "where": 174, "store": 174, "format": 174, "shape": [174, 175], "memori": 174, "text": 174, "phenotyp": 174, "csv": 174, "panda": 174, "target": 175, "special": 175, "size": 175, "access": 175, "individu": 175, "oper": [175, 417], "masker": [176, 311, 312, 313, 314, 315, 316, 317, 318, 413], "concept": 176, "philosophi": 176, "custom": 176, "100": 176, "extra": 176, "cutoff": 176, "common": 176, "dtype": 176, "tempor": 176, "resiz": 176, "niftimapsmask": [176, 316], "multiniftimask": [176, 314], "multiniftilabelsmask": [176, 312], "multiniftimapsmask": [176, 313], "niftispheresmask": [176, 318], "connectivitymeasur": 181, "groupsparsecovari": 182, "groupsparsecovariancecv": 183, "cov_to_corr": 184, "group_sparse_covari": 185, "prec_to_parti": 186, "sym_matrix_to_vec": 187, "vec_to_sym_matrix": 188, "fetch_abide_pcp": 189, "fetch_adhd": 190, "fetch_atlas_a": 191, "fetch_atlas_allen_2011": 192, "fetch_atlas_basc_multiscale_2015": 193, "fetch_atlas_craddock_2012": 194, "fetch_atlas_destrieux_2009": 195, "fetch_atlas_difumo": 196, "fetch_atlas_harvard_oxford": 197, "fetch_atlas_juelich": 198, "fetch_atlas_msdl": 199, "fetch_atlas_pauli_2017": 200, "fetch_atlas_schaefer_2018": 201, "fetch_atlas_smith_2009": 202, "fetch_atlas_surf_destrieux": 203, "fetch_atlas_talairach": 204, "fetch_atlas_yeo_2011": 205, "fetch_bids_langloc_dataset": 206, "fetch_coords_dosenbach_2010": 207, "fetch_coords_power_2011": 208, "fetch_coords_seitzman_2018": 209, "fetch_development_fmri": 210, "fetch_ds000030_url": 211, "fetch_fiac_first_level": 212, "fetch_haxbi": 213, "fetch_icbm152_2009": 214, "fetch_icbm152_brain_gm_mask": 215, "fetch_language_localizer_demo_dataset": 216, "fetch_localizer_button_task": 217, "fetch_localizer_calculation_task": 218, "fetch_localizer_contrast": 219, "fetch_localizer_first_level": 220, "fetch_megatrawls_netmat": 221, "fetch_mixed_gambl": 222, "fetch_miyawaki2008": 223, "fetch_neurovault": 224, "fetch_neurovault_auditory_computation_task": 225, "fetch_neurovault_id": 226, "fetch_neurovault_motor_task": 227, "fetch_oasis_vbm": 228, "fetch_openneuro_dataset": 229, "fetch_openneuro_dataset_index": 230, "fetch_spm_auditori": 231, "fetch_spm_multimodal_fmri": 232, "fetch_surf_fsaverag": 233, "fetch_surf_nki_enhanc": 234, "get_data_dir": 235, "load_mni152_brain_mask": 236, "load_mni152_gm_mask": 237, "load_mni152_gm_templ": 238, "load_mni152_templ": 239, "load_mni152_wm_mask": 240, "load_mni152_wm_templ": 241, "load_sample_motor_activation_imag": 242, "patch_openneuro_dataset": 243, "select_from_index": 244, "decoderregressor": 246, "fremclassifi": 247, "fremregressor": 248, "spacenetclassifi": 250, "spacenetregressor": 251, "dictlearn": 253, "armodel": 254, "fcontrastresult": 256, "likelihoodmodelresult": 257, "olsmodel": 258, "regressionresult": 259, "simpleregressionresult": 260, "tcontrastresult": 261, "cluster_level_infer": 262, "compute_contrast": 263, "compute_fixed_effect": 264, "expression_to_contrast_vector": 265, "fdr_threshold": 266, "first_level": [267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 409], "check_design_matrix": 268, "compute_regressor": 269, "first_level_from_bid": 270, "glover_dispersion_deriv": 271, "glover_hrf": 272, "glover_time_deriv": 273, "make_first_level_design_matrix": 274, "mean_scal": 275, "run_glm": 276, "spm_dispersion_deriv": 277, "spm_hrf": 278, "spm_time_deriv": 279, "second_level": [280, 281, 282, 409], "secondlevelmodel": 280, "make_second_level_design_matrix": 281, "non_parametric_infer": 282, "threshold_stats_img": 283, "binarize_img": 284, "clean_img": 285, "concat_img": 286, "coord_transform": 287, "copy_img": 288, "crop_img": 289, "get_data": 290, "high_variance_confound": [291, 405], "index_img": 292, "iter_img": 293, "largest_connected_component_img": 294, "load_img": 295, "mean_img": 297, "new_img_lik": 298, "reorder_img": 299, "resample_img": 300, "resample_to_img": 301, "smooth_img": 302, "swap_img_hemispher": 303, "threshold_img": 304, "get_bids_fil": 305, "parse_bids_filenam": 306, "save_glm_to_bid": 307, "load_confound": 308, "load_confounds_strategi": 309, "fsl": [310, 412], "get_design_from_fslmat": 310, "basemask": 311, "apply_mask": 319, "compute_background_mask": 320, "compute_brain_mask": 321, "compute_epi_mask": 322, "compute_multi_background_mask": 323, "compute_multi_brain_mask": 324, "compute_multi_epi_mask": 325, "intersect_mask": 326, "mass_univari": [328, 415], "permuted_ol": 328, "baseax": 329, "baseslic": 330, "cutax": 331, "glassbrainax": 332, "lprojector": 333, "lrprojector": 334, "lyrprojector": 335, "lyrzprojector": 336, "lzrprojector": 337, "lzryprojector": 338, "mosaicslic": 339, "orthoprojector": 340, "orthoslic": 341, "plotlysurfacefigur": 342, "rprojector": 343, "tiledslic": 344, "xprojector": 345, "xslicer": 346, "xzprojector": 347, "xzslicer": 348, "yprojector": 349, "yslicer": 350, "yxprojector": 351, "yxslicer": 352, "yzprojector": 353, "yzslicer": 354, "zprojector": 355, "zslicer": 356, "get_projector": 357, "get_slic": 358, "find_cut_slic": 359, "find_parcellation_cut_coord": 360, "find_probabilistic_atlas_cut_coord": 361, "find_xyz_cut_coord": 362, "plot_carpet": 364, "plot_connectom": 365, "plot_contrast_matrix": 366, "plot_design_matrix": 367, "plot_ev": 369, "plot_img": 371, "plot_img_comparison": 372, "plot_img_on_surf": 373, "plot_mark": 374, "plot_matrix": 375, "plot_surf": 379, "plot_surf_contour": 380, "plot_surf_roi": 381, "plot_surf_stat_map": [382, 421], "view_connectom": 384, "view_img_on_surf": [386, 421], "view_mark": 387, "view_surf": [388, 421], "hierarchicalkmean": 389, "regionextractor": 392, "connected_label_region": 393, "connected_region": 394, "img_to_signals_label": 395, "img_to_signals_map": 396, "recursive_neighbor_agglomer": 397, "signals_to_img_label": 398, "signals_to_img_map": 399, "htmlreport": 400, "get_clusters_t": 401, "make_glm_report": 402, "butterworth": 403, "clean": 404, "load_surf_data": 406, "load_surf_mesh": 407, "process": 410, "util": [410, 414], "avail": 421, "overlai": 421, "edg": 421, "quickstart": 422, "latest": 422, "version": 422, "drop": 422, "hour": 422, "depend": 422, "guid": 423, "tabl": 423, "content": 423}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"Team": [[0, "team"]], "Core developers": [[0, "core-developers"]], "Other contributors": [[0, "other-contributors"]], "Funding": [[0, "funding"]], "Citing nilearn": [[0, "citing-nilearn"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Basic tutorials": [[1, "basic-tutorials"], [110, "basic-tutorials"]], "3D and 4D niimgs: handling and visualizing": [[2, "d-and-4d-niimgs-handling-and-visualizing"]], "Downloading tutorial datasets from Internet": [[2, "downloading-tutorial-datasets-from-internet"]], "Visualizing a 3D file": [[2, "visualizing-a-3d-file"]], "Visualizing one volume in a 4D file": [[2, "visualizing-one-volume-in-a-4d-file"]], "Looping on all volumes in a 4D file": [[2, "looping-on-all-volumes-in-a-4d-file"]], "Looping through selected volumes in a 4D file": [[2, "looping-through-selected-volumes-in-a-4d-file"]], "A introduction tutorial to fMRI decoding": [[3, "a-introduction-tutorial-to-fmri-decoding"]], "Retrieve and load the fMRI data from the Haxby study": [[3, "retrieve-and-load-the-fmri-data-from-the-haxby-study"], [98, "retrieve-and-load-the-fmri-data-from-the-haxby-study"]], "First download the data": [[3, "first-download-the-data"], [98, "first-download-the-data"]], "Visualizing the fmri volume": [[3, "visualizing-the-fmri-volume"]], "Feature extraction: from fMRI volumes to a data matrix": [[3, "feature-extraction-from-fmri-volumes-to-a-data-matrix"]], "Load the behavioral labels": [[3, "load-the-behavioral-labels"]], "Restrict the analysis to cats and faces": [[3, "restrict-the-analysis-to-cats-and-faces"]], "Decoding with Support Vector Machine": [[3, "decoding-with-support-vector-machine"]], "Measuring prediction scores using cross-validation": [[3, "measuring-prediction-scores-using-cross-validation"]], "Manually leaving out data": [[3, "manually-leaving-out-data"]], "Implementing a KFold loop": [[3, "implementing-a-kfold-loop"]], "Cross-validation with the decoder": [[3, "cross-validation-with-the-decoder"]], "Inspecting the model weights": [[3, "inspecting-the-model-weights"]], "Turning the weights into a nifti image": [[3, "turning-the-weights-into-a-nifti-image"]], "Plotting the SVM weights": [[3, "plotting-the-svm-weights"]], "What is the chance level accuracy?": [[3, "what-is-the-chance-level-accuracy"]], "Further reading": [[3, "further-reading"]], "Basic nilearn example: manipulating and looking at data": [[4, "basic-nilearn-example-manipulating-and-looking-at-data"]], "A first step: looking at our data": [[4, "a-first-step-looking-at-our-data"]], "Simple image manipulation: smoothing": [[4, "simple-image-manipulation-smoothing"]], "Saving results to a file": [[4, "saving-results-to-a-file"]], "Basic numerics and plotting with Python": [[5, "basic-numerics-and-plotting-with-python"]], "Intro to GLM Analysis: a single-session, single-subject fMRI dataset": [[6, "intro-to-glm-analysis-a-single-session-single-subject-fmri-dataset"]], "The data": [[6, "the-data"]], "Retrieving the data": [[6, "retrieving-the-data"], [23, "retrieving-the-data"], [66, "retrieving-the-data"]], "Specifying the experimental paradigm": [[6, "specifying-the-experimental-paradigm"]], "Performing the GLM analysis": [[6, "performing-the-glm-analysis"]], "Detecting voxels with significant effects": [[6, "detecting-voxels-with-significant-effects"]], "Plot thresholded z scores map": [[6, "plot-thresholded-z-scores-map"]], "Performing an F-test": [[6, "performing-an-f-test"]], "Computation times": [[7, "computation-times"], [27, "computation-times"], [45, "computation-times"], [59, "computation-times"], [73, "computation-times"], [82, "computation-times"], [96, "computation-times"], [109, "computation-times"]], "Visualization of brain images": [[8, "visualization-of-brain-images"], [110, "visualization-of-brain-images"]], "Making a surface plot of a 3D statistical map": [[9, "making-a-surface-plot-of-a-3d-statistical-map"]], "Get a statistical map": [[9, "get-a-statistical-map"]], "Get a cortical mesh": [[9, "get-a-cortical-mesh"]], "Sample the 3D data around each node of the mesh": [[9, "sample-the-3d-data-around-each-node-of-the-mesh"]], "Plot the result": [[9, "plot-the-result"]], "Interactive plotting with Plotly": [[9, "interactive-plotting-with-plotly"]], "Plot 3D image for comparison": [[9, "plot-3d-image-for-comparison"]], "Use an atlas and choose regions to outline": [[9, "use-an-atlas-and-choose-regions-to-outline"]], "Display outlines of the regions of interest on top of a statistical map": [[9, "display-outlines-of-the-regions-of-interest-on-top-of-a-statistical-map"]], "Plot with higher-resolution mesh": [[9, "plot-with-higher-resolution-mesh"]], "Plot multiple views of the 3D volume on a surface": [[9, "plot-multiple-views-of-the-3d-volume-on-a-surface"]], "3D visualization in a web browser": [[9, "d-visualization-in-a-web-browser"], [22, "d-visualization-in-a-web-browser"], [52, "d-visualization-in-a-web-browser"], [54, "d-visualization-in-a-web-browser"], [58, "d-visualization-in-a-web-browser"]], "Impact of plot parameters on visualization": [[9, "impact-of-plot-parameters-on-visualization"]], "Basic Atlas plotting": [[10, "basic-atlas-plotting"]], "Retrieving the atlas data": [[10, "retrieving-the-atlas-data"]], "Visualizing the Harvard-Oxford atlas": [[10, "visualizing-the-harvard-oxford-atlas"]], "Visualizing the Juelich atlas": [[10, "visualizing-the-juelich-atlas"]], "Visualizing the Harvard-Oxford atlas with contours": [[10, "visualizing-the-harvard-oxford-atlas-with-contours"]], "Visualizing the Juelich atlas with contours": [[10, "visualizing-the-juelich-atlas-with-contours"]], "Visualizing global patterns with a carpet plot": [[11, "visualizing-global-patterns-with-a-carpet-plot"]], "Fetching data from ADHD dataset": [[11, "fetching-data-from-adhd-dataset"]], "Deriving a mask": [[11, "deriving-a-mask"]], "Visualizing global patterns over time": [[11, "visualizing-global-patterns-over-time"]], "Deriving a label-based mask": [[11, "deriving-a-label-based-mask"]], "Visualizing global patterns, separated by tissue type": [[11, "visualizing-global-patterns-separated-by-tissue-type"]], "Matplotlib colormaps in Nilearn": [[12, "matplotlib-colormaps-in-nilearn"]], "Plot color maps": [[12, "plot-color-maps"]], "Plot matplotlib color maps": [[12, "plot-matplotlib-color-maps"]], "Glass brain plotting in nilearn": [[13, "glass-brain-plotting-in-nilearn"]], "Load data": [[13, "load-data"]], "Glass brain plotting: whole brain sagittal cuts": [[13, "glass-brain-plotting-whole-brain-sagittal-cuts"]], "Glass brain plotting: black background": [[13, "glass-brain-plotting-black-background"]], "Glass brain plotting: Hemispheric sagittal cuts": [[13, "glass-brain-plotting-hemispheric-sagittal-cuts"]], "Glass brain plotting in nilearn (all options)": [[14, "glass-brain-plotting-in-nilearn-all-options"]], "Load the data": [[14, "load-the-data"]], "Demo glass brain plotting": [[14, "demo-glass-brain-plotting"]], "Different projections for the left and right hemispheres": [[14, "different-projections-for-the-left-and-right-hemispheres"]], "Demo glass brain plotting with contours and with fillings": [[14, "demo-glass-brain-plotting-with-contours-and-with-fillings"]], "Display contour projections in both hemispheres": [[14, "display-contour-projections-in-both-hemispheres"]], "More plotting tools from nilearn": [[15, "more-plotting-tools-from-nilearn"]], "First, we retrieve data from nilearn provided (general-purpose) datasets": [[15, "first-we-retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Visualizing in - \u2018sagittal\u2019, \u2018coronal\u2019 and \u2018axial\u2019 with given coordinates": [[15, "visualizing-in-sagittal-coronal-and-axial-with-given-coordinates"]], "Visualizing in - single view \u2018axial\u2019 with number of cuts=5": [[15, "visualizing-in-single-view-axial-with-number-of-cuts-5"]], "Visualizing in - single view \u2018sagittal\u2019 with only two slices": [[15, "visualizing-in-single-view-sagittal-with-only-two-slices"]], "Visualizing in - \u2018coronal\u2019 view with single cut": [[15, "visualizing-in-coronal-view-with-single-cut"]], "Visualizing without a colorbar on the right side": [[15, "visualizing-without-a-colorbar-on-the-right-side"]], "Visualize in - two views \u2018sagittal\u2019 and \u2018axial\u2019 with given coordinates": [[15, "visualize-in-two-views-sagittal-and-axial-with-given-coordinates"]], "Changing the views to \u2018coronal\u2019, \u2018sagittal\u2019 views with coordinates": [[15, "changing-the-views-to-coronal-sagittal-views-with-coordinates"]], "Now, views are changed to \u2018coronal\u2019 and \u2018axial\u2019 views with coordinates": [[15, "now-views-are-changed-to-coronal-and-axial-views-with-coordinates"]], "Visualizing three views in 2x2 fashion": [[15, "visualizing-three-views-in-2x2-fashion"]], "Visualizing three views along multiple rows and columns": [[15, "visualizing-three-views-along-multiple-rows-and-columns"]], "Now, changing the number of slices along columns": [[15, "now-changing-the-number-of-slices-along-columns"]], "Now, another way of limiting the number of slices along rows and columns": [[15, "now-another-way-of-limiting-the-number-of-slices-along-rows-and-columns"]], "Demonstrating various display features": [[15, "demonstrating-various-display-features"]], "Showing how to use add_edges": [[15, "showing-how-to-use-add-edges"]], "How to use add_contours": [[15, "how-to-use-add-contours"]], "Plotting seeds using add_markers": [[15, "plotting-seeds-using-add-markers"]], "Annotating plots": [[15, "annotating-plots"]], "Saving plots to file": [[15, "saving-plots-to-file"]], "Plotting tools in nilearn": [[16, "plotting-tools-in-nilearn"]], "Retrieve data from nilearn provided (general-purpose) datasets": [[16, "retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Plotting statistical maps with function plot_stat_map": [[16, "plotting-statistical-maps-with-function-plot-stat-map"]], "Making interactive visualizations with function view_img": [[16, "making-interactive-visualizations-with-function-view-img"]], "Plotting statistical maps in a glass brain with function plot_glass_brain": [[16, "plotting-statistical-maps-in-a-glass-brain-with-function-plot-glass-brain"]], "Plotting anatomical images with function plot_anat": [[16, "plotting-anatomical-images-with-function-plot-anat"]], "Plotting ROIs (here the mask) with function plot_roi": [[16, "plotting-rois-here-the-mask-with-function-plot-roi"]], "Plotting EPI image with function plot_epi": [[16, "plotting-epi-image-with-function-plot-epi"]], "Controlling the contrast of the background when plotting": [[17, "controlling-the-contrast-of-the-background-when-plotting"]], "Retrieve the data: the localizer dataset with contrast maps": [[17, "retrieve-the-data-the-localizer-dataset-with-contrast-maps"]], "Plotting with enhancement of background image with dim=-.5": [[17, "plotting-with-enhancement-of-background-image-with-dim-5"]], "Plotting with no change of contrast in background image with dim=0": [[17, "plotting-with-no-change-of-contrast-in-background-image-with-dim-0"]], "Plotting with decrease of contrast in background image with dim=.5": [[17, "plotting-with-decrease-of-contrast-in-background-image-with-dim-5"]], "Plotting with more decrease in contrast with dim=1": [[17, "plotting-with-more-decrease-in-contrast-with-dim-1"]], "Plot Haxby masks": [[18, "plot-haxby-masks"]], "Load Haxby dataset": [[18, "load-haxby-dataset"], [36, "load-haxby-dataset"], [37, "load-haxby-dataset"]], "Plot the masks": [[18, "plot-the-masks"]], "Visualizing multiscale functional brain parcellations": [[19, "visualizing-multiscale-functional-brain-parcellations"]], "Retrieving multiscale group brain parcellations": [[19, "retrieving-multiscale-group-brain-parcellations"]], "Visualizing brain parcellations": [[19, "visualizing-brain-parcellations"]], "Visualizing a probabilistic atlas: the default mode in the MSDL atlas": [[20, "visualizing-a-probabilistic-atlas-the-default-mode-in-the-msdl-atlas"]], "Fetching probabilistic atlas - MSDL atlas": [[20, "fetching-probabilistic-atlas-msdl-atlas"]], "Visualizing a probabilistic atlas with plot_stat_map and add_overlay object": [[20, "visualizing-a-probabilistic-atlas-with-plot-stat-map-and-add-overlay-object"]], "Visualizing a probabilistic atlas with plot_prob_atlas": [[20, "visualizing-a-probabilistic-atlas-with-plot-prob-atlas"]], "Visualizing 4D probabilistic atlas maps": [[21, "visualizing-4d-probabilistic-atlas-maps"]], "Loading and plotting of a cortical surface atlas": [[22, "loading-and-plotting-of-a-cortical-surface-atlas"]], "References": [[22, "references"], [23, "references"], [49, "references"], [49, "id1"], [56, "references"], [58, "references"], [100, "references"], [102, "references"], [114, "references"], [150, null], [151, null], [151, null], [154, null], [155, null], [155, null], [157, "references"], [158, "references"], [161, "references"], [162, "references"]], "Data fetcher": [[22, "data-fetcher"]], "Visualization": [[22, "visualization"], [25, "visualization"], [26, "visualization"], [30, "visualization"], [36, "visualization"], [37, "visualization"], [42, "visualization"], [161, "visualization"]], "Seed-based connectivity on the surface": [[23, "seed-based-connectivity-on-the-surface"]], "Extracting the seed time series": [[23, "extracting-the-seed-time-series"]], "Calculating seed-based functional connectivity": [[23, "calculating-seed-based-functional-connectivity"]], "Technical point: Illustration of the volume to surface sampling schemes": [[24, "technical-point-illustration-of-the-volume-to-surface-sampling-schemes"]], "Build a mesh (of a cylinder)": [[24, "build-a-mesh-of-a-cylinder"]], "Get the locations from which vol_to_surf would draw its samples": [[24, "get-the-locations-from-which-vol-to-surf-would-draw-its-samples"]], "Plot the mesh and the sample locations": [[24, "plot-the-mesh-and-the-sample-locations"]], "Adjust the sample locations": [[24, "adjust-the-sample-locations"]], "NeuroImaging volumes visualization": [[25, "neuroimaging-volumes-visualization"]], "Fetch data": [[25, "fetch-data"]], "Extracting a brain mask": [[25, "extracting-a-brain-mask"], [175, "extracting-a-brain-mask"]], "Applying the mask to extract the corresponding time series": [[25, "applying-the-mask-to-extract-the-corresponding-time-series"]], "Visualizing Megatrawls Network Matrices from Human Connectome Project": [[26, "visualizing-megatrawls-network-matrices-from-human-connectome-project"]], "Fetching the Megatrawls Network matrices": [[26, "fetching-the-megatrawls-network-matrices"]], "Decoding and predicting from brain images": [[28, "decoding-and-predicting-from-brain-images"], [110, "decoding-and-predicting-from-brain-images"]], "Decoding with ANOVA + SVM: face vs house in the Haxby dataset": [[29, "decoding-with-anova-svm-face-vs-house-in-the-haxby-dataset"]], "Retrieve the files of the Haxby dataset": [[29, "retrieve-the-files-of-the-haxby-dataset"]], "Load the behavioral data": [[29, "load-the-behavioral-data"], [33, "load-the-behavioral-data"]], "ANOVA pipeline with nilearn.decoding.Decoder object": [[29, "anova-pipeline-with-nilearn-decoding-decoder-object"], [34, "anova-pipeline-with-nilearn-decoding-decoder-object"]], "Fit the decoder and predict": [[29, "fit-the-decoder-and-predict"]], "Obtain prediction scores via cross validation": [[29, "obtain-prediction-scores-via-cross-validation"]], "Visualize the results": [[29, "visualize-the-results"], [81, "visualize-the-results"]], "Different classifiers in decoding the Haxby dataset": [[30, "different-classifiers-in-decoding-the-haxby-dataset"]], "Loading the data": [[30, "loading-the-data"], [40, "loading-the-data"], [94, "loading-the-data"]], "Training the decoder": [[30, "training-the-decoder"]], "Visualizing the face vs house map": [[30, "visualizing-the-face-vs-house-map"]], "Decoding with FREM: face vs house vs chair object recognition": [[31, "decoding-with-frem-face-vs-house-vs-chair-object-recognition"]], "Load the Haxby dataset": [[31, "load-the-haxby-dataset"], [34, "load-the-haxby-dataset"]], "Fit FREM": [[31, "fit-frem"], [39, "fit-frem"]], "Plot confusion matrix": [[31, "plot-confusion-matrix"]], "Visualization of FREM weights": [[31, "visualization-of-frem-weights"]], "ROI-based decoding analysis in Haxby et al. dataset": [[32, "roi-based-decoding-analysis-in-haxby-et-al-dataset"]], "Load and prepare the data": [[32, "load-and-prepare-the-data"]], "Decoding on the different masks": [[32, "decoding-on-the-different-masks"]], "We make a simple bar plot to summarize the results": [[32, "we-make-a-simple-bar-plot-to-summarize-the-results"]], "Decoding of a dataset after GLM fit for signal extraction": [[33, "decoding-of-a-dataset-after-glm-fit-for-signal-extraction"]], "Fetch example Haxby dataset": [[33, "fetch-example-haxby-dataset"]], "Build a proper event structure for each session": [[33, "build-a-proper-event-structure-for-each-session"]], "Instantiate and run FirstLevelModel": [[33, "instantiate-and-run-firstlevelmodel"]], "Run the glm on data from each session": [[33, "run-the-glm-on-data-from-each-session"]], "Generating a report": [[33, "generating-a-report"], [61, "generating-a-report"], [62, "generating-a-report"], [64, "generating-a-report"], [75, "generating-a-report"]], "Build the decoding pipeline": [[33, "build-the-decoding-pipeline"]], "Setting a parameter by cross-validation": [[34, "setting-a-parameter-by-cross-validation"]], "Fit the Decoder and predict the responses": [[34, "fit-the-decoder-and-predict-the-responses"]], "Compute prediction scores with different values of screening percentile": [[34, "compute-prediction-scores-with-different-values-of-screening-percentile"]], "Nested cross-validation": [[34, "nested-cross-validation"]], "Plot the prediction scores using matplotlib": [[34, "plot-the-prediction-scores-using-matplotlib"]], "The haxby dataset: different multi-class strategies": [[35, "the-haxby-dataset-different-multi-class-strategies"]], "Load the Haxby data dataset": [[35, "load-the-haxby-data-dataset"]], "Prepare the fMRI data": [[35, "prepare-the-fmri-data"]], "Build the decoders, using scikit-learn": [[35, "build-the-decoders-using-scikit-learn"]], "Now we compute cross-validation scores": [[35, "now-we-compute-cross-validation-scores"]], "Plot barplots of the prediction scores": [[35, "plot-barplots-of-the-prediction-scores"]], "Plot a confusion matrix": [[35, "plot-a-confusion-matrix"]], "Searchlight analysis of face vs house recognition": [[36, "searchlight-analysis-of-face-vs-house-recognition"]], "Restrict to faces and houses": [[36, "restrict-to-faces-and-houses"], [37, "restrict-to-faces-and-houses"]], "Prepare masks": [[36, "prepare-masks"]], "Searchlight computation": [[36, "searchlight-computation"], [37, "searchlight-computation"]], "F-scores computation": [[36, "f-scores-computation"]], "Cortical surface-based searchlight decoding": [[37, "cortical-surface-based-searchlight-decoding"]], "Surface bold response": [[37, "surface-bold-response"]], "Show stimuli of Haxby et al. dataset": [[38, "show-stimuli-of-haxby-et-al-dataset"]], "FREM on Jimura et al \u201cmixed gambles\u201d dataset": [[39, "frem-on-jimura-et-al-mixed-gambles-dataset"]], "Load the data from the Jimura mixed-gamble experiment": [[39, "load-the-data-from-the-jimura-mixed-gamble-experiment"]], "Example use of TV-L1 SpaceNet": [[39, "example-use-of-tv-l1-spacenet"]], "Encoding models for visual stimuli from Miyawaki et al. 2008": [[40, "encoding-models-for-visual-stimuli-from-miyawaki-et-al-2008"]], "Building the encoding models": [[40, "building-the-encoding-models"]], "Mapping the encoding scores on the brain": [[40, "mapping-the-encoding-scores-on-the-brain"]], "Estimating receptive fields": [[40, "estimating-receptive-fields"]], "Reconstruction of visual stimuli from Miyawaki et al. 2008": [[41, "reconstruction-of-visual-stimuli-from-miyawaki-et-al-2008"]], "First we load the Miyawaki dataset": [[41, "first-we-load-the-miyawaki-dataset"]], "Then we prepare and mask the data": [[41, "then-we-prepare-and-mask-the-data"]], "We define our prediction function": [[41, "we-define-our-prediction-function"]], "Here we run the prediction: the decoding itself": [[41, "here-we-run-the-prediction-the-decoding-itself"]], "Let us quantify our prediction error": [[41, "let-us-quantify-our-prediction-error"]], "Voxel-Based Morphometry on Oasis dataset": [[42, "voxel-based-morphometry-on-oasis-dataset"]], "Predictive modeling analysis: VBM bio-markers of aging?": [[42, "predictive-modeling-analysis-vbm-bio-markers-of-aging"]], "Brain mapping with mass univariate": [[42, "brain-mapping-with-mass-univariate"]], "Load Oasis dataset": [[42, "load-oasis-dataset"], [75, "load-oasis-dataset"]], "Preprocess data": [[42, "preprocess-data"]], "Visualize the quality of predictions": [[42, "visualize-the-quality-of-predictions"]], "Inference with massively univariate model": [[42, "inference-with-massively-univariate-model"]], "Voxel-Based Morphometry on Oasis dataset with Space-Net prior": [[43, "voxel-based-morphometry-on-oasis-dataset-with-space-net-prior"]], "Load the Oasis VBM dataset": [[43, "load-the-oasis-vbm-dataset"]], "Fit the SpaceNet and predict with it": [[43, "fit-the-spacenet-and-predict-with-it"]], "Visualize the decoding maps and quality of predictions": [[43, "visualize-the-decoding-maps-and-quality-of-predictions"]], "Example of pattern recognition on simulated data": [[44, "example-of-pattern-recognition-on-simulated-data"]], "A function to generate data": [[44, "a-function-to-generate-data"]], "A simple function to plot slices": [[44, "a-simple-function-to-plot-slices"]], "Create data": [[44, "create-data"]], "Run different estimators": [[44, "run-different-estimators"]], "An exercise to go further": [[44, "an-exercise-to-go-further"]], "Functional connectivity": [[46, "functional-connectivity"], [110, "functional-connectivity"]], "Comparing connectomes on different reference atlases": [[47, "comparing-connectomes-on-different-reference-atlases"]], "Load atlases": [[47, "load-atlases"]], "Load functional data": [[47, "load-functional-data"]], "Extract coordinates on Yeo atlas - parcellations": [[47, "extract-coordinates-on-yeo-atlas-parcellations"]], "Plot a directed connectome - asymmetric connectivity measure": [[47, "plot-a-directed-connectome-asymmetric-connectivity-measure"]], "Load probabilistic atlases - extracting coordinates on brain maps": [[47, "load-probabilistic-atlases-extracting-coordinates-on-brain-maps"]], "Iterate over fetched atlases to extract coordinates - probabilistic": [[47, "iterate-over-fetched-atlases-to-extract-coordinates-probabilistic"]], "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning": [[48, "deriving-spatial-maps-from-group-fmri-data-using-ica-and-dictionary-learning"]], "Load brain development fmri dataset": [[48, "load-brain-development-fmri-dataset"]], "Apply CanICA on the data": [[48, "apply-canica-on-the-data"]], "Compare CanICA to dictionary learning": [[48, "compare-canica-to-dictionary-learning"]], "Clustering methods to learn a brain parcellation from fMRI": [[49, "clustering-methods-to-learn-a-brain-parcellation-from-fmri"]], "Download a brain development fmri dataset and turn it to a data matrix": [[49, "download-a-brain-development-fmri-dataset-and-turn-it-to-a-data-matrix"]], "Brain parcellations with Ward Clustering": [[49, "brain-parcellations-with-ward-clustering"]], "Visualize: Brain parcellations (Ward)": [[49, "visualize-brain-parcellations-ward"]], "Compressed representation of Ward clustering": [[49, "compressed-representation-of-ward-clustering"]], "Brain parcellations with KMeans Clustering": [[49, "brain-parcellations-with-kmeans-clustering"]], "Visualize: Brain parcellations (KMeans)": [[49, "visualize-brain-parcellations-kmeans"]], "Brain parcellations with Hierarchical KMeans Clustering": [[49, "brain-parcellations-with-hierarchical-kmeans-clustering"]], "Visualize: Brain parcellations (Hierarchical KMeans)": [[49, "visualize-brain-parcellations-hierarchical-kmeans"]], "Compare Hierarchical Kmeans clusters with those from Kmeans": [[49, "compare-hierarchical-kmeans-clusters-with-those-from-kmeans"]], "Brain parcellations with ReNA Clustering": [[49, "brain-parcellations-with-rena-clustering"]], "Visualize: Brain parcellations (ReNA)": [[49, "visualize-brain-parcellations-rena"]], "Compressed representation of ReNA clustering": [[49, "compressed-representation-of-rena-clustering"]], "Regions extraction using dictionary learning and functional connectomes": [[50, "regions-extraction-using-dictionary-learning-and-functional-connectomes"]], "Fetch brain development functional datasets": [[50, "fetch-brain-development-functional-datasets"]], "Extract functional networks with Dictionary learning": [[50, "extract-functional-networks-with-dictionary-learning"]], "Extract regions from networks": [[50, "extract-regions-from-networks"]], "Compute correlation coefficients": [[50, "compute-correlation-coefficients"]], "Plot resulting connectomes": [[50, "plot-resulting-connectomes"]], "Plot regions extracted for only one specific network": [[50, "plot-regions-extracted-for-only-one-specific-network"]], "Classification of age groups using functional connectivity": [[51, "classification-of-age-groups-using-functional-connectivity"]], "Load brain development fMRI dataset and MSDL atlas": [[51, "load-brain-development-fmri-dataset-and-msdl-atlas"], [99, "load-brain-development-fmri-dataset-and-msdl-atlas"]], "Region signals extraction": [[51, "region-signals-extraction"]], "ROI-to-ROI correlations of children": [[51, "roi-to-roi-correlations-of-children"]], "Studying partial correlations": [[51, "studying-partial-correlations"]], "Extract subjects variabilities around a group connectivity": [[51, "extract-subjects-variabilities-around-a-group-connectivity"]], "What kind of connectivity is most powerful for classification?": [[51, "what-kind-of-connectivity-is-most-powerful-for-classification"], [99, "what-kind-of-connectivity-is-most-powerful-for-classification"]], "Computing a connectome with sparse inverse covariance": [[52, "computing-a-connectome-with-sparse-inverse-covariance"]], "Retrieve the atlas and the data": [[52, "retrieve-the-atlas-and-the-data"], [54, "retrieve-the-atlas-and-the-data"], [56, "retrieve-the-atlas-and-the-data"]], "Extract time series": [[52, "extract-time-series"]], "Compute the sparse inverse covariance": [[52, "compute-the-sparse-inverse-covariance"]], "Display the connectome matrix": [[52, "display-the-connectome-matrix"]], "And now display the corresponding graph": [[52, "and-now-display-the-corresponding-graph"], [52, "id1"], [54, "and-now-display-the-corresponding-graph"]], "Display the sparse inverse covariance": [[52, "display-the-sparse-inverse-covariance"]], "Group Sparse inverse covariance for multi-subject connectome": [[53, "group-sparse-inverse-covariance-for-multi-subject-connectome"]], "Fetching datasets": [[53, "fetching-datasets"]], "Extracting region signals": [[53, "extracting-region-signals"]], "Computing group-sparse precision matrices": [[53, "computing-group-sparse-precision-matrices"]], "Displaying results": [[53, "displaying-results"]], "Extracting signals of a probabilistic atlas of functional regions": [[54, "extracting-signals-of-a-probabilistic-atlas-of-functional-regions"]], "Extract the time series": [[54, "extract-the-time-series"]], "Build and display a correlation matrix": [[54, "build-and-display-a-correlation-matrix"]], "Producing single subject maps of seed-to-voxel correlation": [[55, "producing-single-subject-maps-of-seed-to-voxel-correlation"]], "Getting the data": [[55, "getting-the-data"]], "Time series extraction": [[55, "time-series-extraction"]], "Performing the seed-to-voxel correlation analysis": [[55, "performing-the-seed-to-voxel-correlation-analysis"]], "Plotting the seed-to-voxel correlation map": [[55, "plotting-the-seed-to-voxel-correlation-map"]], "Fisher-z transformation and save nifti": [[55, "fisher-z-transformation-and-save-nifti"]], "Extracting signals from a brain parcellation": [[56, "extracting-signals-from-a-brain-parcellation"]], "Extract signals on a parcellation defined by labels": [[56, "extract-signals-on-a-parcellation-defined-by-labels"]], "Compute and display a correlation matrix": [[56, "compute-and-display-a-correlation-matrix"]], "Extract signals and compute a connectivity matrix without confounds removal": [[56, "extract-signals-and-compute-a-connectivity-matrix-without-confounds-removal"]], "Load confounds from file using a flexible strategy with fmriprep interface": [[56, "load-confounds-from-file-using-a-flexible-strategy-with-fmriprep-interface"]], "Motion-based scrubbing": [[56, "motion-based-scrubbing"]], "The impact of global signal removal": [[56, "the-impact-of-global-signal-removal"]], "Using predefined strategies": [[56, "using-predefined-strategies"]], "Connectivity structure estimation on simulated data": [[57, "connectivity-structure-estimation-on-simulated-data"]], "Extract signals on spheres and plot a connectome": [[58, "extract-signals-on-spheres-and-plot-a-connectome"]], "Retrieve the brain development fmri dataset": [[58, "retrieve-the-brain-development-fmri-dataset"]], "Coordinates of Default Mode Network": [[58, "coordinates-of-default-mode-network"]], "Extracts signal from sphere around DMN seeds": [[58, "extracts-signal-from-sphere-around-dmn-seeds"]], "Display time series": [[58, "display-time-series"]], "Compute partial correlation matrix": [[58, "compute-partial-correlation-matrix"]], "Display connectome": [[58, "display-connectome"]], "Extract signals on spheres from an atlas": [[58, "extract-signals-on-spheres-from-an-atlas"]], "Compute within spheres averaged time-series": [[58, "compute-within-spheres-averaged-time-series"]], "Estimate correlations": [[58, "estimate-correlations"]], "Plot matrix, graph, and strength": [[58, "plot-matrix-graph-and-strength"]], "Connectome extracted from Dosenbach\u2019s atlas": [[58, "connectome-extracted-from-dosenbach-s-atlas"]], "See Also": [[58, "see-also"]], "GLM: First level analysis": [[60, "glm-first-level-analysis"], [110, "glm-first-level-analysis"]], "Default Mode Network extraction of ADHD dataset": [[61, "default-mode-network-extraction-of-adhd-dataset"]], "Prepare data and analysis parameters": [[61, "prepare-data-and-analysis-parameters"], [64, "prepare-data-and-analysis-parameters"], [67, "prepare-data-and-analysis-parameters"], [69, "prepare-data-and-analysis-parameters"], [100, "prepare-data-and-analysis-parameters"]], "Extract the seed region\u2019s time course": [[61, "extract-the-seed-region-s-time-course"]], "Estimate contrasts": [[61, "estimate-contrasts"], [69, "estimate-contrasts"]], "Perform first level analysis": [[61, "perform-first-level-analysis"], [69, "perform-first-level-analysis"]], "First level analysis of a complete BIDS dataset from openneuro": [[62, "first-level-analysis-of-a-complete-bids-dataset-from-openneuro"]], "Fetch openneuro BIDS dataset": [[62, "fetch-openneuro-bids-dataset"]], "Obtain FirstLevelModel objects automatically and fit arguments": [[62, "obtain-firstlevelmodel-objects-automatically-and-fit-arguments"]], "First level model estimation (one subject)": [[62, "first-level-model-estimation-one-subject"]], "Simple statistical report of thresholded contrast": [[62, "simple-statistical-report-of-thresholded-contrast"]], "Saving model outputs to disk": [[62, "saving-model-outputs-to-disk"]], "Examples of design matrices": [[63, "examples-of-design-matrices"]], "Define parameters": [[63, "define-parameters"]], "Create design matrices": [[63, "create-design-matrices"]], "Simple example of two-session fMRI model fitting": [[64, "simple-example-of-two-session-fmri-model-fitting"]], "GLM estimation": [[64, "glm-estimation"], [67, "glm-estimation"]], "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model": [[65, "analysis-of-an-fmri-dataset-with-a-finite-impule-response-fir-model"]], "Understanding parameters of the first-level model": [[66, "understanding-parameters-of-the-first-level-model"]], "Running a basic model": [[66, "running-a-basic-model"]], "A first contrast estimation and plotting": [[66, "a-first-contrast-estimation-and-plotting"]], "Changing the drift model": [[66, "changing-the-drift-model"]], "Changing the hemodynamic response model": [[66, "changing-the-hemodynamic-response-model"]], "Adding a time derivative to the design": [[66, "adding-a-time-derivative-to-the-design"]], "The noise model: ar(1), ols, or higher order ar?": [[66, "the-noise-model-ar-1-ols-or-higher-order-ar"]], "Removing confounds": [[66, "removing-confounds"]], "Volume censoring": [[66, "volume-censoring"]], "Smoothing": [[66, "smoothing"], [176, "smoothing"]], "Masking": [[66, "masking"], [161, "masking"]], "Conclusion": [[66, "conclusion"]], "Example of explicit fixed effects fMRI model fitting": [[67, "example-of-explicit-fixed-effects-fmri-model-fitting"]], "Example of MRI response functions": [[68, "example-of-mri-response-functions"]], "Define stimulus parameters and response models": [[68, "define-stimulus-parameters-and-response-models"]], "Sample and plot response functions": [[68, "sample-and-plot-response-functions"]], "Example of surface-based first-level analysis": [[69, "example-of-surface-based-first-level-analysis"]], "Project the fMRI image to the surface": [[69, "project-the-fmri-image-to-the-surface"]], "Analysing the left hemisphere": [[69, "analysing-the-left-hemisphere"]], "Predicted time series and residuals": [[70, "predicted-time-series-and-residuals"]], "Import modules": [[70, "import-modules"]], "Fit model": [[70, "fit-model"]], "Calculate and plot contrast": [[70, "calculate-and-plot-contrast"]], "Extract the largest clusters": [[70, "extract-the-largest-clusters"]], "Plot predicted and actual time series for 6 most significant clusters": [[70, "plot-predicted-and-actual-time-series-for-6-most-significant-clusters"]], "Get residuals": [[70, "get-residuals"]], "Plot distribution of residuals": [[70, "plot-distribution-of-residuals"]], "Plot R-squared": [[70, "plot-r-squared"]], "Calculate and Plot F-test": [[70, "calculate-and-plot-f-test"]], "Single-subject data (two sessions) in native space": [[71, "single-subject-data-two-sessions-in-native-space"]], "Generate an events.tsv file for the NeuroSpin localizer task": [[72, "generate-an-events-tsv-file-for-the-neurospin-localizer-task"]], "GLM: Second level analysis": [[74, "glm-second-level-analysis"], [110, "glm-second-level-analysis"]], "Voxel-Based Morphometry on OASIS dataset": [[75, "voxel-based-morphometry-on-oasis-dataset"]], "VBM analysis of aging": [[75, "vbm-analysis-of-aging"]], "Analyse data": [[75, "analyse-data"]], "Second-level fMRI model: true positive proportion in clusters": [[76, "second-level-fmri-model-true-positive-proportion-in-clusters"]], "Fetch dataset": [[76, "fetch-dataset"], [79, "fetch-dataset"], [80, "fetch-dataset"]], "Estimate second level model": [[76, "estimate-second-level-model"], [77, "estimate-second-level-model"], [79, "estimate-second-level-model"]], "Example of generic design in second-level models": [[77, "example-of-generic-design-in-second-level-models"]], "Example of second level design matrix": [[78, "example-of-second-level-design-matrix"]], "Create a simple experimental paradigm": [[78, "create-a-simple-experimental-paradigm"]], "Create a second level design matrix": [[78, "create-a-second-level-design-matrix"]], "Second-level fMRI model: one sample test": [[79, "second-level-fmri-model-one-sample-test"]], "Display subject t_maps": [[79, "display-subject-t-maps"]], "Second-level fMRI model: two-sample test, unpaired and paired": [[80, "second-level-fmri-model-two-sample-test-unpaired-and-paired"]], "Estimate second level models": [[80, "estimate-second-level-models"]], "Plot the results": [[80, "plot-the-results"]], "Statistical testing of a second-level analysis": [[81, "statistical-testing-of-a-second-level-analysis"]], "Prepare some images for a simple t test": [[81, "prepare-some-images-for-a-simple-t-test"]], "Perform the second level analysis": [[81, "perform-the-second-level-analysis"]], "Manipulating brain image volumes": [[83, "manipulating-brain-image-volumes"], [110, "manipulating-brain-image-volumes"]], "Visualization of affine resamplings": [[84, "visualization-of-affine-resamplings"]], "Comparing the means of 2 images": [[85, "comparing-the-means-of-2-images"]], "Breaking an atlas of labels in separated regions": [[86, "breaking-an-atlas-of-labels-in-separated-regions"]], "The original Yeo atlas": [[86, "the-original-yeo-atlas"]], "Relabeling the atlas into separated regions": [[86, "relabeling-the-atlas-into-separated-regions"]], "Different connectivity modes": [[86, "different-connectivity-modes"]], "Parameter min_size": [[86, "parameter-min-size"]], "Regions Extraction of Default Mode Networks using Smith Atlas": [[87, "regions-extraction-of-default-mode-networks-using-smith-atlas"]], "Region Extraction using a t-statistical map (3D)": [[88, "region-extraction-using-a-t-statistical-map-3d"]], "Understanding NiftiMasker and mask computation": [[89, "understanding-niftimasker-and-mask-computation"]], "Computing a mask from the background": [[89, "computing-a-mask-from-the-background"]], "Computing a mask from raw EPI data": [[89, "computing-a-mask-from-raw-epi-data"]], "Computing the mask from the MNI template": [[89, "computing-the-mask-from-the-mni-template"]], "Compute and resample a mask": [[89, "compute-and-resample-a-mask"]], "After mask computation: extracting time series": [[89, "after-mask-computation-extracting-time-series"]], "Negating an image with math_img": [[90, "negating-an-image-with-math-img"]], "Extracting signals from brain regions using the NiftiLabelsMasker": [[91, "extracting-signals-from-brain-regions-using-the-niftilabelsmasker"]], "Simple example of NiftiMasker use": [[92, "simple-example-of-niftimasker-use"]], "Resample an image to a template": [[93, "resample-an-image-to-a-template"]], "Computing a Region of Interest (ROI) mask manually": [[94, "computing-a-region-of-interest-roi-mask-manually"]], "Build a statistical test to find voxels of interest": [[94, "build-a-statistical-test-to-find-voxels-of-interest"]], "Build a mask from this statistical map (Improving the quality of the mask)": [[94, "build-a-mask-from-this-statistical-map-improving-the-quality-of-the-mask"]], "Smoothing an image": [[95, "smoothing-an-image"]], "Advanced statistical analysis of brain images": [[97, "advanced-statistical-analysis-of-brain-images"], [110, "advanced-statistical-analysis-of-brain-images"]], "Advanced decoding using scikit learn": [[98, "advanced-decoding-using-scikit-learn"]], "Performing decoding with scikit-learn": [[98, "performing-decoding-with-scikit-learn"], [159, "performing-decoding-with-scikit-learn"]], "Masking the data": [[98, "masking-the-data"]], "Cross-validation with scikit-learn": [[98, "cross-validation-with-scikit-learn"], [159, "cross-validation-with-scikit-learn"]], "Tuning cross-validation parameters": [[98, "tuning-cross-validation-parameters"]], "Measuring the chance level": [[98, "measuring-the-chance-level"], [159, "measuring-the-chance-level"]], "Dummy estimator": [[98, "dummy-estimator"]], "Permutation test": [[98, "permutation-test"]], "Decoding without a mask: Anova-SVM in scikit-lean": [[98, "decoding-without-a-mask-anova-svm-in-scikit-lean"]], "Visualize the ANOVA + SVC\u2019s discriminating weights": [[98, "visualize-the-anova-svc-s-discriminating-weights"]], "Going further with scikit-learn": [[98, "going-further-with-scikit-learn"], [159, "going-further-with-scikit-learn"]], "Changing the prediction engine": [[98, "changing-the-prediction-engine"]], "Changing the feature selection": [[98, "changing-the-feature-selection"]], "Functional connectivity predicts age group": [[99, "functional-connectivity-predicts-age-group"]], "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding": [[100, "beta-series-modeling-for-task-based-functional-connectivity-and-decoding"]], "Choosing the right model for your analysis": [[100, null]], "Define the standard model": [[100, "define-the-standard-model"]], "Define the LSA model": [[100, "define-the-lsa-model"]], "Aggregate beta maps from the LSA model based on condition": [[100, "aggregate-beta-maps-from-the-lsa-model-based-on-condition"]], "Define the LSS models": [[100, "define-the-lss-models"]], "Show the design matrices for the first few trials": [[100, "show-the-design-matrices-for-the-first-few-trials"]], "Compare the three modeling approaches": [[100, "compare-the-three-modeling-approaches"]], "Applications of beta series": [[100, "applications-of-beta-series"]], "BIDS dataset first and second level analysis": [[101, "bids-dataset-first-and-second-level-analysis"]], "Fetch example BIDS dataset": [[101, "fetch-example-bids-dataset"], [108, "fetch-example-bids-dataset"]], "Obtain automatically FirstLevelModel objects and fit arguments": [[101, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"], [108, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"]], "Quick sanity check on fit arguments": [[101, "quick-sanity-check-on-fit-arguments"]], "First level model estimation": [[101, "first-level-model-estimation"]], "Second level model estimation": [[101, "second-level-model-estimation"]], "Massively univariate analysis of face vs house recognition": [[102, "massively-univariate-analysis-of-face-vs-house-recognition"]], "NeuroVault cross-study ICA maps": [[103, "neurovault-cross-study-ica-maps"]], "Get image and term data": [[103, "get-image-and-term-data"]], "Reshape and mask images": [[103, "reshape-and-mask-images"]], "Run ICA and map components to terms": [[103, "run-ica-and-map-components-to-terms"]], "Generate figures": [[103, "generate-figures"]], "Multivariate decompositions: Independent component analysis of fMRI": [[104, "multivariate-decompositions-independent-component-analysis-of-fmri"]], "Massively univariate analysis of a motor task from the Localizer dataset": [[105, "massively-univariate-analysis-of-a-motor-task-from-the-localizer-dataset"]], "Massively univariate analysis of a calculation task from the Localizer dataset": [[106, "massively-univariate-analysis-of-a-calculation-task-from-the-localizer-dataset"]], "NeuroVault meta-analysis of stop-go paradigm studies": [[107, "neurovault-meta-analysis-of-stop-go-paradigm-studies"]], "Fetch images for \u201csuccessful stop minus go\u201d-like protocols.": [[107, "fetch-images-for-successful-stop-minus-go-like-protocols"]], "Visualize the data": [[107, "visualize-the-data"]], "Compute statistics": [[107, "compute-statistics"]], "Plot the combined z maps": [[107, "plot-the-combined-z-maps"]], "Surface-based dataset first and second level analysis of a dataset": [[108, "surface-based-dataset-first-and-second-level-analysis-of-a-dataset"]], "Group study": [[108, "group-study"]], "Examples": [[110, "examples"], [175, null], [176, null], [176, null], [176, null], [176, null], [176, null], [176, null]], "General bibliography": [[111, "general-bibliography"]], "Advanced usage: manual pipelines and scaling up": [[112, "advanced-usage-manual-pipelines-and-scaling-up"]], "Building your own neuroimaging machine-learning pipeline": [[113, "building-your-own-neuroimaging-machine-learning-pipeline"]], "Data loading and preprocessing": [[113, "data-loading-and-preprocessing"]], "Downloading the data": [[113, "downloading-the-data"]], "Loading non image data: experiment description": [[113, "loading-non-image-data-experiment-description"]], "Masking the data: from 4D image to 2D array": [[113, "masking-the-data-from-4d-image-to-2d-array"]], "Applying a mask": [[113, "applying-a-mask"]], "Automatically computing a mask": [[113, "automatically-computing-a-mask"]], "Applying a scikit-learn machine learning method": [[113, "applying-a-scikit-learn-machine-learning-method"]], "Unmasking (inverse_transform)": [[113, "unmasking-inverse-transform"]], "Visualizing results": [[113, "visualizing-results"], [155, "visualizing-results"]], "Going further": [[113, "going-further"]], "Downloading statistical maps from the Neurovault repository": [[114, "downloading-statistical-maps-from-the-neurovault-repository"]], "Specific images or collections": [[114, "specific-images-or-collections"]], "Selection filters": [[114, "selection-filters"]], "Output": [[114, "output"]], "Neurosynth annotations": [[114, "neurosynth-annotations"]], "Examples using Neurovault": [[114, "examples-using-neurovault"]], "0.1.0": [[115, "id1"], [149, "id4236"]], "Changelog": [[115, "changelog"], [116, "changelog"], [117, "changelog"], [118, "changelog"], [122, "changelog"], [123, "changelog"], [125, "changelog"], [149, "changelog"], [149, "id3434"], [149, "id3567"], [149, "id3837"], [149, "id3971"], [149, "id4104"], [149, "id4237"], [164, "changelog"]], "0.1.1": [[116, "id1"], [149, "id4103"]], "0.1.2": [[117, "id1"], [149, "id3970"]], "0.1.3": [[118, "id1"], [149, "id3836"]], "Fixes": [[118, "fixes"], [120, "fixes"], [121, "fixes"], [121, "id2"], [124, "fixes"], [127, "fixes"], [128, "fixes"], [129, "fixes"], [129, "id3"], [130, "fixes"], [131, "fixes"], [133, "fixes"], [134, "fixes"], [135, "fixes"], [136, "fixes"], [137, "id4"], [137, "id9"], [137, "id13"], [138, "fixes"], [139, "fixes"], [140, "fixes"], [141, "fixes"], [142, "fixes"], [143, "fixes"], [144, "fixes"], [145, "fixes"], [146, "fixes"], [147, "fixes"], [149, "fixes"], [149, "id134"], [149, "id137"], [149, "id273"], [149, "id412"], [149, "id547"], [149, "id684"], [149, "id821"], [149, "id958"], [149, "id1095"], [149, "id1232"], [149, "id1367"], [149, "id1502"], [149, "id1643"], [149, "id1649"], [149, "id1653"], [149, "id1788"], [149, "id1924"], [149, "id2068"], [149, "id2208"], [149, "id2477"], [149, "id2614"], [149, "id2749"], [149, "id2754"], [149, "id2888"], [149, "id3025"], [149, "id3430"], [149, "id3838"]], "0.1.4": [[119, "id1"], [149, "id3703"]], "Highlights": [[119, "highlights"], [129, "highlights"], [130, "highlights"], [131, "highlights"], [134, "highlights"], [134, "id4"], [134, "id8"], [149, "id2062"], [149, "id2066"], [149, "id2071"], [149, "id2475"], [149, "id2612"], [149, "id2752"], [149, "id3704"]], "0.10.0": [[120, "id1"], [149, "id271"]], "HIGHLIGHTS": [[120, "highlights"], [137, "highlights"], [140, "highlights"], [141, "highlights"], [142, "highlights"], [143, "highlights"], [144, "highlights"], [146, "highlights"], [149, "highlights"], [149, "id408"], [149, "id682"], [149, "id819"], [149, "id956"], [149, "id1093"], [149, "id1229"], [149, "id1636"]], "NEW": [[120, "new"], [121, "new"], [134, "new"], [135, "new"], [136, "new"], [137, "new"], [137, "id2"], [137, "id5"], [137, "id11"], [140, "new"], [141, "new"], [142, "new"], [143, "new"], [144, "new"], [146, "new"], [147, "new"], [149, "new"], [149, "id133"], [149, "id272"], [149, "id410"], [149, "id683"], [149, "id820"], [149, "id957"], [149, "id1094"], [149, "id1230"], [149, "id1637"], [149, "id1641"], [149, "id1645"], [149, "id1651"], [149, "id1787"], [149, "id1922"], [149, "id2058"]], "Enhancements": [[120, "enhancements"], [121, "enhancements"], [121, "id3"], [122, "enhancements"], [124, "enhancements"], [128, "enhancements"], [129, "enhancements"], [129, "id4"], [130, "enhancements"], [131, "enhancements"], [132, "enhancements"], [134, "id2"], [134, "id5"], [134, "id9"], [141, "enhancements"], [142, "enhancements"], [143, "enhancements"], [144, "enhancements"], [145, "enhancements"], [146, "enhancements"], [147, "enhancements"], [149, "enhancements"], [149, "id135"], [149, "id138"], [149, "id274"], [149, "id413"], [149, "id548"], [149, "id685"], [149, "id822"], [149, "id959"], [149, "id1096"], [149, "id2063"], [149, "id2067"], [149, "id2072"], [149, "id2341"], [149, "id2476"], [149, "id2615"], [149, "id2750"], [149, "id2755"], [149, "id2889"], [149, "id3429"], [149, "id3569"]], "Changes": [[120, "changes"], [121, "changes"], [121, "id4"], [124, "changes"], [126, "changes"], [127, "changes"], [128, "changes"], [129, "changes"], [129, "id2"], [130, "changes"], [131, "changes"], [132, "changes"], [133, "changes"], [134, "changes"], [134, "id3"], [134, "id6"], [134, "id10"], [135, "changes"], [137, "id3"], [137, "id8"], [137, "id12"], [139, "changes"], [140, "changes"], [142, "changes"], [143, "changes"], [144, "changes"], [145, "changes"], [146, "changes"], [147, "changes"], [149, "changes"], [149, "id136"], [149, "id139"], [149, "id275"], [149, "id414"], [149, "id549"], [149, "id686"], [149, "id823"], [149, "id960"], [149, "id1233"], [149, "id1368"], [149, "id1642"], [149, "id1648"], [149, "id1652"], [149, "id1923"], [149, "id2060"], [149, "id2064"], [149, "id2069"], [149, "id2073"], [149, "id2207"], [149, "id2342"], [149, "id2478"], [149, "id2613"], [149, "id2748"], [149, "id2753"], [149, "id2890"], [149, "id3023"], [149, "id3162"], [149, "id3431"]], "0.10.1": [[121, "id1"], [149, "id132"]], "0.10.1rc1": [[121, "rc1"], [149, "rc1"]], "0.2.0": [[122, "id1"], [149, "id3566"]], "New features": [[122, "new-features"], [125, "new-features"], [149, "new-features"], [149, "id3568"]], "Bug fixes": [[122, "bug-fixes"], [125, "bug-fixes"], [132, "bug-fixes"], [149, "bug-fixes"], [149, "id3295"], [149, "id3570"]], "API changes summary": [[122, "api-changes-summary"], [149, "api-changes-summary"]], "Contributors": [[122, "contributors"], [124, "contributors"], [127, "contributors"], [131, "contributors"], [134, "contributors"], [134, "id7"], [134, "id11"], [135, "contributors"], [136, "contributors"], [137, "contributors"], [137, "id10"], [137, "id14"], [138, "contributors"], [139, "contributors"], [149, "contributors"], [149, "id1503"], [149, "id1644"], [149, "id1650"], [149, "id1654"], [149, "id1789"], [149, "id1925"], [149, "id2065"], [149, "id2070"], [149, "id2074"], [149, "id2479"], [149, "id3028"], [149, "id3432"], [149, "id3571"]], "0.2.1": [[123, "id1"], [149, "v0-2-1"]], "0.2.2": [[124, "id1"], [149, "id3427"]], "New": [[124, "new"], [126, "new"], [127, "new"], [127, "id3"], [149, "id3024"], [149, "id3027"], [149, "id3161"], [149, "id3428"]], "0.2.3": [[125, "id1"], [149, "id3294"]], "0.2.4": [[126, "id1"], [149, "id3160"]], "0.2.5.1": [[127, "id1"], [149, "id3022"]], "0.2.5": [[127, "id2"], [149, "id3026"]], "0.2.6": [[128, "id1"], [149, "id2887"]], "0.3.0": [[129, "id1"], [149, "id2747"]], "0.3.0 beta": [[129, "beta"], [149, "id2751"]], "0.3.1": [[130, "id1"], [149, "id2611"]], "0.4.0": [[131, "id1"], [149, "id2474"]], "0.4.1": [[132, "id1"], [149, "id2340"]], "0.4.2": [[133, "id1"], [149, "id2206"]], "0.5.0": [[134, "id1"], [149, "id2057"]], "ENHANCEMENTS": [[134, "enhancements"], [137, "enhancements"], [138, "enhancements"], [139, "enhancements"], [149, "id1366"], [149, "id1501"], [149, "id1638"], [149, "id2059"]], "0.5.0 rc": [[134, "rc"], [149, "id2061"]], "0.5.0 beta": [[134, "beta"], [149, "beta"]], "0.5.0 alpha": [[134, "alpha"], [149, "alpha"]], "0.5.1": [[135, "id1"], [149, "id1921"]], "Known Issues": [[135, "known-issues"], [149, "known-issues"]], "0.5.2": [[136, "id1"], [149, "id1786"]], "0.6.0": [[137, "id1"], [149, "id1635"]], "CHANGES": [[137, "changes"], [149, "id1639"]], "FIXES": [[137, "fixes"], [149, "id1640"]], "0.6.0rc": [[137, "rc"], [149, "rc"]], "0.6.0b0": [[137, "b0"], [149, "b0"]], "0.6.0a0": [[137, "a0"], [149, "a0"]], "0.6.1": [[138, "id1"], [149, "id1500"]], "0.6.2": [[139, "id1"], [149, "id1365"]], "0.7.0": [[140, "id1"], [149, "id1228"]], "0.7.1": [[141, "id1"], [149, "id1092"]], "0.8.0": [[142, "id1"], [149, "id955"]], "0.8.1": [[143, "id1"], [149, "id818"]], "0.9.0": [[144, "id1"], [149, "id681"]], "0.9.1": [[145, "id1"], [149, "id546"]], "0.9.2": [[146, "id1"], [149, "id407"]], "0.10.2.dev": [[147, "dev"], [149, "dev"]], "What\u2019s new": [[149, "what-s-new"]], "Connectome extraction: inverse covariance for direct connections": [[150, "connectome-extraction-inverse-covariance-for-direct-connections"]], "Page summary": [[150, null], [151, null], [154, null], [155, null], [165, null], [168, null]], "Sparse inverse covariance for functional connectomes": [[150, "sparse-inverse-covariance-for-functional-connectomes"]], "Parameter selection": [[150, null]], "Full example": [[150, null], [150, null], [150, null], [151, null], [151, null]], "Exercise: computing sparse inverse covariance": [[150, null]], "Reference": [[150, null], [150, null], [150, null], [150, null], [153, null]], "Sparse inverse covariance on multiple subjects": [[150, "sparse-inverse-covariance-on-multiple-subjects"]], "Exercise: computing the correlation matrix of rest fmri": [[150, null], [151, null]], "Comparing the different approaches on simulated data": [[150, "comparing-the-different-approaches-on-simulated-data"]], "Full Example": [[150, null]], "Linking total and direct interactions at the group level": [[150, "linking-total-and-direct-interactions-at-the-group-level"]], "Exercise: computing connectivity in tangent space": [[150, null]], "Extracting times series to build a functional connectome": [[151, "extracting-times-series-to-build-a-functional-connectome"]], "Time-series from a brain parcellation or \u201cMaxProb\u201d atlas": [[151, "time-series-from-a-brain-parcellation-or-maxprob-atlas"]], "Brain parcellations": [[151, "brain-parcellations"]], "Extracting signals on a parcellation": [[151, "extracting-signals-on-a-parcellation"]], "Time-series from a probabilistic atlas": [[151, "time-series-from-a-probabilistic-atlas"]], "Probabilistic atlases": [[151, "probabilistic-atlases"]], "Extracting signals from a probabilistic atlas": [[151, "extracting-signals-from-a-probabilistic-atlas"]], "Exercise: correlation matrix of rest fMRI on probabilistic atlas": [[151, null]], "A functional connectome: a graph of interactions": [[151, "a-functional-connectome-a-graph-of-interactions"]], "A functional connectome: extracting coordinates of regions": [[151, "a-functional-connectome-extracting-coordinates-of-regions"]], "Functional connectivity and resting state": [[152, "functional-connectivity-and-resting-state"]], "Clustering to parcellate the brain in regions": [[153, "clustering-to-parcellate-the-brain-in-regions"]], "Data loading: movie-watching data": [[153, "data-loading-movie-watching-data"]], "Applying clustering": [[153, "applying-clustering"]], "Which clustering to use": [[153, null]], "Using and visualizing the resulting parcellation": [[153, "using-and-visualizing-the-resulting-parcellation"]], "Visualizing the parcellation": [[153, "visualizing-the-parcellation"]], "Compressed representation": [[153, "compressed-representation"]], "Example code": [[153, null], [161, null]], "Region Extraction for better brain parcellations": [[154, "region-extraction-for-better-brain-parcellations"]], "Fetching movie-watching based functional datasets": [[154, "fetching-movie-watching-based-functional-datasets"]], "Brain maps using Dictionary learning": [[154, "brain-maps-using-dictionary-learning"]], "Visualization of Dictionary learning maps": [[154, "visualization-of-dictionary-learning-maps"]], "Region Extraction with Dictionary learning maps": [[154, "region-extraction-with-dictionary-learning-maps"]], "Visualization of Region Extraction results": [[154, "visualization-of-region-extraction-results"]], "Computing functional connectivity matrices": [[154, "computing-functional-connectivity-matrices"]], "Visualization of functional connectivity matrices": [[154, "visualization-of-functional-connectivity-matrices"]], "Validating results": [[154, "validating-results"]], "Extracting functional brain networks: ICA and related": [[155, "extracting-functional-brain-networks-ica-and-related"]], "Multi-subject ICA: CanICA": [[155, "multi-subject-ica-canica"]], "Objective": [[155, "objective"]], "Nilearn data for examples": [[155, null]], "Fitting CanICA model with nilearn": [[155, "fitting-canica-model-with-nilearn"]], "Interpreting such components": [[155, "interpreting-such-components"]], "An alternative to ICA: Dictionary learning": [[155, "an-alternative-to-ica-dictionary-learning"]], "An introduction to decoding": [[156, "an-introduction-to-decoding"]], "Loading and preparing the data": [[156, "loading-and-preparing-the-data"]], "The Haxby 2001 experiment": [[156, "the-haxby-2001-experiment"]], "fMRI: using beta maps of a first-level analysis": [[156, null]], "Loading the data into nilearn": [[156, "loading-the-data-into-nilearn"]], "Full code example": [[156, null]], "Performing a simple decoding analysis": [[156, "performing-a-simple-decoding-analysis"]], "A few definitions": [[156, "a-few-definitions"]], "A first estimator": [[156, "a-first-estimator"]], "Decoding made easy": [[156, "decoding-made-easy"]], "Measuring prediction performance": [[156, "measuring-prediction-performance"]], "Cross-validation": [[156, "cross-validation"]], "Choosing a good cross-validation strategy": [[156, "choosing-a-good-cross-validation-strategy"]], "Choice of the prediction accuracy measure": [[156, "choice-of-the-prediction-accuracy-measure"]], "Prediction accuracy at chance using simple strategies": [[156, "prediction-accuracy-at-chance-using-simple-strategies"]], "Putting it all together": [[156, null]], "Visualizing the decoder\u2019s weights": [[156, "visualizing-the-decoder-s-weights"]], "Decoding without a mask: Anova-SVM": [[156, "decoding-without-a-mask-anova-svm"]], "Dimension reduction with feature selection": [[156, "dimension-reduction-with-feature-selection"]], "Visualizing the results": [[156, "visualizing-the-results"]], "Final script": [[156, null]], "Choosing the right predictive model for neuroimaging": [[157, "choosing-the-right-predictive-model-for-neuroimaging"]], "Predictions: regression, classification and multi-class": [[157, "predictions-regression-classification-and-multi-class"]], "Regression": [[157, "regression"]], "Classification: two classes or multi-class": [[157, "classification-two-classes-or-multi-class"]], "Different linear models": [[157, "different-linear-models"]], "Setting estimator parameters": [[157, "setting-estimator-parameters"], [159, "setting-estimator-parameters"]], "Bagging several models": [[157, "bagging-several-models"]], "FREM: fast ensembling of regularized models for robust decoding": [[158, "frem-fast-ensembling-of-regularized-models-for-robust-decoding"]], "FREM pipeline": [[158, "frem-pipeline"]], "Empirical comparisons": [[158, "empirical-comparisons"]], "Decoding performance increase on Haxby dataset": [[158, "decoding-performance-increase-on-haxby-dataset"]], "Code": [[158, null], [158, null], [175, null]], "Spatial regularization of decoding maps on mixed gambles study": [[158, "spatial-regularization-of-decoding-maps-on-mixed-gambles-study"]], "Running scikit-learn functions for more control on the analysis": [[159, "running-scikit-learn-functions-for-more-control-on-the-analysis"]], "Using scikit-learn estimators": [[159, "using-scikit-learn-estimators"]], "Decoding on simulated data": [[159, null]], "Decoding without a mask: Anova-SVM using scikit-learn": [[159, "decoding-without-a-mask-anova-svm-using-scikit-learn"]], "Using any other model in the pipeline": [[159, "using-any-other-model-in-the-pipeline"]], "Decoding and MVPA: predicting from brain images": [[160, "decoding-and-mvpa-predicting-from-brain-images"]], "Searchlight : finding voxels containing information": [[161, "searchlight-finding-voxels-containing-information"]], "Principle of the Searchlight": [[161, "principle-of-the-searchlight"]], "Further Reading": [[161, null]], "Preparing the data": [[161, "preparing-the-data"]], "Setting up the searchlight": [[161, "setting-up-the-searchlight"]], "Classifier": [[161, "classifier"]], "Score function": [[161, "score-function"]], "Cross validation": [[161, "cross-validation"]], "Sphere radius": [[161, "sphere-radius"]], "Searchlight": [[161, "id6"]], "Comparing to massively univariate analysis: F_score or SPM": [[161, "comparing-to-massively-univariate-analysis-f-score-or-spm"]], "SpaceNet: decoding with spatial structure for better maps": [[162, "spacenet-decoding-with-spatial-structure-for-better-maps"]], "The SpaceNet decoder": [[162, "the-spacenet-decoder"]], "Related example": [[162, "related-example"]], "Group-sparse covariance estimation": [[163, "group-sparse-covariance-estimation"]], "Description": [[163, "description"]], "Numerical stability": [[163, "numerical-stability"]], "Execution time": [[163, "execution-time"]], "Synthetic dataset": [[163, "synthetic-dataset"]], "Stopping criteria": [[163, "stopping-criteria"]], "Maximum number of iterations": [[163, "maximum-number-of-iterations"]], "Duality gap": [[163, "duality-gap"]], "Variation of norm of estimate": [[163, "variation-of-norm-of-estimate"]], "Initial estimate value": [[163, "initial-estimate-value"]], "Modifying the stopping criterion": [[163, "modifying-the-stopping-criterion"]], "Cross-validation algorithm": [[163, "cross-validation-algorithm"]], "Principle of cross-validation": [[163, "principle-of-cross-validation"]], "Bounds on alpha": [[163, "bounds-on-alpha"]], "Iterative grid search": [[163, "iterative-grid-search"]], "Warm restart": [[163, "warm-restart"]], "Stopping criterion": [[163, "stopping-criterion"]], "Contributing": [[164, "contributing"], [164, "id3"]], "Code of Conduct": [[164, "code-of-conduct"]], "How to get help?": [[164, "how-to-get-help"]], "How to help the project?": [[164, "how-to-help-the-project"]], "Report bugs or discuss enhancement ideas": [[164, "report-bugs-or-discuss-enhancement-ideas"]], "Answer questions": [[164, "answer-questions"]], "Review Pull Requests": [[164, "review-pull-requests"]], "Contribute code": [[164, "contribute-code"]], "How do we decide what code goes in?": [[164, "how-do-we-decide-what-code-goes-in"]], "Scope of the project": [[164, "scope-of-the-project"]], "Who makes decisions": [[164, "who-makes-decisions"]], "How to contribute to nilearn": [[164, "how-to-contribute-to-nilearn"]], "Contribution Guidelines": [[164, "contribution-guidelines"]], "PR Structure": [[164, "pr-structure"]], "Coding Style": [[164, "coding-style"]], "Pre-commit": [[164, "pre-commit"]], "Tests": [[164, "tests"]], "Documentation": [[164, "documentation"]], "Setting up your environment": [[164, "setting-up-your-environment"]], "Installing": [[164, "installing"]], "Recommendation": [[164, null]], "Building documentation": [[164, "building-documentation"]], "Additional cases": [[164, "additional-cases"]], "How to contribute an atlas": [[164, "how-to-contribute-an-atlas"]], "How to contribute a dataset fetcher": [[164, "how-to-contribute-a-dataset-fetcher"]], "Maintenance": [[164, "maintenance"], [172, "maintenance"]], "First level models": [[165, "first-level-models"]], "HRF models": [[165, "hrf-models"]], "Design matrix: event-based and time series-based": [[165, "design-matrix-event-based-and-time-series-based"]], "Event-based": [[165, "event-based"]], "Time series-based": [[165, "time-series-based"]], "Fitting a first level model": [[165, "fitting-a-first-level-model"]], "Computing contrasts": [[165, "computing-contrasts"]], "Extracting predicted time series and residuals": [[165, "extracting-predicted-time-series-and-residuals"]], "Surface-based analysis": [[165, "surface-based-analysis"]], "An introduction to GLMs in fMRI statistical analysis": [[166, "an-introduction-to-glms-in-fmri-statistical-analysis"]], "A primer on BOLD-fMRI data analysis": [[166, "a-primer-on-bold-fmri-data-analysis"]], "What is fMRI ?": [[166, "what-is-fmri"]], "fMRI data modelling": [[166, "fmri-data-modelling"]], "fMRI statistical analysis": [[166, "fmri-statistical-analysis"]], "Multiple Comparisons": [[166, "multiple-comparisons"]], "Analyzing fMRI using GLMs": [[167, "analyzing-fmri-using-glms"]], "Second level models": [[168, "second-level-models"]], "Fitting a second level model": [[168, "fitting-a-second-level-model"]], "Thresholding statistical maps": [[168, "thresholding-statistical-maps"]], "Multiple comparisons correction": [[168, "multiple-comparisons-correction"]], "Voxel based morphometry": [[168, "voxel-based-morphometry"]], "Glossary": [[169, "glossary"]], "Nilearn": [[170, "nilearn"]], "Featured examples": [[170, "featured-examples"]], "Introduction": [[171, "introduction"]], "What is nilearn?": [[171, "what-is-nilearn"]], "Using nilearn for the first time": [[171, "using-nilearn-for-the-first-time"]], "First steps with nilearn": [[171, "first-steps-with-nilearn"]], "Learning with the API references": [[171, "learning-with-the-api-references"]], "Learning with examples": [[171, "learning-with-examples"]], "Finding help": [[171, "finding-help"]], "Machine learning applications to Neuroimaging": [[171, "machine-learning-applications-to-neuroimaging"]], "Project Organization": [[172, "project-organization"]], "Issues": [[172, "issues"]], "Labels": [[172, "labels"]], "Closing policy": [[172, "closing-policy"]], "Pull Requests": [[172, "pull-requests"]], "How to make a release?": [[172, "how-to-make-a-release"]], "Prepare code for the release": [[172, "prepare-code-for-the-release"]], "Prepare the release": [[172, "prepare-the-release"]], "Build the distributions and upload them to Pypi": [[172, "build-the-distributions-and-upload-them-to-pypi"]], "Build and deploy the documentation": [[172, "build-and-deploy-the-documentation"]], "Post-release": [[172, "post-release"]], "Manipulation brain volumes with nilearn": [[173, "manipulation-brain-volumes-with-nilearn"]], "Input and output: neuroimaging data representation": [[174, "input-and-output-neuroimaging-data-representation"]], "Inputing data: file names or image objects": [[174, "inputing-data-file-names-or-image-objects"]], "File names and objects, 3D and 4D images": [[174, "file-names-and-objects-3d-and-4d-images"]], "File name matching: \u201cglobbing\u201d and user path expansion": [[174, "file-name-matching-globbing-and-user-path-expansion"]], "Python globbing": [[174, null]], "Fetching open datasets from Internet": [[174, "fetching-open-datasets-from-internet"]], "nilearn_data: Where is the downloaded data stored?": [[174, null]], "Understanding neuroimaging data": [[174, "understanding-neuroimaging-data"]], "Nifti and Analyze data": [[174, "nifti-and-analyze-data"]], "Dataset formatting: data shape": [[174, null]], "Niimg-like objects": [[174, "niimg-like-objects"]], "Image affines": [[174, null]], "Decreasing memory used when loading Nifti images": [[174, null]], "Text files: phenotype or behavior": [[174, "text-files-phenotype-or-behavior"]], "Reading CSV with pandas": [[174, null]], "Manipulating images: resampling, smoothing, masking, ROIs\u2026": [[175, "manipulating-images-resampling-smoothing-masking-rois"]], "Functions for data preparation and image transformation": [[175, "functions-for-data-preparation-and-image-transformation"]], "Resampling images": [[175, "resampling-images"]], "Resampling one image to match another one": [[175, "resampling-one-image-to-match-another-one"]], "Example": [[175, null]], "Resampling to a specific target affine, shape, or resolution": [[175, "resampling-to-a-specific-target-affine-shape-or-resolution"]], "Special case: resampling to a given voxel size": [[175, null]], "Accessing individual volumes in 4D images": [[175, "accessing-individual-volumes-in-4d-images"]], "Computing and applying spatial masks": [[175, "computing-and-applying-spatial-masks"]], "Masking data: from 4D Nifti images to 2D data arrays": [[175, "masking-data-from-4d-nifti-images-to-2d-data-arrays"]], "Image operations: creating a ROI mask manually": [[175, "image-operations-creating-a-roi-mask-manually"]], "From neuroimaging volumes to data matrices: the masker objects": [[176, "from-neuroimaging-volumes-to-data-matrices-the-masker-objects"]], "The concept of \u201cmasker\u201d objects": [[176, "the-concept-of-masker-objects"]], "Advanced: Design philosophy of \u201cMaskers\u201d": [[176, null]], "NiftiMasker: applying a mask to load time-series": [[176, "niftimasker-applying-a-mask-to-load-time-series"]], "Advanced: scikit-learn Pipelines": [[176, null]], "Custom data loading: loading only the first 100 time points": [[176, "custom-data-loading-loading-only-the-first-100-time-points"]], "Controlling how the mask is computed from the data": [[176, "controlling-how-the-mask-is-computed-from-the-data"]], "Visualizing the computed mask": [[176, "visualizing-the-computed-mask"]], "Different masking strategies": [[176, "different-masking-strategies"]], "Extra mask parameters: opening, cutoff\u2026": [[176, "extra-mask-parameters-opening-cutoff"]], "Common data preparation steps: smoothing, filtering, resampling": [[176, "common-data-preparation-steps-smoothing-filtering-resampling"]], "`dtype` argument": [[176, null]], "Temporal Filtering and confound removal": [[176, "temporal-filtering-and-confound-removal"]], "Exercise": [[176, null]], "Resampling: resizing and changing resolutions of images": [[176, "resampling-resizing-and-changing-resolutions-of-images"]], "Inverse transform: unmasking data": [[176, "inverse-transform-unmasking-data"]], "Examples to better understand the NiftiMasker": [[176, null]], "Extraction of signals from regions: NiftiLabelsMasker, NiftiMapsMasker": [[176, "extraction-of-signals-from-regions-niftilabelsmasker-niftimapsmasker"]], "Regions definition": [[176, "regions-definition"]], "NiftiLabelsMasker Usage": [[176, "niftilabelsmasker-usage"]], "NiftiMapsMasker Usage": [[176, "niftimapsmasker-usage"]], "Extraction of signals from regions for multiple subjects: MultiNiftiMasker, MultiNiftiLabelsMasker, MultiNiftiMapsMasker": [[176, "extraction-of-signals-from-regions-for-multiple-subjects-multiniftimasker-multiniftilabelsmasker-multiniftimapsmasker"]], "MultiNiftiMasker Usage": [[176, "multiniftimasker-usage"]], "MultiNiftiLabelsMasker Usage": [[176, "multiniftilabelsmasker-usage"]], "MultiNiftiMapsMasker Usage": [[176, "multiniftimapsmasker-usage"]], "Extraction of signals from seeds: NiftiSpheresMasker": [[176, "extraction-of-signals-from-seeds-niftispheresmasker"]], "nilearn.connectome: Functional Connectivity": [[177, "module-nilearn.connectome"]], "nilearn.datasets: Automatic Dataset Fetching": [[178, "module-nilearn.datasets"]], "Templates": [[178, "templates"]], "Atlases": [[178, "atlases"]], "Preprocessed datasets": [[178, "preprocessed-datasets"]], "Statistical maps/derivatives": [[178, "statistical-maps-derivatives"]], "General functions": [[178, "general-functions"]], "nilearn.decoding: Decoding": [[179, "module-nilearn.decoding"]], "nilearn.decomposition: Multivariate Decompositions": [[180, "module-nilearn.decomposition"]], "nilearn.connectome.ConnectivityMeasure": [[181, "nilearn-connectome-connectivitymeasure"]], "Examples using nilearn.connectome.ConnectivityMeasure": [[181, "examples-using-nilearn-connectome-connectivitymeasure"]], "nilearn.connectome.GroupSparseCovariance": [[182, "nilearn-connectome-groupsparsecovariance"]], "nilearn.connectome.GroupSparseCovarianceCV": [[183, "nilearn-connectome-groupsparsecovariancecv"]], "Examples using nilearn.connectome.GroupSparseCovarianceCV": [[183, "examples-using-nilearn-connectome-groupsparsecovariancecv"]], "nilearn.connectome.cov_to_corr": [[184, "nilearn-connectome-cov-to-corr"]], "nilearn.connectome.group_sparse_covariance": [[185, "nilearn-connectome-group-sparse-covariance"]], "nilearn.connectome.prec_to_partial": [[186, "nilearn-connectome-prec-to-partial"]], "nilearn.connectome.sym_matrix_to_vec": [[187, "nilearn-connectome-sym-matrix-to-vec"]], "nilearn.connectome.vec_to_sym_matrix": [[188, "nilearn-connectome-vec-to-sym-matrix"]], "nilearn.datasets.fetch_abide_pcp": [[189, "nilearn-datasets-fetch-abide-pcp"]], "nilearn.datasets.fetch_adhd": [[190, "nilearn-datasets-fetch-adhd"]], "Examples using nilearn.datasets.fetch_adhd": [[190, "examples-using-nilearn-datasets-fetch-adhd"]], "nilearn.datasets.fetch_atlas_aal": [[191, "nilearn-datasets-fetch-atlas-aal"]], "nilearn.datasets.fetch_atlas_allen_2011": [[192, "nilearn-datasets-fetch-atlas-allen-2011"]], "Examples using nilearn.datasets.fetch_atlas_allen_2011": [[192, "examples-using-nilearn-datasets-fetch-atlas-allen-2011"]], "nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[193, "nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "Examples using nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[193, "examples-using-nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "nilearn.datasets.fetch_atlas_craddock_2012": [[194, "nilearn-datasets-fetch-atlas-craddock-2012"]], "nilearn.datasets.fetch_atlas_destrieux_2009": [[195, "nilearn-datasets-fetch-atlas-destrieux-2009"]], "Examples using nilearn.datasets.fetch_atlas_destrieux_2009": [[195, "examples-using-nilearn-datasets-fetch-atlas-destrieux-2009"]], "nilearn.datasets.fetch_atlas_difumo": [[196, "nilearn-datasets-fetch-atlas-difumo"]], "Examples using nilearn.datasets.fetch_atlas_difumo": [[196, "examples-using-nilearn-datasets-fetch-atlas-difumo"]], "nilearn.datasets.fetch_atlas_harvard_oxford": [[197, "nilearn-datasets-fetch-atlas-harvard-oxford"]], "Examples using nilearn.datasets.fetch_atlas_harvard_oxford": [[197, "examples-using-nilearn-datasets-fetch-atlas-harvard-oxford"]], "nilearn.datasets.fetch_atlas_juelich": [[198, "nilearn-datasets-fetch-atlas-juelich"]], "Examples using nilearn.datasets.fetch_atlas_juelich": [[198, "examples-using-nilearn-datasets-fetch-atlas-juelich"]], "nilearn.datasets.fetch_atlas_msdl": [[199, "nilearn-datasets-fetch-atlas-msdl"]], "Examples using nilearn.datasets.fetch_atlas_msdl": [[199, "examples-using-nilearn-datasets-fetch-atlas-msdl"]], "nilearn.datasets.fetch_atlas_pauli_2017": [[200, "nilearn-datasets-fetch-atlas-pauli-2017"]], "Examples using nilearn.datasets.fetch_atlas_pauli_2017": [[200, "examples-using-nilearn-datasets-fetch-atlas-pauli-2017"]], "nilearn.datasets.fetch_atlas_schaefer_2018": [[201, "nilearn-datasets-fetch-atlas-schaefer-2018"]], "nilearn.datasets.fetch_atlas_smith_2009": [[202, "nilearn-datasets-fetch-atlas-smith-2009"]], "Examples using nilearn.datasets.fetch_atlas_smith_2009": [[202, "examples-using-nilearn-datasets-fetch-atlas-smith-2009"]], "nilearn.datasets.fetch_atlas_surf_destrieux": [[203, "nilearn-datasets-fetch-atlas-surf-destrieux"]], "Examples using nilearn.datasets.fetch_atlas_surf_destrieux": [[203, "examples-using-nilearn-datasets-fetch-atlas-surf-destrieux"]], "nilearn.datasets.fetch_atlas_talairach": [[204, "nilearn-datasets-fetch-atlas-talairach"]], "nilearn.datasets.fetch_atlas_yeo_2011": [[205, "nilearn-datasets-fetch-atlas-yeo-2011"]], "Examples using nilearn.datasets.fetch_atlas_yeo_2011": [[205, "examples-using-nilearn-datasets-fetch-atlas-yeo-2011"]], "nilearn.datasets.fetch_bids_langloc_dataset": [[206, "nilearn-datasets-fetch-bids-langloc-dataset"]], "nilearn.datasets.fetch_coords_dosenbach_2010": [[207, "nilearn-datasets-fetch-coords-dosenbach-2010"]], "Examples using nilearn.datasets.fetch_coords_dosenbach_2010": [[207, "examples-using-nilearn-datasets-fetch-coords-dosenbach-2010"]], "nilearn.datasets.fetch_coords_power_2011": [[208, "nilearn-datasets-fetch-coords-power-2011"]], "Examples using nilearn.datasets.fetch_coords_power_2011": [[208, "examples-using-nilearn-datasets-fetch-coords-power-2011"]], "nilearn.datasets.fetch_coords_seitzman_2018": [[209, "nilearn-datasets-fetch-coords-seitzman-2018"]], "nilearn.datasets.fetch_development_fmri": [[210, "nilearn-datasets-fetch-development-fmri"]], "Examples using nilearn.datasets.fetch_development_fmri": [[210, "examples-using-nilearn-datasets-fetch-development-fmri"]], "nilearn.datasets.fetch_ds000030_urls": [[211, "nilearn-datasets-fetch-ds000030-urls"]], "Examples using nilearn.datasets.fetch_ds000030_urls": [[211, "examples-using-nilearn-datasets-fetch-ds000030-urls"]], "nilearn.datasets.fetch_fiac_first_level": [[212, "nilearn-datasets-fetch-fiac-first-level"]], "Examples using nilearn.datasets.fetch_fiac_first_level": [[212, "examples-using-nilearn-datasets-fetch-fiac-first-level"]], "nilearn.datasets.fetch_haxby": [[213, "nilearn-datasets-fetch-haxby"]], "Examples using nilearn.datasets.fetch_haxby": [[213, "examples-using-nilearn-datasets-fetch-haxby"]], "nilearn.datasets.fetch_icbm152_2009": [[214, "nilearn-datasets-fetch-icbm152-2009"]], "Examples using nilearn.datasets.fetch_icbm152_2009": [[214, "examples-using-nilearn-datasets-fetch-icbm152-2009"]], "nilearn.datasets.fetch_icbm152_brain_gm_mask": [[215, "nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "Examples using nilearn.datasets.fetch_icbm152_brain_gm_mask": [[215, "examples-using-nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "nilearn.datasets.fetch_language_localizer_demo_dataset": [[216, "nilearn-datasets-fetch-language-localizer-demo-dataset"]], "Examples using nilearn.datasets.fetch_language_localizer_demo_dataset": [[216, "examples-using-nilearn-datasets-fetch-language-localizer-demo-dataset"]], "nilearn.datasets.fetch_localizer_button_task": [[217, "nilearn-datasets-fetch-localizer-button-task"]], "Examples using nilearn.datasets.fetch_localizer_button_task": [[217, "examples-using-nilearn-datasets-fetch-localizer-button-task"]], "nilearn.datasets.fetch_localizer_calculation_task": [[218, "nilearn-datasets-fetch-localizer-calculation-task"]], "Examples using nilearn.datasets.fetch_localizer_calculation_task": [[218, "examples-using-nilearn-datasets-fetch-localizer-calculation-task"]], "nilearn.datasets.fetch_localizer_contrasts": [[219, "nilearn-datasets-fetch-localizer-contrasts"]], "Examples using nilearn.datasets.fetch_localizer_contrasts": [[219, "examples-using-nilearn-datasets-fetch-localizer-contrasts"]], "nilearn.datasets.fetch_localizer_first_level": [[220, "nilearn-datasets-fetch-localizer-first-level"]], "Examples using nilearn.datasets.fetch_localizer_first_level": [[220, "examples-using-nilearn-datasets-fetch-localizer-first-level"]], "nilearn.datasets.fetch_megatrawls_netmats": [[221, "nilearn-datasets-fetch-megatrawls-netmats"]], "Examples using nilearn.datasets.fetch_megatrawls_netmats": [[221, "examples-using-nilearn-datasets-fetch-megatrawls-netmats"]], "nilearn.datasets.fetch_mixed_gambles": [[222, "nilearn-datasets-fetch-mixed-gambles"]], "Examples using nilearn.datasets.fetch_mixed_gambles": [[222, "examples-using-nilearn-datasets-fetch-mixed-gambles"]], "nilearn.datasets.fetch_miyawaki2008": [[223, "nilearn-datasets-fetch-miyawaki2008"]], "Examples using nilearn.datasets.fetch_miyawaki2008": [[223, "examples-using-nilearn-datasets-fetch-miyawaki2008"]], "nilearn.datasets.fetch_neurovault": [[224, "nilearn-datasets-fetch-neurovault"]], "Examples using nilearn.datasets.fetch_neurovault": [[224, "examples-using-nilearn-datasets-fetch-neurovault"]], "nilearn.datasets.fetch_neurovault_auditory_computation_task": [[225, "nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "Examples using nilearn.datasets.fetch_neurovault_auditory_computation_task": [[225, "examples-using-nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "nilearn.datasets.fetch_neurovault_ids": [[226, "nilearn-datasets-fetch-neurovault-ids"]], "Examples using nilearn.datasets.fetch_neurovault_ids": [[226, "examples-using-nilearn-datasets-fetch-neurovault-ids"]], "nilearn.datasets.fetch_neurovault_motor_task": [[227, "nilearn-datasets-fetch-neurovault-motor-task"]], "Examples using nilearn.datasets.fetch_neurovault_motor_task": [[227, "examples-using-nilearn-datasets-fetch-neurovault-motor-task"]], "nilearn.datasets.fetch_oasis_vbm": [[228, "nilearn-datasets-fetch-oasis-vbm"]], "Examples using nilearn.datasets.fetch_oasis_vbm": [[228, "examples-using-nilearn-datasets-fetch-oasis-vbm"]], "nilearn.datasets.fetch_openneuro_dataset": [[229, "nilearn-datasets-fetch-openneuro-dataset"]], "Examples using nilearn.datasets.fetch_openneuro_dataset": [[229, "examples-using-nilearn-datasets-fetch-openneuro-dataset"]], "nilearn.datasets.fetch_openneuro_dataset_index": [[230, "nilearn-datasets-fetch-openneuro-dataset-index"]], "nilearn.datasets.fetch_spm_auditory": [[231, "nilearn-datasets-fetch-spm-auditory"]], "Examples using nilearn.datasets.fetch_spm_auditory": [[231, "examples-using-nilearn-datasets-fetch-spm-auditory"]], "nilearn.datasets.fetch_spm_multimodal_fmri": [[232, "nilearn-datasets-fetch-spm-multimodal-fmri"]], "Examples using nilearn.datasets.fetch_spm_multimodal_fmri": [[232, "examples-using-nilearn-datasets-fetch-spm-multimodal-fmri"]], "nilearn.datasets.fetch_surf_fsaverage": [[233, "nilearn-datasets-fetch-surf-fsaverage"]], "Examples using nilearn.datasets.fetch_surf_fsaverage": [[233, "examples-using-nilearn-datasets-fetch-surf-fsaverage"]], "nilearn.datasets.fetch_surf_nki_enhanced": [[234, "nilearn-datasets-fetch-surf-nki-enhanced"]], "Examples using nilearn.datasets.fetch_surf_nki_enhanced": [[234, "examples-using-nilearn-datasets-fetch-surf-nki-enhanced"]], "nilearn.datasets.get_data_dirs": [[235, "nilearn-datasets-get-data-dirs"]], "Examples using nilearn.datasets.get_data_dirs": [[235, "examples-using-nilearn-datasets-get-data-dirs"]], "nilearn.datasets.load_mni152_brain_mask": [[236, "nilearn-datasets-load-mni152-brain-mask"]], "Examples using nilearn.datasets.load_mni152_brain_mask": [[236, "examples-using-nilearn-datasets-load-mni152-brain-mask"]], "nilearn.datasets.load_mni152_gm_mask": [[237, "nilearn-datasets-load-mni152-gm-mask"]], "nilearn.datasets.load_mni152_gm_template": [[238, "nilearn-datasets-load-mni152-gm-template"]], "nilearn.datasets.load_mni152_template": [[239, "nilearn-datasets-load-mni152-template"]], "Examples using nilearn.datasets.load_mni152_template": [[239, "examples-using-nilearn-datasets-load-mni152-template"]], "nilearn.datasets.load_mni152_wm_mask": [[240, "nilearn-datasets-load-mni152-wm-mask"]], "nilearn.datasets.load_mni152_wm_template": [[241, "nilearn-datasets-load-mni152-wm-template"]], "nilearn.datasets.load_sample_motor_activation_image": [[242, "nilearn-datasets-load-sample-motor-activation-image"]], "Examples using nilearn.datasets.load_sample_motor_activation_image": [[242, "examples-using-nilearn-datasets-load-sample-motor-activation-image"]], "nilearn.datasets.patch_openneuro_dataset": [[243, "nilearn-datasets-patch-openneuro-dataset"]], "nilearn.datasets.select_from_index": [[244, "nilearn-datasets-select-from-index"]], "Examples using nilearn.datasets.select_from_index": [[244, "examples-using-nilearn-datasets-select-from-index"]], "nilearn.decoding.Decoder": [[245, "nilearn-decoding-decoder"]], "Examples using nilearn.decoding.Decoder": [[245, "examples-using-nilearn-decoding-decoder"]], "nilearn.decoding.DecoderRegressor": [[246, "nilearn-decoding-decoderregressor"]], "Examples using nilearn.decoding.DecoderRegressor": [[246, "examples-using-nilearn-decoding-decoderregressor"]], "nilearn.decoding.FREMClassifier": [[247, "nilearn-decoding-fremclassifier"]], "Examples using nilearn.decoding.FREMClassifier": [[247, "examples-using-nilearn-decoding-fremclassifier"]], "nilearn.decoding.FREMRegressor": [[248, "nilearn-decoding-fremregressor"]], "Examples using nilearn.decoding.FREMRegressor": [[248, "examples-using-nilearn-decoding-fremregressor"]], "nilearn.decoding.SearchLight": [[249, "nilearn-decoding-searchlight"]], "Examples using nilearn.decoding.SearchLight": [[249, "examples-using-nilearn-decoding-searchlight"]], "nilearn.decoding.SpaceNetClassifier": [[250, "nilearn-decoding-spacenetclassifier"]], "nilearn.decoding.SpaceNetRegressor": [[251, "nilearn-decoding-spacenetregressor"]], "Examples using nilearn.decoding.SpaceNetRegressor": [[251, "examples-using-nilearn-decoding-spacenetregressor"]], "nilearn.decomposition.CanICA": [[252, "nilearn-decomposition-canica"]], "Examples using nilearn.decomposition.CanICA": [[252, "examples-using-nilearn-decomposition-canica"]], "nilearn.decomposition.DictLearning": [[253, "nilearn-decomposition-dictlearning"]], "Examples using nilearn.decomposition.DictLearning": [[253, "examples-using-nilearn-decomposition-dictlearning"]], "nilearn.glm.ARModel": [[254, "nilearn-glm-armodel"]], "nilearn.glm.Contrast": [[255, "nilearn-glm-contrast"]], "Examples using nilearn.glm.Contrast": [[255, "examples-using-nilearn-glm-contrast"]], "nilearn.glm.FContrastResults": [[256, "nilearn-glm-fcontrastresults"]], "nilearn.glm.LikelihoodModelResults": [[257, "nilearn-glm-likelihoodmodelresults"]], "nilearn.glm.OLSModel": [[258, "nilearn-glm-olsmodel"]], "nilearn.glm.RegressionResults": [[259, "nilearn-glm-regressionresults"]], "nilearn.glm.SimpleRegressionResults": [[260, "nilearn-glm-simpleregressionresults"]], "nilearn.glm.TContrastResults": [[261, "nilearn-glm-tcontrastresults"]], "nilearn.glm.cluster_level_inference": [[262, "nilearn-glm-cluster-level-inference"]], "Examples using nilearn.glm.cluster_level_inference": [[262, "examples-using-nilearn-glm-cluster-level-inference"]], "nilearn.glm.compute_contrast": [[263, "nilearn-glm-compute-contrast"]], "Examples using nilearn.glm.compute_contrast": [[263, "examples-using-nilearn-glm-compute-contrast"]], "nilearn.glm.compute_fixed_effects": [[264, "nilearn-glm-compute-fixed-effects"]], "Examples using nilearn.glm.compute_fixed_effects": [[264, "examples-using-nilearn-glm-compute-fixed-effects"]], "nilearn.glm.expression_to_contrast_vector": [[265, "nilearn-glm-expression-to-contrast-vector"]], "nilearn.glm.fdr_threshold": [[266, "nilearn-glm-fdr-threshold"]], "nilearn.glm.first_level.FirstLevelModel": [[267, "nilearn-glm-first-level-firstlevelmodel"]], "Examples using nilearn.glm.first_level.FirstLevelModel": [[267, "examples-using-nilearn-glm-first-level-firstlevelmodel"]], "nilearn.glm.first_level.check_design_matrix": [[268, "nilearn-glm-first-level-check-design-matrix"]], "nilearn.glm.first_level.compute_regressor": [[269, "nilearn-glm-first-level-compute-regressor"]], "Examples using nilearn.glm.first_level.compute_regressor": [[269, "examples-using-nilearn-glm-first-level-compute-regressor"]], "nilearn.glm.first_level.first_level_from_bids": [[270, "nilearn-glm-first-level-first-level-from-bids"]], "Examples using nilearn.glm.first_level.first_level_from_bids": [[270, "examples-using-nilearn-glm-first-level-first-level-from-bids"]], "nilearn.glm.first_level.glover_dispersion_derivative": [[271, "nilearn-glm-first-level-glover-dispersion-derivative"]], "nilearn.glm.first_level.glover_hrf": [[272, "nilearn-glm-first-level-glover-hrf"]], "nilearn.glm.first_level.glover_time_derivative": [[273, "nilearn-glm-first-level-glover-time-derivative"]], "nilearn.glm.first_level.make_first_level_design_matrix": [[274, "nilearn-glm-first-level-make-first-level-design-matrix"]], "Examples using nilearn.glm.first_level.make_first_level_design_matrix": [[274, "examples-using-nilearn-glm-first-level-make-first-level-design-matrix"]], "nilearn.glm.first_level.mean_scaling": [[275, "nilearn-glm-first-level-mean-scaling"]], "nilearn.glm.first_level.run_glm": [[276, "nilearn-glm-first-level-run-glm"]], "Examples using nilearn.glm.first_level.run_glm": [[276, "examples-using-nilearn-glm-first-level-run-glm"]], "nilearn.glm.first_level.spm_dispersion_derivative": [[277, "nilearn-glm-first-level-spm-dispersion-derivative"]], "nilearn.glm.first_level.spm_hrf": [[278, "nilearn-glm-first-level-spm-hrf"]], "nilearn.glm.first_level.spm_time_derivative": [[279, "nilearn-glm-first-level-spm-time-derivative"]], "nilearn.glm.second_level.SecondLevelModel": [[280, "nilearn-glm-second-level-secondlevelmodel"]], "Examples using nilearn.glm.second_level.SecondLevelModel": [[280, "examples-using-nilearn-glm-second-level-secondlevelmodel"]], "nilearn.glm.second_level.make_second_level_design_matrix": [[281, "nilearn-glm-second-level-make-second-level-design-matrix"]], "Examples using nilearn.glm.second_level.make_second_level_design_matrix": [[281, "examples-using-nilearn-glm-second-level-make-second-level-design-matrix"]], "nilearn.glm.second_level.non_parametric_inference": [[282, "nilearn-glm-second-level-non-parametric-inference"]], "Examples using nilearn.glm.second_level.non_parametric_inference": [[282, "examples-using-nilearn-glm-second-level-non-parametric-inference"]], "nilearn.glm.threshold_stats_img": [[283, "nilearn-glm-threshold-stats-img"]], "Examples using nilearn.glm.threshold_stats_img": [[283, "examples-using-nilearn-glm-threshold-stats-img"]], "nilearn.image.binarize_img": [[284, "nilearn-image-binarize-img"]], "nilearn.image.clean_img": [[285, "nilearn-image-clean-img"]], "Examples using nilearn.image.clean_img": [[285, "examples-using-nilearn-image-clean-img"]], "nilearn.image.concat_imgs": [[286, "nilearn-image-concat-imgs"]], "Examples using nilearn.image.concat_imgs": [[286, "examples-using-nilearn-image-concat-imgs"]], "nilearn.image.coord_transform": [[287, "nilearn-image-coord-transform"]], "Examples using nilearn.image.coord_transform": [[287, "examples-using-nilearn-image-coord-transform"]], "nilearn.image.copy_img": [[288, "nilearn-image-copy-img"]], "nilearn.image.crop_img": [[289, "nilearn-image-crop-img"]], "nilearn.image.get_data": [[290, "nilearn-image-get-data"]], "Examples using nilearn.image.get_data": [[290, "examples-using-nilearn-image-get-data"]], "nilearn.image.high_variance_confounds": [[291, "nilearn-image-high-variance-confounds"]], "Examples using nilearn.image.high_variance_confounds": [[291, "examples-using-nilearn-image-high-variance-confounds"]], "nilearn.image.index_img": [[292, "nilearn-image-index-img"]], "Examples using nilearn.image.index_img": [[292, "examples-using-nilearn-image-index-img"]], "nilearn.image.iter_img": [[293, "nilearn-image-iter-img"]], "Examples using nilearn.image.iter_img": [[293, "examples-using-nilearn-image-iter-img"]], "nilearn.image.largest_connected_component_img": [[294, "nilearn-image-largest-connected-component-img"]], "nilearn.image.load_img": [[295, "nilearn-image-load-img"]], "Examples using nilearn.image.load_img": [[295, "examples-using-nilearn-image-load-img"]], "nilearn.image.math_img": [[296, "nilearn-image-math-img"]], "Examples using nilearn.image.math_img": [[296, "examples-using-nilearn-image-math-img"]], "nilearn.image.mean_img": [[297, "nilearn-image-mean-img"]], "Examples using nilearn.image.mean_img": [[297, "examples-using-nilearn-image-mean-img"]], "nilearn.image.new_img_like": [[298, "nilearn-image-new-img-like"]], "Examples using nilearn.image.new_img_like": [[298, "examples-using-nilearn-image-new-img-like"]], "nilearn.image.reorder_img": [[299, "nilearn-image-reorder-img"]], "nilearn.image.resample_img": [[300, "nilearn-image-resample-img"]], "Examples using nilearn.image.resample_img": [[300, "examples-using-nilearn-image-resample-img"]], "nilearn.image.resample_to_img": [[301, "nilearn-image-resample-to-img"]], "Examples using nilearn.image.resample_to_img": [[301, "examples-using-nilearn-image-resample-to-img"]], "nilearn.image.smooth_img": [[302, "nilearn-image-smooth-img"]], "Examples using nilearn.image.smooth_img": [[302, "examples-using-nilearn-image-smooth-img"]], "nilearn.image.swap_img_hemispheres": [[303, "nilearn-image-swap-img-hemispheres"]], "nilearn.image.threshold_img": [[304, "nilearn-image-threshold-img"]], "Examples using nilearn.image.threshold_img": [[304, "examples-using-nilearn-image-threshold-img"]], "nilearn.interfaces.bids.get_bids_files": [[305, "nilearn-interfaces-bids-get-bids-files"]], "nilearn.interfaces.bids.parse_bids_filename": [[306, "nilearn-interfaces-bids-parse-bids-filename"]], "nilearn.interfaces.bids.save_glm_to_bids": [[307, "nilearn-interfaces-bids-save-glm-to-bids"]], "Examples using nilearn.interfaces.bids.save_glm_to_bids": [[307, "examples-using-nilearn-interfaces-bids-save-glm-to-bids"]], "nilearn.interfaces.fmriprep.load_confounds": [[308, "nilearn-interfaces-fmriprep-load-confounds"]], "Examples using nilearn.interfaces.fmriprep.load_confounds": [[308, "examples-using-nilearn-interfaces-fmriprep-load-confounds"]], "nilearn.interfaces.fmriprep.load_confounds_strategy": [[309, "nilearn-interfaces-fmriprep-load-confounds-strategy"]], "Examples using nilearn.interfaces.fmriprep.load_confounds_strategy": [[309, "examples-using-nilearn-interfaces-fmriprep-load-confounds-strategy"]], "nilearn.interfaces.fsl.get_design_from_fslmat": [[310, "nilearn-interfaces-fsl-get-design-from-fslmat"]], "Examples using nilearn.interfaces.fsl.get_design_from_fslmat": [[310, "examples-using-nilearn-interfaces-fsl-get-design-from-fslmat"]], "nilearn.maskers.BaseMasker": [[311, "nilearn-maskers-basemasker"]], "Examples using nilearn.maskers.BaseMasker": [[311, "examples-using-nilearn-maskers-basemasker"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[312, "nilearn-maskers-multiniftilabelsmasker"]], "Examples using nilearn.maskers.MultiNiftiLabelsMasker": [[312, "examples-using-nilearn-maskers-multiniftilabelsmasker"]], "nilearn.maskers.MultiNiftiMapsMasker": [[313, "nilearn-maskers-multiniftimapsmasker"]], "Examples using nilearn.maskers.MultiNiftiMapsMasker": [[313, "examples-using-nilearn-maskers-multiniftimapsmasker"]], "nilearn.maskers.MultiNiftiMasker": [[314, "nilearn-maskers-multiniftimasker"]], "Examples using nilearn.maskers.MultiNiftiMasker": [[314, "examples-using-nilearn-maskers-multiniftimasker"]], "nilearn.maskers.NiftiLabelsMasker": [[315, "nilearn-maskers-niftilabelsmasker"]], "Examples using nilearn.maskers.NiftiLabelsMasker": [[315, "examples-using-nilearn-maskers-niftilabelsmasker"]], "nilearn.maskers.NiftiMapsMasker": [[316, "nilearn-maskers-niftimapsmasker"]], "Examples using nilearn.maskers.NiftiMapsMasker": [[316, "examples-using-nilearn-maskers-niftimapsmasker"]], "nilearn.maskers.NiftiMasker": [[317, "nilearn-maskers-niftimasker"]], "Examples using nilearn.maskers.NiftiMasker": [[317, "examples-using-nilearn-maskers-niftimasker"]], "nilearn.maskers.NiftiSpheresMasker": [[318, "nilearn-maskers-niftispheresmasker"]], "Examples using nilearn.maskers.NiftiSpheresMasker": [[318, "examples-using-nilearn-maskers-niftispheresmasker"]], "nilearn.masking.apply_mask": [[319, "nilearn-masking-apply-mask"]], "Examples using nilearn.masking.apply_mask": [[319, "examples-using-nilearn-masking-apply-mask"]], "nilearn.masking.compute_background_mask": [[320, "nilearn-masking-compute-background-mask"]], "nilearn.masking.compute_brain_mask": [[321, "nilearn-masking-compute-brain-mask"]], "nilearn.masking.compute_epi_mask": [[322, "nilearn-masking-compute-epi-mask"]], "Examples using nilearn.masking.compute_epi_mask": [[322, "examples-using-nilearn-masking-compute-epi-mask"]], "nilearn.masking.compute_multi_background_mask": [[323, "nilearn-masking-compute-multi-background-mask"]], "nilearn.masking.compute_multi_brain_mask": [[324, "nilearn-masking-compute-multi-brain-mask"]], "nilearn.masking.compute_multi_epi_mask": [[325, "nilearn-masking-compute-multi-epi-mask"]], "nilearn.masking.intersect_masks": [[326, "nilearn-masking-intersect-masks"]], "nilearn.masking.unmask": [[327, "nilearn-masking-unmask"]], "Examples using nilearn.masking.unmask": [[327, "examples-using-nilearn-masking-unmask"]], "nilearn.mass_univariate.permuted_ols": [[328, "nilearn-mass-univariate-permuted-ols"]], "Examples using nilearn.mass_univariate.permuted_ols": [[328, "examples-using-nilearn-mass-univariate-permuted-ols"]], "nilearn.plotting.displays.BaseAxes": [[329, "nilearn-plotting-displays-baseaxes"]], "nilearn.plotting.displays.BaseSlicer": [[330, "nilearn-plotting-displays-baseslicer"]], "nilearn.plotting.displays.CutAxes": [[331, "nilearn-plotting-displays-cutaxes"]], "nilearn.plotting.displays.GlassBrainAxes": [[332, "nilearn-plotting-displays-glassbrainaxes"]], "nilearn.plotting.displays.LProjector": [[333, "nilearn-plotting-displays-lprojector"]], "Examples using nilearn.plotting.displays.LProjector": [[333, "examples-using-nilearn-plotting-displays-lprojector"]], "nilearn.plotting.displays.LRProjector": [[334, "nilearn-plotting-displays-lrprojector"]], "Examples using nilearn.plotting.displays.LRProjector": [[334, "examples-using-nilearn-plotting-displays-lrprojector"]], "nilearn.plotting.displays.LYRProjector": [[335, "nilearn-plotting-displays-lyrprojector"]], "Examples using nilearn.plotting.displays.LYRProjector": [[335, "examples-using-nilearn-plotting-displays-lyrprojector"]], "nilearn.plotting.displays.LYRZProjector": [[336, "nilearn-plotting-displays-lyrzprojector"]], "Examples using nilearn.plotting.displays.LYRZProjector": [[336, "examples-using-nilearn-plotting-displays-lyrzprojector"]], "nilearn.plotting.displays.LZRProjector": [[337, "nilearn-plotting-displays-lzrprojector"]], "Examples using nilearn.plotting.displays.LZRProjector": [[337, "examples-using-nilearn-plotting-displays-lzrprojector"]], "nilearn.plotting.displays.LZRYProjector": [[338, "nilearn-plotting-displays-lzryprojector"]], "Examples using nilearn.plotting.displays.LZRYProjector": [[338, "examples-using-nilearn-plotting-displays-lzryprojector"]], "nilearn.plotting.displays.MosaicSlicer": [[339, "nilearn-plotting-displays-mosaicslicer"]], "Examples using nilearn.plotting.displays.MosaicSlicer": [[339, "examples-using-nilearn-plotting-displays-mosaicslicer"]], "nilearn.plotting.displays.OrthoProjector": [[340, "nilearn-plotting-displays-orthoprojector"]], "Examples using nilearn.plotting.displays.OrthoProjector": [[340, "examples-using-nilearn-plotting-displays-orthoprojector"]], "nilearn.plotting.displays.OrthoSlicer": [[341, "nilearn-plotting-displays-orthoslicer"]], "Examples using nilearn.plotting.displays.OrthoSlicer": [[341, "examples-using-nilearn-plotting-displays-orthoslicer"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[342, "nilearn-plotting-displays-plotlysurfacefigure"]], "Examples using nilearn.plotting.displays.PlotlySurfaceFigure": [[342, "examples-using-nilearn-plotting-displays-plotlysurfacefigure"]], "nilearn.plotting.displays.RProjector": [[343, "nilearn-plotting-displays-rprojector"]], "Examples using nilearn.plotting.displays.RProjector": [[343, "examples-using-nilearn-plotting-displays-rprojector"]], "nilearn.plotting.displays.TiledSlicer": [[344, "nilearn-plotting-displays-tiledslicer"]], "Examples using nilearn.plotting.displays.TiledSlicer": [[344, "examples-using-nilearn-plotting-displays-tiledslicer"]], "nilearn.plotting.displays.XProjector": [[345, "nilearn-plotting-displays-xprojector"]], "Examples using nilearn.plotting.displays.XProjector": [[345, "examples-using-nilearn-plotting-displays-xprojector"]], "nilearn.plotting.displays.XSlicer": [[346, "nilearn-plotting-displays-xslicer"]], "Examples using nilearn.plotting.displays.XSlicer": [[346, "examples-using-nilearn-plotting-displays-xslicer"]], "nilearn.plotting.displays.XZProjector": [[347, "nilearn-plotting-displays-xzprojector"]], "Examples using nilearn.plotting.displays.XZProjector": [[347, "examples-using-nilearn-plotting-displays-xzprojector"]], "nilearn.plotting.displays.XZSlicer": [[348, "nilearn-plotting-displays-xzslicer"]], "Examples using nilearn.plotting.displays.XZSlicer": [[348, "examples-using-nilearn-plotting-displays-xzslicer"]], "nilearn.plotting.displays.YProjector": [[349, "nilearn-plotting-displays-yprojector"]], "Examples using nilearn.plotting.displays.YProjector": [[349, "examples-using-nilearn-plotting-displays-yprojector"]], "nilearn.plotting.displays.YSlicer": [[350, "nilearn-plotting-displays-yslicer"]], "Examples using nilearn.plotting.displays.YSlicer": [[350, "examples-using-nilearn-plotting-displays-yslicer"]], "nilearn.plotting.displays.YXProjector": [[351, "nilearn-plotting-displays-yxprojector"]], "Examples using nilearn.plotting.displays.YXProjector": [[351, "examples-using-nilearn-plotting-displays-yxprojector"]], "nilearn.plotting.displays.YXSlicer": [[352, "nilearn-plotting-displays-yxslicer"]], "Examples using nilearn.plotting.displays.YXSlicer": [[352, "examples-using-nilearn-plotting-displays-yxslicer"]], "nilearn.plotting.displays.YZProjector": [[353, "nilearn-plotting-displays-yzprojector"]], "Examples using nilearn.plotting.displays.YZProjector": [[353, "examples-using-nilearn-plotting-displays-yzprojector"]], "nilearn.plotting.displays.YZSlicer": [[354, "nilearn-plotting-displays-yzslicer"]], "Examples using nilearn.plotting.displays.YZSlicer": [[354, "examples-using-nilearn-plotting-displays-yzslicer"]], "nilearn.plotting.displays.ZProjector": [[355, "nilearn-plotting-displays-zprojector"]], "Examples using nilearn.plotting.displays.ZProjector": [[355, "examples-using-nilearn-plotting-displays-zprojector"]], "nilearn.plotting.displays.ZSlicer": [[356, "nilearn-plotting-displays-zslicer"]], "Examples using nilearn.plotting.displays.ZSlicer": [[356, "examples-using-nilearn-plotting-displays-zslicer"]], "nilearn.plotting.displays.get_projector": [[357, "nilearn-plotting-displays-get-projector"]], "nilearn.plotting.displays.get_slicer": [[358, "nilearn-plotting-displays-get-slicer"]], "nilearn.plotting.find_cut_slices": [[359, "nilearn-plotting-find-cut-slices"]], "nilearn.plotting.find_parcellation_cut_coords": [[360, "nilearn-plotting-find-parcellation-cut-coords"]], "Examples using nilearn.plotting.find_parcellation_cut_coords": [[360, "examples-using-nilearn-plotting-find-parcellation-cut-coords"]], "nilearn.plotting.find_probabilistic_atlas_cut_coords": [[361, "nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "Examples using nilearn.plotting.find_probabilistic_atlas_cut_coords": [[361, "examples-using-nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "nilearn.plotting.find_xyz_cut_coords": [[362, "nilearn-plotting-find-xyz-cut-coords"]], "Examples using nilearn.plotting.find_xyz_cut_coords": [[362, "examples-using-nilearn-plotting-find-xyz-cut-coords"]], "nilearn.plotting.plot_anat": [[363, "nilearn-plotting-plot-anat"]], "Examples using nilearn.plotting.plot_anat": [[363, "examples-using-nilearn-plotting-plot-anat"]], "nilearn.plotting.plot_carpet": [[364, "nilearn-plotting-plot-carpet"]], "Examples using nilearn.plotting.plot_carpet": [[364, "examples-using-nilearn-plotting-plot-carpet"]], "nilearn.plotting.plot_connectome": [[365, "nilearn-plotting-plot-connectome"]], "Examples using nilearn.plotting.plot_connectome": [[365, "examples-using-nilearn-plotting-plot-connectome"]], "nilearn.plotting.plot_contrast_matrix": [[366, "nilearn-plotting-plot-contrast-matrix"]], "Examples using nilearn.plotting.plot_contrast_matrix": [[366, "examples-using-nilearn-plotting-plot-contrast-matrix"]], "nilearn.plotting.plot_design_matrix": [[367, "nilearn-plotting-plot-design-matrix"]], "Examples using nilearn.plotting.plot_design_matrix": [[367, "examples-using-nilearn-plotting-plot-design-matrix"]], "nilearn.plotting.plot_epi": [[368, "nilearn-plotting-plot-epi"]], "Examples using nilearn.plotting.plot_epi": [[368, "examples-using-nilearn-plotting-plot-epi"]], "nilearn.plotting.plot_event": [[369, "nilearn-plotting-plot-event"]], "Examples using nilearn.plotting.plot_event": [[369, "examples-using-nilearn-plotting-plot-event"]], "nilearn.plotting.plot_glass_brain": [[370, "nilearn-plotting-plot-glass-brain"]], "Examples using nilearn.plotting.plot_glass_brain": [[370, "examples-using-nilearn-plotting-plot-glass-brain"]], "nilearn.plotting.plot_img": [[371, "nilearn-plotting-plot-img"]], "Examples using nilearn.plotting.plot_img": [[371, "examples-using-nilearn-plotting-plot-img"]], "nilearn.plotting.plot_img_comparison": [[372, "nilearn-plotting-plot-img-comparison"]], "Examples using nilearn.plotting.plot_img_comparison": [[372, "examples-using-nilearn-plotting-plot-img-comparison"]], "nilearn.plotting.plot_img_on_surf": [[373, "nilearn-plotting-plot-img-on-surf"]], "Examples using nilearn.plotting.plot_img_on_surf": [[373, "examples-using-nilearn-plotting-plot-img-on-surf"]], "nilearn.plotting.plot_markers": [[374, "nilearn-plotting-plot-markers"]], "Examples using nilearn.plotting.plot_markers": [[374, "examples-using-nilearn-plotting-plot-markers"]], "nilearn.plotting.plot_matrix": [[375, "nilearn-plotting-plot-matrix"]], "Examples using nilearn.plotting.plot_matrix": [[375, "examples-using-nilearn-plotting-plot-matrix"]], "nilearn.plotting.plot_prob_atlas": [[376, "nilearn-plotting-plot-prob-atlas"]], "Examples using nilearn.plotting.plot_prob_atlas": [[376, "examples-using-nilearn-plotting-plot-prob-atlas"]], "nilearn.plotting.plot_roi": [[377, "nilearn-plotting-plot-roi"]], "Examples using nilearn.plotting.plot_roi": [[377, "examples-using-nilearn-plotting-plot-roi"]], "nilearn.plotting.plot_stat_map": [[378, "nilearn-plotting-plot-stat-map"]], "Examples using nilearn.plotting.plot_stat_map": [[378, "examples-using-nilearn-plotting-plot-stat-map"]], "nilearn.plotting.plot_surf": [[379, "nilearn-plotting-plot-surf"]], "nilearn.plotting.plot_surf_contours": [[380, "nilearn-plotting-plot-surf-contours"]], "Examples using nilearn.plotting.plot_surf_contours": [[380, "examples-using-nilearn-plotting-plot-surf-contours"]], "nilearn.plotting.plot_surf_roi": [[381, "nilearn-plotting-plot-surf-roi"]], "Examples using nilearn.plotting.plot_surf_roi": [[381, "examples-using-nilearn-plotting-plot-surf-roi"]], "nilearn.plotting.plot_surf_stat_map": [[382, "nilearn-plotting-plot-surf-stat-map"]], "Examples using nilearn.plotting.plot_surf_stat_map": [[382, "examples-using-nilearn-plotting-plot-surf-stat-map"]], "nilearn.plotting.show": [[383, "nilearn-plotting-show"]], "Examples using nilearn.plotting.show": [[383, "examples-using-nilearn-plotting-show"]], "nilearn.plotting.view_connectome": [[384, "nilearn-plotting-view-connectome"]], "Examples using nilearn.plotting.view_connectome": [[384, "examples-using-nilearn-plotting-view-connectome"]], "nilearn.plotting.view_img": [[385, "nilearn-plotting-view-img"]], "Examples using nilearn.plotting.view_img": [[385, "examples-using-nilearn-plotting-view-img"]], "nilearn.plotting.view_img_on_surf": [[386, "nilearn-plotting-view-img-on-surf"]], "Examples using nilearn.plotting.view_img_on_surf": [[386, "examples-using-nilearn-plotting-view-img-on-surf"]], "nilearn.plotting.view_markers": [[387, "nilearn-plotting-view-markers"]], "nilearn.plotting.view_surf": [[388, "nilearn-plotting-view-surf"]], "Examples using nilearn.plotting.view_surf": [[388, "examples-using-nilearn-plotting-view-surf"]], "nilearn.regions.HierarchicalKMeans": [[389, "nilearn-regions-hierarchicalkmeans"]], "nilearn.regions.Parcellations": [[390, "nilearn-regions-parcellations"]], "Examples using nilearn.regions.Parcellations": [[390, "examples-using-nilearn-regions-parcellations"]], "nilearn.regions.ReNA": [[391, "nilearn-regions-rena"]], "nilearn.regions.RegionExtractor": [[392, "nilearn-regions-regionextractor"]], "Examples using nilearn.regions.RegionExtractor": [[392, "examples-using-nilearn-regions-regionextractor"]], "nilearn.regions.connected_label_regions": [[393, "nilearn-regions-connected-label-regions"]], "Examples using nilearn.regions.connected_label_regions": [[393, "examples-using-nilearn-regions-connected-label-regions"]], "nilearn.regions.connected_regions": [[394, "nilearn-regions-connected-regions"]], "Examples using nilearn.regions.connected_regions": [[394, "examples-using-nilearn-regions-connected-regions"]], "nilearn.regions.img_to_signals_labels": [[395, "nilearn-regions-img-to-signals-labels"]], "nilearn.regions.img_to_signals_maps": [[396, "nilearn-regions-img-to-signals-maps"]], "nilearn.regions.recursive_neighbor_agglomeration": [[397, "nilearn-regions-recursive-neighbor-agglomeration"]], "nilearn.regions.signals_to_img_labels": [[398, "nilearn-regions-signals-to-img-labels"]], "nilearn.regions.signals_to_img_maps": [[399, "nilearn-regions-signals-to-img-maps"]], "nilearn.reporting.HTMLReport": [[400, "nilearn-reporting-htmlreport"]], "Examples using nilearn.reporting.HTMLReport": [[400, "examples-using-nilearn-reporting-htmlreport"]], "nilearn.reporting.get_clusters_table": [[401, "nilearn-reporting-get-clusters-table"]], "Examples using nilearn.reporting.get_clusters_table": [[401, "examples-using-nilearn-reporting-get-clusters-table"]], "nilearn.reporting.make_glm_report": [[402, "nilearn-reporting-make-glm-report"]], "Examples using nilearn.reporting.make_glm_report": [[402, "examples-using-nilearn-reporting-make-glm-report"]], "nilearn.signal.butterworth": [[403, "nilearn-signal-butterworth"]], "nilearn.signal.clean": [[404, "nilearn-signal-clean"]], "nilearn.signal.high_variance_confounds": [[405, "nilearn-signal-high-variance-confounds"]], "nilearn.surface.load_surf_data": [[406, "nilearn-surface-load-surf-data"]], "Examples using nilearn.surface.load_surf_data": [[406, "examples-using-nilearn-surface-load-surf-data"]], "nilearn.surface.load_surf_mesh": [[407, "nilearn-surface-load-surf-mesh"]], "Examples using nilearn.surface.load_surf_mesh": [[407, "examples-using-nilearn-surface-load-surf-mesh"]], "nilearn.surface.vol_to_surf": [[408, "nilearn-surface-vol-to-surf"]], "Examples using nilearn.surface.vol_to_surf": [[408, "examples-using-nilearn-surface-vol-to-surf"]], "nilearn.glm: Generalized Linear Models": [[409, "module-nilearn.glm"]], "nilearn.glm.first_level": [[409, "module-nilearn.glm.first_level"]], "nilearn.glm.second_level": [[409, "module-nilearn.glm.second_level"]], "nilearn.image: Image Processing and Resampling Utilities": [[410, "module-nilearn.image"]], "API References": [[411, "api-references"]], "nilearn.interfaces: Loading components from interfaces": [[412, "module-nilearn.interfaces"]], "nilearn.interfaces.bids": [[412, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.fmriprep": [[412, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fsl": [[412, "module-nilearn.interfaces.fsl"]], "nilearn.maskers: Extracting Signals from Brain Images": [[413, "module-nilearn.maskers"]], "nilearn.masking: Data Masking Utilities": [[414, "module-nilearn.masking"]], "nilearn.mass_univariate: Mass-Univariate Analysis": [[415, "module-nilearn.mass_univariate"]], "nilearn.plotting: Plotting Brain Data": [[416, "module-nilearn.plotting"]], "nilearn.plotting.displays: Interacting with figures": [[416, "module-nilearn.plotting.displays"]], "nilearn.regions: Operating on Regions": [[417, "module-nilearn.regions"]], "nilearn.reporting: Reporting Functions": [[418, "module-nilearn.reporting"]], "nilearn.signal: Preprocessing Time Series": [[419, "module-nilearn.signal"]], "nilearn.surface: Manipulating Surface Data": [[420, "module-nilearn.surface"]], "Plotting brain images": [[421, "plotting-brain-images"]], "Code examples": [[421, null]], "Different plotting functions": [[421, "different-plotting-functions"]], "Different display modes": [[421, "different-display-modes"]], "Available Colormaps": [[421, "available-colormaps"]], "Adding overlays, edges, contours, contour fillings, markers, scale bar": [[421, "adding-overlays-edges-contours-contour-fillings-markers-scale-bar"]], "Displaying or saving to an image file": [[421, "displaying-or-saving-to-an-image-file"]], "Surface plotting": [[421, "surface-plotting"]], "Interactive plots": [[421, "interactive-plots"]], "3D Plots of statistical maps or atlases on the cortical surface": [[421, "d-plots-of-statistical-maps-or-atlases-on-the-cortical-surface"]], "view_img_on_surf: Surface plot using a 3D statistical map": [[421, "view-img-on-surf-surface-plot-using-a-3d-statistical-map"]], "view_surf: Surface plot using a surface map and a cortical mesh": [[421, "view-surf-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "plot_surf_stat_map: Surface plot using a surface map and a cortical mesh": [[421, "plot-surf-stat-map-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "3D Plots of connectomes": [[421, "d-plots-of-connectomes"]], "3D Plots of markers": [[421, "d-plots-of-markers"]], "Interactive visualization of statistical map slices": [[421, "interactive-visualization-of-statistical-map-slices"]], "Quickstart": [[422, "quickstart"]], "nilearn": [[422, "nilearn"]], "Important links": [[422, "important-links"]], "Install": [[422, "install"]], "Latest release": [[422, "latest-release"]], "Development version": [[422, "development-version"]], "Check installation": [[422, "check-installation"]], "Drop-in Hours": [[422, "drop-in-hours"]], "Dependencies": [[422, "dependencies"]], "Development": [[422, "development"]], "User guide": [[423, "user-guide"]], "Table of contents": [[423, "table-of-contents"]]}, "indexentries": {"anova": [[169, "term-ANOVA"]], "auc": [[169, "term-AUC"]], "bids": [[169, "term-BIDS"]], "bold": [[169, "term-BOLD"]], "beta": [[169, "term-Beta"]], "canica": [[169, "term-CanICA"]], "closing": [[169, "term-Closing"]], "decoding": [[169, "term-Decoding"]], "deterministic atlas": [[169, "term-Deterministic-atlas"]], "dictionary learning": [[169, "term-Dictionary-learning"]], "dilation": [[169, "term-Dilation"]], "eeg": [[169, "term-EEG"]], "epi": [[169, "term-EPI"]], "erosion": [[169, "term-Erosion"]], "fdr correction": [[169, "term-FDR-correction"]], "fir": [[169, "term-FIR"]], "fpr correction": [[169, "term-FPR-correction"]], "frem": [[169, "term-FREM"]], "fwer correction": [[169, "term-FWER-correction"]], "fwhm": [[169, "term-FWHM"]], "glm": [[169, "term-GLM"]], "hrf": [[169, "term-HRF"]], "ica": [[169, "term-ICA"]], "meg": [[169, "term-MEG"]], "mni": [[169, "term-MNI"]], "mvpa": [[169, "term-MVPA"]], "neurovault": [[169, "term-Neurovault"]], "opening": [[169, "term-Opening"]], "parameter estimate": [[169, "term-Parameter-estimate"]], "probabilistic atlas": [[169, "term-Probabilistic-atlas"]], "roc": [[169, "term-ROC"]], "rena": [[169, "term-ReNA"]], "snr": [[169, "term-SNR"]], "spm": [[169, "term-SPM"]], "svm": [[169, "term-SVM"]], "searchlight": [[169, "term-Searchlight"]], "spacenet": [[169, "term-SpaceNet"]], "tfce": [[169, "term-TFCE"]], "tr": [[169, "term-TR"]], "unsupervised learning": [[169, "term-Unsupervised-learning"]], "vbm": [[169, "term-VBM"]], "ward clustering": [[169, "term-Ward-clustering"]], "classification": [[169, "term-classification"]], "contrast": [[169, "term-contrast"]], "fmri": [[169, "term-fMRI"]], "fmriprep": [[169, "term-fMRIPrep"]], "functional connectivity": [[169, "term-functional-connectivity"]], "functional connectome": [[169, "term-functional-connectome"]], "parcellation": [[169, "term-parcellation"]], "predictive modelling": [[169, "term-predictive-modelling"]], "regression": [[169, "term-regression"]], "resting-state": [[169, "term-resting-state"]], "supervised learning": [[169, "term-supervised-learning"]], "voxel": [[169, "term-voxel"]], "module": [[177, "module-nilearn.connectome"], [178, "module-nilearn.datasets"], [179, "module-nilearn.decoding"], [180, "module-nilearn.decomposition"], [409, "module-nilearn.glm"], [409, "module-nilearn.glm.first_level"], [409, "module-nilearn.glm.second_level"], [410, "module-nilearn.image"], [412, "module-nilearn.interfaces"], [412, "module-nilearn.interfaces.bids"], [412, "module-nilearn.interfaces.fmriprep"], [412, "module-nilearn.interfaces.fsl"], [413, "module-nilearn.maskers"], [414, "module-nilearn.masking"], [415, "module-nilearn.mass_univariate"], [416, "module-nilearn.plotting"], [416, "module-nilearn.plotting.displays"], [417, "module-nilearn.regions"], [418, "module-nilearn.reporting"], [419, "module-nilearn.signal"], [420, "module-nilearn.surface"]], "nilearn.connectome": [[177, "module-nilearn.connectome"]], "nilearn.datasets": [[178, "module-nilearn.datasets"]], "nilearn.decoding": [[179, "module-nilearn.decoding"]], "nilearn.decomposition": [[180, "module-nilearn.decomposition"]], "connectivitymeasure (class in nilearn.connectome)": [[181, "nilearn.connectome.ConnectivityMeasure"]], "__init__() (nilearn.connectome.connectivitymeasure method)": [[181, "nilearn.connectome.ConnectivityMeasure.__init__"]], "fit() (nilearn.connectome.connectivitymeasure method)": [[181, "nilearn.connectome.ConnectivityMeasure.fit"]], "fit_transform() (nilearn.connectome.connectivitymeasure method)": [[181, "nilearn.connectome.ConnectivityMeasure.fit_transform"]], "get_metadata_routing() (nilearn.connectome.connectivitymeasure method)": [[181, "nilearn.connectome.ConnectivityMeasure.get_metadata_routing"]], "get_params() (nilearn.connectome.connectivitymeasure method)": [[181, "nilearn.connectome.ConnectivityMeasure.get_params"]], "inverse_transform() (nilearn.connectome.connectivitymeasure method)": [[181, "nilearn.connectome.ConnectivityMeasure.inverse_transform"]], "set_inverse_transform_request() (nilearn.connectome.connectivitymeasure method)": [[181, "nilearn.connectome.ConnectivityMeasure.set_inverse_transform_request"]], "set_output() (nilearn.connectome.connectivitymeasure method)": [[181, "nilearn.connectome.ConnectivityMeasure.set_output"]], "set_params() (nilearn.connectome.connectivitymeasure method)": [[181, "nilearn.connectome.ConnectivityMeasure.set_params"]], "set_transform_request() (nilearn.connectome.connectivitymeasure method)": [[181, "nilearn.connectome.ConnectivityMeasure.set_transform_request"]], "transform() (nilearn.connectome.connectivitymeasure method)": [[181, "nilearn.connectome.ConnectivityMeasure.transform"]], "groupsparsecovariance (class in nilearn.connectome)": [[182, "nilearn.connectome.GroupSparseCovariance"]], "__init__() (nilearn.connectome.groupsparsecovariance method)": [[182, "nilearn.connectome.GroupSparseCovariance.__init__"]], "fit() (nilearn.connectome.groupsparsecovariance method)": [[182, "nilearn.connectome.GroupSparseCovariance.fit"]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariance method)": [[182, "nilearn.connectome.GroupSparseCovariance.get_metadata_routing"]], "get_params() (nilearn.connectome.groupsparsecovariance method)": [[182, "nilearn.connectome.GroupSparseCovariance.get_params"]], "set_fit_request() (nilearn.connectome.groupsparsecovariance method)": [[182, "nilearn.connectome.GroupSparseCovariance.set_fit_request"]], "set_params() (nilearn.connectome.groupsparsecovariance method)": [[182, "nilearn.connectome.GroupSparseCovariance.set_params"]], "groupsparsecovariancecv (class in nilearn.connectome)": [[183, "nilearn.connectome.GroupSparseCovarianceCV"]], "__init__() (nilearn.connectome.groupsparsecovariancecv method)": [[183, "nilearn.connectome.GroupSparseCovarianceCV.__init__"]], "fit() (nilearn.connectome.groupsparsecovariancecv method)": [[183, "nilearn.connectome.GroupSparseCovarianceCV.fit"]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariancecv method)": [[183, "nilearn.connectome.GroupSparseCovarianceCV.get_metadata_routing"]], "get_params() (nilearn.connectome.groupsparsecovariancecv method)": [[183, "nilearn.connectome.GroupSparseCovarianceCV.get_params"]], "set_fit_request() (nilearn.connectome.groupsparsecovariancecv method)": [[183, "nilearn.connectome.GroupSparseCovarianceCV.set_fit_request"]], "set_params() (nilearn.connectome.groupsparsecovariancecv method)": [[183, "nilearn.connectome.GroupSparseCovarianceCV.set_params"]], "cov_to_corr() (in module nilearn.connectome)": [[184, "nilearn.connectome.cov_to_corr"]], "group_sparse_covariance() (in module nilearn.connectome)": [[185, "nilearn.connectome.group_sparse_covariance"]], "prec_to_partial() (in module nilearn.connectome)": [[186, "nilearn.connectome.prec_to_partial"]], "sym_matrix_to_vec() (in module nilearn.connectome)": [[187, "nilearn.connectome.sym_matrix_to_vec"]], "vec_to_sym_matrix() (in module nilearn.connectome)": [[188, "nilearn.connectome.vec_to_sym_matrix"]], "fetch_abide_pcp() (in module nilearn.datasets)": [[189, "nilearn.datasets.fetch_abide_pcp"]], "fetch_adhd() (in module nilearn.datasets)": [[190, "nilearn.datasets.fetch_adhd"]], "fetch_atlas_aal() (in module nilearn.datasets)": [[191, "nilearn.datasets.fetch_atlas_aal"]], "fetch_atlas_allen_2011() (in module nilearn.datasets)": [[192, "nilearn.datasets.fetch_atlas_allen_2011"]], "fetch_atlas_basc_multiscale_2015() (in module nilearn.datasets)": [[193, "nilearn.datasets.fetch_atlas_basc_multiscale_2015"]], "fetch_atlas_craddock_2012() (in module nilearn.datasets)": [[194, "nilearn.datasets.fetch_atlas_craddock_2012"]], "fetch_atlas_destrieux_2009() (in module nilearn.datasets)": [[195, "nilearn.datasets.fetch_atlas_destrieux_2009"]], "fetch_atlas_difumo() (in module nilearn.datasets)": [[196, "nilearn.datasets.fetch_atlas_difumo"]], "fetch_atlas_harvard_oxford() (in module nilearn.datasets)": [[197, "nilearn.datasets.fetch_atlas_harvard_oxford"]], "fetch_atlas_juelich() (in module nilearn.datasets)": [[198, "nilearn.datasets.fetch_atlas_juelich"]], "fetch_atlas_msdl() (in module nilearn.datasets)": [[199, "nilearn.datasets.fetch_atlas_msdl"]], "fetch_atlas_pauli_2017() (in module nilearn.datasets)": [[200, "nilearn.datasets.fetch_atlas_pauli_2017"]], "fetch_atlas_schaefer_2018() (in module nilearn.datasets)": [[201, "nilearn.datasets.fetch_atlas_schaefer_2018"]], "fetch_atlas_smith_2009() (in module nilearn.datasets)": [[202, "nilearn.datasets.fetch_atlas_smith_2009"]], "fetch_atlas_surf_destrieux() (in module nilearn.datasets)": [[203, "nilearn.datasets.fetch_atlas_surf_destrieux"]], "fetch_atlas_talairach() (in module nilearn.datasets)": [[204, "nilearn.datasets.fetch_atlas_talairach"]], "fetch_atlas_yeo_2011() (in module nilearn.datasets)": [[205, "nilearn.datasets.fetch_atlas_yeo_2011"]], "fetch_bids_langloc_dataset() (in module nilearn.datasets)": [[206, "nilearn.datasets.fetch_bids_langloc_dataset"]], "fetch_coords_dosenbach_2010() (in module nilearn.datasets)": [[207, "nilearn.datasets.fetch_coords_dosenbach_2010"]], "fetch_coords_power_2011() (in module nilearn.datasets)": [[208, "nilearn.datasets.fetch_coords_power_2011"]], "fetch_coords_seitzman_2018() (in module nilearn.datasets)": [[209, "nilearn.datasets.fetch_coords_seitzman_2018"]], "fetch_development_fmri() (in module nilearn.datasets)": [[210, "nilearn.datasets.fetch_development_fmri"]], "fetch_ds000030_urls() (in module nilearn.datasets)": [[211, "nilearn.datasets.fetch_ds000030_urls"]], "fetch_fiac_first_level() (in module nilearn.datasets)": [[212, "nilearn.datasets.fetch_fiac_first_level"]], "fetch_haxby() (in module nilearn.datasets)": [[213, "nilearn.datasets.fetch_haxby"]], "fetch_icbm152_2009() (in module nilearn.datasets)": [[214, "nilearn.datasets.fetch_icbm152_2009"]], "fetch_icbm152_brain_gm_mask() (in module nilearn.datasets)": [[215, "nilearn.datasets.fetch_icbm152_brain_gm_mask"]], "fetch_language_localizer_demo_dataset() (in module nilearn.datasets)": [[216, "nilearn.datasets.fetch_language_localizer_demo_dataset"]], "fetch_localizer_button_task() (in module nilearn.datasets)": [[217, "nilearn.datasets.fetch_localizer_button_task"]], "fetch_localizer_calculation_task() (in module nilearn.datasets)": [[218, "nilearn.datasets.fetch_localizer_calculation_task"]], "fetch_localizer_contrasts() (in module nilearn.datasets)": [[219, "nilearn.datasets.fetch_localizer_contrasts"]], "fetch_localizer_first_level() (in module nilearn.datasets)": [[220, "nilearn.datasets.fetch_localizer_first_level"]], "fetch_megatrawls_netmats() (in module nilearn.datasets)": [[221, "nilearn.datasets.fetch_megatrawls_netmats"]], "fetch_mixed_gambles() (in module nilearn.datasets)": [[222, "nilearn.datasets.fetch_mixed_gambles"]], "fetch_miyawaki2008() (in module nilearn.datasets)": [[223, "nilearn.datasets.fetch_miyawaki2008"]], "fetch_neurovault() (in module nilearn.datasets)": [[224, "nilearn.datasets.fetch_neurovault"]], "fetch_neurovault_auditory_computation_task() (in module nilearn.datasets)": [[225, "nilearn.datasets.fetch_neurovault_auditory_computation_task"]], "fetch_neurovault_ids() (in module nilearn.datasets)": [[226, "nilearn.datasets.fetch_neurovault_ids"]], "fetch_neurovault_motor_task() (in module nilearn.datasets)": [[227, "nilearn.datasets.fetch_neurovault_motor_task"]], "fetch_oasis_vbm() (in module nilearn.datasets)": [[228, "nilearn.datasets.fetch_oasis_vbm"]], "fetch_openneuro_dataset() (in module nilearn.datasets)": [[229, "nilearn.datasets.fetch_openneuro_dataset"]], "fetch_openneuro_dataset_index() (in module nilearn.datasets)": [[230, "nilearn.datasets.fetch_openneuro_dataset_index"]], "fetch_spm_auditory() (in module nilearn.datasets)": [[231, "nilearn.datasets.fetch_spm_auditory"]], "fetch_spm_multimodal_fmri() (in module nilearn.datasets)": [[232, "nilearn.datasets.fetch_spm_multimodal_fmri"]], "fetch_surf_fsaverage() (in module nilearn.datasets)": [[233, "nilearn.datasets.fetch_surf_fsaverage"]], "fetch_surf_nki_enhanced() (in module nilearn.datasets)": [[234, "nilearn.datasets.fetch_surf_nki_enhanced"]], "get_data_dirs() (in module nilearn.datasets)": [[235, "nilearn.datasets.get_data_dirs"]], "load_mni152_brain_mask() (in module nilearn.datasets)": [[236, "nilearn.datasets.load_mni152_brain_mask"]], "load_mni152_gm_mask() (in module nilearn.datasets)": [[237, "nilearn.datasets.load_mni152_gm_mask"]], "load_mni152_gm_template() (in module nilearn.datasets)": [[238, "nilearn.datasets.load_mni152_gm_template"]], "load_mni152_template() (in module nilearn.datasets)": [[239, "nilearn.datasets.load_mni152_template"]], "load_mni152_wm_mask() (in module nilearn.datasets)": [[240, "nilearn.datasets.load_mni152_wm_mask"]], "load_mni152_wm_template() (in module nilearn.datasets)": [[241, "nilearn.datasets.load_mni152_wm_template"]], "load_sample_motor_activation_image() (in module nilearn.datasets)": [[242, "nilearn.datasets.load_sample_motor_activation_image"]], "patch_openneuro_dataset() (in module nilearn.datasets)": [[243, "nilearn.datasets.patch_openneuro_dataset"]], "select_from_index() (in module nilearn.datasets)": [[244, "nilearn.datasets.select_from_index"]], "decoder (class in nilearn.decoding)": [[245, "nilearn.decoding.Decoder"]], "__init__() (nilearn.decoding.decoder method)": [[245, "nilearn.decoding.Decoder.__init__"]], "decision_function() (nilearn.decoding.decoder method)": [[245, "nilearn.decoding.Decoder.decision_function"]], "fit() (nilearn.decoding.decoder method)": [[245, "nilearn.decoding.Decoder.fit"]], "get_metadata_routing() (nilearn.decoding.decoder method)": [[245, "nilearn.decoding.Decoder.get_metadata_routing"]], "get_params() (nilearn.decoding.decoder method)": [[245, "nilearn.decoding.Decoder.get_params"]], "predict() (nilearn.decoding.decoder method)": [[245, "nilearn.decoding.Decoder.predict"]], "score() (nilearn.decoding.decoder method)": [[245, "nilearn.decoding.Decoder.score"]], "set_fit_request() (nilearn.decoding.decoder method)": [[245, "nilearn.decoding.Decoder.set_fit_request"]], "set_params() (nilearn.decoding.decoder method)": [[245, "nilearn.decoding.Decoder.set_params"]], "set_score_request() (nilearn.decoding.decoder method)": [[245, "nilearn.decoding.Decoder.set_score_request"]], "decoderregressor (class in nilearn.decoding)": [[246, "nilearn.decoding.DecoderRegressor"]], "__init__() (nilearn.decoding.decoderregressor method)": [[246, "nilearn.decoding.DecoderRegressor.__init__"]], "decision_function() (nilearn.decoding.decoderregressor method)": [[246, "nilearn.decoding.DecoderRegressor.decision_function"]], "fit() (nilearn.decoding.decoderregressor method)": [[246, "nilearn.decoding.DecoderRegressor.fit"]], "get_metadata_routing() (nilearn.decoding.decoderregressor method)": [[246, "nilearn.decoding.DecoderRegressor.get_metadata_routing"]], "get_params() (nilearn.decoding.decoderregressor method)": [[246, "nilearn.decoding.DecoderRegressor.get_params"]], "predict() (nilearn.decoding.decoderregressor method)": [[246, "nilearn.decoding.DecoderRegressor.predict"]], "score() (nilearn.decoding.decoderregressor method)": [[246, "nilearn.decoding.DecoderRegressor.score"]], "set_fit_request() (nilearn.decoding.decoderregressor method)": [[246, "nilearn.decoding.DecoderRegressor.set_fit_request"]], "set_params() (nilearn.decoding.decoderregressor method)": [[246, "nilearn.decoding.DecoderRegressor.set_params"]], "set_score_request() (nilearn.decoding.decoderregressor method)": [[246, "nilearn.decoding.DecoderRegressor.set_score_request"]], "fremclassifier (class in nilearn.decoding)": [[247, "nilearn.decoding.FREMClassifier"]], "__init__() (nilearn.decoding.fremclassifier method)": [[247, "nilearn.decoding.FREMClassifier.__init__"]], "decision_function() (nilearn.decoding.fremclassifier method)": [[247, "nilearn.decoding.FREMClassifier.decision_function"]], "fit() (nilearn.decoding.fremclassifier method)": [[247, "nilearn.decoding.FREMClassifier.fit"]], "get_metadata_routing() (nilearn.decoding.fremclassifier method)": [[247, "nilearn.decoding.FREMClassifier.get_metadata_routing"]], "get_params() (nilearn.decoding.fremclassifier method)": [[247, "nilearn.decoding.FREMClassifier.get_params"]], "predict() (nilearn.decoding.fremclassifier method)": [[247, "nilearn.decoding.FREMClassifier.predict"]], "score() (nilearn.decoding.fremclassifier method)": [[247, "nilearn.decoding.FREMClassifier.score"]], "set_fit_request() (nilearn.decoding.fremclassifier method)": [[247, "nilearn.decoding.FREMClassifier.set_fit_request"]], "set_params() (nilearn.decoding.fremclassifier method)": [[247, "nilearn.decoding.FREMClassifier.set_params"]], "set_score_request() (nilearn.decoding.fremclassifier method)": [[247, "nilearn.decoding.FREMClassifier.set_score_request"]], "fremregressor (class in nilearn.decoding)": [[248, "nilearn.decoding.FREMRegressor"]], "__init__() (nilearn.decoding.fremregressor method)": [[248, "nilearn.decoding.FREMRegressor.__init__"]], "decision_function() (nilearn.decoding.fremregressor method)": [[248, "nilearn.decoding.FREMRegressor.decision_function"]], "fit() (nilearn.decoding.fremregressor method)": [[248, "nilearn.decoding.FREMRegressor.fit"]], "get_metadata_routing() (nilearn.decoding.fremregressor method)": [[248, "nilearn.decoding.FREMRegressor.get_metadata_routing"]], "get_params() (nilearn.decoding.fremregressor method)": [[248, "nilearn.decoding.FREMRegressor.get_params"]], "predict() (nilearn.decoding.fremregressor method)": [[248, "nilearn.decoding.FREMRegressor.predict"]], "score() (nilearn.decoding.fremregressor method)": [[248, "nilearn.decoding.FREMRegressor.score"]], "set_fit_request() (nilearn.decoding.fremregressor method)": [[248, "nilearn.decoding.FREMRegressor.set_fit_request"]], "set_params() (nilearn.decoding.fremregressor method)": [[248, "nilearn.decoding.FREMRegressor.set_params"]], "set_score_request() (nilearn.decoding.fremregressor method)": [[248, "nilearn.decoding.FREMRegressor.set_score_request"]], "searchlight (class in nilearn.decoding)": [[249, "nilearn.decoding.SearchLight"]], "__init__() (nilearn.decoding.searchlight method)": [[249, "nilearn.decoding.SearchLight.__init__"]], "fit() (nilearn.decoding.searchlight method)": [[249, "nilearn.decoding.SearchLight.fit"]], "get_metadata_routing() (nilearn.decoding.searchlight method)": [[249, "nilearn.decoding.SearchLight.get_metadata_routing"]], "get_params() (nilearn.decoding.searchlight method)": [[249, "nilearn.decoding.SearchLight.get_params"]], "set_fit_request() (nilearn.decoding.searchlight method)": [[249, "nilearn.decoding.SearchLight.set_fit_request"]], "set_params() (nilearn.decoding.searchlight method)": [[249, "nilearn.decoding.SearchLight.set_params"]], "supported_losses (nilearn.decoding.spacenetclassifier attribute)": [[250, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_LOSSES"]], "supported_penalties (nilearn.decoding.spacenetclassifier attribute)": [[250, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_PENALTIES"]], "spacenetclassifier (class in nilearn.decoding)": [[250, "nilearn.decoding.SpaceNetClassifier"]], "__init__() (nilearn.decoding.spacenetclassifier method)": [[250, "nilearn.decoding.SpaceNetClassifier.__init__"]], "check_params() (nilearn.decoding.spacenetclassifier method)": [[250, "nilearn.decoding.SpaceNetClassifier.check_params"]], "decision_function() (nilearn.decoding.spacenetclassifier method)": [[250, "nilearn.decoding.SpaceNetClassifier.decision_function"]], "fit() (nilearn.decoding.spacenetclassifier method)": [[250, "nilearn.decoding.SpaceNetClassifier.fit"]], "get_metadata_routing() (nilearn.decoding.spacenetclassifier method)": [[250, "nilearn.decoding.SpaceNetClassifier.get_metadata_routing"]], "get_params() (nilearn.decoding.spacenetclassifier method)": [[250, "nilearn.decoding.SpaceNetClassifier.get_params"]], "predict() (nilearn.decoding.spacenetclassifier method)": [[250, "nilearn.decoding.SpaceNetClassifier.predict"]], "score() (nilearn.decoding.spacenetclassifier method)": [[250, "nilearn.decoding.SpaceNetClassifier.score"]], "set_fit_request() (nilearn.decoding.spacenetclassifier method)": [[250, "nilearn.decoding.SpaceNetClassifier.set_fit_request"]], "set_params() (nilearn.decoding.spacenetclassifier method)": [[250, "nilearn.decoding.SpaceNetClassifier.set_params"]], "set_score_request() (nilearn.decoding.spacenetclassifier method)": [[250, "nilearn.decoding.SpaceNetClassifier.set_score_request"]], "supported_losses (nilearn.decoding.spacenetregressor attribute)": [[251, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_LOSSES"]], "supported_penalties (nilearn.decoding.spacenetregressor attribute)": [[251, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_PENALTIES"]], "spacenetregressor (class in nilearn.decoding)": [[251, "nilearn.decoding.SpaceNetRegressor"]], "__init__() (nilearn.decoding.spacenetregressor method)": [[251, "nilearn.decoding.SpaceNetRegressor.__init__"]], "check_params() (nilearn.decoding.spacenetregressor method)": [[251, "nilearn.decoding.SpaceNetRegressor.check_params"]], "decision_function() (nilearn.decoding.spacenetregressor method)": [[251, "nilearn.decoding.SpaceNetRegressor.decision_function"]], "fit() (nilearn.decoding.spacenetregressor method)": [[251, "nilearn.decoding.SpaceNetRegressor.fit"]], "get_metadata_routing() (nilearn.decoding.spacenetregressor method)": [[251, "nilearn.decoding.SpaceNetRegressor.get_metadata_routing"]], "get_params() (nilearn.decoding.spacenetregressor method)": [[251, "nilearn.decoding.SpaceNetRegressor.get_params"]], "predict() (nilearn.decoding.spacenetregressor method)": [[251, "nilearn.decoding.SpaceNetRegressor.predict"]], "score() (nilearn.decoding.spacenetregressor method)": [[251, "nilearn.decoding.SpaceNetRegressor.score"]], "set_fit_request() (nilearn.decoding.spacenetregressor method)": [[251, "nilearn.decoding.SpaceNetRegressor.set_fit_request"]], "set_params() (nilearn.decoding.spacenetregressor method)": [[251, "nilearn.decoding.SpaceNetRegressor.set_params"]], "set_score_request() (nilearn.decoding.spacenetregressor method)": [[251, "nilearn.decoding.SpaceNetRegressor.set_score_request"]], "canica (class in nilearn.decomposition)": [[252, "nilearn.decomposition.CanICA"]], "__init__() (nilearn.decomposition.canica method)": [[252, "nilearn.decomposition.CanICA.__init__"]], "fit() (nilearn.decomposition.canica method)": [[252, "nilearn.decomposition.CanICA.fit"]], "fit_transform() (nilearn.decomposition.canica method)": [[252, "nilearn.decomposition.CanICA.fit_transform"]], "get_metadata_routing() (nilearn.decomposition.canica method)": [[252, "nilearn.decomposition.CanICA.get_metadata_routing"]], "get_params() (nilearn.decomposition.canica method)": [[252, "nilearn.decomposition.CanICA.get_params"]], "inverse_transform() (nilearn.decomposition.canica method)": [[252, "nilearn.decomposition.CanICA.inverse_transform"]], "score() (nilearn.decomposition.canica method)": [[252, "nilearn.decomposition.CanICA.score"]], "set_fit_request() (nilearn.decomposition.canica method)": [[252, "nilearn.decomposition.CanICA.set_fit_request"]], "set_inverse_transform_request() (nilearn.decomposition.canica method)": [[252, "nilearn.decomposition.CanICA.set_inverse_transform_request"]], "set_output() (nilearn.decomposition.canica method)": [[252, "nilearn.decomposition.CanICA.set_output"]], "set_params() (nilearn.decomposition.canica method)": [[252, "nilearn.decomposition.CanICA.set_params"]], "set_score_request() (nilearn.decomposition.canica method)": [[252, "nilearn.decomposition.CanICA.set_score_request"]], "set_transform_request() (nilearn.decomposition.canica method)": [[252, "nilearn.decomposition.CanICA.set_transform_request"]], "transform() (nilearn.decomposition.canica method)": [[252, "nilearn.decomposition.CanICA.transform"]], "dictlearning (class in nilearn.decomposition)": [[253, "nilearn.decomposition.DictLearning"]], "__init__() (nilearn.decomposition.dictlearning method)": [[253, "nilearn.decomposition.DictLearning.__init__"]], "fit() (nilearn.decomposition.dictlearning method)": [[253, "nilearn.decomposition.DictLearning.fit"]], "fit_transform() (nilearn.decomposition.dictlearning method)": [[253, "nilearn.decomposition.DictLearning.fit_transform"]], "get_metadata_routing() (nilearn.decomposition.dictlearning method)": [[253, "nilearn.decomposition.DictLearning.get_metadata_routing"]], "get_params() (nilearn.decomposition.dictlearning method)": [[253, "nilearn.decomposition.DictLearning.get_params"]], "inverse_transform() (nilearn.decomposition.dictlearning method)": [[253, "nilearn.decomposition.DictLearning.inverse_transform"]], "score() (nilearn.decomposition.dictlearning method)": [[253, "nilearn.decomposition.DictLearning.score"]], "set_fit_request() (nilearn.decomposition.dictlearning method)": [[253, "nilearn.decomposition.DictLearning.set_fit_request"]], "set_inverse_transform_request() (nilearn.decomposition.dictlearning method)": [[253, "nilearn.decomposition.DictLearning.set_inverse_transform_request"]], "set_output() (nilearn.decomposition.dictlearning method)": [[253, "nilearn.decomposition.DictLearning.set_output"]], "set_params() (nilearn.decomposition.dictlearning method)": [[253, "nilearn.decomposition.DictLearning.set_params"]], "set_score_request() (nilearn.decomposition.dictlearning method)": [[253, "nilearn.decomposition.DictLearning.set_score_request"]], "set_transform_request() (nilearn.decomposition.dictlearning method)": [[253, "nilearn.decomposition.DictLearning.set_transform_request"]], "transform() (nilearn.decomposition.dictlearning method)": [[253, "nilearn.decomposition.DictLearning.transform"]], "armodel (class in nilearn.glm)": [[254, "nilearn.glm.ARModel"]], "__init__() (nilearn.glm.armodel method)": [[254, "nilearn.glm.ARModel.__init__"]], "fit() (nilearn.glm.armodel method)": [[254, "nilearn.glm.ARModel.fit"]], "initialize() (nilearn.glm.armodel method)": [[254, "nilearn.glm.ARModel.initialize"]], "logl() (nilearn.glm.armodel method)": [[254, "nilearn.glm.ARModel.logL"]], "whiten() (nilearn.glm.armodel method)": [[254, "nilearn.glm.ARModel.whiten"]], "contrast (class in nilearn.glm)": [[255, "nilearn.glm.Contrast"]], "__init__() (nilearn.glm.contrast method)": [[255, "nilearn.glm.Contrast.__init__"]], "effect_size() (nilearn.glm.contrast method)": [[255, "nilearn.glm.Contrast.effect_size"]], "effect_variance() (nilearn.glm.contrast method)": [[255, "nilearn.glm.Contrast.effect_variance"]], "one_minus_pvalue() (nilearn.glm.contrast method)": [[255, "nilearn.glm.Contrast.one_minus_pvalue"]], "p_value() (nilearn.glm.contrast method)": [[255, "nilearn.glm.Contrast.p_value"]], "stat() (nilearn.glm.contrast method)": [[255, "nilearn.glm.Contrast.stat"]], "z_score() (nilearn.glm.contrast method)": [[255, "nilearn.glm.Contrast.z_score"]], "fcontrastresults (class in nilearn.glm)": [[256, "nilearn.glm.FContrastResults"]], "__init__() (nilearn.glm.fcontrastresults method)": [[256, "nilearn.glm.FContrastResults.__init__"]], "fcontrast() (nilearn.glm.likelihoodmodelresults method)": [[257, "nilearn.glm.LikelihoodModelResults.Fcontrast"]], "likelihoodmodelresults (class in nilearn.glm)": [[257, "nilearn.glm.LikelihoodModelResults"]], "tcontrast() (nilearn.glm.likelihoodmodelresults method)": [[257, "nilearn.glm.LikelihoodModelResults.Tcontrast"]], "__init__() (nilearn.glm.likelihoodmodelresults method)": [[257, "nilearn.glm.LikelihoodModelResults.__init__"]], "conf_int() (nilearn.glm.likelihoodmodelresults method)": [[257, "nilearn.glm.LikelihoodModelResults.conf_int"]], "logl() (nilearn.glm.likelihoodmodelresults method)": [[257, "nilearn.glm.LikelihoodModelResults.logL"]], "t() (nilearn.glm.likelihoodmodelresults method)": [[257, "nilearn.glm.LikelihoodModelResults.t"]], "vcov() (nilearn.glm.likelihoodmodelresults method)": [[257, "nilearn.glm.LikelihoodModelResults.vcov"]], "olsmodel (class in nilearn.glm)": [[258, "nilearn.glm.OLSModel"]], "__init__() (nilearn.glm.olsmodel method)": [[258, "nilearn.glm.OLSModel.__init__"]], "fit() (nilearn.glm.olsmodel method)": [[258, "nilearn.glm.OLSModel.fit"]], "initialize() (nilearn.glm.olsmodel method)": [[258, "nilearn.glm.OLSModel.initialize"]], "logl() (nilearn.glm.olsmodel method)": [[258, "nilearn.glm.OLSModel.logL"]], "whiten() (nilearn.glm.olsmodel method)": [[258, "nilearn.glm.OLSModel.whiten"]], "fcontrast() (nilearn.glm.regressionresults method)": [[259, "nilearn.glm.RegressionResults.Fcontrast"]], "mse() (nilearn.glm.regressionresults method)": [[259, "nilearn.glm.RegressionResults.MSE"]], "regressionresults (class in nilearn.glm)": [[259, "nilearn.glm.RegressionResults"]], "sse() (nilearn.glm.regressionresults method)": [[259, "nilearn.glm.RegressionResults.SSE"]], "tcontrast() (nilearn.glm.regressionresults method)": [[259, "nilearn.glm.RegressionResults.Tcontrast"]], "__init__() (nilearn.glm.regressionresults method)": [[259, "nilearn.glm.RegressionResults.__init__"]], "conf_int() (nilearn.glm.regressionresults method)": [[259, "nilearn.glm.RegressionResults.conf_int"]], "logl() (nilearn.glm.regressionresults method)": [[259, "nilearn.glm.RegressionResults.logL"]], "normalized_residuals() (nilearn.glm.regressionresults method)": [[259, "nilearn.glm.RegressionResults.normalized_residuals"]], "predicted() (nilearn.glm.regressionresults method)": [[259, "nilearn.glm.RegressionResults.predicted"]], "r_square() (nilearn.glm.regressionresults method)": [[259, "nilearn.glm.RegressionResults.r_square"]], "residuals() (nilearn.glm.regressionresults method)": [[259, "nilearn.glm.RegressionResults.residuals"]], "t() (nilearn.glm.regressionresults method)": [[259, "nilearn.glm.RegressionResults.t"]], "vcov() (nilearn.glm.regressionresults method)": [[259, "nilearn.glm.RegressionResults.vcov"]], "fcontrast() (nilearn.glm.simpleregressionresults method)": [[260, "nilearn.glm.SimpleRegressionResults.Fcontrast"]], "simpleregressionresults (class in nilearn.glm)": [[260, "nilearn.glm.SimpleRegressionResults"]], "tcontrast() (nilearn.glm.simpleregressionresults method)": [[260, "nilearn.glm.SimpleRegressionResults.Tcontrast"]], "__init__() (nilearn.glm.simpleregressionresults method)": [[260, "nilearn.glm.SimpleRegressionResults.__init__"]], "conf_int() (nilearn.glm.simpleregressionresults method)": [[260, "nilearn.glm.SimpleRegressionResults.conf_int"]], "logl() (nilearn.glm.simpleregressionresults method)": [[260, "nilearn.glm.SimpleRegressionResults.logL"]], "normalized_residuals() (nilearn.glm.simpleregressionresults method)": [[260, "nilearn.glm.SimpleRegressionResults.normalized_residuals"]], "predicted() (nilearn.glm.simpleregressionresults method)": [[260, "nilearn.glm.SimpleRegressionResults.predicted"]], "residuals() (nilearn.glm.simpleregressionresults method)": [[260, "nilearn.glm.SimpleRegressionResults.residuals"]], "t() (nilearn.glm.simpleregressionresults method)": [[260, "nilearn.glm.SimpleRegressionResults.t"]], "vcov() (nilearn.glm.simpleregressionresults method)": [[260, "nilearn.glm.SimpleRegressionResults.vcov"]], "tcontrastresults (class in nilearn.glm)": [[261, "nilearn.glm.TContrastResults"]], "__init__() (nilearn.glm.tcontrastresults method)": [[261, "nilearn.glm.TContrastResults.__init__"]], "cluster_level_inference() (in module nilearn.glm)": [[262, "nilearn.glm.cluster_level_inference"]], "compute_contrast() (in module nilearn.glm)": [[263, "nilearn.glm.compute_contrast"]], "compute_fixed_effects() (in module nilearn.glm)": [[264, "nilearn.glm.compute_fixed_effects"]], "expression_to_contrast_vector() (in module nilearn.glm)": [[265, "nilearn.glm.expression_to_contrast_vector"]], "fdr_threshold() (in module nilearn.glm)": [[266, "nilearn.glm.fdr_threshold"]], "firstlevelmodel (class in nilearn.glm.first_level)": [[267, "nilearn.glm.first_level.FirstLevelModel"]], "__init__() (nilearn.glm.first_level.firstlevelmodel method)": [[267, "nilearn.glm.first_level.FirstLevelModel.__init__"]], "compute_contrast() (nilearn.glm.first_level.firstlevelmodel method)": [[267, "nilearn.glm.first_level.FirstLevelModel.compute_contrast"]], "fit() (nilearn.glm.first_level.firstlevelmodel method)": [[267, "nilearn.glm.first_level.FirstLevelModel.fit"]], "fit_transform() (nilearn.glm.first_level.firstlevelmodel method)": [[267, "nilearn.glm.first_level.FirstLevelModel.fit_transform"]], "generate_report() (nilearn.glm.first_level.firstlevelmodel method)": [[267, "nilearn.glm.first_level.FirstLevelModel.generate_report"]], "get_metadata_routing() (nilearn.glm.first_level.firstlevelmodel method)": [[267, "nilearn.glm.first_level.FirstLevelModel.get_metadata_routing"]], "get_params() (nilearn.glm.first_level.firstlevelmodel method)": [[267, "nilearn.glm.first_level.FirstLevelModel.get_params"]], "predicted() (nilearn.glm.first_level.firstlevelmodel method)": [[267, "nilearn.glm.first_level.FirstLevelModel.predicted"]], "r_square() (nilearn.glm.first_level.firstlevelmodel method)": [[267, "nilearn.glm.first_level.FirstLevelModel.r_square"]], "residuals() (nilearn.glm.first_level.firstlevelmodel method)": [[267, "nilearn.glm.first_level.FirstLevelModel.residuals"]], "scaling_axis (nilearn.glm.first_level.firstlevelmodel property)": [[267, "nilearn.glm.first_level.FirstLevelModel.scaling_axis"]], "set_fit_request() (nilearn.glm.first_level.firstlevelmodel method)": [[267, "nilearn.glm.first_level.FirstLevelModel.set_fit_request"]], "set_output() (nilearn.glm.first_level.firstlevelmodel method)": [[267, "nilearn.glm.first_level.FirstLevelModel.set_output"]], "set_params() (nilearn.glm.first_level.firstlevelmodel method)": [[267, "nilearn.glm.first_level.FirstLevelModel.set_params"]], "check_design_matrix() (in module nilearn.glm.first_level)": [[268, "nilearn.glm.first_level.check_design_matrix"]], "compute_regressor() (in module nilearn.glm.first_level)": [[269, "nilearn.glm.first_level.compute_regressor"]], "first_level_from_bids() (in module nilearn.glm.first_level)": [[270, "nilearn.glm.first_level.first_level_from_bids"]], "glover_dispersion_derivative() (in module nilearn.glm.first_level)": [[271, "nilearn.glm.first_level.glover_dispersion_derivative"]], "glover_hrf() (in module nilearn.glm.first_level)": [[272, "nilearn.glm.first_level.glover_hrf"]], "glover_time_derivative() (in module nilearn.glm.first_level)": [[273, "nilearn.glm.first_level.glover_time_derivative"]], "make_first_level_design_matrix() (in module nilearn.glm.first_level)": [[274, "nilearn.glm.first_level.make_first_level_design_matrix"]], "mean_scaling() (in module nilearn.glm.first_level)": [[275, "nilearn.glm.first_level.mean_scaling"]], "run_glm() (in module nilearn.glm.first_level)": [[276, "nilearn.glm.first_level.run_glm"]], "spm_dispersion_derivative() (in module nilearn.glm.first_level)": [[277, "nilearn.glm.first_level.spm_dispersion_derivative"]], "spm_hrf() (in module nilearn.glm.first_level)": [[278, "nilearn.glm.first_level.spm_hrf"]], "spm_time_derivative() (in module nilearn.glm.first_level)": [[279, "nilearn.glm.first_level.spm_time_derivative"]], "secondlevelmodel (class in nilearn.glm.second_level)": [[280, "nilearn.glm.second_level.SecondLevelModel"]], "__init__() (nilearn.glm.second_level.secondlevelmodel method)": [[280, "nilearn.glm.second_level.SecondLevelModel.__init__"]], "compute_contrast() (nilearn.glm.second_level.secondlevelmodel method)": [[280, "nilearn.glm.second_level.SecondLevelModel.compute_contrast"]], "fit() (nilearn.glm.second_level.secondlevelmodel method)": [[280, "nilearn.glm.second_level.SecondLevelModel.fit"]], "fit_transform() (nilearn.glm.second_level.secondlevelmodel method)": [[280, "nilearn.glm.second_level.SecondLevelModel.fit_transform"]], "generate_report() (nilearn.glm.second_level.secondlevelmodel method)": [[280, "nilearn.glm.second_level.SecondLevelModel.generate_report"]], "get_metadata_routing() (nilearn.glm.second_level.secondlevelmodel method)": [[280, "nilearn.glm.second_level.SecondLevelModel.get_metadata_routing"]], "get_params() (nilearn.glm.second_level.secondlevelmodel method)": [[280, "nilearn.glm.second_level.SecondLevelModel.get_params"]], "predicted() (nilearn.glm.second_level.secondlevelmodel method)": [[280, "nilearn.glm.second_level.SecondLevelModel.predicted"]], "r_square() (nilearn.glm.second_level.secondlevelmodel method)": [[280, "nilearn.glm.second_level.SecondLevelModel.r_square"]], "residuals() (nilearn.glm.second_level.secondlevelmodel method)": [[280, "nilearn.glm.second_level.SecondLevelModel.residuals"]], "set_fit_request() (nilearn.glm.second_level.secondlevelmodel method)": [[280, "nilearn.glm.second_level.SecondLevelModel.set_fit_request"]], "set_output() (nilearn.glm.second_level.secondlevelmodel method)": [[280, "nilearn.glm.second_level.SecondLevelModel.set_output"]], "set_params() (nilearn.glm.second_level.secondlevelmodel method)": [[280, "nilearn.glm.second_level.SecondLevelModel.set_params"]], "make_second_level_design_matrix() (in module nilearn.glm.second_level)": [[281, "nilearn.glm.second_level.make_second_level_design_matrix"]], "non_parametric_inference() (in module nilearn.glm.second_level)": [[282, "nilearn.glm.second_level.non_parametric_inference"]], "threshold_stats_img() (in module nilearn.glm)": [[283, "nilearn.glm.threshold_stats_img"]], "binarize_img() (in module nilearn.image)": [[284, "nilearn.image.binarize_img"]], "clean_img() (in module nilearn.image)": [[285, "nilearn.image.clean_img"]], "concat_imgs() (in module nilearn.image)": [[286, "nilearn.image.concat_imgs"]], "coord_transform() (in module nilearn.image)": [[287, "nilearn.image.coord_transform"]], "copy_img() (in module nilearn.image)": [[288, "nilearn.image.copy_img"]], "crop_img() (in module nilearn.image)": [[289, "nilearn.image.crop_img"]], "get_data() (in module nilearn.image)": [[290, "nilearn.image.get_data"]], "high_variance_confounds() (in module nilearn.image)": [[291, "nilearn.image.high_variance_confounds"]], "index_img() (in module nilearn.image)": [[292, "nilearn.image.index_img"]], "iter_img() (in module nilearn.image)": [[293, "nilearn.image.iter_img"]], "largest_connected_component_img() (in module nilearn.image)": [[294, "nilearn.image.largest_connected_component_img"]], "load_img() (in module nilearn.image)": [[295, "nilearn.image.load_img"]], "math_img() (in module nilearn.image)": [[296, "nilearn.image.math_img"]], "mean_img() (in module nilearn.image)": [[297, "nilearn.image.mean_img"]], "new_img_like() (in module nilearn.image)": [[298, "nilearn.image.new_img_like"]], "reorder_img() (in module nilearn.image)": [[299, "nilearn.image.reorder_img"]], "resample_img() (in module nilearn.image)": [[300, "nilearn.image.resample_img"]], "resample_to_img() (in module nilearn.image)": [[301, "nilearn.image.resample_to_img"]], "smooth_img() (in module nilearn.image)": [[302, "nilearn.image.smooth_img"]], "swap_img_hemispheres() (in module nilearn.image)": [[303, "nilearn.image.swap_img_hemispheres"]], "threshold_img() (in module nilearn.image)": [[304, "nilearn.image.threshold_img"]], "get_bids_files() (in module nilearn.interfaces.bids)": [[305, "nilearn.interfaces.bids.get_bids_files"]], "parse_bids_filename() (in module nilearn.interfaces.bids)": [[306, "nilearn.interfaces.bids.parse_bids_filename"]], "save_glm_to_bids() (in module nilearn.interfaces.bids)": [[307, "nilearn.interfaces.bids.save_glm_to_bids"]], "load_confounds() (in module nilearn.interfaces.fmriprep)": [[308, "nilearn.interfaces.fmriprep.load_confounds"]], "load_confounds_strategy() (in module nilearn.interfaces.fmriprep)": [[309, "nilearn.interfaces.fmriprep.load_confounds_strategy"]], "get_design_from_fslmat() (in module nilearn.interfaces.fsl)": [[310, "nilearn.interfaces.fsl.get_design_from_fslmat"]], "basemasker (class in nilearn.maskers)": [[311, "nilearn.maskers.BaseMasker"]], "__init__() (nilearn.maskers.basemasker method)": [[311, "nilearn.maskers.BaseMasker.__init__"]], "fit_transform() (nilearn.maskers.basemasker method)": [[311, "nilearn.maskers.BaseMasker.fit_transform"]], "get_metadata_routing() (nilearn.maskers.basemasker method)": [[311, "nilearn.maskers.BaseMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.basemasker method)": [[311, "nilearn.maskers.BaseMasker.get_params"]], "inverse_transform() (nilearn.maskers.basemasker method)": [[311, "nilearn.maskers.BaseMasker.inverse_transform"]], "set_output() (nilearn.maskers.basemasker method)": [[311, "nilearn.maskers.BaseMasker.set_output"]], "set_params() (nilearn.maskers.basemasker method)": [[311, "nilearn.maskers.BaseMasker.set_params"]], "set_transform_request() (nilearn.maskers.basemasker method)": [[311, "nilearn.maskers.BaseMasker.set_transform_request"]], "transform() (nilearn.maskers.basemasker method)": [[311, "nilearn.maskers.BaseMasker.transform"]], "transform_single_imgs() (nilearn.maskers.basemasker method)": [[311, "nilearn.maskers.BaseMasker.transform_single_imgs"]], "multiniftilabelsmasker (class in nilearn.maskers)": [[312, "nilearn.maskers.MultiNiftiLabelsMasker"]], "__init__() (nilearn.maskers.multiniftilabelsmasker method)": [[312, "nilearn.maskers.MultiNiftiLabelsMasker.__init__"]], "fit() (nilearn.maskers.multiniftilabelsmasker method)": [[312, "nilearn.maskers.MultiNiftiLabelsMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[312, "nilearn.maskers.MultiNiftiLabelsMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftilabelsmasker method)": [[312, "nilearn.maskers.MultiNiftiLabelsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.multiniftilabelsmasker method)": [[312, "nilearn.maskers.MultiNiftiLabelsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.multiniftilabelsmasker method)": [[312, "nilearn.maskers.MultiNiftiLabelsMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[312, "nilearn.maskers.MultiNiftiLabelsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.multiniftilabelsmasker method)": [[312, "nilearn.maskers.MultiNiftiLabelsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[312, "nilearn.maskers.MultiNiftiLabelsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.multiniftilabelsmasker method)": [[312, "nilearn.maskers.MultiNiftiLabelsMasker.set_output"]], "set_params() (nilearn.maskers.multiniftilabelsmasker method)": [[312, "nilearn.maskers.MultiNiftiLabelsMasker.set_params"]], "set_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[312, "nilearn.maskers.MultiNiftiLabelsMasker.set_transform_request"]], "transform() (nilearn.maskers.multiniftilabelsmasker method)": [[312, "nilearn.maskers.MultiNiftiLabelsMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[312, "nilearn.maskers.MultiNiftiLabelsMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[312, "nilearn.maskers.MultiNiftiLabelsMasker.transform_single_imgs"]], "multiniftimapsmasker (class in nilearn.maskers)": [[313, "nilearn.maskers.MultiNiftiMapsMasker"]], "__init__() (nilearn.maskers.multiniftimapsmasker method)": [[313, "nilearn.maskers.MultiNiftiMapsMasker.__init__"]], "fit() (nilearn.maskers.multiniftimapsmasker method)": [[313, "nilearn.maskers.MultiNiftiMapsMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftimapsmasker method)": [[313, "nilearn.maskers.MultiNiftiMapsMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftimapsmasker method)": [[313, "nilearn.maskers.MultiNiftiMapsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.multiniftimapsmasker method)": [[313, "nilearn.maskers.MultiNiftiMapsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.multiniftimapsmasker method)": [[313, "nilearn.maskers.MultiNiftiMapsMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftimapsmasker method)": [[313, "nilearn.maskers.MultiNiftiMapsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.multiniftimapsmasker method)": [[313, "nilearn.maskers.MultiNiftiMapsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[313, "nilearn.maskers.MultiNiftiMapsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.multiniftimapsmasker method)": [[313, "nilearn.maskers.MultiNiftiMapsMasker.set_output"]], "set_params() (nilearn.maskers.multiniftimapsmasker method)": [[313, "nilearn.maskers.MultiNiftiMapsMasker.set_params"]], "set_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[313, "nilearn.maskers.MultiNiftiMapsMasker.set_transform_request"]], "transform() (nilearn.maskers.multiniftimapsmasker method)": [[313, "nilearn.maskers.MultiNiftiMapsMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[313, "nilearn.maskers.MultiNiftiMapsMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[313, "nilearn.maskers.MultiNiftiMapsMasker.transform_single_imgs"]], "multiniftimasker (class in nilearn.maskers)": [[314, "nilearn.maskers.MultiNiftiMasker"]], "__init__() (nilearn.maskers.multiniftimasker method)": [[314, "nilearn.maskers.MultiNiftiMasker.__init__"]], "fit() (nilearn.maskers.multiniftimasker method)": [[314, "nilearn.maskers.MultiNiftiMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftimasker method)": [[314, "nilearn.maskers.MultiNiftiMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftimasker method)": [[314, "nilearn.maskers.MultiNiftiMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.multiniftimasker method)": [[314, "nilearn.maskers.MultiNiftiMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.multiniftimasker method)": [[314, "nilearn.maskers.MultiNiftiMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftimasker method)": [[314, "nilearn.maskers.MultiNiftiMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.multiniftimasker method)": [[314, "nilearn.maskers.MultiNiftiMasker.set_fit_request"]], "set_output() (nilearn.maskers.multiniftimasker method)": [[314, "nilearn.maskers.MultiNiftiMasker.set_output"]], "set_params() (nilearn.maskers.multiniftimasker method)": [[314, "nilearn.maskers.MultiNiftiMasker.set_params"]], "set_transform_request() (nilearn.maskers.multiniftimasker method)": [[314, "nilearn.maskers.MultiNiftiMasker.set_transform_request"]], "transform() (nilearn.maskers.multiniftimasker method)": [[314, "nilearn.maskers.MultiNiftiMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftimasker method)": [[314, "nilearn.maskers.MultiNiftiMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftimasker method)": [[314, "nilearn.maskers.MultiNiftiMasker.transform_single_imgs"]], "niftilabelsmasker (class in nilearn.maskers)": [[315, "nilearn.maskers.NiftiLabelsMasker"]], "__init__() (nilearn.maskers.niftilabelsmasker method)": [[315, "nilearn.maskers.NiftiLabelsMasker.__init__"]], "fit() (nilearn.maskers.niftilabelsmasker method)": [[315, "nilearn.maskers.NiftiLabelsMasker.fit"]], "fit_transform() (nilearn.maskers.niftilabelsmasker method)": [[315, "nilearn.maskers.NiftiLabelsMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftilabelsmasker method)": [[315, "nilearn.maskers.NiftiLabelsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftilabelsmasker method)": [[315, "nilearn.maskers.NiftiLabelsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftilabelsmasker method)": [[315, "nilearn.maskers.NiftiLabelsMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftilabelsmasker method)": [[315, "nilearn.maskers.NiftiLabelsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.niftilabelsmasker method)": [[315, "nilearn.maskers.NiftiLabelsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[315, "nilearn.maskers.NiftiLabelsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.niftilabelsmasker method)": [[315, "nilearn.maskers.NiftiLabelsMasker.set_output"]], "set_params() (nilearn.maskers.niftilabelsmasker method)": [[315, "nilearn.maskers.NiftiLabelsMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[315, "nilearn.maskers.NiftiLabelsMasker.set_transform_request"]], "transform() (nilearn.maskers.niftilabelsmasker method)": [[315, "nilearn.maskers.NiftiLabelsMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftilabelsmasker method)": [[315, "nilearn.maskers.NiftiLabelsMasker.transform_single_imgs"]], "niftimapsmasker (class in nilearn.maskers)": [[316, "nilearn.maskers.NiftiMapsMasker"]], "__init__() (nilearn.maskers.niftimapsmasker method)": [[316, "nilearn.maskers.NiftiMapsMasker.__init__"]], "fit() (nilearn.maskers.niftimapsmasker method)": [[316, "nilearn.maskers.NiftiMapsMasker.fit"]], "fit_transform() (nilearn.maskers.niftimapsmasker method)": [[316, "nilearn.maskers.NiftiMapsMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftimapsmasker method)": [[316, "nilearn.maskers.NiftiMapsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftimapsmasker method)": [[316, "nilearn.maskers.NiftiMapsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftimapsmasker method)": [[316, "nilearn.maskers.NiftiMapsMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftimapsmasker method)": [[316, "nilearn.maskers.NiftiMapsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.niftimapsmasker method)": [[316, "nilearn.maskers.NiftiMapsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.niftimapsmasker method)": [[316, "nilearn.maskers.NiftiMapsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.niftimapsmasker method)": [[316, "nilearn.maskers.NiftiMapsMasker.set_output"]], "set_params() (nilearn.maskers.niftimapsmasker method)": [[316, "nilearn.maskers.NiftiMapsMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftimapsmasker method)": [[316, "nilearn.maskers.NiftiMapsMasker.set_transform_request"]], "transform() (nilearn.maskers.niftimapsmasker method)": [[316, "nilearn.maskers.NiftiMapsMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftimapsmasker method)": [[316, "nilearn.maskers.NiftiMapsMasker.transform_single_imgs"]], "niftimasker (class in nilearn.maskers)": [[317, "nilearn.maskers.NiftiMasker"]], "__init__() (nilearn.maskers.niftimasker method)": [[317, "nilearn.maskers.NiftiMasker.__init__"]], "fit() (nilearn.maskers.niftimasker method)": [[317, "nilearn.maskers.NiftiMasker.fit"]], "fit_transform() (nilearn.maskers.niftimasker method)": [[317, "nilearn.maskers.NiftiMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftimasker method)": [[317, "nilearn.maskers.NiftiMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftimasker method)": [[317, "nilearn.maskers.NiftiMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftimasker method)": [[317, "nilearn.maskers.NiftiMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftimasker method)": [[317, "nilearn.maskers.NiftiMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.niftimasker method)": [[317, "nilearn.maskers.NiftiMasker.set_fit_request"]], "set_output() (nilearn.maskers.niftimasker method)": [[317, "nilearn.maskers.NiftiMasker.set_output"]], "set_params() (nilearn.maskers.niftimasker method)": [[317, "nilearn.maskers.NiftiMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftimasker method)": [[317, "nilearn.maskers.NiftiMasker.set_transform_request"]], "transform() (nilearn.maskers.niftimasker method)": [[317, "nilearn.maskers.NiftiMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftimasker method)": [[317, "nilearn.maskers.NiftiMasker.transform_single_imgs"]], "niftispheresmasker (class in nilearn.maskers)": [[318, "nilearn.maskers.NiftiSpheresMasker"]], "__init__() (nilearn.maskers.niftispheresmasker method)": [[318, "nilearn.maskers.NiftiSpheresMasker.__init__"]], "fit() (nilearn.maskers.niftispheresmasker method)": [[318, "nilearn.maskers.NiftiSpheresMasker.fit"]], "fit_transform() (nilearn.maskers.niftispheresmasker method)": [[318, "nilearn.maskers.NiftiSpheresMasker.fit_transform"]], "get_metadata_routing() (nilearn.maskers.niftispheresmasker method)": [[318, "nilearn.maskers.NiftiSpheresMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftispheresmasker method)": [[318, "nilearn.maskers.NiftiSpheresMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftispheresmasker method)": [[318, "nilearn.maskers.NiftiSpheresMasker.inverse_transform"]], "set_inverse_transform_request() (nilearn.maskers.niftispheresmasker method)": [[318, "nilearn.maskers.NiftiSpheresMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.niftispheresmasker method)": [[318, "nilearn.maskers.NiftiSpheresMasker.set_output"]], "set_params() (nilearn.maskers.niftispheresmasker method)": [[318, "nilearn.maskers.NiftiSpheresMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftispheresmasker method)": [[318, "nilearn.maskers.NiftiSpheresMasker.set_transform_request"]], "transform() (nilearn.maskers.niftispheresmasker method)": [[318, "nilearn.maskers.NiftiSpheresMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftispheresmasker method)": [[318, "nilearn.maskers.NiftiSpheresMasker.transform_single_imgs"]], "apply_mask() (in module nilearn.masking)": [[319, "nilearn.masking.apply_mask"]], "compute_background_mask() (in module nilearn.masking)": [[320, "nilearn.masking.compute_background_mask"]], "compute_brain_mask() (in module nilearn.masking)": [[321, "nilearn.masking.compute_brain_mask"]], "compute_epi_mask() (in module nilearn.masking)": [[322, "nilearn.masking.compute_epi_mask"]], "compute_multi_background_mask() (in module nilearn.masking)": [[323, "nilearn.masking.compute_multi_background_mask"]], "compute_multi_brain_mask() (in module nilearn.masking)": [[324, "nilearn.masking.compute_multi_brain_mask"]], "compute_multi_epi_mask() (in module nilearn.masking)": [[325, "nilearn.masking.compute_multi_epi_mask"]], "intersect_masks() (in module nilearn.masking)": [[326, "nilearn.masking.intersect_masks"]], "unmask() (in module nilearn.masking)": [[327, "nilearn.masking.unmask"]], "permuted_ols() (in module nilearn.mass_univariate)": [[328, "nilearn.mass_univariate.permuted_ols"]], "baseaxes (class in nilearn.plotting.displays)": [[329, "nilearn.plotting.displays.BaseAxes"]], "__init__() (nilearn.plotting.displays.baseaxes method)": [[329, "nilearn.plotting.displays.BaseAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[329, "nilearn.plotting.displays.BaseAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.baseaxes method)": [[329, "nilearn.plotting.displays.BaseAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.baseaxes method)": [[329, "nilearn.plotting.displays.BaseAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.baseaxes method)": [[329, "nilearn.plotting.displays.BaseAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.baseaxes method)": [[329, "nilearn.plotting.displays.BaseAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[329, "nilearn.plotting.displays.BaseAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.baseaxes method)": [[329, "nilearn.plotting.displays.BaseAxes.transform_to_2d"]], "baseslicer (class in nilearn.plotting.displays)": [[330, "nilearn.plotting.displays.BaseSlicer"]], "__init__() (nilearn.plotting.displays.baseslicer method)": [[330, "nilearn.plotting.displays.BaseSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.baseslicer method)": [[330, "nilearn.plotting.displays.BaseSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.baseslicer method)": [[330, "nilearn.plotting.displays.BaseSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.baseslicer method)": [[330, "nilearn.plotting.displays.BaseSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.baseslicer method)": [[330, "nilearn.plotting.displays.BaseSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.baseslicer method)": [[330, "nilearn.plotting.displays.BaseSlicer.annotate"]], "black_bg (nilearn.plotting.displays.baseslicer property)": [[330, "nilearn.plotting.displays.BaseSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.baseslicer property)": [[330, "nilearn.plotting.displays.BaseSlicer.brain_color"]], "close() (nilearn.plotting.displays.baseslicer method)": [[330, "nilearn.plotting.displays.BaseSlicer.close"]], "find_cut_coords() (nilearn.plotting.displays.baseslicer static method)": [[330, "nilearn.plotting.displays.BaseSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.baseslicer class method)": [[330, "nilearn.plotting.displays.BaseSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.baseslicer method)": [[330, "nilearn.plotting.displays.BaseSlicer.savefig"]], "title() (nilearn.plotting.displays.baseslicer method)": [[330, "nilearn.plotting.displays.BaseSlicer.title"]], "cutaxes (class in nilearn.plotting.displays)": [[331, "nilearn.plotting.displays.CutAxes"]], "__init__() (nilearn.plotting.displays.cutaxes method)": [[331, "nilearn.plotting.displays.CutAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[331, "nilearn.plotting.displays.CutAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.cutaxes method)": [[331, "nilearn.plotting.displays.CutAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.cutaxes method)": [[331, "nilearn.plotting.displays.CutAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.cutaxes method)": [[331, "nilearn.plotting.displays.CutAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.cutaxes method)": [[331, "nilearn.plotting.displays.CutAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[331, "nilearn.plotting.displays.CutAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.cutaxes method)": [[331, "nilearn.plotting.displays.CutAxes.transform_to_2d"]], "glassbrainaxes (class in nilearn.plotting.displays)": [[332, "nilearn.plotting.displays.GlassBrainAxes"]], "__init__() (nilearn.plotting.displays.glassbrainaxes method)": [[332, "nilearn.plotting.displays.GlassBrainAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[332, "nilearn.plotting.displays.GlassBrainAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[332, "nilearn.plotting.displays.GlassBrainAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.glassbrainaxes method)": [[332, "nilearn.plotting.displays.GlassBrainAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.glassbrainaxes method)": [[332, "nilearn.plotting.displays.GlassBrainAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.glassbrainaxes method)": [[332, "nilearn.plotting.displays.GlassBrainAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[332, "nilearn.plotting.displays.GlassBrainAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[332, "nilearn.plotting.displays.GlassBrainAxes.transform_to_2d"]], "lprojector (class in nilearn.plotting.displays)": [[333, "nilearn.plotting.displays.LProjector"]], "__init__() (nilearn.plotting.displays.lprojector method)": [[333, "nilearn.plotting.displays.LProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lprojector method)": [[333, "nilearn.plotting.displays.LProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lprojector method)": [[333, "nilearn.plotting.displays.LProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lprojector method)": [[333, "nilearn.plotting.displays.LProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lprojector method)": [[333, "nilearn.plotting.displays.LProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lprojector method)": [[333, "nilearn.plotting.displays.LProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lprojector method)": [[333, "nilearn.plotting.displays.LProjector.annotate"]], "black_bg (nilearn.plotting.displays.lprojector property)": [[333, "nilearn.plotting.displays.LProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lprojector property)": [[333, "nilearn.plotting.displays.LProjector.brain_color"]], "close() (nilearn.plotting.displays.lprojector method)": [[333, "nilearn.plotting.displays.LProjector.close"]], "draw_cross() (nilearn.plotting.displays.lprojector method)": [[333, "nilearn.plotting.displays.LProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lprojector class method)": [[333, "nilearn.plotting.displays.LProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lprojector class method)": [[333, "nilearn.plotting.displays.LProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lprojector method)": [[333, "nilearn.plotting.displays.LProjector.savefig"]], "title() (nilearn.plotting.displays.lprojector method)": [[333, "nilearn.plotting.displays.LProjector.title"]], "lrprojector (class in nilearn.plotting.displays)": [[334, "nilearn.plotting.displays.LRProjector"]], "__init__() (nilearn.plotting.displays.lrprojector method)": [[334, "nilearn.plotting.displays.LRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lrprojector method)": [[334, "nilearn.plotting.displays.LRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lrprojector method)": [[334, "nilearn.plotting.displays.LRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lrprojector method)": [[334, "nilearn.plotting.displays.LRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lrprojector method)": [[334, "nilearn.plotting.displays.LRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lrprojector method)": [[334, "nilearn.plotting.displays.LRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lrprojector method)": [[334, "nilearn.plotting.displays.LRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lrprojector property)": [[334, "nilearn.plotting.displays.LRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lrprojector property)": [[334, "nilearn.plotting.displays.LRProjector.brain_color"]], "close() (nilearn.plotting.displays.lrprojector method)": [[334, "nilearn.plotting.displays.LRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lrprojector method)": [[334, "nilearn.plotting.displays.LRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lrprojector class method)": [[334, "nilearn.plotting.displays.LRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lrprojector class method)": [[334, "nilearn.plotting.displays.LRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lrprojector method)": [[334, "nilearn.plotting.displays.LRProjector.savefig"]], "title() (nilearn.plotting.displays.lrprojector method)": [[334, "nilearn.plotting.displays.LRProjector.title"]], "lyrprojector (class in nilearn.plotting.displays)": [[335, "nilearn.plotting.displays.LYRProjector"]], "__init__() (nilearn.plotting.displays.lyrprojector method)": [[335, "nilearn.plotting.displays.LYRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lyrprojector method)": [[335, "nilearn.plotting.displays.LYRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lyrprojector method)": [[335, "nilearn.plotting.displays.LYRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lyrprojector method)": [[335, "nilearn.plotting.displays.LYRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lyrprojector method)": [[335, "nilearn.plotting.displays.LYRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lyrprojector method)": [[335, "nilearn.plotting.displays.LYRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lyrprojector method)": [[335, "nilearn.plotting.displays.LYRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lyrprojector property)": [[335, "nilearn.plotting.displays.LYRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lyrprojector property)": [[335, "nilearn.plotting.displays.LYRProjector.brain_color"]], "close() (nilearn.plotting.displays.lyrprojector method)": [[335, "nilearn.plotting.displays.LYRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lyrprojector method)": [[335, "nilearn.plotting.displays.LYRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lyrprojector class method)": [[335, "nilearn.plotting.displays.LYRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lyrprojector class method)": [[335, "nilearn.plotting.displays.LYRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lyrprojector method)": [[335, "nilearn.plotting.displays.LYRProjector.savefig"]], "title() (nilearn.plotting.displays.lyrprojector method)": [[335, "nilearn.plotting.displays.LYRProjector.title"]], "lyrzprojector (class in nilearn.plotting.displays)": [[336, "nilearn.plotting.displays.LYRZProjector"]], "__init__() (nilearn.plotting.displays.lyrzprojector method)": [[336, "nilearn.plotting.displays.LYRZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lyrzprojector method)": [[336, "nilearn.plotting.displays.LYRZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lyrzprojector method)": [[336, "nilearn.plotting.displays.LYRZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lyrzprojector method)": [[336, "nilearn.plotting.displays.LYRZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lyrzprojector method)": [[336, "nilearn.plotting.displays.LYRZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lyrzprojector method)": [[336, "nilearn.plotting.displays.LYRZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lyrzprojector method)": [[336, "nilearn.plotting.displays.LYRZProjector.annotate"]], "black_bg (nilearn.plotting.displays.lyrzprojector property)": [[336, "nilearn.plotting.displays.LYRZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lyrzprojector property)": [[336, "nilearn.plotting.displays.LYRZProjector.brain_color"]], "close() (nilearn.plotting.displays.lyrzprojector method)": [[336, "nilearn.plotting.displays.LYRZProjector.close"]], "draw_cross() (nilearn.plotting.displays.lyrzprojector method)": [[336, "nilearn.plotting.displays.LYRZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lyrzprojector class method)": [[336, "nilearn.plotting.displays.LYRZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lyrzprojector class method)": [[336, "nilearn.plotting.displays.LYRZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lyrzprojector method)": [[336, "nilearn.plotting.displays.LYRZProjector.savefig"]], "title() (nilearn.plotting.displays.lyrzprojector method)": [[336, "nilearn.plotting.displays.LYRZProjector.title"]], "lzrprojector (class in nilearn.plotting.displays)": [[337, "nilearn.plotting.displays.LZRProjector"]], "__init__() (nilearn.plotting.displays.lzrprojector method)": [[337, "nilearn.plotting.displays.LZRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lzrprojector method)": [[337, "nilearn.plotting.displays.LZRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lzrprojector method)": [[337, "nilearn.plotting.displays.LZRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lzrprojector method)": [[337, "nilearn.plotting.displays.LZRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lzrprojector method)": [[337, "nilearn.plotting.displays.LZRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lzrprojector method)": [[337, "nilearn.plotting.displays.LZRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lzrprojector method)": [[337, "nilearn.plotting.displays.LZRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lzrprojector property)": [[337, "nilearn.plotting.displays.LZRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lzrprojector property)": [[337, "nilearn.plotting.displays.LZRProjector.brain_color"]], "close() (nilearn.plotting.displays.lzrprojector method)": [[337, "nilearn.plotting.displays.LZRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lzrprojector method)": [[337, "nilearn.plotting.displays.LZRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lzrprojector class method)": [[337, "nilearn.plotting.displays.LZRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lzrprojector class method)": [[337, "nilearn.plotting.displays.LZRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lzrprojector method)": [[337, "nilearn.plotting.displays.LZRProjector.savefig"]], "title() (nilearn.plotting.displays.lzrprojector method)": [[337, "nilearn.plotting.displays.LZRProjector.title"]], "lzryprojector (class in nilearn.plotting.displays)": [[338, "nilearn.plotting.displays.LZRYProjector"]], "__init__() (nilearn.plotting.displays.lzryprojector method)": [[338, "nilearn.plotting.displays.LZRYProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lzryprojector method)": [[338, "nilearn.plotting.displays.LZRYProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lzryprojector method)": [[338, "nilearn.plotting.displays.LZRYProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lzryprojector method)": [[338, "nilearn.plotting.displays.LZRYProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lzryprojector method)": [[338, "nilearn.plotting.displays.LZRYProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lzryprojector method)": [[338, "nilearn.plotting.displays.LZRYProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lzryprojector method)": [[338, "nilearn.plotting.displays.LZRYProjector.annotate"]], "black_bg (nilearn.plotting.displays.lzryprojector property)": [[338, "nilearn.plotting.displays.LZRYProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lzryprojector property)": [[338, "nilearn.plotting.displays.LZRYProjector.brain_color"]], "close() (nilearn.plotting.displays.lzryprojector method)": [[338, "nilearn.plotting.displays.LZRYProjector.close"]], "draw_cross() (nilearn.plotting.displays.lzryprojector method)": [[338, "nilearn.plotting.displays.LZRYProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lzryprojector class method)": [[338, "nilearn.plotting.displays.LZRYProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lzryprojector class method)": [[338, "nilearn.plotting.displays.LZRYProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lzryprojector method)": [[338, "nilearn.plotting.displays.LZRYProjector.savefig"]], "title() (nilearn.plotting.displays.lzryprojector method)": [[338, "nilearn.plotting.displays.LZRYProjector.title"]], "mosaicslicer (class in nilearn.plotting.displays)": [[339, "nilearn.plotting.displays.MosaicSlicer"]], "__init__() (nilearn.plotting.displays.mosaicslicer method)": [[339, "nilearn.plotting.displays.MosaicSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.mosaicslicer method)": [[339, "nilearn.plotting.displays.MosaicSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.mosaicslicer method)": [[339, "nilearn.plotting.displays.MosaicSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.mosaicslicer method)": [[339, "nilearn.plotting.displays.MosaicSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.mosaicslicer method)": [[339, "nilearn.plotting.displays.MosaicSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.mosaicslicer method)": [[339, "nilearn.plotting.displays.MosaicSlicer.annotate"]], "black_bg (nilearn.plotting.displays.mosaicslicer property)": [[339, "nilearn.plotting.displays.MosaicSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.mosaicslicer property)": [[339, "nilearn.plotting.displays.MosaicSlicer.brain_color"]], "close() (nilearn.plotting.displays.mosaicslicer method)": [[339, "nilearn.plotting.displays.MosaicSlicer.close"]], "draw_cross() (nilearn.plotting.displays.mosaicslicer method)": [[339, "nilearn.plotting.displays.MosaicSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.mosaicslicer class method)": [[339, "nilearn.plotting.displays.MosaicSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.mosaicslicer class method)": [[339, "nilearn.plotting.displays.MosaicSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.mosaicslicer method)": [[339, "nilearn.plotting.displays.MosaicSlicer.savefig"]], "title() (nilearn.plotting.displays.mosaicslicer method)": [[339, "nilearn.plotting.displays.MosaicSlicer.title"]], "orthoprojector (class in nilearn.plotting.displays)": [[340, "nilearn.plotting.displays.OrthoProjector"]], "__init__() (nilearn.plotting.displays.orthoprojector method)": [[340, "nilearn.plotting.displays.OrthoProjector.__init__"]], "add_contours() (nilearn.plotting.displays.orthoprojector method)": [[340, "nilearn.plotting.displays.OrthoProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.orthoprojector method)": [[340, "nilearn.plotting.displays.OrthoProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.orthoprojector method)": [[340, "nilearn.plotting.displays.OrthoProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.orthoprojector method)": [[340, "nilearn.plotting.displays.OrthoProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.orthoprojector method)": [[340, "nilearn.plotting.displays.OrthoProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.orthoprojector method)": [[340, "nilearn.plotting.displays.OrthoProjector.annotate"]], "black_bg (nilearn.plotting.displays.orthoprojector property)": [[340, "nilearn.plotting.displays.OrthoProjector.black_bg"]], "brain_color (nilearn.plotting.displays.orthoprojector property)": [[340, "nilearn.plotting.displays.OrthoProjector.brain_color"]], "close() (nilearn.plotting.displays.orthoprojector method)": [[340, "nilearn.plotting.displays.OrthoProjector.close"]], "draw_cross() (nilearn.plotting.displays.orthoprojector method)": [[340, "nilearn.plotting.displays.OrthoProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.orthoprojector class method)": [[340, "nilearn.plotting.displays.OrthoProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.orthoprojector class method)": [[340, "nilearn.plotting.displays.OrthoProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.orthoprojector method)": [[340, "nilearn.plotting.displays.OrthoProjector.savefig"]], "title() (nilearn.plotting.displays.orthoprojector method)": [[340, "nilearn.plotting.displays.OrthoProjector.title"]], "orthoslicer (class in nilearn.plotting.displays)": [[341, "nilearn.plotting.displays.OrthoSlicer"]], "__init__() (nilearn.plotting.displays.orthoslicer method)": [[341, "nilearn.plotting.displays.OrthoSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.orthoslicer method)": [[341, "nilearn.plotting.displays.OrthoSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.orthoslicer method)": [[341, "nilearn.plotting.displays.OrthoSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.orthoslicer method)": [[341, "nilearn.plotting.displays.OrthoSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.orthoslicer method)": [[341, "nilearn.plotting.displays.OrthoSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.orthoslicer method)": [[341, "nilearn.plotting.displays.OrthoSlicer.annotate"]], "black_bg (nilearn.plotting.displays.orthoslicer property)": [[341, "nilearn.plotting.displays.OrthoSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.orthoslicer property)": [[341, "nilearn.plotting.displays.OrthoSlicer.brain_color"]], "close() (nilearn.plotting.displays.orthoslicer method)": [[341, "nilearn.plotting.displays.OrthoSlicer.close"]], "draw_cross() (nilearn.plotting.displays.orthoslicer method)": [[341, "nilearn.plotting.displays.OrthoSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.orthoslicer class method)": [[341, "nilearn.plotting.displays.OrthoSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.orthoslicer class method)": [[341, "nilearn.plotting.displays.OrthoSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.orthoslicer method)": [[341, "nilearn.plotting.displays.OrthoSlicer.savefig"]], "title() (nilearn.plotting.displays.orthoslicer method)": [[341, "nilearn.plotting.displays.OrthoSlicer.title"]], "plotlysurfacefigure (class in nilearn.plotting.displays)": [[342, "nilearn.plotting.displays.PlotlySurfaceFigure"]], "__init__() (nilearn.plotting.displays.plotlysurfacefigure method)": [[342, "nilearn.plotting.displays.PlotlySurfaceFigure.__init__"]], "savefig() (nilearn.plotting.displays.plotlysurfacefigure method)": [[342, "nilearn.plotting.displays.PlotlySurfaceFigure.savefig"]], "show() (nilearn.plotting.displays.plotlysurfacefigure method)": [[342, "nilearn.plotting.displays.PlotlySurfaceFigure.show"]], "rprojector (class in nilearn.plotting.displays)": [[343, "nilearn.plotting.displays.RProjector"]], "__init__() (nilearn.plotting.displays.rprojector method)": [[343, "nilearn.plotting.displays.RProjector.__init__"]], "add_contours() (nilearn.plotting.displays.rprojector method)": [[343, "nilearn.plotting.displays.RProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.rprojector method)": [[343, "nilearn.plotting.displays.RProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.rprojector method)": [[343, "nilearn.plotting.displays.RProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.rprojector method)": [[343, "nilearn.plotting.displays.RProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.rprojector method)": [[343, "nilearn.plotting.displays.RProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.rprojector method)": [[343, "nilearn.plotting.displays.RProjector.annotate"]], "black_bg (nilearn.plotting.displays.rprojector property)": [[343, "nilearn.plotting.displays.RProjector.black_bg"]], "brain_color (nilearn.plotting.displays.rprojector property)": [[343, "nilearn.plotting.displays.RProjector.brain_color"]], "close() (nilearn.plotting.displays.rprojector method)": [[343, "nilearn.plotting.displays.RProjector.close"]], "draw_cross() (nilearn.plotting.displays.rprojector method)": [[343, "nilearn.plotting.displays.RProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.rprojector class method)": [[343, "nilearn.plotting.displays.RProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.rprojector class method)": [[343, "nilearn.plotting.displays.RProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.rprojector method)": [[343, "nilearn.plotting.displays.RProjector.savefig"]], "title() (nilearn.plotting.displays.rprojector method)": [[343, "nilearn.plotting.displays.RProjector.title"]], "tiledslicer (class in nilearn.plotting.displays)": [[344, "nilearn.plotting.displays.TiledSlicer"]], "__init__() (nilearn.plotting.displays.tiledslicer method)": [[344, "nilearn.plotting.displays.TiledSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.tiledslicer method)": [[344, "nilearn.plotting.displays.TiledSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.tiledslicer method)": [[344, "nilearn.plotting.displays.TiledSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.tiledslicer method)": [[344, "nilearn.plotting.displays.TiledSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.tiledslicer method)": [[344, "nilearn.plotting.displays.TiledSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.tiledslicer method)": [[344, "nilearn.plotting.displays.TiledSlicer.annotate"]], "black_bg (nilearn.plotting.displays.tiledslicer property)": [[344, "nilearn.plotting.displays.TiledSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.tiledslicer property)": [[344, "nilearn.plotting.displays.TiledSlicer.brain_color"]], "close() (nilearn.plotting.displays.tiledslicer method)": [[344, "nilearn.plotting.displays.TiledSlicer.close"]], "draw_cross() (nilearn.plotting.displays.tiledslicer method)": [[344, "nilearn.plotting.displays.TiledSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.tiledslicer class method)": [[344, "nilearn.plotting.displays.TiledSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.tiledslicer class method)": [[344, "nilearn.plotting.displays.TiledSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.tiledslicer method)": [[344, "nilearn.plotting.displays.TiledSlicer.savefig"]], "title() (nilearn.plotting.displays.tiledslicer method)": [[344, "nilearn.plotting.displays.TiledSlicer.title"]], "xprojector (class in nilearn.plotting.displays)": [[345, "nilearn.plotting.displays.XProjector"]], "__init__() (nilearn.plotting.displays.xprojector method)": [[345, "nilearn.plotting.displays.XProjector.__init__"]], "add_contours() (nilearn.plotting.displays.xprojector method)": [[345, "nilearn.plotting.displays.XProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.xprojector method)": [[345, "nilearn.plotting.displays.XProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.xprojector method)": [[345, "nilearn.plotting.displays.XProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.xprojector method)": [[345, "nilearn.plotting.displays.XProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.xprojector method)": [[345, "nilearn.plotting.displays.XProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.xprojector method)": [[345, "nilearn.plotting.displays.XProjector.annotate"]], "black_bg (nilearn.plotting.displays.xprojector property)": [[345, "nilearn.plotting.displays.XProjector.black_bg"]], "brain_color (nilearn.plotting.displays.xprojector property)": [[345, "nilearn.plotting.displays.XProjector.brain_color"]], "close() (nilearn.plotting.displays.xprojector method)": [[345, "nilearn.plotting.displays.XProjector.close"]], "draw_cross() (nilearn.plotting.displays.xprojector method)": [[345, "nilearn.plotting.displays.XProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xprojector class method)": [[345, "nilearn.plotting.displays.XProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xprojector class method)": [[345, "nilearn.plotting.displays.XProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.xprojector method)": [[345, "nilearn.plotting.displays.XProjector.savefig"]], "title() (nilearn.plotting.displays.xprojector method)": [[345, "nilearn.plotting.displays.XProjector.title"]], "xslicer (class in nilearn.plotting.displays)": [[346, "nilearn.plotting.displays.XSlicer"]], "__init__() (nilearn.plotting.displays.xslicer method)": [[346, "nilearn.plotting.displays.XSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.xslicer method)": [[346, "nilearn.plotting.displays.XSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.xslicer method)": [[346, "nilearn.plotting.displays.XSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.xslicer method)": [[346, "nilearn.plotting.displays.XSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.xslicer method)": [[346, "nilearn.plotting.displays.XSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.xslicer method)": [[346, "nilearn.plotting.displays.XSlicer.annotate"]], "black_bg (nilearn.plotting.displays.xslicer property)": [[346, "nilearn.plotting.displays.XSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.xslicer property)": [[346, "nilearn.plotting.displays.XSlicer.brain_color"]], "close() (nilearn.plotting.displays.xslicer method)": [[346, "nilearn.plotting.displays.XSlicer.close"]], "draw_cross() (nilearn.plotting.displays.xslicer method)": [[346, "nilearn.plotting.displays.XSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xslicer class method)": [[346, "nilearn.plotting.displays.XSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xslicer class method)": [[346, "nilearn.plotting.displays.XSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.xslicer method)": [[346, "nilearn.plotting.displays.XSlicer.savefig"]], "title() (nilearn.plotting.displays.xslicer method)": [[346, "nilearn.plotting.displays.XSlicer.title"]], "xzprojector (class in nilearn.plotting.displays)": [[347, "nilearn.plotting.displays.XZProjector"]], "__init__() (nilearn.plotting.displays.xzprojector method)": [[347, "nilearn.plotting.displays.XZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.xzprojector method)": [[347, "nilearn.plotting.displays.XZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.xzprojector method)": [[347, "nilearn.plotting.displays.XZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.xzprojector method)": [[347, "nilearn.plotting.displays.XZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.xzprojector method)": [[347, "nilearn.plotting.displays.XZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.xzprojector method)": [[347, "nilearn.plotting.displays.XZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.xzprojector method)": [[347, "nilearn.plotting.displays.XZProjector.annotate"]], "black_bg (nilearn.plotting.displays.xzprojector property)": [[347, "nilearn.plotting.displays.XZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.xzprojector property)": [[347, "nilearn.plotting.displays.XZProjector.brain_color"]], "close() (nilearn.plotting.displays.xzprojector method)": [[347, "nilearn.plotting.displays.XZProjector.close"]], "draw_cross() (nilearn.plotting.displays.xzprojector method)": [[347, "nilearn.plotting.displays.XZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xzprojector class method)": [[347, "nilearn.plotting.displays.XZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xzprojector class method)": [[347, "nilearn.plotting.displays.XZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.xzprojector method)": [[347, "nilearn.plotting.displays.XZProjector.savefig"]], "title() (nilearn.plotting.displays.xzprojector method)": [[347, "nilearn.plotting.displays.XZProjector.title"]], "xzslicer (class in nilearn.plotting.displays)": [[348, "nilearn.plotting.displays.XZSlicer"]], "__init__() (nilearn.plotting.displays.xzslicer method)": [[348, "nilearn.plotting.displays.XZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.xzslicer method)": [[348, "nilearn.plotting.displays.XZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.xzslicer method)": [[348, "nilearn.plotting.displays.XZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.xzslicer method)": [[348, "nilearn.plotting.displays.XZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.xzslicer method)": [[348, "nilearn.plotting.displays.XZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.xzslicer method)": [[348, "nilearn.plotting.displays.XZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.xzslicer property)": [[348, "nilearn.plotting.displays.XZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.xzslicer property)": [[348, "nilearn.plotting.displays.XZSlicer.brain_color"]], "close() (nilearn.plotting.displays.xzslicer method)": [[348, "nilearn.plotting.displays.XZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.xzslicer method)": [[348, "nilearn.plotting.displays.XZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xzslicer class method)": [[348, "nilearn.plotting.displays.XZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xzslicer class method)": [[348, "nilearn.plotting.displays.XZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.xzslicer method)": [[348, "nilearn.plotting.displays.XZSlicer.savefig"]], "title() (nilearn.plotting.displays.xzslicer method)": [[348, "nilearn.plotting.displays.XZSlicer.title"]], "yprojector (class in nilearn.plotting.displays)": [[349, "nilearn.plotting.displays.YProjector"]], "__init__() (nilearn.plotting.displays.yprojector method)": [[349, "nilearn.plotting.displays.YProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yprojector method)": [[349, "nilearn.plotting.displays.YProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yprojector method)": [[349, "nilearn.plotting.displays.YProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yprojector method)": [[349, "nilearn.plotting.displays.YProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yprojector method)": [[349, "nilearn.plotting.displays.YProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yprojector method)": [[349, "nilearn.plotting.displays.YProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yprojector method)": [[349, "nilearn.plotting.displays.YProjector.annotate"]], "black_bg (nilearn.plotting.displays.yprojector property)": [[349, "nilearn.plotting.displays.YProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yprojector property)": [[349, "nilearn.plotting.displays.YProjector.brain_color"]], "close() (nilearn.plotting.displays.yprojector method)": [[349, "nilearn.plotting.displays.YProjector.close"]], "draw_cross() (nilearn.plotting.displays.yprojector method)": [[349, "nilearn.plotting.displays.YProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yprojector class method)": [[349, "nilearn.plotting.displays.YProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yprojector class method)": [[349, "nilearn.plotting.displays.YProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yprojector method)": [[349, "nilearn.plotting.displays.YProjector.savefig"]], "title() (nilearn.plotting.displays.yprojector method)": [[349, "nilearn.plotting.displays.YProjector.title"]], "yslicer (class in nilearn.plotting.displays)": [[350, "nilearn.plotting.displays.YSlicer"]], "__init__() (nilearn.plotting.displays.yslicer method)": [[350, "nilearn.plotting.displays.YSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yslicer method)": [[350, "nilearn.plotting.displays.YSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yslicer method)": [[350, "nilearn.plotting.displays.YSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yslicer method)": [[350, "nilearn.plotting.displays.YSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yslicer method)": [[350, "nilearn.plotting.displays.YSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yslicer method)": [[350, "nilearn.plotting.displays.YSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yslicer property)": [[350, "nilearn.plotting.displays.YSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yslicer property)": [[350, "nilearn.plotting.displays.YSlicer.brain_color"]], "close() (nilearn.plotting.displays.yslicer method)": [[350, "nilearn.plotting.displays.YSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yslicer method)": [[350, "nilearn.plotting.displays.YSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yslicer class method)": [[350, "nilearn.plotting.displays.YSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yslicer class method)": [[350, "nilearn.plotting.displays.YSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yslicer method)": [[350, "nilearn.plotting.displays.YSlicer.savefig"]], "title() (nilearn.plotting.displays.yslicer method)": [[350, "nilearn.plotting.displays.YSlicer.title"]], "yxprojector (class in nilearn.plotting.displays)": [[351, "nilearn.plotting.displays.YXProjector"]], "__init__() (nilearn.plotting.displays.yxprojector method)": [[351, "nilearn.plotting.displays.YXProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yxprojector method)": [[351, "nilearn.plotting.displays.YXProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yxprojector method)": [[351, "nilearn.plotting.displays.YXProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yxprojector method)": [[351, "nilearn.plotting.displays.YXProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yxprojector method)": [[351, "nilearn.plotting.displays.YXProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yxprojector method)": [[351, "nilearn.plotting.displays.YXProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yxprojector method)": [[351, "nilearn.plotting.displays.YXProjector.annotate"]], "black_bg (nilearn.plotting.displays.yxprojector property)": [[351, "nilearn.plotting.displays.YXProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yxprojector property)": [[351, "nilearn.plotting.displays.YXProjector.brain_color"]], "close() (nilearn.plotting.displays.yxprojector method)": [[351, "nilearn.plotting.displays.YXProjector.close"]], "draw_cross() (nilearn.plotting.displays.yxprojector method)": [[351, "nilearn.plotting.displays.YXProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yxprojector class method)": [[351, "nilearn.plotting.displays.YXProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yxprojector class method)": [[351, "nilearn.plotting.displays.YXProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yxprojector method)": [[351, "nilearn.plotting.displays.YXProjector.savefig"]], "title() (nilearn.plotting.displays.yxprojector method)": [[351, "nilearn.plotting.displays.YXProjector.title"]], "yxslicer (class in nilearn.plotting.displays)": [[352, "nilearn.plotting.displays.YXSlicer"]], "__init__() (nilearn.plotting.displays.yxslicer method)": [[352, "nilearn.plotting.displays.YXSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yxslicer method)": [[352, "nilearn.plotting.displays.YXSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yxslicer method)": [[352, "nilearn.plotting.displays.YXSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yxslicer method)": [[352, "nilearn.plotting.displays.YXSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yxslicer method)": [[352, "nilearn.plotting.displays.YXSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yxslicer method)": [[352, "nilearn.plotting.displays.YXSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yxslicer property)": [[352, "nilearn.plotting.displays.YXSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yxslicer property)": [[352, "nilearn.plotting.displays.YXSlicer.brain_color"]], "close() (nilearn.plotting.displays.yxslicer method)": [[352, "nilearn.plotting.displays.YXSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yxslicer method)": [[352, "nilearn.plotting.displays.YXSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yxslicer class method)": [[352, "nilearn.plotting.displays.YXSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yxslicer class method)": [[352, "nilearn.plotting.displays.YXSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yxslicer method)": [[352, "nilearn.plotting.displays.YXSlicer.savefig"]], "title() (nilearn.plotting.displays.yxslicer method)": [[352, "nilearn.plotting.displays.YXSlicer.title"]], "yzprojector (class in nilearn.plotting.displays)": [[353, "nilearn.plotting.displays.YZProjector"]], "__init__() (nilearn.plotting.displays.yzprojector method)": [[353, "nilearn.plotting.displays.YZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yzprojector method)": [[353, "nilearn.plotting.displays.YZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yzprojector method)": [[353, "nilearn.plotting.displays.YZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yzprojector method)": [[353, "nilearn.plotting.displays.YZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yzprojector method)": [[353, "nilearn.plotting.displays.YZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yzprojector method)": [[353, "nilearn.plotting.displays.YZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yzprojector method)": [[353, "nilearn.plotting.displays.YZProjector.annotate"]], "black_bg (nilearn.plotting.displays.yzprojector property)": [[353, "nilearn.plotting.displays.YZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yzprojector property)": [[353, "nilearn.plotting.displays.YZProjector.brain_color"]], "close() (nilearn.plotting.displays.yzprojector method)": [[353, "nilearn.plotting.displays.YZProjector.close"]], "draw_cross() (nilearn.plotting.displays.yzprojector method)": [[353, "nilearn.plotting.displays.YZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yzprojector class method)": [[353, "nilearn.plotting.displays.YZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yzprojector class method)": [[353, "nilearn.plotting.displays.YZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yzprojector method)": [[353, "nilearn.plotting.displays.YZProjector.savefig"]], "title() (nilearn.plotting.displays.yzprojector method)": [[353, "nilearn.plotting.displays.YZProjector.title"]], "yzslicer (class in nilearn.plotting.displays)": [[354, "nilearn.plotting.displays.YZSlicer"]], "__init__() (nilearn.plotting.displays.yzslicer method)": [[354, "nilearn.plotting.displays.YZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yzslicer method)": [[354, "nilearn.plotting.displays.YZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yzslicer method)": [[354, "nilearn.plotting.displays.YZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yzslicer method)": [[354, "nilearn.plotting.displays.YZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yzslicer method)": [[354, "nilearn.plotting.displays.YZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yzslicer method)": [[354, "nilearn.plotting.displays.YZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yzslicer property)": [[354, "nilearn.plotting.displays.YZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yzslicer property)": [[354, "nilearn.plotting.displays.YZSlicer.brain_color"]], "close() (nilearn.plotting.displays.yzslicer method)": [[354, "nilearn.plotting.displays.YZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yzslicer method)": [[354, "nilearn.plotting.displays.YZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yzslicer class method)": [[354, "nilearn.plotting.displays.YZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yzslicer class method)": [[354, "nilearn.plotting.displays.YZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yzslicer method)": [[354, "nilearn.plotting.displays.YZSlicer.savefig"]], "title() (nilearn.plotting.displays.yzslicer method)": [[354, "nilearn.plotting.displays.YZSlicer.title"]], "zprojector (class in nilearn.plotting.displays)": [[355, "nilearn.plotting.displays.ZProjector"]], "__init__() (nilearn.plotting.displays.zprojector method)": [[355, "nilearn.plotting.displays.ZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.zprojector method)": [[355, "nilearn.plotting.displays.ZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.zprojector method)": [[355, "nilearn.plotting.displays.ZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.zprojector method)": [[355, "nilearn.plotting.displays.ZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.zprojector method)": [[355, "nilearn.plotting.displays.ZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.zprojector method)": [[355, "nilearn.plotting.displays.ZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.zprojector method)": [[355, "nilearn.plotting.displays.ZProjector.annotate"]], "black_bg (nilearn.plotting.displays.zprojector property)": [[355, "nilearn.plotting.displays.ZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.zprojector property)": [[355, "nilearn.plotting.displays.ZProjector.brain_color"]], "close() (nilearn.plotting.displays.zprojector method)": [[355, "nilearn.plotting.displays.ZProjector.close"]], "draw_cross() (nilearn.plotting.displays.zprojector method)": [[355, "nilearn.plotting.displays.ZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.zprojector class method)": [[355, "nilearn.plotting.displays.ZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.zprojector class method)": [[355, "nilearn.plotting.displays.ZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.zprojector method)": [[355, "nilearn.plotting.displays.ZProjector.savefig"]], "title() (nilearn.plotting.displays.zprojector method)": [[355, "nilearn.plotting.displays.ZProjector.title"]], "zslicer (class in nilearn.plotting.displays)": [[356, "nilearn.plotting.displays.ZSlicer"]], "__init__() (nilearn.plotting.displays.zslicer method)": [[356, "nilearn.plotting.displays.ZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.zslicer method)": [[356, "nilearn.plotting.displays.ZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.zslicer method)": [[356, "nilearn.plotting.displays.ZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.zslicer method)": [[356, "nilearn.plotting.displays.ZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.zslicer method)": [[356, "nilearn.plotting.displays.ZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.zslicer method)": [[356, "nilearn.plotting.displays.ZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.zslicer property)": [[356, "nilearn.plotting.displays.ZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.zslicer property)": [[356, "nilearn.plotting.displays.ZSlicer.brain_color"]], "close() (nilearn.plotting.displays.zslicer method)": [[356, "nilearn.plotting.displays.ZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.zslicer method)": [[356, "nilearn.plotting.displays.ZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.zslicer class method)": [[356, "nilearn.plotting.displays.ZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.zslicer class method)": [[356, "nilearn.plotting.displays.ZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.zslicer method)": [[356, "nilearn.plotting.displays.ZSlicer.savefig"]], "title() (nilearn.plotting.displays.zslicer method)": [[356, "nilearn.plotting.displays.ZSlicer.title"]], "get_projector() (in module nilearn.plotting.displays)": [[357, "nilearn.plotting.displays.get_projector"]], "get_slicer() (in module nilearn.plotting.displays)": [[358, "nilearn.plotting.displays.get_slicer"]], "find_cut_slices() (in module nilearn.plotting)": [[359, "nilearn.plotting.find_cut_slices"]], "find_parcellation_cut_coords() (in module nilearn.plotting)": [[360, "nilearn.plotting.find_parcellation_cut_coords"]], "find_probabilistic_atlas_cut_coords() (in module nilearn.plotting)": [[361, "nilearn.plotting.find_probabilistic_atlas_cut_coords"]], "find_xyz_cut_coords() (in module nilearn.plotting)": [[362, "nilearn.plotting.find_xyz_cut_coords"]], "plot_anat() (in module nilearn.plotting)": [[363, "nilearn.plotting.plot_anat"]], "plot_carpet() (in module nilearn.plotting)": [[364, "nilearn.plotting.plot_carpet"]], "plot_connectome() (in module nilearn.plotting)": [[365, "nilearn.plotting.plot_connectome"]], "plot_contrast_matrix() (in module nilearn.plotting)": [[366, "nilearn.plotting.plot_contrast_matrix"]], "plot_design_matrix() (in module nilearn.plotting)": [[367, "nilearn.plotting.plot_design_matrix"]], "plot_epi() (in module nilearn.plotting)": [[368, "nilearn.plotting.plot_epi"]], "plot_event() (in module nilearn.plotting)": [[369, "nilearn.plotting.plot_event"]], "plot_glass_brain() (in module nilearn.plotting)": [[370, "nilearn.plotting.plot_glass_brain"]], "plot_img() (in module nilearn.plotting)": [[371, "nilearn.plotting.plot_img"]], "plot_img_comparison() (in module nilearn.plotting)": [[372, "nilearn.plotting.plot_img_comparison"]], "plot_img_on_surf() (in module nilearn.plotting)": [[373, "nilearn.plotting.plot_img_on_surf"]], "plot_markers() (in module nilearn.plotting)": [[374, "nilearn.plotting.plot_markers"]], "plot_matrix() (in module nilearn.plotting)": [[375, "nilearn.plotting.plot_matrix"]], "plot_prob_atlas() (in module nilearn.plotting)": [[376, "nilearn.plotting.plot_prob_atlas"]], "plot_roi() (in module nilearn.plotting)": [[377, "nilearn.plotting.plot_roi"]], "plot_stat_map() (in module nilearn.plotting)": [[378, "nilearn.plotting.plot_stat_map"]], "plot_surf() (in module nilearn.plotting)": [[379, "nilearn.plotting.plot_surf"]], "plot_surf_contours() (in module nilearn.plotting)": [[380, "nilearn.plotting.plot_surf_contours"]], "plot_surf_roi() (in module nilearn.plotting)": [[381, "nilearn.plotting.plot_surf_roi"]], "plot_surf_stat_map() (in module nilearn.plotting)": [[382, "nilearn.plotting.plot_surf_stat_map"]], "show() (in module nilearn.plotting)": [[383, "nilearn.plotting.show"]], "view_connectome() (in module nilearn.plotting)": [[384, "nilearn.plotting.view_connectome"]], "view_img() (in module nilearn.plotting)": [[385, "nilearn.plotting.view_img"]], "view_img_on_surf() (in module nilearn.plotting)": [[386, "nilearn.plotting.view_img_on_surf"]], "view_markers() (in module nilearn.plotting)": [[387, "nilearn.plotting.view_markers"]], "view_surf() (in module nilearn.plotting)": [[388, "nilearn.plotting.view_surf"]], "hierarchicalkmeans (class in nilearn.regions)": [[389, "nilearn.regions.HierarchicalKMeans"]], "__init__() (nilearn.regions.hierarchicalkmeans method)": [[389, "nilearn.regions.HierarchicalKMeans.__init__"]], "fit() (nilearn.regions.hierarchicalkmeans method)": [[389, "nilearn.regions.HierarchicalKMeans.fit"]], "fit_predict() (nilearn.regions.hierarchicalkmeans method)": [[389, "nilearn.regions.HierarchicalKMeans.fit_predict"]], "fit_transform() (nilearn.regions.hierarchicalkmeans method)": [[389, "nilearn.regions.HierarchicalKMeans.fit_transform"]], "get_metadata_routing() (nilearn.regions.hierarchicalkmeans method)": [[389, "nilearn.regions.HierarchicalKMeans.get_metadata_routing"]], "get_params() (nilearn.regions.hierarchicalkmeans method)": [[389, "nilearn.regions.HierarchicalKMeans.get_params"]], "inverse_transform() (nilearn.regions.hierarchicalkmeans method)": [[389, "nilearn.regions.HierarchicalKMeans.inverse_transform"]], "set_inverse_transform_request() (nilearn.regions.hierarchicalkmeans method)": [[389, "nilearn.regions.HierarchicalKMeans.set_inverse_transform_request"]], "set_output() (nilearn.regions.hierarchicalkmeans method)": [[389, "nilearn.regions.HierarchicalKMeans.set_output"]], "set_params() (nilearn.regions.hierarchicalkmeans method)": [[389, "nilearn.regions.HierarchicalKMeans.set_params"]], "transform() (nilearn.regions.hierarchicalkmeans method)": [[389, "nilearn.regions.HierarchicalKMeans.transform"]], "parcellations (class in nilearn.regions)": [[390, "nilearn.regions.Parcellations"]], "valid_methods (nilearn.regions.parcellations attribute)": [[390, "nilearn.regions.Parcellations.VALID_METHODS"]], "__init__() (nilearn.regions.parcellations method)": [[390, "nilearn.regions.Parcellations.__init__"]], "fit() (nilearn.regions.parcellations method)": [[390, "nilearn.regions.Parcellations.fit"]], "fit_transform() (nilearn.regions.parcellations method)": [[390, "nilearn.regions.Parcellations.fit_transform"]], "get_metadata_routing() (nilearn.regions.parcellations method)": [[390, "nilearn.regions.Parcellations.get_metadata_routing"]], "get_params() (nilearn.regions.parcellations method)": [[390, "nilearn.regions.Parcellations.get_params"]], "inverse_transform() (nilearn.regions.parcellations method)": [[390, "nilearn.regions.Parcellations.inverse_transform"]], "score() (nilearn.regions.parcellations method)": [[390, "nilearn.regions.Parcellations.score"]], "set_fit_request() (nilearn.regions.parcellations method)": [[390, "nilearn.regions.Parcellations.set_fit_request"]], "set_inverse_transform_request() (nilearn.regions.parcellations method)": [[390, "nilearn.regions.Parcellations.set_inverse_transform_request"]], "set_output() (nilearn.regions.parcellations method)": [[390, "nilearn.regions.Parcellations.set_output"]], "set_params() (nilearn.regions.parcellations method)": [[390, "nilearn.regions.Parcellations.set_params"]], "set_score_request() (nilearn.regions.parcellations method)": [[390, "nilearn.regions.Parcellations.set_score_request"]], "set_transform_request() (nilearn.regions.parcellations method)": [[390, "nilearn.regions.Parcellations.set_transform_request"]], "transform() (nilearn.regions.parcellations method)": [[390, "nilearn.regions.Parcellations.transform"]], "rena (class in nilearn.regions)": [[391, "nilearn.regions.ReNA"]], "__init__() (nilearn.regions.rena method)": [[391, "nilearn.regions.ReNA.__init__"]], "fit() (nilearn.regions.rena method)": [[391, "nilearn.regions.ReNA.fit"]], "fit_predict() (nilearn.regions.rena method)": [[391, "nilearn.regions.ReNA.fit_predict"]], "fit_transform() (nilearn.regions.rena method)": [[391, "nilearn.regions.ReNA.fit_transform"]], "get_metadata_routing() (nilearn.regions.rena method)": [[391, "nilearn.regions.ReNA.get_metadata_routing"]], "get_params() (nilearn.regions.rena method)": [[391, "nilearn.regions.ReNA.get_params"]], "inverse_transform() (nilearn.regions.rena method)": [[391, "nilearn.regions.ReNA.inverse_transform"]], "set_inverse_transform_request() (nilearn.regions.rena method)": [[391, "nilearn.regions.ReNA.set_inverse_transform_request"]], "set_output() (nilearn.regions.rena method)": [[391, "nilearn.regions.ReNA.set_output"]], "set_params() (nilearn.regions.rena method)": [[391, "nilearn.regions.ReNA.set_params"]], "transform() (nilearn.regions.rena method)": [[391, "nilearn.regions.ReNA.transform"]], "regionextractor (class in nilearn.regions)": [[392, "nilearn.regions.RegionExtractor"]], "__init__() (nilearn.regions.regionextractor method)": [[392, "nilearn.regions.RegionExtractor.__init__"]], "fit() (nilearn.regions.regionextractor method)": [[392, "nilearn.regions.RegionExtractor.fit"]], "fit_transform() (nilearn.regions.regionextractor method)": [[392, "nilearn.regions.RegionExtractor.fit_transform"]], "generate_report() (nilearn.regions.regionextractor method)": [[392, "nilearn.regions.RegionExtractor.generate_report"]], "get_metadata_routing() (nilearn.regions.regionextractor method)": [[392, "nilearn.regions.RegionExtractor.get_metadata_routing"]], "get_params() (nilearn.regions.regionextractor method)": [[392, "nilearn.regions.RegionExtractor.get_params"]], "inverse_transform() (nilearn.regions.regionextractor method)": [[392, "nilearn.regions.RegionExtractor.inverse_transform"]], "set_fit_request() (nilearn.regions.regionextractor method)": [[392, "nilearn.regions.RegionExtractor.set_fit_request"]], "set_inverse_transform_request() (nilearn.regions.regionextractor method)": [[392, "nilearn.regions.RegionExtractor.set_inverse_transform_request"]], "set_output() (nilearn.regions.regionextractor method)": [[392, "nilearn.regions.RegionExtractor.set_output"]], "set_params() (nilearn.regions.regionextractor method)": [[392, "nilearn.regions.RegionExtractor.set_params"]], "set_transform_request() (nilearn.regions.regionextractor method)": [[392, "nilearn.regions.RegionExtractor.set_transform_request"]], "transform() (nilearn.regions.regionextractor method)": [[392, "nilearn.regions.RegionExtractor.transform"]], "transform_single_imgs() (nilearn.regions.regionextractor method)": [[392, "nilearn.regions.RegionExtractor.transform_single_imgs"]], "connected_label_regions() (in module nilearn.regions)": [[393, "nilearn.regions.connected_label_regions"]], "connected_regions() (in module nilearn.regions)": [[394, "nilearn.regions.connected_regions"]], "img_to_signals_labels() (in module nilearn.regions)": [[395, "nilearn.regions.img_to_signals_labels"]], "img_to_signals_maps() (in module nilearn.regions)": [[396, "nilearn.regions.img_to_signals_maps"]], "recursive_neighbor_agglomeration() (in module nilearn.regions)": [[397, "nilearn.regions.recursive_neighbor_agglomeration"]], "signals_to_img_labels() (in module nilearn.regions)": [[398, "nilearn.regions.signals_to_img_labels"]], "signals_to_img_maps() (in module nilearn.regions)": [[399, "nilearn.regions.signals_to_img_maps"]], "htmlreport (class in nilearn.reporting)": [[400, "nilearn.reporting.HTMLReport"]], "__init__() (nilearn.reporting.htmlreport method)": [[400, "nilearn.reporting.HTMLReport.__init__"]], "get_iframe() (nilearn.reporting.htmlreport method)": [[400, "nilearn.reporting.HTMLReport.get_iframe"]], "get_standalone() (nilearn.reporting.htmlreport method)": [[400, "nilearn.reporting.HTMLReport.get_standalone"]], "open_in_browser() (nilearn.reporting.htmlreport method)": [[400, "nilearn.reporting.HTMLReport.open_in_browser"]], "remove_temp_file() (nilearn.reporting.htmlreport method)": [[400, "nilearn.reporting.HTMLReport.remove_temp_file"]], "resize() (nilearn.reporting.htmlreport method)": [[400, "nilearn.reporting.HTMLReport.resize"]], "save_as_html() (nilearn.reporting.htmlreport method)": [[400, "nilearn.reporting.HTMLReport.save_as_html"]], "get_clusters_table() (in module nilearn.reporting)": [[401, "nilearn.reporting.get_clusters_table"]], "make_glm_report() (in module nilearn.reporting)": [[402, "nilearn.reporting.make_glm_report"]], "butterworth() (in module nilearn.signal)": [[403, "nilearn.signal.butterworth"]], "clean() (in module nilearn.signal)": [[404, "nilearn.signal.clean"]], "high_variance_confounds() (in module nilearn.signal)": [[405, "nilearn.signal.high_variance_confounds"]], "load_surf_data() (in module nilearn.surface)": [[406, "nilearn.surface.load_surf_data"]], "load_surf_mesh() (in module nilearn.surface)": [[407, "nilearn.surface.load_surf_mesh"]], "vol_to_surf() (in module nilearn.surface)": [[408, "nilearn.surface.vol_to_surf"]], "nilearn.glm": [[409, "module-nilearn.glm"]], "nilearn.glm.first_level": [[409, "module-nilearn.glm.first_level"]], "nilearn.glm.second_level": [[409, "module-nilearn.glm.second_level"]], "nilearn.image": [[410, "module-nilearn.image"]], "nilearn.interfaces": [[412, "module-nilearn.interfaces"]], "nilearn.interfaces.bids": [[412, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.fmriprep": [[412, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fsl": [[412, "module-nilearn.interfaces.fsl"]], "nilearn.maskers": [[413, "module-nilearn.maskers"]], "nilearn.masking": [[414, "module-nilearn.masking"]], "nilearn.mass_univariate": [[415, "module-nilearn.mass_univariate"]], "nilearn.plotting": [[416, "module-nilearn.plotting"]], "nilearn.plotting.displays": [[416, "module-nilearn.plotting.displays"]], "nilearn.regions": [[417, "module-nilearn.regions"]], "nilearn.reporting": [[418, "module-nilearn.reporting"]], "nilearn.signal": [[419, "module-nilearn.signal"]], "nilearn.surface": [[420, "module-nilearn.surface"]]}})