Search.setIndex({"docnames": ["authors", "auto_examples/00_tutorials/index", "auto_examples/00_tutorials/plot_3d_and_4d_niimg", "auto_examples/00_tutorials/plot_decoding_tutorial", "auto_examples/00_tutorials/plot_nilearn_101", "auto_examples/00_tutorials/plot_python_101", "auto_examples/00_tutorials/plot_single_subject_single_run", "auto_examples/00_tutorials/sg_execution_times", "auto_examples/01_plotting/index", "auto_examples/01_plotting/plot_3d_map_to_surface_projection", "auto_examples/01_plotting/plot_atlas", "auto_examples/01_plotting/plot_carpet", "auto_examples/01_plotting/plot_colormaps", "auto_examples/01_plotting/plot_demo_glass_brain", "auto_examples/01_plotting/plot_demo_glass_brain_extensive", "auto_examples/01_plotting/plot_demo_more_plotting", "auto_examples/01_plotting/plot_demo_plotting", "auto_examples/01_plotting/plot_dim_plotting", "auto_examples/01_plotting/plot_haxby_masks", "auto_examples/01_plotting/plot_multiscale_parcellations", "auto_examples/01_plotting/plot_overlay", "auto_examples/01_plotting/plot_prob_atlas", "auto_examples/01_plotting/plot_surf_atlas", "auto_examples/01_plotting/plot_surf_stat_map", "auto_examples/01_plotting/plot_surface_projection_strategies", "auto_examples/01_plotting/plot_visualization", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats", "auto_examples/01_plotting/sg_execution_times", "auto_examples/02_decoding/index", "auto_examples/02_decoding/plot_haxby_anova_svm", "auto_examples/02_decoding/plot_haxby_different_estimators", "auto_examples/02_decoding/plot_haxby_frem", "auto_examples/02_decoding/plot_haxby_full_analysis", "auto_examples/02_decoding/plot_haxby_glm_decoding", "auto_examples/02_decoding/plot_haxby_grid_search", "auto_examples/02_decoding/plot_haxby_multiclass", "auto_examples/02_decoding/plot_haxby_searchlight", "auto_examples/02_decoding/plot_haxby_searchlight_surface", "auto_examples/02_decoding/plot_haxby_stimuli", "auto_examples/02_decoding/plot_mixed_gambles_frem", "auto_examples/02_decoding/plot_miyawaki_encoding", "auto_examples/02_decoding/plot_miyawaki_reconstruction", "auto_examples/02_decoding/plot_oasis_vbm", "auto_examples/02_decoding/plot_oasis_vbm_space_net", "auto_examples/02_decoding/plot_simulated_data", "auto_examples/02_decoding/sg_execution_times", "auto_examples/03_connectivity/index", "auto_examples/03_connectivity/plot_atlas_comparison", "auto_examples/03_connectivity/plot_compare_decomposition", "auto_examples/03_connectivity/plot_data_driven_parcellations", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps", "auto_examples/03_connectivity/plot_group_level_connectivity", "auto_examples/03_connectivity/plot_inverse_covariance_connectome", "auto_examples/03_connectivity/plot_multi_subject_connectome", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation", "auto_examples/03_connectivity/plot_signal_extraction", "auto_examples/03_connectivity/plot_simulated_connectome", "auto_examples/03_connectivity/plot_sphere_based_connectome", "auto_examples/03_connectivity/sg_execution_times", "auto_examples/04_glm_first_level/index", "auto_examples/04_glm_first_level/plot_adhd_dmn", "auto_examples/04_glm_first_level/plot_bids_features", "auto_examples/04_glm_first_level/plot_design_matrix", "auto_examples/04_glm_first_level/plot_fiac_analysis", "auto_examples/04_glm_first_level/plot_fir_model", "auto_examples/04_glm_first_level/plot_first_level_details", "auto_examples/04_glm_first_level/plot_fixed_effects", "auto_examples/04_glm_first_level/plot_hrf", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis", "auto_examples/04_glm_first_level/plot_predictions_residuals", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces", "auto_examples/04_glm_first_level/plot_write_events_file", "auto_examples/04_glm_first_level/sg_execution_times", "auto_examples/05_glm_second_level/index", "auto_examples/05_glm_second_level/plot_oasis", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels", "auto_examples/05_glm_second_level/plot_second_level_association_test", "auto_examples/05_glm_second_level/plot_second_level_design_matrix", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test", "auto_examples/05_glm_second_level/plot_thresholding", "auto_examples/05_glm_second_level/sg_execution_times", "auto_examples/06_manipulating_images/index", "auto_examples/06_manipulating_images/plot_affine_transformation", "auto_examples/06_manipulating_images/plot_compare_mean_image", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps", "auto_examples/06_manipulating_images/plot_mask_computation", "auto_examples/06_manipulating_images/plot_negate_image", "auto_examples/06_manipulating_images/plot_nifti_labels_simple", "auto_examples/06_manipulating_images/plot_nifti_simple", "auto_examples/06_manipulating_images/plot_resample_to_template", "auto_examples/06_manipulating_images/plot_roi_extraction", "auto_examples/06_manipulating_images/plot_smooth_mean_image", "auto_examples/06_manipulating_images/sg_execution_times", "auto_examples/07_advanced/index", "auto_examples/07_advanced/plot_advanced_decoding_scikit", "auto_examples/07_advanced/plot_age_group_prediction_cross_val", "auto_examples/07_advanced/plot_beta_series", "auto_examples/07_advanced/plot_bids_analysis", "auto_examples/07_advanced/plot_haxby_mass_univariate", "auto_examples/07_advanced/plot_ica_neurovault", "auto_examples/07_advanced/plot_ica_resting_state", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods", "auto_examples/07_advanced/plot_localizer_simple_analysis", "auto_examples/07_advanced/plot_neurovault_meta_analysis", "auto_examples/07_advanced/plot_surface_bids_analysis", "auto_examples/07_advanced/sg_execution_times", "auto_examples/08_experimental/index", "auto_examples/08_experimental/plot_surface_image_and_maskers", "auto_examples/08_experimental/sg_execution_times", "auto_examples/index", "auto_examples/sg_execution_times", "bibliography", "building_blocks/index", "building_blocks/manual_pipeline", "building_blocks/neurovault", "changes/0.1.0", "changes/0.1.1", "changes/0.1.2", "changes/0.1.3", "changes/0.1.4", "changes/0.10.0", "changes/0.10.1", "changes/0.10.2", "changes/0.2.0", "changes/0.2.1", "changes/0.2.2", "changes/0.2.3", "changes/0.2.4", "changes/0.2.5", "changes/0.2.6", "changes/0.3.0", "changes/0.3.1", "changes/0.4.0", "changes/0.4.1", "changes/0.4.2", "changes/0.5.0", "changes/0.5.1", "changes/0.5.2", "changes/0.6.0", "changes/0.6.1", "changes/0.6.2", "changes/0.7.0", "changes/0.7.1", "changes/0.8.0", "changes/0.8.1", "changes/0.9.0", "changes/0.9.1", "changes/0.9.2", "changes/latest", "changes/names", "changes/whats_new", "connectivity/connectome_extraction", "connectivity/functional_connectomes", "connectivity/index", "connectivity/parcellating", "connectivity/region_extraction", "connectivity/resting_state_networks", "decoding/decoding_intro", "decoding/estimator_choice", "decoding/frem", "decoding/going_further", "decoding/index", "decoding/searchlight", "decoding/space_net", "developers/group_sparse_covariance", "development", "glm/first_level_model", "glm/glm_intro", "glm/index", "glm/second_level_model", "glossary", "index", "introduction", "maintenance", "manipulating_images/index", "manipulating_images/input_output", "manipulating_images/manipulating_images", "manipulating_images/masker_objects", "modules/connectome", "modules/datasets", "modules/decoding", "modules/decomposition", "modules/experimental", "modules/generated/nilearn.connectome.ConnectivityMeasure", "modules/generated/nilearn.connectome.GroupSparseCovariance", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV", "modules/generated/nilearn.connectome.cov_to_corr", "modules/generated/nilearn.connectome.group_sparse_covariance", "modules/generated/nilearn.connectome.prec_to_partial", "modules/generated/nilearn.connectome.sym_matrix_to_vec", "modules/generated/nilearn.connectome.vec_to_sym_matrix", "modules/generated/nilearn.datasets.fetch_abide_pcp", "modules/generated/nilearn.datasets.fetch_adhd", "modules/generated/nilearn.datasets.fetch_atlas_aal", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009", "modules/generated/nilearn.datasets.fetch_atlas_difumo", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford", "modules/generated/nilearn.datasets.fetch_atlas_juelich", "modules/generated/nilearn.datasets.fetch_atlas_msdl", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux", "modules/generated/nilearn.datasets.fetch_atlas_talairach", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010", "modules/generated/nilearn.datasets.fetch_coords_power_2011", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018", "modules/generated/nilearn.datasets.fetch_development_fmri", "modules/generated/nilearn.datasets.fetch_ds000030_urls", "modules/generated/nilearn.datasets.fetch_fiac_first_level", "modules/generated/nilearn.datasets.fetch_haxby", "modules/generated/nilearn.datasets.fetch_icbm152_2009", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset", "modules/generated/nilearn.datasets.fetch_localizer_button_task", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task", "modules/generated/nilearn.datasets.fetch_localizer_contrasts", "modules/generated/nilearn.datasets.fetch_localizer_first_level", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats", "modules/generated/nilearn.datasets.fetch_mixed_gambles", "modules/generated/nilearn.datasets.fetch_miyawaki2008", "modules/generated/nilearn.datasets.fetch_neurovault", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task", "modules/generated/nilearn.datasets.fetch_neurovault_ids", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task", "modules/generated/nilearn.datasets.fetch_oasis_vbm", "modules/generated/nilearn.datasets.fetch_openneuro_dataset", "modules/generated/nilearn.datasets.fetch_openneuro_dataset_index", "modules/generated/nilearn.datasets.fetch_spm_auditory", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri", "modules/generated/nilearn.datasets.fetch_surf_fsaverage", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced", "modules/generated/nilearn.datasets.get_data_dirs", "modules/generated/nilearn.datasets.load_mni152_brain_mask", "modules/generated/nilearn.datasets.load_mni152_gm_mask", "modules/generated/nilearn.datasets.load_mni152_gm_template", "modules/generated/nilearn.datasets.load_mni152_template", "modules/generated/nilearn.datasets.load_mni152_wm_mask", "modules/generated/nilearn.datasets.load_mni152_wm_template", "modules/generated/nilearn.datasets.load_sample_motor_activation_image", "modules/generated/nilearn.datasets.patch_openneuro_dataset", "modules/generated/nilearn.datasets.select_from_index", "modules/generated/nilearn.decoding.Decoder", "modules/generated/nilearn.decoding.DecoderRegressor", "modules/generated/nilearn.decoding.FREMClassifier", "modules/generated/nilearn.decoding.FREMRegressor", "modules/generated/nilearn.decoding.SearchLight", "modules/generated/nilearn.decoding.SpaceNetClassifier", "modules/generated/nilearn.decoding.SpaceNetRegressor", "modules/generated/nilearn.decomposition.CanICA", "modules/generated/nilearn.decomposition.DictLearning", "modules/generated/nilearn.experimental.surface.FileMesh", "modules/generated/nilearn.experimental.surface.InMemoryMesh", "modules/generated/nilearn.experimental.surface.Mesh", "modules/generated/nilearn.experimental.surface.PolyMesh", "modules/generated/nilearn.experimental.surface.SurfaceImage", "modules/generated/nilearn.experimental.surface.SurfaceLabelsMasker", "modules/generated/nilearn.experimental.surface.SurfaceMasker", "modules/generated/nilearn.experimental.surface.fetch_destrieux", "modules/generated/nilearn.experimental.surface.fetch_nki", "modules/generated/nilearn.experimental.surface.load_fsaverage", "modules/generated/nilearn.glm.ARModel", "modules/generated/nilearn.glm.Contrast", "modules/generated/nilearn.glm.FContrastResults", "modules/generated/nilearn.glm.LikelihoodModelResults", "modules/generated/nilearn.glm.OLSModel", "modules/generated/nilearn.glm.RegressionResults", "modules/generated/nilearn.glm.SimpleRegressionResults", "modules/generated/nilearn.glm.TContrastResults", "modules/generated/nilearn.glm.cluster_level_inference", "modules/generated/nilearn.glm.compute_contrast", "modules/generated/nilearn.glm.compute_fixed_effects", "modules/generated/nilearn.glm.expression_to_contrast_vector", "modules/generated/nilearn.glm.fdr_threshold", "modules/generated/nilearn.glm.first_level.FirstLevelModel", "modules/generated/nilearn.glm.first_level.check_design_matrix", "modules/generated/nilearn.glm.first_level.compute_regressor", "modules/generated/nilearn.glm.first_level.first_level_from_bids", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative", "modules/generated/nilearn.glm.first_level.glover_hrf", "modules/generated/nilearn.glm.first_level.glover_time_derivative", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix", "modules/generated/nilearn.glm.first_level.mean_scaling", "modules/generated/nilearn.glm.first_level.run_glm", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative", "modules/generated/nilearn.glm.first_level.spm_hrf", "modules/generated/nilearn.glm.first_level.spm_time_derivative", "modules/generated/nilearn.glm.second_level.SecondLevelModel", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix", "modules/generated/nilearn.glm.second_level.non_parametric_inference", "modules/generated/nilearn.glm.threshold_stats_img", "modules/generated/nilearn.image.binarize_img", "modules/generated/nilearn.image.clean_img", "modules/generated/nilearn.image.concat_imgs", "modules/generated/nilearn.image.coord_transform", "modules/generated/nilearn.image.copy_img", "modules/generated/nilearn.image.crop_img", "modules/generated/nilearn.image.get_data", "modules/generated/nilearn.image.high_variance_confounds", "modules/generated/nilearn.image.index_img", "modules/generated/nilearn.image.iter_img", "modules/generated/nilearn.image.largest_connected_component_img", "modules/generated/nilearn.image.load_img", "modules/generated/nilearn.image.math_img", "modules/generated/nilearn.image.mean_img", "modules/generated/nilearn.image.new_img_like", "modules/generated/nilearn.image.reorder_img", "modules/generated/nilearn.image.resample_img", "modules/generated/nilearn.image.resample_to_img", "modules/generated/nilearn.image.smooth_img", "modules/generated/nilearn.image.swap_img_hemispheres", "modules/generated/nilearn.image.threshold_img", "modules/generated/nilearn.interfaces.bids.get_bids_files", "modules/generated/nilearn.interfaces.bids.parse_bids_filename", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids", "modules/generated/nilearn.interfaces.fmriprep.load_confounds", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat", "modules/generated/nilearn.maskers.BaseMasker", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker", "modules/generated/nilearn.maskers.MultiNiftiMasker", "modules/generated/nilearn.maskers.NiftiLabelsMasker", "modules/generated/nilearn.maskers.NiftiMapsMasker", "modules/generated/nilearn.maskers.NiftiMasker", "modules/generated/nilearn.maskers.NiftiSpheresMasker", "modules/generated/nilearn.masking.apply_mask", "modules/generated/nilearn.masking.compute_background_mask", "modules/generated/nilearn.masking.compute_brain_mask", "modules/generated/nilearn.masking.compute_epi_mask", "modules/generated/nilearn.masking.compute_multi_background_mask", "modules/generated/nilearn.masking.compute_multi_brain_mask", "modules/generated/nilearn.masking.compute_multi_epi_mask", "modules/generated/nilearn.masking.intersect_masks", "modules/generated/nilearn.masking.unmask", "modules/generated/nilearn.mass_univariate.permuted_ols", "modules/generated/nilearn.plotting.displays.BaseAxes", "modules/generated/nilearn.plotting.displays.BaseSlicer", "modules/generated/nilearn.plotting.displays.CutAxes", "modules/generated/nilearn.plotting.displays.GlassBrainAxes", "modules/generated/nilearn.plotting.displays.LProjector", "modules/generated/nilearn.plotting.displays.LRProjector", "modules/generated/nilearn.plotting.displays.LYRProjector", "modules/generated/nilearn.plotting.displays.LYRZProjector", "modules/generated/nilearn.plotting.displays.LZRProjector", "modules/generated/nilearn.plotting.displays.LZRYProjector", "modules/generated/nilearn.plotting.displays.MosaicSlicer", "modules/generated/nilearn.plotting.displays.OrthoProjector", "modules/generated/nilearn.plotting.displays.OrthoSlicer", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure", "modules/generated/nilearn.plotting.displays.RProjector", "modules/generated/nilearn.plotting.displays.TiledSlicer", "modules/generated/nilearn.plotting.displays.XProjector", "modules/generated/nilearn.plotting.displays.XSlicer", "modules/generated/nilearn.plotting.displays.XZProjector", "modules/generated/nilearn.plotting.displays.XZSlicer", "modules/generated/nilearn.plotting.displays.YProjector", "modules/generated/nilearn.plotting.displays.YSlicer", "modules/generated/nilearn.plotting.displays.YXProjector", "modules/generated/nilearn.plotting.displays.YXSlicer", "modules/generated/nilearn.plotting.displays.YZProjector", "modules/generated/nilearn.plotting.displays.YZSlicer", "modules/generated/nilearn.plotting.displays.ZProjector", "modules/generated/nilearn.plotting.displays.ZSlicer", "modules/generated/nilearn.plotting.displays.get_projector", "modules/generated/nilearn.plotting.displays.get_slicer", "modules/generated/nilearn.plotting.find_cut_slices", "modules/generated/nilearn.plotting.find_parcellation_cut_coords", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords", "modules/generated/nilearn.plotting.find_xyz_cut_coords", "modules/generated/nilearn.plotting.plot_anat", "modules/generated/nilearn.plotting.plot_carpet", "modules/generated/nilearn.plotting.plot_connectome", "modules/generated/nilearn.plotting.plot_contrast_matrix", "modules/generated/nilearn.plotting.plot_design_matrix", "modules/generated/nilearn.plotting.plot_epi", "modules/generated/nilearn.plotting.plot_event", "modules/generated/nilearn.plotting.plot_glass_brain", "modules/generated/nilearn.plotting.plot_img", "modules/generated/nilearn.plotting.plot_img_comparison", "modules/generated/nilearn.plotting.plot_img_on_surf", "modules/generated/nilearn.plotting.plot_markers", "modules/generated/nilearn.plotting.plot_matrix", "modules/generated/nilearn.plotting.plot_prob_atlas", "modules/generated/nilearn.plotting.plot_roi", "modules/generated/nilearn.plotting.plot_stat_map", "modules/generated/nilearn.plotting.plot_surf", "modules/generated/nilearn.plotting.plot_surf_contours", "modules/generated/nilearn.plotting.plot_surf_roi", "modules/generated/nilearn.plotting.plot_surf_stat_map", "modules/generated/nilearn.plotting.show", "modules/generated/nilearn.plotting.view_connectome", "modules/generated/nilearn.plotting.view_img", "modules/generated/nilearn.plotting.view_img_on_surf", "modules/generated/nilearn.plotting.view_markers", "modules/generated/nilearn.plotting.view_surf", "modules/generated/nilearn.regions.HierarchicalKMeans", "modules/generated/nilearn.regions.Parcellations", "modules/generated/nilearn.regions.ReNA", "modules/generated/nilearn.regions.RegionExtractor", "modules/generated/nilearn.regions.connected_label_regions", "modules/generated/nilearn.regions.connected_regions", "modules/generated/nilearn.regions.img_to_signals_labels", "modules/generated/nilearn.regions.img_to_signals_maps", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration", "modules/generated/nilearn.regions.signals_to_img_labels", "modules/generated/nilearn.regions.signals_to_img_maps", "modules/generated/nilearn.reporting.HTMLReport", "modules/generated/nilearn.reporting.get_clusters_table", "modules/generated/nilearn.reporting.make_glm_report", "modules/generated/nilearn.signal.butterworth", "modules/generated/nilearn.signal.clean", "modules/generated/nilearn.signal.high_variance_confounds", "modules/generated/nilearn.surface.load_surf_data", "modules/generated/nilearn.surface.load_surf_mesh", "modules/generated/nilearn.surface.vol_to_surf", "modules/glm", "modules/image", "modules/index", "modules/interfaces", "modules/maskers", "modules/masking", "modules/mass_univariate", "modules/plotting", "modules/regions", "modules/reporting", "modules/signal", "modules/surface", "plotting/index", "quickstart", "sg_execution_times", "user_guide"], "filenames": ["authors.rst", "auto_examples/00_tutorials/index.rst", "auto_examples/00_tutorials/plot_3d_and_4d_niimg.rst", "auto_examples/00_tutorials/plot_decoding_tutorial.rst", "auto_examples/00_tutorials/plot_nilearn_101.rst", "auto_examples/00_tutorials/plot_python_101.rst", "auto_examples/00_tutorials/plot_single_subject_single_run.rst", "auto_examples/00_tutorials/sg_execution_times.rst", "auto_examples/01_plotting/index.rst", "auto_examples/01_plotting/plot_3d_map_to_surface_projection.rst", "auto_examples/01_plotting/plot_atlas.rst", "auto_examples/01_plotting/plot_carpet.rst", "auto_examples/01_plotting/plot_colormaps.rst", "auto_examples/01_plotting/plot_demo_glass_brain.rst", "auto_examples/01_plotting/plot_demo_glass_brain_extensive.rst", "auto_examples/01_plotting/plot_demo_more_plotting.rst", "auto_examples/01_plotting/plot_demo_plotting.rst", "auto_examples/01_plotting/plot_dim_plotting.rst", "auto_examples/01_plotting/plot_haxby_masks.rst", "auto_examples/01_plotting/plot_multiscale_parcellations.rst", "auto_examples/01_plotting/plot_overlay.rst", "auto_examples/01_plotting/plot_prob_atlas.rst", "auto_examples/01_plotting/plot_surf_atlas.rst", "auto_examples/01_plotting/plot_surf_stat_map.rst", "auto_examples/01_plotting/plot_surface_projection_strategies.rst", "auto_examples/01_plotting/plot_visualization.rst", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats.rst", "auto_examples/01_plotting/sg_execution_times.rst", "auto_examples/02_decoding/index.rst", "auto_examples/02_decoding/plot_haxby_anova_svm.rst", "auto_examples/02_decoding/plot_haxby_different_estimators.rst", "auto_examples/02_decoding/plot_haxby_frem.rst", "auto_examples/02_decoding/plot_haxby_full_analysis.rst", "auto_examples/02_decoding/plot_haxby_glm_decoding.rst", "auto_examples/02_decoding/plot_haxby_grid_search.rst", "auto_examples/02_decoding/plot_haxby_multiclass.rst", "auto_examples/02_decoding/plot_haxby_searchlight.rst", "auto_examples/02_decoding/plot_haxby_searchlight_surface.rst", "auto_examples/02_decoding/plot_haxby_stimuli.rst", "auto_examples/02_decoding/plot_mixed_gambles_frem.rst", "auto_examples/02_decoding/plot_miyawaki_encoding.rst", "auto_examples/02_decoding/plot_miyawaki_reconstruction.rst", "auto_examples/02_decoding/plot_oasis_vbm.rst", "auto_examples/02_decoding/plot_oasis_vbm_space_net.rst", "auto_examples/02_decoding/plot_simulated_data.rst", "auto_examples/02_decoding/sg_execution_times.rst", "auto_examples/03_connectivity/index.rst", "auto_examples/03_connectivity/plot_atlas_comparison.rst", "auto_examples/03_connectivity/plot_compare_decomposition.rst", "auto_examples/03_connectivity/plot_data_driven_parcellations.rst", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps.rst", "auto_examples/03_connectivity/plot_group_level_connectivity.rst", "auto_examples/03_connectivity/plot_inverse_covariance_connectome.rst", "auto_examples/03_connectivity/plot_multi_subject_connectome.rst", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction.rst", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation.rst", "auto_examples/03_connectivity/plot_signal_extraction.rst", "auto_examples/03_connectivity/plot_simulated_connectome.rst", "auto_examples/03_connectivity/plot_sphere_based_connectome.rst", "auto_examples/03_connectivity/sg_execution_times.rst", "auto_examples/04_glm_first_level/index.rst", "auto_examples/04_glm_first_level/plot_adhd_dmn.rst", "auto_examples/04_glm_first_level/plot_bids_features.rst", "auto_examples/04_glm_first_level/plot_design_matrix.rst", "auto_examples/04_glm_first_level/plot_fiac_analysis.rst", "auto_examples/04_glm_first_level/plot_fir_model.rst", "auto_examples/04_glm_first_level/plot_first_level_details.rst", "auto_examples/04_glm_first_level/plot_fixed_effects.rst", "auto_examples/04_glm_first_level/plot_hrf.rst", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis.rst", "auto_examples/04_glm_first_level/plot_predictions_residuals.rst", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces.rst", "auto_examples/04_glm_first_level/plot_write_events_file.rst", "auto_examples/04_glm_first_level/sg_execution_times.rst", "auto_examples/05_glm_second_level/index.rst", "auto_examples/05_glm_second_level/plot_oasis.rst", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels.rst", "auto_examples/05_glm_second_level/plot_second_level_association_test.rst", "auto_examples/05_glm_second_level/plot_second_level_design_matrix.rst", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test.rst", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test.rst", "auto_examples/05_glm_second_level/plot_thresholding.rst", "auto_examples/05_glm_second_level/sg_execution_times.rst", "auto_examples/06_manipulating_images/index.rst", "auto_examples/06_manipulating_images/plot_affine_transformation.rst", "auto_examples/06_manipulating_images/plot_compare_mean_image.rst", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image.rst", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas.rst", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps.rst", "auto_examples/06_manipulating_images/plot_mask_computation.rst", "auto_examples/06_manipulating_images/plot_negate_image.rst", "auto_examples/06_manipulating_images/plot_nifti_labels_simple.rst", "auto_examples/06_manipulating_images/plot_nifti_simple.rst", "auto_examples/06_manipulating_images/plot_resample_to_template.rst", "auto_examples/06_manipulating_images/plot_roi_extraction.rst", "auto_examples/06_manipulating_images/plot_smooth_mean_image.rst", "auto_examples/06_manipulating_images/sg_execution_times.rst", "auto_examples/07_advanced/index.rst", "auto_examples/07_advanced/plot_advanced_decoding_scikit.rst", "auto_examples/07_advanced/plot_age_group_prediction_cross_val.rst", "auto_examples/07_advanced/plot_beta_series.rst", "auto_examples/07_advanced/plot_bids_analysis.rst", "auto_examples/07_advanced/plot_haxby_mass_univariate.rst", "auto_examples/07_advanced/plot_ica_neurovault.rst", "auto_examples/07_advanced/plot_ica_resting_state.rst", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods.rst", "auto_examples/07_advanced/plot_localizer_simple_analysis.rst", "auto_examples/07_advanced/plot_neurovault_meta_analysis.rst", "auto_examples/07_advanced/plot_surface_bids_analysis.rst", "auto_examples/07_advanced/sg_execution_times.rst", "auto_examples/08_experimental/index.rst", "auto_examples/08_experimental/plot_surface_image_and_maskers.rst", "auto_examples/08_experimental/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/sg_execution_times.rst", "bibliography.rst", "building_blocks/index.rst", "building_blocks/manual_pipeline.rst", "building_blocks/neurovault.rst", "changes/0.1.0.rst", "changes/0.1.1.rst", "changes/0.1.2.rst", "changes/0.1.3.rst", "changes/0.1.4.rst", "changes/0.10.0.rst", "changes/0.10.1.rst", "changes/0.10.2.rst", "changes/0.2.0.rst", "changes/0.2.1.rst", "changes/0.2.2.rst", "changes/0.2.3.rst", "changes/0.2.4.rst", "changes/0.2.5.rst", "changes/0.2.6.rst", "changes/0.3.0.rst", "changes/0.3.1.rst", "changes/0.4.0.rst", "changes/0.4.1.rst", "changes/0.4.2.rst", "changes/0.5.0.rst", "changes/0.5.1.rst", "changes/0.5.2.rst", "changes/0.6.0.rst", "changes/0.6.1.rst", "changes/0.6.2.rst", "changes/0.7.0.rst", "changes/0.7.1.rst", "changes/0.8.0.rst", "changes/0.8.1.rst", "changes/0.9.0.rst", "changes/0.9.1.rst", "changes/0.9.2.rst", "changes/latest.rst", "changes/names.rst", "changes/whats_new.rst", "connectivity/connectome_extraction.rst", "connectivity/functional_connectomes.rst", "connectivity/index.rst", "connectivity/parcellating.rst", "connectivity/region_extraction.rst", "connectivity/resting_state_networks.rst", "decoding/decoding_intro.rst", "decoding/estimator_choice.rst", "decoding/frem.rst", "decoding/going_further.rst", "decoding/index.rst", "decoding/searchlight.rst", "decoding/space_net.rst", "developers/group_sparse_covariance.rst", "development.rst", "glm/first_level_model.rst", "glm/glm_intro.rst", "glm/index.rst", "glm/second_level_model.rst", "glossary.rst", "index.rst", "introduction.rst", "maintenance.rst", "manipulating_images/index.rst", "manipulating_images/input_output.rst", "manipulating_images/manipulating_images.rst", "manipulating_images/masker_objects.rst", "modules/connectome.rst", "modules/datasets.rst", "modules/decoding.rst", "modules/decomposition.rst", "modules/experimental.rst", "modules/generated/nilearn.connectome.ConnectivityMeasure.rst", "modules/generated/nilearn.connectome.GroupSparseCovariance.rst", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV.rst", "modules/generated/nilearn.connectome.cov_to_corr.rst", "modules/generated/nilearn.connectome.group_sparse_covariance.rst", "modules/generated/nilearn.connectome.prec_to_partial.rst", "modules/generated/nilearn.connectome.sym_matrix_to_vec.rst", "modules/generated/nilearn.connectome.vec_to_sym_matrix.rst", "modules/generated/nilearn.datasets.fetch_abide_pcp.rst", "modules/generated/nilearn.datasets.fetch_adhd.rst", "modules/generated/nilearn.datasets.fetch_atlas_aal.rst", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011.rst", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015.rst", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012.rst", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_difumo.rst", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford.rst", "modules/generated/nilearn.datasets.fetch_atlas_juelich.rst", "modules/generated/nilearn.datasets.fetch_atlas_msdl.rst", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017.rst", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018.rst", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux.rst", "modules/generated/nilearn.datasets.fetch_atlas_talairach.rst", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011.rst", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset.rst", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010.rst", "modules/generated/nilearn.datasets.fetch_coords_power_2011.rst", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018.rst", "modules/generated/nilearn.datasets.fetch_development_fmri.rst", "modules/generated/nilearn.datasets.fetch_ds000030_urls.rst", "modules/generated/nilearn.datasets.fetch_fiac_first_level.rst", "modules/generated/nilearn.datasets.fetch_haxby.rst", "modules/generated/nilearn.datasets.fetch_icbm152_2009.rst", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask.rst", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset.rst", "modules/generated/nilearn.datasets.fetch_localizer_button_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_contrasts.rst", "modules/generated/nilearn.datasets.fetch_localizer_first_level.rst", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats.rst", "modules/generated/nilearn.datasets.fetch_mixed_gambles.rst", "modules/generated/nilearn.datasets.fetch_miyawaki2008.rst", "modules/generated/nilearn.datasets.fetch_neurovault.rst", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task.rst", "modules/generated/nilearn.datasets.fetch_neurovault_ids.rst", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task.rst", "modules/generated/nilearn.datasets.fetch_oasis_vbm.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset_index.rst", "modules/generated/nilearn.datasets.fetch_spm_auditory.rst", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri.rst", "modules/generated/nilearn.datasets.fetch_surf_fsaverage.rst", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced.rst", "modules/generated/nilearn.datasets.get_data_dirs.rst", "modules/generated/nilearn.datasets.load_mni152_brain_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_template.rst", "modules/generated/nilearn.datasets.load_mni152_template.rst", "modules/generated/nilearn.datasets.load_mni152_wm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_wm_template.rst", "modules/generated/nilearn.datasets.load_sample_motor_activation_image.rst", "modules/generated/nilearn.datasets.patch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.select_from_index.rst", "modules/generated/nilearn.decoding.Decoder.rst", "modules/generated/nilearn.decoding.DecoderRegressor.rst", "modules/generated/nilearn.decoding.FREMClassifier.rst", "modules/generated/nilearn.decoding.FREMRegressor.rst", "modules/generated/nilearn.decoding.SearchLight.rst", "modules/generated/nilearn.decoding.SpaceNetClassifier.rst", "modules/generated/nilearn.decoding.SpaceNetRegressor.rst", "modules/generated/nilearn.decomposition.CanICA.rst", "modules/generated/nilearn.decomposition.DictLearning.rst", "modules/generated/nilearn.experimental.surface.FileMesh.rst", "modules/generated/nilearn.experimental.surface.InMemoryMesh.rst", "modules/generated/nilearn.experimental.surface.Mesh.rst", "modules/generated/nilearn.experimental.surface.PolyMesh.rst", "modules/generated/nilearn.experimental.surface.SurfaceImage.rst", "modules/generated/nilearn.experimental.surface.SurfaceLabelsMasker.rst", "modules/generated/nilearn.experimental.surface.SurfaceMasker.rst", "modules/generated/nilearn.experimental.surface.fetch_destrieux.rst", "modules/generated/nilearn.experimental.surface.fetch_nki.rst", "modules/generated/nilearn.experimental.surface.load_fsaverage.rst", "modules/generated/nilearn.glm.ARModel.rst", "modules/generated/nilearn.glm.Contrast.rst", "modules/generated/nilearn.glm.FContrastResults.rst", "modules/generated/nilearn.glm.LikelihoodModelResults.rst", "modules/generated/nilearn.glm.OLSModel.rst", "modules/generated/nilearn.glm.RegressionResults.rst", "modules/generated/nilearn.glm.SimpleRegressionResults.rst", "modules/generated/nilearn.glm.TContrastResults.rst", "modules/generated/nilearn.glm.cluster_level_inference.rst", "modules/generated/nilearn.glm.compute_contrast.rst", "modules/generated/nilearn.glm.compute_fixed_effects.rst", "modules/generated/nilearn.glm.expression_to_contrast_vector.rst", "modules/generated/nilearn.glm.fdr_threshold.rst", "modules/generated/nilearn.glm.first_level.FirstLevelModel.rst", "modules/generated/nilearn.glm.first_level.check_design_matrix.rst", "modules/generated/nilearn.glm.first_level.compute_regressor.rst", "modules/generated/nilearn.glm.first_level.first_level_from_bids.rst", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.glover_hrf.rst", "modules/generated/nilearn.glm.first_level.glover_time_derivative.rst", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix.rst", "modules/generated/nilearn.glm.first_level.mean_scaling.rst", "modules/generated/nilearn.glm.first_level.run_glm.rst", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.spm_hrf.rst", "modules/generated/nilearn.glm.first_level.spm_time_derivative.rst", "modules/generated/nilearn.glm.second_level.SecondLevelModel.rst", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix.rst", "modules/generated/nilearn.glm.second_level.non_parametric_inference.rst", "modules/generated/nilearn.glm.threshold_stats_img.rst", "modules/generated/nilearn.image.binarize_img.rst", "modules/generated/nilearn.image.clean_img.rst", "modules/generated/nilearn.image.concat_imgs.rst", "modules/generated/nilearn.image.coord_transform.rst", "modules/generated/nilearn.image.copy_img.rst", "modules/generated/nilearn.image.crop_img.rst", "modules/generated/nilearn.image.get_data.rst", "modules/generated/nilearn.image.high_variance_confounds.rst", "modules/generated/nilearn.image.index_img.rst", "modules/generated/nilearn.image.iter_img.rst", "modules/generated/nilearn.image.largest_connected_component_img.rst", "modules/generated/nilearn.image.load_img.rst", "modules/generated/nilearn.image.math_img.rst", "modules/generated/nilearn.image.mean_img.rst", "modules/generated/nilearn.image.new_img_like.rst", "modules/generated/nilearn.image.reorder_img.rst", "modules/generated/nilearn.image.resample_img.rst", "modules/generated/nilearn.image.resample_to_img.rst", "modules/generated/nilearn.image.smooth_img.rst", "modules/generated/nilearn.image.swap_img_hemispheres.rst", "modules/generated/nilearn.image.threshold_img.rst", "modules/generated/nilearn.interfaces.bids.get_bids_files.rst", "modules/generated/nilearn.interfaces.bids.parse_bids_filename.rst", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy.rst", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat.rst", "modules/generated/nilearn.maskers.BaseMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.NiftiMapsMasker.rst", "modules/generated/nilearn.maskers.NiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiSpheresMasker.rst", "modules/generated/nilearn.masking.apply_mask.rst", "modules/generated/nilearn.masking.compute_background_mask.rst", "modules/generated/nilearn.masking.compute_brain_mask.rst", "modules/generated/nilearn.masking.compute_epi_mask.rst", "modules/generated/nilearn.masking.compute_multi_background_mask.rst", "modules/generated/nilearn.masking.compute_multi_brain_mask.rst", "modules/generated/nilearn.masking.compute_multi_epi_mask.rst", "modules/generated/nilearn.masking.intersect_masks.rst", "modules/generated/nilearn.masking.unmask.rst", "modules/generated/nilearn.mass_univariate.permuted_ols.rst", "modules/generated/nilearn.plotting.displays.BaseAxes.rst", "modules/generated/nilearn.plotting.displays.BaseSlicer.rst", "modules/generated/nilearn.plotting.displays.CutAxes.rst", "modules/generated/nilearn.plotting.displays.GlassBrainAxes.rst", "modules/generated/nilearn.plotting.displays.LProjector.rst", "modules/generated/nilearn.plotting.displays.LRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRZProjector.rst", "modules/generated/nilearn.plotting.displays.LZRProjector.rst", "modules/generated/nilearn.plotting.displays.LZRYProjector.rst", "modules/generated/nilearn.plotting.displays.MosaicSlicer.rst", "modules/generated/nilearn.plotting.displays.OrthoProjector.rst", "modules/generated/nilearn.plotting.displays.OrthoSlicer.rst", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure.rst", "modules/generated/nilearn.plotting.displays.RProjector.rst", "modules/generated/nilearn.plotting.displays.TiledSlicer.rst", "modules/generated/nilearn.plotting.displays.XProjector.rst", "modules/generated/nilearn.plotting.displays.XSlicer.rst", "modules/generated/nilearn.plotting.displays.XZProjector.rst", "modules/generated/nilearn.plotting.displays.XZSlicer.rst", "modules/generated/nilearn.plotting.displays.YProjector.rst", "modules/generated/nilearn.plotting.displays.YSlicer.rst", "modules/generated/nilearn.plotting.displays.YXProjector.rst", "modules/generated/nilearn.plotting.displays.YXSlicer.rst", "modules/generated/nilearn.plotting.displays.YZProjector.rst", "modules/generated/nilearn.plotting.displays.YZSlicer.rst", "modules/generated/nilearn.plotting.displays.ZProjector.rst", "modules/generated/nilearn.plotting.displays.ZSlicer.rst", "modules/generated/nilearn.plotting.displays.get_projector.rst", "modules/generated/nilearn.plotting.displays.get_slicer.rst", "modules/generated/nilearn.plotting.find_cut_slices.rst", "modules/generated/nilearn.plotting.find_parcellation_cut_coords.rst", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords.rst", "modules/generated/nilearn.plotting.find_xyz_cut_coords.rst", "modules/generated/nilearn.plotting.plot_anat.rst", "modules/generated/nilearn.plotting.plot_carpet.rst", "modules/generated/nilearn.plotting.plot_connectome.rst", "modules/generated/nilearn.plotting.plot_contrast_matrix.rst", "modules/generated/nilearn.plotting.plot_design_matrix.rst", "modules/generated/nilearn.plotting.plot_epi.rst", "modules/generated/nilearn.plotting.plot_event.rst", "modules/generated/nilearn.plotting.plot_glass_brain.rst", "modules/generated/nilearn.plotting.plot_img.rst", "modules/generated/nilearn.plotting.plot_img_comparison.rst", "modules/generated/nilearn.plotting.plot_img_on_surf.rst", "modules/generated/nilearn.plotting.plot_markers.rst", "modules/generated/nilearn.plotting.plot_matrix.rst", "modules/generated/nilearn.plotting.plot_prob_atlas.rst", "modules/generated/nilearn.plotting.plot_roi.rst", "modules/generated/nilearn.plotting.plot_stat_map.rst", "modules/generated/nilearn.plotting.plot_surf.rst", "modules/generated/nilearn.plotting.plot_surf_contours.rst", "modules/generated/nilearn.plotting.plot_surf_roi.rst", "modules/generated/nilearn.plotting.plot_surf_stat_map.rst", "modules/generated/nilearn.plotting.show.rst", "modules/generated/nilearn.plotting.view_connectome.rst", "modules/generated/nilearn.plotting.view_img.rst", "modules/generated/nilearn.plotting.view_img_on_surf.rst", "modules/generated/nilearn.plotting.view_markers.rst", "modules/generated/nilearn.plotting.view_surf.rst", "modules/generated/nilearn.regions.HierarchicalKMeans.rst", "modules/generated/nilearn.regions.Parcellations.rst", "modules/generated/nilearn.regions.ReNA.rst", "modules/generated/nilearn.regions.RegionExtractor.rst", "modules/generated/nilearn.regions.connected_label_regions.rst", "modules/generated/nilearn.regions.connected_regions.rst", "modules/generated/nilearn.regions.img_to_signals_labels.rst", "modules/generated/nilearn.regions.img_to_signals_maps.rst", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration.rst", "modules/generated/nilearn.regions.signals_to_img_labels.rst", "modules/generated/nilearn.regions.signals_to_img_maps.rst", "modules/generated/nilearn.reporting.HTMLReport.rst", "modules/generated/nilearn.reporting.get_clusters_table.rst", "modules/generated/nilearn.reporting.make_glm_report.rst", "modules/generated/nilearn.signal.butterworth.rst", "modules/generated/nilearn.signal.clean.rst", "modules/generated/nilearn.signal.high_variance_confounds.rst", "modules/generated/nilearn.surface.load_surf_data.rst", "modules/generated/nilearn.surface.load_surf_mesh.rst", "modules/generated/nilearn.surface.vol_to_surf.rst", "modules/glm.rst", "modules/image.rst", "modules/index.rst", "modules/interfaces.rst", "modules/maskers.rst", "modules/masking.rst", "modules/mass_univariate.rst", "modules/plotting.rst", "modules/regions.rst", "modules/reporting.rst", "modules/signal.rst", "modules/surface.rst", "plotting/index.rst", "quickstart.md", "sg_execution_times.rst", "user_guide.rst"], "titles": ["Team", "Basic tutorials", "3D and 4D niimgs: handling and visualizing", "A introduction tutorial to fMRI decoding", "Basic nilearn example: manipulating and looking at data", "Basic numerics and plotting with Python", "Intro to GLM Analysis: a single-session, single-subject fMRI dataset", "Computation times", "Visualization of brain images", "Making a surface plot of a 3D statistical map", "Basic Atlas plotting", "Visualizing global patterns with a carpet plot", "Matplotlib colormaps in Nilearn", "Glass brain plotting in nilearn", "Glass brain plotting in nilearn (all options)", "More plotting tools from nilearn", "Plotting tools in nilearn", "Controlling the contrast of the background when plotting", "Plot Haxby masks", "Visualizing multiscale functional brain parcellations", "Visualizing a probabilistic atlas: the default mode in the MSDL atlas", "Visualizing 4D probabilistic atlas maps", "Loading and plotting of a cortical surface atlas", "Seed-based connectivity on the surface", "Technical point: Illustration of the volume to surface sampling schemes", "NeuroImaging volumes visualization", "Visualizing Megatrawls Network Matrices from Human Connectome Project", "Computation times", "Decoding and predicting from brain images", "Decoding with ANOVA + SVM: face vs house in the Haxby dataset", "Different classifiers in decoding the Haxby dataset", "Decoding with FREM: face vs house vs chair object recognition", "ROI-based decoding analysis in Haxby et al. dataset", "Decoding of a dataset after GLM fit for signal extraction", "Setting a parameter by cross-validation", "The haxby dataset: different multi-class strategies", "Searchlight analysis of face vs house recognition", "Cortical surface-based searchlight decoding", "Show stimuli of Haxby et al. dataset", "FREM on Jimura et al \u201cmixed gambles\u201d dataset", "Encoding models for visual stimuli from Miyawaki et al. 2008", "Reconstruction of visual stimuli from Miyawaki et al. 2008", "Voxel-Based Morphometry on Oasis dataset", "Voxel-Based Morphometry on Oasis dataset with Space-Net prior", "Example of pattern recognition on simulated data", "Computation times", "Functional connectivity", "Comparing connectomes on different reference atlases", "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning", "Clustering methods to learn a brain parcellation from fMRI", "Regions extraction using dictionary learning and functional connectomes", "Classification of age groups using functional connectivity", "Computing a connectome with sparse inverse covariance", "Group Sparse inverse covariance for multi-subject connectome", "Extracting signals of a probabilistic atlas of functional regions", "Producing single subject maps of seed-to-voxel correlation", "Extracting signals from a brain parcellation", "Connectivity structure estimation on simulated data", "Extract signals on spheres and plot a connectome", "Computation times", "GLM: First level analysis", "Default Mode Network extraction of ADHD dataset", "First level analysis of a complete BIDS dataset from openneuro", "Examples of design matrices", "Simple example of two-session fMRI model fitting", "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model", "Understanding parameters of the first-level model", "Example of explicit fixed effects fMRI model fitting", "Example of MRI response functions", "Example of surface-based first-level analysis", "Predicted time series and residuals", "Single-subject data (two sessions) in native space", "Generate an events.tsv file for the NeuroSpin localizer task", "Computation times", "GLM: Second level analysis", "Voxel-Based Morphometry on OASIS dataset", "Second-level fMRI model: true positive proportion in clusters", "Example of generic design in second-level models", "Example of second level design matrix", "Second-level fMRI model: one sample test", "Second-level fMRI model: two-sample test, unpaired and paired", "Statistical testing of a second-level analysis", "Computation times", "Manipulating brain image volumes", "Visualization of affine resamplings", "Comparing the means of 2 images", "Breaking an atlas of labels in separated regions", "Regions Extraction of Default Mode Networks using Smith Atlas", "Region Extraction using a t-statistical map (3D)", "Understanding NiftiMasker and mask computation", "Negating an image with math_img", "Extracting signals from brain regions using the NiftiLabelsMasker", "Simple example of NiftiMasker use", "Resample an image to a template", "Computing a Region of Interest (ROI) mask manually", "Smoothing an image", "Computation times", "Advanced statistical analysis of brain images", "Advanced decoding using scikit learn", "Functional connectivity predicts age group", "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding", "BIDS dataset first and second level analysis", "Massively univariate analysis of face vs house recognition", "NeuroVault cross-study ICA maps", "Multivariate decompositions: Independent component analysis of fMRI", "Massively univariate analysis of a motor task from the Localizer dataset", "Massively univariate analysis of a calculation task from the Localizer dataset", "NeuroVault meta-analysis of stop-go paradigm studies", "Surface-based dataset first and second level analysis of a dataset", "Computation times", "Examples for experimental modules", "A short demo of the surface images &amp; maskers", "Computation times", "Examples", "Computation times", "General bibliography", "<span class=\"section-number\">10. </span>Advanced usage: manual pipelines and scaling up", "<span class=\"section-number\">10.1. </span>Building your own neuroimaging machine-learning pipeline", "<span class=\"section-number\">10.2. </span>Downloading statistical maps from the Neurovault repository", "0.1.0", "0.1.1", "0.1.2", "0.1.3", "0.1.4", "0.10.0", "0.10.1", "0.10.2", "0.2.0", "0.2.1", "0.2.2", "0.2.3", "0.2.4", "0.2.5.1", "0.2.6", "0.3.0", "0.3.1", "0.4.0", "0.4.1", "0.4.2", "0.5.0", "0.5.1", "0.5.2", "0.6.0", "0.6.1", "0.6.2", "0.7.0", "0.7.1", "0.8.0", "0.8.1", "0.9.0", "0.9.1", "0.9.2", "0.11.0.dev", "&lt;no title&gt;", "What\u2019s new", "<span class=\"section-number\">6.2. </span>Connectome extraction: inverse covariance for direct connections", "<span class=\"section-number\">6.1. </span>Extracting times series to build a functional connectome", "<span class=\"section-number\">6. </span>Functional connectivity and resting state", "<span class=\"section-number\">6.5. </span>Clustering to parcellate the brain in regions", "<span class=\"section-number\">6.4. </span>Region Extraction for better brain parcellations", "<span class=\"section-number\">6.3. </span>Extracting functional brain networks: ICA and related", "<span class=\"section-number\">5.1. </span>An introduction to decoding", "<span class=\"section-number\">5.2. </span>Choosing the right predictive model for neuroimaging", "<span class=\"section-number\">5.3. </span>FREM: fast ensembling of regularized models for robust decoding", "<span class=\"section-number\">5.6. </span>Running scikit-learn functions for more control on the analysis", "<span class=\"section-number\">5. </span>Decoding and MVPA: predicting from brain images", "<span class=\"section-number\">5.5. </span>Searchlight : finding voxels containing information", "<span class=\"section-number\">5.4. </span>SpaceNet: decoding with spatial structure for better maps", "<span class=\"section-number\">6.2.3.1. </span>Group-sparse covariance estimation", "Contributing", "<span class=\"section-number\">8.2. </span>First level models", "<span class=\"section-number\">8.1. </span>An introduction to GLMs in fMRI statistical analysis", "<span class=\"section-number\">8. </span>Analyzing fMRI using GLMs", "<span class=\"section-number\">8.3. </span>Second level models", "Glossary", "Nilearn", "<span class=\"section-number\">1. </span>Introduction", "Maintenance", "<span class=\"section-number\">9. </span>Manipulation brain volumes with nilearn", "<span class=\"section-number\">9.1. </span>Input and output: neuroimaging data representation", "<span class=\"section-number\">9.2. </span>Manipulating images: resampling, smoothing, masking, ROIs\u2026", "<span class=\"section-number\">9.3. </span>From neuroimaging volumes to data matrices: the masker objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.connectome</span></code>: Functional Connectivity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.datasets</span></code>: Automatic Dataset Fetching", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decoding</span></code>: Decoding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decomposition</span></code>: Multivariate Decompositions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.experimental</span></code>: Experimental Modules", "nilearn.connectome.ConnectivityMeasure", "nilearn.connectome.GroupSparseCovariance", "nilearn.connectome.GroupSparseCovarianceCV", "nilearn.connectome.cov_to_corr", "nilearn.connectome.group_sparse_covariance", "nilearn.connectome.prec_to_partial", "nilearn.connectome.sym_matrix_to_vec", "nilearn.connectome.vec_to_sym_matrix", "nilearn.datasets.fetch_abide_pcp", "nilearn.datasets.fetch_adhd", "nilearn.datasets.fetch_atlas_aal", "nilearn.datasets.fetch_atlas_allen_2011", "nilearn.datasets.fetch_atlas_basc_multiscale_2015", "nilearn.datasets.fetch_atlas_craddock_2012", "nilearn.datasets.fetch_atlas_destrieux_2009", "nilearn.datasets.fetch_atlas_difumo", "nilearn.datasets.fetch_atlas_harvard_oxford", "nilearn.datasets.fetch_atlas_juelich", "nilearn.datasets.fetch_atlas_msdl", "nilearn.datasets.fetch_atlas_pauli_2017", "nilearn.datasets.fetch_atlas_schaefer_2018", "nilearn.datasets.fetch_atlas_smith_2009", "nilearn.datasets.fetch_atlas_surf_destrieux", "nilearn.datasets.fetch_atlas_talairach", "nilearn.datasets.fetch_atlas_yeo_2011", "nilearn.datasets.fetch_bids_langloc_dataset", "nilearn.datasets.fetch_coords_dosenbach_2010", "nilearn.datasets.fetch_coords_power_2011", "nilearn.datasets.fetch_coords_seitzman_2018", "nilearn.datasets.fetch_development_fmri", "nilearn.datasets.fetch_ds000030_urls", "nilearn.datasets.fetch_fiac_first_level", "nilearn.datasets.fetch_haxby", "nilearn.datasets.fetch_icbm152_2009", "nilearn.datasets.fetch_icbm152_brain_gm_mask", "nilearn.datasets.fetch_language_localizer_demo_dataset", "nilearn.datasets.fetch_localizer_button_task", "nilearn.datasets.fetch_localizer_calculation_task", "nilearn.datasets.fetch_localizer_contrasts", "nilearn.datasets.fetch_localizer_first_level", "nilearn.datasets.fetch_megatrawls_netmats", "nilearn.datasets.fetch_mixed_gambles", "nilearn.datasets.fetch_miyawaki2008", "nilearn.datasets.fetch_neurovault", "nilearn.datasets.fetch_neurovault_auditory_computation_task", "nilearn.datasets.fetch_neurovault_ids", "nilearn.datasets.fetch_neurovault_motor_task", "nilearn.datasets.fetch_oasis_vbm", "nilearn.datasets.fetch_openneuro_dataset", "nilearn.datasets.fetch_openneuro_dataset_index", "nilearn.datasets.fetch_spm_auditory", "nilearn.datasets.fetch_spm_multimodal_fmri", "nilearn.datasets.fetch_surf_fsaverage", "nilearn.datasets.fetch_surf_nki_enhanced", "nilearn.datasets.get_data_dirs", "nilearn.datasets.load_mni152_brain_mask", "nilearn.datasets.load_mni152_gm_mask", "nilearn.datasets.load_mni152_gm_template", "nilearn.datasets.load_mni152_template", "nilearn.datasets.load_mni152_wm_mask", "nilearn.datasets.load_mni152_wm_template", "nilearn.datasets.load_sample_motor_activation_image", "nilearn.datasets.patch_openneuro_dataset", "nilearn.datasets.select_from_index", "nilearn.decoding.Decoder", "nilearn.decoding.DecoderRegressor", "nilearn.decoding.FREMClassifier", "nilearn.decoding.FREMRegressor", "nilearn.decoding.SearchLight", "nilearn.decoding.SpaceNetClassifier", "nilearn.decoding.SpaceNetRegressor", "nilearn.decomposition.CanICA", "nilearn.decomposition.DictLearning", "nilearn.experimental.surface.FileMesh", "nilearn.experimental.surface.InMemoryMesh", "nilearn.experimental.surface.Mesh", "nilearn.experimental.surface.PolyMesh", "nilearn.experimental.surface.SurfaceImage", "nilearn.experimental.surface.SurfaceLabelsMasker", "nilearn.experimental.surface.SurfaceMasker", "nilearn.experimental.surface.fetch_destrieux", "nilearn.experimental.surface.fetch_nki", "nilearn.experimental.surface.load_fsaverage", "nilearn.glm.ARModel", "nilearn.glm.Contrast", "nilearn.glm.FContrastResults", "nilearn.glm.LikelihoodModelResults", "nilearn.glm.OLSModel", "nilearn.glm.RegressionResults", "nilearn.glm.SimpleRegressionResults", "nilearn.glm.TContrastResults", "nilearn.glm.cluster_level_inference", "nilearn.glm.compute_contrast", "nilearn.glm.compute_fixed_effects", "nilearn.glm.expression_to_contrast_vector", "nilearn.glm.fdr_threshold", "nilearn.glm.first_level.FirstLevelModel", "nilearn.glm.first_level.check_design_matrix", "nilearn.glm.first_level.compute_regressor", "nilearn.glm.first_level.first_level_from_bids", "nilearn.glm.first_level.glover_dispersion_derivative", "nilearn.glm.first_level.glover_hrf", "nilearn.glm.first_level.glover_time_derivative", "nilearn.glm.first_level.make_first_level_design_matrix", "nilearn.glm.first_level.mean_scaling", "nilearn.glm.first_level.run_glm", "nilearn.glm.first_level.spm_dispersion_derivative", "nilearn.glm.first_level.spm_hrf", "nilearn.glm.first_level.spm_time_derivative", "nilearn.glm.second_level.SecondLevelModel", "nilearn.glm.second_level.make_second_level_design_matrix", "nilearn.glm.second_level.non_parametric_inference", "nilearn.glm.threshold_stats_img", "nilearn.image.binarize_img", "nilearn.image.clean_img", "nilearn.image.concat_imgs", "nilearn.image.coord_transform", "nilearn.image.copy_img", "nilearn.image.crop_img", "nilearn.image.get_data", "nilearn.image.high_variance_confounds", "nilearn.image.index_img", "nilearn.image.iter_img", "nilearn.image.largest_connected_component_img", "nilearn.image.load_img", "nilearn.image.math_img", "nilearn.image.mean_img", "nilearn.image.new_img_like", "nilearn.image.reorder_img", "nilearn.image.resample_img", "nilearn.image.resample_to_img", "nilearn.image.smooth_img", "nilearn.image.swap_img_hemispheres", "nilearn.image.threshold_img", "nilearn.interfaces.bids.get_bids_files", "nilearn.interfaces.bids.parse_bids_filename", "nilearn.interfaces.bids.save_glm_to_bids", "nilearn.interfaces.fmriprep.load_confounds", "nilearn.interfaces.fmriprep.load_confounds_strategy", "nilearn.interfaces.fsl.get_design_from_fslmat", "nilearn.maskers.BaseMasker", "nilearn.maskers.MultiNiftiLabelsMasker", "nilearn.maskers.MultiNiftiMapsMasker", "nilearn.maskers.MultiNiftiMasker", "nilearn.maskers.NiftiLabelsMasker", "nilearn.maskers.NiftiMapsMasker", "nilearn.maskers.NiftiMasker", "nilearn.maskers.NiftiSpheresMasker", "nilearn.masking.apply_mask", "nilearn.masking.compute_background_mask", "nilearn.masking.compute_brain_mask", "nilearn.masking.compute_epi_mask", "nilearn.masking.compute_multi_background_mask", "nilearn.masking.compute_multi_brain_mask", "nilearn.masking.compute_multi_epi_mask", "nilearn.masking.intersect_masks", "nilearn.masking.unmask", "nilearn.mass_univariate.permuted_ols", "nilearn.plotting.displays.BaseAxes", "nilearn.plotting.displays.BaseSlicer", "nilearn.plotting.displays.CutAxes", "nilearn.plotting.displays.GlassBrainAxes", "nilearn.plotting.displays.LProjector", "nilearn.plotting.displays.LRProjector", "nilearn.plotting.displays.LYRProjector", "nilearn.plotting.displays.LYRZProjector", "nilearn.plotting.displays.LZRProjector", "nilearn.plotting.displays.LZRYProjector", "nilearn.plotting.displays.MosaicSlicer", "nilearn.plotting.displays.OrthoProjector", "nilearn.plotting.displays.OrthoSlicer", "nilearn.plotting.displays.PlotlySurfaceFigure", "nilearn.plotting.displays.RProjector", "nilearn.plotting.displays.TiledSlicer", "nilearn.plotting.displays.XProjector", "nilearn.plotting.displays.XSlicer", "nilearn.plotting.displays.XZProjector", "nilearn.plotting.displays.XZSlicer", "nilearn.plotting.displays.YProjector", "nilearn.plotting.displays.YSlicer", "nilearn.plotting.displays.YXProjector", "nilearn.plotting.displays.YXSlicer", "nilearn.plotting.displays.YZProjector", "nilearn.plotting.displays.YZSlicer", "nilearn.plotting.displays.ZProjector", "nilearn.plotting.displays.ZSlicer", "nilearn.plotting.displays.get_projector", "nilearn.plotting.displays.get_slicer", "nilearn.plotting.find_cut_slices", "nilearn.plotting.find_parcellation_cut_coords", "nilearn.plotting.find_probabilistic_atlas_cut_coords", "nilearn.plotting.find_xyz_cut_coords", "nilearn.plotting.plot_anat", "nilearn.plotting.plot_carpet", "nilearn.plotting.plot_connectome", "nilearn.plotting.plot_contrast_matrix", "nilearn.plotting.plot_design_matrix", "nilearn.plotting.plot_epi", "nilearn.plotting.plot_event", "nilearn.plotting.plot_glass_brain", "nilearn.plotting.plot_img", "nilearn.plotting.plot_img_comparison", "nilearn.plotting.plot_img_on_surf", "nilearn.plotting.plot_markers", "nilearn.plotting.plot_matrix", "nilearn.plotting.plot_prob_atlas", "nilearn.plotting.plot_roi", "nilearn.plotting.plot_stat_map", "nilearn.plotting.plot_surf", "nilearn.plotting.plot_surf_contours", "nilearn.plotting.plot_surf_roi", "nilearn.plotting.plot_surf_stat_map", "nilearn.plotting.show", "nilearn.plotting.view_connectome", "nilearn.plotting.view_img", "nilearn.plotting.view_img_on_surf", "nilearn.plotting.view_markers", "nilearn.plotting.view_surf", "nilearn.regions.HierarchicalKMeans", "nilearn.regions.Parcellations", "nilearn.regions.ReNA", "nilearn.regions.RegionExtractor", "nilearn.regions.connected_label_regions", "nilearn.regions.connected_regions", "nilearn.regions.img_to_signals_labels", "nilearn.regions.img_to_signals_maps", "nilearn.regions.recursive_neighbor_agglomeration", "nilearn.regions.signals_to_img_labels", "nilearn.regions.signals_to_img_maps", "nilearn.reporting.HTMLReport", "nilearn.reporting.get_clusters_table", "nilearn.reporting.make_glm_report", "nilearn.signal.butterworth", "nilearn.signal.clean", "nilearn.signal.high_variance_confounds", "nilearn.surface.load_surf_data", "nilearn.surface.load_surf_mesh", "nilearn.surface.vol_to_surf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.glm</span></code>: Generalized Linear Models", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.image</span></code>: Image Processing and Resampling Utilities", "API References", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.interfaces</span></code>: Loading components from interfaces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.maskers</span></code>: Extracting Signals from Brain Images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.masking</span></code>: Data Masking Utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.mass_univariate</span></code>: Mass-Univariate Analysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.plotting</span></code>: Plotting Brain Data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.regions</span></code>: Operating on Regions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.reporting</span></code>: Reporting Functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.signal</span></code>: Preprocessing Time Series", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.surface</span></code>: Manipulating Surface Data", "<span class=\"section-number\">7. </span>Plotting brain images", "Quickstart", "Computation times", "User guide"], "terms": {"thi": [0, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 116, 117, 118, 125, 126, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 434, 435, 437, 440], "work": [0, 2, 3, 6, 10, 11, 16, 18, 20, 23, 25, 29, 30, 31, 32, 34, 35, 36, 39, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 61, 64, 75, 77, 84, 85, 89, 91, 92, 94, 95, 98, 100, 101, 102, 104, 105, 108, 126, 134, 135, 142, 149, 150, 154, 155, 160, 161, 162, 164, 168, 169, 170, 171, 177, 179, 180, 181, 187, 188, 189, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 323, 327, 328, 329, 330, 331, 332, 333, 334, 375, 381, 386, 405, 406, 407, 408, 417, 426, 428], "i": [0, 2, 4, 6, 9, 10, 11, 14, 15, 16, 18, 20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 111, 115, 116, 117, 118, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 173, 174, 175, 177, 178, 180, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 437, 438, 440], "made": [0, 21, 101, 108, 125, 145, 148, 149, 154, 165, 168, 169, 171, 174, 176, 177, 251, 252, 253, 254, 256, 257, 344, 401, 440], "avail": [0, 3, 15, 23, 24, 31, 39, 42, 62, 75, 80, 89, 94, 101, 106, 108, 118, 125, 142, 147, 154, 156, 159, 162, 164, 168, 170, 173, 176, 177, 195, 199, 202, 208, 216, 225, 227, 229, 234, 256, 257, 391, 396, 424, 438, 440], "commun": [0, 115, 169, 175, 177, 216, 438], "peopl": [0, 6, 136, 139, 140, 141, 142, 143, 144, 154, 168, 169], "which": [0, 3, 6, 9, 12, 14, 15, 21, 22, 23, 25, 29, 30, 32, 33, 34, 36, 37, 40, 42, 44, 47, 49, 51, 58, 61, 66, 68, 69, 70, 75, 76, 79, 84, 89, 91, 94, 98, 100, 108, 117, 118, 123, 124, 125, 127, 132, 133, 136, 137, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 159, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 174, 176, 177, 179, 180, 181, 194, 201, 203, 204, 206, 207, 210, 211, 216, 230, 231, 232, 233, 237, 238, 239, 241, 251, 252, 253, 254, 255, 256, 257, 258, 259, 270, 273, 274, 275, 276, 282, 283, 286, 290, 291, 296, 298, 300, 305, 311, 316, 320, 322, 323, 328, 329, 330, 331, 332, 333, 334, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 401, 406, 408, 409, 410, 416, 418, 424, 437, 438], "origin": [0, 6, 36, 40, 41, 49, 50, 66, 70, 84, 89, 93, 100, 125, 133, 146, 148, 149, 154, 158, 166, 168, 177, 181, 187, 188, 189, 208, 216, 220, 225, 234, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 300, 320, 327, 328, 329, 330, 331, 332, 333, 334, 380, 395, 397, 398, 402, 404, 405, 406, 407, 408, 420], "from": [0, 4, 6, 7, 8, 9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 99, 101, 102, 103, 104, 107, 108, 109, 111, 112, 114, 115, 116, 119, 120, 122, 123, 124, 125, 126, 127, 129, 132, 135, 136, 139, 140, 142, 147, 148, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 183, 187, 188, 189, 191, 196, 197, 199, 201, 202, 203, 204, 206, 207, 208, 210, 211, 213, 215, 216, 217, 219, 220, 221, 223, 224, 225, 227, 229, 230, 231, 232, 233, 234, 235, 240, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 265, 266, 272, 273, 274, 275, 276, 277, 280, 282, 283, 286, 290, 296, 297, 298, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 379, 380, 382, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 424, 430, 432, 437, 438, 439, 440], "inria": [0, 115, 167, 205, 408], "mind": [0, 51, 161, 162, 169, 174], "project": [0, 8, 9, 15, 23, 24, 27, 42, 58, 75, 108, 111, 113, 115, 132, 134, 136, 144, 148, 149, 154, 168, 170, 175, 195, 200, 227, 234, 240, 258, 259, 301, 348, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 386, 389, 391, 395, 396, 397, 398, 399, 400, 403, 420, 424, 437, 439], "grew": 0, "much": [0, 3, 24, 40, 42, 51, 77, 79, 99, 100, 139, 154, 161, 168, 169, 171, 176, 213, 305, 316, 424], "further": [0, 14, 15, 55, 66, 70, 84, 94, 116, 155, 163, 165, 168, 177, 179, 183, 230, 283, 296, 324, 358, 429, 430, 437, 440], "an": [0, 2, 3, 4, 11, 14, 15, 16, 20, 21, 22, 23, 25, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 54, 55, 56, 60, 62, 63, 66, 68, 69, 70, 71, 73, 75, 79, 80, 83, 84, 88, 89, 91, 92, 94, 96, 100, 101, 102, 103, 105, 108, 113, 115, 117, 118, 124, 125, 126, 127, 130, 131, 132, 134, 135, 136, 137, 139, 142, 144, 145, 146, 147, 149, 151, 154, 155, 156, 157, 159, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 176, 177, 179, 180, 181, 187, 188, 189, 193, 197, 200, 201, 205, 211, 216, 225, 226, 228, 230, 232, 234, 235, 245, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 270, 272, 273, 274, 275, 276, 279, 283, 290, 292, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 310, 311, 312, 313, 315, 316, 317, 318, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 416, 418, 420, 421, 422, 424, 426, 439, 440], "up": [0, 3, 6, 33, 36, 47, 84, 86, 89, 94, 98, 103, 115, 124, 126, 139, 140, 142, 147, 149, 154, 158, 164, 165, 167, 168, 170, 171, 172, 174, 177, 181, 235, 270, 273, 297, 344, 380, 405, 424, 440], "date": [0, 148, 154, 198, 201, 220, 230, 232], "list": [0, 2, 3, 6, 9, 14, 15, 16, 21, 30, 33, 44, 47, 48, 49, 51, 53, 55, 58, 61, 62, 64, 67, 71, 72, 75, 76, 79, 80, 85, 94, 99, 100, 101, 103, 108, 111, 117, 118, 124, 126, 127, 130, 132, 133, 134, 138, 139, 142, 148, 149, 151, 152, 154, 155, 161, 169, 176, 177, 179, 180, 181, 187, 188, 189, 191, 193, 194, 195, 197, 198, 201, 203, 204, 205, 206, 207, 209, 210, 212, 213, 216, 217, 219, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 265, 278, 280, 281, 283, 285, 286, 290, 296, 297, 298, 299, 301, 302, 310, 311, 313, 316, 318, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 382, 385, 388, 389, 391, 392, 395, 396, 397, 398, 403, 404, 406, 408, 409, 410, 411, 412, 417, 418, 420, 422, 423, 424, 438], "can": [0, 2, 3, 4, 6, 9, 11, 12, 14, 15, 20, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 61, 62, 64, 65, 66, 68, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 86, 88, 89, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 115, 116, 117, 118, 124, 125, 127, 130, 132, 134, 139, 140, 142, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 179, 180, 181, 188, 189, 191, 194, 195, 198, 201, 202, 203, 204, 205, 206, 207, 211, 225, 227, 230, 234, 251, 252, 253, 254, 255, 256, 257, 273, 275, 276, 283, 285, 286, 290, 296, 298, 301, 302, 303, 308, 311, 312, 313, 316, 317, 320, 321, 324, 325, 330, 333, 336, 337, 338, 339, 340, 341, 343, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 382, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 416, 417, 418, 419, 420, 424, 437, 438, 440], "seen": [0, 3, 14, 41, 49, 117, 156, 158, 162, 164, 166, 171, 176, 177, 406, 437], "github": [0, 23, 33, 36, 49, 52, 53, 58, 62, 75, 77, 111, 147, 151, 154, 169, 176, 177, 195, 207, 220, 325, 402, 437, 438], "addit": [0, 14, 15, 55, 63, 66, 69, 70, 79, 86, 89, 101, 117, 118, 120, 125, 134, 139, 145, 154, 161, 164, 168, 170, 174, 176, 177, 197, 219, 229, 251, 252, 253, 254, 258, 259, 271, 283, 290, 296, 298, 321, 324, 325, 327, 330, 333, 405, 406, 407, 416, 437], "credit": 0, "goe": [0, 14, 40, 86, 94, 100, 168, 188, 191], "michael": [0, 115, 119, 123, 127, 139, 154, 167, 198, 206, 240, 325], "hank": [0, 123, 127, 154], "yaroslav": [0, 136, 139, 154], "halchenko": [0, 136, 139, 154], "data": [0, 1, 2, 7, 18, 24, 26, 28, 31, 34, 36, 43, 45, 46, 50, 51, 53, 58, 59, 60, 63, 65, 68, 70, 73, 76, 77, 78, 79, 80, 81, 84, 86, 90, 91, 92, 95, 99, 101, 102, 104, 105, 106, 108, 111, 113, 115, 116, 118, 124, 125, 126, 129, 132, 133, 134, 135, 136, 137, 139, 140, 142, 145, 146, 147, 149, 150, 151, 152, 154, 156, 157, 159, 162, 163, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 178, 187, 188, 189, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 251, 252, 253, 254, 255, 256, 257, 258, 259, 264, 265, 266, 268, 270, 273, 274, 283, 290, 291, 292, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 379, 380, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 418, 420, 422, 424, 425, 426, 428, 437, 439, 440], "packag": [0, 3, 4, 9, 10, 11, 14, 16, 18, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 66, 71, 72, 77, 78, 79, 84, 86, 91, 92, 94, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111, 122, 123, 124, 125, 139, 142, 147, 149, 154, 169, 171, 176, 177, 179, 203, 204, 437], "The": [0, 2, 3, 11, 14, 15, 17, 18, 19, 20, 21, 22, 23, 28, 29, 30, 32, 33, 34, 36, 40, 41, 42, 45, 47, 48, 49, 51, 52, 54, 55, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 75, 76, 77, 79, 80, 81, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 106, 108, 111, 113, 115, 117, 118, 120, 121, 122, 124, 125, 127, 129, 130, 131, 132, 133, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 208, 210, 211, 216, 217, 219, 220, 221, 223, 224, 225, 227, 228, 230, 231, 232, 233, 234, 235, 236, 239, 240, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 285, 286, 290, 291, 292, 296, 297, 298, 299, 300, 301, 302, 303, 307, 311, 312, 313, 314, 315, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 424, 428, 429, 433, 437, 438, 439, 440], "ar": [0, 2, 3, 4, 6, 9, 10, 14, 19, 20, 21, 23, 24, 26, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 86, 87, 89, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 115, 117, 118, 122, 124, 125, 126, 132, 134, 135, 137, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 179, 180, 181, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 270, 273, 274, 275, 276, 279, 280, 283, 285, 286, 290, 292, 296, 298, 300, 301, 305, 307, 313, 315, 316, 317, 318, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 414, 415, 416, 417, 418, 420, 422, 423, 424, 432, 437, 438], "alexi": [0, 115, 124, 125, 139, 142, 147, 149, 151, 154, 240], "thual": [0, 124, 125, 147, 149, 151, 154], "bertrand": [0, 49, 115, 119, 122, 126, 127, 132, 136, 139, 140, 142, 149, 150, 154, 163, 167, 187, 188, 202, 205, 225, 253, 254, 258, 259, 407, 408, 413], "thirion": [0, 49, 72, 115, 119, 122, 126, 127, 132, 136, 139, 140, 142, 149, 150, 154, 158, 163, 167, 187, 188, 202, 205, 225, 253, 254, 258, 259, 407, 408, 413], "elizabeth": [0, 115, 136, 140, 142, 143, 144, 154, 275, 276], "dupr": [0, 136, 140, 142, 143, 144, 154], "hao": [0, 124, 125, 126, 146, 147, 149, 151, 152, 154], "ting": [0, 124, 125, 126, 146, 147, 149, 151, 152, 154], "wang": [0, 115, 124, 125, 126, 146, 147, 149, 151, 152, 154, 234], "jerom": [0, 126, 132, 136, 138, 139, 140, 142, 143, 151, 154], "dock": [0, 126, 132, 136, 138, 139, 140, 142, 143, 151, 154], "nicola": [0, 115, 146, 147, 148, 149, 150, 151, 152, 154, 208, 227], "gensollen": [0, 146, 147, 148, 149, 150, 151, 152, 154], "r\u00e9mi": [0, 125, 126, 136, 152, 154], "gau": [0, 125, 126, 152, 154], "taylor": [0, 115, 124, 125, 126, 146, 149, 150, 151, 154, 167], "salo": [0, 124, 125, 126, 146, 149, 150, 151, 154], "yasmin": [0, 124, 125, 126, 151, 152, 154, 176], "mzayek": [0, 124, 125, 126, 151, 152, 154], "some": [0, 3, 6, 14, 15, 30, 40, 41, 48, 49, 56, 66, 68, 69, 71, 80, 84, 86, 92, 98, 103, 104, 117, 118, 126, 132, 139, 145, 148, 149, 151, 154, 161, 162, 164, 166, 168, 169, 171, 173, 176, 177, 179, 180, 181, 187, 188, 189, 195, 201, 203, 204, 206, 207, 210, 230, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 273, 283, 296, 299, 301, 323, 327, 328, 329, 330, 331, 332, 333, 334, 386, 387, 390, 393, 394, 401, 405, 406, 407, 408, 411, 417, 420, 437, 438], "past": [0, 56, 117, 156, 325], "present": [0, 3, 6, 40, 41, 54, 56, 65, 69, 70, 101, 108, 117, 125, 135, 154, 159, 160, 161, 168, 170, 171, 172, 177, 179, 181, 191, 201, 219, 251, 252, 253, 254, 258, 259, 311, 324, 325, 329, 330, 331, 332, 333, 405, 406, 407, 411], "ahmad": [0, 124, 125, 126, 148, 149, 151, 154], "chamma": [0, 124, 125, 126, 148, 149, 151, 154], "saclai": [0, 169], "franc": [0, 169], "aina": [0, 127, 154], "frau": [0, 127, 154], "pascual": [0, 127, 154], "alex": [0, 56, 115, 136, 139, 154, 166, 220, 325], "rothberg": [0, 136, 139, 154], "free": [0, 115, 162, 169, 171, 174, 298, 344], "agenc": 0, "new": [0, 2, 3, 10, 11, 20, 36, 49, 66, 72, 79, 84, 86, 94, 98, 102, 107, 115, 117, 123, 133, 134, 135, 136, 137, 150, 161, 162, 163, 164, 169, 174, 176, 177, 180, 181, 187, 188, 189, 193, 194, 199, 202, 204, 207, 209, 210, 215, 216, 217, 221, 230, 232, 240, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 275, 276, 283, 292, 296, 298, 300, 301, 310, 311, 312, 313, 314, 315, 316, 317, 320, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 344, 379, 380, 381, 382, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 405, 406, 407, 408, 409, 410, 416, 417, 420, 424, 437, 438], "york": [0, 115, 275, 276], "usa": 0, "alexandr": [0, 49, 115, 119, 120, 122, 123, 126, 127, 129, 132, 139, 141, 142, 154, 167, 188, 205, 408], "abadi": [0, 127, 129, 132, 139, 154], "pari": [0, 169], "abraham": [0, 115, 119, 120, 122, 123, 127, 129, 132, 142, 154, 159, 324, 325, 408], "bazemont": 0, "\u00eele": 0, "de": [0, 115, 139, 142, 154, 275, 276, 291], "gramfort": [0, 49, 115, 119, 122, 141, 142, 154, 167, 188, 205], "meta": [0, 3, 14, 97, 100, 103, 109, 113, 118, 187, 188, 189, 232, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 306, 311, 312, 314, 327, 328, 329, 330, 331, 332, 333, 334, 386, 394, 399, 405, 406, 407, 408, 439], "savio": [0, 119, 154], "cionca": [0, 126, 154], "centr": 0, "hospitali": 0, "universitair": 0, "vaudois": 0, "lausann": 0, "switzerland": 0, "alisha": [0, 126, 154], "kodibagkar": [0, 126, 154], "mit": [0, 115, 207, 208, 234], "mcgovern": 0, "institut": [0, 171, 174, 197], "cambridg": 0, "massachusett": 0, "unit": [0, 6, 15, 55, 57, 115, 159, 161, 167, 168, 169, 181, 255, 275, 276, 298, 301, 328, 329, 330, 331, 332, 333, 334, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 420], "state": [0, 2, 23, 30, 32, 48, 49, 50, 54, 56, 66, 85, 87, 89, 92, 100, 115, 126, 134, 145, 147, 154, 155, 156, 158, 159, 160, 162, 167, 171, 174, 176, 177, 196, 198, 199, 227, 240, 251, 252, 253, 254, 255, 258, 259, 283, 292, 298, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 406, 408, 420, 440], "amadeu": [0, 47, 132, 154], "kanaan": [0, 47, 132, 154], "ana": [0, 142, 146, 148, 154], "luisa": [0, 142, 146, 148, 154], "pinho": [0, 142, 146, 148, 154], "western": 0, "univers": [0, 174, 176], "london": [0, 115, 174, 217, 235], "ontario": 0, "canada": 0, "andr\u00e9": [0, 115, 142, 154, 163, 201, 253, 254], "hoyo": [0, 49, 115, 142, 154, 163, 253, 254, 407, 413], "idrobo": [0, 49, 115, 142, 154, 163, 253, 254, 407, 413], "rakuten": 0, "ann": [0, 115, 125, 154, 213, 214], "sophi": [0, 125, 154], "kiesling": [0, 125, 154], "max": [0, 11, 30, 34, 42, 44, 49, 53, 55, 57, 58, 70, 80, 84, 88, 102, 103, 105, 111, 115, 147, 154, 168, 187, 316, 317, 344, 348, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 379, 380, 384, 386, 387, 389, 392, 393, 394, 395, 397, 398, 401, 402, 404], "planck": 0, "human": [0, 8, 22, 23, 27, 31, 32, 39, 40, 41, 43, 58, 68, 113, 115, 118, 166, 169, 174, 195, 200, 201, 206, 207, 209, 210, 211, 214, 227, 229, 230, 232, 239, 301, 325, 391, 399, 420, 439], "cognit": [0, 72, 100, 103, 115, 161, 171, 174, 176, 181, 208, 217, 225, 228, 234, 235], "brain": [0, 2, 3, 4, 6, 9, 12, 15, 20, 21, 22, 23, 27, 31, 32, 36, 39, 41, 43, 44, 46, 52, 54, 55, 59, 64, 66, 67, 69, 70, 76, 78, 79, 80, 85, 89, 92, 94, 96, 98, 100, 104, 107, 115, 117, 118, 125, 127, 130, 132, 133, 134, 136, 137, 139, 140, 142, 145, 147, 148, 154, 155, 157, 161, 162, 163, 164, 166, 167, 169, 170, 171, 174, 175, 176, 179, 181, 187, 188, 195, 197, 199, 200, 202, 203, 205, 206, 208, 210, 213, 214, 215, 216, 220, 221, 227, 229, 230, 232, 233, 234, 239, 242, 245, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 278, 301, 303, 306, 308, 313, 324, 325, 327, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 344, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 381, 384, 386, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 416, 420, 430, 438, 439, 440], "scienc": [0, 3, 23, 38, 48, 58, 98, 115, 160, 163, 166, 167, 187, 197, 199, 202, 205, 208, 209, 213, 215, 216, 219, 220, 225, 227, 228, 229, 240, 245, 253, 254, 255, 324, 325, 344, 380, 421, 440], "leipzig": 0, "germnai": 0, "ariel": [0, 127, 139, 154], "rokem": [0, 127, 139, 154], "washington": 0, "psychologi": 0, "seattl": 0, "98107": 0, "arthur": [0, 48, 115, 123, 127, 129, 132, 154, 160, 202, 259], "mensch": [0, 48, 115, 123, 127, 129, 132, 154, 160, 202, 259], "aswin": [0, 126, 154], "vijayan": [0, 126, 154], "audrei": [0, 124, 154], "duran": [0, 124, 154], "therapanacea": 0, "ben": [0, 56, 115, 119, 120, 122, 127, 129, 154, 325], "cipollini": [0, 119, 120, 122, 127, 129, 154], "facebook": 0, "hayward": 0, "california": 0, "binh": [0, 142, 145, 147, 154], "nguyen": [0, 142, 145, 147, 154], "caglar": [0, 151, 154], "cakan": [0, 151, 154], "technisch": 0, "universit\u00e4t": 0, "berlin": [0, 115, 187, 205, 220], "germani": [0, 115, 167], "chri": [0, 119, 127, 142, 154], "gorgolewski": [0, 115, 118, 119, 127, 154, 202, 217, 230, 232, 235], "googl": 0, "llc": 0, "markiewicz": [0, 142, 154], "stanford": [0, 115, 167], "christian": [0, 115, 125, 136, 139, 154, 208, 227, 324, 325], "horea": [0, 136, 139, 154], "dartmouth": 0, "colleg": [0, 174], "pb": 0, "hanov": 0, "hampshir": 0, "gerloff": [0, 125, 154], "christina": [0, 115, 152, 154, 213], "ro\u00dfmanith": [0, 152, 154], "dept": 0, "neurologi": 0, "medic": [0, 115, 159, 167, 187, 205, 220, 408], "faculti": 0, "mannheim": 0, "heidelberg": [0, 115, 187, 205, 220], "colin": [0, 142, 154], "reining": [0, 142, 154], "denver": 0, "colorado": 0, "connor": [0, 151, 154], "lane": [0, 115, 151, 154, 344], "child": [0, 51, 216], "baltimor": 0, "md": [0, 207], "czarina": [0, 126, 154], "sy": [0, 41, 126, 154], "c\u00e9line": [0, 142, 154], "delettr": [0, 142, 154], "dan": [0, 115, 139, 142, 154, 210], "gale": [0, 139, 142, 154], "neurosci": [0, 23, 49, 66, 72, 115, 158, 166, 174, 176, 195, 198, 208, 225, 227, 234, 240, 440], "studi": [0, 2, 6, 9, 31, 33, 40, 42, 56, 66, 71, 75, 97, 99, 109, 113, 115, 118, 157, 162, 164, 165, 167, 168, 171, 175, 179, 199, 220, 230, 232, 234, 242, 245, 255, 306, 311, 312, 314, 318, 324, 325, 327, 333, 386, 394, 399, 439, 440], "queen": 0, "kingston": 0, "daniel": [0, 56, 115, 139, 142, 148, 151, 154, 227, 230, 232, 234, 240, 324, 325], "gomez": [0, 139, 142, 148, 151, 154], "danilo": [0, 119, 120, 122, 123, 127, 129, 154], "bzdok": [0, 119, 120, 122, 123, 127, 129, 154], "mcgill": [0, 220], "mila": 0, "quebec": 0, "ai": 0, "montr\u00e9al": [0, 176], "david": [0, 56, 115, 118, 151, 154, 201, 208, 227, 230, 232, 240, 324, 325, 344], "g": [0, 6, 9, 14, 22, 24, 30, 31, 40, 42, 43, 47, 48, 49, 55, 61, 64, 67, 68, 94, 99, 100, 105, 115, 118, 125, 147, 151, 154, 156, 160, 166, 168, 169, 170, 171, 173, 174, 176, 180, 181, 187, 188, 189, 200, 210, 227, 234, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 275, 276, 283, 290, 296, 300, 303, 320, 324, 327, 328, 329, 330, 331, 332, 333, 334, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 381, 389, 392, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 411, 412, 414, 424, 437], "elli": [0, 151, 154], "nebraska": 0, "center": [0, 14, 36, 47, 50, 51, 55, 58, 61, 79, 99, 105, 106, 140, 151, 154, 156, 159, 181, 187, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 283, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 378, 380, 405, 406, 408, 417, 424], "demian": [0, 115, 122, 139, 154, 202], "wassermann": [0, 115, 122, 139, 154, 202], "derek": [0, 142, 154], "pisner": [0, 142, 154], "st": 0, "petersburg": 0, "fl": 0, "dimitri": [0, 115, 124, 127, 139, 154, 168, 169, 188, 191, 225, 408], "papadopoulo": [0, 115, 124, 127, 139, 154, 169, 225], "orfano": [0, 115, 124, 127, 139, 154, 169, 225], "neurospin": [0, 60, 65, 73, 113, 169, 170, 385, 439], "cea": 0, "universit\u00e9": [0, 169], "gif": [0, 169], "sur": [0, 169], "yvett": [0, 169], "elvi": [0, 49, 115, 119, 122, 127, 129, 132, 154, 167, 408, 434], "dohmatob": [0, 49, 115, 119, 122, 127, 129, 132, 154, 167, 408, 434], "research": [0, 174, 179, 181, 216, 325], "fair": [0, 115, 160, 213], "eric": [0, 115, 136, 139, 140, 142, 154, 201, 209, 213], "larson": [0, 136, 139, 140, 142, 154], "evan": [0, 115, 147, 154, 199, 207, 210, 220, 245], "edmond": [0, 147, 154], "oxford": [0, 21, 91, 115, 156, 203, 275, 276, 376, 377], "uk": [0, 115, 167, 208, 237, 238], "fabian": [0, 115, 119, 154, 205], "pedregosa": [0, 115, 119, 154, 205], "geneva": 0, "franz": [0, 55, 140, 142, 144, 154], "liem": [0, 55, 140, 142, 144, 154], "fran\u00e7oi": [0, 126, 154], "paugam": [0, 126, 154], "gael": [0, 49, 115, 119, 120, 122, 123, 127, 129, 132, 136, 139, 140, 141, 142, 144, 154, 187, 188, 205, 230, 232, 258, 259, 407, 408, 413], "varoquaux": [0, 48, 49, 56, 115, 118, 119, 120, 122, 123, 127, 129, 132, 136, 139, 140, 141, 142, 144, 154, 155, 156, 160, 161, 163, 167, 176, 187, 188, 202, 205, 230, 232, 253, 254, 258, 259, 407, 408, 413], "gill": [0, 139, 142, 154], "holland": [0, 139, 142, 154], "vrije": 0, "universiteit": 0, "amsterdam": 0, "netherland": 0, "greg": [0, 139, 142, 154], "kiar": [0, 142, 154], "greydon": [0, 147, 154], "gilmor": [0, 147, 154], "depart": [0, 174], "mathemat": [0, 130, 154, 174, 312, 426], "toronto": 0, "guillaum": [0, 139, 142, 154], "lemaitr": [0, 139, 142, 154], "geriatr": 0, "criugm": 0, "himanshu": 0, "aggarw": 0, "ian": [0, 142, 154], "aben": [0, 142, 154], "jake": [0, 142, 154], "vogel": [0, 115, 142, 154, 213, 214], "clinic": [0, 51, 99, 162, 176], "scilifelab": 0, "lund": 0, "sweden": 0, "jan": [0, 115, 119, 154, 324, 325], "margeta": [0, 119, 154], "kardiom": 0, "nova": 0, "dubnica": 0, "slovakia": 0, "jaqu": [0, 119, 154], "grobler": [0, 119, 154], "anylin": 0, "gmbh": 0, "vienna": 0, "austria": 0, "jason": [0, 119, 139, 154], "gor": [0, 119, 139, 154], "insight": [0, 56, 148, 154, 155], "mountain": 0, "view": [0, 6, 13, 14, 16, 22, 23, 33, 37, 42, 52, 54, 58, 61, 62, 64, 66, 71, 75, 84, 102, 125, 126, 136, 145, 147, 151, 154, 161, 166, 168, 176, 177, 181, 251, 252, 253, 254, 258, 259, 316, 330, 333, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 381, 384, 386, 387, 389, 390, 392, 393, 394, 395, 397, 398, 400, 401, 403, 406, 437, 440], "javier": [0, 147, 154], "rasero": [0, 147, 154], "school": 0, "virginia": 0, "viginia": 0, "jean": [0, 49, 115, 119, 136, 139, 154, 168, 188, 191, 225, 230, 232, 258], "kossaifi": [0, 119, 154], "imperi": 0, "king": [0, 115, 136, 139, 154, 240], "cnr": [0, 197], "jell": [0, 115, 124, 125, 154, 278], "roelof": [0, 124, 125, 154], "dalenberg": [0, 124, 125, 154], "groningen": 0, "jeremi": [0, 147, 154], "lefort": [0, 147, 154], "besnard": [0, 147, 154], "renn": 0, "origami": 0, "lab": 0, "chevali": [0, 139, 142, 154], "emerton": 0, "johann": [0, 142, 154], "wiesner": [0, 142, 154], "central": [0, 91], "mental": [0, 66, 69, 72, 81, 225, 231], "health": 0, "jon": [0, 144, 154], "haitz": [0, 144, 154], "legarreta": [0, 144, 154], "gorrono": [0, 144, 154], "brigham": 0, "women": 0, "": [0, 2, 3, 4, 6, 9, 16, 23, 29, 30, 33, 34, 37, 40, 41, 44, 49, 50, 55, 56, 64, 65, 66, 67, 68, 69, 71, 72, 75, 77, 78, 79, 80, 86, 91, 93, 94, 100, 102, 103, 108, 115, 118, 132, 139, 149, 150, 152, 155, 158, 162, 165, 166, 168, 169, 171, 172, 173, 174, 176, 177, 179, 180, 181, 187, 188, 189, 197, 199, 200, 208, 210, 211, 213, 214, 220, 225, 227, 230, 232, 234, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 273, 275, 276, 283, 296, 300, 301, 310, 312, 316, 317, 318, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 380, 381, 389, 390, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 418, 420, 437, 440], "hospit": 0, "mass": [0, 58, 79, 151, 154, 298, 344, 376, 417], "gener": [0, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 111, 113, 117, 124, 126, 139, 140, 142, 144, 145, 147, 149, 152, 154, 161, 162, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 199, 200, 202, 225, 235, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 273, 275, 276, 283, 290, 296, 298, 299, 300, 301, 306, 312, 313, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 342, 344, 385, 389, 394, 395, 396, 397, 398, 399, 405, 406, 408, 416, 420, 428, 437, 438, 439], "harvard": [0, 21, 91, 156, 203, 211, 376, 377], "boston": 0, "jona": [0, 115, 136, 154, 407, 413], "sassenhagen": [0, 136, 154], "jordi": [0, 152, 154], "huguet": [0, 152, 154], "barcelonabeta": 0, "joshua": [0, 115, 144, 154, 207, 211], "teve": [0, 144, 154], "julia": [0, 127, 142, 154], "huntenburg": [0, 127, 142, 154], "intern": [0, 34, 115, 167, 168, 169, 171, 189, 199, 258, 259, 310, 312], "laboratori": 0, "julio": [0, 125, 154], "A": [0, 1, 5, 6, 7, 11, 15, 16, 21, 23, 40, 41, 42, 47, 48, 49, 56, 61, 64, 67, 69, 71, 75, 76, 79, 80, 84, 86, 89, 98, 100, 102, 105, 106, 110, 112, 113, 114, 115, 118, 125, 134, 135, 139, 142, 148, 154, 155, 157, 158, 160, 162, 164, 165, 166, 168, 169, 170, 172, 174, 176, 177, 179, 180, 181, 187, 188, 189, 198, 200, 201, 206, 208, 210, 213, 214, 215, 217, 219, 227, 228, 230, 231, 232, 233, 235, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 274, 275, 276, 279, 282, 283, 286, 292, 296, 301, 302, 308, 313, 314, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 344, 355, 356, 360, 376, 377, 380, 384, 389, 391, 393, 395, 396, 399, 401, 405, 406, 407, 408, 409, 410, 415, 416, 418, 419, 420, 421, 437, 439, 440], "peraza": [0, 125, 154], "florida": 0, "miami": 0, "kamalakar": [0, 122, 127, 129, 132, 136, 137, 139, 142, 146, 154], "reddi": [0, 122, 127, 129, 132, 136, 137, 138, 139, 142, 146, 154], "daddi": [0, 122, 127, 129, 132, 136, 137, 139, 142, 146, 154], "kevin": [0, 125, 154], "sitek": [0, 125, 154], "northwestern": 0, "evanston": 0, "ilinoi": 0, "koen": [0, 151, 154], "helwegen": [0, 151, 154], "dutch": 0, "connectom": [0, 8, 12, 22, 27, 46, 48, 49, 51, 54, 56, 57, 59, 99, 111, 113, 115, 120, 127, 131, 132, 136, 139, 140, 142, 145, 147, 154, 157, 159, 160, 174, 175, 176, 181, 195, 202, 205, 211, 213, 214, 216, 227, 258, 259, 308, 325, 327, 328, 329, 331, 332, 334, 357, 376, 377, 378, 379, 381, 390, 391, 392, 394, 399, 400, 401, 403, 408, 416, 439, 440], "vu": 0, "konrad": [0, 126, 154], "wagstyl": [0, 126, 154], "konstantin": [0, 119, 154], "shmelkov": [0, 119, 154], "kshitij": [0, 139, 140, 141, 142, 143, 144, 145, 154], "chawla": [0, 139, 140, 141, 142, 143, 144, 145, 154], "duke": 0, "system": [0, 6, 23, 42, 43, 115, 161, 168, 169, 177, 179, 198, 239, 241], "kun": [0, 151, 154], "chen": [0, 37, 115, 151, 154, 227], "macau": 0, "china": 0, "leonard": [0, 149, 154], "sass": [0, 149, 154], "loic": [0, 119, 120, 122, 123, 127, 129, 132, 142, 154], "est\u00e8v": [0, 119, 120, 122, 123, 127, 129, 132, 154], "tetrel": [0, 142, 154], "luz": 0, "paz": 0, "manon": [0, 151, 154], "pietrantoni": [0, 151, 154], "martin": [0, 115, 127, 132, 146, 154, 198, 220, 239, 301, 420, 434], "perez": [0, 127, 132, 154, 434], "guevara": [0, 127, 132, 154, 434], "criteo": 0, "wegrzyn": [0, 146, 154], "bielefeld": 0, "mathia": [0, 125, 154], "goncalv": [0, 125, 154], "mathieu": [0, 126, 154], "dugr\u00e9": [0, 126, 154], "concordia": 0, "matthia": [0, 119, 154], "ekman": [0, 119, 154], "donder": 0, "nijmegen": 0, "matthieu": [0, 151, 154], "joulot": [0, 151, 154], "arami": 0, "maximilian": [0, 126, 154], "cosmo": [0, 126, 154], "sitter": [0, 126, 154], "mehdi": [0, 119, 123, 127, 136, 142, 154], "rahim": [0, 119, 123, 127, 136, 142, 154], "air": 0, "liquid": 0, "mia": [0, 152, 154], "zwalli": [0, 152, 154], "dsst": 0, "nation": [0, 115, 166, 208, 227, 255, 325], "eickenberg": [0, 115, 119, 154, 167], "flatiron": 0, "psychoinformat": 0, "forschungszentrum": 0, "j\u00fclich": 0, "notter": [0, 139, 154], "am": [0, 115, 201], "osram": 0, "martigni": 0, "waskom": [0, 119, 154], "michel": [0, 44, 49, 115, 119, 125, 126, 152, 154, 167, 205, 225, 240], "mohammad": [0, 125, 126, 152, 154], "torabi": [0, 125, 126, 152, 154], "moritz": [0, 136, 139, 142, 154], "boo": [0, 136, 139, 142, 154], "myeong": [0, 149, 154], "seop": [0, 149, 154], "song": [0, 149, 154], "natasha": [0, 124, 154], "clark": [0, 115, 124, 154, 166, 198], "simexp": [0, 437], "neelai": [0, 149, 154], "shah": [0, 149, 154], "intellig": [0, 49, 84], "nikhil": [0, 152, 154], "krish": [0, 152, 154], "texa": 0, "austin": 0, "oliv": [0, 70, 115, 126, 154, 166, 199], "warrington": [0, 126, 154], "wellcom": [0, 174], "neuroimag": [0, 2, 8, 22, 23, 27, 37, 48, 56, 62, 76, 94, 100, 101, 102, 113, 115, 116, 118, 139, 154, 155, 156, 160, 161, 163, 165, 166, 167, 169, 174, 175, 178, 183, 197, 199, 201, 202, 205, 209, 215, 219, 220, 225, 230, 232, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 278, 283, 296, 298, 301, 302, 305, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 319, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 379, 380, 384, 386, 387, 389, 392, 393, 394, 399, 401, 402, 406, 408, 411, 412, 414, 415, 418, 421, 424, 428, 437, 439, 440], "ucl": [0, 115, 167, 237, 238], "oscar": [0, 139, 154], "esteban": [0, 139, 154], "patrick": [0, 126, 154], "sadil": [0, 126, 154], "biostatist": [0, 155], "john": [0, 115, 136, 154, 166, 168, 198, 213, 234, 240, 344], "hopkin": 0, "bloomberg": 0, "public": [0, 2, 62, 100, 118, 124, 126, 149, 151, 154, 169, 174, 234], "paul": [0, 115, 124, 154, 200, 227], "bogdan": [0, 124, 154], "paula": [0, 142, 154], "sanz": [0, 142, 154], "leon": [0, 142, 154], "brisban": 0, "australia": 0, "peer": [0, 139, 154], "herholz": [0, 139, 154], "philipp": [0, 115, 119, 154, 225, 258], "gervai": [0, 119, 154], "zurich": 0, "pierr": [0, 115, 136, 138, 139, 140, 154, 187, 199], "bellec": [0, 115, 139, 140, 154, 199], "glaser": [0, 138, 154], "gatsbi": 0, "comput": [0, 3, 6, 9, 15, 16, 22, 25, 29, 30, 31, 33, 39, 40, 41, 43, 44, 46, 47, 48, 49, 51, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 77, 79, 81, 83, 85, 90, 92, 95, 98, 99, 100, 101, 102, 103, 104, 108, 113, 115, 116, 118, 126, 127, 139, 145, 146, 147, 149, 154, 157, 158, 160, 161, 162, 163, 164, 166, 167, 168, 171, 172, 174, 175, 176, 178, 179, 182, 187, 189, 191, 205, 216, 219, 229, 239, 251, 252, 253, 254, 255, 256, 257, 258, 259, 271, 273, 275, 276, 279, 280, 282, 283, 285, 290, 292, 296, 298, 299, 306, 307, 308, 311, 312, 313, 314, 318, 320, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 378, 381, 384, 391, 392, 393, 394, 399, 400, 402, 405, 406, 407, 408, 416, 418, 419, 421, 424, 430, 437, 440], "olivi": [0, 136, 154], "quirion": [0, 136, 154], "canadian": 0, "genom": 0, "calcul": [0, 3, 31, 41, 47, 48, 58, 92, 97, 109, 113, 125, 140, 154, 170, 224, 225, 251, 252, 253, 254, 258, 259, 273, 275, 276, 291, 298, 306, 324, 327, 330, 333, 337, 340, 344, 355, 372, 379, 384, 387, 392, 393, 394, 399, 401, 406, 418, 439], "qu\u00e9bec": 0, "pradeep": [0, 138, 154], "raamana": [0, 138, 154], "pittsburgh": 0, "pa": [0, 286], "rahul": [0, 126, 154], "brito": [0, 126, 154], "raphael": [0, 124, 146, 147, 148, 149, 150, 151, 154], "meudec": [0, 124, 146, 147, 148, 149, 150, 151, 154], "robert": [0, 115, 124, 125, 147, 154, 168, 198, 220, 245], "luke": [0, 147, 154], "agencyenterpris": 0, "melbourn": 0, "williamson": [0, 124, 125, 154], "roberto": [0, 115, 132, 142, 154, 208], "guidotti": [0, 132, 142, 154], "d": [0, 26, 37, 41, 50, 51, 56, 58, 64, 67, 71, 100, 115, 118, 159, 168, 169, 197, 208, 213, 214, 217, 220, 230, 232, 235, 245, 271, 278, 301, 324, 325, 380, 391, 420, 426], "annunzio": 0, "chieti": 0, "pescara": 0, "san": 0, "benedetto": 0, "del": [0, 44], "tronto": 0, "itali": 0, "ronald": [0, 119, 154], "phlypo": [0, 119, 154], "lyon": 0, "area": [0, 23, 32, 64, 67, 80, 94, 147, 154, 159, 161, 166, 170, 171, 174, 175, 181, 210, 220, 239, 305, 345, 347, 348, 357, 360, 395, 398, 404], "ryan": [0, 115, 142, 154, 215], "hammond": [0, 142, 154], "uc": 0, "diego": [0, 115, 227], "sachin": [0, 151, 154], "patalasingh": [0, 151, 154], "sage": [0, 151, 154], "hahn": [0, 151, 154], "deephealth": 0, "salma": [0, 119, 122, 127, 129, 136, 139, 140, 154], "bougacha": [0, 119, 122, 127, 129, 136, 139, 140, 154], "sam": [0, 125, 154], "buck": [0, 125, 154], "johnson": [0, 125, 154], "sami": [0, 151, 154], "jawhar": [0, 151, 154], "simon": [0, 56, 115, 139, 144, 154, 207, 208, 324, 325], "steinkamp": [0, 139, 144, 154], "danish": 0, "magnet": [0, 171, 174, 199, 225], "reson": [0, 171, 174, 199, 225], "copenhagen": 0, "amag": 0, "hvidovr": 0, "denmark": 0, "sourav": [0, 139, 154], "singh": [0, 139, 154], "steven": [0, 115, 125, 152, 154, 198, 213, 214, 215, 324, 325], "meisler": [0, 125, 152, 154], "divis": [0, 91], "technologi": 0, "sylvain": [0, 136, 139, 142, 154], "lan": [0, 136, 139, 154], "takerkart": [0, 142, 154], "la": 0, "timon": 0, "marseil": 0, "tamer": [0, 152, 154], "gezici": [0, 152, 154], "bilkent": 0, "tarun": [0, 126, 154], "samanta": [0, 126, 154], "acharya": 0, "prafulla": 0, "chandra": 0, "lifespan": 0, "informat": 0, "pennsylvania": 0, "thoma": [0, 115, 118, 142, 145, 148, 149, 154, 162, 176, 198, 207, 211, 227, 230, 232, 298, 324, 325, 344, 421], "bazeil": [0, 142, 145, 148, 149, 154], "tom": [0, 115, 147, 154, 198], "vanass": [0, 147, 154], "wisconsin": 0, "sleep": 0, "conscious": 0, "vasco": [0, 151, 154], "diogo": [0, 151, 154], "vincent": [0, 49, 115, 119, 154, 167, 198, 205, 225, 240, 325], "http": [0, 18, 22, 23, 34, 49, 56, 62, 64, 67, 71, 72, 98, 101, 102, 115, 118, 147, 151, 154, 159, 162, 163, 166, 167, 168, 169, 171, 176, 177, 188, 191, 195, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 221, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 245, 251, 252, 253, 254, 258, 270, 274, 275, 276, 298, 301, 324, 325, 344, 380, 402, 403, 407, 408, 413, 420, 421, 437, 438], "www": [0, 64, 67, 102, 115, 118, 163, 166, 167, 195, 196, 197, 198, 199, 200, 202, 205, 208, 209, 215, 219, 220, 221, 225, 227, 228, 229, 230, 232, 234, 237, 238, 240, 245, 253, 254, 301, 324, 325, 344, 380, 420, 421], "logilab": 0, "fr": [0, 49, 115, 167, 197, 205, 408], "virgil": [0, 119, 154], "fritsch": [0, 119, 154], "zvi": [0, 144, 154], "baratz": [0, 144, 154], "tel": 0, "aviv": 0, "israel": 0, "\u00f3scar": [0, 119, 122, 127, 129, 154], "n\u00e1jera": [0, 119, 122, 127, 129, 154], "checkmk": 0, "paid": 0, "grant": 0, "chan": 0, "zuckerberg": 0, "initi": [0, 3, 12, 48, 49, 50, 67, 69, 94, 100, 126, 154, 159, 167, 170, 179, 181, 189, 191, 258, 259, 270, 274, 328, 329, 331, 332, 334, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 405, 408], "were": [0, 6, 18, 23, 40, 49, 58, 62, 64, 66, 67, 79, 91, 94, 98, 101, 107, 108, 117, 122, 124, 142, 145, 149, 150, 151, 154, 161, 168, 169, 171, 230, 232, 301, 331, 334, 420], "niconnect": 0, "french": [0, 176], "investiss": 0, "avenir": 0, "wa": [0, 3, 40, 64, 67, 69, 91, 102, 105, 106, 117, 118, 124, 126, 139, 146, 147, 148, 149, 150, 154, 161, 163, 166, 168, 171, 206, 207, 256, 257, 258, 259, 290, 296, 298, 380, 389, 395, 397, 398, 402, 404, 411], "previous": [0, 3, 23, 98, 117, 142, 145, 149, 151, 154, 161, 171], "hbp": 0, "also": [0, 3, 4, 11, 14, 15, 16, 17, 22, 23, 29, 31, 34, 39, 40, 41, 42, 43, 49, 50, 51, 55, 56, 62, 63, 66, 68, 70, 71, 72, 75, 77, 79, 86, 89, 91, 93, 94, 95, 98, 108, 117, 118, 122, 124, 126, 127, 132, 133, 135, 139, 142, 145, 148, 149, 151, 152, 154, 155, 156, 159, 160, 162, 163, 164, 166, 168, 169, 170, 171, 173, 174, 176, 177, 179, 180, 181, 182, 189, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 251, 252, 253, 254, 256, 257, 283, 285, 290, 296, 308, 312, 316, 321, 322, 324, 335, 336, 337, 338, 339, 340, 341, 379, 380, 384, 385, 387, 392, 393, 394, 395, 397, 406, 409, 410, 414, 415, 418, 437, 440], "support": [0, 9, 15, 29, 32, 33, 34, 35, 44, 98, 105, 111, 117, 122, 124, 125, 134, 135, 136, 139, 140, 141, 142, 146, 147, 149, 150, 151, 152, 154, 161, 162, 164, 166, 171, 174, 175, 251, 252, 253, 254, 271, 323, 324, 328, 331, 395, 397, 398, 414, 424, 438], "digicosm": 0, "dataia": 0, "If": [0, 2, 9, 14, 15, 24, 32, 34, 35, 36, 40, 41, 42, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 70, 75, 79, 84, 86, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 117, 118, 126, 139, 146, 147, 149, 154, 155, 159, 161, 162, 164, 166, 168, 169, 171, 174, 176, 177, 179, 180, 181, 187, 188, 189, 191, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 206, 208, 213, 214, 215, 216, 220, 221, 223, 224, 225, 228, 230, 232, 234, 235, 240, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 270, 273, 274, 275, 276, 279, 280, 283, 286, 290, 292, 296, 297, 298, 299, 300, 301, 302, 306, 307, 311, 313, 314, 315, 316, 317, 318, 320, 321, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 416, 417, 418, 419, 420, 424, 437, 438], "you": [0, 2, 4, 6, 9, 14, 15, 22, 23, 24, 32, 35, 36, 39, 40, 41, 42, 43, 44, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 66, 70, 75, 79, 86, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 115, 117, 118, 134, 135, 139, 142, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 173, 174, 176, 177, 179, 180, 181, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 216, 219, 220, 221, 223, 224, 225, 228, 229, 230, 234, 235, 240, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 285, 290, 296, 327, 328, 329, 330, 331, 332, 333, 334, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 381, 384, 386, 387, 390, 392, 393, 394, 395, 397, 398, 401, 402, 404, 405, 406, 407, 408, 424, 437, 438, 440], "want": [0, 2, 6, 9, 14, 15, 42, 49, 54, 66, 71, 72, 78, 86, 94, 98, 100, 113, 117, 118, 155, 162, 164, 168, 169, 171, 180, 181, 230, 232, 256, 257, 316, 325, 397, 404, 437, 438], "we": [0, 2, 3, 4, 6, 9, 11, 14, 18, 19, 20, 22, 23, 24, 25, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 116, 117, 118, 124, 126, 132, 140, 141, 142, 147, 149, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 168, 170, 171, 174, 176, 177, 178, 179, 180, 181, 194, 203, 204, 221, 230, 232, 256, 257, 258, 273, 275, 276, 296, 300, 308, 312, 320, 321, 322, 336, 338, 339, 341, 348, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 383, 408, 410, 437, 438], "suggest": [0, 6, 86, 149, 154, 158, 176, 179, 301, 336, 338, 339, 341, 420], "do": [0, 3, 6, 9, 22, 24, 25, 30, 31, 33, 34, 40, 42, 49, 50, 51, 57, 61, 64, 65, 66, 67, 68, 70, 75, 77, 79, 80, 94, 98, 100, 101, 108, 111, 117, 136, 140, 145, 149, 154, 155, 159, 160, 161, 162, 164, 166, 168, 171, 176, 177, 179, 180, 181, 187, 197, 221, 251, 252, 253, 254, 255, 256, 257, 258, 259, 283, 292, 296, 298, 301, 313, 328, 329, 330, 331, 332, 333, 334, 339, 340, 341, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 406, 420, 424, 437], "us": [0, 1, 2, 4, 6, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 26, 29, 30, 31, 32, 33, 36, 38, 40, 41, 42, 43, 44, 46, 47, 49, 52, 53, 54, 55, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 89, 90, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 113, 115, 116, 117, 124, 125, 126, 127, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 180, 181, 186, 188, 190, 191, 192, 193, 194, 195, 197, 200, 206, 207, 210, 212, 215, 236, 243, 244, 246, 247, 249, 256, 260, 261, 262, 269, 270, 272, 273, 274, 275, 276, 277, 281, 282, 284, 287, 288, 289, 291, 293, 294, 295, 300, 304, 305, 310, 315, 319, 321, 322, 336, 337, 339, 340, 341, 342, 345, 346, 347, 348, 373, 374, 375, 403, 405, 407, 411, 412, 413, 414, 415, 419, 420, 421, 425, 434, 438, 439, 440], "our": [0, 2, 3, 14, 19, 29, 34, 40, 49, 51, 56, 58, 66, 68, 94, 98, 101, 117, 118, 139, 149, 154, 156, 161, 168, 169, 171], "zenodo": 0, "doi": [0, 22, 23, 56, 71, 72, 76, 115, 118, 162, 163, 166, 167, 187, 195, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 217, 219, 220, 225, 227, 228, 229, 230, 232, 234, 235, 239, 240, 245, 253, 254, 258, 259, 278, 298, 301, 324, 325, 344, 380, 407, 413, 420, 421], "softwar": [0, 6, 69, 72, 171, 174, 323, 438], "author": [0, 47, 55, 115, 168, 169, 177, 434], "licens": [0, 126, 154, 200], "bsd": 0, "4": [0, 3, 4, 6, 12, 14, 15, 18, 20, 23, 24, 29, 30, 31, 33, 34, 35, 36, 37, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 56, 57, 58, 62, 64, 65, 66, 67, 68, 69, 72, 73, 75, 76, 77, 79, 81, 84, 86, 91, 92, 96, 98, 99, 100, 101, 102, 103, 107, 108, 109, 111, 112, 115, 119, 127, 132, 135, 139, 140, 141, 142, 147, 159, 161, 166, 167, 168, 176, 189, 195, 210, 214, 217, 227, 228, 234, 235, 236, 239, 251, 252, 253, 254, 256, 257, 258, 259, 296, 301, 316, 317, 324, 325, 336, 338, 339, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 384, 386, 387, 390, 391, 392, 393, 394, 406, 420, 424, 437, 439], "claus": 0, "titl": [0, 3, 6, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 26, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 68, 69, 71, 75, 76, 77, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 98, 100, 101, 102, 103, 105, 106, 107, 108, 111, 117, 126, 142, 143, 148, 151, 154, 159, 161, 169, 177, 181, 283, 296, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 384, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 416, 418, 437], "url": [0, 22, 23, 62, 115, 143, 151, 154, 162, 163, 166, 167, 188, 191, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 217, 219, 220, 223, 224, 225, 227, 228, 229, 230, 232, 234, 235, 236, 239, 240, 245, 250, 253, 254, 258, 270, 274, 275, 276, 298, 301, 324, 325, 344, 380, 407, 408, 413, 420, 421], "com": [0, 23, 115, 151, 154, 163, 166, 167, 169, 197, 199, 200, 201, 202, 205, 207, 209, 210, 215, 220, 225, 227, 228, 229, 239, 245, 253, 254, 301, 324, 325, 344, 380, 420, 421, 437, 438], "org": [0, 18, 22, 23, 34, 36, 49, 52, 53, 56, 58, 62, 71, 72, 75, 77, 98, 115, 118, 163, 166, 167, 168, 169, 171, 176, 177, 188, 191, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 221, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 239, 240, 245, 251, 252, 253, 254, 298, 301, 324, 325, 344, 380, 403, 407, 413, 420, 421], "10": [0, 2, 3, 5, 6, 9, 11, 12, 14, 15, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 47, 48, 49, 53, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 68, 71, 72, 73, 76, 77, 78, 79, 80, 81, 84, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100, 102, 103, 104, 105, 106, 108, 115, 118, 123, 139, 149, 155, 158, 161, 162, 163, 166, 167, 168, 170, 171, 187, 188, 191, 195, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 217, 219, 220, 225, 227, 228, 229, 230, 232, 234, 235, 239, 240, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 278, 286, 298, 301, 324, 325, 329, 331, 332, 334, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 380, 405, 406, 407, 408, 411, 412, 413, 417, 420, 421, 424, 437, 439], "5281": 0, "8397156": 0, "resourc": [0, 179], "identifi": [0, 29, 30, 32, 33, 50, 58, 62, 94, 115, 124, 149, 154, 159, 167, 170, 171, 173, 197, 279, 283, 285, 290, 292], "rrid": 0, "scr_001362": 0, "There": [0, 4, 21, 66, 158, 161, 162, 163, 169, 174, 205, 273, 275, 276, 297, 324, 415, 437], "paper": [0, 48, 49, 117, 118, 158, 168, 169, 171, 230], "publish": [0, 230, 307, 421], "about": [0, 2, 3, 6, 14, 19, 24, 49, 62, 76, 78, 79, 94, 100, 101, 108, 117, 118, 124, 125, 126, 127, 142, 150, 154, 158, 161, 162, 164, 166, 168, 169, 170, 171, 174, 175, 176, 179, 199, 208, 210, 219, 220, 221, 234, 242, 243, 244, 245, 246, 247, 325, 419, 424], "howev": [0, 48, 49, 66, 67, 70, 86, 94, 100, 155, 161, 164, 168, 171, 181, 197, 316, 323, 325, 440], "pattern": [0, 8, 27, 28, 45, 49, 51, 100, 113, 115, 118, 137, 145, 154, 155, 160, 161, 164, 167, 168, 174, 176, 179, 189, 191, 196, 199, 209, 220, 227, 228, 230, 249, 255, 302, 314, 338, 343, 380, 399, 407, 413, 439], "underli": [0, 89, 171, 174, 176, 181, 358], "have": [0, 2, 3, 6, 9, 11, 15, 16, 18, 24, 29, 31, 32, 33, 39, 41, 42, 43, 44, 49, 52, 54, 55, 56, 57, 61, 62, 64, 65, 66, 67, 71, 75, 85, 86, 93, 94, 98, 100, 101, 103, 108, 113, 117, 118, 124, 125, 126, 127, 129, 131, 132, 133, 136, 137, 138, 139, 142, 145, 146, 147, 149, 150, 152, 154, 155, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 171, 173, 174, 176, 177, 179, 180, 181, 187, 188, 189, 191, 194, 199, 206, 207, 211, 215, 216, 230, 234, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 266, 275, 276, 283, 286, 290, 291, 296, 297, 298, 300, 301, 303, 312, 316, 317, 318, 321, 323, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 343, 344, 380, 385, 395, 397, 398, 402, 405, 406, 407, 408, 414, 415, 417, 418, 420, 437, 438], "been": [0, 3, 6, 10, 11, 32, 36, 39, 42, 47, 49, 52, 54, 55, 61, 66, 71, 72, 75, 79, 81, 85, 86, 89, 91, 93, 94, 104, 108, 124, 125, 127, 129, 132, 133, 139, 141, 142, 144, 145, 147, 148, 149, 150, 151, 154, 160, 167, 168, 169, 170, 173, 174, 177, 181, 188, 199, 230, 234, 283, 296, 298, 307, 336, 337, 338, 340, 341, 344, 412, 421, 424], "describ": [0, 6, 18, 37, 63, 64, 66, 69, 72, 116, 117, 118, 162, 168, 169, 171, 176, 177, 181, 188, 225, 226, 278, 281, 284, 290, 298, 325, 344, 383], "machin": [0, 29, 34, 44, 49, 94, 116, 146, 154, 162, 163, 164, 169, 174, 175, 228, 438, 440], "huge": [0, 66, 68, 139, 154], "amount": [0, 24, 34, 36, 50, 66, 95, 162, 164, 169, 175, 176, 177, 230, 251, 252, 253, 254, 256, 257, 258, 259, 283, 296, 302, 313, 328, 329, 330, 331, 332, 333, 334, 406, 407, 408], "upon": [0, 231, 283, 296, 379, 392, 393, 394, 401, 408, 410, 418], "reli": [0, 6, 30, 66, 92, 94, 126, 132, 148, 154, 158, 168, 171, 174, 179, 221, 424, 437], "heavili": 0, "who": [0, 118, 181, 325], "invest": 0, "time": [0, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 56, 57, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 115, 117, 118, 124, 125, 126, 129, 138, 139, 145, 146, 147, 149, 151, 154, 155, 157, 158, 159, 160, 161, 164, 166, 169, 171, 172, 174, 175, 177, 178, 179, 180, 187, 189, 191, 216, 237, 239, 240, 251, 252, 253, 254, 256, 257, 258, 259, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 298, 301, 302, 313, 316, 318, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 344, 372, 380, 392, 394, 401, 402, 406, 408, 410, 411, 412, 416, 417, 419, 420, 421, 424, 429, 437, 440], "maintain": [0, 124, 142, 148, 154, 169, 177], "deserv": [0, 181], "recognit": [0, 3, 28, 30, 45, 49, 71, 97, 109, 113, 115, 125, 154, 164, 166, 167, 175, 199, 219, 253, 255, 306, 308, 311, 313, 314, 327, 333, 343, 344, 372, 387, 391, 394, 399, 439], "citat": [0, 169], "In": [0, 4, 6, 9, 14, 15, 16, 22, 24, 32, 33, 36, 38, 39, 40, 42, 47, 49, 50, 51, 52, 53, 54, 58, 62, 65, 66, 68, 72, 75, 77, 79, 81, 86, 87, 89, 91, 94, 95, 99, 100, 115, 116, 117, 118, 124, 125, 134, 139, 149, 151, 154, 155, 156, 158, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 174, 176, 177, 178, 179, 180, 181, 187, 194, 197, 199, 203, 204, 205, 220, 227, 230, 232, 234, 251, 252, 253, 254, 256, 257, 258, 259, 270, 273, 275, 276, 283, 285, 290, 296, 298, 299, 316, 317, 318, 320, 338, 344, 380, 381, 392, 405, 414, 417, 424, 437, 438], "need": [0, 2, 3, 6, 9, 16, 20, 30, 31, 33, 41, 42, 48, 49, 50, 51, 55, 56, 63, 66, 69, 75, 77, 78, 79, 80, 81, 84, 89, 91, 92, 98, 99, 100, 103, 104, 108, 117, 118, 139, 142, 149, 154, 155, 159, 161, 162, 163, 164, 169, 171, 173, 174, 177, 179, 180, 181, 194, 270, 273, 274, 318, 323, 324, 328, 329, 331, 340, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 381, 384, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 406, 424, 437, 438], "order": [0, 2, 3, 6, 15, 16, 23, 30, 32, 35, 36, 40, 41, 42, 49, 54, 56, 79, 80, 91, 100, 102, 107, 117, 124, 133, 139, 142, 147, 149, 154, 160, 166, 168, 169, 170, 174, 175, 176, 177, 179, 180, 181, 191, 213, 215, 223, 224, 242, 243, 246, 270, 274, 283, 290, 292, 296, 297, 298, 301, 303, 305, 310, 311, 315, 316, 317, 328, 329, 331, 332, 333, 334, 336, 337, 338, 340, 341, 343, 344, 379, 384, 386, 387, 389, 393, 394, 401, 408, 409, 411, 414, 419, 420, 424, 437, 438], "justifi": 0, "pai": [0, 65], "engin": [0, 9, 126, 149, 154, 176, 181, 358, 395, 397, 398, 437, 438], "To": [0, 2, 3, 4, 6, 15, 21, 22, 23, 31, 33, 37, 39, 40, 42, 43, 48, 49, 50, 51, 52, 54, 55, 62, 66, 68, 70, 76, 77, 79, 80, 87, 89, 94, 98, 101, 104, 108, 117, 118, 134, 139, 151, 154, 155, 156, 158, 161, 162, 163, 164, 166, 169, 170, 171, 173, 177, 179, 180, 206, 207, 230, 273, 275, 276, 283, 292, 296, 300, 312, 324, 387, 392, 393, 394, 395, 397, 398, 401, 405, 418, 437], "guarante": [0, 6, 81, 162, 168, 239, 249, 311, 316, 317, 323, 330], "futur": [0, 6, 133, 139, 145, 151, 154, 168, 174, 179, 181, 271], "toolkit": 0, "pleas": [0, 3, 19, 29, 30, 32, 33, 34, 35, 36, 49, 50, 52, 53, 58, 62, 64, 67, 71, 72, 75, 77, 98, 100, 102, 103, 105, 106, 111, 134, 140, 149, 154, 159, 161, 164, 169, 174, 181, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 438], "see": [0, 3, 6, 8, 9, 12, 13, 14, 15, 16, 20, 21, 22, 23, 26, 28, 30, 31, 34, 36, 39, 40, 41, 43, 46, 48, 49, 50, 51, 52, 54, 55, 56, 60, 64, 67, 71, 72, 74, 80, 83, 86, 89, 94, 99, 100, 102, 103, 106, 107, 113, 117, 118, 120, 126, 127, 133, 139, 140, 142, 146, 147, 149, 151, 154, 155, 156, 158, 159, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 174, 177, 179, 181, 183, 187, 188, 189, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 273, 275, 276, 283, 285, 290, 296, 301, 302, 305, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 319, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 379, 380, 386, 387, 389, 392, 393, 394, 401, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 418, 419, 420, 424, 429, 430, 437, 438], "document": [0, 2, 3, 4, 6, 19, 26, 43, 44, 49, 50, 56, 98, 100, 103, 107, 115, 116, 117, 120, 122, 125, 127, 129, 131, 132, 133, 134, 139, 142, 144, 149, 150, 152, 154, 156, 158, 159, 160, 161, 162, 163, 164, 166, 167, 175, 176, 179, 181, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 437, 438], "how": [0, 1, 2, 3, 4, 5, 6, 9, 14, 19, 21, 26, 34, 40, 44, 47, 48, 49, 50, 53, 55, 56, 58, 61, 62, 64, 66, 67, 68, 70, 78, 79, 84, 86, 87, 88, 89, 91, 94, 95, 100, 103, 106, 107, 113, 117, 125, 134, 145, 146, 149, 150, 154, 156, 158, 159, 160, 161, 162, 164, 166, 168, 171, 174, 175, 176, 178, 180, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 438, 440], "introductori": [1, 113, 169], "exampl": [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 111, 112, 114, 116, 117, 125, 126, 127, 132, 133, 134, 135, 136, 139, 140, 142, 144, 145, 148, 149, 150, 152, 154, 159, 162, 163, 164, 165, 168, 169, 170, 171, 173, 177, 179, 195, 197, 212, 256, 273, 275, 276, 300, 321, 405, 407, 426, 427, 438, 439, 440], "teach": [1, 113, 131, 142, 154, 169], "nilearn": [1, 2, 3, 6, 7, 8, 9, 10, 11, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 116, 117, 118, 119, 123, 124, 125, 126, 127, 129, 130, 132, 133, 134, 137, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 177, 179, 180, 181, 427, 437, 439, 440], "numer": [1, 7, 29, 33, 35, 57, 113, 146, 154, 169, 170, 181, 191, 271, 273, 275, 276, 284, 392, 393, 419, 439], "plot": [1, 2, 4, 7, 8, 19, 20, 21, 23, 25, 26, 27, 29, 30, 33, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 51, 52, 53, 54, 56, 57, 59, 61, 62, 63, 64, 65, 67, 69, 71, 72, 75, 76, 77, 78, 79, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 111, 113, 117, 120, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 159, 160, 161, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 187, 196, 201, 203, 204, 209, 213, 214, 216, 219, 220, 223, 233, 239, 248, 283, 296, 302, 313, 314, 327, 334, 338, 416, 418, 422, 423, 424, 434, 438, 439, 440], "python": [1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 117, 122, 124, 125, 134, 140, 141, 142, 147, 149, 152, 154, 161, 168, 169, 175, 176, 177, 312, 438, 439], "manipul": [1, 7, 55, 66, 89, 117, 134, 154, 176, 179, 318, 387, 399, 439, 440], "look": [1, 6, 7, 23, 29, 32, 40, 44, 56, 65, 66, 69, 70, 72, 104, 113, 118, 139, 140, 150, 154, 161, 169, 170, 171, 176, 177, 181, 230, 232, 241, 318, 387, 399, 439], "3d": [1, 3, 4, 6, 7, 8, 15, 16, 18, 19, 23, 24, 25, 27, 29, 30, 32, 34, 36, 37, 42, 44, 47, 71, 75, 77, 83, 84, 94, 96, 100, 102, 104, 105, 111, 113, 117, 122, 125, 129, 136, 138, 139, 140, 142, 146, 147, 151, 154, 171, 174, 175, 176, 178, 180, 181, 201, 203, 204, 207, 208, 209, 210, 231, 233, 239, 241, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 298, 300, 302, 303, 306, 308, 309, 310, 311, 320, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 380, 381, 386, 387, 389, 390, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 409, 410, 414, 422, 424, 439, 440], "4d": [1, 3, 4, 6, 7, 8, 11, 16, 18, 20, 25, 27, 29, 30, 31, 32, 34, 36, 41, 47, 48, 49, 52, 53, 54, 56, 58, 84, 85, 87, 89, 91, 92, 94, 95, 98, 100, 102, 104, 113, 116, 124, 125, 126, 129, 136, 139, 140, 145, 154, 156, 159, 160, 161, 164, 174, 176, 178, 181, 198, 200, 202, 203, 204, 208, 216, 220, 226, 233, 241, 255, 258, 259, 298, 300, 301, 302, 306, 307, 308, 309, 311, 313, 320, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 376, 377, 380, 387, 392, 393, 394, 399, 401, 408, 410, 424, 430, 433, 437, 439, 440], "niimg": [1, 7, 33, 54, 58, 77, 79, 89, 91, 92, 98, 113, 117, 125, 126, 136, 139, 142, 147, 151, 154, 158, 176, 178, 180, 181, 208, 233, 241, 251, 252, 253, 254, 255, 256, 257, 258, 259, 278, 283, 286, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 379, 380, 386, 387, 389, 392, 393, 394, 399, 401, 402, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 420, 424, 426, 439, 440], "handl": [1, 7, 49, 64, 113, 125, 126, 129, 135, 151, 154, 161, 176, 179, 180, 181, 208, 233, 241, 271, 275, 302, 308, 309, 310, 311, 316, 322, 324, 383, 394, 399, 407, 413, 439], "visual": [1, 7, 12, 14, 27, 28, 32, 33, 39, 45, 47, 48, 50, 56, 64, 66, 69, 71, 72, 79, 80, 83, 86, 87, 88, 89, 91, 92, 94, 96, 101, 102, 104, 105, 106, 108, 115, 116, 125, 126, 134, 136, 139, 145, 147, 154, 155, 156, 157, 165, 169, 170, 173, 176, 178, 180, 196, 198, 199, 205, 208, 215, 219, 220, 224, 225, 227, 229, 233, 241, 302, 303, 306, 308, 309, 311, 313, 314, 316, 320, 327, 330, 333, 335, 338, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 383, 384, 385, 391, 392, 393, 394, 397, 398, 399, 439, 440], "introduct": [1, 7, 113, 115, 124, 139, 154, 162, 164, 165, 169, 172, 173, 175, 181, 219, 251, 275, 276, 308, 313, 384, 393, 401, 439, 440], "fmri": [1, 7, 15, 23, 25, 30, 31, 32, 33, 36, 40, 41, 44, 46, 55, 56, 59, 60, 61, 62, 63, 66, 70, 71, 73, 74, 81, 82, 85, 89, 91, 94, 97, 100, 101, 102, 108, 109, 113, 115, 117, 118, 130, 137, 142, 154, 158, 159, 160, 162, 164, 167, 168, 170, 173, 174, 175, 176, 179, 180, 181, 199, 200, 202, 208, 213, 216, 218, 219, 225, 226, 237, 251, 255, 258, 259, 278, 280, 283, 292, 296, 298, 299, 301, 302, 306, 308, 309, 312, 313, 324, 325, 327, 333, 338, 341, 344, 356, 364, 371, 379, 380, 382, 383, 384, 386, 387, 392, 393, 394, 399, 401, 406, 408, 416, 417, 418, 420, 421, 425, 439, 440], "decod": [1, 7, 36, 39, 40, 42, 44, 45, 97, 109, 115, 117, 118, 125, 126, 134, 135, 139, 142, 145, 146, 147, 148, 149, 150, 152, 154, 162, 166, 170, 174, 175, 176, 181, 219, 222, 229, 239, 283, 286, 302, 306, 308, 313, 327, 333, 334, 357, 383, 384, 391, 393, 394, 398, 399, 401, 416, 418, 423, 424, 438, 439, 440], "intro": [1, 7, 66, 113, 176, 237, 283, 299, 302, 313, 379, 382, 383, 387, 394, 417, 439], "glm": [1, 7, 28, 32, 42, 45, 61, 62, 63, 65, 66, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 100, 101, 108, 124, 126, 145, 146, 147, 149, 151, 152, 154, 161, 170, 173, 174, 175, 176, 177, 219, 237, 251, 302, 308, 313, 320, 323, 379, 382, 383, 385, 387, 394, 416, 417, 418, 438, 439, 440], "analysi": [1, 7, 15, 23, 28, 29, 33, 34, 45, 48, 49, 63, 66, 68, 71, 73, 77, 78, 79, 80, 82, 95, 98, 109, 115, 116, 118, 155, 156, 160, 162, 165, 167, 172, 173, 174, 175, 176, 180, 181, 199, 202, 216, 217, 219, 222, 224, 225, 226, 228, 232, 235, 237, 239, 250, 251, 255, 258, 270, 271, 274, 275, 276, 279, 283, 286, 290, 292, 296, 299, 302, 306, 308, 311, 312, 313, 314, 320, 323, 324, 325, 326, 327, 333, 344, 357, 372, 379, 382, 383, 386, 387, 388, 389, 393, 394, 398, 399, 408, 416, 417, 418, 424, 434, 438, 439, 440], "singl": [1, 3, 7, 14, 23, 30, 31, 46, 49, 59, 60, 64, 65, 66, 67, 68, 73, 77, 79, 86, 94, 100, 104, 113, 115, 118, 122, 145, 146, 147, 148, 151, 154, 155, 162, 166, 168, 169, 170, 176, 179, 181, 197, 216, 230, 237, 238, 248, 251, 252, 253, 254, 273, 275, 276, 283, 290, 296, 298, 299, 302, 313, 316, 327, 328, 329, 330, 331, 332, 333, 334, 357, 379, 382, 383, 387, 389, 391, 392, 394, 399, 401, 406, 408, 417, 437, 439], "session": [1, 3, 7, 29, 34, 35, 36, 37, 60, 66, 67, 73, 102, 113, 117, 147, 149, 154, 155, 161, 162, 170, 171, 176, 179, 180, 218, 219, 229, 237, 238, 259, 283, 286, 290, 299, 301, 302, 313, 316, 321, 339, 341, 379, 382, 383, 387, 394, 399, 416, 417, 418, 438, 439], "subject": [1, 3, 7, 11, 15, 16, 17, 18, 21, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 59, 60, 64, 65, 66, 69, 73, 75, 77, 78, 80, 85, 91, 94, 95, 99, 100, 101, 102, 104, 105, 106, 108, 110, 111, 113, 115, 117, 118, 124, 125, 126, 130, 132, 133, 142, 145, 152, 154, 156, 157, 158, 159, 161, 168, 170, 171, 173, 176, 178, 179, 180, 182, 185, 186, 187, 188, 189, 191, 195, 196, 197, 199, 205, 216, 219, 224, 225, 227, 228, 234, 237, 238, 239, 240, 250, 258, 259, 283, 286, 290, 296, 297, 299, 302, 313, 316, 321, 324, 325, 327, 328, 329, 330, 332, 333, 334, 339, 341, 357, 377, 379, 381, 382, 383, 387, 391, 394, 399, 406, 417, 437, 439, 440], "dataset": [1, 3, 4, 7, 9, 10, 13, 14, 19, 20, 21, 22, 23, 24, 25, 26, 28, 40, 45, 47, 52, 54, 55, 56, 57, 60, 64, 66, 67, 69, 70, 71, 73, 74, 77, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 107, 109, 113, 115, 117, 118, 125, 126, 129, 130, 134, 138, 139, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 160, 161, 162, 165, 167, 170, 173, 174, 175, 176, 177, 178, 181, 251, 252, 253, 254, 257, 258, 271, 279, 283, 286, 290, 292, 296, 299, 300, 302, 303, 306, 308, 312, 313, 317, 321, 323, 325, 326, 327, 333, 334, 344, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 382, 383, 386, 387, 388, 389, 391, 394, 395, 396, 397, 398, 399, 401, 402, 409, 416, 417, 418, 424, 437, 439, 440], "go": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 113, 116, 118, 135, 154, 155, 161, 165, 169, 173, 176, 177, 181, 232, 306, 311, 312, 314, 381, 386, 390, 394, 399, 401, 439, 440], "end": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 136, 146, 152, 154, 166, 168, 169, 180, 241, 322, 323, 419, 420], "full": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 115, 122, 124, 152, 154, 158, 159, 160, 162, 164, 166, 168, 169, 170, 174, 180, 181, 203, 204, 208, 213, 216, 219, 227, 251, 252, 253, 254, 258, 259, 265, 270, 273, 274, 275, 276, 283, 296, 298, 301, 318, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 391, 406, 408, 410, 416, 420], "code": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 115, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 159, 160, 162, 164, 168, 170, 174, 181, 195, 255, 259, 283, 296, 329, 332, 334, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 390, 408, 416, 418, 432, 434, 438], "run": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 111, 113, 117, 129, 133, 147, 149, 151, 152, 154, 155, 156, 158, 162, 165, 166, 167, 168, 169, 170, 176, 177, 179, 181, 189, 191, 219, 225, 258, 259, 283, 286, 301, 325, 333, 344, 382, 405, 420, 437, 438, 440], "your": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 116, 118, 156, 160, 161, 162, 164, 166, 177, 179, 181, 186, 203, 204, 216, 221, 251, 252, 253, 254, 258, 259, 274, 330, 333, 406, 437, 440], "browser": [2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 139, 142, 144, 154, 181, 283, 296, 358, 400, 401, 402, 403, 404, 416, 418, 437], "via": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 115, 117, 120, 154, 156, 157, 161, 164, 167, 170, 179, 200, 256, 257, 283, 292, 336, 337, 338, 340, 341], "binder": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 144, 154], "here": [2, 3, 4, 6, 9, 14, 15, 19, 20, 23, 29, 30, 31, 32, 33, 34, 35, 36, 42, 43, 44, 48, 49, 54, 55, 56, 58, 61, 63, 64, 65, 66, 67, 69, 70, 75, 88, 89, 92, 94, 95, 98, 100, 101, 103, 104, 108, 115, 117, 118, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 173, 176, 177, 180, 181, 216, 256, 257, 273, 275, 276, 298, 337, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 359, 363, 364, 367, 368, 369, 370, 395, 397], "discov": [2, 169, 175], "come": [2, 3, 6, 16, 42, 52, 54, 58, 75, 80, 94, 117, 125, 154, 156, 161, 162, 168, 169, 176, 177, 180, 181, 216, 437], "function": [2, 3, 4, 6, 8, 9, 11, 13, 14, 15, 17, 18, 21, 22, 25, 26, 27, 29, 30, 32, 34, 35, 36, 48, 49, 52, 53, 55, 56, 58, 59, 60, 64, 65, 66, 67, 69, 71, 72, 73, 74, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 102, 104, 108, 109, 111, 115, 117, 118, 120, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 158, 161, 162, 165, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 267, 268, 269, 270, 271, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 435, 436, 438, 439, 440], "let": [2, 3, 4, 6, 15, 40, 49, 56, 64, 66, 69, 71, 75, 77, 78, 79, 86, 93, 98, 162, 176, 300, 312], "first": [2, 6, 11, 14, 16, 18, 20, 23, 25, 30, 32, 33, 35, 40, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 64, 65, 67, 70, 73, 75, 77, 80, 81, 84, 86, 89, 91, 92, 93, 94, 95, 97, 104, 105, 109, 115, 117, 118, 119, 125, 139, 140, 142, 145, 147, 149, 150, 152, 154, 155, 156, 158, 159, 160, 162, 164, 165, 168, 169, 171, 172, 173, 177, 178, 179, 180, 189, 191, 217, 218, 221, 222, 226, 227, 230, 232, 235, 239, 242, 243, 246, 250, 251, 252, 253, 254, 258, 259, 271, 279, 283, 286, 290, 292, 296, 298, 302, 307, 308, 317, 318, 321, 323, 324, 326, 329, 332, 333, 334, 340, 344, 382, 383, 386, 388, 393, 394, 395, 396, 397, 398, 399, 404, 405, 406, 408, 416, 417, 418, 420, 424, 439, 440], "check": [2, 3, 15, 29, 30, 32, 33, 34, 35, 36, 77, 93, 94, 98, 105, 111, 117, 125, 129, 132, 154, 156, 161, 164, 168, 169, 176, 177, 179, 181, 187, 188, 189, 191, 221, 241, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 284, 296, 311, 324, 327, 328, 329, 330, 331, 332, 333, 334, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 405, 406, 407, 408, 437], "where": [2, 6, 9, 15, 16, 23, 24, 40, 44, 50, 70, 77, 84, 87, 94, 100, 105, 113, 126, 132, 146, 154, 155, 159, 161, 166, 167, 169, 171, 174, 177, 180, 181, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 240, 241, 251, 252, 253, 254, 256, 257, 270, 273, 274, 275, 276, 279, 283, 296, 298, 335, 355, 357, 360, 362, 364, 366, 368, 370, 372, 376, 379, 382, 384, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 404, 408, 410, 417, 418, 424, 437], "disk": [2, 3, 4, 6, 101, 103, 107, 108, 117, 118, 124, 139, 145, 146, 151, 154, 161, 169, 179, 180, 181, 212, 222, 230, 232, 235, 251, 252, 260, 261, 262, 283, 296, 335, 395, 397, 398, 416, 418], "import": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 117, 118, 132, 138, 139, 140, 142, 147, 149, 154, 155, 156, 159, 161, 162, 163, 164, 166, 168, 169, 170, 173, 174, 176, 177, 179, 180, 181, 186, 271, 273, 275, 276, 283, 296, 300, 303, 308, 312, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 390, 418, 424, 437], "print": [2, 3, 4, 6, 9, 10, 11, 16, 18, 20, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 62, 64, 69, 70, 71, 72, 75, 77, 81, 85, 89, 91, 92, 93, 94, 95, 98, 101, 102, 103, 104, 105, 107, 108, 111, 117, 161, 168, 169, 176, 179, 189, 197, 258, 259, 283, 296, 308], "f": [2, 3, 4, 9, 10, 11, 16, 18, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 64, 66, 67, 69, 71, 72, 75, 77, 78, 79, 80, 81, 85, 88, 89, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 115, 126, 152, 154, 159, 161, 164, 166, 167, 170, 197, 208, 213, 215, 217, 220, 227, 235, 251, 252, 253, 254, 271, 272, 273, 275, 276, 279, 283, 284, 296, 316, 317, 323, 324, 325, 335, 343, 411, 414], "store": [2, 3, 26, 29, 44, 49, 50, 51, 52, 54, 70, 94, 101, 108, 118, 159, 161, 166, 169, 203, 204, 241, 260, 261, 273, 275, 276, 314, 335, 344, 388], "get_data_dir": [2, 132, 154, 179, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 240], "r": [2, 4, 9, 14, 15, 24, 30, 34, 40, 41, 47, 51, 56, 71, 94, 108, 115, 126, 142, 149, 154, 170, 177, 195, 200, 205, 207, 208, 211, 213, 217, 235, 256, 257, 283, 296, 301, 323, 324, 325, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 379, 381, 384, 386, 387, 390, 392, 393, 394, 418, 420, 437], "home": [2, 3, 6, 10, 11, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 75, 77, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108, 176, 179, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 240, 241, 311], "runner": [2, 3, 6, 10, 11, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 75, 77, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108], "nilearn_data": [2, 3, 6, 10, 11, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 75, 77, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 240, 241], "now": [2, 3, 6, 14, 16, 20, 22, 25, 29, 40, 44, 49, 50, 51, 55, 56, 63, 65, 66, 71, 79, 81, 84, 86, 92, 93, 94, 100, 101, 103, 104, 108, 111, 117, 122, 124, 125, 126, 127, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 161, 167, 169, 177, 180, 251, 252, 253, 254, 258, 259, 270, 273, 274, 275, 276, 300, 308, 312, 328, 330, 331, 333, 406], "retriev": [2, 20, 22, 44, 48, 90, 91, 92, 117, 149, 154, 156, 161, 164, 175, 179, 181, 211, 237, 238, 241, 324, 325, 373, 374], "motor": [2, 14, 15, 16, 17, 51, 66, 69, 77, 79, 90, 91, 93, 97, 109, 113, 225, 248, 306, 327, 333, 344, 386, 437, 439], "contrast": [2, 6, 8, 14, 15, 27, 33, 64, 65, 67, 68, 71, 75, 76, 77, 78, 79, 80, 81, 88, 90, 93, 101, 105, 106, 108, 113, 125, 126, 132, 136, 137, 146, 149, 152, 154, 160, 166, 171, 172, 173, 174, 223, 224, 225, 231, 233, 272, 273, 275, 276, 277, 279, 280, 281, 283, 296, 298, 323, 379, 382, 392, 393, 394, 399, 401, 405, 418, 437, 439, 440], "neurovault": [2, 97, 109, 113, 115, 116, 135, 142, 147, 151, 154, 174, 230, 231, 232, 233, 242, 306, 311, 312, 314, 318, 327, 333, 386, 394, 399, 439, 440], "repositori": [2, 115, 116, 169, 174, 177, 179, 220, 230, 232, 440], "motor_imag": [2, 437], "fetch_neurovault_motor_task": [2, 14, 139, 154, 231, 437], "imag": [2, 6, 10, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 62, 63, 64, 66, 67, 68, 70, 71, 75, 76, 77, 78, 79, 80, 84, 86, 87, 88, 89, 91, 92, 94, 96, 98, 100, 101, 102, 104, 105, 106, 108, 110, 112, 115, 116, 122, 124, 125, 126, 127, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 146, 147, 148, 149, 150, 151, 152, 154, 156, 158, 159, 160, 161, 162, 166, 167, 169, 171, 174, 176, 178, 187, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 216, 219, 220, 221, 223, 225, 226, 227, 229, 230, 231, 232, 233, 234, 237, 238, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 278, 280, 283, 286, 296, 297, 298, 299, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 417, 418, 420, 421, 424, 430, 439, 440], "collection_658": 2, "image_10426": [2, 14], "nii": [2, 3, 4, 6, 10, 11, 14, 16, 18, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 64, 75, 77, 85, 86, 89, 91, 92, 94, 95, 101, 102, 104, 105, 108, 117, 176, 179, 286, 321, 323, 324, 325, 395, 396, 397, 398, 404, 422], "gz": [2, 3, 4, 6, 10, 11, 14, 16, 18, 22, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 64, 75, 77, 85, 86, 89, 91, 92, 94, 95, 101, 102, 104, 105, 117, 176, 177, 179, 323, 324, 325, 395, 396, 397, 398, 404, 422, 423], "filenam": [2, 3, 4, 10, 15, 50, 55, 61, 94, 117, 132, 142, 149, 150, 152, 154, 156, 159, 160, 169, 179, 180, 203, 204, 235, 249, 251, 252, 253, 254, 256, 257, 260, 261, 262, 311, 323, 327, 330, 333, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 384, 392], "take": [2, 3, 4, 6, 9, 24, 29, 33, 40, 42, 43, 49, 50, 65, 66, 68, 69, 71, 72, 77, 79, 94, 98, 100, 103, 108, 117, 125, 136, 139, 142, 148, 154, 155, 156, 158, 161, 164, 166, 168, 169, 170, 171, 179, 181, 187, 221, 230, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 255, 259, 283, 285, 290, 298, 331, 343, 344, 348, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 406, 408, 410, 424, 435, 437], "tmap_filenam": [2, 88], "0": [2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 114, 115, 117, 155, 156, 159, 161, 167, 168, 169, 170, 171, 179, 180, 181, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 270, 271, 273, 274, 275, 276, 278, 280, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 305, 307, 308, 310, 311, 312, 313, 314, 316, 317, 318, 320, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 379, 380, 381, 386, 390, 391, 392, 393, 394, 395, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 417, 418, 420, 421, 424, 437, 438, 439], "contain": [2, 3, 4, 6, 10, 11, 22, 23, 36, 40, 49, 52, 55, 62, 64, 69, 72, 79, 84, 86, 91, 94, 101, 106, 107, 108, 117, 118, 125, 126, 129, 134, 139, 142, 151, 152, 154, 155, 161, 162, 165, 168, 169, 171, 174, 177, 179, 181, 187, 188, 189, 191, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 219, 229, 230, 231, 232, 233, 234, 240, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 264, 266, 272, 273, 275, 276, 277, 283, 286, 296, 297, 298, 301, 302, 310, 316, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 344, 389, 390, 395, 396, 397, 398, 402, 404, 405, 406, 407, 408, 409, 411, 412, 416, 418, 420, 422, 423, 424, 429, 440], "easili": [2, 3, 9, 15, 23, 30, 31, 39, 49, 58, 94, 117, 118, 149, 154, 161, 162, 164, 166, 167, 168, 169, 170, 174, 177, 203, 204, 225, 296, 298], "statist": [2, 6, 8, 14, 22, 23, 27, 33, 36, 40, 42, 49, 64, 65, 66, 67, 69, 71, 74, 75, 82, 83, 96, 100, 101, 102, 103, 105, 108, 115, 116, 124, 127, 134, 135, 145, 147, 151, 152, 154, 155, 160, 163, 166, 169, 170, 172, 174, 175, 176, 180, 181, 188, 191, 201, 209, 224, 230, 231, 232, 239, 248, 271, 272, 273, 275, 276, 277, 278, 279, 283, 296, 298, 299, 301, 320, 323, 344, 357, 358, 386, 389, 392, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 408, 410, 417, 418, 420, 422, 424, 433, 438, 439, 440], "map": [2, 3, 8, 11, 14, 15, 19, 20, 22, 23, 27, 33, 37, 39, 44, 46, 50, 51, 52, 53, 54, 56, 59, 61, 62, 64, 66, 67, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 83, 84, 87, 89, 90, 91, 92, 93, 96, 97, 99, 101, 102, 104, 108, 109, 113, 115, 116, 125, 126, 127, 131, 134, 135, 139, 140, 142, 145, 146, 149, 152, 154, 156, 157, 160, 162, 164, 165, 166, 169, 170, 171, 172, 174, 175, 176, 179, 180, 181, 187, 188, 189, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 216, 220, 223, 224, 225, 230, 231, 232, 233, 234, 239, 242, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 278, 279, 283, 292, 296, 298, 299, 301, 303, 309, 318, 320, 323, 327, 328, 329, 330, 331, 332, 333, 334, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 378, 380, 386, 387, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 415, 417, 418, 420, 422, 424, 433, 439, 440], "plot_stat_map": [2, 6, 9, 15, 17, 29, 30, 31, 36, 39, 40, 42, 43, 48, 50, 55, 61, 64, 65, 66, 67, 70, 71, 75, 76, 77, 81, 85, 87, 88, 90, 92, 93, 94, 98, 100, 102, 103, 104, 106, 107, 117, 127, 138, 139, 146, 147, 149, 150, 152, 154, 159, 161, 173, 181, 401, 437], "displai": [2, 3, 4, 6, 10, 11, 13, 16, 17, 18, 20, 21, 22, 23, 25, 26, 39, 40, 42, 47, 48, 49, 50, 51, 55, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 75, 80, 81, 84, 86, 87, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 105, 106, 124, 131, 136, 137, 139, 140, 142, 146, 147, 149, 151, 152, 154, 156, 159, 160, 166, 171, 175, 180, 283, 290, 296, 329, 332, 334, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 408, 416, 418, 440], "_slicer": [2, 3, 4, 6, 9, 10, 15, 16, 17, 25, 39, 48, 49, 50, 64, 67, 70, 75, 81, 86, 88, 89, 92, 94, 98, 149, 154], "orthoslic": [2, 3, 4, 6, 10, 15, 16, 17, 25, 48, 50, 64, 67, 70, 75, 81, 86, 89, 94, 98, 149, 154, 355, 360, 362, 364, 366, 368, 370, 372, 374, 379, 384, 387, 392, 393, 394, 437], "object": [2, 3, 4, 5, 6, 9, 10, 13, 14, 15, 16, 17, 25, 28, 30, 32, 33, 36, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 64, 67, 70, 75, 81, 86, 88, 89, 91, 92, 94, 98, 113, 115, 117, 118, 125, 126, 131, 134, 142, 145, 148, 149, 151, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 168, 169, 170, 174, 175, 176, 178, 180, 187, 188, 189, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 251, 252, 253, 254, 255, 256, 257, 258, 259, 265, 266, 267, 268, 273, 275, 276, 278, 283, 286, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 423, 424, 426, 429, 432, 437, 439, 440], "0x7f0a3940de80": 2, "better": [2, 3, 30, 33, 42, 43, 49, 66, 94, 100, 103, 115, 123, 125, 126, 130, 133, 139, 147, 154, 156, 157, 158, 160, 161, 162, 163, 164, 165, 168, 170, 180, 188, 392, 408, 424, 440], "threshold": [2, 3, 9, 13, 14, 16, 17, 23, 30, 33, 36, 37, 39, 40, 42, 48, 49, 50, 54, 55, 56, 61, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77, 79, 80, 81, 87, 88, 89, 90, 93, 94, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 115, 118, 126, 127, 140, 142, 146, 149, 151, 152, 154, 156, 159, 168, 171, 172, 174, 180, 221, 242, 243, 246, 258, 278, 282, 283, 296, 298, 299, 300, 320, 324, 325, 337, 338, 339, 340, 341, 342, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 379, 381, 386, 387, 389, 392, 393, 394, 395, 397, 398, 400, 401, 402, 404, 407, 408, 413, 417, 418, 437, 440], "3": [2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 115, 119, 123, 124, 129, 132, 133, 136, 139, 140, 141, 142, 147, 148, 149, 150, 159, 166, 167, 170, 171, 180, 181, 187, 188, 189, 191, 193, 194, 195, 199, 200, 202, 205, 206, 207, 209, 210, 211, 216, 217, 220, 227, 230, 232, 235, 239, 240, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 273, 275, 276, 278, 283, 285, 290, 296, 299, 308, 310, 312, 313, 316, 318, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 336, 338, 339, 341, 343, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 379, 381, 384, 386, 387, 390, 392, 393, 394, 395, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 418, 424, 426, 437, 438, 439], "0x7f0a3b6cb1d0": 2, "rest": [2, 3, 6, 21, 23, 30, 32, 33, 35, 41, 48, 50, 54, 55, 56, 62, 70, 85, 87, 89, 92, 98, 100, 115, 126, 130, 134, 154, 158, 159, 160, 164, 168, 169, 174, 176, 179, 196, 198, 199, 208, 227, 240, 250, 259, 322, 324, 325, 333, 391, 408, 440], "network": [2, 8, 19, 20, 21, 27, 46, 47, 48, 51, 54, 55, 60, 72, 73, 83, 86, 94, 96, 101, 113, 115, 118, 131, 145, 151, 154, 155, 156, 157, 159, 169, 170, 174, 175, 176, 181, 196, 198, 199, 205, 207, 208, 211, 213, 214, 215, 225, 227, 283, 290, 308, 324, 325, 327, 332, 334, 357, 378, 390, 391, 392, 394, 399, 408, 416, 418, 437, 439, 440], "smith": [2, 21, 83, 94, 96, 113, 115, 155, 174, 208, 227, 298, 308, 327, 332, 344, 378, 392, 394, 399, 408, 439], "2009": [2, 21, 115, 123, 145, 148, 154, 174, 176, 201, 208, 220, 221, 227, 245, 298, 344], "correspond": [2, 3, 6, 14, 24, 29, 30, 33, 34, 36, 39, 40, 44, 49, 55, 56, 63, 65, 66, 69, 70, 72, 77, 78, 79, 80, 81, 86, 91, 92, 94, 101, 102, 108, 115, 126, 144, 146, 154, 156, 161, 162, 164, 166, 168, 169, 171, 174, 175, 177, 181, 187, 197, 202, 205, 208, 215, 221, 225, 232, 234, 242, 243, 246, 251, 252, 253, 254, 256, 257, 258, 259, 265, 279, 280, 283, 285, 286, 290, 292, 296, 297, 298, 312, 313, 316, 321, 328, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 344, 373, 374, 379, 380, 384, 387, 388, 390, 392, 393, 394, 396, 406, 408, 409, 411, 412, 414, 417, 418, 424], "between": [2, 6, 9, 22, 23, 24, 30, 40, 42, 49, 50, 51, 55, 62, 66, 69, 71, 72, 75, 77, 79, 80, 86, 89, 92, 99, 100, 102, 105, 127, 134, 139, 142, 145, 148, 154, 155, 156, 157, 159, 161, 162, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 195, 207, 227, 245, 253, 254, 259, 283, 286, 296, 301, 338, 344, 345, 347, 348, 375, 379, 381, 386, 388, 390, 392, 393, 394, 395, 397, 398, 401, 402, 404, 406, 417, 418, 420, 424], "task": [2, 3, 17, 29, 30, 31, 34, 39, 48, 49, 60, 62, 66, 69, 73, 77, 81, 89, 92, 97, 103, 109, 113, 115, 139, 150, 152, 154, 160, 161, 162, 165, 168, 170, 171, 174, 175, 176, 177, 181, 188, 191, 219, 222, 224, 225, 250, 283, 286, 302, 306, 321, 327, 333, 334, 344, 357, 372, 383, 385, 386, 394, 399, 439], "rsn": [2, 21, 87, 134, 154, 198, 208], "fetch_atlas_smith_2009": [2, 21, 87, 125, 126, 154], "true": [2, 6, 9, 13, 14, 15, 16, 21, 22, 23, 25, 26, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 64, 67, 69, 70, 71, 74, 75, 77, 79, 80, 81, 82, 86, 87, 89, 91, 92, 94, 98, 99, 100, 101, 102, 103, 105, 108, 111, 113, 117, 118, 126, 134, 137, 142, 149, 154, 156, 159, 161, 164, 166, 168, 171, 173, 174, 181, 187, 188, 189, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 213, 214, 215, 216, 219, 220, 221, 223, 224, 225, 227, 228, 229, 230, 232, 234, 240, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 278, 283, 286, 296, 298, 299, 300, 301, 302, 305, 307, 311, 316, 317, 320, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 411, 412, 414, 417, 419, 420, 421, 437, 439], "dimens": [2, 15, 21, 29, 33, 34, 40, 47, 49, 66, 87, 94, 117, 147, 152, 154, 165, 171, 174, 180, 181, 187, 193, 194, 202, 208, 227, 234, 251, 252, 253, 254, 258, 259, 271, 273, 275, 276, 283, 298, 301, 302, 308, 309, 312, 313, 318, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 377, 380, 391, 392, 406, 408, 420, 440], "smith_2009": 2, "pnas_smith09_rsn10": 2, "It": [2, 3, 6, 9, 14, 15, 16, 22, 34, 41, 42, 44, 48, 51, 61, 65, 66, 71, 75, 77, 81, 86, 89, 94, 98, 100, 101, 108, 116, 117, 118, 122, 129, 132, 133, 135, 146, 147, 148, 149, 154, 155, 156, 161, 162, 164, 165, 166, 168, 169, 171, 174, 175, 176, 177, 179, 180, 181, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 438], "nifti": [2, 4, 10, 11, 16, 18, 25, 29, 30, 32, 34, 35, 36, 41, 47, 48, 49, 52, 53, 54, 56, 58, 77, 79, 84, 86, 89, 91, 92, 94, 95, 102, 104, 105, 117, 127, 145, 151, 152, 154, 156, 160, 161, 169, 178, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 211, 216, 219, 223, 224, 225, 228, 229, 234, 251, 252, 256, 257, 258, 259, 302, 303, 306, 310, 311, 312, 316, 319, 384, 406, 409, 424, 437, 440], "load": [2, 4, 6, 8, 9, 21, 23, 27, 49, 52, 53, 54, 58, 61, 62, 64, 67, 69, 70, 77, 88, 89, 91, 93, 102, 103, 104, 105, 106, 107, 108, 113, 116, 124, 125, 126, 132, 134, 137, 139, 148, 149, 151, 154, 157, 160, 164, 165, 168, 169, 176, 178, 180, 195, 196, 199, 201, 203, 204, 205, 208, 209, 213, 214, 215, 216, 219, 220, 221, 224, 225, 228, 229, 230, 232, 234, 239, 240, 242, 243, 244, 245, 246, 247, 248, 258, 259, 260, 267, 268, 269, 286, 300, 311, 312, 314, 324, 325, 381, 397, 399, 400, 404, 422, 423, 429, 437, 439, 440], "memori": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 131, 139, 140, 154, 158, 159, 168, 180, 181, 188, 239, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 266, 271, 276, 283, 286, 296, 302, 306, 316, 317, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 402, 406, 407, 408, 419, 437], "its": [2, 3, 15, 19, 26, 29, 30, 31, 32, 33, 34, 35, 36, 40, 44, 56, 66, 69, 84, 88, 89, 90, 92, 94, 98, 100, 108, 117, 118, 131, 134, 142, 145, 147, 149, 151, 154, 155, 158, 160, 161, 162, 164, 166, 167, 168, 169, 171, 173, 174, 177, 181, 194, 207, 209, 219, 230, 231, 232, 233, 251, 252, 253, 254, 256, 257, 258, 259, 270, 274, 283, 285, 290, 296, 297, 298, 300, 311, 379, 380, 381, 384, 386, 387, 390, 392, 393, 394, 395, 396, 397, 398, 405, 406, 407, 408, 433], "shape": [2, 3, 20, 23, 25, 40, 41, 43, 47, 49, 50, 51, 53, 54, 55, 56, 58, 61, 64, 65, 66, 67, 68, 69, 71, 84, 91, 93, 94, 98, 100, 102, 103, 105, 106, 107, 108, 111, 117, 147, 148, 154, 156, 158, 159, 161, 164, 170, 171, 174, 176, 178, 181, 187, 188, 189, 191, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 228, 234, 251, 252, 253, 254, 256, 257, 258, 259, 264, 265, 266, 270, 271, 273, 274, 275, 276, 279, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 301, 302, 303, 306, 307, 308, 312, 313, 316, 317, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 381, 382, 390, 400, 403, 405, 406, 407, 408, 411, 412, 413, 414, 415, 420, 421, 440], "load_img": [2, 36, 93, 94, 107, 132, 154, 179, 180], "91": [2, 30, 33, 43, 56, 72, 77, 91, 148, 154, 197, 208], "109": [2, 33, 41, 43, 56, 91, 148, 154, 197, 208], "note": [2, 3, 4, 6, 14, 15, 20, 23, 42, 43, 44, 48, 49, 52, 54, 55, 56, 58, 64, 65, 66, 67, 69, 70, 75, 76, 79, 84, 86, 91, 94, 95, 101, 102, 104, 108, 115, 117, 118, 125, 149, 154, 155, 156, 160, 166, 167, 168, 169, 170, 171, 177, 179, 180, 181, 187, 188, 189, 194, 195, 197, 198, 199, 202, 207, 208, 211, 216, 219, 220, 221, 223, 224, 227, 229, 230, 231, 232, 233, 234, 235, 241, 242, 243, 246, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 270, 273, 274, 275, 276, 283, 296, 299, 301, 307, 310, 312, 313, 316, 319, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 379, 380, 384, 386, 393, 394, 405, 406, 407, 408, 409, 420, 421, 424, 437], "index": [2, 6, 12, 20, 22, 23, 33, 40, 41, 50, 55, 56, 64, 65, 66, 69, 72, 87, 88, 100, 101, 103, 131, 149, 152, 154, 159, 197, 198, 206, 207, 209, 217, 236, 250, 251, 252, 253, 254, 273, 275, 276, 290, 308, 316, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 396, 408, 410, 420, 424], "start": [2, 3, 6, 30, 40, 49, 56, 58, 66, 69, 71, 84, 91, 94, 151, 154, 161, 168, 169, 174, 175, 177, 181, 199, 200, 208, 210, 280, 283, 285, 290, 327, 328, 329, 330, 331, 332, 333, 334, 344, 408, 424], "first_rsn": 2, "index_img": [2, 3, 20, 29, 30, 31, 32, 33, 34, 36, 37, 49, 50, 87, 89, 92, 98, 102, 104, 156, 159, 180, 181, 302, 309], "0x7f0a3944da60": 2, "iter_img": [2, 48, 180, 308], "them": [2, 3, 6, 14, 19, 30, 32, 39, 42, 44, 49, 50, 54, 55, 58, 62, 64, 65, 67, 69, 71, 72, 79, 80, 86, 89, 94, 100, 103, 104, 108, 113, 117, 118, 122, 126, 127, 139, 145, 146, 148, 151, 154, 155, 156, 160, 162, 164, 169, 171, 174, 175, 176, 179, 181, 186, 197, 230, 232, 286, 343, 344, 406, 437], "Then": [2, 3, 14, 30, 40, 42, 50, 51, 55, 62, 63, 69, 94, 95, 159, 161, 163, 164, 169, 180, 181, 187, 189, 221, 405], "give": [2, 3, 4, 9, 14, 15, 16, 24, 29, 33, 42, 49, 52, 54, 55, 56, 58, 69, 84, 91, 94, 98, 103, 117, 125, 132, 134, 149, 154, 155, 156, 158, 160, 161, 162, 163, 164, 166, 168, 176, 180, 181, 223, 224, 232, 251, 252, 253, 254, 255, 258, 259, 270, 278, 283, 285, 290, 296, 298, 313, 318, 321, 328, 329, 330, 331, 332, 333, 334, 335, 342, 391, 396, 397, 405, 406, 408, 410, 414, 415, 424], "few": [2, 14, 15, 25, 39, 40, 49, 77, 81, 91, 102, 137, 138, 154, 160, 162, 165, 167, 169, 170, 177, 180, 406, 424, 440], "argument": [2, 6, 9, 14, 15, 17, 48, 55, 58, 68, 70, 80, 89, 92, 94, 118, 125, 126, 131, 132, 134, 135, 136, 137, 139, 140, 142, 145, 146, 147, 148, 149, 151, 152, 154, 161, 162, 164, 166, 168, 169, 170, 173, 177, 179, 191, 195, 203, 204, 230, 241, 251, 252, 253, 254, 255, 286, 296, 298, 301, 312, 315, 325, 328, 329, 330, 331, 332, 333, 334, 340, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 385, 387, 389, 391, 397, 398, 402, 420, 437], "more": [2, 3, 4, 6, 8, 9, 13, 14, 16, 19, 21, 22, 23, 26, 27, 28, 29, 31, 33, 39, 40, 42, 43, 46, 48, 49, 50, 52, 54, 55, 56, 58, 60, 61, 62, 64, 66, 69, 70, 71, 74, 75, 77, 79, 80, 83, 86, 89, 91, 94, 98, 100, 101, 102, 103, 105, 107, 108, 113, 116, 117, 118, 120, 124, 125, 126, 128, 132, 134, 136, 138, 139, 142, 144, 148, 149, 150, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 174, 176, 177, 179, 180, 181, 188, 195, 197, 198, 199, 200, 205, 207, 208, 210, 211, 216, 219, 220, 221, 225, 227, 230, 232, 234, 239, 242, 243, 245, 246, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 271, 273, 275, 276, 283, 296, 298, 302, 313, 321, 325, 328, 329, 330, 331, 332, 333, 334, 344, 355, 357, 360, 362, 364, 366, 368, 370, 372, 379, 387, 392, 393, 394, 399, 401, 402, 405, 406, 407, 408, 410, 417, 419, 424, 427, 437, 438, 439, 440], "compact": [2, 94, 180, 221], "img": [2, 4, 6, 10, 50, 62, 71, 77, 79, 84, 90, 101, 105, 111, 134, 142, 154, 159, 169, 179, 255, 258, 259, 265, 266, 296, 298, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 327, 328, 329, 330, 331, 332, 333, 334, 335, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 378, 380, 387, 388, 406, 408, 411, 412, 414, 415, 417, 424, 437], "display_mod": [2, 6, 9, 13, 14, 15, 18, 30, 31, 36, 39, 40, 42, 43, 48, 49, 53, 58, 62, 65, 66, 70, 71, 75, 76, 79, 87, 88, 92, 101, 102, 105, 106, 107, 117, 132, 149, 154, 283, 296, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 379, 381, 384, 386, 387, 390, 392, 393, 394, 418, 437], "z": [2, 13, 14, 15, 18, 24, 30, 33, 36, 40, 42, 43, 48, 52, 54, 58, 61, 62, 65, 66, 67, 69, 70, 71, 75, 76, 79, 80, 81, 84, 87, 88, 94, 101, 102, 105, 106, 108, 115, 134, 136, 140, 151, 154, 169, 171, 174, 177, 180, 181, 205, 230, 260, 271, 278, 280, 282, 283, 296, 299, 303, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 344, 345, 347, 348, 352, 353, 354, 355, 356, 363, 364, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 381, 384, 386, 387, 390, 392, 393, 394, 395, 396, 397, 398, 401, 404, 408, 409, 417, 418, 420, 437], "cut_coord": [2, 6, 9, 15, 16, 17, 18, 20, 30, 31, 36, 39, 40, 42, 43, 48, 49, 50, 55, 61, 65, 66, 67, 70, 71, 75, 77, 79, 81, 86, 87, 88, 90, 92, 93, 94, 100, 102, 105, 106, 107, 124, 127, 154, 159, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 379, 384, 387, 392, 393, 394, 401, 418, 437], "1": [2, 3, 4, 5, 6, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 115, 117, 118, 124, 126, 127, 129, 133, 134, 136, 139, 141, 142, 149, 151, 155, 159, 161, 162, 163, 164, 166, 167, 168, 169, 171, 177, 179, 181, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 268, 270, 271, 273, 274, 275, 276, 278, 283, 286, 290, 292, 296, 298, 300, 301, 305, 308, 310, 313, 316, 318, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 380, 381, 386, 388, 390, 391, 392, 393, 395, 397, 398, 401, 402, 404, 405, 406, 407, 408, 413, 415, 417, 420, 421, 424, 437, 438, 439], "colorbar": [2, 6, 9, 14, 20, 21, 23, 25, 26, 36, 37, 40, 48, 50, 51, 54, 57, 58, 62, 69, 70, 75, 76, 77, 79, 80, 86, 87, 88, 94, 101, 103, 105, 108, 122, 124, 131, 134, 139, 140, 142, 146, 147, 148, 149, 150, 152, 154, 159, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 382, 384, 386, 387, 389, 390, 391, 392, 393, 394, 395, 397, 398, 400, 401, 402, 404, 437], "fals": [2, 6, 9, 14, 15, 17, 18, 20, 21, 22, 33, 34, 36, 37, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 62, 70, 72, 75, 76, 77, 79, 80, 81, 86, 87, 88, 89, 91, 92, 94, 99, 101, 102, 103, 105, 106, 111, 118, 126, 142, 145, 146, 147, 149, 151, 154, 159, 166, 170, 171, 174, 181, 187, 188, 189, 191, 193, 195, 201, 202, 203, 204, 213, 214, 215, 216, 219, 225, 228, 230, 232, 234, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 278, 280, 283, 286, 296, 298, 299, 300, 301, 302, 305, 314, 316, 317, 320, 321, 324, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 379, 381, 382, 384, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 402, 404, 405, 406, 407, 408, 409, 411, 412, 414, 415, 417, 418, 419, 420, 437], "slice": [2, 3, 6, 9, 16, 36, 89, 94, 105, 117, 125, 138, 145, 147, 154, 166, 179, 181, 283, 286, 296, 308, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 387, 418, 440], "constructor": [2, 118, 275, 276, 308], "desir": [2, 62, 177, 181, 258, 259, 282, 283, 285, 290, 296, 299, 321, 373, 374, 382, 406], "afterward": [2, 168, 177], "ll": [2, 6, 49, 58, 256, 257], "follow": [2, 4, 9, 14, 18, 21, 22, 29, 32, 34, 35, 36, 40, 41, 42, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 66, 70, 72, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 111, 113, 117, 118, 136, 139, 140, 141, 142, 143, 144, 148, 154, 155, 156, 159, 160, 166, 169, 170, 171, 174, 176, 177, 179, 234, 239, 241, 301, 307, 321, 323, 324, 325, 329, 332, 334, 336, 337, 338, 340, 341, 402, 408, 420, 421, 437, 438], "same": [2, 3, 6, 14, 15, 21, 23, 34, 37, 40, 41, 47, 49, 50, 55, 58, 63, 64, 66, 69, 70, 71, 84, 86, 88, 94, 98, 100, 101, 102, 108, 118, 126, 127, 134, 139, 145, 146, 147, 148, 149, 154, 155, 156, 159, 160, 161, 162, 166, 168, 169, 171, 173, 174, 177, 179, 180, 181, 187, 188, 189, 191, 203, 204, 213, 215, 220, 221, 239, 251, 252, 253, 254, 256, 257, 258, 259, 283, 286, 296, 298, 301, 303, 312, 314, 316, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 340, 342, 344, 350, 351, 352, 353, 354, 363, 364, 367, 368, 369, 370, 375, 379, 381, 382, 384, 386, 387, 391, 392, 393, 394, 402, 405, 406, 409, 414, 415, 417, 418, 420], "formula": [2, 130, 154, 168, 296, 298, 312, 382], "befor": [2, 15, 49, 55, 56, 89, 94, 98, 103, 117, 124, 126, 139, 142, 145, 147, 149, 151, 154, 158, 159, 161, 162, 164, 169, 170, 171, 173, 176, 177, 179, 180, 181, 191, 230, 232, 258, 259, 283, 285, 290, 301, 305, 307, 324, 325, 328, 329, 331, 332, 334, 380, 395, 397, 398, 402, 404, 406, 411, 412, 420, 421, 437], "selected_volum": 2, "5": [2, 3, 6, 7, 12, 18, 20, 22, 23, 24, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 79, 81, 82, 88, 89, 91, 94, 95, 96, 98, 99, 100, 101, 103, 105, 106, 107, 108, 109, 115, 124, 129, 136, 142, 147, 148, 149, 150, 155, 159, 161, 166, 167, 168, 171, 180, 181, 198, 200, 203, 204, 206, 207, 210, 215, 216, 219, 220, 221, 225, 227, 229, 242, 245, 256, 257, 273, 275, 276, 301, 307, 308, 311, 324, 325, 337, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 392, 393, 395, 397, 398, 400, 402, 403, 404, 419, 420, 421, 424, 437, 439], "re": [2, 6, 21, 23, 40, 65, 66, 69, 71, 84, 118, 148, 154, 169, 230, 242, 243, 244, 245, 246, 247, 273, 275, 276, 286, 409], "thing": [2, 3, 56, 66, 125, 154, 158, 167, 168, 169, 177, 181, 273, 301, 420, 437], "base": [2, 8, 20, 27, 28, 29, 34, 45, 47, 48, 49, 55, 60, 61, 66, 67, 71, 73, 74, 81, 82, 88, 89, 91, 92, 97, 98, 105, 109, 113, 115, 118, 124, 126, 130, 134, 142, 145, 147, 150, 152, 154, 155, 156, 157, 158, 160, 161, 164, 166, 167, 168, 169, 171, 172, 174, 175, 176, 177, 181, 188, 191, 196, 201, 207, 209, 216, 219, 220, 221, 222, 225, 226, 227, 230, 232, 234, 237, 238, 239, 240, 251, 252, 253, 254, 255, 257, 258, 259, 271, 279, 283, 286, 290, 292, 296, 298, 299, 300, 301, 302, 306, 308, 312, 317, 320, 323, 324, 325, 327, 333, 334, 338, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 383, 392, 393, 394, 397, 398, 399, 401, 405, 406, 408, 409, 410, 416, 418, 420, 421, 422, 423, 424, 437, 438, 439, 440], "confirm": [2, 29, 126, 154, 169], "match": [2, 6, 15, 118, 125, 126, 142, 146, 147, 149, 154, 160, 166, 169, 174, 178, 181, 197, 208, 230, 250, 251, 252, 253, 254, 256, 257, 258, 259, 283, 286, 296, 298, 302, 311, 313, 316, 321, 323, 328, 329, 331, 332, 336, 338, 339, 341, 392, 406, 409, 440], "previou": [2, 9, 14, 41, 49, 54, 58, 62, 66, 77, 94, 148, 149, 154, 155, 158, 162, 164, 168, 171, 191, 251, 252, 253, 254, 258, 259, 330, 333, 406], "abov": [2, 3, 4, 14, 21, 33, 42, 48, 49, 56, 66, 69, 86, 94, 100, 118, 134, 152, 154, 155, 156, 158, 160, 161, 166, 168, 169, 170, 174, 179, 180, 181, 197, 221, 242, 243, 246, 251, 252, 253, 254, 256, 257, 270, 273, 274, 275, 276, 316, 317, 324, 328, 329, 330, 331, 332, 333, 334, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 392, 400, 402, 404, 406, 408, 419, 420], "show": [2, 4, 6, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 117, 134, 140, 145, 147, 149, 152, 154, 155, 156, 159, 161, 162, 164, 166, 169, 171, 173, 180, 181, 219, 231, 248, 270, 283, 296, 355, 357, 358, 360, 362, 364, 366, 368, 370, 372, 396, 400, 403, 408, 418, 437, 439], "forc": [2, 94, 111, 129, 154, 168, 181, 199, 208, 230, 231, 232, 233], "figur": [2, 4, 9, 12, 14, 15, 18, 22, 23, 24, 25, 30, 31, 32, 34, 35, 36, 40, 41, 42, 43, 44, 48, 49, 51, 52, 56, 57, 61, 62, 65, 66, 68, 70, 79, 84, 91, 94, 99, 100, 101, 105, 106, 108, 111, 126, 136, 145, 146, 149, 150, 151, 154, 169, 170, 171, 180, 323, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 437], "when": [2, 3, 4, 8, 9, 16, 24, 27, 54, 58, 66, 67, 68, 69, 75, 89, 91, 92, 94, 100, 102, 105, 106, 113, 117, 118, 124, 125, 126, 127, 129, 133, 134, 135, 137, 140, 142, 145, 146, 149, 150, 151, 152, 154, 155, 156, 158, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 173, 174, 177, 180, 187, 197, 200, 206, 207, 223, 225, 230, 232, 251, 252, 253, 254, 255, 256, 257, 271, 272, 276, 277, 280, 283, 296, 298, 316, 318, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 344, 345, 347, 348, 376, 382, 386, 387, 392, 393, 394, 395, 397, 398, 399, 401, 402, 404, 406, 411, 418, 419, 420, 424, 437, 439], "outsid": [2, 4, 16, 66, 151, 154, 169, 176, 181, 316, 317, 331, 395, 397, 398, 404, 411, 412, 417, 424], "ipython": [2, 4, 16, 161, 176, 438], "recap": [2, 4], "call": [2, 4, 6, 14, 15, 16, 33, 48, 49, 50, 52, 53, 56, 58, 66, 69, 72, 76, 81, 87, 89, 91, 94, 98, 104, 117, 118, 142, 152, 154, 155, 156, 158, 159, 161, 162, 166, 168, 169, 170, 171, 173, 174, 177, 179, 181, 185, 187, 189, 191, 199, 211, 230, 232, 235, 257, 259, 272, 277, 283, 296, 301, 311, 328, 329, 330, 331, 332, 333, 334, 340, 380, 381, 390, 406, 420, 437], "differ": [2, 6, 9, 15, 19, 20, 21, 22, 23, 28, 29, 45, 46, 51, 52, 54, 55, 58, 59, 63, 66, 67, 68, 69, 70, 71, 72, 75, 79, 80, 81, 89, 91, 94, 98, 99, 100, 102, 103, 113, 115, 117, 124, 126, 140, 146, 148, 152, 154, 156, 157, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 174, 178, 179, 187, 189, 202, 211, 216, 219, 242, 243, 244, 245, 246, 247, 251, 253, 254, 256, 257, 275, 276, 279, 283, 285, 286, 290, 292, 296, 302, 306, 308, 313, 321, 324, 327, 328, 329, 331, 332, 333, 343, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 379, 381, 384, 386, 387, 391, 392, 393, 394, 399, 406, 408, 417, 418, 424, 439, 440], "flavor": 2, "onli": [2, 3, 6, 13, 14, 19, 29, 31, 32, 33, 34, 36, 37, 40, 42, 43, 49, 51, 52, 54, 55, 58, 66, 69, 75, 79, 81, 84, 86, 91, 94, 98, 99, 100, 101, 103, 104, 108, 117, 118, 125, 132, 137, 142, 147, 149, 150, 154, 155, 156, 158, 159, 161, 162, 163, 164, 166, 168, 169, 171, 173, 174, 177, 178, 179, 180, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 437, 440], "multipl": [2, 6, 19, 42, 47, 77, 79, 81, 101, 125, 145, 146, 154, 157, 162, 164, 166, 169, 172, 174, 178, 179, 180, 199, 200, 208, 250, 273, 291, 296, 298, 308, 311, 312, 330, 344, 355, 357, 360, 374, 379, 384, 387, 389, 392, 393, 394, 401, 437, 440], "detail": [2, 3, 8, 9, 12, 14, 15, 16, 19, 22, 23, 26, 28, 29, 31, 33, 39, 46, 48, 50, 52, 54, 58, 60, 62, 64, 67, 71, 72, 74, 81, 83, 95, 100, 101, 102, 103, 107, 113, 117, 118, 120, 134, 139, 142, 151, 154, 155, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 172, 177, 178, 179, 181, 183, 187, 195, 199, 203, 204, 207, 216, 221, 225, 227, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 258, 259, 276, 283, 296, 301, 305, 313, 318, 319, 325, 327, 328, 329, 330, 331, 332, 333, 334, 344, 402, 405, 406, 408, 410, 429, 430, 437, 438], "input": [2, 3, 4, 6, 9, 14, 15, 23, 32, 48, 49, 54, 55, 57, 64, 67, 68, 71, 76, 77, 79, 80, 85, 88, 89, 92, 94, 98, 108, 117, 125, 126, 128, 129, 132, 133, 134, 135, 137, 138, 139, 142, 146, 148, 149, 150, 151, 152, 154, 158, 161, 164, 166, 168, 169, 170, 174, 178, 180, 181, 187, 188, 189, 190, 191, 192, 193, 194, 199, 200, 208, 226, 227, 251, 252, 253, 254, 255, 256, 257, 258, 259, 278, 280, 282, 283, 285, 290, 291, 296, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 379, 380, 386, 387, 389, 392, 393, 394, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 424, 437, 440], "format": [2, 49, 100, 117, 125, 126, 146, 149, 151, 154, 169, 170, 181, 187, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 384, 386, 387, 389, 393, 394, 395, 396, 397, 398, 403, 404, 405, 406, 407, 408, 422, 423, 424, 428], "given": [2, 3, 9, 14, 16, 44, 47, 50, 53, 54, 58, 64, 65, 66, 69, 71, 79, 84, 86, 94, 95, 100, 104, 125, 131, 133, 137, 142, 151, 154, 155, 158, 161, 162, 164, 166, 167, 168, 169, 171, 174, 176, 177, 181, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 203, 204, 224, 225, 227, 228, 234, 240, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 270, 271, 273, 274, 275, 276, 279, 280, 283, 286, 290, 296, 297, 298, 300, 302, 307, 310, 313, 316, 318, 320, 321, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 380, 381, 384, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 418, 419, 421], "section": [2, 3, 4, 14, 39, 47, 48, 49, 56, 70, 94, 98, 100, 115, 116, 117, 125, 134, 139, 149, 154, 155, 156, 158, 159, 161, 162, 164, 166, 169, 171, 173, 177, 178, 181, 183, 230, 234, 345, 375, 379, 381, 384, 386, 387, 390, 392, 393, 394, 405, 416, 429, 430, 437], "name": [2, 3, 4, 6, 11, 14, 21, 22, 23, 26, 30, 32, 44, 51, 58, 62, 65, 72, 75, 76, 77, 79, 80, 91, 94, 100, 101, 103, 108, 117, 124, 126, 131, 140, 142, 147, 149, 151, 154, 158, 162, 166, 169, 170, 174, 176, 177, 178, 181, 187, 188, 189, 197, 198, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 213, 215, 225, 230, 232, 235, 236, 237, 238, 239, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 281, 283, 284, 285, 286, 290, 296, 298, 301, 312, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 405, 406, 407, 408, 409, 411, 418, 420, 440], "accept": [2, 3, 47, 65, 124, 125, 133, 134, 136, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 154, 169, 170, 179, 296, 298, 299, 321, 335, 336, 337, 338, 339, 340, 341, 379, 389, 391, 392, 393, 394, 401, 403, 414, 415], "either": [2, 4, 9, 32, 35, 36, 39, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 117, 139, 146, 148, 154, 156, 158, 169, 170, 173, 174, 179, 181, 206, 207, 208, 211, 219, 273, 275, 276, 283, 296, 299, 300, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 379, 380, 381, 384, 385, 386, 389, 391, 392, 393, 394, 395, 396, 397, 398, 401, 402, 404, 408, 418, 422, 423, 424, 437, 438], "hand": [2, 66, 69, 94, 168, 169, 179, 181, 240], "break": [2, 3, 83, 96, 113, 134, 154, 158, 166, 169, 211, 393, 399, 409, 439], "down": [2, 70, 103, 158, 168, 169, 253], "other": [2, 4, 14, 23, 24, 31, 33, 36, 39, 40, 48, 56, 66, 69, 70, 94, 98, 100, 103, 104, 116, 117, 125, 139, 142, 146, 154, 155, 156, 161, 162, 163, 165, 166, 168, 169, 170, 174, 177, 179, 181, 187, 188, 189, 216, 230, 236, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 273, 275, 276, 283, 285, 286, 290, 296, 298, 321, 322, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 340, 344, 387, 399, 405, 406, 407, 408, 437, 440], "concat_img": [2, 6, 11, 70, 71, 100, 133, 154, 180, 308], "group": [2, 3, 6, 29, 30, 32, 33, 46, 57, 58, 59, 62, 74, 76, 77, 78, 79, 80, 97, 98, 101, 104, 105, 109, 113, 115, 136, 142, 154, 156, 157, 160, 161, 166, 171, 173, 174, 175, 176, 187, 188, 189, 199, 200, 205, 213, 215, 216, 227, 233, 251, 252, 253, 254, 255, 258, 259, 309, 321, 324, 327, 332, 344, 377, 380, 381, 391, 392, 394, 399, 413, 439, 440], "total": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 115, 157, 159, 161, 167, 206, 216, 257, 265, 266, 338, 339, 341, 392, 409, 439, 440], "script": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 148, 154, 163, 169, 179, 180, 181, 437, 438], "minut": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 171, 225], "14": [2, 6, 7, 18, 30, 33, 36, 40, 45, 62, 70, 77, 89, 91, 96, 103, 108, 109, 115, 120, 122, 132, 134, 135, 136, 139, 142, 154, 166, 201, 207, 397, 439], "239": [2, 7, 33, 41, 439], "second": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 111, 115, 126, 154, 158, 159, 167, 168, 169, 171, 172, 174, 181, 222, 224, 225, 239, 251, 252, 253, 254, 256, 257, 271, 278, 279, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 301, 306, 312, 320, 323, 328, 329, 330, 331, 332, 333, 334, 344, 356, 357, 371, 380, 383, 386, 388, 394, 395, 396, 397, 398, 399, 404, 406, 408, 416, 417, 418, 419, 420, 424, 439, 440], "estim": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 63, 65, 68, 70, 71, 72, 75, 78, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 102, 103, 104, 105, 106, 107, 108, 111, 113, 115, 117, 124, 126, 137, 145, 146, 151, 152, 154, 155, 160, 163, 165, 166, 169, 171, 173, 174, 176, 177, 186, 187, 188, 189, 191, 207, 211, 227, 234, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 270, 271, 273, 274, 275, 276, 279, 280, 283, 296, 298, 302, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 344, 391, 399, 405, 406, 407, 408, 431, 439, 440], "usag": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 133, 142, 146, 151, 154, 155, 169, 170, 173, 176, 177, 178, 227, 234, 239, 402, 427, 440], "125": [2, 7, 33, 40, 41, 72, 100, 115, 439], "mb": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 439], "jupyt": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 140, 142, 154, 161, 176, 181, 283, 296, 400, 401, 402, 403, 404, 416, 418, 437], "notebook": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 127, 139, 142, 154, 161, 176, 181, 283, 296, 325, 400, 401, 402, 403, 404, 416, 418, 437], "plot_3d_and_4d_niimg": [2, 7, 439], "ipynb": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111], "sourc": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 155, 156, 160, 168, 169, 177, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 438], "py": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 125, 126, 142, 147, 148, 149, 151, 154, 169, 177, 181, 439], "galleri": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 126, 127, 129, 133, 134, 136, 154, 169, 437, 439], "sphinx": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 127, 129, 133, 134, 136, 154, 169], "simpl": [3, 5, 25, 29, 31, 35, 37, 40, 47, 56, 60, 65, 67, 71, 73, 75, 76, 77, 79, 80, 83, 84, 87, 89, 91, 94, 96, 98, 100, 101, 113, 115, 117, 118, 132, 134, 139, 149, 154, 155, 156, 162, 164, 165, 168, 169, 170, 173, 174, 176, 180, 181, 187, 188, 189, 216, 218, 225, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 271, 274, 283, 296, 308, 313, 325, 327, 328, 329, 330, 331, 332, 333, 334, 380, 393, 394, 399, 405, 406, 407, 408, 416, 418, 439, 440], "reproduc": [3, 32, 40, 41, 48, 51, 72, 98, 100, 115, 175, 225, 253, 254], "2001": [3, 31, 38, 98, 102, 115, 117, 165, 175, 179, 197, 219, 344, 440], "v": [3, 6, 24, 28, 33, 35, 45, 51, 65, 66, 76, 79, 80, 89, 97, 98, 109, 113, 115, 125, 152, 154, 161, 162, 166, 168, 169, 175, 177, 210, 215, 219, 220, 223, 225, 230, 232, 233, 245, 251, 253, 255, 257, 306, 308, 311, 313, 314, 324, 327, 333, 344, 372, 387, 391, 394, 399, 401, 421, 439], "discrimin": [3, 29, 31, 51, 94, 99, 117, 161, 175, 176], "mask": [3, 8, 15, 23, 27, 29, 30, 31, 33, 34, 35, 39, 40, 42, 43, 44, 47, 48, 49, 54, 55, 56, 58, 64, 67, 70, 75, 77, 79, 83, 91, 92, 96, 102, 104, 105, 106, 111, 113, 116, 118, 124, 125, 132, 133, 134, 136, 139, 142, 145, 147, 148, 149, 152, 154, 158, 162, 165, 167, 175, 176, 178, 179, 188, 216, 219, 220, 221, 225, 229, 230, 242, 243, 246, 251, 252, 253, 254, 256, 257, 258, 259, 278, 280, 283, 296, 298, 299, 300, 301, 306, 307, 308, 311, 313, 314, 318, 320, 324, 327, 328, 329, 330, 331, 332, 333, 334, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 378, 379, 380, 384, 386, 388, 389, 393, 394, 399, 406, 407, 408, 410, 411, 412, 413, 416, 418, 420, 424, 429, 437, 439, 440], "ventral": [3, 16, 22, 32, 33, 38, 94, 98, 115, 117, 161, 175, 181, 219, 395, 397, 398], "stream": [3, 32, 117, 175, 181], "j": [3, 22, 23, 37, 41, 47, 49, 56, 68, 71, 76, 84, 98, 100, 102, 115, 118, 136, 139, 148, 154, 162, 163, 166, 167, 199, 201, 202, 205, 206, 207, 209, 210, 214, 215, 217, 220, 225, 227, 228, 229, 230, 232, 235, 245, 253, 254, 258, 278, 298, 301, 324, 325, 344, 380, 420, 421, 437], "et": [3, 22, 23, 28, 44, 45, 48, 51, 58, 66, 72, 98, 99, 100, 102, 113, 134, 139, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 167, 181, 197, 206, 209, 213, 214, 215, 219, 228, 229, 251, 254, 257, 301, 303, 308, 320, 327, 330, 333, 344, 372, 394, 399, 439], "al": [3, 22, 23, 28, 44, 45, 48, 51, 58, 66, 72, 98, 99, 100, 102, 113, 134, 139, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 167, 181, 197, 206, 209, 213, 214, 215, 219, 228, 229, 251, 254, 257, 301, 303, 308, 320, 327, 330, 333, 344, 372, 394, 399, 439], "distribut": [3, 6, 14, 15, 22, 23, 32, 38, 48, 49, 55, 79, 94, 98, 115, 146, 150, 154, 161, 166, 168, 171, 174, 209, 219, 271, 298, 344, 388], "overlap": [3, 32, 38, 54, 58, 89, 91, 92, 98, 115, 124, 126, 154, 169, 174, 181, 219, 227, 328, 329, 331, 332, 334, 392], "represent": [3, 16, 32, 33, 36, 38, 52, 53, 56, 58, 62, 75, 77, 84, 94, 98, 100, 104, 115, 117, 157, 160, 166, 174, 178, 180, 215, 219, 251, 252, 253, 254, 255, 256, 257, 258, 259, 283, 296, 301, 302, 305, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 319, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 379, 380, 386, 387, 389, 392, 393, 394, 401, 402, 406, 408, 411, 412, 414, 415, 418, 424, 440], "tempor": [3, 6, 16, 32, 33, 38, 51, 55, 66, 68, 91, 94, 98, 101, 103, 115, 117, 139, 147, 154, 160, 161, 174, 178, 200, 219, 259, 283, 287, 288, 289, 290, 292, 293, 294, 295, 301, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 408, 420, 440], "cortex": [3, 23, 32, 33, 38, 55, 58, 61, 69, 71, 75, 79, 80, 91, 98, 115, 159, 161, 166, 170, 171, 201, 207, 211, 213, 219, 227, 229], "vol": [3, 48, 49, 98, 160, 255], "293": [3, 33, 41, 66, 72, 98, 115, 219], "p": [3, 6, 37, 42, 48, 62, 64, 67, 72, 75, 76, 77, 79, 80, 81, 94, 98, 101, 102, 105, 106, 108, 115, 146, 154, 160, 166, 168, 171, 187, 188, 191, 195, 200, 208, 210, 220, 227, 270, 271, 279, 283, 296, 298, 299, 301, 323, 344, 417, 418, 420], "2425": [3, 98, 115, 219], "2430": [3, 98, 115, 219], "meant": [3, 6, 104, 111, 194, 271, 416], "variou": [3, 20, 30, 31, 39, 48, 105, 106, 142, 145, 149, 154, 161, 163, 164, 169, 171, 174, 180, 199, 253, 254, 325, 406, 424], "step": [3, 11, 20, 33, 35, 37, 42, 44, 47, 49, 50, 55, 58, 61, 62, 64, 65, 66, 69, 79, 80, 89, 94, 98, 101, 108, 117, 124, 137, 145, 151, 154, 155, 158, 159, 160, 161, 163, 164, 166, 168, 169, 174, 177, 178, 179, 180, 189, 196, 221, 234, 243, 246, 253, 254, 258, 259, 283, 286, 298, 325, 327, 330, 333, 336, 337, 338, 340, 341, 406, 420, 440], "minimalist": 3, "strive": 3, "didact": [3, 132, 154, 162, 164, 169], "copi": [3, 33, 36, 40, 53, 88, 100, 111, 113, 117, 142, 154, 168, 169, 179, 234, 235, 258, 259, 304, 305, 306, 316, 317, 320, 327, 330, 333, 419], "analyz": [3, 33, 49, 60, 74, 94, 113, 160, 169, 171, 174, 176, 178, 344, 440], "mani": [3, 10, 11, 15, 23, 36, 38, 39, 41, 42, 43, 48, 49, 51, 56, 71, 79, 86, 94, 98, 99, 100, 106, 118, 147, 154, 157, 158, 159, 161, 162, 163, 164, 167, 168, 169, 171, 174, 177, 180, 181, 189, 230, 232, 251, 252, 253, 254, 255, 298, 305, 334, 344, 389, 414, 415, 424, 437], "unnecessari": [3, 276], "fetch_haxbi": [3, 15, 16, 18, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 94, 98, 102, 117, 133, 154, 161, 169, 179], "directori": [3, 6, 62, 64, 94, 101, 108, 113, 158, 169, 179, 188, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 252, 253, 254, 256, 257, 258, 259, 283, 286, 296, 302, 321, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 388, 406, 407, 408], "while": [3, 4, 6, 48, 55, 56, 66, 84, 94, 98, 100, 101, 103, 108, 117, 124, 126, 127, 137, 139, 154, 160, 161, 166, 168, 169, 170, 176, 180, 181, 199, 251, 252, 253, 254, 290, 344], "310": [3, 9, 33, 41], "mo": 3, "internet": [3, 49, 160, 178, 183, 440], "By": [3, 14, 15, 25, 29, 33, 35, 58, 66, 70, 71, 146, 154, 162, 169, 177, 181, 188, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 240, 241, 251, 252, 253, 254, 256, 257, 258, 259, 283, 296, 302, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 379, 384, 387, 388, 390, 392, 393, 394, 401, 406, 407, 408, 411, 437], "default": [3, 8, 9, 14, 15, 23, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 42, 55, 56, 60, 62, 66, 73, 79, 83, 89, 94, 96, 102, 103, 111, 113, 118, 124, 125, 126, 127, 129, 132, 133, 138, 139, 140, 142, 145, 146, 147, 148, 149, 151, 154, 161, 162, 166, 168, 169, 170, 177, 179, 180, 181, 187, 188, 189, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 265, 266, 270, 271, 273, 274, 275, 276, 278, 279, 280, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 305, 307, 308, 311, 313, 314, 315, 316, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 424, 437, 439], "2nd": [3, 25, 29, 30, 32, 33, 34, 35, 36, 37, 219], "fetch": [3, 9, 14, 19, 24, 29, 30, 32, 34, 35, 36, 37, 41, 58, 71, 85, 86, 87, 88, 91, 94, 103, 118, 125, 133, 134, 136, 138, 142, 152, 154, 157, 160, 169, 178, 195, 202, 208, 216, 217, 220, 223, 224, 225, 228, 230, 231, 232, 233, 234, 237, 239, 440], "haxby_dataset": [3, 15, 16, 18, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 94, 98, 102, 117, 161, 179, 181], "func": [3, 6, 11, 15, 16, 18, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 64, 65, 66, 67, 70, 85, 89, 91, 92, 94, 95, 98, 99, 100, 101, 102, 104, 108, 117, 147, 154, 159, 169, 170, 179, 181, 196, 216, 219, 229, 237, 321, 324, 325], "one": [3, 4, 6, 9, 14, 15, 16, 20, 24, 29, 30, 31, 33, 35, 36, 40, 44, 47, 48, 49, 55, 56, 57, 58, 64, 66, 69, 70, 71, 72, 74, 77, 78, 80, 81, 82, 86, 91, 92, 94, 100, 101, 103, 105, 108, 113, 117, 118, 124, 125, 131, 133, 136, 145, 147, 148, 149, 152, 154, 155, 156, 159, 160, 161, 162, 166, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 181, 187, 189, 195, 199, 200, 206, 207, 208, 215, 221, 225, 228, 239, 251, 252, 253, 254, 256, 258, 259, 265, 271, 283, 285, 286, 290, 292, 296, 297, 298, 301, 302, 303, 305, 306, 308, 312, 316, 321, 323, 328, 331, 333, 343, 344, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 381, 382, 386, 389, 390, 391, 392, 396, 397, 399, 401, 402, 406, 410, 411, 417, 420, 424, 438, 439, 440], "each": [3, 6, 14, 15, 20, 21, 22, 24, 29, 34, 36, 37, 39, 40, 47, 48, 49, 50, 51, 55, 56, 58, 61, 62, 64, 70, 71, 78, 80, 86, 88, 94, 98, 99, 100, 101, 102, 105, 108, 118, 134, 139, 140, 142, 145, 147, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 174, 176, 177, 179, 180, 181, 187, 188, 189, 191, 198, 209, 215, 216, 227, 230, 232, 240, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 265, 266, 273, 275, 276, 283, 285, 286, 290, 296, 298, 301, 307, 313, 318, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 339, 341, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 379, 381, 384, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 405, 406, 407, 408, 409, 410, 411, 412, 414, 418, 420, 421, 423, 424, 437], "fmri_filenam": [3, 36, 37, 56, 94, 98, 117], "basic": [3, 7, 8, 11, 15, 16, 18, 25, 27, 29, 30, 32, 34, 35, 36, 41, 42, 48, 49, 52, 53, 56, 58, 69, 71, 75, 77, 85, 89, 91, 92, 94, 95, 98, 100, 102, 104, 105, 106, 168, 170, 171, 174, 176, 177, 181, 203, 204, 296, 298, 318, 324, 325, 382, 387, 393, 399, 439], "inform": [3, 6, 9, 11, 16, 18, 21, 23, 25, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 48, 49, 51, 52, 53, 58, 61, 62, 66, 68, 72, 75, 77, 78, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108, 115, 117, 118, 122, 125, 136, 140, 150, 154, 155, 156, 159, 160, 161, 163, 165, 168, 169, 170, 173, 174, 176, 177, 179, 181, 187, 188, 189, 197, 198, 199, 200, 205, 207, 208, 210, 211, 219, 220, 227, 228, 229, 230, 232, 234, 242, 243, 245, 246, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 276, 283, 296, 298, 310, 316, 322, 323, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408, 418, 419, 420, 427, 438, 440], "haxby2001": [3, 16, 18, 25, 29, 30, 32, 34, 35, 36, 94, 102, 117, 179, 219], "subj2": [3, 16, 18, 25, 29, 30, 32, 34, 35, 36, 94, 102, 117], "bold": [3, 6, 16, 18, 25, 29, 30, 32, 34, 35, 36, 48, 65, 66, 76, 79, 94, 100, 101, 102, 108, 115, 117, 118, 126, 142, 146, 152, 154, 160, 161, 170, 172, 174, 179, 202, 219, 229, 286, 321, 324, 325, 421, 440], "One": [3, 6, 14, 34, 35, 48, 49, 56, 64, 71, 79, 147, 154, 155, 156, 161, 162, 166, 168, 170, 171, 173, 177, 179, 181, 283, 316, 325, 329, 330, 332, 411], "wai": [3, 6, 33, 61, 62, 64, 66, 75, 76, 84, 98, 108, 115, 117, 118, 146, 147, 149, 154, 155, 157, 160, 161, 162, 164, 167, 168, 169, 170, 171, 174, 179, 181, 232, 253, 254, 273, 275, 276, 321, 380, 405, 437, 438], "plot_epi": [3, 25, 49, 89, 94, 95, 146, 149, 154, 387, 394, 437], "becaus": [3, 6, 11, 15, 18, 30, 31, 32, 36, 39, 42, 43, 44, 54, 66, 70, 71, 79, 84, 101, 102, 124, 142, 154, 156, 161, 166, 168, 169, 171, 177, 230, 256, 257, 389, 395, 397, 398, 402, 404, 424], "thei": [3, 6, 24, 39, 42, 44, 49, 58, 65, 66, 69, 71, 94, 98, 108, 117, 118, 125, 149, 151, 154, 160, 163, 164, 166, 168, 169, 171, 174, 176, 177, 179, 181, 211, 219, 230, 235, 283, 286, 296, 298, 302, 316, 334, 382, 409, 420, 437], "consist": [3, 6, 34, 40, 44, 66, 69, 108, 117, 125, 126, 132, 138, 139, 140, 149, 154, 161, 162, 165, 166, 168, 169, 171, 174, 189, 199, 227, 257, 286, 328, 331, 405, 407, 410], "epi": [3, 6, 11, 15, 25, 30, 31, 92, 94, 95, 104, 174, 176, 180, 181, 251, 252, 253, 254, 258, 259, 330, 333, 338, 384, 387, 394, 406, 437], "cannot": [3, 9, 10, 11, 36, 48, 49, 51, 56, 79, 86, 92, 94, 102, 118, 139, 151, 154, 155, 161, 164, 169, 181, 189, 401, 402, 404], "directli": [3, 6, 32, 33, 47, 48, 51, 64, 86, 89, 108, 131, 135, 137, 139, 154, 158, 161, 164, 169, 171, 179, 181, 230, 286, 344, 392], "just": [3, 4, 6, 14, 16, 21, 40, 42, 44, 49, 50, 51, 56, 58, 65, 66, 71, 75, 76, 77, 79, 81, 87, 91, 98, 100, 101, 111, 117, 131, 154, 159, 161, 168, 171, 176, 177, 181, 283, 296, 301, 318, 321, 324, 392, 393, 394, 401, 418, 420, 424, 437], "mean_img": [3, 6, 15, 16, 18, 25, 30, 31, 33, 36, 49, 64, 67, 70, 71, 85, 89, 92, 94, 95, 102, 104, 111, 180, 312], "view_img": [3, 29, 139, 140, 148, 151, 154, 161, 437], "none": [3, 14, 15, 32, 33, 36, 40, 44, 49, 52, 53, 54, 56, 58, 62, 66, 68, 77, 79, 89, 91, 92, 94, 95, 100, 103, 107, 111, 118, 125, 129, 139, 142, 146, 151, 154, 169, 181, 187, 188, 189, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 285, 286, 290, 292, 296, 297, 298, 299, 300, 301, 302, 307, 311, 313, 314, 315, 316, 318, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 424, 437], "opt": [3, 4, 9, 10, 11, 14, 16, 18, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 66, 71, 72, 77, 78, 79, 84, 86, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111], "hostedtoolcach": [3, 4, 9, 10, 11, 14, 16, 18, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 66, 71, 72, 77, 78, 79, 84, 86, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111], "12": [3, 4, 6, 9, 10, 11, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 44, 47, 48, 49, 50, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 84, 86, 91, 92, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 115, 119, 122, 124, 125, 127, 129, 145, 150, 151, 154, 167, 168, 180, 181, 197, 199, 206, 208, 216, 286, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 408, 439], "x64": [3, 4, 9, 10, 11, 14, 16, 18, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 66, 71, 72, 77, 78, 79, 84, 86, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111], "lib": [3, 4, 9, 10, 11, 14, 16, 18, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 66, 71, 72, 77, 78, 79, 84, 86, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111], "python3": [3, 4, 9, 10, 11, 14, 16, 18, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 66, 71, 72, 77, 78, 79, 84, 86, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111, 140, 142, 154, 169, 438], "site": [3, 4, 9, 10, 11, 14, 16, 18, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 66, 71, 72, 77, 78, 79, 84, 86, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111, 195, 196], "numpi": [3, 5, 6, 9, 10, 11, 12, 14, 16, 22, 23, 24, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 77, 79, 80, 84, 86, 87, 89, 94, 98, 100, 102, 103, 104, 105, 106, 108, 111, 122, 124, 126, 130, 134, 136, 139, 142, 145, 147, 149, 154, 158, 159, 161, 168, 169, 177, 179, 180, 187, 188, 189, 190, 191, 192, 193, 194, 201, 202, 207, 209, 213, 214, 215, 216, 251, 252, 253, 254, 256, 257, 258, 259, 261, 265, 266, 273, 275, 276, 279, 283, 285, 290, 292, 296, 298, 301, 302, 303, 306, 307, 308, 312, 313, 314, 316, 318, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 341, 343, 344, 348, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 376, 377, 379, 381, 382, 384, 386, 388, 390, 391, 394, 395, 396, 397, 398, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424], "core": [3, 16, 29, 42, 43, 58, 168, 169, 177, 189, 438], "fromnumer": [3, 16, 29], "771": [3, 16, 29], "userwarn": [3, 9, 10, 11, 16, 18, 21, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 61, 62, 64, 71, 72, 77, 78, 79, 84, 86, 91, 92, 94, 95, 98, 100, 101, 103, 108, 111], "warn": [3, 9, 11, 16, 29, 71, 103, 124, 125, 126, 139, 140, 142, 147, 149, 151, 152, 154, 161, 169, 199, 200, 208, 280, 286, 290, 303, 327, 328, 329, 330, 331, 332, 333, 334, 399, 408], "partit": [3, 16, 29, 40], "ignor": [3, 16, 21, 29, 48, 50, 71, 103, 140, 145, 154, 187, 188, 189, 230, 232, 236, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 290, 296, 298, 321, 324, 327, 328, 329, 330, 331, 332, 333, 334, 389, 405, 406, 407, 408, 424], "maskedarrai": [3, 16, 29], "kth": [3, 16], "axi": [3, 11, 12, 16, 22, 23, 25, 30, 31, 34, 38, 40, 41, 44, 47, 50, 58, 84, 85, 94, 103, 104, 107, 111, 126, 149, 151, 154, 159, 180, 199, 251, 252, 253, 254, 256, 257, 283, 291, 316, 318, 345, 347, 348, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 375, 379, 381, 382, 384, 386, 387, 390, 392, 393, 394], "kind": [3, 16, 47, 50, 54, 56, 58, 79, 111, 117, 135, 154, 155, 159, 162, 168, 174, 187, 424, 437], "These": [3, 4, 6, 15, 55, 58, 60, 72, 74, 77, 79, 81, 89, 94, 107, 110, 113, 117, 142, 145, 146, 149, 154, 161, 164, 165, 167, 168, 169, 173, 174, 181, 202, 213, 215, 249, 432, 437, 438], "realli": [3, 70, 140, 154, 161, 325], "love": 3, "learn": [3, 21, 34, 36, 44, 46, 52, 53, 56, 57, 58, 59, 94, 97, 102, 104, 109, 113, 115, 116, 118, 122, 124, 127, 132, 134, 135, 136, 137, 139, 142, 147, 149, 154, 155, 156, 157, 158, 161, 162, 163, 165, 166, 168, 169, 174, 175, 177, 182, 187, 188, 191, 205, 216, 219, 228, 251, 252, 253, 254, 255, 258, 259, 265, 266, 306, 308, 309, 313, 327, 328, 329, 330, 331, 332, 333, 334, 357, 364, 377, 378, 379, 381, 384, 391, 392, 393, 394, 399, 406, 408, 438, 439, 440], "matric": [3, 8, 27, 41, 47, 50, 51, 56, 60, 64, 67, 71, 73, 80, 99, 113, 127, 132, 135, 136, 146, 147, 149, 154, 155, 156, 157, 168, 170, 178, 179, 180, 182, 187, 188, 189, 191, 194, 227, 273, 275, 276, 283, 290, 316, 383, 391, 395, 397, 399, 435, 439, 440], "actual": [3, 6, 42, 66, 68, 71, 77, 86, 105, 126, 154, 168, 169, 171, 174, 179, 189, 234, 283, 296, 299, 418], "fortun": [3, 68], "later": [3, 6, 9, 22, 23, 40, 62, 69, 71, 91, 100, 101, 103, 171, 179, 201, 203, 204, 305, 376, 379, 384, 386, 387, 389, 393, 394, 395, 397, 398, 416, 437], "automat": [3, 15, 16, 19, 22, 23, 33, 34, 40, 54, 89, 92, 94, 115, 116, 122, 125, 132, 134, 146, 147, 148, 154, 159, 166, 169, 179, 180, 181, 201, 209, 251, 252, 253, 254, 256, 257, 258, 259, 283, 296, 298, 316, 323, 329, 332, 344, 355, 375, 379, 384, 387, 392, 393, 394, 401, 406, 408, 410, 418, 437, 440], "transform": [3, 23, 24, 40, 41, 48, 49, 50, 51, 53, 54, 66, 69, 71, 84, 91, 92, 94, 98, 99, 100, 103, 108, 111, 115, 117, 135, 136, 140, 142, 144, 145, 146, 147, 149, 151, 154, 158, 159, 164, 171, 174, 178, 179, 187, 210, 228, 251, 252, 253, 254, 258, 259, 265, 266, 280, 283, 296, 299, 303, 314, 316, 324, 327, 328, 329, 330, 331, 332, 333, 334, 345, 405, 406, 407, 408, 420, 424, 440], "all": [3, 4, 6, 8, 15, 19, 23, 27, 30, 32, 33, 35, 36, 39, 40, 41, 42, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 66, 67, 69, 70, 71, 72, 76, 77, 79, 80, 87, 89, 91, 92, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 115, 117, 118, 124, 125, 126, 127, 132, 139, 142, 145, 147, 149, 150, 152, 154, 155, 156, 158, 159, 160, 162, 164, 166, 168, 169, 171, 173, 176, 177, 179, 180, 181, 188, 189, 191, 195, 196, 198, 199, 200, 216, 224, 225, 228, 230, 233, 234, 235, 240, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 278, 283, 286, 292, 296, 297, 298, 301, 302, 307, 312, 313, 316, 317, 318, 321, 322, 323, 324, 325, 328, 329, 330, 332, 333, 334, 339, 340, 341, 342, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 379, 381, 382, 384, 386, 387, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 404, 406, 408, 411, 418, 420, 424, 435, 437, 438, 439], "defin": [3, 6, 9, 21, 23, 29, 30, 32, 33, 36, 37, 42, 47, 49, 54, 58, 61, 64, 66, 67, 69, 71, 72, 76, 77, 80, 81, 91, 98, 101, 115, 124, 125, 146, 147, 148, 149, 154, 156, 158, 159, 160, 161, 166, 169, 170, 171, 173, 174, 177, 180, 181, 197, 201, 215, 227, 229, 251, 252, 253, 254, 256, 257, 270, 274, 278, 283, 285, 290, 316, 324, 379, 380, 381, 384, 386, 387, 389, 390, 392, 393, 394, 408, 409, 410, 411, 412, 414, 415, 431], "vt": [3, 18, 94], "mask_filenam": [3, 30, 32, 35, 39, 98, 102, 117, 161], "mask_vt": [3, 15, 16, 18, 30, 32, 94, 98, 117, 161, 179, 219], "anatom": [3, 6, 9, 11, 15, 17, 18, 22, 23, 25, 30, 32, 36, 94, 102, 115, 118, 135, 154, 159, 166, 174, 181, 197, 199, 201, 209, 216, 219, 220, 223, 225, 230, 324, 379, 387, 392, 394, 401, 437], "background": [3, 6, 8, 14, 15, 16, 22, 23, 27, 30, 31, 40, 44, 49, 56, 69, 91, 92, 94, 104, 113, 117, 125, 130, 132, 134, 135, 136, 137, 139, 142, 145, 151, 154, 169, 174, 180, 181, 197, 203, 204, 206, 207, 210, 211, 223, 229, 251, 252, 253, 254, 258, 259, 283, 296, 328, 330, 331, 333, 336, 339, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 379, 381, 384, 386, 387, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 404, 406, 409, 411, 412, 418, 437, 439, 440], "plot_roi": [3, 10, 17, 19, 25, 49, 66, 86, 89, 92, 94, 138, 145, 146, 151, 154, 156, 180, 181, 387, 392, 437], "bg_img": [3, 6, 16, 17, 29, 30, 33, 36, 40, 42, 64, 67, 70, 71, 75, 88, 93, 117, 136, 142, 148, 154, 161, 181, 283, 296, 387, 392, 393, 394, 401, 418], "anat": [3, 6, 15, 16, 17, 18, 25, 29, 30, 32, 42, 43, 94, 117, 161, 179, 181, 211, 219, 223, 225, 237, 238, 321], "cmap": [3, 9, 11, 12, 14, 19, 20, 22, 23, 31, 35, 36, 38, 40, 41, 42, 44, 50, 53, 76, 77, 79, 80, 81, 86, 102, 105, 106, 111, 126, 140, 142, 151, 154, 159, 223, 224, 225, 379, 380, 384, 385, 386, 389, 391, 392, 393, 394, 395, 396, 397, 398, 401, 402, 404, 437], "pair": [3, 74, 82, 86, 98, 113, 118, 161, 162, 173, 225, 228, 230, 251, 252, 253, 254, 256, 257, 296, 322, 323, 324, 325, 356, 383, 386, 391, 395, 397, 398, 399, 407, 424, 439], "0x7f0a3a52b3b0": 3, "convert": [3, 6, 10, 11, 36, 42, 49, 66, 79, 86, 94, 98, 107, 108, 117, 142, 147, 149, 151, 154, 159, 161, 166, 174, 180, 281, 302, 303, 311, 328, 329, 330, 331, 332, 333, 334], "appli": [3, 29, 31, 32, 42, 44, 50, 56, 61, 64, 66, 69, 79, 80, 89, 92, 94, 98, 100, 101, 103, 104, 116, 118, 124, 126, 130, 132, 136, 139, 142, 147, 148, 149, 154, 155, 156, 157, 160, 162, 163, 164, 166, 170, 173, 174, 178, 187, 195, 230, 250, 251, 252, 253, 254, 258, 259, 274, 283, 296, 298, 299, 300, 301, 312, 318, 320, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 379, 389, 392, 393, 394, 395, 397, 398, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 417, 419, 420, 424, 429, 440], "instanc": [3, 4, 6, 15, 31, 49, 51, 66, 68, 86, 136, 142, 149, 154, 155, 156, 158, 160, 161, 169, 170, 171, 173, 174, 176, 179, 180, 187, 188, 189, 194, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 270, 271, 273, 274, 275, 276, 279, 280, 283, 290, 292, 296, 298, 302, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 379, 381, 384, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 405, 406, 407, 408, 438], "csv": [3, 6, 29, 40, 47, 55, 117, 129, 154, 156, 161, 195, 196, 226, 234, 258, 259, 283, 301, 327, 328, 329, 330, 331, 332, 333, 334, 406, 408, 420], "file": [3, 6, 7, 9, 14, 22, 23, 27, 30, 32, 33, 34, 35, 36, 40, 45, 47, 48, 49, 51, 53, 55, 59, 60, 62, 64, 66, 73, 82, 86, 91, 92, 94, 96, 98, 100, 101, 108, 109, 112, 113, 114, 115, 117, 118, 126, 127, 129, 134, 138, 139, 140, 141, 142, 145, 149, 150, 151, 154, 155, 156, 158, 159, 161, 169, 170, 177, 178, 181, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 249, 251, 252, 258, 259, 260, 261, 262, 283, 286, 296, 301, 311, 312, 314, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 392, 393, 394, 395, 396, 397, 398, 400, 402, 403, 404, 406, 408, 416, 418, 420, 422, 423, 424, 438, 439, 440], "separ": [3, 34, 48, 50, 64, 66, 67, 83, 88, 94, 96, 100, 113, 132, 149, 151, 154, 159, 160, 162, 166, 169, 171, 174, 177, 179, 180, 194, 211, 313, 324, 345, 347, 348, 375, 391, 393, 399, 408, 409, 410, 439], "space": [3, 6, 15, 22, 23, 28, 40, 45, 48, 51, 55, 60, 62, 66, 69, 73, 84, 99, 101, 108, 113, 117, 118, 125, 132, 134, 136, 139, 142, 147, 154, 156, 169, 170, 171, 173, 174, 181, 198, 200, 205, 207, 209, 211, 213, 214, 215, 230, 232, 234, 238, 240, 257, 258, 259, 283, 286, 290, 301, 302, 303, 313, 316, 327, 330, 333, 334, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 379, 380, 381, 384, 386, 387, 390, 392, 393, 394, 399, 400, 401, 403, 405, 407, 420, 424, 439], "panda": [3, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 94, 98, 100, 102, 117, 118, 124, 136, 139, 145, 147, 149, 150, 152, 154, 161, 187, 195, 201, 202, 213, 214, 215, 223, 224, 225, 234, 258, 259, 266, 283, 284, 286, 290, 296, 297, 298, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 382, 383, 385, 405, 406, 407, 408, 417, 420], "arrai": [3, 5, 9, 10, 11, 22, 23, 26, 33, 34, 36, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 55, 56, 58, 61, 68, 70, 79, 84, 86, 87, 89, 94, 98, 102, 105, 106, 108, 116, 134, 136, 142, 145, 148, 149, 151, 154, 155, 158, 159, 161, 164, 168, 178, 179, 181, 187, 188, 189, 191, 193, 194, 201, 202, 207, 213, 214, 215, 227, 228, 240, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 270, 271, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 301, 306, 308, 316, 317, 320, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 341, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 379, 381, 382, 384, 386, 390, 394, 395, 396, 397, 398, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 418, 420, 421, 422, 423, 424, 430, 440], "pd": [3, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 63, 64, 65, 66, 67, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 94, 98, 102, 117, 179, 220], "read_csv": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 94, 98, 102, 117, 179], "session_target": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 94, 98, 102, 117, 179, 219], "delimit": [3, 40, 41, 98, 100, 117, 179], "chunk": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 98, 102], "2": [3, 6, 7, 9, 11, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 105, 107, 108, 113, 115, 118, 120, 122, 123, 124, 134, 136, 137, 139, 140, 147, 148, 149, 159, 162, 166, 167, 168, 169, 171, 176, 177, 180, 181, 187, 188, 189, 193, 194, 195, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 210, 211, 216, 217, 218, 219, 220, 221, 225, 227, 230, 232, 234, 236, 238, 239, 240, 242, 243, 245, 246, 251, 252, 253, 254, 255, 256, 257, 258, 259, 270, 273, 274, 275, 276, 283, 285, 290, 292, 296, 298, 299, 301, 307, 308, 311, 312, 313, 314, 317, 318, 320, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 381, 388, 390, 391, 392, 393, 394, 395, 397, 399, 401, 407, 408, 410, 411, 412, 414, 417, 420, 421, 424, 437, 438, 439], "1447": [3, 98], "11": [3, 6, 7, 16, 27, 33, 38, 44, 45, 49, 53, 55, 59, 62, 65, 66, 72, 73, 81, 82, 91, 92, 96, 98, 103, 109, 115, 119, 127, 136, 139, 140, 141, 149, 188, 200, 201, 227, 228, 229, 236, 331, 439], "1448": [3, 98], "1449": [3, 98], "1450": [3, 98], "1451": [3, 98], "1452": [3, 94, 98], "row": [3, 6, 40, 56, 66, 72, 98, 100, 118, 146, 154, 174, 230, 232, 273, 274, 275, 276, 283, 296, 297, 298, 355, 357, 360, 374, 379, 384, 387, 389, 391, 392, 393, 394, 405, 417, 424], "x": [3, 6, 9, 13, 14, 15, 24, 31, 33, 35, 37, 40, 41, 44, 52, 54, 56, 58, 62, 64, 66, 67, 70, 84, 91, 92, 94, 101, 103, 115, 126, 129, 134, 136, 142, 147, 149, 151, 152, 154, 161, 166, 169, 174, 177, 180, 181, 187, 199, 205, 227, 228, 251, 252, 253, 254, 256, 257, 258, 259, 260, 270, 273, 274, 275, 276, 283, 292, 296, 303, 324, 327, 328, 330, 331, 333, 334, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 381, 384, 386, 387, 390, 392, 393, 394, 395, 396, 397, 398, 401, 404, 405, 407, 408, 409, 413, 417, 418, 419, 435, 437], "column": [3, 6, 56, 62, 65, 66, 69, 70, 71, 72, 75, 76, 77, 79, 80, 81, 98, 100, 101, 102, 105, 106, 108, 118, 126, 146, 152, 154, 171, 188, 189, 191, 251, 252, 253, 254, 270, 273, 274, 275, 276, 281, 283, 290, 296, 297, 298, 301, 316, 324, 325, 326, 331, 344, 355, 357, 360, 374, 379, 382, 383, 384, 385, 387, 391, 392, 393, 394, 415, 417, 419, 420, 421], "denot": [3, 6, 15, 139, 154, 171, 179, 180, 181, 324, 325, 355, 377, 393, 408, 409, 410, 411], "experiment": [3, 63, 64, 65, 66, 69, 71, 80, 94, 111, 124, 126, 145, 146, 149, 154, 161, 168, 171, 180, 202, 283, 286, 290, 395, 397, 398], "condit": [3, 6, 29, 30, 31, 33, 35, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 80, 94, 98, 101, 102, 108, 117, 146, 149, 151, 154, 155, 161, 168, 174, 177, 180, 202, 227, 283, 285, 290, 296, 298, 382], "type": [3, 6, 15, 18, 21, 29, 34, 42, 49, 63, 65, 66, 69, 72, 88, 94, 100, 102, 111, 118, 124, 126, 128, 131, 133, 136, 139, 142, 148, 149, 150, 151, 152, 154, 163, 166, 169, 170, 171, 174, 179, 195, 199, 203, 204, 210, 227, 255, 269, 271, 279, 283, 296, 301, 305, 306, 308, 310, 311, 313, 314, 318, 319, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 340, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 392, 393, 406, 408, 409, 410, 417, 418, 419, 420], "try": [3, 4, 9, 21, 36, 39, 40, 49, 52, 53, 56, 57, 58, 62, 63, 65, 66, 75, 77, 78, 89, 98, 103, 118, 151, 154, 155, 156, 161, 162, 167, 168, 169, 177, 181, 438], "length": [3, 15, 55, 68, 77, 159, 169, 202, 205, 251, 252, 253, 254, 256, 257, 270, 274, 275, 276, 287, 288, 289, 293, 294, 295, 302, 327, 330, 333, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 379, 384, 387, 390, 391, 392, 393, 394, 406, 418, 424], "dtype": [3, 10, 11, 23, 33, 36, 40, 41, 44, 49, 52, 53, 54, 56, 58, 68, 77, 79, 86, 89, 91, 92, 94, 101, 103, 133, 134, 135, 139, 140, 154, 179, 284, 287, 288, 289, 293, 294, 295, 300, 302, 310, 311, 314, 316, 328, 329, 330, 331, 332, 333, 334, 335, 405, 407, 414], "As": [3, 15, 34, 36, 44, 49, 52, 54, 66, 79, 81, 92, 94, 95, 98, 101, 103, 117, 124, 142, 154, 155, 156, 158, 160, 161, 162, 166, 168, 169, 171, 173, 179, 286, 324, 325], "target": [3, 29, 33, 40, 84, 89, 94, 98, 100, 125, 139, 154, 161, 162, 166, 168, 169, 174, 177, 178, 219, 229, 251, 252, 253, 254, 255, 256, 257, 258, 259, 283, 296, 298, 316, 317, 327, 330, 333, 337, 340, 344, 405, 407, 408, 440], "experi": [3, 6, 29, 33, 34, 41, 66, 70, 94, 115, 116, 165, 170, 171, 174, 440], "consequ": [3, 15, 86, 181], "quit": [3, 6, 66, 159, 168, 225], "big": [3, 41, 49, 139, 154, 158, 161, 169, 179, 181, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "Not": [3, 64, 66, 67, 203, 204, 348, 405, 407], "ha": [3, 6, 10, 11, 29, 30, 32, 33, 34, 35, 36, 42, 47, 49, 51, 52, 54, 58, 66, 68, 70, 72, 75, 79, 81, 86, 89, 91, 94, 98, 100, 104, 118, 124, 125, 126, 127, 129, 133, 136, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 160, 162, 163, 166, 168, 169, 171, 173, 177, 181, 187, 188, 189, 197, 198, 199, 201, 206, 210, 230, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 290, 296, 298, 307, 310, 311, 313, 316, 317, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 344, 346, 386, 389, 394, 398, 399, 405, 406, 407, 408, 412, 419, 421, 424, 437], "interest": [3, 6, 14, 15, 16, 23, 35, 42, 49, 51, 55, 68, 70, 71, 83, 96, 98, 99, 100, 101, 104, 107, 113, 118, 127, 145, 154, 155, 161, 163, 164, 166, 168, 169, 170, 171, 174, 176, 180, 181, 196, 202, 205, 207, 216, 219, 220, 223, 224, 225, 228, 229, 234, 237, 238, 239, 240, 273, 275, 276, 306, 311, 313, 314, 318, 321, 327, 331, 384, 393, 394, 396, 399, 408, 439, 440], "u": [3, 4, 15, 24, 40, 55, 58, 63, 66, 77, 79, 89, 94, 111, 115, 161, 162, 164, 169, 213, 215, 257, 275, 276, 438], "so": [3, 6, 10, 11, 14, 22, 33, 36, 40, 43, 49, 52, 64, 66, 67, 69, 70, 72, 76, 79, 80, 81, 86, 89, 94, 100, 101, 103, 108, 118, 126, 147, 154, 166, 167, 168, 169, 171, 177, 179, 181, 187, 188, 189, 197, 203, 204, 211, 230, 235, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 286, 296, 298, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 344, 389, 395, 397, 398, 402, 404, 405, 406, 407, 408, 424], "keep": [3, 31, 33, 34, 36, 50, 51, 54, 58, 66, 69, 70, 84, 86, 94, 98, 102, 103, 118, 122, 125, 139, 146, 154, 159, 161, 162, 163, 166, 167, 169, 230, 234, 250, 256, 257, 258, 301, 307, 320, 322, 336, 337, 338, 339, 340, 341, 342, 408, 409, 420, 421], "signal": [3, 6, 28, 43, 44, 45, 46, 48, 49, 50, 52, 55, 57, 59, 61, 64, 66, 67, 68, 70, 71, 78, 83, 86, 94, 96, 100, 107, 113, 115, 123, 124, 125, 126, 138, 140, 142, 146, 147, 151, 152, 154, 155, 157, 158, 159, 160, 161, 163, 166, 168, 171, 174, 178, 180, 187, 188, 189, 191, 195, 202, 203, 205, 213, 214, 216, 219, 227, 251, 252, 253, 254, 255, 256, 257, 258, 259, 265, 266, 283, 296, 298, 301, 307, 308, 313, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 344, 376, 380, 381, 390, 391, 399, 400, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 439, 440], "creat": [3, 6, 10, 11, 20, 23, 33, 36, 40, 41, 42, 47, 48, 49, 55, 62, 64, 66, 67, 69, 71, 72, 75, 79, 84, 86, 94, 98, 100, 107, 108, 116, 117, 124, 131, 139, 151, 154, 155, 156, 160, 161, 162, 164, 169, 170, 171, 174, 175, 177, 178, 179, 181, 230, 232, 250, 258, 259, 283, 286, 296, 297, 308, 314, 323, 346, 355, 356, 357, 360, 379, 380, 381, 382, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 414, 415, 416, 417, 437, 438, 440], "sampl": [3, 8, 23, 27, 31, 34, 36, 40, 49, 58, 63, 66, 69, 71, 74, 75, 77, 78, 81, 82, 84, 94, 101, 105, 108, 113, 115, 117, 145, 147, 148, 154, 156, 161, 166, 168, 170, 171, 173, 181, 187, 188, 189, 191, 216, 225, 240, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 283, 284, 285, 287, 288, 289, 290, 293, 294, 295, 296, 298, 301, 305, 306, 312, 328, 329, 330, 331, 332, 333, 334, 343, 344, 356, 371, 380, 383, 386, 389, 398, 399, 405, 406, 407, 408, 419, 420, 421, 424, 435, 439], "belong": [3, 30, 32, 149, 154, 161, 174, 181], "classif": [3, 30, 31, 32, 33, 35, 43, 46, 49, 59, 98, 100, 113, 115, 117, 145, 152, 154, 155, 160, 161, 165, 166, 167, 174, 175, 176, 187, 195, 205, 216, 251, 252, 253, 254, 256, 325, 327, 332, 381, 391, 399, 438, 439, 440], "becom": [3, 66, 118, 162, 163, 164, 171], "smaller": [3, 6, 32, 81, 129, 139, 147, 151, 154, 158, 166, 167, 168, 171, 174, 179, 203, 204, 257, 299, 312, 320, 405], "e": [3, 6, 15, 22, 24, 29, 39, 40, 44, 47, 48, 56, 66, 76, 86, 88, 94, 100, 103, 105, 115, 117, 118, 125, 127, 145, 147, 148, 151, 154, 156, 159, 161, 164, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 180, 181, 187, 188, 189, 191, 200, 201, 208, 213, 214, 215, 217, 227, 230, 232, 235, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 273, 275, 276, 283, 290, 296, 298, 299, 300, 301, 302, 303, 305, 320, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 381, 389, 392, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 412, 414, 420, 424, 437], "shorter": [3, 66, 168, 324], "condition_mask": [3, 29, 30, 31, 34, 36, 37, 98, 102, 117], "isin": [3, 29, 31, 34, 36, 37, 98, 102, 117, 118, 230], "larg": [3, 30, 31, 36, 39, 41, 48, 49, 54, 56, 65, 70, 71, 72, 92, 115, 118, 140, 154, 158, 161, 162, 163, 164, 166, 168, 169, 171, 174, 175, 176, 179, 181, 225, 230, 232, 283, 285, 290, 329, 332, 336, 337, 338, 340, 341, 375, 406], "split": [3, 30, 31, 32, 34, 36, 39, 40, 41, 42, 43, 44, 49, 51, 86, 94, 99, 100, 145, 154, 159, 161, 163, 168, 169, 174, 180, 203, 204, 251, 252, 253, 254], "fmri_niimg": [3, 30, 34, 98, 161], "valu": [3, 4, 6, 9, 14, 15, 17, 23, 24, 30, 31, 33, 40, 42, 44, 47, 52, 54, 55, 58, 61, 66, 69, 70, 72, 77, 79, 88, 89, 90, 91, 92, 94, 98, 100, 101, 102, 103, 105, 106, 107, 108, 111, 118, 122, 124, 125, 127, 131, 134, 135, 139, 142, 146, 147, 149, 152, 154, 155, 158, 159, 162, 163, 165, 166, 167, 169, 171, 173, 174, 176, 179, 181, 187, 188, 189, 191, 193, 195, 197, 199, 200, 201, 203, 204, 206, 207, 208, 210, 211, 221, 225, 230, 234, 236, 239, 242, 243, 246, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 266, 270, 271, 273, 274, 275, 276, 279, 283, 284, 286, 292, 296, 298, 299, 300, 301, 302, 305, 307, 316, 317, 318, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 378, 379, 380, 381, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 416, 417, 418, 419, 420, 421, 424, 437], "216": [3, 30, 33, 41], "classifi": [3, 28, 32, 33, 36, 41, 45, 51, 98, 99, 113, 142, 145, 146, 154, 161, 162, 163, 164, 165, 174, 175, 176, 219, 251, 253, 254, 255, 256, 306, 308, 313, 394, 399, 439, 440], "linear": [3, 6, 29, 33, 34, 35, 37, 44, 66, 69, 98, 102, 115, 136, 154, 161, 165, 170, 171, 172, 174, 175, 180, 181, 191, 230, 251, 252, 253, 254, 256, 257, 258, 259, 273, 275, 276, 283, 296, 301, 315, 316, 317, 325, 344, 388, 420, 424, 431, 438, 440], "kernel": [3, 29, 33, 34, 35, 44, 55, 94, 98, 161, 252, 254, 257, 287, 288, 289, 293, 294, 295], "svc": [3, 29, 30, 31, 32, 33, 34, 35, 117, 142, 154, 161, 162, 164, 251, 253, 255], "standard": [3, 6, 9, 11, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 66, 69, 70, 72, 75, 89, 91, 92, 94, 98, 99, 101, 104, 105, 106, 108, 111, 115, 117, 125, 126, 139, 142, 146, 148, 149, 154, 156, 159, 161, 162, 166, 169, 170, 171, 174, 179, 180, 181, 187, 209, 234, 251, 252, 253, 254, 256, 257, 258, 259, 266, 275, 276, 283, 285, 286, 290, 301, 321, 324, 328, 329, 330, 331, 332, 333, 334, 380, 406, 408, 420, 438], "zscore_sampl": [3, 11, 29, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 91, 92, 98, 99, 100, 104, 125, 154, 159, 161, 328, 329, 330, 331, 332, 333, 334, 420], "__init__": [3, 169, 187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 405, 406, 407, 408, 416], "modul": [3, 5, 19, 26, 32, 34, 35, 36, 40, 41, 42, 47, 50, 51, 52, 53, 54, 55, 56, 58, 61, 87, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 103, 104, 105, 106, 111, 115, 117, 118, 124, 125, 126, 127, 134, 136, 137, 145, 149, 151, 154, 164, 169, 172, 176, 177, 181, 185, 230, 234, 251, 252, 253, 254, 273, 275, 276, 290, 298, 300, 310, 312, 428, 432, 433, 434, 435, 437], "chang": [3, 14, 19, 40, 42, 51, 62, 68, 102, 105, 106, 110, 111, 113, 120, 162, 164, 168, 169, 171, 177, 178, 187, 188, 189, 239, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 286, 291, 296, 310, 314, 316, 319, 320, 327, 328, 329, 330, 331, 332, 333, 334, 335, 344, 389, 395, 397, 398, 402, 404, 405, 406, 407, 408, 411, 412, 414, 417, 420, 438, 440], "includ": [3, 14, 37, 39, 42, 43, 54, 58, 63, 66, 70, 77, 79, 80, 91, 100, 101, 105, 108, 122, 125, 126, 132, 142, 144, 145, 149, 151, 154, 159, 161, 166, 167, 169, 170, 174, 176, 177, 179, 185, 187, 194, 197, 198, 199, 206, 207, 216, 221, 235, 242, 243, 246, 251, 252, 253, 254, 265, 266, 270, 274, 283, 296, 298, 308, 322, 323, 324, 328, 329, 330, 331, 332, 333, 336, 337, 338, 340, 341, 344, 381, 417, 428, 433], "gather": [3, 94, 169, 171], "earli": [3, 39, 115, 167, 230, 232, 301, 405, 420], "feedback": [3, 139, 154, 169, 177], "user": [3, 18, 29, 34, 39, 58, 66, 68, 100, 106, 118, 124, 125, 126, 136, 139, 140, 142, 143, 147, 149, 150, 151, 152, 154, 168, 169, 170, 171, 174, 175, 177, 178, 181, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 438], "prototyp": [3, 169], "mai": [3, 17, 29, 30, 32, 33, 34, 35, 36, 43, 49, 56, 66, 72, 80, 86, 98, 100, 103, 115, 117, 118, 122, 140, 142, 150, 154, 155, 161, 162, 164, 169, 171, 174, 179, 181, 187, 225, 230, 257, 271, 286, 298, 316, 323, 325, 329, 331, 332, 344, 395, 397, 398, 411, 417, 424], "backward": [3, 136, 149, 154, 169, 203, 204], "compat": [3, 10, 11, 36, 49, 72, 79, 86, 94, 125, 129, 149, 151, 154, 164, 169, 170, 203, 204, 265, 266, 283, 296, 298, 308, 323, 327, 328, 329, 330, 331, 332, 333, 334, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 408, 420], "without": [3, 6, 14, 23, 48, 50, 66, 78, 81, 84, 94, 110, 111, 113, 118, 125, 126, 133, 142, 151, 154, 156, 159, 165, 167, 168, 174, 179, 181, 200, 299, 305, 325, 327, 330, 333, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 380, 387, 392, 437, 440], "prior": [3, 28, 45, 48, 54, 58, 66, 91, 113, 115, 147, 154, 155, 167, 170, 188, 207, 234, 251, 252, 256, 257, 283, 296, 331, 332, 334, 380, 394, 399, 439], "notic": [3, 49, 58, 66, 101, 108, 110, 113, 321], "deprec": [3, 111, 124, 125, 126, 129, 133, 134, 135, 136, 137, 139, 140, 142, 144, 145, 147, 149, 151, 152, 154, 169, 177, 186, 187, 199, 200, 208, 236, 251, 252, 253, 254, 258, 259, 286, 327, 328, 329, 330, 331, 332, 333, 334, 344, 380, 406, 408, 411, 412], "cycl": [3, 111, 125, 126, 154, 186], "moreov": [3, 62, 101, 108, 151, 154, 169, 176, 321], "incomplet": [3, 111, 126, 154], "test": [3, 29, 31, 34, 36, 40, 42, 43, 44, 51, 53, 66, 71, 74, 77, 78, 82, 99, 101, 102, 105, 106, 111, 113, 115, 124, 126, 138, 146, 149, 152, 154, 161, 163, 164, 166, 167, 168, 171, 172, 173, 174, 177, 180, 189, 195, 196, 197, 198, 199, 200, 201, 205, 208, 209, 211, 219, 220, 223, 224, 225, 228, 229, 234, 240, 251, 252, 253, 254, 255, 256, 257, 271, 296, 298, 299, 306, 312, 316, 317, 320, 323, 344, 356, 357, 371, 383, 386, 394, 399, 401, 431, 438, 439], "less": [3, 20, 48, 49, 50, 56, 66, 69, 77, 79, 88, 94, 100, 118, 139, 140, 147, 154, 166, 168, 169, 171, 177, 274, 320, 375, 440], "thoroughli": [3, 169], "than": [3, 4, 6, 15, 31, 32, 35, 36, 39, 40, 41, 42, 43, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 64, 66, 67, 69, 70, 77, 79, 81, 86, 88, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 116, 117, 118, 129, 132, 133, 134, 135, 136, 138, 142, 147, 149, 152, 154, 155, 158, 160, 161, 162, 163, 164, 166, 168, 169, 171, 174, 177, 179, 180, 181, 203, 204, 230, 232, 236, 251, 252, 253, 254, 258, 259, 283, 292, 298, 299, 300, 307, 312, 320, 321, 324, 325, 327, 329, 330, 332, 333, 344, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 375, 380, 381, 386, 389, 390, 394, 398, 399, 400, 402, 404, 408, 417, 419, 421, 424], "librari": [3, 63, 78, 94, 117, 139, 154, 164, 169, 176, 180, 428, 437, 438], "fit": [3, 6, 28, 30, 32, 35, 36, 37, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 65, 66, 69, 71, 73, 75, 76, 77, 79, 80, 81, 87, 89, 91, 92, 94, 98, 99, 100, 103, 111, 113, 117, 126, 139, 147, 149, 151, 152, 154, 155, 157, 158, 159, 161, 162, 164, 166, 168, 171, 172, 174, 175, 176, 181, 187, 188, 189, 211, 218, 219, 251, 252, 253, 254, 255, 256, 257, 258, 259, 265, 266, 270, 273, 274, 275, 276, 280, 283, 286, 292, 296, 298, 308, 313, 327, 328, 329, 330, 331, 332, 333, 334, 340, 344, 357, 360, 382, 394, 399, 405, 406, 407, 408, 411, 416, 418, 439, 440], "train": [3, 31, 32, 34, 39, 40, 41, 42, 43, 44, 51, 98, 99, 145, 154, 161, 162, 163, 166, 168, 174, 176, 181, 188, 251, 252, 253, 254, 256, 257, 405, 407, 413], "resampl": [3, 9, 11, 29, 30, 32, 33, 34, 35, 36, 43, 48, 49, 52, 53, 54, 56, 66, 71, 75, 83, 91, 92, 96, 98, 113, 117, 125, 131, 132, 135, 136, 142, 146, 148, 149, 154, 178, 230, 232, 234, 244, 245, 247, 248, 251, 252, 253, 254, 256, 257, 258, 259, 296, 302, 306, 311, 313, 315, 316, 317, 328, 329, 330, 331, 332, 333, 336, 338, 339, 340, 341, 386, 387, 393, 394, 399, 401, 406, 411, 424, 439, 440], "491": [3, 29, 30, 32, 33, 34, 35, 36, 98], "provid": [3, 5, 6, 9, 29, 30, 32, 33, 34, 35, 36, 44, 47, 48, 49, 52, 54, 56, 62, 64, 66, 67, 68, 71, 75, 76, 77, 79, 80, 84, 91, 94, 98, 101, 105, 111, 116, 117, 118, 126, 129, 137, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 158, 160, 161, 168, 169, 170, 171, 173, 174, 175, 176, 177, 179, 181, 186, 187, 188, 189, 191, 194, 195, 197, 198, 199, 200, 207, 208, 211, 219, 230, 234, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 270, 274, 283, 284, 285, 289, 290, 295, 296, 298, 301, 307, 316, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 380, 382, 383, 390, 392, 396, 405, 406, 407, 408, 409, 416, 420, 424, 437, 438], "sform": [3, 29, 30, 32, 33, 34, 35, 36, 98, 151, 154], "header": [3, 11, 29, 30, 32, 33, 34, 35, 36, 94, 98, 101, 122, 126, 140, 142, 150, 154, 179, 301, 304, 314, 380, 420], "result": [3, 6, 14, 15, 23, 24, 30, 33, 34, 35, 36, 40, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 64, 65, 66, 67, 69, 71, 72, 75, 77, 78, 79, 84, 86, 87, 88, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 108, 115, 116, 118, 125, 126, 132, 139, 142, 145, 150, 151, 154, 155, 157, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 179, 180, 181, 195, 197, 207, 225, 230, 232, 239, 251, 252, 255, 272, 273, 275, 276, 277, 283, 292, 296, 298, 301, 311, 312, 313, 316, 323, 331, 332, 334, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 395, 397, 402, 411, 412, 417, 424, 434, 437, 440], "expect": [3, 6, 29, 30, 32, 33, 34, 35, 36, 61, 66, 78, 79, 81, 95, 98, 101, 102, 105, 106, 118, 127, 142, 151, 154, 159, 166, 169, 171, 174, 177, 180, 181, 257, 283, 285, 290, 296, 298, 302, 321], "both": [3, 9, 15, 24, 39, 47, 49, 51, 58, 69, 79, 80, 89, 94, 100, 105, 108, 118, 126, 142, 149, 152, 154, 155, 158, 160, 166, 167, 169, 170, 174, 179, 180, 181, 187, 194, 206, 216, 264, 265, 266, 269, 283, 285, 290, 298, 299, 301, 320, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 386, 389, 391, 394, 398, 410, 420, 424, 438], "class": [3, 11, 28, 32, 42, 43, 45, 49, 51, 54, 56, 58, 91, 94, 98, 99, 113, 123, 124, 125, 127, 129, 135, 136, 137, 140, 142, 145, 147, 148, 149, 151, 154, 160, 161, 165, 168, 169, 170, 173, 181, 182, 184, 185, 186, 187, 188, 189, 219, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 283, 296, 302, 314, 324, 327, 328, 329, 330, 331, 332, 333, 334, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 379, 381, 384, 386, 387, 390, 391, 392, 393, 394, 399, 405, 406, 407, 408, 409, 410, 416, 425, 427, 429, 432, 433, 434, 439, 440], "number": [3, 6, 29, 31, 33, 34, 39, 42, 43, 49, 50, 53, 54, 55, 58, 65, 66, 69, 72, 77, 79, 86, 89, 92, 94, 98, 100, 103, 104, 105, 118, 127, 139, 142, 145, 146, 147, 149, 152, 154, 155, 158, 159, 161, 162, 163, 166, 169, 171, 174, 176, 177, 181, 187, 188, 189, 191, 195, 196, 199, 202, 203, 204, 207, 208, 210, 216, 219, 221, 224, 225, 228, 230, 234, 240, 243, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 265, 266, 274, 279, 283, 292, 296, 298, 299, 301, 303, 305, 307, 313, 320, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 340, 341, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 379, 380, 381, 382, 384, 386, 387, 389, 390, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 418, 419, 420, 421, 437], "problem": [3, 6, 31, 33, 39, 48, 92, 94, 115, 161, 162, 163, 166, 167, 168, 169, 171, 174, 176, 177, 191, 256, 257, 259, 270, 273, 274, 275, 276, 298, 344], "balanc": [3, 49, 149, 154, 158], "perform": [3, 30, 33, 34, 44, 48, 51, 62, 66, 71, 79, 80, 89, 91, 92, 94, 95, 99, 100, 101, 102, 105, 106, 111, 117, 118, 125, 145, 146, 147, 149, 154, 155, 160, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 179, 180, 181, 191, 221, 234, 243, 246, 251, 252, 253, 254, 256, 257, 258, 259, 265, 266, 283, 285, 292, 296, 298, 315, 316, 317, 318, 319, 320, 325, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 344, 355, 357, 360, 362, 364, 366, 368, 370, 372, 374, 379, 381, 384, 386, 387, 390, 392, 393, 394, 401, 405, 406, 407, 408, 411, 413, 418, 419, 420, 424, 440], "done": [3, 6, 34, 36, 41, 42, 43, 44, 48, 49, 51, 53, 57, 58, 64, 66, 94, 102, 103, 105, 117, 118, 149, 151, 154, 155, 156, 158, 161, 162, 164, 166, 168, 171, 177, 180, 188, 189, 251, 252, 253, 254, 256, 257, 258, 259, 283, 296, 301, 302, 310, 320, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 406, 407, 408, 420], "sum": [3, 41, 42, 49, 58, 65, 68, 77, 79, 84, 101, 102, 105, 106, 107, 142, 154, 168, 256, 257, 270, 274, 275, 307, 328, 331, 411, 421], "float": [3, 40, 41, 43, 68, 75, 142, 145, 154, 188, 189, 191, 195, 221, 242, 243, 246, 251, 252, 253, 254, 255, 256, 257, 258, 259, 270, 271, 273, 274, 275, 276, 278, 282, 283, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 298, 299, 300, 301, 305, 307, 316, 317, 320, 324, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 379, 380, 381, 384, 386, 387, 389, 390, 392, 393, 394, 395, 397, 398, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 413, 416, 417, 418, 419, 420, 421, 424], "len": [3, 12, 22, 30, 32, 33, 34, 47, 48, 51, 62, 63, 64, 65, 66, 68, 69, 76, 79, 91, 94, 98, 103, 111, 118, 191, 251, 252, 253, 254, 256, 257, 273, 275, 276, 280, 296, 313, 316, 336, 338, 339, 341, 406], "meaningless": [3, 161, 171, 299], "why": [3, 94, 168, 181], "proper": [3, 34, 149, 154, 168, 206, 207, 438], "error": [3, 6, 42, 43, 66, 76, 79, 81, 84, 94, 103, 124, 126, 129, 136, 139, 142, 151, 154, 156, 161, 162, 166, 169, 171, 174, 187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 273, 275, 283, 290, 296, 298, 299, 301, 302, 323, 327, 328, 329, 330, 331, 332, 333, 334, 340, 405, 406, 407, 408, 438], "rate": [3, 6, 66, 81, 129, 154, 168, 171, 174, 181, 278, 298], "30": [3, 6, 32, 33, 36, 40, 48, 50, 51, 57, 59, 62, 63, 68, 91, 99, 103, 107, 115, 129, 139, 154, 167, 196, 253, 254, 273, 275, 276, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 416, 439], "last": [3, 6, 33, 35, 40, 55, 72, 141, 154, 171, 176, 177, 193, 194, 301, 308, 322, 437, 438], "point": [3, 4, 8, 15, 22, 23, 27, 54, 55, 84, 86, 91, 94, 113, 117, 139, 142, 151, 154, 159, 161, 168, 171, 176, 177, 178, 179, 189, 251, 252, 253, 254, 283, 316, 317, 327, 330, 333, 338, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 381, 384, 387, 390, 392, 393, 394, 398, 399, 401, 411, 412, 418, 424, 439, 440], "dure": [3, 6, 55, 56, 65, 94, 100, 101, 115, 117, 139, 146, 152, 154, 161, 162, 168, 169, 171, 174, 177, 181, 189, 191, 208, 296, 298, 336, 337, 338, 340, 341, 389, 405], "fmri_niimgs_train": 3, "fmri_niimgs_test": 3, "conditions_train": 3, "conditions_test": 3, "hasn": [3, 168], "t": [3, 5, 6, 9, 16, 22, 24, 33, 37, 41, 55, 56, 58, 62, 66, 67, 68, 69, 71, 72, 75, 76, 77, 79, 80, 83, 90, 92, 93, 94, 96, 99, 100, 102, 103, 104, 105, 107, 108, 113, 115, 118, 145, 152, 154, 166, 167, 168, 169, 171, 172, 173, 174, 176, 177, 179, 180, 186, 197, 198, 207, 208, 210, 211, 217, 225, 230, 231, 232, 235, 256, 257, 271, 273, 274, 275, 276, 277, 279, 283, 296, 298, 320, 323, 324, 325, 338, 344, 389, 392, 394, 399, 410, 418, 421, 424, 437, 439], "examin": [3, 115, 174, 217, 235], "well": [3, 6, 15, 44, 48, 51, 58, 66, 68, 70, 79, 89, 100, 132, 139, 146, 148, 154, 155, 156, 158, 159, 161, 162, 164, 167, 169, 171, 174, 176, 187, 188, 189, 202, 208, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 302, 316, 325, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "predicton_accuraci": 3, "3f": [3, 6, 34, 44, 48, 55, 98], "767": 3, "set": [3, 6, 14, 15, 16, 21, 22, 28, 29, 30, 31, 33, 36, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 65, 66, 70, 79, 80, 81, 89, 94, 95, 98, 99, 101, 113, 115, 118, 124, 125, 126, 132, 136, 142, 145, 146, 148, 149, 151, 152, 154, 155, 156, 159, 161, 163, 165, 168, 170, 171, 172, 173, 174, 175, 177, 179, 181, 187, 188, 189, 195, 201, 202, 213, 214, 215, 219, 223, 224, 225, 230, 232, 234, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 273, 275, 276, 282, 283, 285, 290, 296, 297, 299, 301, 308, 320, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 401, 402, 404, 405, 406, 407, 408, 410, 413, 418, 420, 424, 437, 439, 440], "repetit": [3, 6, 33, 63, 64, 67, 71, 138, 154, 171, 174, 216, 221, 243, 246, 251, 252, 253, 254, 256, 257, 283, 286, 287, 288, 289, 293, 294, 295, 301, 328, 329, 330, 331, 332, 333, 334, 380, 406, 408, 420], "strategi": [3, 24, 28, 45, 48, 49, 66, 88, 89, 91, 92, 99, 113, 115, 125, 142, 146, 147, 149, 152, 154, 159, 162, 165, 166, 168, 171, 178, 189, 219, 251, 252, 253, 254, 255, 258, 259, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 340, 380, 391, 392, 399, 406, 411, 420, 424, 439, 440], "scikit": [3, 34, 49, 94, 97, 102, 104, 109, 113, 116, 122, 124, 127, 132, 134, 135, 136, 139, 142, 147, 149, 154, 155, 158, 161, 162, 163, 165, 166, 168, 169, 175, 176, 177, 219, 251, 252, 253, 254, 255, 265, 266, 308, 327, 328, 329, 330, 331, 332, 333, 334, 394, 406, 438, 439, 440], "sklearn": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 48, 49, 51, 52, 53, 57, 58, 92, 94, 98, 99, 102, 103, 104, 105, 106, 111, 139, 142, 146, 147, 154, 155, 161, 162, 164, 168, 181, 187, 188, 189, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 219, 220, 226, 230, 232, 237, 238, 239, 240, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 292, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "model_select": [3, 29, 30, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 51, 98, 99, 139, 154, 161, 164, 251, 252, 253, 254], "cv": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 44, 51, 58, 98, 99, 111, 136, 154, 161, 166, 189, 251, 252, 253, 254, 255, 256, 257], "n_split": [3, 34, 36, 37, 40, 44, 51, 99], "fold": [3, 29, 31, 34, 36, 40, 51, 69, 94, 98, 99, 161, 162, 164, 166, 168, 181, 189, 251, 252, 253, 254, 255, 256, 257], "enumer": [3, 12, 22, 34, 40, 47, 48, 51, 57, 64, 65, 66, 68, 69, 71, 79, 94, 100, 101, 102, 103, 105], "01d": 3, "886": 3, "698": [3, 33], "744": [3, 33], "return": [3, 4, 9, 14, 15, 31, 33, 39, 40, 41, 44, 47, 56, 64, 66, 68, 80, 84, 94, 100, 107, 111, 117, 118, 125, 126, 131, 135, 142, 145, 147, 149, 150, 151, 152, 154, 156, 161, 163, 166, 168, 169, 174, 176, 177, 179, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 432, 437], "paramet": [3, 6, 14, 15, 21, 23, 24, 28, 29, 32, 42, 44, 45, 49, 51, 54, 56, 58, 60, 71, 73, 89, 91, 92, 94, 95, 104, 105, 106, 108, 111, 113, 117, 118, 124, 125, 126, 133, 136, 139, 140, 142, 146, 147, 148, 149, 150, 151, 152, 154, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 171, 174, 176, 178, 179, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 437, 439, 440], "n_fold": [3, 189, 251, 252, 253, 254, 256, 257], "pipelin": [3, 35, 37, 39, 40, 41, 42, 44, 75, 98, 99, 115, 145, 154, 160, 161, 162, 165, 166, 167, 174, 180, 187, 188, 189, 195, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 301, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408, 420, 440], "found": [3, 6, 49, 52, 55, 81, 100, 101, 103, 107, 108, 117, 118, 139, 154, 155, 158, 159, 160, 161, 162, 163, 164, 166, 168, 169, 176, 177, 180, 181, 230, 232, 234, 301, 303, 321, 335, 338, 379, 393, 394, 420, 437], "websit": [3, 42, 75, 127, 139, 154, 169, 195, 208, 229], "best": [3, 34, 42, 43, 44, 95, 145, 151, 154, 161, 162, 163, 166, 168, 169, 171, 180, 251, 252, 253, 254, 256, 257, 323, 357, 360, 405, 406], "per": [3, 6, 30, 31, 33, 40, 48, 57, 66, 78, 94, 101, 102, 108, 147, 154, 155, 161, 169, 181, 189, 209, 228, 251, 252, 253, 254, 256, 257, 259, 271, 280, 283, 284, 286, 290, 297, 321, 324, 328, 329, 330, 332, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 419], "cv_params_": [3, 34, 125, 126, 154, 251, 252, 253, 254], "c": [3, 34, 37, 40, 41, 42, 43, 44, 49, 56, 64, 67, 70, 98, 99, 100, 102, 111, 115, 118, 162, 166, 167, 169, 188, 191, 199, 201, 208, 210, 213, 214, 220, 221, 227, 229, 230, 232, 234, 245, 275, 276, 301, 316, 317, 324, 325, 344, 411, 414, 420], "100": [3, 15, 31, 33, 34, 40, 41, 42, 44, 49, 55, 63, 75, 86, 89, 118, 162, 171, 178, 189, 195, 207, 227, 230, 251, 252, 253, 254, 256, 257, 280, 283, 291, 292, 300, 307, 320, 421, 437, 440], "speed": [3, 36, 37, 47, 77, 89, 98, 105, 115, 126, 154, 158, 164, 167, 168, 180, 181, 344, 405, 424], "cpu": [3, 42, 102, 105, 164, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 283, 292, 296, 298, 313, 328, 329, 330, 339, 340, 341, 344, 406], "n_job": [3, 31, 33, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 62, 75, 76, 77, 79, 80, 81, 98, 99, 100, 101, 102, 105, 108, 164, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 283, 286, 292, 296, 298, 313, 328, 329, 330, 339, 340, 341, 344, 406], "respect": [3, 62, 108, 142, 151, 154, 155, 169, 171, 174, 177, 181, 213, 215, 251, 252, 253, 254, 283, 285, 286, 290, 296, 305, 316, 317, 408, 410], "structur": [3, 6, 23, 39, 41, 43, 46, 49, 51, 58, 59, 63, 66, 113, 115, 155, 161, 163, 164, 165, 166, 168, 174, 179, 189, 197, 199, 208, 211, 219, 220, 225, 234, 256, 257, 270, 273, 321, 336, 337, 338, 340, 341, 391, 399, 402, 407, 413, 439, 440], "acquisit": [3, 6, 30, 32, 63, 66, 71, 101, 115, 166, 171, 174, 225, 290, 380], "select": [3, 6, 14, 15, 19, 20, 23, 29, 32, 33, 34, 35, 41, 42, 55, 56, 66, 76, 89, 94, 100, 105, 115, 116, 126, 132, 133, 134, 136, 144, 145, 147, 149, 154, 156, 159, 162, 163, 164, 165, 166, 167, 168, 180, 181, 188, 189, 199, 216, 217, 227, 230, 232, 234, 236, 250, 251, 252, 253, 254, 256, 257, 296, 298, 308, 320, 324, 325, 386, 389, 392, 394, 395, 397, 398, 405, 406, 408, 424, 437, 440], "session_label": [3, 29, 30, 32, 33, 98, 161], "acquir": [3, 6, 66, 68, 117, 171, 174, 176], "nois": [3, 6, 34, 44, 56, 64, 67, 69, 70, 94, 95, 100, 103, 108, 115, 124, 147, 154, 156, 162, 164, 168, 171, 174, 181, 273, 275, 276, 290, 324, 325, 380, 392, 393, 421], "autocorrel": [3, 69, 108], "henc": [3, 56, 58, 72, 75, 86, 145, 154, 166, 169, 171], "across": [3, 6, 15, 16, 47, 50, 51, 56, 64, 65, 66, 80, 94, 98, 99, 100, 103, 115, 125, 142, 148, 154, 155, 156, 159, 160, 161, 162, 164, 166, 171, 174, 187, 205, 239, 251, 252, 253, 254, 256, 257, 258, 259, 319, 335, 380, 406, 408, 424, 437], "pass": [3, 4, 9, 10, 11, 24, 29, 36, 42, 43, 49, 51, 54, 55, 56, 58, 79, 86, 89, 94, 102, 105, 106, 117, 118, 124, 126, 135, 137, 139, 142, 147, 149, 151, 152, 154, 161, 162, 166, 168, 169, 170, 177, 179, 180, 181, 187, 188, 189, 195, 230, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 285, 290, 296, 298, 301, 315, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 336, 338, 339, 341, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 401, 402, 405, 406, 407, 408, 410, 418, 419, 420, 424], "leaveonegroupout": [3, 29, 30, 32, 33, 98, 136, 154, 161, 164, 166, 251, 252, 253, 254], "cv_scores_": [3, 29, 30, 32, 33, 34, 42, 111, 161, 189, 251, 252, 253, 254, 256, 257], "9629629629629629": 3, "8518518518518519": 3, "9753086419753086": 3, "40740740740740744": 3, "9876543209876543": 3, "9259259259259259": 3, "8765432098765432": 3, "final": [3, 4, 6, 14, 15, 30, 41, 48, 53, 55, 56, 57, 63, 69, 84, 93, 94, 100, 147, 154, 155, 162, 168, 169, 170, 176, 177, 180, 181, 189, 296, 321, 328, 329, 331, 332, 437], "coef_": [3, 40, 44, 98, 111, 117, 251, 252, 253, 254, 256, 257], "89375977e": 3, "02": [3, 27, 30, 33, 45, 53, 59, 62, 73, 78, 96, 115, 166, 199, 258, 324, 325, 439], "87167205e": 3, "23028121e": 3, "88745889e": 3, "18696919e": 3, "10743976e": 3, "69996493e": 3, "50953703e": 3, "94203680e": 3, "51225877e": 3, "08511659e": 3, "28798254e": 3, "54677061e": 3, "78907492e": 3, "69166833e": 3, "28088082e": 3, "6": [3, 6, 10, 17, 20, 23, 24, 27, 30, 31, 33, 34, 36, 38, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 62, 63, 64, 66, 72, 73, 76, 80, 91, 94, 99, 100, 103, 104, 106, 107, 109, 111, 115, 119, 122, 124, 132, 134, 136, 139, 140, 141, 147, 148, 149, 159, 166, 167, 168, 170, 180, 195, 213, 216, 219, 240, 258, 324, 325, 329, 332, 334, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 394, 400, 401, 408, 410, 438, 439], "56419364e": 3, "03": [3, 27, 30, 32, 33, 41, 44, 53, 56, 59, 73, 82, 91, 96, 109, 115, 166, 298, 324, 325, 344, 439], "7": [3, 6, 7, 11, 15, 22, 24, 25, 30, 33, 42, 44, 45, 52, 53, 54, 56, 57, 58, 59, 62, 63, 64, 66, 70, 71, 72, 82, 86, 88, 91, 94, 96, 102, 103, 107, 109, 115, 118, 119, 122, 124, 127, 129, 134, 136, 139, 140, 142, 147, 149, 167, 179, 180, 195, 199, 201, 202, 207, 211, 273, 275, 276, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 381, 386, 390, 392, 393, 395, 397, 398, 402, 404, 407, 413, 437, 439], "65755974e": 3, "67106592e": 3, "8": [3, 6, 9, 12, 14, 24, 27, 30, 33, 34, 38, 40, 43, 45, 49, 50, 51, 53, 54, 55, 56, 58, 59, 61, 62, 64, 66, 72, 76, 79, 80, 86, 89, 91, 92, 96, 100, 101, 102, 103, 104, 106, 107, 109, 111, 115, 118, 122, 127, 132, 140, 142, 144, 150, 158, 159, 167, 200, 204, 210, 219, 221, 230, 232, 239, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 256, 257, 258, 259, 283, 296, 300, 305, 324, 327, 328, 329, 330, 331, 332, 333, 334, 337, 340, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 406, 408, 417, 418, 420, 439], "02167255e": 3, "29515456e": 3, "17593983e": 3, "36993167e": 3, "41324598e": 3, "59875055e": 3, "22604706e": 3, "77307423e": 3, "22195472e": 3, "9": [3, 6, 7, 15, 23, 27, 32, 33, 35, 36, 40, 41, 42, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 68, 70, 72, 73, 82, 86, 89, 90, 91, 92, 94, 96, 98, 99, 100, 102, 103, 104, 105, 106, 109, 115, 117, 118, 119, 122, 136, 145, 147, 174, 207, 216, 217, 230, 232, 234, 236, 270, 274, 283, 292, 298, 314, 320, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 380, 395, 397, 398, 414, 417, 437, 438, 439], "53213167e": 3, "76046928e": 3, "14296878e": 3, "14226283e": 3, "03650960e": 3, "89276713e": 3, "89032395e": 3, "35117750e": 3, "21404918e": 3, "73137028e": 3, "37416350e": 3, "41274333e": 3, "81645788e": 3, "65408596e": 3, "70783396e": 3, "56853055e": 3, "21663708e": 3, "47675847e": 3, "13270228e": 3, "60957093e": 3, "52762765e": 3, "02911130e": 3, "28107271e": 3, "08007273e": 3, "09945283e": 3, "72429833e": 3, "77394704e": 3, "03857882e": 3, "38237762e": 3, "48880323e": 3, "43026965e": 3, "47419273e": 3, "01": [3, 6, 7, 12, 27, 30, 32, 33, 42, 45, 48, 51, 53, 55, 58, 59, 61, 71, 73, 82, 96, 99, 100, 101, 108, 109, 111, 115, 189, 201, 205, 283, 286, 290, 321, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 439], "34044311e": 3, "87112141e": 3, "65860363e": 3, "07602740e": 3, "22035622e": 3, "95636856e": 3, "22092896e": 3, "04053351e": 3, "15345334e": 3, "12247178e": 3, "93775859e": 3, "30542223e": 3, "42973619e": 3, "23066109e": 3, "88148195e": 3, "69390826e": 3, "78947424e": 3, "00276110e": 3, "99184637e": 3, "52171463e": 3, "06155840e": 3, "31950273e": 3, "21521713e": 3, "23348114e": 3, "42561562e": 3, "53124430e": 3, "98226731e": 3, "32638705e": 3, "55125276e": 3, "41589284e": 3, "79201851e": 3, "80908712e": 3, "70157425e": 3, "71449821e": 3, "98949276e": 3, "20184334e": 3, "35452938e": 3, "37628279e": 3, "04262102e": 3, "68447623e": 3, "19382511e": 3, "94175528e": 3, "07297778e": 3, "48931862e": 3, "43559835e": 3, "09026686e": 3, "67697209e": 3, "73787629e": 3, "96428956e": 3, "09426620e": 3, "57928534e": 3, "16722599e": 3, "00105450e": 3, "40260721e": 3, "82613497e": 3, "12101621e": 3, "45402340e": 3, "32178891e": 3, "49998149e": 3, "47543515e": 3, "56643646e": 3, "83883184e": 3, "19958174e": 3, "72172377e": 3, "25520783e": 3, "58655939e": 3, "79165253e": 3, "51835236e": 3, "31721622e": 3, "35341407e": 3, "76992743e": 3, "40832527e": 3, "20588485e": 3, "35700300e": 3, "68303189e": 3, "92569598e": 3, "24502550e": 3, "30209695e": 3, "00012351e": 3, "17136297e": 3, "92613857e": 3, "33224278e": 3, "80301301e": 3, "75293857e": 3, "17799698e": 3, "09951044e": 3, "43033823e": 3, "06833407e": 3, "84813239e": 3, "71508013e": 3, "72571836e": 3, "76643999e": 3, "09129666e": 3, "04": [3, 7, 27, 30, 32, 33, 44, 45, 53, 115, 168, 205, 301, 324, 325, 420, 421, 439], "00770651e": 3, "53996027e": 3, "25626593e": 3, "82607136e": 3, "50556004e": 3, "61203632e": 3, "16478523e": 3, "95406265e": 3, "57883697e": 3, "89304549e": 3, "82973761e": 3, "23922492e": 3, "13676056e": 3, "68753763e": 3, "66516327e": 3, "35521519e": 3, "80212140e": 3, "46411144e": 3, "53245586e": 3, "67293358e": 3, "62249146e": 3, "86831424e": 3, "39667098e": 3, "21701598e": 3, "73613129e": 3, "01698056e": 3, "17097743e": 3, "91414142e": 3, "37777887e": 3, "84701015e": 3, "22622796e": 3, "82635659e": 3, "13782643e": 3, "80791388e": 3, "79687584e": 3, "78893867e": 3, "11430297e": 3, "65020192e": 3, "89088142e": 3, "42849769e": 3, "22347558e": 3, "92870254e": 3, "89847745e": 3, "39532206e": 3, "65301166e": 3, "65326059e": 3, "58043011e": 3, "93379498e": 3, "13631331e": 3, "09405767e": 3, "50178673e": 3, "38816391e": 3, "12596492e": 3, "41485534e": 3, "10216447e": 3, "33811371e": 3, "12338690e": 3, "37411930e": 3, "13075600e": 3, "64226501e": 3, "22400382e": 3, "31920862e": 3, "98652138e": 3, "29727953e": 3, "28093240e": 3, "89712122e": 3, "13462380e": 3, "28719279e": 3, "71052356e": 3, "34904668e": 3, "04370396e": 3, "26795242e": 3, "71215463e": 3, "29103320e": 3, "33451481e": 3, "77913788e": 3, "74666154e": 3, "76466167e": 3, "38274438e": 3, "28052156e": 3, "78034315e": 3, "32694062e": 3, "22687021e": 3, "28031156e": 3, "57415830e": 3, "03624172e": 3, "90244511e": 3, "15032793e": 3, "81419223e": 3, "12307599e": 3, "17434022e": 3, "23480970e": 3, "54462014e": 3, "73679863e": 3, "53967117e": 3, "06519453e": 3, "21985141e": 3, "98728353e": 3, "85519432e": 3, "05701960e": 3, "02838651e": 3, "10051312e": 3, "42460722e": 3, "93849363e": 3, "01771058e": 3, "09408901e": 3, "49254390e": 3, "92748480e": 3, "05307348e": 3, "07553183e": 3, "84038377e": 3, "48753109e": 3, "00653472e": 3, "63087421e": 3, "64683470e": 3, "90208529e": 3, "04857602e": 3, "68078912e": 3, "36719041e": 3, "08856261e": 3, "10239997e": 3, "41965328e": 3, "16484487e": 3, "98672188e": 3, "61631066e": 3, "96233729e": 3, "03885201e": 3, "56495484e": 3, "98918270e": 3, "13030034e": 3, "21954859e": 3, "14990419e": 3, "31276916e": 3, "67257295e": 3, "14429035e": 3, "67097725e": 3, "28701850e": 3, "20150976e": 3, "68523427e": 3, "25603190e": 3, "04616775e": 3, "10336679e": 3, "85358338e": 3, "81664874e": 3, "48425570e": 3, "18826026e": 3, "18498310e": 3, "10844499e": 3, "11777496e": 3, "63463864e": 3, "25918986e": 3, "12226757e": 3, "57668157e": 3, "70171871e": 3, "32374878e": 3, "06447562e": 3, "23392339e": 3, "27356207e": 3, "33882046e": 3, "75530436e": 3, "88866919e": 3, "45131468e": 3, "03298913e": 3, "16784619e": 3, "32229514e": 3, "17562934e": 3, "40063416e": 3, "31145175e": 3, "17558100e": 3, "75889093e": 3, "18127787e": 3, "15886241e": 3, "34028488e": 3, "22781430e": 3, "00231115e": 3, "74911885e": 3, "12756061e": 3, "98718123e": 3, "04068830e": 3, "65060155e": 3, "03002284e": 3, "05576726e": 3, "80744154e": 3, "75451206e": 3, "72590472e": 3, "00662317e": 3, "46111056e": 3, "46871270e": 3, "13411399e": 3, "81703710e": 3, "40979050e": 3, "14637495e": 3, "63834113e": 3, "66532464e": 3, "15682125e": 3, "45094850e": 3, "35866139e": 3, "34597217e": 3, "81061274e": 3, "15345181e": 3, "39361887e": 3, "07248655e": 3, "15456002e": 3, "15427662e": 3, "88767172e": 3, "60263153e": 3, "09703481e": 3, "29172076e": 3, "59458920e": 3, "60399201e": 3, "64627802e": 3, "12881345e": 3, "17267952e": 3, "51639051e": 3, "82894863e": 3, "42547737e": 3, "47013761e": 3, "63032151e": 3, "17337935e": 3, "24165152e": 3, "17987146e": 3, "85680881e": 3, "23651967e": 3, "86600088e": 3, "54628817e": 3, "50538014e": 3, "20605047e": 3, "19790052e": 3, "59525845e": 3, "12122977e": 3, "93193873e": 3, "54371247e": 3, "23477776e": 3, "03926918e": 3, "37294435e": 3, "82792370e": 3, "98744872e": 3, "66896581e": 3, "23291178e": 3, "10332997e": 3, "18105099e": 3, "18720065e": 3, "63540103e": 3, "05280671e": 3, "84617301e": 3, "36078950e": 3, "65219513e": 3, "49396742e": 3, "49354218e": 3, "11599054e": 3, "69109750e": 3, "00057830e": 3, "99014295e": 3, "01873242e": 3, "09867461e": 3, "11780648e": 3, "72050763e": 3, "16426727e": 3, "55500415e": 3, "27701653e": 3, "95493338e": 3, "48743292e": 3, "19936471e": 3, "88680492e": 3, "61423760e": 3, "77020742e": 3, "90073820e": 3, "58287227e": 3, "31738420e": 3, "24911910e": 3, "36175136e": 3, "07354854e": 3, "08861389e": 3, "12811813e": 3, "63144458e": 3, "04807080e": 3, "07014261e": 3, "89176929e": 3, "71604222e": 3, "13384603e": 3, "10366324e": 3, "23253430e": 3, "50403183e": 3, "85903427e": 3, "04965623e": 3, "41705392e": 3, "18520185e": 3, "83204972e": 3, "82244511e": 3, "17638262e": 3, "03260983e": 3, "09180086e": 3, "23389817e": 3, "19385944e": 3, "53770610e": 3, "21211714e": 3, "55618710e": 3, "93485788e": 3, "92527878e": 3, "76696163e": 3, "67993503e": 3, "76552493e": 3, "38164244e": 3, "60398878e": 3, "50400484e": 3, "27424429e": 3, "29244951e": 3, "06665614e": 3, "81935492e": 3, "77512224e": 3, "64243072e": 3, "coeffici": [3, 6, 23, 39, 40, 44, 51, 98, 99, 135, 151, 154, 155, 161, 162, 163, 167, 168, 171, 174, 187, 189, 256, 257, 272, 274, 277, 283, 292, 296, 418], "voxel": [3, 15, 25, 28, 33, 36, 37, 39, 40, 41, 44, 45, 46, 49, 50, 58, 59, 66, 69, 70, 74, 79, 81, 82, 84, 87, 89, 90, 92, 98, 100, 102, 105, 108, 113, 115, 117, 125, 129, 132, 133, 134, 140, 149, 151, 154, 158, 159, 161, 163, 164, 165, 167, 170, 171, 172, 174, 175, 176, 179, 181, 203, 204, 211, 216, 220, 221, 234, 252, 255, 256, 257, 258, 259, 271, 278, 279, 283, 292, 296, 298, 299, 300, 301, 303, 305, 306, 307, 316, 317, 320, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 341, 344, 357, 372, 375, 380, 383, 388, 394, 399, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 424, 437, 439, 440], "464": [3, 33, 98], "get": [3, 6, 14, 21, 22, 33, 35, 40, 41, 51, 52, 56, 58, 62, 66, 68, 69, 71, 75, 78, 81, 86, 88, 100, 101, 104, 108, 118, 134, 139, 154, 156, 159, 160, 161, 166, 168, 170, 173, 175, 181, 187, 188, 189, 197, 203, 204, 206, 207, 232, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 266, 273, 275, 276, 283, 296, 298, 306, 311, 315, 327, 328, 329, 330, 331, 332, 333, 334, 344, 345, 347, 348, 375, 405, 406, 407, 408, 416, 438], "coef_img_": [3, 29, 30, 31, 39, 42, 43, 111, 161, 181, 251, 252, 253, 254, 256, 257], "coef_img": [3, 30, 43, 111, 117], "niftiimag": [3, 156, 169, 170, 179, 180], "save": [3, 6, 9, 14, 21, 23, 29, 42, 43, 48, 49, 50, 51, 61, 66, 72, 86, 91, 92, 94, 98, 99, 100, 103, 107, 118, 126, 140, 149, 154, 159, 168, 179, 180, 181, 230, 232, 256, 257, 260, 261, 262, 276, 283, 296, 323, 328, 329, 331, 332, 333, 334, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 416, 418, 440], "to_filenam": [3, 4, 6, 29, 48, 49, 55, 64, 86, 94, 180], "haxby_svc_weight": 3, "dim": [3, 21, 23, 29, 47, 56, 91, 130, 132, 136, 154, 161, 271, 273, 275, 276, 379, 392, 393, 394, 401], "doe": [3, 6, 29, 49, 66, 68, 75, 102, 117, 118, 129, 138, 142, 151, 154, 161, 162, 166, 168, 169, 170, 171, 176, 181, 197, 207, 219, 272, 274, 277, 286, 307, 319, 321, 323, 340, 348, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 405, 421, 437], "answer": [3, 438], "question": [3, 51, 65, 66, 99, 158, 176, 177, 181, 216, 438], "random": [3, 40, 41, 44, 51, 55, 63, 98, 99, 102, 111, 134, 146, 154, 158, 159, 160, 161, 168, 169, 200, 258, 259, 273, 275, 276, 283, 292, 298, 344, 405, 406, 408, 410], "compar": [3, 6, 30, 31, 33, 35, 39, 41, 46, 51, 56, 58, 59, 64, 66, 77, 79, 80, 83, 86, 94, 96, 99, 113, 115, 118, 120, 142, 154, 156, 157, 160, 161, 162, 163, 164, 165, 168, 170, 171, 174, 181, 187, 189, 202, 205, 211, 216, 312, 313, 327, 328, 329, 330, 331, 332, 333, 334, 376, 377, 381, 388, 394, 399, 420, 437, 439, 440], "dummi": [3, 99, 147, 154, 161, 162, 164, 169, 251, 252, 253, 254, 290], "replac": [3, 4, 30, 32, 35, 36, 40, 41, 42, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 70, 77, 79, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 111, 117, 124, 125, 126, 133, 134, 139, 142, 145, 146, 147, 148, 149, 154, 164, 168, 169, 177, 234, 301, 318, 324, 335, 338, 420], "dummy_decod": 3, "dummy_classifi": [3, 32, 251, 253], "simpli": [3, 64, 66, 67, 68, 69, 89, 101, 103, 105, 108, 118, 171, 177, 181, 199, 300, 312, 318, 387, 392, 393, 394], "mean": [3, 6, 14, 15, 16, 18, 21, 22, 23, 25, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 49, 50, 51, 55, 56, 58, 61, 64, 66, 67, 70, 71, 77, 83, 89, 91, 92, 94, 95, 96, 98, 102, 103, 104, 111, 113, 118, 132, 136, 139, 142, 146, 148, 154, 155, 158, 159, 161, 168, 169, 171, 174, 176, 180, 181, 187, 188, 189, 191, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 251, 252, 253, 254, 255, 256, 257, 258, 259, 273, 275, 276, 283, 291, 292, 296, 298, 299, 300, 302, 307, 312, 313, 324, 325, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 344, 379, 380, 392, 393, 394, 395, 397, 399, 401, 405, 406, 407, 408, 410, 411, 414, 415, 418, 420, 421, 439], "over": [3, 20, 48, 49, 51, 69, 71, 89, 117, 125, 145, 146, 154, 160, 161, 166, 167, 168, 173, 177, 180, 202, 259, 265, 283, 309, 313, 324, 345, 347, 348, 392, 396, 424, 437], "38888888888888895": 3, "6111111111111112": [3, 29], "anova": [3, 28, 35, 42, 45, 105, 106, 113, 134, 154, 165, 166, 167, 174, 181, 219, 251, 252, 253, 254, 256, 257, 308, 394, 399, 401, 439, 440], "hous": [3, 18, 28, 32, 33, 45, 94, 97, 109, 113, 125, 154, 166, 175, 179, 180, 219, 251, 253, 255, 306, 308, 311, 313, 314, 327, 333, 344, 372, 387, 391, 394, 399, 401, 439], "For": [3, 6, 9, 14, 15, 19, 23, 24, 29, 30, 32, 34, 35, 36, 40, 41, 48, 50, 51, 63, 64, 66, 67, 69, 71, 72, 79, 80, 86, 89, 98, 100, 103, 105, 108, 117, 118, 139, 149, 154, 155, 156, 158, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 173, 174, 176, 177, 179, 180, 181, 187, 194, 197, 198, 199, 203, 204, 206, 207, 208, 210, 211, 220, 230, 232, 234, 245, 250, 251, 252, 253, 254, 256, 257, 258, 259, 273, 274, 275, 276, 283, 290, 296, 298, 313, 321, 324, 325, 329, 331, 332, 334, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 379, 384, 387, 389, 392, 393, 394, 395, 396, 397, 398, 406, 408, 409, 410, 416, 417, 418, 419, 424, 437, 438], "precomput": [3, 257], "frem": [3, 28, 45, 113, 115, 125, 145, 154, 161, 162, 165, 167, 174, 175, 219, 228, 253, 254, 257, 308, 313, 391, 394, 399, 439, 440], "fast": [3, 31, 39, 48, 49, 65, 66, 72, 100, 115, 142, 145, 154, 158, 160, 161, 162, 165, 168, 169, 174, 175, 225, 232, 253, 254, 259, 318, 406, 407, 413, 440], "ensembl": [3, 31, 39, 42, 115, 161, 162, 165, 167, 174, 175, 253, 254, 440], "regular": [3, 31, 39, 56, 66, 91, 94, 115, 118, 145, 154, 161, 162, 165, 167, 168, 174, 175, 176, 180, 188, 189, 191, 253, 254, 256, 257, 311, 438, 440], "robust": [3, 31, 39, 94, 115, 144, 154, 159, 161, 165, 174, 253, 254, 324, 325, 440], "spacenet": [3, 132, 154, 161, 162, 163, 165, 174, 256, 257, 440], "spatial": [3, 6, 31, 39, 43, 46, 49, 50, 54, 59, 69, 86, 94, 95, 98, 104, 108, 113, 115, 125, 145, 149, 154, 158, 160, 161, 164, 165, 171, 174, 175, 178, 181, 197, 200, 205, 207, 216, 227, 251, 252, 253, 254, 255, 256, 257, 258, 259, 283, 296, 298, 309, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 392, 394, 399, 406, 408, 410, 439, 440], "34": [3, 7, 15, 33, 62, 91, 115, 166, 439], "593": [3, 7, 33, 439], "906": [3, 7, 439], "plot_decoding_tutori": [3, 7, 142, 154, 161, 169, 439], "download": [4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 115, 116, 129, 130, 132, 133, 135, 139, 142, 145, 146, 148, 154, 155, 156, 158, 161, 169, 176, 183, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 440], "exist": [4, 6, 20, 48, 64, 72, 102, 159, 166, 169, 180, 187, 188, 189, 230, 232, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 310, 327, 328, 329, 330, 331, 332, 333, 334, 391, 405, 406, 407, 408, 437], "ship": [4, 12, 94, 139, 154, 437], "mni152_file_path": [4, 176], "variabl": [4, 6, 14, 39, 42, 43, 44, 56, 69, 75, 77, 94, 100, 101, 108, 115, 126, 131, 149, 151, 154, 156, 161, 162, 163, 165, 166, 168, 169, 171, 174, 179, 181, 196, 241, 251, 252, 253, 254, 255, 256, 257, 270, 274, 283, 296, 312, 324], "path": [4, 6, 15, 62, 64, 72, 86, 94, 101, 108, 116, 117, 118, 126, 131, 142, 148, 150, 151, 154, 161, 167, 168, 169, 177, 178, 181, 188, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 248, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 283, 286, 296, 302, 311, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 358, 406, 407, 408, 416, 420, 422, 423, 424, 440], "mni152": [4, 93, 124, 148, 154, 171, 198, 200, 207, 211, 220, 221, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 256, 257, 258, 259, 308, 330, 333, 337, 340, 392, 393, 394, 401, 406], "templat": [4, 16, 22, 23, 48, 69, 75, 83, 96, 108, 113, 115, 124, 127, 132, 137, 142, 145, 148, 151, 154, 159, 171, 174, 176, 180, 181, 197, 199, 211, 220, 221, 234, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 258, 259, 311, 316, 317, 325, 330, 333, 337, 340, 379, 392, 393, 394, 399, 401, 406, 416, 439], "mni_icbm152_t1_tal_nlin_sym_09a_convert": [4, 176], "quickli": [4, 33, 61, 62, 64, 75, 155, 158, 168, 169, 177], "plot_img": [4, 6, 36, 126, 142, 149, 154, 176, 355, 357, 360, 362, 364, 366, 368, 370, 372, 437], "0x7f0a3be58a70": 4, "veri": [4, 30, 31, 32, 35, 36, 39, 40, 42, 44, 49, 54, 66, 75, 76, 77, 79, 86, 94, 103, 117, 142, 154, 155, 156, 158, 161, 162, 163, 164, 167, 168, 169, 171, 174, 177, 181, 253, 254, 329, 332, 334, 375, 392, 419], "pretti": [4, 103], "simplest": [4, 71, 98, 118, 164, 168, 437], "possibl": [4, 6, 14, 15, 16, 44, 69, 71, 80, 81, 84, 86, 94, 100, 117, 118, 132, 149, 151, 154, 155, 158, 161, 166, 168, 169, 171, 174, 176, 177, 180, 181, 187, 188, 189, 195, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 271, 273, 275, 276, 283, 286, 296, 298, 305, 316, 321, 324, 327, 328, 329, 330, 331, 332, 333, 334, 374, 375, 381, 386, 390, 405, 406, 407, 408, 418, 437], "whole": [4, 6, 14, 42, 48, 50, 70, 89, 94, 115, 118, 126, 148, 154, 166, 167, 169, 170, 175, 180, 181, 200, 220, 230, 232, 242, 245, 251, 252, 253, 254, 258, 259, 330, 333, 337, 340, 344, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 392, 406, 408, 437], "make": [4, 6, 8, 15, 22, 23, 27, 30, 31, 36, 41, 47, 49, 51, 56, 58, 66, 68, 69, 70, 71, 75, 77, 79, 80, 84, 98, 104, 113, 115, 118, 124, 126, 127, 128, 133, 139, 148, 149, 151, 152, 154, 159, 161, 162, 166, 167, 170, 173, 174, 175, 176, 179, 181, 201, 209, 219, 230, 234, 239, 248, 251, 252, 253, 254, 256, 257, 271, 316, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 361, 363, 365, 367, 369, 371, 386, 389, 394, 396, 398, 399, 400, 401, 402, 404, 405, 422, 424, 437, 438, 439], "prettier": 4, "exercis": [4, 176], "own": [4, 6, 49, 58, 100, 116, 118, 161, 164, 169, 186, 221, 440], "noth": [4, 166, 189, 258, 259, 272, 274, 277, 283, 296, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 387, 389, 392, 393, 394, 401], "stringshould": [4, 6, 14, 15, 32, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 66, 68, 69, 70, 79, 88, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 117, 118, 135, 136, 146, 149, 150, 154, 159, 160, 161, 162, 164, 168, 169, 171, 176, 177, 181, 187, 188, 189, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 240, 241, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 280, 283, 285, 286, 290, 291, 296, 297, 299, 300, 301, 311, 312, 314, 317, 319, 320, 322, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 344, 345, 378, 379, 381, 384, 386, 387, 389, 392, 393, 394, 395, 396, 398, 402, 405, 406, 407, 408, 409, 410, 414, 416, 417, 418, 420, 435, 437, 438], "volum": [4, 8, 16, 27, 31, 32, 36, 39, 43, 54, 56, 61, 64, 69, 79, 87, 91, 100, 111, 115, 117, 124, 126, 136, 139, 147, 152, 154, 166, 167, 174, 175, 176, 179, 197, 199, 202, 219, 229, 234, 251, 252, 253, 254, 256, 257, 258, 259, 283, 305, 313, 316, 317, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 345, 347, 348, 380, 384, 389, 393, 398, 399, 401, 408, 409, 410, 414, 420, 424, 437, 438, 439, 440], "smooth_img": [4, 70, 94, 95, 103, 136, 142, 154, 179, 180, 181], "mm": [4, 15, 33, 37, 55, 58, 84, 87, 91, 95, 139, 154, 159, 180, 202, 207, 215, 283, 296, 324, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 408, 409, 410, 418, 424], "smooth_anat_img": 4, "fwhm": [4, 66, 94, 95, 103, 105, 136, 142, 154, 174, 176, 180, 181, 318], "nibabel": [4, 33, 36, 44, 49, 52, 56, 62, 75, 81, 84, 91, 124, 125, 133, 134, 136, 142, 147, 149, 151, 154, 168, 179, 180, 258, 259, 302, 303, 304, 311, 316, 317, 318, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 406, 408, 409, 410, 414, 415], "nifti1": [4, 33, 36, 49, 52, 56, 75, 81, 91, 142, 154, 318, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 406, 408, 409, 410, 414, 415], "nifti1imag": [4, 33, 36, 40, 43, 44, 49, 52, 56, 75, 81, 84, 91, 134, 135, 137, 142, 154, 159, 179, 201, 203, 204, 206, 207, 210, 221, 228, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 258, 259, 278, 280, 283, 296, 298, 299, 300, 302, 304, 308, 309, 311, 312, 313, 316, 317, 318, 319, 320, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 355, 360, 362, 366, 372, 376, 377, 378, 406, 408, 409, 410, 414, 415], "0x7f0a3b719e50": 4, "0x7f0a42305010": 4, "could": [4, 6, 36, 49, 58, 66, 69, 70, 79, 85, 86, 93, 100, 105, 117, 118, 129, 145, 149, 150, 154, 161, 164, 166, 168, 169, 171, 176, 181, 271, 393, 424], "more_smooth_anat_img": 4, "0x7f0a3b7c6ea0": 4, "ani": [4, 6, 49, 56, 58, 75, 80, 81, 100, 103, 104, 110, 113, 117, 124, 143, 145, 151, 154, 156, 158, 161, 162, 165, 166, 168, 169, 170, 171, 174, 177, 181, 195, 219, 230, 232, 236, 303, 308, 312, 318, 321, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 389, 392, 408, 412, 417, 420, 424, 437, 438, 440], "necessari": [4, 62, 89, 92, 101, 108, 124, 142, 149, 154, 155, 158, 161, 169, 170, 177, 181, 197, 230, 232, 251, 252, 253, 254, 276, 283, 296, 333, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 416], "tool": [4, 8, 10, 11, 20, 23, 27, 32, 36, 48, 49, 79, 86, 87, 94, 100, 104, 113, 117, 132, 151, 154, 157, 162, 169, 170, 173, 175, 176, 178, 179, 181, 182, 184, 219, 248, 313, 355, 357, 360, 362, 364, 366, 368, 370, 372, 379, 384, 386, 393, 394, 399, 401, 428, 437, 438, 439], "506": [4, 7, 33, 439], "252": [4, 6, 33, 41, 66, 73, 94, 439], "plot_nilearn_101": [4, 7, 439], "np": [5, 6, 9, 11, 12, 14, 22, 23, 24, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 77, 79, 80, 84, 85, 87, 89, 94, 98, 100, 102, 103, 104, 105, 106, 107, 108, 111, 151, 154, 159, 169, 179, 180, 187, 207, 234, 272, 273, 274, 275, 276, 277, 302, 312, 344, 405, 407], "linspac": [5, 49, 61, 68], "2000": [5, 42, 49, 115, 142, 145, 154, 158, 179, 210], "matplotlib": [5, 6, 8, 9, 11, 15, 18, 24, 25, 27, 30, 32, 35, 38, 40, 41, 42, 43, 44, 48, 49, 51, 52, 54, 55, 56, 57, 58, 61, 62, 63, 65, 66, 68, 70, 72, 78, 79, 80, 84, 91, 94, 99, 100, 101, 102, 105, 106, 111, 113, 122, 126, 129, 134, 136, 137, 139, 142, 144, 149, 150, 152, 154, 156, 161, 180, 329, 332, 334, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 437, 438, 439], "pyplot": [5, 6, 11, 12, 15, 18, 24, 25, 30, 32, 34, 35, 38, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 63, 65, 66, 68, 70, 72, 78, 79, 80, 84, 91, 94, 99, 100, 101, 102, 105, 106, 111, 156, 180, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 384, 385, 386, 387, 389, 390, 392, 393, 394, 395, 398, 399, 437], "scientif": [5, 115, 146, 149, 154, 169, 176, 206, 217, 225, 235, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 384, 386, 387, 389, 393, 394, 395, 397, 398], "plt": [5, 6, 11, 12, 15, 18, 24, 25, 30, 32, 34, 35, 38, 40, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 63, 65, 66, 68, 70, 72, 78, 79, 80, 84, 91, 94, 99, 100, 101, 102, 105, 106, 111, 180, 379, 380, 381, 384, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401], "co": [5, 24, 84, 115, 170, 210, 239], "line": [5, 9, 14, 21, 24, 48, 51, 91, 161, 168, 169, 234, 301, 400, 420, 424, 438], "line2d": [5, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381], "0x7f0a407dd5e0": 5, "195": [5, 7, 33, 41, 72, 439], "plot_python_101": [5, 7, 439], "tutori": [6, 7, 66, 98, 129, 139, 154, 161, 169, 174, 175, 176, 181, 219, 251, 308, 313, 384, 393, 401, 439], "model": [6, 23, 28, 31, 32, 33, 34, 39, 41, 44, 45, 48, 50, 51, 60, 61, 63, 69, 71, 72, 73, 74, 75, 81, 82, 97, 98, 102, 104, 105, 108, 109, 113, 115, 124, 125, 136, 142, 145, 147, 149, 150, 151, 152, 154, 155, 157, 159, 161, 165, 166, 167, 168, 169, 172, 174, 175, 176, 181, 182, 187, 188, 191, 218, 221, 222, 225, 226, 227, 229, 240, 251, 252, 253, 254, 256, 257, 258, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 302, 303, 306, 307, 312, 313, 317, 320, 323, 324, 325, 327, 330, 333, 334, 344, 356, 357, 371, 372, 382, 383, 386, 393, 394, 399, 416, 418, 431, 438, 439, 440], "period": [6, 41, 66, 69, 108, 251, 252, 253, 254, 256, 257, 287, 288, 289, 293, 294, 295, 301, 328, 329, 330, 331, 332, 333, 334, 380, 406, 408, 420], "auditori": [6, 66, 69, 72, 77, 103, 105, 171, 215, 224, 225, 231, 237], "stimul": [6, 72, 161], "versu": [6, 66, 69, 79, 80, 94, 98, 161, 162, 174], "analys": [6, 100, 115, 126, 154, 161, 166, 170, 171, 172, 173, 174, 175, 179, 181, 228, 425, 438], "nativ": [6, 60, 73, 113, 125, 135, 154, 170, 238, 283, 290, 302, 310, 313, 316, 334, 394, 399, 439], "scan": [6, 23, 33, 36, 55, 58, 63, 65, 66, 68, 94, 100, 115, 147, 154, 158, 166, 174, 179, 225, 258, 259, 283, 285, 290, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 380, 406, 408, 411, 412, 414, 420], "preprocess": [6, 11, 23, 29, 34, 37, 40, 41, 44, 89, 92, 99, 101, 104, 108, 111, 115, 116, 125, 134, 154, 159, 160, 166, 167, 171, 174, 181, 195, 196, 216, 234, 240, 283, 286, 301, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 408, 420, 428, 440], "sensit": [6, 40, 48, 56, 115, 171, 174, 301, 325, 344, 420], "would": [6, 9, 14, 42, 50, 58, 64, 66, 67, 75, 78, 103, 111, 118, 126, 147, 151, 154, 161, 168, 169, 170, 171, 177, 250, 251, 252, 253, 254, 256, 257, 259, 283, 285, 286, 290, 296, 298, 321, 335, 340, 380], "like": [6, 10, 11, 16, 34, 36, 40, 47, 49, 54, 56, 58, 66, 79, 81, 86, 89, 91, 92, 94, 100, 118, 126, 142, 146, 149, 150, 151, 154, 167, 168, 169, 170, 171, 173, 174, 177, 178, 180, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 270, 273, 274, 275, 276, 278, 280, 283, 285, 286, 296, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 379, 380, 384, 386, 387, 389, 390, 392, 393, 394, 395, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 424, 426, 437, 440], "obtain": [6, 15, 22, 42, 43, 49, 54, 58, 63, 66, 69, 75, 77, 91, 94, 102, 105, 149, 154, 155, 156, 158, 160, 161, 163, 166, 168, 171, 174, 181, 189, 198, 200, 208, 220, 225, 242, 243, 246, 250, 256, 257, 300, 305, 316, 320, 331, 332, 334, 344, 358, 385, 408], "correct": [6, 42, 48, 56, 75, 77, 79, 81, 92, 101, 102, 105, 106, 115, 124, 125, 142, 145, 151, 154, 155, 166, 169, 171, 172, 174, 177, 235, 249, 251, 252, 253, 254, 256, 257, 298, 299, 324, 325, 344, 380, 421, 440], "normal": [6, 24, 31, 37, 44, 55, 58, 69, 70, 101, 104, 108, 111, 117, 129, 154, 161, 168, 169, 170, 171, 174, 188, 191, 197, 223, 234, 275, 276, 424], "smooth": [6, 29, 34, 42, 44, 49, 55, 70, 75, 81, 83, 94, 96, 101, 105, 113, 115, 135, 136, 154, 158, 160, 161, 162, 168, 176, 178, 179, 216, 251, 252, 253, 254, 258, 259, 283, 296, 298, 313, 318, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 344, 384, 395, 397, 399, 405, 406, 408, 410, 439, 440], "conduct": [6, 32, 118, 171], "fil": [6, 237, 238], "geraint": 6, "ree": 6, "under": [6, 9, 102, 151, 154, 161, 162, 166, 167, 168, 169, 170, 171, 174, 177, 255, 305, 316, 317, 322, 337, 340, 344], "direct": [6, 15, 40, 51, 94, 98, 115, 136, 145, 154, 156, 157, 169, 177, 181, 202, 208, 234, 240, 251, 252, 283, 296, 318, 320, 321, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 361, 363, 364, 365, 367, 368, 369, 370, 371, 374, 375, 379, 381, 384, 386, 387, 390, 392, 393, 394, 409, 418, 437, 440], "karl": 6, "friston": [6, 115, 301, 420], "method": [6, 14, 15, 26, 31, 36, 39, 44, 46, 48, 58, 59, 86, 89, 91, 92, 94, 100, 105, 113, 115, 116, 118, 125, 126, 127, 131, 135, 139, 142, 145, 146, 147, 149, 151, 152, 154, 155, 156, 158, 162, 163, 167, 168, 169, 174, 175, 176, 179, 180, 181, 187, 188, 189, 199, 210, 216, 227, 230, 232, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 273, 274, 275, 276, 278, 283, 296, 298, 303, 306, 307, 308, 313, 316, 317, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 384, 393, 400, 402, 403, 404, 405, 406, 407, 408, 416, 420, 421, 437, 439, 440], "develop": [6, 47, 55, 56, 85, 89, 91, 92, 115, 137, 142, 152, 154, 155, 156, 158, 160, 168, 169, 176, 177, 189, 210, 216, 380], "spm": [6, 10, 11, 36, 49, 61, 66, 68, 71, 79, 86, 94, 115, 150, 151, 154, 165, 170, 174, 179, 197, 237, 238, 283, 285, 290, 293, 294, 295, 312, 440], "accord": [6, 41, 44, 69, 94, 100, 108, 124, 134, 135, 136, 139, 145, 147, 151, 154, 159, 166, 169, 188, 195, 207, 249, 251, 252, 253, 254, 256, 257, 270, 301, 321, 344, 389, 390, 395, 397, 398, 402, 404, 407, 408, 419, 420, 437], "96": [6, 30, 32, 33, 49, 52, 72, 84], "tr": [6, 11, 23, 25, 33, 63, 68, 71, 108, 125, 138, 150, 154, 171, 174, 180, 216, 287, 288, 289, 293, 294, 295], "altern": [6, 9, 16, 20, 22, 52, 54, 58, 66, 157, 158, 166, 174, 181, 273, 275, 276, 344, 440], "42": [6, 24, 30, 33, 36, 43, 49, 62, 91, 92, 100, 104, 109, 437, 439], "block": [6, 33, 51, 56, 58, 63, 100, 101, 116, 126, 154, 161, 168, 180, 391, 426], "bi": 6, "syllab": 6, "word": [6, 14, 77, 94, 103, 105, 118, 161, 162, 169, 230, 232], "binaur": 6, "60": [6, 15, 33, 40, 41, 63, 99, 115, 229, 437], "fm00223_004": 6, "2t": 6, "siemen": 6, "magnetom": 6, "vision": 6, "64": [6, 10, 11, 19, 21, 33, 34, 36, 47, 49, 66, 79, 84, 86, 94, 146, 151, 154, 179, 195, 198, 199, 202], "contigu": [6, 158, 168, 344], "64x64x64": 6, "3mm": 6, "took": [6, 48, 92], "05": [6, 12, 30, 32, 33, 44, 45, 51, 53, 75, 76, 77, 79, 81, 99, 109, 171, 196, 197, 200, 205, 206, 207, 210, 211, 234, 237, 238, 240, 273, 275, 276, 278, 439], "repeat": [6, 58, 66, 68, 161, 171], "arbitrarili": [6, 257], "subject_data": [6, 70, 71, 170], "abid": [6, 115, 133, 154, 169, 195], "bid": [6, 60, 72, 73, 97, 100, 109, 113, 124, 126, 142, 145, 147, 149, 151, 154, 170, 174, 212, 217, 222, 235, 236, 249, 250, 283, 286, 296, 324, 325, 326, 333, 382, 386, 388, 399, 416, 417, 418, 439], "organ": [6, 58, 115, 129, 142, 148, 150, 154, 169, 174, 176, 207, 211, 214, 298, 325, 344, 360, 423, 424, 438], "fetch_spm_auditori": [6, 70], "sep": [6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 72, 94, 102, 159, 179, 345, 347, 348], "n": [6, 14, 26, 41, 42, 49, 51, 56, 57, 58, 62, 70, 71, 77, 79, 80, 84, 91, 94, 99, 100, 102, 103, 105, 106, 107, 114, 115, 119, 120, 122, 123, 127, 129, 132, 154, 162, 168, 169, 171, 197, 206, 213, 216, 217, 227, 235, 258, 259, 270, 274, 275, 276, 283, 292, 324, 325, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 390, 408, 411, 412, 420, 438], "spm_auditori": [6, 237], "sub001": [6, 237, 238], "fm00223": 6, "fm00223_005": 6, "fm00223_006": 6, "fm00223_007": 6, "fm00223_008": 6, "anatomi": [6, 42, 69, 75, 211], "plot_anat": [6, 15, 18, 50, 149, 154, 159, 387, 394, 437], "cbar_tick_format": [6, 25, 146, 149, 154, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 384, 386, 387, 389, 393, 394, 395, 397, 398], "0x7f0a3a50d1f0": 6, "next": [6, 14, 54, 55, 58, 63, 64, 65, 66, 69, 70, 75, 78, 79, 80, 81, 108, 137, 140, 149, 154, 156, 167, 168, 169, 171, 177], "concaten": [6, 37, 47, 49, 53, 57, 100, 155, 180, 302, 308, 324, 408], "averag": [6, 9, 24, 30, 37, 49, 51, 70, 94, 115, 145, 148, 154, 158, 162, 163, 173, 174, 220, 228, 239, 245, 251, 252, 265, 313, 318, 324, 391, 395, 397, 406, 424], "activ": [6, 14, 15, 16, 30, 32, 40, 41, 49, 64, 66, 69, 70, 71, 76, 77, 79, 80, 81, 100, 108, 115, 117, 155, 156, 159, 160, 161, 165, 166, 168, 169, 170, 171, 173, 174, 176, 177, 181, 189, 197, 205, 208, 227, 228, 229, 248, 278, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 378, 408, 410, 438], "fmri_img": [6, 34, 36, 37, 64, 65, 66, 67, 69, 70, 71, 94, 108, 170], "must": [6, 34, 72, 94, 151, 154, 161, 162, 164, 166, 168, 169, 170, 171, 177, 179, 181, 188, 189, 191, 197, 219, 251, 252, 253, 254, 255, 256, 257, 258, 270, 274, 283, 296, 297, 298, 301, 307, 313, 316, 318, 323, 324, 327, 328, 330, 331, 333, 336, 338, 339, 340, 341, 342, 343, 344, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 385, 392, 394, 395, 396, 397, 398, 400, 402, 404, 406, 411, 414, 415, 417, 418, 420, 421, 424, 437], "descript": [6, 58, 116, 118, 124, 126, 145, 149, 154, 169, 177, 179, 180, 195, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 227, 230, 231, 232, 233, 240, 285, 298, 301, 305, 313, 318, 319, 325, 344, 440], "typic": [6, 72, 78, 79, 100, 158, 160, 162, 166, 169, 171, 174, 179, 180, 181, 241, 253, 254, 257, 273, 323, 334, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 392, 393, 394, 401, 406, 437], "event": [6, 60, 62, 63, 65, 66, 68, 69, 70, 71, 73, 100, 101, 108, 113, 115, 126, 145, 146, 154, 161, 171, 172, 226, 283, 284, 285, 290, 385, 438, 439, 440], "tsv": [6, 47, 52, 53, 55, 56, 58, 60, 62, 73, 101, 108, 113, 126, 154, 170, 216, 323, 324, 325, 385, 439], "read_tabl": [6, 65, 66, 69, 70, 71], "onset": [6, 33, 63, 65, 66, 68, 72, 100, 126, 145, 154, 170, 238, 283, 284, 285, 287, 288, 289, 290, 293, 294, 295, 385], "durat": [6, 33, 63, 66, 68, 72, 126, 154, 170, 171, 179, 285, 290, 385], "trial_typ": [6, 33, 63, 65, 66, 72, 100, 101, 290, 385], "84": [6, 33, 91, 100, 115, 303, 324], "126": [6, 33, 41, 43, 56, 67, 91, 148, 154], "168": [6, 33, 41, 45, 54, 55, 56, 58, 89, 91, 159], "210": [6, 22, 33, 41, 69, 72, 115, 220, 301, 420], "294": [6, 33, 41], "336": [6, 33, 41, 76, 82, 439], "378": [6, 33], "420": [6, 33], "462": [6, 33], "504": [6, 33, 62], "13": [6, 20, 25, 27, 33, 52, 56, 58, 59, 62, 66, 67, 71, 73, 77, 91, 103, 107, 115, 119, 125, 127, 152, 154, 158, 166, 187, 199, 200, 208, 215, 234, 270, 274, 280, 331, 332, 344, 380, 411, 412, 439], "546": [6, 33], "588": [6, 33], "15": [6, 24, 27, 30, 33, 49, 51, 61, 62, 66, 70, 72, 77, 78, 84, 91, 94, 102, 103, 107, 109, 115, 119, 123, 126, 135, 139, 149, 152, 154, 187, 197, 209, 331, 332, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 380, 411, 412, 439], "630": [6, 33], "firstlevelmodel": [6, 61, 64, 65, 66, 67, 70, 71, 100, 147, 149, 151, 154, 170, 286, 296, 298, 323, 418], "design": [6, 33, 41, 44, 60, 61, 62, 64, 65, 67, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 101, 105, 108, 113, 115, 125, 145, 146, 147, 149, 154, 161, 164, 168, 169, 171, 172, 173, 174, 225, 270, 273, 274, 275, 276, 281, 283, 284, 290, 292, 296, 297, 298, 299, 306, 312, 323, 326, 382, 383, 394, 399, 418, 439, 440], "matrix": [6, 22, 33, 37, 40, 41, 44, 47, 50, 51, 53, 61, 62, 63, 64, 66, 69, 70, 71, 74, 75, 76, 77, 79, 80, 81, 82, 84, 91, 92, 100, 101, 103, 105, 108, 113, 124, 125, 137, 142, 145, 154, 158, 159, 161, 162, 168, 171, 172, 173, 174, 175, 176, 179, 180, 181, 187, 188, 189, 190, 191, 192, 194, 230, 232, 251, 252, 253, 254, 256, 257, 258, 259, 270, 273, 274, 275, 276, 281, 283, 284, 290, 292, 296, 297, 298, 303, 313, 314, 316, 319, 323, 326, 327, 330, 333, 336, 338, 339, 341, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 382, 383, 391, 405, 406, 407, 418, 439, 440], "first_level": [6, 33, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 78, 100, 101, 108, 126, 147, 149, 151, 154, 170, 385, 418], "level": [6, 9, 14, 15, 18, 33, 39, 48, 49, 51, 56, 63, 70, 71, 73, 75, 82, 97, 104, 105, 109, 115, 124, 125, 126, 145, 146, 151, 154, 157, 158, 162, 165, 168, 169, 171, 172, 174, 177, 179, 185, 187, 188, 189, 191, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 271, 273, 275, 276, 278, 279, 283, 286, 290, 292, 296, 297, 298, 299, 301, 306, 307, 312, 317, 320, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 340, 342, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 381, 382, 383, 386, 387, 388, 392, 393, 394, 395, 396, 397, 398, 399, 401, 405, 406, 407, 408, 413, 416, 417, 418, 420, 424, 437, 439, 440], "t_r": [6, 11, 33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 62, 65, 66, 69, 70, 89, 91, 92, 99, 100, 108, 139, 150, 154, 181, 251, 252, 253, 254, 256, 257, 258, 259, 266, 283, 285, 286, 290, 301, 328, 329, 330, 331, 332, 333, 334, 380, 406, 408, 420], "noise_model": [6, 33, 66, 283, 286, 292], "ar1": [6, 33, 66, 283, 286, 292], "covari": [6, 42, 46, 57, 58, 59, 61, 64, 69, 102, 113, 115, 135, 154, 156, 157, 159, 175, 187, 188, 189, 190, 191, 205, 216, 227, 270, 272, 273, 274, 275, 276, 327, 332, 344, 377, 381, 391, 399, 400, 439, 440], "lag": [6, 47, 65, 66], "depend": [6, 14, 15, 39, 66, 89, 95, 100, 102, 105, 115, 124, 129, 134, 139, 142, 152, 154, 162, 166, 168, 169, 171, 174, 177, 179, 195, 199, 200, 203, 204, 208, 211, 216, 227, 251, 252, 253, 254, 256, 257, 258, 259, 270, 274, 283, 296, 298, 299, 306, 330, 333, 343, 344, 392, 406, 417, 418, 437], "rescal": [6, 23, 33, 40, 80, 125, 148, 154, 345, 347, 348, 383, 395, 397, 398, 404], "seri": [6, 33, 46, 47, 51, 56, 60, 66, 73, 92, 94, 95, 97, 109, 113, 115, 117, 124, 129, 146, 150, 152, 154, 155, 157, 159, 161, 166, 171, 172, 178, 179, 180, 187, 222, 234, 235, 237, 240, 249, 258, 259, 270, 283, 286, 296, 298, 301, 302, 313, 318, 324, 327, 331, 332, 333, 334, 335, 338, 357, 372, 380, 383, 394, 410, 411, 412, 417, 421, 429, 439, 440], "varianc": [6, 33, 40, 42, 48, 55, 56, 57, 58, 66, 70, 80, 142, 145, 146, 154, 161, 166, 168, 174, 181, 187, 191, 251, 252, 253, 254, 258, 259, 271, 273, 275, 276, 279, 280, 283, 292, 296, 301, 307, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 380, 406, 408, 411, 420, 421], "hrf_model": [6, 33, 61, 63, 65, 66, 69, 71, 108, 283, 285, 286, 290], "canon": [6, 50, 66, 71, 84, 132, 154, 174, 185, 258], "hrf": [6, 65, 66, 68, 69, 108, 149, 151, 154, 161, 172, 174, 283, 285, 287, 288, 289, 290, 293, 294, 295, 440], "dispers": [6, 66, 68, 170, 273, 275, 276, 283, 285, 287, 290, 293], "deriv": [6, 46, 59, 62, 68, 69, 71, 100, 101, 104, 108, 113, 126, 146, 148, 149, 154, 160, 168, 170, 174, 175, 181, 195, 216, 258, 259, 283, 285, 286, 287, 289, 290, 293, 295, 296, 298, 309, 321, 322, 323, 324, 325, 345, 346, 373, 380, 392, 394, 395, 397, 399, 406, 439], "drift_model": [6, 33, 63, 66, 70, 71, 170, 283, 286, 290], "cosin": [6, 33, 66, 69, 70, 71, 108, 124, 126, 147, 154, 283, 286, 290, 324, 420], "drift": [6, 69, 70, 71, 100, 108, 283, 290, 324, 420], "slow": [6, 36, 44, 66, 167, 168, 169, 181, 437], "oscil": [6, 66, 115], "high_pass": [6, 33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 66, 71, 89, 91, 92, 99, 100, 139, 154, 181, 251, 252, 253, 254, 256, 257, 258, 259, 266, 283, 286, 290, 301, 324, 325, 328, 329, 330, 331, 332, 333, 334, 406, 408, 419, 420], "hz": [6, 33, 66, 71, 181, 283, 290], "cutoff": [6, 66, 69, 71, 89, 108, 147, 154, 178, 251, 252, 253, 254, 256, 257, 301, 328, 329, 330, 331, 332, 333, 334, 406, 408, 419, 420, 440], "frequenc": [6, 66, 122, 154, 181, 251, 252, 253, 254, 256, 257, 283, 290, 301, 324, 328, 329, 330, 331, 332, 333, 334, 406, 408, 419, 420], "invers": [6, 46, 58, 59, 98, 113, 144, 154, 156, 157, 161, 168, 175, 178, 189, 194, 205, 216, 273, 275, 276, 280, 327, 332, 377, 381, 390, 391, 399, 400, 405, 439, 440], "fmri_glm": [6, 64, 67, 70, 71, 170], "inspect": [6, 40, 48, 55, 66, 67, 70, 89, 92, 156, 161, 176, 283, 296], "repres": [6, 15, 20, 33, 35, 51, 52, 54, 55, 69, 76, 79, 94, 115, 134, 146, 154, 155, 156, 159, 160, 169, 171, 173, 174, 179, 180, 181, 199, 202, 216, 244, 245, 247, 283, 296, 305, 316, 327, 328, 329, 330, 331, 332, 333, 334, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 376, 381, 386, 390, 408, 411, 418, 422, 424, 437], "predictor": [6, 40, 170, 171, 275, 276, 325], "design_matrix": [6, 41, 61, 62, 65, 66, 69, 70, 71, 75, 76, 77, 78, 79, 80, 81, 108, 284, 290, 296, 297, 298, 326, 382, 383], "design_matrices_": [6, 65, 66, 70, 100], "formal": 6, "taken": [6, 66, 100, 162, 168, 286, 296, 298, 317, 328, 329, 331, 332, 334, 408], "implictili": 6, "plot_design_matrix": [6, 63, 65, 66, 73, 75, 78, 80, 100, 170, 173, 439], "write": [6, 41, 64, 113, 118, 124, 149, 151, 154, 168, 169, 177, 260, 261, 262, 323, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 416], "o": [6, 40, 41, 62, 64, 86, 100, 101, 108, 115, 129, 154, 169, 195, 197, 207, 214, 227, 324], "outdir": [6, 72], "mkdir": [6, 64, 72], "join": [6, 62, 64, 86, 103, 108, 169, 424, 438], "output_fil": [6, 15, 23, 358, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 392, 393, 394, 395, 396, 397, 398, 437], "png": [6, 9, 15, 23, 61, 175, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 392, 393, 394, 395, 396, 397, 398, 437], "respons": [6, 60, 70, 71, 72, 73, 79, 80, 113, 149, 154, 161, 170, 171, 174, 176, 177, 226, 283, 285, 287, 288, 289, 290, 293, 295, 382, 383, 394, 439], "profil": [6, 168, 169, 270, 274], "region": [6, 10, 15, 16, 19, 23, 40, 42, 43, 44, 46, 48, 49, 52, 55, 56, 58, 59, 66, 70, 71, 83, 96, 99, 113, 115, 124, 126, 127, 131, 133, 134, 137, 142, 145, 147, 149, 154, 155, 157, 160, 161, 167, 170, 171, 174, 176, 178, 180, 187, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 219, 228, 231, 258, 259, 265, 266, 306, 308, 311, 313, 314, 318, 320, 325, 327, 328, 329, 331, 332, 334, 357, 375, 376, 377, 378, 379, 381, 384, 391, 392, 393, 394, 396, 397, 399, 400, 416, 437, 439, 440], "xlabel": [6, 25, 30, 32, 34, 42, 48, 49, 51, 55, 58, 68, 99, 180], "access": [6, 33, 48, 56, 61, 62, 64, 66, 75, 115, 117, 125, 149, 154, 156, 160, 168, 169, 170, 178, 179, 181, 196, 197, 200, 205, 206, 207, 210, 211, 234, 237, 238, 240, 271, 358, 428, 440], "beta": [6, 26, 39, 42, 66, 71, 97, 109, 113, 115, 150, 152, 170, 174, 222, 227, 251, 252, 253, 254, 270, 273, 274, 275, 276, 283, 286, 302, 327, 333, 334, 357, 383, 394, 439], "role": [6, 149, 154], "potenti": [6, 55, 91, 94, 100, 115, 148, 154, 166, 169, 174, 177, 208, 298], "weight": [6, 29, 39, 42, 43, 44, 117, 118, 142, 154, 155, 162, 164, 165, 168, 169, 171, 181, 220, 230, 232, 251, 252, 253, 254, 256, 257, 280, 323, 400, 412, 440], "associ": [6, 14, 47, 72, 75, 77, 105, 124, 154, 161, 166, 169, 171, 173, 174, 197, 235, 255, 271, 298, 324, 325, 344, 417, 424], "nutshel": 6, "combin": [6, 15, 40, 41, 102, 104, 115, 124, 148, 154, 161, 166, 171, 174, 181, 229, 251, 252, 253, 254, 256, 257, 258, 259, 283, 296, 298, 324, 363, 364, 367, 368, 369, 370, 382], "consid": [6, 32, 39, 53, 54, 55, 66, 68, 80, 92, 94, 102, 104, 117, 129, 142, 149, 154, 166, 169, 211, 251, 252, 253, 254, 256, 257, 258, 259, 270, 274, 283, 285, 286, 290, 296, 298, 305, 311, 322, 329, 330, 332, 333, 338, 341, 344, 348, 393, 406, 409, 411, 412], "two": [6, 14, 24, 25, 34, 40, 48, 55, 56, 58, 60, 66, 67, 73, 74, 77, 82, 86, 88, 89, 94, 98, 100, 101, 102, 108, 113, 118, 124, 134, 137, 142, 145, 146, 154, 155, 158, 160, 161, 163, 165, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 179, 180, 181, 189, 193, 199, 218, 225, 238, 251, 252, 253, 254, 258, 259, 273, 275, 276, 283, 290, 296, 297, 298, 302, 308, 313, 316, 324, 325, 329, 332, 334, 344, 356, 383, 386, 388, 389, 394, 395, 396, 397, 398, 399, 404, 406, 408, 409, 410, 416, 417, 418, 423, 424, 437, 439, 440], "isol": [6, 70, 71, 100, 161, 171], "zero": [6, 9, 14, 20, 22, 23, 36, 39, 44, 47, 53, 54, 64, 67, 70, 77, 79, 94, 122, 142, 146, 150, 152, 154, 155, 159, 161, 162, 166, 167, 168, 171, 174, 180, 181, 187, 188, 189, 191, 234, 251, 252, 253, 254, 256, 257, 258, 270, 275, 276, 290, 296, 298, 301, 305, 318, 320, 324, 328, 329, 330, 331, 332, 333, 334, 335, 338, 341, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 393, 394, 396, 397, 406, 407, 408, 411, 412, 414, 415, 420], "16": [6, 13, 25, 30, 32, 33, 34, 39, 44, 45, 48, 49, 54, 58, 62, 66, 68, 76, 77, 79, 80, 82, 84, 91, 98, 103, 105, 109, 140, 147, 154, 168, 180, 206, 329, 332, 334, 408, 437, 439], "active_minus_rest": 6, "plot_contrast_matrix": [6, 62, 65, 66], "ax": [6, 9, 11, 18, 21, 22, 23, 24, 31, 38, 40, 49, 51, 57, 61, 63, 65, 66, 70, 75, 78, 79, 80, 84, 91, 100, 101, 105, 108, 111, 136, 146, 147, 154, 315, 316, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398], "label": [6, 9, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 47, 49, 52, 53, 54, 58, 61, 65, 66, 68, 69, 83, 91, 94, 96, 98, 100, 102, 103, 108, 111, 113, 115, 117, 124, 125, 131, 134, 139, 142, 146, 147, 149, 151, 152, 154, 156, 158, 161, 162, 164, 166, 169, 174, 179, 180, 181, 197, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 215, 219, 229, 251, 252, 253, 254, 255, 256, 257, 265, 279, 283, 286, 290, 292, 297, 321, 324, 325, 328, 331, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 379, 380, 381, 384, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 422, 439], "below": [6, 9, 16, 20, 22, 39, 44, 49, 52, 54, 58, 65, 70, 94, 115, 134, 154, 158, 161, 162, 166, 168, 169, 170, 171, 173, 177, 180, 181, 188, 189, 191, 195, 216, 251, 252, 253, 254, 256, 257, 259, 321, 328, 329, 330, 331, 332, 333, 334, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 386, 387, 389, 393, 394, 395, 398, 401, 406, 408, 419, 420, 437], "account": [6, 66, 76, 94, 166, 177, 181, 324, 328, 329, 331, 332, 334, 408], "eff_map": 6, "compute_contrast": [6, 33, 61, 62, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77, 79, 80, 81, 100, 101, 108, 124, 152, 154, 170, 283, 296, 298, 418], "output_typ": [6, 61, 64, 65, 66, 67, 70, 71, 75, 76, 77, 79, 80, 81, 100, 105, 283, 296, 344], "effect_s": [6, 67, 80, 100, 174, 271, 283, 296], "form": [6, 33, 40, 44, 49, 72, 105, 152, 154, 155, 156, 158, 159, 171, 174, 179, 187, 188, 189, 235, 236, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 278, 283, 286, 290, 296, 298, 299, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 344, 388, 401, 405, 406, 407, 408, 417, 418], "scale": [6, 15, 41, 49, 54, 61, 68, 70, 71, 72, 94, 115, 118, 132, 139, 149, 154, 162, 166, 181, 199, 225, 230, 232, 244, 245, 247, 256, 257, 270, 273, 274, 275, 276, 278, 283, 291, 296, 298, 299, 328, 329, 330, 331, 332, 333, 334, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 405, 406, 407, 417, 418, 420, 424, 440], "gaussian": [6, 44, 79, 94, 115, 155, 168, 171, 181, 182, 188, 191, 318], "z_map": [6, 33, 61, 62, 64, 65, 66, 70, 71, 75, 76, 77, 79, 81, 101, 283, 296], "z_score": [6, 61, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77, 79, 80, 81, 108, 271, 283, 296], "top": [6, 12, 15, 17, 25, 44, 56, 103, 145, 154, 169, 176, 180, 250, 381, 386, 387, 390, 392, 393, 394, 401, 437], "axial": [6, 14, 94, 283, 296, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 379, 381, 384, 386, 387, 390, 392, 393, 394, 418], "black_bg": [6, 13, 14, 36, 71, 148, 154, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 381, 384, 386, 387, 390, 392, 393, 394, 401, 402, 404], "minu": [6, 118, 171], "worri": [6, 24, 117], "valid": [6, 28, 32, 33, 36, 37, 40, 42, 44, 45, 51, 99, 102, 105, 106, 107, 113, 125, 126, 129, 132, 145, 149, 150, 154, 155, 157, 162, 165, 169, 181, 189, 199, 202, 208, 219, 227, 251, 252, 253, 254, 255, 256, 257, 283, 284, 285, 290, 301, 305, 308, 313, 318, 319, 324, 325, 328, 331, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 404, 411, 417, 422, 423, 424, 439, 440], "procedur": [6, 31, 76, 77, 79, 84, 87, 102, 156, 161, 166, 171, 173, 174, 225, 282, 298, 344, 420, 433], "arbitrari": [6, 65, 76, 171, 177, 255, 296, 298], "risk": [6, 186], "aka": [6, 66, 108, 158, 171, 278], "control": [6, 8, 9, 11, 14, 15, 20, 23, 27, 33, 38, 40, 48, 56, 76, 79, 98, 113, 115, 125, 127, 135, 136, 140, 142, 146, 152, 154, 155, 159, 160, 161, 162, 165, 166, 168, 169, 171, 174, 178, 187, 195, 223, 230, 232, 259, 278, 282, 283, 296, 299, 302, 313, 320, 324, 325, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 384, 386, 387, 389, 393, 394, 395, 397, 398, 399, 405, 418, 424, 437, 439, 440], "posit": [6, 9, 14, 16, 17, 24, 48, 51, 58, 66, 71, 74, 79, 80, 81, 82, 84, 94, 99, 113, 115, 117, 145, 149, 154, 161, 166, 168, 171, 173, 174, 181, 188, 191, 195, 225, 227, 278, 283, 296, 298, 299, 320, 344, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 378, 379, 381, 384, 386, 387, 389, 390, 392, 393, 394, 398, 399, 401, 402, 417, 418, 424, 437, 439], "fpr": [6, 33, 81, 173, 174, 283, 296, 299, 418], "alpha": [6, 15, 23, 24, 37, 39, 40, 44, 48, 57, 68, 75, 76, 77, 81, 106, 151, 155, 160, 167, 171, 188, 189, 191, 256, 257, 259, 273, 275, 276, 278, 282, 283, 296, 299, 320, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 381, 386, 390, 392, 393, 395, 397, 398, 418, 437], "certain": [6, 56, 139, 154, 161, 169, 171, 177, 230, 316, 392], "001": [6, 41, 44, 62, 76, 79, 80, 81, 101, 171, 188, 189, 191, 256, 257, 283, 296, 299, 418], "chanc": [6, 33, 37, 51, 77, 79, 146, 154, 165, 166, 171, 440], "declar": [6, 169, 171, 188, 191], "inact": [6, 171], "threshold_stats_img": [6, 75, 77, 81, 173, 320], "_": [6, 22, 30, 36, 37, 42, 44, 49, 51, 57, 62, 67, 75, 77, 80, 94, 98, 100, 101, 102, 105, 106, 108, 124, 147, 151, 152, 154, 161, 169, 235, 236, 286, 323], "height_control": [6, 75, 77, 81, 283, 296, 299, 418], "uncorrect": [6, 62, 76, 79, 80, 81, 101], "291": [6, 33, 41, 66, 72], "n_voxel": [6, 55, 77, 79, 92, 98, 161, 164, 171, 258, 271, 273, 275, 276, 279, 283, 291, 292, 408], "ten": [6, 81, 406], "hundr": [6, 49, 406], "conserv": [6, 77, 79, 102, 166, 171, 188, 193], "solut": [6, 65, 66, 155, 156, 162, 167, 168, 176, 179, 259], "famili": [6, 81, 102, 124, 125, 136, 151, 154, 166, 169, 174, 298, 344, 408, 410], "wise": [6, 15, 40, 47, 55, 81, 94, 100, 102, 124, 151, 154, 166, 170, 174, 181, 251, 252, 253, 254, 298, 344], "probabl": [6, 11, 21, 31, 32, 39, 43, 48, 61, 66, 77, 79, 81, 92, 94, 156, 166, 168, 171, 174, 176, 177, 203, 204, 234], "sai": [6, 65, 70, 98, 118, 169, 171, 273], "bonferroni": [6, 81, 102, 105, 106, 166, 171, 174, 283, 296, 299, 418], "934": 6, "inde": [6, 42, 49, 86, 155, 156, 164, 171, 284, 437], "popular": [6, 48, 175, 179, 251, 252], "proport": [6, 49, 51, 70, 74, 82, 99, 113, 159, 171, 173, 174, 225, 275, 278, 296, 390, 394, 399, 439], "discoveri": [6, 23, 76, 77, 79, 81, 115, 171, 174, 176, 240, 278], "among": [6, 79, 125, 154, 171, 174, 199, 251, 252, 253, 254], "fdr": [6, 75, 77, 81, 173, 174, 282, 283, 296, 299, 418], "904": 6, "discard": [6, 66, 118, 171, 194, 230, 250, 286, 321, 338, 341, 420, 424], "small": [6, 18, 49, 51, 58, 65, 86, 99, 102, 103, 128, 130, 131, 154, 158, 159, 166, 168, 169, 176, 177, 255, 271, 301, 392, 393, 406, 409, 420, 424, 437], "cluster": [6, 19, 31, 32, 33, 39, 46, 59, 62, 74, 79, 81, 82, 86, 91, 113, 115, 124, 125, 142, 145, 149, 150, 151, 154, 157, 163, 164, 166, 171, 173, 174, 175, 176, 199, 200, 216, 225, 253, 254, 278, 283, 292, 296, 298, 299, 306, 308, 313, 320, 331, 344, 364, 384, 391, 393, 394, 399, 405, 406, 407, 411, 413, 414, 417, 418, 439, 440], "remov": [6, 30, 32, 33, 35, 40, 41, 42, 77, 86, 89, 103, 104, 105, 106, 115, 117, 122, 124, 126, 129, 133, 134, 135, 137, 139, 140, 142, 144, 145, 147, 149, 152, 154, 162, 167, 168, 177, 178, 180, 187, 234, 236, 283, 299, 301, 305, 307, 318, 320, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 344, 380, 392, 408, 409, 411, 412, 416, 419, 420, 421, 440], "cluster_threshold": [6, 61, 70, 81, 149, 154, 283, 296, 299, 320, 417, 418], "clean_map": 6, "zscore": [6, 125, 126, 142, 154, 187, 258, 328, 329, 330, 331, 332, 333, 334, 380, 420], "active_vs_rest_z_map": 6, "active_vs_rest_eff_map": 6, "furthermor": [6, 42, 55], "extract": [6, 22, 28, 30, 32, 40, 43, 45, 46, 48, 49, 59, 60, 62, 72, 73, 83, 86, 92, 94, 96, 98, 100, 101, 104, 113, 118, 123, 124, 125, 127, 134, 135, 137, 138, 139, 140, 146, 150, 151, 152, 154, 157, 158, 161, 164, 172, 174, 176, 177, 178, 187, 196, 202, 203, 205, 208, 213, 214, 216, 219, 227, 231, 234, 251, 252, 253, 254, 255, 258, 259, 265, 266, 283, 290, 296, 297, 298, 307, 308, 310, 313, 320, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 341, 357, 376, 377, 378, 379, 381, 390, 391, 392, 394, 399, 400, 402, 406, 408, 409, 410, 411, 412, 414, 416, 418, 421, 424, 433, 437, 439, 440], "report": [6, 49, 52, 53, 54, 56, 70, 89, 91, 92, 103, 115, 142, 147, 149, 151, 152, 154, 171, 172, 177, 181, 210, 278, 283, 296, 328, 329, 330, 331, 332, 333, 334, 344, 395, 397, 398, 408, 438], "tabl": [6, 33, 62, 70, 91, 101, 125, 150, 154, 325, 417], "get_clusters_t": [6, 62, 70, 125, 146, 150, 151, 154], "stat_threshold": [6, 70, 417], "20": [6, 21, 24, 29, 33, 39, 41, 44, 45, 48, 50, 52, 53, 54, 57, 58, 62, 70, 72, 78, 81, 91, 94, 100, 103, 106, 115, 122, 127, 132, 154, 155, 159, 161, 199, 208, 227, 251, 252, 253, 254, 256, 257, 258, 259, 424, 439], "id": [6, 33, 62, 70, 71, 103, 107, 118, 125, 154, 195, 197, 206, 207, 210, 230, 232, 240, 283, 331, 417], "y": [6, 14, 15, 24, 31, 33, 34, 35, 36, 37, 40, 41, 44, 52, 54, 58, 62, 70, 71, 84, 92, 94, 101, 102, 105, 106, 111, 118, 134, 136, 139, 151, 154, 161, 162, 166, 169, 174, 177, 180, 181, 187, 188, 189, 205, 228, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 265, 266, 270, 273, 274, 275, 276, 283, 291, 292, 296, 298, 303, 327, 328, 329, 330, 331, 332, 333, 334, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 381, 384, 386, 387, 390, 392, 393, 394, 395, 396, 397, 398, 401, 404, 405, 406, 407, 408, 409, 417, 418, 437], "peak": [6, 33, 62, 64, 67, 70, 162, 164, 168, 375, 408, 410, 417], "stat": [6, 23, 33, 62, 64, 68, 76, 79, 94, 101, 103, 107, 108, 115, 151, 154, 172, 180, 188, 191, 271, 280, 283, 296, 320, 323, 398, 402, 404, 417, 418, 437], "size": [6, 9, 15, 22, 23, 26, 33, 40, 44, 48, 49, 53, 58, 62, 69, 77, 79, 80, 81, 84, 91, 94, 102, 103, 105, 108, 111, 126, 129, 139, 140, 142, 149, 154, 159, 166, 167, 168, 171, 227, 234, 283, 296, 298, 299, 320, 328, 329, 331, 332, 336, 339, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 381, 390, 391, 395, 397, 398, 400, 403, 405, 406, 407, 408, 409, 410, 417, 418, 419, 424], "mm3": [6, 33, 62, 91, 408, 410, 417], "811979": 6, "4050": 6, "1a": [6, 33, 62], "63": [6, 32, 33, 62, 93, 115, 198, 206], "36": [6, 15, 16, 17, 33, 58, 62, 90, 91, 93, 111, 136, 139, 154, 199, 437], "601922": 6, "1b": [6, 62], "435063": 6, "1c": [6, 62], "48": [6, 20, 33, 53, 62, 72, 87, 91, 96, 198, 203, 205, 228, 303, 439], "39": [6, 15, 33, 51, 54, 59, 72, 91, 127, 129, 132, 154, 198, 205, 216], "364058": 6, "605128": 6, "1512": 6, "2a": [6, 62], "45": [6, 30, 32, 33, 55, 62, 71, 73, 91, 106, 439], "590200": 6, "27": [6, 9, 15, 16, 17, 27, 30, 33, 45, 62, 64, 67, 90, 91, 93, 103, 115, 325, 408, 410, 437, 439], "253889": 6, "972": 6, "3a": [6, 62, 115, 210, 239], "51": [6, 9, 33, 48, 53, 62, 82, 115, 160, 199, 258], "968355": 6, "3b": 6, "54": [6, 33, 62, 91, 100, 115, 199, 220, 245], "565609": 6, "087451": 6, "1188": [6, 51, 52], "18": [6, 12, 27, 31, 33, 45, 55, 58, 62, 72, 91, 103, 107, 115, 120, 132, 139, 149, 154, 181, 216, 227, 255, 395, 397, 398, 437, 439], "807510": 6, "594": [6, 33], "5a": [6, 33, 62], "21": [6, 21, 27, 33, 48, 54, 62, 66, 77, 91, 103, 111, 112, 129, 147, 152, 154, 240, 439], "646352": 6, "5b": [6, 33, 62], "33": [6, 33, 43, 62, 72, 91, 115, 200, 216], "416271": 6, "57": [6, 31, 33, 41, 62, 91, 109, 115, 119, 122, 139, 154, 199, 439], "710963": 6, "702": [6, 33], "6a": [6, 62], "633746": 6, "6b": 6, "66": [6, 16, 17, 33, 58, 62, 90, 93], "796135": 6, "6c": 6, "69": [6, 11, 33, 72, 79], "254544": 6, "17": [6, 7, 23, 27, 30, 32, 33, 41, 42, 47, 48, 61, 62, 73, 77, 80, 91, 103, 115, 139, 154, 168, 197, 207, 211, 227, 439], "93": [6, 30, 32, 33, 41, 77, 91, 201], "522477": 6, "621": [6, 33, 99, 109, 439], "7a": [6, 33, 62], "99": [6, 12, 30, 32, 33, 58, 93, 148, 154, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "713852": 6, "19": [6, 30, 33, 53, 62, 77, 91, 103, 115, 124, 127, 129, 142, 154, 196, 197, 205, 206, 207, 210, 211, 234, 237, 238, 275, 276], "7b": 6, "90": [6, 9, 12, 22, 30, 32, 33, 43, 47, 50, 53, 56, 63, 77, 79, 91, 103, 115, 127, 140, 148, 154, 159, 324, 325, 395, 397, 398, 401, 421, 437], "270733": 6, "7c": 6, "085568": 6, "24": [6, 33, 45, 49, 51, 58, 62, 70, 91, 103, 126, 147, 154, 283, 285, 286, 290, 324], "331806": 6, "648": [6, 33, 62], "22": [6, 33, 53, 59, 62, 70, 73, 86, 91, 96, 103, 107, 115, 129, 140, 149, 154, 201, 303, 439], "8a": [6, 33], "700088": 6, "23": [6, 33, 34, 36, 44, 45, 62, 72, 91, 94, 96, 100, 103, 115, 199, 208, 257, 439], "8b": 6, "037845": 6, "8c": 6, "527477": 6, "25": [6, 15, 22, 23, 27, 30, 32, 33, 39, 40, 41, 45, 62, 77, 91, 94, 95, 98, 103, 119, 154, 156, 227, 273, 275, 276, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 392, 400, 402, 403, 404, 439], "835099": 6, "837": 6, "26": [6, 14, 27, 33, 47, 59, 61, 62, 72, 75, 91, 103, 109, 132, 154, 409, 439], "9a": 6, "615642": 6, "9b": 6, "091568": 6, "to_csv": [6, 72], "baselin": [6, 30, 32, 115, 145, 146, 154, 162, 164, 198, 271, 291], "anoth": [6, 39, 66, 69, 79, 89, 131, 136, 154, 161, 168, 169, 171, 176, 178, 179, 187, 256, 257, 302, 303, 322, 416, 437, 440], "seek": [6, 77, 105, 160, 392], "whether": [6, 9, 70, 89, 94, 102, 140, 154, 161, 169, 171, 177, 181, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 216, 219, 220, 221, 225, 227, 228, 229, 230, 232, 234, 240, 258, 259, 280, 298, 299, 305, 320, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 344, 345, 347, 348, 386, 389, 394, 395, 396, 398, 406, 408, 417, 418, 420, 421], "possibli": [6, 66, 181], "three": [6, 14, 19, 24, 32, 40, 49, 63, 65, 66, 75, 89, 94, 115, 140, 148, 154, 168, 169, 177, 179, 216, 283, 296, 316, 318, 355, 357, 360, 374, 379, 381, 384, 385, 386, 387, 390, 392, 393, 394, 418, 424], "higher": [6, 64, 67, 117, 134, 154, 155, 166, 171, 188, 208, 251, 252, 253, 254, 256, 257, 258, 259, 283, 296, 302, 313, 328, 329, 330, 331, 332, 333, 334, 406, 407, 408, 419], "dimension": [6, 26, 49, 71, 94, 129, 146, 151, 154, 168, 176, 193, 194, 202, 208, 227, 258, 259, 271, 302, 343, 405, 406, 407], "explain": [6, 40, 42, 48, 56, 66, 70, 145, 154, 158, 161, 169, 171, 176, 181, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "might": [6, 34, 61, 104, 160, 164, 166, 171, 174, 177, 179, 201, 216, 290, 319, 325, 334, 336, 337, 338, 340, 341, 387, 404], "specif": [6, 14, 15, 16, 17, 30, 32, 33, 48, 49, 61, 62, 63, 64, 65, 66, 67, 69, 71, 76, 79, 80, 84, 94, 101, 108, 115, 116, 121, 132, 145, 151, 154, 155, 158, 159, 160, 161, 162, 164, 166, 169, 171, 173, 174, 176, 177, 178, 181, 217, 227, 232, 235, 236, 271, 273, 275, 276, 297, 301, 321, 323, 329, 332, 334, 344, 376, 395, 396, 397, 398, 404, 408, 420, 422, 423, 424, 437, 440], "exactli": [6, 84, 94, 98, 108, 168, 169, 251, 252, 253, 254, 255, 321, 401, 424], "effects_of_interest": [6, 64, 70, 71], "vstack": [6, 40, 41, 58, 70, 71, 75, 80, 103], "easier": [6, 23, 66, 128, 133, 148, 154, 160, 161, 168, 169, 387], "oop": 6, "lot": [6, 65, 71, 86, 122, 139, 142, 154, 155, 161, 162, 168, 169, 176, 191], "non": [6, 14, 15, 39, 42, 50, 56, 65, 66, 68, 77, 79, 91, 94, 102, 103, 116, 135, 139, 142, 146, 147, 149, 150, 152, 154, 155, 159, 160, 166, 167, 168, 169, 173, 174, 176, 181, 200, 227, 234, 251, 252, 253, 254, 258, 273, 275, 276, 283, 301, 305, 310, 316, 318, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 379, 389, 393, 394, 395, 397, 398, 402, 404, 408, 414, 420, 437, 440], "neural": [6, 68, 115, 160, 171, 174, 176, 181, 217, 235, 255], "ventricl": 6, "arteri": 6, "472": [6, 7, 33, 439], "275": [6, 33, 41, 72], "plot_single_subject_single_run": [6, 7, 439], "005": [7, 41, 115, 163, 253, 254], "execut": [7, 21, 27, 45, 59, 73, 82, 87, 96, 109, 112, 113, 114, 169, 181, 316, 395, 397, 437, 438, 439], "auto_exampl": [7, 27, 45, 59, 73, 82, 96, 109, 112, 114, 147, 154, 169, 402], "00_tutori": [7, 161, 439], "mem": [7, 27, 45, 59, 73, 82, 96, 109, 112, 114, 439], "00": [7, 27, 30, 32, 33, 44, 45, 48, 53, 59, 73, 82, 89, 96, 109, 112, 114, 439], "274": [7, 33, 41, 439], "251": [7, 33, 41, 72, 439], "glass": [8, 9, 27, 47, 61, 107, 113, 132, 133, 134, 136, 137, 142, 145, 154, 175, 233, 248, 283, 296, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 386, 390, 394, 399, 400, 403, 418, 437, 439], "megatrawl": [8, 27, 113, 115, 129, 154, 227, 391, 399, 439], "probabilist": [8, 27, 46, 51, 59, 99, 113, 115, 125, 126, 139, 150, 154, 157, 174, 180, 181, 187, 198, 200, 202, 203, 204, 205, 206, 208, 216, 220, 308, 327, 332, 357, 376, 377, 381, 387, 391, 392, 393, 394, 399, 400, 412, 416, 437, 439, 440], "atla": [8, 11, 27, 46, 48, 50, 59, 83, 91, 94, 96, 113, 115, 118, 123, 125, 126, 130, 131, 133, 134, 135, 136, 139, 142, 145, 146, 147, 148, 150, 151, 154, 157, 159, 168, 174, 180, 181, 187, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 216, 220, 230, 239, 265, 267, 308, 320, 327, 328, 329, 331, 332, 357, 376, 377, 378, 380, 381, 391, 392, 393, 394, 397, 399, 400, 401, 402, 404, 408, 409, 410, 411, 412, 416, 423, 433, 437, 439, 440], "mode": [8, 14, 16, 21, 27, 55, 60, 73, 83, 94, 96, 113, 115, 132, 137, 140, 146, 151, 154, 169, 170, 175, 180, 181, 196, 202, 205, 208, 227, 230, 232, 278, 283, 290, 308, 327, 332, 334, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 389, 392, 394, 399, 408, 416, 418, 439, 440], "msdl": [8, 21, 27, 52, 54, 113, 156, 180, 205, 308, 357, 376, 392, 394, 399, 437, 439], "multiscal": [8, 27, 40, 41, 113, 115, 125, 130, 154, 199, 229, 393, 399, 439], "parcel": [8, 9, 22, 23, 27, 46, 59, 113, 115, 118, 125, 130, 134, 137, 138, 139, 142, 149, 151, 152, 154, 157, 174, 175, 176, 181, 187, 197, 199, 200, 201, 203, 204, 205, 207, 209, 211, 216, 227, 230, 306, 308, 313, 324, 325, 327, 331, 364, 376, 377, 381, 384, 391, 393, 399, 408, 409, 437, 439, 440], "colormap": [8, 14, 19, 21, 23, 27, 86, 113, 134, 137, 138, 139, 140, 142, 147, 154, 211, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 379, 380, 381, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 439, 440], "global": [8, 27, 113, 115, 145, 154, 168, 169, 179, 195, 196, 207, 220, 241, 258, 259, 302, 314, 324, 325, 338, 380, 406, 439], "carpet": [8, 27, 113, 145, 154, 196, 220, 302, 314, 338, 380, 439], "haxbi": [8, 15, 16, 27, 28, 45, 94, 102, 113, 115, 117, 133, 134, 154, 165, 167, 175, 179, 181, 219, 251, 306, 308, 313, 327, 333, 372, 379, 391, 394, 399, 401, 437, 439, 440], "technic": [8, 27, 64, 67, 100, 113, 155, 167, 168, 227, 234, 270, 274, 398, 399, 424, 439], "illustr": [8, 27, 49, 66, 67, 68, 85, 90, 93, 101, 108, 113, 161, 169, 180, 181, 398, 399, 424, 439], "surfac": [8, 12, 27, 28, 45, 55, 60, 73, 97, 109, 110, 112, 113, 115, 117, 125, 126, 134, 136, 138, 139, 140, 142, 145, 146, 149, 151, 154, 172, 174, 175, 176, 187, 201, 209, 219, 222, 226, 239, 240, 248, 251, 271, 279, 286, 290, 292, 308, 344, 358, 381, 386, 389, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 439, 440], "scheme": [8, 27, 29, 33, 36, 37, 98, 113, 145, 154, 155, 161, 162, 164, 168, 189, 251, 252, 253, 254, 344, 398, 399, 424, 439], "cortic": [8, 23, 24, 27, 28, 45, 55, 64, 67, 69, 113, 115, 134, 136, 139, 145, 154, 156, 170, 175, 201, 209, 211, 215, 219, 220, 239, 308, 381, 397, 398, 399, 400, 401, 402, 403, 404, 423, 424, 439, 440], "seed": [8, 27, 46, 48, 59, 100, 113, 139, 151, 154, 170, 178, 209, 216, 239, 240, 253, 254, 283, 290, 292, 327, 333, 334, 344, 357, 394, 397, 398, 399, 400, 403, 408, 410, 422, 437, 439, 440], "connect": [8, 22, 26, 27, 49, 50, 58, 59, 88, 94, 97, 109, 115, 127, 132, 134, 135, 142, 145, 150, 152, 154, 156, 158, 160, 169, 170, 171, 174, 175, 176, 180, 187, 188, 189, 195, 199, 205, 207, 208, 209, 211, 216, 222, 227, 239, 240, 283, 286, 299, 302, 310, 320, 324, 325, 327, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 357, 378, 381, 383, 391, 394, 397, 398, 399, 400, 406, 409, 410, 422, 437, 438, 439, 440], "option": [8, 9, 13, 15, 21, 23, 27, 42, 51, 56, 68, 72, 89, 102, 111, 113, 117, 122, 124, 125, 126, 132, 134, 135, 136, 137, 142, 145, 146, 147, 148, 149, 151, 152, 154, 156, 161, 163, 169, 170, 174, 177, 179, 181, 187, 188, 189, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 270, 271, 273, 274, 275, 276, 278, 279, 280, 283, 285, 286, 290, 296, 298, 299, 301, 302, 311, 313, 314, 315, 316, 318, 320, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 418, 419, 420, 421, 424, 437, 439], "onto": [9, 16, 23, 40, 50, 69, 134, 154, 159, 169, 175, 179, 337, 340, 383, 392, 437], "vol_to_surf": [9, 37, 69, 108, 136, 145, 147, 154, 170, 389, 395, 396, 397, 398, 402, 437], "plot_surf_stat_map": [9, 23, 24, 27, 37, 69, 108, 134, 136, 138, 142, 145, 149, 150, 151, 154, 170, 389, 395, 396, 439, 440], "add": [9, 14, 15, 20, 31, 40, 41, 50, 56, 63, 69, 102, 118, 123, 124, 125, 126, 132, 134, 135, 137, 139, 142, 147, 151, 152, 154, 159, 161, 164, 166, 169, 174, 177, 189, 206, 207, 230, 232, 249, 301, 324, 333, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 400, 402, 404, 419, 420, 437], "contour": [9, 15, 18, 21, 87, 88, 126, 134, 142, 145, 147, 151, 154, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 392, 393, 396, 440], "plot_surf_contour": [9, 126, 145, 154], "stat_img": [9, 13, 14, 15, 16, 90, 93, 278, 283, 296, 299, 417, 418], "load_sample_motor_activation_imag": [9, 13, 14, 15, 16, 90, 93, 125, 154], "fsaverag": [9, 22, 23, 24, 37, 62, 69, 108, 125, 126, 139, 147, 154, 239, 269, 389, 402, 424, 437], "fetch_surf_fsaverag": [9, 22, 23, 37, 69, 108, 125, 139, 145, 147, 151, 154, 170, 209, 389, 395, 396, 397, 398, 402, 424, 437], "curvatur": [9, 23, 125, 154, 239], "inflat": [9, 22, 23, 37, 69, 239, 389, 395, 396, 397, 398, 402, 404, 423, 424], "hemispher": [9, 22, 23, 37, 58, 79, 86, 94, 108, 132, 133, 137, 154, 159, 180, 201, 209, 210, 239, 240, 264, 265, 266, 269, 283, 296, 319, 345, 353, 376, 379, 381, 384, 386, 387, 389, 390, 392, 393, 394, 395, 397, 398, 402, 418, 437], "whose": [9, 69, 168, 174, 188, 189, 191, 274, 308, 424], "vertex": [9, 24, 209, 260, 262, 395, 396, 397, 398, 424], "neg": [9, 14, 17, 42, 51, 58, 66, 77, 79, 80, 90, 102, 106, 115, 146, 149, 152, 154, 166, 171, 174, 195, 227, 257, 298, 299, 316, 320, 344, 386, 389, 394, 398, 417, 424, 437], "curv_right": [9, 239], "load_surf_data": [9, 23, 134, 154], "curv_right_sign": 9, "sign": [9, 14, 23, 42, 102, 103, 125, 154, 166, 179, 256, 257, 300, 320, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 386, 392, 400, 402, 404], "textur": [9, 69, 108, 424], "pial_right": [9, 69, 108, 239, 389, 402, 437], "fig": [9, 11, 18, 24, 38, 40, 41, 42, 49, 57, 61, 63, 65, 68, 79, 91, 100, 101, 105, 106, 111, 389, 395, 437], "infl_right": [9, 69, 108, 239, 389, 402], "hemi": [9, 22, 23, 37, 69, 108, 395, 397, 398, 437], "right": [9, 12, 18, 20, 22, 25, 32, 40, 44, 50, 58, 65, 66, 69, 72, 76, 79, 80, 86, 94, 98, 108, 132, 137, 142, 145, 147, 154, 158, 159, 165, 169, 176, 180, 195, 201, 203, 204, 209, 223, 225, 233, 239, 240, 253, 254, 283, 296, 297, 315, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 379, 381, 382, 384, 386, 387, 389, 390, 391, 392, 393, 394, 395, 397, 398, 402, 418, 437, 440], "bg_map": [9, 22, 23, 37, 69, 108, 389, 395, 397, 398, 402, 404, 437], "recent": [9, 133, 136, 137, 139, 149, 154, 160, 177], "version": [9, 19, 20, 22, 32, 35, 36, 40, 41, 42, 47, 48, 51, 52, 53, 54, 55, 56, 58, 61, 64, 66, 67, 70, 71, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 117, 122, 124, 127, 129, 132, 133, 134, 135, 136, 137, 139, 141, 142, 145, 147, 148, 149, 150, 151, 152, 154, 167, 168, 169, 177, 179, 181, 187, 188, 189, 193, 194, 195, 197, 199, 200, 202, 204, 206, 207, 208, 209, 210, 211, 215, 216, 217, 221, 230, 232, 234, 235, 236, 239, 240, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 280, 283, 286, 292, 296, 298, 300, 301, 305, 310, 311, 312, 317, 320, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 337, 340, 344, 380, 391, 392, 395, 397, 398, 405, 406, 407, 408, 410, 411, 412, 414, 417, 420, 424, 437], "instal": [9, 113, 124, 134, 139, 142, 149, 150, 152, 154, 176, 177, 203, 204, 303, 329, 332, 334, 395, 397, 398, 408, 437], "configur": [9, 15, 125, 126, 154, 169, 177, 180, 181, 187, 258, 259, 266, 283, 296, 325, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "instead": [9, 14, 32, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 66, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 117, 124, 125, 127, 129, 132, 133, 135, 136, 137, 139, 142, 146, 148, 149, 150, 151, 152, 154, 167, 168, 169, 170, 180, 181, 187, 188, 189, 234, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 273, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 344, 405, 406, 407, 408], "graph_object": 9, "noqa": [9, 58, 72, 98, 207, 386], "f401": 9, "except": [9, 49, 52, 53, 57, 58, 63, 72, 78, 100, 103, 146, 149, 154, 167, 169, 257, 311, 344], "importerror": [9, 52, 53, 57, 58, 63, 78, 142, 154], "bg_on_data": [9, 22, 23, 389, 395, 397, 398, 402, 404], "specifi": [9, 14, 15, 32, 56, 61, 62, 66, 69, 71, 75, 78, 79, 80, 81, 84, 86, 89, 94, 95, 101, 107, 108, 118, 123, 126, 136, 139, 140, 142, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 166, 168, 170, 171, 177, 179, 180, 181, 203, 204, 208, 230, 231, 233, 235, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 256, 257, 258, 259, 273, 275, 276, 279, 283, 286, 290, 291, 292, 296, 297, 301, 305, 313, 316, 318, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 341, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 384, 386, 387, 389, 391, 392, 393, 394, 395, 397, 398, 401, 402, 403, 404, 406, 408, 418, 419, 420, 424, 437], "js_plotting_util": [9, 139, 154], "81": [9, 33, 120, 154], "vmin": [9, 14, 31, 36, 40, 44, 49, 50, 52, 53, 54, 56, 57, 58, 80, 84, 111, 122, 126, 140, 142, 152, 154, 159, 379, 380, 384, 386, 387, 389, 392, 393, 394, 395, 397, 398, 401, 402, 404], "chosen": [9, 22, 34, 66, 100, 168, 187, 395, 398, 401, 402, 404, 424], "symmetr": [9, 19, 47, 79, 135, 154, 168, 193, 194, 199, 203, 204, 220, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 389, 394, 395, 398, 400, 401, 402, 404], "matplolib": 9, "With": [9, 14, 32, 56, 78, 89, 164, 168, 171, 188, 191, 279, 325, 420, 423, 438], "custom": [9, 15, 22, 23, 47, 68, 125, 139, 147, 149, 154, 166, 178, 283, 285, 290, 358, 395, 397, 398, 416, 437, 440], "plotlysurfacefigur": [9, 149, 154, 395], "similar": [9, 23, 24, 30, 48, 55, 79, 94, 100, 101, 117, 127, 139, 140, 142, 149, 154, 155, 158, 160, 162, 163, 166, 173, 174, 181, 253, 254, 325], "api": [9, 44, 104, 111, 122, 123, 124, 125, 126, 129, 131, 132, 133, 134, 135, 136, 137, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 169, 177, 187, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 340, 387, 405, 406, 407, 408, 440], "static": [9, 346, 401], "requir": [9, 20, 36, 42, 47, 55, 63, 68, 69, 72, 75, 78, 93, 118, 127, 132, 134, 136, 145, 149, 150, 154, 156, 159, 164, 166, 168, 169, 171, 174, 176, 177, 179, 180, 181, 189, 234, 299, 319, 324, 325, 329, 332, 334, 344, 408, 409, 437, 438], "kaleido": [9, 149, 154, 395, 397, 398, 437, 438], "uncom": [9, 16, 22, 52, 54, 58], "savefig": [9, 15, 41, 55, 61, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 381, 384, 386, 387, 390, 392, 393, 394, 437], "right_hemispher": 9, "plot_glass_brain": [9, 13, 14, 62, 79, 80, 101, 105, 107, 132, 142, 150, 151, 152, 154, 173, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 394, 437], "plot_ab": [9, 14, 62, 79, 80, 101, 105, 348, 386, 437], "rang": [9, 14, 23, 41, 44, 47, 49, 53, 55, 57, 62, 68, 70, 78, 79, 80, 91, 95, 100, 102, 105, 132, 136, 146, 154, 168, 169, 188, 191, 202, 300, 320, 386, 389, 394, 398, 400, 401, 402, 404], "xslicer": [9, 15, 366, 372, 374], "0x7f0a3a50fe30": 9, "destrieux_atla": [9, 22, 23], "fetch_atlas_surf_destrieux": [9, 22, 23, 126, 134, 154, 437], "map_right": [9, 209], "regions_dict": 9, "b": [9, 14, 15, 23, 30, 40, 41, 49, 56, 58, 72, 91, 115, 118, 169, 177, 197, 201, 207, 208, 211, 217, 227, 235, 239, 274, 324, 325, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 437], "g_postcentr": 9, "postcentr": [9, 91], "gyru": [9, 91, 210], "g_precentr": 9, "precentr": [9, 91], "indic": [9, 23, 30, 32, 41, 50, 54, 58, 66, 72, 79, 86, 131, 134, 139, 154, 159, 166, 169, 174, 177, 179, 195, 197, 198, 201, 203, 204, 206, 207, 210, 211, 219, 230, 237, 238, 251, 252, 253, 254, 256, 257, 258, 259, 283, 286, 302, 314, 316, 317, 319, 327, 329, 330, 331, 332, 333, 334, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 384, 387, 392, 393, 394, 395, 396, 397, 398, 401, 402, 404, 408, 410, 417], "regions_indic": 9, "sulc_right": [9, 69, 108, 239, 389, 402, 437], "legend": [9, 18, 30, 32, 34, 42, 43, 49, 58, 61, 68, 91, 396], "color": [9, 14, 15, 18, 21, 24, 30, 32, 34, 49, 50, 51, 70, 86, 88, 140, 142, 145, 147, 151, 154, 158, 159, 169, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 384, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 437], "k": [9, 18, 22, 30, 32, 34, 35, 41, 42, 49, 51, 68, 81, 84, 91, 98, 111, 115, 161, 164, 166, 168, 189, 217, 227, 235, 251, 252, 253, 254, 256, 257, 275, 276, 283, 292, 301, 324, 325, 331, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 381, 384, 386, 387, 390, 392, 393, 394, 405, 420], "low": [9, 42, 66, 71, 94, 104, 139, 145, 154, 161, 167, 168, 169, 171, 177, 179, 180, 181, 239, 251, 252, 253, 254, 256, 257, 301, 324, 328, 329, 330, 331, 332, 333, 334, 387, 389, 402, 406, 408, 419, 420], "fsaverage5": [9, 22, 23, 24, 37, 69, 108, 134, 139, 154, 209, 239, 240, 269, 389, 402, 424], "high": [9, 31, 39, 49, 56, 65, 66, 89, 94, 115, 139, 145, 146, 147, 154, 162, 163, 168, 169, 171, 174, 176, 177, 180, 181, 197, 206, 227, 239, 251, 252, 253, 254, 256, 257, 271, 283, 290, 301, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 389, 402, 406, 408, 419, 420], "finer": [9, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "big_fsaverag": 9, "big_textur": 9, "fine": [9, 89, 115, 133, 154, 156, 181, 202, 255, 258, 259, 324, 330, 333, 406, 437], "470x500": [9, 23, 108], "plot_img_on_surf": [9, 126, 145, 147, 154], "choic": [9, 19, 66, 68, 71, 111, 129, 154, 155, 156, 162, 164, 165, 168, 169, 189, 200, 256, 257, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 408, 440], "orient": [9, 142, 145, 154, 168, 169, 315], "surf_mesh": [9, 389, 395, 396, 397, 398, 402, 404, 423, 424, 437], "freesurf": [9, 22, 23, 69, 108, 134, 139, 151, 154, 170, 209, 239, 260, 395, 396, 397, 398, 404, 422, 423, 424], "medial": [9, 23, 37, 58, 91, 115, 166, 389, 395, 397, 398], "left": [9, 12, 20, 22, 23, 25, 34, 37, 40, 44, 49, 50, 51, 58, 65, 66, 68, 72, 76, 77, 79, 80, 86, 94, 101, 105, 108, 132, 133, 137, 142, 145, 147, 154, 159, 176, 180, 195, 201, 203, 204, 209, 223, 225, 233, 239, 240, 283, 296, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 379, 380, 381, 384, 386, 387, 389, 390, 391, 392, 393, 394, 395, 397, 398, 402, 418], "view_surf": [9, 22, 139, 142, 154, 400, 401, 402, 403, 440], "view_img_on_surf": [9, 139, 140, 142, 147, 154, 400, 401, 403, 404, 440], "atlas": [9, 10, 22, 46, 58, 59, 113, 115, 118, 146, 147, 154, 157, 160, 171, 174, 179, 180, 181, 187, 202, 203, 204, 211, 216, 220, 245, 327, 328, 329, 331, 332, 376, 377, 381, 387, 392, 393, 396, 397, 399, 400, 401, 403, 439, 440], "output": [9, 16, 22, 33, 34, 36, 41, 44, 51, 52, 54, 56, 58, 66, 67, 69, 80, 94, 108, 116, 117, 124, 125, 131, 137, 149, 151, 152, 154, 155, 160, 165, 169, 174, 176, 178, 180, 181, 187, 188, 190, 191, 192, 193, 194, 251, 252, 253, 254, 255, 256, 257, 258, 259, 265, 266, 273, 275, 276, 280, 283, 296, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 319, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 379, 380, 386, 387, 389, 392, 393, 394, 401, 402, 405, 406, 407, 408, 411, 412, 414, 415, 417, 418, 424, 437, 440], "cell": [9, 16, 22, 36, 49, 52, 53, 54, 58, 62, 75, 77, 171, 174], "open": [9, 16, 22, 52, 54, 58, 89, 91, 92, 98, 108, 115, 124, 154, 168, 169, 174, 175, 176, 178, 183, 216, 234, 271, 283, 296, 336, 337, 338, 339, 340, 341, 400, 401, 402, 403, 404, 407, 416, 418, 437, 438, 440], "open_in_brows": [9, 16, 22, 33, 52, 54, 58, 61, 62, 64, 75, 91, 92, 139, 154, 181, 400, 401, 402, 403, 404, 416, 418, 437], "don": [9, 24, 33, 66, 81, 118, 152, 154, 169, 176, 177, 230, 232, 389, 424, 437], "ourselv": 9, "vol_to_surf_kwarg": [9, 147, 154, 402], "allow": [9, 20, 24, 40, 48, 51, 58, 63, 89, 99, 100, 101, 102, 117, 125, 126, 133, 135, 140, 142, 146, 147, 150, 151, 152, 154, 155, 161, 168, 169, 170, 172, 174, 177, 181, 187, 188, 189, 217, 225, 236, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 286, 296, 298, 321, 324, 327, 328, 329, 330, 331, 332, 333, 334, 391, 405, 406, 407, 408], "grain": [9, 70, 115, 202, 255], "interpol": [9, 24, 40, 41, 44, 52, 66, 75, 84, 131, 152, 154, 230, 315, 316, 317, 386, 387, 393, 394, 401, 420, 424], "volumetr": [9, 23, 170, 179, 344], "avoid": [9, 52, 53, 54, 58, 71, 137, 142, 151, 154, 166, 168, 169, 171, 179, 251, 252, 253, 254, 271, 296, 298, 305, 310, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 419, 437], "neighbor": [9, 37, 49, 94, 142, 154, 175, 255, 386, 387, 393, 394, 401, 406, 407, 413, 424], "nearest": [9, 40, 41, 44, 49, 66, 75, 84, 115, 142, 151, 154, 174, 230, 315, 316, 317, 386, 387, 393, 394, 401, 407, 413, 417, 424], "radiu": [9, 36, 37, 44, 55, 58, 61, 100, 129, 154, 165, 170, 174, 181, 215, 255, 334, 424, 440], "achiev": [9, 15, 55, 71, 93, 161, 168, 176, 180, 181, 191], "destrieux": [9, 22, 23, 111, 115, 123, 126, 134, 145, 154, 201, 209, 267, 437], "fetch_atlas_destrieux_2009": [9, 156], "legacy_format": [9, 17, 21, 42, 43, 47, 58, 75, 76, 77, 79, 80, 81, 105, 106, 149, 154, 195, 201, 202, 213, 214, 215, 223, 224, 225, 234], "n_sampl": [9, 44, 47, 77, 81, 102, 105, 106, 187, 188, 189, 251, 252, 253, 254, 256, 257, 258, 259, 283, 296, 301, 327, 330, 333, 344, 405, 407, 413, 419, 420, 424], "symmetric_cmap": [9, 22, 126, 140, 154, 395, 400, 401, 402, 404, 437], "894": [9, 27, 439], "plot_3d_map_to_surface_project": [9, 27, 147, 154, 402, 439], "refer": [10, 19, 46, 48, 59, 66, 69, 78, 93, 94, 98, 106, 113, 115, 116, 117, 124, 125, 126, 127, 132, 140, 147, 149, 150, 151, 154, 161, 165, 169, 170, 171, 173, 174, 179, 180, 181, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 437, 439, 440], "dataset_ho": 10, "fetch_atlas_harvard_oxford": [10, 21, 56, 91, 129, 150, 154, 156, 169, 204, 409], "cort": [10, 21, 56, 91, 156, 203, 204], "maxprob": [10, 56, 91, 157, 203, 204, 440], "thr25": [10, 56, 91, 156, 203, 204], "2mm": [10, 21, 56, 91, 124, 148, 154, 156, 166, 202, 203, 204], "dataset_ju": 10, "fetch_atlas_juelich": [10, 148, 150, 154, 203], "thr0": [10, 203, 204], "1mm": [10, 124, 148, 154, 203, 204, 207, 244, 245, 247, 337], "atlas_ho_filenam": 10, "atlas_ju_filenam": 10, "roi": [10, 17, 21, 23, 25, 28, 33, 45, 56, 58, 83, 86, 88, 91, 96, 99, 113, 115, 118, 126, 134, 142, 145, 154, 161, 176, 178, 201, 207, 213, 214, 215, 219, 230, 251, 306, 308, 311, 313, 314, 318, 319, 327, 331, 333, 384, 386, 393, 394, 396, 397, 399, 437, 439, 440], "locat": [10, 15, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 47, 49, 52, 53, 54, 55, 56, 58, 70, 75, 77, 89, 91, 92, 94, 95, 101, 102, 105, 108, 139, 148, 154, 168, 171, 177, 179, 181, 188, 191, 197, 213, 215, 216, 231, 233, 255, 256, 257, 258, 259, 266, 283, 286, 296, 302, 328, 329, 330, 331, 332, 333, 334, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 406, 408, 437], "fsl": [10, 11, 36, 49, 62, 79, 86, 94, 148, 149, 151, 154, 179, 203, 204, 312], "harvardoxford": 10, "0x7f0a407df6e0": 10, "0x7f0a3b13a5d0": 10, "view_typ": [10, 50, 87, 88, 145, 154, 159, 392, 393], "img_plot": 10, "798": 10, "bit": [10, 11, 36, 41, 49, 65, 66, 75, 79, 86, 94, 102, 127, 140, 151, 154, 155, 167, 179, 180, 221], "int": [10, 11, 23, 36, 40, 41, 42, 48, 49, 50, 57, 62, 68, 77, 78, 79, 84, 86, 94, 95, 100, 101, 103, 105, 151, 154, 159, 169, 188, 191, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 270, 271, 273, 275, 276, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 300, 302, 307, 313, 324, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 379, 380, 381, 384, 386, 387, 390, 392, 393, 394, 395, 396, 397, 398, 400, 402, 403, 404, 405, 406, 407, 408, 413, 416, 417, 418, 419, 421, 424], "due": [10, 11, 14, 34, 36, 39, 49, 66, 71, 79, 86, 94, 124, 142, 148, 149, 150, 151, 154, 158, 162, 164, 169, 171, 195, 256, 257, 437], "deal": [10, 11, 36, 49, 68, 79, 86, 94, 117, 122, 145, 154, 171, 330], "int64": [10, 11, 36, 49, 79, 86, 94, 101, 151, 154, 179, 405, 407], "int32": [10, 11, 36, 49, 79, 84, 86, 94, 151, 154, 179, 311, 328, 329, 330, 331, 332, 333, 334], "new_img_lik": [10, 11, 36, 94, 107, 126, 142, 151, 154, 180], "roi_img": [10, 70, 393], "affin": [10, 40, 43, 49, 56, 71, 83, 89, 91, 93, 94, 96, 113, 133, 148, 154, 174, 178, 181, 251, 252, 253, 254, 256, 257, 258, 259, 283, 296, 301, 302, 303, 304, 306, 311, 312, 313, 314, 315, 316, 317, 319, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 345, 347, 348, 399, 406, 411, 414, 415, 424, 426, 439, 440], "529": [10, 27, 33, 439], "436": [10, 27, 33, 56, 115, 325, 439], "plot_atla": [10, 27, 439], "common": [11, 49, 66, 68, 71, 94, 100, 134, 142, 148, 150, 154, 155, 161, 164, 166, 168, 169, 171, 173, 178, 180, 191, 200, 308, 316, 317, 321, 330, 339, 341, 440], "qualiti": [11, 62, 70, 77, 105, 115, 139, 154, 169, 170, 171, 177, 181, 195, 227, 328, 331, 380, 406], "mri": [11, 41, 56, 60, 73, 94, 100, 113, 115, 117, 149, 154, 169, 170, 171, 172, 174, 176, 179, 195, 197, 207, 216, 220, 234, 285, 324, 325, 439], "known": [11, 33, 34, 100, 145, 161, 162, 166, 169, 171, 207, 273, 275, 276, 283, 380], "power": [11, 56, 58, 75, 77, 79, 115, 117, 123, 133, 145, 154, 155, 162, 163, 167, 174, 179, 181, 213, 214, 324, 325, 380], "grayplot": [11, 145, 154, 380], "plot_carpet": [11, 27, 126, 145, 146, 150, 151, 154, 437, 439], "adhd_dataset": [11, 61, 170], "fetch_adhd": [11, 61, 129, 154], "n_subject": [11, 23, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 75, 76, 77, 78, 79, 80, 81, 85, 89, 91, 92, 95, 99, 104, 105, 106, 129, 133, 154, 159, 168, 181, 187, 188, 189, 191, 195, 196, 216, 224, 225, 228, 234, 240, 250, 268], "infer": [11, 49, 62, 65, 76, 79, 84, 100, 102, 115, 169, 171, 173, 174, 278, 286, 298, 316, 323, 344, 380], "often": [11, 30, 32, 35, 36, 48, 86, 92, 94, 117, 160, 161, 162, 166, 171, 174, 176, 179, 180, 181, 273, 275, 276], "overwrit": [11, 56, 230, 232, 345, 347, 348], "particular": [11, 15, 33, 66, 87, 98, 118, 128, 149, 154, 156, 164, 166, 168, 176, 177, 179, 232, 251, 252, 253, 254, 273, 275, 276, 290, 321, 424], "field": [11, 44, 118, 142, 154, 171, 174, 179, 230, 251, 252, 253, 254, 258, 259, 284, 286, 316, 321, 322, 330, 333, 406, 423, 424], "explicit": [11, 48, 60, 72, 73, 113, 142, 148, 154, 169, 174, 176, 218, 232, 280, 283, 299, 313, 325, 394, 399, 420, 439], "0010042": 11, "0010042_rest_tshift_rpi_voreg_mni": 11, "build": [11, 18, 21, 41, 46, 49, 50, 51, 58, 71, 100, 113, 116, 124, 125, 126, 134, 154, 157, 162, 164, 166, 171, 179, 181, 283, 406, 440], "mask_img": [11, 25, 29, 32, 33, 34, 35, 36, 39, 40, 41, 44, 49, 52, 53, 54, 56, 58, 64, 66, 67, 70, 75, 89, 91, 92, 98, 102, 103, 117, 126, 136, 140, 144, 145, 149, 154, 161, 166, 169, 180, 181, 242, 255, 266, 278, 283, 286, 296, 299, 300, 301, 307, 320, 328, 329, 330, 331, 332, 333, 334, 335, 342, 343, 378, 380, 389, 407, 408, 410, 411, 412, 413, 414, 415, 424], "compute_epi_mask": [11, 25, 70, 89, 180, 181, 251, 252, 253, 254, 258, 259, 330, 333, 406], "grai": [11, 38, 40, 41, 42, 43, 75, 89, 139, 154, 166, 173, 175, 234, 251, 252, 253, 254, 258, 259, 330, 333, 379, 380, 406, 424], "matter": [11, 24, 42, 43, 56, 66, 75, 89, 132, 145, 148, 154, 161, 166, 168, 169, 173, 175, 180, 181, 216, 220, 221, 234, 243, 244, 245, 246, 247, 251, 252, 253, 254, 258, 259, 324, 330, 333, 337, 340, 406, 424], "white": [11, 24, 40, 42, 56, 66, 75, 89, 130, 145, 147, 148, 154, 168, 180, 181, 216, 220, 234, 239, 244, 245, 246, 247, 251, 252, 253, 254, 258, 259, 324, 330, 333, 337, 340, 395, 396, 397, 398, 401, 402, 404, 406, 423, 424], "cerebrospin": [11, 56, 220, 324], "fluid": [11, 56, 220, 324], "icbm152": [11, 148, 154, 174, 220, 221, 244, 245, 247], "fetch_icbm152_2009": [11, 21, 75, 221, 245], "atlas_img": [11, 53], "gm": [11, 21, 89, 148, 154, 181, 220, 221, 251, 252, 253, 254, 258, 259, 330, 333, 337, 340, 406], "wm": [11, 21, 56, 89, 148, 154, 181, 220, 251, 252, 253, 254, 258, 259, 325, 330, 333, 337, 340, 406], "csf": [11, 21, 56, 216, 220, 324, 325], "map_label": 11, "atlas_data": [11, 20], "get_fdata": [11, 80, 142, 154, 179], "discrete_vers": 11, "argmax": 11, "discrete_atlas_img": 11, "01_plot": [11, 27, 147, 154, 402, 439], "subplot": [11, 12, 24, 38, 40, 41, 43, 44, 49, 51, 57, 63, 65, 66, 68, 70, 79, 80, 94, 100, 101, 105, 111, 124, 154, 385, 395, 396, 397, 398], "figsiz": [11, 12, 15, 18, 25, 30, 34, 35, 40, 42, 44, 48, 51, 57, 61, 62, 63, 65, 66, 68, 72, 79, 91, 94, 99, 100, 101, 105, 106, 111, 180, 391], "mask_label": [11, 380], "589": [11, 33, 84], "cast": [11, 84, 129, 142, 154, 181, 197, 314], "float32": [11, 33, 84, 181, 302, 311, 328, 329, 330, 331, 332, 333, 334], "aux": 11, "coerc": 11, "atlas_valu": 11, "095": [11, 27, 41, 439], "834": [11, 27, 439], "hcp": [12, 26, 115, 227], "workbench": 12, "cm": [12, 19, 20, 38, 41, 42, 44, 50, 53, 58, 102, 126, 139, 154, 159, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 384, 390, 391, 392, 393, 394, 400, 401, 402, 404, 437], "_cmap_d": 12, "nilearn_cmap": 12, "nmap": 12, "outer": [12, 89, 424], "arang": [12, 22, 30, 32, 33, 34, 48, 51, 63, 66, 69, 71, 94, 108], "ones": [12, 33, 44, 63, 66, 75, 79, 81, 100, 103, 105, 106, 125, 154, 163, 164, 166, 168, 256, 257, 290, 344, 405], "subplots_adjust": [12, 25, 40, 44, 49, 57, 68, 180], "bottom": [12, 15, 25, 40, 68, 180, 391], "imshow": [12, 38, 40, 41, 44, 84, 156, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 384, 386, 387, 389, 391, 392, 393, 394, 395, 398], "off": [12, 14, 38, 40, 41, 66, 72, 116, 124, 132, 154, 168, 169, 253, 254, 283, 296, 336, 337, 338, 340, 341, 392, 393, 394, 401, 418], "fontsiz": [12, 25, 40, 49, 63, 75, 78, 80, 105, 140, 142, 154, 180, 345, 347, 348, 400, 402, 403, 404], "va": 12, "rotat": [12, 32, 63, 84, 94, 181, 324], "deprecated_cmap": 12, "vega10": 12, "vega20": 12, "vega20b": 12, "vega20c": 12, "spectral": [12, 23, 115, 200], "m_cmap": 12, "m": [12, 30, 37, 40, 41, 49, 64, 66, 67, 71, 75, 100, 102, 115, 132, 154, 166, 167, 169, 177, 197, 201, 206, 207, 208, 210, 211, 213, 214, 217, 219, 227, 235, 239, 273, 275, 276, 298, 344, 438], "datad": 12, "endswith": 12, "_r": 12, "sort": [12, 21, 30, 31, 35, 42, 43, 62, 117, 147, 154, 169, 177, 179, 217, 236, 250, 296, 298, 311, 344], "get_cmap": 12, "aspect": [12, 40, 138, 154, 164, 168, 181, 283, 296, 324, 418], "auto": [12, 132, 147, 154, 181, 258, 259, 311, 328, 329, 330, 331, 332, 333, 334, 346, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 375, 379, 381, 384, 386, 387, 389, 390, 392, 393, 394, 395, 397, 398, 400, 401, 403, 424], "568": [12, 27, 33, 439], "plot_colormap": [12, 27, 439], "_projector": [13, 14, 16, 47, 50, 51, 52, 58, 149, 154], "orthoprojector": [13, 14, 16, 47, 50, 51, 52, 58, 149, 154, 373, 381, 386, 390], "0x7f0a41dd19d0": 13, "On": [13, 36, 49, 52, 53, 56, 58, 62, 66, 69, 75, 77, 115, 140, 154, 156, 168, 176, 180, 181, 188, 191], "xz": [13, 14, 15, 49, 283, 296, 363, 364, 373, 374, 379, 381, 384, 386, 387, 390, 392, 393, 394, 418, 437], "xzprojector": [13, 14, 367, 369, 373], "0x7f0a394c2510": 13, "lyrz": [13, 14, 58, 283, 296, 352, 373, 381, 386, 390, 418, 437], "578": [13, 27, 30, 33, 45, 439], "plot_demo_glass_brain": [13, 27, 439], "part": [14, 15, 49, 51, 55, 69, 89, 91, 111, 115, 124, 142, 148, 151, 154, 162, 168, 169, 170, 175, 180, 187, 193, 194, 203, 204, 220, 225, 251, 252, 253, 254, 258, 259, 298, 299, 320, 321, 322, 324, 330, 333, 336, 337, 338, 340, 341, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 391, 406], "through": [14, 31, 39, 42, 48, 51, 56, 64, 75, 91, 100, 124, 125, 146, 147, 149, 154, 155, 161, 162, 163, 166, 169, 174, 176, 230, 234, 253, 254, 283, 296, 298, 324, 325, 328, 331, 340, 345, 347, 348, 350, 351, 352, 353, 354, 361, 363, 365, 367, 369, 371, 405, 411, 416, 424], "ortho": [14, 15, 62, 283, 296, 356, 357, 373, 374, 379, 381, 384, 386, 387, 390, 392, 393, 394, 418, 437], "equival": [14, 81, 105, 124, 154, 166, 168, 171, 177, 225, 251, 252, 253, 254, 258, 259, 312, 328, 329, 330, 331, 332, 333, 336, 337, 338, 340, 341, 399, 406], "sagitt": [14, 94, 283, 296, 353, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 379, 381, 384, 386, 387, 390, 392, 393, 394, 418], "cut": [14, 49, 66, 94, 127, 137, 139, 140, 151, 152, 154, 175, 283, 296, 337, 340, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 379, 381, 384, 386, 387, 390, 392, 393, 394, 401, 418, 437], "0x7f0a3a52b2f0": 14, "produc": [14, 24, 46, 59, 62, 64, 79, 100, 105, 113, 149, 151, 154, 171, 174, 181, 216, 249, 325, 327, 328, 329, 330, 331, 332, 333, 334, 357, 394, 408, 424, 437, 439], "0x7f0a3a303410": 14, "black": [14, 40, 104, 125, 126, 154, 169, 177, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 381, 384, 386, 387, 390, 392, 393, 394, 401, 402, 404], "0x7f0a285fd340": 14, "addition": [14, 15, 58, 70, 148, 154, 169, 173, 177, 180, 181, 344, 417], "coron": [14, 94, 283, 296, 345, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 379, 381, 384, 386, 387, 390, 392, 393, 394, 418], "yz": [14, 15, 31, 39, 283, 296, 369, 370, 373, 374, 379, 381, 384, 386, 387, 390, 392, 393, 394, 418, 437], "yzprojector": [14, 363, 367, 373], "0x7f0a3affcb30": 14, "yx": [14, 15, 117, 283, 296, 367, 368, 373, 374, 379, 381, 384, 386, 387, 390, 392, 393, 394, 418, 437], "yxprojector": [14, 363, 369, 373], "0x7f0a3b96c530": 14, "limit": [14, 42, 75, 88, 125, 154, 156, 166, 168, 169, 230, 325, 380], "vmax": [14, 40, 44, 49, 50, 52, 53, 54, 55, 56, 57, 58, 76, 79, 80, 84, 90, 100, 102, 105, 107, 111, 122, 124, 142, 154, 159, 379, 380, 384, 386, 387, 389, 392, 393, 394, 395, 397, 398, 400, 401, 402, 404, 437], "diverg": 14, "sinc": [14, 19, 33, 39, 58, 64, 66, 75, 77, 81, 101, 108, 117, 124, 147, 154, 168, 171, 187, 197, 203, 204, 236, 286, 321, 322, 331, 332, 344, 348, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 380, 411, 412, 437], "around": [14, 24, 34, 84, 86, 111, 138, 140, 154, 168, 169, 189, 298, 305, 316, 334, 345, 347, 348, 424], "symmetric_cbar": [14, 126, 154, 386, 389, 394, 398], "viridi": [14, 147, 154], "0x7f0a2e0be720": 14, "lose": [14, 95, 437], "colour": [14, 171], "0x7f0a3b4c7d70": 14, "saw": 14, "lzr": [14, 53, 283, 296, 353, 373, 381, 386, 390, 418, 437], "enabl": [14, 79, 104, 126, 145, 149, 152, 154, 161, 164, 175, 181, 186, 324, 349, 350, 351, 352, 353, 354, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 438], "lzrprojector": [14, 351, 373], "0x7f0a3b19ecf0": 14, "lyrzprojector": [14, 354, 373], "0x7f0a394902f0": 14, "xprojector": [14, 365, 371, 373], "yprojector": [14, 361, 371, 373], "zprojector": [14, 361, 365, 373], "l": [14, 37, 41, 51, 56, 70, 71, 76, 94, 115, 126, 142, 149, 154, 162, 167, 195, 197, 207, 208, 210, 211, 213, 214, 215, 219, 227, 234, 283, 296, 324, 325, 345, 347, 348, 349, 350, 351, 352, 353, 354, 373, 379, 381, 384, 386, 387, 390, 392, 393, 394, 418, 437], "lprojector": [14, 359, 373], "rprojector": [14, 349, 373], "0x7f0a3b66a330": 14, "inherit": [14, 274, 416], "customis": [14, 56, 156, 325], "focu": [14, 79, 156, 158, 168, 408], "add_contour": [14, 18, 135, 142, 154, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 437], "lzryprojector": [14, 352, 373], "empti": [14, 102, 108, 118, 126, 142, 150, 154, 169, 203, 204, 219, 251, 252, 253, 254, 321, 331, 332, 378, 391, 411, 412], "lzry": [14, 283, 296, 354, 373, 381, 386, 390, 418, 437], "choos": [14, 15, 24, 33, 34, 44, 47, 87, 164, 165, 171, 181, 251, 252, 253, 254, 283, 296, 325, 379, 381, 384, 386, 387, 390, 392, 393, 394, 405, 406, 418, 424, 440], "red": [14, 15, 18, 40, 51, 140, 154, 170, 171, 174, 437], "demonstr": [14, 39, 40, 56, 62, 65, 94, 104, 150, 154, 160, 161, 344, 437], "insid": [14, 21, 24, 34, 49, 55, 98, 164, 169, 187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 301, 307, 321, 327, 328, 329, 330, 331, 332, 333, 334, 380, 392, 393, 396, 397, 405, 406, 407, 408, 424], "kei": [14, 54, 58, 66, 79, 111, 117, 118, 126, 154, 156, 169, 176, 179, 197, 198, 199, 200, 203, 204, 208, 211, 220, 226, 230, 251, 252, 253, 254, 270, 274, 279, 283, 290, 292, 296, 298, 322, 323, 344, 355, 380, 389, 402], "vari": [14, 34, 66, 94, 95, 148, 154, 158, 164, 168, 176, 188, 189, 191, 302], "lr": [14, 16, 283, 296, 350, 373, 381, 386, 390, 418, 437], "lrprojector": [14, 373], "ad": [14, 15, 20, 21, 30, 40, 68, 69, 84, 124, 125, 126, 135, 136, 146, 148, 149, 150, 151, 154, 164, 168, 170, 177, 187, 206, 207, 251, 252, 253, 254, 256, 257, 298, 305, 316, 320, 322, 323, 327, 328, 329, 330, 331, 332, 333, 334, 344, 345, 347, 348, 379, 380, 381, 384, 386, 387, 390, 392, 393, 394, 401, 408, 440], "lyr": [14, 283, 296, 351, 373, 381, 386, 390, 418, 437], "lyrprojector": [14, 353, 373], "draw": [14, 15, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 383, 424], "thick": [14, 47, 147, 154, 211, 239, 392, 393, 395, 398, 404, 422, 424], "width": [14, 32, 51, 66, 94, 174, 181, 251, 252, 253, 254, 258, 259, 283, 296, 298, 318, 328, 329, 330, 331, 332, 333, 334, 335, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 384, 386, 387, 390, 391, 392, 393, 394, 400, 406, 408, 410, 416, 418], "linewidth": [14, 18, 21, 42, 43, 48, 50, 61, 91, 392, 393, 400], "enough": [14, 58, 161, 168, 176, 181, 316], "unlik": [14, 20, 166, 171, 179, 325], "upper": [14, 40, 168, 273, 275, 276, 338, 341, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 384, 386, 387, 389, 390, 392, 393, 394, 395, 398, 402, 404], "bound": [14, 66, 84, 89, 135, 142, 154, 180, 258, 316, 345, 347, 348, 379, 380, 384, 386, 387, 389, 390, 392, 393, 394, 395, 398, 402, 404], "kept": [14, 118, 126, 154, 169, 193, 203, 204, 251, 252, 253, 254, 300, 301, 318, 336, 337, 338, 339, 340, 341, 342, 408, 410, 420], "infin": 14, "inf": [14, 54, 103, 301, 329, 332, 335, 338, 420], "396": [14, 27, 33, 439], "plot_demo_glass_brain_extens": [14, 27, 439], "techniqu": [15, 44, 115, 159, 160, 161, 162, 163, 164, 168, 174, 176, 181, 408], "essenti": [15, 68, 80, 174], "what": [15, 56, 66, 108, 150, 162, 168, 172, 177, 179, 181, 188, 270, 274, 307, 321, 421, 437, 440], "shown": [15, 21, 40, 54, 66, 70, 94, 118, 147, 154, 155, 160, 161, 170, 171, 208, 325, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 389, 390, 393, 400, 402, 404], "subclass": [15, 169, 374], "implement": [15, 48, 49, 56, 58, 66, 68, 98, 127, 134, 136, 142, 145, 146, 149, 150, 154, 155, 158, 159, 160, 162, 164, 166, 167, 168, 169, 174, 176, 177, 182, 203, 204, 251, 252, 255, 256, 257, 271, 273, 278, 283, 285, 287, 288, 289, 290, 293, 294, 295, 296, 298, 307, 324, 325, 344, 345, 346, 348, 358, 395, 397, 398, 408, 420, 421, 434], "interact": [15, 22, 47, 52, 54, 58, 100, 139, 140, 144, 149, 154, 157, 159, 169, 174, 175, 176, 400, 401, 403, 440], "precis": [15, 41, 52, 57, 61, 91, 125, 154, 155, 158, 159, 168, 176, 181, 187, 188, 189, 191, 192, 225, 251, 253, 273, 275, 276, 298, 344], "overlai": [15, 20, 21, 50, 159, 180, 401, 440], "tile": [15, 140, 154, 360, 374, 379, 384, 387, 392, 393, 394, 418, 437], "mosaic": [15, 146, 154, 355, 374, 379, 384, 387, 392, 393, 394, 418, 437], "wherea": [15, 49, 148, 154, 158, 162, 180, 339, 341, 342, 406], "mni": [15, 48, 52, 54, 66, 69, 93, 101, 108, 115, 118, 132, 142, 145, 151, 154, 156, 173, 174, 176, 180, 181, 197, 199, 205, 213, 214, 215, 220, 244, 245, 247, 251, 252, 253, 254, 303, 334, 337, 340, 379, 381, 384, 386, 387, 392, 393, 394, 400, 401, 403, 418, 437], "accordingli": [15, 149, 154, 321], "help": [15, 33, 58, 67, 94, 135, 139, 140, 154, 156, 162, 170, 181, 191, 438, 440], "haxby_anat_filenam": [15, 16], "haxby_mask_filenam": [15, 16], "haxby_func_filenam": [15, 16], "xyz": [15, 315, 355, 360, 362, 366, 372], "integ": [15, 58, 84, 94, 129, 133, 142, 146, 149, 151, 152, 154, 174, 179, 181, 189, 191, 195, 197, 199, 201, 203, 204, 206, 207, 210, 211, 230, 232, 256, 257, 258, 259, 283, 302, 336, 337, 338, 340, 341, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 384, 386, 387, 392, 393, 394, 396, 397, 409, 414, 415, 418], "0x7f0a3b69a6f0": 15, "zslicer": [15, 70, 88, 362, 366, 374], "rather": [15, 54, 66, 94, 100, 118, 132, 134, 136, 138, 142, 147, 149, 154, 155, 168, 179, 180, 188, 197, 230, 232, 258, 259, 298, 329, 332, 417], "impli": [15, 146, 154, 168, 187, 316, 335], "maximum": [15, 66, 79, 89, 92, 94, 104, 142, 154, 166, 174, 181, 187, 188, 189, 191, 196, 203, 204, 230, 240, 251, 252, 253, 254, 258, 259, 270, 271, 274, 283, 292, 296, 298, 300, 318, 320, 328, 329, 330, 331, 332, 333, 334, 335, 348, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 386, 406, 408, 410, 411, 437], "0x7f0a3b412510": 15, "0x7f0a3b4b48f0": 15, "yslicer": [15, 92, 362, 372, 374], "again": [15, 49, 91, 103, 117, 169, 173, 176, 230, 232], "0x7f0a3b1fe270": 15, "ncolorbar": 15, "0x7f0a3b183170": 15, "stand": [15, 44, 142, 154, 174, 180, 437], "thu": [15, 31, 34, 39, 102, 104, 156, 161, 162, 163, 166, 167, 168, 174, 180, 181, 253, 254, 255, 256, 257, 271, 305, 325, 344], "xzslicer": [15, 49, 368, 370, 374], "0x7f0a3b1fedb0": 15, "similarli": [15, 55, 94, 179], "yxslicer": [15, 364, 370], "assign": [15, 86, 94, 158, 159, 171, 203, 204, 213, 215, 408, 409, 413], "0x7f0a3a28e780": 15, "yzslicer": [15, 39, 364, 368, 374], "0x7f0a3b181100": 15, "case": [15, 23, 34, 40, 48, 49, 50, 54, 58, 62, 65, 66, 68, 72, 84, 89, 91, 92, 101, 108, 118, 132, 142, 145, 154, 155, 156, 158, 161, 162, 166, 168, 176, 177, 179, 194, 197, 201, 203, 204, 251, 252, 253, 254, 256, 257, 283, 285, 290, 296, 298, 299, 308, 316, 317, 318, 319, 322, 330, 331, 332, 333, 334, 338, 376, 379, 380, 381, 384, 386, 387, 389, 392, 393, 394, 401, 417, 418, 424, 437], "tiledslic": [15, 355, 357, 374], "0x7f0a3b3e94f0": 15, "situat": [15, 58, 155, 161, 162, 179, 318], "mosaicslic": [15, 357, 360, 374], "0x7f0a3b4b4b30": 15, "still": [15, 49, 66, 79, 91, 111, 118, 126, 149, 154, 166, 168, 177, 181, 230, 437], "0x7f0a3b413dd0": 15, "tupl": [15, 181, 198, 205, 240, 251, 252, 253, 254, 256, 257, 258, 259, 273, 275, 276, 283, 286, 296, 305, 313, 316, 318, 321, 324, 330, 333, 336, 338, 339, 341, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 384, 387, 391, 392, 393, 394, 401, 406, 411, 418, 423, 424], "0x7f0a3b0d05c0": 15, "interpret": [15, 51, 70, 115, 157, 166, 167, 168, 171, 197, 201, 203, 204, 207, 208, 211, 312, 344, 437, 440], "process": [15, 16, 32, 36, 39, 42, 50, 53, 62, 91, 94, 101, 115, 116, 117, 127, 154, 156, 159, 160, 161, 164, 168, 169, 171, 173, 174, 176, 177, 179, 180, 181, 188, 205, 220, 221, 225, 251, 252, 253, 254, 256, 257, 258, 259, 283, 296, 301, 302, 307, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 406, 407, 408, 414, 415, 420], "mean_haxby_img": [15, 16], "coregistr": [15, 131, 154, 174], "edg": [15, 47, 52, 54, 58, 94, 142, 154, 155, 156, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 381, 391, 400, 440], "being": [15, 89, 94, 124, 125, 126, 139, 142, 149, 154, 155, 168, 169, 171, 174, 258, 290, 323, 329, 332, 334, 339, 341, 380, 395, 397, 398, 402, 404, 408], "outlin": [15, 48, 89, 92, 160, 169, 396, 437], "manual": [15, 16, 19, 32, 34, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 81, 83, 89, 91, 92, 96, 98, 99, 100, 102, 103, 104, 105, 106, 113, 117, 155, 161, 176, 178, 181, 206, 207, 219, 258, 259, 306, 311, 313, 314, 318, 327, 331, 384, 393, 394, 395, 397, 398, 399, 437, 439, 440], "blue": [15, 18, 40, 49, 70, 86], "fill": [15, 21, 62, 68, 94, 101, 108, 134, 142, 148, 154, 168, 181, 316, 317, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 392, 393, 416, 440], "transpar": [15, 23, 126, 142, 154, 181, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 381, 386, 387, 389, 390, 392, 393, 394, 395, 398, 400, 401, 402, 403, 404], "contourf": [15, 21, 48, 50, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "sphere": [15, 36, 37, 46, 55, 59, 113, 144, 147, 154, 165, 181, 187, 213, 214, 216, 239, 327, 334, 376, 381, 390, 391, 395, 396, 397, 398, 399, 400, 404, 416, 423, 424, 437, 439, 440], "marker_color": [15, 40, 55, 61, 100, 140, 142, 154, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 403, 437], "yellow": 15, "third": [15, 66, 81, 159, 292], "marker_s": [15, 40, 55, 61, 100, 140, 142, 154, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 403, 437], "coord": [15, 37, 40, 50, 52, 54, 58, 70, 87, 100, 140, 142, 154, 159, 345, 347, 348, 376, 377, 381, 395, 396, 397, 398, 404, 437], "alter": [15, 146, 154], "bar": [15, 42, 102, 105, 139, 154, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 440], "scalebar": [15, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 437], "scale_": 15, "keyword": [15, 98, 118, 142, 154, 164, 168, 181, 189, 195, 230, 241, 301, 312, 325, 328, 329, 330, 331, 332, 333, 334, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 385, 387, 389, 391, 397, 398, 402, 420], "arg": [15, 111, 251, 252, 253, 254, 262, 327], "scale_s": [15, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "scale_unit": [15, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "built": [15, 33, 42, 48, 125, 154, 171, 177, 251, 252, 253, 254, 406], "extens": [15, 134, 148, 154, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 392, 393, 394, 395, 396, 397, 398], "pdf": [15, 55, 68, 102, 115, 126, 151, 154, 166, 167, 200, 201, 207, 208, 210, 213, 219, 227, 234, 239, 301, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 392, 393, 394, 395, 396, 397, 398, 420], "svg": [15, 62, 126, 154, 323, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 392, 393, 394, 395, 396, 397, 398], "plot_stat_map_from_displai": 15, "sure": [15, 94, 113, 124, 154, 166, 169, 177, 256, 257, 438], "close": [15, 23, 37, 40, 49, 86, 149, 154, 155, 162, 168, 169, 171, 174, 221, 251, 252, 253, 254, 336, 337, 338, 340, 341, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 392, 393, 394, 395, 396, 397, 398, 413, 437], "082": [15, 27, 41, 115, 199, 439], "917": [15, 27, 29, 31, 33, 34, 36, 37, 45, 98, 109, 439], "plot_demo_more_plot": [15, 27, 439], "easi": [16, 61, 69, 75, 94, 117, 118, 159, 160, 162, 165, 169, 170, 174, 176, 181, 324, 440], "coordin": [16, 19, 22, 23, 40, 49, 52, 54, 70, 94, 100, 115, 117, 123, 131, 134, 136, 137, 139, 145, 149, 151, 152, 154, 157, 159, 168, 170, 171, 181, 205, 213, 214, 215, 239, 259, 260, 261, 262, 303, 316, 334, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 378, 379, 380, 381, 384, 386, 387, 390, 392, 393, 394, 395, 396, 397, 398, 400, 401, 403, 404, 417, 418, 423, 424, 437, 440], "flip": [16, 103, 133, 154, 199], "radiolog": [16, 126, 154, 345, 347, 348, 379, 381, 384, 386, 387, 390, 392, 393, 394], "0x7f0a3a300ad0": 16, "web": [16, 115, 118, 139, 142, 154, 169, 230, 232, 283, 296, 400, 402, 403, 404, 418, 437], "alwai": [16, 100, 161, 164, 168, 169, 171, 181, 257, 273, 275, 276, 280, 324, 401, 402, 404, 411, 437], "fix": [16, 30, 58, 60, 64, 71, 73, 113, 121, 168, 169, 177, 180, 218, 270, 271, 274, 280, 283, 286, 313, 394, 399, 439], "0x7f0a4ebd0200": 16, "0x7f0a39e8a3c0": 16, "overlaid": [16, 71, 89, 92, 145, 147, 154, 392], "0x7f0a3b71b200": 16, "voxel_wis": 16, "reduc": [16, 29, 33, 34, 44, 49, 66, 79, 87, 94, 100, 138, 139, 142, 146, 154, 163, 167, 168, 169, 174, 181, 189, 234, 253, 254, 258, 259, 324, 325, 328, 331, 395, 397, 398, 402, 404, 405, 406, 407, 411], "0x7f0a3aefcb30": 16, "ie": [16, 151, 154, 155, 160, 179, 273, 275, 276, 329, 332, 334], "342": [16, 21, 27, 33, 41, 439], "915": [16, 27, 40, 41, 115, 229, 439], "plot_demo_plot": [16, 27, 439], "modifi": [17, 49, 58, 94, 103, 132, 149, 154, 169, 181, 230, 232, 316, 317, 320, 395, 397, 398, 404, 419, 420], "leav": [17, 29, 33, 161, 166, 305], "unchang": [17, 66, 166, 187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "localizer_dataset": [17, 77, 81, 105, 106], "fetch_localizer_button_task": [17, 132, 154, 224, 225, 437], "localizer_tmap_filenam": 17, "tmap": [17, 79, 152, 154, 223, 225, 437], "localizer_anat_filenam": 17, "0x7f0a3b6486e0": 17, "0x7f0a3b026d50": 17, "0x7f0a3b026270": 17, "442": [17, 27, 33, 439], "plot_dim_plot": [17, 27, 439], "func_filenam": [18, 25, 30, 31, 32, 33, 35, 48, 50, 53, 55, 58, 91, 92, 102, 104, 159, 180], "z_slice": [18, 42, 105], "facecolor": [18, 32, 40, 42, 106, 126, 154, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 381, 384, 386, 387, 390, 392, 393, 394], "mask_vt_filenam": [18, 94], "mask_house_filenam": 18, "mask_hous": [18, 32, 117, 179, 219], "mask_face_filenam": 18, "mask_fac": [18, 32, 117, 179, 219], "limegreen": 18, "zip": [18, 20, 30, 32, 34, 38, 41, 50, 51, 53, 58, 88, 99, 101, 103, 108, 111, 113, 159, 177, 205, 220], "antialias": 18, "trick": [18, 176], "legend_guid": 18, "html": [18, 29, 33, 34, 36, 49, 52, 53, 54, 56, 58, 61, 62, 64, 75, 77, 98, 139, 143, 147, 149, 154, 161, 169, 172, 181, 198, 210, 219, 251, 252, 253, 254, 283, 296, 325, 329, 332, 334, 400, 401, 402, 403, 404, 408, 416, 418, 437, 438], "patch": [18, 40, 41, 49, 177], "rectangl": [18, 40, 49, 84], "p_v": 18, "fc": 18, "p_h": 18, "p_f": 18, "face": [18, 28, 32, 33, 38, 45, 71, 94, 97, 98, 100, 109, 113, 115, 117, 125, 134, 147, 154, 161, 166, 170, 175, 179, 180, 181, 219, 220, 238, 251, 253, 255, 260, 261, 262, 306, 308, 311, 313, 314, 327, 333, 344, 372, 387, 391, 394, 395, 396, 397, 398, 399, 401, 404, 423, 424, 439], "loc": [18, 32, 34, 42, 43, 49, 61, 68, 70, 91, 100, 345, 347, 348], "lower": [18, 31, 32, 39, 51, 70, 77, 89, 94, 129, 154, 160, 163, 167, 168, 174, 180, 187, 193, 194, 251, 252, 253, 254, 273, 275, 276, 338, 341, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 379, 380, 384, 386, 387, 389, 390, 391, 392, 393, 394, 395, 398, 419], "_ax": [18, 21, 48, 50], "74": [18, 21, 33, 48, 50, 91], "kwarg": [18, 58, 111, 125, 142, 152, 154, 195, 262, 266, 301, 325, 327, 328, 329, 330, 331, 332, 333, 334, 340, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 381, 384, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 420], "im": [18, 21, 31, 107], "getattr": [18, 21], "989": [18, 27, 439], "913": [18, 27, 439], "plot_haxby_mask": [18, 27, 439], "fetch_atlas_basc_multiscale_2015": [19, 125, 126, 130, 154], "sym": [19, 194, 199], "resolut": [19, 21, 75, 76, 93, 103, 115, 117, 124, 125, 135, 147, 148, 154, 159, 178, 197, 199, 202, 206, 207, 208, 216, 239, 242, 243, 244, 245, 246, 247, 278, 333, 337, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 389, 402, 408, 440], "197": [19, 23, 27, 33, 41, 199, 308, 439], "444": [19, 33, 199], "networks_64": 19, "networks_197": 19, "networks_444": 19, "itself": [19, 34, 66, 158, 187, 188, 189, 258, 259, 306, 406, 424], "bwr": [19, 53, 140, 154, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 400], "bwr_r": 19, "853": [19, 27, 439], "plot_multiscale_parcel": [19, 27, 439], "compos": [20, 98, 174, 180, 181, 214, 251, 252, 253, 254], "node": [20, 23, 24, 58, 108, 140, 142, 145, 147, 154, 156, 181, 206, 239, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 389, 390, 400, 402, 403, 424, 437], "constitut": [20, 160], "leverag": [20, 145, 154, 175, 176, 251, 252, 406, 438], "fetch_atlas_msdl": [20, 21, 51, 52, 53, 54, 99, 131, 154, 156], "atlas_filenam": [20, 52, 54, 56, 156], "pcc": [20, 23, 51, 55], "dmn": [20, 51, 61], "acc": 20, "pariet": [20, 58, 91, 103, 205], "black_blu": 20, "black_green": 20, "black_pink": 20, "3rd": [20, 386, 387, 393, 394, 401], "4th": [20, 94, 115, 167, 174, 180, 275, 276, 313, 316, 392], "5th": 20, "6th": 20, "dmn_node": 20, "40": [20, 32, 33, 45, 48, 49, 53, 59, 63, 91, 94, 196, 205, 230, 424, 439], "35": [20, 30, 33, 53, 72, 77, 82, 91, 119, 154, 205, 230, 439], "55": [20, 33, 49, 68, 132, 154], "29": [20, 33, 36, 62, 72, 75, 81, 91, 103, 127, 154], "835": [20, 27, 439], "plot_overlai": [20, 27, 439], "delin": 21, "filled_contour": [21, 50, 159, 392], "continu": [21, 39, 43, 52, 56, 156, 161, 162, 163, 167, 169, 174, 181, 230, 311, 315, 316, 317, 328, 329, 330, 331, 332, 333, 334, 386, 387, 392, 393, 394, 401, 409, 410], "plot_prob_atla": [21, 27, 48, 50, 87, 88, 129, 136, 137, 146, 154, 159, 160, 387, 393, 437, 439], "pick": [21, 159, 168, 171, 174, 221], "randomli": [21, 166], "alreadi": [21, 22, 33, 34, 49, 64, 89, 94, 101, 103, 107, 108, 118, 142, 149, 154, 159, 161, 162, 169, 176, 181, 230, 232, 296, 298, 317, 344, 408], "know": [21, 84, 118, 168, 171, 174, 194, 232], "tune": [21, 31, 32, 34, 39, 43, 89, 133, 154, 156, 161, 162, 164, 168, 171, 258, 259, 324, 330, 333, 406, 437], "allen": [21, 115, 134, 154, 198], "fetch_atlas_allen_2011": [21, 134, 154], "icbm": [21, 66, 75, 139, 154, 220], "tissu": [21, 174, 210], "ica": [21, 46, 50, 54, 59, 87, 92, 97, 104, 109, 113, 115, 118, 127, 154, 156, 157, 174, 175, 176, 185, 198, 208, 216, 227, 230, 242, 258, 259, 309, 318, 324, 325, 327, 332, 333, 392, 394, 399, 412, 437, 439, 440], "brainmap": [21, 208], "smith_bm20": 21, "rsn28": [21, 198], "allen2011": 21, "smith2009": 21, "local": [21, 40, 41, 49, 60, 65, 66, 73, 76, 77, 79, 80, 81, 88, 97, 100, 101, 103, 107, 108, 109, 113, 115, 142, 143, 151, 154, 169, 170, 171, 174, 177, 179, 181, 203, 204, 207, 212, 222, 223, 224, 225, 226, 229, 230, 232, 255, 306, 318, 321, 327, 333, 344, 372, 385, 386, 394, 399, 439], "harvard_oxford": 21, "prob": [21, 203, 204, 206, 387, 392], "harvard_oxford_sub": 21, "sub": [21, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 78, 85, 91, 92, 95, 100, 101, 104, 108, 147, 154, 187, 188, 189, 203, 204, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 321, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408, 418], "smith_rsn10": 21, "smith_rsn20": 21, "smith_rsn70": 21, "70": [21, 30, 32, 33, 63, 115, 166, 208], "smith_bm10": 21, "smith_bm70": 21, "multi": [21, 28, 41, 42, 43, 45, 46, 48, 58, 59, 100, 113, 115, 152, 154, 155, 156, 157, 159, 165, 168, 176, 179, 180, 181, 182, 188, 189, 191, 199, 205, 216, 219, 238, 258, 283, 327, 330, 332, 333, 377, 381, 391, 399, 439, 440], "dictionari": [21, 23, 33, 46, 59, 66, 69, 101, 104, 108, 113, 115, 118, 146, 154, 157, 161, 162, 174, 175, 181, 187, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 251, 252, 253, 254, 258, 259, 283, 296, 298, 308, 309, 322, 323, 327, 331, 332, 344, 355, 357, 377, 378, 379, 380, 381, 389, 391, 392, 394, 399, 402, 408, 439, 440], "pauli": [21, 115, 206], "subcort": [21, 115, 139, 154, 203, 204, 206, 215], "subcortex": [21, 115, 215], "fetch_atlas_pauli_2017": [21, 139, 142, 154], "difumo": [21, 47, 146, 154, 202], "fetch_atlas_difumo": [21, 47, 146, 154], "resolution_mm": [21, 47, 202, 207], "atlas_typ": 21, "pauli2017": 21, "item": [21, 33, 64, 65, 66, 69, 71, 100, 105, 118, 230, 231, 232, 233, 286, 330, 339, 341], "926": [21, 27, 439], "2010": [22, 23, 48, 58, 115, 134, 154, 155, 160, 162, 187, 188, 199, 209, 213, 220, 245, 258], "plot_surf_roi": [22, 23, 126, 134, 136, 138, 142, 146, 152, 154, 395, 437], "pial": [22, 23, 24, 37, 145, 151, 154, 239, 389, 395, 396, 397, 398, 402, 404, 423, 424], "gyri": [22, 23, 115, 209], "sulci": [22, 23, 115, 209], "nomenclatur": [22, 23, 115, 209], "53": [22, 23, 33, 61, 91, 93, 101, 109, 115, 198, 199, 209, 439], "1016": [22, 23, 56, 76, 115, 162, 163, 166, 167, 199, 201, 202, 205, 209, 214, 215, 220, 225, 228, 229, 245, 253, 254, 258, 275, 276, 278, 298, 324, 325, 344, 380, 421], "06": [22, 23, 27, 32, 33, 41, 45, 73, 82, 91, 96, 109, 115, 199, 209, 255, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 394, 401, 439], "010": [22, 23, 41, 115, 209, 258], "map_left": [22, 23, 209, 437], "sulcal": [22, 23, 115, 201, 239, 389, 395, 397, 398, 402, 404], "depth": [22, 23, 24, 115, 145, 154, 201, 239, 389, 395, 397, 398, 402, 404, 424], "shade": [22, 395, 397, 398, 404], "pial_left": [22, 23, 69, 108, 239, 389, 402, 424], "infl_left": [22, 23, 69, 108, 239, 389, 402, 437], "sulc_left": [22, 23, 69, 108, 239, 389, 402], "gii": [22, 23, 324, 325, 395, 396, 397, 398, 404, 422, 423, 424], "roi_map": [22, 23, 152, 154, 396, 397], "dark": [22, 23, 126, 154, 169, 395, 397, 398, 402, 404], "400x500": [22, 23], "posterior": [22, 23, 55, 58, 61, 91, 103, 136, 154, 170, 213, 215, 395, 397, 398], "explicitli": [22, 66, 67, 107, 139, 151, 152, 154, 161, 169, 230, 323, 325, 406], "angl": [22, 24, 84, 125, 154, 259, 395, 397, 398], "elev": [22, 395, 397, 398], "azim": [22, 395, 397, 398], "appropri": [22, 100, 111, 115, 152, 154, 169, 181, 197, 216, 220, 245, 283, 285, 290, 323, 387, 409], "ot": [22, 166], "convent": [22, 72, 124, 126, 151, 154, 169, 177, 249, 319, 321, 322, 379, 384, 386, 394, 405, 407], "vertic": [22, 37, 41, 66, 72, 80, 126, 134, 154, 155, 225, 260, 265, 266, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 395, 396, 397, 398, 404], "vert": 22, "map_": 22, "rr": 22, "load_surf_mesh": [22, 37, 134, 151, 154, 437], "pial_": [22, 37], "unknown": [22, 56, 91, 161, 197, 198, 211], "str": [22, 77, 79, 100, 111, 148, 154, 169, 187, 188, 189, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 283, 285, 286, 290, 296, 297, 298, 300, 301, 312, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 414, 416, 420, 422, 423, 424], "omit": 22, "append": [22, 33, 34, 40, 41, 44, 50, 51, 53, 64, 71, 72, 100, 103, 107, 108, 159], "synthet": [22, 57, 84, 169], "n_parcel": [22, 49, 406], "corr": [22, 388], "n_parcels_hemi": 22, "plot_connectom": [22, 47, 50, 51, 52, 53, 54, 58, 120, 122, 124, 131, 132, 137, 140, 142, 151, 154, 156, 159, 400, 403, 437], "edge_threshold": [22, 47, 50, 53, 54, 58, 140, 142, 154, 159, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 400, 437], "gist_ncar": [22, 111, 138, 154, 380, 393, 397, 437], "view_connectom": [22, 52, 54, 58, 139, 140, 142, 147, 154, 401, 403, 437], "810": [22, 27, 439], "plot_surf_atla": [22, 27, 439], "subset": [23, 36, 44, 94, 162, 166, 169, 250, 273, 286, 308, 324], "enhanc": [23, 64, 66, 67, 68, 115, 174, 177, 240, 268, 271, 298, 344], "nki": [23, 111, 115, 134, 154, 240, 268], "rockland": [23, 115, 240], "fcon_1000": [23, 196, 240], "nitrc": [23, 196, 200, 208, 240], "indi": [23, 196, 240], "nooner": [23, 115, 240], "2012": [23, 44, 100, 115, 151, 154, 156, 161, 167, 168, 176, 200, 228, 240, 324, 325], "645m": 23, "102": [23, 33, 40, 41, 115, 240, 325], "fliem": 23, "nki_nilearn": 23, "dale": [23, 115, 201, 209, 239], "1999": [23, 115, 220, 239], "fischl": [23, 115, 201, 207, 209, 211, 239], "cingul": [23, 55, 58, 61, 91, 170], "pearson": [23, 115, 270, 274, 388], "product": [23, 55, 79, 168], "moment": [23, 117], "correl": [23, 26, 42, 43, 46, 47, 52, 59, 61, 71, 99, 100, 111, 113, 115, 159, 161, 168, 171, 174, 181, 187, 190, 192, 194, 216, 227, 258, 324, 325, 327, 333, 334, 357, 388, 394, 437, 439], "acceler": [23, 115, 240], "pace": [23, 115, 240], "psychiatri": [23, 115, 240], "frontier": [23, 49, 115, 158, 195, 198, 230, 232, 240], "152": [23, 33, 41, 56, 115, 174, 240], "3389": [23, 115, 118, 195, 198, 230, 232, 240], "fnin": [23, 115, 240], "00152": [23, 115, 240], "segment": [23, 56, 115, 159, 174, 205, 211, 220, 234, 324, 408, 410, 424], "reconstruct": [23, 28, 40, 45, 113, 115, 181, 187, 194, 229, 258, 259, 327, 330, 333, 399, 414, 415, 439], "1006": [23, 115, 197], "nimg": [23, 115, 197], "1998": [23, 197], "0395": 23, "ii": [23, 115, 225, 325], "flatten": [23, 24, 40, 41, 70, 187, 193, 194], "0396": 23, "nki_dataset": 23, "fetch_surf_nki_enhanc": [23, 134, 142, 154], "fsaverag5": 23, "func_left": [23, 240], "flat_left": [23, 239], "curv_left": [23, 239], "nki_enhanced_surfac": 23, "a00028185": 23, "a00028185_left_preprocessed_fwhm6": 23, "timeseri": [23, 26, 48, 50, 58, 89, 104, 133, 146, 154, 155, 159, 202, 227, 301, 325, 328, 329, 330, 331, 332, 333, 334, 420, 421], "pcc_region": 23, "g_cingul": 23, "post": [23, 51, 66, 94, 115, 127, 154, 180, 187, 221, 408], "dorsal": [23, 395, 397, 398], "pcc_label": 23, "seed_timeseri": 23, "scipi": [23, 44, 56, 62, 68, 76, 79, 94, 101, 103, 107, 108, 122, 124, 132, 136, 137, 139, 142, 147, 149, 151, 152, 154, 168, 180, 221, 243, 246, 310, 320, 336, 337, 338, 340, 341, 391, 419], "stat_map": [23, 299, 389, 397, 398], "pearsonr": 23, "wall": [23, 168], "_stats_pi": 23, "4781": 23, "constantinputwarn": 23, "constant": [23, 66, 111, 168, 180, 251, 252, 253, 254, 256, 257, 298, 344, 419, 437], "pcc_map": 23, "flat": [23, 41, 125, 154, 180, 239], "mesh": [23, 37, 69, 108, 111, 125, 134, 139, 142, 147, 151, 154, 170, 175, 239, 260, 261, 263, 264, 265, 266, 269, 389, 395, 396, 397, 398, 402, 404, 422, 423, 424, 440], "read": [23, 44, 66, 69, 77, 81, 101, 103, 105, 107, 115, 118, 145, 154, 167, 169, 175, 176, 223, 224, 225, 335], "yield": [23, 31, 39, 49, 77, 79, 84, 118, 142, 145, 149, 154, 160, 161, 162, 163, 166, 167, 170, 171, 230, 255, 259, 279, 283, 285, 290, 299, 320, 405], "75": [23, 30, 33, 40, 66, 72, 91, 102, 111, 115, 198, 344], "nicer": 23, "bg_map_resc": 23, "unthreshold": [23, 81, 115, 118, 174, 198, 230, 232], "slightli": [23, 48, 49, 66, 84, 116, 136, 154, 162, 187, 189, 316, 317], "captur": [23, 51, 58, 66, 103, 156, 157, 158, 161, 187, 225], "half": [23, 49, 66, 94, 142, 154, 168, 174, 181, 251, 252, 253, 254, 258, 259, 283, 296, 298, 318, 328, 329, 330, 331, 332, 333, 334, 335, 395, 397, 398, 402, 404, 406, 408, 410], "after": [23, 28, 32, 34, 40, 45, 50, 56, 66, 67, 77, 94, 98, 100, 105, 113, 150, 152, 154, 158, 159, 161, 166, 168, 169, 171, 174, 177, 180, 181, 191, 219, 251, 252, 253, 254, 258, 283, 291, 292, 296, 301, 305, 308, 313, 324, 325, 332, 333, 409, 411, 412, 416, 417, 418, 439], "269": [23, 33, 41, 72, 115, 166], "measur": [24, 29, 34, 48, 49, 51, 58, 66, 77, 99, 100, 105, 115, 135, 145, 154, 155, 156, 158, 159, 165, 166, 168, 171, 174, 176, 181, 227, 325, 388, 390, 405, 424, 437, 440], "toi": [24, 104], "drawn": [24, 66, 94, 283, 296, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 384, 387, 392, 393, 394, 401, 418, 424], "spread": [24, 98, 164, 335], "nest": [24, 29, 42, 145, 154, 164, 187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408, 424], "along": [24, 25, 66, 84, 86, 100, 125, 142, 147, 154, 160, 167, 169, 174, 180, 181, 256, 257, 283, 291, 316, 318, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 345, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 359, 360, 361, 363, 365, 367, 369, 371, 374, 375, 379, 384, 387, 388, 392, 393, 394, 408, 409, 420, 424, 437], "ball": [24, 123, 154, 166, 168, 174, 255, 424], "too": [24, 34, 38, 40, 42, 52, 54, 56, 71, 86, 118, 162, 168, 230, 232, 334, 437], "almost": [24, 39, 49, 104, 168, 181], "ident": [24, 69, 80, 168, 301, 318, 410, 420], "most": [24, 33, 40, 42, 43, 49, 61, 75, 94, 100, 126, 136, 139, 154, 161, 162, 163, 164, 166, 168, 169, 171, 177, 180, 181, 283, 285, 290, 387, 395, 397, 398, 404, 406, 408, 410, 437], "recommend": [24, 89, 92, 100, 103, 124, 140, 141, 142, 147, 149, 151, 154, 161, 166, 171, 176, 179, 181, 324, 408, 420, 424, 438], "n_z": 24, "n_t": 24, "mgrid": [24, 84], "triangul": 24, "tri": [24, 51, 162, 230, 379, 391, 405], "pi": [24, 84, 270, 274], "sin": [24, 84], "asarrai": [24, 41, 51, 103, 272, 277], "triangl": [24, 262, 424], "inner_mesh": [24, 424], "nested_sample_point": 24, "_sample_locations_between_surfac": 24, "ey": [24, 41, 44, 64, 65, 66, 69, 71, 80, 84, 89, 169, 176, 220], "line_sample_point": 24, "_line_sample_loc": 24, "segment_half_width": 24, "n_point": 24, "ball_sample_point": 24, "_ball_sample_loc": 24, "ball_radiu": 24, "view_init": 24, "67": [24, 33, 122, 154, 198], "plot_trisurf": 24, "scatter": [24, 94, 151, 154, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 390], "sample_point": 24, "469": [24, 27, 33, 439], "plot_surface_projection_strategi": [24, 27, 439], "mean_haxbi": [25, 180], "0x7f0a3b47f6e0": 25, "0x7f0a3bef25d0": 25, "apply_mask": [25, 180, 330, 333], "masked_data": [25, 99, 111, 180], "timepoint": [25, 180], "150": [25, 33, 41, 115, 180, 380], "And": [25, 41, 155, 170, 177, 180], "ylabel": [25, 30, 32, 42, 48, 49, 55, 57, 58, 65, 66, 180], "intens": [25, 50, 70, 81, 88, 94, 179, 180, 258, 300, 320, 324, 379, 380, 386, 392, 393, 394, 401, 408, 424, 437], "xlim": [25, 30, 180], "95": [25, 30, 33, 91, 93, 148, 154, 180, 273, 275, 276], "134": [25, 27, 33, 41, 93, 148, 154, 439], "1359": 25, "plot_visu": [25, 27, 439], "releas": [26, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 199, 207, 220, 221, 227, 240, 301], "fetch_megatrawls_netmat": 26, "partial": [26, 48, 52, 99, 155, 159, 187, 192, 227, 325], "300": [26, 33, 41, 55, 61, 70, 100, 207, 215, 227], "eigen": [26, 227], "regress": [26, 30, 31, 39, 40, 44, 55, 56, 115, 117, 126, 129, 139, 145, 146, 147, 151, 154, 156, 161, 165, 166, 167, 169, 170, 171, 174, 195, 251, 252, 253, 254, 257, 259, 270, 275, 276, 283, 296, 324, 325, 328, 329, 330, 331, 332, 333, 334, 420, 440], "netmat": [26, 129, 154], "eigen_regress": [26, 227], "partial_correl": [26, 58, 192, 227], "correlation_matric": [26, 47, 51, 227], "util": [26, 43, 44, 48, 50, 87, 88, 102, 105, 106, 127, 134, 138, 145, 149, 152, 154, 159, 169, 187, 188, 189, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 240, 241, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 321, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408, 432], "plot_matrix": [26, 31, 35, 50, 51, 52, 53, 54, 56, 57, 58, 111, 136, 137, 142, 154, 159], "636": [26, 27, 33, 439], "plot_visualize_megatrawls_netmat": [26, 27, 439], "776": [27, 105, 109, 439], "309": [27, 33, 41, 115, 225, 439], "268": [27, 33, 41, 439], "1358": [27, 58, 115, 213, 439], "07": [27, 30, 32, 33, 45, 49, 59, 76, 91, 96, 109, 115, 162, 207, 220, 245, 278, 407, 413, 439], "mvpa": [28, 113, 174, 176, 440], "stimuli": [28, 30, 32, 33, 45, 66, 80, 98, 113, 155, 156, 158, 159, 161, 171, 176, 179, 181, 219, 229, 303, 320, 327, 330, 333, 372, 394, 399, 439], "jimura": [28, 45, 113, 115, 228, 254, 257, 394, 439], "mix": [28, 44, 45, 113, 165, 167, 195, 228, 254, 256, 257, 394, 439, 440], "gambl": [28, 45, 113, 165, 167, 228, 254, 257, 394, 439, 440], "morphometri": [28, 45, 74, 82, 113, 161, 172, 174, 175, 176, 220, 221, 234, 252, 257, 296, 299, 306, 317, 327, 333, 344, 372, 383, 394, 399, 416, 418, 439, 440], "oasi": [28, 45, 74, 82, 113, 115, 167, 173, 175, 220, 221, 234, 252, 257, 296, 299, 306, 317, 327, 333, 344, 372, 383, 394, 399, 416, 418, 439], "net": [28, 44, 45, 113, 167, 234, 251, 252, 256, 257, 394, 399, 439], "searchlight": [28, 44, 45, 113, 115, 133, 136, 139, 145, 154, 161, 165, 174, 175, 176, 219, 239, 306, 308, 311, 313, 314, 327, 333, 387, 394, 398, 399, 423, 424, 439, 440], "svm": [28, 34, 35, 39, 42, 44, 45, 51, 99, 113, 117, 134, 154, 163, 165, 167, 174, 181, 219, 251, 308, 394, 399, 401, 439, 440], "chair": [28, 30, 32, 33, 45, 113, 125, 154, 179, 219, 253, 308, 313, 391, 394, 399, 439], "cross": [28, 32, 33, 36, 37, 40, 42, 44, 45, 51, 55, 97, 99, 109, 113, 115, 118, 125, 126, 145, 154, 155, 162, 165, 189, 219, 230, 234, 242, 251, 252, 253, 254, 255, 256, 257, 308, 318, 327, 333, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 379, 384, 387, 392, 393, 394, 399, 401, 437, 439, 440], "simul": [28, 45, 46, 59, 63, 68, 100, 113, 157, 166, 189, 255, 343, 391, 399, 439, 440], "encod": [28, 41, 45, 71, 75, 84, 113, 115, 162, 163, 181, 229, 253, 254, 303, 320, 327, 330, 333, 372, 394, 439], "miyawaki": [28, 45, 113, 115, 181, 229, 303, 320, 327, 330, 333, 372, 394, 399, 439], "2008": [28, 45, 113, 115, 181, 229, 298, 303, 320, 327, 330, 333, 344, 372, 394, 399, 439], "effici": [29, 66, 115, 126, 154, 160, 162, 168, 169, 188, 191, 230, 253, 254], "featur": [29, 32, 33, 34, 35, 42, 44, 49, 51, 66, 94, 99, 103, 104, 110, 111, 113, 115, 117, 137, 139, 140, 145, 149, 162, 163, 164, 165, 166, 167, 168, 169, 176, 177, 181, 186, 188, 189, 191, 251, 252, 253, 254, 255, 256, 257, 258, 271, 343, 405, 407, 408, 410, 420, 421, 435, 438, 440], "func_img": [29, 161], "restrict": [29, 30, 31, 89, 91, 94, 102, 139, 154, 161, 166, 181, 195, 250], "place": [29, 98, 136, 154, 230, 292, 320, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 380, 387, 424], "uniqu": [29, 30, 31, 32, 33, 35, 49, 51, 58, 65, 86, 94, 100, 102, 134, 154, 155, 163, 179, 197, 203, 204, 290, 328, 331, 408, 409, 410], "aim": [29, 34, 129, 154, 161, 169, 174, 256, 257], "act": [29, 34, 115, 135, 154, 174, 193, 194, 275, 276, 346], "sever": [29, 31, 33, 34, 49, 51, 61, 62, 64, 66, 75, 86, 94, 99, 103, 117, 125, 133, 139, 154, 155, 163, 165, 166, 168, 169, 171, 174, 177, 179, 180, 181, 189, 269, 283, 301, 312, 339, 341, 342, 382, 392, 406, 420, 440], "niftimask": [29, 32, 34, 35, 36, 40, 41, 42, 43, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 83, 91, 94, 96, 98, 99, 100, 102, 103, 104, 105, 106, 111, 113, 117, 125, 139, 142, 145, 146, 147, 148, 149, 154, 161, 164, 178, 216, 229, 251, 252, 253, 254, 256, 257, 258, 259, 280, 283, 296, 298, 308, 313, 324, 325, 327, 328, 329, 331, 332, 334, 338, 344, 384, 388, 393, 394, 399, 406, 416, 429, 439, 440], "relev": [29, 34, 49, 56, 66, 69, 104, 118, 147, 151, 154, 161, 162, 168, 169, 177, 180, 181, 187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 298, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 344, 405, 406, 407, 408], "classic": [29, 34, 94, 162, 179], "univari": [29, 33, 34, 97, 109, 113, 115, 163, 165, 167, 219, 224, 225, 251, 252, 253, 254, 256, 257, 306, 308, 313, 327, 333, 344, 372, 386, 394, 399, 439, 440], "vector": [29, 32, 33, 34, 35, 40, 44, 51, 64, 84, 98, 99, 102, 105, 106, 117, 135, 154, 161, 162, 164, 174, 187, 251, 252, 253, 254, 270, 273, 274, 275, 276, 279, 281, 390, 424], "screening_percentil": [29, 32, 33, 34, 42, 43, 111, 161, 251, 252, 253, 254, 256, 257], "percent": [29, 34, 41, 42, 43, 142, 154, 161, 291, 300, 320, 328, 329, 330, 331, 332, 333, 334, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 392, 400, 402, 404, 420], "smoothing_fwhm": [29, 33, 34, 35, 42, 49, 50, 52, 53, 54, 55, 56, 58, 62, 66, 67, 75, 76, 77, 79, 89, 91, 92, 98, 100, 101, 102, 104, 105, 106, 135, 154, 159, 161, 181, 251, 252, 253, 254, 258, 259, 283, 286, 296, 298, 328, 329, 330, 331, 332, 333, 334, 335, 406, 408, 410], "accuraci": [29, 30, 31, 32, 33, 35, 37, 41, 51, 98, 99, 146, 154, 165, 166, 174, 176, 251, 253, 255, 256, 440], "y_pred": [29, 31, 34, 41, 43, 161, 251, 252, 253, 254, 256, 257], "out": [29, 33, 34, 36, 40, 42, 43, 44, 48, 51, 53, 54, 55, 56, 57, 58, 64, 66, 69, 100, 102, 105, 106, 117, 118, 139, 142, 146, 154, 156, 161, 162, 164, 166, 168, 169, 170, 174, 180, 220, 251, 252, 253, 254, 256, 257, 308, 316, 328, 329, 330, 331, 332, 333, 334, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 389, 406, 408, 409, 419, 420, 424, 437], "9444444444444444": 29, "weight_img": [29, 42, 98, 161, 181], "Or": [29, 118, 161, 206, 207, 437], "dynam": [29, 115, 161, 325], "viewer": [29, 139, 154, 161, 180, 401, 437], "haxby_face_vs_hous": 29, "761": [29, 44, 45, 439], "plot_haxby_anova_svm": [29, 45, 134, 154, 439], "fetcher": [30, 32, 126, 129, 130, 131, 134, 139, 142, 143, 146, 148, 149, 150, 151, 154, 170, 195, 201, 202, 213, 214, 215, 216, 223, 224, 225, 234, 238], "get_data": [30, 36, 42, 49, 77, 79, 84, 94, 102, 105, 106, 107, 134, 142, 154, 179, 311], "abl": [30, 32, 169, 177, 321, 395, 397, 398, 437], "resting_st": 30, "task_mask": [30, 32], "logical_not": [30, 36, 77, 105], "find": [30, 32, 44, 50, 56, 71, 79, 100, 122, 154, 159, 160, 161, 163, 165, 168, 169, 171, 174, 177, 181, 191, 199, 303, 338, 339, 341, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 378, 379, 401, 405, 407, 413, 437, 438, 440], "remain": [30, 32, 40, 56, 89, 100, 145, 152, 154, 166, 169, 424], "categori": [30, 32, 33, 98, 102, 117, 161, 163, 169, 179, 219], "tag": [30, 32, 69, 108, 118, 169, 177, 321, 322], "classification_target": [30, 32], "svc_l2": [30, 162, 251, 253], "svc_l1": [30, 32, 162, 251, 253], "logistic_l1": [30, 162, 251, 253], "logistic_l2": [30, 162, 251, 253], "ridge_classifi": [30, 162, 251, 253], "predict": [30, 31, 33, 39, 40, 44, 51, 58, 60, 73, 97, 109, 115, 117, 146, 147, 149, 154, 163, 164, 166, 167, 169, 171, 172, 174, 175, 176, 187, 205, 213, 216, 227, 237, 251, 252, 253, 254, 255, 256, 257, 275, 276, 283, 296, 301, 302, 313, 318, 327, 332, 334, 338, 372, 394, 417, 438, 439, 440], "score": [30, 32, 37, 41, 42, 44, 48, 51, 80, 98, 99, 102, 103, 105, 106, 107, 111, 145, 146, 154, 161, 162, 164, 165, 167, 176, 189, 234, 251, 252, 253, 254, 255, 256, 257, 258, 259, 271, 296, 300, 320, 324, 328, 329, 330, 331, 332, 333, 334, 344, 380, 406, 408, 420, 440], "classifiers_data": 30, "classifier_nam": 30, "roc_auc": [30, 32, 98, 164, 251, 253], "t0": [30, 41], "2f": [30, 32, 41, 42, 43, 44, 49, 57, 89], "std": [30, 32, 44, 51, 89, 104, 328, 329, 330, 331, 332, 333, 334, 420], "auc": [30, 32, 161, 174], "______________________________________________________________________": 30, "86": [30, 32, 33], "46": [30, 33, 44, 58, 62, 91, 93, 107, 119, 154, 181, 198, 200, 437], "scissor": [30, 32, 33, 179], "37": [30, 33, 62, 73, 81, 91, 94, 115, 122, 154, 324, 325, 421, 439], "cat": [30, 32, 33, 98, 117, 161, 175, 179], "shoe": [30, 32, 33, 34, 179], "scrambledpix": [30, 32, 33, 94, 179], "98": [30, 32, 33, 87, 91, 93, 115, 148, 154, 298, 344], "bottl": [30, 32, 33, 34, 179], "229": [30, 33, 41, 206], "49": [30, 33, 42, 45, 67, 75, 82, 86, 91, 100, 101, 108, 115, 139, 154, 439], "08": [30, 32, 33, 49, 115, 227, 305, 324, 380], "97": [30, 33, 44, 88], "82": [30, 32, 33, 89], "87": [30, 32, 33, 72, 91, 115], "94": [30, 33, 77, 91, 105, 106, 224, 225, 439], "89": [30, 32, 33, 72, 77, 105], "09": [30, 32, 33, 59, 115, 201, 214, 220, 225, 234, 245, 283, 296, 301, 418, 420, 439], "28": [30, 33, 58, 62, 89, 91, 96, 103, 115, 119, 139, 154, 198, 207], "92": [30, 32, 33, 77, 115, 344], "61": [30, 33, 36, 68, 77, 79, 439], "rudimentari": 30, "diagram": [30, 171], "all_categori": 30, "hstack": [30, 64, 67, 77, 80, 273, 275, 276], "tick_posit": [30, 32], "ytick": [30, 44, 48, 51, 99], "height": [30, 33, 51, 99, 142, 154, 283, 296, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 380, 381, 384, 386, 387, 390, 391, 392, 393, 394, 400, 402, 404, 416, 418], "score_mean": [30, 32], "barh": [30, 48, 51, 99], "xmin": [30, 379, 380, 381, 384, 386, 387, 390, 392, 393, 394], "ncol": [30, 63, 79, 100, 101, 105], "bbox_to_anchor": 30, "tight_layout": [30, 31, 32, 48, 51, 55, 58, 70, 78, 80, 99], "penalti": [30, 34, 39, 43, 162, 167, 174, 251, 252, 253, 256, 257], "logist": [30, 31, 115, 162, 163, 167, 251, 253, 256, 257], "main": [30, 56, 66, 67, 68, 71, 94, 120, 151, 154, 161, 166, 169, 170, 174, 177, 179, 181, 197, 283, 285, 290, 321, 339, 341, 346], "ell_1": 30, "ell_2": 30, "spars": [30, 39, 40, 46, 48, 49, 57, 58, 59, 113, 115, 156, 157, 159, 160, 162, 167, 174, 175, 182, 188, 189, 191, 205, 216, 251, 252, 253, 254, 256, 257, 258, 259, 327, 332, 377, 381, 391, 395, 397, 399, 400, 408, 439, 440], "intra": [30, 32], "logical_or": 30, "assert": [30, 111], "fmri_niimgs_condit": 30, "mean_epi_img": 30, "ab": [30, 43, 44, 53, 58, 81, 84, 102, 103, 104, 115, 168, 188, 191, 200, 210, 239, 301, 344, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 420], "1e": [30, 39, 40, 49, 111, 188, 189, 191, 234, 256, 257, 271, 305, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 394, 397, 401, 407, 413], "1235": 30, "plot_haxby_different_estim": [30, 45, 142, 154, 439], "implicit": [31, 39, 145, 154, 163, 174, 253, 254], "aggreg": [31, 39, 58, 145, 154, 163, 174, 198, 253, 254], "cost": [31, 39, 53, 79, 145, 154, 158, 162, 163, 167, 168, 169, 174, 181, 253, 254], "data_fil": 31, "behavior": [31, 34, 35, 75, 77, 98, 115, 117, 125, 126, 129, 136, 146, 151, 152, 154, 161, 162, 164, 165, 169, 174, 178, 181, 187, 199, 200, 208, 227, 327, 328, 329, 330, 331, 332, 333, 334, 380, 408, 440], "condition_mask_train": 31, "condition_mask_test": 31, "x_train": [31, 41, 44], "x_test": [31, 41, 44, 251, 252, 253, 254, 255], "y_train": [31, 34, 41, 44], "y_test": [31, 34, 41, 44, 251, 252, 253, 254, 255], "background_img": [31, 43], "fremclassifi": [31, 145, 146, 154, 162, 163, 251, 254], "_util": [31, 32, 39, 47, 49, 52, 54, 57, 62, 77, 79, 111, 125, 129, 148, 151, 154, 168, 169, 177], "param_valid": [31, 32, 39, 111, 134, 154], "214": [31, 32, 33, 39, 41], "bigger": [31, 39, 43], "7778": 31, "metric": [31, 35, 40, 41, 51, 79, 142, 154, 161, 162, 166, 174, 251, 252, 253, 254], "confusion_matrix": [31, 35, 162], "hot_r": [31, 35], "set_ylabel": [31, 43, 70, 75, 78], "set_xlabel": [31, 43, 70], "adjust": [31, 66, 68, 124, 137, 154, 325, 346, 357, 360], "get_figur": 31, "coef": [31, 44, 98, 283, 292], "50": [31, 33, 49, 52, 57, 58, 62, 66, 79, 82, 93, 98, 115, 118, 166, 168, 181, 189, 191, 227, 228, 253, 254, 271, 285, 287, 288, 289, 290, 293, 294, 295, 303, 324, 325, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 406, 408, 410, 437, 439], "improv": [31, 75, 115, 124, 125, 126, 132, 135, 138, 139, 142, 149, 150, 151, 154, 161, 162, 163, 167, 168, 169, 171, 174, 179, 181, 215, 220, 301, 328, 331, 405, 420], "mechan": [31, 161, 187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "reason": [31, 48, 66, 92, 118, 162, 164, 166, 168, 169, 171, 177, 424], "even": [31, 42, 49, 50, 58, 65, 79, 100, 118, 126, 142, 147, 154, 168, 169, 176, 230, 232, 419], "heavier": 31, "l2": [31, 34, 162, 163, 251, 253, 405, 406, 407], "ridg": [31, 40, 44, 111, 162, 163, 167, 251, 252, 253, 254], "fremregressor": [31, 39, 145, 146, 154, 162, 163, 252, 253], "solv": [31, 39, 168, 169, 176, 177, 259, 344], "651": [31, 33, 45, 439], "plot_haxby_frem": [31, 45, 439], "older": [32, 35, 36, 40, 41, 42, 47, 48, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 115, 117, 134, 135, 136, 137, 154, 169, 179, 234, 303], "upgrad": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 117, 124, 134, 136, 142, 147, 149, 154], "masker": [32, 33, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 110, 112, 113, 117, 123, 124, 125, 126, 127, 142, 145, 146, 147, 148, 149, 151, 152, 154, 156, 158, 161, 164, 169, 170, 178, 180, 187, 251, 252, 253, 254, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 283, 296, 298, 324, 325, 344, 388, 391, 395, 399, 406, 408, 411, 412, 414, 415, 439, 440], "input_data": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 117, 149, 154], "That": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 117, 146, 154, 174, 270, 274, 283, 285, 290], "occurr": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 117, 166], "practic": [32, 51, 69, 99, 155, 158, 162, 164, 166, 168, 169, 170, 171, 173, 176, 179, 180], "unmask": [32, 33, 44, 116, 125, 134, 137, 154, 178, 180, 258, 259, 327, 330, 333, 440], "task_data": 32, "mask_nam": 32, "mask_scor": 32, "mask_chance_scor": 32, "759": 32, "screen": [32, 115, 167, 251, 252, 253, 254, 256, 257], "rais": [32, 63, 78, 94, 124, 125, 126, 129, 136, 138, 139, 142, 149, 151, 152, 154, 179, 187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 286, 290, 296, 298, 299, 302, 311, 315, 316, 327, 328, 329, 330, 331, 332, 333, 334, 340, 405, 406, 407, 408, 438], "clustering_percentil": [32, 253, 254], "76": [32, 33, 61, 66, 72, 201, 209], "73": [32, 33, 91], "71": [32, 33, 72], "68": [32, 33, 58, 181, 437], "83": [32, 33, 72, 115, 119, 154, 298, 344], "xtick": [32, 34, 35, 44, 94], "rgb": [32, 403], "score_ch": 32, "edgecolor": [32, 40, 126, 154, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 381, 384, 386, 387, 390, 392, 393, 394], "ylim": 32, "907": [32, 45, 439], "1352": 32, "plot_haxby_full_analysi": [32, 45, 142, 154, 439], "record": [33, 40, 66, 161, 171, 174], "unique_sess": 33, "datafram": [33, 62, 63, 64, 66, 67, 72, 75, 76, 77, 78, 79, 80, 81, 100, 101, 118, 126, 145, 149, 150, 154, 187, 195, 201, 202, 213, 214, 215, 223, 224, 225, 234, 258, 259, 266, 283, 284, 286, 290, 296, 297, 298, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 382, 383, 385, 405, 406, 407, 408, 417, 420], "conditions_sess": 33, "frame": [33, 63, 69, 89, 181, 285, 308, 324, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 416], "n_scan": [33, 61, 63, 69, 71, 108, 171, 285], "frame_tim": [33, 63, 68, 69, 71, 108, 170, 284, 285, 290], "events_": 33, "insert": [33, 206, 207, 283, 296, 400, 401, 402, 403, 404, 416, 418, 437], "togeth": [33, 48, 58, 68, 69, 70, 80, 155, 163, 164, 171, 174, 213, 215, 250, 253, 254, 258, 286, 301, 408], "conditions_label": 33, "008": [33, 41], "nilearn_cach": [33, 35, 36, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 92, 98, 99, 100, 102, 103, 104, 105, 106, 159], "grab": [33, 47, 48, 49, 65, 100, 118], "fmri_sess": 33, "condition_": 33, "________________________________________________________________________________": [33, 48, 49, 52, 53, 56, 58], "nifti_mask": [33, 35, 36, 42, 92, 102, 105, 106, 117, 169], "_filter_and_mask": 33, "0x7f0a3afc4710": 33, "0x7f0a2fa62930": 33, "clean_kwarg": [33, 49, 52, 53, 56, 58], "detrend": [33, 40, 41, 49, 51, 52, 53, 54, 55, 56, 58, 61, 89, 91, 92, 94, 99, 100, 117, 122, 139, 147, 149, 154, 180, 181, 258, 259, 266, 301, 307, 328, 329, 330, 331, 332, 333, 334, 380, 406, 408, 420, 421], "high_variance_confound": [33, 49, 52, 53, 54, 56, 58, 66, 89, 91, 92, 129, 146, 154, 181, 266, 328, 329, 330, 331, 332, 333, 334], "low_pass": [33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 89, 91, 92, 99, 100, 139, 154, 181, 251, 252, 253, 254, 256, 257, 258, 259, 266, 301, 328, 329, 330, 331, 332, 333, 334, 406, 408, 419, 420], "standardize_confound": [33, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 89, 91, 92, 99, 149, 154, 159, 181, 258, 266, 328, 329, 330, 331, 332, 333, 334, 408, 420], "target_affin": [33, 49, 52, 53, 56, 84, 89, 92, 180, 181, 251, 252, 253, 254, 256, 257, 258, 259, 283, 286, 296, 313, 316, 330, 333, 336, 338, 339, 340, 341, 406], "target_shap": [33, 49, 52, 53, 56, 84, 89, 92, 180, 181, 251, 252, 253, 254, 256, 257, 258, 259, 283, 286, 296, 313, 316, 330, 333, 336, 338, 339, 341, 406], "memory_level": [33, 35, 36, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 89, 91, 92, 98, 99, 100, 102, 103, 104, 105, 106, 159, 181, 188, 251, 252, 253, 254, 256, 257, 258, 259, 266, 283, 286, 296, 302, 328, 329, 330, 331, 332, 333, 334, 406, 407, 408], "joblib": [33, 48, 49, 52, 53, 54, 56, 58, 92, 124, 142, 145, 149, 154, 158, 188, 251, 252, 253, 254, 256, 257, 258, 259, 283, 296, 302, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 406, 407, 408], "verbos": [33, 35, 36, 42, 44, 48, 49, 52, 53, 54, 55, 56, 57, 58, 61, 89, 91, 92, 98, 99, 100, 102, 105, 139, 154, 181, 188, 189, 191, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 251, 252, 253, 254, 255, 256, 257, 258, 259, 278, 283, 286, 292, 296, 298, 302, 313, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 344, 405, 406, 407, 408, 413], "confound": [33, 47, 49, 50, 51, 52, 53, 54, 55, 58, 62, 77, 78, 99, 100, 101, 105, 108, 115, 117, 122, 125, 126, 129, 139, 145, 146, 147, 149, 151, 154, 156, 159, 160, 161, 168, 174, 178, 180, 187, 196, 216, 258, 259, 266, 283, 296, 297, 298, 301, 307, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 344, 406, 408, 420, 421, 428, 440], "sample_mask": [33, 49, 52, 53, 56, 58, 66, 124, 126, 147, 149, 151, 154, 266, 283, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 408, 420], "__________________________________________________filter_and_mask": 33, "0min": [33, 48, 49, 52, 53, 54, 56, 58], "run_glm": [33, 69, 108, 147, 151, 154], "114769": 33, "149296": 33, "367151": 33, "779998": 33, "bin": [33, 49, 169, 283, 292, 438], "random_st": [33, 36, 42, 43, 44, 48, 49, 50, 51, 92, 99, 103, 104, 151, 154, 159, 251, 253, 258, 259, 283, 292, 298, 344, 405, 406], "__________________________________________________________run_glm": 33, "44475": 33, "379275": 33, "___________________________________________________________unmask": 33, "013524": 33, "844135": 33, "217486": 33, "430348": 33, "106474": 33, "182434": 33, "747494": 33, "660679": 33, "080159": 33, "32614": 33, "253894": 33, "452682": 33, "240914": 33, "244136": 33, "0x7f0a3b92dfd0": 33, "0x7f0a4e2e5640": 33, "660587": 33, "536042": 33, "254408": 33, "842804": 33, "871458": 33, "990755": 33, "627194": 33, "290147": 33, "153013": 33, "320123": 33, "15748": 33, "082416": 33, "997775": 33, "754066": 33, "109412": 33, "330079": 33, "030863": 33, "731439": 33, "559734": 33, "720924": 33, "0x7f0a3be34890": 33, "0x7f0a25a4d640": 33, "205584": 33, "587189": 33, "836576": 33, "676956": 33, "695564": 33, "455092": 33, "457214": 33, "537178": 33, "803925": 33, "570463": 33, "614932": 33, "232909": 33, "527175": 33, "062723": 33, "126756": 33, "274819": 33, "635166": 33, "395548": 33, "250365": 33, "364311": 33, "0x7f0a4e2e7e90": 33, "0x7f0a3b698c80": 33, "026206": 33, "974948": 33, "616334": 33, "104535": 33, "503142": 33, "639351": 33, "271132": 33, "047089": 33, "318104": 33, "724813": 33, "073279": 33, "316956": 33, "380183": 33, "690685": 33, "631912": 33, "753286": 33, "155784": 33, "065658": 33, "186135": 33, "69267": 33, "0x7f0a39e4bd70": 33, "0x7f0a39e49280": 33, "033577": 33, "45955": 33, "57195": 33, "994713": 33, "158342": 33, "068131": 33, "396497": 33, "424937": 33, "091867": 33, "463109": 33, "054041": 33, "122921": 33, "025223": 33, "562991": 33, "001653": 33, "968729": 33, "274665": 33, "667": 33, "564329": 33, "496068": 33, "0x7f0a2dfd2bd0": 33, "0x7f0a2dfd2420": 33, "150482": 33, "81308": 33, "204891": 33, "417917": 33, "987059": 33, "41717": 33, "24774": 33, "674399": 33, "731234": 33, "341998": 33, "714869": 33, "182988": 33, "222674": 33, "480354": 33, "366899": 33, "091153": 33, "2708": 33, "247146": 33, "251249": 33, "413063": 33, "0x7f0a259a0e60": 33, "0x7f0a259a0b30": 33, "129": [33, 41, 67, 122, 154], "51173": 33, "279282": 33, "911755": 33, "839058": 33, "290412": 33, "609221": 33, "090297": 33, "822602": 33, "747918": 33, "108861": 33, "095788": 33, "376995": 33, "807425": 33, "826947": 33, "017351": 33, "622242": 33, "625042": 33, "231224": 33, "056424": 33, "672737": 33, "0x7f0a40832150": 33, "0x7f0a257d97c0": 33, "915996": 33, "07737": 33, "981215": 33, "372383": 33, "200737": 33, "008536": 33, "066075": 33, "168487": 33, "636238": 33, "145684": 33, "932773": 33, "580823": 33, "455655": 33, "685537": 33, "715791": 33, "245273": 33, "099707": 33, "79538": 33, "913842": 33, "519925": 33, "629218": 33, "0x7f0a3a5ba510": 33, "0x7f0a3a5b9340": 33, "292987": 33, "392956": 33, "935719": 33, "602484": 33, "425611": 33, "348025": 33, "31867": 33, "408223": 33, "534932": 33, "150519": 33, "149007": 33, "640215": 33, "640699": 33, "50369": 33, "246384": 33, "346316": 33, "162243": 33, "519251": 33, "203695": 33, "335337": 33, "0x7f0a3a2b1a60": 33, "0x7f0a3affd640": 33, "223948": 33, "959582": 33, "677519": 33, "024363": 33, "034515": 33, "612397": 33, "62798": 33, "160445": 33, "506632": 33, "459388": 33, "261016": 33, "747236": 33, "231796": 33, "098904": 33, "148582": 33, "999934": 33, "548262": 33, "09934": 33, "222824": 33, "318977": 33, "0x7f0a3aeff9b0": 33, "0x7f0a2fa60b00": 33, "66533": 33, "299562": 33, "647343": 33, "331865": 33, "175763": 33, "429485": 33, "146358": 33, "947626": 33, "806852": 33, "720554": 33, "008926": 33, "4544": 33, "279543": 33, "828183": 33, "463642": 33, "26599": 33, "058735": 33, "191442": 33, "390268": 33, "112207": 33, "0x7f0a3b0d1f10": 33, "0x7f0a3b0d1280": 33, "095605": 33, "449202": 33, "59974": 33, "179998": 33, "340751": 33, "056108": 33, "043261": 33, "144442": 33, "517954": 33, "611394": 33, "797134e": 33, "317655e": 33, "398581": 33, "488427": 33, "714396": 33, "869941": 33, "924894": 33, "723724": 33, "145297": 33, "821272": 33, "summari": [33, 62, 64, 91, 147, 169, 271], "make_glm_report": [33, 61, 62, 64, 75, 124, 146, 149, 154], "mean_img_": [33, 64, 67], "drift_ord": [33, 63, 66, 170, 283, 286, 290], "fir_delai": [33, 63, 65, 283, 285, 286, 290], "glover": [33, 63, 66, 68, 69, 108, 170, 283, 285, 286, 287, 288, 289, 290], "scaling_axi": [33, 100, 149, 154, 283], "signal_sc": [33, 70, 100, 149, 154, 283, 286], "slice_time_ref": [33, 61, 66, 69, 71, 125, 126, 154, 283, 286], "subject_label": [33, 62, 78, 101, 283, 296, 297, 298], "\u03b1": 33, "minimum": [33, 77, 79, 89, 122, 124, 127, 132, 134, 135, 136, 139, 142, 145, 147, 149, 154, 159, 283, 296, 300, 320, 328, 331, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 375, 381, 401, 408, 409, 410, 411, 417, 418], "distanc": [33, 256, 257, 283, 296, 375, 417, 418, 424], "88": [33, 81, 89, 91, 102, 115, 344], "147": [33, 41], "62": [33, 62, 72, 100, 107, 115, 136, 154, 204], "38": [33, 41, 45, 62, 77, 91, 111, 139, 154, 439], "393": 33, "196": [33, 41], "43": [33, 91, 102, 115, 127, 154, 200, 344], "2264": 33, "31": [33, 40, 91, 115, 167, 208], "77": [33, 66, 72], "246": [33, 41, 72], "541": 33, "59": [33, 45, 49, 52, 72, 91, 92, 100, 105, 109, 115, 119, 154, 198, 324, 325, 439], "344": [33, 41], "492": 33, "12a": 33, "58": [33, 91, 107, 139, 154], "1132": 33, "639": [33, 84, 96, 439], "984": 33, "16a": 33, "47": [33, 64, 73, 91, 98, 115, 195, 200, 201, 220, 245, 439], "787": 33, "23a": 33, "65": [33, 91, 127, 154], "27a": 33, "44": [33, 72, 91, 115, 122, 154, 298, 344], "295": [33, 41, 115, 210], "590": 33, "31a": 33, "31b": 33, "32": [33, 34, 35, 40, 45, 58, 66, 84, 91, 181, 287, 288, 289, 293, 294, 295, 437, 439], "41": [33, 49, 72, 91, 115, 407, 413], "41a": 33, "2214": [33, 142, 154], "42a": 33, "42b": 33, "43a": 33, "52": [33, 43, 45, 49, 55, 58, 91, 105, 181, 199, 437, 439], "56": [33, 37, 72, 115, 162, 200], "58a": 33, "64a": 33, "67a": 33, "72": [33, 43, 56, 58, 62, 91, 93, 115, 148, 154, 167, 214], "80": [33, 43, 47, 54, 65, 66, 72, 84, 103, 115, 169, 205, 300, 320, 355, 360, 362, 366, 372, 378, 424], "79": [33, 66, 72, 91], "78": [33, 49, 52, 53, 66, 72, 93, 115, 166], "85": [33, 47, 91, 127, 154, 338, 339, 341], "96a": 33, "101": [33, 40, 41, 115, 324, 325, 421], "103": [33, 41, 115, 166, 255], "104": [33, 41, 77, 82, 202, 439], "105": [33, 41, 43], "106": [33, 41, 115, 207, 208, 211, 227], "107": [33, 41], "108": [33, 41, 72], "110": [33, 41, 86, 115, 210, 217, 235], "111": [33, 41, 53, 61, 91], "112": [33, 41, 93, 111, 115, 324, 325], "113": [33, 41, 109, 111, 439], "114": [33, 41, 44, 105, 139, 154], "115": [33, 41, 139, 154], "116": [33, 41, 72, 197], "117": [33, 41, 80, 82, 93, 148, 154, 197, 439], "118": [33, 41], "119": [33, 41, 56, 72, 127, 154], "120": [33, 41, 43, 84, 99, 115, 210], "121": [33, 41, 66], "122": [33, 41, 66, 72, 92, 119, 154, 199, 216], "123": [33, 41, 202], "124": [33, 40, 41], "124a": 33, "127": [33, 41, 136, 154], "128": [33, 41, 63, 66, 69, 84, 92, 104, 108, 146, 154, 202], "130": [33, 41], "131": [33, 41, 72, 115, 210], "132": [33, 41, 49, 52], "133": [33, 41], "135": [33, 41, 72], "136": [33, 41], "137": [33, 41, 72], "138": [33, 41], "139": [33, 41], "140": [33, 40, 41, 72], "141": [33, 41, 72, 123, 154, 210], "142": [33, 41, 127, 154], "143": [33, 41, 72], "144": [33, 41, 115, 225], "144a": 33, "145": [33, 41], "146": [33, 41, 72, 106, 109, 130, 154, 439], "146a": 33, "148": [33, 41], "149": [33, 41, 72], "151": [33, 41, 107], "153": [33, 41, 72], "154": [33, 41, 56, 115, 324, 325, 380], "155": [33, 41, 71, 73, 216, 439], "156": [33, 41, 72], "157": [33, 41], "158": [33, 41, 115, 380], "159": [33, 41, 72], "160": [33, 41, 58, 84, 115, 163, 213, 253, 254, 424], "161": [33, 41, 73], "162": [33, 41, 72], "163": [33, 41, 56], "164": [33, 41, 56, 72], "165": [33, 41, 56], "166": [33, 41, 56], "167": [33, 41, 56, 72, 158], "169": [33, 41], "170": [33, 41, 72], "171": [33, 41, 56, 115, 325], "172": [33, 41, 115, 163, 210, 253, 254], "173": [33, 41, 58, 72], "174": [33, 41, 56, 115, 324, 325], "175": [33, 41], "176": [33, 41, 61, 72], "177": [33, 41, 439], "178": [33, 41], "179": [33, 41], "180": [33, 41, 84, 115, 139, 154, 163, 253, 254, 395, 397, 398], "181": [33, 41, 76, 115, 278], "182": [33, 41, 203, 204, 207], "183": [33, 41], "184": [33, 41, 82, 102, 109, 439], "185": [33, 41], "186": [33, 41], "187": [33, 41, 56, 103, 109, 115, 324, 325, 439], "188": [33, 41, 72], "189": [33, 41, 115, 301, 308, 420], "190": [33, 41, 47], "191": [33, 41, 72], "192": [33, 41, 84], "193": [33, 41, 206], "194": [33, 41], "198": [33, 41, 72, 96, 206, 439], "199": [33, 41, 95], "200": [33, 41, 43, 94, 103, 105, 115, 187, 199, 207, 227, 256, 257], "201": [33, 41, 72], "202": [33, 41], "203": [33, 41, 72], "204": [33, 41], "738": 33, "204a": 33, "205": [33, 41], "206": [33, 41, 115, 215], "207": [33, 41, 72], "208": [33, 41, 62, 73, 115, 187, 439], "209": [33, 41, 73, 95, 439], "211": [33, 41, 43], "212": [33, 41, 43, 72, 206], "213": [33, 41], "215": [33, 41, 72], "217": [33, 41, 197], "218": [33, 41, 72, 203, 204, 207], "219": [33, 41], "220": [33, 41], "221": [33, 41, 72, 115, 202], "222": [33, 41], "223": [33, 41, 104, 109, 115, 220, 439], "224": [33, 41, 72], "225": [33, 41], "226": [33, 41], "227": [33, 41, 72], "228": [33, 41], "230": [33, 41, 72], "231": [33, 41], "232": [33, 41], "233": [33, 41, 308], "234": [33, 41, 72], "235": [33, 41], "236": [33, 41, 72], "237": [33, 41], "238": [33, 41, 115, 210], "240": [33, 41, 47, 49, 52, 54], "241": [33, 41], "242": [33, 41, 115, 210], "243": [33, 41], "244": [33, 41], "245": [33, 41], "247": [33, 41], "248": [33, 41, 72], "249": [33, 41], "250": [33, 41, 66, 115], "253": [33, 41], "254": [33, 41, 72, 119, 154], "255": [33, 41, 148, 154], "256": [33, 41, 84, 146, 154, 202, 211], "257": [33, 41, 72], "258": [33, 41], "259": [33, 41], "260": [33, 41, 72], "261": [33, 41, 115, 166], "262": [33, 41, 50, 59, 115, 439], "263": [33, 41, 206], "264": [33, 41, 58, 72, 214], "265": [33, 41], "266": [33, 41, 72], "267": [33, 41, 57, 115, 324, 325], "270": [33, 41, 395, 397, 398], "271": [33, 41], "272": [33, 41, 115, 239], "273": [33, 41, 115, 197], "276": [33, 41], "277": [33, 41, 115, 324, 325], "278": [33, 41, 72], "279": [33, 41], "280": [33, 41, 59], "281": [33, 41], "282": [33, 41, 94], "283": [33, 41], "284": [33, 41, 66, 72, 115, 239], "285": [33, 41], "286": [33, 41, 73, 439], "287": [33, 41, 65], "288": [33, 41, 48, 66, 72, 115, 160, 258], "289": [33, 41, 115, 197], "290": [33, 41], "292": [33, 41, 115, 344], "296": [33, 40, 41, 45, 66, 72, 439], "297": [33, 39, 41, 109], "297a": 33, "298": [33, 41, 115, 239, 344], "299": [33, 41, 48, 115, 160, 258], "301": [33, 41], "302": [33, 41, 119, 154], "303": [33, 41], "304": [33, 41, 115, 167], "305": [33, 41], "306": [33, 41], "307": [33, 41], "308": [33, 41], "311": [33, 41], "312": [33, 41], "313": [33, 41, 94, 115, 220, 245], "314": [33, 41, 115, 225], "315": [33, 41], "316": [33, 41], "317": [33, 41], "318": [33, 41], "319": [33, 35, 41, 45, 94, 439], "320": [33, 41, 89, 96, 115, 324, 439], "321": [33, 41, 115, 167], "322": [33, 41], "323": [33, 41, 77, 82, 439], "324": [33, 41], "325": [33, 41, 199], "326": [33, 41], "327": [33, 41, 115, 220, 245], "328": [33, 41, 44], "329": [33, 41, 58, 115, 213], "330": [33, 41], "331": [33, 41], "332": [33, 41], "333": [33, 41], "334": [33, 41], "335": [33, 41], "337": [33, 41], "338": [33, 41], "339": [33, 41], "340": [33, 41], "341": [33, 41, 115, 324], "343": [33, 41], "345": [33, 41, 44], "346": [33, 41], "347": [33, 41], "348": [33, 41, 56, 91], "349": [33, 41], "350": [33, 41], "351": [33, 41], "352": [33, 41], "353": [33, 41], "354": [33, 41, 48, 59, 439], "355": [33, 41], "356": [33, 41], "357": [33, 41], "358": [33, 41], "359": [33, 41, 75, 82, 439], "360": [33, 41, 62, 64, 67], "361": [33, 41], "362": 33, "363": 33, "364": 33, "365": 33, "366": 33, "367": 33, "368": 33, "369": [33, 36, 45, 439], "370": 33, "371": [33, 55, 59, 64, 67, 439], "372": 33, "373": 33, "373a": 33, "374": 33, "375": 33, "376": 33, "377": 33, "379": [33, 91], "380": 33, "381": [33, 115, 344], "382": [33, 41, 45, 439], "383": [33, 64, 71], "384": 33, "385": 33, "386": 33, "387": [33, 59, 109, 439], "388": [33, 54, 91, 96, 104, 439], "389": 33, "390": 33, "391": 33, "392": 33, "394": 33, "395": 33, "397": [33, 115, 344], "398": 33, "399": 33, "400": [33, 115, 162, 207], "401": 33, "402": 33, "403": 33, "404": [33, 96, 439], "405": [33, 87, 115, 205], "406": 33, "407": 33, "408": 33, "409": 33, "410": [33, 115, 162], "411": [33, 95, 96, 439], "412": 33, "413": 33, "414": 33, "415": [33, 56, 115, 205, 325], "416": [33, 53, 59, 234, 439], "417": 33, "418": [33, 107, 109, 439], "419": 33, "421": [33, 96], "422": 33, "423": 33, "424": 33, "425": 33, "426": 33, "427": 33, "428": 33, "429": 33, "430": 33, "431": 33, "432": [33, 62], "433": 33, "434": 33, "435": 33, "437": 33, "438": 33, "439": 33, "440": 33, "441": [33, 101, 109, 439], "443": 33, "445": 33, "446": 33, "447": 33, "448": 33, "449": 33, "450": 33, "451": 33, "452": 33, "453": 33, "454": 33, "455": 33, "456": [33, 88, 96, 109, 439], "457": [33, 100, 108, 109, 439], "458": 33, "459": [33, 72, 73, 439], "460": 33, "461": [33, 227], "463": [33, 197], "465": 33, "466": 33, "467": 33, "468": [33, 62, 197], "470": 33, "471": 33, "473": [33, 67, 73, 439], "474": 33, "475": 33, "476": 33, "477": 33, "478": 33, "479": 33, "480": 33, "481": 33, "482": 33, "483": [33, 119, 154], "484": 33, "485": [33, 49], "486": 33, "487": 33, "488": 33, "489": 33, "490": 33, "493": [33, 45, 439], "494": 33, "495": 33, "496": 33, "497": 33, "498": 33, "499": 33, "500": [33, 35, 41, 49, 79, 98, 111, 207], "501": 33, "502": [33, 98], "503": [33, 103, 109, 439], "505": [33, 52, 59, 439], "507": [33, 69, 73, 78, 439], "508": 33, "509": 33, "510": 33, "511": 33, "512": [33, 84, 146, 154, 202], "513": 33, "514": 33, "515": 33, "516": [33, 94, 96, 439], "517": [33, 86, 96, 439], "518": 33, "519": 33, "520": 33, "521": 33, "522": 33, "523": [33, 90, 96, 439], "524": 33, "525": 33, "526": 33, "527": 33, "528": [33, 44], "530": 33, "531": 33, "532": 33, "533": 33, "534": 33, "535": [33, 64, 73, 439], "536": 33, "537": 33, "538": [33, 48], "539": 33, "540": [33, 62], "542": 33, "543": [33, 53, 59, 439], "544": [33, 115, 228], "545": 33, "547": 33, "548": 33, "549": [33, 115, 166], "550": 33, "551": [33, 79, 82, 439], "552": [33, 89, 115, 228], "553": 33, "554": 33, "555": 33, "556": 33, "557": [33, 67, 73, 439], "558": [33, 68, 73, 439], "559": [33, 115, 166], "560": 33, "561": 33, "562": [33, 115, 205], "563": 33, "564": [33, 47, 59, 439], "565": 33, "566": 33, "567": 33, "569": 33, "570": 33, "571": [33, 42, 45, 87, 96, 439], "572": 33, "573": [33, 115, 205], "574": 33, "575": 33, "576": 33, "577": 33, "579": 33, "580": 33, "581": 33, "582": [33, 37], "583": 33, "584": 33, "585": 33, "586": 33, "587": 33, "591": 33, "592": [33, 37], "595": 33, "596": 33, "597": 33, "598": 33, "599": [33, 115, 195], "600": [33, 49, 119, 154, 207], "601": 33, "602": 33, "603": 33, "604": 33, "605": [33, 65, 73, 439], "606": 33, "607": [33, 86], "608": 33, "609": 33, "610": 33, "611": 33, "612": 33, "613": [33, 78, 82, 439], "614": 33, "615": 33, "616": 33, "617": 33, "618": 33, "619": 33, "620": 33, "622": 33, "623": 33, "624": 33, "625": 33, "626": 33, "627": 33, "628": 33, "629": 33, "631": 33, "632": 33, "633": 33, "634": 33, "635": 33, "637": 33, "638": 33, "640": 33, "641": 33, "642": [33, 55, 239, 402], "643": 33, "644": 33, "645": 33, "646": 33, "647": 33, "649": 33, "650": 33, "652": 33, "653": 33, "654": 33, "655": 33, "656": 33, "657": 33, "658": 33, "659": 33, "660": 33, "661": 33, "662": 33, "663": 33, "664": 33, "665": [33, 58, 115, 118, 214, 230, 232], "666": 33, "668": 33, "669": [33, 49, 57, 59, 115, 407, 413, 439], "670": [33, 115, 118, 230, 232], "671": 33, "672": 33, "673": 33, "674": [33, 37, 45, 439], "675": 33, "676": 33, "677": 33, "678": [33, 58, 115, 214], "679": 33, "680": [33, 51, 59, 439], "681": [33, 49, 115, 407, 413], "682": [33, 43, 45, 439], "683": 33, "684": 33, "685": 33, "686": 33, "687": [33, 56, 59, 439], "688": 33, "689": 33, "690": 33, "691": 33, "692": [33, 61, 73, 439], "693": [33, 48, 73, 439], "694": [33, 70], "695": 33, "696": 33, "697": 33, "699": [33, 62, 73, 439], "700": [33, 142, 154, 207], "701": 33, "703": 33, "704": 33, "705": 33, "706": 33, "707": 33, "708": 33, "709": 33, "710": 33, "711": 33, "712": 33, "713": 33, "714": 33, "715": [33, 38, 45, 439], "716": 33, "717": 33, "718": 33, "719": 33, "720": 33, "721": 33, "722": 33, "723": 33, "724": 33, "725": 33, "726": 33, "727": 33, "728": 33, "729": 33, "730": 33, "731": 33, "732": 33, "733": 33, "734": 33, "735": 33, "736": 33, "737": 33, "739": 33, "740": 33, "741": 33, "742": 33, "743": 33, "745": 33, "746": 33, "13a": 33, "32a": 33, "bug": [33, 122, 125, 126, 132, 133, 134, 138, 151, 176, 177, 395, 397, 398], "request": [33, 100, 129, 142, 154, 158, 168, 174, 187, 188, 189, 202, 203, 204, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 298, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 344, 373, 374, 401, 405, 406, 407, 408, 437, 438], "save_as_html": [33, 61, 62, 64, 75, 91, 92, 181, 400, 401, 402, 403, 404, 416, 418, 437], "although": [33, 39, 49, 79, 162, 174, 177, 181], "usual": [33, 48, 77, 79, 94, 149, 154, 160, 162, 163, 164, 169, 171, 174, 176, 177, 180, 197, 253, 254, 264, 270, 273, 338, 390, 406], "classification_accuraci": [33, 98], "chance_level": 33, "4f": [33, 34, 98], "7173": 33, "plot_haxby_glm_decod": [33, 45, 439], "approach": [34, 40, 41, 48, 49, 66, 69, 115, 139, 154, 157, 160, 161, 162, 166, 168, 169, 170, 171, 175, 255, 301, 324, 325, 420, 424, 438, 440], "maxim": [34, 174, 273, 275, 276, 305, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "signific": [34, 49, 66, 75, 80, 115, 161, 166, 168, 171, 174, 298, 344, 417], "optimist": [34, 161], "lead": [34, 47, 48, 57, 66, 84, 124, 126, 145, 152, 154, 167, 168, 169, 171, 174, 189, 271, 329, 332, 419, 437], "overfit": [34, 162, 166], "loop": [34, 44, 71, 100, 145, 154, 161, 168, 180, 251, 252, 253, 254], "judg": [34, 86], "never": [34, 161, 168, 176, 316, 317, 416], "grid": [34, 51, 68, 79, 84, 99, 162, 167, 174, 180, 189, 230, 232, 251, 252, 253, 254, 287, 288, 289, 293, 294, 295, 316, 355, 357, 360, 374, 379, 384, 387, 391, 392, 393, 394, 437], "difficulti": 34, "composit": 34, "hyperparamet": [34, 42], "param_grid": [34, 99, 111, 125, 154, 162, 251, 252, 253, 254], "sensibl": [34, 161, 164, 188, 191], "dual": [34, 51, 53, 98, 99, 115, 168, 188, 251, 253], "1000": [34, 49, 77, 94, 158, 171, 207, 405], "l1": [34, 43, 115, 162, 163, 167, 188, 191, 251, 252, 253, 256, 257], "800": [34, 87, 207, 283, 296, 380, 418], "complet": [34, 60, 73, 94, 113, 117, 118, 142, 154, 155, 161, 163, 170, 177, 180, 181, 217, 219, 235, 250, 283, 286, 323, 326, 333, 344, 379, 380, 381, 382, 384, 386, 387, 388, 390, 391, 392, 393, 394, 406, 416, 417, 418, 439], "stabl": [34, 48, 56, 98, 115, 124, 139, 154, 160, 162, 163, 168, 176, 199, 239, 251, 252, 253, 254, 258, 259, 324, 402, 424, 438], "cross_valid": [34, 98, 139, 154, 164, 251, 252, 253, 254], "excel": 34, "explan": [34, 84, 102, 161, 162, 163, 164, 169, 179, 181, 196], "best_c": [34, 251, 252, 253, 254], "best_penalti": 34, "best_dual": 34, "cv_score": [34, 98], "9380165289256198": 34, "9199134199134199": 34, "7683982683982684": 34, "8203463203463204": 34, "735930735930736": 34, "screening_percentile_rang": 34, "val_scor": 34, "sp": 34, "sreen": 34, "000": [34, 42, 79, 94, 114, 166], "8100": 34, "6111": 34, "8493": 34, "5556": 34, "8774": 34, "3889": 34, "8515": 34, "4444": 34, "8726": 34, "2778": 34, "8648": 34, "3333": [34, 151, 154], "kfold": [34, 36, 37, 40, 44, 256, 257], "nested_cv_scor": 34, "_base": [34, 39, 48], "1250": 34, "convergencewarn": [34, 39, 92, 104], "liblinear": [34, 251, 253], "fail": [34, 103, 124, 125, 142, 151, 152, 154, 168, 169, 230, 232, 408], "converg": [34, 92, 104, 168, 188, 191, 256, 257, 405], "increas": [34, 43, 44, 66, 70, 79, 89, 92, 103, 104, 125, 136, 154, 165, 166, 168, 171, 174, 180, 191, 298, 325, 338, 344, 379, 392, 393, 394, 401, 406, 419, 440], "iter": [34, 53, 69, 71, 92, 104, 142, 154, 161, 166, 188, 189, 191, 251, 252, 253, 254, 256, 257, 258, 259, 302, 306, 309, 310, 313, 318, 375, 406, 407, 413], "6713": 34, "tight": [34, 168], "axhlin": [34, 355, 357, 360, 362, 364, 366, 368, 370, 372], "frameon": [34, 345, 347, 348], "084": [34, 41, 45, 439], "plot_haxby_grid_search": [34, 45, 439], "overal": [35, 66, 70, 125, 154, 168, 169, 256, 257], "non_rest": 35, "unique_condit": 35, "return_index": 35, "appear": [35, 54, 89, 283, 296, 298, 382, 417], "argsort": [35, 42, 43, 103], "fit_transform": [35, 36, 42, 47, 49, 50, 51, 52, 54, 55, 56, 58, 61, 70, 89, 92, 98, 99, 100, 102, 103, 104, 105, 106, 111, 117, 126, 154, 156, 159, 170, 181, 187, 258, 259, 265, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "feature_select": [35, 36, 41, 42, 44, 94, 98, 102, 105, 106, 111, 164], "selectkbest": [35, 41, 111, 134, 154], "f_classif": [35, 36, 41, 94, 98, 164], "multiclass": [35, 162], "onevsoneclassifi": [35, 162], "onevsrestclassifi": [35, 162], "svc_ovo": 35, "svc_ova": 35, "cross_val_scor": [35, 98, 164], "cv_scores_ovo": 35, "cv_scores_ova": 35, "ovo": 35, "ova": 35, "601855088049469": 35, "6712058072321548": 35, "boxplot": [35, 94], "text": [35, 75, 94, 98, 105, 115, 161, 169, 178, 211, 219, 229, 270, 274, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 440], "y_pred_ovo": 35, "y_pred_ova": 35, "2923": 35, "plot_haxby_multiclass": [35, 45, 439], "intrins": [36, 115, 158, 207, 208, 211, 325], "process_mask_img": [36, 44, 166, 255], "back": [36, 41, 42, 48, 55, 98, 100, 102, 104, 117, 127, 135, 136, 154, 158, 166, 169, 181, 258, 259, 265, 266, 327, 330, 333, 343, 375, 405, 406, 407], "astyp": [36, 40, 41, 43, 44, 68, 75, 84, 94], "process_mask": [36, 44, 133, 154], "picked_slic": 36, "02_decod": [36, 45, 439], "plot_haxby_searchlight": [36, 45, 439], "parallel": [36, 42, 43, 44, 47, 48, 79, 102, 105, 124, 154, 168, 171, 298, 330, 344], "thread": 36, "progress": [36, 42, 102, 105, 129, 154, 283], "mess": 36, "onc": [36, 49, 57, 118, 149, 154, 155, 160, 161, 168, 170, 171, 173, 174, 177, 181, 405, 424], "backend": [36, 42, 43, 44, 48, 102, 105, 125, 129, 139, 144, 149, 154, 259, 399], "lokybackend": [36, 42, 43, 44, 48, 102, 105], "concurr": [36, 42, 43, 44, 48, 101, 102, 105, 108], "worker": [36, 42, 43, 44, 48, 102, 105, 344], "elaps": [36, 42, 43, 44, 48, 102, 105], "finish": [36, 42, 43, 44, 48, 102, 105, 126, 154, 168, 169, 300, 320, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 392, 400, 402, 404], "shuffl": [36, 37, 48, 253, 254], "lt": [36, 75, 89, 91, 92], "0x7f0a3afc52b0": 36, "gt": [36, 75, 89, 91, 92], "0x7f0a3bf68650": 36, "environ": [36, 49, 52, 53, 58, 62, 75, 77, 139, 140, 142, 149, 152, 154, 161, 176, 177, 179, 241, 401, 438], "rerun": [36, 49, 52, 53, 58, 62, 75, 77], "trust": [36, 49, 52, 53, 58, 62, 75, 77, 171], "unabl": [36, 49, 52, 53, 58, 62, 70, 75, 77, 142, 154], "render": [36, 49, 52, 53, 58, 62, 75, 77, 126, 140, 154, 169, 358, 386, 388, 395, 397, 398, 400, 402, 403, 404], "page": [36, 49, 52, 53, 58, 62, 75, 77, 115, 139, 143, 149, 150, 151, 154, 158, 162, 166, 168, 169, 171, 177, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "nbviewer": [36, 49, 52, 53, 58, 62, 75, 77], "searchlightsearchlight": 36, "fmri_mask": [36, 92, 98, 102, 105, 106, 117], "p_valu": [36, 44, 77, 79, 94, 107, 146, 154, 271, 283, 296], "log10": [36, 42, 44, 77, 79, 94, 102, 105, 106, 298, 344, 417], "p_unmask": 36, "inverse_transform": [36, 40, 42, 49, 55, 92, 98, 100, 102, 103, 104, 105, 106, 111, 116, 125, 135, 142, 151, 154, 158, 187, 258, 259, 265, 266, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408, 440], "surrog": [36, 102], "mean_fmri": 36, "searchlight_img": 36, "scores_": [36, 44, 166], "hot": 36, "f_score": [36, 165, 440], "p_ma": 36, "ma": [36, 40, 64, 106], "f_score_img": 36, "demo": [37, 100, 101, 108, 110, 112, 113, 117, 145, 149, 154, 169, 187, 222, 251, 263, 264, 265, 266, 267, 268, 391, 395, 399, 439], "namburi": 37, "elliott": [37, 56, 115, 324, 325], "heinzl": 37, "soon": [37, 71, 177], "chee": 37, "w": [37, 44, 106, 115, 187, 189, 207, 210, 211, 213, 217, 227, 235, 256, 257], "hayn": [37, 115, 166], "2011": [37, 49, 58, 115, 118, 123, 134, 154, 155, 162, 166, 167, 198, 205, 207, 208, 211, 214, 220, 228, 230, 232, 245, 324, 325], "coars": 37, "pial_mesh": 37, "term": [37, 54, 66, 89, 92, 116, 150, 154, 160, 162, 168, 171, 174, 176, 179, 180, 227, 230, 256, 257, 270, 286, 290, 324, 420], "within": [37, 47, 55, 66, 68, 79, 88, 100, 102, 142, 145, 151, 154, 158, 160, 166, 170, 173, 251, 252, 255, 280, 283, 285, 290, 296, 300, 301, 320, 328, 329, 330, 331, 332, 333, 334, 342, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 380, 381, 406, 409, 418, 420], "adjac": [37, 142, 154, 260], "nearbi": 37, "infl_mesh": 37, "infl_": 37, "nn": 37, "nearestneighbor": 37, "radius_neighbors_graph": 37, "tolil": 37, "linear_model": [37, 40, 41, 44, 111, 259], "ridgeclassifi": 37, "make_pipelin": [37, 40, 44, 111], "standardscal": [37, 39, 40, 41, 44, 111], "search_light": [37, 255], "preced": [37, 169, 181, 283], "search": [37, 89, 125, 154, 169, 177, 189, 251, 252, 253, 254, 321], "light": [37, 134, 140, 142, 154, 169, 298], "sulc_": 37, "plot_haxby_searchlight_surfac": [37, 45, 439], "overview": [38, 166, 168, 176], "fetch_stimuli": [38, 219], "stimulus_inform": 38, "stim_typ": 38, "skip": [38, 49, 56, 126, 154, 396, 399], "file_nam": [38, 416], "suptitl": [38, 40, 42, 43, 44, 66, 79, 100, 101, 105], "img_path": [38, 322], "ravel": [38, 41, 43, 44, 102, 105, 106], "imread": 38, "plot_haxby_stimuli": [38, 45, 439], "gain": [39, 66, 163, 168, 228], "fetch_mixed_gambl": [39, 150, 154], "zmap_filenam": 39, "zmap": [39, 101, 228], "behavioral_target": 39, "svr": [39, 42, 44, 142, 154, 162, 252, 254, 255], "solver": [39, 115, 167, 251, 253, 256, 257], "termin": [39, 161, 169, 438], "max_it": [39, 40, 48, 57, 188, 189, 191, 251, 252, 253, 254, 256, 257], "10000": [39, 42, 49, 55, 102, 105, 298, 344], "pre": [39, 64, 67, 94, 101, 125, 134, 139, 151, 154, 171, 181, 274], "minmaxscal": 39, "0x7f0a2fd23cb0": 39, "observ": [39, 44, 58, 61, 63, 66, 71, 79, 80, 81, 102, 162, 166, 170, 171, 174, 176, 181, 274, 405], "learnt": 39, "impos": [39, 127, 154], "relat": [39, 46, 49, 50, 63, 64, 65, 66, 67, 68, 69, 71, 81, 100, 106, 113, 115, 118, 133, 134, 154, 156, 157, 159, 161, 162, 165, 168, 169, 174, 175, 176, 177, 181, 187, 216, 221, 242, 243, 246, 258, 259, 271, 283, 307, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 406, 408, 421, 438, 440], "guid": [39, 124, 154, 169, 173, 175, 176, 181, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 438], "unstructur": 39, "graph_net": 39, "heavi": [39, 42, 155, 169, 334], "spacenetregressor": [39, 43, 167, 256], "regressor": [39, 43, 56, 61, 62, 63, 66, 100, 101, 105, 108, 124, 145, 146, 150, 154, 156, 162, 170, 227, 252, 254, 257, 279, 283, 285, 290, 298, 324, 325, 344], "tv_l1": 39, "ep": [39, 256, 257], "prefer": [39, 51, 99, 158, 169, 179], "925": [39, 45, 439], "2271": 39, "plot_mixed_gambles_frem": [39, 45, 439], "partli": [40, 42, 168, 171, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 216, 219, 220, 221, 225, 227, 228, 229, 234, 240], "uchida": [40, 41, 115, 229], "h": [40, 41, 56, 65, 115, 201, 210, 217, 234, 235, 239, 270, 274, 324, 325], "yamashita": [40, 41, 115, 229], "sato": [40, 41, 115, 229], "morito": [40, 41, 115, 229], "tanab": [40, 41, 115, 229], "kamitani": [40, 41, 115, 229], "neuron": [40, 41, 58, 115, 166, 214, 229], "929": [40, 41, 115, 229], "sound": [40, 171], "real": [40, 161, 166, 168, 171, 179, 181], "world": [40, 179, 181, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 381, 390], "stimulu": [40, 41, 65, 100, 171], "particip": [40, 56, 66, 111, 115, 169, 171, 174, 324, 325], "10x10": [40, 41], "binari": [40, 41, 66, 75, 124, 151, 154, 174, 177, 181, 221, 251, 252, 253, 254, 256, 257, 393, 417, 420], "pixel": [40, 41, 171, 283, 296, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 400, 403, 418], "fetch_miyawaki2008": [40, 41, 89], "fmri_random_runs_filenam": 40, "stimuli_random_runs_filenam": 40, "multiniftimask": [40, 41, 48, 49, 146, 148, 152, 154, 178, 251, 252, 253, 254, 256, 257, 258, 259, 296, 298, 344, 406, 440], "clean": [40, 43, 49, 52, 53, 56, 58, 70, 103, 115, 124, 125, 132, 138, 139, 142, 146, 147, 149, 152, 154, 177, 180, 181, 187, 258, 259, 283, 301, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 380, 406, 408], "fmri_data": [40, 94, 283, 296], "wiht": 40, "stimulus_shap": 40, "stimulus_run": 40, "reshap": [40, 41, 44, 50, 68, 77, 105, 135, 152, 154, 159, 187], "loadtxt": [40, 41], "pylab": [40, 391], "wspace": [40, 44], "stack": [40, 51, 58, 147, 154, 174, 194], "offset": [40, 51, 84, 145, 154, 180, 206, 207, 316], "begin": [40, 62, 66, 71, 145, 154, 169, 174, 419], "fmri_run": 40, "stimuli_run": 40, "2860": 40, "5438": 40, "proce": [40, 55, 65, 117], "independ": [40, 48, 66, 97, 109, 113, 127, 154, 158, 160, 161, 166, 168, 171, 174, 181, 216, 251, 252, 253, 254, 258, 301, 308, 313, 324, 325, 327, 333, 344, 394, 399, 420, 439], "hold": [40, 78, 168, 169, 177, 258, 259, 290, 344, 355, 406], "held": [40, 166, 169, 251, 252, 253, 254, 438], "10th": 40, "r2_score": [40, 257], "multioutput": [40, 257], "raw_valu": 40, "threshold_img": [40, 81, 88, 125, 127, 149, 154, 299, 300], "cut_scor": 40, "bring": [40, 48, 163, 169, 176, 343], "score_map_img": 40, "thresholded_score_map_img": 40, "mark": [40, 56, 100, 115, 227, 324, 325], "four": [40, 44, 66, 149, 154, 181], "coord_transform": [40, 136, 154], "def": [40, 41, 44, 47, 53, 64, 66, 68, 100, 107, 111, 169, 395, 397], "index_to_xy_coord": 40, "newaxi": [40, 44, 80, 84], "xy_indices_of_special_voxel": 40, "marker": [40, 140, 142, 145, 147, 154, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 381, 390, 400, 401, 403, 408, 410, 440], "add_mark": [40, 55, 61, 70, 100, 131, 137, 140, 154, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 437], "magenta": [40, 70, 437], "lw": [40, 70], "construct": [40, 52, 54, 98, 157, 160, 166, 169, 170, 175, 176, 270, 271, 274, 297, 416], "gcf": 40, "set_size_inch": [40, 70], "closer": [40, 49, 168, 417], "presenc": [40, 66, 102, 408, 410], "lasso": [40, 57, 58, 155, 162, 167, 168, 252, 254, 256, 257, 259], "lassolarscv": 40, "sparsiti": [40, 48, 115, 127, 154, 155, 159, 160, 162, 163, 167, 168, 174, 189, 191, 256, 257, 259, 408], "marked_pixel": 40, "gridspec": [40, 147, 154], "gs1": 40, "1780": 40, "1951": [40, 142, 154], "2131": [40, 142, 154], "rf": [40, 68], "named_step": [40, 44, 98], "zeros_lik": [40, 68, 84, 102], "ax_im": 40, "masked_less": [40, 106], "green": [40, 49, 89, 92, 115, 147, 154, 215, 270, 274], "add_patch": 40, "updat": [40, 93, 100, 124, 125, 126, 129, 133, 134, 139, 142, 148, 149, 151, 152, 154, 177, 187, 188, 189, 207, 230, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "1935": [40, 115], "rdpu": 40, "0x7f0a39e882f0": 40, "rel": [40, 49, 58, 65, 66, 91, 169, 171, 174, 177, 251, 252, 253, 254, 255, 256, 257, 283, 285, 290, 305, 400, 402, 404], "roughli": [40, 162, 169, 171], "relationship": [40, 42, 75, 166, 173, 175, 176, 227, 344], "979": [40, 45, 439], "plot_miyawaki_encod": [40, 45, 439], "elabor": [41, 127, 154, 437], "articl": [41, 64, 67, 115, 163, 166, 167, 168, 176, 195, 197, 198, 199, 201, 202, 205, 207, 208, 209, 215, 220, 225, 227, 228, 229, 230, 232, 234, 240, 245, 253, 254, 324, 325, 344, 380, 421], "stderr": 41, "miyawaki_dataset": [41, 89], "x_random_filenam": 41, "x_figure_filenam": 41, "y_random_filenam": 41, "y_figure_filenam": 41, "y_shape": 41, "miyawaki2008": [41, 89], "data_figure_run01": [41, 89], "n_featur": [41, 47, 57, 168, 187, 188, 189, 191, 193, 251, 252, 253, 254, 256, 257, 258, 259, 270, 283, 296, 405, 407, 413], "list_of_2d_arrai": 41, "squar": [41, 43, 49, 66, 100, 102, 105, 115, 156, 162, 167, 168, 170, 187, 257, 270, 273, 274, 275, 283, 296, 307, 323, 324, 329, 332, 344, 405, 406, 407, 421], "y_row": 41, "y_col": 41, "height_tf": 41, "width_tf": 41, "yt_tall": 41, "dot": [41, 44, 55, 100, 103, 168, 273, 274, 275, 276, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "yt_larg": 41, "yt_big": 41, "r_": 41, "orthogonalmatchingpursuit": 41, "omp": 41, "clf": [41, 136, 154], "n_clf": 41, "scl": 41, "n_nonzero_coef": 41, "03d": [41, 100], "002": 41, "003": 41, "004": [41, 115, 229], "006": [41, 115, 214], "007": [41, 115, 205, 228], "009": [41, 115, 380], "011": 41, "012": 41, "013": 41, "014": 41, "015": [41, 108, 109, 439], "016": [41, 66], "017": 41, "018": [41, 115, 324, 325], "019": 41, "020": [41, 56, 115, 324, 325], "021": 41, "022": 41, "023": 41, "024": 41, "025": 41, "026": 41, "027": 41, "028": 41, "029": 41, "030": 41, "031": 41, "032": 41, "033": [41, 115, 220, 245], "034": 41, "035": 41, "036": 41, "037": [41, 115], "038": 41, "039": 41, "040": 41, "041": [41, 115, 166], "042": [41, 115, 324, 325, 421], "043": 41, "044": 41, "045": 41, "046": 41, "047": 41, "048": [41, 115, 324], "049": 41, "050": 41, "051": 41, "052": [41, 115, 225], "053": 41, "054": [41, 115, 166], "055": 41, "056": 41, "057": 41, "058": 41, "059": [41, 54, 59, 439], "060": [41, 76, 115, 278, 344], "061": [41, 115, 298, 344], "062": [41, 115, 167], "063": 41, "064": [41, 115, 324, 325], "065": 41, "066": 41, "067": 41, "068": 41, "069": 41, "070": 41, "071": 41, "072": 41, "073": [41, 56, 115, 162, 325], "074": 41, "075": 41, "076": 41, "077": 41, "078": 41, "079": 41, "080": [41, 115], "081": 41, "083": 41, "085": 41, "086": 41, "087": 41, "088": 41, "089": 41, "090": 41, "091": 41, "092": 41, "093": 41, "094": 41, "096": 41, "097": 41, "098": 41, "099": 41, "split_multi_scal": 41, "multi_scal": 41, "yw": 41, "yh": 41, "split_index": 41, "tall": 41, "y_pred_tal": 41, "1x2": 41, "applic": [41, 147, 154, 156, 162, 168, 175, 283, 296, 330, 344, 411, 412, 418, 437, 438, 440], "calculu": 41, "height_tf_i": 41, "y_pred_larg": 41, "2x1": 41, "width_tf_i": 41, "y_pred_big": 41, "2x2": [41, 140, 154, 355, 357, 360, 374, 379, 384, 387, 392, 393, 394, 437], "accuracy_scor": [41, 51], "f1_score": 41, "precision_scor": 41, "recall_scor": 41, "recal": [41, 251, 253], "zero_divis": 41, "f1": [41, 161, 251, 253], "801208": 41, "413969": 41, "572388": 41, "465973": 41, "six": 41, "ground": [41, 44, 57, 161], "truth": [41, 44, 57, 161], "sp1": 41, "sp2": 41, "sp3": 41, "binar": [41, 94, 148, 154, 300], "miyawaki2008_reconstruction_": 41, "939": 41, "plot_miyawaki_reconstruct": [41, 45, 439], "densiti": [42, 57, 75, 168, 173, 175, 220, 234], "agre": [42, 75, 169, 234, 296, 298], "agreement": [42, 62, 75, 234], "spm8": [42, 75, 197, 234], "newseg": [42, 75], "ran": 42, "prepar": [42, 58, 94, 99, 101, 108, 117, 129, 154, 165, 178, 265, 266, 328, 329, 330, 331, 332, 334, 408, 440], "impact": [42, 66, 78, 149, 154, 166, 169, 177, 181, 283, 296, 325], "significantli": [42, 66, 139, 154, 166, 168], "noisi": [42, 92, 155], "detriment": [42, 325], "permut": [42, 77, 79, 102, 105, 115, 124, 145, 154, 164, 166, 171, 298, 315, 344, 431], "exact": [42, 166, 169, 171, 220, 221, 437], "comparison": [42, 49, 51, 57, 62, 66, 81, 93, 99, 100, 102, 115, 118, 155, 158, 165, 166, 167, 172, 174, 198, 440], "clearer": [42, 169], "oasis_dataset": [42, 75], "fetch_oasis_vbm": [42, 43, 75], "gray_matter_map_filenam": [42, 75], "gray_matter_map": [42, 43, 75, 234], "ext_var": [42, 43, 75, 77, 79, 105, 234], "train_test_split": [42, 43], "gm_imgs_train": [42, 43], "gm_imgs_test": [42, 43], "age_train": [42, 43], "age_test": [42, 43], "train_siz": [42, 43], "white_matter_map": [42, 75, 234], "oasis1": [42, 43, 75], "oas1_0001_mr1": [42, 43, 75], "mwrc1oas1_0001_mr1_mpr_anon_fslswapdim_bet": [42, 43, 75], "mwrc2oas1_0001_mr1_mpr_anon_fslswapdim_bet": [42, 75], "cach": [42, 43, 49, 54, 56, 102, 123, 127, 154, 158, 188, 251, 252, 253, 254, 256, 257, 258, 259, 283, 296, 302, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 406, 407, 408, 424], "gm_maps_mask": 42, "variancethreshold": 42, "variance_threshold": 42, "get_support": 42, "decoderregressor": [42, 142, 145, 146, 154, 162, 251, 254], "benefit": [42, 49, 56, 66, 142, 154, 169, 180], "some_high_valu": [42, 43], "advantag": [42, 43, 69, 168, 181], "neg_mean_absolute_error": [42, 252, 254], "trend": [42, 43, 89, 181], "etc": [42, 43, 80, 89, 92, 94, 118, 167, 170, 174, 179, 227, 251, 252, 253, 254, 256, 257, 275, 333], "perm": [42, 43], "age_pr": 42, "prediction_scor": 42, "670599": 42, "bg_filenam": 42, "absolut": [42, 43, 58, 111, 142, 154, 166, 168, 169, 212, 222, 235, 300, 305, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 379, 381, 386, 387, 389, 393, 394, 395, 398, 401, 402, 404, 437], "year": [42, 43, 115, 168, 177, 216, 234], "0x7f0a39bb3530": 42, "mass_univari": [42, 79, 102, 105, 145, 151, 154, 166, 173], "permuted_ol": [42, 79, 102, 105, 124, 125, 145, 150, 151, 154, 166, 173, 298], "neg_log_pv": [42, 77, 79, 102], "t_scores_original_data": [42, 102], "intercept": [42, 75, 76, 77, 79, 80, 81, 102, 106, 125, 154, 166, 251, 252, 253, 254, 256, 257, 297, 298, 344], "n_perm": [42, 77, 79, 102, 105, 298, 344], "signed_neg_log_pv": [42, 102], "signed_neg_log_pvals_unmask": [42, 102], "rdbu_r": [42, 44, 102, 391], "log_": [42, 102, 105, 106], "parametr": [42, 65, 66, 77, 79, 102, 105, 106, 115, 166, 173, 174, 271, 272, 277, 301, 420], "n_detect": [42, 102, 105], "detect": [42, 68, 77, 79, 89, 100, 102, 106, 115, 166, 171, 174, 181, 187, 324, 325, 405, 437], "1970": 42, "2484": 42, "plot_oasis_vbm": [42, 45, 142, 154, 439], "ag": [43, 46, 59, 78, 97, 109, 113, 115, 142, 154, 155, 162, 163, 167, 173, 174, 175, 176, 187, 195, 205, 216, 220, 227, 234, 240, 245, 251, 252, 253, 254, 256, 257, 327, 332, 381, 391, 399, 439], "concentr": [43, 169, 171, 174], "ram": 43, "box": [43, 84, 98, 104, 135, 154, 162, 169, 180, 316], "dataset_fil": 43, "gm_img": 43, "check_random_st": [43, 44], "rng": [43, 169], "intermedi": [43, 69, 164, 176], "graph": [43, 47, 53, 57, 155, 157, 167, 168, 174, 175, 251, 252, 256, 257, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 390, 440], "beauti": 43, "tv": [43, 115, 167, 251, 252, 256, 257], "expens": 43, "longer": [43, 104, 122, 124, 125, 126, 136, 140, 142, 145, 147, 149, 151, 152, 154, 171], "runtim": [43, 151, 154, 169, 256, 257], "mse": [43, 256, 257, 275], "oas1_0003_mr1": 43, "mwrc1oas1_0003_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0086_mr1": 43, "mwrc1oas1_0086_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0052_mr1": 43, "mwrc1oas1_0052_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0211_mr1": 43, "mwrc1oas1_0211_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0216_mr1": 43, "mwrc1oas1_0216_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0096_mr1": 43, "mwrc1oas1_0096_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0182_mr1": 43, "mwrc1oas1_0182_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0041_mr1": 43, "mwrc1oas1_0041_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0214_mr1": 43, "mwrc1oas1_0214_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0069_mr1": 43, "mwrc1oas1_0069_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0025_mr1": 43, "mwrc1oas1_0025_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0159_mr1": 43, "mwrc1oas1_0159_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0113_mr1": 43, "mwrc1oas1_0113_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0038_mr1": 43, "mwrc1oas1_0038_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0013_mr1": 43, "mwrc1oas1_0013_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0220_mr1": 43, "mwrc1oas1_0220_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0180_mr1": 43, "mwrc1oas1_0180_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0007_mr1": 43, "mwrc1oas1_0007_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0031_mr1": 43, "mwrc1oas1_0031_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0135_mr1": 43, "mwrc1oas1_0135_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0005_mr1": 43, "mwrc1oas1_0005_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0037_mr1": 43, "mwrc1oas1_0037_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0160_mr1": 43, "mwrc1oas1_0160_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0163_mr1": 43, "mwrc1oas1_0163_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0123_mr1": 43, "mwrc1oas1_0123_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0162_mr1": 43, "mwrc1oas1_0162_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0012_mr1": 43, "mwrc1oas1_0012_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0070_mr1": 43, "mwrc1oas1_0070_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0126_mr1": 43, "mwrc1oas1_0126_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0164_mr1": 43, "mwrc1oas1_0164_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0188_mr1": 43, "mwrc1oas1_0188_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0226_mr1": 43, "mwrc1oas1_0226_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0173_mr1": 43, "mwrc1oas1_0173_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0078_mr1": 43, "mwrc1oas1_0078_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0138_mr1": 43, "mwrc1oas1_0138_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0072_mr1": 43, "mwrc1oas1_0072_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0050_mr1": 43, "mwrc1oas1_0050_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0184_mr1": 43, "mwrc1oas1_0184_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0032_mr1": 43, "mwrc1oas1_0032_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0045_mr1": 43, "mwrc1oas1_0045_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0121_mr1": 43, "mwrc1oas1_0121_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0176_mr1": 43, "mwrc1oas1_0176_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0177_mr1": 43, "mwrc1oas1_0177_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0029_mr1": 43, "mwrc1oas1_0029_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0026_mr1": 43, "mwrc1oas1_0026_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0208_mr1": 43, "mwrc1oas1_0208_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0165_mr1": 43, "mwrc1oas1_0165_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0091_mr1": 43, "mwrc1oas1_0091_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0044_mr1": 43, "mwrc1oas1_0044_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0190_mr1": 43, "mwrc1oas1_0190_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0053_mr1": 43, "mwrc1oas1_0053_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0106_mr1": 43, "mwrc1oas1_0106_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0174_mr1": 43, "mwrc1oas1_0174_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0049_mr1": 43, "mwrc1oas1_0049_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0155_mr1": 43, "mwrc1oas1_0155_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0004_mr1": 43, "mwrc1oas1_0004_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0117_mr1": 43, "mwrc1oas1_0117_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0060_mr1": 43, "mwrc1oas1_0060_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0148_mr1": 43, "mwrc1oas1_0148_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0204_mr1": 43, "mwrc1oas1_0204_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0202_mr1": 43, "mwrc1oas1_0202_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0209_mr1": 43, "mwrc1oas1_0209_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0055_mr1": 43, "mwrc1oas1_0055_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0090_mr1": 43, "mwrc1oas1_0090_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0039_mr1": 43, "mwrc1oas1_0039_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0009_mr1": 43, "mwrc1oas1_0009_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0124_mr1": 43, "mwrc1oas1_0124_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0103_mr1": 43, "mwrc1oas1_0103_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0094_mr1": 43, "mwrc1oas1_0094_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0200_mr1": 43, "mwrc1oas1_0200_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0205_mr1": 43, "mwrc1oas1_0205_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0101_mr1": 43, "mwrc1oas1_0101_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0010_mr1": 43, "mwrc1oas1_0010_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0015_mr1": 43, "mwrc1oas1_0015_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0067_mr1": 43, "mwrc1oas1_0067_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0193_mr1": 43, "mwrc1oas1_0193_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0146_mr1": 43, "mwrc1oas1_0146_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0019_mr1": 43, "mwrc1oas1_0019_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0080_mr1": 43, "mwrc1oas1_0080_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0199_mr1": 43, "mwrc1oas1_0199_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0150_mr1": 43, "mwrc1oas1_0150_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0189_mr1": 43, "mwrc1oas1_0189_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0207_mr1": 43, "mwrc1oas1_0207_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0071_mr1": 43, "mwrc1oas1_0071_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0061_mr1": 43, "mwrc1oas1_0061_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0120_mr1": 43, "mwrc1oas1_0120_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0056_mr1": 43, "mwrc1oas1_0056_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0223_mr1": 43, "mwrc1oas1_0223_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0065_mr1": 43, "mwrc1oas1_0065_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0054_mr1": 43, "mwrc1oas1_0054_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0099_mr1": 43, "mwrc1oas1_0099_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0023_mr1": 43, "mwrc1oas1_0023_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0064_mr1": 43, "mwrc1oas1_0064_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0181_mr1": 43, "mwrc1oas1_0181_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0217_mr1": 43, "mwrc1oas1_0217_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0144_mr1": 43, "mwrc1oas1_0144_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0042_mr1": 43, "mwrc1oas1_0042_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0178_mr1": 43, "mwrc1oas1_0178_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0218_mr1": 43, "mwrc1oas1_0218_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0002_mr1": 43, "mwrc1oas1_0002_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0059_mr1": 43, "mwrc1oas1_0059_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0167_mr1": 43, "mwrc1oas1_0167_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0145_mr1": 43, "mwrc1oas1_0145_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0169_mr1": 43, "mwrc1oas1_0169_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0115_mr1": 43, "mwrc1oas1_0115_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0111_mr1": 43, "mwrc1oas1_0111_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0131_mr1": 43, "mwrc1oas1_0131_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0098_mr1": 43, "mwrc1oas1_0098_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0082_mr1": 43, "mwrc1oas1_0082_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0136_mr1": 43, "mwrc1oas1_0136_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0227_mr1": 43, "mwrc1oas1_0227_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0022_mr1": 43, "mwrc1oas1_0022_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0212_mr1": 43, "mwrc1oas1_0212_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0079_mr1": 43, "mwrc1oas1_0079_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0119_mr1": 43, "mwrc1oas1_0119_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0016_mr1": 43, "mwrc1oas1_0016_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0104_mr1": 43, "mwrc1oas1_0104_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0203_mr1": 43, "mwrc1oas1_0203_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0114_mr1": 43, "mwrc1oas1_0114_mr1_mpr_anon_fslswapdim_bet": 43, "transform_single_img": [43, 49, 52, 53, 56, 58, 327, 328, 329, 330, 331, 332, 333, 334, 408], "space_net": 43, "940": 43, "4min": 43, "21511936187744": 43, "7535853226979574": 43, "ax1": [43, 63, 388], "ax2": [43, 63, 388], "2902": [43, 149, 154], "plot_oasis_vbm_space_net": [43, 45, 439], "sketch": 44, "mathbf": 44, "opposit": [44, 71, 166], "corner": [44, 132, 154, 169, 318], "middl": [44, 66, 91, 115, 139, 147, 154, 234, 322], "__doc__": [44, 71, 72], "linalg": [44, 168], "ndimag": [44, 94, 180, 221, 243, 246, 310, 336, 337, 338, 340, 341], "gaussian_filt": 44, "f_regress": [44, 102, 105, 106, 111], "create_simulation_data": 44, "snr": [44, 174, 301, 420], "roi_siz": 44, "smooth_x": 44, "xx": 44, "randn": [44, 63], "xi": [44, 115, 207], "norm_nois": 44, "norm": [44, 55, 62, 76, 79, 101, 107, 108, 187, 193, 251, 252, 253, 254, 256, 257, 258, 259, 283, 380, 405, 406, 407, 408], "exp": 44, "noise_coef": 44, "log": [44, 49, 53, 77, 79, 94, 129, 154, 166, 168, 270, 273, 274, 275, 276, 312, 388], "1f": [44, 395, 398], "db": [44, 115, 275, 276], "plot_slic": 44, "hspace": [44, 49, 57], "bool": [44, 94, 103, 187, 188, 189, 191, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 213, 214, 215, 216, 219, 220, 221, 223, 224, 225, 227, 228, 229, 230, 232, 234, 240, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 278, 280, 283, 296, 298, 299, 300, 301, 305, 307, 311, 314, 316, 317, 320, 321, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 379, 380, 381, 382, 383, 384, 386, 387, 389, 390, 391, 392, 393, 394, 395, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 411, 412, 417, 418, 419, 420, 421], "uint8": [44, 56, 91, 151, 154, 314], "recov": [44, 58, 135, 154, 155], "elast": 44, "bayesian": [44, 171], "metaprior": 44, "ridgecv": [44, 125, 154, 251, 252, 253, 254], "elasticnetcv": 44, "bayesian_ridg": 44, "bayesianridg": 44, "enet_cv": 44, "l1_ratio": [44, 256, 257], "ridge_cv": 44, "r2": [44, 146, 154, 252, 254, 275], "expos": [44, 49, 118, 126, 131, 135, 136, 152, 154, 169, 179, 230, 231, 232, 233], "fairli": [44, 162, 171], "attribut": [44, 48, 49, 50, 84, 89, 117, 118, 126, 137, 146, 147, 149, 150, 151, 154, 155, 158, 159, 160, 166, 169, 179, 181, 187, 188, 189, 196, 200, 202, 205, 216, 219, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 251, 252, 253, 254, 256, 257, 258, 259, 265, 273, 274, 275, 276, 283, 303, 311, 324, 325, 328, 329, 330, 331, 332, 333, 334, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 395, 397, 398, 405, 406, 407, 408, 423, 424], "t1": [44, 75, 148, 154, 197, 220, 242, 244, 245, 247, 379, 437], "els": [44, 47, 68, 70, 72, 94, 100, 228, 251, 252, 253, 254, 256, 257, 396], "elapsed_tim": 44, "__class__": [44, 48, 49], "__name__": [44, 48, 49], "isnan": [44, 77, 94, 102, 105, 106], "exercic": 44, "recurs": [44, 49, 98, 115, 142, 154, 158, 164, 174, 175, 406, 407, 413], "elimin": [44, 98, 164, 167, 392, 393], "rfe": [44, 98, 164], "tip": [44, 176], "plot_simulated_data": [44, 45, 439], "1234": [45, 439], "1351": [45, 439], "2901": [45, 439], "2483": [45, 439], "938": [45, 439], "2922": [45, 439], "2270": [45, 439], "762": [45, 55, 439], "turn": [47, 66, 84, 156, 158, 168, 181, 283, 296, 336, 337, 338, 340, 341, 392, 393, 394, 401, 418], "find_parcellation_cut_coord": [47, 58, 139, 149, 154, 156, 377, 381], "find_probabilistic_atlas_cut_coord": [47, 50, 53, 139, 154, 156, 159, 376, 381], "intermediari": 47, "multiniftilabelsmask": [47, 124, 126, 154, 178, 440], "multiniftimapsmask": [47, 124, 126, 154, 178, 440], "connectivitymeasur": [47, 50, 51, 54, 56, 58, 99, 111, 126, 127, 129, 132, 135, 145, 154, 155, 156, 159], "fetch_atlas_yeo_2011": [47, 86, 156], "liber": [47, 79], "thick_17": [47, 211], "yeo_2011": 47, "yeo_jneurophysiol11_mni152": 47, "yeo2011_17networks_mni152_freesurferconformed1mm_liberalmask": 47, "fetch_development_fmri": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 85, 89, 91, 92, 95, 99, 104, 142, 154, 155, 156, 158, 159, 176, 181], "counfound": 47, "development_fmri": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "pixar123_task": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "pixar_spac": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "mni152nlin2009casym_desc": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "preproc_bold": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 100, 101, 104, 108], "pixar_desc": [47, 52, 53, 55, 56, 58], "reducedconfounds_regressor": [47, 52, 53, 55, 56, 58], "conenctivitymeasur": 47, "connectome_measur": [47, 50, 159], "labels_img": [47, 49, 56, 91, 94, 111, 156, 265, 328, 331, 376, 409, 411, 414], "time_seri": [47, 51, 52, 54, 56, 58, 155, 156], "mean_correlation_matrix": [47, 51], "mean_": [47, 51, 111, 155, 187], "strength": [47, 142, 145, 154, 318, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 437], "0x7f0a3b3ea300": 47, "latter": [47, 162, 168, 187, 188, 189, 203, 204, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "lag_correl": 47, "lag_cor": 47, "corrcoef": 47, "lag_correlation_matrix": 47, "adjacency_matrix": [47, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 400], "maps_img": [47, 52, 53, 54, 156, 181, 328, 329, 331, 332, 377, 392, 408, 410, 412, 415], "cache_mixin": [47, 49, 52, 54], "current": [47, 49, 52, 54, 64, 68, 86, 151, 154, 166, 168, 169, 174, 177, 181, 191, 199, 200, 208, 234, 235, 271, 321, 323, 327, 328, 329, 330, 331, 332, 333, 334, 395, 397, 398, 401, 408], "1851": 47, "plot_atlas_comparison": [47, 59, 439], "fmr": 48, "exhibit": [48, 171, 181], "fluctuat": [48, 66, 168, 171, 174], "decomposit": [48, 50, 92, 97, 103, 109, 113, 115, 125, 127, 134, 137, 145, 151, 154, 159, 160, 175, 216, 307, 308, 313, 327, 330, 333, 394, 399, 408, 421, 439], "simultan": [48, 168, 191], "priori": 48, "children": [48, 99, 142, 154, 175, 216], "young": [48, 115, 175, 199, 227, 234], "adult": [48, 51, 99, 115, 142, 154, 175, 216, 234], "watch": [48, 49, 50, 52, 54, 55, 85, 89, 92, 104, 142, 154, 157, 175, 176, 181, 216, 440], "movi": [48, 49, 50, 52, 54, 55, 85, 89, 92, 104, 142, 154, 157, 175, 176, 181, 216, 440], "algorithm": [48, 49, 89, 92, 94, 102, 104, 105, 117, 155, 158, 159, 160, 163, 164, 166, 174, 181, 182, 184, 188, 191, 234, 258, 259, 307, 339, 341, 405, 408, 410, 421], "preprint": 48, "rest_dataset": [48, 50, 53, 159], "faster": [48, 49, 104, 136, 154, 167, 168, 169, 230, 259, 316, 317, 386, 387, 393, 394, 401, 424], "n_compon": [48, 50, 92, 103, 104, 159, 258, 259, 413], "mask_strategi": [48, 89, 92, 104, 142, 148, 154, 181, 251, 252, 253, 254, 258, 259, 330, 333, 406], "compon": [48, 50, 54, 66, 92, 94, 97, 109, 113, 115, 127, 134, 135, 137, 145, 154, 156, 157, 158, 159, 171, 174, 179, 180, 187, 188, 189, 198, 208, 216, 227, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 273, 275, 276, 283, 296, 308, 310, 313, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 378, 394, 399, 405, 406, 407, 408, 409, 410, 421, 439, 440], "components_img_": [48, 50, 137, 154, 159, 160, 258, 259], "canica_components_img": 48, "components_img": [48, 50, 159], "canica_resting_st": 48, "pixar124_task": 48, "pixar125_task": 48, "pixar126_task": 48, "pixar127_task": 48, "pixar128_task": 48, "pixar001_task": [48, 53, 85], "pixar002_task": [48, 53], "pixar003_task": [48, 53], "pixar004_task": 48, "pixar005_task": 48, "pixar006_task": 48, "pixar007_task": 48, "pixar008_task": 48, "pixar009_task": 48, "pixar010_task": 48, "pixar011_task": 48, "pixar012_task": 48, "pixar013_task": 48, "pixar014_task": 48, "pixar015_task": 48, "pixar016_task": 48, "pixar017_task": 48, "pixar018_task": 48, "pixar019_task": 48, "pixar020_task": 48, "pixar021_task": 48, "pixar022_task": 48, "pixar023_task": 48, "pixar024_task": 48, "self": [48, 49, 94, 169, 187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 270, 273, 274, 275, 276, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "functool": 48, "compute_multi_brain_mask": [48, 124, 148, 154, 330], "0x7f0a3b8a13a0": 48, "mask_typ": [48, 337, 340], "887": 48, "extmath": 48, "randomized_svd": 48, "003659": 48, "013254": 48, "012477": 48, "002881": 48, "transpos": [48, 145, 154, 168], "n_iter": [48, 49, 221, 243, 246, 406, 407, 413], "___________________________________________________randomized_svd": 48, "0x7f0a3abcd0a0": 48, "cur_img": [48, 87], "ic": [48, 103], "natur": [48, 115, 118, 174, 216, 227, 230, 232], "cleaner": [48, 66, 139, 154], "compress": [48, 115, 139, 154, 157, 160, 179, 259, 440], "onlin": [48, 115, 160, 169, 259, 438], "isbi": [48, 115, 160, 258, 259], "2016": [48, 100, 115, 129, 130, 131, 132, 133, 154, 160, 217, 235, 259, 380], "lectur": [48, 115, 160, 176, 187], "dictlearn": [48, 50, 125, 127, 137, 154, 159, 160], "dict_learn": [48, 50, 159], "n_epoch": [48, 259], "umask": 48, "dictlearning_components_img": 48, "dictionary_learning_resting_st": 48, "001315": 48, "004387": 48, "011243": 48, "004194": 48, "_compute_load": 48, "002859": 48, "002701": 48, "008241": 48, "003048": 48, "622651": 48, "322742": 48, "777205": 48, "743122": 48, "_________________________________________________compute_load": 48, "_dict_learn": 48, "dict_learning_onlin": 48, "batch_siz": [48, 259, 405], "cd": [48, 177, 259], "dict_init": [48, 259], "572552": 48, "18423": 48, "203352": 48, "254058": 48, "return_cod": 48, "1090": 48, "_____________________________________________dict_learning_onlin": 48, "0x7f0a2d2e4b30": 48, "comp": [48, 198], "per_compon": [48, 145, 154, 258, 259, 406], "ticker": [48, 49], "formatstrformatt": 48, "gca": [48, 51, 99], "xaxi": [48, 49], "set_major_formatt": [48, 49], "_explained_vari": 48, "227098e": 48, "322679e": 48, "971598e": 48, "629670e": 48, "persist": [48, 92], "happen": [48, 92, 166, 181, 424], "caus": [48, 49, 84, 92, 127, 154, 319], "wrap": [48, 49, 52, 56, 92, 161, 416], "______________________________________________explained_vari": 48, "3min": 48, "2882": [48, 59, 439], "plot_compare_decomposit": [48, 59, 142, 154, 439], "constrain": [49, 50, 115, 158, 175, 200, 205, 406], "agglomer": [49, 115, 174, 175, 253, 254, 405, 406, 407, 413], "regim": 49, "subsequ": [49, 84, 181, 230, 232, 234, 324, 325], "empir": [49, 158, 165, 166, 167, 168, 188, 191, 325, 440], "baptist": [49, 115, 188, 225, 230, 232, 258], "polin": [49, 64, 67, 115, 118, 188, 225, 230, 232, 258, 301, 420], "good": [49, 56, 65, 66, 117, 134, 154, 155, 158, 160, 162, 163, 164, 165, 167, 168, 169, 170, 177, 179, 181, 230, 253, 254, 375, 440], "2014": [49, 100, 102, 115, 158, 159, 166, 167, 227, 324, 344, 408], "supervis": [49, 162, 164, 165, 174, 176], "evelyn": [49, 115, 167], "eger": [49, 115, 167], "christin": [49, 115, 240], "keribin": 49, "elsevi": 49, "pictur": [49, 117, 158, 166, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "discuss": [49, 56, 111, 139, 154, 158, 161, 164, 166, 171, 173, 177, 180, 325, 344, 438], "long": [49, 118, 169, 171, 324, 325, 380], "agglom": [49, 142, 154, 158, 406], "_estimator_fit": 49, "002154": 49, "002661": 49, "007053": 49, "007877": 49, "agglomerativeclust": [49, 406], "24256x24256": 49, "162682": 49, "element": [49, 132, 151, 154, 160, 166, 174, 187, 193, 194, 197, 251, 252, 253, 254, 255, 265, 266, 301, 318, 327, 328, 329, 330, 331, 332, 333, 334, 340, 389, 408, 414, 420, 424], "n_cluster": [49, 405, 407, 413], "_agglom": 49, "ward_tre": 49, "return_dist": 49, "________________________________________________________ward_tre": 49, "____________________________________________________estimator_fit": 49, "980": [49, 79], "labels_img_": [49, 158, 328, 331, 406], "ward_labels_img": 49, "ward_parcel": 49, "first_plot": 49, "effect": [49, 53, 60, 61, 64, 66, 69, 70, 71, 73, 75, 79, 80, 89, 95, 100, 102, 113, 115, 126, 138, 154, 160, 162, 166, 168, 170, 171, 181, 187, 188, 189, 203, 204, 218, 231, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 271, 272, 273, 275, 276, 277, 279, 280, 283, 286, 296, 298, 313, 325, 327, 328, 329, 330, 331, 332, 333, 334, 344, 379, 392, 393, 394, 399, 401, 405, 406, 407, 408, 439], "approxim": [49, 64, 71, 115, 158, 275, 276, 323, 407, 413], "mask_img_": [49, 66, 77, 79, 89, 92, 117, 181, 251, 252, 253, 254, 256, 257, 258, 259, 266, 328, 330, 331, 333], "original_voxel": 49, "mean_func_img": [49, 92], "min": [49, 53, 55, 58, 102, 103, 147, 148, 154, 316, 317, 379, 380, 384, 386, 387, 389, 390, 392, 393, 394, 395, 397, 398, 401, 402, 404], "opportun": 49, "fmri_reduc": 49, "fmri_compress": 49, "60000": 49, "base_mask": [49, 52, 53, 56, 58, 92], "_filter_and_extract": [49, 52, 53, 54, 56, 58], "0x7f0a3afa8710": 49, "nifti_labels_mask": [49, 56, 91], "_extractionfunctor": [49, 52, 53, 56, 58], "0x7f0a399a2de0": 49, "background_label": [49, 56, 91, 181, 328, 331, 376, 411, 414], "keep_masked_label": [49, 56, 91, 126, 154, 331, 411], "0x7f0a3a551760": 49, "0x7f0a3b957290": 49, "niftilabelsmask": [49, 54, 56, 83, 94, 96, 113, 126, 139, 140, 142, 145, 146, 147, 149, 151, 154, 156, 178, 203, 216, 327, 328, 329, 332, 411, 414, 416, 439, 440], "_______________________________________________filter_and_extract": [49, 52, 53, 56, 58], "0x7f0a3b64be60": 49, "But": [49, 80, 98, 159, 168, 171, 181], "10mm": 49, "ON": 49, "004934": 49, "015396": 49, "003247": 49, "001756": 49, "minibatchkmean": [49, 405, 406], "n_init": [49, 258, 405], "kmeans_labels_img": 49, "kmeans_parcel": 49, "grow": [49, 155], "unbalanc": 49, "singleton": [49, 327, 328, 329, 330, 331, 332, 333, 334, 408], "tailor": [49, 69, 158], "enforc": [49, 89, 151, 154, 155, 168, 169, 256, 257, 283], "root": [49, 168, 187, 203, 204, 274, 324, 405, 406, 407], "piec": [49, 179, 440], "adapt": [49, 65, 117, 159, 162, 169, 283, 292, 324], "hierarchical_kmean": [49, 149, 154, 406], "hkmean": 49, "hierarchicalkmean": [49, 149, 154], "x27": [49, 62, 89, 91], "parcellationsparcel": 49, "hkmeans_labels_img": 49, "hierarchical_kmeans_parcel": 49, "count": [49, 101, 126, 154, 230, 232, 273], "kmeans_count": 49, "return_count": 49, "hkmeans_count": 49, "voxel_ratio": 49, "round": [49, 395, 398], "3000": 49, "nrow": [49, 63, 79, 100, 101], "sharex": 49, "gridspec_kw": [49, 80, 100], "height_ratio": 49, "semilogx": 49, "hist": [49, 70, 388], "set_ylim": 49, "scalarformatt": 49, "yaxi": 49, "set_label_coord": 49, "ec": 49, "0x7f0a3b1cf620": 49, "thousand": [49, 181, 406], "properti": [49, 71, 164, 168, 171, 174, 181, 260, 283, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "notabl": [49, 156], "constraint": [49, 158, 168, 321], "kahn": [49, 115, 407, 413], "ieee": [49, 115, 167, 258, 259, 407, 413], "transact": [49, 115, 167], "pp": 49, "march": [49, 121, 137, 146, 154, 255], "2019": [49, 51, 99, 115, 140, 141, 142, 154, 215, 407, 413], "hal": [49, 115, 167, 408], "archiv": [49, 234], "ouvert": 49, "01366651": 49, "5000": [49, 55, 98], "0x7f0a4eb9d130": 49, "rena_clust": [49, 124, 154], "recursive_neighbor_agglomer": [49, 124, 154], "_________________________________recursive_neighbor_agglomer": 49, "0x7f0a3ac6e750": 49, "0x7f0a4eec8d40": 49, "0x7f0a3a235580": 49, "0x7f0a3a237d10": 49, "rena_labels_img": 49, "rena_parcel": 49, "0x7f0a39a216a0": 49, "fmri_reduced_rena": 49, "compressed_img_rena": 49, "0x7f0a4e2b4890": 49, "0x7f0a3a5b9d30": 49, "0x7f0a3af1d130": 49, "0x7f0a3abd3410": 49, "0x7f0a3b19c860": 49, "accur": [49, 58, 66, 69, 142, 150, 154, 166, 170, 171], "said": [49, 171], "773": [49, 59, 439], "2941": [49, 59, 148, 154, 439], "plot_data_driven_parcel": [49, 59, 439], "regionextractor": [50, 87, 127, 129, 135, 140, 154, 159, 409, 410], "decompos": [50, 155, 159, 171, 408], "inspir": [50, 167, 169, 177], "idea": [50, 88, 94, 161, 168, 171], "canica": [50, 124, 125, 137, 148, 154, 157, 174, 259, 330, 440], "instanti": [50, 51, 91, 149, 154, 255, 355, 357, 360, 362, 364, 366, 368, 370, 372], "0x7f0a3af902f0": 50, "nomin": 50, "nonzero": [50, 318, 408], "surviv": [50, 146, 154, 271, 408], "extractor": [50, 87, 159, 408, 410], "thresholding_strategi": [50, 87, 159, 408], "ratio_n_voxel": [50, 159, 408], "local_region": [50, 159, 408, 410], "min_region_s": [50, 87, 88, 159, 408, 410], "1350": [50, 159, 408, 410], "regions_img_": [50, 87, 159, 408], "regions_extracted_img": [50, 159, 410], "index_": [50, 87, 159, 408], "regions_index": [50, 159], "n_regions_extract": [50, 159], "neach": [50, 159], "0x7f0a4076b3b0": [50, 86], "those": [50, 62, 66, 69, 71, 80, 89, 108, 149, 154, 160, 162, 164, 168, 169, 171, 177, 230, 320, 323, 331, 380, 402, 408, 411, 414, 415, 424], "timeseries_each_subject": [50, 159], "mean_correl": [50, 159], "regions_img": [50, 87, 159], "coords_connectom": [50, 159], "0x7f0a3a337c50": 50, "find_xyz_cut_coord": [50, 87, 129, 136, 154, 159], "side": [50, 53, 63, 66, 94, 102, 124, 146, 154, 166, 230, 271, 336, 339, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 380, 388, 389, 417, 418], "nice": [50, 159], "regions_indices_of_map3": [50, 159], "rgbcmyk": [50, 159], "each_index_of_map3": [50, 159], "add_overlai": [50, 122, 154, 159, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 437], "alpha_cmap": [50, 159], "1349": 50, "plot_extract_regions_dictlearning_map": [50, 59, 439], "tangent": [51, 99, 135, 154, 159, 187], "embed": [51, 99, 416], "outperform": [51, 99, 155, 160], "dadi": [51, 99, 115, 202], "care": [51, 99, 117, 161, 162, 164, 168, 206, 207, 270], "development_dataset": [51, 99], "msdl_data": [51, 99], "msdl_coord": [51, 99], "region_coord": [51, 52, 54, 99, 131, 154, 205], "n_region": [51, 91], "aud": 51, "striat": 51, "occ": 51, "att": 51, "basal": 51, "vi": 51, "sec": [51, 216], "salienc": [51, 215], "languag": [51, 64, 67, 100, 101, 108, 118, 212, 222, 225], "cereb": [51, 71], "dor": 51, "cing": 51, "Ins": 51, "ant": 51, "ip": 51, "niftimapsmask": [51, 52, 53, 54, 91, 99, 121, 126, 139, 146, 149, 154, 156, 178, 329, 331, 408, 412, 415, 440], "filter": [51, 55, 56, 58, 66, 68, 94, 103, 116, 117, 122, 124, 125, 139, 142, 147, 149, 151, 154, 161, 174, 178, 180, 195, 230, 232, 234, 250, 251, 252, 253, 254, 256, 257, 258, 259, 283, 286, 301, 318, 320, 321, 324, 327, 328, 329, 330, 331, 332, 333, 334, 406, 408, 419, 420, 440], "band": [51, 58, 151, 154, 195, 324, 419, 420], "resampling_target": [51, 53, 54, 91, 94, 99, 181, 328, 329, 331, 332], "phenotyp": [51, 62, 99, 150, 154, 161, 165, 178, 195, 196, 216, 240, 440], "pooled_subject": 51, "func_fil": 51, "confound_fil": 51, "child_adult": [51, 99], "simpler": 51, "commonli": [51, 158, 170, 174, 176, 181, 325], "margin": [51, 316], "pairwis": [51, 155], "correlation_measur": [51, 54, 56], "individu": [51, 58, 62, 66, 69, 72, 76, 78, 79, 80, 81, 94, 100, 101, 108, 115, 155, 160, 173, 174, 176, 178, 181, 187, 188, 213, 225, 298, 342, 396, 440], "2d": [51, 54, 84, 91, 92, 98, 103, 116, 151, 154, 161, 164, 178, 181, 188, 189, 190, 191, 192, 258, 259, 270, 279, 303, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 345, 347, 348, 349, 350, 351, 352, 353, 354, 359, 361, 363, 365, 367, 369, 371, 386, 405, 406, 407, 408, 414, 415, 422, 424, 430, 440], "reflect": [51, 101, 155, 169, 171, 199, 392, 393], "visibl": [51, 79, 148, 154, 160, 316, 389, 395, 397, 398, 402, 404, 437], "0x7f0a3b71a510": 51, "reveal": [51, 101, 102, 166], "partial_correlation_measur": 51, "partial_correlation_matric": 51, "weaker": [51, 66, 79], "0x7f0a2fd9c710": 51, "tangent_measur": 51, "deviat": [51, 155, 251, 252, 253, 254, 256, 257], "tangent_matric": 51, "perturb": 51, "anticorrel": [51, 115, 325], "distinguish": [51, 94, 98, 99, 162, 166, 171, 175, 179], "stratifiedshufflesplit": [51, 99], "preserv": [51, 58, 99, 306, 318, 389, 405, 406, 407], "linearsvc": [51, 98, 99, 166, 251, 253], "return_invers": 51, "test_siz": [51, 99], "1d": [51, 102, 105, 106, 117, 151, 154, 179, 181, 187, 255, 273, 275, 276, 279, 285, 301, 323, 327, 328, 329, 330, 331, 332, 333, 334, 355, 362, 366, 372, 375, 408, 409, 414, 419, 420, 422, 424], "mean_scor": [51, 99], "scores_std": [51, 99], "align": [51, 56, 91, 99, 152, 154, 317, 319, 386], "xerr": [51, 99], "set_axisbelow": [51, 99], "axvlin": 51, "linestyl": 51, "showcas": [51, 60, 74, 76, 99, 110, 113, 158, 163, 169], "larger": [51, 75, 80, 86, 99, 160, 162, 166, 168, 169, 171, 256, 257, 379, 392, 393, 394, 401], "cohort": [51, 99], "plot_group_level_connect": [51, 59, 135, 142, 154, 439], "link": [52, 115, 118, 126, 132, 139, 144, 154, 157, 161, 164, 169, 171, 174, 177, 197, 202, 227, 240, 346, 356, 357, 381, 440], "negat": [52, 83, 96, 113, 248, 312, 394, 399, 439], "dens": [52, 54, 155, 168, 338], "highest": [52, 54, 251, 252, 253, 254, 286, 307, 421], "resample_img": [52, 54, 71, 84, 89, 93, 125, 136, 142, 151, 154, 180, 181, 230, 258, 259, 283, 296, 315, 317, 330, 333, 336, 338, 339, 341, 406], "0x7f0a3b763ec0": 52, "_____________________________________________________resample_img": 52, "nifti_maps_mask": [52, 53], "0x7f0a2fac1f40": 52, "allow_overlap": [52, 53, 54, 58, 329, 332, 334], "keep_masked_map": [52, 53, 54, 126, 154, 332, 412], "msdl_atla": [52, 53, 54], "msdl_roi": [52, 53, 54, 205], "graphicallassocv": [52, 53, 57, 58, 155, 168, 189], "scitkit": [52, 53, 57, 58], "v0": [52, 53, 57, 58, 139, 142, 147, 149, 154, 207], "graphlassocv": [52, 53, 57, 58], "graphicallassocvgraphicallassocv": [52, 53, 58], "covariance_": [52, 53, 58, 155], "axesimag": [52, 54, 56], "0x7f0a3b463080": 52, "0x7f0a3b4b5eb0": 52, "precision_": [52, 53, 57, 155], "0x7f0a3b2ba6f0": 52, "plot_inverse_covariance_connectom": [52, 59, 439], "plot_matric": 53, "cov": [53, 273, 275, 276, 438], "prec": [53, 168], "put": [53, 54, 64, 67, 71, 98, 122, 154, 169, 187, 251, 252, 253, 254, 258, 259, 283, 328, 329, 330, 331, 332, 333, 334, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 380, 406, 408, 420], "diagon": [53, 54, 56, 58, 86, 132, 154, 168, 180, 187, 191, 193, 194, 315, 316, 375, 391, 409], "clariti": 53, "span": [53, 71, 171, 379, 392, 393, 394, 401], "msdl_atlas_dataset": 53, "subject_time_seri": 53, "confound_filenam": [53, 55], "region_t": 53, "__________________________________________high_variance_confound": 53, "0x7f0a393e9280": 53, "174325": 53, "048779": 53, "044073": 53, "155444": 53, "1min": 53, "151677": 53, "057023": 53, "206928": 53, "102714": 53, "127944": 53, "087084": 53, "015679": 53, "02587": 53, "089762": 53, "062316": 53, "065223": 53, "022868": 53, "groupsparsecovariancecv": [53, 57, 155, 168], "gsc": [53, 57], "gl": [53, 57], "likelihood": [53, 168, 171, 187, 270, 273, 274, 275, 276], "decreas": [53, 66, 95, 168, 169, 379, 392, 393, 394, 401], "stop": [53, 97, 109, 113, 115, 118, 167, 188, 191, 230, 232, 306, 311, 312, 314, 386, 394, 399, 405, 439], "refin": [53, 57, 58, 189], "optim": [53, 57, 100, 115, 142, 146, 154, 162, 164, 167, 168, 189, 191, 202, 316, 317], "toler": [53, 92, 104, 168, 188, 189, 191, 256, 257, 305], "reach": [53, 168, 169, 171, 176, 230, 324], "841e": 53, "graphical_lasso": 53, "68e": 53, "gap": [53, 188, 191], "123e": 53, "664e": 53, "158e": 53, "389e": 53, "530e": 53, "318e": 53, "844e": 53, "atlas_region_coord": [53, 156], "graphicallasso": [53, 155], "edge_vmax": [53, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381], "edge_vmin": [53, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381], "groupsparsecovari": [53, 155, 168, 189], "precisions_": [53, 57, 155, 188, 189], "covariances_": [53, 155, 188, 189], "plot_multi_subject_connectom": [53, 59, 439], "________________________________________resample_img": 54, "__________________________________filter_and_extract": [54, 56], "generate_report": [54, 58, 89, 91, 92, 126, 149, 152, 154, 181, 283, 296, 328, 329, 330, 331, 332, 333, 334, 408], "displayed_map": [54, 329, 332, 408], "contrarili": [54, 91, 331, 332], "summar": [54, 58, 91, 161, 169, 275, 331, 332, 334, 417], "pca": [54, 258, 332], "nan": [54, 56, 91, 94, 103, 122, 126, 129, 134, 142, 146, 154, 234, 301, 316, 329, 332, 335, 338, 389, 395, 397, 398, 402, 404, 420, 424], "miss": [54, 77, 84, 126, 148, 154, 169, 174, 290, 329, 332, 338, 341], "correlation_matrix": [54, 56, 437], "major": [54, 94, 169, 176], "fill_diagon": [54, 56], "0x7f0a3afc7650": 54, "plot_probabilistic_atlas_extract": [54, 59, 439], "depict": [55, 169, 180], "advanc": [55, 109, 115, 161, 163, 164, 169, 170, 176, 180, 219, 251, 253, 254, 308, 327, 333, 380, 394, 439, 440], "lie": [55, 188, 191, 331, 411], "1st": 55, "hard": [55, 156, 168, 174, 179], "drive": 55, "wide": [55, 71, 105, 115, 161, 162, 164, 168, 169, 217, 235, 255], "pcc_coord": [55, 61, 170], "niftispheresmask": [55, 58, 61, 70, 100, 123, 127, 129, 140, 144, 146, 152, 154, 170, 178, 440], "bandpass": 55, "seed_mask": [55, 61, 100, 170], "seed_time_seri": [55, 61, 170], "brain_mask": [55, 100], "brain_time_seri": 55, "n_volum": 55, "32504": 55, "exemplarili": 55, "divid": [55, 76, 77, 79, 111, 132, 154, 162, 171, 174, 193, 406], "seed_to_voxel_correl": 55, "954": [55, 59, 439], "extrem": [55, 122, 154, 417], "seed_to_voxel_correlations_img": 55, "marker_coord": [55, 61, 100, 140, 142, 154, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 403], "At": [55, 63, 65, 69, 77, 80, 91, 159, 176, 177, 296, 298], "pcc_seed_correl": 55, "seed_to_voxel_correlations_fisher_z": 55, "arctanh": 55, "874f": 55, "eventu": [55, 437], "seed_to_voxel_correlations_fisher_z_img": 55, "pcc_seed_correlation_z": 55, "955": [55, 58, 59, 439], "plot_seed_to_voxel_correl": [55, 59, 140, 154, 439], "movement": [56, 176, 181], "load_confound": [56, 66, 125, 126, 149, 152, 154, 156, 181, 325], "flexibli": 56, "guidelin": [56, 94, 124, 148, 151, 154, 161, 177], "en": [56, 171, 197, 325, 328], "craddock": [56, 115, 151, 154, 155, 156, 200, 205, 240], "2013": [56, 115, 142, 154, 155, 156, 166, 167, 195, 199, 205, 324], "reorder": [56, 137, 154, 315, 375, 391], "reduce_confound": [56, 216], "reduced_confound": 56, "preselect": 56, "metadata": [56, 91, 118, 125, 142, 154, 180, 187, 188, 189, 230, 231, 232, 233, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 323, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "nifti1head": [56, 91], "endian": [56, 91, 135, 154, 310, 316], "sizeof_hdr": [56, 91], "data_typ": [56, 91], "db_name": [56, 91], "extent": [56, 91, 95, 174, 357, 360], "session_error": [56, 91], "dim_info": [56, 91], "intent_p1": [56, 91], "intent_p2": [56, 91], "intent_p3": [56, 91], "intent_cod": [56, 91], "datatyp": [56, 91], "bitpix": [56, 91], "slice_start": [56, 91], "pixdim": [56, 91], "vox_offset": [56, 91], "scl_slope": [56, 91], "scl_inter": [56, 91], "slice_end": [56, 91], "slice_cod": [56, 91], "xyzt_unit": [56, 91], "cal_max": [56, 91], "cal_min": [56, 91], "slice_dur": [56, 91], "toffset": [56, 91], "glmax": [56, 91], "glmin": [56, 91], "descrip": [56, 91], "aux_fil": [56, 91], "qform_cod": [56, 91], "sform_cod": [56, 91], "quatern_b": [56, 91], "quatern_c": [56, 91], "quatern_d": [56, 91], "qoffset_x": [56, 91], "qoffset_i": [56, 91], "qoffset_z": [56, 91], "srow_x": [56, 91], "srow_i": [56, 91], "srow_z": [56, 91], "intent_nam": [56, 91], "magic": [56, 91, 379, 386, 387, 389, 393, 394], "0x7f0a2683a510": 56, "0x7f0a267e9040": 56, "0x7f0a2683b890": 56, "cover": [56, 169, 181, 213, 215, 375], "firstli": 56, "did": [56, 92, 104, 133, 149, 154, 171], "bad": [56, 105, 168, 169], "No": [56, 66, 77, 91, 105, 168, 169, 317], "0x7f0a26886210": 56, "0x7f0a2684ddc0": 56, "ensur": [56, 58, 100, 139, 146, 154, 166, 168, 169, 171, 177, 235, 271, 296, 298, 331, 345, 347, 348, 411], "steadi": [56, 66, 147, 154, 283, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 408, 420], "correctli": [56, 66, 93, 140, 142, 143, 151, 152, 154, 164, 171, 177, 283, 324, 325, 438], "confounds_simpl": 56, "wm_csf": [56, 324, 325], "cosine00": 56, "cosine01": 56, "cosine02": 56, "cosine03": 56, "rot_x": 56, "rot_i": 56, "rot_z": 56, "trans_x": 56, "trans_i": 56, "trans_z": 56, "white_matt": 56, "0x7f0a2e909f40": 56, "109104": 56, "109090": 56, "109066": 56, "026078": 56, "055006": 56, "876886": 56, "108937": 56, "108723": 56, "027587": 56, "049458": 56, "418909": 56, "108990": 56, "108632": 56, "108038": 56, "019085": 56, "075787": 56, "540842": 56, "108875": 56, "108176": 56, "107012": 56, "023900": 56, "053022": 56, "922085": 56, "107567": 56, "105651": 56, "033396": 56, "077764": 56, "843388": 56, "064873": 56, "022169": 56, "221217": 56, "064266": 56, "042248": 56, "237783": 56, "053241": 56, "029500": 56, "590905": 56, "081559": 56, "034236": 56, "122246": 56, "069287": 56, "007294": 56, "000828": 56, "0x7f0a213dc1d0": 56, "exceed": [56, 136, 154], "framewis": [56, 216, 324], "displac": [56, 216, 324], "standardis": 56, "dvar": [56, 324], "five": [56, 66, 406], "percentag": [56, 161, 251, 252, 253, 254], "volumn": [56, 324], "suitabl": [56, 69, 139, 154, 162, 166, 181, 228, 325], "confounds_scrub": 56, "fd_threshold": [56, 324, 325], "std_dvars_threshold": [56, 324, 325], "0x7f0a39dae180": 56, "097319": 56, "110228": 56, "100980": 56, "024472": 56, "048861": 56, "796008": 56, "097281": 56, "110075": 56, "100637": 56, "025982": 56, "043313": 56, "338031": 56, "097205": 56, "109770": 56, "099952": 56, "017480": 56, "069643": 56, "459963": 56, "097090": 56, "109313": 56, "098926": 56, "022294": 56, "046877": 56, "841207": 56, "096938": 56, "108705": 56, "097565": 56, "031791": 56, "071620": 56, "762509": 56, "120508": 56, "113737": 56, "066478": 56, "028314": 56, "302095": 56, "120661": 56, "115099": 56, "062660": 56, "048393": 56, "318661": 56, "120775": 56, "116124": 56, "054846": 56, "035645": 56, "671784": 56, "120851": 56, "116809": 56, "079953": 56, "040381": 56, "203124": 56, "120889": 56, "117152": 56, "070892": 56, "013439": 56, "081706": 56, "0x7f0a2683af90": 56, "grand": [56, 283], "physiolog": [56, 66, 70, 325], "artifact": [56, 115, 181, 301, 324, 325, 420], "minim": [56, 62, 169, 174, 283, 285, 290, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 392], "degre": [56, 68, 100, 107, 171, 271, 274, 280, 325, 395, 397, 398], "freedom": [56, 100, 107, 156, 171, 271, 274, 280, 325], "downsid": [56, 66], "confounds_minimal_no_gsr": 56, "global_sign": [56, 324, 325], "gsr": 56, "0x7f0a2d2e3fb0": 56, "0x7f0a28c42780": 56, "load_confounds_strategi": [56, 149, 152, 154, 156, 181, 324], "benchmark": [56, 115, 167, 324, 325], "compcor": [56, 66, 115, 149, 152, 154, 156, 216, 307, 324, 325, 421], "ica_aroma": [56, 149, 154, 324, 325], "denoise_strategi": [56, 325], "2min": 56, "rastko": [56, 115, 324, 325], "ciric": [56, 115, 324, 325], "wolf": [56, 58, 115, 168, 324, 325], "jonathan": [56, 58, 115, 167, 207, 211, 213, 214, 278, 324, 325, 380], "roalf": [56, 115, 324, 325], "graham": [56, 115, 324, 325], "baum": [56, 115, 324, 325], "kosha": [56, 115, 324, 325], "ruparel": [56, 115, 324, 325], "russel": [56, 100, 115, 118, 176, 228, 230, 232, 240, 275, 276, 324, 325], "shinohara": [56, 115, 324, 325], "eickhoff": [56, 115, 207, 208, 324, 325], "christo": [56, 115, 324, 325], "davatziko": [56, 115, 324, 325], "ruben": [56, 115, 324, 325], "gur": [56, 115, 324, 325], "raquel": [56, 115, 324, 325], "bassett": [56, 115, 324, 325], "theodor": [56, 115, 324, 325], "satterthwait": [56, 115, 324, 325], "2017": [56, 115, 134, 135, 136, 154, 161, 163, 206, 207, 225, 253, 254, 324, 325, 380, 434], "linden": [56, 115, 325], "park": [56, 115, 325], "fulcher": [56, 115, 325], "murat": [56, 115, 325], "y\u00fccel": [56, 115, 325], "fornito": [56, 115, 325], "evalu": [56, 115, 164, 168, 174, 210, 251, 252, 253, 254, 270, 274, 325, 417, 418], "efficaci": [56, 115, 325], "reliabl": [56, 115, 139, 154, 171, 225, 325], "2018": [56, 76, 115, 137, 138, 139, 154, 163, 206, 207, 216, 253, 254, 278, 301, 325, 407, 413, 420], "857": [56, 59, 439], "plot_signal_extract": [56, 59, 181, 439], "data_gen": [57, 125, 151, 154, 168], "generate_group_sparse_gaussian_graph": [57, 168], "n_displai": 57, "min_n_sampl": 57, "max_n_sampl": 57, "max_precis": 57, "alpha_": [57, 189], "group_sparse_cov": 57, "instabl": [57, 66, 168, 419], "plot_simulated_connectom": [57, 59, 439], "spheric": 58, "nardo": [58, 115, 213], "matur": [58, 115, 213], "1361": [58, 115, 213], "dmn_coord": [58, 181, 437], "temporopariet": 58, "junction": 58, "prefront": 58, "sequenc": [58, 61, 64, 66, 69, 79, 111, 126, 154, 161, 170, 174, 179, 181, 225, 251, 252, 253, 254, 273, 275, 276, 283, 296, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 395, 397, 398, 400, 418, 419, 424], "clean__butterworth__padtyp": 58, "butterworth": [58, 124, 125, 147, 151, 154, 301, 328, 329, 330, 331, 332, 333, 334, 420], "confounds_filenam": 58, "nifti_spheres_mask": 58, "0x7f0a3b2b6e40": 58, "butterworth__padtyp": 58, "tweak": [58, 89, 159], "displayed_spher": [58, 334], "knowledg": [58, 116, 156, 171, 334], "brows": [58, 118, 149, 154], "button": [58, 66, 69, 72, 76, 77, 79, 80, 105, 149, 154, 169, 171, 223, 225, 233], "2144": 58, "Its": [58, 155, 163, 168, 255, 276, 283, 296, 299, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 418], "ledoit": [58, 168], "connectivity_measur": 58, "partial_correlation_matrix": 58, "0x7f0a3b28c530": 58, "suppli": [58, 255, 256, 257, 290, 324, 331, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 411, 420], "fetch_coords_power_2011": 58, "dict_kei": 58, "collect": [58, 100, 103, 107, 115, 116, 169, 174, 230, 231, 232, 233, 324, 440], "spheres_mask": 58, "exce": [58, 189], "graphic": [58, 115, 155, 168, 169, 182, 188, 191], "covariance_estim": 58, "_method": 58, "runtimewarn": [58, 77, 79, 111], "invalid": [58, 111, 124, 129, 154, 332, 412], "encount": [58, 77, 79, 111, 395, 397, 398], "subtract": [58, 66, 101, 176, 231], "strongest": 58, "node_s": [58, 140, 142, 149, 154, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 390, 400], "0x7f0a4ec74b30": 58, "sometim": [58, 66, 80, 118, 122, 126, 154, 161, 169, 174, 270, 274], "overwhelm": 58, "plot_mark": [58, 145, 149, 151, 154, 437], "node_strength": 58, "0x7f0a2672a6f0": 58, "clip": [58, 84, 316, 317], "positive_edg": 58, "negative_edg": 58, "node_strength_posit": 58, "node_strength_neg": 58, "node_cmap": [58, 390], "ylorrd": 58, "pubu": 58, "0x7f0a3af933b0": 58, "fetch_coords_dosenbach_2010": [58, 130, 133, 154], "0x7f0a29444740": 58, "cerebellum": [58, 115, 213, 215, 227], "cingulo": 58, "opercular": [58, 91], "fronto": [58, 101], "occipit": [58, 91], "sensorimotor": 58, "766": [58, 59, 85, 100, 115, 439], "plot_sphere_based_connectom": [58, 59, 142, 154, 439], "03_connect": [59, 142, 154, 439], "1348": [59, 439], "1850": [59, 439], "1187": [59, 439], "focus": [60, 74, 98, 110, 113, 117, 131, 137, 154, 162, 165, 166, 169], "adhd": [60, 73, 85, 113, 142, 151, 154, 155, 170, 196, 283, 290, 327, 334, 357, 394, 416, 418, 439], "finit": [60, 73, 77, 79, 103, 113, 135, 154, 170, 174, 226, 283, 285, 290, 301, 318, 335, 338, 379, 382, 383, 393, 394, 420, 439], "impul": [60, 73, 113, 226, 283, 382, 383, 394, 439], "fir": [60, 63, 73, 113, 170, 174, 226, 283, 285, 290, 382, 383, 394, 439], "residu": [60, 62, 73, 113, 149, 154, 166, 172, 237, 257, 270, 271, 274, 275, 276, 283, 296, 301, 302, 313, 318, 327, 334, 338, 372, 394, 417, 439, 440], "openneuro": [60, 73, 113, 170, 216, 217, 235, 236, 250, 283, 286, 323, 326, 333, 382, 386, 388, 416, 417, 418, 439], "understand": [60, 73, 83, 96, 113, 133, 154, 162, 164, 169, 176, 178, 216, 221, 223, 224, 226, 229, 283, 307, 308, 313, 317, 324, 327, 333, 338, 382, 383, 384, 393, 394, 399, 416, 439, 440], "workflow": [61, 169, 325], "determin": [61, 79, 94, 100, 101, 102, 107, 166, 168, 169, 189, 257, 286, 297, 321, 336, 337, 338, 339, 340, 341, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 386, 387, 389, 393, 394, 401, 405, 424], "make_first_level_design_matrix": [61, 63, 69, 71, 108, 149, 154, 170], "frametim": 61, "add_subplot": [61, 91], "set_titl": [61, 63, 70, 75, 78, 79, 80, 91, 100, 105], "add_reg": [61, 63, 108, 170, 290], "add_reg_nam": [61, 63, 290], "pcc_seed": 61, "dmn_contrast": 61, "seed_based_glm": 61, "setup": [61, 69, 108, 125, 150, 154, 173, 195, 196, 197, 198, 199, 200, 201, 205, 208, 209, 211, 219, 220, 223, 224, 225, 228, 229, 234, 240, 408, 438], "first_level_model": [61, 65, 66], "run_img": [61, 101, 108, 283], "design_matric": [61, 62, 64, 67, 71, 100, 170, 283], "snapshot": 61, "dmn_z_map": 61, "portabl": [61, 75, 181], "readi": [61, 75, 117, 133, 154, 160, 169, 177], "pertin": [61, 75], "min_dist": [61, 283, 296, 417, 418], "plot_typ": [61, 283, 296, 418], "754": [61, 66, 73, 439], "plot_adhd_dmn": [61, 73, 439], "exploit": [62, 160, 168], "io": [62, 101, 147, 154, 159, 195, 202, 206, 216, 225, 402, 438], "s3": 62, "bucket": 62, "assur": 62, "nistat": [62, 124, 128, 145, 154], "against": [62, 161, 170, 174, 230, 298, 344, 391], "stopsign": 62, "ds000030": [62, 217], "v4": 62, "emploi": [62, 173, 174, 417, 418], "fetch_ds000030_url": [62, 151, 154, 235], "fetch_openneuro_dataset": 62, "select_from_index": 62, "exclusion_pattern": 62, "mriqc": 62, "parameter_plot": 62, "physio_plot": 62, "t1w": 62, "dwi": 62, "beh": 62, "bart": 62, "scap": 62, "exclusion_filt": [62, 250], "data_dir": [62, 100, 101, 108, 148, 154, 179, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241], "subject_id": [62, 101, 108, 237, 238], "task_label": [62, 101, 108, 286], "space_label": [62, 286], "folder": [62, 86, 94, 101, 108, 149, 154, 169, 177, 179, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 240, 241, 286, 311, 321], "fmriprep": [62, 66, 126, 149, 151, 152, 154, 156, 160, 171, 174, 181, 216, 220, 221, 245, 286], "app": [62, 115, 227, 286], "first_level_from_bid": [62, 100, 101, 108, 125, 126, 154, 385], "mni152nlin2009casym": 62, "derivatives_fold": [62, 286], "models_run_img": [62, 100, 101, 108, 286], "models_ev": [62, 101, 108, 286], "models_confound": [62, 100, 101, 108, 286], "minimize_memori": [62, 64, 67, 70, 170, 283, 286, 296], "overrid": [62, 100, 111, 146, 154, 195, 196, 197, 198, 199, 200, 201, 205, 208, 209, 211, 219, 220, 223, 224, 225, 228, 229, 234, 240, 406], "interfac": [62, 100, 101, 108, 145, 149, 154, 160, 168, 169, 174, 251, 252], "get_design_from_fslmat": [62, 149, 154], "fsl_design_matrix_path": [62, 326], "feat": 62, "mat": [62, 326, 391], "column_nam": [62, 326], "stopsuccess": 62, "definit": [62, 94, 126, 154, 156, 164, 165, 168, 169, 170, 174, 178, 202, 265, 323, 328, 331, 334, 382, 411, 412, 414, 415, 440], "design_column": [62, 281], "cond_": 62, "10159": 62, "firstlevelmodelfirstlevelmodel": 62, "nib": 62, "fsl_z_map": 62, "zstat12": 62, "isf": [62, 76, 79, 101, 107, 108], "unc": [62, 79, 80, 101], "plot_img_comparison": 62, "masker_": [62, 66, 77, 79, 251, 252, 253, 254, 256, 257, 258, 259, 406], "ref_label": [62, 388], "src_label": [62, 388], "latex": [62, 124, 154, 177], "purpos": [62, 64, 67, 69, 71, 79, 101, 108, 117, 168, 173, 181, 216, 283, 296, 346, 418, 437], "to_latex": 62, "tabular": 62, "llrrrrl": 62, "toprul": 62, "midrul": 62, "000000": [62, 66], "307532": 62, "6300": 62, "668929": 62, "534376": 62, "254210": 62, "918703": 62, "2520": 62, "715845": 62, "2b": 62, "683343": 62, "2c": 62, "587956": 62, "692869": 62, "664250": 62, "461193": 62, "257986": 62, "078390": 62, "815609": 62, "5c": 62, "798387": 62, "208105": 62, "348351": 62, "190472": 62, "385929": 62, "163956": 62, "079389": 62, "056165": 62, "792": 62, "10a": 62, "726486": 62, "10b": 62, "710553": 62, "043724": 62, "950054": 62, "937283": 62, "906274": 62, "756": [62, 100, 115], "14a": 62, "882906": 62, "776293": 62, "bottomrul": 62, "save_glm_to_bid": [62, 124, 151, 154], "contrast_typ": [62, 69, 108, 271, 279, 323], "out_dir": [62, 323], "nilearn_glm": 62, "prefix": [62, 301, 323, 328, 329, 330, 331, 332, 333, 334, 420], "_task": [62, 286], "stopsuccessminusgo": 62, "r_squar": [62, 70, 149, 154, 275, 283, 296], "glob": [62, 127, 137, 154, 178, 302, 321, 440], "dataset_descript": [62, 323], "json": [62, 100, 101, 108, 118, 286, 321, 323, 324, 325], "10159_task": 62, "stopsignal_contrast": 62, "stopsuccessminusgo_design": 62, "stopsuccessminusgo_stat": 62, "effect_statmap": [62, 323], "p_statmap": 62, "t_statmap": 62, "variance_statmap": [62, 323], "z_statmap": 62, "stopsignal_design": 62, "stopsignal_stat": 62, "errorts_statmap": [62, 323], "rsquare_statmap": [62, 323], "stopsignal_statmap": 62, "plot_bids_featur": [62, 73, 439], "runtimeerror": [63, 78], "compris": [63, 66, 86, 409, 417], "trial": [63, 66, 72, 115, 126, 154, 161, 170, 174, 228], "c0": 63, "c1": 63, "c3": 63, "motion": [63, 66, 70, 101, 115, 147, 154, 170, 216, 283, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 408, 420], "jointli": [63, 169, 313, 389, 395, 397, 398, 402, 404], "cumsum": 63, "translat": [63, 142, 154, 180, 283, 296, 299, 324, 418], "rigid": 63, "bodi": [63, 416], "tx": 63, "ty": 63, "tz": 63, "rx": 63, "ry": 63, "rz": 63, "varieti": [63, 100, 160, 161, 162, 163, 164, 169, 174], "x1": [63, 94, 424], "polynomi": [63, 66, 170, 283, 290], "x2": [63, 94], "x3": 63, "ax3": 63, "990": [63, 73, 439], "fiac": [64, 218], "dehaen": [64, 67, 115, 225], "lambertz": [64, 67], "anton": [64, 67], "jl": [64, 67], "campagn": [64, 67], "ciuciu": [64, 67, 115, 258], "denghien": [64, 67], "jobert": [64, 67, 115, 225], "lebihan": [64, 67], "sigman": [64, 67], "pallier": [64, 67], "jb": [64, 67], "segreg": [64, 67], "sentenc": [64, 65, 66, 67, 69, 72, 81, 101, 225], "hum": [64, 67], "mapp": [64, 67], "2006": [64, 67, 115, 166, 176, 255, 275, 276], "ncbi": [64, 67, 115, 162, 258, 324, 325], "nlm": [64, 67, 115, 162, 258, 324, 325], "nih": [64, 67, 115, 162, 258, 324, 325], "gov": [64, 67, 115, 162, 258, 324, 325], "pmc": [64, 67], "pmc6871319": [64, 67], "subdirectori": [64, 230, 232], "getcwd": 64, "write_dir": 64, "fetch_fiac_first_level": [64, 67], "func1": [64, 67, 71, 238], "func2": [64, 67, 71, 238], "design_fil": [64, 67], "design_matrix1": [64, 67], "design_matrix2": [64, 67], "df": [64, 67, 100, 107, 417], "n_column": [64, 67, 171, 194], "pad_vector": 64, "contrast_": 64, "sstssp_minus_dstdsp": 64, "dstdsp_minus_sstssp": 64, "dst_minus_sst": [64, 67], "dsp_minus_ssp": 64, "dst_minus_sst_for_dsp": 64, "dsp_minus_ssp_for_dst": 64, "deactiv": 64, "contrast_id": [64, 65, 66, 67, 69, 71], "contrast_v": [64, 65, 66, 67, 69, 71], "contast": 64, "implicitli": [64, 66, 69, 80, 102, 108, 161, 168], "z_image_path": 64, "_z_map": 64, "794": [64, 71], "assum": [64, 66, 71, 78, 79, 166, 171, 177, 194, 235, 236, 273, 274, 275, 276, 280, 283, 296, 298, 301, 316, 319, 343, 382, 391, 419, 420], "0x7f0a3b19dcd0": 64, "0x7f0a4e2e26f0": 64, "unexpectedli": [64, 67], "ratio": [64, 67, 94, 138, 154, 174, 216, 256, 258, 259, 406, 408], "988": [64, 73, 439], "plot_fiac_analysi": [64, 73, 439], "hemodyam": 65, "audio_comput": [65, 66, 69], "audio_left_hand_button_press": [65, 66, 69], "audio_right_hand_button_press": [65, 66, 69], "horizontal_checkerboard": [65, 66], "sentence_listen": [65, 66, 69], "sentence_read": [65, 66, 69], "vertical_checkerboard": [65, 66], "visual_comput": [65, 66, 69], "visual_left_hand_button_press": [65, 66, 69], "visual_right_hand_button_press": [65, 66, 69], "fetch_localizer_first_level": [65, 66, 69], "epi_img": [65, 66, 69, 89, 181, 226, 338, 341, 384], "events_fil": [65, 66, 69], "impuls": [65, 68, 170, 171, 174, 283, 285, 290], "behind": 65, "concret": [65, 169, 171], "interv": [65, 66, 100, 251, 252, 253, 254, 256, 257, 273, 275, 276, 407, 413, 424], "character": [65, 66, 115, 176, 324], "hairi": 65, "sorri": 65, "price": [65, 166], "flexibl": [65, 128, 154], "contrast_matrix": [65, 66, 69, 71], "audio": [65, 66, 69], "video": [65, 169], "breath": [65, 66], "ask": [65, 118, 139, 142, 154, 169, 177], "yet": [65, 80, 104, 115, 149, 154, 161, 169, 176, 392], "plot_fir_model": [65, 73, 439], "clarifi": [66, 147, 154], "exploratori": 66, "increment": [66, 95, 176, 177], "outcom": [66, 174, 325], "reader": [66, 176, 440], "familiar": [66, 169, 176], "concept": [66, 98, 142, 154, 161, 162, 169, 174, 178, 440], "paradigm": [66, 69, 71, 97, 109, 113, 118, 161, 171, 232, 290, 306, 311, 312, 314, 386, 394, 399, 439], "pinel": [66, 72, 115, 225, 258], "bmc": [66, 72, 115, 225], "2007": [66, 72, 115, 155, 225, 234, 307, 324, 325, 421], "probe": [66, 69, 165, 174], "press": [66, 69, 72, 76, 77, 79, 80, 105, 115, 171, 223, 225, 233, 275, 276], "horizont": [66, 72, 80, 225, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "checkerboard": [66, 72, 80, 225], "listen": [66, 69, 81, 225], "short": [66, 100, 110, 112, 113, 118, 168, 169, 174, 187, 206, 207, 210, 230, 231, 232, 233, 251, 263, 264, 265, 266, 267, 268, 391, 395, 399, 439], "epoch": [66, 259], "100m": 66, "male": [66, 195], "voic": 66, "instruct": [66, 69, 72, 113, 124, 150, 154, 169, 175, 231, 438], "passiv": 66, "verifi": [66, 101, 169, 181], "understood": [66, 230], "flash": 66, "narr": [66, 81, 169], "400000": 66, "700000": 66, "399994": 66, "700012": 66, "make_localizer_contrast": 66, "involv": [66, 69, 71, 100, 171], "differenti": [66, 71], "content": [66, 69, 84, 115, 126, 154, 165, 166, 169, 176, 208, 213, 219, 227, 301, 420], "stori": [66, 69, 115, 228], "comptat": 66, "encapsul": [66, 187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "plot_contrast": 66, "discret": [66, 71, 124, 146, 147, 154, 283, 292, 311, 324, 328, 329, 330, 331, 332, 333, 334, 420], "spuriou": [66, 115, 159, 169, 324, 325, 409], "heart": 66, "scanner": [66, 171, 174, 324], "01hz": [66, 195], "longest": 66, "multipli": [66, 84, 90, 132, 154, 166, 168, 194, 270, 273, 275, 276, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 389, 395, 397, 398, 402, 404], "shall": 66, "wors": [66, 257], "poorli": [66, 94, 181], "mayb": [66, 118, 344], "useless": 66, "haven": [66, 103], "basi": [66, 69, 108, 170, 283, 285, 290, 324], "undershoot": 66, "strong": [66, 89, 168, 169], "seem": [66, 75, 98, 168], "someth": 66, "inclus": [66, 250], "sole": [66, 118, 168, 265, 266, 328, 329, 330, 331, 332, 333], "discount": 66, "misspecif": 66, "hint": [66, 155, 156], "misfit": 66, "valuabl": [66, 169], "shift": [66, 145, 151, 154, 328, 329, 330, 331, 332, 333, 334, 420], "mi": 66, "sake": [66, 79, 105], "simplic": [66, 69, 161], "readabl": [66, 125, 154], "drop": [66, 70, 100, 134, 135, 136, 140, 154, 169, 176, 177], "far": [66, 108, 168, 316, 322], "autoregress": [66, 283, 292], "ordinari": [66, 102, 105, 274, 344], "least": [66, 68, 100, 102, 103, 105, 115, 161, 167, 169, 259, 270, 274, 283, 292, 296, 297, 298, 329, 332, 334, 338, 344, 375, 438], "recomput": [66, 98, 166, 280], "obviou": 66, "stick": 66, "arguabl": 66, "greater": [66, 100, 147, 149, 154, 171, 283, 292, 300, 307, 320, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 386, 389, 390, 394, 398, 400, 402, 404, 417, 421, 424], "complex": [66, 77, 87, 115, 118, 161, 163, 166, 169, 173, 176, 181], "ar3": [66, 292], "wish": [66, 79, 105, 149, 154, 169, 174, 177, 220, 221, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 381, 384, 386, 387, 390, 392, 393, 394], "computation": [66, 162, 166], "problemat": 66, "uncontrol": 66, "spike": 66, "phenomena": 66, "respir": 66, "blood": [66, 171, 174], "oxygen": [66, 171, 174], "themselv": [66, 118, 181], "routin": [66, 89, 179, 228, 437], "percentil": [66, 87, 88, 98, 251, 252, 253, 254, 256, 257, 300, 307, 320, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 361, 362, 363, 365, 366, 367, 369, 371, 372, 378, 381, 392, 400, 401, 402, 404, 408, 421], "kill": 66, "somewhat": 66, "colinear": 66, "scrub": [66, 124, 147, 149, 154, 156, 283, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 408, 420], "scenario": [66, 170, 171, 181], "exclud": [66, 118, 409], "unwant": 66, "863": 66, "futurewarn": 66, "cubic": [66, 124, 154, 181, 191, 420], "spline": [66, 124, 154, 386, 387, 393, 394, 401, 420], "extrapol": [66, 152, 154, 316, 420], "undesir": 66, "discrep": [66, 168], "drawback": 66, "bias": 66, "mild": 66, "5mm": [66, 95, 176], "smoother": 66, "firstlevemodel": 66, "grei": [66, 89, 132, 142, 148, 154, 180, 181, 220, 221, 243, 244, 245, 247, 337, 340], "fetch_icbm152_brain_gm_mask": [66, 75, 132, 154, 220], "data_mask": [66, 104], "icbm_mask": 66, "driven": [66, 160, 169, 176, 199, 290], "resample_to_img": [66, 75, 93, 131, 154, 180, 181, 316], "resampled_icbm_mask": 66, "spot": 66, "interestingli": 66, "resili": 66, "reassur": 66, "plot_first_level_detail": [66, 73, 439], "summary_statistics_session1": 67, "0x7f0a2fccea80": 67, "summary_statistics_session2": 67, "0x7f0a2fccf830": 67, "compute_fixed_effect": 67, "contrast_img": [67, 280], "variance_img": [67, 280], "effect_vari": [67, 80, 271, 283, 296], "fixed_fx_stat": 67, "0x7f0a3a5533b0": 67, "plot_fixed_effect": [67, 73, 439], "hemodynam": [68, 71, 161, 174], "propos": [68, 100, 169, 170, 177, 338], "primat": 68, "agent": 68, "mion": 68, "monkei": 68, "coupl": [68, 111, 155, 177], "metabol": [68, 171, 174], "phenomenolog": 68, "framework": [68, 155, 216], "whenev": [68, 162, 299], "uncertainti": [68, 76, 79, 168, 170, 171, 174], "issu": [68, 134, 135, 136, 137, 138, 146, 148, 149, 151, 168, 169, 171, 173, 174, 305, 310], "occur": [68, 127, 154, 171, 174, 438], "time_length": [68, 287, 288, 289, 293, 294, 295], "amplitud": [68, 285, 290, 400, 402, 404], "exp_condit": [68, 285], "stim": 68, "oversampl": [68, 283, 285, 287, 288, 289, 290, 293, 294, 295], "gamma": [68, 151, 154, 170], "mion_response_funct": 68, "factor": [68, 70, 100, 104, 136, 154, 163, 174, 273, 275, 276, 285, 287, 288, 289, 290, 293, 294, 295, 299, 379, 392, 393, 394, 401], "response_funct": 68, "dt": 68, "time_stamp": 68, "rint": 68, "delai": [68, 177, 283, 285, 290], "mion_time_deriv": 68, "drf": 68, "derived_response_funct": 68, "rf_model": 68, "main_deriv": 68, "compute_regressor": [68, 125, 149, 154, 170], "model_titl": 68, "convolut": [68, 171, 285, 290], "_label": 68, "con_id": [68, 285], "plot_hrf": [68, 73, 439], "capabl": [69, 149, 154, 181], "coregist": 69, "obvious": 69, "geometri": [69, 115, 312, 389, 395, 396, 397, 398, 404, 423, 424], "resort": 69, "basic_contrast": [69, 71, 170], "dict": [69, 89, 105, 118, 126, 154, 187, 188, 189, 198, 199, 200, 208, 230, 231, 232, 233, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 266, 270, 274, 279, 283, 292, 296, 298, 301, 322, 323, 327, 328, 329, 330, 331, 332, 333, 334, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 380, 381, 389, 390, 397, 398, 402, 405, 406, 407, 408, 416, 418, 420], "Of": 69, "cours": [69, 158, 171, 174, 329, 332], "impress": 69, "littl": [69, 75, 161, 162, 169], "plot_localizer_surface_analysi": [69, 73, 439], "assess": [70, 78, 115, 161, 168, 169, 170, 195, 255, 344, 380], "clean_img": [70, 132, 134, 139, 149, 152, 154, 180, 420], "0x7f0a3a28cb30": 70, "set_index": 70, "head": [70, 283, 296, 324, 416, 418], "real_timeseri": 70, "predicted_timeseri": [70, 170], "navi": 70, "purpl": 70, "teal": 70, "fig1": 70, "axs1": 70, "labelpad": 70, "resid": [70, 151, 154, 324, 325], "fig2": 70, "axs2": 70, "0023749453300866787": 70, "0016934773463517239": 70, "018509907565882628": 70, "07049870657346953": 70, "031008074173867566": 70, "62193288008469e": 70, "markedli": 70, "deep": [70, 187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "awai": [70, 168, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "receiv": [70, 100, 161, 174, 388], "coil": 70, "salt": 70, "necessarili": [70, 159, 171], "influenc": [70, 168, 257], "0x7f0a2e08a6f0": 70, "tell": [70, 86, 115, 168, 228], "everywher": [70, 167], "z_map_ftest": 70, "stat_typ": [70, 283], "0x7f0a3b196780": 70, "772": [70, 73, 439], "plot_predictions_residu": [70, 73, 439], "percept": [71, 142, 154, 171, 225], "realign": [71, 228], "scrambl": [71, 94, 170], "supposedli": 71, "henson": [71, 100, 115], "goshen": 71, "gottstein": 71, "ganel": 71, "otten": 71, "quayl": 71, "rugg": 71, "electrophysiolog": 71, "haemodynam": [71, 170, 171, 174], "prime": 71, "2003": [71, 115, 270, 274], "jul": 71, "793": [71, 127, 154], "805": 71, "1093": [71, 115, 201, 207, 227], "cercor": [71, 115, 201, 207, 227], "multimodal_fac": 71, "fetch_spm_multimodal_fmri": [71, 170], "catch_warn": [71, 103], "simplefilt": [71, 103], "auto_resampl": [71, 302], "mean_imag": 71, "idx": [71, 207], "revious": 71, "tail": [71, 273, 275, 276, 417], "tcontrast": [71, 273, 275, 276], "sophist": [71, 98, 164], "implic": [71, 100, 115], "portion": 71, "sparser": [71, 94, 160, 256, 257, 408, 410], "anterior": [71, 91, 103, 136, 154, 213, 215, 315, 395, 397, 398], "frontal": [71, 91, 115, 166, 379, 384, 386, 387, 393, 394], "lobe": [71, 210], "877": [71, 73, 439], "plot_spm_multimodal_fac": [71, 73, 439], "protocol": [72, 174, 225], "archi": 72, "meriaux": [72, 115, 225], "identif": [72, 94, 115, 174, 225], "databas": [72, 103, 115, 225, 230], "1186": 72, "1471": 72, "2202": 72, "hardcod": [72, 124, 154, 249], "fmt": 72, "trial_type_idx": 72, "condition_id": 72, "instantan": 72, "null_duration_tri": 72, "export": [72, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 392, 393, 394, 395, 396, 397, 398], "pathlib": [72, 126, 148, 154, 179, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 240, 241, 251, 252, 253, 254, 256, 257, 283, 286, 296, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 406, 407, 408, 420, 422, 423, 424], "tsvfile": 72, "localizer_ev": 72, "plot_ev": [72, 145, 154, 170], "experimental_paradigm": [72, 126, 154], "null": [72, 79, 150, 154, 161, 166, 171, 174, 271, 298, 344], "plot_write_events_fil": [72, 73, 439], "04_glm_first_level": [73, 439], "unpair": [74, 82, 113, 173, 225, 296, 356, 383, 386, 399, 439], "sex": [75, 78, 173, 195, 227, 240, 251, 252, 253, 254, 256, 257], "mf": [75, 115, 227], "gm_mask": 75, "adequ": 75, "000000000000007": 75, "second_level": [75, 76, 77, 78, 79, 80, 81, 101, 151, 154, 173, 418], "secondlevelmodel": [75, 76, 77, 79, 80, 81, 101, 149, 152, 154, 173, 283, 323, 418], "second_level_model": [75, 76, 79, 81, 101], "0x7f0a409e24e0": 75, "secondlevelmodelsecondlevelmodel": [75, 77], "second_level_contrast": [75, 77, 79, 283, 296, 298, 418], "03g": 75, "40175": 75, "0x7f0a3aefdb50": 75, "icbm152_2009": 75, "1497": [75, 82, 439], "plot_oasi": [75, 82, 439], "circular": 76, "rosenblatt": [76, 115, 278], "jd": 76, "fino": [76, 115, 278], "weeda": [76, 115, 278], "wd": 76, "solari": [76, 115, 278], "goeman": [76, 115, 278], "jj": 76, "nov": [76, 115, 214], "786": [76, 115, 278], "796": [76, 115, 278], "fetch_localizer_contrast": [76, 77, 79, 80, 105, 132, 154, 223, 224], "second_level_input": [76, 79, 80, 101, 149, 151, 154, 296, 298], "p_val": [76, 77, 79], "p001_uncorrect": 76, "cluster_level_infer": [76, 149, 154, 173], "proportion_true_discoveries_img": [76, 278], "plot_proportion_activated_voxel": [76, 82, 439], "cue": [77, 105, 224, 225], "variat": [77, 101, 105, 106, 115, 125, 154, 166, 167, 174, 234, 282, 298, 344], "pseudo": [77, 105, 258, 259, 275, 298, 300, 406], "brainomics_loc": [77, 105], "brainomics_data": [77, 105], "s01": [77, 105], "cmaps_leftauditoryclick": [77, 105], "tested_var": [77, 105, 106, 344], "float64": 77, "worth": 77, "aualiti": 77, "mask_quality_check": [77, 105], "contrast_map_filenam": [77, 105], "ones_lik": 77, "fluenci": 77, "math_img": [77, 79, 83, 85, 96, 107, 113, 130, 154, 180, 248, 313, 394, 399, 439], "logarithm": [77, 79, 298], "equal": [77, 98, 142, 149, 151, 154, 164, 200, 205, 206, 207, 211, 251, 252, 253, 254, 256, 257, 271, 296, 313, 316, 320, 336, 338, 339, 341, 401, 402, 404, 406], "fwer": [77, 81, 173, 174, 298], "non_parametric_infer": [77, 79, 124, 125, 149, 151, 154, 173], "neg_log_pvals_permuted_ols_unmask": [77, 105], "model_intercept": [77, 79, 105, 298, 344], "two_sided_test": [77, 79, 102, 166, 298, 344], "cap": [77, 79], "1e3": 77, "plot_second_level_association_test": [77, 82, 439], "characterist": [78, 161, 174, 325], "subjects_label": [78, 297], "extra": [78, 118, 163, 177, 178, 195, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 385, 387, 391, 437, 440], "extra_info_subject": 78, "make_second_level_design_matrix": [78, 173], "attent": [78, 290], "singular": [78, 273, 275, 276, 307, 421], "aberr": 78, "plot_second_level_design_matrix": [78, 82, 439], "elicit": 79, "get_tmap": [79, 225], "participant_id": 79, "tolist": [79, 100], "cidx": 79, "p001_unc": [79, 101], "nonparametr": 79, "pend": 79, "reformat": [79, 125, 154], "assumpt": [79, 166, 171], "job": [79, 118, 283, 296, 298, 344], "out_dict": 79, "ideal": [79, 105, 158, 171, 177, 199], "permuted_least_squar": [79, 151, 154], "985": 79, "tend": [79, 100, 163, 168, 179], "itertool": 79, "logp_max_t": [79, 105, 298, 344], "logp_max_s": [79, 298, 344], "logp_max_mass": [79, 298, 344], "img_count": 79, "i_row": 79, "j_col": 79, "plot_second_level_one_sample_test": [79, 82, 439], "retinotop": 80, "distinct": [80, 100, 115, 168, 201, 227], "border": [80, 305, 336, 339, 345, 347, 348], "primari": [80, 169, 283, 296, 418], "sample_vert": 80, "sample_horizont": 80, "s1": 80, "s2": 80, "condition_effect": 80, "doesn": [80, 103, 169], "subject_effect": 80, "02d": 80, "assembl": [80, 116, 171], "unpaired_design_matrix": 80, "paired_design_matrix": 80, "ax_unpair": 80, "ax_pair": 80, "width_ratio": [80, 100], "second_level_model_unpair": 80, "second_level_model_pair": 80, "stat_maps_unpair": 80, "stat_maps_pair": 80, "881784197001252e": 80, "unsurprisingli": 80, "plot_second_level_two_sample_test": [80, 82, 439], "bunch": [81, 117, 134, 154, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240], "oppos": [81, 180, 181], "fetch_localizer_calculation_task": [81, 106, 223, 225], "statstic": 81, "cmap_filenam": [81, 106], "trivial": 81, "two_sid": [81, 146, 149, 152, 154, 299, 300, 320, 417, 418], "0x7f0a3a3029f0": 81, "thresholded_map1": 81, "threshold1": 81, "thresholded_map2": 81, "threshold2": 81, "3g": 81, "thresholded_map3": 81, "threshold3": 81, "raw": [81, 92, 101, 108, 146, 154, 161, 179, 181, 202, 251, 252, 253, 254, 258, 259, 330, 333, 387, 394, 406, 416], "0x7f0a3b3ec320": 81, "0x7f0a2672a510": 81, "fourth": [81, 84, 147, 154, 283, 298, 308, 309, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 377, 408, 420], "0x7f0a3b410050": 81, "884": [81, 82, 439], "plot_threshold": [81, 82, 439], "05_glm_second_level": [82, 439], "4x4": [84, 180, 251, 252, 253, 254, 256, 257, 258, 259, 283, 296, 303, 313, 314, 316, 330, 333, 336, 338, 339, 341, 347, 348, 406], "millimet": [84, 166, 181, 251, 252, 253, 254, 255, 258, 259, 283, 296, 298, 318, 328, 329, 330, 331, 332, 333, 334, 335, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 406, 408, 410, 417], "entri": [84, 124, 126, 154, 169, 177, 251, 252, 253, 254, 273, 275, 276, 305, 396, 424], "3x3": [84, 180, 251, 252, 253, 254, 256, 257, 258, 259, 283, 296, 313, 316, 330, 333, 336, 338, 339, 341, 406], "closest": [84, 316], "union": [84, 339, 341, 342], "messag": [84, 129, 154, 177, 188, 191, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 240, 251, 252, 253, 254, 255, 256, 257, 296, 298, 302, 313, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 340, 344, 406, 407, 408], "circl": 84, "diamond": 84, "source_affin": 84, "rotation_matrix": 84, "0mm": [84, 176], "img_in_mm_spac": 84, "target_affine_3x3": 84, "target_affine_4x4": 84, "img_3d_affin": 84, "img_4d_affin": 84, "target_affine_mm_space_offset_chang": 84, "img_3d_affine_in_mm_spac": 84, "img_4d_affine_in_mm_spac": 84, "anchor": 84, "plot_affine_transform": [84, 96, 439], "goal": [85, 90, 93, 117, 168, 169], "result_img": [85, 179, 312], "img1": [85, 312], "img2": [85, 312], "755": [85, 96, 439], "plot_compare_mean_imag": [85, 96, 439], "connected_label_region": [86, 134, 154, 158, 180, 408, 410], "oper": [86, 89, 91, 94, 104, 117, 147, 154, 161, 168, 169, 171, 174, 178, 179, 181, 187, 188, 221, 250, 283, 296, 298, 310, 312, 313, 336, 337, 338, 340, 341, 382, 426, 430, 440], "atlas_yeo_2011": 86, "atlas_yeo": 86, "thick_7": [86, 211], "0x7f0a3b535790": 86, "apart": [86, 134, 154, 158, 159, 168], "region_label": 86, "region_extractor": [86, 149, 154], "0x7f0a28c3cdd0": 86, "difficult": [86, 155, 162, 167, 181], "eg": [86, 89, 136, 139, 145, 154, 155, 156, 161, 180, 181, 376, 377, 416], "broken": [86, 132, 140, 154, 166], "relabeled_yeo_atla": 86, "folder_path": 86, "connect_diag": [86, 409], "region_labels_not_diag": 86, "100mm": 86, "region_labels_min_s": 86, "839": [86, 96, 439], "plot_extract_regions_labels_imag": [86, 96, 439], "atlas_network": 87, "dmn_network": 87, "regions_indices_network3": 87, "blob": [87, 94, 160, 180, 207], "network3": 87, "plot_extract_rois_smith_atla": [87, 96, 439], "fetch_neurovault_auditory_computation_task": [88, 139, 154, 233], "foreground": [88, 159], "connected_region": [88, 127, 140, 154, 159, 180, 408, 409], "scoreatpercentil": [88, 103, 320], "threshold_percentile_img": 88, "threshold_value_img": 88, "0x7f0a3abcf7d0": 88, "regions_percentile_img": 88, "1500": 88, "regions_value_img": 88, "plot_extract_rois_statistical_map": [88, 96, 439], "li": [89, 115, 240], "homogen": [89, 152, 154, 158, 180, 200, 251, 252, 253, 254, 258, 259, 316, 330, 333, 406], "miyawaki_filenam": [89, 181], "miyawaki_mean_img": [89, 181], "0x7f0a3ac21250": 89, "0x7f0a3b4ed430": 89, "mask_arg": [89, 92, 181, 258, 259, 330, 333, 406], "uniform": 89, "epi_filenam": [89, 181], "0x7f0a3af362d0": 89, "eros": [89, 174, 221, 243, 246, 336, 337, 338, 340, 341], "dilat": [89, 94, 174, 180, 221, 243, 246, 336, 337, 338, 340, 341], "layer": 89, "skull": [89, 220, 336, 337, 338, 340, 341], "lower_cutoff": [89, 338, 341], "upper_cutoff": [89, 338, 339, 341], "bright": 89, "hover": 89, "trended_data": 89, "detrended_data": 89, "841": [89, 96, 439], "plot_mask_comput": [89, 96, 181, 439], "negative_stat_img": 90, "plot_negate_imag": [90, 96, 439], "output_filepath": [91, 92, 181], "mni152templ": [91, 283, 296, 379, 392, 393, 394, 418], "ward": [91, 158, 174, 175, 331, 406], "pole": 91, "123176": 91, "insular": 91, "18728": 91, "superior": [91, 103, 167, 315], "40640": 91, "42528": 91, "inferior": 91, "par": 91, "triangulari": 91, "8824": 91, "operculari": 91, "11072": 91, "68584": 91, "37688": 91, "4168": 91, "14640": 91, "6784": 91, "20200": 91, "temporooccipit": 91, "16032": 91, "5176": 91, "15536": 91, "11760": 91, "55160": 91, "lobul": 91, "23264": 91, "supramargin": 91, "13936": 91, "18072": 91, "angular": 91, "19272": 91, "78232": 91, "32712": 91, "intracalcarin": 91, "11208": 91, "7808": 91, "juxtaposit": 91, "formerli": [91, 139, 154], "supplementari": [91, 117, 166], "11872": 91, "subcallos": 91, "9136": 91, "paracingul": 91, "23552": 91, "20736": 91, "19296": 91, "precun": 91, "44984": 91, "cuneal": 91, "9816": 91, "orbit": 91, "25184": 91, "parahippocamp": 91, "9984": 91, "5680": 91, "lingual": 91, "27048": 91, "fusiform": [91, 166], "4880": 91, "12752": 91, "11752": 91, "14448": 91, "5496": 91, "15088": 91, "8952": 91, "planum": [91, 103], "polar": 91, "5992": 91, "heschl": 91, "h1": 91, "h2": 91, "4832": 91, "temporal": [91, 103], "7616": 91, "supracalcarin": 91, "2088": 91, "42208": 91, "quot": 91, "niftilablesmask": 91, "n_time_point": [91, 92, 291, 292], "label_idx": 91, "752": [91, 100, 115], "plot_nifti_labels_simpl": [91, 96, 439], "0x7f0a2c77d0a0": 92, "fastica": [92, 103, 104, 258], "components_mask": [92, 104], "_fastica": [92, 104], "revers": [92, 135, 142, 154], "821": [92, 96, 439], "769": [92, 96, 439], "plot_nifti_simpl": [92, 96, 181, 439], "load_mni152_templ": [93, 148, 154, 220, 221, 242, 244, 247, 300, 303, 308, 312, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 424], "resampled_stat_img": 93, "tmap_img": 93, "original_shap": 93, "original_affin": 93, "resampled_shap": 93, "resampled_affin": 93, "template_img": 93, "template_shap": 93, "template_affin": 93, "982": [93, 96, 439], "plot_resample_to_templ": [93, 96, 439], "allevi": 94, "curs": 94, "aris": [94, 115, 171, 324, 325], "context": [94, 100, 115, 126, 152, 154, 169, 174], "chain": [94, 180, 187, 188], "clear": [94, 118, 124, 142, 151, 154, 169, 251, 252, 253, 254, 258, 259, 330, 333, 406], "student": [94, 171, 180, 271, 440], "haxby_label": 94, "txt": [94, 234], "especi": [94, 140, 149, 154, 155, 161, 179, 402, 440], "Such": [94, 155, 321], "4mm": [94, 159, 166, 216, 259], "12mm": 94, "anisotropi": 94, "indent": 94, "analog": 94, "0x7f0a3ab76db0": 94, "brief": [94, 169, 171], "motiv": 94, "realm": 94, "ttest_ind": [94, 180], "establish": [94, 167, 169], "log_p_valu": 94, "log_p_values_img": 94, "0x7f0a268c7110": 94, "extend": [94, 126, 145, 150, 154, 171, 181, 316], "annot": [94, 116, 126, 134, 145, 154, 207, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 381, 384, 386, 387, 390, 392, 393, 394, 395, 396, 397, 398, 401, 404, 422, 437, 440], "0x7f0a394926f0": 94, "intersect": [94, 180, 339, 341, 342, 412], "investig": [94, 98, 160, 255], "bin_p_valu": 94, "boolean": [94, 118, 146, 151, 154, 193, 195, 219, 225, 234, 255, 258, 259, 283, 302, 314, 327, 334, 336, 337, 338, 340, 341, 379, 384, 386, 388, 393, 396, 401, 414, 415, 420], "logic": [94, 118, 169, 250], "logical_and": [94, 102], "jargon": 94, "AND": [94, 118, 152, 154], "conjunct": 94, "bin_p_values_and_vt": 94, "otherwis": [94, 102, 103, 139, 154, 171, 177, 187, 188, 189, 193, 195, 201, 202, 213, 214, 215, 223, 224, 225, 227, 234, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 286, 296, 311, 315, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 389, 392, 395, 397, 398, 401, 402, 404, 405, 406, 407, 408, 409, 420, 424], "bin_p_values_and_vt_img": 94, "06_manipulating_imag": [94, 96, 439], "plot_roi_extract": [94, 96, 439], "0x7f0a3af370b0": 94, "consolid": [94, 150, 154], "toward": [94, 149, 154, 187, 311, 328, 329, 330, 331, 332, 333, 334, 440], "morpholog": [94, 180, 336, 337, 338, 340, 341], "forget": [94, 169], "hole": 94, "binary_dil": [94, 180, 336, 337, 338, 340, 341], "dil_bin_p_values_and_vt": 94, "dil_bin_p_values_and_vt_img": 94, "0x7f0a3ac20590": 94, "immedi": [94, 325], "first_roi_data": 94, "second_roi_data": 94, "first_roi_img": 94, "second_roi_img": 94, "0x7f0a268c57c0": 94, "suit": [94, 100, 156, 162, 176, 199], "condition_nam": [94, 100], "n_cond_img": 94, "n_cond": 94, "cond": [94, 100, 285], "cond_map": 94, "mask_data": 94, "mask_atla": 94, "2248": [94, 142, 154], "first_epi_fil": 95, "mean_func": 95, "20mm": [95, 176], "smoothed_img": [95, 179], "plot_smooth_mean_imag": [95, 96, 439], "2247": [96, 439], "751": [96, 439], "765": [96, 439], "massiv": [97, 109, 113, 165, 219, 224, 225, 306, 308, 313, 327, 333, 344, 372, 386, 394, 399, 431, 439, 440], "multivari": [97, 109, 113, 115, 160, 174, 175, 176, 198, 216, 308, 313, 327, 333, 394, 399, 438, 439], "bridg": 98, "integr": [98, 127, 142, 154, 169, 180, 330], "usecas": [98, 158, 162, 164, 169], "pointer": [98, 164], "unclear": 98, "n_timepoint": [98, 161, 164], "meaning": [98, 100, 129, 139, 142, 154, 169, 171, 301, 420], "stipul": 98, "823": 98, "processor": [98, 164], "858": 98, "dummyclassifi": [98, 99, 147, 154, 164, 251, 252, 253, 254], "pure": [98, 102, 256, 257], "slower": [98, 164, 168, 316], "permutation_test_scor": [98, 164], "null_cv_scor": 98, "selectpercentil": [98, 134, 154], "linear_svc": 98, "anova_svc": 98, "return_estim": 98, "fitted_pipelin": 98, "test_scor": 98, "801": 98, "first_pipelin": 98, "svc_coef": 98, "invert": [98, 104, 126, 145, 154, 168, 181, 187, 273, 275, 276, 327, 330, 333, 345, 379, 381, 384, 386, 387, 390, 392, 393, 394], "full_coef": 98, "0x7f0a3b71a6f0": 98, "fisher": [98, 115, 271], "lda": 98, "discriminant_analysi": 98, "lineardiscriminantanalysi": 98, "anova_lda": 98, "n_condit": 98, "8009": 98, "principl": [98, 158, 161, 165, 167, 174, 255, 440], "fanci": 98, "n_features_to_select": 98, "rfe_svc": 98, "awar": [98, 189, 419], "975": [98, 109, 439], "plot_advanced_decoding_scikit": [98, 109, 439], "gridsearchcv": [99, 164], "pipe": 99, "most_frequ": 99, "connectivity__kind": 99, "labelencod": 99, "pheno": 99, "refit": 99, "cv_results_": 99, "mean_test_scor": 99, "std_test_scor": 99, "candid": 99, "param_connectivity__kind": 99, "1180": [99, 109, 115, 258, 439], "plot_age_group_prediction_cross_v": [99, 109, 142, 154, 439], "substitut": [100, 416], "psychophysiolog": 100, "ppi": 100, "cisler": [100, 115], "everyth": [100, 177], "systemat": [100, 115, 129, 154, 225, 324, 325], "incorpor": [100, 160], "literatur": [100, 156, 195, 307, 325, 421], "mention": [100, 124, 126, 152, 154, 169, 170, 171], "abdulrahman": [100, 115], "decis": [100, 115, 162, 166, 251, 252, 253, 254, 256, 257, 271], "inter": [100, 105, 156, 180, 181, 339, 341], "mumford": [100, 115, 161, 176, 217, 235], "primarili": 100, "fetch_language_localizer_demo_dataset": [100, 101, 108, 170], "events_df": 100, "languageloc": [100, 101, 108], "img_filt": [100, 101, 108, 286], "desc": [100, 101, 108, 286, 324, 325], "preproc": [100, 101, 108, 286], "standard_glm": 100, "fmri_fil": 100, "glm_paramet": 100, "get_param": [100, 187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "queri": [100, 101, 107, 108, 230, 232, 250], "starttim": [100, 101, 108], "01_task": [100, 101, 108], "languagelocalizer_desc": [100, 101, 108], "highlight": [100, 177], "lsa_events_df": 100, "condition_count": 100, "i_trial": 100, "iterrow": 100, "trial_condit": 100, "__": [100, 187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "shouldn": [100, 177, 197], "trial_nam": 100, "lsa_glm": 100, "lsa_beta_map": 100, "trialwise_condit": 100, "beta_map": 100, "relabel": [100, 409], "lss_transform": 100, "row_numb": 100, "compliant": [100, 125, 154, 169, 181, 235, 249, 325], "trial_type_seri": 100, "trial_type_list": 100, "trial_numb": 100, "left_001": 100, "track": [100, 103, 168, 177], "lss_beta_map": 100, "lss_design_matric": 100, "lss_events_df": 100, "lss_glm": 100, "dm_titl": 100, "i_ax": 100, "though": [100, 104, 161, 274, 395, 397, 419], "vastli": 100, "quick": [100, 176], "neurosynth": [100, 103, 116, 230, 232, 440], "lang_seed_beta_seri": 100, "lang_beta_seri": 100, "lang_corr": 100, "language_connectivity_img": 100, "string_seed_beta_seri": 100, "string_beta_seri": 100, "string_corr": 100, "string_connectivity_img": 100, "josh": [100, 115], "keith": [100, 115], "bush": [100, 115], "scott": [100, 115, 215], "steel": [100, 115], "1042": [100, 115], "1052": [100, 115], "jess": [100, 115], "rissman": [100, 115], "adam": [100, 115], "gazzalei": [100, 115], "esposito": [100, 115], "stage": [100, 115, 169, 176], "763": [100, 115], "2004": [100, 115, 201, 275, 276], "jeanett": [100, 115, 176], "benjamin": [100, 115, 215], "turner": [100, 115, 198, 208], "gregori": [100, 115], "ashbi": [100, 115], "poldrack": [100, 115, 118, 176, 217, 228, 230, 232, 235], "deconvolv": [100, 115, 161], "multivoxel": [100, 115, 161, 228], "2636": [100, 115], "2643": [100, 115, 146, 154], "spatiotempor": [100, 115], "rapid": [100, 115], "1429": [100, 115], "1438": [100, 115], "hunar": [100, 115], "richard": [100, 115], "994": [100, 109, 439], "plot_beta_seri": [100, 109, 439], "consult": 101, "simplifi": [101, 108, 117, 132, 142, 150, 154, 181, 223, 224], "basenam": 101, "04_task": 101, "rotx": 101, "roti": 101, "rotz": 101, "conson": 101, "value_count": 101, "scalar": [101, 166, 181, 270, 271, 273, 274, 275, 276, 318, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 381, 390], "model_and_arg": 101, "midx": 101, "share": [101, 115, 118, 145, 154, 155, 160, 169, 179, 191, 200, 203, 204, 225, 230, 232], "8mm": 101, "first_level_contrast": [101, 149, 154, 296, 298], "1078": 101, "plot_bids_analysi": [101, 109, 439], "behav": [102, 283, 285, 290], "exchang": [102, 104, 195], "winkler": [102, 115, 227, 344], "anderson": [102, 115, 195, 227, 344], "robinson": [102, 115, 227, 344], "australian": [102, 115, 344], "zealand": [102, 115, 344], "journal": [102, 115, 166, 207, 208, 211, 234, 344], "uvm": 102, "edu": [102, 115, 208, 211, 234, 270, 274], "statdhtx": 102, "fundamentals9": 102, "supplement": [102, 115, 201, 220, 245], "randomizationtestswithr": 102, "permut2": 102, "conditions_encod": 102, "func_reduc": 102, "n_session": 102, "conditions_per_sess": 102, "grouped_fmri_mask": 102, "grouped_conditions_encod": 102, "session_mask": 102, "session_house_mask": 102, "session_face_mask": 102, "ol": [102, 105, 273, 275, 276, 283, 292, 344, 431], "trace": 102, "pvals_bonferroni": 102, "neg_log_pvals_bonferroni": 102, "neg_log_pvals_bonferroni_unmask": 102, "1183": [102, 105, 106], "dataconversionwarn": [102, 105, 106], "mean_fmri_img": 102, "neg_log_pvals_bonferroni_data": 102, "1017": [102, 109, 439], "plot_haxby_mass_univari": [102, 109, 439], "fetch_neurovault": [103, 107, 118, 135, 142, 146, 154, 231, 232, 233], "load_mni152_brain_mask": [103, 132, 148, 154, 220], "nv_data": [103, 107], "max_imag": [103, 107, 118, 230], "fetch_neurosynth_word": [103, 118, 230, 232], "term_weight": 103, "word_frequ": [103, 118, 230, 232], "vocabulari": [103, 118, 174, 176, 230, 232], "total_scor": 103, "ntop": 103, "term_idx": 103, "1307": 103, "insula": 103, "nreshap": 103, "deprecationwarn": [103, 199, 200, 208, 280, 327, 328, 329, 330, 331, 332, 333, 334, 408], "failur": [103, 134, 154, 169, 338], "is_us": 103, "image_path": 103, "images_meta": [103, 107, 118, 230, 231, 232, 233], "collection_id": [103, 107, 118, 230, 232], "fast_ica": 103, "ica_map": 103, "term_weights_for_compon": 103, "components_": [103, 137, 154, 258, 259], "ic_map": 103, "ic_term": 103, "ic_threshold": 103, "ic_img": 103, "important_term": 103, "neurolog": [103, 171, 174, 197], "plot_ica_neurovault": [103, 109, 439], "advis": [104, 169, 179, 221, 338, 406], "unsupervis": [104, 174, 258, 259, 283, 296, 405, 407], "latent": [104, 174], "sens": [104, 161, 176, 251, 252, 253, 254, 273, 275, 276, 348, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371], "component_img": 104, "plot_ica_resting_st": [104, 109, 439], "pvals_anova": [105, 106], "neg_log_pvals_anova": [105, 106], "neg_log_pvals_anova_unmask": [105, 106], "fwe": [105, 344], "tfce": [105, 124, 151, 154, 174, 298, 344], "ols_output": 105, "neg_log_pvals_tfce_unmask": 105, "logp_max_tfc": [105, 298, 344], "amax": 105, "images_to_plot": 105, "i_col": 105, "new_titl": 105, "sig": 105, "plot_localizer_mass_univariate_method": [105, 106, 109, 439], "plotted_slic": 106, "masked_pv": 106, "plot_localizer_simple_analysi": [106, 109, 439], "fetch_neurovault_id": [107, 118, 135, 154, 230, 231, 233], "stop_go_image_id": 107, "3041": 107, "3042": [107, 149, 154], "2676": 107, "2675": 107, "2818": 107, "2834": 107, "cognitive_paradigm_cogatla": 107, "contrast_definit": 107, "succ": 107, "map_typ": [107, 230], "image_id": [107, 118, 232], "nplot": 107, "absolute_path": 107, "t_to_z": 107, "t_score": 107, "deg_of_freedom": 107, "sf": 107, "z_valu": 107, "z_img": 107, "current_collect": 107, "ncomput": 107, "this_meta": 107, "ncollect": 107, "t_img": 107, "number_of_subject": 107, "meta_analysis_img": 107, "sqrt": [107, 132, 154, 193, 194, 275, 276], "plot_neurovault_meta_analysi": [107, 109, 439], "downsampl": [108, 159, 180, 216, 380], "10k": 108, "sidecar": 108, "json_fil": 108, "repetitiontim": 108, "z_scores_right": 108, "z_scores_left": 108, "contrast_valu": 108, "accumul": [108, 437], "z_score_left": 108, "az_scores_right": 108, "popul": [108, 115, 155, 170, 188, 227, 328, 329, 330, 331, 332, 333, 334, 420], "ttest_1samp": 108, "pval_left": 108, "pval_right": 108, "z_val_left": 108, "z_val_right": 108, "plot_surface_bids_analysi": [108, 109, 439], "07_advanc": [109, 439], "1077": [109, 439], "sandbox": 111, "tent": 111, "plot_surf_img": 111, "surfaceimag": [111, 251, 252, 253, 254, 265, 266], "polymesh": 111, "subplot_kw": [111, 395, 396, 397, 398], "mesh_part": 111, "plot_surf": [111, 124, 134, 136, 142, 146, 147, 148, 149, 154, 169, 170, 397, 398, 437], "isinst": 111, "fetch_nki": 111, "surfacemask": [111, 251, 252, 253, 254], "mean_data": 111, "895": 111, "20484": 111, "label_nam": [111, 265], "fetch_destrieux": 111, "avg_method": [111, 126, 147, 154, 395, 397], "median": [111, 142, 154, 328, 331, 395, 397, 411], "labels_mask": 111, "label_names_": [111, 265], "disabl": [111, 118, 126, 140, 142, 146, 152, 154, 168, 405], "monkeypatch_masker_check": 111, "adjust_screening_percentil": 111, "randomst": [111, 258, 259, 283, 292, 298, 344, 405, 406], "masker_valid": 111, "_univariate_select": 111, "20206": 111, "20207": 111, "20208": 111, "4991939095387371": 111, "5115891053391053": 111, "4847132034632034": 111, "score_func": 111, "atleast_2d": 111, "dp": 111, "cold_hot": [111, 138, 154, 389, 394, 398, 401, 402, 404], "885": [111, 112, 439], "1509": [111, 112, 439], "plot_surface_image_and_mask": [111, 112, 439], "08_experiment": [112, 439], "permiss": [113, 142, 154], "auto_examples_python": 113, "auto_examples_jupyt": 113, "arrang": [115, 140, 154, 355, 357, 360, 374, 379, 384, 387, 392, 393, 394, 437], "alphabet": [115, 142, 154, 179], "bib": 115, "samara": [115, 168, 188, 191, 408], "septemb": [115, 126, 133, 148, 154, 408], "01093944": [115, 408], "elena": [115, 198], "erik": [115, 198], "erhardt": [115, 198], "eswar": [115, 198], "damaraju": [115, 198], "william": [115, 198, 227, 240, 270, 274], "gruner": [115, 198], "judith": [115, 198], "segal": [115, 198], "roger": [115, 198, 239], "silva": [115, 198], "havlicek": [115, 198], "sriniva": [115, 198], "rachakonda": [115, 198], "jill": [115, 198, 201, 227], "fri": [115, 198], "ravi": [115, 198], "kalyanam": [115, 198], "andrew": [115, 195, 198, 200, 220], "arvind": [115, 198], "caprihan": [115, 198], "jessica": [115, 198, 208, 213, 214], "eichel": [115, 198], "adelsheim": [115, 198], "angela": [115, 198, 208], "bryan": [115, 198], "juan": [115, 198], "bustillo": [115, 198], "sarah": [115, 198], "feldstein": [115, 198], "ew": [115, 198], "francesca": [115, 198], "filbei": [115, 198], "corei": [115, 198], "ford": [115, 198], "kent": [115, 198], "hutchison": [115, 198], "rex": [115, 198], "jung": [115, 198], "kiehl": [115, 198], "piyadasa": [115, 198], "kodituwakku": [115, 198], "yuko": [115, 198], "komesu": [115, 198], "mayer": [115, 198], "godfrei": [115, 198], "pearlson": [115, 198], "phillip": [115, 198], "joseph": [115, 198, 213], "sadek": [115, 198], "ursina": [115, 198], "teuscher": [115, 198], "vinc": [115, 198], "calhoun": [115, 198, 240], "frontiersin": [115, 195, 198, 230, 232, 240], "fnsy": [115, 198], "00002": [115, 198], "marti": [115, 210, 344], "onlinelibrari": [115, 200, 210, 239, 301, 344, 420], "wilei": [115, 200, 210, 239, 275, 276, 301, 344, 420], "1111": [115, 344], "1467": [115, 344], "842x": [115, 344], "00156": [115, 344], "arxiv": [115, 166, 168, 188, 191, 200, 201, 207, 208, 210, 211, 213, 219, 227, 234, 239, 301, 344, 420], "luca": [115, 167], "baldassarr": [115, 167], "janaina": [115, 167], "mourao": [115, 167, 176], "miranda": [115, 167, 176], "massimiliano": [115, 167], "pontil": [115, 167], "workshop": [115, 167, 199], "www0": [115, 167], "ac": [115, 167, 208, 220, 237, 238, 245], "staff": [115, 167], "neurosparse_prni": [115, 167], "1109": [115, 167, 199, 258, 259, 407, 413], "prni": [115, 167, 199], "yashar": [115, 324, 325, 421], "behzadi": [115, 307, 324, 325, 421], "khale": [115, 324, 325, 421], "restom": [115, 324, 325, 421], "joi": [115, 324, 325, 421], "liau": [115, 324, 325, 421], "liu": [115, 207, 211, 324, 325, 421], "perfus": [115, 324, 325, 421], "sciencedirect": [115, 163, 166, 167, 197, 199, 202, 205, 209, 215, 220, 225, 228, 229, 245, 253, 254, 324, 325, 344, 380, 421], "pii": [115, 163, 166, 167, 197, 199, 202, 205, 209, 215, 220, 225, 228, 229, 245, 253, 254, 324, 325, 344, 380, 421], "s1053811907003837": [115, 324, 325, 421], "mine": [115, 176, 199], "hierarchi": [115, 199], "pedro": [115, 199], "rosa": [115, 199], "neto": [115, 199], "lyttelton": [115, 199], "habib": [115, 199], "benali": [115, 199], "alan": [115, 199, 220, 245], "bootstrap": [115, 199], "1126": [115, 199, 213, 219], "1139": [115, 199], "s1053811910002697": [115, 199], "lorrain": [115, 166], "tyler": [115, 166], "semant": [115, 147, 149, 154, 166], "perirhin": [115, 166], "4766": [115, 166], "4775": [115, 166], "jneurosci": [115, 166], "1523": [115, 136, 154, 166], "2828": [115, 166], "loui": [115, 220, 245], "collin": [115, 197, 220, 245], "zijdenbo": [115, 220], "wim": [115, 220], "baar": [115, 220], "\u00e9": [115, 220, 225], "anim": [115, 220], "insect": [115, 220], "attila": [115, 220], "kuba": [115, 220], "\u0161": [115, 220], "\u00e1": [115, 220], "amal": [115, 220], "todd": [115, 166, 220], "pokropek": [115, 220], "editor": [115, 187, 220], "springer": [115, 187, 205, 220], "cameron": [115, 200, 205, 240], "jame": [115, 200, 219, 275, 276], "holtzheim": [115, 200], "iii": [115, 200], "xiaop": [115, 200], "hu": [115, 200], "helen": [115, 200], "mayberg": [115, 200], "1914": [115, 200], "1928": [115, 200], "1002": [115, 200, 210, 239, 301, 420], "hbm": [115, 200, 301, 420], "21333": [115, 200], "kamalak": [115, 202], "ga\u00ebl": [115, 163, 202, 205, 253, 254, 258], "antonia": [115, 202], "machlouzarid": [115, 202], "shalit": [115, 202], "krzysztof": [115, 202, 230, 232], "117126": [115, 202], "2020": [115, 143, 144, 145, 154, 202, 215], "s1053811920306121": [115, 202], "davidson": [115, 275, 276], "mackinnon": [115, 275, 276], "econometr": [115, 270, 274, 275, 276], "theori": [115, 174, 228, 275, 276], "univ": [115, 275, 276], "ny": [115, 275, 276], "isbn": [115, 270, 274, 275, 276], "978": [115, 275, 276], "512372": [115, 275, 276], "gso": [115, 275, 276], "gbv": [115, 275, 276], "cmd": [115, 275, 276], "srcha": [115, 275, 276], "srt": [115, 275, 276], "yop": [115, 275, 276], "ikt": [115, 275, 276], "trm": [115, 275, 276], "ppn": [115, 275, 276], "393847152": [115, 275, 276], "sourceid": [115, 275, 276], "fbw_bibsonomi": [115, 275, 276], "halgren": [115, 201, 209], "cerebr": [115, 171, 201, 207, 211, 213, 225, 227], "s151": [115, 201], "s1053": [115, 201, 220, 245], "8119": [115, 201, 220, 245], "71561": [115, 201], "christoph": [115, 136, 139, 154, 201, 209], "bruce": [115, 201, 207, 209, 211, 239], "ander": [115, 201, 209, 239], "s1053811910008542": [115, 209], "ga": [115, 167], "\u00eb": [115, 167], "graphnet": [115, 167], "june": [115, 132, 135, 138, 147, 154, 167, 168], "2015": [115, 118, 119, 120, 121, 122, 123, 127, 128, 154, 167, 188, 191, 205, 225, 227, 230, 232, 324, 325], "01147731": [115, 167], "\u00fc": [115, 167], "bingen": [115, 167], "00991743": [115, 167], "nico": [115, 213, 215], "dosenbach": [115, 130, 154, 213, 215], "binyam": [115, 213], "alexand": [115, 195, 207, 213, 214], "cohen": [115, 213, 214], "damien": [115, 213], "church": [115, 213, 214], "nelson": [115, 213, 214], "gagan": [115, 213, 214], "wig": [115, 213, 214], "alecia": [115, 213, 214], "lessov": [115, 213], "schlaggar": [115, 213, 214, 215, 324, 325], "kelli": [115, 213, 214, 220, 240, 245, 324, 325], "barn": [115, 213, 214, 324, 325], "dubi": [115, 213], "feczko": [115, 213], "rebecca": [115, 213, 216], "coalson": [115, 213], "pruett": [115, 213], "deanna": [115, 213, 215, 227], "barch": [115, 213, 227], "petersen": [115, 213, 214, 215, 324, 325], "bradlei": [115, 213, 214, 215, 227, 324, 325], "5997": [115, 213], "sciencemag": [115, 213, 219], "1194144": [115, 213], "duchi": [115, 168], "stephen": [115, 168, 208, 227, 240, 298, 344], "gould": [115, 168], "daphn": [115, 168], "koller": [115, 168], "subgradi": [115, 168], "1206": [115, 168], "3249": [115, 168], "joset": [115, 166], "etzel": [115, 166], "jeffrei": [115, 166, 195], "zack": [115, 166], "braver": [115, 166], "promis": [115, 166], "pitfal": [115, 161, 166], "s1053811913002917": [115, 166], "filippini": [115, 208, 227], "macintosh": [115, 227], "morgan": [115, 227], "hough": [115, 227], "gui": [115, 227], "goodwin": [115, 227], "giovanni": [115, 227], "frisoni": [115, 227], "matthew": [115, 227, 240, 344], "beckmann": [115, 208, 227, 324, 325], "clare": [115, 208, 227, 240], "mackai": [115, 208, 227], "carrier": [115, 227], "apo": [115, 227], "\u03b54": [115, 227], "allel": [115, 227], "proceed": [115, 166, 170, 208, 227, 255, 325], "academi": [115, 166, 208, 227, 255, 325], "7209": [115, 227], "7214": [115, 227], "pna": [115, 166, 208, 227, 325], "1073": [115, 166, 208, 227, 325], "0811879106": [115, 227], "sereno": [115, 239], "tootel": [115, 239], "intersubject": [115, 239], "28sici": [115, 210, 239], "291097": [115, 210, 239], "0193": [115, 210, 239], "281999": [115, 239], "3a4": [115, 210, 239], "3c272": [115, 239], "3aaid": [115, 210, 239], "hbm10": [115, 239], "3e3": [115, 210, 239], "3b2": [115, 210, 239], "sici": [115, 210, 239], "1097": [115, 210, 239], "aid": [115, 210, 239], "van": [115, 118, 201, 227, 230, 232, 324, 325], "der": [115, 201], "kouw": [115, 201], "florent": [115, 201], "s\u00e9gonn": [115, 201], "salat": [115, 201], "evelina": [115, 201], "busa": [115, 201], "larri": [115, 201], "seidman": [115, 201], "goldstein": [115, 201], "kennedi": [115, 201], "vern": [115, 201], "cavi": [115, 201], "niko": [115, 201], "makri": [115, 201], "rosen": [115, 201], "bhg087": [115, 201], "academ": [115, 201, 207, 227], "oup": [115, 201, 207, 227], "1193353": [115, 201], "boyd": 115, "edinburgh": 115, "fletcher": [115, 195], "sarang": 115, "joshi": 115, "riemannian": 115, "diffus": [115, 161, 174], "tensor": 115, "s0165168406001691": 115, "sigpro": 115, "2005": [115, 325], "vladimir": [115, 220, 245], "fonov": [115, 220, 245], "botteron": [115, 220, 245], "almli": [115, 220, 245], "mckinstri": [115, 220, 245], "unbias": [115, 161, 220, 245], "pediatr": [115, 220, 245], "s1053811910010062": [115, 220, 245], "rc": [115, 220, 245], "cr": [115, 220, 245], "dl": [115, 220, 245], "nonlinear": [115, 220, 245], "birth": [115, 220, 245], "adulthood": [115, 220, 245], "s102": [115, 220, 245], "70884": [115, 220, 245], "fox": [115, 208, 210, 325], "snyder": [115, 324, 325], "justin": [115, 325], "maurizio": [115, 325], "corbetta": [115, 325], "essen": [115, 118, 227, 230, 232, 325], "marcu": [115, 166, 227, 234, 325], "raichl": [115, 325], "9673": [115, 325], "9678": [115, 325], "juli": [115, 123, 154, 168, 325], "0504136102": [115, 325], "freedman": [115, 344], "nonstochast": [115, 344], "busi": [115, 344], "econom": [115, 344], "1983": [115, 344], "tandfonlin": [115, 344], "1080": [115, 344], "07350015": [115, 344], "10509354": [115, 344], "holm": [115, 207, 301, 420], "worslei": [115, 301, 420], "frith": [115, 301, 420], "frackowiak": [115, 301, 420], "1994": [115, 301, 420], "460020402": [115, 301, 420], "gabriel": [115, 230, 232], "rivera": [115, 118, 230, 232], "yannick": [115, 119, 154, 163, 225, 230, 232, 253, 254], "schwarz": [115, 230, 232], "satrajit": [115, 230, 232], "ghosh": [115, 118, 230, 232], "camil": [115, 230, 232], "maumet": [115, 118, 230, 232], "vanessa": [115, 230, 232], "sochat": [115, 118, 230, 232], "nichol": [115, 118, 174, 176, 227, 230, 232, 298, 338, 344], "tal": [115, 118, 181, 230, 232, 334], "yarkoni": [115, 118, 230, 232], "marguli": [115, 118, 230, 232], "neuroinformat": [115, 230, 232], "fninf": [115, 118, 230, 232], "00008": [115, 118, 230, 232], "philadelphia": [115, 167], "00839984": [115, 167], "educ": [115, 227, 234, 270, 274, 401], "fifth": [115, 221, 270, 274], "edit": [115, 147, 154, 169, 177, 270, 274], "066189": [115, 270, 274], "stern": [115, 270, 274], "nyu": [115, 126, 154, 270, 274], "wgreen": [115, 270, 274], "econometricanalysi": [115, 270, 274], "htm": [115, 270, 274], "logan": [115, 167], "grosenick": [115, 167], "brad": [115, 167], "klingenberg": [115, 167], "kiefer": [115, 167], "katovich": [115, 167], "brian": [115, 167, 240, 301, 420], "knutson": [115, 167], "s1053811912012487": [115, 167], "ida": [115, 219], "gobbini": [115, 219], "maura": [115, 219], "furei": [115, 219], "alumit": [115, 219], "ishai": [115, 219], "jennif": [115, 219], "schouten": [115, 219], "pietro": [115, 219], "pietrini": [115, 219], "5539": [115, 219], "1063736": [115, 219], "honorio": [115, 168, 188, 191], "tommi": [115, 188, 191], "jaakkola": [115, 188, 191], "1207": [115, 168, 188, 191], "4255": [115, 168, 188, 191], "andr": [115, 407, 413], "rena": [115, 142, 154, 158, 163, 174, 175, 253, 254, 406, 413], "tran": [115, 197, 407, 413], "anal": [115, 407, 413], "mach": [115, 407, 413], "intel": [115, 407, 413], "tpami": [115, 407, 413], "2815524": [115, 407, 413], "schwartz": [115, 118, 119, 154, 163, 225, 253, 254], "scalabl": [115, 163, 253, 254], "s1053811917308182": [115, 163, 253, 254], "koji": [115, 228], "complementari": [115, 228], "neuropsychologia": [115, 228], "s0028393211005070": [115, 228], "thorsten": [115, 166], "kahnt": [115, 166], "grueschow": [115, 166], "speck": [115, 166], "dylan": [115, 166, 240], "perceptu": [115, 166], "s0896627311002960": [115, 166], "nikolau": [115, 166, 255], "kriegeskort": [115, 166, 176, 255], "rainer": [115, 166, 255], "goebel": [115, 166, 255], "peter": [115, 166, 208, 210, 255], "bandettini": [115, 166, 255], "3863": [115, 166, 255], "3868": [115, 166, 255], "0600244103": [115, 166], "laird": [115, 208], "mickl": [115, 208], "kimberli": [115, 208], "rai": [115, 208], "rees": [115, 208], "mckai": [115, 208], "glahn": [115, 208], "4022": [115, 208], "4037": [115, 208], "1162": [115, 208, 234], "jocn": [115, 208, 234], "_a": [115, 208], "_00077": [115, 208], "1777164": [115, 208], "jocn_a_00077": [115, 208], "lancast": [115, 210], "rainei": [115, 210], "summerlin": [115, 210], "freita": [115, 210], "toga": [115, 210], "mazziotta": [115, 210], "autom": [115, 118, 197, 210, 230, 232], "preliminari": [115, 210], "forward": [115, 210], "1997": [115, 142, 154, 210], "281997": [115, 210], "3c238": [115, 210], "hbm6": [115, 210], "jack": [115, 162, 210], "woldorff": [115, 210], "lawrenc": [115, 210], "parson": [115, 210], "mario": [115, 210], "liotti": [115, 210], "catarina": [115, 210], "laci": [115, 210], "kochunov": [115, 210], "nickerson": [115, 210], "shawn": [115, 210], "mikiten": [115, 210], "talairach": [115, 136, 154, 173, 210], "28200007": [115, 210], "2910": [115, 210], "3a3": [115, 210], "3c120": [115, 210], "hbm30": [115, 210], "200007": [115, 210], "lindquist": [115, 139, 154, 301, 420], "stephan": [115, 301, 420], "geuter": [115, 301, 420], "tor": [115, 118, 230, 232, 301, 420], "wager": [115, 118, 230, 232, 301, 420], "caffo": [115, 301, 420], "modular": [115, 169, 301, 420], "reintroduc": [115, 301, 420], "biorxiv": [115, 301, 420], "407676": [115, 301, 420], "1101": [115, 301, 420], "traci": [115, 234], "jami": [115, 234], "parker": [115, 234], "csernanski": [115, 234], "morri": [115, 234], "randi": [115, 207, 211, 234], "buckner": [115, 207, 211, 234], "nondement": [115, 234], "dement": [115, 234], "1498": [115, 234], "1507": [115, 234], "1756878": [115, 234], "13th": [115, 259], "symposium": [115, 258, 259], "biomed": [115, 258, 259], "1282": [115, 259], "1285": [115, 259], "7493501": [115, 259], "behaviour": [115, 127, 139, 146, 151, 154, 167, 181, 227], "1328": [115, 167], "1340": [115, 167], "februari": [115, 119, 120, 125, 129, 130, 134, 144, 154, 167], "00563468": [115, 167], "tmi": [115, 167], "2113378": [115, 167], "yoichi": [115, 229], "hajim": [115, 229], "okito": [115, 229], "masa": [115, 229], "aki": [115, 139, 154, 229], "yusuk": [115, 229], "hiroki": [115, 229], "norihiro": [115, 229], "sadato": [115, 229], "yukiyasu": [115, 229], "s0896627308009586": [115, 229], "dougla": [115, 275, 276], "montgomeri": [115, 275, 276], "peck": [115, 275, 276], "geoffrei": [115, 275, 276], "vine": [115, 275, 276], "ed": [115, 275, 276], "son": [115, 275, 276], "0471754951": [115, 275, 276], "naselari": [115, 162], "kendrick": [115, 162], "kai": [115, 162], "shinji": [115, 162], "nishimoto": [115, 162], "gallant": [115, 162], "20691790": [115, 162], "pmid": [115, 162, 207, 211], "pubm": [115, 162, 197, 258, 324, 325], "jare": [115, 195], "nielsen": [115, 195], "brandon": [115, 195], "zielinski": [115, 195], "nichola": [115, 195], "lang": [115, 195, 197], "erin": [115, 195], "bigler": [115, 195], "janet": [115, 195], "lainhart": [115, 195], "multisit": [115, 195], "autism": [115, 195], "fnhum": [115, 195], "00599": [115, 195], "kate": [115, 208, 240], "stanlei": [115, 240], "colcomb": [115, 240], "tobe": [115, 240], "maarten": [115, 240, 324, 325], "menn": [115, 240, 324, 325], "melissa": [115, 240], "benedict": [115, 240], "moreno": [115, 225, 240], "laura": [115, 240], "panek": [115, 240], "shaquanna": [115, 240], "brown": [115, 240], "zavitz": [115, 240], "qingyang": [115, 240], "sharad": [115, 240], "sikka": [115, 240], "gutman": [115, 240], "saroja": [115, 240], "bangaru": [115, 240], "rochel": [115, 240], "tziona": [115, 240], "schlachter": [115, 240], "stephani": [115, 240], "kamiel": [115, 240], "ayesha": [115, 240], "anwar": [115, 240], "caitlin": [115, 240], "hinz": [115, 240], "kaplan": [115, 240], "anna": [115, 240], "rachlin": [115, 240], "samantha": [115, 240], "adelsberg": [115, 240], "cheung": [115, 240], "ranjit": [115, 240], "khanuja": [115, 240], "chaogan": [115, 240], "yan": [115, 240], "courtnei": [115, 240], "margaret": [115, 240], "wood": [115, 240], "cox": [115, 240], "adriana": [115, 240], "dimartino": [115, 240], "eva": [115, 240], "petkova": [115, 240], "philip": [115, 240], "reiss": [115, 240], "nanci": [115, 240], "duan": [115, 240], "dawn": [115, 240], "thompsen": [115, 240], "bharat": [115, 240], "biswal": [115, 240], "barbara": [115, 240], "coffei": [115, 240], "hoptman": [115, 240], "javitt": [115, 240], "nunzio": [115, 240], "pomara": [115, 240], "sidti": [115, 240], "harold": [115, 240], "koplewicz": [115, 240], "francisco": [115, 240], "castellano": [115, 240], "bennett": [115, 240], "leventh": [115, 240], "milham": [115, 240], "reilli": [115, 227], "valentina": [115, 227], "tomassini": [115, 227], "narend": [115, 227], "ramnani": [115, 227], "heidi": [115, 227], "johansen": [115, 227], "berg": [115, 227], "zone": [115, 227], "953": [115, 227], "965": [115, 227], "bhp157": [115, 227], "17303287": [115, 227], "wolfgang": [115, 206], "amanda": [115, 206], "nili": [115, 206], "tyszka": [115, 206], "vivo": [115, 206], "nuclei": [115, 206], "180063": [115, 206], "apr": [115, 206], "1038": [115, 206, 217, 235], "sdata": [115, 206, 217, 235], "bastien": [115, 225], "antoinett": [115, 225], "julien": [115, 225], "serr": [115, 225], "deni": [115, 225], "le": [115, 225], "bihan": [115, 225], "stanisla": [115, 225], "congdon": [115, 217, 235], "triplett": [115, 217, 235], "karlsgodt": [115, 217, 235], "sabb": [115, 217, 235], "freimer": [115, 217, 235], "cannon": [115, 217, 235], "bilder": [115, 217, 235], "phenom": [115, 217, 235], "160110": [115, 217, 235], "decemb": [115, 127, 128, 142, 154, 217, 235], "mitig": [115, 380], "s1053811916303871": [115, 380], "2142": [115, 324, 325], "2154": [115, 324, 325], "22019881": [115, 324, 325], "pubmedcentr": [115, 324, 325], "articlerend": [115, 324, 325], "fcgi": [115, 324, 325], "artid": [115, 324, 325], "pmc3254728": [115, 324, 325], "timothi": [115, 207, 214, 227, 324], "laumann": [115, 207, 214, 324], "fran": [115, 214], "miezin": [115, 214], "anish": [115, 324], "mitra": [115, 324], "s1053811913009117": [115, 324], "raimon": [115, 324, 325], "pruim": [115, 324, 325], "daan": [115, 324, 325], "rooij": [115, 324, 325], "alberto": [115, 324, 325], "llera": [115, 324, 325], "buitelaar": [115, 324, 325], "aroma": [115, 156, 324, 325], "hilari": [115, 216], "richardson": [115, 216], "grace": [115, 216], "lisandrelli": [115, 216], "alexa": [115, 216], "riobueno": [115, 216], "naylor": [115, 216], "sax": [115, 216], "social": [115, 216], "twelv": [115, 216], "livio": [115, 278], "wouter": [115, 278], "aldo": [115, 278], "novemb": [115, 136, 139, 142, 145, 154, 278], "schaefer": [115, 207], "ru": [115, 207], "kong": [115, 207], "gordon": [115, 207], "nian": [115, 207], "zuo": [115, 207], "avram": [115, 207], "yeo": [115, 207, 211, 376], "3095": [115, 207], "3114": [115, 207], "bhx179": [115, 207], "25696344": [115, 207], "_schaeferfullsupp": [115, 207], "seitzman": [115, 142, 154, 215], "caterina": [115, 215], "gratton": [115, 215], "marek": [115, 215], "raut": [115, 215], "116290": [115, 215], "s105381191930881x": [115, 215], "zarrar": 115, "shehzad": 115, "gee": 115, "kristin": 115, "gotim": 115, "lucina": 115, "q": [115, 171, 177, 188, 279, 283, 296, 299, 418], "uddin": 115, "sang": 115, "han": 115, "lee": 115, "ami": 115, "krain": 115, "xavier": 115, "unconstrain": 115, "2209": 115, "2229": 115, "bhn256": 115, "17300841": 115, "sm": [115, 227], "glasser": [115, 227], "salimi": [115, 227], "khorshidi": [115, 227], "duff": [115, 227], "dc": [115, 227], "mw": [115, 227], "woolrich": [115, 227], "jenkinson": [115, 227], "cf": [115, 181, 227], "rfmri": [115, 227], "ohbm": [115, 138, 154, 227], "annual": [115, 227], "meet": [115, 151, 154, 227, 438], "address": [115, 171, 173, 177, 298, 344], "localis": [115, 298, 344], "vidaurr": [115, 227], "ej": [115, 227], "behren": [115, 227], "kamil": [115, 227], "ugurbil": [115, 227], "karla": [115, 208, 227], "miller": [115, 208, 227], "demograph": [115, 227], "1565": [115, 227], "1567": [115, 227], "watkin": [115, 208], "toro": [115, 208], "textquoteright": [115, 208], "architectur": [115, 158, 208], "13040": [115, 208], "13045": [115, 208], "0905267106": [115, 208], "mccarthi": [115, 227], "emma": [115, 227], "clair": [115, 227], "xu": [115, 227], "horton": [115, 227], "eugen": [115, 227], "\u00e2": [115, 227], "mil": [115, 227], "u\u011furbil": [115, 227], "humanconnectom": [115, 227], "storag": [115, 181, 227, 231, 233], "media": [115, 227], "s500": [115, 227], "hcp500_megatrawl_april2015": [115, 227], "fenna": [115, 207, 211], "krienen": [115, 207, 211], "jorg": [115, 207, 211], "sepulcr": [115, 207, 211], "mert": [115, 207, 211], "sabuncu": [115, 207, 211], "danial": [115, 207, 211], "lashkari": [115, 207, 211], "marisa": [115, 207, 211], "hollinshead": [115, 207, 211], "roffman": [115, 207, 211], "jordan": [115, 207, 211], "smoller": [115, 207, 211], "lilla": [115, 207, 211], "z\u00f6llei": [115, 207, 211], "polimeni": [115, 207, 211], "hesheng": [115, 207, 211], "neurophysiologi": [115, 207, 211], "1125": [115, 207, 211], "1165": [115, 207, 211], "21653723": [115, 207, 211], "1152": [115, 207, 211], "jn": [115, 207, 211], "00338": [115, 207, 211], "tzourio": [115, 197], "mazoy": [115, 197], "landeau": [115, 197], "papathanassi": [115, 197], "crivello": [115, 197], "etard": [115, 197], "delcroix": [115, 197], "joliot": [115, 197], "macroscop": [115, 197], "2002": [115, 197], "s1053811901909784": [115, 197], "0978": [115, 197], "flore": [115, 187], "baronnet": [115, 187], "andrea": [115, 187, 258], "kleinschmidt": [115, 187, 258], "fillard": [115, 187], "stroke": [115, 187], "patient": [115, 174, 187], "tianzi": [115, 187], "jiang": [115, 187], "nassir": [115, 187], "navab": [115, 187], "josien": [115, 187], "pluim": [115, 187], "viergev": [115, 187], "assist": [115, 187], "intervent": [115, 187], "miccai": [115, 155, 187], "cn2h9c": [115, 187], "spontan": [115, 205], "1008": [115, 188], "5071": [115, 188], "bio": [115, 188], "sepideh": [115, 258], "sadaghiani": [115, 258], "20153834": [115, 258], "s1053811913003340": [115, 205], "merlin": [115, 258], "keller": [115, 258], "recoveri": [115, 258], "nano": [115, 258], "macro": [115, 258], "1177": [115, 258], "5490204": [115, 258], "gerard": [115, 344], "ridgwai": [115, 344], "webster": [115, 344], "s1053811914000913": [115, 344], "synthesi": [115, 118, 168, 230, 232], "adelstein": 115, "donald": 115, "klein": 115, "retest": 115, "2163": 115, "2177": [115, 142, 154], "s1053811909011525": 115, "di": 115, "martino": 115, "1432": 115, "1445": 115, "s1053811909010167": 115, "antonio": [115, 225], "frouin": [115, 225], "brainom": [115, 139, 154, 225], "s1053811915008745": [115, 225], "abstract": [116, 327], "beaten": 116, "mask_face_littl": [117, 179, 219], "mask_house_littl": [117, 179, 219], "comfort": [117, 169], "plenti": 117, "hesit": [117, 169], "rarr": [117, 181], "tube": 117, "clever": [117, 168], "resp": 117, "brighter": 117, "scratch": 117, "elementari": 117, "introduc": [118, 132, 142, 151, 154, 161, 162, 166, 169, 181, 187, 188, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "upload": 118, "modal": [118, 161, 169, 238, 321], "went": 118, "webpag": 118, "click": [118, 171, 181, 225, 437], "brainpedia": 118, "1952": [118, 142, 154], "brainpedia_subset": 118, "32015": 118, "32016": 118, "criteria": [118, 169, 174, 195, 230], "collection_term": [118, 230], "collection_metadata": [118, 230], "everi": [118, 155, 156, 160, 161, 162, 166, 168, 169, 171, 177, 181, 189, 203, 204, 230, 329, 332, 379, 384, 387, 392, 393, 394, 396, 411, 412, 418, 438], "image_term": [118, 230], "snippet": 118, "wait": [118, 168], "is_valid": [118, 142, 154], "treat": 118, "cbf": 118, "cbv": 118, "express": [118, 124, 127, 154, 174, 179, 230, 256, 257, 281, 283, 286, 311, 392], "ignorecas": 118, "special": [118, 125, 142, 154, 169], "isnul": [118, 230], "notnul": [118, 230], "notequ": [118, 230], "greaterorequ": [118, 230], "greaterthan": [118, 230], "lessorequ": [118, 230], "lessthan": [118, 230], "notin": [118, 230], "notcontain": [118, 230], "resultfilt": [118, 230], "OR": 118, "xor": 118, "NOT": 118, "conveni": [118, 180, 181, 216], "collection_filt": [118, 230], "callabl": [118, 149, 154, 191, 230, 251, 252, 253, 254, 255], "image_filt": [118, 230], "anyth": [118, 168, 169], "lambda": 118, "rewritten": 118, "suppos": [118, 168, 177, 179, 181, 275, 276], "weird": 118, "small_meta_imag": 118, "collections_meta": [118, 230, 231, 232, 233], "platform": [118, 135, 154, 177], "unless": [118, 168, 169, 235, 298, 344, 389, 420], "vectorize_word": [118, 230, 232], "kj": 118, "ss": 118, "vv": 118, "te": 118, "ra": [118, 315], "front": [118, 270, 273], "neuroinform": 118, "contributor": [119, 120, 122, 123, 169, 177], "git": [119, 120, 122, 123, 127, 129, 132, 154, 169, 177], "shortlog": [119, 120, 122, 123, 127, 129, 132, 154], "bugfix": [121, 122, 128, 129, 132, 150, 154, 169], "minor": [122, 135, 137, 154, 161], "rewamp": [122, 154], "brok": [122, 154], "maint": [123, 124, 125, 126, 127, 129, 132, 133, 134, 136, 139, 142, 144, 147, 148, 149, 150, 151, 152, 154, 169], "obei": [123, 154], "debian": [123, 154], "rule": [123, 154, 161, 162, 169, 251, 252, 253, 254], "januari": [124, 143, 149, 154], "2023": [124, 125, 126, 154], "bump": [124, 139, 142, 147, 148, 149, 154, 162, 164, 177], "v1": [124, 139, 147, 149, 154], "v3": [124, 154], "3237": [124, 154], "doc": [124, 125, 126, 127, 132, 134, 135, 139, 142, 144, 145, 148, 149, 150, 151, 152, 154, 169, 177], "theme": [124, 151, 154], "furo": [124, 151, 154], "3125": [124, 151, 154], "3196": [124, 151, 154], "3181": [124, 151, 154], "2715": [124, 151, 154], "tick": [124, 152, 154, 169, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 384, 386, 387, 389, 393, 394, 395, 397, 398, 400, 402, 404], "3105": [124, 154, 169], "3374": [124, 154], "valueerror": [124, 152, 154, 311, 315, 328, 329, 331, 332, 424], "3390": [124, 154], "3385": [124, 154], "compute_multi_epi_mask": [124, 154, 180, 330], "3412": [124, 154], "3403": [124, 154], "3430": [124, 154], "test_cluster_level_parameters_smok": [124, 154], "3436": [124, 154], "creation": [124, 142, 154, 258, 259, 283, 296, 418], "3453": [124, 154], "imput": [124, 154], "friendli": [124, 154, 438], "rework": [124, 129, 135, 142, 148, 154], "3380": [124, 154], "deploi": [124, 154], "3426": [124, 154], "3439": [124, 154], "contribut": [124, 136, 139, 140, 141, 142, 143, 144, 148, 149, 151, 154, 162, 171, 177, 438], "changelog": [124, 134, 177], "whatsnew": [124, 154], "3446": [124, 154], "3452": [124, 154], "privat": [124, 126, 151, 152, 154], "weighted_connectivity_graph": [124, 154], "nearest_neighbor_group": [124, 154], "renam": [124, 135, 139, 154, 177], "3347": [124, 154], "alias": [124, 154], "builtin": [124, 154], "3422": [124, 154], "compute_multi_gray_matter_mask": [124, 154], "3427": [124, 154], "3424": [124, 154], "3429": [124, 154], "_safe_cach": [124, 154], "deem": [124, 154], "outdat": [124, 133, 154], "anymor": [124, 151, 154], "3375": [124, 154], "3440": [124, 154], "3433": [124, 154], "docstr": [124, 125, 140, 145, 148, 151, 154, 169, 273, 275, 276], "migrat": [124, 154], "nistats_migr": [124, 154], "rst": [124, 154, 169, 177], "3449": [124, 154], "april": [125, 131, 134, 140, 141, 150, 154], "3498": [125, 154], "3444": [125, 154], "predefin": [125, 154], "3259": [125, 154], "3605": [125, 154], "refactor": [125, 126, 133, 147, 149, 151, 152, 154, 177], "create_fake_bids_dataset": [125, 154], "3525": [125, 154], "3362": [125, 154], "3531": [125, 154], "3600": [125, 154], "standardize_sign": [125, 154], "3474": [125, 154], "3563": [125, 154], "confus": [125, 154, 162, 319], "3483": [125, 154], "3173": [125, 154], "sub_label": [125, 154, 286, 321], "3351": [125, 154], "ridgeclassifiercv": [125, 154, 251, 252, 253, 254], "3626": [125, 154], "3631": [125, 154], "3414": [125, 154], "fetch_atlas_craddock_2012": [125, 126, 154, 156], "3353": [125, 154], "3548": [125, 126, 154], "pep8": [125, 126, 152, 154, 169, 177], "3549": [125, 154], "3550": [125, 154], "3551": [125, 154], "3552": [125, 154], "3553": [125, 154], "3554": [125, 154], "3555": [125, 154], "helper": [125, 127, 134, 135, 154, 169, 183, 230], "img_to_signals_label": [125, 139, 142, 152, 154, 412, 414], "signals_to_img_label": [125, 154, 411, 415], "img_to_signals_map": [125, 154, 411, 415], "signals_to_img_map": [125, 154, 412, 414], "3523": [125, 154], "move": [125, 126, 127, 134, 147, 154], "setuptool": [125, 154], "pyproject": [125, 154, 169, 177, 438], "toml": [125, 154, 169, 177, 438], "hatchl": [125, 154, 177], "met": [125, 154], "3635": [125, 154], "3557": [125, 154], "bibtex": [125, 151, 154], "3558": [125, 154], "restor": [125, 154], "spatialimag": [125, 154, 179, 304], "3462": [125, 154], "3465": [125, 154], "3445": [125, 154], "3478": [125, 154], "3477": [125, 154], "3485": [125, 154], "3491": [125, 154], "3484": [125, 154], "3172": [126, 154], "logisticregressioncv": [126, 154, 251, 252, 253, 254], "3736": [126, 154], "lassocv": [126, 154, 251, 252, 253, 254], "3781": [126, 154], "3873": [126, 154], "3203": [126, 154], "facilit": [126, 154, 176, 177, 181], "downstream": [126, 154], "3856": [126, 154], "transform_img": [126, 154, 328, 329, 330], "3971": [126, 154], "surf_plot": [126, 134, 154], "_plot_surf_matplotlib": [126, 154], "3860": [126, 154], "prevent": [126, 154, 316, 317, 336, 337, 338, 340, 341], "3942": [126, 154], "3644": [126, 154], "gifti": [126, 154, 239, 240, 260, 261, 262], "3819": [126, 154], "3879": [126, 154], "entiti": [126, 154], "3742": [126, 154], "throw": [126, 154, 334], "3811": [126, 154], "fitter": [126, 154], "had": [126, 138, 154], "grid_param": [126, 154], "3733": [126, 154], "3794": [126, 154], "3797": [126, 154], "2804": [126, 154], "relax": [126, 154], "3816": [126, 154], "3723": [126, 154], "3897": [126, 154], "plotli": [126, 149, 152, 154, 358, 395, 397, 398, 437, 438], "3945": [126, 154], "clearli": [126, 149, 154, 169], "3973": [126, 154], "3987": [126, 154], "3857": [126, 154], "3597": [126, 154], "3774": [126, 154], "3994": [126, 154], "check_ev": [126, 154], "3943": [126, 154], "old": [126, 142, 148, 149, 154], "cobr": [126, 130, 134, 154], "3743": [126, 154], "isort": [126, 154, 169], "complianc": [126, 154, 169], "codebas": [126, 154, 169], "3538": [126, 154], "3566": [126, 154], "3556": [126, 154], "3601": [126, 154], "3609": [126, 154], "3646": [126, 154], "3650": [126, 154], "3647": [126, 154], "3640": [126, 154], "3615": [126, 154], "3614": [126, 154], "3648": [126, 154], "3651": [126, 154], "3836": [126, 154], "3833": [126, 154], "3827": [126, 154], "3810": [126, 154], "3803": [126, 154], "3802": [126, 154], "3795": [126, 154], "3790": [126, 154], "3783": [126, 154], "3777": [126, 154], "meanwhil": [126, 152, 154], "3722": [126, 154], "3732": [126, 154], "3838": [126, 154], "3753": [126, 154], "one_mesh_info": [126, 154], "full_brain_info": [126, 154], "_one_mesh_info": [126, 154], "_full_brain_info": [126, 154], "3847": [126, 154], "manag": [126, 152, 154, 169, 177, 438], "3854": [126, 154], "BY": [126, 154], "_compute_facecolors_matplotlib": [126, 154], "html_surfac": [126, 154], "_get_vertexcolor": [126, 154], "gh": [126, 154, 169], "3855": [126, 154], "doctest": [126, 154], "3681": [126, 154], "_mix_colormap": [126, 154], "3919": [126, 154], "decor": [126, 148, 154, 169], "3921": [126, 154], "3927": [126, 154], "shorten": [126, 151, 154], "3934": [126, 154], "sym_to_vec": [127, 132, 135, 147, 154], "modernis": [127, 154], "style": [127, 149, 154, 250], "784": [127, 154], "copy_img": [127, 154], "indexerror": [127, 149, 154], "fast_abs_percentil": [127, 154], "875": [127, 154], "group_sparse_covari": [127, 154, 168, 189], "n_cut": [127, 154, 375], "find_cut_slic": [127, 134, 154], "822": [127, 154], "targett": [128, 154], "renew": [129, 154], "flake8": [129, 151, 154, 169], "pull": [129, 151, 154, 174, 176], "symmetric_split": [129, 154, 203, 204], "mac": [129, 154], "numpy_convers": [129, 154], "csv_to_arrai": [129, 154], "refresh": [129, 154], "sparsifi": [129, 154], "circleci": [129, 134, 154], "brainhack": [130, 135, 154], "fetch_cobr": [130, 134, 145, 149, 154], "basc": [130, 154, 199], "expand": [131, 154, 174, 179, 311, 405, 407], "homedir": [131, 154], "uniformli": [131, 154, 162, 389, 395, 397, 398, 402, 404], "aal": [131, 154, 197], "fetch_atlas_a": [131, 150, 154], "august": [132, 139, 151, 154], "wrong": [132, 150, 154, 171], "ivan": [132, 139, 154], "gonzalez": [132, 139, 154], "resolv": [133, 143, 154], "1238": [133, 154], "get_affin": [133, 154, 179, 303], "checkout": [134, 154, 169, 177], "latest": [134, 154, 169, 177, 325], "_get_mask_volum": [134, 154], "_adjust_screening_percentil": [134, 154], "uncompress": [134, 138, 154], "tar": [134, 154, 177], "set_axis_bgcolor": [134, 154], "fast_svd": [134, 154], "switch": [134, 141, 152, 154, 169, 177, 386], "lapack": [134, 154, 168], "svd": [134, 154, 259, 307, 406, 421], "heurist": [134, 154, 167, 168, 189, 338, 379, 392, 393, 394, 401, 437], "pip": [134, 139, 142, 152, 154, 169, 177, 438], "_safe_get_data": [134, 154], "safe": [134, 154], "ensure_finit": [134, 154, 301, 335, 338, 420], "cov_to_corr": [134, 154], "prec_to_parti": [134, 154], "qualit": [134, 154], "fetch_surf_fsaverage5": [134, 139, 154], "schizophrenia": [134, 154, 174], "coveral": [134, 154], "codecov": [134, 154], "sym_matrix_to_vec": [135, 154, 194], "largest_connected_compon": [135, 154], "workaround": [135, 154], "vec_to_sym_matrix": [135, 154], "plot_connectivity_measur": [135, 154], "tighter": [135, 154, 168], "largest_connected_component_img": [135, 154], "largest": [135, 154, 168, 310, 336, 337, 338, 339, 340, 341, 342, 378], "joe": [136, 154], "necu": [136, 154], "fetch_atlas_talairach": [136, 154], "resampling_interpol": [136, 154, 386, 387, 393, 394, 401], "incompat": [136, 154, 283], "cautious": [136, 154], "anat_img": [136, 154, 379], "jeff": [136, 154], "chiang": [136, 154], "analu": [136, 139, 154], "madhyastha": [136, 139, 154], "meghana": [136, 139, 154], "sfvnmac": [136, 139, 154], "bedetti": [136, 139, 154], "griffith": [136, 154], "lannuzel": [136, 139, 154], "1536": [137, 154], "1370": [137, 154], "usabl": [137, 154, 166, 168, 229, 255], "node_color": [137, 147, 154, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 400], "1595": [137, 154], "nifti2imag": [137, 154], "confer": [138, 154], "lock": [138, 154], "whitespac": [138, 154], "attributeerror": [138, 154], "httperror": [138, 154], "view_mark": [139, 140, 142, 147, 154, 400, 401, 437], "orthogon": [139, 154, 174, 283, 285, 290, 296, 301, 346, 355, 356, 357, 360, 374, 379, 381, 384, 386, 387, 390, 392, 393, 394, 418, 420], "view_stat_map": [139, 154], "python2": [139, 140, 141, 142, 154], "layout": [139, 154, 255, 346], "navig": [139, 154], "anaconda": [139, 154, 438], "feel": [139, 154, 169], "shout": [139, 154], "pbellec": [139, 154], "great": [139, 154], "awesom": [139, 154], "sportingli": [139, 154], "accommod": [139, 154], "thank": [139, 154, 169, 296, 297, 298], "miykael": [139, 154], "brainsprit": [139, 140, 154, 437], "himanshupathak21061998": [139, 140, 154], "octob": [139, 142, 154], "uniti": [139, 154], "channel": [139, 154], "life": [139, 154], "remi": [139, 154], "akshai": [139, 154], "erramuzp": [139, 154], "foucault": [139, 154], "jehan": [139, 154], "nikolaidi": [139, 154], "dillon": [139, 154], "plunkett": [139, 154], "operto": [139, 154], "dtyulman": [139, 154], "0a0": 139, "1705": [139, 154], "grid_search": [139, 154, 251, 252, 253, 254], "menuet": [139, 154], "romuald": [139, 154], "consum": [140, 154, 164, 168, 177, 179, 334], "noteworthi": [140, 154, 162], "fetch_atlas_schaefer_2018": [140, 142, 154], "fetch_coords_seitzman_2018": [140, 154], "node_coord": [140, 142, 154, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 390, 400], "edge_cmap": [140, 142, 154, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 400], "load_niimg": [140, 154], "silent": [140, 149, 154], "book": [140, 154], "signatur": [140, 154, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "mgz": [140, 141, 154, 395, 396, 397, 398, 404, 422], "mne": [140, 141, 154], "lowest": [141, 154], "broke": [141, 154], "v2": [142, 147, 154], "viewabl": [142, 154], "vscode": [142, 154], "biap8": [142, 154], "input_output": [142, 154], "2172": [142, 154], "giant": [142, 154], "1336": [142, 154], "plot_connectome_strength": [142, 145, 149, 154], "2028": [142, 154], "pad": [142, 152, 154, 180, 181, 305, 316, 317, 338, 341, 345, 347, 348, 419], "2025": [142, 154], "1953": [142, 154], "ticklabel": [142, 154], "psc": [142, 146, 154, 328, 329, 330, 331, 332, 333, 334, 420], "standard_devi": [142, 154, 328, 331, 411], "2221": [142, 154], "2057": [142, 154], "2157": [142, 154], "truncat": [142, 154], "2195": [142, 154], "det": [142, 154, 206], "2235": [142, 154], "2255": [142, 154], "2240": [142, 154], "ndarrai": [142, 154, 187, 188, 189, 190, 191, 192, 193, 194, 207, 209, 213, 215, 216, 227, 228, 251, 252, 253, 254, 256, 257, 258, 259, 265, 266, 270, 273, 274, 275, 276, 279, 283, 296, 298, 301, 303, 306, 307, 313, 314, 316, 318, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 341, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 382, 388, 391, 395, 396, 397, 398, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424], "2107": [142, 154], "attempt": [142, 154, 286], "2212": [142, 154], "nose": [142, 154], "2231": [142, 154], "2169": [142, 154], "2090": [142, 154], "05_advanc": [142, 154], "2063": [142, 154], "merg": [142, 154, 158, 169, 174, 177, 180, 407], "plot_adhd_spher": [142, 154], "duplic": [142, 154], "review": [142, 154, 166, 177], "plot_canica_analysi": [142, 154], "plot_haxby_decod": [142, 154], "2166": [142, 154], "unsuit": [142, 154], "redund": [142, 154, 169], "crash": [142, 154], "1888": [142, 154], "2083": [142, 154], "2052": [142, 154], "2118": [142, 154], "900": [142, 154, 207], "2138": [142, 154], "faulti": [142, 154], "2272": [143, 154], "developmental_fmri": [143, 154], "2290": [143, 154], "launch": [144, 154, 161], "2300": [144, 154], "2429": [144, 154], "2302": [144, 154], "typo": [144, 154], "2312": [144, 154], "fetch_nyu_rest": [144, 147, 154], "2308": [144, 154], "2299": [145, 154], "2304": [145, 154], "2307": [145, 154], "2509": [145, 154], "2327": [145, 154], "art": [145, 154, 162, 251, 252, 253, 254], "nodal": [145, 154, 390, 437], "decim": [145, 154, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 387], "interchang": [145, 154], "compute_brain_mask": [145, 148, 154, 180, 251, 252, 253, 254, 258, 259, 333, 340, 406], "compute_gray_matter_mask": [145, 149, 154], "regard": [145, 154, 167, 221, 245, 325], "erron": [145, 154, 207], "readm": [145, 154], "2021": [146, 147, 148, 154, 196, 197, 200, 205, 206, 207, 210, 211, 234, 237, 238, 240], "serv": [146, 154, 169, 177, 202, 216], "1024": [146, 154, 202], "2619": [146, 154], "2622": [146, 154], "2684": [146, 154], "2702": [146, 154], "one_minus_pvalu": [146, 154, 271], "stabil": [146, 154, 160, 253, 254, 271], "cumul": [146, 154, 271], "2567": [146, 154], "2674": [146, 154], "2553": [146, 154], "arm": [146, 154], "2606": [146, 154], "whatev": [146, 154], "2669": [146, 154], "notat": [146, 149, 154, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 384, 386, 387, 389, 393, 394, 395, 397, 398], "2697": [146, 154], "2712": [146, 154], "handi": [146, 154, 170], "2696": [146, 154], "2714": [146, 154], "2719": [146, 154], "2707": [147, 154], "2858": [147, 154], "inher": [147, 154], "basemask": [147, 154], "fsaverage3": [147, 154, 239, 402], "fsaverage4": [147, 154, 239, 402], "fsaverage6": [147, 154, 239, 402], "2815": [147, 154], "curv": [147, 154, 161, 162, 164, 168, 174, 395, 398, 404, 422], "2532": [147, 154], "struct": [147, 154], "footcit": [147, 149, 151, 154], "footbibliographi": [147, 149, 151, 154], "2806": [147, 154], "2730": [147, 154], "2732": [147, 154], "_get_voxelwise_model_attribut": [147, 154], "2792": [147, 154], "ascend": [147, 154, 311], "1155": [147, 154], "2831": [147, 154], "zoom": [147, 154], "surround": [147, 154, 424], "2798": [147, 154], "inconsist": [147, 154, 296, 298], "2767": [147, 154], "2826": [147, 154], "marker_label": [147, 154, 403], "2745": [147, 154], "2790": [147, 154], "2805": [147, 154], "2810": [147, 154], "flow": [147, 154, 171, 174], "2821": [147, 149, 154], "butterwoth": [147, 154], "stratifi": [147, 154, 161, 251, 253, 255], "2869": [147, 154], "2867": [147, 154], "2868": [147, 154], "juelich": [148, 154, 204], "2723": [148, 154], "load_mni152_gm_templ": [148, 154, 220, 243, 245, 246, 247], "load_mni152_wm_templ": [148, 154, 220, 244, 245, 246], "load_mni152_gm_mask": [148, 154, 220], "load_mni152_wm_mask": [148, 154, 220], "2738": [148, 154], "2755": [148, 154], "binarize_img": [148, 152, 154], "2900": [148, 154], "skullstrip": [148, 154, 174, 245], "2904": [148, 154], "compute_multi_grey_matter_mask": [148, 154], "2876": [148, 154], "preset": [148, 149, 154, 325, 437], "nevertheless": [148, 154], "8339": [148, 154], "fill_doc": [148, 154], "2875": [148, 154], "affect": [148, 154, 171, 174], "2928": [148, 154], "jqueri": [148, 154], "vulner": [148, 154], "2944": [148, 154], "2022": [149, 150, 151, 154], "3061": [149, 154], "2946": [149, 154], "3016": [149, 154], "kmean": [149, 151, 154, 158, 175, 180, 283, 292, 405, 406], "2282": [149, 154], "3065": [149, 154], "2880": [149, 154], "mainten": [149, 154], "3010": [149, 154], "encourag": [149, 154, 169], "3026": [149, 154], "submodul": [149, 151, 154, 169], "3126": [149, 154], "get_bids_fil": [149, 154], "parse_bids_filenam": [149, 154], "subpart": [149, 154], "3036": [149, 154], "3009": [149, 154], "3013": [149, 154], "threw": [149, 154], "typeerror": [149, 154, 311], "3035": [149, 154], "3078": [149, 154], "3111": [149, 154], "hommel": [149, 154], "3109": [149, 154], "benjamini": [149, 154, 171, 282], "hocheberg": [149, 154], "3137": [149, 154], "3135": [149, 154], "retain": [149, 154, 161, 162, 171, 187, 188, 189, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 324, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408, 411, 412], "2965": [149, 154], "demean": [149, 154, 324, 325], "3003": [149, 154], "triag": [149, 154], "polici": [149, 154], "spm_hrf": [149, 154, 283, 285, 290], "2942": [149, 154], "3008": [149, 154], "test_img_plot": [149, 154], "reorgan": [149, 154, 169], "3015": [149, 154], "3033": [149, 154], "3077": [149, 154], "2859": [149, 154], "3106": [149, 154], "3081": [149, 154], "3082": [149, 154], "3090": [149, 154], "3093": [149, 154], "3133": [149, 154], "cond_id": [149, 154], "ex": [149, 154, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 384, 386, 387, 389, 393, 394, 395, 397, 398], "3025": [149, 154], "3039": [149, 154], "slicer": [149, 154, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 437], "projector": [149, 154, 373], "3073": [149, 154], "byte": [149, 154, 169, 310, 316], "therefor": [149, 154, 160, 166, 168, 197, 199], "2655": [149, 154], "recarrai": [149, 154, 195, 201, 202, 213, 214, 215, 223, 224, 225, 234], "2829": [149, 154], "h0_fmax": [150, 154, 344], "3184": [150, 154], "fetch_abide_pcp": [150, 154], "func_preproc": [150, 154, 195], "3174": [150, 154], "3179": [150, 154], "_apply_cluster_size_threshold": [150, 154], "cluster_s": [150, 154], "3201": [150, 154], "beyond": [150, 154], "newest": [150, 154, 230], "3188": [150, 154], "3098": [150, 154], "3127": [150, 154], "3165": [150, 154], "determinist": [150, 154, 174, 197, 199, 201, 203, 204, 206, 207, 209, 210, 211, 405], "glossari": [150, 154], "3152": [150, 154], "3207": [150, 154], "3178": [150, 154], "cfg": [150, 154], "2953": [150, 154], "_neurovault_base_url": [151, 154], "_neurosynth_fetch_words_url": [151, 154], "3281": [151, 154], "3222": [151, 154], "3233": [151, 154], "3241": [151, 154], "3255": [151, 154], "3220": [151, 154], "c_ra": [151, 154], "3235": [151, 154], "_check_second_level_input": [151, 154], "flm_object": [151, 154], "3283": [151, 154], "3284": [151, 154], "_gamma_difference_hrf": [151, 154], "hemodynamic_model": [151, 154], "slight": [151, 154], "distort": [151, 154, 324], "3297": [151, 154], "0rc1": [151, 154], "wn": [151, 154], "unfilt": [151, 154], "3293": [151, 154], "3306": [151, 154], "3312": [151, 154], "typograph": [151, 154], "3337": [151, 154], "censor": [151, 152, 154, 420], "3193": [151, 154], "3185": [151, 154], "conform": [151, 154, 171], "3262": [151, 154], "3030": [151, 154], "fall": [151, 154, 169, 389, 424], "3292": [151, 154], "n_elements_": [151, 154, 328, 329, 330, 331, 332, 333, 334], "3311": [151, 154], "filesystem": [151, 154], "3300": [151, 154], "branch": [151, 154, 169, 177], "diff": [151, 154], "3317": [151, 154], "3322": [151, 154], "carpet_plot": [151, 154], "deleg": [151, 154], "cmap_label": [151, 154, 380], "3209": [151, 154], "fsaverage5_spher": [151, 154], "3229": [151, 154], "regressionresult": [151, 154, 270, 274, 279, 283, 292], "simpleregressionresult": [151, 154, 283], "olsmodel": [151, 154, 273, 275, 276], "likelihoodmodelresult": [151, 154, 275, 276], "df_resid": [151, 154], "wdesign": [151, 154], "wresid": [151, 154], "norm_resid": [151, 154], "wy": [151, 154], "fetch_openneuro_dataset_index": [151, 154], "favor": [151, 154], "3216": [151, 154], "afni": [151, 154], "nipi": [151, 154, 169, 175], "1046": [151, 154], "pr": [151, 154, 177], "1082": [151, 154], "overflow": [151, 154], "3227": [151, 154], "pars": [151, 154, 322], "3274": [151, 154], "charact": [151, 154, 292], "3141": [151, 154], "3302": [151, 154], "int8": [151, 154, 314], "3286": [151, 154], "3285": [152, 154], "4001": [152, 154], "clean__sample_mask": [152, 154], "4051": [152, 154], "backslash": [152, 154], "4042": [152, 154], "4070": [152, 154], "3993": [152, 154], "fewer": [152, 154, 168, 380], "4067": [152, 154], "5d": [152, 154, 181], "3935": [152, 154], "4121": [152, 154], "4099": [152, 154], "2833": [152, 154], "3102": [152, 154], "4122": [152, 154], "lss": [152, 154], "4141": [152, 154], "aren": [152, 154, 179, 186], "4136": [152, 154], "masked_atla": [152, 154, 411], "return_masked_atla": [152, 154, 411], "3761": [152, 154], "cubicsplin": [152, 154], "4028": [152, 154], "tox": [152, 154], "4029": [152, 154], "write_tmp_img": [152, 154], "write_imgs_to_path": [152, 154], "4094": [152, 154], "4131": [152, 154], "underscor": [152, 154, 169], "4086": [152, 154], "proximal_oper": [152, 154], "4153": [152, 154], "focuss": 155, "naturalist": [155, 156, 158, 159], "indirect": [155, 156], "friedman": 155, "time_series_1": 155, "time_series_2": 155, "challeng": 155, "toll": 155, "stronger": 155, "nip": 155, "geometr": [155, 187], "group_connect": 155, "heterogen": 155, "easiest": [156, 161, 162], "frmi_fil": 156, "confounds_datafram": 156, "imperfect": 156, "boundari": [156, 166, 180, 392, 393, 395, 397], "registr": [156, 171, 317, 437], "csv_file": 156, "consider": [156, 162, 298, 344], "readili": [156, 161, 164, 176, 179, 180, 408], "zaleski": 156, "rise": 158, "debat": 158, "cite": [158, 205, 216, 225], "quicker": [158, 169], "loss": [158, 163, 256, 325], "downsiz": 158, "hierarch": [158, 174, 175, 405], "neighborhood": 158, "tree": [158, 207], "admittedli": 158, "isotrop": 159, "publicli": 159, "osf": [159, 202, 206, 216, 225], "5hju4": [159, 216], "walker": [159, 408, 410], "likewis": 159, "sphinx_gallery_dummy_imag": [159, 180], "newer": [160, 230, 232], "arriv": 160, "consensu": [160, 169], "explor": [160, 164, 168, 170, 175, 176, 189, 217, 230, 236, 251, 252, 253, 254], "resembl": 160, "coactiv": 160, "neuro": [160, 174, 251, 319], "offer": [160, 170, 172, 437], "articul": 161, "diagnost": [161, 165], "statu": [161, 174, 234], "vbm": [161, 174, 176], "fa": 161, "unusu": 161, "rich": 161, "strongli": [161, 169, 174], "genfromtxt": 161, "seemingli": 161, "misleadingli": 161, "chose": 161, "Be": [161, 162, 169, 189, 270, 419], "got": [161, 169], "thumb": [161, 169], "advic": 161, "worst": 161, "caveat": 161, "entir": [161, 166, 181, 331, 411], "imbalanc": 161, "domin": [161, 240], "roc": [161, 174], "guess": [161, 168, 336, 401], "notion": [161, 166, 322, 390], "tackl": [162, 177], "extern": [162, 165, 234], "trait": 162, "userguid": 162, "categor": [162, 177], "harder": 162, "vote": 162, "costli": [162, 166, 298, 344], "former": [162, 168, 230, 386, 389, 394, 398], "penal": [162, 168, 189, 256, 257], "variant": [162, 185], "counterpart": 162, "ridge_regressor": [162, 252, 254], "lasso_regressor": [162, 252, 254], "dummy_regressor": [162, 252, 254], "lunch": 162, "insensit": 162, "cheap": 162, "ill": 162, "importantli": [162, 164, 169], "ugli": 162, "nuisanc": [162, 174, 196, 270, 273, 274, 275, 325, 420], "hyper": [162, 163], "computationnali": 162, "bia": [162, 251, 252, 253, 254, 256, 257], "cancel": 162, "hood": [162, 167], "promot": [162, 163, 177], "memor": [163, 171], "versatil": [164, 175, 438], "mimic": [164, 203, 204], "unfortun": [164, 168], "prognosi": [165, 176], "reduct": [165, 259, 406, 440], "bag": [165, 256, 257, 440], "briefli": 166, "critic": [166, 168], "lorocv": 166, "properli": [166, 181, 381, 386], "isovoxel": 166, "volunt": 166, "theoret": 166, "hypothesi": [166, 171, 255, 271, 298, 344], "swap": [166, 180, 234, 319], "descriptor": [166, 284, 344], "herebi": 166, "rank": [166, 273, 274, 275, 276, 320, 344], "phenomenon": 166, "statistician": 166, "crucial": 166, "symmetri": [166, 168], "adopt": [166, 174], "spacenetclassifi": [167, 251, 252, 257], "tvl1": 167, "blobbi": 167, "mainli": 168, "devis": 168, "descent": [168, 259], "innermost": 168, "hoc": 168, "histori": 168, "prove": [168, 181], "amplifi": 168, "mandatori": [168, 301], "_update_submatrix": 168, "perfect": 168, "newton": 168, "raphson": 168, "debug": [168, 169, 176, 189, 191], "kern": 168, "bottleneck": 168, "overhead": 168, "neglig": [168, 305], "evenli": [168, 301, 420], "highli": [168, 169], "serial": 168, "boil": 168, "written": [168, 416], "inlin": [168, 416], "naiv": 168, "clock": 168, "nr": 168, "loos": 168, "fortran": [168, 316, 317, 344], "couldn": 168, "weren": 168, "ubuntu": 168, "synthes": 168, "wasn": 168, "hopefulli": 168, "topologi": 168, "govern": 168, "hardest": 168, "unrealist": 168, "perfectli": 168, "spectrum": 168, "decorrel": 168, "whatsoev": 168, "mostli": [168, 320], "weakli": 168, "optimum": 168, "wast": 168, "convex": 168, "group_sparse_covariance_cost": 168, "feasibl": 168, "semi": 168, "primal": 168, "satisfi": [168, 177], "quantiti": [168, 271], "lost": 168, "rapidli": 168, "prohibit": 168, "slowli": 168, "tricki": 168, "paragraph": 168, "dwindl": 168, "speedup": 168, "complic": [168, 179, 273, 275, 276], "program": [168, 437], "earlystopprob": 168, "unpen": 168, "fastest": 168, "fulli": [168, 171, 438], "compute_alpha_max": 168, "straightforward": [168, 271], "sequenti": [168, 179, 392], "trajectori": 168, "smallest": 168, "fact": [168, 171, 174], "energi": 168, "brute": 168, "slowest": 168, "hardwar": 168, "commod": 168, "moder": 168, "sought": [168, 174], "push": [168, 169, 177], "stress": 168, "rare": 168, "spent": 168, "early_stop": [168, 189], "team": [169, 176, 177, 205, 438], "neurostar": [169, 176, 177], "forum": 169, "weekli": [169, 176], "hour": [169, 176, 177, 298, 344], "wednesdai": [169, 438], "4pm": [169, 438], "5pm": [169, 438], "utc": [169, 438], "troubleshoot": 169, "appreci": [169, 179], "topic": [169, 177], "burn": 169, "board": 169, "welcom": [169, 177, 438], "think": [169, 171, 181], "runnabl": 169, "ongo": 169, "comment": [169, 181], "opinion": 169, "approv": 169, "burden": 169, "member": [169, 177, 438], "expert": [169, 176], "eas": 169, "beginn": [169, 176], "parsimoni": 169, "concern": [169, 174], "sustain": 169, "weigh": 169, "exhaust": [169, 176], "discourag": 169, "intent": 169, "comprehens": [169, 176, 225, 249], "dedic": [169, 234], "host": 169, "templateflow": [169, 220, 221], "neuromap": 169, "neuroparc": 169, "modif": [169, 171, 174], "ultim": [169, 274], "emerg": 169, "effort": [169, 177], "everyon": 169, "send": [169, 405, 407], "infrastructur": [169, 177], "gigabyt": 169, "deploy": 169, "xxxx": 169, "unrel": [169, 181], "numpydoc": 169, "versionad": [169, 177, 286], "versionchang": [169, 177, 314], "dev": [169, 177, 219, 331], "coverag": [169, 438], "mock": 169, "atom": [169, 174], "convei": [169, 344], "smoothen": 169, "wip": 169, "draft": 169, "mrg": 169, "enh": 169, "adher": 169, "badg": [169, 177], "cff": 169, "bdg": 169, "secondari": 169, "success": [169, 171, 181], "info": [169, 230, 232, 389, 395, 396, 397, 398], "danger": [169, 171], "dimitripapadopoulo": 169, "affili": 169, "orcid": 169, "0000": 169, "0002": 169, "1242": 169, "8990": 169, "a_nice_funct": 169, "parent": 169, "init": [169, 405], "camelcas": 169, "statement": 169, "obj": [169, 200, 208], "enclos": 169, "__all__": 169, "_valid": 169, "check_mask_img": 169, "validationerror": 169, "symbol": [169, 170, 311], "_check_mask_shap": 169, "_check_mask_valu": 169, "_validate_shap": 169, "doubl": [169, 170, 203, 204], "alon": [169, 171, 437], "linter": 169, "autoformatt": 169, "hook": 169, "pytest": [169, 177, 438], "test_imag": 169, "didn": 169, "test_modul": 169, "recogniz": 169, "conftest": 169, "fixur": 169, "default_rng": 169, "test_someth": 169, "my_numb": 169, "he": 169, "plain": 169, "repo": [169, 177, 438], "fork": 169, "clone": 169, "your_usernam": 169, "virtual": [169, 438], "wor": 169, "whichev": 169, "venv": [169, 438], "conda": [169, 438], "__version__": 169, "command": [169, 176, 177, 438], "upstream": [169, 177], "remot": [169, 230, 232], "your_branch": 169, "lint": [169, 177], "path_to_edited_fil": 169, "test_surf_plot": 169, "your_fork": 169, "restructuredtext": 169, "strict": 169, "window": [169, 283, 296, 418, 438], "_build": 169, "doctre": 169, "noplot": 169, "ci": [169, 177, 273, 275, 276], "filename_pattern": 169, "sphinx_gallery_conf": 169, "thorough": 169, "servic": 169, "temporarili": 169, "unavail": [169, 219], "frustrat": 169, "successfulli": 169, "get_dataset_dir": 169, "fetch_fil": 169, "server": [169, 230, 232], "fake": 169, "request_mock": 169, "_test": 169, "sender": 169, "essenc": 170, "timecours": [170, 324], "convolv": [170, 285], "plug": [170, 181, 270, 274], "ascertain": 170, "spm_multimodal_fmri": [170, 238], "referenc": 170, "fistlevelmodel": 170, "flag": [170, 324, 325], "observed_timeseri": 170, "oxyhaemoglobin": [171, 174], "carri": [171, 174], "deoxyhaemoglobin": [171, 174], "deliv": [171, 174], "diamagnet": [171, 174], "paramagnet": [171, 174], "mr": 171, "irrespect": [171, 392], "microarchitectur": 171, "regist": [171, 199], "montreal": [171, 174, 197], "nipyp": 171, "action": [171, 225], "sensori": 171, "stimui": 171, "hypothes": [171, 174], "oxi": 171, "deoxi": 171, "haemoglobin": 171, "sluggish": 171, "plai": [171, 181], "remark": 171, "respond": 171, "enter": 171, "conceptu": 171, "physic": [171, 345, 347, 348], "decid": 171, "dof": [171, 271, 280], "_scan": 171, "_column": 171, "quantil": 171, "reject": [171, 174], "frequent": 171, "misconcept": 171, "frequentist": 171, "wikipedia": 171, "wiki": 171, "frequentist_infer": 171, "cumbersom": 171, "absenc": [171, 177, 411], "_voxel": 171, "frac": [171, 257, 270, 274], "truli": 171, "surpass": 171, "proportion": 171, "compromis": [171, 325], "hochberg": [171, 282], "supra": 171, "rational": 171, "primer": [172, 440], "broader": 173, "morphologi": 174, "treatment": [174, 176], "contrari": [174, 322, 328, 329], "fundament": 174, "eeg": 174, "electroencephalographi": 174, "monitor": 174, "electr": 174, "echo": [174, 286], "planar": 174, "incorrect": 174, "unwarp": 174, "submit": [174, 177], "diamet": 174, "tradition": 174, "subcompon": 174, "meg": 174, "magnetoencephalographi": 174, "mni305": 174, "mutli": 174, "pe": 174, "signifi": [174, 251, 252, 253, 254], "soft": 174, "tpr": 174, "unlabel": 174, "emot": 174, "reaction": 174, "iq": [174, 251, 252, 253, 254], "diagnosi": [174, 176], "healthi": [174, 199], "outlier": [174, 234, 324, 325, 327, 330, 333], "magnitud": [174, 383], "benedikt": 174, "ehing": 174, "coher": [174, 176], "neurobiolog": 174, "subgroup": 174, "psychiatr": 174, "disord": 174, "toolbox": [175, 438], "quickstart": 175, "ecosystem": 175, "domain": [176, 259], "ok": 176, "walk": 176, "manner": [176, 386], "dive": 176, "oftentim": 176, "comer": 176, "gentl": 176, "scientififc": 176, "greatli": 176, "visualis": 176, "besid": 176, "transfer": 176, "psycholog": 176, "knop": 176, "despit": 176, "connection": 176, "tracker": 177, "mislabel": 177, "seriou": 177, "dai": 177, "decent": 177, "quantifi": 177, "prioriti": [177, 179, 241], "urgent": 177, "month": 177, "medium": [177, 239, 402], "kindli": 177, "repli": 177, "week": 177, "redirect": 177, "ping": 177, "stall": 177, "ini": 177, "test_plot": 177, "test_contrast": 177, "exec": 177, "test_latest": 177, "test_data_gen": 177, "hatch": 177, "vc": 177, "sdist": 177, "wheel": 177, "beforehand": 177, "currentmodul": 177, "whats_new": 177, "_latest": 177, "_vx": 177, "commit": 177, "master": [177, 207], "_version": 177, "workspac": 177, "dist": 177, "rm": 177, "twine": 177, "subfold": 177, "packagenam": 177, "packagevers": 177, "pythonvers": 177, "pythoncvers": 177, "whl": 177, "tab": [177, 181], "drag": 177, "dvipng": 177, "texliv": 177, "wget": 177, "mirror": [177, 195, 196, 197, 198, 199, 200, 201, 205, 208, 209, 211, 219, 220, 223, 224, 225, 228, 229, 234, 240], "ctan": 177, "dviwar": 177, "unzip": 177, "linux": 177, "pkg": 177, "versiontag": 177, "bewar": [177, 179], "expans": [178, 440], "resiz": [178, 180, 251, 252, 253, 254, 256, 257, 296, 313, 316, 336, 338, 339, 341, 400, 402, 403, 404, 406, 416, 440], "t_map001": 179, "abbrevi": 179, "subject1": 179, "subject2": 179, "wildcard": [179, 180, 250, 311], "unix": [179, 250], "shell": [179, 250], "subject_01": 179, "subject_03": 179, "subject_": 179, "subj1": 179, "nilearn_shared_data": [179, 241], "get_head": 179, "memoryerror": 179, "decompress": 179, "uncach": 179, "comma": 179, "chapter": [180, 181], "swap_img_hemispher": 180, "fslview": 180, "crop": [180, 181, 305], "consumpt": [180, 283, 296, 329, 332, 419], "3x3x3": [180, 230, 232, 408, 410], "diag": [180, 391], "compute_background_mask": [180, 251, 252, 253, 254, 258, 259, 330, 333, 406], "compute_multi_background_mask": [180, 330], "intersect_mask": 180, "restructur": 180, "recip": 180, "cube": [181, 417], "swiss": 181, "armi": 181, "knive": 181, "intend": [181, 276, 316, 317], "set_config": [181, 187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "print_changed_onli": 181, "fight": 181, "neuroanatomi": 181, "anisotrop": 181, "convers": [181, 197], "loss_pass": 181, "prespecifi": 181, "abrupt": 181, "transient": 181, "acquis": 181, "saniti": 181, "recast": 181, "brought": 181, "represenet": 181, "excerpt": 181, "disadvantag": 181, "nonpres": 181, "linearli": 181, "nor": 181, "cov_estim": 187, "ledoitwolf": 187, "store_precis": 187, "discard_diagon": [187, 193], "shrunk": 187, "triangular": [187, 193, 194, 391], "cov_estimator_": 187, "whitening_": 187, "connectivitymatrix": 187, "n_confound": [187, 307, 421], "vetor": 187, "get_metadata_rout": [187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "rout": [187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "metadatarequest": [187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "subobject": [187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "param": [187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "set_inverse_transform_request": [187, 258, 259, 266, 328, 329, 331, 332, 334, 405, 406, 407, 408], "enable_metadata_rout": [187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "alia": [187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408, 437], "metadata_rout": [187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "set_output": [187, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "set_param": [187, 188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 327, 328, 329, 330, 331, 332, 333, 334, 405, 406, 407, 408], "set_transform_request": [187, 258, 259, 266, 327, 328, 329, 330, 331, 332, 333, 334, 406, 408], "tol": [188, 189, 191, 256, 257], "aggress": [188, 325], "ndarray": 188, "set_fit_request": [188, 189, 251, 252, 253, 254, 255, 256, 257, 258, 259, 266, 283, 296, 328, 329, 330, 331, 332, 333, 406, 408], "n_refin": 189, "tol_cv": 189, "max_iter_cv": 189, "phase": 189, "cv_alphas_": 189, "n_alpha": [189, 256, 257], "probe_funct": 191, "precisions_init": 191, "dualiti": 191, "prematur": 191, "emp_cov": 191, "vec": 194, "encompass": 194, "cpac": 195, "band_pass_filt": 195, "global_signal_regress": 195, "quality_check": 195, "wrt": 195, "pcp": 195, "css": 195, "dparsf": 195, "niak": 195, "cc": 195, "controversi": 195, "1hz": 195, "alff": 195, "degree_binar": 195, "degree_weight": 195, "dual_regress": 195, "eigenvector_binar": 195, "eigenvector_weight": 195, "falff": 195, "func_mask": 195, "func_mean": 195, "lfcd": 195, "reho": 195, "rois_aal": 195, "rois_cc200": 195, "rois_cc400": 195, "rois_dosenbach160": 195, "rois_ez": 195, "rois_ho": 195, "rois_tt": 195, "vmhc": 195, "rater": 195, "sub_id": 195, "50001": 195, "50607": 195, "dx_group": 195, "dsm_iv_tr": 195, "asperg": 195, "ppd": 195, "NOS": 195, "age_at_scan": 195, "femal": 195, "handedness_categori": 195, "ambi": 195, "ambidextr": 195, "handedness_scor": 195, "resum": [196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 216, 219, 220, 221, 225, 227, 228, 229, 234, 240], "ftp": 196, "htdoc": 196, "adhd200": 196, "adhd200_40sub_preprocess": 196, "tgz": 196, "spm12": 197, "med": 197, "consecut": [197, 199, 201, 207, 210, 211, 405], "5021": 197, "lingual_l": 197, "precentral_l": 197, "spm5": 197, "licenc": [197, 198, 200, 207, 211], "gin": 197, "mialab": 198, "rsn_indic": 198, "mrn": 198, "mstep": 199, "asym": 199, "asymmetr": [199, 220, 221], "homotop": 199, "ob": 199, "scale007": 199, "scale012": 199, "scale020": 199, "scale036": 199, "scale064": 199, "scale122": 199, "scale197": 199, "scale325": 199, "scale444": 199, "figshar": 199, "1285615": 199, "grp_mean": 200, "group_mean": 200, "scorr_mean": 200, "emphas": 200, "tcorr_mean": 200, "scorr_2level": 200, "tcorr_2level": 200, "creativ": 200, "commerci": 200, "alik": 200, "creativecommon": 200, "nc": 200, "sa": 200, "cluster_roi": 200, "rec": [201, 213, 214, 215, 286], "pqu9r": 202, "wjvd5": 202, "3vrct": 202, "9b76y": 202, "34792": 202, "atlas_nam": [203, 204], "cortl": 203, "thr50": [203, 204], "usr": [203, 204], "strictli": [203, 204], "probabilit": 206, "prepend": [206, 207, 322, 323], "nac": 206, "idx_nac": 206, "r2hvk": 206, "n_roi": 207, "yeo_network": 207, "base_url": 207, "7networks_lh_vis_3": 207, "thomasyeolab": 207, "cbig": 207, "stable_project": 207, "brain_parcel": 207, "schaefer2018_localglob": 207, "update_20190916_readm": 207, "e501": 207, "update_yeo2011_schaefer2018_labelnam": 207, "bandwidth": 208, "rsn20": 208, "rsn10": 208, "bm20": 208, "bm10": 208, "rsn70": 208, "bm70": 208, "fmrib": 208, "ox": 208, "sulco": 209, "gryal": 209, "level_nam": 210, "ba": 210, "brodmann": 210, "thin_7": 211, "thin": 211, "colors_7": 211, "thin_17": 211, "colors_17": 211, "tick_7": 211, "tick_17": 211, "surfer": 211, "nmr": 211, "mgh": 211, "fswiki": 211, "corticalparcellation_yeo2011": 211, "downloaded_fil": [212, 222, 235], "ordered_region": [213, 215], "cerebellar": 215, "cinguloopercular": 215, "defaultmod": 215, "dorsalattent": 215, "frontopariet": 215, "medialtemporallob": 215, "parietomedi": 215, "reward": 215, "somatomotordors": 215, "somatomotorlater": 215, "ventralattent": 215, "cortexl": 215, "cortexr": 215, "thalamu": 215, "hippocampu": 215, "basalganglia": 215, "amygdala": 215, "cortexmid": 215, "age_group": 216, "realist": [216, 395, 397, 398, 404], "gender": [216, 234], "handed": 216, "ds000228": 216, "wjtyq": 216, "ucla": [217, 235], "consortium": [217, 235], "neuropsychiatr": [217, 235], "la5c": [217, 235], "urls_path": [217, 236], "fullbrain": 219, "pymvpa": 219, "datadb": 219, "mni152nlin2009csasym": [220, 221], "t2": [220, 384, 437], "t2_relax": 220, "relaxometri": 220, "proton": 220, "eye_mask": 220, "face_mask": 220, "bic": [220, 273], "ca": 220, "servicesatlas": 220, "icbm152nlin2009": 220, "vfonov": 220, "mni_icbm152_nlin_sym_09a_nifti": 220, "tpl": 220, "mni152nlin2009csym": 220, "binary_clos": [221, 243, 246], "gm_mask_img": [221, 243], "particularli": [221, 408], "caller": [223, 224], "get_mask": 225, "get_anat": 225, "vhtf6": 225, "paardigm": 226, "multiple_spatial_regress": 227, "princip": [227, 325], "full_correl": 227, "return_raw_data": 228, "betamap": 228, "make_xi": 228, "153mb": 229, "brainlin": 229, "number_of_imag": 230, "_empty_filt": 230, "image_typ": 230, "is_threshold": 230, "not_mni": 230, "download_new": [230, 232], "kwarg_image_filt": 230, "until": [230, 344], "skim": 230, "basic_collection_term": 230, "empty_filt": 230, "basic_image_term": 230, "image_metadata": 230, "offlin": [230, 232, 440], "regardless": [230, 232, 256], "countvector": [230, 232], "concis": 230, "_col_filters_available_on_serv": 230, "owner": 230, "modify_d": 230, "auditory_calculation_vs_baselin": 231, "32980": 231, "10426": 233, "dartel_vers": 234, "dartel": 234, "data_usage_agr": 234, "gross": 234, "intracrani": 234, "socioeconom": 234, "dementia": 234, "demand": 234, "openli": 234, "dataset_vers": [235, 236], "ds000030_r1": [235, 236], "patch_openneuro_dataset": 235, "symlink": [235, 249], "data_nam": [237, 238], "ion": [237, 238], "trials_ses1": 238, "trials_ses2": 238, "mmface": 238, "2562": [239, 402], "10242": [239, 389, 402], "40962": [239, 402], "fsaverage7": [239, 402], "163842": [239, 389, 402], "area_left": 239, "area_right": 239, "flat_right": 239, "sphere_left": 239, "sphere_right": 239, "thick_left": 239, "thick_right": 239, "white_left": [239, 424], "white_right": 239, "func_right": 240, "gm_mni152_templ": 244, "mni152_templ": 245, "wm_mask_img": 246, "wm_mni152_templ": 247, "file_list": 249, "inclusion_filt": 250, "exclus": [250, 256, 257], "wrapper": [251, 252, 298], "1e4": [251, 252, 253, 254], "logisticregress": [251, 253], "inbuilt": [251, 252, 253, 254], "model_evalu": [251, 252, 253, 254], "scorer": [251, 252, 253, 254], "hertz": [251, 252, 253, 254, 256, 257, 301, 328, 329, 330, 331, 332, 333, 334, 406, 408, 419, 420], "rough": [251, 252, 253, 254, 256, 257, 258, 259, 283, 296, 302, 328, 329, 330, 331, 332, 333, 334, 406, 407, 408], "decision_funct": [251, 252, 253, 254, 256, 257], "learner": [251, 252, 253, 254, 256, 257], "ye": [251, 252, 253, 254], "leavepgroupsout": [251, 252, 253, 254], "classes_": [251, 252, 253, 254, 256, 257], "screening_percentile_": [251, 252, 253, 254, 256, 257], "n_class": [251, 252, 253, 254, 256, 257], "intercept_": [251, 252, 253, 254, 256, 257], "nclass": [251, 252, 253, 254], "cv_": [251, 252, 253, 254, 256, 257], "std_coef_": [251, 252, 253, 254], "std_coef_img_": [251, 252, 253, 254], "inner": [251, 252, 253, 254, 321, 424], "best_alpha": [251, 252, 253, 254], "scorer_": [251, 252, 253, 254], "misclassif": [251, 252, 253, 254, 256, 257], "n_outputs_": [251, 252, 253, 254], "dummy_output_": [251, 252, 253, 254], "class_prior": [251, 252, 253, 254], "dummyregressor": [251, 252, 253, 254], "confid": [251, 252, 253, 254, 256, 257, 273, 275, 276], "sample_weight": [251, 252, 253, 254, 256, 257], "set_score_request": [251, 252, 253, 254, 256, 257, 258, 259, 406], "neg_mean_squared_error": [252, 254], "trade": [253, 254], "cluster_percentil": [253, 254], "america": 255, "0001": [256, 257], "fit_intercept": [256, 257], "debia": [256, 257], "hybrid": [256, 257], "mutual": [256, 257], "alpha_min": [256, 257], "alpha_max": [256, 257], "premultipli": 256, "nearli": [256, 257], "debias": [256, 257], "all_coef_": [256, 257], "n_l1_ratio": [256, 257], "alpha_grids_": [256, 257], "best_model_params_": [256, 257], "n_paramet": [256, 257], "n_classes_": 256, "mask_": [256, 257], "memory_": [256, 257], "narrai": [256, 257], "w_": [256, 257], "ymean_": [256, 257], "xmean_": [256, 257], "xstd_": [256, 257], "supported_loss": [256, 257], "supported_penalti": [256, 257], "check_param": [256, 257], "sane": [256, 257], "hyperplan": [256, 257], "qi": [256, 257], "y_true": 257, "disregard": 257, "n_samples_fit": 257, "n_output": [257, 258, 259, 283, 296, 405, 407], "uniform_averag": 257, "multioutputregressor": 257, "do_cca": 258, "6mm": [258, 408], "restart": 258, "fit_param": [258, 259, 283, 296, 327, 330, 333, 405, 407], "x_new": [258, 259, 283, 296, 327, 330, 333, 405, 407], "n_features_new": [258, 259, 283, 296, 327, 330, 333, 405, 407], "reconstructed_img": [258, 259], "decompositionestim": [258, 259, 406], "squeez": [258, 259, 406], "reduction_ratio": 259, "batch": [259, 405], "lar": 259, "lars_path": 259, "file_path": [260, 322], "n_vertic": [260, 261, 262], "to_gifti": [260, 261, 262], "gifti_fil": [260, 261, 262], "labels_data_": 265, "labels_": [265, 283, 405, 407], "unus": [265, 266, 328, 329, 330, 331, 332, 333, 334], "masked_img": [265, 266], "output_dimension_": 266, "mesh_nam": 269, "rho": 270, "likelihoodmodel": [270, 273], "sigma": [270, 273, 274, 275, 276], "whiten": [270, 274, 275, 276], "whitened_x": [270, 274], "logl": [270, 273, 274, 275, 276], "loglikelihood": [270, 274], "df_model": [270, 273, 274], "loglf": [270, 274], "ell": [270, 274], "hat": [270, 274], "sse": [270, 274, 275, 276], "10000000000": 271, "tini": 271, "dofmax": 271, "breakag": 271, "contrast_dim": 271, "def_dofmax": 271, "def_tini": 271, "underflow": 271, "h0": [271, 344], "df_num": [272, 273, 275, 276], "df_den": [272, 273, 275, 276, 277], "theta": [273, 275, 276], "aic": 273, "llf": 273, "wald": [273, 275, 276], "vcov": [273, 275, 276], "sd": [273, 275, 276, 277], "tcontrastresult": [273, 275, 276], "fcontrast": [273, 275, 276], "invcov": [273, 275, 276], "px": [273, 275, 276], "f_re": [273, 275, 276], "fcontrastresult": [273, 275, 276], "conf_int": [273, 275, 276], "col": [273, 275, 276], "standard_norm": [273, 275, 276], "stan": [273, 275, 276], "confidence_interv": [273, 275, 276], "whitened_design": 274, "calc_beta": 274, "moor": 274, "penros": 274, "pseudoinvers": 274, "normalized_cov_beta": 274, "df_residu": 274, "__init___": 274, "wlsmodel": 274, "armodel": 274, "whitened_i": 275, "whitened_residu": 275, "normalized_residu": [275, 276], "d_i": [275, 276], "e_i": [275, 276], "ms_e": [275, 276], "presum": [278, 299], "regression_result": 279, "con_val": 279, "con": 279, "precision_weight": 280, "return_z_scor": 280, "fixed_fx_z_score_img": 280, "fixed_fx_contrast_img": 280, "fixed_fx_variance_img": 280, "fixed_fx_stat_img": 280, "z_val": 282, "min_onset": [283, 285, 286, 290], "fraction": [283, 286, 338, 339, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 424], "plu": [283, 285, 290], "spm_time_deriv": [283, 285, 290], "idem": [283, 285, 290], "spm_dispersion_deriv": [283, 285, 290], "glover_hrf": [283, 285, 290], "glover_time_deriv": [283, 285, 290], "glover_dispersion_deriv": [283, 285, 290], "dirac": [283, 285, 290], "n_onset": [283, 290], "rid": [283, 296], "results_": 283, "array_lik": [283, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 390], "histogram": [283, 292, 338, 341, 388], "quantif": [283, 292], "contrast_def": [283, 296, 382, 418], "t_map": [283, 296], "n_col": [283, 296, 298, 323, 382], "eval": [283, 296, 298, 382], "report_dim": [283, 296, 418], "1600": [283, 296, 418], "htmlreport": [283, 296, 329, 332, 334, 408, 418], "standalon": [283, 296, 418], "ce": [283, 286, 296, 418], "autogener": [283, 296, 418], "subpeak": [283, 296, 417, 418], "report_text": [283, 296, 418], "voxelwis": [283, 296], "triplet": [284, 285, 334, 403], "n_frame": [284, 290], "n_regressor": [284, 292, 298, 344], "n_event": [284, 285, 290], "computed_regressor": 285, "n_reg": 285, "reg_nam": 285, "dataset_path": 286, "_space": 286, "acq": 286, "dir": [286, 321], "den": 286, "dhrf": [287, 289, 293, 295], "n_add_reg": 290, "reg_i": 290, "frames_tim": 290, "map_nam": [296, 298], "effects_map_path": [296, 298], "liter": [296, 298], "second_level_stat_typ": 296, "output_imag": 296, "unsign": [298, 344], "neg_log10_vfwe_pvals_img": 298, "explanatori": [298, 344], "n_descriptor": [298, 344], "thresholded_map": 299, "prescrib": 299, "rigor": 299, "anatomical_imag": [300, 312], "brainmask": 300, "instant": [301, 420], "clean__": [301, 328, 329, 330, 331, 332, 333, 334], "butterworth__": [301, 328, 329, 330, 331, 332, 333, 334, 420], "clean__butterworth__": [301, 328, 329, 330, 331, 332, 333, 334], "ensure_ndim": 302, "img_copi": 304, "rtol": 305, "return_offset": 305, "Will": [305, 349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381], "touch": 305, "croppabl": 305, "toggl": 305, "x1_pre": 305, "x1_post": 305, "x2_pre": 305, "x2_post": 305, "xn_pre": 305, "xn_post": 305, "number_of_scan": 307, "joint_mni_imag": 308, "single_mni_imag": 308, "five_mni_imag": 308, "first_three_imag": 308, "imcal": 312, "fslmath": 312, "log_img": 312, "ref_niimg": 314, "copy_head": 314, "imposs": 315, "fill_valu": [316, 317], "force_resampl": [316, 317], "boundingboxerror": 316, "crop_img": 316, "infinit": 316, "gracefulli": 316, "source_img": 317, "target_img": [317, 337, 340], "cllip": 317, "arr": 318, "normalis": 318, "filtered_img": 318, "synchron": 319, "sagit": 319, "caution": 319, "radio": 319, "main_path": 321, "file_tag": [321, 322], "file_typ": [321, 322], "modality_fold": 321, "sub_fold": 321, "se": 321, "ap": 321, "file_basenam": 322, "file_field": 322, "_tag": 322, "revis": 322, "parser": 322, "statmap": 323, "_stat": 323, "_statmap": 323, "_design": 323, "img_fil": [324, 325], "anat_combin": [324, 325], "n_compcor": [324, 325], "dtseri": [324, 325], "compli": 324, "non_steady_st": 324, "power2": 324, "quadrat": 324, "power2d": 324, "excess": 324, "var": 324, "anat_separ": 324, "temporal_anat_combin": 324, "temporal_anat_separ": 324, "acompcor_combin": 324, "smootharomanonaggr_bold": [324, 325], "nifitmask": 324, "denois": 325, "srub": 325, "physiologi": 325, "suffer": 325, "aggres": 325, "suffix": 325, "mni152nlin6asym": 325, "niprep": 325, "region_sign": [327, 328, 329, 330, 331, 332, 333, 334, 406, 408, 412, 415], "imgs_list": [327, 328, 329, 330, 333], "ddof": [328, 329, 330, 331, 332, 333, 334, 420], "maps_img_": [329, 332], "html_report": [329, 332, 334, 408], "voxel_sign": [329, 332, 334, 408], "multipca": 330, "affine_": [330, 333], "region_ids_": 331, "region_names_": 331, "region_atlas_": 331, "trim": [332, 412], "seeds_": 334, "session_seri": 335, "data_img": [336, 339], "border_s": [336, 339], "binary_eros": [336, 337, 338, 340, 341], "exclude_zero": [338, 339, 341], "reslic": [338, 341], "grp_mask": 342, "ndim": 343, "target_var": 344, "confounding_var": 344, "legaci": 344, "criterion": [344, 407], "amongst": [344, 437], "n_covar": 344, "pval": 344, "score_orig_data": 344, "h0_max_t": 344, "h0_max_tfc": 344, "h0_max_siz": 344, "h0_max_mass": 344, "mpl": [345, 347, 348], "transform_to_2d": [345, 347, 348], "add_object_bound": [345, 347, 348], "draw_2d": [345, 347, 348], "data_2d": [345, 347, 348], "data_bound": [345, 347, 348], "bounding_box": [345, 347, 348], "get_object_bound": [345, 347, 348], "draw_left_right": [345, 347, 348], "bg_color": [345, 347, 348], "draw_scale_bar": [345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "fontproperti": [345, 347, 348], "borderpad": [345, 347, 348], "size_vert": [345, 347, 348], "label_top": [345, 347, 348], "font": [345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 395, 397, 398], "anchoredoffsetbox": [345, 347, 348], "draw_posit": [345, 347, 348], "brain_color": [346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "frame_ax": [346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "subdivid": [346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "find_cut_coord": [346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "placehold": 346, "classmethod": [346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "init_with_figur": [346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "leave_spac": [346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "bgcolor": [346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "2g": [346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 384, 386, 387, 389, 393, 394, 395, 397, 398], "cbar_vmin": [346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 395], "cbar_vmax": [346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 395], "contour_fil": [346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "add_edg": [346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 437], "n_marker": [346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "left_right": [346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "scale_loc": [346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "leak": [346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "dpi": [346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "inch": [346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "schemat": [348, 381, 386, 390], "glassbrainax": [349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371], "add_graph": [349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371], "linearsegmentedcolormap": [349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 379, 380, 381, 384, 391, 392, 393, 394, 400, 401, 402, 404], "edge_kwarg": [349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381], "node_kwarg": [349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381, 390], "undirect": [349, 350, 351, 352, 353, 354, 356, 359, 361, 363, 365, 367, 369, 371, 381], "draw_cross": [349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 379, 384, 387, 392, 393, 394, 401], "crossbar": [355, 357, 360, 362, 364, 366, 368, 370, 372], "cutax": [362, 364, 366, 368, 370, 372], "baseslic": 374, "img_length": 375, "return_label_nam": 376, "label_hemispher": 376, "n_label": 376, "labels_list": 376, "n_map": 377, "activation_threshold": 378, "tupleof": [379, 380, 381, 384, 386, 387, 390, 392, 393, 394], "ymin": [379, 380, 381, 384, 386, 387, 390, 392, 393, 394], "pronounc": [379, 392, 393, 394, 401], "get_zoom": 380, "matlotlib": 381, "nipy_spectr": 384, "model_ev": 385, "fig_kwarg": 385, "stat_map_img": [386, 394, 401, 402], "destin": [386, 387, 393, 394, 401], "noisier": [386, 387, 393, 394, 401], "ref_img": 388, "src_img": 388, "plot_hist": 388, "output_dir": 388, "superimpos": 388, "nifti_lik": 388, "surf_data": [389, 395, 397, 398, 402, 404, 422, 424], "montag": 389, "node_valu": 390, "listedcolormap": 390, "node_vmin": 390, "node_vmax": 390, "node_threshold": 390, "viridis_r": 390, "auto_fit": 391, "newli": 391, "room": 391, "linkag": 391, "sent": 391, "gist_rainbow": 392, "surf_map": [395, 404], "title_font_s": [395, 397, 398], "orig": [395, 396, 397, 398, 404, 423, 424], "sulc": [395, 398, 404, 422], "underneath": [395, 397, 398, 404], "greyscal": [395, 397, 398, 404], "sharp": [395, 397, 437], "apply_along_axi": [395, 397], "custom_funct": [395, 397], "tab20": 396, "rgba": [396, 403], "agg": 399, "emit": 399, "colorbar_height": [400, 402, 404], "colorbar_fonts": [400, 402, 404], "title_fonts": [400, 402, 403, 404], "n_node": [400, 403], "connectomeview": [400, 403], "opac": 401, "th": 401, "opaqu": 401, "html_view": [401, 437], "plane": 401, "surfaceview": [402, 404], "hex": 403, "gnist_ncar": 404, "max_no_improv": 405, "smart": 405, "k_init": 405, "centroid": 405, "mini": 405, "inertia": 405, "reassign": 405, "sizes_": [405, 407], "x_red": [405, 407], "x_inv": [405, 407], "fit_predict": [405, 407], "connectivity_": 406, "valid_method": 406, "eccentr": [407, 413], "n_clusters_": 407, "27mm": [408, 410], "1350mm": [408, 410], "img_valu": 408, "connected_compon": [408, 410], "ly": 408, "min_siz": 409, "new_labels_img": 409, "new_label": 409, "extract_typ": 410, "smooth_arrai": 410, "index_of_each_map": 410, "head_tpl": 416, "head_valu": 416, "html_document": 416, "htmldocument": 416, "get_ifram": 416, "get_standalon": 416, "temp_file_lifetim": 416, "temporari": 416, "remove_temp_fil": 416, "return_label_map": 417, "letter": 417, "label_map": 417, "destination_path": 418, "sampling_r": 419, "padtyp": 419, "odd": 419, "padlen": 419, "n_sourc": 419, "decai": 419, "ring": 419, "sharpen": 419, "filtfilt": 419, "inplac": 419, "filtered_sign": 419, "cleaned_sign": 420, "namedtupl": [423, 424], "neighbourhood": 424, "trilinear": 424, "x20": 424, "regularli": 424, "halfwai": 424, "inward": 424, "surface_mesh": 424, "neighbour": 424, "tour": 437, "canni": 437, "purple_green": 437, "pretty_brain": 437, "rememb": 437, "emb": 437, "surface_plot": 437, "cyan": 437, "orang": 437, "offici": 438, "miniconda": 438, "path_to_new_env": 438, "bat": 438, "prompt": 438, "jitsi": 438, "anyon": 438, "engag": 438, "grad": 440, "biologi": 440, "throughout": 440}, "objects": {"nilearn": [[182, 0, 0, "-", "connectome"], [183, 0, 0, "-", "datasets"], [184, 0, 0, "-", "decoding"], [185, 0, 0, "-", "decomposition"], [186, 0, 0, "-", "experimental"], [425, 0, 0, "-", "glm"], [426, 0, 0, "-", "image"], [428, 0, 0, "-", "interfaces"], [429, 0, 0, "-", "maskers"], [430, 0, 0, "-", "masking"], [431, 0, 0, "-", "mass_univariate"], [432, 0, 0, "-", "plotting"], [433, 0, 0, "-", "regions"], [434, 0, 0, "-", "reporting"], [435, 0, 0, "-", "signal"], [436, 0, 0, "-", "surface"]], "nilearn.connectome": [[187, 1, 1, "", "ConnectivityMeasure"], [188, 1, 1, "", "GroupSparseCovariance"], [189, 1, 1, "", "GroupSparseCovarianceCV"], [190, 3, 1, "", "cov_to_corr"], [191, 3, 1, "", "group_sparse_covariance"], [192, 3, 1, "", "prec_to_partial"], [193, 3, 1, "", "sym_matrix_to_vec"], [194, 3, 1, "", "vec_to_sym_matrix"]], "nilearn.connectome.ConnectivityMeasure": [[187, 2, 1, "", "__init__"], [187, 2, 1, "", "fit"], [187, 2, 1, "", "fit_transform"], [187, 2, 1, "", "get_metadata_routing"], [187, 2, 1, "", "get_params"], [187, 2, 1, "", "inverse_transform"], [187, 2, 1, "", "set_inverse_transform_request"], [187, 2, 1, "", "set_output"], [187, 2, 1, "", "set_params"], [187, 2, 1, "", "set_transform_request"], [187, 2, 1, "", "transform"]], "nilearn.connectome.GroupSparseCovariance": [[188, 2, 1, "", "__init__"], [188, 2, 1, "", "fit"], [188, 2, 1, "", "get_metadata_routing"], [188, 2, 1, "", "get_params"], [188, 2, 1, "", "set_fit_request"], [188, 2, 1, "", "set_params"]], "nilearn.connectome.GroupSparseCovarianceCV": [[189, 2, 1, "", "__init__"], [189, 2, 1, "", "fit"], [189, 2, 1, "", "get_metadata_routing"], [189, 2, 1, "", "get_params"], [189, 2, 1, "", "set_fit_request"], [189, 2, 1, "", "set_params"]], "nilearn.datasets": [[195, 3, 1, "", "fetch_abide_pcp"], [196, 3, 1, "", "fetch_adhd"], [197, 3, 1, "", "fetch_atlas_aal"], [198, 3, 1, "", "fetch_atlas_allen_2011"], [199, 3, 1, "", "fetch_atlas_basc_multiscale_2015"], [200, 3, 1, "", "fetch_atlas_craddock_2012"], [201, 3, 1, "", "fetch_atlas_destrieux_2009"], [202, 3, 1, "", "fetch_atlas_difumo"], [203, 3, 1, "", "fetch_atlas_harvard_oxford"], [204, 3, 1, "", "fetch_atlas_juelich"], [205, 3, 1, "", "fetch_atlas_msdl"], [206, 3, 1, "", "fetch_atlas_pauli_2017"], [207, 3, 1, "", "fetch_atlas_schaefer_2018"], [208, 3, 1, "", "fetch_atlas_smith_2009"], [209, 3, 1, "", "fetch_atlas_surf_destrieux"], [210, 3, 1, "", "fetch_atlas_talairach"], [211, 3, 1, "", "fetch_atlas_yeo_2011"], [212, 3, 1, "", "fetch_bids_langloc_dataset"], [213, 3, 1, "", "fetch_coords_dosenbach_2010"], [214, 3, 1, "", "fetch_coords_power_2011"], [215, 3, 1, "", "fetch_coords_seitzman_2018"], [216, 3, 1, "", "fetch_development_fmri"], [217, 3, 1, "", "fetch_ds000030_urls"], [218, 3, 1, "", "fetch_fiac_first_level"], [219, 3, 1, "", "fetch_haxby"], [220, 3, 1, "", "fetch_icbm152_2009"], [221, 3, 1, "", "fetch_icbm152_brain_gm_mask"], [222, 3, 1, "", "fetch_language_localizer_demo_dataset"], [223, 3, 1, "", "fetch_localizer_button_task"], [224, 3, 1, "", "fetch_localizer_calculation_task"], [225, 3, 1, "", "fetch_localizer_contrasts"], [226, 3, 1, "", "fetch_localizer_first_level"], [227, 3, 1, "", "fetch_megatrawls_netmats"], [228, 3, 1, "", "fetch_mixed_gambles"], [229, 3, 1, "", "fetch_miyawaki2008"], [230, 3, 1, "", "fetch_neurovault"], [231, 3, 1, "", "fetch_neurovault_auditory_computation_task"], [232, 3, 1, "", "fetch_neurovault_ids"], [233, 3, 1, "", "fetch_neurovault_motor_task"], [234, 3, 1, "", "fetch_oasis_vbm"], [235, 3, 1, "", "fetch_openneuro_dataset"], [236, 3, 1, "", "fetch_openneuro_dataset_index"], [237, 3, 1, "", "fetch_spm_auditory"], [238, 3, 1, "", "fetch_spm_multimodal_fmri"], [239, 3, 1, "", "fetch_surf_fsaverage"], [240, 3, 1, "", "fetch_surf_nki_enhanced"], [241, 3, 1, "", "get_data_dirs"], [242, 3, 1, "", "load_mni152_brain_mask"], [243, 3, 1, "", "load_mni152_gm_mask"], [244, 3, 1, "", "load_mni152_gm_template"], [245, 3, 1, "", "load_mni152_template"], [246, 3, 1, "", "load_mni152_wm_mask"], [247, 3, 1, "", "load_mni152_wm_template"], [248, 3, 1, "", "load_sample_motor_activation_image"], [249, 3, 1, "", "patch_openneuro_dataset"], [250, 3, 1, "", "select_from_index"]], "nilearn.decoding": [[251, 1, 1, "", "Decoder"], [252, 1, 1, "", "DecoderRegressor"], [253, 1, 1, "", "FREMClassifier"], [254, 1, 1, "", "FREMRegressor"], [255, 1, 1, "", "SearchLight"], [256, 1, 1, "", "SpaceNetClassifier"], [257, 1, 1, "", "SpaceNetRegressor"]], "nilearn.decoding.Decoder": [[251, 2, 1, "", "__init__"], [251, 2, 1, "", "decision_function"], [251, 2, 1, "", "fit"], [251, 2, 1, "", "get_metadata_routing"], [251, 2, 1, "", "get_params"], [251, 2, 1, "", "predict"], [251, 2, 1, "", "score"], [251, 2, 1, "", "set_fit_request"], [251, 2, 1, "", "set_params"], [251, 2, 1, "", "set_score_request"]], "nilearn.decoding.DecoderRegressor": [[252, 2, 1, "", "__init__"], [252, 2, 1, "", "decision_function"], [252, 2, 1, "", "fit"], [252, 2, 1, "", "get_metadata_routing"], [252, 2, 1, "", "get_params"], [252, 2, 1, "", "predict"], [252, 2, 1, "", "score"], [252, 2, 1, "", "set_fit_request"], [252, 2, 1, "", "set_params"], [252, 2, 1, "", "set_score_request"]], "nilearn.decoding.FREMClassifier": [[253, 2, 1, "", "__init__"], [253, 2, 1, "", "decision_function"], [253, 2, 1, "", "fit"], [253, 2, 1, "", "get_metadata_routing"], [253, 2, 1, "", "get_params"], [253, 2, 1, "", "predict"], [253, 2, 1, "", "score"], [253, 2, 1, "", "set_fit_request"], [253, 2, 1, "", "set_params"], [253, 2, 1, "", "set_score_request"]], "nilearn.decoding.FREMRegressor": [[254, 2, 1, "", "__init__"], [254, 2, 1, "", "decision_function"], [254, 2, 1, "", "fit"], [254, 2, 1, "", "get_metadata_routing"], [254, 2, 1, "", "get_params"], [254, 2, 1, "", "predict"], [254, 2, 1, "", "score"], [254, 2, 1, "", "set_fit_request"], [254, 2, 1, "", "set_params"], [254, 2, 1, "", "set_score_request"]], "nilearn.decoding.SearchLight": [[255, 2, 1, "", "__init__"], [255, 2, 1, "", "fit"], [255, 2, 1, "", "get_metadata_routing"], [255, 2, 1, "", "get_params"], [255, 2, 1, "", "set_fit_request"], [255, 2, 1, "", "set_params"]], "nilearn.decoding.SpaceNetClassifier": [[256, 4, 1, "", "SUPPORTED_LOSSES"], [256, 4, 1, "", "SUPPORTED_PENALTIES"], [256, 2, 1, "", "__init__"], [256, 2, 1, "", "check_params"], [256, 2, 1, "", "decision_function"], [256, 2, 1, "", "fit"], [256, 2, 1, "", "get_metadata_routing"], [256, 2, 1, "", "get_params"], [256, 2, 1, "", "predict"], [256, 2, 1, "", "score"], [256, 2, 1, "", "set_fit_request"], [256, 2, 1, "", "set_params"], [256, 2, 1, "", "set_score_request"]], "nilearn.decoding.SpaceNetRegressor": [[257, 4, 1, "", "SUPPORTED_LOSSES"], [257, 4, 1, "", "SUPPORTED_PENALTIES"], [257, 2, 1, "", "__init__"], [257, 2, 1, "", "check_params"], [257, 2, 1, "", "decision_function"], [257, 2, 1, "", "fit"], [257, 2, 1, "", "get_metadata_routing"], [257, 2, 1, "", "get_params"], [257, 2, 1, "", "predict"], [257, 2, 1, "", "score"], [257, 2, 1, "", "set_fit_request"], [257, 2, 1, "", "set_params"], [257, 2, 1, "", "set_score_request"]], "nilearn.decomposition": [[258, 1, 1, "", "CanICA"], [259, 1, 1, "", "DictLearning"]], "nilearn.decomposition.CanICA": [[258, 2, 1, "", "__init__"], [258, 2, 1, "", "fit"], [258, 2, 1, "", "fit_transform"], [258, 2, 1, "", "get_metadata_routing"], [258, 2, 1, "", "get_params"], [258, 2, 1, "", "inverse_transform"], [258, 2, 1, "", "score"], [258, 2, 1, "", "set_fit_request"], [258, 2, 1, "", "set_inverse_transform_request"], [258, 2, 1, "", "set_output"], [258, 2, 1, "", "set_params"], [258, 2, 1, "", "set_score_request"], [258, 2, 1, "", "set_transform_request"], [258, 2, 1, "", "transform"]], "nilearn.decomposition.DictLearning": [[259, 2, 1, "", "__init__"], [259, 2, 1, "", "fit"], [259, 2, 1, "", "fit_transform"], [259, 2, 1, "", "get_metadata_routing"], [259, 2, 1, "", "get_params"], [259, 2, 1, "", "inverse_transform"], [259, 2, 1, "", "score"], [259, 2, 1, "", "set_fit_request"], [259, 2, 1, "", "set_inverse_transform_request"], [259, 2, 1, "", "set_output"], [259, 2, 1, "", "set_params"], [259, 2, 1, "", "set_score_request"], [259, 2, 1, "", "set_transform_request"], [259, 2, 1, "", "transform"]], "nilearn.experimental": [[186, 0, 0, "-", "surface"]], "nilearn.experimental.surface": [[260, 1, 1, "", "FileMesh"], [261, 1, 1, "", "InMemoryMesh"], [262, 1, 1, "", "Mesh"], [263, 4, 1, "", "PolyMesh"], [264, 1, 1, "", "SurfaceImage"], [265, 1, 1, "", "SurfaceLabelsMasker"], [266, 1, 1, "", "SurfaceMasker"], [267, 3, 1, "", "fetch_destrieux"], [268, 3, 1, "", "fetch_nki"], [269, 3, 1, "", "load_fsaverage"]], "nilearn.experimental.surface.FileMesh": [[260, 2, 1, "", "__init__"], [260, 5, 1, "", "coordinates"], [260, 5, 1, "", "faces"], [260, 4, 1, "", "file_path"], [260, 2, 1, "", "loaded"], [260, 4, 1, "", "n_vertices"], [260, 2, 1, "", "to_gifti"]], "nilearn.experimental.surface.InMemoryMesh": [[261, 2, 1, "", "__init__"], [261, 4, 1, "", "coordinates"], [261, 4, 1, "", "faces"], [261, 4, 1, "", "n_vertices"], [261, 2, 1, "", "to_gifti"]], "nilearn.experimental.surface.Mesh": [[262, 2, 1, "", "__init__"], [262, 4, 1, "", "coordinates"], [262, 4, 1, "", "faces"], [262, 4, 1, "", "n_vertices"], [262, 2, 1, "", "to_gifti"]], "nilearn.experimental.surface.SurfaceImage": [[264, 2, 1, "", "__init__"], [264, 4, 1, "", "data"], [264, 4, 1, "", "mesh"], [264, 4, 1, "", "shape"]], "nilearn.experimental.surface.SurfaceLabelsMasker": [[265, 2, 1, "", "__init__"], [265, 2, 1, "", "fit"], [265, 2, 1, "", "fit_transform"], [265, 2, 1, "", "inverse_transform"], [265, 4, 1, "", "label_names"], [265, 4, 1, "", "label_names_"], [265, 4, 1, "", "labels_"], [265, 4, 1, "", "labels_data_"], [265, 4, 1, "", "labels_img"], [265, 2, 1, "", "transform"]], "nilearn.experimental.surface.SurfaceMasker": [[266, 2, 1, "", "__init__"], [266, 2, 1, "", "fit"], [266, 2, 1, "", "fit_transform"], [266, 2, 1, "", "get_metadata_routing"], [266, 2, 1, "", "get_params"], [266, 2, 1, "", "inverse_transform"], [266, 4, 1, "", "mask_img"], [266, 4, 1, "", "mask_img_"], [266, 4, 1, "", "output_dimension_"], [266, 2, 1, "", "set_fit_request"], [266, 2, 1, "", "set_inverse_transform_request"], [266, 2, 1, "", "set_output"], [266, 2, 1, "", "set_params"], [266, 2, 1, "", "set_transform_request"], [266, 2, 1, "", "transform"]], "nilearn.glm": [[270, 1, 1, "", "ARModel"], [271, 1, 1, "", "Contrast"], [272, 1, 1, "", "FContrastResults"], [273, 1, 1, "", "LikelihoodModelResults"], [274, 1, 1, "", "OLSModel"], [275, 1, 1, "", "RegressionResults"], [276, 1, 1, "", "SimpleRegressionResults"], [277, 1, 1, "", "TContrastResults"], [278, 3, 1, "", "cluster_level_inference"], [279, 3, 1, "", "compute_contrast"], [280, 3, 1, "", "compute_fixed_effects"], [281, 3, 1, "", "expression_to_contrast_vector"], [282, 3, 1, "", "fdr_threshold"], [425, 0, 0, "-", "first_level"], [425, 0, 0, "-", "second_level"], [299, 3, 1, "", "threshold_stats_img"]], "nilearn.glm.ARModel": [[270, 2, 1, "", "__init__"], [270, 2, 1, "", "fit"], [270, 2, 1, "", "initialize"], [270, 2, 1, "", "logL"], [270, 2, 1, "", "whiten"]], "nilearn.glm.Contrast": [[271, 2, 1, "", "__init__"], [271, 2, 1, "", "effect_size"], [271, 2, 1, "", "effect_variance"], [271, 2, 1, "", "one_minus_pvalue"], [271, 2, 1, "", "p_value"], [271, 2, 1, "", "stat"], [271, 2, 1, "", "z_score"]], "nilearn.glm.FContrastResults": [[272, 2, 1, "", "__init__"]], "nilearn.glm.LikelihoodModelResults": [[273, 2, 1, "", "Fcontrast"], [273, 2, 1, "", "Tcontrast"], [273, 2, 1, "", "__init__"], [273, 2, 1, "", "conf_int"], [273, 2, 1, "", "logL"], [273, 2, 1, "", "t"], [273, 2, 1, "", "vcov"]], "nilearn.glm.OLSModel": [[274, 2, 1, "", "__init__"], [274, 2, 1, "", "fit"], [274, 2, 1, "", "initialize"], [274, 2, 1, "", "logL"], [274, 2, 1, "", "whiten"]], "nilearn.glm.RegressionResults": [[275, 2, 1, "", "Fcontrast"], [275, 2, 1, "", "MSE"], [275, 2, 1, "", "SSE"], [275, 2, 1, "", "Tcontrast"], [275, 2, 1, "", "__init__"], [275, 2, 1, "", "conf_int"], [275, 2, 1, "", "logL"], [275, 2, 1, "", "normalized_residuals"], [275, 2, 1, "", "predicted"], [275, 2, 1, "", "r_square"], [275, 2, 1, "", "residuals"], [275, 2, 1, "", "t"], [275, 2, 1, "", "vcov"]], "nilearn.glm.SimpleRegressionResults": [[276, 2, 1, "", "Fcontrast"], [276, 2, 1, "", "Tcontrast"], [276, 2, 1, "", "__init__"], [276, 2, 1, "", "conf_int"], [276, 2, 1, "", "logL"], [276, 2, 1, "", "normalized_residuals"], [276, 2, 1, "", "predicted"], [276, 2, 1, "", "residuals"], [276, 2, 1, "", "t"], [276, 2, 1, "", "vcov"]], "nilearn.glm.TContrastResults": [[277, 2, 1, "", "__init__"]], "nilearn.glm.first_level": [[283, 1, 1, "", "FirstLevelModel"], [284, 3, 1, "", "check_design_matrix"], [285, 3, 1, "", "compute_regressor"], [286, 3, 1, "", "first_level_from_bids"], [287, 3, 1, "", "glover_dispersion_derivative"], [288, 3, 1, "", "glover_hrf"], [289, 3, 1, "", "glover_time_derivative"], [290, 3, 1, "", "make_first_level_design_matrix"], [291, 3, 1, "", "mean_scaling"], [292, 3, 1, "", "run_glm"], [293, 3, 1, "", "spm_dispersion_derivative"], [294, 3, 1, "", "spm_hrf"], [295, 3, 1, "", "spm_time_derivative"]], "nilearn.glm.first_level.FirstLevelModel": [[283, 2, 1, "", "__init__"], [283, 2, 1, "", "compute_contrast"], [283, 2, 1, "", "fit"], [283, 2, 1, "", "fit_transform"], [283, 2, 1, "", "generate_report"], [283, 2, 1, "", "get_metadata_routing"], [283, 2, 1, "", "get_params"], [283, 2, 1, "", "predicted"], [283, 2, 1, "", "r_square"], [283, 2, 1, "", "residuals"], [283, 5, 1, "", "scaling_axis"], [283, 2, 1, "", "set_fit_request"], [283, 2, 1, "", "set_output"], [283, 2, 1, "", "set_params"]], "nilearn.glm.second_level": [[296, 1, 1, "", "SecondLevelModel"], [297, 3, 1, "", "make_second_level_design_matrix"], [298, 3, 1, "", "non_parametric_inference"]], "nilearn.glm.second_level.SecondLevelModel": [[296, 2, 1, "", "__init__"], [296, 2, 1, "", "compute_contrast"], [296, 2, 1, "", "fit"], [296, 2, 1, "", "fit_transform"], [296, 2, 1, "", "generate_report"], [296, 2, 1, "", "get_metadata_routing"], [296, 2, 1, "", "get_params"], [296, 2, 1, "", "predicted"], [296, 2, 1, "", "r_square"], [296, 2, 1, "", "residuals"], [296, 2, 1, "", "set_fit_request"], [296, 2, 1, "", "set_output"], [296, 2, 1, "", "set_params"]], "nilearn.image": [[300, 3, 1, "", "binarize_img"], [301, 3, 1, "", "clean_img"], [302, 3, 1, "", "concat_imgs"], [303, 3, 1, "", "coord_transform"], [304, 3, 1, "", "copy_img"], [305, 3, 1, "", "crop_img"], [306, 3, 1, "", "get_data"], [307, 3, 1, "", "high_variance_confounds"], [308, 3, 1, "", "index_img"], [309, 3, 1, "", "iter_img"], [310, 3, 1, "", "largest_connected_component_img"], [311, 3, 1, "", "load_img"], [312, 3, 1, "", "math_img"], [313, 3, 1, "", "mean_img"], [314, 3, 1, "", "new_img_like"], [315, 3, 1, "", "reorder_img"], [316, 3, 1, "", "resample_img"], [317, 3, 1, "", "resample_to_img"], [318, 3, 1, "", "smooth_img"], [319, 3, 1, "", "swap_img_hemispheres"], [320, 3, 1, "", "threshold_img"]], "nilearn.interfaces": [[428, 0, 0, "-", "bids"], [428, 0, 0, "-", "fmriprep"], [428, 0, 0, "-", "fsl"]], "nilearn.interfaces.bids": [[321, 3, 1, "", "get_bids_files"], [322, 3, 1, "", "parse_bids_filename"], [323, 3, 1, "", "save_glm_to_bids"]], "nilearn.interfaces.fmriprep": [[324, 3, 1, "", "load_confounds"], [325, 3, 1, "", "load_confounds_strategy"]], "nilearn.interfaces.fsl": [[326, 3, 1, "", "get_design_from_fslmat"]], "nilearn.maskers": [[327, 1, 1, "", "BaseMasker"], [328, 1, 1, "", "MultiNiftiLabelsMasker"], [329, 1, 1, "", "MultiNiftiMapsMasker"], [330, 1, 1, "", "MultiNiftiMasker"], [331, 1, 1, "", "NiftiLabelsMasker"], [332, 1, 1, "", "NiftiMapsMasker"], [333, 1, 1, "", "NiftiMasker"], [334, 1, 1, "", "NiftiSpheresMasker"]], "nilearn.maskers.BaseMasker": [[327, 2, 1, "", "__init__"], [327, 2, 1, "", "fit_transform"], [327, 2, 1, "", "get_metadata_routing"], [327, 2, 1, "", "get_params"], [327, 2, 1, "", "inverse_transform"], [327, 2, 1, "", "set_output"], [327, 2, 1, "", "set_params"], [327, 2, 1, "", "set_transform_request"], [327, 2, 1, "", "transform"], [327, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[328, 2, 1, "", "__init__"], [328, 2, 1, "", "fit"], [328, 2, 1, "", "fit_transform"], [328, 2, 1, "", "generate_report"], [328, 2, 1, "", "get_metadata_routing"], [328, 2, 1, "", "get_params"], [328, 2, 1, "", "inverse_transform"], [328, 2, 1, "", "set_fit_request"], [328, 2, 1, "", "set_inverse_transform_request"], [328, 2, 1, "", "set_output"], [328, 2, 1, "", "set_params"], [328, 2, 1, "", "set_transform_request"], [328, 2, 1, "", "transform"], [328, 2, 1, "", "transform_imgs"], [328, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMapsMasker": [[329, 2, 1, "", "__init__"], [329, 2, 1, "", "fit"], [329, 2, 1, "", "fit_transform"], [329, 2, 1, "", "generate_report"], [329, 2, 1, "", "get_metadata_routing"], [329, 2, 1, "", "get_params"], [329, 2, 1, "", "inverse_transform"], [329, 2, 1, "", "set_fit_request"], [329, 2, 1, "", "set_inverse_transform_request"], [329, 2, 1, "", "set_output"], [329, 2, 1, "", "set_params"], [329, 2, 1, "", "set_transform_request"], [329, 2, 1, "", "transform"], [329, 2, 1, "", "transform_imgs"], [329, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMasker": [[330, 2, 1, "", "__init__"], [330, 2, 1, "", "fit"], [330, 2, 1, "", "fit_transform"], [330, 2, 1, "", "generate_report"], [330, 2, 1, "", "get_metadata_routing"], [330, 2, 1, "", "get_params"], [330, 2, 1, "", "inverse_transform"], [330, 2, 1, "", "set_fit_request"], [330, 2, 1, "", "set_output"], [330, 2, 1, "", "set_params"], [330, 2, 1, "", "set_transform_request"], [330, 2, 1, "", "transform"], [330, 2, 1, "", "transform_imgs"], [330, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiLabelsMasker": [[331, 2, 1, "", "__init__"], [331, 2, 1, "", "fit"], [331, 2, 1, "", "fit_transform"], [331, 2, 1, "", "generate_report"], [331, 2, 1, "", "get_metadata_routing"], [331, 2, 1, "", "get_params"], [331, 2, 1, "", "inverse_transform"], [331, 2, 1, "", "set_fit_request"], [331, 2, 1, "", "set_inverse_transform_request"], [331, 2, 1, "", "set_output"], [331, 2, 1, "", "set_params"], [331, 2, 1, "", "set_transform_request"], [331, 2, 1, "", "transform"], [331, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMapsMasker": [[332, 2, 1, "", "__init__"], [332, 2, 1, "", "fit"], [332, 2, 1, "", "fit_transform"], [332, 2, 1, "", "generate_report"], [332, 2, 1, "", "get_metadata_routing"], [332, 2, 1, "", "get_params"], [332, 2, 1, "", "inverse_transform"], [332, 2, 1, "", "set_fit_request"], [332, 2, 1, "", "set_inverse_transform_request"], [332, 2, 1, "", "set_output"], [332, 2, 1, "", "set_params"], [332, 2, 1, "", "set_transform_request"], [332, 2, 1, "", "transform"], [332, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMasker": [[333, 2, 1, "", "__init__"], [333, 2, 1, "", "fit"], [333, 2, 1, "", "fit_transform"], [333, 2, 1, "", "generate_report"], [333, 2, 1, "", "get_metadata_routing"], [333, 2, 1, "", "get_params"], [333, 2, 1, "", "inverse_transform"], [333, 2, 1, "", "set_fit_request"], [333, 2, 1, "", "set_output"], [333, 2, 1, "", "set_params"], [333, 2, 1, "", "set_transform_request"], [333, 2, 1, "", "transform"], [333, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiSpheresMasker": [[334, 2, 1, "", "__init__"], [334, 2, 1, "", "fit"], [334, 2, 1, "", "fit_transform"], [334, 2, 1, "", "generate_report"], [334, 2, 1, "", "get_metadata_routing"], [334, 2, 1, "", "get_params"], [334, 2, 1, "", "inverse_transform"], [334, 2, 1, "", "set_inverse_transform_request"], [334, 2, 1, "", "set_output"], [334, 2, 1, "", "set_params"], [334, 2, 1, "", "set_transform_request"], [334, 2, 1, "", "transform"], [334, 2, 1, "", "transform_single_imgs"]], "nilearn.masking": [[335, 3, 1, "", "apply_mask"], [336, 3, 1, "", "compute_background_mask"], [337, 3, 1, "", "compute_brain_mask"], [338, 3, 1, "", "compute_epi_mask"], [339, 3, 1, "", "compute_multi_background_mask"], [340, 3, 1, "", "compute_multi_brain_mask"], [341, 3, 1, "", "compute_multi_epi_mask"], [342, 3, 1, "", "intersect_masks"], [343, 3, 1, "", "unmask"]], "nilearn.mass_univariate": [[344, 3, 1, "", "permuted_ols"]], "nilearn.plotting": [[432, 0, 0, "-", "displays"], [375, 3, 1, "", "find_cut_slices"], [376, 3, 1, "", "find_parcellation_cut_coords"], [377, 3, 1, "", "find_probabilistic_atlas_cut_coords"], [378, 3, 1, "", "find_xyz_cut_coords"], [379, 3, 1, "", "plot_anat"], [380, 3, 1, "", "plot_carpet"], [381, 3, 1, "", "plot_connectome"], [382, 3, 1, "", "plot_contrast_matrix"], [383, 3, 1, "", "plot_design_matrix"], [384, 3, 1, "", "plot_epi"], [385, 3, 1, "", "plot_event"], [386, 3, 1, "", "plot_glass_brain"], [387, 3, 1, "", "plot_img"], [388, 3, 1, "", "plot_img_comparison"], [389, 3, 1, "", "plot_img_on_surf"], [390, 3, 1, "", "plot_markers"], [391, 3, 1, "", "plot_matrix"], [392, 3, 1, "", "plot_prob_atlas"], [393, 3, 1, "", "plot_roi"], [394, 3, 1, "", "plot_stat_map"], [395, 3, 1, "", "plot_surf"], [396, 3, 1, "", "plot_surf_contours"], [397, 3, 1, "", "plot_surf_roi"], [398, 3, 1, "", "plot_surf_stat_map"], [399, 3, 1, "", "show"], [400, 3, 1, "", "view_connectome"], [401, 3, 1, "", "view_img"], [402, 3, 1, "", "view_img_on_surf"], [403, 3, 1, "", "view_markers"], [404, 3, 1, "", "view_surf"]], "nilearn.plotting.displays": [[345, 1, 1, "", "BaseAxes"], [346, 1, 1, "", "BaseSlicer"], [347, 1, 1, "", "CutAxes"], [348, 1, 1, "", "GlassBrainAxes"], [349, 1, 1, "", "LProjector"], [350, 1, 1, "", "LRProjector"], [351, 1, 1, "", "LYRProjector"], [352, 1, 1, "", "LYRZProjector"], [353, 1, 1, "", "LZRProjector"], [354, 1, 1, "", "LZRYProjector"], [355, 1, 1, "", "MosaicSlicer"], [356, 1, 1, "", "OrthoProjector"], [357, 1, 1, "", "OrthoSlicer"], [358, 1, 1, "", "PlotlySurfaceFigure"], [359, 1, 1, "", "RProjector"], [360, 1, 1, "", "TiledSlicer"], [361, 1, 1, "", "XProjector"], [362, 1, 1, "", "XSlicer"], [363, 1, 1, "", "XZProjector"], [364, 1, 1, "", "XZSlicer"], [365, 1, 1, "", "YProjector"], [366, 1, 1, "", "YSlicer"], [367, 1, 1, "", "YXProjector"], [368, 1, 1, "", "YXSlicer"], [369, 1, 1, "", "YZProjector"], [370, 1, 1, "", "YZSlicer"], [371, 1, 1, "", "ZProjector"], [372, 1, 1, "", "ZSlicer"], [373, 3, 1, "", "get_projector"], [374, 3, 1, "", "get_slicer"]], "nilearn.plotting.displays.BaseAxes": [[345, 2, 1, "", "__init__"], [345, 2, 1, "", "add_object_bounds"], [345, 2, 1, "", "draw_2d"], [345, 2, 1, "", "draw_left_right"], [345, 2, 1, "", "draw_position"], [345, 2, 1, "", "draw_scale_bar"], [345, 2, 1, "", "get_object_bounds"], [345, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.BaseSlicer": [[346, 2, 1, "", "__init__"], [346, 2, 1, "", "add_contours"], [346, 2, 1, "", "add_edges"], [346, 2, 1, "", "add_markers"], [346, 2, 1, "", "add_overlay"], [346, 2, 1, "", "annotate"], [346, 5, 1, "", "black_bg"], [346, 5, 1, "", "brain_color"], [346, 2, 1, "", "close"], [346, 2, 1, "", "find_cut_coords"], [346, 2, 1, "", "init_with_figure"], [346, 2, 1, "", "savefig"], [346, 2, 1, "", "title"]], "nilearn.plotting.displays.CutAxes": [[347, 2, 1, "", "__init__"], [347, 2, 1, "", "add_object_bounds"], [347, 2, 1, "", "draw_2d"], [347, 2, 1, "", "draw_left_right"], [347, 2, 1, "", "draw_position"], [347, 2, 1, "", "draw_scale_bar"], [347, 2, 1, "", "get_object_bounds"], [347, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.GlassBrainAxes": [[348, 2, 1, "", "__init__"], [348, 2, 1, "", "add_object_bounds"], [348, 2, 1, "", "draw_2d"], [348, 2, 1, "", "draw_left_right"], [348, 2, 1, "", "draw_position"], [348, 2, 1, "", "draw_scale_bar"], [348, 2, 1, "", "get_object_bounds"], [348, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.LProjector": [[349, 2, 1, "", "__init__"], [349, 2, 1, "", "add_contours"], [349, 2, 1, "", "add_edges"], [349, 2, 1, "", "add_graph"], [349, 2, 1, "", "add_markers"], [349, 2, 1, "", "add_overlay"], [349, 2, 1, "", "annotate"], [349, 5, 1, "", "black_bg"], [349, 5, 1, "", "brain_color"], [349, 2, 1, "", "close"], [349, 2, 1, "", "draw_cross"], [349, 2, 1, "", "find_cut_coords"], [349, 2, 1, "", "init_with_figure"], [349, 2, 1, "", "savefig"], [349, 2, 1, "", "title"]], "nilearn.plotting.displays.LRProjector": [[350, 2, 1, "", "__init__"], [350, 2, 1, "", "add_contours"], [350, 2, 1, "", "add_edges"], [350, 2, 1, "", "add_graph"], [350, 2, 1, "", "add_markers"], [350, 2, 1, "", "add_overlay"], [350, 2, 1, "", "annotate"], [350, 5, 1, "", "black_bg"], [350, 5, 1, "", "brain_color"], [350, 2, 1, "", "close"], [350, 2, 1, "", "draw_cross"], [350, 2, 1, "", "find_cut_coords"], [350, 2, 1, "", "init_with_figure"], [350, 2, 1, "", "savefig"], [350, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRProjector": [[351, 2, 1, "", "__init__"], [351, 2, 1, "", "add_contours"], [351, 2, 1, "", "add_edges"], [351, 2, 1, "", "add_graph"], [351, 2, 1, "", "add_markers"], [351, 2, 1, "", "add_overlay"], [351, 2, 1, "", "annotate"], [351, 5, 1, "", "black_bg"], [351, 5, 1, "", "brain_color"], [351, 2, 1, "", "close"], [351, 2, 1, "", "draw_cross"], [351, 2, 1, "", "find_cut_coords"], [351, 2, 1, "", "init_with_figure"], [351, 2, 1, "", "savefig"], [351, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRZProjector": [[352, 2, 1, "", "__init__"], [352, 2, 1, "", "add_contours"], [352, 2, 1, "", "add_edges"], [352, 2, 1, "", "add_graph"], [352, 2, 1, "", "add_markers"], [352, 2, 1, "", "add_overlay"], [352, 2, 1, "", "annotate"], [352, 5, 1, "", "black_bg"], [352, 5, 1, "", "brain_color"], [352, 2, 1, "", "close"], [352, 2, 1, "", "draw_cross"], [352, 2, 1, "", "find_cut_coords"], [352, 2, 1, "", "init_with_figure"], [352, 2, 1, "", "savefig"], [352, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRProjector": [[353, 2, 1, "", "__init__"], [353, 2, 1, "", "add_contours"], [353, 2, 1, "", "add_edges"], [353, 2, 1, "", "add_graph"], [353, 2, 1, "", "add_markers"], [353, 2, 1, "", "add_overlay"], [353, 2, 1, "", "annotate"], [353, 5, 1, "", "black_bg"], [353, 5, 1, "", "brain_color"], [353, 2, 1, "", "close"], [353, 2, 1, "", "draw_cross"], [353, 2, 1, "", "find_cut_coords"], [353, 2, 1, "", "init_with_figure"], [353, 2, 1, "", "savefig"], [353, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRYProjector": [[354, 2, 1, "", "__init__"], [354, 2, 1, "", "add_contours"], [354, 2, 1, "", "add_edges"], [354, 2, 1, "", "add_graph"], [354, 2, 1, "", "add_markers"], [354, 2, 1, "", "add_overlay"], [354, 2, 1, "", "annotate"], [354, 5, 1, "", "black_bg"], [354, 5, 1, "", "brain_color"], [354, 2, 1, "", "close"], [354, 2, 1, "", "draw_cross"], [354, 2, 1, "", "find_cut_coords"], [354, 2, 1, "", "init_with_figure"], [354, 2, 1, "", "savefig"], [354, 2, 1, "", "title"]], "nilearn.plotting.displays.MosaicSlicer": [[355, 2, 1, "", "__init__"], [355, 2, 1, "", "add_contours"], [355, 2, 1, "", "add_edges"], [355, 2, 1, "", "add_markers"], [355, 2, 1, "", "add_overlay"], [355, 2, 1, "", "annotate"], [355, 5, 1, "", "black_bg"], [355, 5, 1, "", "brain_color"], [355, 2, 1, "", "close"], [355, 2, 1, "", "draw_cross"], [355, 2, 1, "", "find_cut_coords"], [355, 2, 1, "", "init_with_figure"], [355, 2, 1, "", "savefig"], [355, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoProjector": [[356, 2, 1, "", "__init__"], [356, 2, 1, "", "add_contours"], [356, 2, 1, "", "add_edges"], [356, 2, 1, "", "add_graph"], [356, 2, 1, "", "add_markers"], [356, 2, 1, "", "add_overlay"], [356, 2, 1, "", "annotate"], [356, 5, 1, "", "black_bg"], [356, 5, 1, "", "brain_color"], [356, 2, 1, "", "close"], [356, 2, 1, "", "draw_cross"], [356, 2, 1, "", "find_cut_coords"], [356, 2, 1, "", "init_with_figure"], [356, 2, 1, "", "savefig"], [356, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoSlicer": [[357, 2, 1, "", "__init__"], [357, 2, 1, "", "add_contours"], [357, 2, 1, "", "add_edges"], [357, 2, 1, "", "add_markers"], [357, 2, 1, "", "add_overlay"], [357, 2, 1, "", "annotate"], [357, 5, 1, "", "black_bg"], [357, 5, 1, "", "brain_color"], [357, 2, 1, "", "close"], [357, 2, 1, "", "draw_cross"], [357, 2, 1, "", "find_cut_coords"], [357, 2, 1, "", "init_with_figure"], [357, 2, 1, "", "savefig"], [357, 2, 1, "", "title"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[358, 2, 1, "", "__init__"], [358, 2, 1, "", "savefig"], [358, 2, 1, "", "show"]], "nilearn.plotting.displays.RProjector": [[359, 2, 1, "", "__init__"], [359, 2, 1, "", "add_contours"], [359, 2, 1, "", "add_edges"], [359, 2, 1, "", "add_graph"], [359, 2, 1, "", "add_markers"], [359, 2, 1, "", "add_overlay"], [359, 2, 1, "", "annotate"], [359, 5, 1, "", "black_bg"], [359, 5, 1, "", "brain_color"], [359, 2, 1, "", "close"], [359, 2, 1, "", "draw_cross"], [359, 2, 1, "", "find_cut_coords"], [359, 2, 1, "", "init_with_figure"], [359, 2, 1, "", "savefig"], [359, 2, 1, "", "title"]], "nilearn.plotting.displays.TiledSlicer": [[360, 2, 1, "", "__init__"], [360, 2, 1, "", "add_contours"], [360, 2, 1, "", "add_edges"], [360, 2, 1, "", "add_markers"], [360, 2, 1, "", "add_overlay"], [360, 2, 1, "", "annotate"], [360, 5, 1, "", "black_bg"], [360, 5, 1, "", "brain_color"], [360, 2, 1, "", "close"], [360, 2, 1, "", "draw_cross"], [360, 2, 1, "", "find_cut_coords"], [360, 2, 1, "", "init_with_figure"], [360, 2, 1, "", "savefig"], [360, 2, 1, "", "title"]], "nilearn.plotting.displays.XProjector": [[361, 2, 1, "", "__init__"], [361, 2, 1, "", "add_contours"], [361, 2, 1, "", "add_edges"], [361, 2, 1, "", "add_graph"], [361, 2, 1, "", "add_markers"], [361, 2, 1, "", "add_overlay"], [361, 2, 1, "", "annotate"], [361, 5, 1, "", "black_bg"], [361, 5, 1, "", "brain_color"], [361, 2, 1, "", "close"], [361, 2, 1, "", "draw_cross"], [361, 2, 1, "", "find_cut_coords"], [361, 2, 1, "", "init_with_figure"], [361, 2, 1, "", "savefig"], [361, 2, 1, "", "title"]], "nilearn.plotting.displays.XSlicer": [[362, 2, 1, "", "__init__"], [362, 2, 1, "", "add_contours"], [362, 2, 1, "", "add_edges"], [362, 2, 1, "", "add_markers"], [362, 2, 1, "", "add_overlay"], [362, 2, 1, "", "annotate"], [362, 5, 1, "", "black_bg"], [362, 5, 1, "", "brain_color"], [362, 2, 1, "", "close"], [362, 2, 1, "", "draw_cross"], [362, 2, 1, "", "find_cut_coords"], [362, 2, 1, "", "init_with_figure"], [362, 2, 1, "", "savefig"], [362, 2, 1, "", "title"]], "nilearn.plotting.displays.XZProjector": [[363, 2, 1, "", "__init__"], [363, 2, 1, "", "add_contours"], [363, 2, 1, "", "add_edges"], [363, 2, 1, "", "add_graph"], [363, 2, 1, "", "add_markers"], [363, 2, 1, "", "add_overlay"], [363, 2, 1, "", "annotate"], [363, 5, 1, "", "black_bg"], [363, 5, 1, "", "brain_color"], [363, 2, 1, "", "close"], [363, 2, 1, "", "draw_cross"], [363, 2, 1, "", "find_cut_coords"], [363, 2, 1, "", "init_with_figure"], [363, 2, 1, "", "savefig"], [363, 2, 1, "", "title"]], "nilearn.plotting.displays.XZSlicer": [[364, 2, 1, "", "__init__"], [364, 2, 1, "", "add_contours"], [364, 2, 1, "", "add_edges"], [364, 2, 1, "", "add_markers"], [364, 2, 1, "", "add_overlay"], [364, 2, 1, "", "annotate"], [364, 5, 1, "", "black_bg"], [364, 5, 1, "", "brain_color"], [364, 2, 1, "", "close"], [364, 2, 1, "", "draw_cross"], [364, 2, 1, "", "find_cut_coords"], [364, 2, 1, "", "init_with_figure"], [364, 2, 1, "", "savefig"], [364, 2, 1, "", "title"]], "nilearn.plotting.displays.YProjector": [[365, 2, 1, "", "__init__"], [365, 2, 1, "", "add_contours"], [365, 2, 1, "", "add_edges"], [365, 2, 1, "", "add_graph"], [365, 2, 1, "", "add_markers"], [365, 2, 1, "", "add_overlay"], [365, 2, 1, "", "annotate"], [365, 5, 1, "", "black_bg"], [365, 5, 1, "", "brain_color"], [365, 2, 1, "", "close"], [365, 2, 1, "", "draw_cross"], [365, 2, 1, "", "find_cut_coords"], [365, 2, 1, "", "init_with_figure"], [365, 2, 1, "", "savefig"], [365, 2, 1, "", "title"]], "nilearn.plotting.displays.YSlicer": [[366, 2, 1, "", "__init__"], [366, 2, 1, "", "add_contours"], [366, 2, 1, "", "add_edges"], [366, 2, 1, "", "add_markers"], [366, 2, 1, "", "add_overlay"], [366, 2, 1, "", "annotate"], [366, 5, 1, "", "black_bg"], [366, 5, 1, "", "brain_color"], [366, 2, 1, "", "close"], [366, 2, 1, "", "draw_cross"], [366, 2, 1, "", "find_cut_coords"], [366, 2, 1, "", "init_with_figure"], [366, 2, 1, "", "savefig"], [366, 2, 1, "", "title"]], "nilearn.plotting.displays.YXProjector": [[367, 2, 1, "", "__init__"], [367, 2, 1, "", "add_contours"], [367, 2, 1, "", "add_edges"], [367, 2, 1, "", "add_graph"], [367, 2, 1, "", "add_markers"], [367, 2, 1, "", "add_overlay"], [367, 2, 1, "", "annotate"], [367, 5, 1, "", "black_bg"], [367, 5, 1, "", "brain_color"], [367, 2, 1, "", "close"], [367, 2, 1, "", "draw_cross"], [367, 2, 1, "", "find_cut_coords"], [367, 2, 1, "", "init_with_figure"], [367, 2, 1, "", "savefig"], [367, 2, 1, "", "title"]], "nilearn.plotting.displays.YXSlicer": [[368, 2, 1, "", "__init__"], [368, 2, 1, "", "add_contours"], [368, 2, 1, "", "add_edges"], [368, 2, 1, "", "add_markers"], [368, 2, 1, "", "add_overlay"], [368, 2, 1, "", "annotate"], [368, 5, 1, "", "black_bg"], [368, 5, 1, "", "brain_color"], [368, 2, 1, "", "close"], [368, 2, 1, "", "draw_cross"], [368, 2, 1, "", "find_cut_coords"], [368, 2, 1, "", "init_with_figure"], [368, 2, 1, "", "savefig"], [368, 2, 1, "", "title"]], "nilearn.plotting.displays.YZProjector": [[369, 2, 1, "", "__init__"], [369, 2, 1, "", "add_contours"], [369, 2, 1, "", "add_edges"], [369, 2, 1, "", "add_graph"], [369, 2, 1, "", "add_markers"], [369, 2, 1, "", "add_overlay"], [369, 2, 1, "", "annotate"], [369, 5, 1, "", "black_bg"], [369, 5, 1, "", "brain_color"], [369, 2, 1, "", "close"], [369, 2, 1, "", "draw_cross"], [369, 2, 1, "", "find_cut_coords"], [369, 2, 1, "", "init_with_figure"], [369, 2, 1, "", "savefig"], [369, 2, 1, "", "title"]], "nilearn.plotting.displays.YZSlicer": [[370, 2, 1, "", "__init__"], [370, 2, 1, "", "add_contours"], [370, 2, 1, "", "add_edges"], [370, 2, 1, "", "add_markers"], [370, 2, 1, "", "add_overlay"], [370, 2, 1, "", "annotate"], [370, 5, 1, "", "black_bg"], [370, 5, 1, "", "brain_color"], [370, 2, 1, "", "close"], [370, 2, 1, "", "draw_cross"], [370, 2, 1, "", "find_cut_coords"], [370, 2, 1, "", "init_with_figure"], [370, 2, 1, "", "savefig"], [370, 2, 1, "", "title"]], "nilearn.plotting.displays.ZProjector": [[371, 2, 1, "", "__init__"], [371, 2, 1, "", "add_contours"], [371, 2, 1, "", "add_edges"], [371, 2, 1, "", "add_graph"], [371, 2, 1, "", "add_markers"], [371, 2, 1, "", "add_overlay"], [371, 2, 1, "", "annotate"], [371, 5, 1, "", "black_bg"], [371, 5, 1, "", "brain_color"], [371, 2, 1, "", "close"], [371, 2, 1, "", "draw_cross"], [371, 2, 1, "", "find_cut_coords"], [371, 2, 1, "", "init_with_figure"], [371, 2, 1, "", "savefig"], [371, 2, 1, "", "title"]], "nilearn.plotting.displays.ZSlicer": [[372, 2, 1, "", "__init__"], [372, 2, 1, "", "add_contours"], [372, 2, 1, "", "add_edges"], [372, 2, 1, "", "add_markers"], [372, 2, 1, "", "add_overlay"], [372, 2, 1, "", "annotate"], [372, 5, 1, "", "black_bg"], [372, 5, 1, "", "brain_color"], [372, 2, 1, "", "close"], [372, 2, 1, "", "draw_cross"], [372, 2, 1, "", "find_cut_coords"], [372, 2, 1, "", "init_with_figure"], [372, 2, 1, "", "savefig"], [372, 2, 1, "", "title"]], "nilearn.regions": [[405, 1, 1, "", "HierarchicalKMeans"], [406, 1, 1, "", "Parcellations"], [407, 1, 1, "", "ReNA"], [408, 1, 1, "", "RegionExtractor"], [409, 3, 1, "", "connected_label_regions"], [410, 3, 1, "", "connected_regions"], [411, 3, 1, "", "img_to_signals_labels"], [412, 3, 1, "", "img_to_signals_maps"], [413, 3, 1, "", "recursive_neighbor_agglomeration"], [414, 3, 1, "", "signals_to_img_labels"], [415, 3, 1, "", "signals_to_img_maps"]], "nilearn.regions.HierarchicalKMeans": [[405, 2, 1, "", "__init__"], [405, 2, 1, "", "fit"], [405, 2, 1, "", "fit_predict"], [405, 2, 1, "", "fit_transform"], [405, 2, 1, "", "get_metadata_routing"], [405, 2, 1, "", "get_params"], [405, 2, 1, "", "inverse_transform"], [405, 2, 1, "", "set_inverse_transform_request"], [405, 2, 1, "", "set_output"], [405, 2, 1, "", "set_params"], [405, 2, 1, "", "transform"]], "nilearn.regions.Parcellations": [[406, 4, 1, "", "VALID_METHODS"], [406, 2, 1, "", "__init__"], [406, 2, 1, "", "fit"], [406, 2, 1, "", "fit_transform"], [406, 2, 1, "", "get_metadata_routing"], [406, 2, 1, "", "get_params"], [406, 2, 1, "", "inverse_transform"], [406, 2, 1, "", "score"], [406, 2, 1, "", "set_fit_request"], [406, 2, 1, "", "set_inverse_transform_request"], [406, 2, 1, "", "set_output"], [406, 2, 1, "", "set_params"], [406, 2, 1, "", "set_score_request"], [406, 2, 1, "", "set_transform_request"], [406, 2, 1, "", "transform"]], "nilearn.regions.ReNA": [[407, 2, 1, "", "__init__"], [407, 2, 1, "", "fit"], [407, 2, 1, "", "fit_predict"], [407, 2, 1, "", "fit_transform"], [407, 2, 1, "", "get_metadata_routing"], [407, 2, 1, "", "get_params"], [407, 2, 1, "", "inverse_transform"], [407, 2, 1, "", "set_inverse_transform_request"], [407, 2, 1, "", "set_output"], [407, 2, 1, "", "set_params"], [407, 2, 1, "", "transform"]], "nilearn.regions.RegionExtractor": [[408, 2, 1, "", "__init__"], [408, 2, 1, "", "fit"], [408, 2, 1, "", "fit_transform"], [408, 2, 1, "", "generate_report"], [408, 2, 1, "", "get_metadata_routing"], [408, 2, 1, "", "get_params"], [408, 2, 1, "", "inverse_transform"], [408, 2, 1, "", "set_fit_request"], [408, 2, 1, "", "set_inverse_transform_request"], [408, 2, 1, "", "set_output"], [408, 2, 1, "", "set_params"], [408, 2, 1, "", "set_transform_request"], [408, 2, 1, "", "transform"], [408, 2, 1, "", "transform_single_imgs"]], "nilearn.reporting": [[416, 1, 1, "", "HTMLReport"], [417, 3, 1, "", "get_clusters_table"], [418, 3, 1, "", "make_glm_report"]], "nilearn.reporting.HTMLReport": [[416, 2, 1, "", "__init__"], [416, 2, 1, "", "get_iframe"], [416, 2, 1, "", "get_standalone"], [416, 2, 1, "", "open_in_browser"], [416, 2, 1, "", "remove_temp_file"], [416, 2, 1, "", "resize"], [416, 2, 1, "", "save_as_html"]], "nilearn.signal": [[419, 3, 1, "", "butterworth"], [420, 3, 1, "", "clean"], [421, 3, 1, "", "high_variance_confounds"]], "nilearn.surface": [[422, 3, 1, "", "load_surf_data"], [423, 3, 1, "", "load_surf_mesh"], [424, 3, 1, "", "vol_to_surf"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"]}, "titleterms": {"team": 0, "core": 0, "develop": [0, 48, 49, 50, 51, 58, 99, 438], "other": [0, 21, 164], "contributor": [0, 127, 129, 132, 136, 139, 140, 141, 142, 143, 144, 154], "fund": 0, "cite": 0, "nilearn": [0, 4, 12, 13, 14, 15, 16, 21, 29, 34, 160, 161, 169, 175, 176, 178, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438], "scikit": [0, 35, 98, 111, 117, 164, 181], "learn": [0, 35, 48, 49, 50, 98, 111, 117, 159, 160, 164, 176, 181], "basic": [1, 4, 5, 10, 66, 113], "tutori": [1, 2, 3, 113], "3d": [2, 9, 22, 52, 54, 58, 88, 179, 437], "4d": [2, 21, 117, 179, 180], "niimg": [2, 179], "handl": 2, "visual": [2, 3, 8, 9, 10, 11, 15, 16, 19, 20, 21, 22, 25, 26, 29, 30, 31, 36, 37, 40, 41, 42, 43, 49, 52, 54, 58, 81, 84, 98, 107, 113, 117, 158, 159, 160, 161, 166, 181, 437], "download": [2, 3, 49, 98, 117, 118, 179], "dataset": [2, 6, 11, 15, 16, 17, 18, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 48, 49, 50, 51, 53, 58, 61, 62, 65, 75, 76, 79, 80, 99, 101, 105, 106, 108, 159, 163, 168, 169, 179, 183, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250], "from": [2, 3, 11, 15, 16, 24, 26, 28, 33, 39, 40, 41, 48, 49, 50, 56, 58, 62, 89, 91, 94, 98, 100, 105, 106, 113, 117, 118, 156, 165, 179, 180, 181, 428, 429], "internet": [2, 179], "file": [2, 4, 15, 29, 56, 72, 179, 437], "one": [2, 50, 62, 79, 180], "volum": [2, 3, 9, 24, 25, 66, 83, 113, 178, 180, 181], "loop": [2, 3], "all": [2, 14, 161], "through": 2, "select": [2, 98, 118, 155, 161], "A": [3, 4, 44, 66, 111, 156, 161, 171], "introduct": [3, 161, 171, 176], "fmri": [3, 6, 35, 48, 49, 51, 58, 64, 65, 67, 69, 76, 79, 80, 98, 99, 104, 155, 156, 161, 171, 172], "decod": [3, 28, 29, 30, 31, 32, 33, 34, 35, 37, 41, 43, 98, 100, 111, 113, 161, 163, 164, 165, 167, 184, 251, 252, 253, 254, 255, 256, 257], "retriev": [3, 6, 10, 15, 16, 17, 19, 23, 29, 52, 54, 56, 58, 66, 98], "load": [3, 13, 14, 18, 22, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 47, 48, 51, 56, 75, 94, 98, 99, 117, 158, 161, 179, 181, 428], "data": [3, 4, 6, 9, 10, 11, 13, 14, 15, 16, 17, 22, 23, 25, 29, 30, 32, 33, 35, 39, 40, 41, 42, 44, 47, 48, 49, 52, 54, 55, 56, 57, 61, 64, 66, 67, 69, 71, 75, 89, 94, 98, 100, 103, 107, 117, 155, 158, 160, 161, 164, 166, 171, 179, 180, 181, 430, 432, 436], "haxbi": [3, 18, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 98, 161, 163], "studi": [3, 51, 98, 103, 107, 108, 163], "first": [3, 4, 15, 41, 60, 61, 62, 66, 69, 98, 100, 101, 108, 113, 161, 170, 176, 181], "featur": [3, 15, 98, 127, 130, 154, 161, 175], "extract": [3, 23, 25, 33, 47, 50, 51, 52, 53, 54, 55, 56, 58, 61, 70, 87, 88, 89, 91, 155, 156, 159, 160, 170, 180, 181, 429], "matrix": [3, 31, 35, 49, 52, 54, 56, 58, 78, 155, 156, 170], "behavior": [3, 29, 33, 179], "label": [3, 11, 56, 86, 177], "restrict": [3, 36, 37], "analysi": [3, 6, 32, 36, 42, 55, 60, 61, 62, 64, 65, 67, 69, 74, 75, 81, 97, 100, 101, 102, 104, 105, 106, 107, 108, 113, 161, 164, 166, 170, 171, 431], "cat": 3, "face": [3, 29, 30, 31, 36, 37, 102], "support": 3, "vector": 3, "machin": [3, 117, 176], "measur": [3, 47, 98, 161, 164], "predict": [3, 28, 29, 34, 35, 41, 42, 43, 70, 98, 99, 113, 161, 162, 165, 170], "score": [3, 6, 29, 34, 35, 36, 40, 166], "us": [3, 9, 15, 34, 35, 39, 48, 50, 51, 56, 87, 88, 91, 92, 98, 111, 118, 158, 159, 161, 164, 172, 176, 177, 179, 187, 189, 196, 198, 199, 201, 202, 203, 204, 205, 208, 209, 211, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 245, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 271, 278, 279, 280, 283, 285, 286, 290, 292, 296, 297, 298, 299, 301, 302, 303, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 343, 344, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 408, 409, 410, 416, 417, 418, 422, 423, 424, 437], "cross": [3, 29, 34, 35, 98, 103, 161, 164, 166, 168], "valid": [3, 29, 34, 35, 98, 159, 161, 164, 166, 168], "manual": [3, 94, 116, 180], "leav": 3, "out": 3, "implement": 3, "kfold": 3, "inspect": 3, "model": [3, 40, 42, 62, 64, 65, 66, 67, 68, 70, 76, 77, 79, 80, 100, 101, 160, 162, 163, 164, 170, 171, 173, 425], "weight": [3, 31, 98, 161], "turn": [3, 49], "nifti": [3, 55, 179, 180], "imag": [3, 4, 8, 9, 16, 17, 28, 69, 81, 83, 85, 90, 93, 95, 97, 103, 107, 111, 113, 117, 118, 165, 179, 180, 181, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 426, 429, 437], "plot": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 24, 31, 32, 34, 35, 44, 47, 50, 55, 58, 66, 68, 70, 80, 107, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 432, 437], "svm": [3, 29, 98, 161, 164], "what": [3, 51, 99, 154, 169, 171, 176], "i": [3, 51, 99, 171, 176, 179, 181], "chanc": [3, 98, 161, 164], "level": [3, 60, 61, 62, 66, 69, 74, 76, 77, 78, 79, 80, 81, 98, 101, 108, 113, 155, 161, 164, 170, 173], "accuraci": [3, 161], "further": [3, 44, 98, 117, 164, 166], "read": [3, 166, 179], "exampl": [4, 33, 39, 44, 63, 64, 67, 68, 69, 77, 78, 92, 101, 108, 110, 113, 118, 155, 156, 158, 160, 161, 166, 167, 175, 176, 180, 181, 187, 189, 196, 198, 199, 201, 202, 203, 204, 205, 208, 209, 211, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 245, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 263, 264, 265, 266, 267, 268, 271, 278, 279, 280, 283, 285, 286, 290, 292, 296, 297, 298, 299, 301, 302, 303, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 343, 344, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 408, 409, 410, 416, 417, 418, 422, 423, 424, 437], "manipul": [4, 83, 113, 178, 180, 436], "look": 4, "step": [4, 176, 181], "our": [4, 41], "simpl": [4, 32, 44, 62, 64, 78, 81, 92, 161], "smooth": [4, 66, 95, 180, 181], "save": [4, 15, 55, 62, 437], "result": [4, 9, 29, 32, 50, 53, 80, 81, 117, 158, 159, 160, 161], "numer": [5, 168], "python": [5, 179], "intro": 6, "glm": [6, 33, 60, 64, 67, 74, 113, 171, 172, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 425], "singl": [6, 15, 55, 71], "session": [6, 33, 64, 71], "subject": [6, 51, 53, 55, 62, 71, 79, 155, 160, 181], "The": [6, 35, 56, 66, 86, 161, 167, 181], "specifi": 6, "experiment": [6, 78, 110, 113, 186, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269], "paradigm": [6, 78, 107], "perform": [6, 55, 61, 69, 81, 98, 161, 163, 164], "detect": 6, "voxel": [6, 42, 43, 55, 75, 94, 166, 173, 180], "signific": [6, 70], "effect": [6, 67], "threshold": [6, 62, 173], "z": [6, 55, 107], "map": [6, 9, 12, 16, 17, 21, 30, 40, 42, 43, 47, 48, 55, 88, 94, 100, 103, 107, 118, 159, 161, 163, 167, 173, 183, 437], "an": [6, 9, 44, 58, 65, 72, 86, 90, 93, 95, 160, 161, 169, 171, 437], "f": [6, 36, 70], "test": [6, 70, 79, 80, 81, 94, 98, 169], "comput": [7, 27, 34, 35, 36, 37, 45, 50, 52, 53, 56, 58, 59, 73, 82, 89, 94, 96, 107, 109, 112, 114, 117, 155, 156, 159, 170, 180, 181, 439], "time": [7, 11, 23, 25, 27, 45, 52, 54, 55, 58, 59, 61, 66, 70, 73, 82, 89, 96, 109, 112, 114, 156, 168, 170, 176, 181, 435, 439], "brain": [8, 13, 14, 16, 19, 25, 28, 40, 42, 47, 48, 49, 50, 51, 56, 58, 83, 91, 97, 99, 113, 156, 158, 159, 160, 165, 178, 180, 429, 432, 437], "make": [9, 16, 32, 169, 177], "surfac": [9, 22, 23, 24, 37, 69, 108, 111, 170, 186, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 422, 423, 424, 436, 437], "statist": [9, 16, 62, 81, 88, 94, 97, 107, 113, 118, 171, 173, 183, 437], "get": [9, 24, 55, 70, 103, 169], "cortic": [9, 22, 37, 437], "mesh": [9, 24, 262, 437], "sampl": [9, 24, 68, 79, 80], "around": [9, 51, 58], "each": [9, 33], "node": 9, "interact": [9, 16, 155, 156, 432, 437], "plotli": 9, "comparison": [9, 163, 171, 173], "atla": [9, 10, 20, 21, 22, 47, 51, 52, 54, 56, 58, 86, 87, 99, 111, 156, 169], "choos": [9, 100, 161, 162], "region": [9, 50, 51, 53, 54, 61, 86, 87, 88, 91, 94, 156, 158, 159, 181, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 433], "outlin": 9, "displai": [9, 14, 15, 52, 53, 54, 56, 58, 79, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 432, 437], "interest": [9, 94], "top": 9, "higher": [9, 66], "resolut": [9, 180, 181], "multipl": [9, 15, 155, 171, 173, 181], "view": [9, 15], "web": [9, 22, 52, 54, 58], "browser": [9, 22, 52, 54, 58], "impact": [9, 56], "paramet": [9, 34, 61, 63, 64, 66, 67, 68, 69, 86, 98, 100, 155, 162, 164, 181], "harvard": 10, "oxford": 10, "juelich": 10, "contour": [10, 14, 437], "global": [11, 56], "pattern": [11, 44], "carpet": 11, "fetch": [11, 20, 25, 26, 33, 47, 50, 53, 62, 76, 79, 80, 101, 107, 108, 159, 179, 183], "adhd": [11, 61], "deriv": [11, 48, 66, 183], "mask": [11, 16, 18, 25, 32, 36, 41, 66, 89, 94, 98, 103, 117, 161, 164, 166, 180, 181, 335, 336, 337, 338, 339, 340, 341, 342, 343, 430], "over": [11, 47], "base": [11, 23, 32, 37, 42, 43, 56, 69, 75, 100, 108, 159, 170, 173], "separ": [11, 86], "tissu": 11, "type": 11, "matplotlib": [12, 34], "colormap": [12, 437], "color": 12, "glass": [13, 14, 16], "whole": 13, "sagitt": [13, 15], "cut": [13, 15], "black": 13, "background": [13, 17, 89], "hemispher": [13, 14, 69], "option": 14, "demo": [14, 111], "differ": [14, 30, 32, 34, 35, 44, 47, 86, 155, 162, 181, 437], "project": [14, 26, 69, 169, 177], "left": [14, 69], "right": [14, 15, 100, 162], "fill": [14, 437], "both": 14, "more": [15, 17, 164], "tool": [15, 16], "we": [15, 32, 35, 41, 169], "provid": [15, 16], "gener": [15, 16, 33, 44, 61, 62, 64, 72, 75, 77, 103, 115, 183, 425], "purpos": [15, 16], "coron": 15, "axial": 15, "given": [15, 180], "coordin": [15, 47, 58, 156], "number": [15, 168], "5": [15, 17, 132, 139, 140, 141, 154], "onli": [15, 50, 181], "two": [15, 64, 71, 80, 162], "slice": [15, 44, 437], "without": [15, 56, 98, 161, 164], "colorbar": 15, "side": 15, "chang": [15, 17, 66, 98, 124, 125, 126, 127, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 144, 145, 147, 148, 149, 150, 151, 152, 154, 181], "now": [15, 35, 52, 54], "ar": [15, 66], "three": [15, 100], "2x2": 15, "fashion": 15, "along": 15, "row": 15, "column": 15, "anoth": [15, 180], "wai": 15, "limit": 15, "demonstr": 15, "variou": 15, "show": [15, 38, 100, 399], "how": [15, 169, 177, 181], "add_edg": 15, "add_contour": 15, "seed": [15, 23, 55, 58, 61, 169, 181], "add_mark": 15, "annot": [15, 118], "function": [16, 19, 23, 41, 44, 46, 47, 50, 51, 54, 68, 99, 100, 113, 155, 156, 157, 159, 160, 164, 166, 169, 180, 182, 183, 434, 437], "plot_stat_map": [16, 20, 394], "view_img": [16, 401], "plot_glass_brain": [16, 386], "anatom": 16, "plot_anat": [16, 379], "roi": [16, 32, 51, 94, 180], "here": [16, 41], "plot_roi": [16, 393], "epi": [16, 89], "plot_epi": [16, 384], "control": [17, 164, 181], "contrast": [17, 61, 62, 66, 69, 70, 170, 271], "when": [17, 179], "local": [17, 72, 105, 106], "enhanc": [17, 124, 125, 126, 127, 129, 133, 134, 135, 136, 137, 139, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 169], "dim": 17, "0": [17, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154], "decreas": [17, 179], "1": [17, 66, 119, 120, 121, 122, 123, 125, 128, 132, 135, 137, 140, 143, 146, 148, 150, 154], "multiscal": 19, "parcel": [19, 47, 49, 56, 156, 158, 159, 406], "group": [19, 48, 51, 53, 99, 108, 155, 168], "probabilist": [20, 21, 47, 54, 156], "default": [20, 58, 61, 87], "mode": [20, 58, 61, 86, 87, 437], "msdl": [20, 51, 99], "add_overlai": 20, "object": [20, 29, 31, 34, 62, 101, 108, 160, 179, 181], "plot_prob_atla": [20, 392], "atlas": [21, 47, 156, 169, 183, 437], "access": [21, 180], "refer": [22, 23, 47, 49, 56, 58, 100, 102, 118, 155, 156, 158, 159, 160, 162, 163, 166, 167, 176, 427], "fetcher": [22, 169], "connect": [23, 46, 47, 51, 56, 57, 86, 99, 100, 111, 113, 155, 157, 159, 182], "seri": [23, 25, 52, 54, 55, 58, 70, 89, 100, 156, 170, 181, 435], "calcul": [23, 70, 106], "technic": 24, "point": [24, 181], "illustr": 24, "scheme": 24, "build": [24, 33, 35, 40, 54, 94, 117, 156, 169, 177], "cylind": 24, "locat": 24, "which": [24, 158], "vol_to_surf": [24, 424], "would": 24, "draw": 24, "its": 24, "adjust": 24, "neuroimag": [25, 117, 162, 176, 179, 181], "appli": [25, 48, 117, 158, 180, 181], "correspond": [25, 52, 54], "megatrawl": 26, "network": [26, 50, 58, 61, 87, 160], "matric": [26, 53, 63, 100, 159, 181], "human": 26, "connectom": [26, 47, 50, 52, 53, 58, 155, 156, 182, 187, 188, 189, 190, 191, 192, 193, 194, 437], "anova": [29, 34, 98, 161, 164], "v": [29, 30, 31, 36, 102], "hous": [29, 30, 31, 36, 37, 102], "pipelin": [29, 33, 34, 111, 116, 117, 163, 164, 181], "fit": [29, 31, 33, 34, 39, 43, 62, 64, 67, 70, 101, 108, 160, 170, 173], "obtain": [29, 62, 101, 108], "via": 29, "classifi": [30, 166], "train": 30, "frem": [31, 39, 163], "chair": 31, "recognit": [31, 36, 44, 102], "confus": [31, 35], "et": [32, 38, 39, 40, 41], "al": [32, 38, 39, 40, 41], "prepar": [32, 35, 36, 41, 61, 64, 67, 69, 81, 100, 161, 166, 177, 180, 181], "bar": [32, 437], "summar": 32, "after": [33, 89], "signal": [33, 51, 53, 54, 56, 58, 91, 156, 181, 419, 420, 421, 429, 435], "proper": 33, "event": [33, 72, 170], "structur": [33, 57, 167, 169], "instanti": 33, "run": [33, 41, 44, 66, 103, 164], "firstlevelmodel": [33, 62, 101, 108, 283], "report": [33, 58, 61, 62, 64, 75, 169, 416, 417, 418, 434], "set": [34, 162, 164, 166, 169], "respons": [34, 37, 65, 66, 68], "valu": [34, 168], "screen": 34, "percentil": 34, "nest": 34, "multi": [35, 53, 160, 162], "class": [35, 162], "strategi": [35, 56, 161, 181], "barplot": 35, "searchlight": [36, 37, 166, 255], "bold": [37, 171], "stimuli": [38, 40, 41], "jimura": 39, "mix": [39, 163], "gambl": [39, 163], "experi": [39, 117, 161], "tv": 39, "l1": 39, "spacenet": [39, 43, 167], "encod": 40, "miyawaki": [40, 41], "2008": [40, 41], "estim": [40, 44, 57, 58, 61, 62, 64, 66, 67, 69, 76, 77, 79, 80, 98, 101, 161, 162, 164, 168], "recept": 40, "field": 40, "reconstruct": 41, "Then": 41, "defin": [41, 56, 63, 68, 100], "itself": 41, "let": 41, "u": 41, "quantifi": 41, "error": 41, "morphometri": [42, 43, 75, 173], "oasi": [42, 43, 75], "vbm": [42, 43, 75], "bio": 42, "marker": [42, 437], "ag": [42, 51, 75, 99], "mass": [42, 431], "univari": [42, 102, 105, 106, 166, 431], "preprocess": [42, 117, 183, 435], "qualiti": [42, 43, 94], "infer": 42, "massiv": [42, 102, 105, 106, 166], "space": [43, 71, 155], "net": 43, "prior": 43, "simul": [44, 57, 155, 164], "creat": [44, 63, 78, 180], "exercis": [44, 155, 156, 181], "go": [44, 98, 107, 117, 164], "compar": [47, 48, 49, 85, 100, 155, 166], "yeo": [47, 86], "direct": [47, 155], "asymmetr": 47, "iter": [47, 168], "spatial": [48, 163, 167, 180], "ica": [48, 103, 160], "dictionari": [48, 50, 159, 160], "canica": [48, 160, 258], "cluster": [49, 70, 76, 158], "method": [49, 117], "ward": 49, "compress": [49, 158], "represent": [49, 158, 179], "kmean": 49, "hierarch": 49, "those": 49, "rena": [49, 407], "correl": [50, 51, 54, 55, 56, 58, 155, 156], "coeffici": 50, "specif": [50, 118, 180], "classif": [51, 99, 162], "children": 51, "partial": [51, 58], "variabl": 51, "kind": [51, 99], "most": [51, 70, 99], "power": [51, 99], "spars": [52, 53, 155, 168], "invers": [52, 53, 155, 181], "covari": [52, 53, 155, 168], "And": [52, 54], "graph": [52, 54, 58, 156], "precis": 53, "produc": 55, "fisher": 55, "transform": [55, 180, 181], "confound": [56, 66, 181], "remov": [56, 66, 181], "flexibl": 56, "fmriprep": [56, 324, 325, 428], "interfac": [56, 321, 322, 323, 324, 325, 326, 428], "motion": 56, "scrub": 56, "predefin": 56, "sphere": [58, 166], "dmn": 58, "summari": [58, 127, 154, 155, 156, 159, 160, 170, 173], "within": 58, "averag": 58, "strength": 58, "dosenbach": 58, "": [58, 61, 98, 154, 161], "see": 58, "also": 58, "cours": 61, "complet": 62, "bid": [62, 101, 108, 321, 322, 323, 428], "openneuro": 62, "automat": [62, 101, 108, 117, 183], "argument": [62, 101, 108, 181], "output": [62, 118, 179], "disk": 62, "design": [63, 66, 77, 78, 100, 170, 181], "finit": 65, "impul": 65, "fir": 65, "understand": [66, 89, 179, 181], "drift": 66, "hemodynam": 66, "ad": [66, 169, 437], "nois": 66, "ol": 66, "order": 66, "censor": 66, "conclus": 66, "explicit": 67, "fix": [67, 122, 124, 125, 126, 127, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154], "mri": 68, "stimulu": 68, "analys": [69, 75], "residu": [70, 170], "import": [70, 438], "modul": [70, 110, 113, 186], "largest": 70, "actual": 70, "6": [70, 133, 142, 143, 144, 154], "distribut": [70, 177], "r": 70, "squar": 70, "nativ": 71, "tsv": 72, "neurospin": 72, "task": [72, 100, 105, 106], "second": [74, 76, 77, 78, 79, 80, 81, 101, 108, 113, 173], "true": 76, "posit": 76, "proport": 76, "t_map": 79, "unpair": 80, "pair": 80, "some": 81, "t": [81, 88], "affin": [84, 179, 180], "resampl": [84, 89, 93, 180, 181, 426], "mean": 85, "2": [85, 121, 126, 127, 128, 129, 130, 131, 132, 133, 138, 141, 144, 151, 154], "break": 86, "origin": 86, "relabel": 86, "min_siz": 86, "smith": 87, "niftimask": [89, 92, 181, 333], "raw": 89, "mni": 89, "templat": [89, 93, 183], "negat": 90, "math_img": [90, 312], "niftilabelsmask": [91, 181, 331], "find": [94, 166, 176], "thi": 94, "improv": 94, "advanc": [97, 98, 113, 116, 181], "tune": 98, "dummi": 98, "permut": 98, "lean": 98, "svc": 98, "discrimin": 98, "engin": 98, "beta": [100, 134, 139, 154, 161], "your": [100, 117, 169], "standard": 100, "lsa": 100, "aggreg": 100, "condit": 100, "lss": 100, "few": [100, 161], "trial": 100, "approach": [100, 155], "applic": [100, 176], "quick": 101, "saniti": 101, "check": [101, 438], "neurovault": [103, 107, 118], "term": 103, "reshap": 103, "compon": [103, 104, 160, 428], "figur": [103, 432], "multivari": [104, 185], "decomposit": [104, 185, 258, 259], "independ": 104, "motor": 105, "meta": 107, "stop": [107, 168], "success": 107, "minu": 107, "like": [107, 179], "protocol": 107, "combin": 107, "short": 111, "masker": [111, 181, 327, 328, 329, 330, 331, 332, 333, 334, 429], "surfacelabelsmask": [111, 265], "bibliographi": 115, "usag": [116, 181], "scale": [116, 437], "up": [116, 166, 169], "own": 117, "non": 117, "descript": [117, 168], "2d": [117, 180], "arrai": [117, 180], "unmask": [117, 181, 343], "inverse_transform": 117, "repositori": 118, "collect": 118, "filter": [118, 181], "neurosynth": 118, "changelog": [119, 120, 121, 122, 127, 128, 130, 154, 169], "3": [122, 130, 134, 135, 154], "4": [123, 131, 136, 137, 138, 154], "highlight": [123, 124, 126, 134, 135, 136, 139, 142, 145, 146, 147, 148, 149, 151, 152, 154], "10": [124, 125, 126, 154], "new": [124, 125, 126, 127, 129, 130, 131, 132, 139, 140, 141, 142, 145, 146, 147, 148, 149, 151, 152, 154], "1rc1": [125, 154], "bug": [127, 130, 137, 154, 169], "api": [127, 154, 176, 427], "rc": [139, 154], "alpha": [139, 154, 168], "known": [140, 154], "issu": [140, 154, 177], "0rc": [142, 154], "0b0": [142, 154], "0a0": [142, 154], "7": [145, 146, 154], "8": [147, 148, 154], "9": [149, 150, 151, 154], "11": [152, 154], "dev": [152, 154], "page": [155, 156, 159, 160, 170, 173], "full": [155, 156, 161], "rest": [155, 156, 157], "link": [155, 438], "total": 155, "tangent": 155, "maxprob": 156, "state": 157, "movi": [158, 159], "watch": [158, 159], "code": [158, 161, 163, 166, 169, 177, 180, 437], "better": [159, 167, 181], "relat": [160, 167], "interpret": 160, "altern": 160, "2001": 161, "definit": [161, 181], "made": 161, "easi": 161, "good": 161, "choic": 161, "put": 161, "togeth": 161, "dimens": 161, "reduct": 161, "final": 161, "script": 161, "regress": 162, "linear": [162, 425], "bag": 162, "sever": 162, "fast": 163, "ensembl": 163, "regular": 163, "robust": 163, "empir": 163, "increas": 163, "ani": 164, "mvpa": 165, "contain": 166, "inform": 166, "principl": [166, 168], "radiu": 166, "f_score": 166, "spm": 166, "stabil": 168, "execut": 168, "synthet": 168, "criteria": 168, "maximum": 168, "dualiti": 168, "gap": 168, "variat": 168, "norm": 168, "initi": 168, "modifi": 168, "criterion": 168, "algorithm": 168, "bound": 168, "grid": 168, "search": 168, "warm": 168, "restart": 168, "contribut": 169, "conduct": 169, "help": [169, 176], "discuss": 169, "idea": 169, "answer": 169, "question": 169, "review": 169, "pull": [169, 177], "request": [169, 177], "do": 169, "decid": 169, "goe": 169, "scope": 169, "who": 169, "decis": 169, "guidelin": 169, "pr": 169, "style": 169, "privat": 169, "pre": 169, "commit": 169, "fixtur": 169, "document": [169, 177], "environ": 169, "instal": [169, 438], "recommend": 169, "addit": 169, "case": [169, 180], "mainten": [169, 177], "hrf": 170, "primer": 171, "analyz": [172, 179], "correct": 173, "glossari": 174, "organ": 177, "close": 177, "polici": 177, "tox": 177, "releas": [177, 438], "upload": 177, "them": 177, "pypi": 177, "deploi": 177, "post": 177, "input": 179, "name": 179, "match": [179, 180], "glob": 179, "user": [179, 440], "path": 179, "expans": 179, "open": [179, 181], "nilearn_data": 179, "where": 179, "store": 179, "format": 179, "shape": [179, 180], "memori": 179, "text": 179, "phenotyp": 179, "csv": 179, "panda": 179, "target": 180, "special": 180, "size": 180, "individu": 180, "oper": [180, 433], "concept": 181, "philosophi": 181, "custom": 181, "100": 181, "extra": 181, "cutoff": 181, "common": 181, "dtype": 181, "tempor": 181, "resiz": 181, "niftimapsmask": [181, 332], "multiniftimask": [181, 330], "multiniftilabelsmask": [181, 328], "multiniftimapsmask": [181, 329], "niftispheresmask": [181, 334], "connectivitymeasur": 187, "groupsparsecovari": 188, "groupsparsecovariancecv": 189, "cov_to_corr": 190, "group_sparse_covari": 191, "prec_to_parti": 192, "sym_matrix_to_vec": 193, "vec_to_sym_matrix": 194, "fetch_abide_pcp": 195, "fetch_adhd": 196, "fetch_atlas_a": 197, "fetch_atlas_allen_2011": 198, "fetch_atlas_basc_multiscale_2015": 199, "fetch_atlas_craddock_2012": 200, "fetch_atlas_destrieux_2009": 201, "fetch_atlas_difumo": 202, "fetch_atlas_harvard_oxford": 203, "fetch_atlas_juelich": 204, "fetch_atlas_msdl": 205, "fetch_atlas_pauli_2017": 206, "fetch_atlas_schaefer_2018": 207, "fetch_atlas_smith_2009": 208, "fetch_atlas_surf_destrieux": 209, "fetch_atlas_talairach": 210, "fetch_atlas_yeo_2011": 211, "fetch_bids_langloc_dataset": 212, "fetch_coords_dosenbach_2010": 213, "fetch_coords_power_2011": 214, "fetch_coords_seitzman_2018": 215, "fetch_development_fmri": 216, "fetch_ds000030_url": 217, "fetch_fiac_first_level": 218, "fetch_haxbi": 219, "fetch_icbm152_2009": 220, "fetch_icbm152_brain_gm_mask": 221, "fetch_language_localizer_demo_dataset": 222, "fetch_localizer_button_task": 223, "fetch_localizer_calculation_task": 224, "fetch_localizer_contrast": 225, "fetch_localizer_first_level": 226, "fetch_megatrawls_netmat": 227, "fetch_mixed_gambl": 228, "fetch_miyawaki2008": 229, "fetch_neurovault": 230, "fetch_neurovault_auditory_computation_task": 231, "fetch_neurovault_id": 232, "fetch_neurovault_motor_task": 233, "fetch_oasis_vbm": 234, "fetch_openneuro_dataset": 235, "fetch_openneuro_dataset_index": 236, "fetch_spm_auditori": 237, "fetch_spm_multimodal_fmri": 238, "fetch_surf_fsaverag": 239, "fetch_surf_nki_enhanc": 240, "get_data_dir": 241, "load_mni152_brain_mask": 242, "load_mni152_gm_mask": 243, "load_mni152_gm_templ": 244, "load_mni152_templ": 245, "load_mni152_wm_mask": 246, "load_mni152_wm_templ": 247, "load_sample_motor_activation_imag": 248, "patch_openneuro_dataset": 249, "select_from_index": 250, "decoderregressor": 252, "fremclassifi": 253, "fremregressor": 254, "spacenetclassifi": 256, "spacenetregressor": 257, "dictlearn": 259, "filemesh": 260, "inmemorymesh": 261, "polymesh": 263, "surfaceimag": 264, "surfacemask": 266, "fetch_destrieux": 267, "fetch_nki": 268, "load_fsaverag": 269, "armodel": 270, "fcontrastresult": 272, "likelihoodmodelresult": 273, "olsmodel": 274, "regressionresult": 275, "simpleregressionresult": 276, "tcontrastresult": 277, "cluster_level_infer": 278, "compute_contrast": 279, "compute_fixed_effect": 280, "expression_to_contrast_vector": 281, "fdr_threshold": 282, "first_level": [283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 425], "check_design_matrix": 284, "compute_regressor": 285, "first_level_from_bid": 286, "glover_dispersion_deriv": 287, "glover_hrf": 288, "glover_time_deriv": 289, "make_first_level_design_matrix": 290, "mean_scal": 291, "run_glm": 292, "spm_dispersion_deriv": 293, "spm_hrf": 294, "spm_time_deriv": 295, "second_level": [296, 297, 298, 425], "secondlevelmodel": 296, "make_second_level_design_matrix": 297, "non_parametric_infer": 298, "threshold_stats_img": 299, "binarize_img": 300, "clean_img": 301, "concat_img": 302, "coord_transform": 303, "copy_img": 304, "crop_img": 305, "get_data": 306, "high_variance_confound": [307, 421], "index_img": 308, "iter_img": 309, "largest_connected_component_img": 310, "load_img": 311, "mean_img": 313, "new_img_lik": 314, "reorder_img": 315, "resample_img": 316, "resample_to_img": 317, "smooth_img": 318, "swap_img_hemispher": 319, "threshold_img": 320, "get_bids_fil": 321, "parse_bids_filenam": 322, "save_glm_to_bid": 323, "load_confound": 324, "load_confounds_strategi": 325, "fsl": [326, 428], "get_design_from_fslmat": 326, "basemask": 327, "apply_mask": 335, "compute_background_mask": 336, "compute_brain_mask": 337, "compute_epi_mask": 338, "compute_multi_background_mask": 339, "compute_multi_brain_mask": 340, "compute_multi_epi_mask": 341, "intersect_mask": 342, "mass_univari": [344, 431], "permuted_ol": 344, "baseax": 345, "baseslic": 346, "cutax": 347, "glassbrainax": 348, "lprojector": 349, "lrprojector": 350, "lyrprojector": 351, "lyrzprojector": 352, "lzrprojector": 353, "lzryprojector": 354, "mosaicslic": 355, "orthoprojector": 356, "orthoslic": 357, "plotlysurfacefigur": 358, "rprojector": 359, "tiledslic": 360, "xprojector": 361, "xslicer": 362, "xzprojector": 363, "xzslicer": 364, "yprojector": 365, "yslicer": 366, "yxprojector": 367, "yxslicer": 368, "yzprojector": 369, "yzslicer": 370, "zprojector": 371, "zslicer": 372, "get_projector": 373, "get_slic": 374, "find_cut_slic": 375, "find_parcellation_cut_coord": 376, "find_probabilistic_atlas_cut_coord": 377, "find_xyz_cut_coord": 378, "plot_carpet": 380, "plot_connectom": 381, "plot_contrast_matrix": 382, "plot_design_matrix": 383, "plot_ev": 385, "plot_img": 387, "plot_img_comparison": 388, "plot_img_on_surf": 389, "plot_mark": 390, "plot_matrix": 391, "plot_surf": 395, "plot_surf_contour": 396, "plot_surf_roi": 397, "plot_surf_stat_map": [398, 437], "view_connectom": 400, "view_img_on_surf": [402, 437], "view_mark": 403, "view_surf": [404, 437], "hierarchicalkmean": 405, "regionextractor": 408, "connected_label_region": 409, "connected_region": 410, "img_to_signals_label": 411, "img_to_signals_map": 412, "recursive_neighbor_agglomer": 413, "signals_to_img_label": 414, "signals_to_img_map": 415, "htmlreport": 416, "get_clusters_t": 417, "make_glm_report": 418, "butterworth": 419, "clean": 420, "load_surf_data": 422, "load_surf_mesh": 423, "process": 426, "util": [426, 430], "avail": 437, "overlai": 437, "edg": 437, "quickstart": 438, "latest": 438, "version": 438, "drop": 438, "hour": 438, "depend": 438, "guid": 440, "tabl": 440, "content": 440}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9, "sphinx": 60}, "alltitles": {"Team": [[0, "team"]], "Core developers": [[0, "core-developers"]], "Other contributors": [[0, "other-contributors"]], "Funding": [[0, "funding"]], "Citing nilearn": [[0, "citing-nilearn"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Basic tutorials": [[1, "basic-tutorials"], [113, "basic-tutorials"]], "3D and 4D niimgs: handling and visualizing": [[2, "d-and-4d-niimgs-handling-and-visualizing"]], "Downloading tutorial datasets from Internet": [[2, "downloading-tutorial-datasets-from-internet"]], "Visualizing a 3D file": [[2, "visualizing-a-3d-file"]], "Visualizing one volume in a 4D file": [[2, "visualizing-one-volume-in-a-4d-file"]], "Looping on all volumes in a 4D file": [[2, "looping-on-all-volumes-in-a-4d-file"]], "Looping through selected volumes in a 4D file": [[2, "looping-through-selected-volumes-in-a-4d-file"]], "A introduction tutorial to fMRI decoding": [[3, "a-introduction-tutorial-to-fmri-decoding"]], "Retrieve and load the fMRI data from the Haxby study": [[3, "retrieve-and-load-the-fmri-data-from-the-haxby-study"], [98, "retrieve-and-load-the-fmri-data-from-the-haxby-study"]], "First download the data": [[3, "first-download-the-data"], [98, "first-download-the-data"]], "Visualizing the fMRI volume": [[3, "visualizing-the-fmri-volume"]], "Feature extraction: from fMRI volumes to a data matrix": [[3, "feature-extraction-from-fmri-volumes-to-a-data-matrix"]], "Load the behavioral labels": [[3, "load-the-behavioral-labels"]], "Restrict the analysis to cats and faces": [[3, "restrict-the-analysis-to-cats-and-faces"]], "Decoding with Support Vector Machine": [[3, "decoding-with-support-vector-machine"]], "Measuring prediction scores using cross-validation": [[3, "measuring-prediction-scores-using-cross-validation"]], "Manually leaving out data": [[3, "manually-leaving-out-data"]], "Implementing a KFold loop": [[3, "implementing-a-kfold-loop"]], "Cross-validation with the decoder": [[3, "cross-validation-with-the-decoder"]], "Inspecting the model weights": [[3, "inspecting-the-model-weights"]], "Turning the weights into a nifti image": [[3, "turning-the-weights-into-a-nifti-image"]], "Plotting the SVM weights": [[3, "plotting-the-svm-weights"]], "What is the chance level accuracy?": [[3, "what-is-the-chance-level-accuracy"]], "Further reading": [[3, "further-reading"]], "Basic nilearn example: manipulating and looking at data": [[4, "basic-nilearn-example-manipulating-and-looking-at-data"]], "A first step: looking at our data": [[4, "a-first-step-looking-at-our-data"]], "Simple image manipulation: smoothing": [[4, "simple-image-manipulation-smoothing"]], "Saving results to a file": [[4, "saving-results-to-a-file"]], "Basic numerics and plotting with Python": [[5, "basic-numerics-and-plotting-with-python"]], "Intro to GLM Analysis: a single-session, single-subject fMRI dataset": [[6, "intro-to-glm-analysis-a-single-session-single-subject-fmri-dataset"]], "The data": [[6, "the-data"]], "Retrieving the data": [[6, "retrieving-the-data"], [23, "retrieving-the-data"], [66, "retrieving-the-data"]], "Specifying the experimental paradigm": [[6, "specifying-the-experimental-paradigm"]], "Performing the GLM analysis": [[6, "performing-the-glm-analysis"]], "Detecting voxels with significant effects": [[6, "detecting-voxels-with-significant-effects"]], "Plot thresholded z scores map": [[6, "plot-thresholded-z-scores-map"]], "Performing an F-test": [[6, "performing-an-f-test"]], "Computation times": [[7, "computation-times"], [27, "computation-times"], [45, "computation-times"], [59, "computation-times"], [73, "computation-times"], [82, "computation-times"], [96, "computation-times"], [109, "computation-times"], [112, "computation-times"], [114, "computation-times"], [439, "computation-times"]], "Visualization of brain images": [[8, "visualization-of-brain-images"], [113, "visualization-of-brain-images"]], "Making a surface plot of a 3D statistical map": [[9, "making-a-surface-plot-of-a-3d-statistical-map"]], "Get a statistical map": [[9, "get-a-statistical-map"]], "Get a cortical mesh": [[9, "get-a-cortical-mesh"]], "Sample the 3D data around each node of the mesh": [[9, "sample-the-3d-data-around-each-node-of-the-mesh"]], "Plot the result": [[9, "plot-the-result"]], "Interactive plotting with Plotly": [[9, "interactive-plotting-with-plotly"]], "Plot 3D image for comparison": [[9, "plot-3d-image-for-comparison"]], "Use an atlas and choose regions to outline": [[9, "use-an-atlas-and-choose-regions-to-outline"]], "Display outlines of the regions of interest on top of a statistical map": [[9, "display-outlines-of-the-regions-of-interest-on-top-of-a-statistical-map"]], "Plot with higher-resolution mesh": [[9, "plot-with-higher-resolution-mesh"]], "Plot multiple views of the 3D volume on a surface": [[9, "plot-multiple-views-of-the-3d-volume-on-a-surface"]], "3D visualization in a web browser": [[9, "d-visualization-in-a-web-browser"], [22, "d-visualization-in-a-web-browser"], [52, "d-visualization-in-a-web-browser"], [54, "d-visualization-in-a-web-browser"], [58, "d-visualization-in-a-web-browser"]], "Impact of plot parameters on visualization": [[9, "impact-of-plot-parameters-on-visualization"]], "Basic Atlas plotting": [[10, "basic-atlas-plotting"]], "Retrieving the atlas data": [[10, "retrieving-the-atlas-data"]], "Visualizing the Harvard-Oxford atlas": [[10, "visualizing-the-harvard-oxford-atlas"]], "Visualizing the Juelich atlas": [[10, "visualizing-the-juelich-atlas"]], "Visualizing the Harvard-Oxford atlas with contours": [[10, "visualizing-the-harvard-oxford-atlas-with-contours"]], "Visualizing the Juelich atlas with contours": [[10, "visualizing-the-juelich-atlas-with-contours"]], "Visualizing global patterns with a carpet plot": [[11, "visualizing-global-patterns-with-a-carpet-plot"]], "Fetching data from ADHD dataset": [[11, "fetching-data-from-adhd-dataset"]], "Deriving a mask": [[11, "deriving-a-mask"]], "Visualizing global patterns over time": [[11, "visualizing-global-patterns-over-time"]], "Deriving a label-based mask": [[11, "deriving-a-label-based-mask"]], "Visualizing global patterns, separated by tissue type": [[11, "visualizing-global-patterns-separated-by-tissue-type"]], "Matplotlib colormaps in Nilearn": [[12, "matplotlib-colormaps-in-nilearn"]], "Plot color maps": [[12, "plot-color-maps"]], "Plot matplotlib color maps": [[12, "plot-matplotlib-color-maps"]], "Glass brain plotting in nilearn": [[13, "glass-brain-plotting-in-nilearn"]], "Load data": [[13, "load-data"]], "Glass brain plotting: whole brain sagittal cuts": [[13, "glass-brain-plotting-whole-brain-sagittal-cuts"]], "Glass brain plotting: black background": [[13, "glass-brain-plotting-black-background"]], "Glass brain plotting: Hemispheric sagittal cuts": [[13, "glass-brain-plotting-hemispheric-sagittal-cuts"]], "Glass brain plotting in nilearn (all options)": [[14, "glass-brain-plotting-in-nilearn-all-options"]], "Load the data": [[14, "load-the-data"]], "Demo glass brain plotting": [[14, "demo-glass-brain-plotting"]], "Different projections for the left and right hemispheres": [[14, "different-projections-for-the-left-and-right-hemispheres"]], "Demo glass brain plotting with contours and with fillings": [[14, "demo-glass-brain-plotting-with-contours-and-with-fillings"]], "Display contour projections in both hemispheres": [[14, "display-contour-projections-in-both-hemispheres"]], "More plotting tools from nilearn": [[15, "more-plotting-tools-from-nilearn"]], "First, we retrieve data from nilearn provided (general-purpose) datasets": [[15, "first-we-retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Visualizing in - \u2018sagittal\u2019, \u2018coronal\u2019 and \u2018axial\u2019 with given coordinates": [[15, "visualizing-in-sagittal-coronal-and-axial-with-given-coordinates"]], "Visualizing in - single view \u2018axial\u2019 with number of cuts=5": [[15, "visualizing-in-single-view-axial-with-number-of-cuts-5"]], "Visualizing in - single view \u2018sagittal\u2019 with only two slices": [[15, "visualizing-in-single-view-sagittal-with-only-two-slices"]], "Visualizing in - \u2018coronal\u2019 view with single cut": [[15, "visualizing-in-coronal-view-with-single-cut"]], "Visualizing without a colorbar on the right side": [[15, "visualizing-without-a-colorbar-on-the-right-side"]], "Visualize in - two views \u2018sagittal\u2019 and \u2018axial\u2019 with given coordinates": [[15, "visualize-in-two-views-sagittal-and-axial-with-given-coordinates"]], "Changing the views to \u2018coronal\u2019, \u2018sagittal\u2019 views with coordinates": [[15, "changing-the-views-to-coronal-sagittal-views-with-coordinates"]], "Now, views are changed to \u2018coronal\u2019 and \u2018axial\u2019 views with coordinates": [[15, "now-views-are-changed-to-coronal-and-axial-views-with-coordinates"]], "Visualizing three views in 2x2 fashion": [[15, "visualizing-three-views-in-2x2-fashion"]], "Visualizing three views along multiple rows and columns": [[15, "visualizing-three-views-along-multiple-rows-and-columns"]], "Now, changing the number of slices along columns": [[15, "now-changing-the-number-of-slices-along-columns"]], "Now, another way of limiting the number of slices along rows and columns": [[15, "now-another-way-of-limiting-the-number-of-slices-along-rows-and-columns"]], "Demonstrating various display features": [[15, "demonstrating-various-display-features"]], "Showing how to use add_edges": [[15, "showing-how-to-use-add-edges"]], "How to use add_contours": [[15, "how-to-use-add-contours"]], "Plotting seeds using add_markers": [[15, "plotting-seeds-using-add-markers"]], "Annotating plots": [[15, "annotating-plots"]], "Saving plots to file": [[15, "saving-plots-to-file"]], "Plotting tools in nilearn": [[16, "plotting-tools-in-nilearn"]], "Retrieve data from nilearn provided (general-purpose) datasets": [[16, "retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Plotting statistical maps with function plot_stat_map": [[16, "plotting-statistical-maps-with-function-plot-stat-map"]], "Making interactive visualizations with function view_img": [[16, "making-interactive-visualizations-with-function-view-img"]], "Plotting statistical maps in a glass brain with function plot_glass_brain": [[16, "plotting-statistical-maps-in-a-glass-brain-with-function-plot-glass-brain"]], "Plotting anatomical images with function plot_anat": [[16, "plotting-anatomical-images-with-function-plot-anat"]], "Plotting ROIs (here the mask) with function plot_roi": [[16, "plotting-rois-here-the-mask-with-function-plot-roi"]], "Plotting EPI image with function plot_epi": [[16, "plotting-epi-image-with-function-plot-epi"]], "Controlling the contrast of the background when plotting": [[17, "controlling-the-contrast-of-the-background-when-plotting"]], "Retrieve the data: the localizer dataset with contrast maps": [[17, "retrieve-the-data-the-localizer-dataset-with-contrast-maps"]], "Plotting with enhancement of background image with dim=-.5": [[17, "plotting-with-enhancement-of-background-image-with-dim-5"]], "Plotting with no change of contrast in background image with dim=0": [[17, "plotting-with-no-change-of-contrast-in-background-image-with-dim-0"]], "Plotting with decrease of contrast in background image with dim=.5": [[17, "plotting-with-decrease-of-contrast-in-background-image-with-dim-5"]], "Plotting with more decrease in contrast with dim=1": [[17, "plotting-with-more-decrease-in-contrast-with-dim-1"]], "Plot Haxby masks": [[18, "plot-haxby-masks"]], "Load Haxby dataset": [[18, "load-haxby-dataset"], [36, "load-haxby-dataset"], [37, "load-haxby-dataset"]], "Plot the masks": [[18, "plot-the-masks"]], "Visualizing multiscale functional brain parcellations": [[19, "visualizing-multiscale-functional-brain-parcellations"]], "Retrieving multiscale group brain parcellations": [[19, "retrieving-multiscale-group-brain-parcellations"]], "Visualizing brain parcellations": [[19, "visualizing-brain-parcellations"]], "Visualizing a probabilistic atlas: the default mode in the MSDL atlas": [[20, "visualizing-a-probabilistic-atlas-the-default-mode-in-the-msdl-atlas"]], "Fetching Probabilistic atlas - MSDL atlas": [[20, "fetching-probabilistic-atlas-msdl-atlas"]], "Visualizing a probabilistic atlas with plot_stat_map and add_overlay object": [[20, "visualizing-a-probabilistic-atlas-with-plot-stat-map-and-add-overlay-object"]], "Visualizing a probabilistic atlas with plot_prob_atlas": [[20, "visualizing-a-probabilistic-atlas-with-plot-prob-atlas"]], "Visualizing 4D probabilistic atlas maps": [[21, "visualizing-4d-probabilistic-atlas-maps"]], "Other probabilistic atlases accessible with nilearn": [[21, "other-probabilistic-atlases-accessible-with-nilearn"]], "Loading and plotting of a cortical surface atlas": [[22, "loading-and-plotting-of-a-cortical-surface-atlas"]], "References": [[22, "references"], [23, "references"], [49, "references"], [49, "id1"], [56, "references"], [58, "references"], [100, "references"], [102, "references"], [118, "references"], [155, null], [156, null], [156, null], [159, null], [160, null], [160, null], [162, "references"], [163, "references"], [166, "references"], [167, "references"]], "Data fetcher": [[22, "data-fetcher"]], "Visualization": [[22, "visualization"], [25, "visualization"], [26, "visualization"], [30, "visualization"], [36, "visualization"], [37, "visualization"], [42, "visualization"], [166, "visualization"]], "Seed-based connectivity on the surface": [[23, "seed-based-connectivity-on-the-surface"]], "Extracting the seed time series": [[23, "extracting-the-seed-time-series"]], "Calculating seed-based functional connectivity": [[23, "calculating-seed-based-functional-connectivity"]], "Technical point: Illustration of the volume to surface sampling schemes": [[24, "technical-point-illustration-of-the-volume-to-surface-sampling-schemes"]], "Build a mesh (of a cylinder)": [[24, "build-a-mesh-of-a-cylinder"]], "Get the locations from which vol_to_surf would draw its samples": [[24, "get-the-locations-from-which-vol-to-surf-would-draw-its-samples"]], "Plot the mesh and the sample locations": [[24, "plot-the-mesh-and-the-sample-locations"]], "Adjust the sample locations": [[24, "adjust-the-sample-locations"]], "NeuroImaging volumes visualization": [[25, "neuroimaging-volumes-visualization"]], "Fetch data": [[25, "fetch-data"]], "Extracting a brain mask": [[25, "extracting-a-brain-mask"], [180, "extracting-a-brain-mask"]], "Applying the mask to extract the corresponding time series": [[25, "applying-the-mask-to-extract-the-corresponding-time-series"]], "Visualizing Megatrawls Network Matrices from Human Connectome Project": [[26, "visualizing-megatrawls-network-matrices-from-human-connectome-project"]], "Fetching the Megatrawls Network matrices": [[26, "fetching-the-megatrawls-network-matrices"]], "Decoding and predicting from brain images": [[28, "decoding-and-predicting-from-brain-images"], [113, "decoding-and-predicting-from-brain-images"]], "Decoding with ANOVA + SVM: face vs house in the Haxby dataset": [[29, "decoding-with-anova-svm-face-vs-house-in-the-haxby-dataset"]], "Retrieve the files of the Haxby dataset": [[29, "retrieve-the-files-of-the-haxby-dataset"]], "Load the behavioral data": [[29, "load-the-behavioral-data"], [33, "load-the-behavioral-data"]], "ANOVA pipeline with nilearn.decoding.Decoder object": [[29, "anova-pipeline-with-nilearn-decoding-decoder-object"], [34, "anova-pipeline-with-nilearn-decoding-decoder-object"]], "Fit the decoder and predict": [[29, "fit-the-decoder-and-predict"]], "Obtain prediction scores via cross validation": [[29, "obtain-prediction-scores-via-cross-validation"]], "Visualize the results": [[29, "visualize-the-results"], [81, "visualize-the-results"]], "Different classifiers in decoding the Haxby dataset": [[30, "different-classifiers-in-decoding-the-haxby-dataset"]], "Loading the data": [[30, "loading-the-data"], [40, "loading-the-data"], [94, "loading-the-data"]], "Training the decoder": [[30, "training-the-decoder"]], "Visualizing the face vs house map": [[30, "visualizing-the-face-vs-house-map"]], "Decoding with FREM: face vs house vs chair object recognition": [[31, "decoding-with-frem-face-vs-house-vs-chair-object-recognition"]], "Load the Haxby dataset": [[31, "load-the-haxby-dataset"], [34, "load-the-haxby-dataset"]], "Fit FREM": [[31, "fit-frem"], [39, "fit-frem"]], "Plot confusion matrix": [[31, "plot-confusion-matrix"]], "Visualization of FREM weights": [[31, "visualization-of-frem-weights"]], "ROI-based decoding analysis in Haxby et al. dataset": [[32, "roi-based-decoding-analysis-in-haxby-et-al-dataset"]], "Load and prepare the data": [[32, "load-and-prepare-the-data"]], "Decoding on the different masks": [[32, "decoding-on-the-different-masks"]], "We make a simple bar plot to summarize the results": [[32, "we-make-a-simple-bar-plot-to-summarize-the-results"]], "Decoding of a dataset after GLM fit for signal extraction": [[33, "decoding-of-a-dataset-after-glm-fit-for-signal-extraction"]], "Fetch example Haxby dataset": [[33, "fetch-example-haxby-dataset"]], "Build a proper event structure for each session": [[33, "build-a-proper-event-structure-for-each-session"]], "Instantiate and run FirstLevelModel": [[33, "instantiate-and-run-firstlevelmodel"]], "Run the GLM on data from each session": [[33, "run-the-glm-on-data-from-each-session"]], "Generating a report": [[33, "generating-a-report"], [61, "generating-a-report"], [62, "generating-a-report"], [64, "generating-a-report"], [75, "generating-a-report"]], "Build the decoding pipeline": [[33, "build-the-decoding-pipeline"]], "Setting a parameter by cross-validation": [[34, "setting-a-parameter-by-cross-validation"]], "Fit the Decoder and predict the responses": [[34, "fit-the-decoder-and-predict-the-responses"]], "Compute prediction scores with different values of screening percentile": [[34, "compute-prediction-scores-with-different-values-of-screening-percentile"]], "Nested cross-validation": [[34, "nested-cross-validation"]], "Plot the prediction scores using matplotlib": [[34, "plot-the-prediction-scores-using-matplotlib"]], "The haxby dataset: different multi-class strategies": [[35, "the-haxby-dataset-different-multi-class-strategies"]], "Load the Haxby data dataset": [[35, "load-the-haxby-data-dataset"]], "Prepare the fMRI data": [[35, "prepare-the-fmri-data"]], "Build the decoders, using scikit-learn": [[35, "build-the-decoders-using-scikit-learn"]], "Now we compute cross-validation scores": [[35, "now-we-compute-cross-validation-scores"]], "Plot barplots of the prediction scores": [[35, "plot-barplots-of-the-prediction-scores"]], "Plot a confusion matrix": [[35, "plot-a-confusion-matrix"]], "Searchlight analysis of face vs house recognition": [[36, "searchlight-analysis-of-face-vs-house-recognition"]], "Restrict to faces and houses": [[36, "restrict-to-faces-and-houses"], [37, "restrict-to-faces-and-houses"]], "Prepare masks": [[36, "prepare-masks"]], "Searchlight computation": [[36, "searchlight-computation"], [37, "searchlight-computation"]], "F-scores computation": [[36, "f-scores-computation"]], "Cortical surface-based searchlight decoding": [[37, "cortical-surface-based-searchlight-decoding"]], "Surface BOLD response": [[37, "surface-bold-response"]], "Show stimuli of Haxby et al. dataset": [[38, "show-stimuli-of-haxby-et-al-dataset"]], "FREM on Jimura et al \u201cmixed gambles\u201d dataset": [[39, "frem-on-jimura-et-al-mixed-gambles-dataset"]], "Load the data from the Jimura mixed-gamble experiment": [[39, "load-the-data-from-the-jimura-mixed-gamble-experiment"]], "Example use of TV-L1 SpaceNet": [[39, "example-use-of-tv-l1-spacenet"]], "Encoding models for visual stimuli from Miyawaki et al. 2008": [[40, "encoding-models-for-visual-stimuli-from-miyawaki-et-al-2008"]], "Building the encoding models": [[40, "building-the-encoding-models"]], "Mapping the encoding scores on the brain": [[40, "mapping-the-encoding-scores-on-the-brain"]], "Estimating receptive fields": [[40, "estimating-receptive-fields"]], "Reconstruction of visual stimuli from Miyawaki et al. 2008": [[41, "reconstruction-of-visual-stimuli-from-miyawaki-et-al-2008"]], "First we load the Miyawaki dataset": [[41, "first-we-load-the-miyawaki-dataset"]], "Then we prepare and mask the data": [[41, "then-we-prepare-and-mask-the-data"]], "We define our prediction function": [[41, "we-define-our-prediction-function"]], "Here we run the prediction: the decoding itself": [[41, "here-we-run-the-prediction-the-decoding-itself"]], "Let us quantify our prediction error": [[41, "let-us-quantify-our-prediction-error"]], "Voxel-Based Morphometry on Oasis dataset": [[42, "voxel-based-morphometry-on-oasis-dataset"]], "Predictive modeling analysis: VBM bio-markers of aging?": [[42, "predictive-modeling-analysis-vbm-bio-markers-of-aging"]], "Brain mapping with mass univariate": [[42, "brain-mapping-with-mass-univariate"]], "Load Oasis dataset": [[42, "load-oasis-dataset"], [75, "load-oasis-dataset"]], "Preprocess data": [[42, "preprocess-data"]], "Visualize the quality of predictions": [[42, "visualize-the-quality-of-predictions"]], "Inference with massively univariate model": [[42, "inference-with-massively-univariate-model"]], "Voxel-Based Morphometry on Oasis dataset with Space-Net prior": [[43, "voxel-based-morphometry-on-oasis-dataset-with-space-net-prior"]], "Load the Oasis VBM dataset": [[43, "load-the-oasis-vbm-dataset"]], "Fit the SpaceNet and predict with it": [[43, "fit-the-spacenet-and-predict-with-it"]], "Visualize the decoding maps and quality of predictions": [[43, "visualize-the-decoding-maps-and-quality-of-predictions"]], "Example of pattern recognition on simulated data": [[44, "example-of-pattern-recognition-on-simulated-data"]], "A function to generate data": [[44, "a-function-to-generate-data"]], "A simple function to plot slices": [[44, "a-simple-function-to-plot-slices"]], "Create data": [[44, "create-data"]], "Run different estimators": [[44, "run-different-estimators"]], "Run the estimators": [[44, "run-the-estimators"]], "An exercise to go further": [[44, "an-exercise-to-go-further"]], "Functional connectivity": [[46, "functional-connectivity"], [113, "functional-connectivity"]], "Comparing connectomes on different reference atlases": [[47, "comparing-connectomes-on-different-reference-atlases"]], "Load atlases": [[47, "load-atlases"]], "Load functional data": [[47, "load-functional-data"]], "Extract coordinates on Yeo atlas - parcellations": [[47, "extract-coordinates-on-yeo-atlas-parcellations"]], "Plot a directed connectome - asymmetric connectivity measure": [[47, "plot-a-directed-connectome-asymmetric-connectivity-measure"]], "Load probabilistic atlases - extracting coordinates on brain maps": [[47, "load-probabilistic-atlases-extracting-coordinates-on-brain-maps"]], "Iterate over fetched atlases to extract coordinates - probabilistic": [[47, "iterate-over-fetched-atlases-to-extract-coordinates-probabilistic"]], "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning": [[48, "deriving-spatial-maps-from-group-fmri-data-using-ica-and-dictionary-learning"]], "Load brain development fMRI dataset": [[48, "load-brain-development-fmri-dataset"]], "Apply CanICA on the data": [[48, "apply-canica-on-the-data"]], "Compare CanICA to dictionary learning": [[48, "compare-canica-to-dictionary-learning"]], "Clustering methods to learn a brain parcellation from fMRI": [[49, "clustering-methods-to-learn-a-brain-parcellation-from-fmri"]], "Download a brain development fMRI dataset and turn it to a data matrix": [[49, "download-a-brain-development-fmri-dataset-and-turn-it-to-a-data-matrix"]], "Brain parcellations with Ward Clustering": [[49, "brain-parcellations-with-ward-clustering"]], "Visualize: Brain parcellations (Ward)": [[49, "visualize-brain-parcellations-ward"]], "Compressed representation of Ward clustering": [[49, "compressed-representation-of-ward-clustering"]], "Brain parcellations with KMeans Clustering": [[49, "brain-parcellations-with-kmeans-clustering"]], "Visualize: Brain parcellations (KMeans)": [[49, "visualize-brain-parcellations-kmeans"]], "Brain parcellations with Hierarchical KMeans Clustering": [[49, "brain-parcellations-with-hierarchical-kmeans-clustering"]], "Visualize: Brain parcellations (Hierarchical KMeans)": [[49, "visualize-brain-parcellations-hierarchical-kmeans"]], "Compare Hierarchical Kmeans clusters with those from Kmeans": [[49, "compare-hierarchical-kmeans-clusters-with-those-from-kmeans"]], "Brain parcellations with ReNA Clustering": [[49, "brain-parcellations-with-rena-clustering"]], "Visualize: Brain parcellations (ReNA)": [[49, "visualize-brain-parcellations-rena"]], "Compressed representation of ReNA clustering": [[49, "compressed-representation-of-rena-clustering"]], "Regions extraction using dictionary learning and functional connectomes": [[50, "regions-extraction-using-dictionary-learning-and-functional-connectomes"]], "Fetch brain development functional datasets": [[50, "fetch-brain-development-functional-datasets"]], "Extract functional networks with Dictionary learning": [[50, "extract-functional-networks-with-dictionary-learning"]], "Extract regions from networks": [[50, "extract-regions-from-networks"]], "Compute correlation coefficients": [[50, "compute-correlation-coefficients"]], "Plot resulting connectomes": [[50, "plot-resulting-connectomes"]], "Plot regions extracted for only one specific network": [[50, "plot-regions-extracted-for-only-one-specific-network"]], "Classification of age groups using functional connectivity": [[51, "classification-of-age-groups-using-functional-connectivity"]], "Load brain development fMRI dataset and MSDL atlas": [[51, "load-brain-development-fmri-dataset-and-msdl-atlas"], [99, "load-brain-development-fmri-dataset-and-msdl-atlas"]], "Region signals extraction": [[51, "region-signals-extraction"]], "ROI-to-ROI correlations of children": [[51, "roi-to-roi-correlations-of-children"]], "Studying partial correlations": [[51, "studying-partial-correlations"]], "Extract subjects variabilities around a group connectivity": [[51, "extract-subjects-variabilities-around-a-group-connectivity"]], "What kind of connectivity is most powerful for classification?": [[51, "what-kind-of-connectivity-is-most-powerful-for-classification"], [99, "what-kind-of-connectivity-is-most-powerful-for-classification"]], "Computing a connectome with sparse inverse covariance": [[52, "computing-a-connectome-with-sparse-inverse-covariance"]], "Retrieve the atlas and the data": [[52, "retrieve-the-atlas-and-the-data"], [54, "retrieve-the-atlas-and-the-data"], [56, "retrieve-the-atlas-and-the-data"]], "Extract time series": [[52, "extract-time-series"]], "Compute the sparse inverse covariance": [[52, "compute-the-sparse-inverse-covariance"]], "Display the connectome matrix": [[52, "display-the-connectome-matrix"]], "And now display the corresponding graph": [[52, "and-now-display-the-corresponding-graph"], [52, "id1"], [54, "and-now-display-the-corresponding-graph"]], "Display the sparse inverse covariance": [[52, "display-the-sparse-inverse-covariance"]], "Group Sparse inverse covariance for multi-subject connectome": [[53, "group-sparse-inverse-covariance-for-multi-subject-connectome"]], "Fetching datasets": [[53, "fetching-datasets"]], "Extracting region signals": [[53, "extracting-region-signals"]], "Computing group-sparse precision matrices": [[53, "computing-group-sparse-precision-matrices"]], "Displaying results": [[53, "displaying-results"]], "Extracting signals of a probabilistic atlas of functional regions": [[54, "extracting-signals-of-a-probabilistic-atlas-of-functional-regions"]], "Extract the time series": [[54, "extract-the-time-series"]], "Build and display a correlation matrix": [[54, "build-and-display-a-correlation-matrix"]], "Producing single subject maps of seed-to-voxel correlation": [[55, "producing-single-subject-maps-of-seed-to-voxel-correlation"]], "Getting the data": [[55, "getting-the-data"]], "Time series extraction": [[55, "time-series-extraction"]], "Performing the seed-to-voxel correlation analysis": [[55, "performing-the-seed-to-voxel-correlation-analysis"]], "Plotting the seed-to-voxel correlation map": [[55, "plotting-the-seed-to-voxel-correlation-map"]], "Fisher-z transformation and save nifti": [[55, "fisher-z-transformation-and-save-nifti"]], "Extracting signals from a brain parcellation": [[56, "extracting-signals-from-a-brain-parcellation"]], "Extract signals on a parcellation defined by labels": [[56, "extract-signals-on-a-parcellation-defined-by-labels"]], "Compute and display a correlation matrix": [[56, "compute-and-display-a-correlation-matrix"]], "Extract signals and compute a connectivity matrix without confounds removal": [[56, "extract-signals-and-compute-a-connectivity-matrix-without-confounds-removal"]], "Load confounds from file using a flexible strategy with fmriprep interface": [[56, "load-confounds-from-file-using-a-flexible-strategy-with-fmriprep-interface"]], "Motion-based scrubbing": [[56, "motion-based-scrubbing"]], "The impact of global signal removal": [[56, "the-impact-of-global-signal-removal"]], "Using predefined strategies": [[56, "using-predefined-strategies"]], "Connectivity structure estimation on simulated data": [[57, "connectivity-structure-estimation-on-simulated-data"]], "Extract signals on spheres and plot a connectome": [[58, "extract-signals-on-spheres-and-plot-a-connectome"]], "Retrieve the brain development fMRI dataset": [[58, "retrieve-the-brain-development-fmri-dataset"]], "Coordinates of Default Mode Network": [[58, "coordinates-of-default-mode-network"]], "Extracts signal from sphere around DMN seeds": [[58, "extracts-signal-from-sphere-around-dmn-seeds"]], "Display spheres summary report": [[58, "display-spheres-summary-report"]], "Display time series": [[58, "display-time-series"]], "Compute partial correlation matrix": [[58, "compute-partial-correlation-matrix"]], "Display connectome": [[58, "display-connectome"]], "Extract signals on spheres from an atlas": [[58, "extract-signals-on-spheres-from-an-atlas"]], "Compute within spheres averaged time-series": [[58, "compute-within-spheres-averaged-time-series"]], "Estimate correlations": [[58, "estimate-correlations"]], "Plot matrix, graph, and strength": [[58, "plot-matrix-graph-and-strength"]], "Connectome extracted from Dosenbach\u2019s atlas": [[58, "connectome-extracted-from-dosenbach-s-atlas"]], "See Also": [[58, "see-also"]], "GLM: First level analysis": [[60, "glm-first-level-analysis"], [113, "glm-first-level-analysis"]], "Default Mode Network extraction of ADHD dataset": [[61, "default-mode-network-extraction-of-adhd-dataset"]], "Prepare data and analysis parameters": [[61, "prepare-data-and-analysis-parameters"], [64, "prepare-data-and-analysis-parameters"], [67, "prepare-data-and-analysis-parameters"], [69, "prepare-data-and-analysis-parameters"], [100, "prepare-data-and-analysis-parameters"]], "Extract the seed region\u2019s time course": [[61, "extract-the-seed-region-s-time-course"]], "Estimate contrasts": [[61, "estimate-contrasts"], [69, "estimate-contrasts"]], "Perform first level analysis": [[61, "perform-first-level-analysis"], [69, "perform-first-level-analysis"]], "First level analysis of a complete BIDS dataset from openneuro": [[62, "first-level-analysis-of-a-complete-bids-dataset-from-openneuro"]], "Fetch openneuro BIDS dataset": [[62, "fetch-openneuro-bids-dataset"]], "Obtain FirstLevelModel objects automatically and fit arguments": [[62, "obtain-firstlevelmodel-objects-automatically-and-fit-arguments"]], "First level model estimation (one subject)": [[62, "first-level-model-estimation-one-subject"]], "Simple statistical report of thresholded contrast": [[62, "simple-statistical-report-of-thresholded-contrast"]], "Saving model outputs to disk": [[62, "saving-model-outputs-to-disk"]], "Examples of design matrices": [[63, "examples-of-design-matrices"]], "Define parameters": [[63, "define-parameters"]], "Create design matrices": [[63, "create-design-matrices"]], "Simple example of two-session fMRI model fitting": [[64, "simple-example-of-two-session-fmri-model-fitting"]], "GLM estimation": [[64, "glm-estimation"], [67, "glm-estimation"]], "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model": [[65, "analysis-of-an-fmri-dataset-with-a-finite-impule-response-fir-model"]], "Understanding parameters of the first-level model": [[66, "understanding-parameters-of-the-first-level-model"]], "Running a basic model": [[66, "running-a-basic-model"]], "A first contrast estimation and plotting": [[66, "a-first-contrast-estimation-and-plotting"]], "Changing the drift model": [[66, "changing-the-drift-model"]], "Changing the hemodynamic response model": [[66, "changing-the-hemodynamic-response-model"]], "Adding a time derivative to the design": [[66, "adding-a-time-derivative-to-the-design"]], "The noise model: ar(1), ols, or higher order ar?": [[66, "the-noise-model-ar-1-ols-or-higher-order-ar"]], "Removing confounds": [[66, "removing-confounds"]], "Volume censoring": [[66, "volume-censoring"]], "Smoothing": [[66, "smoothing"], [181, "smoothing"]], "Masking": [[66, "masking"], [166, "masking"]], "Conclusion": [[66, "conclusion"]], "Example of explicit fixed effects fMRI model fitting": [[67, "example-of-explicit-fixed-effects-fmri-model-fitting"]], "Example of MRI response functions": [[68, "example-of-mri-response-functions"]], "Define stimulus parameters and response models": [[68, "define-stimulus-parameters-and-response-models"]], "Sample and plot response functions": [[68, "sample-and-plot-response-functions"]], "Example of surface-based first-level analysis": [[69, "example-of-surface-based-first-level-analysis"]], "Project the fMRI image to the surface": [[69, "project-the-fmri-image-to-the-surface"]], "Analysing the left hemisphere": [[69, "analysing-the-left-hemisphere"]], "Predicted time series and residuals": [[70, "predicted-time-series-and-residuals"]], "Import modules": [[70, "import-modules"]], "Fit model": [[70, "fit-model"]], "Calculate and plot contrast": [[70, "calculate-and-plot-contrast"]], "Extract the largest clusters": [[70, "extract-the-largest-clusters"]], "Plot predicted and actual time series for 6 most significant clusters": [[70, "plot-predicted-and-actual-time-series-for-6-most-significant-clusters"]], "Get residuals": [[70, "get-residuals"]], "Plot distribution of residuals": [[70, "plot-distribution-of-residuals"]], "Plot R-squared": [[70, "plot-r-squared"]], "Calculate and Plot F-test": [[70, "calculate-and-plot-f-test"]], "Single-subject data (two sessions) in native space": [[71, "single-subject-data-two-sessions-in-native-space"]], "Generate an events.tsv file for the NeuroSpin localizer task": [[72, "generate-an-events-tsv-file-for-the-neurospin-localizer-task"]], "GLM: Second level analysis": [[74, "glm-second-level-analysis"], [113, "glm-second-level-analysis"]], "Voxel-Based Morphometry on OASIS dataset": [[75, "voxel-based-morphometry-on-oasis-dataset"]], "VBM analysis of aging": [[75, "vbm-analysis-of-aging"]], "Analyse data": [[75, "analyse-data"]], "Second-level fMRI model: true positive proportion in clusters": [[76, "second-level-fmri-model-true-positive-proportion-in-clusters"]], "Fetch dataset": [[76, "fetch-dataset"], [79, "fetch-dataset"], [80, "fetch-dataset"]], "Estimate second level model": [[76, "estimate-second-level-model"], [77, "estimate-second-level-model"], [79, "estimate-second-level-model"]], "Example of generic design in second-level models": [[77, "example-of-generic-design-in-second-level-models"]], "Example of second level design matrix": [[78, "example-of-second-level-design-matrix"]], "Create a simple experimental paradigm": [[78, "create-a-simple-experimental-paradigm"]], "Create a second level design matrix": [[78, "create-a-second-level-design-matrix"]], "Second-level fMRI model: one sample test": [[79, "second-level-fmri-model-one-sample-test"]], "Display subject t_maps": [[79, "display-subject-t-maps"]], "Second-level fMRI model: two-sample test, unpaired and paired": [[80, "second-level-fmri-model-two-sample-test-unpaired-and-paired"]], "Estimate second level models": [[80, "estimate-second-level-models"]], "Plot the results": [[80, "plot-the-results"]], "Statistical testing of a second-level analysis": [[81, "statistical-testing-of-a-second-level-analysis"]], "Prepare some images for a simple t test": [[81, "prepare-some-images-for-a-simple-t-test"]], "Perform the second level analysis": [[81, "perform-the-second-level-analysis"]], "Manipulating brain image volumes": [[83, "manipulating-brain-image-volumes"], [113, "manipulating-brain-image-volumes"]], "Visualization of affine resamplings": [[84, "visualization-of-affine-resamplings"]], "Comparing the means of 2 images": [[85, "comparing-the-means-of-2-images"]], "Breaking an atlas of labels in separated regions": [[86, "breaking-an-atlas-of-labels-in-separated-regions"]], "The original Yeo atlas": [[86, "the-original-yeo-atlas"]], "Relabeling the atlas into separated regions": [[86, "relabeling-the-atlas-into-separated-regions"]], "Different connectivity modes": [[86, "different-connectivity-modes"]], "Parameter min_size": [[86, "parameter-min-size"]], "Regions Extraction of Default Mode Networks using Smith Atlas": [[87, "regions-extraction-of-default-mode-networks-using-smith-atlas"]], "Region Extraction using a t-statistical map (3D)": [[88, "region-extraction-using-a-t-statistical-map-3d"]], "Understanding NiftiMasker and mask computation": [[89, "understanding-niftimasker-and-mask-computation"]], "Computing a mask from the background": [[89, "computing-a-mask-from-the-background"]], "Computing a mask from raw EPI data": [[89, "computing-a-mask-from-raw-epi-data"]], "Computing the mask from the MNI template": [[89, "computing-the-mask-from-the-mni-template"]], "Compute and resample a mask": [[89, "compute-and-resample-a-mask"]], "After mask computation: extracting time series": [[89, "after-mask-computation-extracting-time-series"]], "Negating an image with math_img": [[90, "negating-an-image-with-math-img"]], "Extracting signals from brain regions using the NiftiLabelsMasker": [[91, "extracting-signals-from-brain-regions-using-the-niftilabelsmasker"]], "Simple example of NiftiMasker use": [[92, "simple-example-of-niftimasker-use"]], "Resample an image to a template": [[93, "resample-an-image-to-a-template"]], "Computing a Region of Interest (ROI) mask manually": [[94, "computing-a-region-of-interest-roi-mask-manually"]], "Build a statistical test to find voxels of interest": [[94, "build-a-statistical-test-to-find-voxels-of-interest"]], "Build a mask from this statistical map (Improving the quality of the mask)": [[94, "build-a-mask-from-this-statistical-map-improving-the-quality-of-the-mask"]], "Smoothing an image": [[95, "smoothing-an-image"]], "Advanced statistical analysis of brain images": [[97, "advanced-statistical-analysis-of-brain-images"], [113, "advanced-statistical-analysis-of-brain-images"]], "Advanced decoding using scikit learn": [[98, "advanced-decoding-using-scikit-learn"]], "Performing decoding with scikit-learn": [[98, "performing-decoding-with-scikit-learn"], [164, "performing-decoding-with-scikit-learn"]], "Masking the data": [[98, "masking-the-data"]], "Cross-validation with scikit-learn": [[98, "cross-validation-with-scikit-learn"], [164, "cross-validation-with-scikit-learn"]], "Tuning cross-validation parameters": [[98, "tuning-cross-validation-parameters"]], "Measuring the chance level": [[98, "measuring-the-chance-level"], [164, "measuring-the-chance-level"]], "Dummy estimator": [[98, "dummy-estimator"]], "Permutation test": [[98, "permutation-test"]], "Decoding without a mask: Anova-SVM in scikit-lean": [[98, "decoding-without-a-mask-anova-svm-in-scikit-lean"]], "Visualize the ANOVA + SVC\u2019s discriminating weights": [[98, "visualize-the-anova-svc-s-discriminating-weights"]], "Going further with scikit-learn": [[98, "going-further-with-scikit-learn"], [164, "going-further-with-scikit-learn"]], "Changing the prediction engine": [[98, "changing-the-prediction-engine"]], "Changing the feature selection": [[98, "changing-the-feature-selection"]], "Functional connectivity predicts age group": [[99, "functional-connectivity-predicts-age-group"]], "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding": [[100, "beta-series-modeling-for-task-based-functional-connectivity-and-decoding"]], "Choosing the right model for your analysis": [[100, null]], "Define the standard model": [[100, "define-the-standard-model"]], "Define the LSA model": [[100, "define-the-lsa-model"]], "Aggregate beta maps from the LSA model based on condition": [[100, "aggregate-beta-maps-from-the-lsa-model-based-on-condition"]], "Define the LSS models": [[100, "define-the-lss-models"]], "Show the design matrices for the first few trials": [[100, "show-the-design-matrices-for-the-first-few-trials"]], "Compare the three modeling approaches": [[100, "compare-the-three-modeling-approaches"]], "Applications of beta series": [[100, "applications-of-beta-series"]], "BIDS dataset first and second level analysis": [[101, "bids-dataset-first-and-second-level-analysis"]], "Fetch example BIDS dataset": [[101, "fetch-example-bids-dataset"], [108, "fetch-example-bids-dataset"]], "Obtain automatically FirstLevelModel objects and fit arguments": [[101, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"], [108, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"]], "Quick sanity check on fit arguments": [[101, "quick-sanity-check-on-fit-arguments"]], "First level model estimation": [[101, "first-level-model-estimation"]], "Second level model estimation": [[101, "second-level-model-estimation"]], "Massively univariate analysis of face vs house recognition": [[102, "massively-univariate-analysis-of-face-vs-house-recognition"]], "NeuroVault cross-study ICA maps": [[103, "neurovault-cross-study-ica-maps"]], "Get image and term data": [[103, "get-image-and-term-data"]], "Reshape and mask images": [[103, "reshape-and-mask-images"]], "Run ICA and map components to terms": [[103, "run-ica-and-map-components-to-terms"]], "Generate figures": [[103, "generate-figures"]], "Multivariate decompositions: Independent component analysis of fMRI": [[104, "multivariate-decompositions-independent-component-analysis-of-fmri"]], "Massively univariate analysis of a motor task from the Localizer dataset": [[105, "massively-univariate-analysis-of-a-motor-task-from-the-localizer-dataset"]], "Massively univariate analysis of a calculation task from the Localizer dataset": [[106, "massively-univariate-analysis-of-a-calculation-task-from-the-localizer-dataset"]], "NeuroVault meta-analysis of stop-go paradigm studies": [[107, "neurovault-meta-analysis-of-stop-go-paradigm-studies"]], "Fetch images for \u201csuccessful stop minus go\u201d-like protocols.": [[107, "fetch-images-for-successful-stop-minus-go-like-protocols"]], "Visualize the data": [[107, "visualize-the-data"]], "Compute statistics": [[107, "compute-statistics"]], "Plot the combined z maps": [[107, "plot-the-combined-z-maps"]], "Surface-based dataset first and second level analysis of a dataset": [[108, "surface-based-dataset-first-and-second-level-analysis-of-a-dataset"]], "Group study": [[108, "group-study"]], "Examples for experimental modules": [[110, "examples-for-experimental-modules"], [113, "examples-for-experimental-modules"]], "A short demo of the surface images & maskers": [[111, "a-short-demo-of-the-surface-images-maskers"]], "Connectivity with a surface atlas and SurfaceLabelsMasker": [[111, "connectivity-with-a-surface-atlas-and-surfacelabelsmasker"]], "Using the Decoder": [[111, "using-the-decoder"]], "Decoding with a scikit-learn Pipeline": [[111, "decoding-with-a-scikit-learn-pipeline"]], "Examples": [[113, "examples"], [180, null], [181, null], [181, null], [181, null], [181, null], [181, null], [181, null]], "General bibliography": [[115, "general-bibliography"]], "Advanced usage: manual pipelines and scaling up": [[116, "advanced-usage-manual-pipelines-and-scaling-up"]], "Building your own neuroimaging machine-learning pipeline": [[117, "building-your-own-neuroimaging-machine-learning-pipeline"]], "Data loading and preprocessing": [[117, "data-loading-and-preprocessing"]], "Downloading the data": [[117, "downloading-the-data"]], "Loading non image data: experiment description": [[117, "loading-non-image-data-experiment-description"]], "Masking the data: from 4D image to 2D array": [[117, "masking-the-data-from-4d-image-to-2d-array"]], "Applying a mask": [[117, "applying-a-mask"]], "Automatically computing a mask": [[117, "automatically-computing-a-mask"]], "Applying a scikit-learn machine learning method": [[117, "applying-a-scikit-learn-machine-learning-method"]], "Unmasking (inverse_transform)": [[117, "unmasking-inverse-transform"]], "Visualizing results": [[117, "visualizing-results"], [160, "visualizing-results"]], "Going further": [[117, "going-further"]], "Downloading statistical maps from the Neurovault repository": [[118, "downloading-statistical-maps-from-the-neurovault-repository"]], "Specific images or collections": [[118, "specific-images-or-collections"]], "Selection filters": [[118, "selection-filters"]], "Output": [[118, "output"]], "Neurosynth annotations": [[118, "neurosynth-annotations"]], "Examples using Neurovault": [[118, "examples-using-neurovault"]], "0.1.0": [[119, "id1"], [154, "id4822"]], "Changelog": [[119, "changelog"], [120, "changelog"], [121, "changelog"], [122, "changelog"], [127, "changelog"], [128, "changelog"], [130, "changelog"], [154, "changelog"], [154, "id3936"], [154, "id4083"], [154, "id4381"], [154, "id4529"], [154, "id4676"], [154, "id4823"], [169, "changelog"]], "0.1.1": [[120, "id1"], [154, "id4675"]], "0.1.2": [[121, "id1"], [154, "id4528"]], "0.1.3": [[122, "id1"], [154, "id4380"]], "Fixes": [[122, "fixes"], [124, "fixes"], [125, "fixes"], [125, "id2"], [126, "fixes"], [129, "fixes"], [132, "fixes"], [133, "fixes"], [134, "fixes"], [134, "id3"], [135, "fixes"], [136, "fixes"], [138, "fixes"], [139, "fixes"], [140, "fixes"], [141, "fixes"], [142, "id4"], [142, "id9"], [142, "id13"], [143, "fixes"], [144, "fixes"], [145, "fixes"], [146, "fixes"], [147, "fixes"], [148, "fixes"], [149, "fixes"], [150, "fixes"], [151, "fixes"], [152, "fixes"], [154, "fixes"], [154, "id149"], [154, "id299"], [154, "id302"], [154, "id453"], [154, "id606"], [154, "id755"], [154, "id906"], [154, "id1057"], [154, "id1208"], [154, "id1359"], [154, "id1510"], [154, "id1659"], [154, "id1808"], [154, "id1963"], [154, "id1969"], [154, "id1973"], [154, "id2122"], [154, "id2272"], [154, "id2430"], [154, "id2584"], [154, "id2881"], [154, "id3032"], [154, "id3181"], [154, "id3186"], [154, "id3334"], [154, "id3485"], [154, "id3932"], [154, "id4382"]], "0.1.4": [[123, "id1"], [154, "id4233"]], "Highlights": [[123, "highlights"], [134, "highlights"], [135, "highlights"], [136, "highlights"], [139, "highlights"], [139, "id4"], [139, "id8"], [154, "id2424"], [154, "id2428"], [154, "id2433"], [154, "id2879"], [154, "id3030"], [154, "id3184"], [154, "id4234"]], "0.10.0": [[124, "id1"], [154, "id450"]], "HIGHLIGHTS": [[124, "highlights"], [126, "highlights"], [142, "highlights"], [145, "highlights"], [146, "highlights"], [147, "highlights"], [148, "highlights"], [149, "highlights"], [151, "highlights"], [152, "highlights"], [154, "highlights"], [154, "id147"], [154, "id451"], [154, "id602"], [154, "id904"], [154, "id1055"], [154, "id1206"], [154, "id1357"], [154, "id1507"], [154, "id1956"]], "NEW": [[124, "new"], [125, "new"], [126, "new"], [139, "new"], [140, "new"], [141, "new"], [142, "new"], [142, "id2"], [142, "id5"], [142, "id11"], [145, "new"], [146, "new"], [147, "new"], [148, "new"], [149, "new"], [151, "new"], [152, "new"], [154, "new"], [154, "id148"], [154, "id298"], [154, "id452"], [154, "id604"], [154, "id905"], [154, "id1056"], [154, "id1207"], [154, "id1358"], [154, "id1508"], [154, "id1957"], [154, "id1961"], [154, "id1965"], [154, "id1971"], [154, "id2121"], [154, "id2270"], [154, "id2420"]], "Enhancements": [[124, "enhancements"], [125, "enhancements"], [125, "id3"], [126, "enhancements"], [127, "enhancements"], [129, "enhancements"], [133, "enhancements"], [134, "enhancements"], [134, "id4"], [135, "enhancements"], [136, "enhancements"], [137, "enhancements"], [139, "id2"], [139, "id5"], [139, "id9"], [146, "enhancements"], [147, "enhancements"], [148, "enhancements"], [149, "enhancements"], [150, "enhancements"], [151, "enhancements"], [152, "enhancements"], [154, "enhancements"], [154, "id150"], [154, "id300"], [154, "id303"], [154, "id454"], [154, "id607"], [154, "id756"], [154, "id907"], [154, "id1058"], [154, "id1209"], [154, "id1360"], [154, "id2425"], [154, "id2429"], [154, "id2434"], [154, "id2731"], [154, "id2880"], [154, "id3033"], [154, "id3182"], [154, "id3187"], [154, "id3335"], [154, "id3931"], [154, "id4085"]], "Changes": [[124, "changes"], [125, "changes"], [125, "id4"], [126, "changes"], [129, "changes"], [131, "changes"], [132, "changes"], [133, "changes"], [134, "changes"], [134, "id2"], [135, "changes"], [136, "changes"], [137, "changes"], [138, "changes"], [139, "changes"], [139, "id3"], [139, "id6"], [139, "id10"], [140, "changes"], [142, "id3"], [142, "id8"], [142, "id12"], [144, "changes"], [145, "changes"], [147, "changes"], [148, "changes"], [149, "changes"], [150, "changes"], [151, "changes"], [152, "changes"], [154, "changes"], [154, "id151"], [154, "id301"], [154, "id304"], [154, "id455"], [154, "id608"], [154, "id757"], [154, "id908"], [154, "id1059"], [154, "id1210"], [154, "id1511"], [154, "id1660"], [154, "id1962"], [154, "id1968"], [154, "id1972"], [154, "id2271"], [154, "id2422"], [154, "id2426"], [154, "id2431"], [154, "id2435"], [154, "id2583"], [154, "id2732"], [154, "id2882"], [154, "id3031"], [154, "id3180"], [154, "id3185"], [154, "id3336"], [154, "id3483"], [154, "id3636"], [154, "id3933"]], "0.10.1": [[125, "id1"], [154, "id297"]], "0.10.1rc1": [[125, "rc1"], [154, "rc1"]], "0.10.2": [[126, "id1"], [154, "id146"]], "0.2.0": [[127, "id1"], [154, "id4082"]], "New features": [[127, "new-features"], [130, "new-features"], [154, "new-features"], [154, "id4084"]], "Bug fixes": [[127, "bug-fixes"], [130, "bug-fixes"], [137, "bug-fixes"], [154, "bug-fixes"], [154, "id3783"], [154, "id4086"]], "API changes summary": [[127, "api-changes-summary"], [154, "api-changes-summary"]], "Contributors": [[127, "contributors"], [129, "contributors"], [132, "contributors"], [136, "contributors"], [139, "contributors"], [139, "id7"], [139, "id11"], [140, "contributors"], [141, "contributors"], [142, "contributors"], [142, "id10"], [142, "id14"], [143, "contributors"], [144, "contributors"], [154, "contributors"], [154, "id1809"], [154, "id1964"], [154, "id1970"], [154, "id1974"], [154, "id2123"], [154, "id2273"], [154, "id2427"], [154, "id2432"], [154, "id2436"], [154, "id2883"], [154, "id3488"], [154, "id3934"], [154, "id4087"]], "0.2.1": [[128, "id1"], [154, "v0-2-1"]], "0.2.2": [[129, "id1"], [154, "id3929"]], "New": [[129, "new"], [131, "new"], [132, "new"], [132, "id3"], [154, "id3484"], [154, "id3487"], [154, "id3635"], [154, "id3930"]], "0.2.3": [[130, "id1"], [154, "id3782"]], "0.2.4": [[131, "id1"], [154, "id3634"]], "0.2.5.1": [[132, "id1"], [154, "id3482"]], "0.2.5": [[132, "id2"], [154, "id3486"]], "0.2.6": [[133, "id1"], [154, "id3333"]], "0.3.0": [[134, "id1"], [154, "id3179"]], "0.3.0 beta": [[134, "beta"], [154, "id3183"]], "0.3.1": [[135, "id1"], [154, "id3029"]], "0.4.0": [[136, "id1"], [154, "id2878"]], "0.4.1": [[137, "id1"], [154, "id2730"]], "0.4.2": [[138, "id1"], [154, "id2582"]], "0.5.0": [[139, "id1"], [154, "id2419"]], "ENHANCEMENTS": [[139, "enhancements"], [142, "enhancements"], [143, "enhancements"], [144, "enhancements"], [154, "id1658"], [154, "id1807"], [154, "id1958"], [154, "id2421"]], "0.5.0 rc": [[139, "rc"], [154, "id2423"]], "0.5.0 beta": [[139, "beta"], [154, "beta"]], "0.5.0 alpha": [[139, "alpha"], [154, "alpha"]], "0.5.1": [[140, "id1"], [154, "id2269"]], "Known Issues": [[140, "known-issues"], [154, "known-issues"]], "0.5.2": [[141, "id1"], [154, "id2120"]], "0.6.0": [[142, "id1"], [154, "id1955"]], "CHANGES": [[142, "changes"], [154, "id1959"]], "FIXES": [[142, "fixes"], [154, "id1960"]], "0.6.0rc": [[142, "rc"], [154, "rc"]], "0.6.0b0": [[142, "b0"], [154, "b0"]], "0.6.0a0": [[142, "a0"], [154, "a0"]], "0.6.1": [[143, "id1"], [154, "id1806"]], "0.6.2": [[144, "id1"], [154, "id1657"]], "0.7.0": [[145, "id1"], [154, "id1506"]], "0.7.1": [[146, "id1"], [154, "id1356"]], "0.8.0": [[147, "id1"], [154, "id1205"]], "0.8.1": [[148, "id1"], [154, "id1054"]], "0.9.0": [[149, "id1"], [154, "id903"]], "0.9.1": [[150, "id1"], [154, "id754"]], "0.9.2": [[151, "id1"], [154, "id601"]], "0.11.0.dev": [[152, "dev"], [154, "dev"]], "What\u2019s new": [[154, "what-s-new"]], "Connectome extraction: inverse covariance for direct connections": [[155, "connectome-extraction-inverse-covariance-for-direct-connections"]], "Page summary": [[155, null], [156, null], [159, null], [160, null], [170, null], [173, null]], "Sparse inverse covariance for functional connectomes": [[155, "sparse-inverse-covariance-for-functional-connectomes"]], "Parameter selection": [[155, null]], "Full example": [[155, null], [155, null], [155, null], [156, null], [156, null]], "Exercise: computing sparse inverse covariance": [[155, null]], "Reference": [[155, null], [155, null], [155, null], [155, null], [158, null]], "Sparse inverse covariance on multiple subjects": [[155, "sparse-inverse-covariance-on-multiple-subjects"]], "Exercise: computing the correlation matrix of rest fmri": [[155, null], [156, null]], "Comparing the different approaches on simulated data": [[155, "comparing-the-different-approaches-on-simulated-data"]], "Full Example": [[155, null]], "Linking total and direct interactions at the group level": [[155, "linking-total-and-direct-interactions-at-the-group-level"]], "Exercise: computing connectivity in tangent space": [[155, null]], "Extracting times series to build a functional connectome": [[156, "extracting-times-series-to-build-a-functional-connectome"]], "Time-series from a brain parcellation or \u201cMaxProb\u201d atlas": [[156, "time-series-from-a-brain-parcellation-or-maxprob-atlas"]], "Brain parcellations": [[156, "brain-parcellations"]], "Extracting signals on a parcellation": [[156, "extracting-signals-on-a-parcellation"]], "Time-series from a probabilistic atlas": [[156, "time-series-from-a-probabilistic-atlas"]], "Probabilistic atlases": [[156, "probabilistic-atlases"]], "Extracting signals from a probabilistic atlas": [[156, "extracting-signals-from-a-probabilistic-atlas"]], "Exercise: correlation matrix of rest fMRI on probabilistic atlas": [[156, null]], "A functional connectome: a graph of interactions": [[156, "a-functional-connectome-a-graph-of-interactions"]], "A functional connectome: extracting coordinates of regions": [[156, "a-functional-connectome-extracting-coordinates-of-regions"]], "Functional connectivity and resting state": [[157, "functional-connectivity-and-resting-state"]], "Clustering to parcellate the brain in regions": [[158, "clustering-to-parcellate-the-brain-in-regions"]], "Data loading: movie-watching data": [[158, "data-loading-movie-watching-data"]], "Applying clustering": [[158, "applying-clustering"]], "Which clustering to use": [[158, null]], "Using and visualizing the resulting parcellation": [[158, "using-and-visualizing-the-resulting-parcellation"]], "Visualizing the parcellation": [[158, "visualizing-the-parcellation"]], "Compressed representation": [[158, "compressed-representation"]], "Example code": [[158, null], [166, null]], "Region Extraction for better brain parcellations": [[159, "region-extraction-for-better-brain-parcellations"]], "Fetching movie-watching based functional datasets": [[159, "fetching-movie-watching-based-functional-datasets"]], "Brain maps using Dictionary learning": [[159, "brain-maps-using-dictionary-learning"]], "Visualization of Dictionary learning maps": [[159, "visualization-of-dictionary-learning-maps"]], "Region Extraction with Dictionary learning maps": [[159, "region-extraction-with-dictionary-learning-maps"]], "Visualization of Region Extraction results": [[159, "visualization-of-region-extraction-results"]], "Computing functional connectivity matrices": [[159, "computing-functional-connectivity-matrices"]], "Visualization of functional connectivity matrices": [[159, "visualization-of-functional-connectivity-matrices"]], "Validating results": [[159, "validating-results"]], "Extracting functional brain networks: ICA and related": [[160, "extracting-functional-brain-networks-ica-and-related"]], "Multi-subject ICA: CanICA": [[160, "multi-subject-ica-canica"]], "Objective": [[160, "objective"]], "Nilearn data for examples": [[160, null]], "Fitting CanICA model with nilearn": [[160, "fitting-canica-model-with-nilearn"]], "Interpreting such components": [[160, "interpreting-such-components"]], "An alternative to ICA: Dictionary learning": [[160, "an-alternative-to-ica-dictionary-learning"]], "An introduction to decoding": [[161, "an-introduction-to-decoding"]], "Loading and preparing the data": [[161, "loading-and-preparing-the-data"]], "The Haxby 2001 experiment": [[161, "the-haxby-2001-experiment"]], "fMRI: using beta maps of a first-level analysis": [[161, null]], "Loading the data into nilearn": [[161, "loading-the-data-into-nilearn"]], "Full code example": [[161, null]], "Performing a simple decoding analysis": [[161, "performing-a-simple-decoding-analysis"]], "A few definitions": [[161, "a-few-definitions"]], "A first estimator": [[161, "a-first-estimator"]], "Decoding made easy": [[161, "decoding-made-easy"]], "Measuring prediction performance": [[161, "measuring-prediction-performance"]], "Cross-validation": [[161, "cross-validation"]], "Choosing a good cross-validation strategy": [[161, "choosing-a-good-cross-validation-strategy"]], "Choice of the prediction accuracy measure": [[161, "choice-of-the-prediction-accuracy-measure"]], "Prediction accuracy at chance using simple strategies": [[161, "prediction-accuracy-at-chance-using-simple-strategies"]], "Putting it all together": [[161, null]], "Visualizing the decoder\u2019s weights": [[161, "visualizing-the-decoder-s-weights"]], "Decoding without a mask: Anova-SVM": [[161, "decoding-without-a-mask-anova-svm"]], "Dimension reduction with feature selection": [[161, "dimension-reduction-with-feature-selection"]], "Visualizing the results": [[161, "visualizing-the-results"]], "Final script": [[161, null]], "Choosing the right predictive model for neuroimaging": [[162, "choosing-the-right-predictive-model-for-neuroimaging"]], "Predictions: regression, classification and multi-class": [[162, "predictions-regression-classification-and-multi-class"]], "Regression": [[162, "regression"]], "Classification: two classes or multi-class": [[162, "classification-two-classes-or-multi-class"]], "Different linear models": [[162, "different-linear-models"]], "Setting estimator parameters": [[162, "setting-estimator-parameters"], [164, "setting-estimator-parameters"]], "Bagging several models": [[162, "bagging-several-models"]], "FREM: fast ensembling of regularized models for robust decoding": [[163, "frem-fast-ensembling-of-regularized-models-for-robust-decoding"]], "FREM pipeline": [[163, "frem-pipeline"]], "Empirical comparisons": [[163, "empirical-comparisons"]], "Decoding performance increase on Haxby dataset": [[163, "decoding-performance-increase-on-haxby-dataset"]], "Code": [[163, null], [163, null], [180, null]], "Spatial regularization of decoding maps on mixed gambles study": [[163, "spatial-regularization-of-decoding-maps-on-mixed-gambles-study"]], "Running scikit-learn functions for more control on the analysis": [[164, "running-scikit-learn-functions-for-more-control-on-the-analysis"]], "Using scikit-learn estimators": [[164, "using-scikit-learn-estimators"]], "Decoding on simulated data": [[164, null]], "Decoding without a mask: Anova-SVM using scikit-learn": [[164, "decoding-without-a-mask-anova-svm-using-scikit-learn"]], "Using any other model in the pipeline": [[164, "using-any-other-model-in-the-pipeline"]], "Decoding and MVPA: predicting from brain images": [[165, "decoding-and-mvpa-predicting-from-brain-images"]], "Searchlight : finding voxels containing information": [[166, "searchlight-finding-voxels-containing-information"]], "Principle of the Searchlight": [[166, "principle-of-the-searchlight"]], "Further Reading": [[166, null]], "Preparing the data": [[166, "preparing-the-data"]], "Setting up the searchlight": [[166, "setting-up-the-searchlight"]], "Classifier": [[166, "classifier"]], "Score function": [[166, "score-function"]], "Cross validation": [[166, "cross-validation"]], "Sphere radius": [[166, "sphere-radius"]], "Searchlight": [[166, "id6"]], "Comparing to massively univariate analysis: F_score or SPM": [[166, "comparing-to-massively-univariate-analysis-f-score-or-spm"]], "SpaceNet: decoding with spatial structure for better maps": [[167, "spacenet-decoding-with-spatial-structure-for-better-maps"]], "The SpaceNet decoder": [[167, "the-spacenet-decoder"]], "Related example": [[167, "related-example"]], "Group-sparse covariance estimation": [[168, "group-sparse-covariance-estimation"]], "Description": [[168, "description"]], "Numerical stability": [[168, "numerical-stability"]], "Execution time": [[168, "execution-time"]], "Synthetic dataset": [[168, "synthetic-dataset"]], "Stopping criteria": [[168, "stopping-criteria"]], "Maximum number of iterations": [[168, "maximum-number-of-iterations"]], "Duality gap": [[168, "duality-gap"]], "Variation of norm of estimate": [[168, "variation-of-norm-of-estimate"]], "Initial estimate value": [[168, "initial-estimate-value"]], "Modifying the stopping criterion": [[168, "modifying-the-stopping-criterion"]], "Cross-validation algorithm": [[168, "cross-validation-algorithm"]], "Principle of cross-validation": [[168, "principle-of-cross-validation"]], "Bounds on alpha": [[168, "bounds-on-alpha"]], "Iterative grid search": [[168, "iterative-grid-search"]], "Warm restart": [[168, "warm-restart"]], "Stopping criterion": [[168, "stopping-criterion"]], "Contributing": [[169, "contributing"], [169, "id5"]], "Code of Conduct": [[169, "code-of-conduct"]], "How to get help?": [[169, "how-to-get-help"]], "How to help the project?": [[169, "how-to-help-the-project"]], "Report bugs or discuss enhancement ideas": [[169, "report-bugs-or-discuss-enhancement-ideas"]], "Answer questions": [[169, "answer-questions"]], "Review Pull Requests": [[169, "review-pull-requests"]], "Contribute code": [[169, "contribute-code"]], "How do we decide what code goes in?": [[169, "how-do-we-decide-what-code-goes-in"]], "Scope of the project": [[169, "scope-of-the-project"]], "Adding atlases and datasets": [[169, "adding-atlases-and-datasets"]], "Who makes decisions": [[169, "who-makes-decisions"]], "How to contribute to nilearn": [[169, "how-to-contribute-to-nilearn"]], "Contribution Guidelines": [[169, "contribution-guidelines"]], "PR Structure": [[169, "pr-structure"]], "Coding Style": [[169, "coding-style"]], "Guidelines for Private Functions": [[169, "guidelines-for-private-functions"]], "Pre-commit": [[169, "pre-commit"]], "Tests": [[169, "tests"]], "Fixtures": [[169, "fixtures"]], "Seeding": [[169, "seeding"]], "Documentation": [[169, "documentation"]], "Setting up your environment": [[169, "setting-up-your-environment"]], "Installing": [[169, "installing"]], "Recommendation": [[169, null], [169, null]], "Building documentation": [[169, "building-documentation"]], "Additional cases": [[169, "additional-cases"]], "How to contribute an atlas": [[169, "how-to-contribute-an-atlas"]], "How to contribute a dataset fetcher": [[169, "how-to-contribute-a-dataset-fetcher"]], "Maintenance": [[169, "maintenance"], [177, "maintenance"]], "First level models": [[170, "first-level-models"]], "HRF models": [[170, "hrf-models"]], "Design matrix: event-based and time series-based": [[170, "design-matrix-event-based-and-time-series-based"]], "Event-based": [[170, "event-based"]], "Time series-based": [[170, "time-series-based"]], "Fitting a first level model": [[170, "fitting-a-first-level-model"]], "Computing contrasts": [[170, "computing-contrasts"]], "Extracting predicted time series and residuals": [[170, "extracting-predicted-time-series-and-residuals"]], "Surface-based analysis": [[170, "surface-based-analysis"]], "An introduction to GLMs in fMRI statistical analysis": [[171, "an-introduction-to-glms-in-fmri-statistical-analysis"]], "A primer on BOLD-fMRI data analysis": [[171, "a-primer-on-bold-fmri-data-analysis"]], "What is fMRI ?": [[171, "what-is-fmri"]], "fMRI data modelling": [[171, "fmri-data-modelling"]], "fMRI statistical analysis": [[171, "fmri-statistical-analysis"]], "Multiple Comparisons": [[171, "multiple-comparisons"]], "Analyzing fMRI using GLMs": [[172, "analyzing-fmri-using-glms"]], "Second level models": [[173, "second-level-models"]], "Fitting a second level model": [[173, "fitting-a-second-level-model"]], "Thresholding statistical maps": [[173, "thresholding-statistical-maps"]], "Multiple comparisons correction": [[173, "multiple-comparisons-correction"]], "Voxel based morphometry": [[173, "voxel-based-morphometry"]], "Glossary": [[174, "glossary"]], "Nilearn": [[175, "nilearn"]], "Featured examples": [[175, "featured-examples"]], "Introduction": [[176, "introduction"]], "What is nilearn?": [[176, "what-is-nilearn"]], "Using nilearn for the first time": [[176, "using-nilearn-for-the-first-time"]], "First steps with nilearn": [[176, "first-steps-with-nilearn"]], "Learning with the API references": [[176, "learning-with-the-api-references"]], "Learning with examples": [[176, "learning-with-examples"]], "Finding help": [[176, "finding-help"]], "Machine learning applications to Neuroimaging": [[176, "machine-learning-applications-to-neuroimaging"]], "Project Organization": [[177, "project-organization"]], "Issues": [[177, "issues"]], "Labels": [[177, "labels"]], "Closing policy": [[177, "closing-policy"]], "Pull Requests": [[177, "pull-requests"]], "Using tox": [[177, "using-tox"]], "How to make a release?": [[177, "how-to-make-a-release"]], "Prepare code for the release": [[177, "prepare-code-for-the-release"]], "Prepare the release": [[177, "prepare-the-release"]], "Build the distributions and upload them to Pypi": [[177, "build-the-distributions-and-upload-them-to-pypi"]], "Build and deploy the documentation": [[177, "build-and-deploy-the-documentation"]], "Post-release": [[177, "post-release"]], "Manipulation brain volumes with nilearn": [[178, "manipulation-brain-volumes-with-nilearn"]], "Input and output: neuroimaging data representation": [[179, "input-and-output-neuroimaging-data-representation"]], "Inputing data: file names or image objects": [[179, "inputing-data-file-names-or-image-objects"]], "File names and objects, 3D and 4D images": [[179, "file-names-and-objects-3d-and-4d-images"]], "File name matching: \u201cglobbing\u201d and user path expansion": [[179, "file-name-matching-globbing-and-user-path-expansion"]], "Python globbing": [[179, null]], "Fetching open datasets from Internet": [[179, "fetching-open-datasets-from-internet"]], "nilearn_data: Where is the downloaded data stored?": [[179, null]], "Understanding neuroimaging data": [[179, "understanding-neuroimaging-data"]], "Nifti and Analyze data": [[179, "nifti-and-analyze-data"]], "Dataset formatting: data shape": [[179, null]], "Niimg-like objects": [[179, "niimg-like-objects"]], "Image affines": [[179, null]], "Decreasing memory used when loading Nifti images": [[179, null]], "Text files: phenotype or behavior": [[179, "text-files-phenotype-or-behavior"]], "Reading CSV with pandas": [[179, null]], "Manipulating images: resampling, smoothing, masking, ROIs\u2026": [[180, "manipulating-images-resampling-smoothing-masking-rois"]], "Functions for data preparation and image transformation": [[180, "functions-for-data-preparation-and-image-transformation"]], "Resampling images": [[180, "resampling-images"]], "Resampling one image to match another one": [[180, "resampling-one-image-to-match-another-one"]], "Example": [[180, null]], "Resampling to a specific target affine, shape, or resolution": [[180, "resampling-to-a-specific-target-affine-shape-or-resolution"]], "Special case: resampling to a given voxel size": [[180, null]], "Accessing individual volumes in 4D images": [[180, "accessing-individual-volumes-in-4d-images"]], "Computing and applying spatial masks": [[180, "computing-and-applying-spatial-masks"]], "Masking data: from 4D Nifti images to 2D data arrays": [[180, "masking-data-from-4d-nifti-images-to-2d-data-arrays"]], "Image operations: creating a ROI mask manually": [[180, "image-operations-creating-a-roi-mask-manually"]], "From neuroimaging volumes to data matrices: the masker objects": [[181, "from-neuroimaging-volumes-to-data-matrices-the-masker-objects"]], "The concept of \u201cmasker\u201d objects": [[181, "the-concept-of-masker-objects"]], "Advanced: Design philosophy of \u201cMaskers\u201d": [[181, null]], "NiftiMasker: applying a mask to load time-series": [[181, "niftimasker-applying-a-mask-to-load-time-series"]], "Advanced: scikit-learn Pipelines": [[181, null]], "Custom data loading: loading only the first 100 time points": [[181, "custom-data-loading-loading-only-the-first-100-time-points"]], "Controlling how the mask is computed from the data": [[181, "controlling-how-the-mask-is-computed-from-the-data"]], "Visualizing the computed mask": [[181, "visualizing-the-computed-mask"]], "Different masking strategies": [[181, "different-masking-strategies"]], "Extra mask parameters: opening, cutoff\u2026": [[181, "extra-mask-parameters-opening-cutoff"]], "Common data preparation steps: smoothing, filtering, resampling": [[181, "common-data-preparation-steps-smoothing-filtering-resampling"]], "`dtype` argument": [[181, null]], "Temporal Filtering and confound removal": [[181, "temporal-filtering-and-confound-removal"]], "Exercise": [[181, null]], "Resampling: resizing and changing resolutions of images": [[181, "resampling-resizing-and-changing-resolutions-of-images"]], "Inverse transform: unmasking data": [[181, "inverse-transform-unmasking-data"]], "Examples to better understand the NiftiMasker": [[181, null]], "Extraction of signals from regions: NiftiLabelsMasker, NiftiMapsMasker": [[181, "extraction-of-signals-from-regions-niftilabelsmasker-niftimapsmasker"]], "Regions definition": [[181, "regions-definition"]], "NiftiLabelsMasker Usage": [[181, "niftilabelsmasker-usage"]], "NiftiMapsMasker Usage": [[181, "niftimapsmasker-usage"]], "Extraction of signals from regions for multiple subjects: MultiNiftiMasker, MultiNiftiLabelsMasker, MultiNiftiMapsMasker": [[181, "extraction-of-signals-from-regions-for-multiple-subjects-multiniftimasker-multiniftilabelsmasker-multiniftimapsmasker"]], "MultiNiftiMasker Usage": [[181, "multiniftimasker-usage"]], "MultiNiftiLabelsMasker Usage": [[181, "multiniftilabelsmasker-usage"]], "MultiNiftiMapsMasker Usage": [[181, "multiniftimapsmasker-usage"]], "Extraction of signals from seeds: NiftiSpheresMasker": [[181, "extraction-of-signals-from-seeds-niftispheresmasker"]], "nilearn.connectome: Functional Connectivity": [[182, "module-nilearn.connectome"]], "nilearn.datasets: Automatic Dataset Fetching": [[183, "module-nilearn.datasets"]], "Templates": [[183, "templates"]], "Atlases": [[183, "atlases"]], "Preprocessed datasets": [[183, "preprocessed-datasets"]], "Statistical maps/derivatives": [[183, "statistical-maps-derivatives"]], "General functions": [[183, "general-functions"]], "nilearn.decoding: Decoding": [[184, "module-nilearn.decoding"]], "nilearn.decomposition: Multivariate Decompositions": [[185, "module-nilearn.decomposition"]], "nilearn.experimental: Experimental Modules": [[186, "module-nilearn.experimental"]], "nilearn.experimental.surface": [[186, "module-nilearn.experimental.surface"]], "nilearn.connectome.ConnectivityMeasure": [[187, "nilearn-connectome-connectivitymeasure"]], "Examples using nilearn.connectome.ConnectivityMeasure": [[187, "examples-using-nilearn-connectome-connectivitymeasure"]], "nilearn.connectome.GroupSparseCovariance": [[188, "nilearn-connectome-groupsparsecovariance"]], "nilearn.connectome.GroupSparseCovarianceCV": [[189, "nilearn-connectome-groupsparsecovariancecv"]], "Examples using nilearn.connectome.GroupSparseCovarianceCV": [[189, "examples-using-nilearn-connectome-groupsparsecovariancecv"]], "nilearn.connectome.cov_to_corr": [[190, "nilearn-connectome-cov-to-corr"]], "nilearn.connectome.group_sparse_covariance": [[191, "nilearn-connectome-group-sparse-covariance"]], "nilearn.connectome.prec_to_partial": [[192, "nilearn-connectome-prec-to-partial"]], "nilearn.connectome.sym_matrix_to_vec": [[193, "nilearn-connectome-sym-matrix-to-vec"]], "nilearn.connectome.vec_to_sym_matrix": [[194, "nilearn-connectome-vec-to-sym-matrix"]], "nilearn.datasets.fetch_abide_pcp": [[195, "nilearn-datasets-fetch-abide-pcp"]], "nilearn.datasets.fetch_adhd": [[196, "nilearn-datasets-fetch-adhd"]], "Examples using nilearn.datasets.fetch_adhd": [[196, "examples-using-nilearn-datasets-fetch-adhd"]], "nilearn.datasets.fetch_atlas_aal": [[197, "nilearn-datasets-fetch-atlas-aal"]], "nilearn.datasets.fetch_atlas_allen_2011": [[198, "nilearn-datasets-fetch-atlas-allen-2011"]], "Examples using nilearn.datasets.fetch_atlas_allen_2011": [[198, "examples-using-nilearn-datasets-fetch-atlas-allen-2011"]], "nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[199, "nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "Examples using nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[199, "examples-using-nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "nilearn.datasets.fetch_atlas_craddock_2012": [[200, "nilearn-datasets-fetch-atlas-craddock-2012"]], "nilearn.datasets.fetch_atlas_destrieux_2009": [[201, "nilearn-datasets-fetch-atlas-destrieux-2009"]], "Examples using nilearn.datasets.fetch_atlas_destrieux_2009": [[201, "examples-using-nilearn-datasets-fetch-atlas-destrieux-2009"]], "nilearn.datasets.fetch_atlas_difumo": [[202, "nilearn-datasets-fetch-atlas-difumo"]], "Examples using nilearn.datasets.fetch_atlas_difumo": [[202, "examples-using-nilearn-datasets-fetch-atlas-difumo"]], "nilearn.datasets.fetch_atlas_harvard_oxford": [[203, "nilearn-datasets-fetch-atlas-harvard-oxford"]], "Examples using nilearn.datasets.fetch_atlas_harvard_oxford": [[203, "examples-using-nilearn-datasets-fetch-atlas-harvard-oxford"]], "nilearn.datasets.fetch_atlas_juelich": [[204, "nilearn-datasets-fetch-atlas-juelich"]], "Examples using nilearn.datasets.fetch_atlas_juelich": [[204, "examples-using-nilearn-datasets-fetch-atlas-juelich"]], "nilearn.datasets.fetch_atlas_msdl": [[205, "nilearn-datasets-fetch-atlas-msdl"]], "Examples using nilearn.datasets.fetch_atlas_msdl": [[205, "examples-using-nilearn-datasets-fetch-atlas-msdl"]], "nilearn.datasets.fetch_atlas_pauli_2017": [[206, "nilearn-datasets-fetch-atlas-pauli-2017"]], "nilearn.datasets.fetch_atlas_schaefer_2018": [[207, "nilearn-datasets-fetch-atlas-schaefer-2018"]], "nilearn.datasets.fetch_atlas_smith_2009": [[208, "nilearn-datasets-fetch-atlas-smith-2009"]], "Examples using nilearn.datasets.fetch_atlas_smith_2009": [[208, "examples-using-nilearn-datasets-fetch-atlas-smith-2009"]], "nilearn.datasets.fetch_atlas_surf_destrieux": [[209, "nilearn-datasets-fetch-atlas-surf-destrieux"]], "Examples using nilearn.datasets.fetch_atlas_surf_destrieux": [[209, "examples-using-nilearn-datasets-fetch-atlas-surf-destrieux"]], "nilearn.datasets.fetch_atlas_talairach": [[210, "nilearn-datasets-fetch-atlas-talairach"]], "nilearn.datasets.fetch_atlas_yeo_2011": [[211, "nilearn-datasets-fetch-atlas-yeo-2011"]], "Examples using nilearn.datasets.fetch_atlas_yeo_2011": [[211, "examples-using-nilearn-datasets-fetch-atlas-yeo-2011"]], "nilearn.datasets.fetch_bids_langloc_dataset": [[212, "nilearn-datasets-fetch-bids-langloc-dataset"]], "nilearn.datasets.fetch_coords_dosenbach_2010": [[213, "nilearn-datasets-fetch-coords-dosenbach-2010"]], "Examples using nilearn.datasets.fetch_coords_dosenbach_2010": [[213, "examples-using-nilearn-datasets-fetch-coords-dosenbach-2010"]], "nilearn.datasets.fetch_coords_power_2011": [[214, "nilearn-datasets-fetch-coords-power-2011"]], "Examples using nilearn.datasets.fetch_coords_power_2011": [[214, "examples-using-nilearn-datasets-fetch-coords-power-2011"]], "nilearn.datasets.fetch_coords_seitzman_2018": [[215, "nilearn-datasets-fetch-coords-seitzman-2018"]], "nilearn.datasets.fetch_development_fmri": [[216, "nilearn-datasets-fetch-development-fmri"]], "Examples using nilearn.datasets.fetch_development_fmri": [[216, "examples-using-nilearn-datasets-fetch-development-fmri"]], "nilearn.datasets.fetch_ds000030_urls": [[217, "nilearn-datasets-fetch-ds000030-urls"]], "Examples using nilearn.datasets.fetch_ds000030_urls": [[217, "examples-using-nilearn-datasets-fetch-ds000030-urls"]], "nilearn.datasets.fetch_fiac_first_level": [[218, "nilearn-datasets-fetch-fiac-first-level"]], "Examples using nilearn.datasets.fetch_fiac_first_level": [[218, "examples-using-nilearn-datasets-fetch-fiac-first-level"]], "nilearn.datasets.fetch_haxby": [[219, "nilearn-datasets-fetch-haxby"]], "Examples using nilearn.datasets.fetch_haxby": [[219, "examples-using-nilearn-datasets-fetch-haxby"]], "nilearn.datasets.fetch_icbm152_2009": [[220, "nilearn-datasets-fetch-icbm152-2009"]], "Examples using nilearn.datasets.fetch_icbm152_2009": [[220, "examples-using-nilearn-datasets-fetch-icbm152-2009"]], "nilearn.datasets.fetch_icbm152_brain_gm_mask": [[221, "nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "Examples using nilearn.datasets.fetch_icbm152_brain_gm_mask": [[221, "examples-using-nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "nilearn.datasets.fetch_language_localizer_demo_dataset": [[222, "nilearn-datasets-fetch-language-localizer-demo-dataset"]], "Examples using nilearn.datasets.fetch_language_localizer_demo_dataset": [[222, "examples-using-nilearn-datasets-fetch-language-localizer-demo-dataset"]], "nilearn.datasets.fetch_localizer_button_task": [[223, "nilearn-datasets-fetch-localizer-button-task"]], "Examples using nilearn.datasets.fetch_localizer_button_task": [[223, "examples-using-nilearn-datasets-fetch-localizer-button-task"]], "nilearn.datasets.fetch_localizer_calculation_task": [[224, "nilearn-datasets-fetch-localizer-calculation-task"]], "Examples using nilearn.datasets.fetch_localizer_calculation_task": [[224, "examples-using-nilearn-datasets-fetch-localizer-calculation-task"]], "nilearn.datasets.fetch_localizer_contrasts": [[225, "nilearn-datasets-fetch-localizer-contrasts"]], "Examples using nilearn.datasets.fetch_localizer_contrasts": [[225, "examples-using-nilearn-datasets-fetch-localizer-contrasts"]], "nilearn.datasets.fetch_localizer_first_level": [[226, "nilearn-datasets-fetch-localizer-first-level"]], "Examples using nilearn.datasets.fetch_localizer_first_level": [[226, "examples-using-nilearn-datasets-fetch-localizer-first-level"]], "nilearn.datasets.fetch_megatrawls_netmats": [[227, "nilearn-datasets-fetch-megatrawls-netmats"]], "Examples using nilearn.datasets.fetch_megatrawls_netmats": [[227, "examples-using-nilearn-datasets-fetch-megatrawls-netmats"]], "nilearn.datasets.fetch_mixed_gambles": [[228, "nilearn-datasets-fetch-mixed-gambles"]], "Examples using nilearn.datasets.fetch_mixed_gambles": [[228, "examples-using-nilearn-datasets-fetch-mixed-gambles"]], "nilearn.datasets.fetch_miyawaki2008": [[229, "nilearn-datasets-fetch-miyawaki2008"]], "Examples using nilearn.datasets.fetch_miyawaki2008": [[229, "examples-using-nilearn-datasets-fetch-miyawaki2008"]], "nilearn.datasets.fetch_neurovault": [[230, "nilearn-datasets-fetch-neurovault"]], "Examples using nilearn.datasets.fetch_neurovault": [[230, "examples-using-nilearn-datasets-fetch-neurovault"]], "nilearn.datasets.fetch_neurovault_auditory_computation_task": [[231, "nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "Examples using nilearn.datasets.fetch_neurovault_auditory_computation_task": [[231, "examples-using-nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "nilearn.datasets.fetch_neurovault_ids": [[232, "nilearn-datasets-fetch-neurovault-ids"]], "Examples using nilearn.datasets.fetch_neurovault_ids": [[232, "examples-using-nilearn-datasets-fetch-neurovault-ids"]], "nilearn.datasets.fetch_neurovault_motor_task": [[233, "nilearn-datasets-fetch-neurovault-motor-task"]], "Examples using nilearn.datasets.fetch_neurovault_motor_task": [[233, "examples-using-nilearn-datasets-fetch-neurovault-motor-task"]], "nilearn.datasets.fetch_oasis_vbm": [[234, "nilearn-datasets-fetch-oasis-vbm"]], "Examples using nilearn.datasets.fetch_oasis_vbm": [[234, "examples-using-nilearn-datasets-fetch-oasis-vbm"]], "nilearn.datasets.fetch_openneuro_dataset": [[235, "nilearn-datasets-fetch-openneuro-dataset"]], "Examples using nilearn.datasets.fetch_openneuro_dataset": [[235, "examples-using-nilearn-datasets-fetch-openneuro-dataset"]], "nilearn.datasets.fetch_openneuro_dataset_index": [[236, "nilearn-datasets-fetch-openneuro-dataset-index"]], "nilearn.datasets.fetch_spm_auditory": [[237, "nilearn-datasets-fetch-spm-auditory"]], "Examples using nilearn.datasets.fetch_spm_auditory": [[237, "examples-using-nilearn-datasets-fetch-spm-auditory"]], "nilearn.datasets.fetch_spm_multimodal_fmri": [[238, "nilearn-datasets-fetch-spm-multimodal-fmri"]], "Examples using nilearn.datasets.fetch_spm_multimodal_fmri": [[238, "examples-using-nilearn-datasets-fetch-spm-multimodal-fmri"]], "nilearn.datasets.fetch_surf_fsaverage": [[239, "nilearn-datasets-fetch-surf-fsaverage"]], "Examples using nilearn.datasets.fetch_surf_fsaverage": [[239, "examples-using-nilearn-datasets-fetch-surf-fsaverage"]], "nilearn.datasets.fetch_surf_nki_enhanced": [[240, "nilearn-datasets-fetch-surf-nki-enhanced"]], "Examples using nilearn.datasets.fetch_surf_nki_enhanced": [[240, "examples-using-nilearn-datasets-fetch-surf-nki-enhanced"]], "nilearn.datasets.get_data_dirs": [[241, "nilearn-datasets-get-data-dirs"]], "Examples using nilearn.datasets.get_data_dirs": [[241, "examples-using-nilearn-datasets-get-data-dirs"]], "nilearn.datasets.load_mni152_brain_mask": [[242, "nilearn-datasets-load-mni152-brain-mask"]], "Examples using nilearn.datasets.load_mni152_brain_mask": [[242, "examples-using-nilearn-datasets-load-mni152-brain-mask"]], "nilearn.datasets.load_mni152_gm_mask": [[243, "nilearn-datasets-load-mni152-gm-mask"]], "nilearn.datasets.load_mni152_gm_template": [[244, "nilearn-datasets-load-mni152-gm-template"]], "nilearn.datasets.load_mni152_template": [[245, "nilearn-datasets-load-mni152-template"]], "Examples using nilearn.datasets.load_mni152_template": [[245, "examples-using-nilearn-datasets-load-mni152-template"]], "nilearn.datasets.load_mni152_wm_mask": [[246, "nilearn-datasets-load-mni152-wm-mask"]], "nilearn.datasets.load_mni152_wm_template": [[247, "nilearn-datasets-load-mni152-wm-template"]], "nilearn.datasets.load_sample_motor_activation_image": [[248, "nilearn-datasets-load-sample-motor-activation-image"]], "Examples using nilearn.datasets.load_sample_motor_activation_image": [[248, "examples-using-nilearn-datasets-load-sample-motor-activation-image"]], "nilearn.datasets.patch_openneuro_dataset": [[249, "nilearn-datasets-patch-openneuro-dataset"]], "nilearn.datasets.select_from_index": [[250, "nilearn-datasets-select-from-index"]], "Examples using nilearn.datasets.select_from_index": [[250, "examples-using-nilearn-datasets-select-from-index"]], "nilearn.decoding.Decoder": [[251, "nilearn-decoding-decoder"]], "Examples using nilearn.decoding.Decoder": [[251, "examples-using-nilearn-decoding-decoder"]], "nilearn.decoding.DecoderRegressor": [[252, "nilearn-decoding-decoderregressor"]], "Examples using nilearn.decoding.DecoderRegressor": [[252, "examples-using-nilearn-decoding-decoderregressor"]], "nilearn.decoding.FREMClassifier": [[253, "nilearn-decoding-fremclassifier"]], "Examples using nilearn.decoding.FREMClassifier": [[253, "examples-using-nilearn-decoding-fremclassifier"]], "nilearn.decoding.FREMRegressor": [[254, "nilearn-decoding-fremregressor"]], "Examples using nilearn.decoding.FREMRegressor": [[254, "examples-using-nilearn-decoding-fremregressor"]], "nilearn.decoding.SearchLight": [[255, "nilearn-decoding-searchlight"]], "Examples using nilearn.decoding.SearchLight": [[255, "examples-using-nilearn-decoding-searchlight"]], "nilearn.decoding.SpaceNetClassifier": [[256, "nilearn-decoding-spacenetclassifier"]], "nilearn.decoding.SpaceNetRegressor": [[257, "nilearn-decoding-spacenetregressor"]], "Examples using nilearn.decoding.SpaceNetRegressor": [[257, "examples-using-nilearn-decoding-spacenetregressor"]], "nilearn.decomposition.CanICA": [[258, "nilearn-decomposition-canica"]], "Examples using nilearn.decomposition.CanICA": [[258, "examples-using-nilearn-decomposition-canica"]], "nilearn.decomposition.DictLearning": [[259, "nilearn-decomposition-dictlearning"]], "Examples using nilearn.decomposition.DictLearning": [[259, "examples-using-nilearn-decomposition-dictlearning"]], "nilearn.experimental.surface.FileMesh": [[260, "nilearn-experimental-surface-filemesh"]], "nilearn.experimental.surface.InMemoryMesh": [[261, "nilearn-experimental-surface-inmemorymesh"]], "nilearn.experimental.surface.Mesh": [[262, "nilearn-experimental-surface-mesh"]], "nilearn.experimental.surface.PolyMesh": [[263, "nilearn-experimental-surface-polymesh"]], "Examples using nilearn.experimental.surface.PolyMesh": [[263, "examples-using-nilearn-experimental-surface-polymesh"]], "nilearn.experimental.surface.SurfaceImage": [[264, "nilearn-experimental-surface-surfaceimage"]], "Examples using nilearn.experimental.surface.SurfaceImage": [[264, "examples-using-nilearn-experimental-surface-surfaceimage"]], "nilearn.experimental.surface.SurfaceLabelsMasker": [[265, "nilearn-experimental-surface-surfacelabelsmasker"]], "Examples using nilearn.experimental.surface.SurfaceLabelsMasker": [[265, "examples-using-nilearn-experimental-surface-surfacelabelsmasker"]], "nilearn.experimental.surface.SurfaceMasker": [[266, "nilearn-experimental-surface-surfacemasker"]], "Examples using nilearn.experimental.surface.SurfaceMasker": [[266, "examples-using-nilearn-experimental-surface-surfacemasker"]], "nilearn.experimental.surface.fetch_destrieux": [[267, "nilearn-experimental-surface-fetch-destrieux"]], "Examples using nilearn.experimental.surface.fetch_destrieux": [[267, "examples-using-nilearn-experimental-surface-fetch-destrieux"]], "nilearn.experimental.surface.fetch_nki": [[268, "nilearn-experimental-surface-fetch-nki"]], "Examples using nilearn.experimental.surface.fetch_nki": [[268, "examples-using-nilearn-experimental-surface-fetch-nki"]], "nilearn.experimental.surface.load_fsaverage": [[269, "nilearn-experimental-surface-load-fsaverage"]], "nilearn.glm.ARModel": [[270, "nilearn-glm-armodel"]], "nilearn.glm.Contrast": [[271, "nilearn-glm-contrast"]], "Examples using nilearn.glm.Contrast": [[271, "examples-using-nilearn-glm-contrast"]], "nilearn.glm.FContrastResults": [[272, "nilearn-glm-fcontrastresults"]], "nilearn.glm.LikelihoodModelResults": [[273, "nilearn-glm-likelihoodmodelresults"]], "nilearn.glm.OLSModel": [[274, "nilearn-glm-olsmodel"]], "nilearn.glm.RegressionResults": [[275, "nilearn-glm-regressionresults"]], "nilearn.glm.SimpleRegressionResults": [[276, "nilearn-glm-simpleregressionresults"]], "nilearn.glm.TContrastResults": [[277, "nilearn-glm-tcontrastresults"]], "nilearn.glm.cluster_level_inference": [[278, "nilearn-glm-cluster-level-inference"]], "Examples using nilearn.glm.cluster_level_inference": [[278, "examples-using-nilearn-glm-cluster-level-inference"]], "nilearn.glm.compute_contrast": [[279, "nilearn-glm-compute-contrast"]], "Examples using nilearn.glm.compute_contrast": [[279, "examples-using-nilearn-glm-compute-contrast"]], "nilearn.glm.compute_fixed_effects": [[280, "nilearn-glm-compute-fixed-effects"]], "Examples using nilearn.glm.compute_fixed_effects": [[280, "examples-using-nilearn-glm-compute-fixed-effects"]], "nilearn.glm.expression_to_contrast_vector": [[281, "nilearn-glm-expression-to-contrast-vector"]], "nilearn.glm.fdr_threshold": [[282, "nilearn-glm-fdr-threshold"]], "nilearn.glm.first_level.FirstLevelModel": [[283, "nilearn-glm-first-level-firstlevelmodel"]], "Examples using nilearn.glm.first_level.FirstLevelModel": [[283, "examples-using-nilearn-glm-first-level-firstlevelmodel"]], "nilearn.glm.first_level.check_design_matrix": [[284, "nilearn-glm-first-level-check-design-matrix"]], "nilearn.glm.first_level.compute_regressor": [[285, "nilearn-glm-first-level-compute-regressor"]], "Examples using nilearn.glm.first_level.compute_regressor": [[285, "examples-using-nilearn-glm-first-level-compute-regressor"]], "nilearn.glm.first_level.first_level_from_bids": [[286, "nilearn-glm-first-level-first-level-from-bids"]], "Examples using nilearn.glm.first_level.first_level_from_bids": [[286, "examples-using-nilearn-glm-first-level-first-level-from-bids"]], "nilearn.glm.first_level.glover_dispersion_derivative": [[287, "nilearn-glm-first-level-glover-dispersion-derivative"]], "nilearn.glm.first_level.glover_hrf": [[288, "nilearn-glm-first-level-glover-hrf"]], "nilearn.glm.first_level.glover_time_derivative": [[289, "nilearn-glm-first-level-glover-time-derivative"]], "nilearn.glm.first_level.make_first_level_design_matrix": [[290, "nilearn-glm-first-level-make-first-level-design-matrix"]], "Examples using nilearn.glm.first_level.make_first_level_design_matrix": [[290, "examples-using-nilearn-glm-first-level-make-first-level-design-matrix"]], "nilearn.glm.first_level.mean_scaling": [[291, "nilearn-glm-first-level-mean-scaling"]], "nilearn.glm.first_level.run_glm": [[292, "nilearn-glm-first-level-run-glm"]], "Examples using nilearn.glm.first_level.run_glm": [[292, "examples-using-nilearn-glm-first-level-run-glm"]], "nilearn.glm.first_level.spm_dispersion_derivative": [[293, "nilearn-glm-first-level-spm-dispersion-derivative"]], "nilearn.glm.first_level.spm_hrf": [[294, "nilearn-glm-first-level-spm-hrf"]], "nilearn.glm.first_level.spm_time_derivative": [[295, "nilearn-glm-first-level-spm-time-derivative"]], "nilearn.glm.second_level.SecondLevelModel": [[296, "nilearn-glm-second-level-secondlevelmodel"]], "Examples using nilearn.glm.second_level.SecondLevelModel": [[296, "examples-using-nilearn-glm-second-level-secondlevelmodel"]], "nilearn.glm.second_level.make_second_level_design_matrix": [[297, "nilearn-glm-second-level-make-second-level-design-matrix"]], "Examples using nilearn.glm.second_level.make_second_level_design_matrix": [[297, "examples-using-nilearn-glm-second-level-make-second-level-design-matrix"]], "nilearn.glm.second_level.non_parametric_inference": [[298, "nilearn-glm-second-level-non-parametric-inference"]], "Examples using nilearn.glm.second_level.non_parametric_inference": [[298, "examples-using-nilearn-glm-second-level-non-parametric-inference"]], "nilearn.glm.threshold_stats_img": [[299, "nilearn-glm-threshold-stats-img"]], "Examples using nilearn.glm.threshold_stats_img": [[299, "examples-using-nilearn-glm-threshold-stats-img"]], "nilearn.image.binarize_img": [[300, "nilearn-image-binarize-img"]], "nilearn.image.clean_img": [[301, "nilearn-image-clean-img"]], "Examples using nilearn.image.clean_img": [[301, "examples-using-nilearn-image-clean-img"]], "nilearn.image.concat_imgs": [[302, "nilearn-image-concat-imgs"]], "Examples using nilearn.image.concat_imgs": [[302, "examples-using-nilearn-image-concat-imgs"]], "nilearn.image.coord_transform": [[303, "nilearn-image-coord-transform"]], "Examples using nilearn.image.coord_transform": [[303, "examples-using-nilearn-image-coord-transform"]], "nilearn.image.copy_img": [[304, "nilearn-image-copy-img"]], "nilearn.image.crop_img": [[305, "nilearn-image-crop-img"]], "nilearn.image.get_data": [[306, "nilearn-image-get-data"]], "Examples using nilearn.image.get_data": [[306, "examples-using-nilearn-image-get-data"]], "nilearn.image.high_variance_confounds": [[307, "nilearn-image-high-variance-confounds"]], "Examples using nilearn.image.high_variance_confounds": [[307, "examples-using-nilearn-image-high-variance-confounds"]], "nilearn.image.index_img": [[308, "nilearn-image-index-img"]], "Examples using nilearn.image.index_img": [[308, "examples-using-nilearn-image-index-img"]], "nilearn.image.iter_img": [[309, "nilearn-image-iter-img"]], "Examples using nilearn.image.iter_img": [[309, "examples-using-nilearn-image-iter-img"]], "nilearn.image.largest_connected_component_img": [[310, "nilearn-image-largest-connected-component-img"]], "nilearn.image.load_img": [[311, "nilearn-image-load-img"]], "Examples using nilearn.image.load_img": [[311, "examples-using-nilearn-image-load-img"]], "nilearn.image.math_img": [[312, "nilearn-image-math-img"]], "Examples using nilearn.image.math_img": [[312, "examples-using-nilearn-image-math-img"]], "nilearn.image.mean_img": [[313, "nilearn-image-mean-img"]], "Examples using nilearn.image.mean_img": [[313, "examples-using-nilearn-image-mean-img"]], "nilearn.image.new_img_like": [[314, "nilearn-image-new-img-like"]], "Examples using nilearn.image.new_img_like": [[314, "examples-using-nilearn-image-new-img-like"]], "nilearn.image.reorder_img": [[315, "nilearn-image-reorder-img"]], "nilearn.image.resample_img": [[316, "nilearn-image-resample-img"]], "Examples using nilearn.image.resample_img": [[316, "examples-using-nilearn-image-resample-img"]], "nilearn.image.resample_to_img": [[317, "nilearn-image-resample-to-img"]], "Examples using nilearn.image.resample_to_img": [[317, "examples-using-nilearn-image-resample-to-img"]], "nilearn.image.smooth_img": [[318, "nilearn-image-smooth-img"]], "Examples using nilearn.image.smooth_img": [[318, "examples-using-nilearn-image-smooth-img"]], "nilearn.image.swap_img_hemispheres": [[319, "nilearn-image-swap-img-hemispheres"]], "nilearn.image.threshold_img": [[320, "nilearn-image-threshold-img"]], "Examples using nilearn.image.threshold_img": [[320, "examples-using-nilearn-image-threshold-img"]], "nilearn.interfaces.bids.get_bids_files": [[321, "nilearn-interfaces-bids-get-bids-files"]], "nilearn.interfaces.bids.parse_bids_filename": [[322, "nilearn-interfaces-bids-parse-bids-filename"]], "nilearn.interfaces.bids.save_glm_to_bids": [[323, "nilearn-interfaces-bids-save-glm-to-bids"]], "Examples using nilearn.interfaces.bids.save_glm_to_bids": [[323, "examples-using-nilearn-interfaces-bids-save-glm-to-bids"]], "nilearn.interfaces.fmriprep.load_confounds": [[324, "nilearn-interfaces-fmriprep-load-confounds"]], "Examples using nilearn.interfaces.fmriprep.load_confounds": [[324, "examples-using-nilearn-interfaces-fmriprep-load-confounds"]], "nilearn.interfaces.fmriprep.load_confounds_strategy": [[325, "nilearn-interfaces-fmriprep-load-confounds-strategy"]], "Examples using nilearn.interfaces.fmriprep.load_confounds_strategy": [[325, "examples-using-nilearn-interfaces-fmriprep-load-confounds-strategy"]], "nilearn.interfaces.fsl.get_design_from_fslmat": [[326, "nilearn-interfaces-fsl-get-design-from-fslmat"]], "Examples using nilearn.interfaces.fsl.get_design_from_fslmat": [[326, "examples-using-nilearn-interfaces-fsl-get-design-from-fslmat"]], "nilearn.maskers.BaseMasker": [[327, "nilearn-maskers-basemasker"]], "Examples using nilearn.maskers.BaseMasker": [[327, "examples-using-nilearn-maskers-basemasker"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[328, "nilearn-maskers-multiniftilabelsmasker"]], "Examples using nilearn.maskers.MultiNiftiLabelsMasker": [[328, "examples-using-nilearn-maskers-multiniftilabelsmasker"]], "nilearn.maskers.MultiNiftiMapsMasker": [[329, "nilearn-maskers-multiniftimapsmasker"]], "Examples using nilearn.maskers.MultiNiftiMapsMasker": [[329, "examples-using-nilearn-maskers-multiniftimapsmasker"]], "nilearn.maskers.MultiNiftiMasker": [[330, "nilearn-maskers-multiniftimasker"]], "Examples using nilearn.maskers.MultiNiftiMasker": [[330, "examples-using-nilearn-maskers-multiniftimasker"]], "nilearn.maskers.NiftiLabelsMasker": [[331, "nilearn-maskers-niftilabelsmasker"]], "Examples using nilearn.maskers.NiftiLabelsMasker": [[331, "examples-using-nilearn-maskers-niftilabelsmasker"]], "nilearn.maskers.NiftiMapsMasker": [[332, "nilearn-maskers-niftimapsmasker"]], "Examples using nilearn.maskers.NiftiMapsMasker": [[332, "examples-using-nilearn-maskers-niftimapsmasker"]], "nilearn.maskers.NiftiMasker": [[333, "nilearn-maskers-niftimasker"]], "Examples using nilearn.maskers.NiftiMasker": [[333, "examples-using-nilearn-maskers-niftimasker"]], "nilearn.maskers.NiftiSpheresMasker": [[334, "nilearn-maskers-niftispheresmasker"]], "Examples using nilearn.maskers.NiftiSpheresMasker": [[334, "examples-using-nilearn-maskers-niftispheresmasker"]], "nilearn.masking.apply_mask": [[335, "nilearn-masking-apply-mask"]], "Examples using nilearn.masking.apply_mask": [[335, "examples-using-nilearn-masking-apply-mask"]], "nilearn.masking.compute_background_mask": [[336, "nilearn-masking-compute-background-mask"]], "nilearn.masking.compute_brain_mask": [[337, "nilearn-masking-compute-brain-mask"]], "nilearn.masking.compute_epi_mask": [[338, "nilearn-masking-compute-epi-mask"]], "Examples using nilearn.masking.compute_epi_mask": [[338, "examples-using-nilearn-masking-compute-epi-mask"]], "nilearn.masking.compute_multi_background_mask": [[339, "nilearn-masking-compute-multi-background-mask"]], "nilearn.masking.compute_multi_brain_mask": [[340, "nilearn-masking-compute-multi-brain-mask"]], "nilearn.masking.compute_multi_epi_mask": [[341, "nilearn-masking-compute-multi-epi-mask"]], "nilearn.masking.intersect_masks": [[342, "nilearn-masking-intersect-masks"]], "nilearn.masking.unmask": [[343, "nilearn-masking-unmask"]], "Examples using nilearn.masking.unmask": [[343, "examples-using-nilearn-masking-unmask"]], "nilearn.mass_univariate.permuted_ols": [[344, "nilearn-mass-univariate-permuted-ols"]], "Examples using nilearn.mass_univariate.permuted_ols": [[344, "examples-using-nilearn-mass-univariate-permuted-ols"]], "nilearn.plotting.displays.BaseAxes": [[345, "nilearn-plotting-displays-baseaxes"]], "nilearn.plotting.displays.BaseSlicer": [[346, "nilearn-plotting-displays-baseslicer"]], "nilearn.plotting.displays.CutAxes": [[347, "nilearn-plotting-displays-cutaxes"]], "nilearn.plotting.displays.GlassBrainAxes": [[348, "nilearn-plotting-displays-glassbrainaxes"]], "nilearn.plotting.displays.LProjector": [[349, "nilearn-plotting-displays-lprojector"]], "Examples using nilearn.plotting.displays.LProjector": [[349, "examples-using-nilearn-plotting-displays-lprojector"]], "nilearn.plotting.displays.LRProjector": [[350, "nilearn-plotting-displays-lrprojector"]], "Examples using nilearn.plotting.displays.LRProjector": [[350, "examples-using-nilearn-plotting-displays-lrprojector"]], "nilearn.plotting.displays.LYRProjector": [[351, "nilearn-plotting-displays-lyrprojector"]], "Examples using nilearn.plotting.displays.LYRProjector": [[351, "examples-using-nilearn-plotting-displays-lyrprojector"]], "nilearn.plotting.displays.LYRZProjector": [[352, "nilearn-plotting-displays-lyrzprojector"]], "Examples using nilearn.plotting.displays.LYRZProjector": [[352, "examples-using-nilearn-plotting-displays-lyrzprojector"]], "nilearn.plotting.displays.LZRProjector": [[353, "nilearn-plotting-displays-lzrprojector"]], "Examples using nilearn.plotting.displays.LZRProjector": [[353, "examples-using-nilearn-plotting-displays-lzrprojector"]], "nilearn.plotting.displays.LZRYProjector": [[354, "nilearn-plotting-displays-lzryprojector"]], "Examples using nilearn.plotting.displays.LZRYProjector": [[354, "examples-using-nilearn-plotting-displays-lzryprojector"]], "nilearn.plotting.displays.MosaicSlicer": [[355, "nilearn-plotting-displays-mosaicslicer"]], "Examples using nilearn.plotting.displays.MosaicSlicer": [[355, "examples-using-nilearn-plotting-displays-mosaicslicer"]], "nilearn.plotting.displays.OrthoProjector": [[356, "nilearn-plotting-displays-orthoprojector"]], "Examples using nilearn.plotting.displays.OrthoProjector": [[356, "examples-using-nilearn-plotting-displays-orthoprojector"]], "nilearn.plotting.displays.OrthoSlicer": [[357, "nilearn-plotting-displays-orthoslicer"]], "Examples using nilearn.plotting.displays.OrthoSlicer": [[357, "examples-using-nilearn-plotting-displays-orthoslicer"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[358, "nilearn-plotting-displays-plotlysurfacefigure"]], "Examples using nilearn.plotting.displays.PlotlySurfaceFigure": [[358, "examples-using-nilearn-plotting-displays-plotlysurfacefigure"]], "nilearn.plotting.displays.RProjector": [[359, "nilearn-plotting-displays-rprojector"]], "Examples using nilearn.plotting.displays.RProjector": [[359, "examples-using-nilearn-plotting-displays-rprojector"]], "nilearn.plotting.displays.TiledSlicer": [[360, "nilearn-plotting-displays-tiledslicer"]], "Examples using nilearn.plotting.displays.TiledSlicer": [[360, "examples-using-nilearn-plotting-displays-tiledslicer"]], "nilearn.plotting.displays.XProjector": [[361, "nilearn-plotting-displays-xprojector"]], "Examples using nilearn.plotting.displays.XProjector": [[361, "examples-using-nilearn-plotting-displays-xprojector"]], "nilearn.plotting.displays.XSlicer": [[362, "nilearn-plotting-displays-xslicer"]], "Examples using nilearn.plotting.displays.XSlicer": [[362, "examples-using-nilearn-plotting-displays-xslicer"]], "nilearn.plotting.displays.XZProjector": [[363, "nilearn-plotting-displays-xzprojector"]], "Examples using nilearn.plotting.displays.XZProjector": [[363, "examples-using-nilearn-plotting-displays-xzprojector"]], "nilearn.plotting.displays.XZSlicer": [[364, "nilearn-plotting-displays-xzslicer"]], "Examples using nilearn.plotting.displays.XZSlicer": [[364, "examples-using-nilearn-plotting-displays-xzslicer"]], "nilearn.plotting.displays.YProjector": [[365, "nilearn-plotting-displays-yprojector"]], "Examples using nilearn.plotting.displays.YProjector": [[365, "examples-using-nilearn-plotting-displays-yprojector"]], "nilearn.plotting.displays.YSlicer": [[366, "nilearn-plotting-displays-yslicer"]], "Examples using nilearn.plotting.displays.YSlicer": [[366, "examples-using-nilearn-plotting-displays-yslicer"]], "nilearn.plotting.displays.YXProjector": [[367, "nilearn-plotting-displays-yxprojector"]], "Examples using nilearn.plotting.displays.YXProjector": [[367, "examples-using-nilearn-plotting-displays-yxprojector"]], "nilearn.plotting.displays.YXSlicer": [[368, "nilearn-plotting-displays-yxslicer"]], "Examples using nilearn.plotting.displays.YXSlicer": [[368, "examples-using-nilearn-plotting-displays-yxslicer"]], "nilearn.plotting.displays.YZProjector": [[369, "nilearn-plotting-displays-yzprojector"]], "Examples using nilearn.plotting.displays.YZProjector": [[369, "examples-using-nilearn-plotting-displays-yzprojector"]], "nilearn.plotting.displays.YZSlicer": [[370, "nilearn-plotting-displays-yzslicer"]], "Examples using nilearn.plotting.displays.YZSlicer": [[370, "examples-using-nilearn-plotting-displays-yzslicer"]], "nilearn.plotting.displays.ZProjector": [[371, "nilearn-plotting-displays-zprojector"]], "Examples using nilearn.plotting.displays.ZProjector": [[371, "examples-using-nilearn-plotting-displays-zprojector"]], "nilearn.plotting.displays.ZSlicer": [[372, "nilearn-plotting-displays-zslicer"]], "Examples using nilearn.plotting.displays.ZSlicer": [[372, "examples-using-nilearn-plotting-displays-zslicer"]], "nilearn.plotting.displays.get_projector": [[373, "nilearn-plotting-displays-get-projector"]], "nilearn.plotting.displays.get_slicer": [[374, "nilearn-plotting-displays-get-slicer"]], "nilearn.plotting.find_cut_slices": [[375, "nilearn-plotting-find-cut-slices"]], "nilearn.plotting.find_parcellation_cut_coords": [[376, "nilearn-plotting-find-parcellation-cut-coords"]], "Examples using nilearn.plotting.find_parcellation_cut_coords": [[376, "examples-using-nilearn-plotting-find-parcellation-cut-coords"]], "nilearn.plotting.find_probabilistic_atlas_cut_coords": [[377, "nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "Examples using nilearn.plotting.find_probabilistic_atlas_cut_coords": [[377, "examples-using-nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "nilearn.plotting.find_xyz_cut_coords": [[378, "nilearn-plotting-find-xyz-cut-coords"]], "Examples using nilearn.plotting.find_xyz_cut_coords": [[378, "examples-using-nilearn-plotting-find-xyz-cut-coords"]], "nilearn.plotting.plot_anat": [[379, "nilearn-plotting-plot-anat"]], "Examples using nilearn.plotting.plot_anat": [[379, "examples-using-nilearn-plotting-plot-anat"]], "nilearn.plotting.plot_carpet": [[380, "nilearn-plotting-plot-carpet"]], "Examples using nilearn.plotting.plot_carpet": [[380, "examples-using-nilearn-plotting-plot-carpet"]], "nilearn.plotting.plot_connectome": [[381, "nilearn-plotting-plot-connectome"]], "Examples using nilearn.plotting.plot_connectome": [[381, "examples-using-nilearn-plotting-plot-connectome"]], "nilearn.plotting.plot_contrast_matrix": [[382, "nilearn-plotting-plot-contrast-matrix"]], "Examples using nilearn.plotting.plot_contrast_matrix": [[382, "examples-using-nilearn-plotting-plot-contrast-matrix"]], "nilearn.plotting.plot_design_matrix": [[383, "nilearn-plotting-plot-design-matrix"]], "Examples using nilearn.plotting.plot_design_matrix": [[383, "examples-using-nilearn-plotting-plot-design-matrix"]], "nilearn.plotting.plot_epi": [[384, "nilearn-plotting-plot-epi"]], "Examples using nilearn.plotting.plot_epi": [[384, "examples-using-nilearn-plotting-plot-epi"]], "nilearn.plotting.plot_event": [[385, "nilearn-plotting-plot-event"]], "Examples using nilearn.plotting.plot_event": [[385, "examples-using-nilearn-plotting-plot-event"]], "nilearn.plotting.plot_glass_brain": [[386, "nilearn-plotting-plot-glass-brain"]], "Examples using nilearn.plotting.plot_glass_brain": [[386, "examples-using-nilearn-plotting-plot-glass-brain"]], "nilearn.plotting.plot_img": [[387, "nilearn-plotting-plot-img"]], "Examples using nilearn.plotting.plot_img": [[387, "examples-using-nilearn-plotting-plot-img"]], "nilearn.plotting.plot_img_comparison": [[388, "nilearn-plotting-plot-img-comparison"]], "Examples using nilearn.plotting.plot_img_comparison": [[388, "examples-using-nilearn-plotting-plot-img-comparison"]], "nilearn.plotting.plot_img_on_surf": [[389, "nilearn-plotting-plot-img-on-surf"]], "Examples using nilearn.plotting.plot_img_on_surf": [[389, "examples-using-nilearn-plotting-plot-img-on-surf"]], "nilearn.plotting.plot_markers": [[390, "nilearn-plotting-plot-markers"]], "Examples using nilearn.plotting.plot_markers": [[390, "examples-using-nilearn-plotting-plot-markers"]], "nilearn.plotting.plot_matrix": [[391, "nilearn-plotting-plot-matrix"]], "Examples using nilearn.plotting.plot_matrix": [[391, "examples-using-nilearn-plotting-plot-matrix"]], "nilearn.plotting.plot_prob_atlas": [[392, "nilearn-plotting-plot-prob-atlas"]], "Examples using nilearn.plotting.plot_prob_atlas": [[392, "examples-using-nilearn-plotting-plot-prob-atlas"]], "nilearn.plotting.plot_roi": [[393, "nilearn-plotting-plot-roi"]], "Examples using nilearn.plotting.plot_roi": [[393, "examples-using-nilearn-plotting-plot-roi"]], "nilearn.plotting.plot_stat_map": [[394, "nilearn-plotting-plot-stat-map"]], "Examples using nilearn.plotting.plot_stat_map": [[394, "examples-using-nilearn-plotting-plot-stat-map"]], "nilearn.plotting.plot_surf": [[395, "nilearn-plotting-plot-surf"]], "Examples using nilearn.plotting.plot_surf": [[395, "examples-using-nilearn-plotting-plot-surf"]], "nilearn.plotting.plot_surf_contours": [[396, "nilearn-plotting-plot-surf-contours"]], "Examples using nilearn.plotting.plot_surf_contours": [[396, "examples-using-nilearn-plotting-plot-surf-contours"]], "nilearn.plotting.plot_surf_roi": [[397, "nilearn-plotting-plot-surf-roi"]], "Examples using nilearn.plotting.plot_surf_roi": [[397, "examples-using-nilearn-plotting-plot-surf-roi"]], "nilearn.plotting.plot_surf_stat_map": [[398, "nilearn-plotting-plot-surf-stat-map"]], "Examples using nilearn.plotting.plot_surf_stat_map": [[398, "examples-using-nilearn-plotting-plot-surf-stat-map"]], "nilearn.plotting.show": [[399, "nilearn-plotting-show"]], "Examples using nilearn.plotting.show": [[399, "examples-using-nilearn-plotting-show"]], "nilearn.plotting.view_connectome": [[400, "nilearn-plotting-view-connectome"]], "Examples using nilearn.plotting.view_connectome": [[400, "examples-using-nilearn-plotting-view-connectome"]], "nilearn.plotting.view_img": [[401, "nilearn-plotting-view-img"]], "Examples using nilearn.plotting.view_img": [[401, "examples-using-nilearn-plotting-view-img"]], "nilearn.plotting.view_img_on_surf": [[402, "nilearn-plotting-view-img-on-surf"]], "Examples using nilearn.plotting.view_img_on_surf": [[402, "examples-using-nilearn-plotting-view-img-on-surf"]], "nilearn.plotting.view_markers": [[403, "nilearn-plotting-view-markers"]], "nilearn.plotting.view_surf": [[404, "nilearn-plotting-view-surf"]], "Examples using nilearn.plotting.view_surf": [[404, "examples-using-nilearn-plotting-view-surf"]], "nilearn.regions.HierarchicalKMeans": [[405, "nilearn-regions-hierarchicalkmeans"]], "nilearn.regions.Parcellations": [[406, "nilearn-regions-parcellations"]], "Examples using nilearn.regions.Parcellations": [[406, "examples-using-nilearn-regions-parcellations"]], "nilearn.regions.ReNA": [[407, "nilearn-regions-rena"]], "nilearn.regions.RegionExtractor": [[408, "nilearn-regions-regionextractor"]], "Examples using nilearn.regions.RegionExtractor": [[408, "examples-using-nilearn-regions-regionextractor"]], "nilearn.regions.connected_label_regions": [[409, "nilearn-regions-connected-label-regions"]], "Examples using nilearn.regions.connected_label_regions": [[409, "examples-using-nilearn-regions-connected-label-regions"]], "nilearn.regions.connected_regions": [[410, "nilearn-regions-connected-regions"]], "Examples using nilearn.regions.connected_regions": [[410, "examples-using-nilearn-regions-connected-regions"]], "nilearn.regions.img_to_signals_labels": [[411, "nilearn-regions-img-to-signals-labels"]], "nilearn.regions.img_to_signals_maps": [[412, "nilearn-regions-img-to-signals-maps"]], "nilearn.regions.recursive_neighbor_agglomeration": [[413, "nilearn-regions-recursive-neighbor-agglomeration"]], "nilearn.regions.signals_to_img_labels": [[414, "nilearn-regions-signals-to-img-labels"]], "nilearn.regions.signals_to_img_maps": [[415, "nilearn-regions-signals-to-img-maps"]], "nilearn.reporting.HTMLReport": [[416, "nilearn-reporting-htmlreport"]], "Examples using nilearn.reporting.HTMLReport": [[416, "examples-using-nilearn-reporting-htmlreport"]], "nilearn.reporting.get_clusters_table": [[417, "nilearn-reporting-get-clusters-table"]], "Examples using nilearn.reporting.get_clusters_table": [[417, "examples-using-nilearn-reporting-get-clusters-table"]], "nilearn.reporting.make_glm_report": [[418, "nilearn-reporting-make-glm-report"]], "Examples using nilearn.reporting.make_glm_report": [[418, "examples-using-nilearn-reporting-make-glm-report"]], "nilearn.signal.butterworth": [[419, "nilearn-signal-butterworth"]], "nilearn.signal.clean": [[420, "nilearn-signal-clean"]], "nilearn.signal.high_variance_confounds": [[421, "nilearn-signal-high-variance-confounds"]], "nilearn.surface.load_surf_data": [[422, "nilearn-surface-load-surf-data"]], "Examples using nilearn.surface.load_surf_data": [[422, "examples-using-nilearn-surface-load-surf-data"]], "nilearn.surface.load_surf_mesh": [[423, "nilearn-surface-load-surf-mesh"]], "Examples using nilearn.surface.load_surf_mesh": [[423, "examples-using-nilearn-surface-load-surf-mesh"]], "nilearn.surface.vol_to_surf": [[424, "nilearn-surface-vol-to-surf"]], "Examples using nilearn.surface.vol_to_surf": [[424, "examples-using-nilearn-surface-vol-to-surf"]], "nilearn.glm: Generalized Linear Models": [[425, "module-nilearn.glm"]], "nilearn.glm.first_level": [[425, "module-nilearn.glm.first_level"]], "nilearn.glm.second_level": [[425, "module-nilearn.glm.second_level"]], "nilearn.image: Image Processing and Resampling Utilities": [[426, "module-nilearn.image"]], "API References": [[427, "api-references"]], "nilearn.interfaces: Loading components from interfaces": [[428, "module-nilearn.interfaces"]], "nilearn.interfaces.bids": [[428, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.fmriprep": [[428, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fsl": [[428, "module-nilearn.interfaces.fsl"]], "nilearn.maskers: Extracting Signals from Brain Images": [[429, "module-nilearn.maskers"]], "nilearn.masking: Data Masking Utilities": [[430, "module-nilearn.masking"]], "nilearn.mass_univariate: Mass-Univariate Analysis": [[431, "module-nilearn.mass_univariate"]], "nilearn.plotting: Plotting Brain Data": [[432, "module-nilearn.plotting"]], "nilearn.plotting.displays: Interacting with figures": [[432, "module-nilearn.plotting.displays"]], "nilearn.regions: Operating on Regions": [[433, "module-nilearn.regions"]], "nilearn.reporting: Reporting Functions": [[434, "module-nilearn.reporting"]], "nilearn.signal: Preprocessing Time Series": [[435, "module-nilearn.signal"]], "nilearn.surface: Manipulating Surface Data": [[436, "module-nilearn.surface"]], "Plotting brain images": [[437, "plotting-brain-images"]], "Code examples": [[437, null]], "Different plotting functions": [[437, "different-plotting-functions"]], "Different display modes": [[437, "different-display-modes"]], "Available Colormaps": [[437, "available-colormaps"]], "Adding overlays, edges, contours, contour fillings, markers, scale bar": [[437, "adding-overlays-edges-contours-contour-fillings-markers-scale-bar"]], "Displaying or saving to an image file": [[437, "displaying-or-saving-to-an-image-file"]], "Surface plotting": [[437, "surface-plotting"]], "Interactive plots": [[437, "interactive-plots"]], "3D Plots of statistical maps or atlases on the cortical surface": [[437, "d-plots-of-statistical-maps-or-atlases-on-the-cortical-surface"]], "view_img_on_surf: Surface plot using a 3D statistical map": [[437, "view-img-on-surf-surface-plot-using-a-3d-statistical-map"]], "view_surf: Surface plot using a surface map and a cortical mesh": [[437, "view-surf-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "plot_surf_stat_map: Surface plot using a surface map and a cortical mesh": [[437, "plot-surf-stat-map-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "3D Plots of connectomes": [[437, "d-plots-of-connectomes"]], "3D Plots of markers": [[437, "d-plots-of-markers"]], "Interactive visualization of statistical map slices": [[437, "interactive-visualization-of-statistical-map-slices"]], "Quickstart": [[438, "quickstart"]], "nilearn": [[438, "nilearn"]], "Important links": [[438, "important-links"]], "Install": [[438, "install"]], "Latest release": [[438, "latest-release"]], "Development version": [[438, "development-version"]], "Check installation": [[438, "check-installation"]], "Drop-in Hours": [[438, "drop-in-hours"]], "Dependencies": [[438, "dependencies"]], "Development": [[438, "development"]], "User guide": [[440, "user-guide"]], "Table of contents": [[440, "table-of-contents"]]}, "indexentries": {"anova": [[174, "term-ANOVA"]], "auc": [[174, "term-AUC"]], "bids": [[174, "term-BIDS"]], "bold": [[174, "term-BOLD"]], "beta": [[174, "term-Beta"]], "canica": [[174, "term-CanICA"]], "closing": [[174, "term-Closing"]], "decoding": [[174, "term-Decoding"]], "deterministic atlas": [[174, "term-Deterministic-atlas"]], "dictionary learning": [[174, "term-Dictionary-learning"]], "dilation": [[174, "term-Dilation"]], "eeg": [[174, "term-EEG"]], "epi": [[174, "term-EPI"]], "erosion": [[174, "term-Erosion"]], "fdr correction": [[174, "term-FDR-correction"]], "fir": [[174, "term-FIR"]], "fpr correction": [[174, "term-FPR-correction"]], "frem": [[174, "term-FREM"]], "fwer correction": [[174, "term-FWER-correction"]], "fwhm": [[174, "term-FWHM"]], "glm": [[174, "term-GLM"]], "hrf": [[174, "term-HRF"]], "ica": [[174, "term-ICA"]], "meg": [[174, "term-MEG"]], "mni": [[174, "term-MNI"]], "mvpa": [[174, "term-MVPA"]], "neurovault": [[174, "term-Neurovault"]], "opening": [[174, "term-Opening"]], "parameter estimate": [[174, "term-Parameter-estimate"]], "probabilistic atlas": [[174, "term-Probabilistic-atlas"]], "roc": [[174, "term-ROC"]], "rena": [[174, "term-ReNA"]], "snr": [[174, "term-SNR"]], "spm": [[174, "term-SPM"]], "svm": [[174, "term-SVM"]], "searchlight": [[174, "term-Searchlight"]], "spacenet": [[174, "term-SpaceNet"]], "tfce": [[174, "term-TFCE"]], "tr": [[174, "term-TR"]], "unsupervised learning": [[174, "term-Unsupervised-learning"]], "vbm": [[174, "term-VBM"]], "ward clustering": [[174, "term-Ward-clustering"]], "classification": [[174, "term-classification"]], "contrast": [[174, "term-contrast"]], "fmri": [[174, "term-fMRI"]], "fmriprep": [[174, "term-fMRIPrep"]], "functional connectivity": [[174, "term-functional-connectivity"]], "functional connectome": [[174, "term-functional-connectome"]], "parcellation": [[174, "term-parcellation"]], "predictive modelling": [[174, "term-predictive-modelling"]], "regression": [[174, "term-regression"]], "resting-state": [[174, "term-resting-state"]], "supervised learning": [[174, "term-supervised-learning"]], "voxel": [[174, "term-voxel"]], "module": [[182, "module-nilearn.connectome"], [183, "module-nilearn.datasets"], [184, "module-nilearn.decoding"], [185, "module-nilearn.decomposition"], [186, "module-nilearn.experimental"], [186, "module-nilearn.experimental.surface"], [425, "module-nilearn.glm"], [425, "module-nilearn.glm.first_level"], [425, "module-nilearn.glm.second_level"], [426, "module-nilearn.image"], [428, "module-nilearn.interfaces"], [428, "module-nilearn.interfaces.bids"], [428, "module-nilearn.interfaces.fmriprep"], [428, "module-nilearn.interfaces.fsl"], [429, "module-nilearn.maskers"], [430, "module-nilearn.masking"], [431, "module-nilearn.mass_univariate"], [432, "module-nilearn.plotting"], [432, "module-nilearn.plotting.displays"], [433, "module-nilearn.regions"], [434, "module-nilearn.reporting"], [435, "module-nilearn.signal"], [436, "module-nilearn.surface"]], "nilearn.connectome": [[182, "module-nilearn.connectome"]], "nilearn.datasets": [[183, "module-nilearn.datasets"]], "nilearn.decoding": [[184, "module-nilearn.decoding"]], "nilearn.decomposition": [[185, "module-nilearn.decomposition"]], "nilearn.experimental": [[186, "module-nilearn.experimental"]], "nilearn.experimental.surface": [[186, "module-nilearn.experimental.surface"]], "connectivitymeasure (class in nilearn.connectome)": [[187, "nilearn.connectome.ConnectivityMeasure"]], "__init__() (nilearn.connectome.connectivitymeasure method)": [[187, "nilearn.connectome.ConnectivityMeasure.__init__"]], "fit() (nilearn.connectome.connectivitymeasure method)": [[187, "nilearn.connectome.ConnectivityMeasure.fit"]], "fit_transform() (nilearn.connectome.connectivitymeasure method)": [[187, "nilearn.connectome.ConnectivityMeasure.fit_transform"]], "get_metadata_routing() (nilearn.connectome.connectivitymeasure method)": [[187, "nilearn.connectome.ConnectivityMeasure.get_metadata_routing"]], "get_params() (nilearn.connectome.connectivitymeasure method)": [[187, "nilearn.connectome.ConnectivityMeasure.get_params"]], "inverse_transform() (nilearn.connectome.connectivitymeasure method)": [[187, "nilearn.connectome.ConnectivityMeasure.inverse_transform"]], "set_inverse_transform_request() (nilearn.connectome.connectivitymeasure method)": [[187, "nilearn.connectome.ConnectivityMeasure.set_inverse_transform_request"]], "set_output() (nilearn.connectome.connectivitymeasure method)": [[187, "nilearn.connectome.ConnectivityMeasure.set_output"]], "set_params() (nilearn.connectome.connectivitymeasure method)": [[187, "nilearn.connectome.ConnectivityMeasure.set_params"]], "set_transform_request() (nilearn.connectome.connectivitymeasure method)": [[187, "nilearn.connectome.ConnectivityMeasure.set_transform_request"]], "transform() (nilearn.connectome.connectivitymeasure method)": [[187, "nilearn.connectome.ConnectivityMeasure.transform"]], "groupsparsecovariance (class in nilearn.connectome)": [[188, "nilearn.connectome.GroupSparseCovariance"]], "__init__() (nilearn.connectome.groupsparsecovariance method)": [[188, "nilearn.connectome.GroupSparseCovariance.__init__"]], "fit() (nilearn.connectome.groupsparsecovariance method)": [[188, "nilearn.connectome.GroupSparseCovariance.fit"]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariance method)": [[188, "nilearn.connectome.GroupSparseCovariance.get_metadata_routing"]], "get_params() (nilearn.connectome.groupsparsecovariance method)": [[188, "nilearn.connectome.GroupSparseCovariance.get_params"]], "set_fit_request() (nilearn.connectome.groupsparsecovariance method)": [[188, "nilearn.connectome.GroupSparseCovariance.set_fit_request"]], "set_params() (nilearn.connectome.groupsparsecovariance method)": [[188, "nilearn.connectome.GroupSparseCovariance.set_params"]], "groupsparsecovariancecv (class in nilearn.connectome)": [[189, "nilearn.connectome.GroupSparseCovarianceCV"]], "__init__() (nilearn.connectome.groupsparsecovariancecv method)": [[189, "nilearn.connectome.GroupSparseCovarianceCV.__init__"]], "fit() (nilearn.connectome.groupsparsecovariancecv method)": [[189, "nilearn.connectome.GroupSparseCovarianceCV.fit"]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariancecv method)": [[189, "nilearn.connectome.GroupSparseCovarianceCV.get_metadata_routing"]], "get_params() (nilearn.connectome.groupsparsecovariancecv method)": [[189, "nilearn.connectome.GroupSparseCovarianceCV.get_params"]], "set_fit_request() (nilearn.connectome.groupsparsecovariancecv method)": [[189, "nilearn.connectome.GroupSparseCovarianceCV.set_fit_request"]], "set_params() (nilearn.connectome.groupsparsecovariancecv method)": [[189, "nilearn.connectome.GroupSparseCovarianceCV.set_params"]], "cov_to_corr() (in module nilearn.connectome)": [[190, "nilearn.connectome.cov_to_corr"]], "group_sparse_covariance() (in module nilearn.connectome)": [[191, "nilearn.connectome.group_sparse_covariance"]], "prec_to_partial() (in module nilearn.connectome)": [[192, "nilearn.connectome.prec_to_partial"]], "sym_matrix_to_vec() (in module nilearn.connectome)": [[193, "nilearn.connectome.sym_matrix_to_vec"]], "vec_to_sym_matrix() (in module nilearn.connectome)": [[194, "nilearn.connectome.vec_to_sym_matrix"]], "fetch_abide_pcp() (in module nilearn.datasets)": [[195, "nilearn.datasets.fetch_abide_pcp"]], "fetch_adhd() (in module nilearn.datasets)": [[196, "nilearn.datasets.fetch_adhd"]], "fetch_atlas_aal() (in module nilearn.datasets)": [[197, "nilearn.datasets.fetch_atlas_aal"]], "fetch_atlas_allen_2011() (in module nilearn.datasets)": [[198, "nilearn.datasets.fetch_atlas_allen_2011"]], "fetch_atlas_basc_multiscale_2015() (in module nilearn.datasets)": [[199, "nilearn.datasets.fetch_atlas_basc_multiscale_2015"]], "fetch_atlas_craddock_2012() (in module nilearn.datasets)": [[200, "nilearn.datasets.fetch_atlas_craddock_2012"]], "fetch_atlas_destrieux_2009() (in module nilearn.datasets)": [[201, "nilearn.datasets.fetch_atlas_destrieux_2009"]], "fetch_atlas_difumo() (in module nilearn.datasets)": [[202, "nilearn.datasets.fetch_atlas_difumo"]], "fetch_atlas_harvard_oxford() (in module nilearn.datasets)": [[203, "nilearn.datasets.fetch_atlas_harvard_oxford"]], "fetch_atlas_juelich() (in module nilearn.datasets)": [[204, "nilearn.datasets.fetch_atlas_juelich"]], "fetch_atlas_msdl() (in module nilearn.datasets)": [[205, "nilearn.datasets.fetch_atlas_msdl"]], "fetch_atlas_pauli_2017() (in module nilearn.datasets)": [[206, "nilearn.datasets.fetch_atlas_pauli_2017"]], "fetch_atlas_schaefer_2018() (in module nilearn.datasets)": [[207, "nilearn.datasets.fetch_atlas_schaefer_2018"]], "fetch_atlas_smith_2009() (in module nilearn.datasets)": [[208, "nilearn.datasets.fetch_atlas_smith_2009"]], "fetch_atlas_surf_destrieux() (in module nilearn.datasets)": [[209, "nilearn.datasets.fetch_atlas_surf_destrieux"]], "fetch_atlas_talairach() (in module nilearn.datasets)": [[210, "nilearn.datasets.fetch_atlas_talairach"]], "fetch_atlas_yeo_2011() (in module nilearn.datasets)": [[211, "nilearn.datasets.fetch_atlas_yeo_2011"]], "fetch_bids_langloc_dataset() (in module nilearn.datasets)": [[212, "nilearn.datasets.fetch_bids_langloc_dataset"]], "fetch_coords_dosenbach_2010() (in module nilearn.datasets)": [[213, "nilearn.datasets.fetch_coords_dosenbach_2010"]], "fetch_coords_power_2011() (in module nilearn.datasets)": [[214, "nilearn.datasets.fetch_coords_power_2011"]], "fetch_coords_seitzman_2018() (in module nilearn.datasets)": [[215, "nilearn.datasets.fetch_coords_seitzman_2018"]], "fetch_development_fmri() (in module nilearn.datasets)": [[216, "nilearn.datasets.fetch_development_fmri"]], "fetch_ds000030_urls() (in module nilearn.datasets)": [[217, "nilearn.datasets.fetch_ds000030_urls"]], "fetch_fiac_first_level() (in module nilearn.datasets)": [[218, "nilearn.datasets.fetch_fiac_first_level"]], "fetch_haxby() (in module nilearn.datasets)": [[219, "nilearn.datasets.fetch_haxby"]], "fetch_icbm152_2009() (in module nilearn.datasets)": [[220, "nilearn.datasets.fetch_icbm152_2009"]], "fetch_icbm152_brain_gm_mask() (in module nilearn.datasets)": [[221, "nilearn.datasets.fetch_icbm152_brain_gm_mask"]], "fetch_language_localizer_demo_dataset() (in module nilearn.datasets)": [[222, "nilearn.datasets.fetch_language_localizer_demo_dataset"]], "fetch_localizer_button_task() (in module nilearn.datasets)": [[223, "nilearn.datasets.fetch_localizer_button_task"]], "fetch_localizer_calculation_task() (in module nilearn.datasets)": [[224, "nilearn.datasets.fetch_localizer_calculation_task"]], "fetch_localizer_contrasts() (in module nilearn.datasets)": [[225, "nilearn.datasets.fetch_localizer_contrasts"]], "fetch_localizer_first_level() (in module nilearn.datasets)": [[226, "nilearn.datasets.fetch_localizer_first_level"]], "fetch_megatrawls_netmats() (in module nilearn.datasets)": [[227, "nilearn.datasets.fetch_megatrawls_netmats"]], "fetch_mixed_gambles() (in module nilearn.datasets)": [[228, "nilearn.datasets.fetch_mixed_gambles"]], "fetch_miyawaki2008() (in module nilearn.datasets)": [[229, "nilearn.datasets.fetch_miyawaki2008"]], "fetch_neurovault() (in module nilearn.datasets)": [[230, "nilearn.datasets.fetch_neurovault"]], "fetch_neurovault_auditory_computation_task() (in module nilearn.datasets)": [[231, "nilearn.datasets.fetch_neurovault_auditory_computation_task"]], "fetch_neurovault_ids() (in module nilearn.datasets)": [[232, "nilearn.datasets.fetch_neurovault_ids"]], "fetch_neurovault_motor_task() (in module nilearn.datasets)": [[233, "nilearn.datasets.fetch_neurovault_motor_task"]], "fetch_oasis_vbm() (in module nilearn.datasets)": [[234, "nilearn.datasets.fetch_oasis_vbm"]], "fetch_openneuro_dataset() (in module nilearn.datasets)": [[235, "nilearn.datasets.fetch_openneuro_dataset"]], "fetch_openneuro_dataset_index() (in module nilearn.datasets)": [[236, "nilearn.datasets.fetch_openneuro_dataset_index"]], "fetch_spm_auditory() (in module nilearn.datasets)": [[237, "nilearn.datasets.fetch_spm_auditory"]], "fetch_spm_multimodal_fmri() (in module nilearn.datasets)": [[238, "nilearn.datasets.fetch_spm_multimodal_fmri"]], "fetch_surf_fsaverage() (in module nilearn.datasets)": [[239, "nilearn.datasets.fetch_surf_fsaverage"]], "fetch_surf_nki_enhanced() (in module nilearn.datasets)": [[240, "nilearn.datasets.fetch_surf_nki_enhanced"]], "get_data_dirs() (in module nilearn.datasets)": [[241, "nilearn.datasets.get_data_dirs"]], "load_mni152_brain_mask() (in module nilearn.datasets)": [[242, "nilearn.datasets.load_mni152_brain_mask"]], "load_mni152_gm_mask() (in module nilearn.datasets)": [[243, "nilearn.datasets.load_mni152_gm_mask"]], "load_mni152_gm_template() (in module nilearn.datasets)": [[244, "nilearn.datasets.load_mni152_gm_template"]], "load_mni152_template() (in module nilearn.datasets)": [[245, "nilearn.datasets.load_mni152_template"]], "load_mni152_wm_mask() (in module nilearn.datasets)": [[246, "nilearn.datasets.load_mni152_wm_mask"]], "load_mni152_wm_template() (in module nilearn.datasets)": [[247, "nilearn.datasets.load_mni152_wm_template"]], "load_sample_motor_activation_image() (in module nilearn.datasets)": [[248, "nilearn.datasets.load_sample_motor_activation_image"]], "patch_openneuro_dataset() (in module nilearn.datasets)": [[249, "nilearn.datasets.patch_openneuro_dataset"]], "select_from_index() (in module nilearn.datasets)": [[250, "nilearn.datasets.select_from_index"]], "decoder (class in nilearn.decoding)": [[251, "nilearn.decoding.Decoder"]], "__init__() (nilearn.decoding.decoder method)": [[251, "nilearn.decoding.Decoder.__init__"]], "decision_function() (nilearn.decoding.decoder method)": [[251, "nilearn.decoding.Decoder.decision_function"]], "fit() (nilearn.decoding.decoder method)": [[251, "nilearn.decoding.Decoder.fit"]], "get_metadata_routing() (nilearn.decoding.decoder method)": [[251, "nilearn.decoding.Decoder.get_metadata_routing"]], "get_params() (nilearn.decoding.decoder method)": [[251, "nilearn.decoding.Decoder.get_params"]], "predict() (nilearn.decoding.decoder method)": [[251, "nilearn.decoding.Decoder.predict"]], "score() (nilearn.decoding.decoder method)": [[251, "nilearn.decoding.Decoder.score"]], "set_fit_request() (nilearn.decoding.decoder method)": [[251, "nilearn.decoding.Decoder.set_fit_request"]], "set_params() (nilearn.decoding.decoder method)": [[251, "nilearn.decoding.Decoder.set_params"]], "set_score_request() (nilearn.decoding.decoder method)": [[251, "nilearn.decoding.Decoder.set_score_request"]], "decoderregressor (class in nilearn.decoding)": [[252, "nilearn.decoding.DecoderRegressor"]], "__init__() (nilearn.decoding.decoderregressor method)": [[252, "nilearn.decoding.DecoderRegressor.__init__"]], "decision_function() (nilearn.decoding.decoderregressor method)": [[252, "nilearn.decoding.DecoderRegressor.decision_function"]], "fit() (nilearn.decoding.decoderregressor method)": [[252, "nilearn.decoding.DecoderRegressor.fit"]], "get_metadata_routing() (nilearn.decoding.decoderregressor method)": [[252, "nilearn.decoding.DecoderRegressor.get_metadata_routing"]], "get_params() (nilearn.decoding.decoderregressor method)": [[252, "nilearn.decoding.DecoderRegressor.get_params"]], "predict() (nilearn.decoding.decoderregressor method)": [[252, "nilearn.decoding.DecoderRegressor.predict"]], "score() (nilearn.decoding.decoderregressor method)": [[252, "nilearn.decoding.DecoderRegressor.score"]], "set_fit_request() (nilearn.decoding.decoderregressor method)": [[252, "nilearn.decoding.DecoderRegressor.set_fit_request"]], "set_params() (nilearn.decoding.decoderregressor method)": [[252, "nilearn.decoding.DecoderRegressor.set_params"]], "set_score_request() (nilearn.decoding.decoderregressor method)": [[252, "nilearn.decoding.DecoderRegressor.set_score_request"]], "fremclassifier (class in nilearn.decoding)": [[253, "nilearn.decoding.FREMClassifier"]], "__init__() (nilearn.decoding.fremclassifier method)": [[253, "nilearn.decoding.FREMClassifier.__init__"]], "decision_function() (nilearn.decoding.fremclassifier method)": [[253, "nilearn.decoding.FREMClassifier.decision_function"]], "fit() (nilearn.decoding.fremclassifier method)": [[253, "nilearn.decoding.FREMClassifier.fit"]], "get_metadata_routing() (nilearn.decoding.fremclassifier method)": [[253, "nilearn.decoding.FREMClassifier.get_metadata_routing"]], "get_params() (nilearn.decoding.fremclassifier method)": [[253, "nilearn.decoding.FREMClassifier.get_params"]], "predict() (nilearn.decoding.fremclassifier method)": [[253, "nilearn.decoding.FREMClassifier.predict"]], "score() (nilearn.decoding.fremclassifier method)": [[253, "nilearn.decoding.FREMClassifier.score"]], "set_fit_request() (nilearn.decoding.fremclassifier method)": [[253, "nilearn.decoding.FREMClassifier.set_fit_request"]], "set_params() (nilearn.decoding.fremclassifier method)": [[253, "nilearn.decoding.FREMClassifier.set_params"]], "set_score_request() (nilearn.decoding.fremclassifier method)": [[253, "nilearn.decoding.FREMClassifier.set_score_request"]], "fremregressor (class in nilearn.decoding)": [[254, "nilearn.decoding.FREMRegressor"]], "__init__() (nilearn.decoding.fremregressor method)": [[254, "nilearn.decoding.FREMRegressor.__init__"]], "decision_function() (nilearn.decoding.fremregressor method)": [[254, "nilearn.decoding.FREMRegressor.decision_function"]], "fit() (nilearn.decoding.fremregressor method)": [[254, "nilearn.decoding.FREMRegressor.fit"]], "get_metadata_routing() (nilearn.decoding.fremregressor method)": [[254, "nilearn.decoding.FREMRegressor.get_metadata_routing"]], "get_params() (nilearn.decoding.fremregressor method)": [[254, "nilearn.decoding.FREMRegressor.get_params"]], "predict() (nilearn.decoding.fremregressor method)": [[254, "nilearn.decoding.FREMRegressor.predict"]], "score() (nilearn.decoding.fremregressor method)": [[254, "nilearn.decoding.FREMRegressor.score"]], "set_fit_request() (nilearn.decoding.fremregressor method)": [[254, "nilearn.decoding.FREMRegressor.set_fit_request"]], "set_params() (nilearn.decoding.fremregressor method)": [[254, "nilearn.decoding.FREMRegressor.set_params"]], "set_score_request() (nilearn.decoding.fremregressor method)": [[254, "nilearn.decoding.FREMRegressor.set_score_request"]], "searchlight (class in nilearn.decoding)": [[255, "nilearn.decoding.SearchLight"]], "__init__() (nilearn.decoding.searchlight method)": [[255, "nilearn.decoding.SearchLight.__init__"]], "fit() (nilearn.decoding.searchlight method)": [[255, "nilearn.decoding.SearchLight.fit"]], "get_metadata_routing() (nilearn.decoding.searchlight method)": [[255, "nilearn.decoding.SearchLight.get_metadata_routing"]], "get_params() (nilearn.decoding.searchlight method)": [[255, "nilearn.decoding.SearchLight.get_params"]], "set_fit_request() (nilearn.decoding.searchlight method)": [[255, "nilearn.decoding.SearchLight.set_fit_request"]], "set_params() (nilearn.decoding.searchlight method)": [[255, "nilearn.decoding.SearchLight.set_params"]], "supported_losses (nilearn.decoding.spacenetclassifier attribute)": [[256, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_LOSSES"]], "supported_penalties (nilearn.decoding.spacenetclassifier attribute)": [[256, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_PENALTIES"]], "spacenetclassifier (class in nilearn.decoding)": [[256, "nilearn.decoding.SpaceNetClassifier"]], "__init__() (nilearn.decoding.spacenetclassifier method)": [[256, "nilearn.decoding.SpaceNetClassifier.__init__"]], "check_params() (nilearn.decoding.spacenetclassifier method)": [[256, "nilearn.decoding.SpaceNetClassifier.check_params"]], "decision_function() (nilearn.decoding.spacenetclassifier method)": [[256, "nilearn.decoding.SpaceNetClassifier.decision_function"]], "fit() (nilearn.decoding.spacenetclassifier method)": [[256, "nilearn.decoding.SpaceNetClassifier.fit"]], "get_metadata_routing() (nilearn.decoding.spacenetclassifier method)": [[256, "nilearn.decoding.SpaceNetClassifier.get_metadata_routing"]], "get_params() (nilearn.decoding.spacenetclassifier method)": [[256, "nilearn.decoding.SpaceNetClassifier.get_params"]], "predict() (nilearn.decoding.spacenetclassifier method)": [[256, "nilearn.decoding.SpaceNetClassifier.predict"]], "score() (nilearn.decoding.spacenetclassifier method)": [[256, "nilearn.decoding.SpaceNetClassifier.score"]], "set_fit_request() (nilearn.decoding.spacenetclassifier method)": [[256, "nilearn.decoding.SpaceNetClassifier.set_fit_request"]], "set_params() (nilearn.decoding.spacenetclassifier method)": [[256, "nilearn.decoding.SpaceNetClassifier.set_params"]], "set_score_request() (nilearn.decoding.spacenetclassifier method)": [[256, "nilearn.decoding.SpaceNetClassifier.set_score_request"]], "supported_losses (nilearn.decoding.spacenetregressor attribute)": [[257, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_LOSSES"]], "supported_penalties (nilearn.decoding.spacenetregressor attribute)": [[257, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_PENALTIES"]], "spacenetregressor (class in nilearn.decoding)": [[257, "nilearn.decoding.SpaceNetRegressor"]], "__init__() (nilearn.decoding.spacenetregressor method)": [[257, "nilearn.decoding.SpaceNetRegressor.__init__"]], "check_params() (nilearn.decoding.spacenetregressor method)": [[257, "nilearn.decoding.SpaceNetRegressor.check_params"]], "decision_function() (nilearn.decoding.spacenetregressor method)": [[257, "nilearn.decoding.SpaceNetRegressor.decision_function"]], "fit() (nilearn.decoding.spacenetregressor method)": [[257, "nilearn.decoding.SpaceNetRegressor.fit"]], "get_metadata_routing() (nilearn.decoding.spacenetregressor method)": [[257, "nilearn.decoding.SpaceNetRegressor.get_metadata_routing"]], "get_params() (nilearn.decoding.spacenetregressor method)": [[257, "nilearn.decoding.SpaceNetRegressor.get_params"]], "predict() (nilearn.decoding.spacenetregressor method)": [[257, "nilearn.decoding.SpaceNetRegressor.predict"]], "score() (nilearn.decoding.spacenetregressor method)": [[257, "nilearn.decoding.SpaceNetRegressor.score"]], "set_fit_request() (nilearn.decoding.spacenetregressor method)": [[257, "nilearn.decoding.SpaceNetRegressor.set_fit_request"]], "set_params() (nilearn.decoding.spacenetregressor method)": [[257, "nilearn.decoding.SpaceNetRegressor.set_params"]], "set_score_request() (nilearn.decoding.spacenetregressor method)": [[257, "nilearn.decoding.SpaceNetRegressor.set_score_request"]], "canica (class in nilearn.decomposition)": [[258, "nilearn.decomposition.CanICA"]], "__init__() (nilearn.decomposition.canica method)": [[258, "nilearn.decomposition.CanICA.__init__"]], "fit() (nilearn.decomposition.canica method)": [[258, "nilearn.decomposition.CanICA.fit"]], "fit_transform() (nilearn.decomposition.canica method)": [[258, "nilearn.decomposition.CanICA.fit_transform"]], "get_metadata_routing() (nilearn.decomposition.canica method)": [[258, "nilearn.decomposition.CanICA.get_metadata_routing"]], "get_params() (nilearn.decomposition.canica method)": [[258, "nilearn.decomposition.CanICA.get_params"]], "inverse_transform() (nilearn.decomposition.canica method)": [[258, "nilearn.decomposition.CanICA.inverse_transform"]], "score() (nilearn.decomposition.canica method)": [[258, "nilearn.decomposition.CanICA.score"]], "set_fit_request() (nilearn.decomposition.canica method)": [[258, "nilearn.decomposition.CanICA.set_fit_request"]], "set_inverse_transform_request() (nilearn.decomposition.canica method)": [[258, "nilearn.decomposition.CanICA.set_inverse_transform_request"]], "set_output() (nilearn.decomposition.canica method)": [[258, "nilearn.decomposition.CanICA.set_output"]], "set_params() (nilearn.decomposition.canica method)": [[258, "nilearn.decomposition.CanICA.set_params"]], "set_score_request() (nilearn.decomposition.canica method)": [[258, "nilearn.decomposition.CanICA.set_score_request"]], "set_transform_request() (nilearn.decomposition.canica method)": [[258, "nilearn.decomposition.CanICA.set_transform_request"]], "transform() (nilearn.decomposition.canica method)": [[258, "nilearn.decomposition.CanICA.transform"]], "dictlearning (class in nilearn.decomposition)": [[259, "nilearn.decomposition.DictLearning"]], "__init__() (nilearn.decomposition.dictlearning method)": [[259, "nilearn.decomposition.DictLearning.__init__"]], "fit() (nilearn.decomposition.dictlearning method)": [[259, "nilearn.decomposition.DictLearning.fit"]], "fit_transform() (nilearn.decomposition.dictlearning method)": [[259, "nilearn.decomposition.DictLearning.fit_transform"]], "get_metadata_routing() (nilearn.decomposition.dictlearning method)": [[259, "nilearn.decomposition.DictLearning.get_metadata_routing"]], "get_params() (nilearn.decomposition.dictlearning method)": [[259, "nilearn.decomposition.DictLearning.get_params"]], "inverse_transform() (nilearn.decomposition.dictlearning method)": [[259, "nilearn.decomposition.DictLearning.inverse_transform"]], "score() (nilearn.decomposition.dictlearning method)": [[259, "nilearn.decomposition.DictLearning.score"]], "set_fit_request() (nilearn.decomposition.dictlearning method)": [[259, "nilearn.decomposition.DictLearning.set_fit_request"]], "set_inverse_transform_request() (nilearn.decomposition.dictlearning method)": [[259, "nilearn.decomposition.DictLearning.set_inverse_transform_request"]], "set_output() (nilearn.decomposition.dictlearning method)": [[259, "nilearn.decomposition.DictLearning.set_output"]], "set_params() (nilearn.decomposition.dictlearning method)": [[259, "nilearn.decomposition.DictLearning.set_params"]], "set_score_request() (nilearn.decomposition.dictlearning method)": [[259, "nilearn.decomposition.DictLearning.set_score_request"]], "set_transform_request() (nilearn.decomposition.dictlearning method)": [[259, "nilearn.decomposition.DictLearning.set_transform_request"]], "transform() (nilearn.decomposition.dictlearning method)": [[259, "nilearn.decomposition.DictLearning.transform"]], "filemesh (class in nilearn.experimental.surface)": [[260, "nilearn.experimental.surface.FileMesh"]], "__init__() (nilearn.experimental.surface.filemesh method)": [[260, "nilearn.experimental.surface.FileMesh.__init__"]], "coordinates (nilearn.experimental.surface.filemesh property)": [[260, "nilearn.experimental.surface.FileMesh.coordinates"]], "faces (nilearn.experimental.surface.filemesh property)": [[260, "nilearn.experimental.surface.FileMesh.faces"]], "file_path (nilearn.experimental.surface.filemesh attribute)": [[260, "nilearn.experimental.surface.FileMesh.file_path"]], "loaded() (nilearn.experimental.surface.filemesh method)": [[260, "nilearn.experimental.surface.FileMesh.loaded"]], "n_vertices (nilearn.experimental.surface.filemesh attribute)": [[260, "nilearn.experimental.surface.FileMesh.n_vertices"]], "to_gifti() (nilearn.experimental.surface.filemesh method)": [[260, "nilearn.experimental.surface.FileMesh.to_gifti"]], "inmemorymesh (class in nilearn.experimental.surface)": [[261, "nilearn.experimental.surface.InMemoryMesh"]], "__init__() (nilearn.experimental.surface.inmemorymesh method)": [[261, "nilearn.experimental.surface.InMemoryMesh.__init__"]], "coordinates (nilearn.experimental.surface.inmemorymesh attribute)": [[261, "nilearn.experimental.surface.InMemoryMesh.coordinates"]], "faces (nilearn.experimental.surface.inmemorymesh attribute)": [[261, "nilearn.experimental.surface.InMemoryMesh.faces"]], "n_vertices (nilearn.experimental.surface.inmemorymesh attribute)": [[261, "nilearn.experimental.surface.InMemoryMesh.n_vertices"]], "to_gifti() (nilearn.experimental.surface.inmemorymesh method)": [[261, "nilearn.experimental.surface.InMemoryMesh.to_gifti"]], "mesh (class in nilearn.experimental.surface)": [[262, "nilearn.experimental.surface.Mesh"]], "__init__() (nilearn.experimental.surface.mesh method)": [[262, "nilearn.experimental.surface.Mesh.__init__"]], "coordinates (nilearn.experimental.surface.mesh attribute)": [[262, "nilearn.experimental.surface.Mesh.coordinates"]], "faces (nilearn.experimental.surface.mesh attribute)": [[262, "nilearn.experimental.surface.Mesh.faces"]], "n_vertices (nilearn.experimental.surface.mesh attribute)": [[262, "nilearn.experimental.surface.Mesh.n_vertices"]], "to_gifti() (nilearn.experimental.surface.mesh method)": [[262, "nilearn.experimental.surface.Mesh.to_gifti"]], "polymesh (in module nilearn.experimental.surface)": [[263, "nilearn.experimental.surface.PolyMesh"]], "surfaceimage (class in nilearn.experimental.surface)": [[264, "nilearn.experimental.surface.SurfaceImage"]], "__init__() (nilearn.experimental.surface.surfaceimage method)": [[264, "nilearn.experimental.surface.SurfaceImage.__init__"]], "data (nilearn.experimental.surface.surfaceimage attribute)": [[264, "nilearn.experimental.surface.SurfaceImage.data"]], "mesh (nilearn.experimental.surface.surfaceimage attribute)": [[264, "nilearn.experimental.surface.SurfaceImage.mesh"]], "shape (nilearn.experimental.surface.surfaceimage attribute)": [[264, "nilearn.experimental.surface.SurfaceImage.shape"]], "surfacelabelsmasker (class in nilearn.experimental.surface)": [[265, "nilearn.experimental.surface.SurfaceLabelsMasker"]], "__init__() (nilearn.experimental.surface.surfacelabelsmasker method)": [[265, "nilearn.experimental.surface.SurfaceLabelsMasker.__init__"]], "fit() (nilearn.experimental.surface.surfacelabelsmasker method)": [[265, "nilearn.experimental.surface.SurfaceLabelsMasker.fit"]], "fit_transform() (nilearn.experimental.surface.surfacelabelsmasker method)": [[265, "nilearn.experimental.surface.SurfaceLabelsMasker.fit_transform"]], "inverse_transform() (nilearn.experimental.surface.surfacelabelsmasker method)": [[265, "nilearn.experimental.surface.SurfaceLabelsMasker.inverse_transform"]], "label_names (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[265, "nilearn.experimental.surface.SurfaceLabelsMasker.label_names"]], "label_names_ (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[265, "nilearn.experimental.surface.SurfaceLabelsMasker.label_names_"]], "labels_ (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[265, "nilearn.experimental.surface.SurfaceLabelsMasker.labels_"]], "labels_data_ (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[265, "nilearn.experimental.surface.SurfaceLabelsMasker.labels_data_"]], "labels_img (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[265, "nilearn.experimental.surface.SurfaceLabelsMasker.labels_img"]], "transform() (nilearn.experimental.surface.surfacelabelsmasker method)": [[265, "nilearn.experimental.surface.SurfaceLabelsMasker.transform"]], "surfacemasker (class in nilearn.experimental.surface)": [[266, "nilearn.experimental.surface.SurfaceMasker"]], "__init__() (nilearn.experimental.surface.surfacemasker method)": [[266, "nilearn.experimental.surface.SurfaceMasker.__init__"]], "fit() (nilearn.experimental.surface.surfacemasker method)": [[266, "nilearn.experimental.surface.SurfaceMasker.fit"]], "fit_transform() (nilearn.experimental.surface.surfacemasker method)": [[266, "nilearn.experimental.surface.SurfaceMasker.fit_transform"]], "get_metadata_routing() (nilearn.experimental.surface.surfacemasker method)": [[266, "nilearn.experimental.surface.SurfaceMasker.get_metadata_routing"]], "get_params() (nilearn.experimental.surface.surfacemasker method)": [[266, "nilearn.experimental.surface.SurfaceMasker.get_params"]], "inverse_transform() (nilearn.experimental.surface.surfacemasker method)": [[266, "nilearn.experimental.surface.SurfaceMasker.inverse_transform"]], "mask_img (nilearn.experimental.surface.surfacemasker attribute)": [[266, "nilearn.experimental.surface.SurfaceMasker.mask_img"]], "mask_img_ (nilearn.experimental.surface.surfacemasker attribute)": [[266, "nilearn.experimental.surface.SurfaceMasker.mask_img_"]], "output_dimension_ (nilearn.experimental.surface.surfacemasker attribute)": [[266, "nilearn.experimental.surface.SurfaceMasker.output_dimension_"]], "set_fit_request() (nilearn.experimental.surface.surfacemasker method)": [[266, "nilearn.experimental.surface.SurfaceMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.experimental.surface.surfacemasker method)": [[266, "nilearn.experimental.surface.SurfaceMasker.set_inverse_transform_request"]], "set_output() (nilearn.experimental.surface.surfacemasker method)": [[266, "nilearn.experimental.surface.SurfaceMasker.set_output"]], "set_params() (nilearn.experimental.surface.surfacemasker method)": [[266, "nilearn.experimental.surface.SurfaceMasker.set_params"]], "set_transform_request() (nilearn.experimental.surface.surfacemasker method)": [[266, "nilearn.experimental.surface.SurfaceMasker.set_transform_request"]], "transform() (nilearn.experimental.surface.surfacemasker method)": [[266, "nilearn.experimental.surface.SurfaceMasker.transform"]], "fetch_destrieux() (in module nilearn.experimental.surface)": [[267, "nilearn.experimental.surface.fetch_destrieux"]], "fetch_nki() (in module nilearn.experimental.surface)": [[268, "nilearn.experimental.surface.fetch_nki"]], "load_fsaverage() (in module nilearn.experimental.surface)": [[269, "nilearn.experimental.surface.load_fsaverage"]], "armodel (class in nilearn.glm)": [[270, "nilearn.glm.ARModel"]], "__init__() (nilearn.glm.armodel method)": [[270, "nilearn.glm.ARModel.__init__"]], "fit() (nilearn.glm.armodel method)": [[270, "nilearn.glm.ARModel.fit"]], "initialize() (nilearn.glm.armodel method)": [[270, "nilearn.glm.ARModel.initialize"]], "logl() (nilearn.glm.armodel method)": [[270, "nilearn.glm.ARModel.logL"]], "whiten() (nilearn.glm.armodel method)": [[270, "nilearn.glm.ARModel.whiten"]], "contrast (class in nilearn.glm)": [[271, "nilearn.glm.Contrast"]], "__init__() (nilearn.glm.contrast method)": [[271, "nilearn.glm.Contrast.__init__"]], "effect_size() (nilearn.glm.contrast method)": [[271, "nilearn.glm.Contrast.effect_size"]], "effect_variance() (nilearn.glm.contrast method)": [[271, "nilearn.glm.Contrast.effect_variance"]], "one_minus_pvalue() (nilearn.glm.contrast method)": [[271, "nilearn.glm.Contrast.one_minus_pvalue"]], "p_value() (nilearn.glm.contrast method)": [[271, "nilearn.glm.Contrast.p_value"]], "stat() (nilearn.glm.contrast method)": [[271, "nilearn.glm.Contrast.stat"]], "z_score() (nilearn.glm.contrast method)": [[271, "nilearn.glm.Contrast.z_score"]], "fcontrastresults (class in nilearn.glm)": [[272, "nilearn.glm.FContrastResults"]], "__init__() (nilearn.glm.fcontrastresults method)": [[272, "nilearn.glm.FContrastResults.__init__"]], "fcontrast() (nilearn.glm.likelihoodmodelresults method)": [[273, "nilearn.glm.LikelihoodModelResults.Fcontrast"]], "likelihoodmodelresults (class in nilearn.glm)": [[273, "nilearn.glm.LikelihoodModelResults"]], "tcontrast() (nilearn.glm.likelihoodmodelresults method)": [[273, "nilearn.glm.LikelihoodModelResults.Tcontrast"]], "__init__() (nilearn.glm.likelihoodmodelresults method)": [[273, "nilearn.glm.LikelihoodModelResults.__init__"]], "conf_int() (nilearn.glm.likelihoodmodelresults method)": [[273, "nilearn.glm.LikelihoodModelResults.conf_int"]], "logl() (nilearn.glm.likelihoodmodelresults method)": [[273, "nilearn.glm.LikelihoodModelResults.logL"]], "t() (nilearn.glm.likelihoodmodelresults method)": [[273, "nilearn.glm.LikelihoodModelResults.t"]], "vcov() (nilearn.glm.likelihoodmodelresults method)": [[273, "nilearn.glm.LikelihoodModelResults.vcov"]], "olsmodel (class in nilearn.glm)": [[274, "nilearn.glm.OLSModel"]], "__init__() (nilearn.glm.olsmodel method)": [[274, "nilearn.glm.OLSModel.__init__"]], "fit() (nilearn.glm.olsmodel method)": [[274, "nilearn.glm.OLSModel.fit"]], "initialize() (nilearn.glm.olsmodel method)": [[274, "nilearn.glm.OLSModel.initialize"]], "logl() (nilearn.glm.olsmodel method)": [[274, "nilearn.glm.OLSModel.logL"]], "whiten() (nilearn.glm.olsmodel method)": [[274, "nilearn.glm.OLSModel.whiten"]], "fcontrast() (nilearn.glm.regressionresults method)": [[275, "nilearn.glm.RegressionResults.Fcontrast"]], "mse() (nilearn.glm.regressionresults method)": [[275, "nilearn.glm.RegressionResults.MSE"]], "regressionresults (class in nilearn.glm)": [[275, "nilearn.glm.RegressionResults"]], "sse() (nilearn.glm.regressionresults method)": [[275, "nilearn.glm.RegressionResults.SSE"]], "tcontrast() (nilearn.glm.regressionresults method)": [[275, "nilearn.glm.RegressionResults.Tcontrast"]], "__init__() (nilearn.glm.regressionresults method)": [[275, "nilearn.glm.RegressionResults.__init__"]], "conf_int() (nilearn.glm.regressionresults method)": [[275, "nilearn.glm.RegressionResults.conf_int"]], "logl() (nilearn.glm.regressionresults method)": [[275, "nilearn.glm.RegressionResults.logL"]], "normalized_residuals() (nilearn.glm.regressionresults method)": [[275, "nilearn.glm.RegressionResults.normalized_residuals"]], "predicted() (nilearn.glm.regressionresults method)": [[275, "nilearn.glm.RegressionResults.predicted"]], "r_square() (nilearn.glm.regressionresults method)": [[275, "nilearn.glm.RegressionResults.r_square"]], "residuals() (nilearn.glm.regressionresults method)": [[275, "nilearn.glm.RegressionResults.residuals"]], "t() (nilearn.glm.regressionresults method)": [[275, "nilearn.glm.RegressionResults.t"]], "vcov() (nilearn.glm.regressionresults method)": [[275, "nilearn.glm.RegressionResults.vcov"]], "fcontrast() (nilearn.glm.simpleregressionresults method)": [[276, "nilearn.glm.SimpleRegressionResults.Fcontrast"]], "simpleregressionresults (class in nilearn.glm)": [[276, "nilearn.glm.SimpleRegressionResults"]], "tcontrast() (nilearn.glm.simpleregressionresults method)": [[276, "nilearn.glm.SimpleRegressionResults.Tcontrast"]], "__init__() (nilearn.glm.simpleregressionresults method)": [[276, "nilearn.glm.SimpleRegressionResults.__init__"]], "conf_int() (nilearn.glm.simpleregressionresults method)": [[276, "nilearn.glm.SimpleRegressionResults.conf_int"]], "logl() (nilearn.glm.simpleregressionresults method)": [[276, "nilearn.glm.SimpleRegressionResults.logL"]], "normalized_residuals() (nilearn.glm.simpleregressionresults method)": [[276, "nilearn.glm.SimpleRegressionResults.normalized_residuals"]], "predicted() (nilearn.glm.simpleregressionresults method)": [[276, "nilearn.glm.SimpleRegressionResults.predicted"]], "residuals() (nilearn.glm.simpleregressionresults method)": [[276, "nilearn.glm.SimpleRegressionResults.residuals"]], "t() (nilearn.glm.simpleregressionresults method)": [[276, "nilearn.glm.SimpleRegressionResults.t"]], "vcov() (nilearn.glm.simpleregressionresults method)": [[276, "nilearn.glm.SimpleRegressionResults.vcov"]], "tcontrastresults (class in nilearn.glm)": [[277, "nilearn.glm.TContrastResults"]], "__init__() (nilearn.glm.tcontrastresults method)": [[277, "nilearn.glm.TContrastResults.__init__"]], "cluster_level_inference() (in module nilearn.glm)": [[278, "nilearn.glm.cluster_level_inference"]], "compute_contrast() (in module nilearn.glm)": [[279, "nilearn.glm.compute_contrast"]], "compute_fixed_effects() (in module nilearn.glm)": [[280, "nilearn.glm.compute_fixed_effects"]], "expression_to_contrast_vector() (in module nilearn.glm)": [[281, "nilearn.glm.expression_to_contrast_vector"]], "fdr_threshold() (in module nilearn.glm)": [[282, "nilearn.glm.fdr_threshold"]], "firstlevelmodel (class in nilearn.glm.first_level)": [[283, "nilearn.glm.first_level.FirstLevelModel"]], "__init__() (nilearn.glm.first_level.firstlevelmodel method)": [[283, "nilearn.glm.first_level.FirstLevelModel.__init__"]], "compute_contrast() (nilearn.glm.first_level.firstlevelmodel method)": [[283, "nilearn.glm.first_level.FirstLevelModel.compute_contrast"]], "fit() (nilearn.glm.first_level.firstlevelmodel method)": [[283, "nilearn.glm.first_level.FirstLevelModel.fit"]], "fit_transform() (nilearn.glm.first_level.firstlevelmodel method)": [[283, "nilearn.glm.first_level.FirstLevelModel.fit_transform"]], "generate_report() (nilearn.glm.first_level.firstlevelmodel method)": [[283, "nilearn.glm.first_level.FirstLevelModel.generate_report"]], "get_metadata_routing() (nilearn.glm.first_level.firstlevelmodel method)": [[283, "nilearn.glm.first_level.FirstLevelModel.get_metadata_routing"]], "get_params() (nilearn.glm.first_level.firstlevelmodel method)": [[283, "nilearn.glm.first_level.FirstLevelModel.get_params"]], "predicted() (nilearn.glm.first_level.firstlevelmodel method)": [[283, "nilearn.glm.first_level.FirstLevelModel.predicted"]], "r_square() (nilearn.glm.first_level.firstlevelmodel method)": [[283, "nilearn.glm.first_level.FirstLevelModel.r_square"]], "residuals() (nilearn.glm.first_level.firstlevelmodel method)": [[283, "nilearn.glm.first_level.FirstLevelModel.residuals"]], "scaling_axis (nilearn.glm.first_level.firstlevelmodel property)": [[283, "nilearn.glm.first_level.FirstLevelModel.scaling_axis"]], "set_fit_request() (nilearn.glm.first_level.firstlevelmodel method)": [[283, "nilearn.glm.first_level.FirstLevelModel.set_fit_request"]], "set_output() (nilearn.glm.first_level.firstlevelmodel method)": [[283, "nilearn.glm.first_level.FirstLevelModel.set_output"]], "set_params() (nilearn.glm.first_level.firstlevelmodel method)": [[283, "nilearn.glm.first_level.FirstLevelModel.set_params"]], "check_design_matrix() (in module nilearn.glm.first_level)": [[284, "nilearn.glm.first_level.check_design_matrix"]], "compute_regressor() (in module nilearn.glm.first_level)": [[285, "nilearn.glm.first_level.compute_regressor"]], "first_level_from_bids() (in module nilearn.glm.first_level)": [[286, "nilearn.glm.first_level.first_level_from_bids"]], "glover_dispersion_derivative() (in module nilearn.glm.first_level)": [[287, "nilearn.glm.first_level.glover_dispersion_derivative"]], "glover_hrf() (in module nilearn.glm.first_level)": [[288, "nilearn.glm.first_level.glover_hrf"]], "glover_time_derivative() (in module nilearn.glm.first_level)": [[289, "nilearn.glm.first_level.glover_time_derivative"]], "make_first_level_design_matrix() (in module nilearn.glm.first_level)": [[290, "nilearn.glm.first_level.make_first_level_design_matrix"]], "mean_scaling() (in module nilearn.glm.first_level)": [[291, "nilearn.glm.first_level.mean_scaling"]], "run_glm() (in module nilearn.glm.first_level)": [[292, "nilearn.glm.first_level.run_glm"]], "spm_dispersion_derivative() (in module nilearn.glm.first_level)": [[293, "nilearn.glm.first_level.spm_dispersion_derivative"]], "spm_hrf() (in module nilearn.glm.first_level)": [[294, "nilearn.glm.first_level.spm_hrf"]], "spm_time_derivative() (in module nilearn.glm.first_level)": [[295, "nilearn.glm.first_level.spm_time_derivative"]], "secondlevelmodel (class in nilearn.glm.second_level)": [[296, "nilearn.glm.second_level.SecondLevelModel"]], "__init__() (nilearn.glm.second_level.secondlevelmodel method)": [[296, "nilearn.glm.second_level.SecondLevelModel.__init__"]], "compute_contrast() (nilearn.glm.second_level.secondlevelmodel method)": [[296, "nilearn.glm.second_level.SecondLevelModel.compute_contrast"]], "fit() (nilearn.glm.second_level.secondlevelmodel method)": [[296, "nilearn.glm.second_level.SecondLevelModel.fit"]], "fit_transform() (nilearn.glm.second_level.secondlevelmodel method)": [[296, "nilearn.glm.second_level.SecondLevelModel.fit_transform"]], "generate_report() (nilearn.glm.second_level.secondlevelmodel method)": [[296, "nilearn.glm.second_level.SecondLevelModel.generate_report"]], "get_metadata_routing() (nilearn.glm.second_level.secondlevelmodel method)": [[296, "nilearn.glm.second_level.SecondLevelModel.get_metadata_routing"]], "get_params() (nilearn.glm.second_level.secondlevelmodel method)": [[296, "nilearn.glm.second_level.SecondLevelModel.get_params"]], "predicted() (nilearn.glm.second_level.secondlevelmodel method)": [[296, "nilearn.glm.second_level.SecondLevelModel.predicted"]], "r_square() (nilearn.glm.second_level.secondlevelmodel method)": [[296, "nilearn.glm.second_level.SecondLevelModel.r_square"]], "residuals() (nilearn.glm.second_level.secondlevelmodel method)": [[296, "nilearn.glm.second_level.SecondLevelModel.residuals"]], "set_fit_request() (nilearn.glm.second_level.secondlevelmodel method)": [[296, "nilearn.glm.second_level.SecondLevelModel.set_fit_request"]], "set_output() (nilearn.glm.second_level.secondlevelmodel method)": [[296, "nilearn.glm.second_level.SecondLevelModel.set_output"]], "set_params() (nilearn.glm.second_level.secondlevelmodel method)": [[296, "nilearn.glm.second_level.SecondLevelModel.set_params"]], "make_second_level_design_matrix() (in module nilearn.glm.second_level)": [[297, "nilearn.glm.second_level.make_second_level_design_matrix"]], "non_parametric_inference() (in module nilearn.glm.second_level)": [[298, "nilearn.glm.second_level.non_parametric_inference"]], "threshold_stats_img() (in module nilearn.glm)": [[299, "nilearn.glm.threshold_stats_img"]], "binarize_img() (in module nilearn.image)": [[300, "nilearn.image.binarize_img"]], "clean_img() (in module nilearn.image)": [[301, "nilearn.image.clean_img"]], "concat_imgs() (in module nilearn.image)": [[302, "nilearn.image.concat_imgs"]], "coord_transform() (in module nilearn.image)": [[303, "nilearn.image.coord_transform"]], "copy_img() (in module nilearn.image)": [[304, "nilearn.image.copy_img"]], "crop_img() (in module nilearn.image)": [[305, "nilearn.image.crop_img"]], "get_data() (in module nilearn.image)": [[306, "nilearn.image.get_data"]], "high_variance_confounds() (in module nilearn.image)": [[307, "nilearn.image.high_variance_confounds"]], "index_img() (in module nilearn.image)": [[308, "nilearn.image.index_img"]], "iter_img() (in module nilearn.image)": [[309, "nilearn.image.iter_img"]], "largest_connected_component_img() (in module nilearn.image)": [[310, "nilearn.image.largest_connected_component_img"]], "load_img() (in module nilearn.image)": [[311, "nilearn.image.load_img"]], "math_img() (in module nilearn.image)": [[312, "nilearn.image.math_img"]], "mean_img() (in module nilearn.image)": [[313, "nilearn.image.mean_img"]], "new_img_like() (in module nilearn.image)": [[314, "nilearn.image.new_img_like"]], "reorder_img() (in module nilearn.image)": [[315, "nilearn.image.reorder_img"]], "resample_img() (in module nilearn.image)": [[316, "nilearn.image.resample_img"]], "resample_to_img() (in module nilearn.image)": [[317, "nilearn.image.resample_to_img"]], "smooth_img() (in module nilearn.image)": [[318, "nilearn.image.smooth_img"]], "swap_img_hemispheres() (in module nilearn.image)": [[319, "nilearn.image.swap_img_hemispheres"]], "threshold_img() (in module nilearn.image)": [[320, "nilearn.image.threshold_img"]], "get_bids_files() (in module nilearn.interfaces.bids)": [[321, "nilearn.interfaces.bids.get_bids_files"]], "parse_bids_filename() (in module nilearn.interfaces.bids)": [[322, "nilearn.interfaces.bids.parse_bids_filename"]], "save_glm_to_bids() (in module nilearn.interfaces.bids)": [[323, "nilearn.interfaces.bids.save_glm_to_bids"]], "load_confounds() (in module nilearn.interfaces.fmriprep)": [[324, "nilearn.interfaces.fmriprep.load_confounds"]], "load_confounds_strategy() (in module nilearn.interfaces.fmriprep)": [[325, "nilearn.interfaces.fmriprep.load_confounds_strategy"]], "get_design_from_fslmat() (in module nilearn.interfaces.fsl)": [[326, "nilearn.interfaces.fsl.get_design_from_fslmat"]], "basemasker (class in nilearn.maskers)": [[327, "nilearn.maskers.BaseMasker"]], "__init__() (nilearn.maskers.basemasker method)": [[327, "nilearn.maskers.BaseMasker.__init__"]], "fit_transform() (nilearn.maskers.basemasker method)": [[327, "nilearn.maskers.BaseMasker.fit_transform"]], "get_metadata_routing() (nilearn.maskers.basemasker method)": [[327, "nilearn.maskers.BaseMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.basemasker method)": [[327, "nilearn.maskers.BaseMasker.get_params"]], "inverse_transform() (nilearn.maskers.basemasker method)": [[327, "nilearn.maskers.BaseMasker.inverse_transform"]], "set_output() (nilearn.maskers.basemasker method)": [[327, "nilearn.maskers.BaseMasker.set_output"]], "set_params() (nilearn.maskers.basemasker method)": [[327, "nilearn.maskers.BaseMasker.set_params"]], "set_transform_request() (nilearn.maskers.basemasker method)": [[327, "nilearn.maskers.BaseMasker.set_transform_request"]], "transform() (nilearn.maskers.basemasker method)": [[327, "nilearn.maskers.BaseMasker.transform"]], "transform_single_imgs() (nilearn.maskers.basemasker method)": [[327, "nilearn.maskers.BaseMasker.transform_single_imgs"]], "multiniftilabelsmasker (class in nilearn.maskers)": [[328, "nilearn.maskers.MultiNiftiLabelsMasker"]], "__init__() (nilearn.maskers.multiniftilabelsmasker method)": [[328, "nilearn.maskers.MultiNiftiLabelsMasker.__init__"]], "fit() (nilearn.maskers.multiniftilabelsmasker method)": [[328, "nilearn.maskers.MultiNiftiLabelsMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[328, "nilearn.maskers.MultiNiftiLabelsMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftilabelsmasker method)": [[328, "nilearn.maskers.MultiNiftiLabelsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.multiniftilabelsmasker method)": [[328, "nilearn.maskers.MultiNiftiLabelsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.multiniftilabelsmasker method)": [[328, "nilearn.maskers.MultiNiftiLabelsMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[328, "nilearn.maskers.MultiNiftiLabelsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.multiniftilabelsmasker method)": [[328, "nilearn.maskers.MultiNiftiLabelsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[328, "nilearn.maskers.MultiNiftiLabelsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.multiniftilabelsmasker method)": [[328, "nilearn.maskers.MultiNiftiLabelsMasker.set_output"]], "set_params() (nilearn.maskers.multiniftilabelsmasker method)": [[328, "nilearn.maskers.MultiNiftiLabelsMasker.set_params"]], "set_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[328, "nilearn.maskers.MultiNiftiLabelsMasker.set_transform_request"]], "transform() (nilearn.maskers.multiniftilabelsmasker method)": [[328, "nilearn.maskers.MultiNiftiLabelsMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[328, "nilearn.maskers.MultiNiftiLabelsMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[328, "nilearn.maskers.MultiNiftiLabelsMasker.transform_single_imgs"]], "multiniftimapsmasker (class in nilearn.maskers)": [[329, "nilearn.maskers.MultiNiftiMapsMasker"]], "__init__() (nilearn.maskers.multiniftimapsmasker method)": [[329, "nilearn.maskers.MultiNiftiMapsMasker.__init__"]], "fit() (nilearn.maskers.multiniftimapsmasker method)": [[329, "nilearn.maskers.MultiNiftiMapsMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftimapsmasker method)": [[329, "nilearn.maskers.MultiNiftiMapsMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftimapsmasker method)": [[329, "nilearn.maskers.MultiNiftiMapsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.multiniftimapsmasker method)": [[329, "nilearn.maskers.MultiNiftiMapsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.multiniftimapsmasker method)": [[329, "nilearn.maskers.MultiNiftiMapsMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftimapsmasker method)": [[329, "nilearn.maskers.MultiNiftiMapsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.multiniftimapsmasker method)": [[329, "nilearn.maskers.MultiNiftiMapsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[329, "nilearn.maskers.MultiNiftiMapsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.multiniftimapsmasker method)": [[329, "nilearn.maskers.MultiNiftiMapsMasker.set_output"]], "set_params() (nilearn.maskers.multiniftimapsmasker method)": [[329, "nilearn.maskers.MultiNiftiMapsMasker.set_params"]], "set_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[329, "nilearn.maskers.MultiNiftiMapsMasker.set_transform_request"]], "transform() (nilearn.maskers.multiniftimapsmasker method)": [[329, "nilearn.maskers.MultiNiftiMapsMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[329, "nilearn.maskers.MultiNiftiMapsMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[329, "nilearn.maskers.MultiNiftiMapsMasker.transform_single_imgs"]], "multiniftimasker (class in nilearn.maskers)": [[330, "nilearn.maskers.MultiNiftiMasker"]], "__init__() (nilearn.maskers.multiniftimasker method)": [[330, "nilearn.maskers.MultiNiftiMasker.__init__"]], "fit() (nilearn.maskers.multiniftimasker method)": [[330, "nilearn.maskers.MultiNiftiMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftimasker method)": [[330, "nilearn.maskers.MultiNiftiMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftimasker method)": [[330, "nilearn.maskers.MultiNiftiMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.multiniftimasker method)": [[330, "nilearn.maskers.MultiNiftiMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.multiniftimasker method)": [[330, "nilearn.maskers.MultiNiftiMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftimasker method)": [[330, "nilearn.maskers.MultiNiftiMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.multiniftimasker method)": [[330, "nilearn.maskers.MultiNiftiMasker.set_fit_request"]], "set_output() (nilearn.maskers.multiniftimasker method)": [[330, "nilearn.maskers.MultiNiftiMasker.set_output"]], "set_params() (nilearn.maskers.multiniftimasker method)": [[330, "nilearn.maskers.MultiNiftiMasker.set_params"]], "set_transform_request() (nilearn.maskers.multiniftimasker method)": [[330, "nilearn.maskers.MultiNiftiMasker.set_transform_request"]], "transform() (nilearn.maskers.multiniftimasker method)": [[330, "nilearn.maskers.MultiNiftiMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftimasker method)": [[330, "nilearn.maskers.MultiNiftiMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftimasker method)": [[330, "nilearn.maskers.MultiNiftiMasker.transform_single_imgs"]], "niftilabelsmasker (class in nilearn.maskers)": [[331, "nilearn.maskers.NiftiLabelsMasker"]], "__init__() (nilearn.maskers.niftilabelsmasker method)": [[331, "nilearn.maskers.NiftiLabelsMasker.__init__"]], "fit() (nilearn.maskers.niftilabelsmasker method)": [[331, "nilearn.maskers.NiftiLabelsMasker.fit"]], "fit_transform() (nilearn.maskers.niftilabelsmasker method)": [[331, "nilearn.maskers.NiftiLabelsMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftilabelsmasker method)": [[331, "nilearn.maskers.NiftiLabelsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftilabelsmasker method)": [[331, "nilearn.maskers.NiftiLabelsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftilabelsmasker method)": [[331, "nilearn.maskers.NiftiLabelsMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftilabelsmasker method)": [[331, "nilearn.maskers.NiftiLabelsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.niftilabelsmasker method)": [[331, "nilearn.maskers.NiftiLabelsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[331, "nilearn.maskers.NiftiLabelsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.niftilabelsmasker method)": [[331, "nilearn.maskers.NiftiLabelsMasker.set_output"]], "set_params() (nilearn.maskers.niftilabelsmasker method)": [[331, "nilearn.maskers.NiftiLabelsMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[331, "nilearn.maskers.NiftiLabelsMasker.set_transform_request"]], "transform() (nilearn.maskers.niftilabelsmasker method)": [[331, "nilearn.maskers.NiftiLabelsMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftilabelsmasker method)": [[331, "nilearn.maskers.NiftiLabelsMasker.transform_single_imgs"]], "niftimapsmasker (class in nilearn.maskers)": [[332, "nilearn.maskers.NiftiMapsMasker"]], "__init__() (nilearn.maskers.niftimapsmasker method)": [[332, "nilearn.maskers.NiftiMapsMasker.__init__"]], "fit() (nilearn.maskers.niftimapsmasker method)": [[332, "nilearn.maskers.NiftiMapsMasker.fit"]], "fit_transform() (nilearn.maskers.niftimapsmasker method)": [[332, "nilearn.maskers.NiftiMapsMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftimapsmasker method)": [[332, "nilearn.maskers.NiftiMapsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftimapsmasker method)": [[332, "nilearn.maskers.NiftiMapsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftimapsmasker method)": [[332, "nilearn.maskers.NiftiMapsMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftimapsmasker method)": [[332, "nilearn.maskers.NiftiMapsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.niftimapsmasker method)": [[332, "nilearn.maskers.NiftiMapsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.niftimapsmasker method)": [[332, "nilearn.maskers.NiftiMapsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.niftimapsmasker method)": [[332, "nilearn.maskers.NiftiMapsMasker.set_output"]], "set_params() (nilearn.maskers.niftimapsmasker method)": [[332, "nilearn.maskers.NiftiMapsMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftimapsmasker method)": [[332, "nilearn.maskers.NiftiMapsMasker.set_transform_request"]], "transform() (nilearn.maskers.niftimapsmasker method)": [[332, "nilearn.maskers.NiftiMapsMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftimapsmasker method)": [[332, "nilearn.maskers.NiftiMapsMasker.transform_single_imgs"]], "niftimasker (class in nilearn.maskers)": [[333, "nilearn.maskers.NiftiMasker"]], "__init__() (nilearn.maskers.niftimasker method)": [[333, "nilearn.maskers.NiftiMasker.__init__"]], "fit() (nilearn.maskers.niftimasker method)": [[333, "nilearn.maskers.NiftiMasker.fit"]], "fit_transform() (nilearn.maskers.niftimasker method)": [[333, "nilearn.maskers.NiftiMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftimasker method)": [[333, "nilearn.maskers.NiftiMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftimasker method)": [[333, "nilearn.maskers.NiftiMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftimasker method)": [[333, "nilearn.maskers.NiftiMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftimasker method)": [[333, "nilearn.maskers.NiftiMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.niftimasker method)": [[333, "nilearn.maskers.NiftiMasker.set_fit_request"]], "set_output() (nilearn.maskers.niftimasker method)": [[333, "nilearn.maskers.NiftiMasker.set_output"]], "set_params() (nilearn.maskers.niftimasker method)": [[333, "nilearn.maskers.NiftiMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftimasker method)": [[333, "nilearn.maskers.NiftiMasker.set_transform_request"]], "transform() (nilearn.maskers.niftimasker method)": [[333, "nilearn.maskers.NiftiMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftimasker method)": [[333, "nilearn.maskers.NiftiMasker.transform_single_imgs"]], "niftispheresmasker (class in nilearn.maskers)": [[334, "nilearn.maskers.NiftiSpheresMasker"]], "__init__() (nilearn.maskers.niftispheresmasker method)": [[334, "nilearn.maskers.NiftiSpheresMasker.__init__"]], "fit() (nilearn.maskers.niftispheresmasker method)": [[334, "nilearn.maskers.NiftiSpheresMasker.fit"]], "fit_transform() (nilearn.maskers.niftispheresmasker method)": [[334, "nilearn.maskers.NiftiSpheresMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftispheresmasker method)": [[334, "nilearn.maskers.NiftiSpheresMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftispheresmasker method)": [[334, "nilearn.maskers.NiftiSpheresMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftispheresmasker method)": [[334, "nilearn.maskers.NiftiSpheresMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftispheresmasker method)": [[334, "nilearn.maskers.NiftiSpheresMasker.inverse_transform"]], "set_inverse_transform_request() (nilearn.maskers.niftispheresmasker method)": [[334, "nilearn.maskers.NiftiSpheresMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.niftispheresmasker method)": [[334, "nilearn.maskers.NiftiSpheresMasker.set_output"]], "set_params() (nilearn.maskers.niftispheresmasker method)": [[334, "nilearn.maskers.NiftiSpheresMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftispheresmasker method)": [[334, "nilearn.maskers.NiftiSpheresMasker.set_transform_request"]], "transform() (nilearn.maskers.niftispheresmasker method)": [[334, "nilearn.maskers.NiftiSpheresMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftispheresmasker method)": [[334, "nilearn.maskers.NiftiSpheresMasker.transform_single_imgs"]], "apply_mask() (in module nilearn.masking)": [[335, "nilearn.masking.apply_mask"]], "compute_background_mask() (in module nilearn.masking)": [[336, "nilearn.masking.compute_background_mask"]], "compute_brain_mask() (in module nilearn.masking)": [[337, "nilearn.masking.compute_brain_mask"]], "compute_epi_mask() (in module nilearn.masking)": [[338, "nilearn.masking.compute_epi_mask"]], "compute_multi_background_mask() (in module nilearn.masking)": [[339, "nilearn.masking.compute_multi_background_mask"]], "compute_multi_brain_mask() (in module nilearn.masking)": [[340, "nilearn.masking.compute_multi_brain_mask"]], "compute_multi_epi_mask() (in module nilearn.masking)": [[341, "nilearn.masking.compute_multi_epi_mask"]], "intersect_masks() (in module nilearn.masking)": [[342, "nilearn.masking.intersect_masks"]], "unmask() (in module nilearn.masking)": [[343, "nilearn.masking.unmask"]], "permuted_ols() (in module nilearn.mass_univariate)": [[344, "nilearn.mass_univariate.permuted_ols"]], "baseaxes (class in nilearn.plotting.displays)": [[345, "nilearn.plotting.displays.BaseAxes"]], "__init__() (nilearn.plotting.displays.baseaxes method)": [[345, "nilearn.plotting.displays.BaseAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[345, "nilearn.plotting.displays.BaseAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.baseaxes method)": [[345, "nilearn.plotting.displays.BaseAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.baseaxes method)": [[345, "nilearn.plotting.displays.BaseAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.baseaxes method)": [[345, "nilearn.plotting.displays.BaseAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.baseaxes method)": [[345, "nilearn.plotting.displays.BaseAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[345, "nilearn.plotting.displays.BaseAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.baseaxes method)": [[345, "nilearn.plotting.displays.BaseAxes.transform_to_2d"]], "baseslicer (class in nilearn.plotting.displays)": [[346, "nilearn.plotting.displays.BaseSlicer"]], "__init__() (nilearn.plotting.displays.baseslicer method)": [[346, "nilearn.plotting.displays.BaseSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.baseslicer method)": [[346, "nilearn.plotting.displays.BaseSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.baseslicer method)": [[346, "nilearn.plotting.displays.BaseSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.baseslicer method)": [[346, "nilearn.plotting.displays.BaseSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.baseslicer method)": [[346, "nilearn.plotting.displays.BaseSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.baseslicer method)": [[346, "nilearn.plotting.displays.BaseSlicer.annotate"]], "black_bg (nilearn.plotting.displays.baseslicer property)": [[346, "nilearn.plotting.displays.BaseSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.baseslicer property)": [[346, "nilearn.plotting.displays.BaseSlicer.brain_color"]], "close() (nilearn.plotting.displays.baseslicer method)": [[346, "nilearn.plotting.displays.BaseSlicer.close"]], "find_cut_coords() (nilearn.plotting.displays.baseslicer static method)": [[346, "nilearn.plotting.displays.BaseSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.baseslicer class method)": [[346, "nilearn.plotting.displays.BaseSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.baseslicer method)": [[346, "nilearn.plotting.displays.BaseSlicer.savefig"]], "title() (nilearn.plotting.displays.baseslicer method)": [[346, "nilearn.plotting.displays.BaseSlicer.title"]], "cutaxes (class in nilearn.plotting.displays)": [[347, "nilearn.plotting.displays.CutAxes"]], "__init__() (nilearn.plotting.displays.cutaxes method)": [[347, "nilearn.plotting.displays.CutAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[347, "nilearn.plotting.displays.CutAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.cutaxes method)": [[347, "nilearn.plotting.displays.CutAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.cutaxes method)": [[347, "nilearn.plotting.displays.CutAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.cutaxes method)": [[347, "nilearn.plotting.displays.CutAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.cutaxes method)": [[347, "nilearn.plotting.displays.CutAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[347, "nilearn.plotting.displays.CutAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.cutaxes method)": [[347, "nilearn.plotting.displays.CutAxes.transform_to_2d"]], "glassbrainaxes (class in nilearn.plotting.displays)": [[348, "nilearn.plotting.displays.GlassBrainAxes"]], "__init__() (nilearn.plotting.displays.glassbrainaxes method)": [[348, "nilearn.plotting.displays.GlassBrainAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[348, "nilearn.plotting.displays.GlassBrainAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[348, "nilearn.plotting.displays.GlassBrainAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.glassbrainaxes method)": [[348, "nilearn.plotting.displays.GlassBrainAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.glassbrainaxes method)": [[348, "nilearn.plotting.displays.GlassBrainAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.glassbrainaxes method)": [[348, "nilearn.plotting.displays.GlassBrainAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[348, "nilearn.plotting.displays.GlassBrainAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[348, "nilearn.plotting.displays.GlassBrainAxes.transform_to_2d"]], "lprojector (class in nilearn.plotting.displays)": [[349, "nilearn.plotting.displays.LProjector"]], "__init__() (nilearn.plotting.displays.lprojector method)": [[349, "nilearn.plotting.displays.LProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lprojector method)": [[349, "nilearn.plotting.displays.LProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lprojector method)": [[349, "nilearn.plotting.displays.LProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lprojector method)": [[349, "nilearn.plotting.displays.LProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lprojector method)": [[349, "nilearn.plotting.displays.LProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lprojector method)": [[349, "nilearn.plotting.displays.LProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lprojector method)": [[349, "nilearn.plotting.displays.LProjector.annotate"]], "black_bg (nilearn.plotting.displays.lprojector property)": [[349, "nilearn.plotting.displays.LProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lprojector property)": [[349, "nilearn.plotting.displays.LProjector.brain_color"]], "close() (nilearn.plotting.displays.lprojector method)": [[349, "nilearn.plotting.displays.LProjector.close"]], "draw_cross() (nilearn.plotting.displays.lprojector method)": [[349, "nilearn.plotting.displays.LProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lprojector class method)": [[349, "nilearn.plotting.displays.LProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lprojector class method)": [[349, "nilearn.plotting.displays.LProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lprojector method)": [[349, "nilearn.plotting.displays.LProjector.savefig"]], "title() (nilearn.plotting.displays.lprojector method)": [[349, "nilearn.plotting.displays.LProjector.title"]], "lrprojector (class in nilearn.plotting.displays)": [[350, "nilearn.plotting.displays.LRProjector"]], "__init__() (nilearn.plotting.displays.lrprojector method)": [[350, "nilearn.plotting.displays.LRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lrprojector method)": [[350, "nilearn.plotting.displays.LRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lrprojector method)": [[350, "nilearn.plotting.displays.LRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lrprojector method)": [[350, "nilearn.plotting.displays.LRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lrprojector method)": [[350, "nilearn.plotting.displays.LRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lrprojector method)": [[350, "nilearn.plotting.displays.LRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lrprojector method)": [[350, "nilearn.plotting.displays.LRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lrprojector property)": [[350, "nilearn.plotting.displays.LRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lrprojector property)": [[350, "nilearn.plotting.displays.LRProjector.brain_color"]], "close() (nilearn.plotting.displays.lrprojector method)": [[350, "nilearn.plotting.displays.LRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lrprojector method)": [[350, "nilearn.plotting.displays.LRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lrprojector class method)": [[350, "nilearn.plotting.displays.LRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lrprojector class method)": [[350, "nilearn.plotting.displays.LRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lrprojector method)": [[350, "nilearn.plotting.displays.LRProjector.savefig"]], "title() (nilearn.plotting.displays.lrprojector method)": [[350, "nilearn.plotting.displays.LRProjector.title"]], "lyrprojector (class in nilearn.plotting.displays)": [[351, "nilearn.plotting.displays.LYRProjector"]], "__init__() (nilearn.plotting.displays.lyrprojector method)": [[351, "nilearn.plotting.displays.LYRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lyrprojector method)": [[351, "nilearn.plotting.displays.LYRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lyrprojector method)": [[351, "nilearn.plotting.displays.LYRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lyrprojector method)": [[351, "nilearn.plotting.displays.LYRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lyrprojector method)": [[351, "nilearn.plotting.displays.LYRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lyrprojector method)": [[351, "nilearn.plotting.displays.LYRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lyrprojector method)": [[351, "nilearn.plotting.displays.LYRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lyrprojector property)": [[351, "nilearn.plotting.displays.LYRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lyrprojector property)": [[351, "nilearn.plotting.displays.LYRProjector.brain_color"]], "close() (nilearn.plotting.displays.lyrprojector method)": [[351, "nilearn.plotting.displays.LYRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lyrprojector method)": [[351, "nilearn.plotting.displays.LYRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lyrprojector class method)": [[351, "nilearn.plotting.displays.LYRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lyrprojector class method)": [[351, "nilearn.plotting.displays.LYRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lyrprojector method)": [[351, "nilearn.plotting.displays.LYRProjector.savefig"]], "title() (nilearn.plotting.displays.lyrprojector method)": [[351, "nilearn.plotting.displays.LYRProjector.title"]], "lyrzprojector (class in nilearn.plotting.displays)": [[352, "nilearn.plotting.displays.LYRZProjector"]], "__init__() (nilearn.plotting.displays.lyrzprojector method)": [[352, "nilearn.plotting.displays.LYRZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lyrzprojector method)": [[352, "nilearn.plotting.displays.LYRZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lyrzprojector method)": [[352, "nilearn.plotting.displays.LYRZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lyrzprojector method)": [[352, "nilearn.plotting.displays.LYRZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lyrzprojector method)": [[352, "nilearn.plotting.displays.LYRZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lyrzprojector method)": [[352, "nilearn.plotting.displays.LYRZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lyrzprojector method)": [[352, "nilearn.plotting.displays.LYRZProjector.annotate"]], "black_bg (nilearn.plotting.displays.lyrzprojector property)": [[352, "nilearn.plotting.displays.LYRZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lyrzprojector property)": [[352, "nilearn.plotting.displays.LYRZProjector.brain_color"]], "close() (nilearn.plotting.displays.lyrzprojector method)": [[352, "nilearn.plotting.displays.LYRZProjector.close"]], "draw_cross() (nilearn.plotting.displays.lyrzprojector method)": [[352, "nilearn.plotting.displays.LYRZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lyrzprojector class method)": [[352, "nilearn.plotting.displays.LYRZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lyrzprojector class method)": [[352, "nilearn.plotting.displays.LYRZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lyrzprojector method)": [[352, "nilearn.plotting.displays.LYRZProjector.savefig"]], "title() (nilearn.plotting.displays.lyrzprojector method)": [[352, "nilearn.plotting.displays.LYRZProjector.title"]], "lzrprojector (class in nilearn.plotting.displays)": [[353, "nilearn.plotting.displays.LZRProjector"]], "__init__() (nilearn.plotting.displays.lzrprojector method)": [[353, "nilearn.plotting.displays.LZRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lzrprojector method)": [[353, "nilearn.plotting.displays.LZRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lzrprojector method)": [[353, "nilearn.plotting.displays.LZRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lzrprojector method)": [[353, "nilearn.plotting.displays.LZRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lzrprojector method)": [[353, "nilearn.plotting.displays.LZRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lzrprojector method)": [[353, "nilearn.plotting.displays.LZRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lzrprojector method)": [[353, "nilearn.plotting.displays.LZRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lzrprojector property)": [[353, "nilearn.plotting.displays.LZRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lzrprojector property)": [[353, "nilearn.plotting.displays.LZRProjector.brain_color"]], "close() (nilearn.plotting.displays.lzrprojector method)": [[353, "nilearn.plotting.displays.LZRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lzrprojector method)": [[353, "nilearn.plotting.displays.LZRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lzrprojector class method)": [[353, "nilearn.plotting.displays.LZRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lzrprojector class method)": [[353, "nilearn.plotting.displays.LZRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lzrprojector method)": [[353, "nilearn.plotting.displays.LZRProjector.savefig"]], "title() (nilearn.plotting.displays.lzrprojector method)": [[353, "nilearn.plotting.displays.LZRProjector.title"]], "lzryprojector (class in nilearn.plotting.displays)": [[354, "nilearn.plotting.displays.LZRYProjector"]], "__init__() (nilearn.plotting.displays.lzryprojector method)": [[354, "nilearn.plotting.displays.LZRYProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lzryprojector method)": [[354, "nilearn.plotting.displays.LZRYProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lzryprojector method)": [[354, "nilearn.plotting.displays.LZRYProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lzryprojector method)": [[354, "nilearn.plotting.displays.LZRYProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lzryprojector method)": [[354, "nilearn.plotting.displays.LZRYProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lzryprojector method)": [[354, "nilearn.plotting.displays.LZRYProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lzryprojector method)": [[354, "nilearn.plotting.displays.LZRYProjector.annotate"]], "black_bg (nilearn.plotting.displays.lzryprojector property)": [[354, "nilearn.plotting.displays.LZRYProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lzryprojector property)": [[354, "nilearn.plotting.displays.LZRYProjector.brain_color"]], "close() (nilearn.plotting.displays.lzryprojector method)": [[354, "nilearn.plotting.displays.LZRYProjector.close"]], "draw_cross() (nilearn.plotting.displays.lzryprojector method)": [[354, "nilearn.plotting.displays.LZRYProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lzryprojector class method)": [[354, "nilearn.plotting.displays.LZRYProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lzryprojector class method)": [[354, "nilearn.plotting.displays.LZRYProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lzryprojector method)": [[354, "nilearn.plotting.displays.LZRYProjector.savefig"]], "title() (nilearn.plotting.displays.lzryprojector method)": [[354, "nilearn.plotting.displays.LZRYProjector.title"]], "mosaicslicer (class in nilearn.plotting.displays)": [[355, "nilearn.plotting.displays.MosaicSlicer"]], "__init__() (nilearn.plotting.displays.mosaicslicer method)": [[355, "nilearn.plotting.displays.MosaicSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.mosaicslicer method)": [[355, "nilearn.plotting.displays.MosaicSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.mosaicslicer method)": [[355, "nilearn.plotting.displays.MosaicSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.mosaicslicer method)": [[355, "nilearn.plotting.displays.MosaicSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.mosaicslicer method)": [[355, "nilearn.plotting.displays.MosaicSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.mosaicslicer method)": [[355, "nilearn.plotting.displays.MosaicSlicer.annotate"]], "black_bg (nilearn.plotting.displays.mosaicslicer property)": [[355, "nilearn.plotting.displays.MosaicSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.mosaicslicer property)": [[355, "nilearn.plotting.displays.MosaicSlicer.brain_color"]], "close() (nilearn.plotting.displays.mosaicslicer method)": [[355, "nilearn.plotting.displays.MosaicSlicer.close"]], "draw_cross() (nilearn.plotting.displays.mosaicslicer method)": [[355, "nilearn.plotting.displays.MosaicSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.mosaicslicer class method)": [[355, "nilearn.plotting.displays.MosaicSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.mosaicslicer class method)": [[355, "nilearn.plotting.displays.MosaicSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.mosaicslicer method)": [[355, "nilearn.plotting.displays.MosaicSlicer.savefig"]], "title() (nilearn.plotting.displays.mosaicslicer method)": [[355, "nilearn.plotting.displays.MosaicSlicer.title"]], "orthoprojector (class in nilearn.plotting.displays)": [[356, "nilearn.plotting.displays.OrthoProjector"]], "__init__() (nilearn.plotting.displays.orthoprojector method)": [[356, "nilearn.plotting.displays.OrthoProjector.__init__"]], "add_contours() (nilearn.plotting.displays.orthoprojector method)": [[356, "nilearn.plotting.displays.OrthoProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.orthoprojector method)": [[356, "nilearn.plotting.displays.OrthoProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.orthoprojector method)": [[356, "nilearn.plotting.displays.OrthoProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.orthoprojector method)": [[356, "nilearn.plotting.displays.OrthoProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.orthoprojector method)": [[356, "nilearn.plotting.displays.OrthoProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.orthoprojector method)": [[356, "nilearn.plotting.displays.OrthoProjector.annotate"]], "black_bg (nilearn.plotting.displays.orthoprojector property)": [[356, "nilearn.plotting.displays.OrthoProjector.black_bg"]], "brain_color (nilearn.plotting.displays.orthoprojector property)": [[356, "nilearn.plotting.displays.OrthoProjector.brain_color"]], "close() (nilearn.plotting.displays.orthoprojector method)": [[356, "nilearn.plotting.displays.OrthoProjector.close"]], "draw_cross() (nilearn.plotting.displays.orthoprojector method)": [[356, "nilearn.plotting.displays.OrthoProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.orthoprojector class method)": [[356, "nilearn.plotting.displays.OrthoProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.orthoprojector class method)": [[356, "nilearn.plotting.displays.OrthoProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.orthoprojector method)": [[356, "nilearn.plotting.displays.OrthoProjector.savefig"]], "title() (nilearn.plotting.displays.orthoprojector method)": [[356, "nilearn.plotting.displays.OrthoProjector.title"]], "orthoslicer (class in nilearn.plotting.displays)": [[357, "nilearn.plotting.displays.OrthoSlicer"]], "__init__() (nilearn.plotting.displays.orthoslicer method)": [[357, "nilearn.plotting.displays.OrthoSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.orthoslicer method)": [[357, "nilearn.plotting.displays.OrthoSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.orthoslicer method)": [[357, "nilearn.plotting.displays.OrthoSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.orthoslicer method)": [[357, "nilearn.plotting.displays.OrthoSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.orthoslicer method)": [[357, "nilearn.plotting.displays.OrthoSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.orthoslicer method)": [[357, "nilearn.plotting.displays.OrthoSlicer.annotate"]], "black_bg (nilearn.plotting.displays.orthoslicer property)": [[357, "nilearn.plotting.displays.OrthoSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.orthoslicer property)": [[357, "nilearn.plotting.displays.OrthoSlicer.brain_color"]], "close() (nilearn.plotting.displays.orthoslicer method)": [[357, "nilearn.plotting.displays.OrthoSlicer.close"]], "draw_cross() (nilearn.plotting.displays.orthoslicer method)": [[357, "nilearn.plotting.displays.OrthoSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.orthoslicer class method)": [[357, "nilearn.plotting.displays.OrthoSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.orthoslicer class method)": [[357, "nilearn.plotting.displays.OrthoSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.orthoslicer method)": [[357, "nilearn.plotting.displays.OrthoSlicer.savefig"]], "title() (nilearn.plotting.displays.orthoslicer method)": [[357, "nilearn.plotting.displays.OrthoSlicer.title"]], "plotlysurfacefigure (class in nilearn.plotting.displays)": [[358, "nilearn.plotting.displays.PlotlySurfaceFigure"]], "__init__() (nilearn.plotting.displays.plotlysurfacefigure method)": [[358, "nilearn.plotting.displays.PlotlySurfaceFigure.__init__"]], "savefig() (nilearn.plotting.displays.plotlysurfacefigure method)": [[358, "nilearn.plotting.displays.PlotlySurfaceFigure.savefig"]], "show() (nilearn.plotting.displays.plotlysurfacefigure method)": [[358, "nilearn.plotting.displays.PlotlySurfaceFigure.show"]], "rprojector (class in nilearn.plotting.displays)": [[359, "nilearn.plotting.displays.RProjector"]], "__init__() (nilearn.plotting.displays.rprojector method)": [[359, "nilearn.plotting.displays.RProjector.__init__"]], "add_contours() (nilearn.plotting.displays.rprojector method)": [[359, "nilearn.plotting.displays.RProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.rprojector method)": [[359, "nilearn.plotting.displays.RProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.rprojector method)": [[359, "nilearn.plotting.displays.RProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.rprojector method)": [[359, "nilearn.plotting.displays.RProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.rprojector method)": [[359, "nilearn.plotting.displays.RProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.rprojector method)": [[359, "nilearn.plotting.displays.RProjector.annotate"]], "black_bg (nilearn.plotting.displays.rprojector property)": [[359, "nilearn.plotting.displays.RProjector.black_bg"]], "brain_color (nilearn.plotting.displays.rprojector property)": [[359, "nilearn.plotting.displays.RProjector.brain_color"]], "close() (nilearn.plotting.displays.rprojector method)": [[359, "nilearn.plotting.displays.RProjector.close"]], "draw_cross() (nilearn.plotting.displays.rprojector method)": [[359, "nilearn.plotting.displays.RProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.rprojector class method)": [[359, "nilearn.plotting.displays.RProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.rprojector class method)": [[359, "nilearn.plotting.displays.RProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.rprojector method)": [[359, "nilearn.plotting.displays.RProjector.savefig"]], "title() (nilearn.plotting.displays.rprojector method)": [[359, "nilearn.plotting.displays.RProjector.title"]], "tiledslicer (class in nilearn.plotting.displays)": [[360, "nilearn.plotting.displays.TiledSlicer"]], "__init__() (nilearn.plotting.displays.tiledslicer method)": [[360, "nilearn.plotting.displays.TiledSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.tiledslicer method)": [[360, "nilearn.plotting.displays.TiledSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.tiledslicer method)": [[360, "nilearn.plotting.displays.TiledSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.tiledslicer method)": [[360, "nilearn.plotting.displays.TiledSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.tiledslicer method)": [[360, "nilearn.plotting.displays.TiledSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.tiledslicer method)": [[360, "nilearn.plotting.displays.TiledSlicer.annotate"]], "black_bg (nilearn.plotting.displays.tiledslicer property)": [[360, "nilearn.plotting.displays.TiledSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.tiledslicer property)": [[360, "nilearn.plotting.displays.TiledSlicer.brain_color"]], "close() (nilearn.plotting.displays.tiledslicer method)": [[360, "nilearn.plotting.displays.TiledSlicer.close"]], "draw_cross() (nilearn.plotting.displays.tiledslicer method)": [[360, "nilearn.plotting.displays.TiledSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.tiledslicer class method)": [[360, "nilearn.plotting.displays.TiledSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.tiledslicer class method)": [[360, "nilearn.plotting.displays.TiledSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.tiledslicer method)": [[360, "nilearn.plotting.displays.TiledSlicer.savefig"]], "title() (nilearn.plotting.displays.tiledslicer method)": [[360, "nilearn.plotting.displays.TiledSlicer.title"]], "xprojector (class in nilearn.plotting.displays)": [[361, "nilearn.plotting.displays.XProjector"]], "__init__() (nilearn.plotting.displays.xprojector method)": [[361, "nilearn.plotting.displays.XProjector.__init__"]], "add_contours() (nilearn.plotting.displays.xprojector method)": [[361, "nilearn.plotting.displays.XProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.xprojector method)": [[361, "nilearn.plotting.displays.XProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.xprojector method)": [[361, "nilearn.plotting.displays.XProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.xprojector method)": [[361, "nilearn.plotting.displays.XProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.xprojector method)": [[361, "nilearn.plotting.displays.XProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.xprojector method)": [[361, "nilearn.plotting.displays.XProjector.annotate"]], "black_bg (nilearn.plotting.displays.xprojector property)": [[361, "nilearn.plotting.displays.XProjector.black_bg"]], "brain_color (nilearn.plotting.displays.xprojector property)": [[361, "nilearn.plotting.displays.XProjector.brain_color"]], "close() (nilearn.plotting.displays.xprojector method)": [[361, "nilearn.plotting.displays.XProjector.close"]], "draw_cross() (nilearn.plotting.displays.xprojector method)": [[361, "nilearn.plotting.displays.XProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xprojector class method)": [[361, "nilearn.plotting.displays.XProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xprojector class method)": [[361, "nilearn.plotting.displays.XProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.xprojector method)": [[361, "nilearn.plotting.displays.XProjector.savefig"]], "title() (nilearn.plotting.displays.xprojector method)": [[361, "nilearn.plotting.displays.XProjector.title"]], "xslicer (class in nilearn.plotting.displays)": [[362, "nilearn.plotting.displays.XSlicer"]], "__init__() (nilearn.plotting.displays.xslicer method)": [[362, "nilearn.plotting.displays.XSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.xslicer method)": [[362, "nilearn.plotting.displays.XSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.xslicer method)": [[362, "nilearn.plotting.displays.XSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.xslicer method)": [[362, "nilearn.plotting.displays.XSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.xslicer method)": [[362, "nilearn.plotting.displays.XSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.xslicer method)": [[362, "nilearn.plotting.displays.XSlicer.annotate"]], "black_bg (nilearn.plotting.displays.xslicer property)": [[362, "nilearn.plotting.displays.XSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.xslicer property)": [[362, "nilearn.plotting.displays.XSlicer.brain_color"]], "close() (nilearn.plotting.displays.xslicer method)": [[362, "nilearn.plotting.displays.XSlicer.close"]], "draw_cross() (nilearn.plotting.displays.xslicer method)": [[362, "nilearn.plotting.displays.XSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xslicer class method)": [[362, "nilearn.plotting.displays.XSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xslicer class method)": [[362, "nilearn.plotting.displays.XSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.xslicer method)": [[362, "nilearn.plotting.displays.XSlicer.savefig"]], "title() (nilearn.plotting.displays.xslicer method)": [[362, "nilearn.plotting.displays.XSlicer.title"]], "xzprojector (class in nilearn.plotting.displays)": [[363, "nilearn.plotting.displays.XZProjector"]], "__init__() (nilearn.plotting.displays.xzprojector method)": [[363, "nilearn.plotting.displays.XZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.xzprojector method)": [[363, "nilearn.plotting.displays.XZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.xzprojector method)": [[363, "nilearn.plotting.displays.XZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.xzprojector method)": [[363, "nilearn.plotting.displays.XZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.xzprojector method)": [[363, "nilearn.plotting.displays.XZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.xzprojector method)": [[363, "nilearn.plotting.displays.XZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.xzprojector method)": [[363, "nilearn.plotting.displays.XZProjector.annotate"]], "black_bg (nilearn.plotting.displays.xzprojector property)": [[363, "nilearn.plotting.displays.XZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.xzprojector property)": [[363, "nilearn.plotting.displays.XZProjector.brain_color"]], "close() (nilearn.plotting.displays.xzprojector method)": [[363, "nilearn.plotting.displays.XZProjector.close"]], "draw_cross() (nilearn.plotting.displays.xzprojector method)": [[363, "nilearn.plotting.displays.XZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xzprojector class method)": [[363, "nilearn.plotting.displays.XZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xzprojector class method)": [[363, "nilearn.plotting.displays.XZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.xzprojector method)": [[363, "nilearn.plotting.displays.XZProjector.savefig"]], "title() (nilearn.plotting.displays.xzprojector method)": [[363, "nilearn.plotting.displays.XZProjector.title"]], "xzslicer (class in nilearn.plotting.displays)": [[364, "nilearn.plotting.displays.XZSlicer"]], "__init__() (nilearn.plotting.displays.xzslicer method)": [[364, "nilearn.plotting.displays.XZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.xzslicer method)": [[364, "nilearn.plotting.displays.XZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.xzslicer method)": [[364, "nilearn.plotting.displays.XZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.xzslicer method)": [[364, "nilearn.plotting.displays.XZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.xzslicer method)": [[364, "nilearn.plotting.displays.XZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.xzslicer method)": [[364, "nilearn.plotting.displays.XZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.xzslicer property)": [[364, "nilearn.plotting.displays.XZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.xzslicer property)": [[364, "nilearn.plotting.displays.XZSlicer.brain_color"]], "close() (nilearn.plotting.displays.xzslicer method)": [[364, "nilearn.plotting.displays.XZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.xzslicer method)": [[364, "nilearn.plotting.displays.XZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xzslicer class method)": [[364, "nilearn.plotting.displays.XZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xzslicer class method)": [[364, "nilearn.plotting.displays.XZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.xzslicer method)": [[364, "nilearn.plotting.displays.XZSlicer.savefig"]], "title() (nilearn.plotting.displays.xzslicer method)": [[364, "nilearn.plotting.displays.XZSlicer.title"]], "yprojector (class in nilearn.plotting.displays)": [[365, "nilearn.plotting.displays.YProjector"]], "__init__() (nilearn.plotting.displays.yprojector method)": [[365, "nilearn.plotting.displays.YProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yprojector method)": [[365, "nilearn.plotting.displays.YProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yprojector method)": [[365, "nilearn.plotting.displays.YProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yprojector method)": [[365, "nilearn.plotting.displays.YProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yprojector method)": [[365, "nilearn.plotting.displays.YProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yprojector method)": [[365, "nilearn.plotting.displays.YProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yprojector method)": [[365, "nilearn.plotting.displays.YProjector.annotate"]], "black_bg (nilearn.plotting.displays.yprojector property)": [[365, "nilearn.plotting.displays.YProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yprojector property)": [[365, "nilearn.plotting.displays.YProjector.brain_color"]], "close() (nilearn.plotting.displays.yprojector method)": [[365, "nilearn.plotting.displays.YProjector.close"]], "draw_cross() (nilearn.plotting.displays.yprojector method)": [[365, "nilearn.plotting.displays.YProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yprojector class method)": [[365, "nilearn.plotting.displays.YProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yprojector class method)": [[365, "nilearn.plotting.displays.YProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yprojector method)": [[365, "nilearn.plotting.displays.YProjector.savefig"]], "title() (nilearn.plotting.displays.yprojector method)": [[365, "nilearn.plotting.displays.YProjector.title"]], "yslicer (class in nilearn.plotting.displays)": [[366, "nilearn.plotting.displays.YSlicer"]], "__init__() (nilearn.plotting.displays.yslicer method)": [[366, "nilearn.plotting.displays.YSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yslicer method)": [[366, "nilearn.plotting.displays.YSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yslicer method)": [[366, "nilearn.plotting.displays.YSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yslicer method)": [[366, "nilearn.plotting.displays.YSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yslicer method)": [[366, "nilearn.plotting.displays.YSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yslicer method)": [[366, "nilearn.plotting.displays.YSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yslicer property)": [[366, "nilearn.plotting.displays.YSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yslicer property)": [[366, "nilearn.plotting.displays.YSlicer.brain_color"]], "close() (nilearn.plotting.displays.yslicer method)": [[366, "nilearn.plotting.displays.YSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yslicer method)": [[366, "nilearn.plotting.displays.YSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yslicer class method)": [[366, "nilearn.plotting.displays.YSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yslicer class method)": [[366, "nilearn.plotting.displays.YSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yslicer method)": [[366, "nilearn.plotting.displays.YSlicer.savefig"]], "title() (nilearn.plotting.displays.yslicer method)": [[366, "nilearn.plotting.displays.YSlicer.title"]], "yxprojector (class in nilearn.plotting.displays)": [[367, "nilearn.plotting.displays.YXProjector"]], "__init__() (nilearn.plotting.displays.yxprojector method)": [[367, "nilearn.plotting.displays.YXProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yxprojector method)": [[367, "nilearn.plotting.displays.YXProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yxprojector method)": [[367, "nilearn.plotting.displays.YXProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yxprojector method)": [[367, "nilearn.plotting.displays.YXProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yxprojector method)": [[367, "nilearn.plotting.displays.YXProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yxprojector method)": [[367, "nilearn.plotting.displays.YXProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yxprojector method)": [[367, "nilearn.plotting.displays.YXProjector.annotate"]], "black_bg (nilearn.plotting.displays.yxprojector property)": [[367, "nilearn.plotting.displays.YXProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yxprojector property)": [[367, "nilearn.plotting.displays.YXProjector.brain_color"]], "close() (nilearn.plotting.displays.yxprojector method)": [[367, "nilearn.plotting.displays.YXProjector.close"]], "draw_cross() (nilearn.plotting.displays.yxprojector method)": [[367, "nilearn.plotting.displays.YXProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yxprojector class method)": [[367, "nilearn.plotting.displays.YXProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yxprojector class method)": [[367, "nilearn.plotting.displays.YXProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yxprojector method)": [[367, "nilearn.plotting.displays.YXProjector.savefig"]], "title() (nilearn.plotting.displays.yxprojector method)": [[367, "nilearn.plotting.displays.YXProjector.title"]], "yxslicer (class in nilearn.plotting.displays)": [[368, "nilearn.plotting.displays.YXSlicer"]], "__init__() (nilearn.plotting.displays.yxslicer method)": [[368, "nilearn.plotting.displays.YXSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yxslicer method)": [[368, "nilearn.plotting.displays.YXSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yxslicer method)": [[368, "nilearn.plotting.displays.YXSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yxslicer method)": [[368, "nilearn.plotting.displays.YXSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yxslicer method)": [[368, "nilearn.plotting.displays.YXSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yxslicer method)": [[368, "nilearn.plotting.displays.YXSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yxslicer property)": [[368, "nilearn.plotting.displays.YXSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yxslicer property)": [[368, "nilearn.plotting.displays.YXSlicer.brain_color"]], "close() (nilearn.plotting.displays.yxslicer method)": [[368, "nilearn.plotting.displays.YXSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yxslicer method)": [[368, "nilearn.plotting.displays.YXSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yxslicer class method)": [[368, "nilearn.plotting.displays.YXSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yxslicer class method)": [[368, "nilearn.plotting.displays.YXSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yxslicer method)": [[368, "nilearn.plotting.displays.YXSlicer.savefig"]], "title() (nilearn.plotting.displays.yxslicer method)": [[368, "nilearn.plotting.displays.YXSlicer.title"]], "yzprojector (class in nilearn.plotting.displays)": [[369, "nilearn.plotting.displays.YZProjector"]], "__init__() (nilearn.plotting.displays.yzprojector method)": [[369, "nilearn.plotting.displays.YZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yzprojector method)": [[369, "nilearn.plotting.displays.YZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yzprojector method)": [[369, "nilearn.plotting.displays.YZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yzprojector method)": [[369, "nilearn.plotting.displays.YZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yzprojector method)": [[369, "nilearn.plotting.displays.YZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yzprojector method)": [[369, "nilearn.plotting.displays.YZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yzprojector method)": [[369, "nilearn.plotting.displays.YZProjector.annotate"]], "black_bg (nilearn.plotting.displays.yzprojector property)": [[369, "nilearn.plotting.displays.YZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yzprojector property)": [[369, "nilearn.plotting.displays.YZProjector.brain_color"]], "close() (nilearn.plotting.displays.yzprojector method)": [[369, "nilearn.plotting.displays.YZProjector.close"]], "draw_cross() (nilearn.plotting.displays.yzprojector method)": [[369, "nilearn.plotting.displays.YZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yzprojector class method)": [[369, "nilearn.plotting.displays.YZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yzprojector class method)": [[369, "nilearn.plotting.displays.YZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yzprojector method)": [[369, "nilearn.plotting.displays.YZProjector.savefig"]], "title() (nilearn.plotting.displays.yzprojector method)": [[369, "nilearn.plotting.displays.YZProjector.title"]], "yzslicer (class in nilearn.plotting.displays)": [[370, "nilearn.plotting.displays.YZSlicer"]], "__init__() (nilearn.plotting.displays.yzslicer method)": [[370, "nilearn.plotting.displays.YZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yzslicer method)": [[370, "nilearn.plotting.displays.YZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yzslicer method)": [[370, "nilearn.plotting.displays.YZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yzslicer method)": [[370, "nilearn.plotting.displays.YZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yzslicer method)": [[370, "nilearn.plotting.displays.YZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yzslicer method)": [[370, "nilearn.plotting.displays.YZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yzslicer property)": [[370, "nilearn.plotting.displays.YZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yzslicer property)": [[370, "nilearn.plotting.displays.YZSlicer.brain_color"]], "close() (nilearn.plotting.displays.yzslicer method)": [[370, "nilearn.plotting.displays.YZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yzslicer method)": [[370, "nilearn.plotting.displays.YZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yzslicer class method)": [[370, "nilearn.plotting.displays.YZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yzslicer class method)": [[370, "nilearn.plotting.displays.YZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yzslicer method)": [[370, "nilearn.plotting.displays.YZSlicer.savefig"]], "title() (nilearn.plotting.displays.yzslicer method)": [[370, "nilearn.plotting.displays.YZSlicer.title"]], "zprojector (class in nilearn.plotting.displays)": [[371, "nilearn.plotting.displays.ZProjector"]], "__init__() (nilearn.plotting.displays.zprojector method)": [[371, "nilearn.plotting.displays.ZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.zprojector method)": [[371, "nilearn.plotting.displays.ZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.zprojector method)": [[371, "nilearn.plotting.displays.ZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.zprojector method)": [[371, "nilearn.plotting.displays.ZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.zprojector method)": [[371, "nilearn.plotting.displays.ZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.zprojector method)": [[371, "nilearn.plotting.displays.ZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.zprojector method)": [[371, "nilearn.plotting.displays.ZProjector.annotate"]], "black_bg (nilearn.plotting.displays.zprojector property)": [[371, "nilearn.plotting.displays.ZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.zprojector property)": [[371, "nilearn.plotting.displays.ZProjector.brain_color"]], "close() (nilearn.plotting.displays.zprojector method)": [[371, "nilearn.plotting.displays.ZProjector.close"]], "draw_cross() (nilearn.plotting.displays.zprojector method)": [[371, "nilearn.plotting.displays.ZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.zprojector class method)": [[371, "nilearn.plotting.displays.ZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.zprojector class method)": [[371, "nilearn.plotting.displays.ZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.zprojector method)": [[371, "nilearn.plotting.displays.ZProjector.savefig"]], "title() (nilearn.plotting.displays.zprojector method)": [[371, "nilearn.plotting.displays.ZProjector.title"]], "zslicer (class in nilearn.plotting.displays)": [[372, "nilearn.plotting.displays.ZSlicer"]], "__init__() (nilearn.plotting.displays.zslicer method)": [[372, "nilearn.plotting.displays.ZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.zslicer method)": [[372, "nilearn.plotting.displays.ZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.zslicer method)": [[372, "nilearn.plotting.displays.ZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.zslicer method)": [[372, "nilearn.plotting.displays.ZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.zslicer method)": [[372, "nilearn.plotting.displays.ZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.zslicer method)": [[372, "nilearn.plotting.displays.ZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.zslicer property)": [[372, "nilearn.plotting.displays.ZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.zslicer property)": [[372, "nilearn.plotting.displays.ZSlicer.brain_color"]], "close() (nilearn.plotting.displays.zslicer method)": [[372, "nilearn.plotting.displays.ZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.zslicer method)": [[372, "nilearn.plotting.displays.ZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.zslicer class method)": [[372, "nilearn.plotting.displays.ZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.zslicer class method)": [[372, "nilearn.plotting.displays.ZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.zslicer method)": [[372, "nilearn.plotting.displays.ZSlicer.savefig"]], "title() (nilearn.plotting.displays.zslicer method)": [[372, "nilearn.plotting.displays.ZSlicer.title"]], "get_projector() (in module nilearn.plotting.displays)": [[373, "nilearn.plotting.displays.get_projector"]], "get_slicer() (in module nilearn.plotting.displays)": [[374, "nilearn.plotting.displays.get_slicer"]], "find_cut_slices() (in module nilearn.plotting)": [[375, "nilearn.plotting.find_cut_slices"]], "find_parcellation_cut_coords() (in module nilearn.plotting)": [[376, "nilearn.plotting.find_parcellation_cut_coords"]], "find_probabilistic_atlas_cut_coords() (in module nilearn.plotting)": [[377, "nilearn.plotting.find_probabilistic_atlas_cut_coords"]], "find_xyz_cut_coords() (in module nilearn.plotting)": [[378, "nilearn.plotting.find_xyz_cut_coords"]], "plot_anat() (in module nilearn.plotting)": [[379, "nilearn.plotting.plot_anat"]], "plot_carpet() (in module nilearn.plotting)": [[380, "nilearn.plotting.plot_carpet"]], "plot_connectome() (in module nilearn.plotting)": [[381, "nilearn.plotting.plot_connectome"]], "plot_contrast_matrix() (in module nilearn.plotting)": [[382, "nilearn.plotting.plot_contrast_matrix"]], "plot_design_matrix() (in module nilearn.plotting)": [[383, "nilearn.plotting.plot_design_matrix"]], "plot_epi() (in module nilearn.plotting)": [[384, "nilearn.plotting.plot_epi"]], "plot_event() (in module nilearn.plotting)": [[385, "nilearn.plotting.plot_event"]], "plot_glass_brain() (in module nilearn.plotting)": [[386, "nilearn.plotting.plot_glass_brain"]], "plot_img() (in module nilearn.plotting)": [[387, "nilearn.plotting.plot_img"]], "plot_img_comparison() (in module nilearn.plotting)": [[388, "nilearn.plotting.plot_img_comparison"]], "plot_img_on_surf() (in module nilearn.plotting)": [[389, "nilearn.plotting.plot_img_on_surf"]], "plot_markers() (in module nilearn.plotting)": [[390, "nilearn.plotting.plot_markers"]], "plot_matrix() (in module nilearn.plotting)": [[391, "nilearn.plotting.plot_matrix"]], "plot_prob_atlas() (in module nilearn.plotting)": [[392, "nilearn.plotting.plot_prob_atlas"]], "plot_roi() (in module nilearn.plotting)": [[393, "nilearn.plotting.plot_roi"]], "plot_stat_map() (in module nilearn.plotting)": [[394, "nilearn.plotting.plot_stat_map"]], "plot_surf() (in module nilearn.plotting)": [[395, "nilearn.plotting.plot_surf"]], "plot_surf_contours() (in module nilearn.plotting)": [[396, "nilearn.plotting.plot_surf_contours"]], "plot_surf_roi() (in module nilearn.plotting)": [[397, "nilearn.plotting.plot_surf_roi"]], "plot_surf_stat_map() (in module nilearn.plotting)": [[398, "nilearn.plotting.plot_surf_stat_map"]], "show() (in module nilearn.plotting)": [[399, "nilearn.plotting.show"]], "view_connectome() (in module nilearn.plotting)": [[400, "nilearn.plotting.view_connectome"]], "view_img() (in module nilearn.plotting)": [[401, "nilearn.plotting.view_img"]], "view_img_on_surf() (in module nilearn.plotting)": [[402, "nilearn.plotting.view_img_on_surf"]], "view_markers() (in module nilearn.plotting)": [[403, "nilearn.plotting.view_markers"]], "view_surf() (in module nilearn.plotting)": [[404, "nilearn.plotting.view_surf"]], "hierarchicalkmeans (class in nilearn.regions)": [[405, "nilearn.regions.HierarchicalKMeans"]], "__init__() (nilearn.regions.hierarchicalkmeans method)": [[405, "nilearn.regions.HierarchicalKMeans.__init__"]], "fit() (nilearn.regions.hierarchicalkmeans method)": [[405, "nilearn.regions.HierarchicalKMeans.fit"]], "fit_predict() (nilearn.regions.hierarchicalkmeans method)": [[405, "nilearn.regions.HierarchicalKMeans.fit_predict"]], "fit_transform() (nilearn.regions.hierarchicalkmeans method)": [[405, "nilearn.regions.HierarchicalKMeans.fit_transform"]], "get_metadata_routing() (nilearn.regions.hierarchicalkmeans method)": [[405, "nilearn.regions.HierarchicalKMeans.get_metadata_routing"]], "get_params() (nilearn.regions.hierarchicalkmeans method)": [[405, "nilearn.regions.HierarchicalKMeans.get_params"]], "inverse_transform() (nilearn.regions.hierarchicalkmeans method)": [[405, "nilearn.regions.HierarchicalKMeans.inverse_transform"]], "set_inverse_transform_request() (nilearn.regions.hierarchicalkmeans method)": [[405, "nilearn.regions.HierarchicalKMeans.set_inverse_transform_request"]], "set_output() (nilearn.regions.hierarchicalkmeans method)": [[405, "nilearn.regions.HierarchicalKMeans.set_output"]], "set_params() (nilearn.regions.hierarchicalkmeans method)": [[405, "nilearn.regions.HierarchicalKMeans.set_params"]], "transform() (nilearn.regions.hierarchicalkmeans method)": [[405, "nilearn.regions.HierarchicalKMeans.transform"]], "parcellations (class in nilearn.regions)": [[406, "nilearn.regions.Parcellations"]], "valid_methods (nilearn.regions.parcellations attribute)": [[406, "nilearn.regions.Parcellations.VALID_METHODS"]], "__init__() (nilearn.regions.parcellations method)": [[406, "nilearn.regions.Parcellations.__init__"]], "fit() (nilearn.regions.parcellations method)": [[406, "nilearn.regions.Parcellations.fit"]], "fit_transform() (nilearn.regions.parcellations method)": [[406, "nilearn.regions.Parcellations.fit_transform"]], "get_metadata_routing() (nilearn.regions.parcellations method)": [[406, "nilearn.regions.Parcellations.get_metadata_routing"]], "get_params() (nilearn.regions.parcellations method)": [[406, "nilearn.regions.Parcellations.get_params"]], "inverse_transform() (nilearn.regions.parcellations method)": [[406, "nilearn.regions.Parcellations.inverse_transform"]], "score() (nilearn.regions.parcellations method)": [[406, "nilearn.regions.Parcellations.score"]], "set_fit_request() (nilearn.regions.parcellations method)": [[406, "nilearn.regions.Parcellations.set_fit_request"]], "set_inverse_transform_request() (nilearn.regions.parcellations method)": [[406, "nilearn.regions.Parcellations.set_inverse_transform_request"]], "set_output() (nilearn.regions.parcellations method)": [[406, "nilearn.regions.Parcellations.set_output"]], "set_params() (nilearn.regions.parcellations method)": [[406, "nilearn.regions.Parcellations.set_params"]], "set_score_request() (nilearn.regions.parcellations method)": [[406, "nilearn.regions.Parcellations.set_score_request"]], "set_transform_request() (nilearn.regions.parcellations method)": [[406, "nilearn.regions.Parcellations.set_transform_request"]], "transform() (nilearn.regions.parcellations method)": [[406, "nilearn.regions.Parcellations.transform"]], "rena (class in nilearn.regions)": [[407, "nilearn.regions.ReNA"]], "__init__() (nilearn.regions.rena method)": [[407, "nilearn.regions.ReNA.__init__"]], "fit() (nilearn.regions.rena method)": [[407, "nilearn.regions.ReNA.fit"]], "fit_predict() (nilearn.regions.rena method)": [[407, "nilearn.regions.ReNA.fit_predict"]], "fit_transform() (nilearn.regions.rena method)": [[407, "nilearn.regions.ReNA.fit_transform"]], "get_metadata_routing() (nilearn.regions.rena method)": [[407, "nilearn.regions.ReNA.get_metadata_routing"]], "get_params() (nilearn.regions.rena method)": [[407, "nilearn.regions.ReNA.get_params"]], "inverse_transform() (nilearn.regions.rena method)": [[407, "nilearn.regions.ReNA.inverse_transform"]], "set_inverse_transform_request() (nilearn.regions.rena method)": [[407, "nilearn.regions.ReNA.set_inverse_transform_request"]], "set_output() (nilearn.regions.rena method)": [[407, "nilearn.regions.ReNA.set_output"]], "set_params() (nilearn.regions.rena method)": [[407, "nilearn.regions.ReNA.set_params"]], "transform() (nilearn.regions.rena method)": [[407, "nilearn.regions.ReNA.transform"]], "regionextractor (class in nilearn.regions)": [[408, "nilearn.regions.RegionExtractor"]], "__init__() (nilearn.regions.regionextractor method)": [[408, "nilearn.regions.RegionExtractor.__init__"]], "fit() (nilearn.regions.regionextractor method)": [[408, "nilearn.regions.RegionExtractor.fit"]], "fit_transform() (nilearn.regions.regionextractor method)": [[408, "nilearn.regions.RegionExtractor.fit_transform"]], "generate_report() (nilearn.regions.regionextractor method)": [[408, "nilearn.regions.RegionExtractor.generate_report"]], "get_metadata_routing() (nilearn.regions.regionextractor method)": [[408, "nilearn.regions.RegionExtractor.get_metadata_routing"]], "get_params() (nilearn.regions.regionextractor method)": [[408, "nilearn.regions.RegionExtractor.get_params"]], "inverse_transform() (nilearn.regions.regionextractor method)": [[408, "nilearn.regions.RegionExtractor.inverse_transform"]], "set_fit_request() (nilearn.regions.regionextractor method)": [[408, "nilearn.regions.RegionExtractor.set_fit_request"]], "set_inverse_transform_request() (nilearn.regions.regionextractor method)": [[408, "nilearn.regions.RegionExtractor.set_inverse_transform_request"]], "set_output() (nilearn.regions.regionextractor method)": [[408, "nilearn.regions.RegionExtractor.set_output"]], "set_params() (nilearn.regions.regionextractor method)": [[408, "nilearn.regions.RegionExtractor.set_params"]], "set_transform_request() (nilearn.regions.regionextractor method)": [[408, "nilearn.regions.RegionExtractor.set_transform_request"]], "transform() (nilearn.regions.regionextractor method)": [[408, "nilearn.regions.RegionExtractor.transform"]], "transform_single_imgs() (nilearn.regions.regionextractor method)": [[408, "nilearn.regions.RegionExtractor.transform_single_imgs"]], "connected_label_regions() (in module nilearn.regions)": [[409, "nilearn.regions.connected_label_regions"]], "connected_regions() (in module nilearn.regions)": [[410, "nilearn.regions.connected_regions"]], "img_to_signals_labels() (in module nilearn.regions)": [[411, "nilearn.regions.img_to_signals_labels"]], "img_to_signals_maps() (in module nilearn.regions)": [[412, "nilearn.regions.img_to_signals_maps"]], "recursive_neighbor_agglomeration() (in module nilearn.regions)": [[413, "nilearn.regions.recursive_neighbor_agglomeration"]], "signals_to_img_labels() (in module nilearn.regions)": [[414, "nilearn.regions.signals_to_img_labels"]], "signals_to_img_maps() (in module nilearn.regions)": [[415, "nilearn.regions.signals_to_img_maps"]], "htmlreport (class in nilearn.reporting)": [[416, "nilearn.reporting.HTMLReport"]], "__init__() (nilearn.reporting.htmlreport method)": [[416, "nilearn.reporting.HTMLReport.__init__"]], "get_iframe() (nilearn.reporting.htmlreport method)": [[416, "nilearn.reporting.HTMLReport.get_iframe"]], "get_standalone() (nilearn.reporting.htmlreport method)": [[416, "nilearn.reporting.HTMLReport.get_standalone"]], "open_in_browser() (nilearn.reporting.htmlreport method)": [[416, "nilearn.reporting.HTMLReport.open_in_browser"]], "remove_temp_file() (nilearn.reporting.htmlreport method)": [[416, "nilearn.reporting.HTMLReport.remove_temp_file"]], "resize() (nilearn.reporting.htmlreport method)": [[416, "nilearn.reporting.HTMLReport.resize"]], "save_as_html() (nilearn.reporting.htmlreport method)": [[416, "nilearn.reporting.HTMLReport.save_as_html"]], "get_clusters_table() (in module nilearn.reporting)": [[417, "nilearn.reporting.get_clusters_table"]], "make_glm_report() (in module nilearn.reporting)": [[418, "nilearn.reporting.make_glm_report"]], "butterworth() (in module nilearn.signal)": [[419, "nilearn.signal.butterworth"]], "clean() (in module nilearn.signal)": [[420, "nilearn.signal.clean"]], "high_variance_confounds() (in module nilearn.signal)": [[421, "nilearn.signal.high_variance_confounds"]], "load_surf_data() (in module nilearn.surface)": [[422, "nilearn.surface.load_surf_data"]], "load_surf_mesh() (in module nilearn.surface)": [[423, "nilearn.surface.load_surf_mesh"]], "vol_to_surf() (in module nilearn.surface)": [[424, "nilearn.surface.vol_to_surf"]], "nilearn.glm": [[425, "module-nilearn.glm"]], "nilearn.glm.first_level": [[425, "module-nilearn.glm.first_level"]], "nilearn.glm.second_level": [[425, "module-nilearn.glm.second_level"]], "nilearn.image": [[426, "module-nilearn.image"]], "nilearn.interfaces": [[428, "module-nilearn.interfaces"]], "nilearn.interfaces.bids": [[428, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.fmriprep": [[428, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fsl": [[428, "module-nilearn.interfaces.fsl"]], "nilearn.maskers": [[429, "module-nilearn.maskers"]], "nilearn.masking": [[430, "module-nilearn.masking"]], "nilearn.mass_univariate": [[431, "module-nilearn.mass_univariate"]], "nilearn.plotting": [[432, "module-nilearn.plotting"]], "nilearn.plotting.displays": [[432, "module-nilearn.plotting.displays"]], "nilearn.regions": [[433, "module-nilearn.regions"]], "nilearn.reporting": [[434, "module-nilearn.reporting"]], "nilearn.signal": [[435, "module-nilearn.signal"]], "nilearn.surface": [[436, "module-nilearn.surface"]]}})