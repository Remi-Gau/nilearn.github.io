Search.setIndex({"alltitles": {"0.1.0": [[124, "id1"], [161, "id5326"]], "0.1.1": [[125, "id1"], [161, "id5173"]], "0.1.2": [[126, "id1"], [161, "id5020"]], "0.1.3": [[127, "id1"], [161, "id4866"]], "0.1.4": [[128, "id1"], [161, "id4713"]], "0.10.0": [[129, "id1"], [161, "id780"]], "0.10.1": [[130, "id1"], [161, "id621"]], "0.10.1rc1": [[130, "rc1"], [161, "rc1"]], "0.10.2": [[131, "id1"], [161, "id464"]], "0.10.3": [[132, "id1"], [161, "id307"]], "0.10.4": [[133, "id1"], [161, "id152"]], "0.11.0.dev": [[159, "dev"], [161, "dev"]], "0.2.0": [[134, "id1"], [161, "id4556"]], "0.2.1": [[135, "id1"], [161, "v0-2-1"]], "0.2.2": [[136, "id1"], [161, "id4397"]], "0.2.3": [[137, "id1"], [161, "id4244"]], "0.2.4": [[138, "id1"], [161, "id4090"]], "0.2.5": [[139, "id2"], [161, "id3936"]], "0.2.5.1": [[139, "id1"], [161, "id3932"]], "0.2.6": [[140, "id1"], [161, "id3777"]], "0.3.0": [[141, "id1"], [161, "id3617"]], "0.3.0 beta": [[141, "beta"], [161, "id3621"]], "0.3.1": [[142, "id1"], [161, "id3461"]], "0.4.0": [[143, "id1"], [161, "id3304"]], "0.4.1": [[144, "id1"], [161, "id3150"]], "0.4.2": [[145, "id1"], [161, "id2996"]], "0.5.0": [[146, "id1"], [161, "id2827"]], "0.5.0 alpha": [[146, "alpha"], [161, "alpha"]], "0.5.0 beta": [[146, "beta"], [161, "beta"]], "0.5.0 rc": [[146, "rc"], [161, "id2831"]], "0.5.1": [[147, "id1"], [161, "id2671"]], "0.5.2": [[148, "id1"], [161, "id2516"]], "0.6.0": [[149, "id1"], [161, "id2345"]], "0.6.0a0": [[149, "a0"], [161, "a0"]], "0.6.0b0": [[149, "b0"], [161, "b0"]], "0.6.0rc": [[149, "rc"], [161, "rc"]], "0.6.1": [[150, "id1"], [161, "id2190"]], "0.6.2": [[151, "id1"], [161, "id2035"]], "0.7.0": [[152, "id1"], [161, "id1878"]], "0.7.1": [[153, "id1"], [161, "id1722"]], "0.8.0": [[154, "id1"], [161, "id1565"]], "0.8.1": [[155, "id1"], [161, "id1408"]], "0.9.0": [[156, "id1"], [161, "id1251"]], "0.9.1": [[157, "id1"], [161, "id1096"]], "0.9.2": [[158, "id1"], [161, "id937"]], "3D Plots of connectomes": [[492, "d-plots-of-connectomes"]], "3D Plots of markers": [[492, "d-plots-of-markers"]], "3D Plots of statistical maps or atlases on the cortical surface": [[492, "d-plots-of-statistical-maps-or-atlases-on-the-cortical-surface"]], "3D and 4D niimgs: handling and visualizing": [[2, "d-and-4d-niimgs-handling-and-visualizing"]], "3D visualization in a web browser": [[9, "d-visualization-in-a-web-browser"], [22, "d-visualization-in-a-web-browser"], [52, "d-visualization-in-a-web-browser"], [54, "d-visualization-in-a-web-browser"], [58, "d-visualization-in-a-web-browser"], [111, "d-visualization-in-a-web-browser"], [114, "d-visualization-in-a-web-browser"]], "A few definitions": [[168, "a-few-definitions"]], "A first contrast estimation and plotting": [[65, "a-first-contrast-estimation-and-plotting"]], "A first estimator": [[168, "a-first-estimator"]], "A first step: looking at our data": [[4, "a-first-step-looking-at-our-data"]], "A function to generate data": [[44, "a-function-to-generate-data"]], "A functional connectome: a graph of interactions": [[163, "a-functional-connectome-a-graph-of-interactions"]], "A functional connectome: extracting coordinates of regions": [[163, "a-functional-connectome-extracting-coordinates-of-regions"]], "A introduction tutorial to fMRI decoding": [[3, "a-introduction-tutorial-to-fmri-decoding"]], "A primer on BOLD-fMRI data analysis": [[178, "a-primer-on-bold-fmri-data-analysis"]], "A short demo of the surface images & maskers": [[116, "a-short-demo-of-the-surface-images-maskers"]], "A simple function to plot slices": [[44, "a-simple-function-to-plot-slices"]], "AAL atlas": [[195, "aal-atlas"]], "ABIDE PCP dataset": [[193, "abide-pcp-dataset"]], "ADHD": [[478, "adhd"]], "ADHD dataset": [[196, "adhd-dataset"]], "ANOVA pipeline with nilearn.decoding.Decoder object": [[29, "anova-pipeline-with-nilearn-decoding-decoder-object"], [34, "anova-pipeline-with-nilearn-decoding-decoder-object"]], "API References": [[482, "api-references"]], "API changes summary": [[134, "api-changes-summary"], [161, "api-changes-summary"]], "APIs of nilearn objects": [[176, "apis-of-nilearn-objects"]], "Access": [[193, "access"], [194, "access"], [195, "access"], [196, "access"], [197, "access"], [198, "access"], [200, "access"], [201, "access"], [202, "access"], [203, "access"], [204, "access"], [205, "access"], [206, "access"], [207, "access"], [208, "access"], [209, "access"], [210, "access"], [211, "access"], [212, "access"], [213, "access"], [214, "access"], [215, "access"], [216, "access"], [217, "access"], [218, "access"], [219, "access"], [220, "access"], [222, "access"], [223, "access"], [224, "access"], [225, "access"], [226, "access"], [227, "access"], [228, "access"], [229, "access"], [230, "access"], [231, "access"], [232, "access"]], "Accessing individual volumes in 4D images": [[187, "accessing-individual-volumes-in-4d-images"]], "Adding a time derivative to the design": [[65, "adding-a-time-derivative-to-the-design"]], "Adding atlases and datasets": [[176, "adding-atlases-and-datasets"]], "Adding overlays, edges, contours, contour fillings, markers, scale bar": [[492, "adding-overlays-edges-contours-contour-fillings-markers-scale-bar"]], "Additional cases": [[176, "additional-cases"]], "Adjust the sample locations": [[24, "adjust-the-sample-locations"]], "Advanced decoding using scikit learn": [[97, "advanced-decoding-using-scikit-learn"]], "Advanced statistical analysis of brain images": [[96, "advanced-statistical-analysis-of-brain-images"], [118, "advanced-statistical-analysis-of-brain-images"]], "Advanced usage: manual pipelines and scaling up": [[121, "advanced-usage-manual-pipelines-and-scaling-up"]], "Advanced: Design philosophy of \u201cMaskers\u201d": [[188, null]], "Advanced: scikit-learn Pipelines": [[188, null]], "After mask computation: extracting time series": [[88, "after-mask-computation-extracting-time-series"]], "Aggregate beta maps from the LSA model based on condition": [[99, "aggregate-beta-maps-from-the-lsa-model-based-on-condition"]], "Allen 2011 atlas": [[197, "allen-2011-atlas"]], "An alternative to ICA: Dictionary learning": [[167, "an-alternative-to-ica-dictionary-learning"]], "An exercise to go further": [[44, "an-exercise-to-go-further"]], "An introduction to GLMs in fMRI statistical analysis": [[178, "an-introduction-to-glms-in-fmri-statistical-analysis"]], "An introduction to decoding": [[168, "an-introduction-to-decoding"]], "Analyse data": [[74, "analyse-data"]], "Analysing the left hemisphere": [[67, "analysing-the-left-hemisphere"]], "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model": [[64, "analysis-of-an-fmri-dataset-with-a-finite-impule-response-fir-model"]], "Analyzing fMRI using GLMs": [[179, "analyzing-fmri-using-glms"]], "And now display the corresponding graph": [[52, "and-now-display-the-corresponding-graph"], [52, "id1"], [54, "and-now-display-the-corresponding-graph"]], "Annotating plots": [[15, "annotating-plots"]], "Answer questions": [[176, "answer-questions"]], "Applications of beta series": [[99, "applications-of-beta-series"]], "Apply CanICA on the data": [[48, "apply-canica-on-the-data"]], "Applying a mask": [[122, "applying-a-mask"]], "Applying a scikit-learn machine learning method": [[122, "applying-a-scikit-learn-machine-learning-method"]], "Applying clustering": [[165, "applying-clustering"]], "Applying the mask to extract the corresponding time series": [[25, "applying-the-mask-to-extract-the-corresponding-time-series"]], "Atlases": [[190, "atlases"]], "Atlases descriptions": [[190, "atlases-descriptions"]], "Automatically computing a mask": [[122, "automatically-computing-a-mask"]], "Available Colormaps": [[492, "available-colormaps"]], "BASC multiscale atlas": [[198, "basc-multiscale-atlas"]], "BIDS dataset first and second level analysis": [[100, "bids-dataset-first-and-second-level-analysis"]], "BIDS features": [[478, "bids-features"]], "BIDS language localizer": [[199, "bids-language-localizer"]], "Bagging several models": [[169, "bagging-several-models"]], "Basic Atlas plotting": [[10, "basic-atlas-plotting"]], "Basic nilearn example: manipulating and looking at data": [[4, "basic-nilearn-example-manipulating-and-looking-at-data"]], "Basic numerics and plotting with Python": [[5, "basic-numerics-and-plotting-with-python"]], "Basic tutorials": [[1, "basic-tutorials"], [118, "basic-tutorials"]], "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding": [[99, "beta-series-modeling-for-task-based-functional-connectivity-and-decoding"]], "Bootstrap Analysis of Stable Clusters": [[198, "bootstrap-analysis-of-stable-clusters"]], "Bounds on alpha": [[175, "bounds-on-alpha"]], "Brain mapping with mass univariate": [[42, "brain-mapping-with-mass-univariate"]], "Brain maps using Dictionary learning": [[166, "brain-maps-using-dictionary-learning"]], "Brain parcellations": [[163, "brain-parcellations"]], "Brain parcellations with Hierarchical KMeans Clustering": [[49, "brain-parcellations-with-hierarchical-kmeans-clustering"]], "Brain parcellations with KMeans Clustering": [[49, "brain-parcellations-with-kmeans-clustering"]], "Brain parcellations with ReNA Clustering": [[49, "brain-parcellations-with-rena-clustering"]], "Brain parcellations with Ward Clustering": [[49, "brain-parcellations-with-ward-clustering"]], "Brainomics Localizer": [[200, "brainomics-localizer"]], "Breaking an atlas of labels in separated regions": [[85, "breaking-an-atlas-of-labels-in-separated-regions"]], "Bug fixes": [[134, "bug-fixes"], [137, "bug-fixes"], [144, "bug-fixes"], [161, "bug-fixes"], [161, "id4245"], [161, "id4560"]], "Build a mask from this statistical map (Improving the quality of the mask)": [[93, "build-a-mask-from-this-statistical-map-improving-the-quality-of-the-mask"]], "Build a mesh (of a cylinder)": [[24, "build-a-mesh-of-a-cylinder"]], "Build a proper event structure for each run": [[33, "build-a-proper-event-structure-for-each-run"]], "Build a statistical test to find voxels of interest": [[93, "build-a-statistical-test-to-find-voxels-of-interest"]], "Build and deploy the documentation manually": [[184, "build-and-deploy-the-documentation-manually"]], "Build and display a correlation matrix": [[54, "build-and-display-a-correlation-matrix"]], "Build of stable docs": [[184, "build-of-stable-docs"]], "Build the decoders, using scikit-learn": [[35, "build-the-decoders-using-scikit-learn"]], "Build the decoding pipeline": [[33, "build-the-decoding-pipeline"]], "Build the distributions and upload them to Pypi": [[184, "build-the-distributions-and-upload-them-to-pypi"]], "Building documentation": [[176, "building-documentation"]], "Building the encoding models": [[40, "building-the-encoding-models"]], "Building your own neuroimaging machine-learning pipeline": [[122, "building-your-own-neuroimaging-machine-learning-pipeline"]], "CHANGES": [[149, "changes"], [161, "id2349"]], "Calculate and Plot F-test": [[68, "calculate-and-plot-f-test"]], "Calculate and plot contrast": [[68, "calculate-and-plot-contrast"]], "Calculating seed-based functional connectivity": [[23, "calculating-seed-based-functional-connectivity"], [115, "calculating-seed-based-functional-connectivity"]], "Changelog": [[124, "changelog"], [125, "changelog"], [126, "changelog"], [127, "changelog"], [134, "changelog"], [135, "changelog"], [137, "changelog"], [161, "changelog"], [161, "id4404"], [161, "id4557"], [161, "id4867"], [161, "id5021"], [161, "id5174"], [161, "id5327"], [176, "changelog"]], "Changes": [[129, "changes"], [130, "changes"], [130, "id4"], [131, "changes"], [132, "changes"], [133, "changes"], [136, "changes"], [138, "changes"], [139, "changes"], [140, "changes"], [141, "changes"], [141, "id2"], [142, "changes"], [143, "changes"], [144, "changes"], [145, "changes"], [146, "changes"], [146, "id3"], [146, "id6"], [146, "id10"], [147, "changes"], [149, "id3"], [149, "id8"], [149, "id12"], [151, "changes"], [152, "changes"], [154, "changes"], [155, "changes"], [156, "changes"], [157, "changes"], [158, "changes"], [159, "changes"], [161, "changes"], [161, "id155"], [161, "id312"], [161, "id469"], [161, "id625"], [161, "id628"], [161, "id785"], [161, "id944"], [161, "id1099"], [161, "id1256"], [161, "id1413"], [161, "id1570"], [161, "id1883"], [161, "id2038"], [161, "id2352"], [161, "id2358"], [161, "id2362"], [161, "id2673"], [161, "id2830"], [161, "id2834"], [161, "id2839"], [161, "id2843"], [161, "id2997"], [161, "id3152"], [161, "id3308"], [161, "id3463"], [161, "id3618"], [161, "id3623"], [161, "id3780"], [161, "id3933"], [161, "id4092"], [161, "id4401"]], "Changing the drift model": [[65, "changing-the-drift-model"]], "Changing the feature selection": [[97, "changing-the-feature-selection"]], "Changing the hemodynamic response model": [[65, "changing-the-hemodynamic-response-model"]], "Changing the prediction engine": [[97, "changing-the-prediction-engine"]], "Changing the views to \u2018coronal\u2019, \u2018sagittal\u2019 views with coordinates": [[15, "changing-the-views-to-coronal-sagittal-views-with-coordinates"]], "Check installation": [[493, "check-installation"]], "Choice of the prediction accuracy measure": [[168, "choice-of-the-prediction-accuracy-measure"]], "Choosing a good cross-validation strategy": [[168, "choosing-a-good-cross-validation-strategy"]], "Choosing the right model for your analysis": [[99, null]], "Choosing the right predictive model for neuroimaging": [[169, "choosing-the-right-predictive-model-for-neuroimaging"]], "Citing nilearn": [[0, "citing-nilearn"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Classes": [[233, "classes"]], "Classification of age groups using functional connectivity": [[51, "classification-of-age-groups-using-functional-connectivity"]], "Classification: two classes or multi-class": [[169, "classification-two-classes-or-multi-class"]], "Classifier": [[173, "classifier"]], "Closing policy": [[184, "closing-policy"]], "Clustering methods to learn a brain parcellation from fMRI": [[49, "clustering-methods-to-learn-a-brain-parcellation-from-fmri"]], "Clustering to parcellate the brain in regions": [[165, "clustering-to-parcellate-the-brain-in-regions"]], "Code": [[170, null], [170, null], [187, null]], "Code examples": [[492, null]], "Code of Conduct": [[176, "code-of-conduct"]], "Coding Style": [[176, "coding-style"]], "Common data preparation steps: smoothing, filtering, resampling": [[188, "common-data-preparation-steps-smoothing-filtering-resampling"]], "Compare CanICA to dictionary learning": [[48, "compare-canica-to-dictionary-learning"]], "Compare Hierarchical Kmeans clusters with those from Kmeans": [[49, "compare-hierarchical-kmeans-clusters-with-those-from-kmeans"]], "Compare run-specific and fixed effects contrasts": [[70, "compare-run-specific-and-fixed-effects-contrasts"]], "Compare the three modeling approaches": [[99, "compare-the-three-modeling-approaches"]], "Comparing connectomes on different reference atlases": [[47, "comparing-connectomes-on-different-reference-atlases"]], "Comparing the different approaches on simulated data": [[162, "comparing-the-different-approaches-on-simulated-data"]], "Comparing the means of 2 images": [[84, "comparing-the-means-of-2-images"]], "Comparing to massively univariate analysis: F_score or SPM": [[173, "comparing-to-massively-univariate-analysis-f-score-or-spm"]], "Compressed representation": [[165, "compressed-representation"]], "Compressed representation of ReNA clustering": [[49, "compressed-representation-of-rena-clustering"]], "Compressed representation of Ward clustering": [[49, "compressed-representation-of-ward-clustering"]], "Computation times": [[7, "computation-times"], [27, "computation-times"], [45, "computation-times"], [59, "computation-times"], [72, "computation-times"], [81, "computation-times"], [95, "computation-times"], [109, "computation-times"], [117, "computation-times"], [119, "computation-times"], [494, "computation-times"]], "Compute a range of contrasts across both runs": [[70, "compute-a-range-of-contrasts-across-both-runs"]], "Compute and display a correlation matrix": [[56, "compute-and-display-a-correlation-matrix"]], "Compute and resample a mask": [[88, "compute-and-resample-a-mask"]], "Compute correlation coefficients": [[50, "compute-correlation-coefficients"]], "Compute partial correlation matrix": [[58, "compute-partial-correlation-matrix"]], "Compute prediction scores with different values of screening percentile": [[34, "compute-prediction-scores-with-different-values-of-screening-percentile"]], "Compute statistics": [[107, "compute-statistics"]], "Compute the sparse inverse covariance": [[52, "compute-the-sparse-inverse-covariance"]], "Compute within spheres averaged time-series": [[58, "compute-within-spheres-averaged-time-series"]], "Computing a Region of Interest (ROI) mask manually": [[93, "computing-a-region-of-interest-roi-mask-manually"]], "Computing a connectome with sparse inverse covariance": [[52, "computing-a-connectome-with-sparse-inverse-covariance"]], "Computing a mask from raw EPI data": [[88, "computing-a-mask-from-raw-epi-data"]], "Computing a mask from the background": [[88, "computing-a-mask-from-the-background"]], "Computing and applying spatial masks": [[187, "computing-and-applying-spatial-masks"]], "Computing contrasts": [[177, "computing-contrasts"]], "Computing functional connectivity matrices": [[166, "computing-functional-connectivity-matrices"]], "Computing group-sparse precision matrices": [[53, "computing-group-sparse-precision-matrices"]], "Computing the mask from the MNI template": [[88, "computing-the-mask-from-the-mni-template"]], "Conclusion": [[65, "conclusion"]], "Connectivity structure estimation on simulated data": [[57, "connectivity-structure-estimation-on-simulated-data"]], "Connectivity with a surface atlas and SurfaceLabelsMasker": [[116, "connectivity-with-a-surface-atlas-and-surfacelabelsmasker"]], "Connectome extracted from Dosenbach\u2019s atlas": [[58, "connectome-extracted-from-dosenbach-s-atlas"]], "Connectome extraction: inverse covariance for direct connections": [[162, "connectome-extraction-inverse-covariance-for-direct-connections"]], "Content": [[193, "content"], [194, "content"], [195, "content"], [196, "content"], [197, "content"], [198, "content"], [200, "content"], [201, "content"], [202, "content"], [203, "content"], [204, "content"], [205, "content"], [206, "content"], [207, "content"], [208, "content"], [209, "content"], [210, "content"], [211, "content"], [212, "content"], [213, "content"], [214, "content"], [215, "content"], [216, "content"], [217, "content"], [218, "content"], [219, "content"], [220, "content"], [221, "content"], [222, "content"], [223, "content"], [224, "content"], [225, "content"], [226, "content"], [227, "content"], [228, "content"], [229, "content"], [230, "content"], [231, "content"], [232, "content"]], "Contribute code": [[176, "contribute-code"]], "Contributing": [[176, "contributing"], [176, "id5"]], "Contribution Guidelines": [[176, "contribution-guidelines"]], "Contributors": [[134, "contributors"], [136, "contributors"], [139, "contributors"], [143, "contributors"], [146, "contributors"], [146, "id7"], [146, "id11"], [147, "contributors"], [148, "contributors"], [149, "contributors"], [149, "id10"], [149, "id14"], [150, "contributors"], [151, "contributors"], [161, "contributors"], [161, "id2193"], [161, "id2354"], [161, "id2360"], [161, "id2364"], [161, "id2519"], [161, "id2675"], [161, "id2835"], [161, "id2840"], [161, "id2844"], [161, "id3309"], [161, "id3938"], [161, "id4402"], [161, "id4561"]], "Controlling how the mask is computed from the data": [[188, "controlling-how-the-mask-is-computed-from-the-data"]], "Controlling the contrast of the background when plotting": [[17, "controlling-the-contrast-of-the-background-when-plotting"]], "Coordinates of Default Mode Network": [[58, "coordinates-of-default-mode-network"]], "Copying headers from input images with math_img": [[101, "copying-headers-from-input-images-with-math-img"]], "Core developers": [[0, "core-developers"]], "Cortical surface-based searchlight decoding": [[37, "cortical-surface-based-searchlight-decoding"]], "Craddock 2012 atlas": [[201, "craddock-2012-atlas"]], "Create a second level design matrix": [[77, "create-a-second-level-design-matrix"]], "Create a simple experimental paradigm": [[77, "create-a-simple-experimental-paradigm"]], "Create data": [[44, "create-data"]], "Create design matrices": [[63, "create-design-matrices"]], "Cross validation": [[173, "cross-validation"]], "Cross-validation": [[168, "cross-validation"]], "Cross-validation algorithm": [[175, "cross-validation-algorithm"]], "Cross-validation with scikit-learn": [[97, "cross-validation-with-scikit-learn"], [171, "cross-validation-with-scikit-learn"]], "Cross-validation with the decoder": [[3, "cross-validation-with-the-decoder"]], "Custom data loading: loading only the first 100 time points": [[188, "custom-data-loading-loading-only-the-first-100-time-points"]], "Data fetcher": [[22, "data-fetcher"], [114, "data-fetcher"]], "Data loading and preprocessing": [[122, "data-loading-and-preprocessing"]], "Data loading: movie-watching data": [[165, "data-loading-movie-watching-data"]], "Dataset formatting: data shape": [[186, null]], "Datasets descriptions": [[190, "datasets-descriptions"]], "Decoding and MVPA: predicting from brain images": [[172, "decoding-and-mvpa-predicting-from-brain-images"]], "Decoding and predicting from brain images": [[28, "decoding-and-predicting-from-brain-images"], [118, "decoding-and-predicting-from-brain-images"]], "Decoding made easy": [[168, "decoding-made-easy"]], "Decoding of a dataset after GLM fit for signal extraction": [[33, "decoding-of-a-dataset-after-glm-fit-for-signal-extraction"]], "Decoding on simulated data": [[171, null]], "Decoding on the different masks": [[32, "decoding-on-the-different-masks"]], "Decoding performance increase on Haxby dataset": [[170, "decoding-performance-increase-on-haxby-dataset"]], "Decoding with ANOVA + SVM: face vs house in the Haxby dataset": [[29, "decoding-with-anova-svm-face-vs-house-in-the-haxby-dataset"]], "Decoding with FREM: face vs house vs chair object recognition": [[31, "decoding-with-frem-face-vs-house-vs-chair-object-recognition"]], "Decoding with Support Vector Machine": [[3, "decoding-with-support-vector-machine"]], "Decoding with a scikit-learn Pipeline": [[116, "decoding-with-a-scikit-learn-pipeline"]], "Decoding without a mask: Anova-SVM": [[168, "decoding-without-a-mask-anova-svm"]], "Decoding without a mask: Anova-SVM in scikit-lean": [[97, "decoding-without-a-mask-anova-svm-in-scikit-lean"]], "Decoding without a mask: Anova-SVM using scikit-learn": [[171, "decoding-without-a-mask-anova-svm-using-scikit-learn"]], "Decreasing memory used when loading Nifti images": [[186, null]], "Default Mode Network extraction of ADHD dataset": [[61, "default-mode-network-extraction-of-adhd-dataset"]], "Define parameters": [[63, "define-parameters"]], "Define stimulus parameters and response models": [[66, "define-stimulus-parameters-and-response-models"]], "Define the LSA model": [[99, "define-the-lsa-model"]], "Define the LSS models": [[99, "define-the-lss-models"]], "Define the standard model": [[99, "define-the-standard-model"]], "Demo glass brain plotting": [[14, "demo-glass-brain-plotting"]], "Demo glass brain plotting with contours and with fillings": [[14, "demo-glass-brain-plotting-with-contours-and-with-fillings"]], "Demonstrating various display features": [[15, "demonstrating-various-display-features"]], "Dependencies": [[493, "dependencies"]], "Deriving a label-based mask": [[11, "deriving-a-label-based-mask"]], "Deriving a mask": [[11, "deriving-a-mask"]], "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning": [[48, "deriving-spatial-maps-from-group-fmri-data-using-ica-and-dictionary-learning"]], "Description": [[175, "description"]], "Design matrix: event-based and time series-based": [[177, "design-matrix-event-based-and-time-series-based"]], "Destrieux atlas": [[202, "destrieux-atlas"]], "Detecting voxels with significant effects": [[6, "detecting-voxels-with-significant-effects"]], "Development": [[493, "development"]], "Development version": [[493, "development-version"]], "DiFuMo atlas": [[204, "difumo-atlas"]], "Different classifiers in decoding the Haxby dataset": [[30, "different-classifiers-in-decoding-the-haxby-dataset"]], "Different connectivity modes": [[85, "different-connectivity-modes"]], "Different display modes": [[492, "different-display-modes"]], "Different linear models": [[169, "different-linear-models"]], "Different masking strategies": [[188, "different-masking-strategies"]], "Different plotting functions": [[492, "different-plotting-functions"]], "Different projections for the left and right hemispheres": [[14, "different-projections-for-the-left-and-right-hemispheres"]], "Dimension reduction with feature selection": [[168, "dimension-reduction-with-feature-selection"]], "Disclaimer": [[194, "disclaimer"]], "Display connectome": [[58, "display-connectome"]], "Display contour projections in both hemispheres": [[14, "display-contour-projections-in-both-hemispheres"]], "Display outlines of the regions of interest on top of a statistical map": [[9, "display-outlines-of-the-regions-of-interest-on-top-of-a-statistical-map"], [111, "display-outlines-of-the-regions-of-interest-on-top-of-a-statistical-map"]], "Display spheres summary report": [[58, "display-spheres-summary-report"]], "Display subject t_maps": [[78, "display-subject-t-maps"]], "Display the connectome matrix": [[52, "display-the-connectome-matrix"]], "Display the sparse inverse covariance": [[52, "display-the-sparse-inverse-covariance"]], "Display time series": [[58, "display-time-series"]], "Displaying or saving to an image file": [[492, "displaying-or-saving-to-an-image-file"]], "Displaying results": [[53, "displaying-results"]], "Documentation": [[176, "documentation"]], "Documentation style": [[176, "documentation-style"]], "Dosenbach 2010 atlas": [[205, "dosenbach-2010-atlas"]], "Download a brain development fMRI dataset and turn it to a data matrix": [[49, "download-a-brain-development-fmri-dataset-and-turn-it-to-a-data-matrix"]], "Downloading statistical maps from the Neurovault repository": [[123, "downloading-statistical-maps-from-the-neurovault-repository"]], "Downloading the data": [[122, "downloading-the-data"]], "Downloading tutorial datasets from Internet": [[2, "downloading-tutorial-datasets-from-internet"]], "Drop-in Hours": [[493, "drop-in-hours"]], "Duality gap": [[175, "duality-gap"]], "Dummy estimator": [[97, "dummy-estimator"]], "ENHANCEMENTS": [[146, "enhancements"], [149, "enhancements"], [150, "enhancements"], [151, "enhancements"], [161, "id2036"], [161, "id2191"], [161, "id2348"], [161, "id2829"]], "Empirical comparisons": [[170, "empirical-comparisons"]], "Encoding models for visual stimuli from Miyawaki et al. 2008": [[40, "encoding-models-for-visual-stimuli-from-miyawaki-et-al-2008"]], "Enhancements": [[129, "enhancements"], [130, "enhancements"], [130, "id3"], [131, "enhancements"], [132, "enhancements"], [133, "enhancements"], [134, "enhancements"], [136, "enhancements"], [140, "enhancements"], [141, "enhancements"], [141, "id4"], [142, "enhancements"], [143, "enhancements"], [144, "enhancements"], [146, "id2"], [146, "id5"], [146, "id9"], [153, "enhancements"], [154, "enhancements"], [155, "enhancements"], [156, "enhancements"], [157, "enhancements"], [158, "enhancements"], [159, "enhancements"], [161, "enhancements"], [161, "id154"], [161, "id311"], [161, "id468"], [161, "id624"], [161, "id627"], [161, "id784"], [161, "id943"], [161, "id1098"], [161, "id1255"], [161, "id1412"], [161, "id1569"], [161, "id1726"], [161, "id2833"], [161, "id2837"], [161, "id2842"], [161, "id3151"], [161, "id3306"], [161, "id3465"], [161, "id3620"], [161, "id3625"], [161, "id3779"], [161, "id4399"], [161, "id4559"]], "Estimate contrasts": [[61, "estimate-contrasts"], [67, "estimate-contrasts"], [112, "estimate-contrasts"]], "Estimate correlations": [[58, "estimate-correlations"]], "Estimate second level model": [[75, "estimate-second-level-model"], [76, "estimate-second-level-model"], [78, "estimate-second-level-model"]], "Estimate second level models": [[79, "estimate-second-level-models"]], "Estimated Attributes": [[176, "estimated-attributes"]], "Estimating receptive fields": [[40, "estimating-receptive-fields"]], "Event-based": [[177, "event-based"]], "Example": [[187, null]], "Example code": [[165, null], [173, null]], "Example of MRI response functions": [[66, "example-of-mri-response-functions"]], "Example of generic design in second-level models": [[76, "example-of-generic-design-in-second-level-models"]], "Example of pattern recognition on simulated data": [[44, "example-of-pattern-recognition-on-simulated-data"]], "Example of second level design matrix": [[77, "example-of-second-level-design-matrix"]], "Example of surface-based first-level analysis": [[67, "example-of-surface-based-first-level-analysis"], [112, "example-of-surface-based-first-level-analysis"]], "Example use of TV-L1 SpaceNet": [[39, "example-use-of-tv-l1-spacenet"]], "Examples": [[118, "examples"], [187, null], [188, null], [188, null], [188, null], [188, null], [188, null], [188, null]], "Examples for experimental modules": [[110, "examples-for-experimental-modules"], [118, "examples-for-experimental-modules"]], "Examples masker reports": [[479, "examples-masker-reports"]], "Examples of GLM reports": [[478, "examples-of-glm-reports"]], "Examples of design matrices": [[63, "examples-of-design-matrices"]], "Examples to better understand the NiftiMasker": [[188, null]], "Examples using Neurovault": [[123, "examples-using-neurovault"]], "Examples using nilearn.connectome.ConnectivityMeasure": [[234, "examples-using-nilearn-connectome-connectivitymeasure"]], "Examples using nilearn.connectome.GroupSparseCovarianceCV": [[236, "examples-using-nilearn-connectome-groupsparsecovariancecv"]], "Examples using nilearn.datasets.fetch_adhd": [[243, "examples-using-nilearn-datasets-fetch-adhd"]], "Examples using nilearn.datasets.fetch_atlas_allen_2011": [[245, "examples-using-nilearn-datasets-fetch-atlas-allen-2011"]], "Examples using nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[246, "examples-using-nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "Examples using nilearn.datasets.fetch_atlas_destrieux_2009": [[248, "examples-using-nilearn-datasets-fetch-atlas-destrieux-2009"]], "Examples using nilearn.datasets.fetch_atlas_difumo": [[249, "examples-using-nilearn-datasets-fetch-atlas-difumo"]], "Examples using nilearn.datasets.fetch_atlas_harvard_oxford": [[250, "examples-using-nilearn-datasets-fetch-atlas-harvard-oxford"]], "Examples using nilearn.datasets.fetch_atlas_juelich": [[251, "examples-using-nilearn-datasets-fetch-atlas-juelich"]], "Examples using nilearn.datasets.fetch_atlas_msdl": [[252, "examples-using-nilearn-datasets-fetch-atlas-msdl"]], "Examples using nilearn.datasets.fetch_atlas_smith_2009": [[255, "examples-using-nilearn-datasets-fetch-atlas-smith-2009"]], "Examples using nilearn.datasets.fetch_atlas_surf_destrieux": [[256, "examples-using-nilearn-datasets-fetch-atlas-surf-destrieux"]], "Examples using nilearn.datasets.fetch_atlas_yeo_2011": [[258, "examples-using-nilearn-datasets-fetch-atlas-yeo-2011"]], "Examples using nilearn.datasets.fetch_coords_dosenbach_2010": [[260, "examples-using-nilearn-datasets-fetch-coords-dosenbach-2010"]], "Examples using nilearn.datasets.fetch_coords_power_2011": [[261, "examples-using-nilearn-datasets-fetch-coords-power-2011"]], "Examples using nilearn.datasets.fetch_development_fmri": [[263, "examples-using-nilearn-datasets-fetch-development-fmri"]], "Examples using nilearn.datasets.fetch_ds000030_urls": [[264, "examples-using-nilearn-datasets-fetch-ds000030-urls"]], "Examples using nilearn.datasets.fetch_fiac_first_level": [[265, "examples-using-nilearn-datasets-fetch-fiac-first-level"]], "Examples using nilearn.datasets.fetch_haxby": [[266, "examples-using-nilearn-datasets-fetch-haxby"]], "Examples using nilearn.datasets.fetch_icbm152_2009": [[267, "examples-using-nilearn-datasets-fetch-icbm152-2009"]], "Examples using nilearn.datasets.fetch_icbm152_brain_gm_mask": [[268, "examples-using-nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "Examples using nilearn.datasets.fetch_language_localizer_demo_dataset": [[269, "examples-using-nilearn-datasets-fetch-language-localizer-demo-dataset"]], "Examples using nilearn.datasets.fetch_localizer_button_task": [[270, "examples-using-nilearn-datasets-fetch-localizer-button-task"]], "Examples using nilearn.datasets.fetch_localizer_calculation_task": [[271, "examples-using-nilearn-datasets-fetch-localizer-calculation-task"]], "Examples using nilearn.datasets.fetch_localizer_contrasts": [[272, "examples-using-nilearn-datasets-fetch-localizer-contrasts"]], "Examples using nilearn.datasets.fetch_localizer_first_level": [[273, "examples-using-nilearn-datasets-fetch-localizer-first-level"]], "Examples using nilearn.datasets.fetch_megatrawls_netmats": [[274, "examples-using-nilearn-datasets-fetch-megatrawls-netmats"]], "Examples using nilearn.datasets.fetch_mixed_gambles": [[275, "examples-using-nilearn-datasets-fetch-mixed-gambles"]], "Examples using nilearn.datasets.fetch_miyawaki2008": [[276, "examples-using-nilearn-datasets-fetch-miyawaki2008"]], "Examples using nilearn.datasets.fetch_neurovault": [[277, "examples-using-nilearn-datasets-fetch-neurovault"]], "Examples using nilearn.datasets.fetch_neurovault_auditory_computation_task": [[278, "examples-using-nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "Examples using nilearn.datasets.fetch_neurovault_ids": [[279, "examples-using-nilearn-datasets-fetch-neurovault-ids"]], "Examples using nilearn.datasets.fetch_neurovault_motor_task": [[280, "examples-using-nilearn-datasets-fetch-neurovault-motor-task"]], "Examples using nilearn.datasets.fetch_oasis_vbm": [[281, "examples-using-nilearn-datasets-fetch-oasis-vbm"]], "Examples using nilearn.datasets.fetch_openneuro_dataset": [[282, "examples-using-nilearn-datasets-fetch-openneuro-dataset"]], "Examples using nilearn.datasets.fetch_spm_auditory": [[284, "examples-using-nilearn-datasets-fetch-spm-auditory"]], "Examples using nilearn.datasets.fetch_spm_multimodal_fmri": [[285, "examples-using-nilearn-datasets-fetch-spm-multimodal-fmri"]], "Examples using nilearn.datasets.fetch_surf_fsaverage": [[286, "examples-using-nilearn-datasets-fetch-surf-fsaverage"]], "Examples using nilearn.datasets.fetch_surf_nki_enhanced": [[287, "examples-using-nilearn-datasets-fetch-surf-nki-enhanced"]], "Examples using nilearn.datasets.get_data_dirs": [[288, "examples-using-nilearn-datasets-get-data-dirs"]], "Examples using nilearn.datasets.load_mni152_brain_mask": [[289, "examples-using-nilearn-datasets-load-mni152-brain-mask"]], "Examples using nilearn.datasets.load_mni152_template": [[292, "examples-using-nilearn-datasets-load-mni152-template"]], "Examples using nilearn.datasets.load_sample_motor_activation_image": [[295, "examples-using-nilearn-datasets-load-sample-motor-activation-image"]], "Examples using nilearn.datasets.select_from_index": [[297, "examples-using-nilearn-datasets-select-from-index"]], "Examples using nilearn.decoding.Decoder": [[298, "examples-using-nilearn-decoding-decoder"]], "Examples using nilearn.decoding.DecoderRegressor": [[299, "examples-using-nilearn-decoding-decoderregressor"]], "Examples using nilearn.decoding.FREMClassifier": [[300, "examples-using-nilearn-decoding-fremclassifier"]], "Examples using nilearn.decoding.FREMRegressor": [[301, "examples-using-nilearn-decoding-fremregressor"]], "Examples using nilearn.decoding.SearchLight": [[302, "examples-using-nilearn-decoding-searchlight"]], "Examples using nilearn.decoding.SpaceNetRegressor": [[304, "examples-using-nilearn-decoding-spacenetregressor"]], "Examples using nilearn.decomposition.CanICA": [[305, "examples-using-nilearn-decomposition-canica"]], "Examples using nilearn.decomposition.DictLearning": [[306, "examples-using-nilearn-decomposition-dictlearning"]], "Examples using nilearn.experimental.plotting.plot_surf": [[307, "examples-using-nilearn-experimental-plotting-plot-surf"]], "Examples using nilearn.experimental.plotting.plot_surf_contours": [[308, "examples-using-nilearn-experimental-plotting-plot-surf-contours"]], "Examples using nilearn.experimental.plotting.plot_surf_roi": [[309, "examples-using-nilearn-experimental-plotting-plot-surf-roi"]], "Examples using nilearn.experimental.plotting.plot_surf_stat_map": [[310, "examples-using-nilearn-experimental-plotting-plot-surf-stat-map"]], "Examples using nilearn.experimental.plotting.view_surf": [[311, "examples-using-nilearn-experimental-plotting-view-surf"]], "Examples using nilearn.experimental.surface.SurfaceImage": [[316, "examples-using-nilearn-experimental-surface-surfaceimage"]], "Examples using nilearn.experimental.surface.SurfaceLabelsMasker": [[317, "examples-using-nilearn-experimental-surface-surfacelabelsmasker"]], "Examples using nilearn.experimental.surface.SurfaceMasker": [[318, "examples-using-nilearn-experimental-surface-surfacemasker"]], "Examples using nilearn.experimental.surface.fetch_destrieux": [[319, "examples-using-nilearn-experimental-surface-fetch-destrieux"]], "Examples using nilearn.experimental.surface.fetch_nki": [[320, "examples-using-nilearn-experimental-surface-fetch-nki"]], "Examples using nilearn.experimental.surface.load_fsaverage": [[321, "examples-using-nilearn-experimental-surface-load-fsaverage"]], "Examples using nilearn.experimental.surface.load_fsaverage_data": [[322, "examples-using-nilearn-experimental-surface-load-fsaverage-data"]], "Examples using nilearn.glm.Contrast": [[324, "examples-using-nilearn-glm-contrast"]], "Examples using nilearn.glm.cluster_level_inference": [[331, "examples-using-nilearn-glm-cluster-level-inference"]], "Examples using nilearn.glm.compute_contrast": [[332, "examples-using-nilearn-glm-compute-contrast"]], "Examples using nilearn.glm.compute_fixed_effects": [[333, "examples-using-nilearn-glm-compute-fixed-effects"]], "Examples using nilearn.glm.first_level.FirstLevelModel": [[336, "examples-using-nilearn-glm-first-level-firstlevelmodel"]], "Examples using nilearn.glm.first_level.compute_regressor": [[338, "examples-using-nilearn-glm-first-level-compute-regressor"]], "Examples using nilearn.glm.first_level.first_level_from_bids": [[339, "examples-using-nilearn-glm-first-level-first-level-from-bids"]], "Examples using nilearn.glm.first_level.make_first_level_design_matrix": [[343, "examples-using-nilearn-glm-first-level-make-first-level-design-matrix"]], "Examples using nilearn.glm.first_level.run_glm": [[345, "examples-using-nilearn-glm-first-level-run-glm"]], "Examples using nilearn.glm.second_level.SecondLevelModel": [[349, "examples-using-nilearn-glm-second-level-secondlevelmodel"]], "Examples using nilearn.glm.second_level.make_second_level_design_matrix": [[350, "examples-using-nilearn-glm-second-level-make-second-level-design-matrix"]], "Examples using nilearn.glm.second_level.non_parametric_inference": [[351, "examples-using-nilearn-glm-second-level-non-parametric-inference"]], "Examples using nilearn.glm.threshold_stats_img": [[352, "examples-using-nilearn-glm-threshold-stats-img"]], "Examples using nilearn.image.clean_img": [[354, "examples-using-nilearn-image-clean-img"]], "Examples using nilearn.image.concat_imgs": [[355, "examples-using-nilearn-image-concat-imgs"]], "Examples using nilearn.image.coord_transform": [[356, "examples-using-nilearn-image-coord-transform"]], "Examples using nilearn.image.get_data": [[359, "examples-using-nilearn-image-get-data"]], "Examples using nilearn.image.high_variance_confounds": [[360, "examples-using-nilearn-image-high-variance-confounds"]], "Examples using nilearn.image.index_img": [[361, "examples-using-nilearn-image-index-img"]], "Examples using nilearn.image.iter_img": [[362, "examples-using-nilearn-image-iter-img"]], "Examples using nilearn.image.load_img": [[364, "examples-using-nilearn-image-load-img"]], "Examples using nilearn.image.math_img": [[365, "examples-using-nilearn-image-math-img"]], "Examples using nilearn.image.mean_img": [[366, "examples-using-nilearn-image-mean-img"]], "Examples using nilearn.image.new_img_like": [[367, "examples-using-nilearn-image-new-img-like"]], "Examples using nilearn.image.resample_img": [[369, "examples-using-nilearn-image-resample-img"]], "Examples using nilearn.image.resample_to_img": [[370, "examples-using-nilearn-image-resample-to-img"]], "Examples using nilearn.image.smooth_img": [[371, "examples-using-nilearn-image-smooth-img"]], "Examples using nilearn.image.threshold_img": [[373, "examples-using-nilearn-image-threshold-img"]], "Examples using nilearn.interfaces.bids.save_glm_to_bids": [[376, "examples-using-nilearn-interfaces-bids-save-glm-to-bids"]], "Examples using nilearn.interfaces.fmriprep.load_confounds": [[377, "examples-using-nilearn-interfaces-fmriprep-load-confounds"]], "Examples using nilearn.interfaces.fmriprep.load_confounds_strategy": [[378, "examples-using-nilearn-interfaces-fmriprep-load-confounds-strategy"]], "Examples using nilearn.interfaces.fsl.get_design_from_fslmat": [[379, "examples-using-nilearn-interfaces-fsl-get-design-from-fslmat"]], "Examples using nilearn.maskers.BaseMasker": [[380, "examples-using-nilearn-maskers-basemasker"]], "Examples using nilearn.maskers.MultiNiftiLabelsMasker": [[381, "examples-using-nilearn-maskers-multiniftilabelsmasker"]], "Examples using nilearn.maskers.MultiNiftiMapsMasker": [[382, "examples-using-nilearn-maskers-multiniftimapsmasker"]], "Examples using nilearn.maskers.MultiNiftiMasker": [[383, "examples-using-nilearn-maskers-multiniftimasker"]], "Examples using nilearn.maskers.NiftiLabelsMasker": [[384, "examples-using-nilearn-maskers-niftilabelsmasker"]], "Examples using nilearn.maskers.NiftiMapsMasker": [[385, "examples-using-nilearn-maskers-niftimapsmasker"]], "Examples using nilearn.maskers.NiftiMasker": [[386, "examples-using-nilearn-maskers-niftimasker"]], "Examples using nilearn.maskers.NiftiSpheresMasker": [[387, "examples-using-nilearn-maskers-niftispheresmasker"]], "Examples using nilearn.masking.apply_mask": [[388, "examples-using-nilearn-masking-apply-mask"]], "Examples using nilearn.masking.compute_epi_mask": [[391, "examples-using-nilearn-masking-compute-epi-mask"]], "Examples using nilearn.masking.unmask": [[396, "examples-using-nilearn-masking-unmask"]], "Examples using nilearn.mass_univariate.permuted_ols": [[397, "examples-using-nilearn-mass-univariate-permuted-ols"]], "Examples using nilearn.plotting.displays.LProjector": [[402, "examples-using-nilearn-plotting-displays-lprojector"]], "Examples using nilearn.plotting.displays.LRProjector": [[403, "examples-using-nilearn-plotting-displays-lrprojector"]], "Examples using nilearn.plotting.displays.LYRProjector": [[404, "examples-using-nilearn-plotting-displays-lyrprojector"]], "Examples using nilearn.plotting.displays.LYRZProjector": [[405, "examples-using-nilearn-plotting-displays-lyrzprojector"]], "Examples using nilearn.plotting.displays.LZRProjector": [[406, "examples-using-nilearn-plotting-displays-lzrprojector"]], "Examples using nilearn.plotting.displays.LZRYProjector": [[407, "examples-using-nilearn-plotting-displays-lzryprojector"]], "Examples using nilearn.plotting.displays.MosaicSlicer": [[408, "examples-using-nilearn-plotting-displays-mosaicslicer"]], "Examples using nilearn.plotting.displays.OrthoProjector": [[409, "examples-using-nilearn-plotting-displays-orthoprojector"]], "Examples using nilearn.plotting.displays.OrthoSlicer": [[410, "examples-using-nilearn-plotting-displays-orthoslicer"]], "Examples using nilearn.plotting.displays.PlotlySurfaceFigure": [[411, "examples-using-nilearn-plotting-displays-plotlysurfacefigure"]], "Examples using nilearn.plotting.displays.RProjector": [[412, "examples-using-nilearn-plotting-displays-rprojector"]], "Examples using nilearn.plotting.displays.TiledSlicer": [[413, "examples-using-nilearn-plotting-displays-tiledslicer"]], "Examples using nilearn.plotting.displays.XProjector": [[414, "examples-using-nilearn-plotting-displays-xprojector"]], "Examples using nilearn.plotting.displays.XSlicer": [[415, "examples-using-nilearn-plotting-displays-xslicer"]], "Examples using nilearn.plotting.displays.XZProjector": [[416, "examples-using-nilearn-plotting-displays-xzprojector"]], "Examples using nilearn.plotting.displays.XZSlicer": [[417, "examples-using-nilearn-plotting-displays-xzslicer"]], "Examples using nilearn.plotting.displays.YProjector": [[418, "examples-using-nilearn-plotting-displays-yprojector"]], "Examples using nilearn.plotting.displays.YSlicer": [[419, "examples-using-nilearn-plotting-displays-yslicer"]], "Examples using nilearn.plotting.displays.YXProjector": [[420, "examples-using-nilearn-plotting-displays-yxprojector"]], "Examples using nilearn.plotting.displays.YXSlicer": [[421, "examples-using-nilearn-plotting-displays-yxslicer"]], "Examples using nilearn.plotting.displays.YZProjector": [[422, "examples-using-nilearn-plotting-displays-yzprojector"]], "Examples using nilearn.plotting.displays.YZSlicer": [[423, "examples-using-nilearn-plotting-displays-yzslicer"]], "Examples using nilearn.plotting.displays.ZProjector": [[424, "examples-using-nilearn-plotting-displays-zprojector"]], "Examples using nilearn.plotting.displays.ZSlicer": [[425, "examples-using-nilearn-plotting-displays-zslicer"]], "Examples using nilearn.plotting.find_parcellation_cut_coords": [[429, "examples-using-nilearn-plotting-find-parcellation-cut-coords"]], "Examples using nilearn.plotting.find_probabilistic_atlas_cut_coords": [[430, "examples-using-nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "Examples using nilearn.plotting.find_xyz_cut_coords": [[431, "examples-using-nilearn-plotting-find-xyz-cut-coords"]], "Examples using nilearn.plotting.plot_anat": [[432, "examples-using-nilearn-plotting-plot-anat"]], "Examples using nilearn.plotting.plot_carpet": [[433, "examples-using-nilearn-plotting-plot-carpet"]], "Examples using nilearn.plotting.plot_connectome": [[434, "examples-using-nilearn-plotting-plot-connectome"]], "Examples using nilearn.plotting.plot_contrast_matrix": [[435, "examples-using-nilearn-plotting-plot-contrast-matrix"]], "Examples using nilearn.plotting.plot_design_matrix": [[436, "examples-using-nilearn-plotting-plot-design-matrix"]], "Examples using nilearn.plotting.plot_epi": [[437, "examples-using-nilearn-plotting-plot-epi"]], "Examples using nilearn.plotting.plot_event": [[438, "examples-using-nilearn-plotting-plot-event"]], "Examples using nilearn.plotting.plot_glass_brain": [[439, "examples-using-nilearn-plotting-plot-glass-brain"]], "Examples using nilearn.plotting.plot_img": [[440, "examples-using-nilearn-plotting-plot-img"]], "Examples using nilearn.plotting.plot_img_comparison": [[441, "examples-using-nilearn-plotting-plot-img-comparison"]], "Examples using nilearn.plotting.plot_img_on_surf": [[442, "examples-using-nilearn-plotting-plot-img-on-surf"]], "Examples using nilearn.plotting.plot_markers": [[443, "examples-using-nilearn-plotting-plot-markers"]], "Examples using nilearn.plotting.plot_matrix": [[444, "examples-using-nilearn-plotting-plot-matrix"]], "Examples using nilearn.plotting.plot_prob_atlas": [[445, "examples-using-nilearn-plotting-plot-prob-atlas"]], "Examples using nilearn.plotting.plot_roi": [[446, "examples-using-nilearn-plotting-plot-roi"]], "Examples using nilearn.plotting.plot_stat_map": [[447, "examples-using-nilearn-plotting-plot-stat-map"]], "Examples using nilearn.plotting.plot_surf_contours": [[449, "examples-using-nilearn-plotting-plot-surf-contours"]], "Examples using nilearn.plotting.plot_surf_roi": [[450, "examples-using-nilearn-plotting-plot-surf-roi"]], "Examples using nilearn.plotting.plot_surf_stat_map": [[451, "examples-using-nilearn-plotting-plot-surf-stat-map"]], "Examples using nilearn.plotting.show": [[452, "examples-using-nilearn-plotting-show"]], "Examples using nilearn.plotting.view_connectome": [[453, "examples-using-nilearn-plotting-view-connectome"]], "Examples using nilearn.plotting.view_img": [[454, "examples-using-nilearn-plotting-view-img"]], "Examples using nilearn.plotting.view_img_on_surf": [[455, "examples-using-nilearn-plotting-view-img-on-surf"]], "Examples using nilearn.plotting.view_surf": [[457, "examples-using-nilearn-plotting-view-surf"]], "Examples using nilearn.regions.Parcellations": [[459, "examples-using-nilearn-regions-parcellations"]], "Examples using nilearn.regions.RegionExtractor": [[461, "examples-using-nilearn-regions-regionextractor"]], "Examples using nilearn.regions.connected_label_regions": [[462, "examples-using-nilearn-regions-connected-label-regions"]], "Examples using nilearn.regions.connected_regions": [[463, "examples-using-nilearn-regions-connected-regions"]], "Examples using nilearn.reporting.HTMLReport": [[469, "examples-using-nilearn-reporting-htmlreport"]], "Examples using nilearn.reporting.get_clusters_table": [[470, "examples-using-nilearn-reporting-get-clusters-table"]], "Examples using nilearn.reporting.make_glm_report": [[471, "examples-using-nilearn-reporting-make-glm-report"]], "Examples using nilearn.surface.load_surf_data": [[475, "examples-using-nilearn-surface-load-surf-data"]], "Examples using nilearn.surface.load_surf_mesh": [[476, "examples-using-nilearn-surface-load-surf-mesh"]], "Examples using nilearn.surface.vol_to_surf": [[477, "examples-using-nilearn-surface-vol-to-surf"]], "Execution time": [[175, "execution-time"]], "Exercise": [[188, null]], "Exercise: computing connectivity in tangent space": [[162, null]], "Exercise: computing sparse inverse covariance": [[162, null]], "Exercise: computing the correlation matrix of rest fmri": [[162, null], [163, null]], "Exercise: correlation matrix of rest fMRI on probabilistic atlas": [[163, null]], "Extra mask parameters: opening, cutoff\u2026": [[188, "extra-mask-parameters-opening-cutoff"]], "Extract coordinates on Yeo atlas - parcellations": [[47, "extract-coordinates-on-yeo-atlas-parcellations"]], "Extract functional networks with Dictionary learning": [[50, "extract-functional-networks-with-dictionary-learning"]], "Extract regions from networks": [[50, "extract-regions-from-networks"]], "Extract signals and compute a connectivity matrix without confounds removal": [[56, "extract-signals-and-compute-a-connectivity-matrix-without-confounds-removal"]], "Extract signals on a parcellation defined by labels": [[56, "extract-signals-on-a-parcellation-defined-by-labels"]], "Extract signals on spheres and plot a connectome": [[58, "extract-signals-on-spheres-and-plot-a-connectome"]], "Extract signals on spheres from an atlas": [[58, "extract-signals-on-spheres-from-an-atlas"]], "Extract subjects variabilities around a group connectivity": [[51, "extract-subjects-variabilities-around-a-group-connectivity"]], "Extract the largest clusters": [[68, "extract-the-largest-clusters"]], "Extract the seed region\u2019s time course": [[61, "extract-the-seed-region-s-time-course"]], "Extract the time series": [[54, "extract-the-time-series"]], "Extract time series": [[52, "extract-time-series"]], "Extracting a brain mask": [[25, "extracting-a-brain-mask"], [187, "extracting-a-brain-mask"]], "Extracting functional brain networks: ICA and related": [[167, "extracting-functional-brain-networks-ica-and-related"]], "Extracting predicted time series and residuals": [[177, "extracting-predicted-time-series-and-residuals"]], "Extracting region signals": [[53, "extracting-region-signals"]], "Extracting signals from a brain parcellation": [[56, "extracting-signals-from-a-brain-parcellation"]], "Extracting signals from a probabilistic atlas": [[163, "extracting-signals-from-a-probabilistic-atlas"]], "Extracting signals from brain regions using the NiftiLabelsMasker": [[90, "extracting-signals-from-brain-regions-using-the-niftilabelsmasker"]], "Extracting signals of a probabilistic atlas of functional regions": [[54, "extracting-signals-of-a-probabilistic-atlas-of-functional-regions"]], "Extracting signals on a parcellation": [[163, "extracting-signals-on-a-parcellation"]], "Extracting the seed time series": [[23, "extracting-the-seed-time-series"], [115, "extracting-the-seed-time-series"]], "Extracting times series to build a functional connectome": [[163, "extracting-times-series-to-build-a-functional-connectome"]], "Extraction of signals from regions for multiple subjects: MultiNiftiMasker, MultiNiftiLabelsMasker, MultiNiftiMapsMasker": [[188, "extraction-of-signals-from-regions-for-multiple-subjects-multiniftimasker-multiniftilabelsmasker-multiniftimapsmasker"]], "Extraction of signals from regions: NiftiLabelsMasker, NiftiMapsMasker": [[188, "extraction-of-signals-from-regions-niftilabelsmasker-niftimapsmasker"]], "Extraction of signals from seeds: NiftiSpheresMasker": [[188, "extraction-of-signals-from-seeds-niftispheresmasker"]], "Extracts signal from sphere around DMN seeds": [[58, "extracts-signal-from-sphere-around-dmn-seeds"]], "F-scores computation": [[36, "f-scores-computation"]], "FIAC": [[478, "fiac"]], "FIXES": [[149, "fixes"], [161, "id2350"]], "FREM on Jimura et al \u201cmixed gambles\u201d dataset": [[39, "frem-on-jimura-et-al-mixed-gambles-dataset"]], "FREM pipeline": [[170, "frem-pipeline"]], "FREM: fast ensembling of regularized models for robust decoding": [[170, "frem-fast-ensembling-of-regularized-models-for-robust-decoding"]], "Feature extraction: from fMRI volumes to a data matrix": [[3, "feature-extraction-from-fmri-volumes-to-a-data-matrix"]], "Featured examples": [[182, "featured-examples"]], "Fetch brain development functional datasets": [[50, "fetch-brain-development-functional-datasets"]], "Fetch data": [[25, "fetch-data"]], "Fetch dataset": [[75, "fetch-dataset"], [78, "fetch-dataset"], [79, "fetch-dataset"]], "Fetch example BIDS dataset": [[100, "fetch-example-bids-dataset"], [108, "fetch-example-bids-dataset"], [113, "fetch-example-bids-dataset"]], "Fetch example Haxby dataset": [[33, "fetch-example-haxby-dataset"]], "Fetch images for \u201csuccessful stop minus go\u201d-like protocols.": [[107, "fetch-images-for-successful-stop-minus-go-like-protocols"]], "Fetch openneuro BIDS dataset": [[62, "fetch-openneuro-bids-dataset"]], "Fetching Probabilistic atlas - MSDL atlas": [[20, "fetching-probabilistic-atlas-msdl-atlas"]], "Fetching data from ADHD dataset": [[11, "fetching-data-from-adhd-dataset"]], "Fetching datasets": [[53, "fetching-datasets"]], "Fetching movie-watching based functional datasets": [[166, "fetching-movie-watching-based-functional-datasets"]], "Fetching open datasets from Internet": [[186, "fetching-open-datasets-from-internet"]], "Fetching the Megatrawls Network matrices": [[26, "fetching-the-megatrawls-network-matrices"]], "File name matching: \u201cglobbing\u201d and user path expansion": [[186, "file-name-matching-globbing-and-user-path-expansion"]], "File names and objects, 3D and 4D images": [[186, "file-names-and-objects-3d-and-4d-images"]], "Final script": [[168, null]], "Finding help": [[183, "finding-help"]], "First download the data": [[3, "first-download-the-data"], [97, "first-download-the-data"]], "First level analysis of a complete BIDS dataset from openneuro": [[62, "first-level-analysis-of-a-complete-bids-dataset-from-openneuro"]], "First level model estimation": [[100, "first-level-model-estimation"]], "First level model estimation (one subject)": [[62, "first-level-model-estimation-one-subject"]], "First level models": [[177, "first-level-models"]], "First level report": [[478, "first-level-report"]], "First steps with nilearn": [[183, "first-steps-with-nilearn"]], "First we load the Miyawaki dataset": [[41, "first-we-load-the-miyawaki-dataset"]], "First, we retrieve data from nilearn provided (general-purpose) datasets": [[15, "first-we-retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Fisher-z transformation and save nifti": [[55, "fisher-z-transformation-and-save-nifti"]], "Fit FREM": [[31, "fit-frem"], [39, "fit-frem"]], "Fit model": [[68, "fit-model"]], "Fit the Decoder and predict the responses": [[34, "fit-the-decoder-and-predict-the-responses"]], "Fit the SpaceNet and predict with it": [[43, "fit-the-spacenet-and-predict-with-it"]], "Fit the decoder and predict": [[29, "fit-the-decoder-and-predict"]], "Fitting CanICA model with nilearn": [[167, "fitting-canica-model-with-nilearn"]], "Fitting a first level model": [[177, "fitting-a-first-level-model"]], "Fitting a second level model": [[180, "fitting-a-second-level-model"]], "Fixes": [[127, "fixes"], [129, "fixes"], [130, "fixes"], [130, "id2"], [131, "fixes"], [132, "fixes"], [133, "fixes"], [136, "fixes"], [139, "fixes"], [140, "fixes"], [141, "fixes"], [141, "id3"], [142, "fixes"], [143, "fixes"], [145, "fixes"], [146, "fixes"], [147, "fixes"], [148, "fixes"], [149, "id4"], [149, "id9"], [149, "id13"], [150, "fixes"], [151, "fixes"], [152, "fixes"], [153, "fixes"], [154, "fixes"], [155, "fixes"], [156, "fixes"], [157, "fixes"], [158, "fixes"], [159, "fixes"], [161, "fixes"], [161, "id153"], [161, "id310"], [161, "id467"], [161, "id623"], [161, "id626"], [161, "id783"], [161, "id942"], [161, "id1097"], [161, "id1254"], [161, "id1411"], [161, "id1568"], [161, "id1725"], [161, "id1882"], [161, "id2037"], [161, "id2192"], [161, "id2353"], [161, "id2359"], [161, "id2363"], [161, "id2518"], [161, "id2674"], [161, "id2838"], [161, "id2998"], [161, "id3307"], [161, "id3464"], [161, "id3619"], [161, "id3624"], [161, "id3778"], [161, "id3935"], [161, "id4400"], [161, "id4868"]], "Fixtures": [[176, "fixtures"]], "From neuroimaging volumes to data matrices: the masker objects": [[188, "from-neuroimaging-volumes-to-data-matrices-the-masker-objects"]], "Full Example": [[162, null]], "Full code example": [[168, null]], "Full example": [[162, null], [162, null], [162, null], [163, null], [163, null]], "Functional connectivity": [[46, "functional-connectivity"], [118, "functional-connectivity"]], "Functional connectivity and resting state": [[164, "functional-connectivity-and-resting-state"]], "Functional connectivity predicts age group": [[98, "functional-connectivity-predicts-age-group"]], "Functions": [[233, "functions"], [233, "id1"]], "Functions for data preparation and image transformation": [[187, "functions-for-data-preparation-and-image-transformation"]], "Funding": [[0, "funding"]], "Further Reading": [[173, null]], "GLM: First level analysis": [[60, "glm-first-level-analysis"], [118, "glm-first-level-analysis"]], "GLM: Second level analysis": [[73, "glm-second-level-analysis"], [118, "glm-second-level-analysis"]], "General bibliography": [[120, "general-bibliography"]], "General functions": [[190, "general-functions"]], "General functions descriptions": [[190, "general-functions-descriptions"]], "Generate an events.tsv file for the NeuroSpin localizer task": [[71, "generate-an-events-tsv-file-for-the-neurospin-localizer-task"]], "Generate figures": [[103, "generate-figures"]], "Generating a report": [[33, "generating-a-report"], [61, "generating-a-report"], [70, "generating-a-report"], [74, "generating-a-report"]], "Get a cortical mesh": [[9, "get-a-cortical-mesh"], [111, "get-a-cortical-mesh"]], "Get a statistical map": [[9, "get-a-statistical-map"], [111, "get-a-statistical-map"]], "Get image and term data": [[103, "get-image-and-term-data"]], "Get residuals": [[68, "get-residuals"]], "Get the locations from which vol_to_surf would draw its samples": [[24, "get-the-locations-from-which-vol-to-surf-would-draw-its-samples"]], "Getting the data": [[55, "getting-the-data"]], "Github release": [[184, "github-release"]], "Glass brain plotting in nilearn": [[13, "glass-brain-plotting-in-nilearn"]], "Glass brain plotting in nilearn (all options)": [[14, "glass-brain-plotting-in-nilearn-all-options"]], "Glass brain plotting: Hemispheric sagittal cuts": [[13, "glass-brain-plotting-hemispheric-sagittal-cuts"]], "Glass brain plotting: black background": [[13, "glass-brain-plotting-black-background"]], "Glass brain plotting: whole brain sagittal cuts": [[13, "glass-brain-plotting-whole-brain-sagittal-cuts"]], "Globbing over multiple 3D volumes": [[4, "globbing-over-multiple-3d-volumes"]], "Glossary": [[181, "glossary"]], "Going further": [[122, "going-further"]], "Going further with scikit-learn": [[97, "going-further-with-scikit-learn"], [171, "going-further-with-scikit-learn"]], "Group Sparse inverse covariance for multi-subject connectome": [[53, "group-sparse-inverse-covariance-for-multi-subject-connectome"]], "Group study": [[108, "group-study"], [113, "group-study"]], "Group-sparse covariance estimation": [[175, "group-sparse-covariance-estimation"]], "Guidelines for HTML and CSS": [[176, "guidelines-for-html-and-css"]], "Guidelines for Private Functions": [[176, "guidelines-for-private-functions"]], "HIGHLIGHTS": [[129, "highlights"], [131, "highlights"], [132, "highlights"], [133, "highlights"], [149, "highlights"], [152, "highlights"], [153, "highlights"], [154, "highlights"], [155, "highlights"], [156, "highlights"], [158, "highlights"], [161, "highlights"], [161, "id308"], [161, "id465"], [161, "id781"], [161, "id938"], [161, "id1252"], [161, "id1409"], [161, "id1566"], [161, "id1723"], [161, "id1879"], [161, "id2346"]], "HRF models": [[177, "hrf-models"]], "Harvard Oxford atlas": [[212, "harvard-oxford-atlas"]], "Haxby dataset": [[213, "haxby-dataset"]], "Here we run the prediction: the decoding itself": [[41, "here-we-run-the-prediction-the-decoding-itself"]], "Highlights": [[128, "highlights"], [141, "highlights"], [142, "highlights"], [143, "highlights"], [146, "highlights"], [146, "id4"], [146, "id8"], [161, "id2832"], [161, "id2836"], [161, "id2841"], [161, "id3305"], [161, "id3462"], [161, "id3622"], [161, "id4714"]], "How do we decide what code goes in?": [[176, "how-do-we-decide-what-code-goes-in"]], "How to contribute a dataset fetcher": [[176, "how-to-contribute-a-dataset-fetcher"]], "How to contribute an atlas": [[176, "how-to-contribute-an-atlas"]], "How to contribute to nilearn": [[176, "how-to-contribute-to-nilearn"]], "How to get help?": [[176, "how-to-get-help"]], "How to help the project?": [[176, "how-to-help-the-project"]], "How to make a release?": [[184, "how-to-make-a-release"]], "How to use add_contours": [[15, "how-to-use-add-contours"]], "ICBM 152 template": [[214, "icbm-152-template"]], "Image affines": [[186, null]], "Image operations: creating a ROI mask manually": [[187, "image-operations-creating-a-roi-mask-manually"]], "Impact of plot parameters on visualization": [[9, "impact-of-plot-parameters-on-visualization"], [111, "impact-of-plot-parameters-on-visualization"]], "Implementing a KFold loop": [[3, "implementing-a-kfold-loop"]], "Import modules": [[68, "import-modules"]], "Important links": [[493, "important-links"]], "Inference with massively univariate model": [[42, "inference-with-massively-univariate-model"]], "Initial estimate value": [[175, "initial-estimate-value"]], "Initialize and run the GLM": [[70, "initialize-and-run-the-glm"]], "Input and output: neuroimaging data representation": [[186, "input-and-output-neuroimaging-data-representation"]], "Inputing data: file names or image objects": [[186, "inputing-data-file-names-or-image-objects"]], "Inspecting the model weights": [[3, "inspecting-the-model-weights"]], "Install": [[493, "install"]], "Installing": [[176, "installing"]], "Instantiate and run FirstLevelModel": [[33, "instantiate-and-run-firstlevelmodel"]], "Interactive plots": [[492, "interactive-plots"]], "Interactive plotting with Plotly": [[9, "interactive-plotting-with-plotly"], [111, "interactive-plotting-with-plotly"]], "Interactive visualization of statistical map slices": [[492, "interactive-visualization-of-statistical-map-slices"]], "Interpreting such components": [[167, "interpreting-such-components"]], "Intro to GLM Analysis: a single-run, single-subject fMRI dataset": [[6, "intro-to-glm-analysis-a-single-run-single-subject-fmri-dataset"]], "Introduction": [[183, "introduction"]], "Inverse transform: unmasking data": [[188, "inverse-transform-unmasking-data"]], "Issues": [[184, "issues"]], "Iterate over fetched atlases to extract coordinates - probabilistic": [[47, "iterate-over-fetched-atlases-to-extract-coordinates-probabilistic"]], "Iterative grid search": [[175, "iterative-grid-search"]], "Juelich atlas": [[215, "juelich-atlas"]], "Known Issues": [[147, "known-issues"], [161, "known-issues"]], "Labels": [[184, "labels"]], "Latest release": [[493, "latest-release"]], "Learning with examples": [[183, "learning-with-examples"]], "Learning with the API references": [[183, "learning-with-the-api-references"]], "Let us quantify our prediction error": [[41, "let-us-quantify-our-prediction-error"]], "License": [[193, "license"], [195, "license"], [196, "license"], [197, "license"], [198, "license"], [200, "license"], [201, "license"], [202, "license"], [203, "license"], [204, "license"], [205, "license"], [206, "license"], [207, "license"], [208, "license"], [209, "license"], [210, "license"], [211, "license"], [212, "license"], [213, "license"], [214, "license"], [215, "license"], [216, "license"], [217, "license"], [218, "license"], [219, "license"], [220, "license"], [221, "license"], [222, "license"], [223, "license"], [224, "license"], [225, "license"], [226, "license"], [227, "license"], [228, "license"], [229, "license"], [230, "license"], [231, "license"], [232, "license"]], "Linking total and direct interactions at the group level": [[162, "linking-total-and-direct-interactions-at-the-group-level"]], "Load Haxby dataset": [[18, "load-haxby-dataset"], [36, "load-haxby-dataset"], [37, "load-haxby-dataset"]], "Load Oasis dataset": [[42, "load-oasis-dataset"], [74, "load-oasis-dataset"]], "Load and prepare the data": [[32, "load-and-prepare-the-data"]], "Load atlases": [[47, "load-atlases"]], "Load brain development fMRI dataset": [[48, "load-brain-development-fmri-dataset"]], "Load brain development fMRI dataset and MSDL atlas": [[51, "load-brain-development-fmri-dataset-and-msdl-atlas"], [98, "load-brain-development-fmri-dataset-and-msdl-atlas"]], "Load confounds from file using a flexible strategy with fmriprep interface": [[56, "load-confounds-from-file-using-a-flexible-strategy-with-fmriprep-interface"]], "Load data": [[13, "load-data"]], "Load functional data": [[47, "load-functional-data"]], "Load probabilistic atlases - extracting coordinates on brain maps": [[47, "load-probabilistic-atlases-extracting-coordinates-on-brain-maps"]], "Load the Haxby data dataset": [[35, "load-the-haxby-data-dataset"]], "Load the Haxby dataset": [[31, "load-the-haxby-dataset"], [34, "load-the-haxby-dataset"]], "Load the Oasis VBM dataset": [[43, "load-the-oasis-vbm-dataset"]], "Load the behavioral data": [[29, "load-the-behavioral-data"], [33, "load-the-behavioral-data"]], "Load the behavioral labels": [[3, "load-the-behavioral-labels"]], "Load the data": [[14, "load-the-data"]], "Load the data from the Jimura mixed-gamble experiment": [[39, "load-the-data-from-the-jimura-mixed-gamble-experiment"]], "Loading and plotting of a cortical surface atlas": [[22, "loading-and-plotting-of-a-cortical-surface-atlas"], [114, "loading-and-plotting-of-a-cortical-surface-atlas"]], "Loading and preparing the data": [[168, "loading-and-preparing-the-data"]], "Loading non image data: experiment description": [[122, "loading-non-image-data-experiment-description"]], "Loading the data": [[30, "loading-the-data"], [40, "loading-the-data"], [93, "loading-the-data"]], "Loading the data into nilearn": [[168, "loading-the-data-into-nilearn"]], "Looping on all volumes in a 4D file": [[2, "looping-on-all-volumes-in-a-4d-file"]], "Looping through selected volumes in a 4D file": [[2, "looping-through-selected-volumes-in-a-4d-file"]], "MSDL atlas": [[220, "msdl-atlas"]], "Machine learning applications to Neuroimaging": [[183, "machine-learning-applications-to-neuroimaging"]], "Maintenance": [[176, "maintenance"], [184, "maintenance"]], "Making a surface plot of a 3D statistical map": [[9, "making-a-surface-plot-of-a-3d-statistical-map"], [111, "making-a-surface-plot-of-a-3d-statistical-map"]], "Making interactive visualizations with function view_img": [[16, "making-interactive-visualizations-with-function-view-img"]], "Manipulating brain image volumes": [[82, "manipulating-brain-image-volumes"], [118, "manipulating-brain-image-volumes"]], "Manipulating images: resampling, smoothing, masking, ROIs\u2026": [[187, "manipulating-images-resampling-smoothing-masking-rois"]], "Manipulation brain volumes with nilearn": [[185, "manipulation-brain-volumes-with-nilearn"]], "Manually leaving out data": [[3, "manually-leaving-out-data"]], "Mapping the encoding scores on the brain": [[40, "mapping-the-encoding-scores-on-the-brain"]], "Masking": [[65, "masking"], [173, "masking"]], "Masking data: from 4D Nifti images to 2D data arrays": [[187, "masking-data-from-4d-nifti-images-to-2d-data-arrays"]], "Masking the data": [[97, "masking-the-data"]], "Masking the data: from 4D image to 2D array": [[122, "masking-the-data-from-4d-image-to-2d-array"]], "Massively univariate analysis of a calculation task from the Localizer dataset": [[106, "massively-univariate-analysis-of-a-calculation-task-from-the-localizer-dataset"]], "Massively univariate analysis of a motor task from the Localizer dataset": [[105, "massively-univariate-analysis-of-a-motor-task-from-the-localizer-dataset"]], "Massively univariate analysis of face vs house recognition": [[102, "massively-univariate-analysis-of-face-vs-house-recognition"]], "Matplotlib colormaps in Nilearn": [[12, "matplotlib-colormaps-in-nilearn"]], "Maximum number of iterations": [[175, "maximum-number-of-iterations"]], "Measuring prediction performance": [[168, "measuring-prediction-performance"]], "Measuring prediction scores using cross-validation": [[3, "measuring-prediction-scores-using-cross-validation"]], "Measuring the chance level": [[97, "measuring-the-chance-level"], [171, "measuring-the-chance-level"]], "MegaTrawls Network Matrices HCP": [[194, "megatrawls-network-matrices-hcp"]], "Mixed gambles statistical maps": [[218, "mixed-gambles-statistical-maps"]], "Miyawaki 2008 dataset": [[219, "miyawaki-2008-dataset"]], "Modifying dimensions in the formula": [[101, "modifying-dimensions-in-the-formula"]], "Modifying the stopping criterion": [[175, "modifying-the-stopping-criterion"]], "More plotting tools from nilearn": [[15, "more-plotting-tools-from-nilearn"]], "Motion-based scrubbing": [[56, "motion-based-scrubbing"]], "Multi-subject ICA: CanICA": [[167, "multi-subject-ica-canica"]], "MultiNiftiLabelsMasker Usage": [[188, "multiniftilabelsmasker-usage"]], "MultiNiftiMapsMasker Usage": [[188, "multiniftimapsmasker-usage"]], "MultiNiftiMasker Usage": [[188, "multiniftimasker-usage"]], "Multiple Comparisons": [[178, "multiple-comparisons"]], "Multiple comparisons correction": [[180, "multiple-comparisons-correction"]], "Multivariate decompositions: Independent component analysis of fMRI": [[104, "multivariate-decompositions-independent-component-analysis-of-fmri"]], "NEW": [[129, "new"], [130, "new"], [131, "new"], [132, "new"], [146, "new"], [147, "new"], [148, "new"], [149, "new"], [149, "id2"], [149, "id5"], [149, "id11"], [152, "new"], [153, "new"], [154, "new"], [155, "new"], [156, "new"], [158, "new"], [159, "new"], [161, "new"], [161, "id309"], [161, "id466"], [161, "id622"], [161, "id782"], [161, "id940"], [161, "id1253"], [161, "id1410"], [161, "id1567"], [161, "id1724"], [161, "id1880"], [161, "id2347"], [161, "id2351"], [161, "id2355"], [161, "id2361"], [161, "id2517"], [161, "id2672"], [161, "id2828"]], "NKI enhanced surface dataset": [[222, "nki-enhanced-surface-dataset"]], "Negating an image with math_img": [[89, "negating-an-image-with-math-img"]], "Nested cross-validation": [[34, "nested-cross-validation"]], "NeuroImaging volumes visualization": [[25, "neuroimaging-volumes-visualization"]], "NeuroVault cross-study ICA maps": [[103, "neurovault-cross-study-ica-maps"]], "NeuroVault meta-analysis of stop-go paradigm studies": [[107, "neurovault-meta-analysis-of-stop-go-paradigm-studies"]], "Neurosynth annotations": [[123, "neurosynth-annotations"]], "Neurovault statistical maps": [[221, "neurovault-statistical-maps"]], "New": [[136, "new"], [138, "new"], [139, "new"], [139, "id3"], [161, "id3934"], [161, "id3937"], [161, "id4091"], [161, "id4398"]], "New features": [[134, "new-features"], [137, "new-features"], [161, "new-features"], [161, "id4558"]], "Nifti and Analyze data": [[186, "nifti-and-analyze-data"]], "Nifti labels masker": [[479, "nifti-labels-masker"]], "Nifti maps masker": [[479, "nifti-maps-masker"]], "Nifti masker": [[479, "nifti-masker"]], "Nifti sphere masker": [[479, "nifti-sphere-masker"]], "NiftiLabelsMasker Usage": [[188, "niftilabelsmasker-usage"]], "NiftiMapsMasker Usage": [[188, "niftimapsmasker-usage"]], "NiftiMasker: applying a mask to load time-series": [[188, "niftimasker-applying-a-mask-to-load-time-series"]], "Niimg-like objects": [[186, "niimg-like-objects"]], "Nilearn": [[182, "nilearn"]], "Nilearn data for examples": [[167, null]], "Notes": [[193, "notes"], [194, "notes"], [195, "notes"], [196, "notes"], [197, "notes"], [199, "notes"], [200, "notes"], [201, "notes"], [202, "notes"], [203, "notes"], [204, "notes"], [205, "notes"], [206, "notes"], [207, "notes"], [208, "notes"], [209, "notes"], [210, "notes"], [211, "notes"], [212, "notes"], [213, "notes"], [214, "notes"], [215, "notes"], [216, "notes"], [217, "notes"], [218, "notes"], [219, "notes"], [220, "notes"], [221, "notes"], [222, "notes"], [223, "notes"], [224, "notes"], [225, "notes"], [226, "notes"], [227, "notes"], [228, "notes"], [229, "notes"], [230, "notes"], [231, "notes"], [232, "notes"]], "Now we compute cross-validation scores": [[35, "now-we-compute-cross-validation-scores"]], "Now, another way of limiting the number of slices along rows and columns": [[15, "now-another-way-of-limiting-the-number-of-slices-along-rows-and-columns"]], "Now, changing the number of slices along columns": [[15, "now-changing-the-number-of-slices-along-columns"]], "Now, views are changed to \u2018coronal\u2019 and \u2018axial\u2019 views with coordinates": [[15, "now-views-are-changed-to-coronal-and-axial-views-with-coordinates"]], "Numerical stability": [[175, "numerical-stability"]], "OASIS volume based morphometry maps": [[223, "oasis-volume-based-morphometry-maps"]], "Objective": [[167, "objective"]], "Obtain FirstLevelModel objects automatically and fit arguments": [[62, "obtain-firstlevelmodel-objects-automatically-and-fit-arguments"]], "Obtain automatically FirstLevelModel objects and fit arguments": [[100, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"], [108, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"], [113, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"]], "Obtain prediction scores via cross validation": [[29, "obtain-prediction-scores-via-cross-validation"]], "Only generating the HTML report": [[62, "only-generating-the-html-report"]], "Other contributors": [[0, "other-contributors"]], "Other probabilistic atlases accessible with nilearn": [[21, "other-probabilistic-atlases-accessible-with-nilearn"]], "Output": [[123, "output"]], "PR Structure": [[176, "pr-structure"]], "Page summary": [[162, null], [163, null], [166, null], [167, null], [177, null], [180, null]], "Parameter min_size": [[85, "parameter-min-size"]], "Parameter selection": [[162, null]], "Parametric modulation": [[63, "parametric-modulation"], [71, "parametric-modulation"]], "Pauli 2007 atlas": [[224, "pauli-2007-atlas"]], "Perform first level analysis": [[61, "perform-first-level-analysis"], [67, "perform-first-level-analysis"], [112, "perform-first-level-analysis"]], "Perform the second level analysis": [[80, "perform-the-second-level-analysis"]], "Performing a simple decoding analysis": [[168, "performing-a-simple-decoding-analysis"]], "Performing an F-test": [[6, "performing-an-f-test"]], "Performing decoding with scikit-learn": [[97, "performing-decoding-with-scikit-learn"], [171, "performing-decoding-with-scikit-learn"]], "Performing the GLM analysis": [[6, "performing-the-glm-analysis"]], "Performing the seed-to-voxel correlation analysis": [[55, "performing-the-seed-to-voxel-correlation-analysis"]], "Permutation test": [[97, "permutation-test"]], "Plot 3D image for comparison": [[9, "plot-3d-image-for-comparison"], [111, "plot-3d-image-for-comparison"]], "Plot Haxby masks": [[18, "plot-haxby-masks"]], "Plot R-squared": [[68, "plot-r-squared"]], "Plot a confusion matrix": [[35, "plot-a-confusion-matrix"]], "Plot a directed connectome - asymmetric connectivity measure": [[47, "plot-a-directed-connectome-asymmetric-connectivity-measure"]], "Plot barplots of the prediction scores": [[35, "plot-barplots-of-the-prediction-scores"]], "Plot color maps": [[12, "plot-color-maps"]], "Plot confusion matrix": [[31, "plot-confusion-matrix"]], "Plot distribution of residuals": [[68, "plot-distribution-of-residuals"]], "Plot matplotlib color maps": [[12, "plot-matplotlib-color-maps"]], "Plot matrix, graph, and strength": [[58, "plot-matrix-graph-and-strength"]], "Plot multiple views of the 3D volume on a surface": [[9, "plot-multiple-views-of-the-3d-volume-on-a-surface"], [111, "plot-multiple-views-of-the-3d-volume-on-a-surface"]], "Plot predicted and actual time series for 6 most significant clusters": [[68, "plot-predicted-and-actual-time-series-for-6-most-significant-clusters"]], "Plot regions extracted for only one specific network": [[50, "plot-regions-extracted-for-only-one-specific-network"]], "Plot resulting connectomes": [[50, "plot-resulting-connectomes"]], "Plot the combined z maps": [[107, "plot-the-combined-z-maps"]], "Plot the masks": [[18, "plot-the-masks"]], "Plot the mesh and the sample locations": [[24, "plot-the-mesh-and-the-sample-locations"]], "Plot the prediction scores using matplotlib": [[34, "plot-the-prediction-scores-using-matplotlib"]], "Plot the result": [[9, "plot-the-result"], [111, "plot-the-result"]], "Plot the results": [[79, "plot-the-results"]], "Plot thresholded z scores map": [[6, "plot-thresholded-z-scores-map"]], "Plot with higher-resolution mesh": [[9, "plot-with-higher-resolution-mesh"], [111, "plot-with-higher-resolution-mesh"]], "Plotting EPI image with function plot_epi": [[16, "plotting-epi-image-with-function-plot-epi"]], "Plotting ROIs (here the mask) with function plot_roi": [[16, "plotting-rois-here-the-mask-with-function-plot-roi"]], "Plotting anatomical images with function plot_anat": [[16, "plotting-anatomical-images-with-function-plot-anat"]], "Plotting brain images": [[492, "plotting-brain-images"]], "Plotting seeds using add_markers": [[15, "plotting-seeds-using-add-markers"]], "Plotting statistical maps in a glass brain with function plot_glass_brain": [[16, "plotting-statistical-maps-in-a-glass-brain-with-function-plot-glass-brain"]], "Plotting statistical maps with function plot_stat_map": [[16, "plotting-statistical-maps-with-function-plot-stat-map"]], "Plotting the SVM weights": [[3, "plotting-the-svm-weights"]], "Plotting the seed-to-voxel correlation map": [[55, "plotting-the-seed-to-voxel-correlation-map"]], "Plotting tools in nilearn": [[16, "plotting-tools-in-nilearn"]], "Plotting with decrease of contrast in background image with dim=.5": [[17, "plotting-with-decrease-of-contrast-in-background-image-with-dim-5"]], "Plotting with enhancement of background image with dim=-.5": [[17, "plotting-with-enhancement-of-background-image-with-dim-5"]], "Plotting with more decrease in contrast with dim=1": [[17, "plotting-with-more-decrease-in-contrast-with-dim-1"]], "Plotting with no change of contrast in background image with dim=0": [[17, "plotting-with-no-change-of-contrast-in-background-image-with-dim-0"]], "Post-release": [[184, "post-release"]], "Power 2011 atlas": [[225, "power-2011-atlas"]], "Pre-commit": [[176, "pre-commit"]], "Predicted time series and residuals": [[68, "predicted-time-series-and-residuals"]], "Prediction accuracy at chance using simple strategies": [[168, "prediction-accuracy-at-chance-using-simple-strategies"]], "Predictions: regression, classification and multi-class": [[169, "predictions-regression-classification-and-multi-class"]], "Predictive modeling analysis: VBM bio-markers of aging?": [[42, "predictive-modeling-analysis-vbm-bio-markers-of-aging"]], "Prepare code for the release": [[184, "prepare-code-for-the-release"]], "Prepare data and analysis parameters": [[61, "prepare-data-and-analysis-parameters"], [67, "prepare-data-and-analysis-parameters"], [99, "prepare-data-and-analysis-parameters"], [112, "prepare-data-and-analysis-parameters"]], "Prepare masks": [[36, "prepare-masks"]], "Prepare some images for a simple t test": [[80, "prepare-some-images-for-a-simple-t-test"]], "Prepare the fMRI data": [[35, "prepare-the-fmri-data"]], "Prepare the release": [[184, "prepare-the-release"]], "Preparing the data": [[173, "preparing-the-data"]], "Preprocess data": [[42, "preprocess-data"]], "Preprocessed datasets": [[190, "preprocessed-datasets"]], "Preprocessing": [[198, "preprocessing"]], "Principle of cross-validation": [[175, "principle-of-cross-validation"]], "Principle of the Searchlight": [[173, "principle-of-the-searchlight"]], "Probabilistic atlases": [[163, "probabilistic-atlases"]], "Producing single subject maps of seed-to-voxel correlation": [[55, "producing-single-subject-maps-of-seed-to-voxel-correlation"]], "Project Organization": [[184, "project-organization"]], "Project the fMRI image to the surface": [[67, "project-the-fmri-image-to-the-surface"], [112, "project-the-fmri-image-to-the-surface"]], "Pull Requests": [[184, "pull-requests"]], "Putting it all together": [[168, null]], "Python globbing": [[186, null]], "Quick sanity check on fit arguments": [[100, "quick-sanity-check-on-fit-arguments"]], "Quickstart": [[493, "quickstart"]], "ROI-based decoding analysis in Haxby et al. dataset": [[32, "roi-based-decoding-analysis-in-haxby-et-al-dataset"]], "ROI-to-ROI correlations of children": [[51, "roi-to-roi-correlations-of-children"]], "Reading CSV with pandas": [[186, null]], "Recommendation": [[176, null], [176, null]], "Reconstruction of visual stimuli from Miyawaki et al. 2008": [[41, "reconstruction-of-visual-stimuli-from-miyawaki-et-al-2008"]], "Reference": [[162, null], [162, null], [162, null], [162, null], [165, null]], "References": [[3, "references"], [22, "references"], [23, "references"], [31, "references"], [32, "references"], [37, "references"], [38, "references"], [40, "references"], [41, "references"], [44, "references"], [48, "references"], [49, "references"], [51, "references"], [56, "references"], [58, "references"], [69, "references"], [70, "references"], [71, "references"], [75, "references"], [97, "references"], [98, "references"], [99, "references"], [102, "references"], [114, "references"], [115, "references"], [123, "references"], [162, null], [162, "references"], [163, null], [163, null], [163, "references"], [165, "references"], [166, null], [166, "references"], [167, null], [167, null], [167, "references"], [168, "references"], [169, "references"], [170, "references"], [173, "references"], [174, "references"], [175, "references"], [181, "references"], [183, "references"], [193, "references"], [194, "references"], [195, "references"], [196, "references"], [197, "references"], [198, "references"], [200, "references"], [201, "references"], [202, "references"], [203, "references"], [204, "references"], [205, "references"], [206, "references"], [207, "references"], [208, "references"], [209, "references"], [210, "references"], [211, "references"], [212, "references"], [213, "references"], [214, "references"], [215, "references"], [216, "references"], [217, "references"], [218, "references"], [219, "references"], [220, "references"], [221, "references"], [222, "references"], [223, "references"], [224, "references"], [225, "references"], [226, "references"], [227, "references"], [228, "references"], [229, "references"], [230, "references"], [231, "references"], [232, "references"]], "Region Extraction for better brain parcellations": [[166, "region-extraction-for-better-brain-parcellations"]], "Region Extraction using a t-statistical map (3D)": [[87, "region-extraction-using-a-t-statistical-map-3d"]], "Region Extraction with Dictionary learning maps": [[166, "region-extraction-with-dictionary-learning-maps"]], "Region signals extraction": [[51, "region-signals-extraction"]], "Regions Extraction of Default Mode Networks using Smith Atlas": [[86, "regions-extraction-of-default-mode-networks-using-smith-atlas"]], "Regions definition": [[188, "regions-definition"]], "Regions extraction using dictionary learning and functional connectomes": [[50, "regions-extraction-using-dictionary-learning-and-functional-connectomes"]], "Regression": [[169, "regression"]], "Relabeling the atlas into separated regions": [[85, "relabeling-the-atlas-into-separated-regions"]], "Related example": [[174, "related-example"]], "Removing confounds": [[65, "removing-confounds"]], "Report bugs or discuss enhancement ideas": [[176, "report-bugs-or-discuss-enhancement-ideas"]], "Resample an image to a template": [[92, "resample-an-image-to-a-template"]], "Resampling images": [[187, "resampling-images"]], "Resampling one image to match another one": [[187, "resampling-one-image-to-match-another-one"]], "Resampling to a specific target affine, shape, or resolution": [[187, "resampling-to-a-specific-target-affine-shape-or-resolution"]], "Resampling: resizing and changing resolutions of images": [[188, "resampling-resizing-and-changing-resolutions-of-images"]], "Reshape and mask images": [[103, "reshape-and-mask-images"]], "Restrict the analysis to cats and faces": [[3, "restrict-the-analysis-to-cats-and-faces"]], "Restrict to faces and houses": [[36, "restrict-to-faces-and-houses"], [37, "restrict-to-faces-and-houses"]], "Retrieve and load the fMRI data from the Haxby study": [[3, "retrieve-and-load-the-fmri-data-from-the-haxby-study"], [97, "retrieve-and-load-the-fmri-data-from-the-haxby-study"]], "Retrieve data from nilearn provided (general-purpose) datasets": [[16, "retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Retrieve the atlas and the data": [[52, "retrieve-the-atlas-and-the-data"], [54, "retrieve-the-atlas-and-the-data"], [56, "retrieve-the-atlas-and-the-data"]], "Retrieve the brain development fMRI dataset": [[58, "retrieve-the-brain-development-fmri-dataset"]], "Retrieve the data: the localizer dataset with contrast maps": [[17, "retrieve-the-data-the-localizer-dataset-with-contrast-maps"]], "Retrieve the files of the Haxby dataset": [[29, "retrieve-the-files-of-the-haxby-dataset"]], "Retrieving multiscale group brain parcellations": [[19, "retrieving-multiscale-group-brain-parcellations"]], "Retrieving the atlas data": [[10, "retrieving-the-atlas-data"]], "Retrieving the data": [[6, "retrieving-the-data"], [23, "retrieving-the-data"], [65, "retrieving-the-data"], [115, "retrieving-the-data"]], "Review Pull Requests": [[176, "review-pull-requests"]], "Run ICA and map components to terms": [[103, "run-ica-and-map-components-to-terms"]], "Run different estimators": [[44, "run-different-estimators"]], "Run the GLM on data from each run": [[33, "run-the-glm-on-data-from-each-run"]], "Run the estimators": [[44, "run-the-estimators"]], "Running a basic model": [[65, "running-a-basic-model"]], "Running scikit-learn functions for more control on the analysis": [[171, "running-scikit-learn-functions-for-more-control-on-the-analysis"]], "SPM auditory dataset": [[229, "spm-auditory-dataset"]], "SPM multimodal dataset": [[230, "spm-multimodal-dataset"]], "Sample and plot response functions": [[66, "sample-and-plot-response-functions"]], "Sample the 3D data around each node of the mesh": [[9, "sample-the-3d-data-around-each-node-of-the-mesh"], [111, "sample-the-3d-data-around-each-node-of-the-mesh"]], "Saving model outputs to disk": [[62, "saving-model-outputs-to-disk"], [74, "saving-model-outputs-to-disk"]], "Saving plots to file": [[15, "saving-plots-to-file"]], "Saving results to a file": [[4, "saving-results-to-a-file"]], "Schaefer 2018 atlas": [[226, "schaefer-2018-atlas"]], "Scope of the project": [[176, "scope-of-the-project"]], "Score function": [[173, "score-function"]], "Searchlight": [[173, "id6"]], "Searchlight : finding voxels containing information": [[173, "searchlight-finding-voxels-containing-information"]], "Searchlight analysis of face vs house recognition": [[36, "searchlight-analysis-of-face-vs-house-recognition"]], "Searchlight computation": [[36, "searchlight-computation"], [37, "searchlight-computation"]], "Second level model estimation": [[100, "second-level-model-estimation"]], "Second level models": [[180, "second-level-models"]], "Second level report": [[478, "second-level-report"]], "Second-level fMRI model: one sample test": [[78, "second-level-fmri-model-one-sample-test"]], "Second-level fMRI model: true positive proportion in clusters": [[75, "second-level-fmri-model-true-positive-proportion-in-clusters"]], "Second-level fMRI model: two-sample test, unpaired and paired": [[79, "second-level-fmri-model-two-sample-test-unpaired-and-paired"]], "See Also": [[49, "see-also"]], "See also": [[3, "see-also"], [58, "see-also"]], "Seed-based connectivity on the surface": [[23, "seed-based-connectivity-on-the-surface"], [115, "seed-based-connectivity-on-the-surface"]], "Seeding": [[176, "seeding"]], "Seitzman 2018 atlas": [[227, "seitzman-2018-atlas"]], "Selection filters": [[123, "selection-filters"]], "Set up the GLM": [[70, "set-up-the-glm"]], "Setting a parameter by cross-validation": [[34, "setting-a-parameter-by-cross-validation"]], "Setting estimator parameters": [[169, "setting-estimator-parameters"], [171, "setting-estimator-parameters"]], "Setting up the searchlight": [[173, "setting-up-the-searchlight"]], "Setting up your environment": [[176, "setting-up-your-environment"]], "Show stimuli of Haxby et al. dataset": [[38, "show-stimuli-of-haxby-et-al-dataset"]], "Show the design matrices for the first few trials": [[99, "show-the-design-matrices-for-the-first-few-trials"]], "Showing how to use add_edges": [[15, "showing-how-to-use-add-edges"]], "Simple example of NiftiMasker use": [[91, "simple-example-of-niftimasker-use"]], "Simple example of two-runs fMRI model fitting": [[70, "simple-example-of-two-runs-fmri-model-fitting"]], "Simple image manipulation: smoothing": [[4, "simple-image-manipulation-smoothing"]], "Simple statistical report of thresholded contrast": [[62, "simple-statistical-report-of-thresholded-contrast"]], "Single-subject data (two runs) in native space": [[69, "single-subject-data-two-runs-in-native-space"]], "Smith 2009 atlas": [[228, "smith-2009-atlas"]], "Smoothing": [[65, "smoothing"], [188, "smoothing"]], "Smoothing an image": [[94, "smoothing-an-image"]], "SpaceNet: decoding with spatial structure for better maps": [[174, "spacenet-decoding-with-spatial-structure-for-better-maps"]], "Sparse inverse covariance for functional connectomes": [[162, "sparse-inverse-covariance-for-functional-connectomes"]], "Sparse inverse covariance on multiple subjects": [[162, "sparse-inverse-covariance-on-multiple-subjects"]], "Spatial regularization of decoding maps on mixed gambles study": [[170, "spatial-regularization-of-decoding-maps-on-mixed-gambles-study"]], "Special case: resampling to a given voxel size": [[187, null]], "Specific images or collections": [[123, "specific-images-or-collections"]], "Specifying the experimental paradigm": [[6, "specifying-the-experimental-paradigm"]], "Sphere radius": [[173, "sphere-radius"]], "Statistical maps/derivatives": [[190, "statistical-maps-derivatives"]], "Statistical maps/derivatives descriptions": [[190, "statistical-maps-derivatives-descriptions"]], "Statistical testing of a second-level analysis": [[80, "statistical-testing-of-a-second-level-analysis"]], "Stopping criteria": [[175, "stopping-criteria"]], "Stopping criterion": [[175, "stopping-criterion"]], "Studying partial correlations": [[51, "studying-partial-correlations"]], "Surface BOLD response": [[37, "surface-bold-response"]], "Surface plotting": [[492, "surface-plotting"]], "Surface-based analysis": [[177, "surface-based-analysis"]], "Surface-based dataset first and second level analysis of a dataset": [[108, "surface-based-dataset-first-and-second-level-analysis-of-a-dataset"], [113, "surface-based-dataset-first-and-second-level-analysis-of-a-dataset"]], "Synthetic dataset": [[175, "synthetic-dataset"]], "Table of contents": [[495, "table-of-contents"]], "Talairach atlas": [[231, "talairach-atlas"]], "Team": [[0, "team"]], "Technical point: Illustration of the volume to surface sampling schemes": [[24, "technical-point-illustration-of-the-volume-to-surface-sampling-schemes"]], "Templates": [[190, "templates"]], "Templates descriptions": [[190, "templates-descriptions"]], "Temporal Filtering and confound removal": [[188, "temporal-filtering-and-confound-removal"]], "Tests": [[176, "tests"]], "Text files: phenotype or behavior": [[186, "text-files-phenotype-or-behavior"]], "The Haxby 2001 experiment": [[168, "the-haxby-2001-experiment"]], "The SpaceNet decoder": [[174, "the-spacenet-decoder"]], "The concept of \u201cmasker\u201d objects": [[188, "the-concept-of-masker-objects"]], "The data": [[6, "the-data"]], "The haxby dataset: different multi-class strategies": [[35, "the-haxby-dataset-different-multi-class-strategies"]], "The impact of global signal removal": [[56, "the-impact-of-global-signal-removal"]], "The noise model: ar(1), ols, or higher order ar?": [[65, "the-noise-model-ar-1-ols-or-higher-order-ar"]], "The original Yeo atlas": [[85, "the-original-yeo-atlas"]], "Then we prepare and mask the data": [[41, "then-we-prepare-and-mask-the-data"]], "Thresholding statistical maps": [[180, "thresholding-statistical-maps"]], "Time series extraction": [[55, "time-series-extraction"]], "Time series-based": [[177, "time-series-based"]], "Time-series from a brain parcellation or \u201cMaxProb\u201d atlas": [[163, "time-series-from-a-brain-parcellation-or-maxprob-atlas"]], "Time-series from a probabilistic atlas": [[163, "time-series-from-a-probabilistic-atlas"]], "Training the decoder": [[30, "training-the-decoder"]], "Tuning cross-validation parameters": [[97, "tuning-cross-validation-parameters"]], "Turning the weights into a nifti image": [[3, "turning-the-weights-into-a-nifti-image"]], "Understanding NiftiMasker and mask computation": [[88, "understanding-niftimasker-and-mask-computation"]], "Understanding neuroimaging data": [[186, "understanding-neuroimaging-data"]], "Understanding parameters of the first-level model": [[65, "understanding-parameters-of-the-first-level-model"]], "Unmasking (inverse_transform)": [[122, "unmasking-inverse-transform"]], "Use an atlas and choose regions to outline": [[9, "use-an-atlas-and-choose-regions-to-outline"], [111, "use-an-atlas-and-choose-regions-to-outline"]], "User guide": [[495, "user-guide"]], "Using and visualizing the resulting parcellation": [[165, "using-and-visualizing-the-resulting-parcellation"]], "Using any other model in the pipeline": [[171, "using-any-other-model-in-the-pipeline"]], "Using nilearn for the first time": [[183, "using-nilearn-for-the-first-time"]], "Using predefined strategies": [[56, "using-predefined-strategies"]], "Using scikit-learn estimators": [[171, "using-scikit-learn-estimators"]], "Using the Decoder": [[116, "using-the-decoder"]], "Using tox": [[184, "using-tox"]], "VBM analysis of aging": [[74, "vbm-analysis-of-aging"]], "Validating results": [[166, "validating-results"]], "Variation of norm of estimate": [[175, "variation-of-norm-of-estimate"]], "Visualization": [[22, "visualization"], [25, "visualization"], [26, "visualization"], [30, "visualization"], [36, "visualization"], [37, "visualization"], [42, "visualization"], [114, "visualization"], [173, "visualization"]], "Visualization of Dictionary learning maps": [[166, "visualization-of-dictionary-learning-maps"]], "Visualization of FREM weights": [[31, "visualization-of-frem-weights"]], "Visualization of Region Extraction results": [[166, "visualization-of-region-extraction-results"]], "Visualization of affine resamplings": [[83, "visualization-of-affine-resamplings"]], "Visualization of brain images": [[8, "visualization-of-brain-images"], [118, "visualization-of-brain-images"]], "Visualization of functional connectivity matrices": [[166, "visualization-of-functional-connectivity-matrices"]], "Visualize in - two views \u2018sagittal\u2019 and \u2018axial\u2019 with given coordinates": [[15, "visualize-in-two-views-sagittal-and-axial-with-given-coordinates"]], "Visualize the ANOVA + SVC\u2019s discriminating weights": [[97, "visualize-the-anova-svc-s-discriminating-weights"]], "Visualize the data": [[107, "visualize-the-data"]], "Visualize the decoding maps and quality of predictions": [[43, "visualize-the-decoding-maps-and-quality-of-predictions"]], "Visualize the quality of predictions": [[42, "visualize-the-quality-of-predictions"]], "Visualize the results": [[29, "visualize-the-results"], [80, "visualize-the-results"]], "Visualize: Brain parcellations (Hierarchical KMeans)": [[49, "visualize-brain-parcellations-hierarchical-kmeans"]], "Visualize: Brain parcellations (KMeans)": [[49, "visualize-brain-parcellations-kmeans"]], "Visualize: Brain parcellations (ReNA)": [[49, "visualize-brain-parcellations-rena"]], "Visualize: Brain parcellations (Ward)": [[49, "visualize-brain-parcellations-ward"]], "Visualizing 4D probabilistic atlas maps": [[21, "visualizing-4d-probabilistic-atlas-maps"]], "Visualizing Megatrawls Network Matrices from Human Connectome Project": [[26, "visualizing-megatrawls-network-matrices-from-human-connectome-project"]], "Visualizing a 3D file": [[2, "visualizing-a-3d-file"]], "Visualizing a probabilistic atlas with plot_prob_atlas": [[20, "visualizing-a-probabilistic-atlas-with-plot-prob-atlas"]], "Visualizing a probabilistic atlas with plot_stat_map and add_overlay object": [[20, "visualizing-a-probabilistic-atlas-with-plot-stat-map-and-add-overlay-object"]], "Visualizing a probabilistic atlas: the default mode in the MSDL atlas": [[20, "visualizing-a-probabilistic-atlas-the-default-mode-in-the-msdl-atlas"]], "Visualizing brain parcellations": [[19, "visualizing-brain-parcellations"]], "Visualizing global patterns over time": [[11, "visualizing-global-patterns-over-time"]], "Visualizing global patterns with a carpet plot": [[11, "visualizing-global-patterns-with-a-carpet-plot"]], "Visualizing global patterns, separated by tissue type": [[11, "visualizing-global-patterns-separated-by-tissue-type"]], "Visualizing in - single view \u2018axial\u2019 with number of cuts=5": [[15, "visualizing-in-single-view-axial-with-number-of-cuts-5"]], "Visualizing in - single view \u2018sagittal\u2019 with only two slices": [[15, "visualizing-in-single-view-sagittal-with-only-two-slices"]], "Visualizing in - \u2018coronal\u2019 view with single cut": [[15, "visualizing-in-coronal-view-with-single-cut"]], "Visualizing in - \u2018sagittal\u2019, \u2018coronal\u2019 and \u2018axial\u2019 with given coordinates": [[15, "visualizing-in-sagittal-coronal-and-axial-with-given-coordinates"]], "Visualizing multiscale functional brain parcellations": [[19, "visualizing-multiscale-functional-brain-parcellations"]], "Visualizing one volume in a 4D file": [[2, "visualizing-one-volume-in-a-4d-file"]], "Visualizing results": [[122, "visualizing-results"], [167, "visualizing-results"]], "Visualizing the Harvard-Oxford atlas": [[10, "visualizing-the-harvard-oxford-atlas"]], "Visualizing the Harvard-Oxford atlas with contours": [[10, "visualizing-the-harvard-oxford-atlas-with-contours"]], "Visualizing the Juelich atlas": [[10, "visualizing-the-juelich-atlas"]], "Visualizing the Juelich atlas with contours": [[10, "visualizing-the-juelich-atlas-with-contours"]], "Visualizing the computed mask": [[188, "visualizing-the-computed-mask"]], "Visualizing the decoder\u2019s weights": [[168, "visualizing-the-decoder-s-weights"]], "Visualizing the fMRI volume": [[3, "visualizing-the-fmri-volume"]], "Visualizing the face vs house map": [[30, "visualizing-the-face-vs-house-map"]], "Visualizing the parcellation": [[165, "visualizing-the-parcellation"]], "Visualizing the results": [[168, "visualizing-the-results"]], "Visualizing three views along multiple rows and columns": [[15, "visualizing-three-views-along-multiple-rows-and-columns"]], "Visualizing three views in 2x2 fashion": [[15, "visualizing-three-views-in-2x2-fashion"]], "Visualizing without a colorbar on the right side": [[15, "visualizing-without-a-colorbar-on-the-right-side"]], "Volume censoring": [[65, "volume-censoring"]], "Voxel based morphometry": [[180, "voxel-based-morphometry"]], "Voxel-Based Morphometry on OASIS dataset": [[74, "voxel-based-morphometry-on-oasis-dataset"]], "Voxel-Based Morphometry on Oasis dataset": [[42, "voxel-based-morphometry-on-oasis-dataset"]], "Voxel-Based Morphometry on Oasis dataset with Space-Net prior": [[43, "voxel-based-morphometry-on-oasis-dataset-with-space-net-prior"]], "Warm restart": [[175, "warm-restart"]], "We define our prediction function": [[41, "we-define-our-prediction-function"]], "We make a simple bar plot to summarize the results": [[32, "we-make-a-simple-bar-plot-to-summarize-the-results"]], "What is fMRI ?": [[178, "what-is-fmri"]], "What is nilearn?": [[183, "what-is-nilearn"]], "What is the chance level accuracy?": [[3, "what-is-the-chance-level-accuracy"]], "What kind of connectivity is most powerful for classification?": [[51, "what-kind-of-connectivity-is-most-powerful-for-classification"], [98, "what-kind-of-connectivity-is-most-powerful-for-classification"]], "What\u2019s new": [[161, "what-s-new"]], "Which clustering to use": [[165, null]], "Who makes decisions": [[176, "who-makes-decisions"]], "Yeo 2011 atlas": [[232, "yeo-2011-atlas"]], "`dtype` argument": [[188, null]], "development fMRI dataset": [[203, "development-fmri-dataset"]], "fMRI data modelling": [[178, "fmri-data-modelling"]], "fMRI statistical analysis": [[178, "fmri-statistical-analysis"]], "fMRI: using beta maps of a first-level analysis": [[168, null]], "fiac first level dataset": [[206, "fiac-first-level-dataset"]], "fsaverage template": [[207, "fsaverage-template"]], "fsaverage3 template": [[208, "fsaverage3-template"]], "fsaverage4 template": [[209, "fsaverage4-template"]], "fsaverage5 template": [[210, "fsaverage5-template"]], "fsaverage6 template": [[211, "fsaverage6-template"]], "language localizer demo dataset": [[216, "language-localizer-demo-dataset"]], "localizer first level dataset": [[217, "localizer-first-level-dataset"]], "nilearn": [[493, "nilearn"]], "nilearn.connectome.ConnectivityMeasure": [[234, "nilearn-connectome-connectivitymeasure"]], "nilearn.connectome.GroupSparseCovariance": [[235, "nilearn-connectome-groupsparsecovariance"]], "nilearn.connectome.GroupSparseCovarianceCV": [[236, "nilearn-connectome-groupsparsecovariancecv"]], "nilearn.connectome.cov_to_corr": [[237, "nilearn-connectome-cov-to-corr"]], "nilearn.connectome.group_sparse_covariance": [[238, "nilearn-connectome-group-sparse-covariance"]], "nilearn.connectome.prec_to_partial": [[239, "nilearn-connectome-prec-to-partial"]], "nilearn.connectome.sym_matrix_to_vec": [[240, "nilearn-connectome-sym-matrix-to-vec"]], "nilearn.connectome.vec_to_sym_matrix": [[241, "nilearn-connectome-vec-to-sym-matrix"]], "nilearn.connectome: Functional Connectivity": [[189, "module-nilearn.connectome"]], "nilearn.datasets.fetch_abide_pcp": [[242, "nilearn-datasets-fetch-abide-pcp"]], "nilearn.datasets.fetch_adhd": [[243, "nilearn-datasets-fetch-adhd"]], "nilearn.datasets.fetch_atlas_aal": [[244, "nilearn-datasets-fetch-atlas-aal"]], "nilearn.datasets.fetch_atlas_allen_2011": [[245, "nilearn-datasets-fetch-atlas-allen-2011"]], "nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[246, "nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "nilearn.datasets.fetch_atlas_craddock_2012": [[247, "nilearn-datasets-fetch-atlas-craddock-2012"]], "nilearn.datasets.fetch_atlas_destrieux_2009": [[248, "nilearn-datasets-fetch-atlas-destrieux-2009"]], "nilearn.datasets.fetch_atlas_difumo": [[249, "nilearn-datasets-fetch-atlas-difumo"]], "nilearn.datasets.fetch_atlas_harvard_oxford": [[250, "nilearn-datasets-fetch-atlas-harvard-oxford"]], "nilearn.datasets.fetch_atlas_juelich": [[251, "nilearn-datasets-fetch-atlas-juelich"]], "nilearn.datasets.fetch_atlas_msdl": [[252, "nilearn-datasets-fetch-atlas-msdl"]], "nilearn.datasets.fetch_atlas_pauli_2017": [[253, "nilearn-datasets-fetch-atlas-pauli-2017"]], "nilearn.datasets.fetch_atlas_schaefer_2018": [[254, "nilearn-datasets-fetch-atlas-schaefer-2018"]], "nilearn.datasets.fetch_atlas_smith_2009": [[255, "nilearn-datasets-fetch-atlas-smith-2009"]], "nilearn.datasets.fetch_atlas_surf_destrieux": [[256, "nilearn-datasets-fetch-atlas-surf-destrieux"]], "nilearn.datasets.fetch_atlas_talairach": [[257, "nilearn-datasets-fetch-atlas-talairach"]], "nilearn.datasets.fetch_atlas_yeo_2011": [[258, "nilearn-datasets-fetch-atlas-yeo-2011"]], "nilearn.datasets.fetch_bids_langloc_dataset": [[259, "nilearn-datasets-fetch-bids-langloc-dataset"]], "nilearn.datasets.fetch_coords_dosenbach_2010": [[260, "nilearn-datasets-fetch-coords-dosenbach-2010"]], "nilearn.datasets.fetch_coords_power_2011": [[261, "nilearn-datasets-fetch-coords-power-2011"]], "nilearn.datasets.fetch_coords_seitzman_2018": [[262, "nilearn-datasets-fetch-coords-seitzman-2018"]], "nilearn.datasets.fetch_development_fmri": [[263, "nilearn-datasets-fetch-development-fmri"]], "nilearn.datasets.fetch_ds000030_urls": [[264, "nilearn-datasets-fetch-ds000030-urls"]], "nilearn.datasets.fetch_fiac_first_level": [[265, "nilearn-datasets-fetch-fiac-first-level"]], "nilearn.datasets.fetch_haxby": [[266, "nilearn-datasets-fetch-haxby"]], "nilearn.datasets.fetch_icbm152_2009": [[267, "nilearn-datasets-fetch-icbm152-2009"]], "nilearn.datasets.fetch_icbm152_brain_gm_mask": [[268, "nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "nilearn.datasets.fetch_language_localizer_demo_dataset": [[269, "nilearn-datasets-fetch-language-localizer-demo-dataset"]], "nilearn.datasets.fetch_localizer_button_task": [[270, "nilearn-datasets-fetch-localizer-button-task"]], "nilearn.datasets.fetch_localizer_calculation_task": [[271, "nilearn-datasets-fetch-localizer-calculation-task"]], "nilearn.datasets.fetch_localizer_contrasts": [[272, "nilearn-datasets-fetch-localizer-contrasts"]], "nilearn.datasets.fetch_localizer_first_level": [[273, "nilearn-datasets-fetch-localizer-first-level"]], "nilearn.datasets.fetch_megatrawls_netmats": [[274, "nilearn-datasets-fetch-megatrawls-netmats"]], "nilearn.datasets.fetch_mixed_gambles": [[275, "nilearn-datasets-fetch-mixed-gambles"]], "nilearn.datasets.fetch_miyawaki2008": [[276, "nilearn-datasets-fetch-miyawaki2008"]], "nilearn.datasets.fetch_neurovault": [[277, "nilearn-datasets-fetch-neurovault"]], "nilearn.datasets.fetch_neurovault_auditory_computation_task": [[278, "nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "nilearn.datasets.fetch_neurovault_ids": [[279, "nilearn-datasets-fetch-neurovault-ids"]], "nilearn.datasets.fetch_neurovault_motor_task": [[280, "nilearn-datasets-fetch-neurovault-motor-task"]], "nilearn.datasets.fetch_oasis_vbm": [[281, "nilearn-datasets-fetch-oasis-vbm"]], "nilearn.datasets.fetch_openneuro_dataset": [[282, "nilearn-datasets-fetch-openneuro-dataset"]], "nilearn.datasets.fetch_openneuro_dataset_index": [[283, "nilearn-datasets-fetch-openneuro-dataset-index"]], "nilearn.datasets.fetch_spm_auditory": [[284, "nilearn-datasets-fetch-spm-auditory"]], "nilearn.datasets.fetch_spm_multimodal_fmri": [[285, "nilearn-datasets-fetch-spm-multimodal-fmri"]], "nilearn.datasets.fetch_surf_fsaverage": [[286, "nilearn-datasets-fetch-surf-fsaverage"]], "nilearn.datasets.fetch_surf_nki_enhanced": [[287, "nilearn-datasets-fetch-surf-nki-enhanced"]], "nilearn.datasets.get_data_dirs": [[288, "nilearn-datasets-get-data-dirs"]], "nilearn.datasets.load_mni152_brain_mask": [[289, "nilearn-datasets-load-mni152-brain-mask"]], "nilearn.datasets.load_mni152_gm_mask": [[290, "nilearn-datasets-load-mni152-gm-mask"]], "nilearn.datasets.load_mni152_gm_template": [[291, "nilearn-datasets-load-mni152-gm-template"]], "nilearn.datasets.load_mni152_template": [[292, "nilearn-datasets-load-mni152-template"]], "nilearn.datasets.load_mni152_wm_mask": [[293, "nilearn-datasets-load-mni152-wm-mask"]], "nilearn.datasets.load_mni152_wm_template": [[294, "nilearn-datasets-load-mni152-wm-template"]], "nilearn.datasets.load_sample_motor_activation_image": [[295, "nilearn-datasets-load-sample-motor-activation-image"]], "nilearn.datasets.patch_openneuro_dataset": [[296, "nilearn-datasets-patch-openneuro-dataset"]], "nilearn.datasets.select_from_index": [[297, "nilearn-datasets-select-from-index"]], "nilearn.datasets: Automatic Dataset Fetching": [[190, "module-nilearn.datasets"]], "nilearn.decoding.Decoder": [[298, "nilearn-decoding-decoder"]], "nilearn.decoding.DecoderRegressor": [[299, "nilearn-decoding-decoderregressor"]], "nilearn.decoding.FREMClassifier": [[300, "nilearn-decoding-fremclassifier"]], "nilearn.decoding.FREMRegressor": [[301, "nilearn-decoding-fremregressor"]], "nilearn.decoding.SearchLight": [[302, "nilearn-decoding-searchlight"]], "nilearn.decoding.SpaceNetClassifier": [[303, "nilearn-decoding-spacenetclassifier"]], "nilearn.decoding.SpaceNetRegressor": [[304, "nilearn-decoding-spacenetregressor"]], "nilearn.decoding: Decoding": [[191, "module-nilearn.decoding"]], "nilearn.decomposition.CanICA": [[305, "nilearn-decomposition-canica"]], "nilearn.decomposition.DictLearning": [[306, "nilearn-decomposition-dictlearning"]], "nilearn.decomposition: Multivariate Decompositions": [[192, "module-nilearn.decomposition"]], "nilearn.experimental.plotting": [[233, "module-nilearn.experimental.plotting"]], "nilearn.experimental.plotting.plot_surf": [[307, "nilearn-experimental-plotting-plot-surf"]], "nilearn.experimental.plotting.plot_surf_contours": [[308, "nilearn-experimental-plotting-plot-surf-contours"]], "nilearn.experimental.plotting.plot_surf_roi": [[309, "nilearn-experimental-plotting-plot-surf-roi"]], "nilearn.experimental.plotting.plot_surf_stat_map": [[310, "nilearn-experimental-plotting-plot-surf-stat-map"]], "nilearn.experimental.plotting.view_surf": [[311, "nilearn-experimental-plotting-view-surf"]], "nilearn.experimental.surface": [[233, "module-nilearn.experimental.surface"]], "nilearn.experimental.surface.FileMesh": [[312, "nilearn-experimental-surface-filemesh"]], "nilearn.experimental.surface.InMemoryMesh": [[313, "nilearn-experimental-surface-inmemorymesh"]], "nilearn.experimental.surface.Mesh": [[314, "nilearn-experimental-surface-mesh"]], "nilearn.experimental.surface.PolyMesh": [[315, "nilearn-experimental-surface-polymesh"]], "nilearn.experimental.surface.SurfaceImage": [[316, "nilearn-experimental-surface-surfaceimage"]], "nilearn.experimental.surface.SurfaceLabelsMasker": [[317, "nilearn-experimental-surface-surfacelabelsmasker"]], "nilearn.experimental.surface.SurfaceMasker": [[318, "nilearn-experimental-surface-surfacemasker"]], "nilearn.experimental.surface.fetch_destrieux": [[319, "nilearn-experimental-surface-fetch-destrieux"]], "nilearn.experimental.surface.fetch_nki": [[320, "nilearn-experimental-surface-fetch-nki"]], "nilearn.experimental.surface.load_fsaverage": [[321, "nilearn-experimental-surface-load-fsaverage"]], "nilearn.experimental.surface.load_fsaverage_data": [[322, "nilearn-experimental-surface-load-fsaverage-data"]], "nilearn.experimental: Experimental Modules": [[233, "module-nilearn.experimental"]], "nilearn.glm.ARModel": [[323, "nilearn-glm-armodel"]], "nilearn.glm.Contrast": [[324, "nilearn-glm-contrast"]], "nilearn.glm.FContrastResults": [[325, "nilearn-glm-fcontrastresults"]], "nilearn.glm.LikelihoodModelResults": [[326, "nilearn-glm-likelihoodmodelresults"]], "nilearn.glm.OLSModel": [[327, "nilearn-glm-olsmodel"]], "nilearn.glm.RegressionResults": [[328, "nilearn-glm-regressionresults"]], "nilearn.glm.SimpleRegressionResults": [[329, "nilearn-glm-simpleregressionresults"]], "nilearn.glm.TContrastResults": [[330, "nilearn-glm-tcontrastresults"]], "nilearn.glm.cluster_level_inference": [[331, "nilearn-glm-cluster-level-inference"]], "nilearn.glm.compute_contrast": [[332, "nilearn-glm-compute-contrast"]], "nilearn.glm.compute_fixed_effects": [[333, "nilearn-glm-compute-fixed-effects"]], "nilearn.glm.expression_to_contrast_vector": [[334, "nilearn-glm-expression-to-contrast-vector"]], "nilearn.glm.fdr_threshold": [[335, "nilearn-glm-fdr-threshold"]], "nilearn.glm.first_level": [[480, "module-nilearn.glm.first_level"]], "nilearn.glm.first_level.FirstLevelModel": [[336, "nilearn-glm-first-level-firstlevelmodel"]], "nilearn.glm.first_level.check_design_matrix": [[337, "nilearn-glm-first-level-check-design-matrix"]], "nilearn.glm.first_level.compute_regressor": [[338, "nilearn-glm-first-level-compute-regressor"]], "nilearn.glm.first_level.first_level_from_bids": [[339, "nilearn-glm-first-level-first-level-from-bids"]], "nilearn.glm.first_level.glover_dispersion_derivative": [[340, "nilearn-glm-first-level-glover-dispersion-derivative"]], "nilearn.glm.first_level.glover_hrf": [[341, "nilearn-glm-first-level-glover-hrf"]], "nilearn.glm.first_level.glover_time_derivative": [[342, "nilearn-glm-first-level-glover-time-derivative"]], "nilearn.glm.first_level.make_first_level_design_matrix": [[343, "nilearn-glm-first-level-make-first-level-design-matrix"]], "nilearn.glm.first_level.mean_scaling": [[344, "nilearn-glm-first-level-mean-scaling"]], "nilearn.glm.first_level.run_glm": [[345, "nilearn-glm-first-level-run-glm"]], "nilearn.glm.first_level.spm_dispersion_derivative": [[346, "nilearn-glm-first-level-spm-dispersion-derivative"]], "nilearn.glm.first_level.spm_hrf": [[347, "nilearn-glm-first-level-spm-hrf"]], "nilearn.glm.first_level.spm_time_derivative": [[348, "nilearn-glm-first-level-spm-time-derivative"]], "nilearn.glm.second_level": [[480, "module-nilearn.glm.second_level"]], "nilearn.glm.second_level.SecondLevelModel": [[349, "nilearn-glm-second-level-secondlevelmodel"]], "nilearn.glm.second_level.make_second_level_design_matrix": [[350, "nilearn-glm-second-level-make-second-level-design-matrix"]], "nilearn.glm.second_level.non_parametric_inference": [[351, "nilearn-glm-second-level-non-parametric-inference"]], "nilearn.glm.threshold_stats_img": [[352, "nilearn-glm-threshold-stats-img"]], "nilearn.glm: Generalized Linear Models": [[480, "module-nilearn.glm"]], "nilearn.image.binarize_img": [[353, "nilearn-image-binarize-img"]], "nilearn.image.clean_img": [[354, "nilearn-image-clean-img"]], "nilearn.image.concat_imgs": [[355, "nilearn-image-concat-imgs"]], "nilearn.image.coord_transform": [[356, "nilearn-image-coord-transform"]], "nilearn.image.copy_img": [[357, "nilearn-image-copy-img"]], "nilearn.image.crop_img": [[358, "nilearn-image-crop-img"]], "nilearn.image.get_data": [[359, "nilearn-image-get-data"]], "nilearn.image.high_variance_confounds": [[360, "nilearn-image-high-variance-confounds"]], "nilearn.image.index_img": [[361, "nilearn-image-index-img"]], "nilearn.image.iter_img": [[362, "nilearn-image-iter-img"]], "nilearn.image.largest_connected_component_img": [[363, "nilearn-image-largest-connected-component-img"]], "nilearn.image.load_img": [[364, "nilearn-image-load-img"]], "nilearn.image.math_img": [[365, "nilearn-image-math-img"]], "nilearn.image.mean_img": [[366, "nilearn-image-mean-img"]], "nilearn.image.new_img_like": [[367, "nilearn-image-new-img-like"]], "nilearn.image.reorder_img": [[368, "nilearn-image-reorder-img"]], "nilearn.image.resample_img": [[369, "nilearn-image-resample-img"]], "nilearn.image.resample_to_img": [[370, "nilearn-image-resample-to-img"]], "nilearn.image.smooth_img": [[371, "nilearn-image-smooth-img"]], "nilearn.image.swap_img_hemispheres": [[372, "nilearn-image-swap-img-hemispheres"]], "nilearn.image.threshold_img": [[373, "nilearn-image-threshold-img"]], "nilearn.image: Image Processing and Resampling Utilities": [[481, "module-nilearn.image"]], "nilearn.interfaces.bids": [[483, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.bids.get_bids_files": [[374, "nilearn-interfaces-bids-get-bids-files"]], "nilearn.interfaces.bids.parse_bids_filename": [[375, "nilearn-interfaces-bids-parse-bids-filename"]], "nilearn.interfaces.bids.save_glm_to_bids": [[376, "nilearn-interfaces-bids-save-glm-to-bids"]], "nilearn.interfaces.fmriprep": [[483, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fmriprep.load_confounds": [[377, "nilearn-interfaces-fmriprep-load-confounds"]], "nilearn.interfaces.fmriprep.load_confounds_strategy": [[378, "nilearn-interfaces-fmriprep-load-confounds-strategy"]], "nilearn.interfaces.fsl": [[483, "module-nilearn.interfaces.fsl"]], "nilearn.interfaces.fsl.get_design_from_fslmat": [[379, "nilearn-interfaces-fsl-get-design-from-fslmat"]], "nilearn.interfaces: Loading components from interfaces": [[483, "module-nilearn.interfaces"]], "nilearn.maskers.BaseMasker": [[380, "nilearn-maskers-basemasker"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[381, "nilearn-maskers-multiniftilabelsmasker"]], "nilearn.maskers.MultiNiftiMapsMasker": [[382, "nilearn-maskers-multiniftimapsmasker"]], "nilearn.maskers.MultiNiftiMasker": [[383, "nilearn-maskers-multiniftimasker"]], "nilearn.maskers.NiftiLabelsMasker": [[384, "nilearn-maskers-niftilabelsmasker"]], "nilearn.maskers.NiftiMapsMasker": [[385, "nilearn-maskers-niftimapsmasker"]], "nilearn.maskers.NiftiMasker": [[386, "nilearn-maskers-niftimasker"]], "nilearn.maskers.NiftiSpheresMasker": [[387, "nilearn-maskers-niftispheresmasker"]], "nilearn.maskers: Extracting Signals from Brain Images": [[484, "module-nilearn.maskers"]], "nilearn.masking.apply_mask": [[388, "nilearn-masking-apply-mask"]], "nilearn.masking.compute_background_mask": [[389, "nilearn-masking-compute-background-mask"]], "nilearn.masking.compute_brain_mask": [[390, "nilearn-masking-compute-brain-mask"]], "nilearn.masking.compute_epi_mask": [[391, "nilearn-masking-compute-epi-mask"]], "nilearn.masking.compute_multi_background_mask": [[392, "nilearn-masking-compute-multi-background-mask"]], "nilearn.masking.compute_multi_brain_mask": [[393, "nilearn-masking-compute-multi-brain-mask"]], "nilearn.masking.compute_multi_epi_mask": [[394, "nilearn-masking-compute-multi-epi-mask"]], "nilearn.masking.intersect_masks": [[395, "nilearn-masking-intersect-masks"]], "nilearn.masking.unmask": [[396, "nilearn-masking-unmask"]], "nilearn.masking: Data Masking Utilities": [[485, "module-nilearn.masking"]], "nilearn.mass_univariate.permuted_ols": [[397, "nilearn-mass-univariate-permuted-ols"]], "nilearn.mass_univariate: Mass-Univariate Analysis": [[486, "module-nilearn.mass_univariate"]], "nilearn.plotting.displays.BaseAxes": [[398, "nilearn-plotting-displays-baseaxes"]], "nilearn.plotting.displays.BaseSlicer": [[399, "nilearn-plotting-displays-baseslicer"]], "nilearn.plotting.displays.CutAxes": [[400, "nilearn-plotting-displays-cutaxes"]], "nilearn.plotting.displays.GlassBrainAxes": [[401, "nilearn-plotting-displays-glassbrainaxes"]], "nilearn.plotting.displays.LProjector": [[402, "nilearn-plotting-displays-lprojector"]], "nilearn.plotting.displays.LRProjector": [[403, "nilearn-plotting-displays-lrprojector"]], "nilearn.plotting.displays.LYRProjector": [[404, "nilearn-plotting-displays-lyrprojector"]], "nilearn.plotting.displays.LYRZProjector": [[405, "nilearn-plotting-displays-lyrzprojector"]], "nilearn.plotting.displays.LZRProjector": [[406, "nilearn-plotting-displays-lzrprojector"]], "nilearn.plotting.displays.LZRYProjector": [[407, "nilearn-plotting-displays-lzryprojector"]], "nilearn.plotting.displays.MosaicSlicer": [[408, "nilearn-plotting-displays-mosaicslicer"]], "nilearn.plotting.displays.OrthoProjector": [[409, "nilearn-plotting-displays-orthoprojector"]], "nilearn.plotting.displays.OrthoSlicer": [[410, "nilearn-plotting-displays-orthoslicer"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[411, "nilearn-plotting-displays-plotlysurfacefigure"]], "nilearn.plotting.displays.RProjector": [[412, "nilearn-plotting-displays-rprojector"]], "nilearn.plotting.displays.TiledSlicer": [[413, "nilearn-plotting-displays-tiledslicer"]], "nilearn.plotting.displays.XProjector": [[414, "nilearn-plotting-displays-xprojector"]], "nilearn.plotting.displays.XSlicer": [[415, "nilearn-plotting-displays-xslicer"]], "nilearn.plotting.displays.XZProjector": [[416, "nilearn-plotting-displays-xzprojector"]], "nilearn.plotting.displays.XZSlicer": [[417, "nilearn-plotting-displays-xzslicer"]], "nilearn.plotting.displays.YProjector": [[418, "nilearn-plotting-displays-yprojector"]], "nilearn.plotting.displays.YSlicer": [[419, "nilearn-plotting-displays-yslicer"]], "nilearn.plotting.displays.YXProjector": [[420, "nilearn-plotting-displays-yxprojector"]], "nilearn.plotting.displays.YXSlicer": [[421, "nilearn-plotting-displays-yxslicer"]], "nilearn.plotting.displays.YZProjector": [[422, "nilearn-plotting-displays-yzprojector"]], "nilearn.plotting.displays.YZSlicer": [[423, "nilearn-plotting-displays-yzslicer"]], "nilearn.plotting.displays.ZProjector": [[424, "nilearn-plotting-displays-zprojector"]], "nilearn.plotting.displays.ZSlicer": [[425, "nilearn-plotting-displays-zslicer"]], "nilearn.plotting.displays.get_projector": [[426, "nilearn-plotting-displays-get-projector"]], "nilearn.plotting.displays.get_slicer": [[427, "nilearn-plotting-displays-get-slicer"]], "nilearn.plotting.displays: Interacting with figures": [[487, "module-nilearn.plotting.displays"]], "nilearn.plotting.find_cut_slices": [[428, "nilearn-plotting-find-cut-slices"]], "nilearn.plotting.find_parcellation_cut_coords": [[429, "nilearn-plotting-find-parcellation-cut-coords"]], "nilearn.plotting.find_probabilistic_atlas_cut_coords": [[430, "nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "nilearn.plotting.find_xyz_cut_coords": [[431, "nilearn-plotting-find-xyz-cut-coords"]], "nilearn.plotting.plot_anat": [[432, "nilearn-plotting-plot-anat"]], "nilearn.plotting.plot_carpet": [[433, "nilearn-plotting-plot-carpet"]], "nilearn.plotting.plot_connectome": [[434, "nilearn-plotting-plot-connectome"]], "nilearn.plotting.plot_contrast_matrix": [[435, "nilearn-plotting-plot-contrast-matrix"]], "nilearn.plotting.plot_design_matrix": [[436, "nilearn-plotting-plot-design-matrix"]], "nilearn.plotting.plot_epi": [[437, "nilearn-plotting-plot-epi"]], "nilearn.plotting.plot_event": [[438, "nilearn-plotting-plot-event"]], "nilearn.plotting.plot_glass_brain": [[439, "nilearn-plotting-plot-glass-brain"]], "nilearn.plotting.plot_img": [[440, "nilearn-plotting-plot-img"]], "nilearn.plotting.plot_img_comparison": [[441, "nilearn-plotting-plot-img-comparison"]], "nilearn.plotting.plot_img_on_surf": [[442, "nilearn-plotting-plot-img-on-surf"]], "nilearn.plotting.plot_markers": [[443, "nilearn-plotting-plot-markers"]], "nilearn.plotting.plot_matrix": [[444, "nilearn-plotting-plot-matrix"]], "nilearn.plotting.plot_prob_atlas": [[445, "nilearn-plotting-plot-prob-atlas"]], "nilearn.plotting.plot_roi": [[446, "nilearn-plotting-plot-roi"]], "nilearn.plotting.plot_stat_map": [[447, "nilearn-plotting-plot-stat-map"]], "nilearn.plotting.plot_surf": [[448, "nilearn-plotting-plot-surf"]], "nilearn.plotting.plot_surf_contours": [[449, "nilearn-plotting-plot-surf-contours"]], "nilearn.plotting.plot_surf_roi": [[450, "nilearn-plotting-plot-surf-roi"]], "nilearn.plotting.plot_surf_stat_map": [[451, "nilearn-plotting-plot-surf-stat-map"]], "nilearn.plotting.show": [[452, "nilearn-plotting-show"]], "nilearn.plotting.view_connectome": [[453, "nilearn-plotting-view-connectome"]], "nilearn.plotting.view_img": [[454, "nilearn-plotting-view-img"]], "nilearn.plotting.view_img_on_surf": [[455, "nilearn-plotting-view-img-on-surf"]], "nilearn.plotting.view_markers": [[456, "nilearn-plotting-view-markers"]], "nilearn.plotting.view_surf": [[457, "nilearn-plotting-view-surf"]], "nilearn.plotting: Plotting Brain Data": [[487, "module-nilearn.plotting"]], "nilearn.regions.HierarchicalKMeans": [[458, "nilearn-regions-hierarchicalkmeans"]], "nilearn.regions.Parcellations": [[459, "nilearn-regions-parcellations"]], "nilearn.regions.ReNA": [[460, "nilearn-regions-rena"]], "nilearn.regions.RegionExtractor": [[461, "nilearn-regions-regionextractor"]], "nilearn.regions.connected_label_regions": [[462, "nilearn-regions-connected-label-regions"]], "nilearn.regions.connected_regions": [[463, "nilearn-regions-connected-regions"]], "nilearn.regions.img_to_signals_labels": [[464, "nilearn-regions-img-to-signals-labels"]], "nilearn.regions.img_to_signals_maps": [[465, "nilearn-regions-img-to-signals-maps"]], "nilearn.regions.recursive_neighbor_agglomeration": [[466, "nilearn-regions-recursive-neighbor-agglomeration"]], "nilearn.regions.signals_to_img_labels": [[467, "nilearn-regions-signals-to-img-labels"]], "nilearn.regions.signals_to_img_maps": [[468, "nilearn-regions-signals-to-img-maps"]], "nilearn.regions: Operating on Regions": [[488, "module-nilearn.regions"]], "nilearn.reporting.HTMLReport": [[469, "nilearn-reporting-htmlreport"]], "nilearn.reporting.get_clusters_table": [[470, "nilearn-reporting-get-clusters-table"]], "nilearn.reporting.make_glm_report": [[471, "nilearn-reporting-make-glm-report"]], "nilearn.reporting: Reporting Functions": [[489, "module-nilearn.reporting"]], "nilearn.signal.butterworth": [[472, "nilearn-signal-butterworth"]], "nilearn.signal.clean": [[473, "nilearn-signal-clean"]], "nilearn.signal.high_variance_confounds": [[474, "nilearn-signal-high-variance-confounds"]], "nilearn.signal: Preprocessing Time Series": [[490, "module-nilearn.signal"]], "nilearn.surface.load_surf_data": [[475, "nilearn-surface-load-surf-data"]], "nilearn.surface.load_surf_mesh": [[476, "nilearn-surface-load-surf-mesh"]], "nilearn.surface.vol_to_surf": [[477, "nilearn-surface-vol-to-surf"]], "nilearn.surface: Manipulating Surface Data": [[491, "module-nilearn.surface"]], "nilearn_data: Where is the downloaded data stored?": [[186, null]], "plot_surf_stat_map: Surface plot using a surface map and a cortical mesh": [[492, "plot-surf-stat-map-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "view_img_on_surf: Surface plot using a 3D statistical map": [[492, "view-img-on-surf-surface-plot-using-a-3d-statistical-map"]], "view_surf: Surface plot using a surface map and a cortical mesh": [[492, "view-surf-surface-plot-using-a-surface-map-and-a-cortical-mesh"]]}, "docnames": ["authors", "auto_examples/00_tutorials/index", "auto_examples/00_tutorials/plot_3d_and_4d_niimg", "auto_examples/00_tutorials/plot_decoding_tutorial", "auto_examples/00_tutorials/plot_nilearn_101", "auto_examples/00_tutorials/plot_python_101", "auto_examples/00_tutorials/plot_single_subject_single_run", "auto_examples/00_tutorials/sg_execution_times", "auto_examples/01_plotting/index", "auto_examples/01_plotting/plot_3d_map_to_surface_projection", "auto_examples/01_plotting/plot_atlas", "auto_examples/01_plotting/plot_carpet", "auto_examples/01_plotting/plot_colormaps", "auto_examples/01_plotting/plot_demo_glass_brain", "auto_examples/01_plotting/plot_demo_glass_brain_extensive", "auto_examples/01_plotting/plot_demo_more_plotting", "auto_examples/01_plotting/plot_demo_plotting", "auto_examples/01_plotting/plot_dim_plotting", "auto_examples/01_plotting/plot_haxby_masks", "auto_examples/01_plotting/plot_multiscale_parcellations", "auto_examples/01_plotting/plot_overlay", "auto_examples/01_plotting/plot_prob_atlas", "auto_examples/01_plotting/plot_surf_atlas", "auto_examples/01_plotting/plot_surf_stat_map", "auto_examples/01_plotting/plot_surface_projection_strategies", "auto_examples/01_plotting/plot_visualization", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats", "auto_examples/01_plotting/sg_execution_times", "auto_examples/02_decoding/index", "auto_examples/02_decoding/plot_haxby_anova_svm", "auto_examples/02_decoding/plot_haxby_different_estimators", "auto_examples/02_decoding/plot_haxby_frem", "auto_examples/02_decoding/plot_haxby_full_analysis", "auto_examples/02_decoding/plot_haxby_glm_decoding", "auto_examples/02_decoding/plot_haxby_grid_search", "auto_examples/02_decoding/plot_haxby_multiclass", "auto_examples/02_decoding/plot_haxby_searchlight", "auto_examples/02_decoding/plot_haxby_searchlight_surface", "auto_examples/02_decoding/plot_haxby_stimuli", "auto_examples/02_decoding/plot_mixed_gambles_frem", "auto_examples/02_decoding/plot_miyawaki_encoding", "auto_examples/02_decoding/plot_miyawaki_reconstruction", "auto_examples/02_decoding/plot_oasis_vbm", "auto_examples/02_decoding/plot_oasis_vbm_space_net", "auto_examples/02_decoding/plot_simulated_data", "auto_examples/02_decoding/sg_execution_times", "auto_examples/03_connectivity/index", "auto_examples/03_connectivity/plot_atlas_comparison", "auto_examples/03_connectivity/plot_compare_decomposition", "auto_examples/03_connectivity/plot_data_driven_parcellations", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps", "auto_examples/03_connectivity/plot_group_level_connectivity", "auto_examples/03_connectivity/plot_inverse_covariance_connectome", "auto_examples/03_connectivity/plot_multi_subject_connectome", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation", "auto_examples/03_connectivity/plot_signal_extraction", "auto_examples/03_connectivity/plot_simulated_connectome", "auto_examples/03_connectivity/plot_sphere_based_connectome", "auto_examples/03_connectivity/sg_execution_times", "auto_examples/04_glm_first_level/index", "auto_examples/04_glm_first_level/plot_adhd_dmn", "auto_examples/04_glm_first_level/plot_bids_features", "auto_examples/04_glm_first_level/plot_design_matrix", "auto_examples/04_glm_first_level/plot_fir_model", "auto_examples/04_glm_first_level/plot_first_level_details", "auto_examples/04_glm_first_level/plot_hrf", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis", "auto_examples/04_glm_first_level/plot_predictions_residuals", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces", "auto_examples/04_glm_first_level/plot_two_runs_model", "auto_examples/04_glm_first_level/plot_write_events_file", "auto_examples/04_glm_first_level/sg_execution_times", "auto_examples/05_glm_second_level/index", "auto_examples/05_glm_second_level/plot_oasis", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels", "auto_examples/05_glm_second_level/plot_second_level_association_test", "auto_examples/05_glm_second_level/plot_second_level_design_matrix", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test", "auto_examples/05_glm_second_level/plot_thresholding", "auto_examples/05_glm_second_level/sg_execution_times", "auto_examples/06_manipulating_images/index", "auto_examples/06_manipulating_images/plot_affine_transformation", "auto_examples/06_manipulating_images/plot_compare_mean_image", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps", "auto_examples/06_manipulating_images/plot_mask_computation", "auto_examples/06_manipulating_images/plot_negate_image", "auto_examples/06_manipulating_images/plot_nifti_labels_simple", "auto_examples/06_manipulating_images/plot_nifti_simple", "auto_examples/06_manipulating_images/plot_resample_to_template", "auto_examples/06_manipulating_images/plot_roi_extraction", "auto_examples/06_manipulating_images/plot_smooth_mean_image", "auto_examples/06_manipulating_images/sg_execution_times", "auto_examples/07_advanced/index", "auto_examples/07_advanced/plot_advanced_decoding_scikit", "auto_examples/07_advanced/plot_age_group_prediction_cross_val", "auto_examples/07_advanced/plot_beta_series", "auto_examples/07_advanced/plot_bids_analysis", "auto_examples/07_advanced/plot_copy_headers_math_img", "auto_examples/07_advanced/plot_haxby_mass_univariate", "auto_examples/07_advanced/plot_ica_neurovault", "auto_examples/07_advanced/plot_ica_resting_state", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods", "auto_examples/07_advanced/plot_localizer_simple_analysis", "auto_examples/07_advanced/plot_neurovault_meta_analysis", "auto_examples/07_advanced/plot_surface_bids_analysis", "auto_examples/07_advanced/sg_execution_times", "auto_examples/08_experimental/index", "auto_examples/08_experimental/plot_3d_map_to_surface_projection_experimental", "auto_examples/08_experimental/plot_localizer_new_surface_analysis_experimental", "auto_examples/08_experimental/plot_new_surface_bids_analysis_experimental", "auto_examples/08_experimental/plot_surf_atlas_experimental", "auto_examples/08_experimental/plot_surf_stat_map_experimental", "auto_examples/08_experimental/plot_surface_image_and_maskers", "auto_examples/08_experimental/sg_execution_times", "auto_examples/index", "auto_examples/sg_execution_times", "bibliography", "building_blocks/index", "building_blocks/manual_pipeline", "building_blocks/neurovault", "changes/0.1.0", "changes/0.1.1", "changes/0.1.2", "changes/0.1.3", "changes/0.1.4", "changes/0.10.0", "changes/0.10.1", "changes/0.10.2", "changes/0.10.3", "changes/0.10.4", "changes/0.2.0", "changes/0.2.1", "changes/0.2.2", "changes/0.2.3", "changes/0.2.4", "changes/0.2.5", "changes/0.2.6", "changes/0.3.0", "changes/0.3.1", "changes/0.4.0", "changes/0.4.1", "changes/0.4.2", "changes/0.5.0", "changes/0.5.1", "changes/0.5.2", "changes/0.6.0", "changes/0.6.1", "changes/0.6.2", "changes/0.7.0", "changes/0.7.1", "changes/0.8.0", "changes/0.8.1", "changes/0.9.0", "changes/0.9.1", "changes/0.9.2", "changes/latest", "changes/names", "changes/whats_new", "connectivity/connectome_extraction", "connectivity/functional_connectomes", "connectivity/index", "connectivity/parcellating", "connectivity/region_extraction", "connectivity/resting_state_networks", "decoding/decoding_intro", "decoding/estimator_choice", "decoding/frem", "decoding/going_further", "decoding/index", "decoding/searchlight", "decoding/space_net", "developers/group_sparse_covariance", "development", "glm/first_level_model", "glm/glm_intro", "glm/index", "glm/second_level_model", "glossary", "index", "introduction", "maintenance", "manipulating_images/index", "manipulating_images/input_output", "manipulating_images/manipulating_images", "manipulating_images/masker_objects", "modules/connectome", "modules/datasets", "modules/decoding", "modules/decomposition", "modules/description/ABIDE_pcp", "modules/description/Megatrawls", "modules/description/aal_SPM12", "modules/description/adhd", "modules/description/allen_rsn_2011", "modules/description/basc_multiscale_2015", "modules/description/bids_langloc", "modules/description/brainomics_localizer", "modules/description/craddock_2012", "modules/description/destrieux_surface", "modules/description/development_fmri", "modules/description/difumo_atlases", "modules/description/dosenbach_2010", "modules/description/fiac", "modules/description/fsaverage", "modules/description/fsaverage3", "modules/description/fsaverage4", "modules/description/fsaverage5", "modules/description/fsaverage6", "modules/description/harvard_oxford", "modules/description/haxby2001", "modules/description/icbm152_2009", "modules/description/juelich", "modules/description/language_localizer_demo", "modules/description/localizer_first_level", "modules/description/mixed_gambles", "modules/description/miyawaki2008", "modules/description/msdl_atlas", "modules/description/neurovault", "modules/description/nki_enhanced_surface", "modules/description/oasis1", "modules/description/pauli_2017", "modules/description/power_2011", "modules/description/schaefer_2018", "modules/description/seitzman_2018", "modules/description/smith_2009", "modules/description/spm_auditory", "modules/description/spm_multimodal", "modules/description/talairach_atlas", "modules/description/yeo_2011", "modules/experimental", "modules/generated/nilearn.connectome.ConnectivityMeasure", "modules/generated/nilearn.connectome.GroupSparseCovariance", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV", "modules/generated/nilearn.connectome.cov_to_corr", "modules/generated/nilearn.connectome.group_sparse_covariance", "modules/generated/nilearn.connectome.prec_to_partial", "modules/generated/nilearn.connectome.sym_matrix_to_vec", "modules/generated/nilearn.connectome.vec_to_sym_matrix", "modules/generated/nilearn.datasets.fetch_abide_pcp", "modules/generated/nilearn.datasets.fetch_adhd", "modules/generated/nilearn.datasets.fetch_atlas_aal", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009", "modules/generated/nilearn.datasets.fetch_atlas_difumo", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford", "modules/generated/nilearn.datasets.fetch_atlas_juelich", "modules/generated/nilearn.datasets.fetch_atlas_msdl", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux", "modules/generated/nilearn.datasets.fetch_atlas_talairach", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010", "modules/generated/nilearn.datasets.fetch_coords_power_2011", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018", "modules/generated/nilearn.datasets.fetch_development_fmri", "modules/generated/nilearn.datasets.fetch_ds000030_urls", "modules/generated/nilearn.datasets.fetch_fiac_first_level", "modules/generated/nilearn.datasets.fetch_haxby", "modules/generated/nilearn.datasets.fetch_icbm152_2009", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset", "modules/generated/nilearn.datasets.fetch_localizer_button_task", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task", "modules/generated/nilearn.datasets.fetch_localizer_contrasts", "modules/generated/nilearn.datasets.fetch_localizer_first_level", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats", "modules/generated/nilearn.datasets.fetch_mixed_gambles", "modules/generated/nilearn.datasets.fetch_miyawaki2008", "modules/generated/nilearn.datasets.fetch_neurovault", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task", "modules/generated/nilearn.datasets.fetch_neurovault_ids", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task", "modules/generated/nilearn.datasets.fetch_oasis_vbm", "modules/generated/nilearn.datasets.fetch_openneuro_dataset", "modules/generated/nilearn.datasets.fetch_openneuro_dataset_index", "modules/generated/nilearn.datasets.fetch_spm_auditory", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri", "modules/generated/nilearn.datasets.fetch_surf_fsaverage", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced", "modules/generated/nilearn.datasets.get_data_dirs", "modules/generated/nilearn.datasets.load_mni152_brain_mask", "modules/generated/nilearn.datasets.load_mni152_gm_mask", "modules/generated/nilearn.datasets.load_mni152_gm_template", "modules/generated/nilearn.datasets.load_mni152_template", "modules/generated/nilearn.datasets.load_mni152_wm_mask", "modules/generated/nilearn.datasets.load_mni152_wm_template", "modules/generated/nilearn.datasets.load_sample_motor_activation_image", "modules/generated/nilearn.datasets.patch_openneuro_dataset", "modules/generated/nilearn.datasets.select_from_index", "modules/generated/nilearn.decoding.Decoder", "modules/generated/nilearn.decoding.DecoderRegressor", "modules/generated/nilearn.decoding.FREMClassifier", "modules/generated/nilearn.decoding.FREMRegressor", "modules/generated/nilearn.decoding.SearchLight", "modules/generated/nilearn.decoding.SpaceNetClassifier", "modules/generated/nilearn.decoding.SpaceNetRegressor", "modules/generated/nilearn.decomposition.CanICA", "modules/generated/nilearn.decomposition.DictLearning", "modules/generated/nilearn.experimental.plotting.plot_surf", "modules/generated/nilearn.experimental.plotting.plot_surf_contours", "modules/generated/nilearn.experimental.plotting.plot_surf_roi", "modules/generated/nilearn.experimental.plotting.plot_surf_stat_map", "modules/generated/nilearn.experimental.plotting.view_surf", "modules/generated/nilearn.experimental.surface.FileMesh", "modules/generated/nilearn.experimental.surface.InMemoryMesh", "modules/generated/nilearn.experimental.surface.Mesh", "modules/generated/nilearn.experimental.surface.PolyMesh", "modules/generated/nilearn.experimental.surface.SurfaceImage", "modules/generated/nilearn.experimental.surface.SurfaceLabelsMasker", "modules/generated/nilearn.experimental.surface.SurfaceMasker", "modules/generated/nilearn.experimental.surface.fetch_destrieux", "modules/generated/nilearn.experimental.surface.fetch_nki", "modules/generated/nilearn.experimental.surface.load_fsaverage", "modules/generated/nilearn.experimental.surface.load_fsaverage_data", "modules/generated/nilearn.glm.ARModel", "modules/generated/nilearn.glm.Contrast", "modules/generated/nilearn.glm.FContrastResults", "modules/generated/nilearn.glm.LikelihoodModelResults", "modules/generated/nilearn.glm.OLSModel", "modules/generated/nilearn.glm.RegressionResults", "modules/generated/nilearn.glm.SimpleRegressionResults", "modules/generated/nilearn.glm.TContrastResults", "modules/generated/nilearn.glm.cluster_level_inference", "modules/generated/nilearn.glm.compute_contrast", "modules/generated/nilearn.glm.compute_fixed_effects", "modules/generated/nilearn.glm.expression_to_contrast_vector", "modules/generated/nilearn.glm.fdr_threshold", "modules/generated/nilearn.glm.first_level.FirstLevelModel", "modules/generated/nilearn.glm.first_level.check_design_matrix", "modules/generated/nilearn.glm.first_level.compute_regressor", "modules/generated/nilearn.glm.first_level.first_level_from_bids", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative", "modules/generated/nilearn.glm.first_level.glover_hrf", "modules/generated/nilearn.glm.first_level.glover_time_derivative", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix", "modules/generated/nilearn.glm.first_level.mean_scaling", "modules/generated/nilearn.glm.first_level.run_glm", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative", "modules/generated/nilearn.glm.first_level.spm_hrf", "modules/generated/nilearn.glm.first_level.spm_time_derivative", "modules/generated/nilearn.glm.second_level.SecondLevelModel", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix", "modules/generated/nilearn.glm.second_level.non_parametric_inference", "modules/generated/nilearn.glm.threshold_stats_img", "modules/generated/nilearn.image.binarize_img", "modules/generated/nilearn.image.clean_img", "modules/generated/nilearn.image.concat_imgs", "modules/generated/nilearn.image.coord_transform", "modules/generated/nilearn.image.copy_img", "modules/generated/nilearn.image.crop_img", "modules/generated/nilearn.image.get_data", "modules/generated/nilearn.image.high_variance_confounds", "modules/generated/nilearn.image.index_img", "modules/generated/nilearn.image.iter_img", "modules/generated/nilearn.image.largest_connected_component_img", "modules/generated/nilearn.image.load_img", "modules/generated/nilearn.image.math_img", "modules/generated/nilearn.image.mean_img", "modules/generated/nilearn.image.new_img_like", "modules/generated/nilearn.image.reorder_img", "modules/generated/nilearn.image.resample_img", "modules/generated/nilearn.image.resample_to_img", "modules/generated/nilearn.image.smooth_img", "modules/generated/nilearn.image.swap_img_hemispheres", "modules/generated/nilearn.image.threshold_img", "modules/generated/nilearn.interfaces.bids.get_bids_files", "modules/generated/nilearn.interfaces.bids.parse_bids_filename", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids", "modules/generated/nilearn.interfaces.fmriprep.load_confounds", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat", "modules/generated/nilearn.maskers.BaseMasker", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker", "modules/generated/nilearn.maskers.MultiNiftiMasker", "modules/generated/nilearn.maskers.NiftiLabelsMasker", "modules/generated/nilearn.maskers.NiftiMapsMasker", "modules/generated/nilearn.maskers.NiftiMasker", "modules/generated/nilearn.maskers.NiftiSpheresMasker", "modules/generated/nilearn.masking.apply_mask", "modules/generated/nilearn.masking.compute_background_mask", "modules/generated/nilearn.masking.compute_brain_mask", "modules/generated/nilearn.masking.compute_epi_mask", "modules/generated/nilearn.masking.compute_multi_background_mask", "modules/generated/nilearn.masking.compute_multi_brain_mask", "modules/generated/nilearn.masking.compute_multi_epi_mask", "modules/generated/nilearn.masking.intersect_masks", "modules/generated/nilearn.masking.unmask", "modules/generated/nilearn.mass_univariate.permuted_ols", "modules/generated/nilearn.plotting.displays.BaseAxes", "modules/generated/nilearn.plotting.displays.BaseSlicer", "modules/generated/nilearn.plotting.displays.CutAxes", "modules/generated/nilearn.plotting.displays.GlassBrainAxes", "modules/generated/nilearn.plotting.displays.LProjector", "modules/generated/nilearn.plotting.displays.LRProjector", "modules/generated/nilearn.plotting.displays.LYRProjector", "modules/generated/nilearn.plotting.displays.LYRZProjector", "modules/generated/nilearn.plotting.displays.LZRProjector", "modules/generated/nilearn.plotting.displays.LZRYProjector", "modules/generated/nilearn.plotting.displays.MosaicSlicer", "modules/generated/nilearn.plotting.displays.OrthoProjector", "modules/generated/nilearn.plotting.displays.OrthoSlicer", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure", "modules/generated/nilearn.plotting.displays.RProjector", "modules/generated/nilearn.plotting.displays.TiledSlicer", "modules/generated/nilearn.plotting.displays.XProjector", "modules/generated/nilearn.plotting.displays.XSlicer", "modules/generated/nilearn.plotting.displays.XZProjector", "modules/generated/nilearn.plotting.displays.XZSlicer", "modules/generated/nilearn.plotting.displays.YProjector", "modules/generated/nilearn.plotting.displays.YSlicer", "modules/generated/nilearn.plotting.displays.YXProjector", "modules/generated/nilearn.plotting.displays.YXSlicer", "modules/generated/nilearn.plotting.displays.YZProjector", "modules/generated/nilearn.plotting.displays.YZSlicer", "modules/generated/nilearn.plotting.displays.ZProjector", "modules/generated/nilearn.plotting.displays.ZSlicer", "modules/generated/nilearn.plotting.displays.get_projector", "modules/generated/nilearn.plotting.displays.get_slicer", "modules/generated/nilearn.plotting.find_cut_slices", "modules/generated/nilearn.plotting.find_parcellation_cut_coords", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords", "modules/generated/nilearn.plotting.find_xyz_cut_coords", "modules/generated/nilearn.plotting.plot_anat", "modules/generated/nilearn.plotting.plot_carpet", "modules/generated/nilearn.plotting.plot_connectome", "modules/generated/nilearn.plotting.plot_contrast_matrix", "modules/generated/nilearn.plotting.plot_design_matrix", "modules/generated/nilearn.plotting.plot_epi", "modules/generated/nilearn.plotting.plot_event", "modules/generated/nilearn.plotting.plot_glass_brain", "modules/generated/nilearn.plotting.plot_img", "modules/generated/nilearn.plotting.plot_img_comparison", "modules/generated/nilearn.plotting.plot_img_on_surf", "modules/generated/nilearn.plotting.plot_markers", "modules/generated/nilearn.plotting.plot_matrix", "modules/generated/nilearn.plotting.plot_prob_atlas", "modules/generated/nilearn.plotting.plot_roi", "modules/generated/nilearn.plotting.plot_stat_map", "modules/generated/nilearn.plotting.plot_surf", "modules/generated/nilearn.plotting.plot_surf_contours", "modules/generated/nilearn.plotting.plot_surf_roi", "modules/generated/nilearn.plotting.plot_surf_stat_map", "modules/generated/nilearn.plotting.show", "modules/generated/nilearn.plotting.view_connectome", "modules/generated/nilearn.plotting.view_img", "modules/generated/nilearn.plotting.view_img_on_surf", "modules/generated/nilearn.plotting.view_markers", "modules/generated/nilearn.plotting.view_surf", "modules/generated/nilearn.regions.HierarchicalKMeans", "modules/generated/nilearn.regions.Parcellations", "modules/generated/nilearn.regions.ReNA", "modules/generated/nilearn.regions.RegionExtractor", "modules/generated/nilearn.regions.connected_label_regions", "modules/generated/nilearn.regions.connected_regions", "modules/generated/nilearn.regions.img_to_signals_labels", "modules/generated/nilearn.regions.img_to_signals_maps", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration", "modules/generated/nilearn.regions.signals_to_img_labels", "modules/generated/nilearn.regions.signals_to_img_maps", "modules/generated/nilearn.reporting.HTMLReport", "modules/generated/nilearn.reporting.get_clusters_table", "modules/generated/nilearn.reporting.make_glm_report", "modules/generated/nilearn.signal.butterworth", "modules/generated/nilearn.signal.clean", "modules/generated/nilearn.signal.high_variance_confounds", "modules/generated/nilearn.surface.load_surf_data", "modules/generated/nilearn.surface.load_surf_mesh", "modules/generated/nilearn.surface.vol_to_surf", "modules/generated_reports/glm_reports_examples", "modules/generated_reports/masker_reports_examples", "modules/glm", "modules/image", "modules/index", "modules/interfaces", "modules/maskers", "modules/masking", "modules/mass_univariate", "modules/plotting", "modules/regions", "modules/reporting", "modules/signal", "modules/surface", "plotting/index", "quickstart", "sg_execution_times", "user_guide"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9}, "filenames": ["authors.rst", "auto_examples/00_tutorials/index.rst", "auto_examples/00_tutorials/plot_3d_and_4d_niimg.rst", "auto_examples/00_tutorials/plot_decoding_tutorial.rst", "auto_examples/00_tutorials/plot_nilearn_101.rst", "auto_examples/00_tutorials/plot_python_101.rst", "auto_examples/00_tutorials/plot_single_subject_single_run.rst", "auto_examples/00_tutorials/sg_execution_times.rst", "auto_examples/01_plotting/index.rst", "auto_examples/01_plotting/plot_3d_map_to_surface_projection.rst", "auto_examples/01_plotting/plot_atlas.rst", "auto_examples/01_plotting/plot_carpet.rst", "auto_examples/01_plotting/plot_colormaps.rst", "auto_examples/01_plotting/plot_demo_glass_brain.rst", "auto_examples/01_plotting/plot_demo_glass_brain_extensive.rst", "auto_examples/01_plotting/plot_demo_more_plotting.rst", "auto_examples/01_plotting/plot_demo_plotting.rst", "auto_examples/01_plotting/plot_dim_plotting.rst", "auto_examples/01_plotting/plot_haxby_masks.rst", "auto_examples/01_plotting/plot_multiscale_parcellations.rst", "auto_examples/01_plotting/plot_overlay.rst", "auto_examples/01_plotting/plot_prob_atlas.rst", "auto_examples/01_plotting/plot_surf_atlas.rst", "auto_examples/01_plotting/plot_surf_stat_map.rst", "auto_examples/01_plotting/plot_surface_projection_strategies.rst", "auto_examples/01_plotting/plot_visualization.rst", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats.rst", "auto_examples/01_plotting/sg_execution_times.rst", "auto_examples/02_decoding/index.rst", "auto_examples/02_decoding/plot_haxby_anova_svm.rst", "auto_examples/02_decoding/plot_haxby_different_estimators.rst", "auto_examples/02_decoding/plot_haxby_frem.rst", "auto_examples/02_decoding/plot_haxby_full_analysis.rst", "auto_examples/02_decoding/plot_haxby_glm_decoding.rst", "auto_examples/02_decoding/plot_haxby_grid_search.rst", "auto_examples/02_decoding/plot_haxby_multiclass.rst", "auto_examples/02_decoding/plot_haxby_searchlight.rst", "auto_examples/02_decoding/plot_haxby_searchlight_surface.rst", "auto_examples/02_decoding/plot_haxby_stimuli.rst", "auto_examples/02_decoding/plot_mixed_gambles_frem.rst", "auto_examples/02_decoding/plot_miyawaki_encoding.rst", "auto_examples/02_decoding/plot_miyawaki_reconstruction.rst", "auto_examples/02_decoding/plot_oasis_vbm.rst", "auto_examples/02_decoding/plot_oasis_vbm_space_net.rst", "auto_examples/02_decoding/plot_simulated_data.rst", "auto_examples/02_decoding/sg_execution_times.rst", "auto_examples/03_connectivity/index.rst", "auto_examples/03_connectivity/plot_atlas_comparison.rst", "auto_examples/03_connectivity/plot_compare_decomposition.rst", "auto_examples/03_connectivity/plot_data_driven_parcellations.rst", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps.rst", "auto_examples/03_connectivity/plot_group_level_connectivity.rst", "auto_examples/03_connectivity/plot_inverse_covariance_connectome.rst", "auto_examples/03_connectivity/plot_multi_subject_connectome.rst", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction.rst", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation.rst", "auto_examples/03_connectivity/plot_signal_extraction.rst", "auto_examples/03_connectivity/plot_simulated_connectome.rst", "auto_examples/03_connectivity/plot_sphere_based_connectome.rst", "auto_examples/03_connectivity/sg_execution_times.rst", "auto_examples/04_glm_first_level/index.rst", "auto_examples/04_glm_first_level/plot_adhd_dmn.rst", "auto_examples/04_glm_first_level/plot_bids_features.rst", "auto_examples/04_glm_first_level/plot_design_matrix.rst", "auto_examples/04_glm_first_level/plot_fir_model.rst", "auto_examples/04_glm_first_level/plot_first_level_details.rst", "auto_examples/04_glm_first_level/plot_hrf.rst", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis.rst", "auto_examples/04_glm_first_level/plot_predictions_residuals.rst", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces.rst", "auto_examples/04_glm_first_level/plot_two_runs_model.rst", "auto_examples/04_glm_first_level/plot_write_events_file.rst", "auto_examples/04_glm_first_level/sg_execution_times.rst", "auto_examples/05_glm_second_level/index.rst", "auto_examples/05_glm_second_level/plot_oasis.rst", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels.rst", "auto_examples/05_glm_second_level/plot_second_level_association_test.rst", "auto_examples/05_glm_second_level/plot_second_level_design_matrix.rst", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test.rst", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test.rst", "auto_examples/05_glm_second_level/plot_thresholding.rst", "auto_examples/05_glm_second_level/sg_execution_times.rst", "auto_examples/06_manipulating_images/index.rst", "auto_examples/06_manipulating_images/plot_affine_transformation.rst", "auto_examples/06_manipulating_images/plot_compare_mean_image.rst", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image.rst", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas.rst", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps.rst", "auto_examples/06_manipulating_images/plot_mask_computation.rst", "auto_examples/06_manipulating_images/plot_negate_image.rst", "auto_examples/06_manipulating_images/plot_nifti_labels_simple.rst", "auto_examples/06_manipulating_images/plot_nifti_simple.rst", "auto_examples/06_manipulating_images/plot_resample_to_template.rst", "auto_examples/06_manipulating_images/plot_roi_extraction.rst", "auto_examples/06_manipulating_images/plot_smooth_mean_image.rst", "auto_examples/06_manipulating_images/sg_execution_times.rst", "auto_examples/07_advanced/index.rst", "auto_examples/07_advanced/plot_advanced_decoding_scikit.rst", "auto_examples/07_advanced/plot_age_group_prediction_cross_val.rst", "auto_examples/07_advanced/plot_beta_series.rst", "auto_examples/07_advanced/plot_bids_analysis.rst", "auto_examples/07_advanced/plot_copy_headers_math_img.rst", "auto_examples/07_advanced/plot_haxby_mass_univariate.rst", "auto_examples/07_advanced/plot_ica_neurovault.rst", "auto_examples/07_advanced/plot_ica_resting_state.rst", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods.rst", "auto_examples/07_advanced/plot_localizer_simple_analysis.rst", "auto_examples/07_advanced/plot_neurovault_meta_analysis.rst", "auto_examples/07_advanced/plot_surface_bids_analysis.rst", "auto_examples/07_advanced/sg_execution_times.rst", "auto_examples/08_experimental/index.rst", "auto_examples/08_experimental/plot_3d_map_to_surface_projection_experimental.rst", "auto_examples/08_experimental/plot_localizer_new_surface_analysis_experimental.rst", "auto_examples/08_experimental/plot_new_surface_bids_analysis_experimental.rst", "auto_examples/08_experimental/plot_surf_atlas_experimental.rst", "auto_examples/08_experimental/plot_surf_stat_map_experimental.rst", "auto_examples/08_experimental/plot_surface_image_and_maskers.rst", "auto_examples/08_experimental/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/sg_execution_times.rst", "bibliography.rst", "building_blocks/index.rst", "building_blocks/manual_pipeline.rst", "building_blocks/neurovault.rst", "changes/0.1.0.rst", "changes/0.1.1.rst", "changes/0.1.2.rst", "changes/0.1.3.rst", "changes/0.1.4.rst", "changes/0.10.0.rst", "changes/0.10.1.rst", "changes/0.10.2.rst", "changes/0.10.3.rst", "changes/0.10.4.rst", "changes/0.2.0.rst", "changes/0.2.1.rst", "changes/0.2.2.rst", "changes/0.2.3.rst", "changes/0.2.4.rst", "changes/0.2.5.rst", "changes/0.2.6.rst", "changes/0.3.0.rst", "changes/0.3.1.rst", "changes/0.4.0.rst", "changes/0.4.1.rst", "changes/0.4.2.rst", "changes/0.5.0.rst", "changes/0.5.1.rst", "changes/0.5.2.rst", "changes/0.6.0.rst", "changes/0.6.1.rst", "changes/0.6.2.rst", "changes/0.7.0.rst", "changes/0.7.1.rst", "changes/0.8.0.rst", "changes/0.8.1.rst", "changes/0.9.0.rst", "changes/0.9.1.rst", "changes/0.9.2.rst", "changes/latest.rst", "changes/names.rst", "changes/whats_new.rst", "connectivity/connectome_extraction.rst", "connectivity/functional_connectomes.rst", "connectivity/index.rst", "connectivity/parcellating.rst", "connectivity/region_extraction.rst", "connectivity/resting_state_networks.rst", "decoding/decoding_intro.rst", "decoding/estimator_choice.rst", "decoding/frem.rst", "decoding/going_further.rst", "decoding/index.rst", "decoding/searchlight.rst", "decoding/space_net.rst", "developers/group_sparse_covariance.rst", "development.rst", "glm/first_level_model.rst", "glm/glm_intro.rst", "glm/index.rst", "glm/second_level_model.rst", "glossary.rst", "index.rst", "introduction.rst", "maintenance.rst", "manipulating_images/index.rst", "manipulating_images/input_output.rst", "manipulating_images/manipulating_images.rst", "manipulating_images/masker_objects.rst", "modules/connectome.rst", "modules/datasets.rst", "modules/decoding.rst", "modules/decomposition.rst", "modules/description/ABIDE_pcp.rst", "modules/description/Megatrawls.rst", "modules/description/aal_SPM12.rst", "modules/description/adhd.rst", "modules/description/allen_rsn_2011.rst", "modules/description/basc_multiscale_2015.rst", "modules/description/bids_langloc.rst", "modules/description/brainomics_localizer.rst", "modules/description/craddock_2012.rst", "modules/description/destrieux_surface.rst", "modules/description/development_fmri.rst", "modules/description/difumo_atlases.rst", "modules/description/dosenbach_2010.rst", "modules/description/fiac.rst", "modules/description/fsaverage.rst", "modules/description/fsaverage3.rst", "modules/description/fsaverage4.rst", "modules/description/fsaverage5.rst", "modules/description/fsaverage6.rst", "modules/description/harvard_oxford.rst", "modules/description/haxby2001.rst", "modules/description/icbm152_2009.rst", "modules/description/juelich.rst", "modules/description/language_localizer_demo.rst", "modules/description/localizer_first_level.rst", "modules/description/mixed_gambles.rst", "modules/description/miyawaki2008.rst", "modules/description/msdl_atlas.rst", "modules/description/neurovault.rst", "modules/description/nki_enhanced_surface.rst", "modules/description/oasis1.rst", "modules/description/pauli_2017.rst", "modules/description/power_2011.rst", "modules/description/schaefer_2018.rst", "modules/description/seitzman_2018.rst", "modules/description/smith_2009.rst", "modules/description/spm_auditory.rst", "modules/description/spm_multimodal.rst", "modules/description/talairach_atlas.rst", "modules/description/yeo_2011.rst", "modules/experimental.rst", "modules/generated/nilearn.connectome.ConnectivityMeasure.rst", "modules/generated/nilearn.connectome.GroupSparseCovariance.rst", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV.rst", "modules/generated/nilearn.connectome.cov_to_corr.rst", "modules/generated/nilearn.connectome.group_sparse_covariance.rst", "modules/generated/nilearn.connectome.prec_to_partial.rst", "modules/generated/nilearn.connectome.sym_matrix_to_vec.rst", "modules/generated/nilearn.connectome.vec_to_sym_matrix.rst", "modules/generated/nilearn.datasets.fetch_abide_pcp.rst", "modules/generated/nilearn.datasets.fetch_adhd.rst", "modules/generated/nilearn.datasets.fetch_atlas_aal.rst", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011.rst", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015.rst", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012.rst", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_difumo.rst", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford.rst", "modules/generated/nilearn.datasets.fetch_atlas_juelich.rst", "modules/generated/nilearn.datasets.fetch_atlas_msdl.rst", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017.rst", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018.rst", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux.rst", "modules/generated/nilearn.datasets.fetch_atlas_talairach.rst", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011.rst", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset.rst", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010.rst", "modules/generated/nilearn.datasets.fetch_coords_power_2011.rst", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018.rst", "modules/generated/nilearn.datasets.fetch_development_fmri.rst", "modules/generated/nilearn.datasets.fetch_ds000030_urls.rst", "modules/generated/nilearn.datasets.fetch_fiac_first_level.rst", "modules/generated/nilearn.datasets.fetch_haxby.rst", "modules/generated/nilearn.datasets.fetch_icbm152_2009.rst", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask.rst", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset.rst", "modules/generated/nilearn.datasets.fetch_localizer_button_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_contrasts.rst", "modules/generated/nilearn.datasets.fetch_localizer_first_level.rst", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats.rst", "modules/generated/nilearn.datasets.fetch_mixed_gambles.rst", "modules/generated/nilearn.datasets.fetch_miyawaki2008.rst", "modules/generated/nilearn.datasets.fetch_neurovault.rst", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task.rst", "modules/generated/nilearn.datasets.fetch_neurovault_ids.rst", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task.rst", "modules/generated/nilearn.datasets.fetch_oasis_vbm.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset_index.rst", "modules/generated/nilearn.datasets.fetch_spm_auditory.rst", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri.rst", "modules/generated/nilearn.datasets.fetch_surf_fsaverage.rst", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced.rst", "modules/generated/nilearn.datasets.get_data_dirs.rst", "modules/generated/nilearn.datasets.load_mni152_brain_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_template.rst", "modules/generated/nilearn.datasets.load_mni152_template.rst", "modules/generated/nilearn.datasets.load_mni152_wm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_wm_template.rst", "modules/generated/nilearn.datasets.load_sample_motor_activation_image.rst", "modules/generated/nilearn.datasets.patch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.select_from_index.rst", "modules/generated/nilearn.decoding.Decoder.rst", "modules/generated/nilearn.decoding.DecoderRegressor.rst", "modules/generated/nilearn.decoding.FREMClassifier.rst", "modules/generated/nilearn.decoding.FREMRegressor.rst", "modules/generated/nilearn.decoding.SearchLight.rst", "modules/generated/nilearn.decoding.SpaceNetClassifier.rst", "modules/generated/nilearn.decoding.SpaceNetRegressor.rst", "modules/generated/nilearn.decomposition.CanICA.rst", "modules/generated/nilearn.decomposition.DictLearning.rst", "modules/generated/nilearn.experimental.plotting.plot_surf.rst", "modules/generated/nilearn.experimental.plotting.plot_surf_contours.rst", "modules/generated/nilearn.experimental.plotting.plot_surf_roi.rst", "modules/generated/nilearn.experimental.plotting.plot_surf_stat_map.rst", "modules/generated/nilearn.experimental.plotting.view_surf.rst", "modules/generated/nilearn.experimental.surface.FileMesh.rst", "modules/generated/nilearn.experimental.surface.InMemoryMesh.rst", "modules/generated/nilearn.experimental.surface.Mesh.rst", "modules/generated/nilearn.experimental.surface.PolyMesh.rst", "modules/generated/nilearn.experimental.surface.SurfaceImage.rst", "modules/generated/nilearn.experimental.surface.SurfaceLabelsMasker.rst", "modules/generated/nilearn.experimental.surface.SurfaceMasker.rst", "modules/generated/nilearn.experimental.surface.fetch_destrieux.rst", "modules/generated/nilearn.experimental.surface.fetch_nki.rst", "modules/generated/nilearn.experimental.surface.load_fsaverage.rst", "modules/generated/nilearn.experimental.surface.load_fsaverage_data.rst", "modules/generated/nilearn.glm.ARModel.rst", "modules/generated/nilearn.glm.Contrast.rst", "modules/generated/nilearn.glm.FContrastResults.rst", "modules/generated/nilearn.glm.LikelihoodModelResults.rst", "modules/generated/nilearn.glm.OLSModel.rst", "modules/generated/nilearn.glm.RegressionResults.rst", "modules/generated/nilearn.glm.SimpleRegressionResults.rst", "modules/generated/nilearn.glm.TContrastResults.rst", "modules/generated/nilearn.glm.cluster_level_inference.rst", "modules/generated/nilearn.glm.compute_contrast.rst", "modules/generated/nilearn.glm.compute_fixed_effects.rst", "modules/generated/nilearn.glm.expression_to_contrast_vector.rst", "modules/generated/nilearn.glm.fdr_threshold.rst", "modules/generated/nilearn.glm.first_level.FirstLevelModel.rst", "modules/generated/nilearn.glm.first_level.check_design_matrix.rst", "modules/generated/nilearn.glm.first_level.compute_regressor.rst", "modules/generated/nilearn.glm.first_level.first_level_from_bids.rst", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.glover_hrf.rst", "modules/generated/nilearn.glm.first_level.glover_time_derivative.rst", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix.rst", "modules/generated/nilearn.glm.first_level.mean_scaling.rst", "modules/generated/nilearn.glm.first_level.run_glm.rst", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.spm_hrf.rst", "modules/generated/nilearn.glm.first_level.spm_time_derivative.rst", "modules/generated/nilearn.glm.second_level.SecondLevelModel.rst", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix.rst", "modules/generated/nilearn.glm.second_level.non_parametric_inference.rst", "modules/generated/nilearn.glm.threshold_stats_img.rst", "modules/generated/nilearn.image.binarize_img.rst", "modules/generated/nilearn.image.clean_img.rst", "modules/generated/nilearn.image.concat_imgs.rst", "modules/generated/nilearn.image.coord_transform.rst", "modules/generated/nilearn.image.copy_img.rst", "modules/generated/nilearn.image.crop_img.rst", "modules/generated/nilearn.image.get_data.rst", "modules/generated/nilearn.image.high_variance_confounds.rst", "modules/generated/nilearn.image.index_img.rst", "modules/generated/nilearn.image.iter_img.rst", "modules/generated/nilearn.image.largest_connected_component_img.rst", "modules/generated/nilearn.image.load_img.rst", "modules/generated/nilearn.image.math_img.rst", "modules/generated/nilearn.image.mean_img.rst", "modules/generated/nilearn.image.new_img_like.rst", "modules/generated/nilearn.image.reorder_img.rst", "modules/generated/nilearn.image.resample_img.rst", "modules/generated/nilearn.image.resample_to_img.rst", "modules/generated/nilearn.image.smooth_img.rst", "modules/generated/nilearn.image.swap_img_hemispheres.rst", "modules/generated/nilearn.image.threshold_img.rst", "modules/generated/nilearn.interfaces.bids.get_bids_files.rst", "modules/generated/nilearn.interfaces.bids.parse_bids_filename.rst", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy.rst", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat.rst", "modules/generated/nilearn.maskers.BaseMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.NiftiMapsMasker.rst", "modules/generated/nilearn.maskers.NiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiSpheresMasker.rst", "modules/generated/nilearn.masking.apply_mask.rst", "modules/generated/nilearn.masking.compute_background_mask.rst", "modules/generated/nilearn.masking.compute_brain_mask.rst", "modules/generated/nilearn.masking.compute_epi_mask.rst", "modules/generated/nilearn.masking.compute_multi_background_mask.rst", "modules/generated/nilearn.masking.compute_multi_brain_mask.rst", "modules/generated/nilearn.masking.compute_multi_epi_mask.rst", "modules/generated/nilearn.masking.intersect_masks.rst", "modules/generated/nilearn.masking.unmask.rst", "modules/generated/nilearn.mass_univariate.permuted_ols.rst", "modules/generated/nilearn.plotting.displays.BaseAxes.rst", "modules/generated/nilearn.plotting.displays.BaseSlicer.rst", "modules/generated/nilearn.plotting.displays.CutAxes.rst", "modules/generated/nilearn.plotting.displays.GlassBrainAxes.rst", "modules/generated/nilearn.plotting.displays.LProjector.rst", "modules/generated/nilearn.plotting.displays.LRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRZProjector.rst", "modules/generated/nilearn.plotting.displays.LZRProjector.rst", "modules/generated/nilearn.plotting.displays.LZRYProjector.rst", "modules/generated/nilearn.plotting.displays.MosaicSlicer.rst", "modules/generated/nilearn.plotting.displays.OrthoProjector.rst", "modules/generated/nilearn.plotting.displays.OrthoSlicer.rst", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure.rst", "modules/generated/nilearn.plotting.displays.RProjector.rst", "modules/generated/nilearn.plotting.displays.TiledSlicer.rst", "modules/generated/nilearn.plotting.displays.XProjector.rst", "modules/generated/nilearn.plotting.displays.XSlicer.rst", "modules/generated/nilearn.plotting.displays.XZProjector.rst", "modules/generated/nilearn.plotting.displays.XZSlicer.rst", "modules/generated/nilearn.plotting.displays.YProjector.rst", "modules/generated/nilearn.plotting.displays.YSlicer.rst", "modules/generated/nilearn.plotting.displays.YXProjector.rst", "modules/generated/nilearn.plotting.displays.YXSlicer.rst", "modules/generated/nilearn.plotting.displays.YZProjector.rst", "modules/generated/nilearn.plotting.displays.YZSlicer.rst", "modules/generated/nilearn.plotting.displays.ZProjector.rst", "modules/generated/nilearn.plotting.displays.ZSlicer.rst", "modules/generated/nilearn.plotting.displays.get_projector.rst", "modules/generated/nilearn.plotting.displays.get_slicer.rst", "modules/generated/nilearn.plotting.find_cut_slices.rst", "modules/generated/nilearn.plotting.find_parcellation_cut_coords.rst", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords.rst", "modules/generated/nilearn.plotting.find_xyz_cut_coords.rst", "modules/generated/nilearn.plotting.plot_anat.rst", "modules/generated/nilearn.plotting.plot_carpet.rst", "modules/generated/nilearn.plotting.plot_connectome.rst", "modules/generated/nilearn.plotting.plot_contrast_matrix.rst", "modules/generated/nilearn.plotting.plot_design_matrix.rst", "modules/generated/nilearn.plotting.plot_epi.rst", "modules/generated/nilearn.plotting.plot_event.rst", "modules/generated/nilearn.plotting.plot_glass_brain.rst", "modules/generated/nilearn.plotting.plot_img.rst", "modules/generated/nilearn.plotting.plot_img_comparison.rst", "modules/generated/nilearn.plotting.plot_img_on_surf.rst", "modules/generated/nilearn.plotting.plot_markers.rst", "modules/generated/nilearn.plotting.plot_matrix.rst", "modules/generated/nilearn.plotting.plot_prob_atlas.rst", "modules/generated/nilearn.plotting.plot_roi.rst", "modules/generated/nilearn.plotting.plot_stat_map.rst", "modules/generated/nilearn.plotting.plot_surf.rst", "modules/generated/nilearn.plotting.plot_surf_contours.rst", "modules/generated/nilearn.plotting.plot_surf_roi.rst", "modules/generated/nilearn.plotting.plot_surf_stat_map.rst", "modules/generated/nilearn.plotting.show.rst", "modules/generated/nilearn.plotting.view_connectome.rst", "modules/generated/nilearn.plotting.view_img.rst", "modules/generated/nilearn.plotting.view_img_on_surf.rst", "modules/generated/nilearn.plotting.view_markers.rst", "modules/generated/nilearn.plotting.view_surf.rst", "modules/generated/nilearn.regions.HierarchicalKMeans.rst", "modules/generated/nilearn.regions.Parcellations.rst", "modules/generated/nilearn.regions.ReNA.rst", "modules/generated/nilearn.regions.RegionExtractor.rst", "modules/generated/nilearn.regions.connected_label_regions.rst", "modules/generated/nilearn.regions.connected_regions.rst", "modules/generated/nilearn.regions.img_to_signals_labels.rst", "modules/generated/nilearn.regions.img_to_signals_maps.rst", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration.rst", "modules/generated/nilearn.regions.signals_to_img_labels.rst", "modules/generated/nilearn.regions.signals_to_img_maps.rst", "modules/generated/nilearn.reporting.HTMLReport.rst", "modules/generated/nilearn.reporting.get_clusters_table.rst", "modules/generated/nilearn.reporting.make_glm_report.rst", "modules/generated/nilearn.signal.butterworth.rst", "modules/generated/nilearn.signal.clean.rst", "modules/generated/nilearn.signal.high_variance_confounds.rst", "modules/generated/nilearn.surface.load_surf_data.rst", "modules/generated/nilearn.surface.load_surf_mesh.rst", "modules/generated/nilearn.surface.vol_to_surf.rst", "modules/generated_reports/glm_reports_examples.rst", "modules/generated_reports/masker_reports_examples.rst", "modules/glm.rst", "modules/image.rst", "modules/index.rst", "modules/interfaces.rst", "modules/maskers.rst", "modules/masking.rst", "modules/mass_univariate.rst", "modules/plotting.rst", "modules/regions.rst", "modules/reporting.rst", "modules/signal.rst", "modules/surface.rst", "plotting/index.rst", "quickstart.md", "sg_execution_times.rst", "user_guide.rst"], "indexentries": {"__init__() (nilearn.connectome.connectivitymeasure method)": [[234, "nilearn.connectome.ConnectivityMeasure.__init__", false]], "__init__() (nilearn.connectome.groupsparsecovariance method)": [[235, "nilearn.connectome.GroupSparseCovariance.__init__", false]], "__init__() (nilearn.connectome.groupsparsecovariancecv method)": [[236, "nilearn.connectome.GroupSparseCovarianceCV.__init__", false]], "__init__() (nilearn.decoding.decoder method)": [[298, "nilearn.decoding.Decoder.__init__", false]], "__init__() (nilearn.decoding.decoderregressor method)": [[299, "nilearn.decoding.DecoderRegressor.__init__", false]], "__init__() (nilearn.decoding.fremclassifier method)": [[300, "nilearn.decoding.FREMClassifier.__init__", false]], "__init__() (nilearn.decoding.fremregressor method)": [[301, "nilearn.decoding.FREMRegressor.__init__", false]], "__init__() (nilearn.decoding.searchlight method)": [[302, "nilearn.decoding.SearchLight.__init__", false]], "__init__() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.__init__", false]], "__init__() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.__init__", false]], "__init__() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.__init__", false]], "__init__() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.__init__", false]], "__init__() (nilearn.experimental.surface.filemesh method)": [[312, "nilearn.experimental.surface.FileMesh.__init__", false]], "__init__() (nilearn.experimental.surface.inmemorymesh method)": [[313, "nilearn.experimental.surface.InMemoryMesh.__init__", false]], "__init__() (nilearn.experimental.surface.mesh method)": [[314, "nilearn.experimental.surface.Mesh.__init__", false]], "__init__() (nilearn.experimental.surface.polymesh method)": [[315, "nilearn.experimental.surface.PolyMesh.__init__", false]], "__init__() (nilearn.experimental.surface.surfaceimage method)": [[316, "nilearn.experimental.surface.SurfaceImage.__init__", false]], "__init__() (nilearn.experimental.surface.surfacelabelsmasker method)": [[317, "nilearn.experimental.surface.SurfaceLabelsMasker.__init__", false]], "__init__() (nilearn.experimental.surface.surfacemasker method)": [[318, "nilearn.experimental.surface.SurfaceMasker.__init__", false]], "__init__() (nilearn.glm.armodel method)": [[323, "nilearn.glm.ARModel.__init__", false]], "__init__() (nilearn.glm.contrast method)": [[324, "nilearn.glm.Contrast.__init__", false]], "__init__() (nilearn.glm.fcontrastresults method)": [[325, "nilearn.glm.FContrastResults.__init__", false]], "__init__() (nilearn.glm.first_level.firstlevelmodel method)": [[336, "nilearn.glm.first_level.FirstLevelModel.__init__", false]], "__init__() (nilearn.glm.likelihoodmodelresults method)": [[326, "nilearn.glm.LikelihoodModelResults.__init__", false]], "__init__() (nilearn.glm.olsmodel method)": [[327, "nilearn.glm.OLSModel.__init__", false]], "__init__() (nilearn.glm.regressionresults method)": [[328, "nilearn.glm.RegressionResults.__init__", false]], "__init__() (nilearn.glm.second_level.secondlevelmodel method)": [[349, "nilearn.glm.second_level.SecondLevelModel.__init__", false]], "__init__() (nilearn.glm.simpleregressionresults method)": [[329, "nilearn.glm.SimpleRegressionResults.__init__", false]], "__init__() (nilearn.glm.tcontrastresults method)": [[330, "nilearn.glm.TContrastResults.__init__", false]], "__init__() (nilearn.maskers.basemasker method)": [[380, "nilearn.maskers.BaseMasker.__init__", false]], "__init__() (nilearn.maskers.multiniftilabelsmasker method)": [[381, "nilearn.maskers.MultiNiftiLabelsMasker.__init__", false]], "__init__() (nilearn.maskers.multiniftimapsmasker method)": [[382, "nilearn.maskers.MultiNiftiMapsMasker.__init__", false]], "__init__() (nilearn.maskers.multiniftimasker method)": [[383, "nilearn.maskers.MultiNiftiMasker.__init__", false]], "__init__() (nilearn.maskers.niftilabelsmasker method)": [[384, "nilearn.maskers.NiftiLabelsMasker.__init__", false]], "__init__() (nilearn.maskers.niftimapsmasker method)": [[385, "nilearn.maskers.NiftiMapsMasker.__init__", false]], "__init__() (nilearn.maskers.niftimasker method)": [[386, "nilearn.maskers.NiftiMasker.__init__", false]], "__init__() (nilearn.maskers.niftispheresmasker method)": [[387, "nilearn.maskers.NiftiSpheresMasker.__init__", false]], "__init__() (nilearn.plotting.displays.baseaxes method)": [[398, "nilearn.plotting.displays.BaseAxes.__init__", false]], "__init__() (nilearn.plotting.displays.baseslicer method)": [[399, "nilearn.plotting.displays.BaseSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.cutaxes method)": [[400, "nilearn.plotting.displays.CutAxes.__init__", false]], "__init__() (nilearn.plotting.displays.glassbrainaxes method)": [[401, "nilearn.plotting.displays.GlassBrainAxes.__init__", false]], "__init__() (nilearn.plotting.displays.lprojector method)": [[402, "nilearn.plotting.displays.LProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lrprojector method)": [[403, "nilearn.plotting.displays.LRProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lyrprojector method)": [[404, "nilearn.plotting.displays.LYRProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lyrzprojector method)": [[405, "nilearn.plotting.displays.LYRZProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lzrprojector method)": [[406, "nilearn.plotting.displays.LZRProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lzryprojector method)": [[407, "nilearn.plotting.displays.LZRYProjector.__init__", false]], "__init__() (nilearn.plotting.displays.mosaicslicer method)": [[408, "nilearn.plotting.displays.MosaicSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.orthoprojector method)": [[409, "nilearn.plotting.displays.OrthoProjector.__init__", false]], "__init__() (nilearn.plotting.displays.orthoslicer method)": [[410, "nilearn.plotting.displays.OrthoSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.plotlysurfacefigure method)": [[411, "nilearn.plotting.displays.PlotlySurfaceFigure.__init__", false]], "__init__() (nilearn.plotting.displays.rprojector method)": [[412, "nilearn.plotting.displays.RProjector.__init__", false]], "__init__() (nilearn.plotting.displays.tiledslicer method)": [[413, "nilearn.plotting.displays.TiledSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.xprojector method)": [[414, "nilearn.plotting.displays.XProjector.__init__", false]], "__init__() (nilearn.plotting.displays.xslicer method)": [[415, "nilearn.plotting.displays.XSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.xzprojector method)": [[416, "nilearn.plotting.displays.XZProjector.__init__", false]], "__init__() (nilearn.plotting.displays.xzslicer method)": [[417, "nilearn.plotting.displays.XZSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.yprojector method)": [[418, "nilearn.plotting.displays.YProjector.__init__", false]], "__init__() (nilearn.plotting.displays.yslicer method)": [[419, "nilearn.plotting.displays.YSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.yxprojector method)": [[420, "nilearn.plotting.displays.YXProjector.__init__", false]], "__init__() (nilearn.plotting.displays.yxslicer method)": [[421, "nilearn.plotting.displays.YXSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.yzprojector method)": [[422, "nilearn.plotting.displays.YZProjector.__init__", false]], "__init__() (nilearn.plotting.displays.yzslicer method)": [[423, "nilearn.plotting.displays.YZSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.zprojector method)": [[424, "nilearn.plotting.displays.ZProjector.__init__", false]], "__init__() (nilearn.plotting.displays.zslicer method)": [[425, "nilearn.plotting.displays.ZSlicer.__init__", false]], "__init__() (nilearn.regions.hierarchicalkmeans method)": [[458, "nilearn.regions.HierarchicalKMeans.__init__", false]], "__init__() (nilearn.regions.parcellations method)": [[459, "nilearn.regions.Parcellations.__init__", false]], "__init__() (nilearn.regions.regionextractor method)": [[461, "nilearn.regions.RegionExtractor.__init__", false]], "__init__() (nilearn.regions.rena method)": [[460, "nilearn.regions.ReNA.__init__", false]], "__init__() (nilearn.reporting.htmlreport method)": [[469, "nilearn.reporting.HTMLReport.__init__", false]], "add_contours() (nilearn.plotting.displays.baseslicer method)": [[399, "nilearn.plotting.displays.BaseSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.lprojector method)": [[402, "nilearn.plotting.displays.LProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lrprojector method)": [[403, "nilearn.plotting.displays.LRProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lyrprojector method)": [[404, "nilearn.plotting.displays.LYRProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lyrzprojector method)": [[405, "nilearn.plotting.displays.LYRZProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lzrprojector method)": [[406, "nilearn.plotting.displays.LZRProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lzryprojector method)": [[407, "nilearn.plotting.displays.LZRYProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.mosaicslicer method)": [[408, "nilearn.plotting.displays.MosaicSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.orthoprojector method)": [[409, "nilearn.plotting.displays.OrthoProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.orthoslicer method)": [[410, "nilearn.plotting.displays.OrthoSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.rprojector method)": [[412, "nilearn.plotting.displays.RProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.tiledslicer method)": [[413, "nilearn.plotting.displays.TiledSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.xprojector method)": [[414, "nilearn.plotting.displays.XProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.xslicer method)": [[415, "nilearn.plotting.displays.XSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.xzprojector method)": [[416, "nilearn.plotting.displays.XZProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.xzslicer method)": [[417, "nilearn.plotting.displays.XZSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.yprojector method)": [[418, "nilearn.plotting.displays.YProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.yslicer method)": [[419, "nilearn.plotting.displays.YSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.yxprojector method)": [[420, "nilearn.plotting.displays.YXProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.yxslicer method)": [[421, "nilearn.plotting.displays.YXSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.yzprojector method)": [[422, "nilearn.plotting.displays.YZProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.yzslicer method)": [[423, "nilearn.plotting.displays.YZSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.zprojector method)": [[424, "nilearn.plotting.displays.ZProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.zslicer method)": [[425, "nilearn.plotting.displays.ZSlicer.add_contours", false]], "add_edges() (nilearn.plotting.displays.baseslicer method)": [[399, "nilearn.plotting.displays.BaseSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.lprojector method)": [[402, "nilearn.plotting.displays.LProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lrprojector method)": [[403, "nilearn.plotting.displays.LRProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lyrprojector method)": [[404, "nilearn.plotting.displays.LYRProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lyrzprojector method)": [[405, "nilearn.plotting.displays.LYRZProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lzrprojector method)": [[406, "nilearn.plotting.displays.LZRProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lzryprojector method)": [[407, "nilearn.plotting.displays.LZRYProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.mosaicslicer method)": [[408, "nilearn.plotting.displays.MosaicSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.orthoprojector method)": [[409, "nilearn.plotting.displays.OrthoProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.orthoslicer method)": [[410, "nilearn.plotting.displays.OrthoSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.rprojector method)": [[412, "nilearn.plotting.displays.RProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.tiledslicer method)": [[413, "nilearn.plotting.displays.TiledSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.xprojector method)": [[414, "nilearn.plotting.displays.XProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.xslicer method)": [[415, "nilearn.plotting.displays.XSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.xzprojector method)": [[416, "nilearn.plotting.displays.XZProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.xzslicer method)": [[417, "nilearn.plotting.displays.XZSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.yprojector method)": [[418, "nilearn.plotting.displays.YProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.yslicer method)": [[419, "nilearn.plotting.displays.YSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.yxprojector method)": [[420, "nilearn.plotting.displays.YXProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.yxslicer method)": [[421, "nilearn.plotting.displays.YXSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.yzprojector method)": [[422, "nilearn.plotting.displays.YZProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.yzslicer method)": [[423, "nilearn.plotting.displays.YZSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.zprojector method)": [[424, "nilearn.plotting.displays.ZProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.zslicer method)": [[425, "nilearn.plotting.displays.ZSlicer.add_edges", false]], "add_graph() (nilearn.plotting.displays.lprojector method)": [[402, "nilearn.plotting.displays.LProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lrprojector method)": [[403, "nilearn.plotting.displays.LRProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lyrprojector method)": [[404, "nilearn.plotting.displays.LYRProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lyrzprojector method)": [[405, "nilearn.plotting.displays.LYRZProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lzrprojector method)": [[406, "nilearn.plotting.displays.LZRProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lzryprojector method)": [[407, "nilearn.plotting.displays.LZRYProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.orthoprojector method)": [[409, "nilearn.plotting.displays.OrthoProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.rprojector method)": [[412, "nilearn.plotting.displays.RProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.xprojector method)": [[414, "nilearn.plotting.displays.XProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.xzprojector method)": [[416, "nilearn.plotting.displays.XZProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.yprojector method)": [[418, "nilearn.plotting.displays.YProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.yxprojector method)": [[420, "nilearn.plotting.displays.YXProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.yzprojector method)": [[422, "nilearn.plotting.displays.YZProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.zprojector method)": [[424, "nilearn.plotting.displays.ZProjector.add_graph", false]], "add_markers() (nilearn.plotting.displays.baseslicer method)": [[399, "nilearn.plotting.displays.BaseSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.lprojector method)": [[402, "nilearn.plotting.displays.LProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lrprojector method)": [[403, "nilearn.plotting.displays.LRProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lyrprojector method)": [[404, "nilearn.plotting.displays.LYRProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lyrzprojector method)": [[405, "nilearn.plotting.displays.LYRZProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lzrprojector method)": [[406, "nilearn.plotting.displays.LZRProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lzryprojector method)": [[407, "nilearn.plotting.displays.LZRYProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.mosaicslicer method)": [[408, "nilearn.plotting.displays.MosaicSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.orthoprojector method)": [[409, "nilearn.plotting.displays.OrthoProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.orthoslicer method)": [[410, "nilearn.plotting.displays.OrthoSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.rprojector method)": [[412, "nilearn.plotting.displays.RProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.tiledslicer method)": [[413, "nilearn.plotting.displays.TiledSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.xprojector method)": [[414, "nilearn.plotting.displays.XProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.xslicer method)": [[415, "nilearn.plotting.displays.XSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.xzprojector method)": [[416, "nilearn.plotting.displays.XZProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.xzslicer method)": [[417, "nilearn.plotting.displays.XZSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.yprojector method)": [[418, "nilearn.plotting.displays.YProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.yslicer method)": [[419, "nilearn.plotting.displays.YSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.yxprojector method)": [[420, "nilearn.plotting.displays.YXProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.yxslicer method)": [[421, "nilearn.plotting.displays.YXSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.yzprojector method)": [[422, "nilearn.plotting.displays.YZProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.yzslicer method)": [[423, "nilearn.plotting.displays.YZSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.zprojector method)": [[424, "nilearn.plotting.displays.ZProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.zslicer method)": [[425, "nilearn.plotting.displays.ZSlicer.add_markers", false]], "add_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[398, "nilearn.plotting.displays.BaseAxes.add_object_bounds", false]], "add_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[400, "nilearn.plotting.displays.CutAxes.add_object_bounds", false]], "add_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[401, "nilearn.plotting.displays.GlassBrainAxes.add_object_bounds", false]], "add_overlay() (nilearn.plotting.displays.baseslicer method)": [[399, "nilearn.plotting.displays.BaseSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lprojector method)": [[402, "nilearn.plotting.displays.LProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lrprojector method)": [[403, "nilearn.plotting.displays.LRProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lyrprojector method)": [[404, "nilearn.plotting.displays.LYRProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lyrzprojector method)": [[405, "nilearn.plotting.displays.LYRZProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lzrprojector method)": [[406, "nilearn.plotting.displays.LZRProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lzryprojector method)": [[407, "nilearn.plotting.displays.LZRYProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.mosaicslicer method)": [[408, "nilearn.plotting.displays.MosaicSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.orthoprojector method)": [[409, "nilearn.plotting.displays.OrthoProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.orthoslicer method)": [[410, "nilearn.plotting.displays.OrthoSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.rprojector method)": [[412, "nilearn.plotting.displays.RProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.tiledslicer method)": [[413, "nilearn.plotting.displays.TiledSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.xprojector method)": [[414, "nilearn.plotting.displays.XProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.xslicer method)": [[415, "nilearn.plotting.displays.XSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.xzprojector method)": [[416, "nilearn.plotting.displays.XZProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.xzslicer method)": [[417, "nilearn.plotting.displays.XZSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yprojector method)": [[418, "nilearn.plotting.displays.YProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yslicer method)": [[419, "nilearn.plotting.displays.YSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yxprojector method)": [[420, "nilearn.plotting.displays.YXProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yxslicer method)": [[421, "nilearn.plotting.displays.YXSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yzprojector method)": [[422, "nilearn.plotting.displays.YZProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yzslicer method)": [[423, "nilearn.plotting.displays.YZSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.zprojector method)": [[424, "nilearn.plotting.displays.ZProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.zslicer method)": [[425, "nilearn.plotting.displays.ZSlicer.add_overlay", false]], "annotate() (nilearn.plotting.displays.baseslicer method)": [[399, "nilearn.plotting.displays.BaseSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.lprojector method)": [[402, "nilearn.plotting.displays.LProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lrprojector method)": [[403, "nilearn.plotting.displays.LRProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lyrprojector method)": [[404, "nilearn.plotting.displays.LYRProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lyrzprojector method)": [[405, "nilearn.plotting.displays.LYRZProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lzrprojector method)": [[406, "nilearn.plotting.displays.LZRProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lzryprojector method)": [[407, "nilearn.plotting.displays.LZRYProjector.annotate", false]], "annotate() (nilearn.plotting.displays.mosaicslicer method)": [[408, "nilearn.plotting.displays.MosaicSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.orthoprojector method)": [[409, "nilearn.plotting.displays.OrthoProjector.annotate", false]], "annotate() (nilearn.plotting.displays.orthoslicer method)": [[410, "nilearn.plotting.displays.OrthoSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.rprojector method)": [[412, "nilearn.plotting.displays.RProjector.annotate", false]], "annotate() (nilearn.plotting.displays.tiledslicer method)": [[413, "nilearn.plotting.displays.TiledSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.xprojector method)": [[414, "nilearn.plotting.displays.XProjector.annotate", false]], "annotate() (nilearn.plotting.displays.xslicer method)": [[415, "nilearn.plotting.displays.XSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.xzprojector method)": [[416, "nilearn.plotting.displays.XZProjector.annotate", false]], "annotate() (nilearn.plotting.displays.xzslicer method)": [[417, "nilearn.plotting.displays.XZSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.yprojector method)": [[418, "nilearn.plotting.displays.YProjector.annotate", false]], "annotate() (nilearn.plotting.displays.yslicer method)": [[419, "nilearn.plotting.displays.YSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.yxprojector method)": [[420, "nilearn.plotting.displays.YXProjector.annotate", false]], "annotate() (nilearn.plotting.displays.yxslicer method)": [[421, "nilearn.plotting.displays.YXSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.yzprojector method)": [[422, "nilearn.plotting.displays.YZProjector.annotate", false]], "annotate() (nilearn.plotting.displays.yzslicer method)": [[423, "nilearn.plotting.displays.YZSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.zprojector method)": [[424, "nilearn.plotting.displays.ZProjector.annotate", false]], "annotate() (nilearn.plotting.displays.zslicer method)": [[425, "nilearn.plotting.displays.ZSlicer.annotate", false]], "anova": [[181, "term-ANOVA", true]], "apply_mask() (in module nilearn.masking)": [[388, "nilearn.masking.apply_mask", false]], "armodel (class in nilearn.glm)": [[323, "nilearn.glm.ARModel", false]], "auc": [[181, "term-AUC", true]], "baseaxes (class in nilearn.plotting.displays)": [[398, "nilearn.plotting.displays.BaseAxes", false]], "basemasker (class in nilearn.maskers)": [[380, "nilearn.maskers.BaseMasker", false]], "baseslicer (class in nilearn.plotting.displays)": [[399, "nilearn.plotting.displays.BaseSlicer", false]], "beta": [[181, "term-Beta", true]], "bids": [[181, "term-BIDS", true]], "binarize_img() (in module nilearn.image)": [[353, "nilearn.image.binarize_img", false]], "black_bg (nilearn.plotting.displays.baseslicer property)": [[399, "nilearn.plotting.displays.BaseSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.lprojector property)": [[402, "nilearn.plotting.displays.LProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lrprojector property)": [[403, "nilearn.plotting.displays.LRProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lyrprojector property)": [[404, "nilearn.plotting.displays.LYRProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lyrzprojector property)": [[405, "nilearn.plotting.displays.LYRZProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lzrprojector property)": [[406, "nilearn.plotting.displays.LZRProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lzryprojector property)": [[407, "nilearn.plotting.displays.LZRYProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.mosaicslicer property)": [[408, "nilearn.plotting.displays.MosaicSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.orthoprojector property)": [[409, "nilearn.plotting.displays.OrthoProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.orthoslicer property)": [[410, "nilearn.plotting.displays.OrthoSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.rprojector property)": [[412, "nilearn.plotting.displays.RProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.tiledslicer property)": [[413, "nilearn.plotting.displays.TiledSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.xprojector property)": [[414, "nilearn.plotting.displays.XProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.xslicer property)": [[415, "nilearn.plotting.displays.XSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.xzprojector property)": [[416, "nilearn.plotting.displays.XZProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.xzslicer property)": [[417, "nilearn.plotting.displays.XZSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.yprojector property)": [[418, "nilearn.plotting.displays.YProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.yslicer property)": [[419, "nilearn.plotting.displays.YSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.yxprojector property)": [[420, "nilearn.plotting.displays.YXProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.yxslicer property)": [[421, "nilearn.plotting.displays.YXSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.yzprojector property)": [[422, "nilearn.plotting.displays.YZProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.yzslicer property)": [[423, "nilearn.plotting.displays.YZSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.zprojector property)": [[424, "nilearn.plotting.displays.ZProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.zslicer property)": [[425, "nilearn.plotting.displays.ZSlicer.black_bg", false]], "bold": [[181, "term-BOLD", true]], "brain_color (nilearn.plotting.displays.baseslicer property)": [[399, "nilearn.plotting.displays.BaseSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.lprojector property)": [[402, "nilearn.plotting.displays.LProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lrprojector property)": [[403, "nilearn.plotting.displays.LRProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lyrprojector property)": [[404, "nilearn.plotting.displays.LYRProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lyrzprojector property)": [[405, "nilearn.plotting.displays.LYRZProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lzrprojector property)": [[406, "nilearn.plotting.displays.LZRProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lzryprojector property)": [[407, "nilearn.plotting.displays.LZRYProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.mosaicslicer property)": [[408, "nilearn.plotting.displays.MosaicSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.orthoprojector property)": [[409, "nilearn.plotting.displays.OrthoProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.orthoslicer property)": [[410, "nilearn.plotting.displays.OrthoSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.rprojector property)": [[412, "nilearn.plotting.displays.RProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.tiledslicer property)": [[413, "nilearn.plotting.displays.TiledSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.xprojector property)": [[414, "nilearn.plotting.displays.XProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.xslicer property)": [[415, "nilearn.plotting.displays.XSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.xzprojector property)": [[416, "nilearn.plotting.displays.XZProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.xzslicer property)": [[417, "nilearn.plotting.displays.XZSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.yprojector property)": [[418, "nilearn.plotting.displays.YProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.yslicer property)": [[419, "nilearn.plotting.displays.YSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.yxprojector property)": [[420, "nilearn.plotting.displays.YXProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.yxslicer property)": [[421, "nilearn.plotting.displays.YXSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.yzprojector property)": [[422, "nilearn.plotting.displays.YZProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.yzslicer property)": [[423, "nilearn.plotting.displays.YZSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.zprojector property)": [[424, "nilearn.plotting.displays.ZProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.zslicer property)": [[425, "nilearn.plotting.displays.ZSlicer.brain_color", false]], "butterworth() (in module nilearn.signal)": [[472, "nilearn.signal.butterworth", false]], "canica": [[181, "term-CanICA", true]], "canica (class in nilearn.decomposition)": [[305, "nilearn.decomposition.CanICA", false]], "check_design_matrix() (in module nilearn.glm.first_level)": [[337, "nilearn.glm.first_level.check_design_matrix", false]], "check_params() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.check_params", false]], "check_params() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.check_params", false]], "classification": [[181, "term-classification", true]], "clean() (in module nilearn.signal)": [[473, "nilearn.signal.clean", false]], "clean_img() (in module nilearn.image)": [[354, "nilearn.image.clean_img", false]], "close() (nilearn.plotting.displays.baseslicer method)": [[399, "nilearn.plotting.displays.BaseSlicer.close", false]], "close() (nilearn.plotting.displays.lprojector method)": [[402, "nilearn.plotting.displays.LProjector.close", false]], "close() (nilearn.plotting.displays.lrprojector method)": [[403, "nilearn.plotting.displays.LRProjector.close", false]], "close() (nilearn.plotting.displays.lyrprojector method)": [[404, "nilearn.plotting.displays.LYRProjector.close", false]], "close() (nilearn.plotting.displays.lyrzprojector method)": [[405, "nilearn.plotting.displays.LYRZProjector.close", false]], "close() (nilearn.plotting.displays.lzrprojector method)": [[406, "nilearn.plotting.displays.LZRProjector.close", false]], "close() (nilearn.plotting.displays.lzryprojector method)": [[407, "nilearn.plotting.displays.LZRYProjector.close", false]], "close() (nilearn.plotting.displays.mosaicslicer method)": [[408, "nilearn.plotting.displays.MosaicSlicer.close", false]], "close() (nilearn.plotting.displays.orthoprojector method)": [[409, "nilearn.plotting.displays.OrthoProjector.close", false]], "close() (nilearn.plotting.displays.orthoslicer method)": [[410, "nilearn.plotting.displays.OrthoSlicer.close", false]], "close() (nilearn.plotting.displays.rprojector method)": [[412, "nilearn.plotting.displays.RProjector.close", false]], "close() (nilearn.plotting.displays.tiledslicer method)": [[413, "nilearn.plotting.displays.TiledSlicer.close", false]], "close() (nilearn.plotting.displays.xprojector method)": [[414, "nilearn.plotting.displays.XProjector.close", false]], "close() (nilearn.plotting.displays.xslicer method)": [[415, "nilearn.plotting.displays.XSlicer.close", false]], "close() (nilearn.plotting.displays.xzprojector method)": [[416, "nilearn.plotting.displays.XZProjector.close", false]], "close() (nilearn.plotting.displays.xzslicer method)": [[417, "nilearn.plotting.displays.XZSlicer.close", false]], "close() (nilearn.plotting.displays.yprojector method)": [[418, "nilearn.plotting.displays.YProjector.close", false]], "close() (nilearn.plotting.displays.yslicer method)": [[419, "nilearn.plotting.displays.YSlicer.close", false]], "close() (nilearn.plotting.displays.yxprojector method)": [[420, "nilearn.plotting.displays.YXProjector.close", false]], "close() (nilearn.plotting.displays.yxslicer method)": [[421, "nilearn.plotting.displays.YXSlicer.close", false]], "close() (nilearn.plotting.displays.yzprojector method)": [[422, "nilearn.plotting.displays.YZProjector.close", false]], "close() (nilearn.plotting.displays.yzslicer method)": [[423, "nilearn.plotting.displays.YZSlicer.close", false]], "close() (nilearn.plotting.displays.zprojector method)": [[424, "nilearn.plotting.displays.ZProjector.close", false]], "close() (nilearn.plotting.displays.zslicer method)": [[425, "nilearn.plotting.displays.ZSlicer.close", false]], "closing": [[181, "term-Closing", true]], "cluster_level_inference() (in module nilearn.glm)": [[331, "nilearn.glm.cluster_level_inference", false]], "compute_background_mask() (in module nilearn.masking)": [[389, "nilearn.masking.compute_background_mask", false]], "compute_brain_mask() (in module nilearn.masking)": [[390, "nilearn.masking.compute_brain_mask", false]], "compute_contrast() (in module nilearn.glm)": [[332, "nilearn.glm.compute_contrast", false]], "compute_contrast() (nilearn.glm.first_level.firstlevelmodel method)": [[336, "nilearn.glm.first_level.FirstLevelModel.compute_contrast", false]], "compute_contrast() (nilearn.glm.second_level.secondlevelmodel method)": [[349, "nilearn.glm.second_level.SecondLevelModel.compute_contrast", false]], "compute_epi_mask() (in module nilearn.masking)": [[391, "nilearn.masking.compute_epi_mask", false]], "compute_fixed_effects() (in module nilearn.glm)": [[333, "nilearn.glm.compute_fixed_effects", false]], "compute_multi_background_mask() (in module nilearn.masking)": [[392, "nilearn.masking.compute_multi_background_mask", false]], "compute_multi_brain_mask() (in module nilearn.masking)": [[393, "nilearn.masking.compute_multi_brain_mask", false]], "compute_multi_epi_mask() (in module nilearn.masking)": [[394, "nilearn.masking.compute_multi_epi_mask", false]], "compute_regressor() (in module nilearn.glm.first_level)": [[338, "nilearn.glm.first_level.compute_regressor", false]], "concat_imgs() (in module nilearn.image)": [[355, "nilearn.image.concat_imgs", false]], "conf_int() (nilearn.glm.likelihoodmodelresults method)": [[326, "nilearn.glm.LikelihoodModelResults.conf_int", false]], "conf_int() (nilearn.glm.regressionresults method)": [[328, "nilearn.glm.RegressionResults.conf_int", false]], "conf_int() (nilearn.glm.simpleregressionresults method)": [[329, "nilearn.glm.SimpleRegressionResults.conf_int", false]], "connected_label_regions() (in module nilearn.regions)": [[462, "nilearn.regions.connected_label_regions", false]], "connected_regions() (in module nilearn.regions)": [[463, "nilearn.regions.connected_regions", false]], "connectivitymeasure (class in nilearn.connectome)": [[234, "nilearn.connectome.ConnectivityMeasure", false]], "contrast": [[181, "term-contrast", true]], "contrast (class in nilearn.glm)": [[324, "nilearn.glm.Contrast", false]], "contrast_type (nilearn.glm.contrast property)": [[324, "nilearn.glm.Contrast.contrast_type", false]], "coord_transform() (in module nilearn.image)": [[356, "nilearn.image.coord_transform", false]], "coordinates (nilearn.experimental.surface.filemesh property)": [[312, "nilearn.experimental.surface.FileMesh.coordinates", false]], "coordinates (nilearn.experimental.surface.inmemorymesh attribute)": [[313, "nilearn.experimental.surface.InMemoryMesh.coordinates", false]], "coordinates (nilearn.experimental.surface.mesh attribute)": [[314, "nilearn.experimental.surface.Mesh.coordinates", false]], "copy_img() (in module nilearn.image)": [[357, "nilearn.image.copy_img", false]], "cov_to_corr() (in module nilearn.connectome)": [[237, "nilearn.connectome.cov_to_corr", false]], "crop_img() (in module nilearn.image)": [[358, "nilearn.image.crop_img", false]], "cutaxes (class in nilearn.plotting.displays)": [[400, "nilearn.plotting.displays.CutAxes", false]], "decision_function() (nilearn.decoding.decoder method)": [[298, "nilearn.decoding.Decoder.decision_function", false]], "decision_function() (nilearn.decoding.decoderregressor method)": [[299, "nilearn.decoding.DecoderRegressor.decision_function", false]], "decision_function() (nilearn.decoding.fremclassifier method)": [[300, "nilearn.decoding.FREMClassifier.decision_function", false]], "decision_function() (nilearn.decoding.fremregressor method)": [[301, "nilearn.decoding.FREMRegressor.decision_function", false]], "decision_function() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.decision_function", false]], "decision_function() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.decision_function", false]], "decoder (class in nilearn.decoding)": [[298, "nilearn.decoding.Decoder", false]], "decoderregressor (class in nilearn.decoding)": [[299, "nilearn.decoding.DecoderRegressor", false]], "decoding": [[181, "term-Decoding", true]], "deterministic atlas": [[181, "term-Deterministic-atlas", true]], "dictionary learning": [[181, "term-Dictionary-learning", true]], "dictlearning (class in nilearn.decomposition)": [[306, "nilearn.decomposition.DictLearning", false]], "dilation": [[181, "term-Dilation", true]], "draw_2d() (nilearn.plotting.displays.baseaxes method)": [[398, "nilearn.plotting.displays.BaseAxes.draw_2d", false]], "draw_2d() (nilearn.plotting.displays.cutaxes method)": [[400, "nilearn.plotting.displays.CutAxes.draw_2d", false]], "draw_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[401, "nilearn.plotting.displays.GlassBrainAxes.draw_2d", false]], "draw_cross() (nilearn.plotting.displays.lprojector method)": [[402, "nilearn.plotting.displays.LProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lrprojector method)": [[403, "nilearn.plotting.displays.LRProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lyrprojector method)": [[404, "nilearn.plotting.displays.LYRProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lyrzprojector method)": [[405, "nilearn.plotting.displays.LYRZProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lzrprojector method)": [[406, "nilearn.plotting.displays.LZRProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lzryprojector method)": [[407, "nilearn.plotting.displays.LZRYProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.mosaicslicer method)": [[408, "nilearn.plotting.displays.MosaicSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.orthoprojector method)": [[409, "nilearn.plotting.displays.OrthoProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.orthoslicer method)": [[410, "nilearn.plotting.displays.OrthoSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.rprojector method)": [[412, "nilearn.plotting.displays.RProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.tiledslicer method)": [[413, "nilearn.plotting.displays.TiledSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.xprojector method)": [[414, "nilearn.plotting.displays.XProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.xslicer method)": [[415, "nilearn.plotting.displays.XSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.xzprojector method)": [[416, "nilearn.plotting.displays.XZProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.xzslicer method)": [[417, "nilearn.plotting.displays.XZSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yprojector method)": [[418, "nilearn.plotting.displays.YProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yslicer method)": [[419, "nilearn.plotting.displays.YSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yxprojector method)": [[420, "nilearn.plotting.displays.YXProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yxslicer method)": [[421, "nilearn.plotting.displays.YXSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yzprojector method)": [[422, "nilearn.plotting.displays.YZProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yzslicer method)": [[423, "nilearn.plotting.displays.YZSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.zprojector method)": [[424, "nilearn.plotting.displays.ZProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.zslicer method)": [[425, "nilearn.plotting.displays.ZSlicer.draw_cross", false]], "draw_left_right() (nilearn.plotting.displays.baseaxes method)": [[398, "nilearn.plotting.displays.BaseAxes.draw_left_right", false]], "draw_left_right() (nilearn.plotting.displays.cutaxes method)": [[400, "nilearn.plotting.displays.CutAxes.draw_left_right", false]], "draw_left_right() (nilearn.plotting.displays.glassbrainaxes method)": [[401, "nilearn.plotting.displays.GlassBrainAxes.draw_left_right", false]], "draw_position() (nilearn.plotting.displays.baseaxes method)": [[398, "nilearn.plotting.displays.BaseAxes.draw_position", false]], "draw_position() (nilearn.plotting.displays.cutaxes method)": [[400, "nilearn.plotting.displays.CutAxes.draw_position", false]], "draw_position() (nilearn.plotting.displays.glassbrainaxes method)": [[401, "nilearn.plotting.displays.GlassBrainAxes.draw_position", false]], "draw_scale_bar() (nilearn.plotting.displays.baseaxes method)": [[398, "nilearn.plotting.displays.BaseAxes.draw_scale_bar", false]], "draw_scale_bar() (nilearn.plotting.displays.cutaxes method)": [[400, "nilearn.plotting.displays.CutAxes.draw_scale_bar", false]], "draw_scale_bar() (nilearn.plotting.displays.glassbrainaxes method)": [[401, "nilearn.plotting.displays.GlassBrainAxes.draw_scale_bar", false]], "eeg": [[181, "term-EEG", true]], "effect_size() (nilearn.glm.contrast method)": [[324, "nilearn.glm.Contrast.effect_size", false]], "effect_variance() (nilearn.glm.contrast method)": [[324, "nilearn.glm.Contrast.effect_variance", false]], "epi": [[181, "term-EPI", true]], "erosion": [[181, "term-Erosion", true]], "expression_to_contrast_vector() (in module nilearn.glm)": [[334, "nilearn.glm.expression_to_contrast_vector", false]], "faces": [[181, "term-faces", true]], "faces (nilearn.experimental.surface.filemesh property)": [[312, "nilearn.experimental.surface.FileMesh.faces", false]], "faces (nilearn.experimental.surface.inmemorymesh attribute)": [[313, "nilearn.experimental.surface.InMemoryMesh.faces", false]], "faces (nilearn.experimental.surface.mesh attribute)": [[314, "nilearn.experimental.surface.Mesh.faces", false]], "fcontrast() (nilearn.glm.likelihoodmodelresults method)": [[326, "nilearn.glm.LikelihoodModelResults.Fcontrast", false]], "fcontrast() (nilearn.glm.regressionresults method)": [[328, "nilearn.glm.RegressionResults.Fcontrast", false]], "fcontrast() (nilearn.glm.simpleregressionresults method)": [[329, "nilearn.glm.SimpleRegressionResults.Fcontrast", false]], "fcontrastresults (class in nilearn.glm)": [[325, "nilearn.glm.FContrastResults", false]], "fdr correction": [[181, "term-FDR-correction", true]], "fdr_threshold() (in module nilearn.glm)": [[335, "nilearn.glm.fdr_threshold", false]], "fetch_abide_pcp() (in module nilearn.datasets)": [[242, "nilearn.datasets.fetch_abide_pcp", false]], "fetch_adhd() (in module nilearn.datasets)": [[243, "nilearn.datasets.fetch_adhd", false]], "fetch_atlas_aal() (in module nilearn.datasets)": [[244, "nilearn.datasets.fetch_atlas_aal", false]], "fetch_atlas_allen_2011() (in module nilearn.datasets)": [[245, "nilearn.datasets.fetch_atlas_allen_2011", false]], "fetch_atlas_basc_multiscale_2015() (in module nilearn.datasets)": [[246, "nilearn.datasets.fetch_atlas_basc_multiscale_2015", false]], "fetch_atlas_craddock_2012() (in module nilearn.datasets)": [[247, "nilearn.datasets.fetch_atlas_craddock_2012", false]], "fetch_atlas_destrieux_2009() (in module nilearn.datasets)": [[248, "nilearn.datasets.fetch_atlas_destrieux_2009", false]], "fetch_atlas_difumo() (in module nilearn.datasets)": [[249, "nilearn.datasets.fetch_atlas_difumo", false]], "fetch_atlas_harvard_oxford() (in module nilearn.datasets)": [[250, "nilearn.datasets.fetch_atlas_harvard_oxford", false]], "fetch_atlas_juelich() (in module nilearn.datasets)": [[251, "nilearn.datasets.fetch_atlas_juelich", false]], "fetch_atlas_msdl() (in module nilearn.datasets)": [[252, "nilearn.datasets.fetch_atlas_msdl", false]], "fetch_atlas_pauli_2017() (in module nilearn.datasets)": [[253, "nilearn.datasets.fetch_atlas_pauli_2017", false]], "fetch_atlas_schaefer_2018() (in module nilearn.datasets)": [[254, "nilearn.datasets.fetch_atlas_schaefer_2018", false]], "fetch_atlas_smith_2009() (in module nilearn.datasets)": [[255, "nilearn.datasets.fetch_atlas_smith_2009", false]], "fetch_atlas_surf_destrieux() (in module nilearn.datasets)": [[256, "nilearn.datasets.fetch_atlas_surf_destrieux", false]], "fetch_atlas_talairach() (in module nilearn.datasets)": [[257, "nilearn.datasets.fetch_atlas_talairach", false]], "fetch_atlas_yeo_2011() (in module nilearn.datasets)": [[258, "nilearn.datasets.fetch_atlas_yeo_2011", false]], "fetch_bids_langloc_dataset() (in module nilearn.datasets)": [[259, "nilearn.datasets.fetch_bids_langloc_dataset", false]], "fetch_coords_dosenbach_2010() (in module nilearn.datasets)": [[260, "nilearn.datasets.fetch_coords_dosenbach_2010", false]], "fetch_coords_power_2011() (in module nilearn.datasets)": [[261, "nilearn.datasets.fetch_coords_power_2011", false]], "fetch_coords_seitzman_2018() (in module nilearn.datasets)": [[262, "nilearn.datasets.fetch_coords_seitzman_2018", false]], "fetch_destrieux() (in module nilearn.experimental.surface)": [[319, "nilearn.experimental.surface.fetch_destrieux", false]], "fetch_development_fmri() (in module nilearn.datasets)": [[263, "nilearn.datasets.fetch_development_fmri", false]], "fetch_ds000030_urls() (in module nilearn.datasets)": [[264, "nilearn.datasets.fetch_ds000030_urls", false]], "fetch_fiac_first_level() (in module nilearn.datasets)": [[265, "nilearn.datasets.fetch_fiac_first_level", false]], "fetch_haxby() (in module nilearn.datasets)": [[266, "nilearn.datasets.fetch_haxby", false]], "fetch_icbm152_2009() (in module nilearn.datasets)": [[267, "nilearn.datasets.fetch_icbm152_2009", false]], "fetch_icbm152_brain_gm_mask() (in module nilearn.datasets)": [[268, "nilearn.datasets.fetch_icbm152_brain_gm_mask", false]], "fetch_language_localizer_demo_dataset() (in module nilearn.datasets)": [[269, "nilearn.datasets.fetch_language_localizer_demo_dataset", false]], "fetch_localizer_button_task() (in module nilearn.datasets)": [[270, "nilearn.datasets.fetch_localizer_button_task", false]], "fetch_localizer_calculation_task() (in module nilearn.datasets)": [[271, "nilearn.datasets.fetch_localizer_calculation_task", false]], "fetch_localizer_contrasts() (in module nilearn.datasets)": [[272, "nilearn.datasets.fetch_localizer_contrasts", false]], "fetch_localizer_first_level() (in module nilearn.datasets)": [[273, "nilearn.datasets.fetch_localizer_first_level", false]], "fetch_megatrawls_netmats() (in module nilearn.datasets)": [[274, "nilearn.datasets.fetch_megatrawls_netmats", false]], "fetch_mixed_gambles() (in module nilearn.datasets)": [[275, "nilearn.datasets.fetch_mixed_gambles", false]], "fetch_miyawaki2008() (in module nilearn.datasets)": [[276, "nilearn.datasets.fetch_miyawaki2008", false]], "fetch_neurovault() (in module nilearn.datasets)": [[277, "nilearn.datasets.fetch_neurovault", false]], "fetch_neurovault_auditory_computation_task() (in module nilearn.datasets)": [[278, "nilearn.datasets.fetch_neurovault_auditory_computation_task", false]], "fetch_neurovault_ids() (in module nilearn.datasets)": [[279, "nilearn.datasets.fetch_neurovault_ids", false]], "fetch_neurovault_motor_task() (in module nilearn.datasets)": [[280, "nilearn.datasets.fetch_neurovault_motor_task", false]], "fetch_nki() (in module nilearn.experimental.surface)": [[320, "nilearn.experimental.surface.fetch_nki", false]], "fetch_oasis_vbm() (in module nilearn.datasets)": [[281, "nilearn.datasets.fetch_oasis_vbm", false]], "fetch_openneuro_dataset() (in module nilearn.datasets)": [[282, "nilearn.datasets.fetch_openneuro_dataset", false]], "fetch_openneuro_dataset_index() (in module nilearn.datasets)": [[283, "nilearn.datasets.fetch_openneuro_dataset_index", false]], "fetch_spm_auditory() (in module nilearn.datasets)": [[284, "nilearn.datasets.fetch_spm_auditory", false]], "fetch_spm_multimodal_fmri() (in module nilearn.datasets)": [[285, "nilearn.datasets.fetch_spm_multimodal_fmri", false]], "fetch_surf_fsaverage() (in module nilearn.datasets)": [[286, "nilearn.datasets.fetch_surf_fsaverage", false]], "fetch_surf_nki_enhanced() (in module nilearn.datasets)": [[287, "nilearn.datasets.fetch_surf_nki_enhanced", false]], "file_path (nilearn.experimental.surface.filemesh attribute)": [[312, "nilearn.experimental.surface.FileMesh.file_path", false]], "filemesh (class in nilearn.experimental.surface)": [[312, "nilearn.experimental.surface.FileMesh", false]], "find_cut_coords() (nilearn.plotting.displays.baseslicer static method)": [[399, "nilearn.plotting.displays.BaseSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lprojector class method)": [[402, "nilearn.plotting.displays.LProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lrprojector class method)": [[403, "nilearn.plotting.displays.LRProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lyrprojector class method)": [[404, "nilearn.plotting.displays.LYRProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lyrzprojector class method)": [[405, "nilearn.plotting.displays.LYRZProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lzrprojector class method)": [[406, "nilearn.plotting.displays.LZRProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lzryprojector class method)": [[407, "nilearn.plotting.displays.LZRYProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.mosaicslicer class method)": [[408, "nilearn.plotting.displays.MosaicSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.orthoprojector class method)": [[409, "nilearn.plotting.displays.OrthoProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.orthoslicer class method)": [[410, "nilearn.plotting.displays.OrthoSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.rprojector class method)": [[412, "nilearn.plotting.displays.RProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.tiledslicer class method)": [[413, "nilearn.plotting.displays.TiledSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.xprojector class method)": [[414, "nilearn.plotting.displays.XProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.xslicer class method)": [[415, "nilearn.plotting.displays.XSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.xzprojector class method)": [[416, "nilearn.plotting.displays.XZProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.xzslicer class method)": [[417, "nilearn.plotting.displays.XZSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yprojector class method)": [[418, "nilearn.plotting.displays.YProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yslicer class method)": [[419, "nilearn.plotting.displays.YSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yxprojector class method)": [[420, "nilearn.plotting.displays.YXProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yxslicer class method)": [[421, "nilearn.plotting.displays.YXSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yzprojector class method)": [[422, "nilearn.plotting.displays.YZProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yzslicer class method)": [[423, "nilearn.plotting.displays.YZSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.zprojector class method)": [[424, "nilearn.plotting.displays.ZProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.zslicer class method)": [[425, "nilearn.plotting.displays.ZSlicer.find_cut_coords", false]], "find_cut_slices() (in module nilearn.plotting)": [[428, "nilearn.plotting.find_cut_slices", false]], "find_parcellation_cut_coords() (in module nilearn.plotting)": [[429, "nilearn.plotting.find_parcellation_cut_coords", false]], "find_probabilistic_atlas_cut_coords() (in module nilearn.plotting)": [[430, "nilearn.plotting.find_probabilistic_atlas_cut_coords", false]], "find_xyz_cut_coords() (in module nilearn.plotting)": [[431, "nilearn.plotting.find_xyz_cut_coords", false]], "fir": [[181, "term-FIR", true]], "first_level_from_bids() (in module nilearn.glm.first_level)": [[339, "nilearn.glm.first_level.first_level_from_bids", false]], "firstlevelmodel (class in nilearn.glm.first_level)": [[336, "nilearn.glm.first_level.FirstLevelModel", false]], "fit() (nilearn.connectome.connectivitymeasure method)": [[234, "nilearn.connectome.ConnectivityMeasure.fit", false]], "fit() (nilearn.connectome.groupsparsecovariance method)": [[235, "nilearn.connectome.GroupSparseCovariance.fit", false]], "fit() (nilearn.connectome.groupsparsecovariancecv method)": [[236, "nilearn.connectome.GroupSparseCovarianceCV.fit", false]], "fit() (nilearn.decoding.decoder method)": [[298, "nilearn.decoding.Decoder.fit", false]], "fit() (nilearn.decoding.decoderregressor method)": [[299, "nilearn.decoding.DecoderRegressor.fit", false]], "fit() (nilearn.decoding.fremclassifier method)": [[300, "nilearn.decoding.FREMClassifier.fit", false]], "fit() (nilearn.decoding.fremregressor method)": [[301, "nilearn.decoding.FREMRegressor.fit", false]], "fit() (nilearn.decoding.searchlight method)": [[302, "nilearn.decoding.SearchLight.fit", false]], "fit() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.fit", false]], "fit() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.fit", false]], "fit() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.fit", false]], "fit() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.fit", false]], "fit() (nilearn.experimental.surface.surfacelabelsmasker method)": [[317, "nilearn.experimental.surface.SurfaceLabelsMasker.fit", false]], "fit() (nilearn.experimental.surface.surfacemasker method)": [[318, "nilearn.experimental.surface.SurfaceMasker.fit", false]], "fit() (nilearn.glm.armodel method)": [[323, "nilearn.glm.ARModel.fit", false]], "fit() (nilearn.glm.first_level.firstlevelmodel method)": [[336, "nilearn.glm.first_level.FirstLevelModel.fit", false]], "fit() (nilearn.glm.olsmodel method)": [[327, "nilearn.glm.OLSModel.fit", false]], "fit() (nilearn.glm.second_level.secondlevelmodel method)": [[349, "nilearn.glm.second_level.SecondLevelModel.fit", false]], "fit() (nilearn.maskers.multiniftilabelsmasker method)": [[381, "nilearn.maskers.MultiNiftiLabelsMasker.fit", false]], "fit() (nilearn.maskers.multiniftimapsmasker method)": [[382, "nilearn.maskers.MultiNiftiMapsMasker.fit", false]], "fit() (nilearn.maskers.multiniftimasker method)": [[383, "nilearn.maskers.MultiNiftiMasker.fit", false]], "fit() (nilearn.maskers.niftilabelsmasker method)": [[384, "nilearn.maskers.NiftiLabelsMasker.fit", false]], "fit() (nilearn.maskers.niftimapsmasker method)": [[385, "nilearn.maskers.NiftiMapsMasker.fit", false]], "fit() (nilearn.maskers.niftimasker method)": [[386, "nilearn.maskers.NiftiMasker.fit", false]], "fit() (nilearn.maskers.niftispheresmasker method)": [[387, "nilearn.maskers.NiftiSpheresMasker.fit", false]], "fit() (nilearn.regions.hierarchicalkmeans method)": [[458, "nilearn.regions.HierarchicalKMeans.fit", false]], "fit() (nilearn.regions.parcellations method)": [[459, "nilearn.regions.Parcellations.fit", false]], "fit() (nilearn.regions.regionextractor method)": [[461, "nilearn.regions.RegionExtractor.fit", false]], "fit() (nilearn.regions.rena method)": [[460, "nilearn.regions.ReNA.fit", false]], "fit_predict() (nilearn.regions.hierarchicalkmeans method)": [[458, "nilearn.regions.HierarchicalKMeans.fit_predict", false]], "fit_predict() (nilearn.regions.rena method)": [[460, "nilearn.regions.ReNA.fit_predict", false]], "fit_transform() (nilearn.connectome.connectivitymeasure method)": [[234, "nilearn.connectome.ConnectivityMeasure.fit_transform", false]], "fit_transform() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.fit_transform", false]], "fit_transform() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.fit_transform", false]], "fit_transform() (nilearn.experimental.surface.surfacelabelsmasker method)": [[317, "nilearn.experimental.surface.SurfaceLabelsMasker.fit_transform", false]], "fit_transform() (nilearn.experimental.surface.surfacemasker method)": [[318, "nilearn.experimental.surface.SurfaceMasker.fit_transform", false]], "fit_transform() (nilearn.glm.first_level.firstlevelmodel method)": [[336, "nilearn.glm.first_level.FirstLevelModel.fit_transform", false]], "fit_transform() (nilearn.glm.second_level.secondlevelmodel method)": [[349, "nilearn.glm.second_level.SecondLevelModel.fit_transform", false]], "fit_transform() (nilearn.maskers.basemasker method)": [[380, "nilearn.maskers.BaseMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[381, "nilearn.maskers.MultiNiftiLabelsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.multiniftimapsmasker method)": [[382, "nilearn.maskers.MultiNiftiMapsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.multiniftimasker method)": [[383, "nilearn.maskers.MultiNiftiMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.niftilabelsmasker method)": [[384, "nilearn.maskers.NiftiLabelsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.niftimapsmasker method)": [[385, "nilearn.maskers.NiftiMapsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.niftimasker method)": [[386, "nilearn.maskers.NiftiMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.niftispheresmasker method)": [[387, "nilearn.maskers.NiftiSpheresMasker.fit_transform", false]], "fit_transform() (nilearn.regions.hierarchicalkmeans method)": [[458, "nilearn.regions.HierarchicalKMeans.fit_transform", false]], "fit_transform() (nilearn.regions.parcellations method)": [[459, "nilearn.regions.Parcellations.fit_transform", false]], "fit_transform() (nilearn.regions.regionextractor method)": [[461, "nilearn.regions.RegionExtractor.fit_transform", false]], "fit_transform() (nilearn.regions.rena method)": [[460, "nilearn.regions.ReNA.fit_transform", false]], "fmri": [[181, "term-fMRI", true]], "fmriprep": [[181, "term-fMRIPrep", true]], "fpr correction": [[181, "term-FPR-correction", true]], "frem": [[181, "term-FREM", true]], "fremclassifier (class in nilearn.decoding)": [[300, "nilearn.decoding.FREMClassifier", false]], "fremregressor (class in nilearn.decoding)": [[301, "nilearn.decoding.FREMRegressor", false]], "functional connectivity": [[181, "term-functional-connectivity", true]], "functional connectome": [[181, "term-functional-connectome", true]], "fwer correction": [[181, "term-FWER-correction", true]], "fwhm": [[181, "term-FWHM", true]], "generate_report() (nilearn.glm.first_level.firstlevelmodel method)": [[336, "nilearn.glm.first_level.FirstLevelModel.generate_report", false]], "generate_report() (nilearn.glm.second_level.secondlevelmodel method)": [[349, "nilearn.glm.second_level.SecondLevelModel.generate_report", false]], "generate_report() (nilearn.maskers.multiniftilabelsmasker method)": [[381, "nilearn.maskers.MultiNiftiLabelsMasker.generate_report", false]], "generate_report() (nilearn.maskers.multiniftimapsmasker method)": [[382, "nilearn.maskers.MultiNiftiMapsMasker.generate_report", false]], "generate_report() (nilearn.maskers.multiniftimasker method)": [[383, "nilearn.maskers.MultiNiftiMasker.generate_report", false]], "generate_report() (nilearn.maskers.niftilabelsmasker method)": [[384, "nilearn.maskers.NiftiLabelsMasker.generate_report", false]], "generate_report() (nilearn.maskers.niftimapsmasker method)": [[385, "nilearn.maskers.NiftiMapsMasker.generate_report", false]], "generate_report() (nilearn.maskers.niftimasker method)": [[386, "nilearn.maskers.NiftiMasker.generate_report", false]], "generate_report() (nilearn.maskers.niftispheresmasker method)": [[387, "nilearn.maskers.NiftiSpheresMasker.generate_report", false]], "generate_report() (nilearn.regions.regionextractor method)": [[461, "nilearn.regions.RegionExtractor.generate_report", false]], "get_bids_files() (in module nilearn.interfaces.bids)": [[374, "nilearn.interfaces.bids.get_bids_files", false]], "get_clusters_table() (in module nilearn.reporting)": [[470, "nilearn.reporting.get_clusters_table", false]], "get_data() (in module nilearn.image)": [[359, "nilearn.image.get_data", false]], "get_data_dirs() (in module nilearn.datasets)": [[288, "nilearn.datasets.get_data_dirs", false]], "get_design_from_fslmat() (in module nilearn.interfaces.fsl)": [[379, "nilearn.interfaces.fsl.get_design_from_fslmat", false]], "get_iframe() (nilearn.reporting.htmlreport method)": [[469, "nilearn.reporting.HTMLReport.get_iframe", false]], "get_metadata_routing() (nilearn.connectome.connectivitymeasure method)": [[234, "nilearn.connectome.ConnectivityMeasure.get_metadata_routing", false]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariance method)": [[235, "nilearn.connectome.GroupSparseCovariance.get_metadata_routing", false]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariancecv method)": [[236, "nilearn.connectome.GroupSparseCovarianceCV.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.decoder method)": [[298, "nilearn.decoding.Decoder.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.decoderregressor method)": [[299, "nilearn.decoding.DecoderRegressor.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.fremclassifier method)": [[300, "nilearn.decoding.FREMClassifier.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.fremregressor method)": [[301, "nilearn.decoding.FREMRegressor.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.searchlight method)": [[302, "nilearn.decoding.SearchLight.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.get_metadata_routing", false]], "get_metadata_routing() (nilearn.experimental.surface.surfacemasker method)": [[318, "nilearn.experimental.surface.SurfaceMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.glm.first_level.firstlevelmodel method)": [[336, "nilearn.glm.first_level.FirstLevelModel.get_metadata_routing", false]], "get_metadata_routing() (nilearn.glm.second_level.secondlevelmodel method)": [[349, "nilearn.glm.second_level.SecondLevelModel.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.basemasker method)": [[380, "nilearn.maskers.BaseMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.multiniftilabelsmasker method)": [[381, "nilearn.maskers.MultiNiftiLabelsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.multiniftimapsmasker method)": [[382, "nilearn.maskers.MultiNiftiMapsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.multiniftimasker method)": [[383, "nilearn.maskers.MultiNiftiMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.niftilabelsmasker method)": [[384, "nilearn.maskers.NiftiLabelsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.niftimapsmasker method)": [[385, "nilearn.maskers.NiftiMapsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.niftimasker method)": [[386, "nilearn.maskers.NiftiMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.niftispheresmasker method)": [[387, "nilearn.maskers.NiftiSpheresMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.regions.hierarchicalkmeans method)": [[458, "nilearn.regions.HierarchicalKMeans.get_metadata_routing", false]], "get_metadata_routing() (nilearn.regions.parcellations method)": [[459, "nilearn.regions.Parcellations.get_metadata_routing", false]], "get_metadata_routing() (nilearn.regions.regionextractor method)": [[461, "nilearn.regions.RegionExtractor.get_metadata_routing", false]], "get_metadata_routing() (nilearn.regions.rena method)": [[460, "nilearn.regions.ReNA.get_metadata_routing", false]], "get_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[398, "nilearn.plotting.displays.BaseAxes.get_object_bounds", false]], "get_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[400, "nilearn.plotting.displays.CutAxes.get_object_bounds", false]], "get_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[401, "nilearn.plotting.displays.GlassBrainAxes.get_object_bounds", false]], "get_params() (nilearn.connectome.connectivitymeasure method)": [[234, "nilearn.connectome.ConnectivityMeasure.get_params", false]], "get_params() (nilearn.connectome.groupsparsecovariance method)": [[235, "nilearn.connectome.GroupSparseCovariance.get_params", false]], "get_params() (nilearn.connectome.groupsparsecovariancecv method)": [[236, "nilearn.connectome.GroupSparseCovarianceCV.get_params", false]], "get_params() (nilearn.decoding.decoder method)": [[298, "nilearn.decoding.Decoder.get_params", false]], "get_params() (nilearn.decoding.decoderregressor method)": [[299, "nilearn.decoding.DecoderRegressor.get_params", false]], "get_params() (nilearn.decoding.fremclassifier method)": [[300, "nilearn.decoding.FREMClassifier.get_params", false]], "get_params() (nilearn.decoding.fremregressor method)": [[301, "nilearn.decoding.FREMRegressor.get_params", false]], "get_params() (nilearn.decoding.searchlight method)": [[302, "nilearn.decoding.SearchLight.get_params", false]], "get_params() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.get_params", false]], "get_params() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.get_params", false]], "get_params() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.get_params", false]], "get_params() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.get_params", false]], "get_params() (nilearn.experimental.surface.surfacemasker method)": [[318, "nilearn.experimental.surface.SurfaceMasker.get_params", false]], "get_params() (nilearn.glm.first_level.firstlevelmodel method)": [[336, "nilearn.glm.first_level.FirstLevelModel.get_params", false]], "get_params() (nilearn.glm.second_level.secondlevelmodel method)": [[349, "nilearn.glm.second_level.SecondLevelModel.get_params", false]], "get_params() (nilearn.maskers.basemasker method)": [[380, "nilearn.maskers.BaseMasker.get_params", false]], "get_params() (nilearn.maskers.multiniftilabelsmasker method)": [[381, "nilearn.maskers.MultiNiftiLabelsMasker.get_params", false]], "get_params() (nilearn.maskers.multiniftimapsmasker method)": [[382, "nilearn.maskers.MultiNiftiMapsMasker.get_params", false]], "get_params() (nilearn.maskers.multiniftimasker method)": [[383, "nilearn.maskers.MultiNiftiMasker.get_params", false]], "get_params() (nilearn.maskers.niftilabelsmasker method)": [[384, "nilearn.maskers.NiftiLabelsMasker.get_params", false]], "get_params() (nilearn.maskers.niftimapsmasker method)": [[385, "nilearn.maskers.NiftiMapsMasker.get_params", false]], "get_params() (nilearn.maskers.niftimasker method)": [[386, "nilearn.maskers.NiftiMasker.get_params", false]], "get_params() (nilearn.maskers.niftispheresmasker method)": [[387, "nilearn.maskers.NiftiSpheresMasker.get_params", false]], "get_params() (nilearn.regions.hierarchicalkmeans method)": [[458, "nilearn.regions.HierarchicalKMeans.get_params", false]], "get_params() (nilearn.regions.parcellations method)": [[459, "nilearn.regions.Parcellations.get_params", false]], "get_params() (nilearn.regions.regionextractor method)": [[461, "nilearn.regions.RegionExtractor.get_params", false]], "get_params() (nilearn.regions.rena method)": [[460, "nilearn.regions.ReNA.get_params", false]], "get_projector() (in module nilearn.plotting.displays)": [[426, "nilearn.plotting.displays.get_projector", false]], "get_slicer() (in module nilearn.plotting.displays)": [[427, "nilearn.plotting.displays.get_slicer", false]], "get_standalone() (nilearn.reporting.htmlreport method)": [[469, "nilearn.reporting.HTMLReport.get_standalone", false]], "glassbrainaxes (class in nilearn.plotting.displays)": [[401, "nilearn.plotting.displays.GlassBrainAxes", false]], "glm": [[181, "term-GLM", true]], "glover_dispersion_derivative() (in module nilearn.glm.first_level)": [[340, "nilearn.glm.first_level.glover_dispersion_derivative", false]], "glover_hrf() (in module nilearn.glm.first_level)": [[341, "nilearn.glm.first_level.glover_hrf", false]], "glover_time_derivative() (in module nilearn.glm.first_level)": [[342, "nilearn.glm.first_level.glover_time_derivative", false]], "group_sparse_covariance() (in module nilearn.connectome)": [[238, "nilearn.connectome.group_sparse_covariance", false]], "groupsparsecovariance (class in nilearn.connectome)": [[235, "nilearn.connectome.GroupSparseCovariance", false]], "groupsparsecovariancecv (class in nilearn.connectome)": [[236, "nilearn.connectome.GroupSparseCovarianceCV", false]], "hierarchicalkmeans (class in nilearn.regions)": [[458, "nilearn.regions.HierarchicalKMeans", false]], "high_variance_confounds() (in module nilearn.image)": [[360, "nilearn.image.high_variance_confounds", false]], "high_variance_confounds() (in module nilearn.signal)": [[474, "nilearn.signal.high_variance_confounds", false]], "hrf": [[181, "term-HRF", true]], "htmlreport (class in nilearn.reporting)": [[469, "nilearn.reporting.HTMLReport", false]], "ica": [[181, "term-ICA", true]], "img_to_signals_labels() (in module nilearn.regions)": [[464, "nilearn.regions.img_to_signals_labels", false]], "img_to_signals_maps() (in module nilearn.regions)": [[465, "nilearn.regions.img_to_signals_maps", false]], "index_img() (in module nilearn.image)": [[361, "nilearn.image.index_img", false]], "init_with_figure() (nilearn.plotting.displays.baseslicer class method)": [[399, "nilearn.plotting.displays.BaseSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lprojector class method)": [[402, "nilearn.plotting.displays.LProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lrprojector class method)": [[403, "nilearn.plotting.displays.LRProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lyrprojector class method)": [[404, "nilearn.plotting.displays.LYRProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lyrzprojector class method)": [[405, "nilearn.plotting.displays.LYRZProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lzrprojector class method)": [[406, "nilearn.plotting.displays.LZRProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lzryprojector class method)": [[407, "nilearn.plotting.displays.LZRYProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.mosaicslicer class method)": [[408, "nilearn.plotting.displays.MosaicSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.orthoprojector class method)": [[409, "nilearn.plotting.displays.OrthoProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.orthoslicer class method)": [[410, "nilearn.plotting.displays.OrthoSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.rprojector class method)": [[412, "nilearn.plotting.displays.RProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.tiledslicer class method)": [[413, "nilearn.plotting.displays.TiledSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.xprojector class method)": [[414, "nilearn.plotting.displays.XProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.xslicer class method)": [[415, "nilearn.plotting.displays.XSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.xzprojector class method)": [[416, "nilearn.plotting.displays.XZProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.xzslicer class method)": [[417, "nilearn.plotting.displays.XZSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yprojector class method)": [[418, "nilearn.plotting.displays.YProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yslicer class method)": [[419, "nilearn.plotting.displays.YSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yxprojector class method)": [[420, "nilearn.plotting.displays.YXProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yxslicer class method)": [[421, "nilearn.plotting.displays.YXSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yzprojector class method)": [[422, "nilearn.plotting.displays.YZProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yzslicer class method)": [[423, "nilearn.plotting.displays.YZSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.zprojector class method)": [[424, "nilearn.plotting.displays.ZProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.zslicer class method)": [[425, "nilearn.plotting.displays.ZSlicer.init_with_figure", false]], "initialize() (nilearn.glm.armodel method)": [[323, "nilearn.glm.ARModel.initialize", false]], "initialize() (nilearn.glm.olsmodel method)": [[327, "nilearn.glm.OLSModel.initialize", false]], "inmemorymesh (class in nilearn.experimental.surface)": [[313, "nilearn.experimental.surface.InMemoryMesh", false]], "intersect_masks() (in module nilearn.masking)": [[395, "nilearn.masking.intersect_masks", false]], "inverse_transform() (nilearn.connectome.connectivitymeasure method)": [[234, "nilearn.connectome.ConnectivityMeasure.inverse_transform", false]], "inverse_transform() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.inverse_transform", false]], "inverse_transform() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.inverse_transform", false]], "inverse_transform() (nilearn.experimental.surface.surfacelabelsmasker method)": [[317, "nilearn.experimental.surface.SurfaceLabelsMasker.inverse_transform", false]], "inverse_transform() (nilearn.experimental.surface.surfacemasker method)": [[318, "nilearn.experimental.surface.SurfaceMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.basemasker method)": [[380, "nilearn.maskers.BaseMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[381, "nilearn.maskers.MultiNiftiLabelsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.multiniftimapsmasker method)": [[382, "nilearn.maskers.MultiNiftiMapsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.multiniftimasker method)": [[383, "nilearn.maskers.MultiNiftiMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.niftilabelsmasker method)": [[384, "nilearn.maskers.NiftiLabelsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.niftimapsmasker method)": [[385, "nilearn.maskers.NiftiMapsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.niftimasker method)": [[386, "nilearn.maskers.NiftiMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.niftispheresmasker method)": [[387, "nilearn.maskers.NiftiSpheresMasker.inverse_transform", false]], "inverse_transform() (nilearn.regions.hierarchicalkmeans method)": [[458, "nilearn.regions.HierarchicalKMeans.inverse_transform", false]], "inverse_transform() (nilearn.regions.parcellations method)": [[459, "nilearn.regions.Parcellations.inverse_transform", false]], "inverse_transform() (nilearn.regions.regionextractor method)": [[461, "nilearn.regions.RegionExtractor.inverse_transform", false]], "inverse_transform() (nilearn.regions.rena method)": [[460, "nilearn.regions.ReNA.inverse_transform", false]], "iter_img() (in module nilearn.image)": [[362, "nilearn.image.iter_img", false]], "label_names (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[317, "nilearn.experimental.surface.SurfaceLabelsMasker.label_names", false]], "label_names_ (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[317, "nilearn.experimental.surface.SurfaceLabelsMasker.label_names_", false]], "labels_ (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[317, "nilearn.experimental.surface.SurfaceLabelsMasker.labels_", false]], "labels_data_ (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[317, "nilearn.experimental.surface.SurfaceLabelsMasker.labels_data_", false]], "labels_img (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[317, "nilearn.experimental.surface.SurfaceLabelsMasker.labels_img", false]], "largest_connected_component_img() (in module nilearn.image)": [[363, "nilearn.image.largest_connected_component_img", false]], "likelihoodmodelresults (class in nilearn.glm)": [[326, "nilearn.glm.LikelihoodModelResults", false]], "load_confounds() (in module nilearn.interfaces.fmriprep)": [[377, "nilearn.interfaces.fmriprep.load_confounds", false]], "load_confounds_strategy() (in module nilearn.interfaces.fmriprep)": [[378, "nilearn.interfaces.fmriprep.load_confounds_strategy", false]], "load_fsaverage() (in module nilearn.experimental.surface)": [[321, "nilearn.experimental.surface.load_fsaverage", false]], "load_fsaverage_data() (in module nilearn.experimental.surface)": [[322, "nilearn.experimental.surface.load_fsaverage_data", false]], "load_img() (in module nilearn.image)": [[364, "nilearn.image.load_img", false]], "load_mni152_brain_mask() (in module nilearn.datasets)": [[289, "nilearn.datasets.load_mni152_brain_mask", false]], "load_mni152_gm_mask() (in module nilearn.datasets)": [[290, "nilearn.datasets.load_mni152_gm_mask", false]], "load_mni152_gm_template() (in module nilearn.datasets)": [[291, "nilearn.datasets.load_mni152_gm_template", false]], "load_mni152_template() (in module nilearn.datasets)": [[292, "nilearn.datasets.load_mni152_template", false]], "load_mni152_wm_mask() (in module nilearn.datasets)": [[293, "nilearn.datasets.load_mni152_wm_mask", false]], "load_mni152_wm_template() (in module nilearn.datasets)": [[294, "nilearn.datasets.load_mni152_wm_template", false]], "load_sample_motor_activation_image() (in module nilearn.datasets)": [[295, "nilearn.datasets.load_sample_motor_activation_image", false]], "load_surf_data() (in module nilearn.surface)": [[475, "nilearn.surface.load_surf_data", false]], "load_surf_mesh() (in module nilearn.surface)": [[476, "nilearn.surface.load_surf_mesh", false]], "loaded() (nilearn.experimental.surface.filemesh method)": [[312, "nilearn.experimental.surface.FileMesh.loaded", false]], "logl() (nilearn.glm.armodel method)": [[323, "nilearn.glm.ARModel.logL", false]], "logl() (nilearn.glm.likelihoodmodelresults method)": [[326, "nilearn.glm.LikelihoodModelResults.logL", false]], "logl() (nilearn.glm.olsmodel method)": [[327, "nilearn.glm.OLSModel.logL", false]], "logl() (nilearn.glm.regressionresults method)": [[328, "nilearn.glm.RegressionResults.logL", false]], "logl() (nilearn.glm.simpleregressionresults method)": [[329, "nilearn.glm.SimpleRegressionResults.logL", false]], "lprojector (class in nilearn.plotting.displays)": [[402, "nilearn.plotting.displays.LProjector", false]], "lrprojector (class in nilearn.plotting.displays)": [[403, "nilearn.plotting.displays.LRProjector", false]], "lyrprojector (class in nilearn.plotting.displays)": [[404, "nilearn.plotting.displays.LYRProjector", false]], "lyrzprojector (class in nilearn.plotting.displays)": [[405, "nilearn.plotting.displays.LYRZProjector", false]], "lzrprojector (class in nilearn.plotting.displays)": [[406, "nilearn.plotting.displays.LZRProjector", false]], "lzryprojector (class in nilearn.plotting.displays)": [[407, "nilearn.plotting.displays.LZRYProjector", false]], "make_first_level_design_matrix() (in module nilearn.glm.first_level)": [[343, "nilearn.glm.first_level.make_first_level_design_matrix", false]], "make_glm_report() (in module nilearn.reporting)": [[471, "nilearn.reporting.make_glm_report", false]], "make_second_level_design_matrix() (in module nilearn.glm.second_level)": [[350, "nilearn.glm.second_level.make_second_level_design_matrix", false]], "mask_img (nilearn.experimental.surface.surfacemasker attribute)": [[318, "nilearn.experimental.surface.SurfaceMasker.mask_img", false]], "mask_img_ (nilearn.experimental.surface.surfacemasker attribute)": [[318, "nilearn.experimental.surface.SurfaceMasker.mask_img_", false]], "math_img() (in module nilearn.image)": [[365, "nilearn.image.math_img", false]], "mean_img() (in module nilearn.image)": [[366, "nilearn.image.mean_img", false]], "mean_scaling() (in module nilearn.glm.first_level)": [[344, "nilearn.glm.first_level.mean_scaling", false]], "meg": [[181, "term-MEG", true]], "mesh": [[181, "term-mesh", true]], "mesh (class in nilearn.experimental.surface)": [[314, "nilearn.experimental.surface.Mesh", false]], "mni": [[181, "term-MNI", true]], "module": [[189, "module-nilearn.connectome", false], [190, "module-nilearn.datasets", false], [191, "module-nilearn.decoding", false], [192, "module-nilearn.decomposition", false], [233, "module-nilearn.experimental", false], [233, "module-nilearn.experimental.plotting", false], [233, "module-nilearn.experimental.surface", false], [480, "module-nilearn.glm", false], [480, "module-nilearn.glm.first_level", false], [480, "module-nilearn.glm.second_level", false], [481, "module-nilearn.image", false], [483, "module-nilearn.interfaces", false], [483, "module-nilearn.interfaces.bids", false], [483, "module-nilearn.interfaces.fmriprep", false], [483, "module-nilearn.interfaces.fsl", false], [484, "module-nilearn.maskers", false], [485, "module-nilearn.masking", false], [486, "module-nilearn.mass_univariate", false], [487, "module-nilearn.plotting", false], [487, "module-nilearn.plotting.displays", false], [488, "module-nilearn.regions", false], [489, "module-nilearn.reporting", false], [490, "module-nilearn.signal", false], [491, "module-nilearn.surface", false]], "mosaicslicer (class in nilearn.plotting.displays)": [[408, "nilearn.plotting.displays.MosaicSlicer", false]], "mse() (nilearn.glm.regressionresults method)": [[328, "nilearn.glm.RegressionResults.MSE", false]], "multiniftilabelsmasker (class in nilearn.maskers)": [[381, "nilearn.maskers.MultiNiftiLabelsMasker", false]], "multiniftimapsmasker (class in nilearn.maskers)": [[382, "nilearn.maskers.MultiNiftiMapsMasker", false]], "multiniftimasker (class in nilearn.maskers)": [[383, "nilearn.maskers.MultiNiftiMasker", false]], "mvpa": [[181, "term-MVPA", true]], "n_vertices (nilearn.experimental.surface.filemesh attribute)": [[312, "nilearn.experimental.surface.FileMesh.n_vertices", false]], "n_vertices (nilearn.experimental.surface.inmemorymesh attribute)": [[313, "nilearn.experimental.surface.InMemoryMesh.n_vertices", false]], "n_vertices (nilearn.experimental.surface.mesh attribute)": [[314, "nilearn.experimental.surface.Mesh.n_vertices", false]], "n_vertices (nilearn.experimental.surface.polymesh attribute)": [[315, "nilearn.experimental.surface.PolyMesh.n_vertices", false]], "neurovault": [[181, "term-Neurovault", true]], "new_img_like() (in module nilearn.image)": [[367, "nilearn.image.new_img_like", false]], "niftilabelsmasker (class in nilearn.maskers)": [[384, "nilearn.maskers.NiftiLabelsMasker", false]], "niftimapsmasker (class in nilearn.maskers)": [[385, "nilearn.maskers.NiftiMapsMasker", false]], "niftimasker (class in nilearn.maskers)": [[386, "nilearn.maskers.NiftiMasker", false]], "niftispheresmasker (class in nilearn.maskers)": [[387, "nilearn.maskers.NiftiSpheresMasker", false]], "nilearn.connectome": [[189, "module-nilearn.connectome", false]], "nilearn.datasets": [[190, "module-nilearn.datasets", false]], "nilearn.decoding": [[191, "module-nilearn.decoding", false]], "nilearn.decomposition": [[192, "module-nilearn.decomposition", false]], "nilearn.experimental": [[233, "module-nilearn.experimental", false]], "nilearn.experimental.plotting": [[233, "module-nilearn.experimental.plotting", false]], "nilearn.experimental.surface": [[233, "module-nilearn.experimental.surface", false]], "nilearn.glm": [[480, "module-nilearn.glm", false]], "nilearn.glm.first_level": [[480, "module-nilearn.glm.first_level", false]], "nilearn.glm.second_level": [[480, "module-nilearn.glm.second_level", false]], "nilearn.image": [[481, "module-nilearn.image", false]], "nilearn.interfaces": [[483, "module-nilearn.interfaces", false]], "nilearn.interfaces.bids": [[483, "module-nilearn.interfaces.bids", false]], "nilearn.interfaces.fmriprep": [[483, "module-nilearn.interfaces.fmriprep", false]], "nilearn.interfaces.fsl": [[483, "module-nilearn.interfaces.fsl", false]], "nilearn.maskers": [[484, "module-nilearn.maskers", false]], "nilearn.masking": [[485, "module-nilearn.masking", false]], "nilearn.mass_univariate": [[486, "module-nilearn.mass_univariate", false]], "nilearn.plotting": [[487, "module-nilearn.plotting", false]], "nilearn.plotting.displays": [[487, "module-nilearn.plotting.displays", false]], "nilearn.regions": [[488, "module-nilearn.regions", false]], "nilearn.reporting": [[489, "module-nilearn.reporting", false]], "nilearn.signal": [[490, "module-nilearn.signal", false]], "nilearn.surface": [[491, "module-nilearn.surface", false]], "non_parametric_inference() (in module nilearn.glm.second_level)": [[351, "nilearn.glm.second_level.non_parametric_inference", false]], "normalized_residuals() (nilearn.glm.regressionresults method)": [[328, "nilearn.glm.RegressionResults.normalized_residuals", false]], "normalized_residuals() (nilearn.glm.simpleregressionresults method)": [[329, "nilearn.glm.SimpleRegressionResults.normalized_residuals", false]], "olsmodel (class in nilearn.glm)": [[327, "nilearn.glm.OLSModel", false]], "one_minus_pvalue() (nilearn.glm.contrast method)": [[324, "nilearn.glm.Contrast.one_minus_pvalue", false]], "open_in_browser() (nilearn.reporting.htmlreport method)": [[469, "nilearn.reporting.HTMLReport.open_in_browser", false]], "opening": [[181, "term-Opening", true]], "orthoprojector (class in nilearn.plotting.displays)": [[409, "nilearn.plotting.displays.OrthoProjector", false]], "orthoslicer (class in nilearn.plotting.displays)": [[410, "nilearn.plotting.displays.OrthoSlicer", false]], "output_dimension_ (nilearn.experimental.surface.surfacemasker attribute)": [[318, "nilearn.experimental.surface.SurfaceMasker.output_dimension_", false]], "p_value() (nilearn.glm.contrast method)": [[324, "nilearn.glm.Contrast.p_value", false]], "parameter estimate": [[181, "term-Parameter-estimate", true]], "parcellation": [[181, "term-parcellation", true]], "parcellations (class in nilearn.regions)": [[459, "nilearn.regions.Parcellations", false]], "parse_bids_filename() (in module nilearn.interfaces.bids)": [[375, "nilearn.interfaces.bids.parse_bids_filename", false]], "patch_openneuro_dataset() (in module nilearn.datasets)": [[296, "nilearn.datasets.patch_openneuro_dataset", false]], "permuted_ols() (in module nilearn.mass_univariate)": [[397, "nilearn.mass_univariate.permuted_ols", false]], "plot_anat() (in module nilearn.plotting)": [[432, "nilearn.plotting.plot_anat", false]], "plot_carpet() (in module nilearn.plotting)": [[433, "nilearn.plotting.plot_carpet", false]], "plot_connectome() (in module nilearn.plotting)": [[434, "nilearn.plotting.plot_connectome", false]], "plot_contrast_matrix() (in module nilearn.plotting)": [[435, "nilearn.plotting.plot_contrast_matrix", false]], "plot_design_matrix() (in module nilearn.plotting)": [[436, "nilearn.plotting.plot_design_matrix", false]], "plot_epi() (in module nilearn.plotting)": [[437, "nilearn.plotting.plot_epi", false]], "plot_event() (in module nilearn.plotting)": [[438, "nilearn.plotting.plot_event", false]], "plot_glass_brain() (in module nilearn.plotting)": [[439, "nilearn.plotting.plot_glass_brain", false]], "plot_img() (in module nilearn.plotting)": [[440, "nilearn.plotting.plot_img", false]], "plot_img_comparison() (in module nilearn.plotting)": [[441, "nilearn.plotting.plot_img_comparison", false]], "plot_img_on_surf() (in module nilearn.plotting)": [[442, "nilearn.plotting.plot_img_on_surf", false]], "plot_markers() (in module nilearn.plotting)": [[443, "nilearn.plotting.plot_markers", false]], "plot_matrix() (in module nilearn.plotting)": [[444, "nilearn.plotting.plot_matrix", false]], "plot_prob_atlas() (in module nilearn.plotting)": [[445, "nilearn.plotting.plot_prob_atlas", false]], "plot_roi() (in module nilearn.plotting)": [[446, "nilearn.plotting.plot_roi", false]], "plot_stat_map() (in module nilearn.plotting)": [[447, "nilearn.plotting.plot_stat_map", false]], "plot_surf() (in module nilearn.experimental.plotting)": [[307, "nilearn.experimental.plotting.plot_surf", false]], "plot_surf() (in module nilearn.plotting)": [[448, "nilearn.plotting.plot_surf", false]], "plot_surf_contours() (in module nilearn.experimental.plotting)": [[308, "nilearn.experimental.plotting.plot_surf_contours", false]], "plot_surf_contours() (in module nilearn.plotting)": [[449, "nilearn.plotting.plot_surf_contours", false]], "plot_surf_roi() (in module nilearn.experimental.plotting)": [[309, "nilearn.experimental.plotting.plot_surf_roi", false]], "plot_surf_roi() (in module nilearn.plotting)": [[450, "nilearn.plotting.plot_surf_roi", false]], "plot_surf_stat_map() (in module nilearn.experimental.plotting)": [[310, "nilearn.experimental.plotting.plot_surf_stat_map", false]], "plot_surf_stat_map() (in module nilearn.plotting)": [[451, "nilearn.plotting.plot_surf_stat_map", false]], "plotlysurfacefigure (class in nilearn.plotting.displays)": [[411, "nilearn.plotting.displays.PlotlySurfaceFigure", false]], "polymesh (class in nilearn.experimental.surface)": [[315, "nilearn.experimental.surface.PolyMesh", false]], "prec_to_partial() (in module nilearn.connectome)": [[239, "nilearn.connectome.prec_to_partial", false]], "predict() (nilearn.decoding.decoder method)": [[298, "nilearn.decoding.Decoder.predict", false]], "predict() (nilearn.decoding.decoderregressor method)": [[299, "nilearn.decoding.DecoderRegressor.predict", false]], "predict() (nilearn.decoding.fremclassifier method)": [[300, "nilearn.decoding.FREMClassifier.predict", false]], "predict() (nilearn.decoding.fremregressor method)": [[301, "nilearn.decoding.FREMRegressor.predict", false]], "predict() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.predict", false]], "predict() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.predict", false]], "predicted() (nilearn.glm.first_level.firstlevelmodel method)": [[336, "nilearn.glm.first_level.FirstLevelModel.predicted", false]], "predicted() (nilearn.glm.regressionresults method)": [[328, "nilearn.glm.RegressionResults.predicted", false]], "predicted() (nilearn.glm.second_level.secondlevelmodel method)": [[349, "nilearn.glm.second_level.SecondLevelModel.predicted", false]], "predicted() (nilearn.glm.simpleregressionresults method)": [[329, "nilearn.glm.SimpleRegressionResults.predicted", false]], "predictive modelling": [[181, "term-predictive-modelling", true]], "probabilistic atlas": [[181, "term-Probabilistic-atlas", true]], "r_square() (nilearn.glm.first_level.firstlevelmodel method)": [[336, "nilearn.glm.first_level.FirstLevelModel.r_square", false]], "r_square() (nilearn.glm.regressionresults method)": [[328, "nilearn.glm.RegressionResults.r_square", false]], "r_square() (nilearn.glm.second_level.secondlevelmodel method)": [[349, "nilearn.glm.second_level.SecondLevelModel.r_square", false]], "recursive_neighbor_agglomeration() (in module nilearn.regions)": [[466, "nilearn.regions.recursive_neighbor_agglomeration", false]], "regionextractor (class in nilearn.regions)": [[461, "nilearn.regions.RegionExtractor", false]], "regression": [[181, "term-regression", true]], "regressionresults (class in nilearn.glm)": [[328, "nilearn.glm.RegressionResults", false]], "rena": [[181, "term-ReNA", true]], "rena (class in nilearn.regions)": [[460, "nilearn.regions.ReNA", false]], "reorder_img() (in module nilearn.image)": [[368, "nilearn.image.reorder_img", false]], "resample_img() (in module nilearn.image)": [[369, "nilearn.image.resample_img", false]], "resample_to_img() (in module nilearn.image)": [[370, "nilearn.image.resample_to_img", false]], "residuals() (nilearn.glm.first_level.firstlevelmodel method)": [[336, "nilearn.glm.first_level.FirstLevelModel.residuals", false]], "residuals() (nilearn.glm.regressionresults method)": [[328, "nilearn.glm.RegressionResults.residuals", false]], "residuals() (nilearn.glm.second_level.secondlevelmodel method)": [[349, "nilearn.glm.second_level.SecondLevelModel.residuals", false]], "residuals() (nilearn.glm.simpleregressionresults method)": [[329, "nilearn.glm.SimpleRegressionResults.residuals", false]], "resize() (nilearn.reporting.htmlreport method)": [[469, "nilearn.reporting.HTMLReport.resize", false]], "resting-state": [[181, "term-resting-state", true]], "roc": [[181, "term-ROC", true]], "rprojector (class in nilearn.plotting.displays)": [[412, "nilearn.plotting.displays.RProjector", false]], "run_glm() (in module nilearn.glm.first_level)": [[345, "nilearn.glm.first_level.run_glm", false]], "save_as_html() (nilearn.reporting.htmlreport method)": [[469, "nilearn.reporting.HTMLReport.save_as_html", false]], "save_glm_to_bids() (in module nilearn.interfaces.bids)": [[376, "nilearn.interfaces.bids.save_glm_to_bids", false]], "savefig() (nilearn.plotting.displays.baseslicer method)": [[399, "nilearn.plotting.displays.BaseSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.lprojector method)": [[402, "nilearn.plotting.displays.LProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lrprojector method)": [[403, "nilearn.plotting.displays.LRProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lyrprojector method)": [[404, "nilearn.plotting.displays.LYRProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lyrzprojector method)": [[405, "nilearn.plotting.displays.LYRZProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lzrprojector method)": [[406, "nilearn.plotting.displays.LZRProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lzryprojector method)": [[407, "nilearn.plotting.displays.LZRYProjector.savefig", false]], "savefig() (nilearn.plotting.displays.mosaicslicer method)": [[408, "nilearn.plotting.displays.MosaicSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.orthoprojector method)": [[409, "nilearn.plotting.displays.OrthoProjector.savefig", false]], "savefig() (nilearn.plotting.displays.orthoslicer method)": [[410, "nilearn.plotting.displays.OrthoSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.plotlysurfacefigure method)": [[411, "nilearn.plotting.displays.PlotlySurfaceFigure.savefig", false]], "savefig() (nilearn.plotting.displays.rprojector method)": [[412, "nilearn.plotting.displays.RProjector.savefig", false]], "savefig() (nilearn.plotting.displays.tiledslicer method)": [[413, "nilearn.plotting.displays.TiledSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.xprojector method)": [[414, "nilearn.plotting.displays.XProjector.savefig", false]], "savefig() (nilearn.plotting.displays.xslicer method)": [[415, "nilearn.plotting.displays.XSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.xzprojector method)": [[416, "nilearn.plotting.displays.XZProjector.savefig", false]], "savefig() (nilearn.plotting.displays.xzslicer method)": [[417, "nilearn.plotting.displays.XZSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.yprojector method)": [[418, "nilearn.plotting.displays.YProjector.savefig", false]], "savefig() (nilearn.plotting.displays.yslicer method)": [[419, "nilearn.plotting.displays.YSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.yxprojector method)": [[420, "nilearn.plotting.displays.YXProjector.savefig", false]], "savefig() (nilearn.plotting.displays.yxslicer method)": [[421, "nilearn.plotting.displays.YXSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.yzprojector method)": [[422, "nilearn.plotting.displays.YZProjector.savefig", false]], "savefig() (nilearn.plotting.displays.yzslicer method)": [[423, "nilearn.plotting.displays.YZSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.zprojector method)": [[424, "nilearn.plotting.displays.ZProjector.savefig", false]], "savefig() (nilearn.plotting.displays.zslicer method)": [[425, "nilearn.plotting.displays.ZSlicer.savefig", false]], "scaling_axis (nilearn.glm.first_level.firstlevelmodel property)": [[336, "nilearn.glm.first_level.FirstLevelModel.scaling_axis", false]], "score() (nilearn.decoding.decoder method)": [[298, "nilearn.decoding.Decoder.score", false]], "score() (nilearn.decoding.decoderregressor method)": [[299, "nilearn.decoding.DecoderRegressor.score", false]], "score() (nilearn.decoding.fremclassifier method)": [[300, "nilearn.decoding.FREMClassifier.score", false]], "score() (nilearn.decoding.fremregressor method)": [[301, "nilearn.decoding.FREMRegressor.score", false]], "score() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.score", false]], "score() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.score", false]], "score() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.score", false]], "score() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.score", false]], "score() (nilearn.regions.parcellations method)": [[459, "nilearn.regions.Parcellations.score", false]], "searchlight": [[181, "term-Searchlight", true]], "searchlight (class in nilearn.decoding)": [[302, "nilearn.decoding.SearchLight", false]], "secondlevelmodel (class in nilearn.glm.second_level)": [[349, "nilearn.glm.second_level.SecondLevelModel", false]], "select_from_index() (in module nilearn.datasets)": [[297, "nilearn.datasets.select_from_index", false]], "set_fit_request() (nilearn.connectome.groupsparsecovariance method)": [[235, "nilearn.connectome.GroupSparseCovariance.set_fit_request", false]], "set_fit_request() (nilearn.connectome.groupsparsecovariancecv method)": [[236, "nilearn.connectome.GroupSparseCovarianceCV.set_fit_request", false]], "set_fit_request() (nilearn.decoding.decoder method)": [[298, "nilearn.decoding.Decoder.set_fit_request", false]], "set_fit_request() (nilearn.decoding.decoderregressor method)": [[299, "nilearn.decoding.DecoderRegressor.set_fit_request", false]], "set_fit_request() (nilearn.decoding.fremclassifier method)": [[300, "nilearn.decoding.FREMClassifier.set_fit_request", false]], "set_fit_request() (nilearn.decoding.fremregressor method)": [[301, "nilearn.decoding.FREMRegressor.set_fit_request", false]], "set_fit_request() (nilearn.decoding.searchlight method)": [[302, "nilearn.decoding.SearchLight.set_fit_request", false]], "set_fit_request() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.set_fit_request", false]], "set_fit_request() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.set_fit_request", false]], "set_fit_request() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.set_fit_request", false]], "set_fit_request() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.set_fit_request", false]], "set_fit_request() (nilearn.experimental.surface.surfacemasker method)": [[318, "nilearn.experimental.surface.SurfaceMasker.set_fit_request", false]], "set_fit_request() (nilearn.glm.first_level.firstlevelmodel method)": [[336, "nilearn.glm.first_level.FirstLevelModel.set_fit_request", false]], "set_fit_request() (nilearn.glm.second_level.secondlevelmodel method)": [[349, "nilearn.glm.second_level.SecondLevelModel.set_fit_request", false]], "set_fit_request() (nilearn.maskers.multiniftilabelsmasker method)": [[381, "nilearn.maskers.MultiNiftiLabelsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.multiniftimapsmasker method)": [[382, "nilearn.maskers.MultiNiftiMapsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.multiniftimasker method)": [[383, "nilearn.maskers.MultiNiftiMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.niftilabelsmasker method)": [[384, "nilearn.maskers.NiftiLabelsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.niftimapsmasker method)": [[385, "nilearn.maskers.NiftiMapsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.niftimasker method)": [[386, "nilearn.maskers.NiftiMasker.set_fit_request", false]], "set_fit_request() (nilearn.regions.parcellations method)": [[459, "nilearn.regions.Parcellations.set_fit_request", false]], "set_fit_request() (nilearn.regions.regionextractor method)": [[461, "nilearn.regions.RegionExtractor.set_fit_request", false]], "set_inverse_transform_request() (nilearn.connectome.connectivitymeasure method)": [[234, "nilearn.connectome.ConnectivityMeasure.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.experimental.surface.surfacemasker method)": [[318, "nilearn.experimental.surface.SurfaceMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[381, "nilearn.maskers.MultiNiftiLabelsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[382, "nilearn.maskers.MultiNiftiMapsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[384, "nilearn.maskers.NiftiLabelsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.niftimapsmasker method)": [[385, "nilearn.maskers.NiftiMapsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.niftispheresmasker method)": [[387, "nilearn.maskers.NiftiSpheresMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.regions.hierarchicalkmeans method)": [[458, "nilearn.regions.HierarchicalKMeans.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.regions.parcellations method)": [[459, "nilearn.regions.Parcellations.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.regions.regionextractor method)": [[461, "nilearn.regions.RegionExtractor.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.regions.rena method)": [[460, "nilearn.regions.ReNA.set_inverse_transform_request", false]], "set_output() (nilearn.connectome.connectivitymeasure method)": [[234, "nilearn.connectome.ConnectivityMeasure.set_output", false]], "set_output() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.set_output", false]], "set_output() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.set_output", false]], "set_output() (nilearn.experimental.surface.surfacemasker method)": [[318, "nilearn.experimental.surface.SurfaceMasker.set_output", false]], "set_output() (nilearn.glm.first_level.firstlevelmodel method)": [[336, "nilearn.glm.first_level.FirstLevelModel.set_output", false]], "set_output() (nilearn.glm.second_level.secondlevelmodel method)": [[349, "nilearn.glm.second_level.SecondLevelModel.set_output", false]], "set_output() (nilearn.maskers.basemasker method)": [[380, "nilearn.maskers.BaseMasker.set_output", false]], "set_output() (nilearn.maskers.multiniftilabelsmasker method)": [[381, "nilearn.maskers.MultiNiftiLabelsMasker.set_output", false]], "set_output() (nilearn.maskers.multiniftimapsmasker method)": [[382, "nilearn.maskers.MultiNiftiMapsMasker.set_output", false]], "set_output() (nilearn.maskers.multiniftimasker method)": [[383, "nilearn.maskers.MultiNiftiMasker.set_output", false]], "set_output() (nilearn.maskers.niftilabelsmasker method)": [[384, "nilearn.maskers.NiftiLabelsMasker.set_output", false]], "set_output() (nilearn.maskers.niftimapsmasker method)": [[385, "nilearn.maskers.NiftiMapsMasker.set_output", false]], "set_output() (nilearn.maskers.niftimasker method)": [[386, "nilearn.maskers.NiftiMasker.set_output", false]], "set_output() (nilearn.maskers.niftispheresmasker method)": [[387, "nilearn.maskers.NiftiSpheresMasker.set_output", false]], "set_output() (nilearn.regions.hierarchicalkmeans method)": [[458, "nilearn.regions.HierarchicalKMeans.set_output", false]], "set_output() (nilearn.regions.parcellations method)": [[459, "nilearn.regions.Parcellations.set_output", false]], "set_output() (nilearn.regions.regionextractor method)": [[461, "nilearn.regions.RegionExtractor.set_output", false]], "set_output() (nilearn.regions.rena method)": [[460, "nilearn.regions.ReNA.set_output", false]], "set_params() (nilearn.connectome.connectivitymeasure method)": [[234, "nilearn.connectome.ConnectivityMeasure.set_params", false]], "set_params() (nilearn.connectome.groupsparsecovariance method)": [[235, "nilearn.connectome.GroupSparseCovariance.set_params", false]], "set_params() (nilearn.connectome.groupsparsecovariancecv method)": [[236, "nilearn.connectome.GroupSparseCovarianceCV.set_params", false]], "set_params() (nilearn.decoding.decoder method)": [[298, "nilearn.decoding.Decoder.set_params", false]], "set_params() (nilearn.decoding.decoderregressor method)": [[299, "nilearn.decoding.DecoderRegressor.set_params", false]], "set_params() (nilearn.decoding.fremclassifier method)": [[300, "nilearn.decoding.FREMClassifier.set_params", false]], "set_params() (nilearn.decoding.fremregressor method)": [[301, "nilearn.decoding.FREMRegressor.set_params", false]], "set_params() (nilearn.decoding.searchlight method)": [[302, "nilearn.decoding.SearchLight.set_params", false]], "set_params() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.set_params", false]], "set_params() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.set_params", false]], "set_params() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.set_params", false]], "set_params() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.set_params", false]], "set_params() (nilearn.experimental.surface.surfacemasker method)": [[318, "nilearn.experimental.surface.SurfaceMasker.set_params", false]], "set_params() (nilearn.glm.first_level.firstlevelmodel method)": [[336, "nilearn.glm.first_level.FirstLevelModel.set_params", false]], "set_params() (nilearn.glm.second_level.secondlevelmodel method)": [[349, "nilearn.glm.second_level.SecondLevelModel.set_params", false]], "set_params() (nilearn.maskers.basemasker method)": [[380, "nilearn.maskers.BaseMasker.set_params", false]], "set_params() (nilearn.maskers.multiniftilabelsmasker method)": [[381, "nilearn.maskers.MultiNiftiLabelsMasker.set_params", false]], "set_params() (nilearn.maskers.multiniftimapsmasker method)": [[382, "nilearn.maskers.MultiNiftiMapsMasker.set_params", false]], "set_params() (nilearn.maskers.multiniftimasker method)": [[383, "nilearn.maskers.MultiNiftiMasker.set_params", false]], "set_params() (nilearn.maskers.niftilabelsmasker method)": [[384, "nilearn.maskers.NiftiLabelsMasker.set_params", false]], "set_params() (nilearn.maskers.niftimapsmasker method)": [[385, "nilearn.maskers.NiftiMapsMasker.set_params", false]], "set_params() (nilearn.maskers.niftimasker method)": [[386, "nilearn.maskers.NiftiMasker.set_params", false]], "set_params() (nilearn.maskers.niftispheresmasker method)": [[387, "nilearn.maskers.NiftiSpheresMasker.set_params", false]], "set_params() (nilearn.regions.hierarchicalkmeans method)": [[458, "nilearn.regions.HierarchicalKMeans.set_params", false]], "set_params() (nilearn.regions.parcellations method)": [[459, "nilearn.regions.Parcellations.set_params", false]], "set_params() (nilearn.regions.regionextractor method)": [[461, "nilearn.regions.RegionExtractor.set_params", false]], "set_params() (nilearn.regions.rena method)": [[460, "nilearn.regions.ReNA.set_params", false]], "set_score_request() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.set_score_request", false]], "set_score_request() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.set_score_request", false]], "set_score_request() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.set_score_request", false]], "set_score_request() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.set_score_request", false]], "set_score_request() (nilearn.regions.parcellations method)": [[459, "nilearn.regions.Parcellations.set_score_request", false]], "set_transform_request() (nilearn.connectome.connectivitymeasure method)": [[234, "nilearn.connectome.ConnectivityMeasure.set_transform_request", false]], "set_transform_request() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.set_transform_request", false]], "set_transform_request() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.set_transform_request", false]], "set_transform_request() (nilearn.experimental.surface.surfacemasker method)": [[318, "nilearn.experimental.surface.SurfaceMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.basemasker method)": [[380, "nilearn.maskers.BaseMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[381, "nilearn.maskers.MultiNiftiLabelsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[382, "nilearn.maskers.MultiNiftiMapsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.multiniftimasker method)": [[383, "nilearn.maskers.MultiNiftiMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[384, "nilearn.maskers.NiftiLabelsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.niftimapsmasker method)": [[385, "nilearn.maskers.NiftiMapsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.niftimasker method)": [[386, "nilearn.maskers.NiftiMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.niftispheresmasker method)": [[387, "nilearn.maskers.NiftiSpheresMasker.set_transform_request", false]], "set_transform_request() (nilearn.regions.parcellations method)": [[459, "nilearn.regions.Parcellations.set_transform_request", false]], "set_transform_request() (nilearn.regions.regionextractor method)": [[461, "nilearn.regions.RegionExtractor.set_transform_request", false]], "show() (in module nilearn.plotting)": [[452, "nilearn.plotting.show", false]], "show() (nilearn.plotting.displays.plotlysurfacefigure method)": [[411, "nilearn.plotting.displays.PlotlySurfaceFigure.show", false]], "signals_to_img_labels() (in module nilearn.regions)": [[467, "nilearn.regions.signals_to_img_labels", false]], "signals_to_img_maps() (in module nilearn.regions)": [[468, "nilearn.regions.signals_to_img_maps", false]], "simpleregressionresults (class in nilearn.glm)": [[329, "nilearn.glm.SimpleRegressionResults", false]], "smooth_img() (in module nilearn.image)": [[371, "nilearn.image.smooth_img", false]], "snr": [[181, "term-SNR", true]], "spacenet": [[181, "term-SpaceNet", true]], "spacenetclassifier (class in nilearn.decoding)": [[303, "nilearn.decoding.SpaceNetClassifier", false]], "spacenetregressor (class in nilearn.decoding)": [[304, "nilearn.decoding.SpaceNetRegressor", false]], "spm": [[181, "term-SPM", true]], "spm_dispersion_derivative() (in module nilearn.glm.first_level)": [[346, "nilearn.glm.first_level.spm_dispersion_derivative", false]], "spm_hrf() (in module nilearn.glm.first_level)": [[347, "nilearn.glm.first_level.spm_hrf", false]], "spm_time_derivative() (in module nilearn.glm.first_level)": [[348, "nilearn.glm.first_level.spm_time_derivative", false]], "sse() (nilearn.glm.regressionresults method)": [[328, "nilearn.glm.RegressionResults.SSE", false]], "stat() (nilearn.glm.contrast method)": [[324, "nilearn.glm.Contrast.stat", false]], "supervised learning": [[181, "term-supervised-learning", true]], "supported_losses (nilearn.decoding.spacenetclassifier attribute)": [[303, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_LOSSES", false]], "supported_losses (nilearn.decoding.spacenetregressor attribute)": [[304, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_LOSSES", false]], "supported_penalties (nilearn.decoding.spacenetclassifier attribute)": [[303, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_PENALTIES", false]], "supported_penalties (nilearn.decoding.spacenetregressor attribute)": [[304, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_PENALTIES", false]], "surfaceimage (class in nilearn.experimental.surface)": [[316, "nilearn.experimental.surface.SurfaceImage", false]], "surfacelabelsmasker (class in nilearn.experimental.surface)": [[317, "nilearn.experimental.surface.SurfaceLabelsMasker", false]], "surfacemasker (class in nilearn.experimental.surface)": [[318, "nilearn.experimental.surface.SurfaceMasker", false]], "svm": [[181, "term-SVM", true]], "swap_img_hemispheres() (in module nilearn.image)": [[372, "nilearn.image.swap_img_hemispheres", false]], "sym_matrix_to_vec() (in module nilearn.connectome)": [[240, "nilearn.connectome.sym_matrix_to_vec", false]], "t() (nilearn.glm.likelihoodmodelresults method)": [[326, "nilearn.glm.LikelihoodModelResults.t", false]], "t() (nilearn.glm.regressionresults method)": [[328, "nilearn.glm.RegressionResults.t", false]], "t() (nilearn.glm.simpleregressionresults method)": [[329, "nilearn.glm.SimpleRegressionResults.t", false]], "tcontrast() (nilearn.glm.likelihoodmodelresults method)": [[326, "nilearn.glm.LikelihoodModelResults.Tcontrast", false]], "tcontrast() (nilearn.glm.regressionresults method)": [[328, "nilearn.glm.RegressionResults.Tcontrast", false]], "tcontrast() (nilearn.glm.simpleregressionresults method)": [[329, "nilearn.glm.SimpleRegressionResults.Tcontrast", false]], "tcontrastresults (class in nilearn.glm)": [[330, "nilearn.glm.TContrastResults", false]], "tfce": [[181, "term-TFCE", true]], "threshold_img() (in module nilearn.image)": [[373, "nilearn.image.threshold_img", false]], "threshold_stats_img() (in module nilearn.glm)": [[352, "nilearn.glm.threshold_stats_img", false]], "tiledslicer (class in nilearn.plotting.displays)": [[413, "nilearn.plotting.displays.TiledSlicer", false]], "title() (nilearn.plotting.displays.baseslicer method)": [[399, "nilearn.plotting.displays.BaseSlicer.title", false]], "title() (nilearn.plotting.displays.lprojector method)": [[402, "nilearn.plotting.displays.LProjector.title", false]], "title() (nilearn.plotting.displays.lrprojector method)": [[403, "nilearn.plotting.displays.LRProjector.title", false]], "title() (nilearn.plotting.displays.lyrprojector method)": [[404, "nilearn.plotting.displays.LYRProjector.title", false]], "title() (nilearn.plotting.displays.lyrzprojector method)": [[405, "nilearn.plotting.displays.LYRZProjector.title", false]], "title() (nilearn.plotting.displays.lzrprojector method)": [[406, "nilearn.plotting.displays.LZRProjector.title", false]], "title() (nilearn.plotting.displays.lzryprojector method)": [[407, "nilearn.plotting.displays.LZRYProjector.title", false]], "title() (nilearn.plotting.displays.mosaicslicer method)": [[408, "nilearn.plotting.displays.MosaicSlicer.title", false]], "title() (nilearn.plotting.displays.orthoprojector method)": [[409, "nilearn.plotting.displays.OrthoProjector.title", false]], "title() (nilearn.plotting.displays.orthoslicer method)": [[410, "nilearn.plotting.displays.OrthoSlicer.title", false]], "title() (nilearn.plotting.displays.rprojector method)": [[412, "nilearn.plotting.displays.RProjector.title", false]], "title() (nilearn.plotting.displays.tiledslicer method)": [[413, "nilearn.plotting.displays.TiledSlicer.title", false]], "title() (nilearn.plotting.displays.xprojector method)": [[414, "nilearn.plotting.displays.XProjector.title", false]], "title() (nilearn.plotting.displays.xslicer method)": [[415, "nilearn.plotting.displays.XSlicer.title", false]], "title() (nilearn.plotting.displays.xzprojector method)": [[416, "nilearn.plotting.displays.XZProjector.title", false]], "title() (nilearn.plotting.displays.xzslicer method)": [[417, "nilearn.plotting.displays.XZSlicer.title", false]], "title() (nilearn.plotting.displays.yprojector method)": [[418, "nilearn.plotting.displays.YProjector.title", false]], "title() (nilearn.plotting.displays.yslicer method)": [[419, "nilearn.plotting.displays.YSlicer.title", false]], "title() (nilearn.plotting.displays.yxprojector method)": [[420, "nilearn.plotting.displays.YXProjector.title", false]], "title() (nilearn.plotting.displays.yxslicer method)": [[421, "nilearn.plotting.displays.YXSlicer.title", false]], "title() (nilearn.plotting.displays.yzprojector method)": [[422, "nilearn.plotting.displays.YZProjector.title", false]], "title() (nilearn.plotting.displays.yzslicer method)": [[423, "nilearn.plotting.displays.YZSlicer.title", false]], "title() (nilearn.plotting.displays.zprojector method)": [[424, "nilearn.plotting.displays.ZProjector.title", false]], "title() (nilearn.plotting.displays.zslicer method)": [[425, "nilearn.plotting.displays.ZSlicer.title", false]], "to_gifti() (nilearn.experimental.surface.filemesh method)": [[312, "nilearn.experimental.surface.FileMesh.to_gifti", false]], "to_gifti() (nilearn.experimental.surface.inmemorymesh method)": [[313, "nilearn.experimental.surface.InMemoryMesh.to_gifti", false]], "to_gifti() (nilearn.experimental.surface.mesh method)": [[314, "nilearn.experimental.surface.Mesh.to_gifti", false]], "tr": [[181, "term-TR", true]], "transform() (nilearn.connectome.connectivitymeasure method)": [[234, "nilearn.connectome.ConnectivityMeasure.transform", false]], "transform() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.transform", false]], "transform() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.transform", false]], "transform() (nilearn.experimental.surface.surfacelabelsmasker method)": [[317, "nilearn.experimental.surface.SurfaceLabelsMasker.transform", false]], "transform() (nilearn.experimental.surface.surfacemasker method)": [[318, "nilearn.experimental.surface.SurfaceMasker.transform", false]], "transform() (nilearn.maskers.basemasker method)": [[380, "nilearn.maskers.BaseMasker.transform", false]], "transform() (nilearn.maskers.multiniftilabelsmasker method)": [[381, "nilearn.maskers.MultiNiftiLabelsMasker.transform", false]], "transform() (nilearn.maskers.multiniftimapsmasker method)": [[382, "nilearn.maskers.MultiNiftiMapsMasker.transform", false]], "transform() (nilearn.maskers.multiniftimasker method)": [[383, "nilearn.maskers.MultiNiftiMasker.transform", false]], "transform() (nilearn.maskers.niftilabelsmasker method)": [[384, "nilearn.maskers.NiftiLabelsMasker.transform", false]], "transform() (nilearn.maskers.niftimapsmasker method)": [[385, "nilearn.maskers.NiftiMapsMasker.transform", false]], "transform() (nilearn.maskers.niftimasker method)": [[386, "nilearn.maskers.NiftiMasker.transform", false]], "transform() (nilearn.maskers.niftispheresmasker method)": [[387, "nilearn.maskers.NiftiSpheresMasker.transform", false]], "transform() (nilearn.regions.hierarchicalkmeans method)": [[458, "nilearn.regions.HierarchicalKMeans.transform", false]], "transform() (nilearn.regions.parcellations method)": [[459, "nilearn.regions.Parcellations.transform", false]], "transform() (nilearn.regions.regionextractor method)": [[461, "nilearn.regions.RegionExtractor.transform", false]], "transform() (nilearn.regions.rena method)": [[460, "nilearn.regions.ReNA.transform", false]], "transform_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[381, "nilearn.maskers.MultiNiftiLabelsMasker.transform_imgs", false]], "transform_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[382, "nilearn.maskers.MultiNiftiMapsMasker.transform_imgs", false]], "transform_imgs() (nilearn.maskers.multiniftimasker method)": [[383, "nilearn.maskers.MultiNiftiMasker.transform_imgs", false]], "transform_single_imgs() (nilearn.maskers.basemasker method)": [[380, "nilearn.maskers.BaseMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[381, "nilearn.maskers.MultiNiftiLabelsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[382, "nilearn.maskers.MultiNiftiMapsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.multiniftimasker method)": [[383, "nilearn.maskers.MultiNiftiMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.niftilabelsmasker method)": [[384, "nilearn.maskers.NiftiLabelsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.niftimapsmasker method)": [[385, "nilearn.maskers.NiftiMapsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.niftimasker method)": [[386, "nilearn.maskers.NiftiMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.niftispheresmasker method)": [[387, "nilearn.maskers.NiftiSpheresMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.regions.regionextractor method)": [[461, "nilearn.regions.RegionExtractor.transform_single_imgs", false]], "transform_to_2d() (nilearn.plotting.displays.baseaxes method)": [[398, "nilearn.plotting.displays.BaseAxes.transform_to_2d", false]], "transform_to_2d() (nilearn.plotting.displays.cutaxes method)": [[400, "nilearn.plotting.displays.CutAxes.transform_to_2d", false]], "transform_to_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[401, "nilearn.plotting.displays.GlassBrainAxes.transform_to_2d", false]], "unmask() (in module nilearn.masking)": [[396, "nilearn.masking.unmask", false]], "unsupervised learning": [[181, "term-Unsupervised-learning", true]], "valid_methods (nilearn.regions.parcellations attribute)": [[459, "nilearn.regions.Parcellations.VALID_METHODS", false]], "vbm": [[181, "term-VBM", true]], "vcov() (nilearn.glm.likelihoodmodelresults method)": [[326, "nilearn.glm.LikelihoodModelResults.vcov", false]], "vcov() (nilearn.glm.regressionresults method)": [[328, "nilearn.glm.RegressionResults.vcov", false]], "vcov() (nilearn.glm.simpleregressionresults method)": [[329, "nilearn.glm.SimpleRegressionResults.vcov", false]], "vec_to_sym_matrix() (in module nilearn.connectome)": [[241, "nilearn.connectome.vec_to_sym_matrix", false]], "vertex": [[181, "term-vertex", true]], "view_connectome() (in module nilearn.plotting)": [[453, "nilearn.plotting.view_connectome", false]], "view_img() (in module nilearn.plotting)": [[454, "nilearn.plotting.view_img", false]], "view_img_on_surf() (in module nilearn.plotting)": [[455, "nilearn.plotting.view_img_on_surf", false]], "view_markers() (in module nilearn.plotting)": [[456, "nilearn.plotting.view_markers", false]], "view_surf() (in module nilearn.experimental.plotting)": [[311, "nilearn.experimental.plotting.view_surf", false]], "view_surf() (in module nilearn.plotting)": [[457, "nilearn.plotting.view_surf", false]], "vol_to_surf() (in module nilearn.surface)": [[477, "nilearn.surface.vol_to_surf", false]], "voxel": [[181, "term-voxel", true]], "ward clustering": [[181, "term-Ward-clustering", true]], "whiten() (nilearn.glm.armodel method)": [[323, "nilearn.glm.ARModel.whiten", false]], "whiten() (nilearn.glm.olsmodel method)": [[327, "nilearn.glm.OLSModel.whiten", false]], "xprojector (class in nilearn.plotting.displays)": [[414, "nilearn.plotting.displays.XProjector", false]], "xslicer (class in nilearn.plotting.displays)": [[415, "nilearn.plotting.displays.XSlicer", false]], "xzprojector (class in nilearn.plotting.displays)": [[416, "nilearn.plotting.displays.XZProjector", false]], "xzslicer (class in nilearn.plotting.displays)": [[417, "nilearn.plotting.displays.XZSlicer", false]], "yprojector (class in nilearn.plotting.displays)": [[418, "nilearn.plotting.displays.YProjector", false]], "yslicer (class in nilearn.plotting.displays)": [[419, "nilearn.plotting.displays.YSlicer", false]], "yxprojector (class in nilearn.plotting.displays)": [[420, "nilearn.plotting.displays.YXProjector", false]], "yxslicer (class in nilearn.plotting.displays)": [[421, "nilearn.plotting.displays.YXSlicer", false]], "yzprojector (class in nilearn.plotting.displays)": [[422, "nilearn.plotting.displays.YZProjector", false]], "yzslicer (class in nilearn.plotting.displays)": [[423, "nilearn.plotting.displays.YZSlicer", false]], "z_score() (nilearn.glm.contrast method)": [[324, "nilearn.glm.Contrast.z_score", false]], "zprojector (class in nilearn.plotting.displays)": [[424, "nilearn.plotting.displays.ZProjector", false]], "zslicer (class in nilearn.plotting.displays)": [[425, "nilearn.plotting.displays.ZSlicer", false]]}, "objects": {"nilearn": [[189, 0, 0, "-", "connectome"], [190, 0, 0, "-", "datasets"], [191, 0, 0, "-", "decoding"], [192, 0, 0, "-", "decomposition"], [233, 0, 0, "-", "experimental"], [480, 0, 0, "-", "glm"], [481, 0, 0, "-", "image"], [483, 0, 0, "-", "interfaces"], [484, 0, 0, "-", "maskers"], [485, 0, 0, "-", "masking"], [486, 0, 0, "-", "mass_univariate"], [487, 0, 0, "-", "plotting"], [488, 0, 0, "-", "regions"], [489, 0, 0, "-", "reporting"], [490, 0, 0, "-", "signal"], [491, 0, 0, "-", "surface"]], "nilearn.connectome": [[234, 1, 1, "", "ConnectivityMeasure"], [235, 1, 1, "", "GroupSparseCovariance"], [236, 1, 1, "", "GroupSparseCovarianceCV"], [237, 3, 1, "", "cov_to_corr"], [238, 3, 1, "", "group_sparse_covariance"], [239, 3, 1, "", "prec_to_partial"], [240, 3, 1, "", "sym_matrix_to_vec"], [241, 3, 1, "", "vec_to_sym_matrix"]], "nilearn.connectome.ConnectivityMeasure": [[234, 2, 1, "", "__init__"], [234, 2, 1, "", "fit"], [234, 2, 1, "", "fit_transform"], [234, 2, 1, "", "get_metadata_routing"], [234, 2, 1, "", "get_params"], [234, 2, 1, "", "inverse_transform"], [234, 2, 1, "", "set_inverse_transform_request"], [234, 2, 1, "", "set_output"], [234, 2, 1, "", "set_params"], [234, 2, 1, "", "set_transform_request"], [234, 2, 1, "", "transform"]], "nilearn.connectome.GroupSparseCovariance": [[235, 2, 1, "", "__init__"], [235, 2, 1, "", "fit"], [235, 2, 1, "", "get_metadata_routing"], [235, 2, 1, "", "get_params"], [235, 2, 1, "", "set_fit_request"], [235, 2, 1, "", "set_params"]], "nilearn.connectome.GroupSparseCovarianceCV": [[236, 2, 1, "", "__init__"], [236, 2, 1, "", "fit"], [236, 2, 1, "", "get_metadata_routing"], [236, 2, 1, "", "get_params"], [236, 2, 1, "", "set_fit_request"], [236, 2, 1, "", "set_params"]], "nilearn.datasets": [[242, 3, 1, "", "fetch_abide_pcp"], [243, 3, 1, "", "fetch_adhd"], [244, 3, 1, "", "fetch_atlas_aal"], [245, 3, 1, "", "fetch_atlas_allen_2011"], [246, 3, 1, "", "fetch_atlas_basc_multiscale_2015"], [247, 3, 1, "", "fetch_atlas_craddock_2012"], [248, 3, 1, "", "fetch_atlas_destrieux_2009"], [249, 3, 1, "", "fetch_atlas_difumo"], [250, 3, 1, "", "fetch_atlas_harvard_oxford"], [251, 3, 1, "", "fetch_atlas_juelich"], [252, 3, 1, "", "fetch_atlas_msdl"], [253, 3, 1, "", "fetch_atlas_pauli_2017"], [254, 3, 1, "", "fetch_atlas_schaefer_2018"], [255, 3, 1, "", "fetch_atlas_smith_2009"], [256, 3, 1, "", "fetch_atlas_surf_destrieux"], [257, 3, 1, "", "fetch_atlas_talairach"], [258, 3, 1, "", "fetch_atlas_yeo_2011"], [259, 3, 1, "", "fetch_bids_langloc_dataset"], [260, 3, 1, "", "fetch_coords_dosenbach_2010"], [261, 3, 1, "", "fetch_coords_power_2011"], [262, 3, 1, "", "fetch_coords_seitzman_2018"], [263, 3, 1, "", "fetch_development_fmri"], [264, 3, 1, "", "fetch_ds000030_urls"], [265, 3, 1, "", "fetch_fiac_first_level"], [266, 3, 1, "", "fetch_haxby"], [267, 3, 1, "", "fetch_icbm152_2009"], [268, 3, 1, "", "fetch_icbm152_brain_gm_mask"], [269, 3, 1, "", "fetch_language_localizer_demo_dataset"], [270, 3, 1, "", "fetch_localizer_button_task"], [271, 3, 1, "", "fetch_localizer_calculation_task"], [272, 3, 1, "", "fetch_localizer_contrasts"], [273, 3, 1, "", "fetch_localizer_first_level"], [274, 3, 1, "", "fetch_megatrawls_netmats"], [275, 3, 1, "", "fetch_mixed_gambles"], [276, 3, 1, "", "fetch_miyawaki2008"], [277, 3, 1, "", "fetch_neurovault"], [278, 3, 1, "", "fetch_neurovault_auditory_computation_task"], [279, 3, 1, "", "fetch_neurovault_ids"], [280, 3, 1, "", "fetch_neurovault_motor_task"], [281, 3, 1, "", "fetch_oasis_vbm"], [282, 3, 1, "", "fetch_openneuro_dataset"], [283, 3, 1, "", "fetch_openneuro_dataset_index"], [284, 3, 1, "", "fetch_spm_auditory"], [285, 3, 1, "", "fetch_spm_multimodal_fmri"], [286, 3, 1, "", "fetch_surf_fsaverage"], [287, 3, 1, "", "fetch_surf_nki_enhanced"], [288, 3, 1, "", "get_data_dirs"], [289, 3, 1, "", "load_mni152_brain_mask"], [290, 3, 1, "", "load_mni152_gm_mask"], [291, 3, 1, "", "load_mni152_gm_template"], [292, 3, 1, "", "load_mni152_template"], [293, 3, 1, "", "load_mni152_wm_mask"], [294, 3, 1, "", "load_mni152_wm_template"], [295, 3, 1, "", "load_sample_motor_activation_image"], [296, 3, 1, "", "patch_openneuro_dataset"], [297, 3, 1, "", "select_from_index"]], "nilearn.decoding": [[298, 1, 1, "", "Decoder"], [299, 1, 1, "", "DecoderRegressor"], [300, 1, 1, "", "FREMClassifier"], [301, 1, 1, "", "FREMRegressor"], [302, 1, 1, "", "SearchLight"], [303, 1, 1, "", "SpaceNetClassifier"], [304, 1, 1, "", "SpaceNetRegressor"]], "nilearn.decoding.Decoder": [[298, 2, 1, "", "__init__"], [298, 2, 1, "", "decision_function"], [298, 2, 1, "", "fit"], [298, 2, 1, "", "get_metadata_routing"], [298, 2, 1, "", "get_params"], [298, 2, 1, "", "predict"], [298, 2, 1, "", "score"], [298, 2, 1, "", "set_fit_request"], [298, 2, 1, "", "set_params"]], "nilearn.decoding.DecoderRegressor": [[299, 2, 1, "", "__init__"], [299, 2, 1, "", "decision_function"], [299, 2, 1, "", "fit"], [299, 2, 1, "", "get_metadata_routing"], [299, 2, 1, "", "get_params"], [299, 2, 1, "", "predict"], [299, 2, 1, "", "score"], [299, 2, 1, "", "set_fit_request"], [299, 2, 1, "", "set_params"]], "nilearn.decoding.FREMClassifier": [[300, 2, 1, "", "__init__"], [300, 2, 1, "", "decision_function"], [300, 2, 1, "", "fit"], [300, 2, 1, "", "get_metadata_routing"], [300, 2, 1, "", "get_params"], [300, 2, 1, "", "predict"], [300, 2, 1, "", "score"], [300, 2, 1, "", "set_fit_request"], [300, 2, 1, "", "set_params"]], "nilearn.decoding.FREMRegressor": [[301, 2, 1, "", "__init__"], [301, 2, 1, "", "decision_function"], [301, 2, 1, "", "fit"], [301, 2, 1, "", "get_metadata_routing"], [301, 2, 1, "", "get_params"], [301, 2, 1, "", "predict"], [301, 2, 1, "", "score"], [301, 2, 1, "", "set_fit_request"], [301, 2, 1, "", "set_params"]], "nilearn.decoding.SearchLight": [[302, 2, 1, "", "__init__"], [302, 2, 1, "", "fit"], [302, 2, 1, "", "get_metadata_routing"], [302, 2, 1, "", "get_params"], [302, 2, 1, "", "set_fit_request"], [302, 2, 1, "", "set_params"]], "nilearn.decoding.SpaceNetClassifier": [[303, 4, 1, "", "SUPPORTED_LOSSES"], [303, 4, 1, "", "SUPPORTED_PENALTIES"], [303, 2, 1, "", "__init__"], [303, 2, 1, "", "check_params"], [303, 2, 1, "", "decision_function"], [303, 2, 1, "", "fit"], [303, 2, 1, "", "get_metadata_routing"], [303, 2, 1, "", "get_params"], [303, 2, 1, "", "predict"], [303, 2, 1, "", "score"], [303, 2, 1, "", "set_fit_request"], [303, 2, 1, "", "set_params"], [303, 2, 1, "", "set_score_request"]], "nilearn.decoding.SpaceNetRegressor": [[304, 4, 1, "", "SUPPORTED_LOSSES"], [304, 4, 1, "", "SUPPORTED_PENALTIES"], [304, 2, 1, "", "__init__"], [304, 2, 1, "", "check_params"], [304, 2, 1, "", "decision_function"], [304, 2, 1, "", "fit"], [304, 2, 1, "", "get_metadata_routing"], [304, 2, 1, "", "get_params"], [304, 2, 1, "", "predict"], [304, 2, 1, "", "score"], [304, 2, 1, "", "set_fit_request"], [304, 2, 1, "", "set_params"], [304, 2, 1, "", "set_score_request"]], "nilearn.decomposition": [[305, 1, 1, "", "CanICA"], [306, 1, 1, "", "DictLearning"]], "nilearn.decomposition.CanICA": [[305, 2, 1, "", "__init__"], [305, 2, 1, "", "fit"], [305, 2, 1, "", "fit_transform"], [305, 2, 1, "", "get_metadata_routing"], [305, 2, 1, "", "get_params"], [305, 2, 1, "", "inverse_transform"], [305, 2, 1, "", "score"], [305, 2, 1, "", "set_fit_request"], [305, 2, 1, "", "set_inverse_transform_request"], [305, 2, 1, "", "set_output"], [305, 2, 1, "", "set_params"], [305, 2, 1, "", "set_score_request"], [305, 2, 1, "", "set_transform_request"], [305, 2, 1, "", "transform"]], "nilearn.decomposition.DictLearning": [[306, 2, 1, "", "__init__"], [306, 2, 1, "", "fit"], [306, 2, 1, "", "fit_transform"], [306, 2, 1, "", "get_metadata_routing"], [306, 2, 1, "", "get_params"], [306, 2, 1, "", "inverse_transform"], [306, 2, 1, "", "score"], [306, 2, 1, "", "set_fit_request"], [306, 2, 1, "", "set_inverse_transform_request"], [306, 2, 1, "", "set_output"], [306, 2, 1, "", "set_params"], [306, 2, 1, "", "set_score_request"], [306, 2, 1, "", "set_transform_request"], [306, 2, 1, "", "transform"]], "nilearn.experimental": [[233, 0, 0, "-", "plotting"], [233, 0, 0, "-", "surface"]], "nilearn.experimental.plotting": [[307, 3, 1, "", "plot_surf"], [308, 3, 1, "", "plot_surf_contours"], [309, 3, 1, "", "plot_surf_roi"], [310, 3, 1, "", "plot_surf_stat_map"], [311, 3, 1, "", "view_surf"]], "nilearn.experimental.surface": [[312, 1, 1, "", "FileMesh"], [313, 1, 1, "", "InMemoryMesh"], [314, 1, 1, "", "Mesh"], [315, 1, 1, "", "PolyMesh"], [316, 1, 1, "", "SurfaceImage"], [317, 1, 1, "", "SurfaceLabelsMasker"], [318, 1, 1, "", "SurfaceMasker"], [319, 3, 1, "", "fetch_destrieux"], [320, 3, 1, "", "fetch_nki"], [321, 3, 1, "", "load_fsaverage"], [322, 3, 1, "", "load_fsaverage_data"]], "nilearn.experimental.surface.FileMesh": [[312, 2, 1, "", "__init__"], [312, 5, 1, "", "coordinates"], [312, 5, 1, "", "faces"], [312, 4, 1, "", "file_path"], [312, 2, 1, "", "loaded"], [312, 4, 1, "", "n_vertices"], [312, 2, 1, "", "to_gifti"]], "nilearn.experimental.surface.InMemoryMesh": [[313, 2, 1, "", "__init__"], [313, 4, 1, "", "coordinates"], [313, 4, 1, "", "faces"], [313, 4, 1, "", "n_vertices"], [313, 2, 1, "", "to_gifti"]], "nilearn.experimental.surface.Mesh": [[314, 2, 1, "", "__init__"], [314, 4, 1, "", "coordinates"], [314, 4, 1, "", "faces"], [314, 4, 1, "", "n_vertices"], [314, 2, 1, "", "to_gifti"]], "nilearn.experimental.surface.PolyMesh": [[315, 2, 1, "", "__init__"], [315, 4, 1, "", "n_vertices"]], "nilearn.experimental.surface.SurfaceImage": [[316, 2, 1, "", "__init__"]], "nilearn.experimental.surface.SurfaceLabelsMasker": [[317, 2, 1, "", "__init__"], [317, 2, 1, "", "fit"], [317, 2, 1, "", "fit_transform"], [317, 2, 1, "", "inverse_transform"], [317, 4, 1, "", "label_names"], [317, 4, 1, "", "label_names_"], [317, 4, 1, "", "labels_"], [317, 4, 1, "", "labels_data_"], [317, 4, 1, "", "labels_img"], [317, 2, 1, "", "transform"]], "nilearn.experimental.surface.SurfaceMasker": [[318, 2, 1, "", "__init__"], [318, 2, 1, "", "fit"], [318, 2, 1, "", "fit_transform"], [318, 2, 1, "", "get_metadata_routing"], [318, 2, 1, "", "get_params"], [318, 2, 1, "", "inverse_transform"], [318, 4, 1, "", "mask_img"], [318, 4, 1, "", "mask_img_"], [318, 4, 1, "", "output_dimension_"], [318, 2, 1, "", "set_fit_request"], [318, 2, 1, "", "set_inverse_transform_request"], [318, 2, 1, "", "set_output"], [318, 2, 1, "", "set_params"], [318, 2, 1, "", "set_transform_request"], [318, 2, 1, "", "transform"]], "nilearn.glm": [[323, 1, 1, "", "ARModel"], [324, 1, 1, "", "Contrast"], [325, 1, 1, "", "FContrastResults"], [326, 1, 1, "", "LikelihoodModelResults"], [327, 1, 1, "", "OLSModel"], [328, 1, 1, "", "RegressionResults"], [329, 1, 1, "", "SimpleRegressionResults"], [330, 1, 1, "", "TContrastResults"], [331, 3, 1, "", "cluster_level_inference"], [332, 3, 1, "", "compute_contrast"], [333, 3, 1, "", "compute_fixed_effects"], [334, 3, 1, "", "expression_to_contrast_vector"], [335, 3, 1, "", "fdr_threshold"], [480, 0, 0, "-", "first_level"], [480, 0, 0, "-", "second_level"], [352, 3, 1, "", "threshold_stats_img"]], "nilearn.glm.ARModel": [[323, 2, 1, "", "__init__"], [323, 2, 1, "", "fit"], [323, 2, 1, "", "initialize"], [323, 2, 1, "", "logL"], [323, 2, 1, "", "whiten"]], "nilearn.glm.Contrast": [[324, 2, 1, "", "__init__"], [324, 5, 1, "", "contrast_type"], [324, 2, 1, "", "effect_size"], [324, 2, 1, "", "effect_variance"], [324, 2, 1, "", "one_minus_pvalue"], [324, 2, 1, "", "p_value"], [324, 2, 1, "", "stat"], [324, 2, 1, "", "z_score"]], "nilearn.glm.FContrastResults": [[325, 2, 1, "", "__init__"]], "nilearn.glm.LikelihoodModelResults": [[326, 2, 1, "", "Fcontrast"], [326, 2, 1, "", "Tcontrast"], [326, 2, 1, "", "__init__"], [326, 2, 1, "", "conf_int"], [326, 2, 1, "", "logL"], [326, 2, 1, "", "t"], [326, 2, 1, "", "vcov"]], "nilearn.glm.OLSModel": [[327, 2, 1, "", "__init__"], [327, 2, 1, "", "fit"], [327, 2, 1, "", "initialize"], [327, 2, 1, "", "logL"], [327, 2, 1, "", "whiten"]], "nilearn.glm.RegressionResults": [[328, 2, 1, "", "Fcontrast"], [328, 2, 1, "", "MSE"], [328, 2, 1, "", "SSE"], [328, 2, 1, "", "Tcontrast"], [328, 2, 1, "", "__init__"], [328, 2, 1, "", "conf_int"], [328, 2, 1, "", "logL"], [328, 2, 1, "", "normalized_residuals"], [328, 2, 1, "", "predicted"], [328, 2, 1, "", "r_square"], [328, 2, 1, "", "residuals"], [328, 2, 1, "", "t"], [328, 2, 1, "", "vcov"]], "nilearn.glm.SimpleRegressionResults": [[329, 2, 1, "", "Fcontrast"], [329, 2, 1, "", "Tcontrast"], [329, 2, 1, "", "__init__"], [329, 2, 1, "", "conf_int"], [329, 2, 1, "", "logL"], [329, 2, 1, "", "normalized_residuals"], [329, 2, 1, "", "predicted"], [329, 2, 1, "", "residuals"], [329, 2, 1, "", "t"], [329, 2, 1, "", "vcov"]], "nilearn.glm.TContrastResults": [[330, 2, 1, "", "__init__"]], "nilearn.glm.first_level": [[336, 1, 1, "", "FirstLevelModel"], [337, 3, 1, "", "check_design_matrix"], [338, 3, 1, "", "compute_regressor"], [339, 3, 1, "", "first_level_from_bids"], [340, 3, 1, "", "glover_dispersion_derivative"], [341, 3, 1, "", "glover_hrf"], [342, 3, 1, "", "glover_time_derivative"], [343, 3, 1, "", "make_first_level_design_matrix"], [344, 3, 1, "", "mean_scaling"], [345, 3, 1, "", "run_glm"], [346, 3, 1, "", "spm_dispersion_derivative"], [347, 3, 1, "", "spm_hrf"], [348, 3, 1, "", "spm_time_derivative"]], "nilearn.glm.first_level.FirstLevelModel": [[336, 2, 1, "", "__init__"], [336, 2, 1, "", "compute_contrast"], [336, 2, 1, "", "fit"], [336, 2, 1, "", "fit_transform"], [336, 2, 1, "", "generate_report"], [336, 2, 1, "", "get_metadata_routing"], [336, 2, 1, "", "get_params"], [336, 2, 1, "", "predicted"], [336, 2, 1, "", "r_square"], [336, 2, 1, "", "residuals"], [336, 5, 1, "", "scaling_axis"], [336, 2, 1, "", "set_fit_request"], [336, 2, 1, "", "set_output"], [336, 2, 1, "", "set_params"]], "nilearn.glm.second_level": [[349, 1, 1, "", "SecondLevelModel"], [350, 3, 1, "", "make_second_level_design_matrix"], [351, 3, 1, "", "non_parametric_inference"]], "nilearn.glm.second_level.SecondLevelModel": [[349, 2, 1, "", "__init__"], [349, 2, 1, "", "compute_contrast"], [349, 2, 1, "", "fit"], [349, 2, 1, "", "fit_transform"], [349, 2, 1, "", "generate_report"], [349, 2, 1, "", "get_metadata_routing"], [349, 2, 1, "", "get_params"], [349, 2, 1, "", "predicted"], [349, 2, 1, "", "r_square"], [349, 2, 1, "", "residuals"], [349, 2, 1, "", "set_fit_request"], [349, 2, 1, "", "set_output"], [349, 2, 1, "", "set_params"]], "nilearn.image": [[353, 3, 1, "", "binarize_img"], [354, 3, 1, "", "clean_img"], [355, 3, 1, "", "concat_imgs"], [356, 3, 1, "", "coord_transform"], [357, 3, 1, "", "copy_img"], [358, 3, 1, "", "crop_img"], [359, 3, 1, "", "get_data"], [360, 3, 1, "", "high_variance_confounds"], [361, 3, 1, "", "index_img"], [362, 3, 1, "", "iter_img"], [363, 3, 1, "", "largest_connected_component_img"], [364, 3, 1, "", "load_img"], [365, 3, 1, "", "math_img"], [366, 3, 1, "", "mean_img"], [367, 3, 1, "", "new_img_like"], [368, 3, 1, "", "reorder_img"], [369, 3, 1, "", "resample_img"], [370, 3, 1, "", "resample_to_img"], [371, 3, 1, "", "smooth_img"], [372, 3, 1, "", "swap_img_hemispheres"], [373, 3, 1, "", "threshold_img"]], "nilearn.interfaces": [[483, 0, 0, "-", "bids"], [483, 0, 0, "-", "fmriprep"], [483, 0, 0, "-", "fsl"]], "nilearn.interfaces.bids": [[374, 3, 1, "", "get_bids_files"], [375, 3, 1, "", "parse_bids_filename"], [376, 3, 1, "", "save_glm_to_bids"]], "nilearn.interfaces.fmriprep": [[377, 3, 1, "", "load_confounds"], [378, 3, 1, "", "load_confounds_strategy"]], "nilearn.interfaces.fsl": [[379, 3, 1, "", "get_design_from_fslmat"]], "nilearn.maskers": [[380, 1, 1, "", "BaseMasker"], [381, 1, 1, "", "MultiNiftiLabelsMasker"], [382, 1, 1, "", "MultiNiftiMapsMasker"], [383, 1, 1, "", "MultiNiftiMasker"], [384, 1, 1, "", "NiftiLabelsMasker"], [385, 1, 1, "", "NiftiMapsMasker"], [386, 1, 1, "", "NiftiMasker"], [387, 1, 1, "", "NiftiSpheresMasker"]], "nilearn.maskers.BaseMasker": [[380, 2, 1, "", "__init__"], [380, 2, 1, "", "fit_transform"], [380, 2, 1, "", "get_metadata_routing"], [380, 2, 1, "", "get_params"], [380, 2, 1, "", "inverse_transform"], [380, 2, 1, "", "set_output"], [380, 2, 1, "", "set_params"], [380, 2, 1, "", "set_transform_request"], [380, 2, 1, "", "transform"], [380, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[381, 2, 1, "", "__init__"], [381, 2, 1, "", "fit"], [381, 2, 1, "", "fit_transform"], [381, 2, 1, "", "generate_report"], [381, 2, 1, "", "get_metadata_routing"], [381, 2, 1, "", "get_params"], [381, 2, 1, "", "inverse_transform"], [381, 2, 1, "", "set_fit_request"], [381, 2, 1, "", "set_inverse_transform_request"], [381, 2, 1, "", "set_output"], [381, 2, 1, "", "set_params"], [381, 2, 1, "", "set_transform_request"], [381, 2, 1, "", "transform"], [381, 2, 1, "", "transform_imgs"], [381, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMapsMasker": [[382, 2, 1, "", "__init__"], [382, 2, 1, "", "fit"], [382, 2, 1, "", "fit_transform"], [382, 2, 1, "", "generate_report"], [382, 2, 1, "", "get_metadata_routing"], [382, 2, 1, "", "get_params"], [382, 2, 1, "", "inverse_transform"], [382, 2, 1, "", "set_fit_request"], [382, 2, 1, "", "set_inverse_transform_request"], [382, 2, 1, "", "set_output"], [382, 2, 1, "", "set_params"], [382, 2, 1, "", "set_transform_request"], [382, 2, 1, "", "transform"], [382, 2, 1, "", "transform_imgs"], [382, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMasker": [[383, 2, 1, "", "__init__"], [383, 2, 1, "", "fit"], [383, 2, 1, "", "fit_transform"], [383, 2, 1, "", "generate_report"], [383, 2, 1, "", "get_metadata_routing"], [383, 2, 1, "", "get_params"], [383, 2, 1, "", "inverse_transform"], [383, 2, 1, "", "set_fit_request"], [383, 2, 1, "", "set_output"], [383, 2, 1, "", "set_params"], [383, 2, 1, "", "set_transform_request"], [383, 2, 1, "", "transform"], [383, 2, 1, "", "transform_imgs"], [383, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiLabelsMasker": [[384, 2, 1, "", "__init__"], [384, 2, 1, "", "fit"], [384, 2, 1, "", "fit_transform"], [384, 2, 1, "", "generate_report"], [384, 2, 1, "", "get_metadata_routing"], [384, 2, 1, "", "get_params"], [384, 2, 1, "", "inverse_transform"], [384, 2, 1, "", "set_fit_request"], [384, 2, 1, "", "set_inverse_transform_request"], [384, 2, 1, "", "set_output"], [384, 2, 1, "", "set_params"], [384, 2, 1, "", "set_transform_request"], [384, 2, 1, "", "transform"], [384, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMapsMasker": [[385, 2, 1, "", "__init__"], [385, 2, 1, "", "fit"], [385, 2, 1, "", "fit_transform"], [385, 2, 1, "", "generate_report"], [385, 2, 1, "", "get_metadata_routing"], [385, 2, 1, "", "get_params"], [385, 2, 1, "", "inverse_transform"], [385, 2, 1, "", "set_fit_request"], [385, 2, 1, "", "set_inverse_transform_request"], [385, 2, 1, "", "set_output"], [385, 2, 1, "", "set_params"], [385, 2, 1, "", "set_transform_request"], [385, 2, 1, "", "transform"], [385, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMasker": [[386, 2, 1, "", "__init__"], [386, 2, 1, "", "fit"], [386, 2, 1, "", "fit_transform"], [386, 2, 1, "", "generate_report"], [386, 2, 1, "", "get_metadata_routing"], [386, 2, 1, "", "get_params"], [386, 2, 1, "", "inverse_transform"], [386, 2, 1, "", "set_fit_request"], [386, 2, 1, "", "set_output"], [386, 2, 1, "", "set_params"], [386, 2, 1, "", "set_transform_request"], [386, 2, 1, "", "transform"], [386, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiSpheresMasker": [[387, 2, 1, "", "__init__"], [387, 2, 1, "", "fit"], [387, 2, 1, "", "fit_transform"], [387, 2, 1, "", "generate_report"], [387, 2, 1, "", "get_metadata_routing"], [387, 2, 1, "", "get_params"], [387, 2, 1, "", "inverse_transform"], [387, 2, 1, "", "set_inverse_transform_request"], [387, 2, 1, "", "set_output"], [387, 2, 1, "", "set_params"], [387, 2, 1, "", "set_transform_request"], [387, 2, 1, "", "transform"], [387, 2, 1, "", "transform_single_imgs"]], "nilearn.masking": [[388, 3, 1, "", "apply_mask"], [389, 3, 1, "", "compute_background_mask"], [390, 3, 1, "", "compute_brain_mask"], [391, 3, 1, "", "compute_epi_mask"], [392, 3, 1, "", "compute_multi_background_mask"], [393, 3, 1, "", "compute_multi_brain_mask"], [394, 3, 1, "", "compute_multi_epi_mask"], [395, 3, 1, "", "intersect_masks"], [396, 3, 1, "", "unmask"]], "nilearn.mass_univariate": [[397, 3, 1, "", "permuted_ols"]], "nilearn.plotting": [[487, 0, 0, "-", "displays"], [428, 3, 1, "", "find_cut_slices"], [429, 3, 1, "", "find_parcellation_cut_coords"], [430, 3, 1, "", "find_probabilistic_atlas_cut_coords"], [431, 3, 1, "", "find_xyz_cut_coords"], [432, 3, 1, "", "plot_anat"], [433, 3, 1, "", "plot_carpet"], [434, 3, 1, "", "plot_connectome"], [435, 3, 1, "", "plot_contrast_matrix"], [436, 3, 1, "", "plot_design_matrix"], [437, 3, 1, "", "plot_epi"], [438, 3, 1, "", "plot_event"], [439, 3, 1, "", "plot_glass_brain"], [440, 3, 1, "", "plot_img"], [441, 3, 1, "", "plot_img_comparison"], [442, 3, 1, "", "plot_img_on_surf"], [443, 3, 1, "", "plot_markers"], [444, 3, 1, "", "plot_matrix"], [445, 3, 1, "", "plot_prob_atlas"], [446, 3, 1, "", "plot_roi"], [447, 3, 1, "", "plot_stat_map"], [448, 3, 1, "", "plot_surf"], [449, 3, 1, "", "plot_surf_contours"], [450, 3, 1, "", "plot_surf_roi"], [451, 3, 1, "", "plot_surf_stat_map"], [452, 3, 1, "", "show"], [453, 3, 1, "", "view_connectome"], [454, 3, 1, "", "view_img"], [455, 3, 1, "", "view_img_on_surf"], [456, 3, 1, "", "view_markers"], [457, 3, 1, "", "view_surf"]], "nilearn.plotting.displays": [[398, 1, 1, "", "BaseAxes"], [399, 1, 1, "", "BaseSlicer"], [400, 1, 1, "", "CutAxes"], [401, 1, 1, "", "GlassBrainAxes"], [402, 1, 1, "", "LProjector"], [403, 1, 1, "", "LRProjector"], [404, 1, 1, "", "LYRProjector"], [405, 1, 1, "", "LYRZProjector"], [406, 1, 1, "", "LZRProjector"], [407, 1, 1, "", "LZRYProjector"], [408, 1, 1, "", "MosaicSlicer"], [409, 1, 1, "", "OrthoProjector"], [410, 1, 1, "", "OrthoSlicer"], [411, 1, 1, "", "PlotlySurfaceFigure"], [412, 1, 1, "", "RProjector"], [413, 1, 1, "", "TiledSlicer"], [414, 1, 1, "", "XProjector"], [415, 1, 1, "", "XSlicer"], [416, 1, 1, "", "XZProjector"], [417, 1, 1, "", "XZSlicer"], [418, 1, 1, "", "YProjector"], [419, 1, 1, "", "YSlicer"], [420, 1, 1, "", "YXProjector"], [421, 1, 1, "", "YXSlicer"], [422, 1, 1, "", "YZProjector"], [423, 1, 1, "", "YZSlicer"], [424, 1, 1, "", "ZProjector"], [425, 1, 1, "", "ZSlicer"], [426, 3, 1, "", "get_projector"], [427, 3, 1, "", "get_slicer"]], "nilearn.plotting.displays.BaseAxes": [[398, 2, 1, "", "__init__"], [398, 2, 1, "", "add_object_bounds"], [398, 2, 1, "", "draw_2d"], [398, 2, 1, "", "draw_left_right"], [398, 2, 1, "", "draw_position"], [398, 2, 1, "", "draw_scale_bar"], [398, 2, 1, "", "get_object_bounds"], [398, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.BaseSlicer": [[399, 2, 1, "", "__init__"], [399, 2, 1, "", "add_contours"], [399, 2, 1, "", "add_edges"], [399, 2, 1, "", "add_markers"], [399, 2, 1, "", "add_overlay"], [399, 2, 1, "", "annotate"], [399, 5, 1, "", "black_bg"], [399, 5, 1, "", "brain_color"], [399, 2, 1, "", "close"], [399, 2, 1, "", "find_cut_coords"], [399, 2, 1, "", "init_with_figure"], [399, 2, 1, "", "savefig"], [399, 2, 1, "", "title"]], "nilearn.plotting.displays.CutAxes": [[400, 2, 1, "", "__init__"], [400, 2, 1, "", "add_object_bounds"], [400, 2, 1, "", "draw_2d"], [400, 2, 1, "", "draw_left_right"], [400, 2, 1, "", "draw_position"], [400, 2, 1, "", "draw_scale_bar"], [400, 2, 1, "", "get_object_bounds"], [400, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.GlassBrainAxes": [[401, 2, 1, "", "__init__"], [401, 2, 1, "", "add_object_bounds"], [401, 2, 1, "", "draw_2d"], [401, 2, 1, "", "draw_left_right"], [401, 2, 1, "", "draw_position"], [401, 2, 1, "", "draw_scale_bar"], [401, 2, 1, "", "get_object_bounds"], [401, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.LProjector": [[402, 2, 1, "", "__init__"], [402, 2, 1, "", "add_contours"], [402, 2, 1, "", "add_edges"], [402, 2, 1, "", "add_graph"], [402, 2, 1, "", "add_markers"], [402, 2, 1, "", "add_overlay"], [402, 2, 1, "", "annotate"], [402, 5, 1, "", "black_bg"], [402, 5, 1, "", "brain_color"], [402, 2, 1, "", "close"], [402, 2, 1, "", "draw_cross"], [402, 2, 1, "", "find_cut_coords"], [402, 2, 1, "", "init_with_figure"], [402, 2, 1, "", "savefig"], [402, 2, 1, "", "title"]], "nilearn.plotting.displays.LRProjector": [[403, 2, 1, "", "__init__"], [403, 2, 1, "", "add_contours"], [403, 2, 1, "", "add_edges"], [403, 2, 1, "", "add_graph"], [403, 2, 1, "", "add_markers"], [403, 2, 1, "", "add_overlay"], [403, 2, 1, "", "annotate"], [403, 5, 1, "", "black_bg"], [403, 5, 1, "", "brain_color"], [403, 2, 1, "", "close"], [403, 2, 1, "", "draw_cross"], [403, 2, 1, "", "find_cut_coords"], [403, 2, 1, "", "init_with_figure"], [403, 2, 1, "", "savefig"], [403, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRProjector": [[404, 2, 1, "", "__init__"], [404, 2, 1, "", "add_contours"], [404, 2, 1, "", "add_edges"], [404, 2, 1, "", "add_graph"], [404, 2, 1, "", "add_markers"], [404, 2, 1, "", "add_overlay"], [404, 2, 1, "", "annotate"], [404, 5, 1, "", "black_bg"], [404, 5, 1, "", "brain_color"], [404, 2, 1, "", "close"], [404, 2, 1, "", "draw_cross"], [404, 2, 1, "", "find_cut_coords"], [404, 2, 1, "", "init_with_figure"], [404, 2, 1, "", "savefig"], [404, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRZProjector": [[405, 2, 1, "", "__init__"], [405, 2, 1, "", "add_contours"], [405, 2, 1, "", "add_edges"], [405, 2, 1, "", "add_graph"], [405, 2, 1, "", "add_markers"], [405, 2, 1, "", "add_overlay"], [405, 2, 1, "", "annotate"], [405, 5, 1, "", "black_bg"], [405, 5, 1, "", "brain_color"], [405, 2, 1, "", "close"], [405, 2, 1, "", "draw_cross"], [405, 2, 1, "", "find_cut_coords"], [405, 2, 1, "", "init_with_figure"], [405, 2, 1, "", "savefig"], [405, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRProjector": [[406, 2, 1, "", "__init__"], [406, 2, 1, "", "add_contours"], [406, 2, 1, "", "add_edges"], [406, 2, 1, "", "add_graph"], [406, 2, 1, "", "add_markers"], [406, 2, 1, "", "add_overlay"], [406, 2, 1, "", "annotate"], [406, 5, 1, "", "black_bg"], [406, 5, 1, "", "brain_color"], [406, 2, 1, "", "close"], [406, 2, 1, "", "draw_cross"], [406, 2, 1, "", "find_cut_coords"], [406, 2, 1, "", "init_with_figure"], [406, 2, 1, "", "savefig"], [406, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRYProjector": [[407, 2, 1, "", "__init__"], [407, 2, 1, "", "add_contours"], [407, 2, 1, "", "add_edges"], [407, 2, 1, "", "add_graph"], [407, 2, 1, "", "add_markers"], [407, 2, 1, "", "add_overlay"], [407, 2, 1, "", "annotate"], [407, 5, 1, "", "black_bg"], [407, 5, 1, "", "brain_color"], [407, 2, 1, "", "close"], [407, 2, 1, "", "draw_cross"], [407, 2, 1, "", "find_cut_coords"], [407, 2, 1, "", "init_with_figure"], [407, 2, 1, "", "savefig"], [407, 2, 1, "", "title"]], "nilearn.plotting.displays.MosaicSlicer": [[408, 2, 1, "", "__init__"], [408, 2, 1, "", "add_contours"], [408, 2, 1, "", "add_edges"], [408, 2, 1, "", "add_markers"], [408, 2, 1, "", "add_overlay"], [408, 2, 1, "", "annotate"], [408, 5, 1, "", "black_bg"], [408, 5, 1, "", "brain_color"], [408, 2, 1, "", "close"], [408, 2, 1, "", "draw_cross"], [408, 2, 1, "", "find_cut_coords"], [408, 2, 1, "", "init_with_figure"], [408, 2, 1, "", "savefig"], [408, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoProjector": [[409, 2, 1, "", "__init__"], [409, 2, 1, "", "add_contours"], [409, 2, 1, "", "add_edges"], [409, 2, 1, "", "add_graph"], [409, 2, 1, "", "add_markers"], [409, 2, 1, "", "add_overlay"], [409, 2, 1, "", "annotate"], [409, 5, 1, "", "black_bg"], [409, 5, 1, "", "brain_color"], [409, 2, 1, "", "close"], [409, 2, 1, "", "draw_cross"], [409, 2, 1, "", "find_cut_coords"], [409, 2, 1, "", "init_with_figure"], [409, 2, 1, "", "savefig"], [409, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoSlicer": [[410, 2, 1, "", "__init__"], [410, 2, 1, "", "add_contours"], [410, 2, 1, "", "add_edges"], [410, 2, 1, "", "add_markers"], [410, 2, 1, "", "add_overlay"], [410, 2, 1, "", "annotate"], [410, 5, 1, "", "black_bg"], [410, 5, 1, "", "brain_color"], [410, 2, 1, "", "close"], [410, 2, 1, "", "draw_cross"], [410, 2, 1, "", "find_cut_coords"], [410, 2, 1, "", "init_with_figure"], [410, 2, 1, "", "savefig"], [410, 2, 1, "", "title"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[411, 2, 1, "", "__init__"], [411, 2, 1, "", "savefig"], [411, 2, 1, "", "show"]], "nilearn.plotting.displays.RProjector": [[412, 2, 1, "", "__init__"], [412, 2, 1, "", "add_contours"], [412, 2, 1, "", "add_edges"], [412, 2, 1, "", "add_graph"], [412, 2, 1, "", "add_markers"], [412, 2, 1, "", "add_overlay"], [412, 2, 1, "", "annotate"], [412, 5, 1, "", "black_bg"], [412, 5, 1, "", "brain_color"], [412, 2, 1, "", "close"], [412, 2, 1, "", "draw_cross"], [412, 2, 1, "", "find_cut_coords"], [412, 2, 1, "", "init_with_figure"], [412, 2, 1, "", "savefig"], [412, 2, 1, "", "title"]], "nilearn.plotting.displays.TiledSlicer": [[413, 2, 1, "", "__init__"], [413, 2, 1, "", "add_contours"], [413, 2, 1, "", "add_edges"], [413, 2, 1, "", "add_markers"], [413, 2, 1, "", "add_overlay"], [413, 2, 1, "", "annotate"], [413, 5, 1, "", "black_bg"], [413, 5, 1, "", "brain_color"], [413, 2, 1, "", "close"], [413, 2, 1, "", "draw_cross"], [413, 2, 1, "", "find_cut_coords"], [413, 2, 1, "", "init_with_figure"], [413, 2, 1, "", "savefig"], [413, 2, 1, "", "title"]], "nilearn.plotting.displays.XProjector": [[414, 2, 1, "", "__init__"], [414, 2, 1, "", "add_contours"], [414, 2, 1, "", "add_edges"], [414, 2, 1, "", "add_graph"], [414, 2, 1, "", "add_markers"], [414, 2, 1, "", "add_overlay"], [414, 2, 1, "", "annotate"], [414, 5, 1, "", "black_bg"], [414, 5, 1, "", "brain_color"], [414, 2, 1, "", "close"], [414, 2, 1, "", "draw_cross"], [414, 2, 1, "", "find_cut_coords"], [414, 2, 1, "", "init_with_figure"], [414, 2, 1, "", "savefig"], [414, 2, 1, "", "title"]], "nilearn.plotting.displays.XSlicer": [[415, 2, 1, "", "__init__"], [415, 2, 1, "", "add_contours"], [415, 2, 1, "", "add_edges"], [415, 2, 1, "", "add_markers"], [415, 2, 1, "", "add_overlay"], [415, 2, 1, "", "annotate"], [415, 5, 1, "", "black_bg"], [415, 5, 1, "", "brain_color"], [415, 2, 1, "", "close"], [415, 2, 1, "", "draw_cross"], [415, 2, 1, "", "find_cut_coords"], [415, 2, 1, "", "init_with_figure"], [415, 2, 1, "", "savefig"], [415, 2, 1, "", "title"]], "nilearn.plotting.displays.XZProjector": [[416, 2, 1, "", "__init__"], [416, 2, 1, "", "add_contours"], [416, 2, 1, "", "add_edges"], [416, 2, 1, "", "add_graph"], [416, 2, 1, "", "add_markers"], [416, 2, 1, "", "add_overlay"], [416, 2, 1, "", "annotate"], [416, 5, 1, "", "black_bg"], [416, 5, 1, "", "brain_color"], [416, 2, 1, "", "close"], [416, 2, 1, "", "draw_cross"], [416, 2, 1, "", "find_cut_coords"], [416, 2, 1, "", "init_with_figure"], [416, 2, 1, "", "savefig"], [416, 2, 1, "", "title"]], "nilearn.plotting.displays.XZSlicer": [[417, 2, 1, "", "__init__"], [417, 2, 1, "", "add_contours"], [417, 2, 1, "", "add_edges"], [417, 2, 1, "", "add_markers"], [417, 2, 1, "", "add_overlay"], [417, 2, 1, "", "annotate"], [417, 5, 1, "", "black_bg"], [417, 5, 1, "", "brain_color"], [417, 2, 1, "", "close"], [417, 2, 1, "", "draw_cross"], [417, 2, 1, "", "find_cut_coords"], [417, 2, 1, "", "init_with_figure"], [417, 2, 1, "", "savefig"], [417, 2, 1, "", "title"]], "nilearn.plotting.displays.YProjector": [[418, 2, 1, "", "__init__"], [418, 2, 1, "", "add_contours"], [418, 2, 1, "", "add_edges"], [418, 2, 1, "", "add_graph"], [418, 2, 1, "", "add_markers"], [418, 2, 1, "", "add_overlay"], [418, 2, 1, "", "annotate"], [418, 5, 1, "", "black_bg"], [418, 5, 1, "", "brain_color"], [418, 2, 1, "", "close"], [418, 2, 1, "", "draw_cross"], [418, 2, 1, "", "find_cut_coords"], [418, 2, 1, "", "init_with_figure"], [418, 2, 1, "", "savefig"], [418, 2, 1, "", "title"]], "nilearn.plotting.displays.YSlicer": [[419, 2, 1, "", "__init__"], [419, 2, 1, "", "add_contours"], [419, 2, 1, "", "add_edges"], [419, 2, 1, "", "add_markers"], [419, 2, 1, "", "add_overlay"], [419, 2, 1, "", "annotate"], [419, 5, 1, "", "black_bg"], [419, 5, 1, "", "brain_color"], [419, 2, 1, "", "close"], [419, 2, 1, "", "draw_cross"], [419, 2, 1, "", "find_cut_coords"], [419, 2, 1, "", "init_with_figure"], [419, 2, 1, "", "savefig"], [419, 2, 1, "", "title"]], "nilearn.plotting.displays.YXProjector": [[420, 2, 1, "", "__init__"], [420, 2, 1, "", "add_contours"], [420, 2, 1, "", "add_edges"], [420, 2, 1, "", "add_graph"], [420, 2, 1, "", "add_markers"], [420, 2, 1, "", "add_overlay"], [420, 2, 1, "", "annotate"], [420, 5, 1, "", "black_bg"], [420, 5, 1, "", "brain_color"], [420, 2, 1, "", "close"], [420, 2, 1, "", "draw_cross"], [420, 2, 1, "", "find_cut_coords"], [420, 2, 1, "", "init_with_figure"], [420, 2, 1, "", "savefig"], [420, 2, 1, "", "title"]], "nilearn.plotting.displays.YXSlicer": [[421, 2, 1, "", "__init__"], [421, 2, 1, "", "add_contours"], [421, 2, 1, "", "add_edges"], [421, 2, 1, "", "add_markers"], [421, 2, 1, "", "add_overlay"], [421, 2, 1, "", "annotate"], [421, 5, 1, "", "black_bg"], [421, 5, 1, "", "brain_color"], [421, 2, 1, "", "close"], [421, 2, 1, "", "draw_cross"], [421, 2, 1, "", "find_cut_coords"], [421, 2, 1, "", "init_with_figure"], [421, 2, 1, "", "savefig"], [421, 2, 1, "", "title"]], "nilearn.plotting.displays.YZProjector": [[422, 2, 1, "", "__init__"], [422, 2, 1, "", "add_contours"], [422, 2, 1, "", "add_edges"], [422, 2, 1, "", "add_graph"], [422, 2, 1, "", "add_markers"], [422, 2, 1, "", "add_overlay"], [422, 2, 1, "", "annotate"], [422, 5, 1, "", "black_bg"], [422, 5, 1, "", "brain_color"], [422, 2, 1, "", "close"], [422, 2, 1, "", "draw_cross"], [422, 2, 1, "", "find_cut_coords"], [422, 2, 1, "", "init_with_figure"], [422, 2, 1, "", "savefig"], [422, 2, 1, "", "title"]], "nilearn.plotting.displays.YZSlicer": [[423, 2, 1, "", "__init__"], [423, 2, 1, "", "add_contours"], [423, 2, 1, "", "add_edges"], [423, 2, 1, "", "add_markers"], [423, 2, 1, "", "add_overlay"], [423, 2, 1, "", "annotate"], [423, 5, 1, "", "black_bg"], [423, 5, 1, "", "brain_color"], [423, 2, 1, "", "close"], [423, 2, 1, "", "draw_cross"], [423, 2, 1, "", "find_cut_coords"], [423, 2, 1, "", "init_with_figure"], [423, 2, 1, "", "savefig"], [423, 2, 1, "", "title"]], "nilearn.plotting.displays.ZProjector": [[424, 2, 1, "", "__init__"], [424, 2, 1, "", "add_contours"], [424, 2, 1, "", "add_edges"], [424, 2, 1, "", "add_graph"], [424, 2, 1, "", "add_markers"], [424, 2, 1, "", "add_overlay"], [424, 2, 1, "", "annotate"], [424, 5, 1, "", "black_bg"], [424, 5, 1, "", "brain_color"], [424, 2, 1, "", "close"], [424, 2, 1, "", "draw_cross"], [424, 2, 1, "", "find_cut_coords"], [424, 2, 1, "", "init_with_figure"], [424, 2, 1, "", "savefig"], [424, 2, 1, "", "title"]], "nilearn.plotting.displays.ZSlicer": [[425, 2, 1, "", "__init__"], [425, 2, 1, "", "add_contours"], [425, 2, 1, "", "add_edges"], [425, 2, 1, "", "add_markers"], [425, 2, 1, "", "add_overlay"], [425, 2, 1, "", "annotate"], [425, 5, 1, "", "black_bg"], [425, 5, 1, "", "brain_color"], [425, 2, 1, "", "close"], [425, 2, 1, "", "draw_cross"], [425, 2, 1, "", "find_cut_coords"], [425, 2, 1, "", "init_with_figure"], [425, 2, 1, "", "savefig"], [425, 2, 1, "", "title"]], "nilearn.regions": [[458, 1, 1, "", "HierarchicalKMeans"], [459, 1, 1, "", "Parcellations"], [460, 1, 1, "", "ReNA"], [461, 1, 1, "", "RegionExtractor"], [462, 3, 1, "", "connected_label_regions"], [463, 3, 1, "", "connected_regions"], [464, 3, 1, "", "img_to_signals_labels"], [465, 3, 1, "", "img_to_signals_maps"], [466, 3, 1, "", "recursive_neighbor_agglomeration"], [467, 3, 1, "", "signals_to_img_labels"], [468, 3, 1, "", "signals_to_img_maps"]], "nilearn.regions.HierarchicalKMeans": [[458, 2, 1, "", "__init__"], [458, 2, 1, "", "fit"], [458, 2, 1, "", "fit_predict"], [458, 2, 1, "", "fit_transform"], [458, 2, 1, "", "get_metadata_routing"], [458, 2, 1, "", "get_params"], [458, 2, 1, "", "inverse_transform"], [458, 2, 1, "", "set_inverse_transform_request"], [458, 2, 1, "", "set_output"], [458, 2, 1, "", "set_params"], [458, 2, 1, "", "transform"]], "nilearn.regions.Parcellations": [[459, 4, 1, "", "VALID_METHODS"], [459, 2, 1, "", "__init__"], [459, 2, 1, "", "fit"], [459, 2, 1, "", "fit_transform"], [459, 2, 1, "", "get_metadata_routing"], [459, 2, 1, "", "get_params"], [459, 2, 1, "", "inverse_transform"], [459, 2, 1, "", "score"], [459, 2, 1, "", "set_fit_request"], [459, 2, 1, "", "set_inverse_transform_request"], [459, 2, 1, "", "set_output"], [459, 2, 1, "", "set_params"], [459, 2, 1, "", "set_score_request"], [459, 2, 1, "", "set_transform_request"], [459, 2, 1, "", "transform"]], "nilearn.regions.ReNA": [[460, 2, 1, "", "__init__"], [460, 2, 1, "", "fit"], [460, 2, 1, "", "fit_predict"], [460, 2, 1, "", "fit_transform"], [460, 2, 1, "", "get_metadata_routing"], [460, 2, 1, "", "get_params"], [460, 2, 1, "", "inverse_transform"], [460, 2, 1, "", "set_inverse_transform_request"], [460, 2, 1, "", "set_output"], [460, 2, 1, "", "set_params"], [460, 2, 1, "", "transform"]], "nilearn.regions.RegionExtractor": [[461, 2, 1, "", "__init__"], [461, 2, 1, "", "fit"], [461, 2, 1, "", "fit_transform"], [461, 2, 1, "", "generate_report"], [461, 2, 1, "", "get_metadata_routing"], [461, 2, 1, "", "get_params"], [461, 2, 1, "", "inverse_transform"], [461, 2, 1, "", "set_fit_request"], [461, 2, 1, "", "set_inverse_transform_request"], [461, 2, 1, "", "set_output"], [461, 2, 1, "", "set_params"], [461, 2, 1, "", "set_transform_request"], [461, 2, 1, "", "transform"], [461, 2, 1, "", "transform_single_imgs"]], "nilearn.reporting": [[469, 1, 1, "", "HTMLReport"], [470, 3, 1, "", "get_clusters_table"], [471, 3, 1, "", "make_glm_report"]], "nilearn.reporting.HTMLReport": [[469, 2, 1, "", "__init__"], [469, 2, 1, "", "get_iframe"], [469, 2, 1, "", "get_standalone"], [469, 2, 1, "", "open_in_browser"], [469, 2, 1, "", "resize"], [469, 2, 1, "", "save_as_html"]], "nilearn.signal": [[472, 3, 1, "", "butterworth"], [473, 3, 1, "", "clean"], [474, 3, 1, "", "high_variance_confounds"]], "nilearn.surface": [[475, 3, 1, "", "load_surf_data"], [476, 3, 1, "", "load_surf_mesh"], [477, 3, 1, "", "vol_to_surf"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute", "5": "py:property"}, "terms": {"": [0, 2, 3, 4, 6, 9, 16, 23, 29, 30, 33, 34, 40, 41, 44, 49, 50, 55, 56, 63, 64, 65, 66, 67, 69, 70, 71, 74, 76, 77, 78, 79, 85, 90, 92, 93, 99, 101, 102, 103, 108, 111, 112, 115, 116, 120, 123, 132, 133, 139, 146, 156, 157, 162, 165, 169, 172, 173, 175, 176, 178, 179, 180, 181, 183, 184, 186, 187, 188, 193, 194, 195, 196, 197, 198, 200, 201, 204, 205, 212, 215, 219, 220, 221, 223, 225, 227, 228, 231, 232, 234, 235, 236, 244, 246, 247, 255, 257, 258, 260, 261, 267, 272, 274, 277, 279, 281, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 326, 328, 329, 336, 349, 353, 354, 363, 365, 369, 370, 371, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 433, 434, 442, 443, 448, 449, 450, 451, 453, 455, 457, 458, 459, 460, 461, 471, 473, 478, 492, 495], "0": [2, 3, 4, 5, 6, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 162, 163, 166, 168, 174, 175, 176, 177, 178, 184, 186, 187, 188, 198, 199, 203, 207, 208, 209, 210, 211, 224, 231, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 323, 324, 326, 327, 328, 329, 331, 332, 333, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 432, 433, 434, 439, 443, 444, 445, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 469, 470, 471, 473, 474, 477, 478, 479, 492, 493, 494], "00": [7, 27, 30, 32, 33, 44, 45, 48, 53, 59, 72, 81, 88, 95, 109, 117, 119, 478, 494], "000": [34, 42, 78, 93, 119, 173], "0000": 176, "000000": [62, 65], "00001": 218, "00002": [120, 197, 245], "00008": [120, 123, 221, 277, 279], "0001": [303, 304], "00012665e": 3, "0002": 176, "00059417e": 3, "000697": 48, "000828": 56, "000832": 49, "000886": 48, "001": [6, 33, 41, 44, 62, 75, 78, 79, 80, 100, 178, 235, 236, 238, 303, 304, 336, 349, 352, 471, 478], "0010042": 11, "0010042_rest_tshift_rpi_voreg_mni": 11, "00106849e": 3, "001315": 48, "00152": [23, 115, 120, 222, 287], "00156": [102, 120, 397], "001653": 33, "00167": [49, 120, 165], "0016934773463517239": 68, "001942": 49, "002": 41, "002148": 49, "00231445e": 3, "0023749453300866787": 68, "00276266e": 3, "00281": 48, "002881": 48, "0029482": [120, 183], "003": 41, "00338": [120, 226, 232, 254, 258], "003659": 48, "004": [40, 41, 120, 198, 219, 276], "004191": 49, "004194": 48, "004387": 48, "005": [41, 120, 170, 300, 301], "005029": 48, "00563468": [44, 120, 174], "00599": [120, 193, 242], "006": [41, 49, 58, 120, 225, 261], "00653949e": 3, "00662591e": 3, "007": [41, 56, 120, 162, 163, 218, 220, 252, 275], "007294": 56, "007541": 56, "00768351e": 3, "008": [33, 41], "00839984": [120, 174], "008536": 33, "008926": 33, "009": [41, 120, 433], "00991743": [120, 174], "00_tutori": [3, 4, 6, 7, 168, 182, 494], "00e": 478, "01": [3, 4, 6, 7, 12, 27, 30, 32, 33, 38, 42, 45, 48, 51, 53, 55, 58, 59, 61, 69, 70, 72, 81, 95, 98, 99, 100, 102, 108, 109, 113, 116, 117, 120, 198, 202, 212, 220, 236, 248, 252, 336, 339, 343, 374, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 478, 479, 494], "010": [22, 23, 41, 48, 114, 115, 120, 167, 202, 256, 305], "01093944": [120, 166, 461], "011": 41, "011243": 48, "01147731": [120, 174], "012": 41, "012477": 48, "013": [41, 65, 72, 494], "013254": 48, "013524": 33, "014": 41, "015": 41, "015679": 53, "016": [41, 65], "01697551e": 3, "017": 41, "017351": 33, "01768988e": 3, "018": [41, 120, 198, 377, 378], "018509907565882628": 68, "01872468e": 3, "019": 41, "019085": 56, "0193": [120, 207, 208, 209, 210, 211, 231, 257, 286], "019374": 56, "01_plot": [11, 15, 23, 27, 154, 161, 182, 455, 494], "01_task": [99, 100, 108, 113], "01d": 3, "01hz": [65, 242], "02": [3, 27, 30, 33, 45, 48, 51, 53, 59, 62, 70, 72, 77, 95, 98, 113, 120, 162, 167, 173, 183, 198, 212, 246, 305, 377, 378, 478, 494], "020": [41, 56, 120, 212, 377, 378], "021": 41, "02145332e": 3, "022": 41, "022169": 56, "022416": 56, "022868": 53, "023": 41, "023900": 56, "024": [41, 68, 72, 494], "024188": 56, "024363": 33, "025": 41, "025223": 33, "02587": 53, "026": 41, "026078": 56, "026206": 33, "026366": 56, "027": 41, "027587": 56, "027876": 56, "028": 41, "02838706e": 3, "029": 41, "02904869": [120, 204, 249], "02912780e": 3, "029500": 56, "029747": 56, "02_decod": [29, 36, 41, 43, 45, 182, 494], "02_task": [100, 113], "02d": 79, "02g": 70, "03": [3, 27, 30, 32, 33, 41, 44, 49, 53, 56, 59, 70, 72, 81, 90, 95, 109, 113, 120, 173, 181, 351, 377, 378, 397, 478, 479, 494], "030": 41, "03003937e": 3, "030863": 33, "031": 41, "031008074173867566": 68, "032": 41, "03259890e": 3, "03298556e": 3, "033": [41, 120, 198, 214, 267, 292], "033396": 56, "033577": 33, "033685": 56, "034": [41, 76, 81, 494], "034236": 56, "034483": 56, "034515": 33, "035": [37, 41, 120], "036": 41, "03623097e": 3, "03663965e": 3, "037": [31, 41, 120], "037845": 6, "038": 41, "03857955e": 3, "039": 41, "03902201e": 3, "03928021e": 3, "0395": [23, 115, 120, 202], "0396": [23, 115, 120, 202], "03_connect": [47, 48, 49, 55, 59, 149, 161, 182, 494], "03_task": 113, "03d": [41, 99], "03g": 74, "04": [3, 27, 30, 32, 33, 49, 53, 56, 70, 113, 117, 120, 162, 163, 175, 220, 252, 354, 377, 378, 473, 474, 478, 479, 494], "040": 41, "04053866e": 3, "04069345e": 3, "041": [41, 63, 72, 120, 173, 494], "042": [41, 120, 377, 378, 474], "042248": 56, "042495": 56, "04261311e": 3, "043": 41, "043261": 33, "043724": 62, "04385977e": 3, "044": 41, "044073": 53, "045": 41, "046": 41, "04617581e": 3, "047": 41, "047089": 33, "0471754951": [120, 328, 329], "04798924e": 3, "048": [41, 79, 81, 120, 377, 494], "04858744e": 3, "048779": 53, "049": [41, 111, 117, 494], "049211": 56, "049458": 56, "04965657e": 3, "04_glm_first_level": [62, 69, 70, 71, 72, 494], "04_task": 113, "05": [6, 12, 27, 30, 32, 33, 44, 49, 51, 53, 70, 74, 75, 76, 78, 80, 98, 109, 113, 178, 195, 196, 197, 201, 220, 223, 224, 226, 229, 230, 231, 232, 243, 244, 247, 252, 253, 254, 257, 258, 281, 284, 285, 287, 326, 328, 329, 331, 478, 479, 494], "050": 41, "0504136102": [120, 378], "051": [6, 7, 41, 494], "052": [41, 120, 200, 272], "05201": [120, 168], "052775": 56, "05280783e": 3, "052952": 56, "05298099e": 3, "053": 41, "053022": 56, "053241": 56, "054": [41, 120, 173], "054041": 33, "054759": 56, "055": 41, "055006": 56, "056": 41, "056108": 33, "056165": 62, "056424": 33, "057": 41, "057023": 53, "05703656e": 3, "05764703e": 3, "058": [41, 95], "058735": 33, "059": [41, 114, 117, 494], "05_advanc": [149, 161], "05_glm_second_level": [81, 494], "05_task": 113, "06": [22, 23, 27, 32, 33, 45, 70, 72, 81, 90, 95, 109, 113, 114, 115, 120, 175, 198, 202, 246, 256, 302, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 447, 454, 478, 479, 494], "060": [41, 47, 59, 72, 75, 102, 120, 331, 397, 494], "0600244103": [120, 173, 183], "061": [41, 120, 181, 351, 397], "06153360e": 3, "062": [41, 51, 98, 120, 174], "062316": 53, "062723": 33, "063": [41, 120, 162], "064": [41, 120, 377, 378], "064266": 56, "06447975e": 3, "064554": 56, "064585": 56, "064873": 56, "065": 41, "06520610e": 3, "065223": 53, "065658": 33, "066": 41, "066075": 33, "066189": [120, 323, 327], "06663773e": 3, "067": 41, "068": 41, "068131": 33, "06832180e": 3, "068998": 56, "069": 41, "069287": 56, "06_manipulating_imag": [83, 85, 90, 93, 95, 494], "06_task": 113, "07": [30, 32, 33, 37, 49, 59, 69, 70, 75, 90, 95, 109, 113, 117, 120, 169, 198, 214, 226, 254, 267, 292, 331, 460, 466, 478, 494], "070": 41, "07013775e": 3, "07049870657346953": 68, "071": 41, "072": [11, 27, 41, 494], "07246596e": 3, "07298626e": 3, "073": [41, 56, 120, 169, 378], "073279": 33, "07350015": [120, 397], "07354411e": 3, "074": 41, "075": 41, "07532459e": 3, "075540": 56, "075787": 56, "076": 41, "07603394e": 3, "077": 41, "07737": 33, "077517": 56, "077764": 56, "078": 41, "078390": 62, "079": 41, "079389": 62, "07_advanc": [99, 100, 108, 109, 494], "07_task": 113, "08": [30, 32, 33, 45, 49, 59, 70, 113, 117, 120, 162, 194, 198, 274, 358, 377, 433, 478, 479, 494], "080": [41, 120], "08007070e": 3, "080159": 33, "081": 41, "0811879106": [120, 194, 274], "081559": 56, "081847": 56, "082": [41, 120, 198, 246], "082416": 33, "083": 41, "084": 41, "085": 41, "08510755e": 3, "085568": 6, "086": 41, "087": 41, "087084": 53, "087451": 6, "088": 41, "08855506e": 3, "08860073e": 3, "089": 41, "089762": 53, "08_experiment": [113, 115, 117, 494], "08_task": 113, "09": [30, 32, 33, 45, 58, 59, 95, 113, 120, 200, 202, 214, 223, 225, 248, 261, 267, 272, 281, 292, 336, 349, 354, 471, 473, 478, 479, 494], "090": 41, "09027741e": 3, "090297": 33, "0905267106": [120, 228, 255], "0908073106": [120, 198], "09081331e": 3, "091": 41, "091153": 33, "091568": 6, "09183940e": 3, "091867": 33, "092": 41, "093": 41, "094": 41, "09406199e": 3, "09407381e": 3, "09423218e": 3, "095": 41, "095605": 33, "095788": 33, "096": 41, "097": [29, 41, 45, 494], "09703099e": 3, "0978": [120, 195, 244], "098": 41, "09866794e": 3, "098904": 33, "099": 41, "09934": 33, "09941625e": 3, "09947524e": 3, "099707": 33, "09_task": 113, "0a0": 146, "0min": [33, 48, 49, 52, 53, 54, 56, 58], "0mm": [83, 183], "0rc1": [158, 161], "0x7f3b9da27530": 33, "0x7f3b9da98e30": 111, "0x7f3b9e44dc10": 58, "0x7f3b9e467620": 54, "0x7f3b9e467d10": 50, "0x7f3b9ebde3c0": 15, "0x7f3b9ebdea20": 14, "0x7f3b9ecf0e90": 49, "0x7f3b9ecf1250": 53, "0x7f3b9ee9a090": 56, "0x7f3b9f578dd0": 80, "0x7f3ba081a960": 93, "0x7f3ba081b950": 93, "0x7f3ba087cb30": 56, "0x7f3ba0894ce0": 56, "0x7f3ba625cb30": 56, "0x7f3ba8f37740": 58, "0x7f3ba97fc050": 88, "0x7f3ba9856a50": 58, "0x7f3ba987d580": 85, "0x7f3ba98b9d00": 88, "0x7f3baac016a0": 49, "0x7f3baac41f40": 49, "0x7f3baac428d0": 33, "0x7f3baac433b0": 33, "0x7f3baac43560": 49, "0x7f3baac43a70": 49, "0x7f3baac46510": 49, "0x7f3bac2616d0": 80, "0x7f3bac261c70": 49, "0x7f3bac263b00": 49, "0x7f3bac451d00": 58, "0x7f3bac4e8dd0": 91, "0x7f3bb2dcf530": 51, "0x7f3bb2e3c890": 15, "0x7f3bb43fd550": 39, "0x7f3bb4476630": 33, "0x7f3bb4477b90": 33, "0x7f3bb45c4ce0": 56, "0x7f3bb48fdac0": 70, "0x7f3bb497fce0": 48, "0x7f3bb49e4320": 56, "0x7f3bb4be8050": 47, "0x7f3bb4d72210": 14, "0x7f3bb4d72ab0": 4, "0x7f3bb4d99ee0": 70, "0x7f3bb4dc48f0": 16, "0x7f3bb4e87110": 14, "0x7f3bb4eb0d10": 4, "0x7f3bb4edb410": 9, "0x7f3bb4f3d490": 16, "0x7f3bb4f3daf0": 68, "0x7f3bb4f3ec90": 93, "0x7f3bb4f90dd0": 80, "0x7f3bb5959ac0": 52, "0x7f3bb595a720": 49, "0x7f3bb595b3b0": 33, "0x7f3bb595b590": 33, "0x7f3bb5b13b30": 93, "0x7f3bb5d045c0": [88, 93], "0x7f3bb5d44380": 49, "0x7f3bb5d45e20": 49, "0x7f3bb5d46930": 85, "0x7f3bb5dac710": 56, "0x7f3bb5dae030": 56, "0x7f3bb5e91df0": 56, "0x7f3bb5e93da0": 56, "0x7f3bb5f33740": 56, "0x7f3bb5fe4320": 74, "0x7f3bb60e9d00": 13, "0x7f3bb612c0e0": 93, "0x7f3bb62680e0": 58, "0x7f3bb62bf770": 42, "0x7f3bb6341e20": 52, "0x7f3bb6343800": 49, "0x7f3bb6343980": 49, "0x7f3bb93d1d00": 25, "0x7f3bb93d21e0": 25, "0x7f3bb93ee2d0": 15, "0x7f3bb93eef90": 33, "0x7f3bb93efb30": 33, "0x7f3bb94080e0": 51, "0x7f3bb9409880": 15, "0x7f3bb94a5430": 15, "0x7f3bb94b89e0": 15, "0x7f3bb94bb140": 15, "0x7f3bb95580e0": 15, "0x7f3bb955ad20": 3, "0x7f3bb958c830": 4, "0x7f3bb958c890": 6, "0x7f3bb95da690": 97, "0x7f3bb95da720": 33, "0x7f3bb95db320": 10, "0x7f3bb95dba40": 33, "0x7f3bb96cc5c0": 10, "0x7f3bb96f9a30": 49, "0x7f3bb9758890": 4, "0x7f3bb9794890": 16, "0x7f3bb9797c50": 33, "0x7f3bba5c4bc0": 80, "0x7f3bba6623c0": 13, "0x7f3bba663b30": 14, "0x7f3bba729220": 5, "0x7f3bbabd5a60": 53, "0x7f3bc6570e00": 48, "0x7f3bc65ffe90": 15, "0x7f3bc69e1d00": 2, "0x7f3bc6a0ce60": 2, "0x7f3bc6a58e90": 53, "0x7f3bc6b77050": 33, "0x7f3bc6b77080": 33, "0x7f3bc7cf1610": 2, "0x7f3bd0160950": 68, "0x7f3bd02380e0": 15, "0x7f3bd0239490": 15, "0x7f3bd0432a20": 14, "0x7f3bd06a47d0": 15, "0x7f3bd076a960": 16, "0x7f3bd076baa0": 33, "0x7f3bd076bf20": 33, "0x7f3bd08e2660": 14, "0x7f3bd09177a0": 33, "0x7f3bd0a006e0": 14, "0x7f3bd0a02ed0": 58, "0x7f3bd0a03b30": 17, "0x7f3bd0a48050": 14, "0x7f3bd0a48dd0": 87, "0x7f3bd0a697f0": 52, "0x7f3bd0a6b770": 52, "0x7f3bd0a6bb30": 49, "0x7f3bd0af8470": 36, "0x7f3bd0af9d90": 36, "0x7f3bd0b25d90": 33, "0x7f3bd0b28050": 50, "0x7f3bd0b29730": 49, "0x7f3bd0b29d00": 17, "0x7f3bd0b2a270": 49, "0x7f3bd0b2b860": 14, "0x7f3bd0bbc440": 33, "0x7f3bd0bbf5f0": 33, "0x7f3bd0bc5af0": 70, "0x7f3bd0c8fb30": 33, "0x7f3bd0cb8e30": 40, "0x7f3bd0ce48f0": 68, "0x7f3bd0d0e3c0": 74, "0x7f3bd0d2dcd0": 48, "0x7f3bd0d2f530": 16, "0x7f3bd0e9dc10": 17, "0x7f3bd0f72330": 33, "0x7f3bd0f73140": 85, "0x7f3bd0f73590": 33, "0x7f3bd0f99340": 14, "0x7f3bd0fb0500": 33, "0x7f3bd0fbfe30": 50, "0x7f3bd0fe1d00": 52, "0x7f3bd45d8830": 53, "1": [2, 3, 4, 5, 6, 9, 10, 11, 12, 15, 18, 19, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 120, 122, 123, 129, 131, 132, 133, 134, 136, 140, 141, 143, 146, 148, 149, 156, 158, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 181, 183, 184, 186, 188, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 323, 324, 326, 327, 328, 329, 331, 336, 339, 343, 345, 349, 351, 353, 354, 358, 361, 363, 366, 369, 371, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 433, 434, 435, 439, 441, 443, 444, 445, 446, 448, 450, 451, 454, 455, 457, 458, 459, 460, 461, 466, 468, 470, 473, 474, 477, 478, 479, 492, 493, 494], "10": [0, 2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 19, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 83, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 115, 117, 120, 123, 128, 146, 156, 162, 163, 165, 167, 168, 169, 170, 173, 174, 175, 177, 178, 181, 183, 193, 194, 195, 197, 198, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 234, 235, 238, 242, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 269, 272, 274, 275, 276, 277, 279, 281, 282, 286, 287, 292, 298, 299, 300, 301, 302, 303, 304, 305, 306, 324, 331, 332, 339, 351, 353, 354, 365, 377, 378, 382, 384, 385, 387, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 433, 451, 458, 459, 460, 461, 464, 465, 466, 469, 470, 473, 474, 477, 478, 479, 492, 494], "100": [3, 15, 31, 33, 34, 40, 41, 42, 44, 49, 55, 63, 74, 83, 85, 88, 116, 117, 123, 169, 178, 185, 194, 198, 226, 236, 242, 254, 274, 277, 298, 299, 300, 301, 303, 304, 333, 336, 344, 345, 353, 360, 373, 474, 478, 479, 492, 494, 495], "1000": [34, 49, 76, 93, 165, 178, 193, 196, 198, 226, 254, 458, 479], "10000": [39, 42, 49, 55, 102, 105, 351, 397], "10000000000": 324, "1002": [120, 201, 207, 208, 209, 210, 211, 231, 247, 257, 286, 354, 473], "10052056e": 3, "1006": [23, 115, 120, 195, 202, 244], "100765": 479, "1008": [120, 162, 235], "100m": 65, "100mm": 85, "101": [33, 40, 41, 120, 377, 378, 474, 478, 479], "10159": [62, 478], "10159_task": 62, "1016": [22, 23, 37, 40, 41, 48, 49, 51, 56, 58, 75, 98, 102, 114, 115, 120, 162, 163, 167, 169, 170, 173, 174, 181, 198, 200, 202, 204, 212, 214, 218, 219, 220, 225, 227, 246, 248, 249, 252, 256, 261, 262, 267, 272, 275, 276, 292, 300, 301, 305, 328, 329, 331, 351, 377, 378, 397, 433, 474], "102": [23, 33, 40, 41, 115, 120, 222, 287, 378, 478, 479], "10215979e": 3, "1024": [153, 161, 204, 249], "10241193e": 3, "10242": [114, 115, 286, 442, 455], "102714": 53, "103": [15, 27, 33, 41, 120, 173, 183, 302, 478, 479, 494], "10332925e": 3, "10344358e": 3, "10364033e": 3, "1038": [120, 224, 253, 264, 282], "104": [33, 39, 41, 45, 249, 478, 479, 494], "104073": 56, "1042": [99, 120], "10426": 280, "104535": 33, "1046": [158, 161], "105": [33, 41, 478, 479], "10509354": [120, 397], "1052": [99, 120], "105373": 56, "1054": 479, "105434": 56, "105651": 56, "1058": [120, 198], "105981": 56, "106": [33, 41, 120, 194, 198, 226, 228, 232, 254, 255, 258, 274, 478, 479], "1062": 479, "1063736": [3, 31, 32, 38, 97, 120, 213, 266], "1064": [120, 198], "106438": 56, "106460": 56, "106474": 33, "106742": 56, "106895": 56, "107": [23, 33, 41, 83, 478, 479], "107012": 56, "107145": 56, "107229": 56, "1073": [120, 173, 183, 194, 198, 228, 255, 274, 378], "10743432e": 3, "107488": 56, "107567": 56, "1078": 479, "108": [33, 41, 70, 71, 478, 479], "1080": [120, 397], "108038": 56, "108058": 56, "108176": 56, "1082": [158, 161], "108211": 56, "108325": 56, "1084": [100, 109, 494], "108401": 56, "108440": 56, "10845448e": 3, "108591": 56, "108632": 56, "108723": 56, "108861": 33, "108875": 56, "108937": 56, "108990": 56, "109": [2, 33, 41, 43, 56, 90, 155, 161, 244, 255, 478, 479], "1090": [48, 479], "109066": 56, "109090": 56, "109104": 56, "1093": [69, 120, 162, 194, 202, 226, 248, 254, 274], "109387": 56, "109412": 33, "1095": 479, "109540": 56, "109616": 56, "109654": 56, "1097": [120, 207, 208, 209, 210, 211, 231, 257, 286], "109731": 56, "109769": 56, "1098": 479, "10_task": 113, "10a": [62, 478], "10b": 62, "10k": [108, 113], "10mm": 49, "10th": 40, "10x10": [40, 41], "11": [3, 6, 16, 24, 27, 33, 40, 41, 44, 49, 52, 53, 55, 59, 62, 64, 65, 67, 71, 72, 90, 97, 103, 108, 109, 120, 124, 134, 143, 146, 147, 148, 156, 162, 194, 198, 201, 202, 212, 218, 219, 235, 247, 248, 274, 275, 276, 283, 353, 358, 366, 368, 369, 370, 373, 478, 479, 494], "110": [33, 41, 83, 85, 120, 257, 264, 282, 478, 479], "1101": [120, 227, 262, 354, 473], "110301": 56, "110644": 56, "11072": 90, "1109": [44, 48, 49, 120, 167, 174, 195, 198, 246, 305, 306, 460, 466], "111": [33, 41, 53, 61, 90, 478, 479], "1111": [102, 120, 397], "1112": 193, "111370240": 4, "1116": 478, "112": [33, 41, 92, 116, 120, 377, 378, 478, 479], "11208": 90, "1122": 479, "112207": 33, "1125": [120, 226, 232, 254, 258], "1126": [3, 31, 32, 38, 58, 97, 120, 183, 198, 205, 213, 246, 260, 266], "113": [33, 41, 116, 204, 478, 479], "1132": 33, "1139": [120, 198, 246], "114": [33, 41, 44, 115, 146, 161, 478, 479], "1143": 479, "11431470e": 3, "114769": 33, "115": [33, 41, 51, 98, 115, 117, 120, 146, 161, 478, 479, 494], "1152": [120, 226, 232, 254, 258], "1155": [154, 161], "1156": 479, "11598303e": 3, "116": [33, 41, 71, 244, 478, 479], "1161": 479, "1162": [120, 223, 228, 255, 281], "116290": [120, 227, 262], "1165": [120, 226, 232, 254, 258], "117": [33, 41, 92, 155, 161, 244, 478, 479], "1170": 479, "117126": [120, 204, 249], "1171599": [120, 183], "11752": 90, "11760": 90, "1177": [120, 305], "11775931e": 3, "11782088e": 3, "118": [19, 27, 33, 41, 478, 479, 494], "1180": [120, 305], "11872": 90, "1188": [6, 51, 59, 98, 109, 478, 494], "119": [33, 41, 71, 134, 161, 478, 479], "1190": 479, "1193353": [120, 202, 248], "1194144": [58, 120, 205, 260], "11a": 478, "12": [3, 4, 6, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 44, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 65, 66, 68, 69, 70, 71, 74, 76, 77, 78, 79, 80, 81, 83, 85, 88, 90, 91, 92, 94, 95, 97, 100, 102, 103, 104, 105, 106, 107, 109, 111, 116, 120, 124, 127, 129, 130, 134, 136, 152, 157, 158, 161, 174, 175, 187, 188, 195, 198, 203, 228, 244, 246, 253, 255, 263, 339, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 461, 478, 479, 494], "120": [33, 41, 43, 83, 98, 120, 231, 257, 478, 479], "1206": [120, 175], "1207": [120, 175, 235, 238], "120742": 56, "121": [33, 41, 65, 478, 479], "12100847e": 3, "12134682e": 3, "1214": 479, "1215": 479, "12165120": 116, "122": [33, 41, 65, 71, 124, 161, 198, 246, 263, 478, 479], "122246": 56, "12226630e": 3, "1224": [478, 479], "12249118e": 3, "122921": 33, "123": [33, 41, 249, 478, 479], "1230": 479, "123176": 90, "12326079e": 3, "12338545e": 3, "1235": 34, "1238": [140, 161], "12393": 478, "123e": 53, "124": [4, 33, 40, 41, 478, 479], "1242": 176, "1246": 479, "124a": 33, "125": [33, 40, 41, 71, 99, 120, 478, 479], "1255": 479, "1256": [120, 212, 479], "1257": 479, "126": [6, 33, 41, 43, 56, 70, 90, 101, 155, 161, 478, 479], "12606752e": 3, "1261": 479, "1265": [120, 212], "126756": 33, "12697600": 116, "127": [33, 41, 143, 161, 478, 479], "1271": [120, 198], "1273": 479, "12752": 90, "12756233e": 3, "127944": 53, "128": [33, 41, 63, 65, 67, 83, 91, 104, 108, 112, 153, 161, 204, 249, 478, 479], "12810898e": 3, "1282": [48, 120, 167, 306], "1285": [48, 120, 167, 306], "1285615": 246, "12883073e": 3, "1289": 479, "129": [33, 41, 70, 127, 161, 478, 479], "1290": 479, "1294": [120, 198], "12a": 33, "12mm": 93, "12th": [120, 198], "13": [3, 4, 6, 11, 16, 29, 33, 36, 44, 48, 53, 56, 62, 65, 69, 70, 74, 76, 83, 88, 90, 92, 103, 107, 109, 120, 124, 130, 132, 134, 159, 161, 173, 199, 203, 234, 246, 247, 255, 262, 281, 323, 327, 333, 353, 358, 366, 368, 369, 370, 373, 377, 384, 385, 397, 433, 464, 465, 478, 479, 494], "130": [33, 41, 478, 479], "1300793": [69, 120], "1303": [52, 59, 494], "13040": [120, 228, 255], "13040031e": 3, "13045": [120, 228, 255], "1307": 103, "13075836e": 3, "131": [33, 41, 71, 120, 231, 257, 478, 479], "1310": [102, 105, 106], "1314": 479, "1319": 76, "132": [33, 41, 49, 52, 478, 479], "1327": 479, "13270986e": 3, "1328": [44, 120, 174], "133": [33, 41, 89, 95, 478, 479, 494], "1335": 479, "1336": [149, 161], "13385360e": 3, "1339": 479, "134": [33, 41, 51, 92, 98, 120, 155, 161, 478, 479], "1340": [44, 120, 174], "13411075e": 3, "1346": [30, 45, 494], "13466689e": 3, "1347": [25, 27, 494], "1349": [50, 59, 494], "135": [33, 41, 71, 478, 479], "1350": [50, 166, 461, 463], "1350mm": [461, 463], "1355": 479, "1356": [32, 45, 494], "1357": 479, "1358": [58, 120, 205, 260], "136": [33, 41, 47, 478, 479], "1361": [58, 120, 205, 260, 479], "13629798e": 3, "13676191e": 3, "137": [33, 41, 71, 478, 479], "1370": [144, 161], "1371": [120, 183], "1372": 479, "1375": 479, "1377": 479, "13782369e": 3, "138": [33, 41, 478, 479], "1384": 479, "1389": 479, "139": [33, 41, 478, 479], "13936": 90, "1395": 479, "1396": 479, "1397": 479, "13a": 33, "13th": [48, 120, 167, 306], "14": [4, 6, 18, 30, 33, 38, 40, 45, 48, 58, 62, 68, 76, 88, 90, 95, 103, 120, 125, 127, 139, 141, 142, 143, 146, 149, 159, 161, 173, 198, 202, 226, 248, 254, 450, 478, 479, 494], "140": [33, 40, 41, 69, 71, 478, 479], "1402": 479, "141": [33, 41, 128, 161, 257, 478, 479], "142": [33, 41, 71, 134, 161, 478, 479], "14223826e": 3, "1429": [99, 120], "143": [33, 41, 71, 478, 479], "14300829e": 3, "1432": 120, "1435": 479, "1438": [99, 120, 479], "144": [33, 41, 120, 200, 272, 478, 479], "14429175e": 3, "144442": 33, "14448": 90, "1445": 120, "1447": [3, 97], "1448": [3, 97], "1449": [3, 97], "144a": 33, "145": [33, 41, 120, 168, 478, 479], "1450": [3, 97], "1451": [3, 97], "1452": [3, 93, 97], "145297": 33, "145684": 33, "1458": 479, "146": [33, 41, 71, 137, 161, 478, 479], "1460": 479, "146031": 48, "146358": 33, "14638023e": 3, "14640": 90, "1466": 479, "1467": [102, 120, 397], "146a": 33, "147": [33, 41, 99, 109, 478, 479, 494], "1473": 78, "148": [33, 41, 478, 479], "1483": 479, "148582": 33, "149": [33, 41, 71, 478, 479], "149007": 33, "1491": 479, "149296": 33, "1497": 479, "1498": [120, 223, 281, 479], "14991564e": 3, "14a": [62, 478], "15": [4, 6, 7, 22, 23, 24, 27, 30, 33, 49, 51, 61, 62, 65, 68, 71, 76, 77, 79, 83, 90, 93, 102, 103, 107, 109, 114, 115, 120, 124, 128, 131, 132, 142, 146, 156, 161, 195, 202, 234, 244, 256, 384, 385, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 433, 464, 465, 478, 479, 494], "150": [25, 33, 41, 120, 187, 433, 478, 479], "1500": 87, "15033842e": 3, "150482": 33, "150519": 33, "1507": [120, 223, 281], "15088": 90, "151": [33, 41, 107, 478, 479], "1512": 6, "151677": 53, "152": [23, 33, 41, 115, 120, 181, 190, 198, 222, 287, 478, 479], "1523": [120, 143, 161, 173], "1527": 479, "153": [33, 41, 71, 478, 479], "153013": 33, "15344365e": 3, "15345460e": 3, "1536": [144, 161], "1539": 479, "153mb": 276, "154": [33, 41, 56, 120, 377, 378, 433, 478, 479], "15427086e": 3, "15449125e": 3, "155": [33, 41, 120, 212, 263, 478, 479], "1550": 479, "15536": 90, "155444": 53, "155784": 33, "15583": 101, "156": [10, 27, 33, 41, 71, 478, 479, 494], "156418048": 4, "1565": [120, 194, 274], "1567": [120, 194, 274], "15687838e": 3, "157": [33, 41, 478, 479], "1570": 479, "15748": 33, "1577": 479, "158": [33, 41, 120, 433, 478, 479], "1582": 479, "1583": [120, 183], "158342": 33, "158448": 48, "1585": [120, 183], "15885927e": 3, "158e": 53, "159": [33, 41, 69, 70, 71, 478, 479], "1595": [144, 161], "16": [6, 7, 13, 25, 30, 32, 33, 34, 39, 45, 48, 49, 53, 54, 58, 59, 62, 65, 66, 75, 76, 78, 79, 83, 90, 103, 105, 147, 154, 161, 175, 187, 193, 212, 229, 253, 382, 385, 387, 461, 478, 479, 492, 494], "160": [33, 41, 58, 83, 120, 170, 205, 242, 260, 300, 301, 477, 478, 479], "1600": [336, 349, 471, 479], "160110": [120, 264, 282], "16032": 90, "160445": 33, "1606": [120, 168], "161": [33, 41, 478, 479], "1617": 479, "1619": 479, "162": [33, 41, 71, 120, 212, 478, 479], "1621": 479, "162243": 33, "162682": 49, "1627": 479, "163": [33, 41, 56, 478, 479], "1631": 479, "16367616": 116, "1637": 479, "1638": 479, "163842": [286, 442, 455], "163956": 62, "164": [33, 41, 56, 71, 478, 479], "1640": 479, "16425721e": 3, "1646": 479, "16480869e": 3, "16495654e": 3, "165": [33, 41, 56, 478, 479], "166": [33, 41, 56, 76, 81, 105, 109, 120, 168, 478, 479, 494], "167": [33, 41, 56, 71, 478, 479], "1671": 479, "16722770e": 3, "1673": 479, "16783964e": 3, "168": [6, 33, 41, 54, 55, 56, 58, 88, 90, 166, 478, 479], "168487": 33, "169": [33, 41, 478, 479], "1691": 479, "1694": 479, "1699": 479, "16a": 33, "17": [6, 30, 32, 33, 42, 47, 61, 62, 65, 72, 76, 79, 90, 97, 103, 109, 120, 146, 161, 194, 195, 226, 232, 244, 254, 258, 274, 478, 479, 494], "170": [33, 41, 71, 86, 95, 478, 479, 494], "1704": 479, "1705": [146, 161], "17097426e": 3, "171": [33, 41, 56, 109, 120, 212, 378, 478, 479, 494], "17135771e": 3, "1716": 479, "172": [33, 41, 103, 120, 170, 257, 300, 301, 478, 479], "17268807e": 3, "173": [33, 41, 71, 478, 479], "1730": 479, "17300841": 120, "17303287": [120, 194, 274], "17304041e": 3, "174": [33, 41, 56, 120, 377, 378, 478, 479], "17431079e": 3, "174325": 53, "175": [33, 41, 478, 479], "17557876e": 3, "17562859e": 3, "1756878": [120, 223, 281], "1757": 479, "175763": 33, "17593338e": 3, "176": [33, 41, 61, 71, 101, 478, 479], "17663304e": 3, "177": [33, 41, 478, 479], "17736": 101, "1775": 479, "17768448": 116, "1777164": [120, 228, 255], "178": [33, 41, 478, 479], "1780": 40, "17810508e": 3, "1789": 479, "179": [23, 33, 41, 115, 120, 168, 202, 478, 479], "1792": 479, "1796": 479, "17987323e": 3, "179998": 33, "18": [6, 27, 33, 55, 58, 59, 62, 71, 79, 81, 90, 103, 107, 120, 125, 139, 146, 156, 161, 188, 194, 198, 203, 212, 220, 263, 274, 302, 448, 450, 451, 478, 479, 492, 494], "180": [33, 41, 83, 120, 146, 161, 170, 198, 300, 301, 448, 450, 451, 478, 479], "180063": [120, 224, 253], "1804": 479, "18072": 90, "1808": 479, "181": [33, 41, 75, 120, 331, 478, 479], "18104878e": 3, "18129225e": 3, "182": [33, 41, 250, 251, 254, 478, 479], "1822": 479, "182434": 33, "182988": 33, "183": [33, 41, 478, 479], "18333696": 116, "1836": 479, "184": [33, 41, 478, 479], "1842": 479, "1845": 479, "18456576": 116, "18497220e": 3, "185": [33, 41, 58, 478, 479], "1851": 479, "18520400e": 3, "1859": [47, 59, 494], "186": [33, 41, 478, 479], "186135": 33, "1866": 479, "1869": 479, "18696306e": 3, "187": [33, 41, 56, 120, 377, 378, 478, 479], "18718027e": 3, "18728": 90, "188": [33, 41, 71, 478, 479], "18826034e": 3, "1888": [149, 161], "189": [33, 41, 120, 354, 361, 473, 478, 479], "1898": 479, "18a": 478, "19": [6, 12, 29, 33, 38, 41, 45, 53, 62, 76, 90, 103, 109, 120, 129, 132, 134, 136, 149, 161, 195, 196, 220, 223, 224, 226, 229, 230, 231, 232, 243, 244, 252, 253, 254, 257, 258, 281, 284, 285, 328, 329, 478, 479, 494], "190": [33, 41, 478, 479], "190472": 62, "1905": 479, "1906": 479, "191": [33, 41, 67, 71, 72, 478, 479, 494], "1914": [120, 201, 247], "191442": 33, "1917": 479, "192": [33, 41, 51, 83, 98, 120, 478, 479], "1920": 479, "19272": 90, "1928": [120, 201, 247], "19296": 90, "193": [33, 41, 253, 478, 479], "1935": [40, 120], "19387529e": 3, "19387992e": 3, "194": [23, 33, 41, 115, 120, 202, 478, 479], "1941": 479, "195": [23, 33, 41, 71, 115, 120, 202, 478, 479], "1951": [40, 149, 161], "19513344": 101, "1952": [42, 123, 149, 161], "1953": [149, 161], "1955": 479, "196": [33, 41, 478, 479], "197": [19, 33, 41, 198, 246, 361, 478, 479], "1971": 479, "1974": 479, "19790677e": 3, "198": [33, 41, 71, 253, 478, 479], "1983": [120, 397], "1985": 479, "1987": 479, "199": [33, 41, 94, 95, 478, 479, 494], "1991": 479, "1993": 479, "19935484e": 3, "1994": [120, 354, 473], "19958553e": 3, "1997": [120, 149, 161, 198, 231, 257], "1998": [23, 115, 120, 195, 202, 244], "1999": [23, 115, 120, 202, 207, 208, 209, 210, 211, 214, 267, 286, 479], "19a": 478, "19b": 478, "1a": [6, 33, 62, 478], "1b": [6, 62, 478], "1c": [6, 62, 478], "1d": [51, 102, 105, 106, 122, 158, 161, 186, 188, 234, 302, 326, 328, 329, 332, 338, 354, 376, 380, 381, 382, 383, 384, 385, 386, 387, 408, 415, 419, 425, 428, 461, 462, 467, 472, 473, 475, 477], "1e": [30, 39, 40, 49, 116, 235, 236, 238, 281, 303, 304, 324, 358, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 447, 450, 454, 460, 466], "1e3": 76, "1e4": [298, 299, 300, 301], "1f": [44, 448, 451], "1hz": 242, "1min": 53, "1mm": [10, 129, 155, 161, 250, 251, 254, 291, 292, 294, 390], "1st": 55, "1x2": 41, "2": [3, 4, 6, 9, 11, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 82, 83, 86, 87, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 120, 123, 125, 127, 128, 129, 141, 143, 144, 146, 147, 154, 155, 156, 162, 163, 166, 167, 168, 169, 173, 174, 175, 176, 178, 183, 184, 187, 188, 194, 195, 197, 198, 200, 201, 202, 206, 207, 208, 209, 210, 211, 212, 214, 220, 221, 223, 224, 226, 228, 230, 231, 232, 234, 235, 236, 240, 241, 242, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 257, 258, 263, 264, 265, 266, 267, 268, 272, 274, 277, 279, 281, 283, 285, 286, 287, 289, 290, 292, 293, 298, 299, 300, 301, 302, 303, 304, 305, 306, 323, 326, 327, 328, 329, 336, 338, 339, 343, 345, 349, 351, 352, 354, 360, 361, 364, 365, 366, 367, 370, 371, 373, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 396, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 434, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 454, 460, 461, 463, 464, 465, 467, 470, 473, 474, 477, 478, 479, 492, 493, 494], "20": [6, 9, 21, 24, 27, 33, 39, 44, 45, 48, 50, 52, 54, 57, 58, 62, 65, 68, 71, 77, 80, 90, 93, 99, 103, 106, 120, 127, 134, 139, 161, 162, 166, 168, 193, 194, 198, 228, 246, 255, 274, 298, 299, 300, 301, 303, 304, 305, 306, 477, 478, 479, 494], "200": [30, 33, 41, 43, 45, 93, 103, 105, 120, 162, 194, 198, 234, 242, 246, 254, 274, 303, 304, 478, 479, 494], "2000": [5, 42, 49, 120, 149, 152, 161, 165, 186, 231, 257], "200007": [120, 231, 257], "2001": [3, 31, 32, 38, 97, 102, 120, 122, 172, 182, 186, 195, 213, 244, 266, 397, 495], "2002": [120, 195, 244], "2003": [69, 120, 323, 327, 479], "2004": [99, 120, 202, 248, 328, 329], "2005": [120, 212, 378], "2006": [70, 120, 173, 183, 198, 206, 212, 302, 328, 329], "2007": [65, 71, 120, 190, 200, 212, 223, 272, 281, 360, 377, 378, 474], "200737": 33, "2008": [28, 45, 118, 120, 162, 181, 188, 190, 276, 351, 356, 373, 380, 383, 386, 397, 425, 447, 452, 479, 494], "2009": [2, 21, 120, 128, 152, 155, 161, 181, 183, 190, 194, 198, 202, 214, 248, 255, 267, 268, 274, 292, 351, 397], "2009a": 198, "201": [33, 41, 71, 478, 479], "2010": [4, 22, 23, 37, 38, 48, 58, 114, 115, 120, 141, 161, 162, 167, 169, 190, 198, 202, 214, 234, 235, 246, 256, 260, 267, 292, 305], "2011": [37, 44, 49, 58, 120, 123, 128, 141, 161, 162, 169, 173, 174, 190, 198, 214, 218, 220, 221, 226, 228, 245, 252, 254, 255, 258, 261, 267, 275, 277, 279, 292, 377, 378], "2012": [23, 49, 99, 115, 120, 158, 161, 163, 168, 174, 175, 183, 190, 198, 218, 222, 247, 275, 287, 377, 378, 479], "2013": [56, 120, 149, 161, 162, 163, 173, 174, 193, 198, 204, 220, 242, 246, 252, 377], "2014": [49, 99, 102, 120, 165, 166, 173, 174, 194, 274, 377, 397, 461], "201474048": 4, "2015": [120, 123, 124, 125, 126, 127, 128, 134, 135, 161, 174, 194, 200, 220, 221, 235, 238, 252, 272, 274, 277, 279, 377, 378], "20151532e": 3, "20153834": [48, 120, 167, 305], "2016": [48, 99, 120, 136, 137, 138, 139, 140, 161, 167, 264, 282, 306, 433], "2017": [56, 120, 141, 142, 143, 161, 168, 170, 200, 224, 226, 253, 254, 272, 300, 301, 377, 378, 433, 479], "20171209e": 3, "2018": [49, 56, 75, 120, 144, 145, 146, 161, 170, 190, 203, 204, 224, 253, 254, 263, 300, 301, 331, 354, 378, 460, 466, 473], "2019": [49, 51, 98, 120, 147, 148, 149, 161, 227, 262, 460, 466, 479], "202": [33, 41, 478, 479], "2020": [120, 150, 151, 152, 161, 204, 227, 249, 262], "20200": 90, "20206": 116, "20207": 116, "20208": 116, "2021": [153, 154, 155, 161, 195, 196, 201, 220, 223, 224, 226, 229, 230, 231, 232, 243, 244, 247, 252, 253, 254, 257, 258, 281, 284, 285, 287, 479], "2022": [156, 157, 158, 161], "2023": [129, 130, 131, 161], "2024": [120, 133, 161, 162, 183, 198, 212], "2025": [149, 161, 479], "2028": [149, 161], "2029": 479, "203": [30, 33, 41, 61, 71, 72, 478, 479, 494], "2031": 479, "2033": 479, "203695": 33, "2037": 479, "204": [33, 41, 478, 479], "2041": [49, 120], "2043": 479, "2047": 479, "20484": [114, 115, 116], "204891": 33, "2049": [49, 120], "20499": [120, 198], "204a": 33, "205": [33, 41, 478, 479], "20503": [120, 198], "2052": [149, 161, 479], "2053": 479, "2054": 479, "205584": 33, "2057": [149, 161], "2058": 479, "20590705e": 3, "206": [33, 41, 120, 227, 262, 478, 479], "20613458e": 3, "2063": [149, 161], "2064": 479, "20691790": [120, 169], "206928": 53, "207": [23, 33, 41, 71, 115, 120, 202, 478, 479], "2070": 479, "20736": 90, "2074": 479, "208": [33, 41, 120, 162, 234, 478, 479], "208105": 62, "2083": [149, 161], "2088": 90, "209": [33, 41, 478, 479], "2090": [149, 161], "2093": 197, "2096": [120, 163], "20mm": [94, 183], "21": [4, 6, 30, 33, 36, 45, 54, 58, 62, 65, 76, 90, 103, 115, 117, 132, 136, 154, 161, 212, 287, 478, 479, 494], "210": [4, 6, 7, 22, 33, 41, 67, 71, 72, 112, 114, 117, 120, 214, 267, 354, 473, 478, 479, 494], "2104": 479, "2106": [120, 163], "2107": [149, 161], "211": [33, 41, 43, 478, 479], "2110": 479, "2113378": [44, 120, 174], "2118": [149, 161], "212": [7, 33, 41, 43, 71, 253, 478, 479, 494], "21211233e": 3, "2128": 479, "213": [2, 33, 41, 478, 479], "2131": [40, 149, 161, 479], "21333": [120, 201, 247], "2136": 479, "2138": [149, 161], "214": [33, 41, 478, 479], "21406521e": 3, "2142": [120, 198, 377, 378], "2144": 58, "21449": 479, "2148": 479, "215": [33, 41, 71, 478, 479], "21501993e": 3, "2152": 479, "2153": 479, "2154": [120, 198, 377, 378, 479], "2155": 479, "2157": [149, 161], "216": [3, 30, 33, 41, 478, 479], "2162": 479, "2163": [120, 479], "21653723": [120, 226, 232, 254, 258], "2166": [149, 161], "21664686e": 3, "2167": 479, "2169": [149, 161], "217": [33, 41, 195, 244, 478, 479], "21715480e": 3, "2172": [149, 161], "217486": 33, "2175": 479, "2177": [120, 149, 161, 479], "218": [33, 41, 71, 250, 251, 254, 478, 479], "2181": 479, "2186": 479, "219": [33, 41, 478, 479], "2194": 479, "2195": [149, 161], "21952089e": 3, "2196": 478, "219713": 56, "21983667e": 3, "22": [2, 6, 7, 21, 27, 30, 33, 45, 62, 90, 95, 103, 107, 120, 136, 147, 156, 161, 202, 248, 356, 478, 479, 494], "220": [33, 41, 478, 479], "22019881": [120, 198, 377, 378], "2202": 479, "22035314e": 3, "220446049250313e": 79, "2207": 479, "2209": 120, "22093031e": 3, "221": [33, 41, 71, 94, 120, 204, 249, 478, 479], "2212": [149, 161], "221217": 56, "2214": [33, 149, 161], "22198087e": 3, "222": [33, 41, 478, 479], "2221": [149, 161], "2224": 479, "222674": 33, "222824": 33, "2229": 120, "223": [33, 41, 120, 214, 267, 478, 479], "2231": [149, 161], "22315008": 4, "2234": 479, "22346710e": 3, "2235": [149, 161, 479], "2239": 479, "223948": 33, "22398761e": 3, "224": [5, 7, 33, 41, 71, 478, 479, 494], "2240": [149, 161], "2242": 479, "2243": 479, "2244": [93, 95, 494], "2245": 479, "2246": 479, "2248": [149, 161], "225": [33, 41, 47, 478, 479], "2251": 479, "2255": [149, 161], "226": [33, 41, 94, 95, 478, 479, 494], "22602795e": 3, "22624798e": 3, "2264": [33, 479], "22686835e": 3, "2269": 479, "227": [33, 41, 70, 71, 478, 479], "227098e": 48, "2272": [150, 161], "2273": [39, 45, 494], "2274": 479, "2277": 479, "22779930e": 3, "2278": 479, "228": [33, 41, 478, 479], "22802": 479, "2282": [156, 161], "229": [33, 41, 93, 95, 253, 478, 479, 494], "2290": [150, 161], "2299": [152, 161], "23": [6, 33, 62, 71, 90, 93, 95, 99, 103, 120, 198, 228, 246, 255, 304, 478, 479, 494], "230": [33, 41, 62, 71, 478, 479], "2300": [151, 161], "2302": [151, 161], "23027311e": 3, "2304": [152, 161], "23065795e": 3, "2307": [152, 161], "2308": [151, 161], "2309": 479, "231": [33, 41, 478, 479], "2312": [151, 161, 479], "231224": 33, "231796": 33, "2319": 479, "232": [33, 41, 478, 479], "2325": 479, "23264": 90, "2327": [152, 161], "23274890e": 3, "232909": 33, "23293000e": 3, "233": [33, 41, 361, 478, 479], "23349415e": 3, "23390758e": 3, "234": [33, 41, 71, 478, 479], "23411626e": 3, "23478603e": 3, "23481009e": 3, "235": [33, 41, 478, 479], "23552": 90, "2358": 479, "236": [33, 41, 71, 478, 479], "236279": 56, "23642649e": 3, "237": [33, 41, 478, 479], "23707648": 116, "237783": 56, "2379": 479, "238": [33, 41, 120, 231, 257, 478, 479], "2385": 479, "2388": 479, "239": [33, 41, 478, 479], "23921397e": 3, "2395": 479, "23a": 33, "24": [6, 33, 39, 45, 51, 58, 62, 68, 72, 90, 103, 131, 154, 161, 336, 338, 339, 343, 377, 478, 479, 494], "240": [33, 41, 478, 479], "2401": 479, "2402": [42, 45, 494], "2409": 479, "240914": 33, "241": [33, 41, 478, 479], "2410": 479, "2411": [74, 81, 479, 494], "24169702e": 3, "242": [33, 41, 120, 231, 257, 478, 479], "2425": [3, 31, 32, 38, 97, 120, 213, 266], "24256x24256": 49, "2429": [151, 161], "243": [33, 41, 478, 479], "2430": [3, 31, 32, 38, 97, 120, 213, 266], "24359": 101, "244": [33, 41, 478, 479], "2440": 479, "244136": 33, "2446": 479, "2449": 479, "24497544e": 3, "245": [33, 41, 478, 479], "245273": 33, "2453": 479, "246": [33, 41, 71, 78, 81, 478, 479, 494], "2462": 479, "246384": 33, "2465": 479, "2466": 479, "2467": 479, "246751232": 4, "247": [33, 41, 478, 479], "2471": 479, "247146": 33, "24774": 33, "2478": 479, "2479": 479, "248": [33, 41, 71, 478, 479], "2482": 479, "2485": 479, "249": [33, 41, 479], "24913214e": 3, "2494": 479, "25": [6, 15, 23, 27, 30, 32, 33, 40, 41, 62, 63, 76, 90, 93, 94, 97, 103, 115, 124, 161, 163, 194, 274, 326, 328, 329, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 445, 453, 455, 456, 457, 478, 479, 494], "250": [33, 41, 65, 120, 479], "250365": 33, "2506": 479, "2509": [152, 161], "251": [33, 41, 71, 479], "2511": 479, "251249": 33, "25184": 90, "252": [6, 33, 41, 93, 478, 479], "2520": 62, "253": [33, 41, 83, 479], "2531": 479, "2532": [154, 161], "253889": 6, "253894": 33, "2539": 479, "254": [33, 41, 71, 124, 161, 479], "254210": 62, "2543": 479, "2544": 479, "254408": 33, "254544": 6, "255": [33, 41, 155, 161, 479], "2551": 479, "2553": [153, 161, 479], "25537778e": 3, "2555": 479, "256": [4, 24, 27, 33, 41, 48, 59, 83, 153, 161, 204, 249, 258, 479, 494], "25604199e": 3, "2561": 479, "25615442e": 3, "2562": [286, 455], "25649152": 116, "2565": 479, "2567": [153, 161], "25696344": [120, 226, 254], "257": [33, 41, 71, 479], "257986": 62, "258": [33, 41, 479], "2588": 479, "259": [33, 41, 479], "25902797e": 3, "2594": 479, "2598": 479, "259998e": 49, "26": [6, 22, 33, 61, 62, 71, 74, 90, 103, 139, 161, 462, 478, 479], "260": [33, 41, 71, 479], "2606": [153, 161], "2608": 479, "261": [33, 41, 120, 173, 479], "261016": 33, "2617": 479, "2619": [153, 161], "262": [33, 41, 120, 479], "2622": [153, 161], "263": [33, 41, 253, 479], "2630": 479, "2635": 479, "2636": [99, 120, 168], "2637": 479, "263781": 48, "264": [33, 41, 58, 71, 225, 261, 479], "2643": [99, 120, 153, 161, 168], "2645": 365, "2649": 479, "265": [33, 41, 479], "2650": 479, "2655": [156, 161], "26599": 33, "266": [33, 41, 71, 479], "2663": 479, "2669": [153, 161], "267": [33, 41, 57, 120, 377, 378, 479], "2674": [153, 161, 479], "2675": 107, "2676": 107, "2678": 479, "26795775e": 3, "268": [33, 37, 41, 45, 479, 494], "2684": [153, 161], "269": [33, 41, 71, 120, 173, 479], "2696": [153, 161], "2697": [153, 161], "27": [6, 14, 15, 16, 17, 27, 33, 62, 70, 89, 90, 92, 103, 109, 120, 198, 206, 378, 461, 463, 478, 479, 492, 494], "270": [9, 27, 33, 41, 56, 59, 448, 450, 451, 479, 494], "2702": [153, 161], "27048": 90, "2707": [154, 161], "270733": 6, "2708": 33, "271": [33, 41, 52, 54, 479], "271132": 33, "2712": [153, 161], "2714": [153, 161], "2715": [129, 158, 161], "2717": 479, "2719": [153, 161, 479], "272": [33, 41, 120, 207, 208, 209, 210, 211, 286, 479], "2723": [155, 161], "2725": 479, "273": [33, 41, 120, 195, 244, 479], "2730": [154, 161], "2732": [154, 161], "27353843e": 3, "2738": [155, 161], "274": [33, 41, 479], "27424310e": 3, "2743": 479, "2745": [154, 161], "274665": 33, "274819": 33, "275": [33, 41, 71, 479], "2750": 479, "2755": [155, 161, 479], "2757": 479, "276": [33, 36, 41, 45, 479, 494], "2767": [154, 161], "2769": 479, "277": [33, 41, 120, 377, 378, 479], "27701142e": 3, "2774": 479, "2775": 479, "278": [3, 7, 33, 41, 71, 479, 494], "2783": 479, "27836416": 116, "2789": 479, "279": [33, 41, 43, 45, 479, 494], "2790": [154, 161], "2792": [154, 161], "279282": 33, "279543": 33, "2797": 479, "2798": [154, 161], "27a": 33, "27mm": [461, 463], "28": [7, 33, 58, 62, 88, 90, 103, 111, 116, 117, 120, 124, 146, 161, 197, 226, 245, 254, 478, 479, 494], "280": [33, 41, 479], "28029882e": 3, "2804": [131, 161], "2805": [154, 161], "28050912e": 3, "2806": [154, 161, 479], "2807": 479, "28087692e": 3, "28090699e": 3, "281": [33, 41, 479], "2810": [154, 161], "28103928e": 3, "2815": [154, 161], "2815524": [49, 120, 460, 466], "2816": 479, "2818": 107, "281997": [120, 231, 257], "281999": [120, 207, 208, 209, 210, 211, 286], "282": [33, 41, 93, 479], "28200007": [120, 231, 257], "2821": [154, 156, 161], "2823": 479, "2826": [154, 161, 479], "2827": 479, "2828": [120, 173], "2829": [156, 161], "283": [33, 41, 88, 95, 479, 494], "2831": [154, 161], "2833": [132, 161], "2834": 107, "2835": 479, "2836": 479, "284": [33, 41, 65, 71, 120, 207, 208, 209, 210, 211, 286, 479], "2846": [20, 48, 50], "28499968": 116, "285": [33, 41, 479], "2858": [154, 161], "2859": [156, 161], "286": [7, 33, 41, 479, 494], "2860": 40, "2867": [154, 161], "2868": [154, 161], "2869": [154, 161], "287": [6, 33, 41, 64, 72, 479, 494], "28703529e": 3, "28726942e": 3, "2875": [155, 161], "2876": [155, 161], "28796446e": 3, "288": [33, 41, 48, 65, 71, 72, 120, 167, 305, 478, 479, 494], "2880": [156, 161], "289": [33, 41, 120, 195, 244, 479], "2890": 479, "28sici": [120, 207, 208, 209, 210, 211, 231, 257, 286], "29": [20, 33, 36, 62, 71, 80, 90, 103, 116, 134, 161, 478, 479], "290": [33, 41, 479], "2900": [155, 161], "290147": 33, "2902": [43, 45, 156, 161, 494], "2904": [155, 161, 479], "290412": 33, "291": [6, 33, 41, 65, 71, 478, 479], "2910": [120, 231, 257], "291097": [120, 207, 208, 209, 210, 211, 231, 257, 286], "2911": [59, 494], "2912": 48, "29124937e": 3, "29172250e": 3, "2919": 479, "292": [33, 41, 120, 397, 479], "292282368": 4, "29244747e": 3, "2928": [155, 161, 479], "292987": 33, "293": [3, 31, 32, 33, 38, 41, 65, 71, 97, 120, 213, 266, 479], "29335552": 116, "2934": [59, 479, 494], "2935": 49, "2939": 479, "294": [6, 33, 41, 479], "2941": [155, 161], "2942": [156, 161], "2944": [155, 161], "2945": 479, "2946": [156, 161], "295": [33, 41, 120, 231, 257, 479], "29515631e": 3, "2953": [157, 161], "2959": [35, 45, 494], "296": [33, 41, 65, 71, 479], "2962": 479, "2965": [156, 161], "297": [33, 39, 41, 479], "29727769e": 3, "297a": 33, "298": [33, 41, 120, 207, 208, 209, 210, 211, 286, 397, 479], "2986": 479, "299": [33, 41, 48, 120, 167, 305, 479], "299562": 33, "29a": 478, "2a": [6, 62, 478], "2b": [62, 478], "2c": [62, 478], "2d": [51, 54, 83, 90, 91, 97, 103, 121, 158, 161, 168, 171, 185, 188, 235, 236, 237, 238, 239, 305, 306, 323, 332, 356, 376, 380, 381, 382, 383, 384, 385, 386, 387, 388, 398, 400, 401, 402, 403, 404, 405, 406, 407, 412, 414, 416, 418, 420, 422, 424, 439, 458, 459, 460, 461, 467, 468, 475, 477, 485, 495], "2f": [30, 32, 41, 42, 43, 44, 49, 57, 88], "2g": [399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 437, 439, 440, 442, 446, 447, 448, 450, 451], "2min": [43, 48, 56], "2mm": [10, 21, 56, 90, 129, 155, 161, 163, 173, 249, 250, 251, 479], "2nd": [3, 25, 29, 30, 32, 33, 34, 35, 36, 37, 266], "2t": [6, 229], "2x1": 41, "2x2": [41, 147, 161, 408, 410, 413, 427, 432, 437, 440, 445, 446, 447, 492], "3": [2, 3, 4, 6, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 116, 120, 124, 128, 129, 133, 136, 139, 140, 143, 146, 147, 148, 149, 154, 155, 156, 157, 162, 166, 168, 173, 174, 177, 178, 183, 187, 188, 194, 195, 198, 201, 202, 203, 207, 208, 209, 210, 211, 212, 214, 220, 226, 231, 232, 234, 235, 236, 238, 240, 241, 242, 246, 247, 249, 252, 253, 254, 256, 257, 258, 259, 263, 264, 267, 269, 274, 277, 279, 282, 286, 287, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 324, 326, 328, 329, 331, 332, 336, 338, 339, 343, 349, 352, 353, 361, 363, 365, 366, 369, 371, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 389, 391, 392, 394, 396, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 432, 434, 437, 439, 440, 443, 445, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 469, 471, 477, 478, 479, 481, 492, 493, 494], "30": [3, 6, 32, 33, 35, 36, 40, 44, 45, 48, 51, 57, 62, 63, 66, 90, 98, 103, 107, 120, 136, 146, 161, 174, 243, 300, 301, 326, 328, 329, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 469, 478, 479, 494], "300": [26, 33, 41, 55, 61, 68, 99, 194, 227, 254, 262, 274, 479], "3000": 49, "3003": [156, 161], "3006464": 2, "3008": [156, 161], "3009": [156, 161], "301": [33, 41, 479], "3010": [156, 161, 479], "3013": [156, 161], "3015": [156, 161], "3016": [156, 161], "302": [33, 41, 124, 161, 479], "30203120e": 3, "3025": [156, 161], "3026": [156, 161], "30285824": 116, "303": [33, 41, 479], "3030": [158, 161], "3033": [156, 161], "3035": [156, 161], "3036": [156, 161], "3037": 479, "3039": [156, 161], "304": [33, 41, 120, 174, 479], "3040": 479, "3041": 107, "3042": [107, 156, 161], "3045": 479, "305": [33, 41, 479], "30515200": 116, "3054": 479, "30540746e": 3, "306": [33, 41, 479], "3061": [156, 161], "3065": [156, 161, 479], "307": [33, 41, 479], "3073": [156, 161], "307532": 62, "3077": [156, 161], "3078": [156, 161], "308": [33, 41, 479], "3081": [156, 161], "3082": [156, 161], "3084": 479, "3085": 479, "3086": 479, "3087": 479, "3089": 479, "309": [33, 41, 120, 200, 272, 479], "3090": [156, 161], "3093": [156, 161, 479], "3095": [120, 226, 254, 479], "3098": [157, 161], "31": [33, 40, 90, 120, 174, 212, 228, 255, 478, 479], "310": [3, 33, 41, 479], "3102": [132, 161], "3105": [129, 161, 176], "3106": [156, 161], "3109": [156, 161, 479], "311": [33, 41, 479], "3111": [156, 161], "3113": 479, "31134638e": 3, "3114": [120, 226, 254], "3115": 479, "3118": 479, "312": [11, 33, 41, 112, 117, 479, 494], "3120": 479, "3125": [129, 158, 161, 479], "3126": [156, 161], "3127": [157, 161], "31276055e": 3, "313": [33, 41, 93, 120, 198, 214, 267, 292, 479], "3132": 479, "3133": [156, 161], "3134": 479, "3135": [156, 161, 479], "3137": [156, 161], "314": [33, 41, 120, 200, 272, 479], "3141": [158, 161], "314803244": 4, "315": [33, 41, 98, 109, 479, 494], "3152": [157, 161, 479], "316": [33, 41, 479], "3160": 479, "3165": [157, 161], "31670272": 116, "3169": 479, "316956": 33, "317": [33, 41, 479], "3172": [131, 161], "31721478e": 3, "3173": [130, 161], "31739325e": 3, "3174": [157, 161], "317655e": 33, "31769c9cee5cd55f045e62633d651f3d": 101, "3178": [157, 161], "3179": [157, 161], "318": [33, 41, 479], "3181": [129, 158, 161], "318104": 33, "3184": [157, 161], "3185": [158, 161], "3186": 479, "31867": 33, "3188": [157, 161], "3189": 479, "318977": 33, "318e": 53, "319": [33, 41, 93, 479], "3191": [132, 161], "31921009e": 3, "3193": [158, 161], "31953078e": 3, "3196": [129, 158, 161], "31a": 33, "31b": 33, "32": [33, 34, 40, 58, 65, 83, 85, 90, 95, 101, 188, 340, 341, 342, 346, 347, 348, 478, 479, 492, 494], "320": [33, 41, 95, 120, 377, 479, 494], "3201": [157, 161], "320123": 33, "32015": 123, "32016": 123, "3203": [131, 161], "3204": 479, "3207": [157, 161], "3209": [158, 161, 479], "321": [33, 41, 88, 120, 174, 479], "3216": [158, 161], "32177836e": 3, "3219": 479, "322": [33, 41, 479], "3220": [158, 161, 479], "3222": [158, 161], "32232685e": 3, "322679e": 48, "3227": [158, 161], "322742": 48, "3228": 479, "3229": [158, 161], "323": [33, 41, 479], "3233": [158, 161], "3235": [158, 161], "3237": [129, 161], "32374263e": 3, "3238": 479, "324": [33, 41, 120, 183, 478, 479], "3241": [158, 161], "3249": [120, 175], "325": [33, 41, 198, 246, 479], "3250": 479, "32504": 55, "3255": [158, 161], "3258": 479, "3259": [130, 161, 479], "326": [33, 41, 117, 479, 494], "32614": 33, "3262": [158, 161], "32637218e": 3, "32696196e": 3, "327": [33, 41, 111, 120, 198, 214, 267, 292, 479], "3270": 479, "32702464": 116, "32712": 90, "3274": [158, 161], "328": [33, 41, 44, 479], "3281": [158, 161], "3283": [158, 161], "3284": [158, 161], "3285": [132, 161], "3286": [158, 161], "3289": 479, "329": [9, 27, 33, 41, 58, 120, 205, 260, 479, 494], "3292": [158, 161], "3293": [158, 161], "3297": [158, 161], "32980": 278, "32a": 33, "33": [3, 6, 7, 33, 43, 62, 71, 86, 90, 95, 120, 201, 203, 247, 263, 478, 479, 494], "330": [33, 41, 479], "3300": [158, 161], "330079": 33, "3302": [158, 161], "3306": [158, 161], "33071104": 116, "331": [33, 41, 479], "3311": [158, 161], "3312": [158, 161], "3317": [158, 161], "331806": 6, "331865": 33, "332": [33, 41, 57, 59, 479, 494], "3322": [158, 161], "33220138e": 3, "3324": 479, "3327": 479, "33275904": 116, "333": [33, 41, 479], "3333": [158, 161], "3337": [158, 161], "334": [21, 27, 33, 41, 479, 494], "3344": 479, "33452206e": 3, "3346": 479, "3347": [129, 161], "335": [33, 41, 479], "3351": [130, 161], "3353": [130, 161], "335337": 33, "3355": 479, "3356": 479, "336": [6, 33, 41, 479], "3362": [130, 161], "337": [33, 41, 479], "3374": [129, 161], "3375": [129, 161], "338": [33, 41, 479], "3380": [129, 161], "33811855e": 3, "3382": 479, "3385": [129, 161], "33877823e": 3, "3389": [23, 49, 115, 120, 123, 165, 193, 197, 221, 222, 242, 245, 277, 279, 287], "339": [33, 41, 479], "3390": [129, 161], "3392": 479, "34": [15, 33, 62, 74, 81, 90, 120, 173, 478, 479, 494], "340": [33, 41, 479], "34028584e": 3, "3403": [129, 161], "34043389e": 3, "340751": 33, "341": [33, 41, 50, 59, 120, 377, 479, 494], "3410": 479, "3412": [129, 161], "3414": [130, 161], "341998": 33, "342": [23, 27, 33, 41, 479, 494], "3422": [129, 161], "3424": [129, 161], "3426": [129, 161], "3427": [129, 161], "3429": [129, 161], "343": [33, 41, 479], "3430": [129, 161], "3433": [129, 161], "3436": [129, 161], "3437": 479, "34372": 479, "3439": [129, 161], "344": [33, 41, 479], "3440": [129, 161, 479], "3444": [130, 161], "3445": [130, 161], "3446": [129, 161], "3449": [129, 161], "345": [33, 41, 44, 479], "3450": 479, "345007e": 48, "3452": [129, 161], "3453": [129, 161, 479], "34598904e": 3, "346": [33, 41, 479], "3460": 479, "3462": [130, 161], "346316": 33, "3465": [130, 161], "3468": 479, "347": [33, 41, 479], "34709504": 116, "3474": [130, 161], "3477": [130, 161], "3478": [130, 161], "34792": [204, 249], "348": [33, 41, 56, 90, 101, 479], "348025": 33, "3483": [130, 161], "348351": 62, "3484": [130, 161], "3485": [130, 161], "3487": 479, "349": [33, 41, 479], "34906565e": 3, "3491": [130, 161], "3498": [130, 161], "35": [4, 20, 30, 33, 53, 71, 90, 124, 161, 252, 277, 478, 479], "350": [33, 41, 479], "351": [33, 41, 479], "35114095e": 3, "352": [33, 41, 479], "3523": [130, 161], "3525": [130, 161], "3527": 479, "353": [33, 41, 479], "3531": [130, 161], "35329455e": 3, "35340288": 116, "3538": [131, 161], "354": [33, 41, 479], "35460208e": 3, "3548": [130, 131, 161], "3549": [130, 161], "355": [33, 41, 479], "3550": [130, 161], "3551": [130, 161], "3552": [130, 161], "35522697e": 3, "3553": [130, 161], "3554": [130, 161], "3555": [130, 161], "3556": [131, 161], "3557": [130, 161, 479], "3558": [130, 161], "356": [33, 41, 479], "3563": [130, 161], "3566": [131, 161], "35698109e": 3, "357": [33, 41, 479], "3572": 479, "358": [33, 41, 479], "35867177e": 3, "359": [33, 41, 479], "3593": 479, "3597": [131, 161], "35a": 478, "36": [6, 15, 16, 17, 33, 41, 43, 44, 45, 58, 62, 89, 90, 92, 116, 143, 146, 161, 198, 228, 246, 478, 479, 492, 494], "360": [33, 41, 62, 70, 120, 206, 478, 479], "3600": [130, 161], "3601": [131, 161], "3603": 479, "3605": [130, 161], "3609": [131, 161], "361": [33, 41, 479], "36112957e": 3, "3614": [131, 161], "3615": [131, 161], "36173936e": 3, "362": [33, 479], "3622": 479, "3626": [130, 161], "3629": 479, "363": [33, 479], "3631": [130, 161], "3635": [130, 161], "364": [33, 479], "3640": [131, 161], "364058": 6, "3642": 479, "364311": 33, "3644": [131, 161, 479], "3646": [131, 161], "3647": [131, 161], "3648": [131, 161], "3649": 479, "365": [33, 479], "3650": [131, 161], "3651": [131, 161], "366": [33, 479], "3665": 479, "366899": 33, "367": [33, 479], "367151": 33, "36719841e": 3, "3673": 479, "3676": 479, "368": [33, 479], "3681": [131, 161], "369": [33, 120, 479], "3691": 479, "36994055e": 3, "37": [30, 33, 80, 90, 93, 120, 127, 161, 377, 378, 474, 478, 479], "370": [33, 479], "3700": 479, "371": [33, 70, 120, 206, 479], "3710": 479, "3717": 479, "372": [33, 479], "3722": [131, 161], "3723": [131, 161], "372383": 33, "37295498e": 3, "373": [33, 479], "3730": 479, "3732": [131, 161, 479], "3733": [131, 161, 479], "3735": 479, "3736": [131, 161], "3737": 479, "373a": 33, "374": [33, 479], "37416306e": 3, "3742": [131, 161], "37429315e": 3, "3743": [131, 161, 479], "375": [33, 479], "3751": 479, "3753": [131, 161], "376": [33, 479], "3761": [132, 161], "37627637e": 3, "3763": 479, "3764": 479, "3765": 479, "3766": 479, "3768": 479, "37688": 90, "376995": 33, "377": [33, 479], "3774": [131, 161], "3777": [131, 161], "37776308e": 3, "378": [6, 31, 33, 45, 479, 494], "3781": [131, 161], "3783": [131, 161], "379": [33, 479], "3790": [131, 161], "379275": 33, "3794": [131, 161], "3795": [131, 161], "3797": [131, 161], "37a": 478, "37b": 478, "38": [33, 62, 76, 81, 90, 116, 146, 161, 478, 479, 494], "380": [33, 479], "380183": 33, "3802": [131, 161], "3803": [131, 161], "381": [33, 102, 120, 397, 479], "3810": [131, 161], "3811": [131, 161], "3816": [131, 161], "38164081e": 3, "3819": [131, 161], "382": [33, 479], "38238013e": 3, "3827": [131, 161], "38277081e": 3, "383": [33, 479], "3833": [131, 161], "3836": [131, 161], "3838": [131, 161], "384": [33, 479], "3847": [131, 161], "385": [33, 479], "38510592": 116, "3854": [131, 161], "3855": [131, 161], "3856": [131, 161], "3857": [131, 161], "385929": 62, "386": [33, 479], "3860": [131, 161], "3863": [120, 173, 183, 302], "3868": [120, 173, 183, 302], "387": [13, 27, 33, 479, 494], "3873": [131, 161], "3879": [131, 161], "388": [33, 54, 59, 104, 109, 479, 494], "38816413e": 3, "38888888888888895": 3, "3889": 34, "389": [33, 479], "3897": [131, 161], "389e": 53, "39": [2, 6, 15, 33, 49, 51, 54, 59, 71, 90, 134, 136, 139, 161, 203, 245, 252, 263, 478, 479, 494], "390": [33, 479], "390268": 33, "3905": 479, "3908": 479, "391": [33, 479], "3919": [131, 161], "392": [33, 70, 479], "3921": [131, 161], "3927": [131, 161], "392956": 33, "393": [33, 479], "3934": [131, 161], "393455e": 49, "39346": 479, "3935": [132, 161], "39361716e": 3, "393847152": [120, 328, 329], "394": [33, 479], "3942": [131, 161], "3943": [131, 161], "3945": [131, 161], "395": [33, 479], "39531097e": 3, "395548": 33, "396": [33, 479], "396497": 33, "396657e": 49, "39666869e": 3, "397": [33, 102, 103, 109, 120, 397, 479, 494], "3971": [131, 161], "3973": [131, 161], "398": [33, 479], "3982": 479, "398581": 33, "3987": [131, 161], "399": [33, 479], "3993": [132, 161], "3994": [131, 161], "3995": 479, "399994": 65, "3a": [6, 62, 120, 207, 208, 209, 210, 211, 231, 257, 286, 478], "3a3": [120, 231, 257], "3a4": [120, 207, 208, 209, 210, 211, 231, 257, 286], "3aaid": [120, 207, 208, 209, 210, 211, 231, 257, 286], "3b": [6, 478], "3b2": [120, 207, 208, 209, 210, 211, 231, 257, 286], "3c": 478, "3c120": [120, 231, 257], "3c238": [120, 231, 257], "3c272": [120, 207, 208, 209, 210, 211, 286], "3d": [1, 3, 6, 7, 8, 15, 16, 18, 19, 23, 24, 25, 27, 29, 30, 32, 34, 36, 37, 42, 44, 47, 69, 74, 76, 82, 83, 93, 95, 99, 102, 104, 105, 110, 115, 116, 117, 118, 120, 122, 127, 130, 136, 143, 145, 146, 147, 149, 153, 154, 158, 161, 178, 181, 182, 183, 185, 187, 188, 198, 226, 231, 248, 250, 251, 254, 255, 256, 257, 278, 280, 286, 288, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 310, 311, 316, 319, 321, 322, 351, 353, 355, 356, 359, 361, 362, 363, 364, 373, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 433, 434, 439, 440, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 462, 463, 467, 475, 477, 494, 495], "3dev": 451, "3e3": [120, 207, 208, 209, 210, 211, 231, 257, 286], "3f": [3, 6, 34, 44, 48, 55, 97], "3g": 80, "3mm": [6, 229], "3rd": [20, 439, 440, 446, 447, 454], "3vrct": [204, 249], "3x3": [83, 187, 298, 299, 300, 301, 303, 304, 305, 306, 336, 349, 366, 369, 383, 386, 389, 391, 392, 394, 459], "3x3x3": [187, 277, 279, 461, 463], "4": [0, 2, 3, 4, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 20, 21, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 83, 85, 88, 90, 91, 92, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 115, 116, 120, 124, 134, 139, 142, 146, 147, 148, 149, 154, 162, 163, 166, 168, 173, 174, 175, 183, 194, 198, 202, 206, 207, 208, 209, 210, 211, 212, 216, 218, 224, 225, 231, 234, 236, 242, 257, 261, 264, 274, 275, 281, 282, 283, 286, 298, 299, 300, 301, 303, 304, 305, 306, 318, 336, 349, 354, 365, 369, 370, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 389, 391, 392, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 437, 439, 440, 443, 444, 445, 446, 447, 458, 459, 460, 461, 473, 477, 478, 479, 492, 494], "40": [20, 33, 53, 63, 90, 93, 196, 198, 243, 252, 277, 477, 478, 479], "400": [33, 120, 169, 242, 254, 479], "400000": 65, "4001": [132, 161], "40063843e": 3, "400x500": [22, 23, 114, 115], "401": 33, "40175": 74, "402": 33, "4022": [120, 228, 255], "40262488e": 3, "4028": [132, 161], "4029": [132, 161], "403": 33, "4037": [120, 228, 255], "404": 33, "4042": [132, 161], "405": [33, 56, 120, 162, 163, 220, 252], "4050": 6, "4051": [132, 161], "4058": 479, "406": 33, "40640": 90, "4067": [132, 161], "407": 33, "4070": [132, 161], "4071": [132, 161], "40740740740740744": 3, "407676": [120, 354, 473], "408": 33, "4081": 479, "408223": 33, "40837760e": 3, "4086": [132, 161], "4087": 479, "409": 33, "4094": [132, 161], "40962": [286, 455], "40976904e": 3, "4099": [132, 161], "41": [33, 49, 71, 90, 116, 120, 460, 466, 478, 479], "410": [33, 120, 169], "4103": [132, 161, 479], "4108": 479, "411": 33, "4116": [132, 161], "412": 33, "4121": [132, 161], "4122": [132, 161], "4126": 479, "41276386e": 3, "413": 33, "413063": 33, "4131": [132, 161], "41324585e": 3, "4136": [132, 161], "4138": 479, "413969": 41, "414": 33, "4141": [132, 161], "41485339e": 3, "415": [33, 56, 120, 162, 163, 220, 252, 378], "4153": [132, 161], "4159": [132, 161], "41590015e": 3, "416": [33, 281], "416271": 6, "4166": [132, 161], "4167": [132, 161], "4168": [90, 132, 161], "417": 33, "41704960e": 3, "41717": 33, "4172": 479, "4176": 478, "417917": 33, "418": 33, "4180": [132, 161], "4188": [132, 161, 479], "418909": 56, "419": 33, "4191": [132, 161], "4195": 479, "41965596e": 3, "41a": 33, "42": [6, 24, 33, 36, 43, 48, 59, 62, 72, 90, 91, 99, 101, 104, 120, 195, 229, 478, 479, 492, 494], "420": [6, 33], "4203": 479, "4204": [132, 161], "420413": 56, "4208": [131, 161], "421": 33, "4215": [132, 161], "4219": [132, 161], "42192604": 116, "422": 33, "42208": 90, "42210360": 116, "4224": 479, "4225": [132, 161], "42265584": 116, "42289608": 116, "423": 33, "42300384": 116, "42308452": 116, "4232": [133, 161], "42322216": 116, "423266": 48, "4233": [132, 161], "42342372": 116, "4236": 479, "42365696": 116, "42379532": 116, "42388496": 116, "42390948": 116, "42398300": 116, "424": 33, "42406508": 116, "42407636": 116, "42421928": 116, "42437884": 116, "42448924": 116, "42458715e": 3, "424937": 33, "425": 33, "42528": 90, "42548739e": 3, "4255": [120, 133, 161, 175, 235, 238], "425611": 33, "42561484e": 3, "4257": [133, 161], "4258": [133, 161], "426": 33, "4263": 479, "4266": [133, 161], "4267": [133, 161], "4269": [133, 161], "427": 33, "4270": [133, 161], "4273": [159, 161], "4274": [133, 161], "4279": [133, 161], "428": 33, "4284": [133, 161], "42849299e": 3, "4285": [133, 161], "429": 33, "429485": 33, "4295": [133, 161], "4297": [133, 161], "42977265e": 3, "4298": [133, 161], "42a": 33, "42b": 33, "43": [33, 50, 59, 78, 81, 90, 102, 116, 120, 134, 161, 247, 397, 478, 479, 494], "430": [33, 86, 95, 494], "4302": [133, 161], "43026587e": 3, "43031176e": 3, "430348": 33, "4304": [133, 161], "4307": [159, 161, 479], "4308": [133, 161], "431": 33, "4310": [133, 161], "4318": [133, 161], "432": [33, 62, 120, 162, 478], "4320": [133, 161], "4325": [133, 161], "433": 33, "4334": [133, 161], "4337": [133, 161], "434": 33, "4343": [133, 161], "435": [33, 49], "435063": 6, "43559156e": 3, "436": [33, 56, 120, 378], "437": 33, "438": 33, "439": 33, "4391": 479, "4392": [159, 161], "4397": [159, 161], "4399": 479, "43a": 33, "44": [33, 71, 90, 99, 109, 120, 127, 161, 181, 351, 397, 478, 479, 494], "440": [27, 33, 494], "4403": 479, "4407": [159, 161], "441": [10, 33, 120, 162], "4411": [159, 161], "4412": [159, 161], "4414": [159, 161], "4416": [159, 161], "442": 33, "443": 33, "4434": 479, "4435": 479, "4436": [159, 161], "444": [19, 33, 198, 246], "44475": 33, "445": 33, "4452": 479, "446": [33, 58, 59, 494], "447": 33, "4475": 479, "448": 33, "4487": 479, "449": 33, "449202": 33, "44984": 90, "45": [6, 30, 32, 33, 49, 55, 62, 90, 106, 120, 478, 479], "450": 33, "450452": [120, 227, 262], "45093697e": 3, "451": [33, 70, 72, 494], "45132090e": 3, "4515": 479, "4518": 479, "452": 33, "452682": 33, "453": 33, "454": [33, 479], "45402621e": 3, "4544": 33, "455": 33, "455092": 33, "455655": 33, "45583539": 101, "456": [33, 106, 109, 494], "457": [33, 108, 109, 494], "457214": 33, "458": [33, 109, 494], "459": [33, 77, 81, 99, 494], "4590": 479, "459388": 33, "45955": 33, "46": [30, 33, 58, 62, 90, 92, 107, 124, 161, 188, 245, 247, 478, 479, 492], "460": [33, 102, 109, 494], "460020402": [120, 354, 473], "461": [33, 83, 95, 194, 274, 494], "46111560e": 3, "461193": 62, "462": [6, 7, 33], "463": [33, 120, 195, 244], "463109": 33, "463642": 33, "464": [3, 33, 97], "46411413e": 3, "4643": 479, "465": [33, 64, 72, 494], "4657": 479, "465973": 41, "466": 33, "467": 33, "468": [11, 33, 53, 56, 62, 69, 83, 90, 103, 120, 195, 244, 478], "46870169e": 3, "469": [33, 101], "47": [33, 70, 72, 90, 97, 120, 202, 214, 242, 247, 248, 267, 292, 478, 479, 494], "470": 33, "47012416e": 3, "470x500": [9, 23, 108, 111], "471": 33, "472": 33, "4720": 479, "4725": 479, "473": 33, "4734": 479, "4737": 479, "474": 33, "47419146e": 3, "4743": 479, "475": 33, "475006e": 49, "47543182e": 3, "476": 33, "4766": [120, 173], "47674757e": 3, "477": 33, "4775": [120, 173], "478": 33, "479": 33, "48": [6, 20, 33, 53, 56, 62, 71, 90, 101, 120, 198, 212, 245, 250, 252, 275, 356, 478, 479], "480": 33, "480354": 33, "481": [33, 71, 72, 494], "482": 33, "4824241995811462": 43, "483": [33, 124, 161], "4832": 90, "484": 33, "48426991e": 3, "4847132034632034": 116, "485": [32, 33, 45, 49, 494], "486": [33, 478], "487": 33, "48728546e": 3, "48770447e": 3, "488": 33, "4880": 90, "488427": 33, "48880519e": 3, "489": 33, "48931643e": 3, "49": [4, 30, 33, 70, 85, 90, 116, 117, 120, 146, 161, 478, 479, 494], "490": [33, 117], "4903": 479, "491": 33, "492": 33, "49254542e": 3, "493": 33, "49352735e": 3, "49396229e": 3, "494": 33, "495": 33, "496": 33, "496068": 33, "497": 33, "498": 33, "499": 33, "4991939095387371": 116, "4998": 479, "49997960e": 3, "4a": 478, "4d": [1, 3, 4, 6, 7, 8, 11, 16, 18, 20, 25, 27, 29, 30, 31, 32, 34, 36, 41, 47, 48, 49, 52, 53, 54, 56, 58, 70, 83, 84, 86, 88, 90, 91, 93, 94, 97, 99, 102, 104, 118, 121, 129, 130, 131, 136, 143, 146, 147, 152, 161, 163, 166, 167, 168, 171, 181, 183, 185, 188, 203, 217, 245, 247, 249, 250, 251, 255, 263, 267, 273, 280, 288, 302, 305, 306, 351, 353, 354, 355, 359, 360, 361, 362, 364, 366, 373, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 429, 430, 433, 440, 445, 446, 447, 452, 454, 461, 463, 477, 479, 485, 488, 492, 494, 495], "4f": [33, 34, 97], "4mm": [93, 166, 173, 203, 263, 306], "4pm": [176, 493], "4th": [20, 93, 120, 174, 181, 187, 328, 329, 366, 369, 445], "4x4": [83, 187, 298, 299, 300, 301, 303, 304, 305, 306, 336, 349, 356, 366, 367, 369, 383, 386, 389, 391, 392, 394, 400, 401, 459], "5": [2, 3, 4, 6, 7, 12, 18, 20, 22, 23, 24, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 78, 80, 87, 88, 90, 93, 94, 95, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 112, 114, 115, 116, 117, 120, 129, 132, 136, 143, 149, 154, 155, 156, 157, 162, 166, 168, 173, 174, 175, 178, 187, 188, 194, 197, 198, 202, 206, 214, 217, 219, 224, 231, 245, 247, 250, 251, 253, 254, 257, 262, 263, 266, 267, 268, 272, 274, 276, 289, 292, 303, 304, 326, 328, 329, 354, 360, 361, 364, 377, 378, 390, 392, 393, 394, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 445, 446, 448, 450, 451, 453, 455, 456, 457, 472, 473, 474, 477, 478, 479, 492, 494], "50": [31, 33, 42, 45, 49, 52, 57, 58, 62, 65, 92, 97, 120, 123, 173, 175, 188, 194, 203, 212, 218, 236, 238, 274, 275, 300, 301, 324, 338, 340, 341, 342, 343, 346, 347, 348, 356, 377, 378, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 459, 461, 463, 478, 479, 492, 494], "500": [26, 27, 33, 35, 41, 49, 78, 97, 116, 198, 254, 494], "5000": [49, 55, 97], "50001": 242, "501": 33, "50179407e": 3, "502": [33, 97], "5021": 244, "503": 33, "503142": 33, "50369": 33, "504": [6, 33, 62, 478], "50400068e": 3, "50403873e": 3, "5048": 479, "505": 33, "50542359e": 3, "50555215e": 3, "506": 33, "50607": 242, "506632": 33, "507": 33, "5071": [120, 162, 235], "508": [33, 45], "5082": 479, "509": 33, "50952799e": 3, "51": [6, 9, 33, 45, 48, 51, 53, 59, 62, 111, 120, 167, 198, 246, 305, 478, 479, 494], "510": 33, "511": [17, 27, 33, 494], "5115891053391053": 116, "51173": 33, "512": [33, 83, 153, 161, 204, 249], "51226746e": 3, "512372": [120, 328, 329], "513": [33, 77, 117, 478, 494], "5134": 479, "514": [33, 113], "515": 33, "516": 33, "51633": 479, "51638573e": 3, "517": 33, "5176": 90, "5177": 479, "517954": 33, "518": 33, "51810420e": 3, "5188": 479, "519": 33, "519251": 33, "519925": 33, "52": [30, 33, 49, 55, 58, 90, 188, 246, 478, 479, 492], "520": 33, "521": 33, "52171514e": 3, "522": [3, 29, 30, 32, 33, 34, 35, 36, 97], "5220": 478, "522477": 6, "523": 33, "524": 33, "525": 33, "526": 33, "527": [33, 85, 95, 494], "527175": 33, "527477": 6, "52763510e": 3, "528": [33, 44], "5281": 0, "529": 33, "53": [22, 23, 33, 61, 90, 92, 100, 105, 109, 114, 115, 120, 202, 245, 246, 256, 478, 479, 494], "530": 33, "530e": 53, "531": 33, "53123995e": 3, "532": 33, "53201080e": 3, "53244693e": 3, "533": 33, "5339": 479, "534": 33, "534376": 62, "534932": 33, "535": 33, "536": 33, "536042": 33, "537": 33, "537178": 33, "53771059e": 3, "538": 33, "539": [33, 193], "53966368e": 3, "53993795e": 3, "54": [6, 33, 62, 90, 99, 108, 120, 162, 198, 214, 246, 267, 292, 478, 479], "540": [33, 62, 478], "540842": 56, "541": 33, "542": 33, "542346": 56, "543": [33, 59, 494], "54336355e": 3, "5438": 40, "544": [33, 53, 120, 218, 275], "545": [33, 40, 45, 494], "54564468e": 3, "54584": 479, "546": [6, 33], "54628898e": 3, "54676869e": 3, "547": 33, "548": 33, "548262": 33, "549": [33, 120, 173], "5490204": [120, 305], "5496": 90, "55": [20, 33, 45, 66, 116, 139, 161, 478, 479, 494], "550": 33, "551": [33, 70], "55125395e": 3, "55160": 90, "552": [21, 27, 33, 88, 120, 218, 275, 494], "553": 33, "5539": [3, 31, 32, 38, 97, 120, 213, 266], "554": [16, 25, 27, 33, 494], "555": 33, "55502479e": 3, "5556": 34, "556": [33, 44, 45, 494], "5562": 478, "55620085e": 3, "557": 33, "5576": 479, "558": 33, "559": [33, 120, 173], "559734": 33, "56": [33, 37, 71, 120, 169, 247, 478, 479], "560": 33, "561": 33, "562": [33, 120, 220, 252], "562991": 33, "563": 33, "564": 33, "56421929e": 3, "564329": 33, "56495831e": 3, "565": 33, "565609": 6, "566": 33, "56644339e": 3, "567": 33, "568": 33, "5680": 90, "56842142e": 3, "569": 33, "57": [6, 31, 33, 62, 90, 98, 109, 120, 124, 127, 146, 161, 198, 246, 478, 479, 494], "570": 33, "570463": 33, "571": 33, "57195": 33, "572": 33, "572388": 41, "573": [33, 120, 193, 220, 252], "574": 33, "57415886e": 3, "575": 33, "576": 33, "57658494e": 3, "577": [33, 90, 95, 494], "5773": 479, "578": 33, "57882972e": 3, "579": [33, 66, 72, 494], "57930456e": 3, "58": [33, 41, 49, 90, 107, 109, 146, 161, 478, 479, 494], "580": [33, 74, 81, 494], "58043607e": 3, "580823": 33, "581": 33, "5818": 479, "582": [33, 37, 120], "58285372e": 3, "583": 33, "584": 33, "585": 33, "586": 33, "5861": 479, "58655798e": 3, "587": 33, "587189": 33, "587956": 62, "588": [6, 33], "589": 33, "58911": 479, "589401": 56, "58a": 33, "59": [33, 37, 45, 49, 52, 71, 90, 99, 120, 124, 161, 168, 198, 245, 377, 378, 478, 479, 494], "590": 33, "590200": 6, "590905": 56, "591": 33, "592": [33, 37, 120], "593": 33, "5934": [120, 183], "594": [6, 33, 38, 45, 494], "59458781e": 3, "595": 33, "59526426e": 3, "596": 33, "597": 33, "598": 33, "59876943e": 3, "599": [33, 120, 193, 242], "5992": 90, "5997": [58, 120, 205, 260], "59974": 33, "5a": [6, 33, 62], "5b": [6, 33, 62], "5c": 62, "5cd78c74b711572c7f41a5bddb69abca": 38, "5d": [132, 161, 188], "5d27ca3d1c5b4a001b9eeddb": 78, "5d27eba2114a420016059fbf": 78, "5d27f296114a42001704a5d9": 78, "5d280608a26b3400180868d1": 78, "5d2811d0114a42001704b988": 78, "5d281f851c5b4a001b9f2315": 78, "5d282d9045253a001c3e80a1": 78, "5d283ee0a26b34001609f58": 78, "5d285263114a4200160602c6": 78, "5d285d61114a42001904a343": 78, "5d28709e114a420016061aa1": 78, "5d287b3a45253a00193d145": 78, "5d28966345253a00193d2e27": 78, "5d28a431a26b340019090fa2": 78, "5d28b761a26b3400160a6ba8": 78, "5hju4": [166, 203, 263], "5mm": [65, 94, 183, 216], "5pm": [176, 493], "5th": [20, 206], "5x1": 216, "5x4": 216, "6": [2, 3, 4, 6, 7, 11, 20, 22, 23, 24, 27, 30, 31, 33, 34, 36, 38, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 58, 59, 62, 63, 65, 71, 75, 79, 90, 93, 98, 99, 101, 103, 106, 107, 115, 116, 117, 120, 124, 127, 129, 139, 141, 143, 146, 147, 148, 154, 155, 156, 162, 166, 173, 174, 175, 177, 187, 198, 205, 222, 228, 229, 242, 260, 263, 266, 287, 305, 377, 378, 382, 385, 387, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 447, 453, 454, 461, 463, 478, 479, 493, 494], "60": [6, 15, 33, 40, 41, 63, 98, 101, 116, 120, 163, 198, 219, 229, 276, 478, 479, 492], "600": [33, 49, 124, 161, 197, 254, 454], "60000": 49, "601": 33, "601855088049469": 35, "601922": 6, "602": 33, "602484": 33, "60262567e": 3, "603": 33, "604": 33, "60400217e": 3, "60400587e": 3, "605": 33, "605128": 6, "6058": 479, "606": [33, 85], "607": 33, "608": 33, "609": 33, "609221": 33, "60954771e": 3, "61": [33, 36, 66, 100, 101, 120, 212, 478, 479], "610": 33, "611": 33, "6111": 34, "6111111111111112": [3, 29], "611394": 33, "612": [33, 478], "61201894e": 3, "612397": 33, "613": 33, "614": [33, 90, 95, 494], "61420321e": 3, "614932": 33, "615": 33, "615642": 6, "616": [33, 48], "61630078e": 3, "616334": 33, "617": 33, "618": 33, "619": 33, "62": [33, 41, 62, 71, 99, 107, 120, 143, 161, 251, 478, 479], "620": 33, "621": [6, 33], "62193288008469e": 68, "622": 33, "622242": 33, "62258436e": 3, "622651": 48, "623": 33, "624": 33, "625": 33, "625042": 33, "626": 33, "627": 33, "627194": 33, "62798": 33, "628": 33, "629": 33, "629218": 33, "63": [6, 32, 33, 62, 90, 92, 120, 224, 245, 253, 478, 479, 494], "630": [6, 33, 69, 72, 494], "6300": 62, "63033483e": 3, "63080090e": 3, "631": 33, "63143766e": 3, "631912": 33, "632": 33, "633": 33, "6330": 479, "63369": 479, "633746": 6, "634": 33, "63463022e": 3, "635": 33, "635166": 33, "63538655e": 3, "636": 33, "636238": 33, "637": 33, "638": 33, "63812": 479, "63834495e": 3, "639": 33, "639351": 33, "64": [4, 6, 10, 11, 19, 21, 33, 34, 36, 47, 49, 65, 78, 83, 85, 93, 153, 158, 161, 186, 198, 204, 229, 242, 245, 246, 249, 478, 479], "640": 33, "640215": 33, "640699": 33, "6408": 478, "641": [33, 45, 494], "642": [33, 55, 286, 455], "64226268e": 3, "64242995e": 3, "643": 33, "644": [33, 35, 45, 494], "6447": 120, "645": 33, "645m": [23, 115, 222], "646": 33, "64627235e": 3, "646352": 6, "64686911e": 3, "647": 33, "647343": 33, "648": [6, 33, 62, 478], "649": 33, "64a": 33, "64x64x64": [6, 229], "65": [30, 33, 43, 90, 116, 134, 161, 478, 479], "650": 33, "65017799e": 3, "6506": 120, "65060601e": 3, "651": 33, "652": [33, 62, 72, 494], "65215777e": 3, "65269399e": 3, "653": 33, "65324113e": 3, "654": 33, "65406381e": 3, "655": 33, "656": 33, "657": 33, "65765529e": 3, "658": 33, "65859057e": 3, "659": 33, "66": [6, 16, 17, 33, 58, 62, 89, 92, 204, 478, 479], "660": 33, "660587": 33, "660679": 33, "661": 33, "66109440": 4, "662": 33, "663": 33, "664": 33, "664250": 62, "664e": 53, "665": [33, 58, 120, 123, 221, 225, 261, 277, 279], "66515446e": 3, "66533": 33, "66533438e": 3, "666": 33, "667": 33, "668": 33, "668929": 62, "66896477e": 3, "669": [33, 49, 120, 460, 466, 478], "67": [24, 30, 33, 116, 127, 161, 245, 478, 479], "670": [33, 120, 123, 221, 277, 279], "670599": 42, "671": 33, "67105982e": 3, "67109159e": 3, "6712058072321548": 35, "672": 33, "67257682e": 3, "672737": 33, "67293373e": 3, "673": 33, "674": 33, "674399": 33, "675": 33, "676": 33, "676956": 33, "67698489e": 3, "677": [33, 59, 61, 494], "677519": 33, "678": [33, 56, 58, 120, 225, 261], "6784": 90, "679": [33, 479], "67991680e": 3, "67a": 33, "68": [32, 33, 58, 188, 478, 479, 492], "680": 33, "68079874e": 3, "681": [33, 49, 120, 460, 466], "68151": 479, "682": 33, "68292": 479, "683": 33, "68303467e": 3, "683343": 62, "684": 33, "68455318e": 3, "685": [33, 41, 45, 494], "68525065e": 3, "685537": 33, "68584": 90, "686": 33, "687": 33, "68750661e": 3, "688": 33, "689": 33, "6898": 34, "68e": 53, "69": [6, 11, 33, 71, 78, 116, 478, 479], "690": 33, "690685": 33, "691": 33, "69105820e": 3, "69167602e": 3, "692": [33, 70, 72, 105, 109, 494], "69267": 33, "692869": 62, "693": 33, "69390058e": 3, "694": 33, "695": [33, 72, 494], "695564": 33, "696": [33, 68], "697": [33, 115, 117, 494], "698": [3, 33], "699": 33, "69997585e": 3, "6a": [6, 62, 478], "6b": [6, 478], "6c": 6, "6mm": [305, 461], "6th": 20, "7": [2, 3, 4, 6, 7, 15, 24, 25, 33, 42, 44, 45, 49, 52, 53, 54, 56, 57, 58, 62, 63, 65, 68, 69, 71, 81, 85, 87, 90, 93, 103, 107, 113, 116, 120, 123, 124, 127, 129, 134, 136, 141, 143, 146, 147, 149, 154, 156, 174, 183, 186, 187, 193, 198, 202, 204, 212, 226, 229, 232, 242, 246, 248, 249, 254, 258, 326, 328, 329, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 434, 439, 443, 445, 446, 448, 450, 451, 455, 457, 460, 466, 478, 479, 492, 494], "70": [21, 30, 32, 33, 63, 120, 173, 228, 255, 478, 479], "700": [33, 149, 161, 254], "700000": 65, "700012": 65, "700088": 6, "70012": 479, "701": 33, "70159365e": 3, "70187722e": 3, "702": [6, 33], "703": 33, "703498e": 48, "704": [22, 27, 33, 494], "705": 33, "706": 33, "707": [33, 109], "70784420e": 3, "708": 33, "70884": [120, 214, 267, 292], "709": 33, "71": [32, 33, 71, 116, 478, 479], "710": 33, "71054281e": 3, "710553": 62, "710963": 6, "711": 33, "712": 33, "71213235e": 3, "712135": [120, 195], "713": 33, "713852": 6, "714": 33, "714396": 33, "71451214e": 3, "714869": 33, "715": 33, "71506240e": 3, "71561": [120, 202, 248], "715791": 33, "715845": 62, "716": 33, "71608263e": 3, "717": 33, "7173": 33, "718": [33, 55, 59, 494], "719": 33, "72": [33, 43, 56, 58, 62, 90, 92, 101, 113, 116, 120, 155, 161, 174, 225, 261, 478, 479], "720": 33, "72054082e": 3, "720554": 33, "7209": [120, 194, 274], "720924": 33, "721": 33, "7214": [120, 194, 274], "72172532e": 3, "7218": 479, "722": 33, "723": 33, "723724": 33, "724": 33, "72429345e": 3, "724813": 33, "725": [33, 104, 109, 494], "72569314e": 3, "72589200e": 3, "726": 33, "726486": 62, "727": [12, 27, 33, 494], "728": 33, "729": [23, 27, 33, 478, 494], "73": [32, 33, 90, 101, 478, 479], "730": 33, "731": 33, "73119799e": 3, "731234": 33, "731439": 33, "732": 33, "733": 33, "734": 33, "735": [33, 53, 59, 494], "735930735930736": 34, "736": 33, "73611577e": 3, "73680503e": 3, "737": 33, "73786988e": 3, "738": 33, "739": [33, 101, 109, 494], "74": [18, 21, 33, 48, 50, 90, 116, 478, 479], "740": 33, "741": 33, "742": [31, 32, 33, 39], "743": 33, "743122": 48, "744": [3, 33], "74432": 479, "745": 33, "746": 33, "74667650e": 3, "747236": 33, "747494": 33, "747918": 33, "74911200e": 3, "7493501": [48, 120, 167, 306], "75": [23, 33, 40, 65, 71, 90, 102, 115, 116, 120, 197, 245, 397, 478, 479], "752": [80, 81, 99, 120, 494], "75293977e": 3, "753286": 33, "754": [85, 95, 494], "754066": 33, "75450680e": 3, "755": [61, 72, 494], "75530971e": 3, "756": [62, 99, 120, 478], "7565016": 2, "75889113e": 3, "76": [32, 33, 65, 71, 248, 256, 478, 479], "760": 32, "76047077e": 3, "7616": 90, "762": 55, "763": [99, 120], "76492333e": 3, "76553168e": 3, "766": [84, 95, 99, 120, 494], "76641824e": 3, "76694432e": 3, "767": 3, "76994620e": 3, "77": [33, 65, 71, 99, 116, 478, 479], "77021915e": 3, "77307392e": 3, "77395113e": 3, "775": [92, 95, 494], "77510766e": 3, "776293": 62, "777": 101, "777205": 48, "7783": 101, "77914932e": 3, "779998": 33, "78": [4, 33, 49, 52, 53, 65, 71, 92, 116, 120, 173, 478, 479], "78035137e": 3, "7808": 90, "78232": 90, "784": [134, 161], "786": [75, 120, 331], "787": 33, "78908009e": 3, "78908436e": 3, "78946391e": 3, "79": [33, 65, 71, 90, 478, 479], "790": [18, 27, 91, 95, 494], "791": [54, 59, 494], "79167844e": 3, "79199773e": 3, "792": 62, "7925": [117, 494], "7926": 116, "793": [3, 11, 16, 29, 48, 65, 69, 74, 88, 92, 120, 134, 161], "79538": 33, "796": [75, 120, 331], "796135": 6, "79687174e": 3, "797": 59, "797134e": 33, "798387": 62, "79848": 479, "7a": [6, 33, 62, 478], "7b": 6, "7c": 6, "7networks_lh_cont_cing_1": 479, "7networks_lh_cont_cing_2": 479, "7networks_lh_cont_ofc_1": 479, "7networks_lh_cont_par_1": 479, "7networks_lh_cont_par_2": 479, "7networks_lh_cont_par_3": 479, "7networks_lh_cont_par_4": 479, "7networks_lh_cont_par_5": 479, "7networks_lh_cont_par_6": 479, "7networks_lh_cont_pcun_1": 479, "7networks_lh_cont_pcun_2": 479, "7networks_lh_cont_pfcl_1": 479, "7networks_lh_cont_pfcl_2": 479, "7networks_lh_cont_pfcl_3": 479, "7networks_lh_cont_pfcl_4": 479, "7networks_lh_cont_pfcl_5": 479, "7networks_lh_cont_pfcl_6": 479, "7networks_lh_cont_pfcl_7": 479, "7networks_lh_cont_pfcl_8": 479, "7networks_lh_cont_pfcmp_1": 479, "7networks_lh_cont_pfcv_1": 479, "7networks_lh_cont_temp_1": 479, "7networks_lh_default_par_1": 479, "7networks_lh_default_par_2": 479, "7networks_lh_default_par_3": 479, "7networks_lh_default_par_4": 479, "7networks_lh_default_par_5": 479, "7networks_lh_default_par_6": 479, "7networks_lh_default_par_7": 479, "7networks_lh_default_pcunpcc_1": 479, "7networks_lh_default_pcunpcc_10": 479, "7networks_lh_default_pcunpcc_11": 479, "7networks_lh_default_pcunpcc_2": 479, "7networks_lh_default_pcunpcc_3": 479, "7networks_lh_default_pcunpcc_4": 479, "7networks_lh_default_pcunpcc_5": 479, "7networks_lh_default_pcunpcc_6": 479, "7networks_lh_default_pcunpcc_7": 479, "7networks_lh_default_pcunpcc_8": 479, "7networks_lh_default_pcunpcc_9": 479, "7networks_lh_default_pfc_1": 479, "7networks_lh_default_pfc_10": 479, "7networks_lh_default_pfc_11": 479, "7networks_lh_default_pfc_12": 479, "7networks_lh_default_pfc_13": 479, "7networks_lh_default_pfc_14": 479, "7networks_lh_default_pfc_15": 479, "7networks_lh_default_pfc_16": 479, "7networks_lh_default_pfc_17": 479, "7networks_lh_default_pfc_18": 479, "7networks_lh_default_pfc_19": 479, "7networks_lh_default_pfc_2": 479, "7networks_lh_default_pfc_20": 479, "7networks_lh_default_pfc_21": 479, "7networks_lh_default_pfc_22": 479, "7networks_lh_default_pfc_23": 479, "7networks_lh_default_pfc_24": 479, "7networks_lh_default_pfc_3": 479, "7networks_lh_default_pfc_4": 479, "7networks_lh_default_pfc_5": 479, "7networks_lh_default_pfc_6": 479, "7networks_lh_default_pfc_7": 479, "7networks_lh_default_pfc_8": 479, "7networks_lh_default_pfc_9": 479, "7networks_lh_default_temp_1": 479, "7networks_lh_default_temp_10": 479, "7networks_lh_default_temp_2": 479, "7networks_lh_default_temp_3": 479, "7networks_lh_default_temp_4": 479, "7networks_lh_default_temp_5": 479, "7networks_lh_default_temp_6": 479, "7networks_lh_default_temp_7": 479, "7networks_lh_default_temp_8": 479, "7networks_lh_default_temp_9": 479, "7networks_lh_dorsattn_fef_1": 479, "7networks_lh_dorsattn_fef_2": 479, "7networks_lh_dorsattn_fef_3": 479, "7networks_lh_dorsattn_fef_4": 479, "7networks_lh_dorsattn_post_1": 479, "7networks_lh_dorsattn_post_10": 479, "7networks_lh_dorsattn_post_11": 479, "7networks_lh_dorsattn_post_12": 479, "7networks_lh_dorsattn_post_13": 479, "7networks_lh_dorsattn_post_14": 479, "7networks_lh_dorsattn_post_15": 479, "7networks_lh_dorsattn_post_16": 479, "7networks_lh_dorsattn_post_17": 479, "7networks_lh_dorsattn_post_2": 479, "7networks_lh_dorsattn_post_3": 479, "7networks_lh_dorsattn_post_4": 479, "7networks_lh_dorsattn_post_5": 479, "7networks_lh_dorsattn_post_6": 479, "7networks_lh_dorsattn_post_7": 479, "7networks_lh_dorsattn_post_8": 479, "7networks_lh_dorsattn_post_9": 479, "7networks_lh_dorsattn_prcv_1": 479, "7networks_lh_dorsattn_prcv_2": 479, "7networks_lh_limbic_ofc_1": 479, "7networks_lh_limbic_ofc_2": 479, "7networks_lh_limbic_ofc_3": 479, "7networks_lh_limbic_ofc_4": 479, "7networks_lh_limbic_ofc_5": 479, "7networks_lh_limbic_temppole_1": 479, "7networks_lh_limbic_temppole_2": 479, "7networks_lh_limbic_temppole_3": 479, "7networks_lh_limbic_temppole_4": 479, "7networks_lh_limbic_temppole_5": 479, "7networks_lh_limbic_temppole_6": 479, "7networks_lh_limbic_temppole_7": 479, "7networks_lh_limbic_temppole_8": 479, "7networks_lh_salventattn_froperins_1": 479, "7networks_lh_salventattn_froperins_2": 479, "7networks_lh_salventattn_froperins_3": 479, "7networks_lh_salventattn_froperins_4": 479, "7networks_lh_salventattn_froperins_5": 479, "7networks_lh_salventattn_froperins_6": 479, "7networks_lh_salventattn_froperins_7": 479, "7networks_lh_salventattn_froperins_8": 479, "7networks_lh_salventattn_froperins_9": 479, "7networks_lh_salventattn_med_1": 479, "7networks_lh_salventattn_med_2": 479, "7networks_lh_salventattn_med_3": 479, "7networks_lh_salventattn_med_4": 479, "7networks_lh_salventattn_med_5": 479, "7networks_lh_salventattn_med_6": 479, "7networks_lh_salventattn_med_7": 479, "7networks_lh_salventattn_paroper_1": 479, "7networks_lh_salventattn_paroper_2": 479, "7networks_lh_salventattn_paroper_3": 479, "7networks_lh_salventattn_paroper_4": 479, "7networks_lh_salventattn_pfcl_1": 479, "7networks_lh_salventattn_tempocc_1": 479, "7networks_lh_sommot_1": 479, "7networks_lh_sommot_10": 479, "7networks_lh_sommot_11": 479, "7networks_lh_sommot_12": 479, "7networks_lh_sommot_13": 479, "7networks_lh_sommot_14": 479, "7networks_lh_sommot_15": 479, "7networks_lh_sommot_16": 479, "7networks_lh_sommot_17": 479, "7networks_lh_sommot_18": 479, "7networks_lh_sommot_19": 479, "7networks_lh_sommot_2": 479, "7networks_lh_sommot_20": 479, "7networks_lh_sommot_21": 479, "7networks_lh_sommot_22": 479, "7networks_lh_sommot_23": 479, "7networks_lh_sommot_24": 479, "7networks_lh_sommot_25": 479, "7networks_lh_sommot_26": 479, "7networks_lh_sommot_27": 479, "7networks_lh_sommot_28": 479, "7networks_lh_sommot_29": 479, "7networks_lh_sommot_3": 479, "7networks_lh_sommot_30": 479, "7networks_lh_sommot_31": 479, "7networks_lh_sommot_32": 479, "7networks_lh_sommot_33": 479, "7networks_lh_sommot_34": 479, "7networks_lh_sommot_35": 479, "7networks_lh_sommot_36": 479, "7networks_lh_sommot_37": 479, "7networks_lh_sommot_4": 479, "7networks_lh_sommot_5": 479, "7networks_lh_sommot_6": 479, "7networks_lh_sommot_7": 479, "7networks_lh_sommot_8": 479, "7networks_lh_sommot_9": 479, "7networks_lh_vis_1": 479, "7networks_lh_vis_10": 479, "7networks_lh_vis_11": 479, "7networks_lh_vis_12": 479, "7networks_lh_vis_13": 479, "7networks_lh_vis_14": 479, "7networks_lh_vis_15": 479, "7networks_lh_vis_16": 479, "7networks_lh_vis_17": 479, "7networks_lh_vis_18": 479, "7networks_lh_vis_19": 479, "7networks_lh_vis_2": 479, "7networks_lh_vis_20": 479, "7networks_lh_vis_21": 479, "7networks_lh_vis_22": 479, "7networks_lh_vis_23": 479, "7networks_lh_vis_24": 479, "7networks_lh_vis_25": 479, "7networks_lh_vis_26": 479, "7networks_lh_vis_27": 479, "7networks_lh_vis_28": 479, "7networks_lh_vis_29": 479, "7networks_lh_vis_3": [254, 479], "7networks_lh_vis_30": 479, "7networks_lh_vis_31": 479, "7networks_lh_vis_4": 479, "7networks_lh_vis_5": 479, "7networks_lh_vis_6": 479, "7networks_lh_vis_7": 479, "7networks_lh_vis_8": 479, "7networks_lh_vis_9": 479, "7networks_rh_cont_cing_1": 479, "7networks_rh_cont_cing_2": 479, "7networks_rh_cont_par_1": 479, "7networks_rh_cont_par_2": 479, "7networks_rh_cont_par_3": 479, "7networks_rh_cont_par_4": 479, "7networks_rh_cont_par_5": 479, "7networks_rh_cont_par_6": 479, "7networks_rh_cont_pcun_1": 479, "7networks_rh_cont_pcun_2": 479, "7networks_rh_cont_pfcl_1": 479, "7networks_rh_cont_pfcl_10": 479, "7networks_rh_cont_pfcl_11": 479, "7networks_rh_cont_pfcl_12": 479, "7networks_rh_cont_pfcl_13": 479, "7networks_rh_cont_pfcl_14": 479, "7networks_rh_cont_pfcl_15": 479, "7networks_rh_cont_pfcl_2": 479, "7networks_rh_cont_pfcl_3": 479, "7networks_rh_cont_pfcl_4": 479, "7networks_rh_cont_pfcl_5": 479, "7networks_rh_cont_pfcl_6": 479, "7networks_rh_cont_pfcl_7": 479, "7networks_rh_cont_pfcl_8": 479, "7networks_rh_cont_pfcl_9": 479, "7networks_rh_cont_pfcmp_1": 479, "7networks_rh_cont_pfcmp_2": 479, "7networks_rh_cont_pfcv_1": 479, "7networks_rh_cont_temp_1": 479, "7networks_rh_cont_temp_2": 479, "7networks_rh_default_par_1": 479, "7networks_rh_default_par_2": 479, "7networks_rh_default_par_3": 479, "7networks_rh_default_par_4": 479, "7networks_rh_default_par_5": 479, "7networks_rh_default_pcunpcc_1": 479, "7networks_rh_default_pcunpcc_2": 479, "7networks_rh_default_pcunpcc_3": 479, "7networks_rh_default_pcunpcc_4": 479, "7networks_rh_default_pcunpcc_5": 479, "7networks_rh_default_pcunpcc_6": 479, "7networks_rh_default_pcunpcc_7": 479, "7networks_rh_default_pcunpcc_8": 479, "7networks_rh_default_pcunpcc_9": 479, "7networks_rh_default_pfcdpfcm_1": 479, "7networks_rh_default_pfcdpfcm_10": 479, "7networks_rh_default_pfcdpfcm_11": 479, "7networks_rh_default_pfcdpfcm_12": 479, "7networks_rh_default_pfcdpfcm_13": 479, "7networks_rh_default_pfcdpfcm_2": 479, "7networks_rh_default_pfcdpfcm_3": 479, "7networks_rh_default_pfcdpfcm_4": 479, "7networks_rh_default_pfcdpfcm_5": 479, "7networks_rh_default_pfcdpfcm_6": 479, "7networks_rh_default_pfcdpfcm_7": 479, "7networks_rh_default_pfcdpfcm_8": 479, "7networks_rh_default_pfcdpfcm_9": 479, "7networks_rh_default_pfcv_1": 479, "7networks_rh_default_pfcv_2": 479, "7networks_rh_default_pfcv_3": 479, "7networks_rh_default_pfcv_4": 479, "7networks_rh_default_temp_1": 479, "7networks_rh_default_temp_2": 479, "7networks_rh_default_temp_3": 479, "7networks_rh_default_temp_4": 479, "7networks_rh_default_temp_5": 479, "7networks_rh_default_temp_6": 479, "7networks_rh_default_temp_7": 479, "7networks_rh_default_temp_8": 479, "7networks_rh_dorsattn_fef_1": 479, "7networks_rh_dorsattn_fef_2": 479, "7networks_rh_dorsattn_fef_3": 479, "7networks_rh_dorsattn_post_1": 479, "7networks_rh_dorsattn_post_10": 479, "7networks_rh_dorsattn_post_11": 479, "7networks_rh_dorsattn_post_12": 479, "7networks_rh_dorsattn_post_13": 479, "7networks_rh_dorsattn_post_14": 479, "7networks_rh_dorsattn_post_15": 479, "7networks_rh_dorsattn_post_16": 479, "7networks_rh_dorsattn_post_17": 479, "7networks_rh_dorsattn_post_18": 479, "7networks_rh_dorsattn_post_19": 479, "7networks_rh_dorsattn_post_2": 479, "7networks_rh_dorsattn_post_3": 479, "7networks_rh_dorsattn_post_4": 479, "7networks_rh_dorsattn_post_5": 479, "7networks_rh_dorsattn_post_6": 479, "7networks_rh_dorsattn_post_7": 479, "7networks_rh_dorsattn_post_8": 479, "7networks_rh_dorsattn_post_9": 479, "7networks_rh_dorsattn_prcv_1": 479, "7networks_rh_limbic_ofc_1": 479, "7networks_rh_limbic_ofc_2": 479, "7networks_rh_limbic_ofc_3": 479, "7networks_rh_limbic_ofc_4": 479, "7networks_rh_limbic_ofc_5": 479, "7networks_rh_limbic_ofc_6": 479, "7networks_rh_limbic_temppole_1": 479, "7networks_rh_limbic_temppole_2": 479, "7networks_rh_limbic_temppole_3": 479, "7networks_rh_limbic_temppole_4": 479, "7networks_rh_limbic_temppole_5": 479, "7networks_rh_limbic_temppole_6": 479, "7networks_rh_limbic_temppole_7": 479, "7networks_rh_salventattn_froperins_1": 479, "7networks_rh_salventattn_froperins_2": 479, "7networks_rh_salventattn_froperins_3": 479, "7networks_rh_salventattn_froperins_4": 479, "7networks_rh_salventattn_froperins_5": 479, "7networks_rh_salventattn_froperins_6": 479, "7networks_rh_salventattn_froperins_7": 479, "7networks_rh_salventattn_froperins_8": 479, "7networks_rh_salventattn_med_1": 479, "7networks_rh_salventattn_med_2": 479, "7networks_rh_salventattn_med_3": 479, "7networks_rh_salventattn_med_4": 479, "7networks_rh_salventattn_med_5": 479, "7networks_rh_salventattn_med_6": 479, "7networks_rh_salventattn_med_7": 479, "7networks_rh_salventattn_med_8": 479, "7networks_rh_salventattn_pfcl_1": 479, "7networks_rh_salventattn_prc_1": 479, "7networks_rh_salventattn_tempoccpar_1": 479, "7networks_rh_salventattn_tempoccpar_2": 479, "7networks_rh_salventattn_tempoccpar_3": 479, "7networks_rh_salventattn_tempoccpar_4": 479, "7networks_rh_salventattn_tempoccpar_5": 479, "7networks_rh_salventattn_tempoccpar_6": 479, "7networks_rh_salventattn_tempoccpar_7": 479, "7networks_rh_sommot_1": 479, "7networks_rh_sommot_10": 479, "7networks_rh_sommot_11": 479, "7networks_rh_sommot_12": 479, "7networks_rh_sommot_13": 479, "7networks_rh_sommot_14": 479, "7networks_rh_sommot_15": 479, "7networks_rh_sommot_16": 479, "7networks_rh_sommot_17": 479, "7networks_rh_sommot_18": 479, "7networks_rh_sommot_19": 479, "7networks_rh_sommot_2": 479, "7networks_rh_sommot_20": 479, "7networks_rh_sommot_21": 479, "7networks_rh_sommot_22": 479, "7networks_rh_sommot_23": 479, "7networks_rh_sommot_24": 479, "7networks_rh_sommot_25": 479, "7networks_rh_sommot_26": 479, "7networks_rh_sommot_27": 479, "7networks_rh_sommot_28": 479, "7networks_rh_sommot_29": 479, "7networks_rh_sommot_3": 479, "7networks_rh_sommot_30": 479, "7networks_rh_sommot_31": 479, "7networks_rh_sommot_32": 479, "7networks_rh_sommot_33": 479, "7networks_rh_sommot_34": 479, "7networks_rh_sommot_35": 479, "7networks_rh_sommot_36": 479, "7networks_rh_sommot_37": 479, "7networks_rh_sommot_38": 479, "7networks_rh_sommot_39": 479, "7networks_rh_sommot_4": 479, "7networks_rh_sommot_40": 479, "7networks_rh_sommot_5": 479, "7networks_rh_sommot_6": 479, "7networks_rh_sommot_7": 479, "7networks_rh_sommot_8": 479, "7networks_rh_sommot_9": 479, "7networks_rh_vis_1": 479, "7networks_rh_vis_10": 479, "7networks_rh_vis_11": 479, "7networks_rh_vis_12": 479, "7networks_rh_vis_13": 479, "7networks_rh_vis_14": 479, "7networks_rh_vis_15": 479, "7networks_rh_vis_16": 479, "7networks_rh_vis_17": 479, "7networks_rh_vis_18": 479, "7networks_rh_vis_19": 479, "7networks_rh_vis_2": 479, "7networks_rh_vis_20": 479, "7networks_rh_vis_21": 479, "7networks_rh_vis_22": 479, "7networks_rh_vis_23": 479, "7networks_rh_vis_24": 479, "7networks_rh_vis_25": 479, "7networks_rh_vis_26": 479, "7networks_rh_vis_27": 479, "7networks_rh_vis_28": 479, "7networks_rh_vis_29": 479, "7networks_rh_vis_3": 479, "7networks_rh_vis_30": 479, "7networks_rh_vis_4": 479, "7networks_rh_vis_5": 479, "7networks_rh_vis_6": 479, "7networks_rh_vis_7": 479, "7networks_rh_vis_8": 479, "7networks_rh_vis_9": 479, "8": [3, 4, 6, 9, 12, 14, 24, 27, 30, 32, 33, 34, 38, 40, 43, 44, 48, 49, 50, 51, 53, 54, 55, 56, 58, 61, 62, 65, 70, 71, 74, 75, 78, 85, 88, 90, 91, 99, 100, 101, 102, 103, 104, 106, 107, 111, 114, 116, 120, 123, 127, 132, 134, 139, 147, 149, 151, 157, 166, 174, 198, 201, 207, 208, 209, 210, 211, 212, 221, 231, 247, 251, 257, 266, 268, 277, 279, 286, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 303, 304, 305, 306, 336, 349, 353, 358, 377, 380, 381, 382, 383, 384, 385, 386, 387, 390, 393, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 459, 461, 470, 471, 473, 478, 479, 494], "80": [33, 43, 47, 54, 56, 64, 65, 71, 83, 103, 120, 162, 163, 176, 217, 220, 252, 353, 373, 408, 413, 415, 419, 425, 431, 477, 478, 479], "800": [34, 86, 254, 336, 349, 433, 471], "8009": 97, "801": 97, "801208": 41, "80211847e": 3, "80300533e": 3, "803925": 33, "805": [69, 120], "8051948051948052": 34, "806852": 33, "807425": 33, "80743714e": 3, "807510": 6, "80799974e": 3, "80907192e": 3, "81": [33, 125, 161, 478, 479], "810": [75, 81, 494], "8100": 34, "81062449e": 3, "8119": [120, 202, 214, 248, 267, 292], "811979": 6, "813": 48, "81308": 33, "81420609e": 3, "815609": 62, "816017316017316": 34, "81647125e": 3, "81663981e": 3, "817": 10, "81704439e": 3, "81937685e": 3, "82": [30, 32, 33, 41, 88, 116, 478, 479], "820": [3, 16, 29], "821272": 33, "822": [134, 161], "82246010e": 3, "822602": 33, "823": 97, "82605707e": 3, "82612762e": 3, "8262": 116, "8263": 116, "82637946e": 3, "8264": 116, "8265": 116, "8266": 116, "8267": 116, "8268": 116, "8269": 116, "826947": 33, "8270": 116, "8271": 116, "8272": 116, "8273": 116, "8274": 116, "8275": 116, "8276": 116, "8277": 116, "8278": 116, "8279": 116, "82791106e": 3, "828": [34, 45, 91, 95, 478, 494], "828183": 33, "82894311e": 3, "82972297e": 3, "83": [32, 33, 71, 116, 120, 124, 161, 181, 212, 351, 397, 478, 479], "832": 479, "83203574e": 3, "8339": [155, 161], "835099": 6, "836576": 33, "837": [6, 478], "83882552e": 3, "839058": 33, "8397156": 0, "84": [6, 33, 90, 99, 120, 356, 377, 478, 479], "84048779e": 3, "841": [87, 95, 494], "841e": 53, "842804": 33, "842x": [102, 120, 397], "843388": 56, "844135": 33, "844892": 56, "844e": 53, "84616931e": 3, "84699719e": 3, "84812698e": 3, "849": [101, 109, 494], "8493": 34, "8496": 34, "85": [33, 47, 90, 134, 161, 391, 394, 478, 479], "8518518518518519": 3, "85357480e": 3, "855": [113, 117, 494], "85521067e": 3, "85681890e": 3, "858": [97, 479], "859": [9, 111], "85904563e": 3, "86": [32, 33, 478, 479], "864": [107, 109, 494], "8648": 34, "86601087e": 3, "8667": 34, "86827680e": 3, "869941": 33, "87": [30, 32, 33, 71, 90, 120, 478, 479], "87114147e": 3, "871458": 33, "87165976e": 3, "872": 27, "874f": 55, "875": [120, 134, 161, 162], "8765432098765432": 3, "876886": 56, "877": [72, 494], "878": 69, "878390": 56, "88": [33, 43, 80, 88, 90, 102, 120, 397, 478, 479], "881": 494, "88147057e": 3, "8824": 90, "882906": 62, "886": 3, "88675963e": 3, "88746883e": 3, "88766915e": 3, "88835870e": 3, "89": [30, 32, 33, 71, 76, 105, 478, 479], "89029656e": 3, "89090649e": 3, "891": [120, 162], "89178169e": 3, "89274643e": 3, "89305343e": 3, "89375870e": 3, "895": 116, "8952": 90, "896": [14, 27, 494], "89713782e": 3, "89844485e": 3, "8990": 176, "8a": [6, 33], "8b": 6, "8c": 6, "8mm": 100, "9": [3, 4, 6, 15, 23, 27, 31, 32, 33, 34, 35, 36, 40, 41, 42, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 66, 68, 70, 71, 85, 88, 89, 90, 91, 93, 95, 97, 98, 99, 102, 103, 104, 105, 106, 109, 115, 116, 117, 120, 122, 123, 124, 127, 133, 143, 152, 154, 162, 181, 202, 203, 221, 223, 226, 254, 263, 264, 277, 279, 281, 283, 323, 327, 336, 345, 351, 367, 373, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 433, 448, 450, 451, 467, 470, 478, 479, 492, 493, 494], "90": [6, 9, 12, 22, 30, 32, 33, 43, 47, 50, 53, 56, 63, 76, 78, 90, 101, 103, 111, 114, 116, 120, 134, 147, 155, 161, 166, 377, 378, 448, 450, 451, 454, 474, 478, 479, 492], "900": [149, 161, 254, 479], "90076525e": 3, "90208412e": 3, "90242235e": 3, "9026": 34, "904": 6, "906274": 62, "907": 479, "91": [2, 30, 33, 43, 56, 76, 90, 155, 161, 244, 255, 478, 479], "911755": 33, "913": [51, 59, 494], "9136": 90, "913842": 33, "91412351e": 3, "91435": 479, "915": [40, 41, 120, 219, 276], "91520": 479, "915996": 33, "916": [97, 109, 494], "917": [15, 16, 18, 27, 29, 31, 33, 34, 36, 37, 45, 109, 494], "9177489177489176": 34, "918": 97, "918703": 62, "92": [4, 30, 32, 33, 49, 76, 102, 120, 397, 478, 479], "922085": 56, "923589": 56, "924894": 33, "925": [2, 7, 494], "92527201e": 3, "92569581e": 3, "9259259259259259": 3, "926": 3, "92615622e": 3, "927": [42, 45, 108, 109, 494], "92748078e": 3, "928": 81, "92870603e": 3, "929": [40, 41, 120, 219, 276], "93": [6, 30, 32, 33, 76, 90, 248, 478, 479], "93191471e": 3, "932": 101, "932773": 33, "93381951e": 3, "934": 6, "93483898e": 3, "935": [120, 212], "935719": 33, "936": 478, "937283": 62, "93775226e": 3, "93847753e": 3, "94": [30, 33, 76, 90, 105, 106, 271, 272, 478, 479], "94179250e": 3, "94204031e": 3, "9444444444444444": 29, "945": [120, 212], "94545197486877": 43, "946": 479, "947": 479, "947626": 33, "95": [25, 30, 33, 90, 92, 155, 161, 187, 198, 326, 328, 329, 478, 479], "950054": 62, "953": [120, 194, 274], "954": [49, 55, 59, 494], "95406131e": 3, "95494687e": 3, "955": [58, 59, 494], "95663065e": 3, "957": [45, 494], "958": [41, 100, 109, 494], "959582": 33, "96": [6, 30, 32, 33, 49, 52, 71, 83, 229, 478, 479], "9607438016528926": 34, "96235905e": 3, "9629629629629629": 3, "96431277e": 3, "965": [120, 194, 274], "967": 479, "9673": [120, 378], "9678": [120, 378], "968": [27, 120, 212, 494], "968355": 6, "968729": 33, "969": 11, "96a": 33, "97": [30, 33, 44, 87, 478, 479], "970": 479, "972": [6, 84, 95, 494], "973": 479, "974948": 33, "9752528": [69, 120], "9753086419753086": 3, "976": [49, 78], "978": [120, 328, 329], "98": [30, 32, 33, 74, 86, 90, 92, 120, 155, 161, 181, 351, 397, 478, 479], "980": [120, 212], "981": [45, 52, 59, 494], "98107": 0, "981215": 33, "9816": 90, "982": [40, 62, 72, 494], "98226703e": 3, "983": 479, "984": [4, 7, 33, 494], "985": [59, 494], "986": [55, 78], "98652924e": 3, "98669301e": 3, "987059": 33, "98717729e": 3, "98727877e": 3, "98744679e": 3, "9876543209876543": 3, "988": 120, "989": [102, 109, 494], "98919023e": 3, "98948087e": 3, "99": [6, 12, 30, 32, 33, 58, 92, 155, 161, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 478, 479, 494], "99015675e": 3, "990755": 33, "99185337e": 3, "992": 120, "994": [20, 27, 494], "994713": 33, "997775": 33, "9984": 90, "999": 479, "999324": 56, "999934": 33, "9a": [6, 478], "9b": 6, "9b76y": [204, 249], "A": [0, 1, 5, 6, 7, 11, 15, 16, 21, 40, 42, 47, 48, 49, 56, 58, 61, 63, 67, 69, 70, 71, 74, 78, 79, 83, 85, 88, 97, 99, 102, 105, 106, 110, 112, 117, 118, 119, 120, 123, 130, 141, 142, 146, 149, 155, 161, 162, 164, 165, 167, 169, 171, 172, 173, 175, 176, 177, 179, 181, 183, 184, 186, 187, 188, 194, 195, 197, 198, 200, 201, 202, 204, 205, 212, 218, 221, 224, 225, 226, 227, 228, 229, 231, 234, 235, 236, 245, 247, 248, 253, 255, 257, 260, 261, 262, 264, 266, 274, 275, 277, 278, 279, 280, 282, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 327, 328, 329, 332, 335, 336, 339, 345, 349, 354, 355, 361, 366, 367, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 397, 408, 409, 413, 429, 430, 433, 437, 442, 444, 446, 449, 454, 458, 459, 460, 461, 462, 463, 468, 469, 471, 472, 473, 474, 479, 492, 494, 495], "AND": [93, 123, 132, 161], "And": [25, 41, 101, 162, 177, 184, 187], "As": [3, 15, 34, 36, 44, 49, 52, 54, 65, 78, 80, 91, 93, 94, 97, 100, 103, 122, 129, 149, 161, 162, 163, 165, 167, 168, 169, 173, 175, 176, 178, 180, 186, 229, 339, 377, 378], "At": [55, 63, 64, 67, 76, 79, 90, 112, 166, 183, 184, 349, 351], "BY": [131, 161, 216], "Be": [168, 169, 176, 236, 323, 472], "But": [49, 79, 97, 166, 175, 178, 188], "By": [3, 14, 15, 25, 29, 33, 35, 58, 63, 68, 69, 101, 153, 161, 169, 176, 184, 188, 224, 235, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 287, 288, 298, 299, 300, 301, 303, 304, 305, 306, 336, 349, 355, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 432, 437, 440, 441, 443, 445, 446, 447, 454, 459, 460, 461, 464, 492], "For": [3, 4, 6, 9, 14, 15, 19, 23, 24, 29, 30, 32, 34, 35, 36, 40, 41, 48, 50, 51, 54, 63, 65, 67, 69, 70, 71, 78, 79, 85, 88, 90, 97, 99, 101, 103, 105, 108, 111, 112, 115, 122, 123, 146, 156, 161, 162, 163, 165, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 180, 181, 183, 184, 186, 187, 188, 193, 194, 195, 196, 197, 200, 201, 203, 204, 206, 212, 213, 214, 215, 219, 220, 221, 223, 227, 228, 230, 231, 232, 234, 241, 244, 245, 246, 250, 251, 253, 254, 255, 257, 258, 267, 277, 279, 281, 292, 297, 298, 299, 300, 301, 303, 304, 305, 306, 326, 327, 328, 329, 336, 343, 349, 351, 366, 374, 377, 378, 381, 382, 384, 385, 387, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 432, 437, 440, 442, 445, 446, 447, 448, 449, 450, 451, 459, 461, 462, 463, 469, 470, 471, 472, 477, 479, 492, 493], "If": [0, 2, 9, 14, 15, 24, 32, 34, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 68, 74, 78, 83, 85, 88, 90, 91, 93, 97, 98, 99, 102, 103, 104, 105, 106, 111, 118, 122, 123, 131, 146, 153, 154, 156, 161, 162, 166, 168, 169, 171, 173, 175, 176, 178, 181, 183, 184, 186, 187, 188, 194, 234, 235, 236, 238, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 253, 255, 260, 261, 262, 263, 267, 268, 270, 271, 272, 275, 277, 279, 281, 282, 287, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 323, 326, 327, 328, 329, 332, 333, 336, 339, 343, 345, 349, 350, 351, 352, 353, 354, 355, 359, 360, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 472, 473, 477, 492, 493], "In": [0, 4, 6, 9, 14, 15, 16, 22, 24, 32, 33, 36, 38, 39, 40, 42, 47, 48, 49, 50, 51, 52, 53, 54, 58, 62, 64, 65, 66, 71, 74, 76, 78, 80, 85, 86, 88, 90, 93, 94, 98, 99, 101, 111, 114, 120, 121, 122, 123, 129, 130, 141, 146, 156, 158, 161, 162, 163, 165, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 181, 183, 184, 185, 186, 187, 188, 194, 198, 214, 220, 224, 234, 241, 244, 246, 250, 251, 252, 267, 274, 277, 279, 281, 298, 299, 300, 301, 303, 304, 305, 306, 323, 326, 328, 329, 336, 338, 343, 349, 351, 352, 369, 370, 371, 373, 391, 397, 433, 434, 445, 458, 467, 470, 477, 492, 493], "Ins": 51, "It": [2, 3, 6, 9, 14, 15, 16, 22, 34, 41, 42, 44, 48, 51, 61, 64, 65, 69, 70, 74, 76, 80, 88, 93, 97, 99, 100, 108, 111, 112, 113, 114, 121, 122, 123, 127, 136, 139, 140, 142, 153, 154, 155, 156, 161, 162, 163, 168, 169, 171, 172, 173, 175, 176, 178, 181, 182, 183, 184, 186, 187, 188, 198, 199, 217, 220, 221, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 493], "Its": [162, 170, 175, 302, 329, 336, 349, 352, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 471], "NOS": 242, "NOT": 123, "No": [56, 65, 76, 90, 105, 175, 176, 370, 479], "Not": [3, 65, 70, 250, 251, 401, 458, 460], "ON": 49, "ONE": [120, 183], "OR": 123, "Of": [67, 112], "On": [13, 36, 49, 52, 53, 56, 58, 62, 65, 67, 74, 76, 112, 120, 147, 161, 163, 175, 183, 187, 188, 235, 238], "One": [3, 6, 14, 34, 35, 48, 49, 56, 69, 70, 78, 154, 161, 162, 163, 168, 169, 173, 175, 177, 178, 180, 184, 186, 188, 336, 369, 378, 382, 383, 385, 464], "Or": [29, 123, 168, 253, 254, 492], "Such": [93, 162, 374], "That": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 102, 103, 104, 105, 106, 122, 153, 161, 181, 323, 327, 336, 338, 343], "The": [0, 2, 3, 11, 14, 15, 17, 18, 19, 20, 21, 22, 23, 28, 29, 30, 32, 33, 34, 36, 40, 41, 42, 45, 47, 48, 49, 51, 52, 54, 55, 58, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 74, 75, 76, 78, 79, 80, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 104, 106, 108, 112, 113, 114, 115, 116, 118, 120, 122, 123, 125, 126, 127, 129, 130, 132, 134, 136, 137, 138, 139, 140, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 173, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 192, 193, 194, 197, 198, 200, 201, 203, 206, 212, 213, 215, 216, 217, 222, 223, 224, 226, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 255, 257, 258, 263, 264, 266, 267, 268, 270, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 283, 286, 287, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 343, 344, 345, 349, 350, 351, 352, 353, 354, 355, 356, 360, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 477, 479, 483, 484, 488, 492, 493, 494, 495], "Their": 219, "Then": [2, 3, 14, 30, 40, 42, 50, 51, 55, 62, 63, 67, 93, 94, 166, 168, 170, 171, 176, 184, 187, 188, 234, 236, 268, 458], "There": [0, 4, 21, 65, 165, 168, 169, 170, 176, 181, 252, 326, 328, 329, 350, 377, 468, 492], "These": [3, 4, 6, 15, 55, 58, 60, 71, 73, 76, 78, 80, 88, 93, 107, 110, 118, 122, 149, 152, 153, 156, 161, 168, 171, 172, 174, 175, 176, 180, 181, 184, 188, 194, 204, 214, 215, 229, 249, 260, 262, 296, 487, 492, 493], "To": [0, 2, 3, 4, 6, 15, 21, 22, 23, 31, 33, 37, 39, 40, 42, 43, 48, 49, 50, 51, 52, 54, 55, 62, 65, 66, 68, 75, 76, 78, 79, 83, 86, 88, 93, 97, 100, 101, 104, 108, 113, 114, 115, 122, 123, 141, 146, 158, 161, 162, 163, 165, 168, 169, 170, 171, 173, 176, 177, 178, 180, 184, 186, 187, 253, 254, 277, 326, 328, 329, 336, 345, 349, 353, 365, 377, 440, 445, 446, 447, 448, 450, 451, 454, 458, 471, 492], "Will": [242, 277, 358, 369, 370, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 442, 451, 455], "With": [9, 14, 32, 56, 77, 88, 111, 171, 175, 178, 235, 238, 332, 378, 473, 476, 493], "_": [6, 22, 30, 36, 37, 42, 44, 47, 49, 51, 57, 62, 74, 76, 79, 93, 97, 99, 102, 105, 106, 108, 113, 114, 129, 154, 158, 161, 168, 176, 282, 283, 339, 376], "_00077": [120, 228, 255], "__": [99, 234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "______________________________________________________________________": 30, "________________________________________________________________________________": [33, 48, 49, 52, 53, 56, 58], "___________________________________________________________unmask": 33, "__________________________________________________________run_glm": 33, "________________________________________________________ward_tre": 49, "_____________________________________________________resample_img": 52, "____________________________________________________estimator_fit": 49, "___________________________________________________randomized_svd": 48, "__________________________________________________filter_and_mask": 33, "_________________________________________________compute_load": 48, "_______________________________________________filter_and_extract": [49, 52, 53, 56, 58], "______________________________________________explained_vari": 48, "_____________________________________________dict_learning_onlin": 48, "__________________________________________high_variance_confound": 53, "________________________________________resample_img": 54, "__________________________________filter_and_extract": [54, 56], "_________________________________recursive_neighbor_agglomer": 49, "__all__": 176, "__class__": [44, 48, 49], "__init__": [176, 234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 316, 317, 318, 323, 324, 325, 326, 327, 328, 329, 330, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 458, 459, 460, 461, 469], "__init___": 327, "__name__": [44, 48, 49], "__version__": 176, "_a": [120, 228, 255], "_adjust_screening_percentil": [141, 161], "_agglom": 49, "_apply_cluster_size_threshold": [157, 161], "_ax": [18, 21, 48, 50], "_ball_sample_loc": 24, "_base": [34, 39, 48, 49], "_build": 176, "_check_force_resampl": [3, 11, 16], "_check_mask_shap": 176, "_check_mask_valu": 176, "_check_second_level_input": [158, 161], "_cmap_d": 12, "_col_filters_available_on_serv": 277, "_column": 178, "_compute_facecolors_matplotlib": [131, 161], "_compute_load": 48, "_core": [3, 16, 29, 58], "_data": 20, "_design": 376, "_dict_learn": 48, "_empty_filt": 277, "_estimator_fit": 49, "_explained_vari": 48, "_extractionfunctor": [49, 52, 53, 56, 58], "_fastica": [91, 104], "_filter_and_extract": [49, 52, 53, 54, 56, 58], "_filter_and_mask": 33, "_full_brain_info": [131, 161], "_gamma_difference_hrf": [158, 161], "_get_clusters_t": [132, 161], "_get_mask_volum": [141, 161], "_get_vertexcolor": [131, 161], "_get_voxelwise_model_attribut": [154, 161], "_label": 66, "_latest": 184, "_line_sample_loc": 24, "_method": 58, "_mix_colormap": [131, 161], "_neurosynth_fetch_words_url": [158, 161], "_neurovault_base_url": [158, 161], "_one_mesh_info": [131, 161], "_plot_surf_matplotlib": [131, 161], "_plot_surf_plotli": 9, "_projector": [13, 14, 16, 47, 50, 51, 52, 58, 156, 161], "_r": 12, "_safe_cach": [129, 161], "_safe_get_data": [141, 161], "_sample_locations_between_surfac": 24, "_scale": 198, "_scan": 178, "_schaeferfullsupp": [120, 226, 254], "_slicer": [2, 3, 4, 6, 9, 10, 15, 16, 17, 25, 39, 48, 49, 50, 68, 70, 74, 80, 85, 87, 88, 91, 93, 97, 111, 156, 161], "_space": 339, "_stat": 376, "_statmap": 376, "_tag": 375, "_task": [62, 339], "_test": 176, "_univariate_select": 116, "_update_submatrix": 175, "_util": [57, 83, 116, 130, 132, 136, 155, 158, 161, 175, 176, 184], "_valid": 176, "_validate_shap": 176, "_version": 184, "_voxel": 178, "_vx": 184, "_z_map": 70, "a00028185": 23, "a00028185_left_preprocessed_fwhm6": 23, "a00033747_lh_preprocessed_fsaverage5_fwhm6": 116, "a00033747_rh_preprocessed_fsaverage5_fwhm6": 116, "a00035072_lh_preprocessed_fsaverage5_fwhm6": 116, "a00035072_rh_preprocessed_fsaverage5_fwhm6": 116, "a00035827_lh_preprocessed_fsaverage5_fwhm6": 116, "a00035827_rh_preprocessed_fsaverage5_fwhm6": 116, "a00035840_lh_preprocessed_fsaverage5_fwhm6": 116, "a00035840_rh_preprocessed_fsaverage5_fwhm6": 116, "a00037112_lh_preprocessed_fsaverage5_fwhm6": 116, "a00037112_rh_preprocessed_fsaverage5_fwhm6": 116, "a00037511_lh_preprocessed_fsaverage5_fwhm6": 116, "a00037511_rh_preprocessed_fsaverage5_fwhm6": 116, "a00038998_lh_preprocessed_fsaverage5_fwhm6": 116, "a00038998_rh_preprocessed_fsaverage5_fwhm6": 116, "a00039391_lh_preprocessed_fsaverage5_fwhm6": 116, "a00039391_rh_preprocessed_fsaverage5_fwhm6": 116, "a00039431_lh_preprocessed_fsaverage5_fwhm6": 116, "a00039431_rh_preprocessed_fsaverage5_fwhm6": 116, "a_nice_funct": 176, "aal": [138, 161, 190, 244], "ab": [30, 43, 44, 53, 58, 80, 83, 102, 103, 104, 120, 162, 175, 201, 207, 208, 209, 210, 211, 231, 235, 238, 247, 257, 286, 354, 397, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 473], "abadi": [0, 134, 136, 139, 146, 161], "abb4588": 120, "abbrev": 184, "abbrevi": 186, "abdulrahman": [99, 120], "aben": [0, 149, 161], "aberr": 77, "abid": [6, 120, 140, 161, 176, 190, 242], "abl": [30, 32, 176, 184, 374, 448, 450, 451, 492], "abnorm": [120, 212], "about": [0, 2, 3, 6, 14, 19, 24, 49, 62, 63, 75, 77, 78, 93, 99, 100, 101, 108, 113, 122, 123, 129, 130, 131, 134, 149, 157, 161, 165, 168, 169, 171, 173, 175, 176, 177, 178, 181, 182, 183, 186, 193, 194, 196, 198, 200, 203, 204, 213, 220, 221, 223, 228, 231, 233, 246, 255, 257, 266, 267, 268, 281, 289, 290, 291, 292, 293, 294, 378, 472, 477], "abov": [2, 3, 4, 14, 21, 33, 42, 48, 49, 56, 65, 67, 85, 93, 99, 123, 132, 141, 161, 162, 163, 165, 167, 168, 173, 175, 176, 177, 181, 184, 186, 187, 188, 213, 228, 244, 266, 268, 289, 290, 293, 298, 299, 300, 301, 303, 304, 323, 324, 326, 327, 328, 329, 332, 369, 370, 377, 381, 382, 383, 384, 385, 386, 387, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 445, 453, 455, 457, 459, 461, 472, 473], "abraham": [0, 51, 98, 120, 124, 125, 127, 128, 134, 136, 139, 149, 161, 166, 198, 377, 378, 461], "abrupt": 188, "absenc": [178, 184, 464], "absolut": [42, 43, 58, 116, 149, 161, 173, 175, 176, 216, 259, 269, 282, 353, 358, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 431, 432, 434, 439, 440, 442, 446, 447, 448, 451, 454, 455, 457, 492], "absolute_path": 107, "abstract": [121, 380], "ac": [2, 120, 174, 212, 214, 215, 228, 229, 230, 255, 267, 284, 285, 292], "academ": [69, 120, 162, 194, 202, 226, 248, 254, 274], "academi": [120, 173, 183, 194, 198, 228, 255, 274, 302, 378], "acc": 20, "acceler": [23, 115, 120, 222, 287], "accept": [2, 3, 47, 64, 129, 130, 140, 141, 143, 146, 147, 149, 152, 153, 154, 155, 156, 157, 158, 161, 176, 177, 186, 194, 349, 351, 352, 374, 388, 389, 390, 391, 392, 393, 394, 432, 442, 444, 445, 446, 447, 454, 456, 467, 468], "access": [6, 33, 48, 56, 61, 62, 65, 70, 74, 120, 122, 130, 156, 161, 163, 167, 175, 176, 177, 185, 186, 188, 243, 244, 247, 252, 253, 254, 257, 258, 281, 284, 285, 287, 324, 411, 483, 495], "accommod": [132, 146, 161], "accord": [6, 41, 44, 67, 93, 99, 108, 129, 141, 142, 143, 146, 152, 154, 158, 161, 166, 173, 176, 205, 222, 232, 235, 242, 254, 296, 298, 299, 300, 301, 303, 304, 323, 354, 374, 397, 442, 443, 448, 450, 451, 455, 457, 460, 461, 472, 473, 492], "accordingli": [15, 156, 161, 374], "account": [6, 65, 75, 93, 173, 176, 184, 188, 194, 215, 377, 381, 382, 384, 385, 387, 461], "accumul": [108, 113, 492], "accur": [49, 58, 65, 67, 112, 149, 157, 161, 173, 177, 178], "accuraci": [29, 30, 31, 32, 33, 35, 37, 41, 51, 97, 98, 153, 161, 172, 173, 181, 183, 298, 300, 302, 303, 495], "accuracy_scor": [41, 51], "acharya": 0, "achiev": [9, 15, 55, 69, 92, 111, 168, 175, 183, 187, 188, 238], "acompcor_combin": 377, "acq": 339, "acquir": [3, 6, 65, 66, 122, 178, 181, 183, 216, 229], "acquis": 188, "acquisit": [3, 6, 30, 32, 63, 65, 69, 100, 120, 173, 178, 181, 198, 229, 272, 343, 433], "across": [3, 6, 15, 16, 47, 50, 51, 56, 64, 65, 79, 93, 97, 98, 99, 103, 120, 130, 149, 155, 161, 162, 163, 166, 167, 168, 169, 171, 173, 178, 181, 193, 198, 206, 212, 220, 228, 234, 242, 252, 286, 298, 299, 300, 301, 303, 304, 305, 306, 372, 388, 433, 459, 461, 477, 492], "act": [29, 34, 120, 142, 161, 181, 240, 241, 328, 329, 399], "action": [178, 184, 200, 272], "activ": [6, 14, 15, 16, 30, 32, 40, 41, 49, 65, 67, 68, 69, 70, 75, 76, 78, 79, 80, 99, 108, 112, 113, 120, 122, 162, 163, 166, 167, 168, 172, 173, 175, 176, 177, 178, 180, 181, 183, 184, 188, 194, 195, 198, 200, 205, 218, 219, 220, 228, 236, 242, 244, 252, 255, 274, 275, 276, 295, 331, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 431, 461, 463, 493], "activation_threshold": 431, "active_minus_rest": 6, "active_vs_rest_eff_map": 6, "active_vs_rest_z_map": 6, "actual": [3, 6, 42, 65, 66, 69, 76, 85, 105, 131, 161, 175, 176, 178, 181, 186, 236, 281, 336, 349, 352, 471], "ad": [14, 15, 20, 21, 30, 40, 66, 67, 71, 83, 112, 129, 130, 131, 142, 143, 153, 155, 156, 157, 158, 159, 161, 171, 175, 177, 184, 234, 235, 236, 240, 241, 246, 249, 251, 253, 254, 256, 257, 262, 263, 264, 268, 269, 287, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 339, 345, 349, 351, 353, 354, 358, 363, 364, 365, 366, 368, 369, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 390, 393, 397, 398, 400, 401, 432, 433, 434, 437, 439, 440, 443, 444, 445, 446, 447, 448, 450, 451, 454, 458, 459, 460, 461, 463, 470, 473, 477, 495], "adam": [99, 120], "adapt": [49, 64, 111, 112, 113, 114, 115, 122, 159, 161, 166, 169, 176, 336, 345, 377, 478, 479], "add": [9, 14, 15, 20, 31, 40, 41, 50, 56, 63, 67, 79, 102, 111, 112, 123, 128, 129, 130, 131, 132, 133, 139, 141, 142, 144, 146, 149, 154, 158, 159, 161, 166, 168, 171, 173, 176, 181, 184, 236, 253, 254, 277, 279, 296, 354, 377, 386, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 453, 455, 457, 472, 473, 492], "add_contour": [14, 18, 142, 149, 161, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 492], "add_edg": [399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 492], "add_graph": [402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424], "add_mark": [40, 55, 61, 68, 99, 138, 144, 147, 161, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 492], "add_object_bound": [398, 400, 401], "add_overlai": [50, 127, 161, 166, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 437, 439, 440, 445, 446, 447, 492], "add_patch": 40, "add_reg": [61, 63, 108, 177, 343], "add_reg_nam": [61, 63, 343], "add_subplot": [61, 90], "addit": [0, 14, 15, 55, 63, 65, 67, 68, 78, 85, 88, 100, 122, 123, 125, 130, 141, 146, 152, 161, 168, 171, 175, 177, 181, 183, 184, 242, 244, 266, 276, 298, 299, 300, 301, 305, 306, 324, 336, 343, 349, 351, 374, 377, 378, 380, 383, 386, 458, 459, 460, 469, 492], "addition": [14, 15, 58, 68, 155, 161, 176, 180, 184, 187, 188, 204, 213, 339, 397, 470], "address": [120, 178, 180, 181, 184, 351, 397], "adelsberg": [23, 115, 120, 222, 287], "adelsheim": [120, 197, 245], "adelstein": 120, "adequ": [74, 201], "adhd": [60, 72, 101, 118, 149, 158, 161, 162, 177, 190, 243, 336, 343, 380, 387, 410, 447, 469, 471, 479, 489, 494], "adhd200": [196, 243], "adhd200_40sub_preprocess": [196, 243], "adhd40_0010064": 101, "adhd_dataset": [11, 61, 177], "adher": 176, "adjac": [37, 149, 161, 312], "adjacency_matrix": [47, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 453], "adjust": [31, 65, 66, 129, 144, 161, 378, 399, 410, 413], "adjust_screening_percentil": 116, "admittedli": 165, "adolesc": [120, 183], "adopt": [173, 181], "adriana": [23, 115, 120, 222, 287], "adult": [48, 51, 98, 120, 149, 161, 182, 198, 203, 223, 263, 281], "adulthood": [120, 214, 267, 292], "advanc": [55, 109, 120, 168, 170, 171, 176, 177, 183, 187, 266, 298, 300, 301, 361, 380, 386, 433, 447, 494, 495], "advantag": [42, 43, 67, 112, 175, 188], "advertis": [133, 161], "advic": [168, 194], "advis": [104, 176, 186, 268, 391, 459], "affect": [101, 155, 161, 178, 181], "affili": 176, "affin": [10, 40, 43, 49, 56, 69, 82, 88, 90, 92, 93, 95, 101, 118, 140, 155, 161, 181, 185, 188, 212, 298, 299, 300, 301, 303, 304, 305, 306, 336, 349, 354, 355, 356, 357, 359, 364, 365, 366, 367, 368, 369, 370, 372, 381, 382, 383, 384, 385, 386, 389, 390, 391, 392, 393, 394, 395, 398, 400, 401, 452, 459, 464, 467, 468, 477, 481, 494, 495], "affine_": [383, 386], "afni": [158, 161], "after": [23, 28, 32, 34, 40, 45, 50, 56, 65, 76, 93, 97, 99, 105, 115, 118, 132, 157, 161, 165, 166, 168, 173, 175, 176, 178, 181, 184, 187, 188, 198, 238, 266, 298, 299, 300, 301, 305, 336, 344, 345, 349, 354, 358, 361, 366, 377, 378, 385, 386, 462, 464, 465, 469, 470, 471, 494], "afterward": [2, 175, 184], "ag": [43, 46, 59, 77, 96, 109, 118, 120, 149, 161, 162, 169, 170, 174, 180, 181, 182, 183, 196, 198, 203, 212, 214, 223, 234, 242, 252, 263, 267, 274, 281, 287, 292, 298, 299, 300, 301, 303, 304, 380, 385, 434, 444, 452, 478, 494], "again": [15, 49, 70, 90, 101, 103, 122, 176, 180, 183, 277, 279], "against": [62, 168, 177, 181, 277, 351, 397, 444], "age_at_scan": 242, "age_design": 74, "age_group": 263, "age_pr": 42, "age_stat": 74, "age_test": [42, 43], "age_train": [42, 43], "ageeffectongm": 74, "ageeffectongm_contrast": 74, "ageeffectongm_design": 74, "ageeffectongm_report": 74, "ageeffectongm_stat": 74, "ageeffectongm_statmap": 74, "agenc": 0, "agencyenterpris": 0, "agent": 66, "agg": 452, "aggarw": [0, 133, 159, 161], "agglom": [49, 149, 161, 165, 459], "agglomer": [49, 120, 181, 182, 300, 301, 458, 459, 460, 466], "agglomerativeclust": [49, 459], "aggreg": [31, 39, 58, 152, 161, 170, 181, 197, 245, 300, 301], "aggres": 378, "aggress": [235, 378], "agre": [42, 74, 176, 194, 281, 349, 351], "agreement": [42, 62, 74, 194, 223, 227, 281], "ahern": [120, 212], "ahmad": [0, 129, 130, 131, 155, 156, 158, 161], "ai": 0, "aic": 326, "aid": [120, 207, 208, 209, 210, 211, 231, 257, 286], "aim": [29, 34, 136, 161, 168, 176, 181, 223, 303, 304], "aina": [0, 134, 161], "air": 0, "aka": [6, 65, 108, 165, 178, 331], "aki": [40, 41, 120, 146, 161, 219, 276], "akshai": [146, 161], "al": [3, 22, 23, 28, 31, 37, 44, 45, 48, 49, 51, 56, 58, 65, 69, 70, 71, 75, 97, 98, 99, 102, 114, 115, 118, 141, 146, 161, 162, 165, 168, 169, 170, 173, 174, 175, 183, 188, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 234, 235, 238, 242, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 266, 267, 272, 274, 275, 276, 277, 279, 281, 286, 287, 292, 298, 301, 304, 305, 306, 328, 329, 331, 354, 356, 361, 373, 377, 378, 380, 383, 386, 397, 425, 447, 452, 460, 461, 466, 473, 479, 494], "alan": [120, 198, 214, 246, 267, 292], "alberto": [120, 377, 378], "aldo": [75, 120, 331], "alecia": [58, 120, 205, 225, 260, 261], "alex": [0, 56, 120, 143, 146, 161, 163, 173, 214, 267, 378], "alexa": [120, 203, 263], "alexand": [58, 120, 193, 205, 225, 226, 242, 254, 260, 261], "alexandr": [0, 44, 49, 51, 98, 120, 124, 125, 127, 128, 131, 134, 136, 139, 146, 148, 149, 159, 161, 162, 166, 174, 220, 235, 252, 461], "alexi": [0, 23, 115, 120, 129, 130, 146, 149, 154, 156, 158, 161, 222, 287], "alff": 242, "algorithm": [48, 49, 88, 91, 93, 102, 104, 105, 122, 162, 165, 166, 167, 170, 171, 173, 181, 188, 189, 191, 198, 235, 238, 281, 305, 306, 360, 392, 394, 458, 461, 463, 474], "alia": [234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461, 492], "alias": [129, 161], "align": [51, 56, 90, 98, 132, 161, 370, 372, 439], "alik": [201, 224, 247], "alisha": [0, 131, 161], "all": [3, 4, 6, 8, 15, 19, 23, 27, 30, 32, 33, 35, 36, 39, 40, 41, 42, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 67, 68, 69, 70, 71, 75, 76, 78, 79, 86, 88, 90, 91, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 112, 115, 116, 118, 120, 122, 123, 129, 130, 131, 132, 134, 139, 146, 149, 152, 154, 156, 157, 161, 162, 163, 165, 166, 167, 169, 171, 173, 175, 176, 178, 180, 183, 184, 186, 187, 188, 193, 194, 196, 197, 198, 204, 206, 215, 221, 227, 233, 235, 236, 238, 242, 243, 245, 246, 247, 263, 271, 272, 275, 277, 280, 281, 282, 287, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 331, 336, 339, 345, 349, 350, 351, 354, 355, 360, 365, 366, 369, 370, 371, 374, 375, 376, 377, 378, 381, 382, 383, 385, 386, 387, 392, 394, 395, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 432, 434, 437, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 457, 459, 461, 464, 471, 473, 477, 479, 490, 492, 493, 494], "all_categori": 30, "all_coef_": [303, 304], "allel": [120, 194, 274], "allen": [21, 120, 141, 161, 190, 245], "allen2011": 21, "allevi": 93, "allow": [9, 20, 24, 40, 48, 51, 58, 63, 88, 98, 99, 100, 102, 111, 122, 130, 131, 132, 140, 142, 147, 149, 153, 154, 157, 158, 159, 161, 162, 168, 175, 176, 177, 179, 181, 184, 188, 194, 234, 235, 236, 264, 272, 283, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 339, 349, 351, 374, 377, 380, 381, 382, 383, 384, 385, 386, 387, 444, 458, 459, 460, 461], "allow_overlap": [52, 53, 54, 58, 382, 385, 387, 479], "almli": [120, 198, 214, 267, 292], "almost": [24, 39, 49, 104, 175, 188], "alon": [176, 178, 492], "along": [24, 25, 65, 83, 85, 99, 101, 115, 130, 149, 154, 161, 167, 174, 176, 181, 187, 188, 303, 304, 336, 344, 369, 371, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 412, 413, 414, 416, 418, 420, 422, 424, 427, 428, 432, 437, 440, 441, 445, 446, 447, 461, 462, 473, 477, 492], "alpha": [6, 15, 23, 24, 37, 39, 40, 44, 48, 57, 66, 74, 75, 76, 80, 106, 115, 158, 162, 167, 174, 178, 235, 236, 238, 303, 304, 306, 326, 328, 329, 331, 335, 336, 349, 352, 373, 376, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 439, 443, 445, 446, 448, 450, 451, 471, 492], "alpha_": [57, 236], "alpha_cmap": [50, 166], "alpha_grids_": [303, 304], "alpha_max": [303, 304], "alpha_min": [303, 304], "alphabet": [120, 149, 161, 184, 186], "alreadi": [21, 22, 33, 34, 49, 70, 88, 93, 100, 103, 107, 108, 113, 123, 149, 156, 161, 166, 168, 169, 176, 183, 188, 277, 279, 349, 351, 370, 397, 461], "also": [0, 4, 11, 14, 15, 16, 17, 22, 23, 29, 31, 34, 39, 40, 41, 42, 43, 50, 51, 55, 56, 62, 63, 65, 66, 68, 69, 71, 74, 76, 78, 85, 88, 90, 92, 93, 94, 97, 108, 113, 114, 115, 122, 123, 127, 129, 131, 132, 134, 139, 140, 142, 146, 149, 152, 155, 156, 158, 159, 161, 162, 163, 166, 167, 169, 170, 171, 173, 175, 176, 177, 178, 180, 181, 183, 184, 186, 187, 188, 189, 201, 202, 206, 212, 220, 221, 229, 236, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 298, 299, 300, 301, 303, 304, 336, 338, 339, 343, 349, 361, 365, 369, 374, 375, 377, 388, 389, 390, 391, 392, 393, 394, 432, 433, 437, 438, 440, 445, 446, 447, 448, 450, 451, 459, 462, 463, 467, 468, 471, 492, 495], "alter": [15, 153, 161], "altern": [6, 9, 16, 20, 22, 52, 54, 58, 65, 70, 111, 114, 164, 165, 173, 181, 188, 229, 326, 328, 329, 397, 495], "although": [33, 39, 49, 78, 169, 181, 184, 188], "alumit": [3, 31, 32, 38, 97, 120, 213, 266], "alwai": [16, 99, 168, 171, 175, 176, 178, 188, 304, 326, 328, 329, 333, 377, 454, 455, 457, 464, 492], "alzheim": 223, "am": [0, 120, 202, 248], "amadeu": [0, 47, 139, 161], "amag": 0, "amal": [120, 214, 267], "amanda": [120, 224, 253], "amax": 105, "ambi": 242, "ambidextr": 242, "america": 302, "american": [120, 212], "ami": 120, "among": [6, 78, 130, 161, 178, 181, 246, 298, 299, 300, 301], "amongst": [397, 492], "amount": [0, 24, 34, 36, 50, 65, 94, 169, 171, 176, 182, 183, 184, 277, 298, 299, 300, 301, 303, 304, 305, 306, 336, 349, 355, 366, 381, 382, 383, 384, 385, 386, 387, 459, 460, 461], "amplifi": 175, "amplitud": [63, 66, 242, 338, 343, 453, 455, 457], "amsterdam": 0, "amunt": [120, 215], "amygdala": [227, 262], "an": [0, 2, 3, 4, 11, 14, 15, 16, 20, 21, 22, 23, 25, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 54, 55, 56, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 74, 78, 79, 82, 83, 87, 88, 90, 91, 93, 95, 99, 100, 101, 102, 103, 105, 108, 112, 113, 114, 115, 118, 120, 122, 123, 129, 130, 131, 132, 133, 134, 137, 138, 139, 141, 142, 143, 144, 146, 149, 151, 152, 153, 154, 156, 158, 161, 162, 163, 164, 166, 169, 170, 171, 172, 173, 174, 175, 177, 179, 180, 181, 183, 184, 186, 187, 188, 193, 194, 195, 200, 201, 212, 214, 220, 223, 230, 234, 235, 236, 240, 244, 247, 248, 252, 258, 263, 272, 273, 275, 277, 279, 281, 282, 292, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 318, 322, 323, 325, 326, 327, 328, 329, 332, 336, 343, 345, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 363, 364, 365, 366, 368, 369, 370, 371, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 469, 471, 473, 474, 475, 477, 481, 494, 495], "ana": [0, 149, 153, 155, 161], "anaconda": [146, 161, 493], "anal": [49, 120, 460, 466], "analog": 93, "analu": [143, 146, 161], "analys": [6, 99, 101, 112, 120, 131, 161, 168, 173, 177, 178, 179, 180, 181, 182, 186, 188, 198, 205, 218, 275, 480, 493], "analysi": [1, 7, 15, 23, 28, 29, 33, 34, 45, 48, 49, 63, 65, 66, 69, 70, 71, 72, 76, 77, 78, 79, 81, 94, 97, 109, 110, 115, 117, 120, 121, 123, 162, 163, 167, 169, 172, 174, 179, 180, 181, 182, 183, 187, 188, 202, 204, 205, 206, 212, 218, 225, 228, 230, 242, 246, 249, 263, 264, 266, 269, 271, 272, 273, 275, 279, 282, 284, 286, 297, 298, 302, 305, 310, 316, 321, 322, 323, 324, 327, 328, 329, 332, 336, 339, 343, 345, 349, 352, 355, 359, 361, 364, 365, 366, 367, 373, 376, 377, 378, 379, 380, 386, 397, 410, 425, 432, 435, 436, 439, 440, 441, 442, 446, 447, 451, 452, 461, 469, 470, 471, 477, 478, 489, 493, 494, 495], "analyz": [3, 33, 49, 60, 73, 93, 118, 167, 176, 178, 181, 183, 185, 215, 397, 495], "anand": [0, 159, 161], "anat": [3, 4, 6, 15, 16, 17, 18, 25, 29, 30, 32, 42, 43, 93, 122, 168, 186, 188, 200, 213, 229, 230, 232, 258, 266, 270, 272, 284, 285, 374], "anat_combin": [377, 378], "anat_img": [143, 161, 432], "anat_separ": 377, "anatom": [3, 4, 6, 9, 11, 15, 17, 18, 22, 23, 25, 30, 32, 36, 93, 102, 111, 114, 115, 120, 123, 142, 161, 166, 173, 181, 188, 195, 198, 202, 204, 213, 214, 224, 227, 232, 242, 244, 246, 248, 256, 263, 266, 267, 270, 272, 377, 432, 440, 445, 447, 454, 492], "anatomi": [6, 42, 67, 74, 112, 200, 227, 258], "anatomical_imag": [353, 365], "anats_all_subject": 4, "anats_all_subjects_smooth": 4, "anchor": 83, "anchoredoffsetbox": [398, 400, 401], "ander": [22, 23, 114, 115, 120, 202, 207, 208, 209, 210, 211, 212, 248, 256, 286], "anderson": [102, 120, 193, 194, 242, 274, 397], "andr": [49, 120, 168, 183, 460, 466], "andrea": [48, 120, 162, 167, 234, 305], "andrew": [120, 163, 193, 197, 201, 214, 242, 245, 247, 267], "andr\u00e9": [0, 120, 149, 161, 170, 183, 202, 248, 300, 301], "angel": 0, "angela": [120, 197, 228, 245, 255], "angl": [22, 24, 83, 114, 130, 161, 181, 306, 448, 450, 451], "angular": 90, "ani": [4, 6, 49, 56, 58, 74, 80, 99, 103, 104, 110, 118, 122, 129, 150, 152, 158, 161, 163, 165, 168, 169, 172, 173, 175, 176, 177, 178, 181, 184, 188, 242, 266, 277, 279, 283, 356, 361, 365, 371, 374, 375, 376, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 442, 445, 461, 465, 470, 473, 477, 492, 493, 495], "anim": [120, 198, 214, 267], "anish": [120, 377], "anisotrop": 188, "anisotropi": 93, "ann": [0, 58, 120, 130, 161, 205, 225, 260, 261], "anna": [23, 115, 120, 222, 287], "annot": [93, 121, 131, 141, 152, 161, 202, 221, 226, 231, 254, 307, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 434, 437, 439, 440, 443, 445, 446, 447, 448, 449, 450, 451, 454, 457, 475, 492, 495], "annual": [120, 194, 198, 274], "annunzio": 0, "anoth": [6, 39, 65, 67, 78, 88, 112, 138, 143, 161, 168, 175, 176, 178, 183, 185, 186, 234, 303, 304, 355, 356, 375, 469, 492, 495], "anova": [3, 28, 35, 42, 45, 105, 106, 118, 141, 161, 172, 173, 174, 181, 188, 266, 298, 299, 300, 301, 303, 304, 361, 447, 452, 454, 494, 495], "anova_lda": 97, "anova_svc": 97, "answer": [3, 493], "ant": 51, "anterior": [69, 90, 103, 116, 120, 143, 161, 212, 260, 262, 368, 448, 450, 451], "antialias": 18, "anticorrel": [51, 120, 378], "antoinett": [70, 71, 120, 200, 206, 272], "anton": [70, 120, 206], "antonia": [120, 204, 249], "antonio": [120, 200, 272], "anwar": [23, 115, 120, 222, 287], "anylin": 0, "anymor": [129, 158, 161], "anyon": 493, "anyth": [123, 175, 176], "ap": 374, "apart": [85, 141, 161, 165, 166, 175], "api": [9, 44, 104, 111, 112, 113, 114, 115, 116, 127, 128, 129, 130, 131, 132, 133, 136, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 184, 234, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 393, 440, 458, 459, 460, 461, 495], "apo": [120, 194, 274], "app": [62, 120, 194, 274, 339], "appear": [35, 54, 88, 336, 349, 351, 435, 470], "append": [22, 33, 34, 40, 41, 44, 50, 51, 53, 69, 71, 99, 103, 107, 108, 113, 166], "appli": [3, 29, 31, 32, 42, 44, 50, 56, 61, 65, 67, 78, 79, 88, 91, 93, 97, 99, 100, 101, 103, 104, 112, 121, 123, 129, 131, 132, 133, 137, 139, 143, 146, 149, 154, 155, 156, 161, 162, 163, 164, 167, 169, 170, 171, 173, 177, 180, 181, 185, 194, 198, 201, 212, 227, 234, 242, 277, 297, 298, 299, 300, 301, 305, 306, 327, 336, 349, 351, 352, 353, 354, 365, 371, 373, 374, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 396, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 432, 442, 445, 446, 447, 448, 450, 451, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 470, 472, 473, 477, 479, 484, 495], "applic": [41, 120, 154, 161, 163, 169, 175, 182, 198, 336, 349, 383, 397, 464, 465, 471, 492, 493, 495], "apply_along_axi": [448, 450, 451], "apply_mask": [25, 187, 383, 386], "appreci": [176, 186], "approach": [34, 40, 41, 48, 49, 65, 67, 112, 120, 146, 161, 164, 167, 168, 169, 173, 175, 176, 177, 178, 182, 302, 354, 377, 378, 473, 477, 493, 495], "appropri": [22, 99, 114, 116, 120, 132, 133, 161, 176, 188, 198, 214, 244, 263, 267, 292, 336, 338, 343, 376, 440, 462], "approv": [176, 194], "approxim": [49, 69, 70, 120, 165, 198, 328, 329, 376, 460, 466], "apr": [120, 224, 253], "april": [120, 130, 133, 138, 141, 147, 148, 157, 161, 194, 212], "ar": [0, 2, 3, 4, 6, 9, 10, 14, 19, 20, 21, 23, 24, 26, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 76, 77, 78, 79, 80, 83, 85, 86, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 122, 123, 127, 129, 130, 131, 132, 133, 139, 141, 142, 144, 146, 147, 149, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 183, 184, 186, 187, 188, 194, 195, 196, 198, 200, 201, 203, 204, 214, 215, 217, 221, 226, 230, 231, 232, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 318, 323, 326, 327, 328, 329, 332, 333, 336, 338, 339, 343, 345, 349, 351, 353, 354, 358, 360, 366, 368, 369, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 467, 468, 469, 470, 471, 473, 475, 476, 477, 479, 487, 492, 493], "ar1": [6, 33, 65, 336, 339, 345, 478], "ar3": [65, 345], "arami": 0, "arang": [12, 22, 30, 32, 33, 34, 48, 51, 63, 65, 67, 69, 93, 108, 114], "arbitrari": [6, 64, 75, 114, 178, 184, 302, 349, 351], "arbitrarili": [6, 229, 304], "archi": 71, "architectur": [120, 165, 228, 255], "archiv": 281, "arctanh": 55, "area": [0, 23, 32, 70, 79, 93, 115, 120, 154, 161, 166, 168, 173, 177, 178, 181, 182, 183, 188, 206, 207, 208, 209, 210, 211, 212, 219, 257, 267, 286, 307, 358, 398, 400, 401, 410, 413, 448, 449, 450, 451, 457], "area_left": [207, 208, 209, 210, 211, 286], "area_right": [207, 208, 209, 210, 211, 286], "aren": [132, 161, 186], "arg": [11, 15, 116, 298, 299, 300, 301, 314, 380], "argmax": 11, "argsort": [35, 42, 43, 103], "arguabl": 65, "argument": [2, 6, 9, 14, 15, 17, 55, 58, 66, 68, 79, 88, 93, 111, 123, 130, 131, 132, 138, 139, 141, 142, 143, 144, 146, 147, 149, 152, 153, 154, 155, 156, 158, 159, 161, 168, 169, 171, 173, 175, 176, 177, 180, 184, 186, 238, 242, 250, 251, 277, 288, 298, 299, 300, 301, 302, 339, 349, 351, 354, 365, 368, 376, 378, 381, 382, 383, 384, 385, 386, 387, 393, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 437, 438, 439, 440, 442, 444, 445, 446, 447, 449, 450, 451, 455, 458, 460, 473, 492], "ariel": [0, 134, 146, 161], "aris": [93, 120, 178, 198, 377, 378], "arithmet": [120, 183], "arm": [153, 161], "armi": 188, "armodel": 327, "aroma": [120, 163, 377, 378], "around": [14, 24, 34, 83, 85, 116, 145, 147, 161, 175, 176, 236, 315, 351, 358, 369, 387, 398, 400, 401, 477], "arr": 371, "arrai": [3, 5, 9, 10, 11, 20, 22, 23, 26, 33, 34, 36, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 55, 56, 58, 61, 66, 68, 70, 78, 83, 85, 86, 88, 93, 97, 102, 105, 106, 108, 111, 113, 114, 115, 121, 133, 141, 143, 149, 152, 155, 156, 158, 161, 162, 165, 166, 168, 171, 175, 185, 186, 188, 193, 234, 235, 236, 238, 240, 241, 248, 249, 254, 260, 261, 262, 274, 275, 287, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 323, 324, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 354, 359, 361, 369, 370, 373, 376, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 394, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 432, 434, 437, 439, 443, 447, 448, 449, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 471, 473, 474, 475, 476, 477, 485, 495], "arrang": [120, 147, 161, 408, 410, 413, 427, 432, 437, 440, 445, 446, 447, 492], "array_lik": [336, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 443], "arriv": 167, "art": [152, 161, 169, 298, 299, 300, 301], "arteri": 6, "arthur": [0, 48, 120, 128, 134, 136, 139, 161, 167, 204, 249, 306], "articl": [22, 23, 37, 40, 41, 49, 51, 56, 69, 70, 98, 102, 114, 115, 120, 162, 163, 165, 170, 173, 174, 175, 183, 193, 194, 195, 197, 198, 200, 202, 206, 214, 218, 219, 220, 221, 222, 223, 226, 227, 228, 242, 244, 245, 246, 248, 252, 254, 255, 256, 262, 267, 272, 274, 275, 276, 277, 279, 281, 287, 292, 300, 301, 377, 378, 397, 433, 474], "articlerend": [120, 198, 377, 378], "articul": 168, "artid": [120, 198, 377, 378], "artifact": [56, 120, 188, 354, 377, 378, 473], "artifici": [120, 198], "arvind": [120, 197, 245], "arxiv": [3, 31, 32, 38, 58, 69, 97, 102, 120, 162, 168, 173, 175, 194, 201, 202, 205, 207, 208, 209, 210, 211, 213, 223, 226, 227, 228, 231, 232, 235, 238, 247, 248, 254, 255, 257, 258, 260, 262, 266, 274, 281, 286, 354, 397, 473], "asarrai": [24, 41, 51, 103, 325, 330], "ascend": [154, 161, 364], "ascertain": 177, "asd": 193, "ashbi": [99, 120, 168], "ask": [64, 123, 146, 149, 161, 176, 184, 221], "aspect": [12, 40, 145, 161, 171, 175, 188, 336, 349, 377, 471], "asperg": 242, "assembl": [79, 121, 178], "assert": 30, "assess": [68, 77, 120, 168, 175, 176, 177, 196, 242, 302, 397, 433], "assign": [15, 85, 93, 165, 166, 178, 205, 215, 250, 251, 260, 262, 461, 462, 466], "assist": [120, 162, 234], "associ": [6, 14, 47, 71, 74, 76, 105, 129, 161, 168, 173, 176, 178, 180, 181, 244, 282, 302, 324, 351, 377, 378, 397, 470, 477], "assum": [63, 65, 69, 70, 71, 77, 78, 173, 178, 184, 241, 282, 283, 326, 327, 328, 329, 333, 336, 349, 351, 354, 369, 372, 396, 444, 472, 473], "assumpt": [78, 173, 178, 220], "assur": 62, "astyp": [36, 40, 41, 43, 44, 66, 74, 83, 93], "aswin": [0, 131, 161], "asym": [198, 246], "asymmetr": [198, 246, 267, 268], "asymmetri": [120, 198], "atla": [8, 11, 27, 46, 48, 50, 59, 82, 90, 93, 95, 110, 117, 118, 120, 123, 128, 130, 131, 132, 137, 138, 140, 141, 142, 143, 146, 149, 152, 153, 154, 155, 157, 158, 161, 164, 166, 175, 181, 187, 188, 190, 234, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 263, 267, 286, 309, 311, 316, 317, 319, 321, 322, 361, 373, 380, 381, 382, 384, 385, 410, 429, 430, 431, 433, 434, 444, 445, 446, 447, 450, 452, 453, 454, 455, 457, 461, 462, 463, 464, 465, 469, 476, 479, 488, 492, 494, 495], "atlas": [9, 10, 22, 46, 58, 59, 111, 114, 118, 120, 123, 132, 133, 153, 154, 161, 164, 167, 178, 181, 186, 187, 188, 198, 201, 204, 212, 214, 215, 221, 234, 249, 250, 251, 258, 263, 267, 292, 380, 381, 382, 384, 385, 429, 430, 434, 440, 445, 446, 449, 450, 452, 453, 454, 456, 479, 494, 495], "atlas_data": [11, 20], "atlas_filenam": [20, 52, 54, 56, 163], "atlas_ho_filenam": 10, "atlas_img": [11, 53], "atlas_ju_filenam": 10, "atlas_nam": [250, 251], "atlas_network": 86, "atlas_region_coord": [53, 163], "atlas_typ": 21, "atlas_valu": 11, "atlas_yeo": 85, "atlas_yeo_2011": 85, "atleast_2d": 116, "atom": [176, 181], "atr": 219, "att": 51, "attempt": [149, 161, 339], "attent": [77, 343], "attila": [120, 214, 267], "attribut": [44, 48, 49, 50, 83, 88, 122, 123, 131, 132, 144, 153, 154, 156, 157, 158, 161, 162, 165, 166, 167, 173, 186, 188, 198, 201, 224, 234, 235, 236, 243, 247, 249, 252, 263, 265, 266, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 284, 285, 286, 287, 298, 299, 300, 301, 303, 304, 305, 306, 307, 317, 326, 327, 328, 329, 336, 356, 364, 377, 378, 381, 382, 383, 384, 385, 386, 387, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 448, 450, 451, 458, 459, 460, 461, 476, 477], "attributeerror": [145, 161], "aualiti": 76, "auc": [30, 32, 168, 181], "aud": 51, "audio": [64, 65, 67, 112], "audio_comput": [64, 65, 67, 112, 217], "audio_left_hand_button_press": [64, 65, 67, 112, 217], "audio_right_hand_button_press": [64, 65, 67, 112, 217], "auditori": [6, 65, 67, 71, 76, 103, 105, 112, 178, 190, 200, 262, 271, 272, 278, 284], "auditory_calculation_vs_baselin": 278, "audrei": [0, 129, 161], "august": [120, 139, 146, 158, 161], "aureli": [70, 120, 206], "austin": 0, "australia": 0, "australian": [102, 120, 397], "austria": 0, "author": [0, 47, 55, 120, 175, 176, 184], "autism": [120, 193, 242], "auto": [12, 139, 154, 161, 188, 305, 306, 364, 381, 382, 383, 384, 385, 386, 387, 399, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 428, 432, 434, 437, 439, 440, 442, 443, 445, 446, 447, 448, 450, 451, 453, 454, 456, 477], "auto_exampl": [7, 27, 45, 59, 72, 81, 95, 109, 117, 119, 154, 161, 176, 182, 455], "auto_examples_jupyt": 118, "auto_examples_python": 118, "auto_fit": 444, "auto_resampl": [69, 355], "autocorrel": [3, 67, 108], "autoformatt": 176, "autogener": [336, 349, 471], "autom": [120, 123, 184, 195, 198, 212, 221, 231, 244, 257, 277, 279], "automat": [3, 15, 16, 19, 22, 23, 33, 34, 40, 54, 88, 91, 93, 101, 114, 115, 120, 121, 127, 130, 139, 141, 153, 154, 155, 161, 166, 173, 176, 184, 186, 187, 188, 202, 242, 248, 256, 298, 299, 300, 301, 303, 304, 305, 306, 336, 349, 351, 369, 376, 382, 385, 397, 408, 428, 432, 437, 440, 445, 446, 447, 454, 459, 461, 463, 471, 479, 492, 495], "autoregress": [65, 336, 345], "aux_fil": [56, 90, 101], "avail": [0, 3, 15, 23, 24, 31, 39, 42, 62, 74, 79, 88, 93, 100, 106, 108, 113, 115, 123, 130, 149, 154, 161, 163, 166, 169, 171, 175, 177, 180, 183, 184, 194, 198, 204, 215, 218, 223, 226, 229, 232, 242, 246, 249, 255, 263, 272, 274, 276, 281, 303, 304, 339, 444, 449, 477, 493, 495], "avenir": 0, "averag": [6, 9, 24, 30, 37, 49, 51, 68, 93, 111, 120, 152, 155, 161, 165, 169, 170, 180, 181, 198, 207, 208, 209, 210, 211, 214, 218, 242, 267, 275, 286, 292, 298, 299, 317, 366, 371, 377, 444, 448, 450, 451, 459, 477], "avg_method": [116, 131, 133, 154, 161, 448, 450, 451], "aviv": 0, "avoi": 195, "avoid": [9, 52, 53, 54, 58, 69, 111, 144, 149, 158, 161, 173, 175, 176, 178, 186, 298, 299, 300, 301, 324, 349, 351, 358, 363, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 472, 492], "avram": [120, 226, 254], "awai": [68, 175, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "awar": [97, 236, 472], "awesom": [146, 161], "ax": [6, 9, 11, 18, 21, 22, 23, 24, 31, 38, 40, 49, 51, 57, 61, 63, 64, 65, 68, 74, 77, 78, 79, 83, 90, 99, 100, 105, 108, 111, 114, 115, 116, 143, 153, 154, 161, 368, 369, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451], "ax1": [43, 63, 74, 77, 441], "ax2": [43, 63, 441], "ax3": 63, "ax_im": 40, "ax_pair": 79, "ax_row": 116, "ax_unpair": 79, "axelson": [120, 183], "axesimag": [52, 54, 56], "axhlin": [34, 408, 410, 413, 415, 417, 419, 421, 423, 425], "axi": [3, 11, 12, 16, 22, 23, 25, 30, 31, 34, 38, 40, 41, 44, 47, 50, 58, 83, 84, 93, 101, 103, 104, 107, 114, 115, 116, 131, 156, 158, 161, 166, 187, 198, 246, 298, 299, 300, 301, 303, 304, 336, 344, 369, 371, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 428, 432, 434, 435, 437, 439, 440, 443, 445, 446, 447], "axial": [6, 14, 93, 336, 349, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 434, 437, 439, 440, 443, 445, 446, 447, 471], "axs1": 68, "axs2": 68, "axvlin": 51, "ayesha": [23, 115, 120, 222, 287], "az_scores_right": 108, "azim": [22, 114, 448, 450, 451], "b": [9, 14, 15, 23, 30, 40, 41, 56, 90, 101, 111, 115, 120, 123, 176, 184, 194, 195, 202, 204, 207, 208, 209, 210, 211, 226, 228, 232, 244, 248, 254, 255, 258, 264, 274, 282, 286, 327, 377, 378, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 492], "b6297e3e4eedbdbfb999e3188d364506": 4, "ba": 257, "baar": [120, 214, 267], "back": [36, 41, 42, 48, 55, 97, 99, 102, 104, 122, 134, 142, 143, 161, 165, 173, 176, 188, 305, 306, 317, 318, 380, 383, 386, 396, 428, 458, 459, 460], "backend": [36, 42, 43, 44, 48, 102, 105, 130, 136, 146, 151, 156, 161, 306, 452], "background": [3, 6, 8, 14, 15, 16, 22, 23, 27, 30, 31, 40, 44, 49, 56, 67, 90, 91, 93, 104, 112, 114, 115, 116, 118, 122, 130, 133, 137, 139, 141, 142, 143, 144, 146, 149, 152, 158, 161, 176, 181, 187, 188, 198, 232, 244, 250, 251, 253, 254, 257, 258, 270, 276, 298, 299, 300, 301, 305, 306, 307, 309, 310, 336, 349, 381, 383, 384, 386, 389, 392, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 432, 434, 437, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 459, 462, 464, 465, 471, 479, 492, 494, 495], "background_img": [31, 43], "background_label": [49, 56, 90, 188, 381, 384, 429, 464, 467, 479], "backslash": [120, 132, 161, 175], "backward": [143, 156, 161, 176, 233, 250, 251, 469], "bad": [56, 105, 175, 176], "badg": [176, 184], "bag": [172, 303, 304, 495], "balanc": [3, 49, 156, 161, 165], "baldassarr": [120, 174, 198], "ball": [24, 128, 161, 173, 175, 181, 302, 477], "ball_radiu": 24, "ball_sample_point": 24, "baltimor": 0, "band": [51, 58, 158, 161, 242, 377, 472, 473], "band_pass_filt": 242, "bandettini": [120, 173, 183, 302], "bandpass": 55, "bandwidth": 255, "bangaru": [23, 115, 120, 222, 287], "baptist": [48, 49, 71, 120, 162, 165, 167, 200, 221, 235, 272, 277, 279, 305], "bar": [15, 42, 102, 105, 132, 133, 146, 161, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 495], "baratz": [0, 151, 161], "barbara": [23, 115, 120, 222, 287], "barcelonabeta": 0, "barch": [58, 120, 194, 204, 205, 260, 274], "barh": [30, 48, 51, 98], "barn": [58, 120, 198, 205, 225, 260, 261, 377, 378], "baronnet": [120, 162, 234], "bart": 62, "basal": [51, 227], "basalganglia": 262, "basc": [137, 161, 190, 246], "base": [2, 8, 20, 27, 28, 29, 34, 44, 45, 47, 48, 49, 51, 54, 55, 60, 61, 65, 69, 72, 73, 80, 81, 87, 88, 90, 91, 96, 97, 98, 105, 109, 110, 117, 118, 120, 123, 129, 131, 132, 137, 141, 149, 152, 154, 157, 161, 162, 163, 164, 165, 167, 168, 171, 173, 174, 175, 176, 178, 179, 181, 182, 183, 184, 188, 190, 196, 198, 200, 202, 203, 204, 212, 219, 220, 221, 235, 238, 242, 243, 248, 254, 256, 263, 265, 266, 267, 268, 269, 272, 273, 274, 277, 279, 281, 284, 285, 286, 287, 298, 299, 300, 301, 302, 304, 305, 306, 309, 310, 316, 319, 320, 321, 322, 324, 332, 336, 339, 343, 345, 349, 351, 352, 353, 354, 355, 359, 361, 365, 370, 373, 376, 377, 378, 380, 386, 387, 391, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 436, 445, 446, 447, 450, 451, 452, 454, 458, 459, 461, 462, 463, 469, 471, 473, 474, 475, 476, 477, 478, 479, 492, 493, 494, 495], "base_mask": [49, 52, 53, 54, 56, 58], "base_url": 254, "baselin": [6, 30, 32, 120, 152, 153, 161, 169, 171, 197, 245, 324, 344], "basemask": [154, 161], "baseslic": 427, "basi": [65, 67, 108, 112, 177, 198, 336, 338, 343, 377], "basic": [3, 7, 8, 11, 15, 16, 18, 25, 27, 29, 30, 32, 34, 35, 36, 41, 42, 48, 49, 52, 53, 56, 58, 67, 69, 74, 76, 88, 90, 91, 93, 94, 97, 99, 102, 104, 105, 106, 112, 175, 177, 178, 181, 183, 184, 188, 250, 251, 266, 288, 339, 349, 351, 371, 377, 378, 435, 440, 446, 452, 494], "basic_collection_term": 277, "basic_contrast": [67, 69, 112, 177], "basic_image_term": 277, "bassett": [56, 120, 377, 378], "bastien": [71, 120, 200, 272], "bat": 493, "batch": [306, 458], "batch_siz": [48, 306, 458], "baum": [56, 120, 377, 378], "bayesian": [44, 178], "bayesian_ridg": 44, "bayesianridg": 44, "bazeil": [0, 149, 152, 155, 156, 161], "bazemont": 0, "bbox_to_anchor": 30, "bdg": [176, 184], "beaten": 121, "beauti": 43, "becaus": [3, 6, 11, 15, 18, 30, 31, 32, 36, 39, 42, 43, 44, 54, 65, 68, 69, 78, 83, 100, 101, 102, 129, 149, 161, 163, 168, 173, 175, 176, 178, 184, 277, 303, 304, 442, 448, 450, 451, 455, 457, 477], "beckmann": [120, 162, 194, 228, 255, 274, 377, 378], "becom": [3, 65, 123, 132, 161, 169, 170, 171, 178], "bedetti": [143, 146, 161], "been": [0, 6, 10, 11, 32, 36, 39, 42, 47, 49, 52, 54, 55, 61, 65, 69, 71, 74, 78, 80, 84, 85, 88, 90, 92, 93, 104, 108, 113, 129, 130, 132, 134, 136, 139, 140, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 161, 167, 174, 175, 176, 177, 180, 181, 184, 188, 198, 201, 216, 229, 230, 233, 235, 246, 277, 281, 336, 349, 351, 360, 389, 390, 391, 393, 394, 397, 465, 474, 477], "befor": [2, 15, 49, 55, 56, 70, 88, 93, 97, 103, 122, 129, 131, 133, 146, 149, 152, 154, 156, 158, 161, 165, 166, 168, 169, 171, 176, 177, 178, 180, 183, 184, 186, 187, 188, 194, 238, 277, 279, 305, 306, 336, 338, 343, 354, 358, 360, 377, 378, 381, 382, 384, 385, 387, 433, 448, 450, 451, 455, 457, 459, 464, 465, 473, 474, 492], "beforehand": 184, "begin": [40, 62, 65, 69, 152, 161, 176, 181, 194, 472], "beginn": [176, 183], "beh": 62, "behav": [102, 336, 338, 343], "behavior": [31, 34, 35, 74, 76, 83, 97, 120, 122, 130, 131, 132, 136, 143, 153, 158, 161, 168, 169, 171, 172, 176, 181, 185, 188, 193, 194, 223, 228, 234, 246, 247, 255, 274, 380, 381, 382, 383, 384, 385, 386, 387, 433, 461, 495], "behavioral_target": 39, "behaviour": [44, 120, 134, 146, 153, 158, 161, 174, 188, 194, 274], "behind": 64, "behren": [120, 194, 274], "behzadi": [120, 360, 377, 378, 474], "beij": 0, "being": [15, 88, 93, 129, 130, 131, 146, 149, 156, 161, 162, 175, 176, 178, 181, 242, 305, 343, 376, 382, 385, 387, 392, 394, 433, 448, 450, 451, 455, 457, 461], "bellec": [0, 120, 146, 147, 161, 198, 246], "belong": [3, 30, 32, 156, 161, 168, 181, 188, 195], "below": [6, 9, 16, 20, 22, 39, 44, 49, 52, 54, 58, 64, 68, 93, 111, 114, 120, 141, 161, 165, 168, 169, 173, 175, 176, 177, 178, 180, 184, 187, 188, 193, 194, 235, 236, 238, 242, 263, 298, 299, 300, 301, 303, 304, 306, 374, 381, 382, 383, 384, 385, 386, 387, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 439, 440, 442, 446, 447, 448, 451, 454, 459, 461, 472, 473, 492], "ben": [0, 56, 120, 124, 125, 127, 134, 136, 161, 378], "benali": [120, 198, 246], "benchmark": [51, 56, 98, 120, 174, 377, 378], "benedetto": 0, "benedict": [23, 115, 120, 222, 287], "benedikt": 181, "benefit": [42, 49, 56, 65, 149, 161, 176, 187], "benjamin": [99, 120, 168, 227, 262], "benjamini": [156, 161, 178, 335], "bennett": [23, 115, 120, 222, 287], "bent": [120, 212], "berg": [120, 194, 274], "berlin": [0, 120, 162, 214, 220, 234, 252, 267], "bertrand": [0, 44, 48, 49, 51, 71, 98, 120, 124, 127, 131, 134, 139, 143, 146, 147, 149, 156, 157, 161, 162, 165, 166, 167, 168, 170, 174, 183, 200, 204, 220, 234, 235, 249, 252, 272, 300, 301, 305, 306, 460, 461, 466], "besid": 183, "besnard": [0, 154, 161], "best": [3, 34, 42, 43, 44, 94, 152, 158, 161, 168, 169, 170, 173, 175, 176, 178, 187, 298, 299, 300, 301, 303, 304, 376, 410, 413, 458, 459], "best_alpha": [298, 299, 300, 301], "best_c": [34, 298, 299, 300, 301], "best_dual": 34, "best_model_params_": [303, 304], "best_penalti": 34, "beta": [6, 26, 39, 42, 65, 69, 96, 109, 118, 120, 132, 157, 177, 181, 194, 269, 274, 298, 299, 300, 301, 323, 326, 327, 328, 329, 336, 339, 355, 380, 386, 387, 410, 436, 447, 494], "beta_map": 99, "betamap": 275, "better": [2, 3, 30, 33, 42, 43, 49, 65, 93, 99, 103, 120, 128, 130, 131, 137, 140, 146, 154, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 175, 177, 187, 235, 445, 461, 477, 495], "between": [2, 6, 9, 22, 23, 24, 30, 40, 42, 49, 50, 51, 55, 62, 65, 67, 69, 71, 74, 76, 78, 79, 85, 88, 91, 98, 99, 102, 105, 111, 112, 114, 115, 134, 141, 146, 149, 152, 155, 161, 162, 163, 164, 166, 168, 169, 173, 175, 176, 177, 178, 180, 181, 182, 183, 184, 194, 198, 213, 229, 242, 254, 274, 292, 300, 301, 306, 336, 339, 349, 354, 391, 397, 398, 400, 401, 428, 432, 434, 439, 441, 443, 445, 446, 447, 448, 450, 451, 454, 455, 457, 459, 470, 471, 473, 477, 479], "bewar": [184, 186], "beyond": [70, 157, 161], "bg_color": [398, 400, 401], "bg_filenam": 42, "bg_img": [3, 6, 16, 17, 29, 30, 33, 36, 40, 42, 68, 69, 70, 74, 87, 92, 122, 143, 149, 155, 161, 168, 188, 336, 349, 376, 440, 445, 446, 447, 454, 471], "bg_map": [9, 22, 23, 37, 67, 108, 111, 112, 113, 114, 115, 116, 307, 309, 310, 311, 442, 448, 450, 451, 455, 457, 492], "bg_map_resc": [23, 115], "bg_on_data": [9, 22, 23, 111, 114, 115, 116, 442, 448, 450, 451, 455, 457], "bgcolor": [399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "bharat": [23, 115, 120, 222, 287], "bhg087": [120, 202, 248], "bhn256": 120, "bhp157": [120, 194, 274], "bhx179": [120, 226, 254], "bi": [6, 229], "bia": [169, 298, 299, 300, 301, 303, 304], "biap8": [149, 161], "bias": 65, "bib": 120, "bibtex": [130, 158, 161], "bic": [120, 198, 214, 267, 326], "bid": [6, 60, 71, 72, 74, 96, 99, 109, 118, 129, 131, 133, 149, 152, 154, 156, 158, 161, 177, 181, 190, 259, 264, 269, 282, 283, 296, 297, 336, 339, 349, 377, 378, 379, 386, 435, 439, 441, 452, 469, 470, 471, 489, 494], "bielefeld": 0, "big": [3, 41, 49, 146, 161, 165, 168, 176, 186, 188, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477], "big_fsaverag": 9, "big_fsaverage_mesh": 111, "big_fsaverage_sulc": 111, "big_img": 111, "big_textur": 9, "bigger": [31, 39, 43], "bigler": [120, 193, 242], "bihan": [71, 120, 200, 272], "bilder": [120, 264, 282], "bilkent": 0, "bin": [33, 49, 176, 336, 345, 493], "bin_p_valu": 93, "bin_p_values_and_vt": 93, "bin_p_values_and_vt_img": 93, "binar": [41, 93, 155, 161, 242, 353], "binari": [40, 41, 65, 74, 129, 158, 161, 181, 184, 188, 268, 298, 299, 300, 301, 303, 304, 446, 470, 473], "binarize_img": [132, 155, 161], "binary_clos": [268, 290, 293], "binary_dil": [93, 187, 389, 390, 391, 393, 394], "binary_eros": [389, 390, 391, 393, 394], "binaur": [6, 229], "binder": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 151, 161], "bingen": [120, 174], "binh": [0, 149, 152, 154, 161], "binyam": [58, 120, 205, 260], "bio": [120, 162, 235], "biolog": [120, 212], "biologi": 495, "biomed": [48, 120, 167, 223, 305, 306], "biorxiv": [120, 354, 473], "biostatist": [0, 120, 162], "bipolar": [120, 212], "birmah": [120, 183], "birn": 223, "birth": [120, 214, 267, 292], "biswal": [23, 115, 120, 222, 287], "bit": [10, 11, 36, 41, 49, 64, 65, 74, 78, 85, 93, 102, 134, 147, 158, 161, 162, 174, 186, 187, 268], "bitpix": [56, 90, 101], "black": [14, 40, 104, 130, 131, 161, 176, 184, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 434, 437, 439, 440, 443, 445, 446, 447, 454, 455, 457], "black_bg": [6, 13, 14, 36, 69, 155, 161, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 434, 437, 439, 440, 443, 445, 446, 447, 454, 455, 457], "black_blu": 20, "black_green": 20, "black_pink": 20, "black_r": 116, "blacker": [120, 212], "blob": [86, 93, 167, 187, 254], "blobbi": 174, "block": [6, 33, 51, 56, 58, 63, 99, 100, 121, 131, 161, 168, 175, 187, 198, 206, 229, 444, 481], "blood": [65, 178, 181], "bloomberg": 0, "bludau": 120, "blue": [15, 18, 40, 49, 68, 85, 133, 161], "blur": 198, "bm10": [228, 255], "bm20": [228, 255], "bm70": [228, 255], "bmc": [65, 71, 120, 200, 272], "board": 176, "bodi": [63, 198, 469], "bogdan": [0, 129, 161], "boil": 175, "bold": [3, 6, 16, 18, 25, 29, 30, 32, 34, 35, 36, 48, 63, 64, 65, 75, 78, 93, 99, 100, 102, 108, 112, 113, 120, 122, 123, 131, 132, 149, 153, 161, 167, 168, 177, 179, 181, 186, 204, 213, 219, 229, 249, 266, 276, 339, 374, 377, 378, 474, 495], "bonferroni": [6, 80, 102, 105, 106, 173, 178, 181, 336, 349, 352, 471, 478], "boo": [0, 143, 146, 149, 161], "book": [147, 161], "bool": [44, 93, 103, 234, 235, 236, 238, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 258, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 281, 287, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 331, 333, 336, 349, 351, 352, 353, 354, 358, 360, 364, 366, 367, 368, 369, 370, 373, 374, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 432, 433, 434, 435, 436, 437, 439, 440, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 470, 471, 472, 473, 474], "boolean": [93, 123, 153, 158, 161, 240, 266, 272, 281, 302, 305, 306, 336, 355, 367, 380, 387, 389, 390, 391, 393, 394, 432, 437, 439, 441, 446, 449, 454, 467, 468, 473], "bootstrap": [120, 246], "border": [79, 358, 389, 392, 398, 400, 401], "border_s": [389, 392], "borderpad": [398, 400, 401], "bori": [120, 183], "boston": 0, "both": [3, 4, 9, 15, 24, 39, 47, 49, 51, 58, 63, 67, 78, 79, 84, 88, 93, 99, 105, 108, 111, 112, 113, 116, 123, 131, 132, 149, 156, 161, 162, 165, 167, 173, 174, 176, 177, 181, 186, 187, 188, 193, 194, 215, 224, 234, 241, 253, 263, 316, 317, 318, 321, 336, 338, 343, 351, 352, 354, 373, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 439, 442, 444, 447, 451, 463, 473, 477, 493], "botteron": [120, 198, 214, 267, 292], "bottl": [30, 32, 33, 34, 186], "bottleneck": 175, "bottom": [12, 15, 25, 40, 66, 187, 444], "bottomrul": 62, "bougacha": [0, 124, 127, 134, 136, 143, 146, 147, 161], "bound": [14, 83, 88, 142, 149, 161, 187, 305, 369, 398, 400, 401, 432, 433, 437, 439, 440, 442, 443, 445, 446, 447, 448, 451, 455, 457], "boundari": [163, 173, 187, 445, 446, 448, 450, 451], "bounding_box": [398, 400, 401], "boundingboxerror": 369, "box": [43, 83, 97, 104, 142, 161, 169, 176, 187, 227, 369], "boxplot": [35, 93], "boyd": 120, "brad": [120, 174], "bradford": [120, 212], "bradlei": [58, 120, 194, 198, 205, 212, 225, 227, 260, 261, 262, 274, 377, 378], "brain": [0, 2, 3, 4, 6, 9, 12, 15, 20, 21, 22, 23, 27, 31, 32, 36, 37, 39, 41, 43, 44, 46, 52, 54, 55, 59, 65, 67, 68, 70, 75, 77, 78, 79, 84, 88, 91, 93, 95, 97, 99, 104, 107, 111, 112, 114, 115, 120, 122, 123, 130, 134, 137, 139, 140, 141, 143, 144, 146, 147, 149, 152, 154, 155, 161, 162, 164, 168, 169, 170, 171, 173, 174, 176, 177, 178, 181, 182, 183, 186, 188, 193, 194, 195, 198, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 223, 224, 225, 227, 228, 229, 231, 234, 235, 242, 244, 246, 247, 249, 250, 252, 253, 255, 257, 260, 261, 262, 263, 266, 267, 268, 274, 276, 277, 279, 280, 281, 286, 289, 292, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 331, 354, 356, 359, 361, 366, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 397, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 434, 437, 439, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 462, 463, 464, 469, 473, 479, 485, 493, 494, 495], "brain_color": [399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "brain_mask": [55, 99], "brain_parcel": [226, 254], "brain_parcellation_cambridge_basc_multiscale_": 198, "brain_time_seri": 55, "brainhack": [137, 142, 161], "brainlin": 276, "brainmap": [2, 21, 228, 255], "brainmask": 353, "brainom": [120, 146, 161, 190, 272], "brainomics_data": [76, 105], "brainomics_loc": [76, 105], "brainpedia": 123, "brainpedia_subset": 123, "brainsprit": [146, 147, 161, 492], "brammer": [120, 183], "branch": [158, 161, 176, 184], "brandon": [120, 193, 242], "braver": [120, 173], "break": [2, 82, 95, 118, 141, 161, 165, 173, 176, 233, 258, 446, 452, 462, 494], "breakag": 324, "breath": [64, 65], "breez": [120, 212], "brian": [23, 115, 120, 174, 212, 222, 287, 354, 473], "bridg": 97, "brief": [93, 176, 178], "briefli": 173, "brien": [120, 212], "brigham": 0, "bright": 88, "brighter": 122, "bring": [40, 48, 170, 176, 183, 396], "brisban": 0, "brito": [0, 131, 161], "broader": [180, 193], "brodmann": 257, "brok": [127, 161], "broke": [148, 161], "broken": [85, 139, 147, 161, 173], "brought": 188, "brown": [23, 115, 120, 222, 287], "brows": [58, 123, 156, 161, 221, 479], "browser": [2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 115, 116, 146, 149, 151, 161, 188, 336, 349, 411, 453, 454, 455, 456, 457, 469, 471, 492], "bruce": [22, 23, 114, 115, 120, 202, 207, 208, 209, 210, 211, 212, 226, 232, 248, 254, 256, 258, 286], "bruno": [120, 198], "brute": 175, "bryan": [120, 197, 245], "bsd": 0, "buck": [0, 130, 161], "bucket": 62, "buckner": [120, 198, 212, 223, 226, 232, 254, 258, 281], "bug": [33, 127, 130, 131, 139, 140, 141, 145, 158, 183, 184, 448, 450, 451, 478, 479], "bugfix": [126, 127, 135, 136, 139, 157, 161, 176], "build": [11, 18, 21, 41, 46, 49, 50, 51, 58, 69, 99, 118, 121, 129, 130, 131, 132, 141, 161, 164, 169, 171, 173, 178, 186, 188, 336, 459, 495], "built": [15, 33, 42, 48, 130, 133, 161, 178, 184, 298, 299, 300, 301, 459, 478, 479], "builtin": [129, 161], "buitelaar": [120, 377, 378], "bullmor": [120, 163], "bump": [129, 132, 146, 149, 154, 155, 156, 161, 169, 171, 184], "bunch": [80, 122, 132, 141, 161, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 284, 285, 286, 287], "burden": 176, "burn": 176, "busa": [120, 202, 248], "bush": [99, 120], "busi": [120, 397], "bustillo": [120, 197, 245], "butterworth": [58, 129, 130, 154, 158, 161, 354, 381, 382, 383, 384, 385, 386, 387, 473], "butterworth__": [354, 381, 382, 383, 384, 385, 386, 387, 473], "butterworth__padtyp": 58, "butterwoth": [154, 161], "button": [58, 65, 67, 71, 75, 76, 78, 79, 105, 112, 156, 161, 176, 178, 270, 272, 280, 479], "bwr": [19, 53, 116, 147, 161, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 453], "bwr_r": 19, "byte": [2, 4, 101, 116, 156, 161, 176, 363, 369], "bytes_": [56, 90, 101], "bzdok": [0, 124, 125, 127, 128, 134, 136, 161], "c": [3, 34, 40, 41, 42, 43, 44, 49, 56, 58, 68, 97, 98, 99, 102, 116, 120, 123, 169, 173, 174, 175, 176, 184, 194, 195, 198, 202, 205, 212, 214, 219, 221, 223, 225, 228, 231, 235, 238, 246, 248, 255, 257, 260, 261, 267, 268, 274, 276, 277, 279, 281, 292, 328, 329, 354, 369, 370, 377, 378, 397, 464, 467, 473], "c0": 63, "c1": 63, "c3": 63, "c_ra": [158, 161], "ca": [120, 198, 214, 267], "cach": [42, 43, 49, 54, 56, 102, 128, 134, 161, 165, 235, 298, 299, 300, 301, 303, 304, 305, 306, 336, 349, 355, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 459, 460, 461, 477], "caffo": [120, 354, 473], "caglar": [0, 158, 161], "caitlin": [23, 115, 120, 222, 287], "cakan": [0, 158, 161], "cal_max": [56, 90, 101], "cal_min": [56, 90, 101], "calc_beta": 327, "calcul": [0, 3, 31, 41, 47, 48, 58, 91, 96, 109, 118, 130, 147, 161, 177, 200, 271, 272, 298, 299, 300, 301, 305, 306, 326, 328, 329, 344, 351, 359, 377, 380, 383, 386, 390, 393, 397, 408, 425, 432, 437, 440, 445, 446, 447, 452, 454, 459, 471, 494], "calculu": 41, "calhoun": [23, 115, 120, 197, 222, 245, 287], "california": 0, "call": [2, 4, 6, 14, 15, 16, 33, 48, 49, 50, 52, 53, 56, 58, 65, 67, 71, 75, 80, 86, 88, 90, 93, 97, 104, 112, 122, 123, 132, 149, 161, 162, 163, 165, 166, 168, 169, 173, 175, 176, 177, 178, 180, 181, 184, 186, 188, 192, 198, 234, 236, 238, 246, 258, 277, 279, 282, 304, 306, 325, 330, 336, 339, 349, 354, 364, 381, 382, 383, 384, 385, 386, 387, 393, 433, 434, 443, 459, 473, 492], "callabl": [123, 156, 161, 238, 277, 298, 299, 300, 301, 302], "caller": [270, 271], "cambridg": [0, 198], "camelcas": 176, "cameron": [23, 56, 115, 120, 162, 163, 201, 220, 222, 247, 252, 287], "camil": [120, 221, 277, 279], "campagn": [70, 120, 206], "can": [0, 2, 3, 4, 6, 9, 11, 12, 14, 15, 20, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 85, 87, 88, 90, 91, 92, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 112, 113, 114, 115, 116, 120, 121, 122, 123, 129, 130, 132, 133, 134, 137, 139, 141, 146, 147, 149, 152, 153, 154, 155, 156, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 183, 184, 186, 187, 188, 194, 203, 204, 220, 221, 224, 235, 236, 238, 241, 242, 245, 248, 249, 250, 251, 252, 253, 254, 258, 272, 274, 277, 281, 298, 299, 300, 301, 302, 303, 304, 307, 326, 328, 329, 336, 338, 339, 343, 349, 351, 354, 355, 356, 361, 364, 365, 366, 369, 370, 373, 374, 376, 377, 378, 383, 386, 389, 390, 391, 392, 393, 394, 396, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 435, 437, 438, 439, 440, 441, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 459, 461, 462, 463, 469, 470, 471, 472, 473, 477, 479, 492, 493, 495], "canada": 0, "canadian": 0, "cancel": 169, "candid": 98, "canica": [50, 129, 130, 144, 155, 161, 164, 181, 306, 383, 479, 495], "canica_components_img": 48, "canica_resting_st": 48, "canni": 492, "cannon": [120, 264, 282], "cannot": [3, 9, 10, 11, 36, 48, 49, 51, 56, 78, 85, 91, 93, 102, 111, 123, 146, 158, 161, 162, 168, 171, 176, 188, 236, 315, 454, 455, 457], "canon": [6, 50, 65, 69, 83, 139, 161, 181, 192, 305], "cap": [76, 78], "capabl": [67, 112, 133, 156, 161, 188], "capit": 219, "caprihan": [120, 197, 245], "captur": [23, 51, 58, 65, 103, 115, 163, 164, 165, 168, 200, 234, 272], "care": [51, 98, 122, 168, 169, 171, 175, 227, 253, 254, 323], "carpet": [8, 27, 118, 133, 152, 161, 243, 267, 355, 367, 391, 433, 494], "carpet_plot": [158, 161], "carri": [178, 181], "carrier": [120, 194, 274], "case": [15, 23, 34, 40, 49, 50, 54, 58, 62, 64, 65, 66, 71, 83, 88, 90, 91, 100, 101, 108, 113, 115, 123, 139, 149, 152, 161, 162, 163, 165, 168, 169, 173, 175, 183, 184, 186, 241, 244, 248, 250, 251, 298, 299, 300, 301, 303, 304, 336, 338, 343, 349, 351, 352, 361, 369, 370, 371, 372, 375, 382, 383, 384, 385, 386, 387, 391, 429, 432, 433, 434, 437, 439, 440, 442, 445, 446, 447, 454, 470, 471, 477, 479, 492], "cast": [11, 83, 136, 149, 161, 188, 244, 367], "castellano": [23, 115, 120, 222, 287], "cat": [30, 32, 33, 97, 122, 168, 182, 186], "catarina": [120, 231, 257], "catch_warn": [69, 103], "categor": [169, 184], "categori": [30, 32, 33, 97, 102, 122, 168, 170, 176, 186, 266], "caterina": [120, 227, 262], "caus": [49, 83, 134, 161, 372], "caution": 372, "cautious": [143, 161], "caveat": [120, 168], "cavi": [120, 202, 212, 248], "cbar_tick_format": [6, 25, 153, 156, 161, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 437, 439, 440, 442, 446, 447, 448, 450, 451], "cbar_vmax": [399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 448], "cbar_vmin": [399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 448], "cbf": 123, "cbig": [226, 254], "cbv": 123, "cc": 242, "cc0": 221, "cd": [48, 184, 306], "ce": [336, 339, 349, 471], "cea": [0, 200], "cecil": [120, 183], "cell": [9, 16, 22, 36, 49, 52, 53, 54, 58, 62, 74, 76, 111, 114, 178, 181], "censor": [132, 158, 161, 473], "center": [0, 14, 36, 47, 50, 51, 55, 58, 61, 78, 98, 105, 106, 147, 158, 161, 163, 166, 188, 195, 212, 216, 223, 234, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 336, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 431, 433, 458, 459, 461, 470, 477], "cento": 198, "centr": 0, "central": [0, 90, 242], "centroid": 458, "cercor": [69, 120, 194, 202, 226, 248, 254, 274], "cereb": 51, "cerebellar": [227, 262], "cerebellum": [58, 120, 194, 205, 227, 260, 262, 274], "cerebr": [69, 120, 178, 194, 200, 202, 205, 212, 226, 232, 248, 254, 258, 260, 272, 274], "cerebrospin": [11, 56, 214, 267, 377], "certain": [6, 56, 146, 161, 168, 176, 178, 184, 194, 277, 369, 445], "certif": 194, "cf": [120, 188, 194, 274], "cff": 176, "cfg": [157, 161], "chain": [93, 187, 234, 235], "chair": [28, 30, 32, 33, 45, 118, 130, 161, 186, 266, 300, 361, 366, 444, 447, 452, 494], "challeng": 162, "chamma": [0, 129, 130, 131, 155, 156, 158, 161], "chan": 0, "chanc": [6, 33, 37, 51, 76, 78, 153, 161, 172, 173, 178, 495], "chance_level": 33, "chandra": 0, "chang": [14, 19, 40, 42, 51, 62, 66, 101, 102, 105, 106, 110, 112, 113, 116, 118, 125, 169, 171, 175, 176, 178, 184, 185, 233, 234, 235, 236, 286, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 339, 344, 349, 363, 367, 369, 372, 373, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 397, 442, 448, 450, 451, 455, 457, 458, 459, 460, 461, 464, 465, 467, 470, 473, 493, 495], "changelog": [129, 141, 184], "channel": [146, 161], "chaogan": [23, 115, 120, 222, 287], "chapter": [187, 188], "charact": [158, 161, 345], "character": [64, 65, 120, 183, 214, 377], "characterist": [77, 168, 181, 378], "chawla": [0, 146, 147, 148, 149, 150, 151, 152, 161], "cheap": 169, "check": [2, 3, 15, 29, 30, 32, 33, 34, 35, 36, 76, 92, 93, 97, 101, 105, 116, 122, 130, 133, 136, 139, 161, 163, 168, 171, 175, 176, 183, 184, 186, 188, 234, 235, 236, 238, 268, 288, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 337, 349, 364, 377, 380, 381, 382, 383, 384, 385, 386, 387, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 458, 459, 460, 461, 492], "check_ev": [131, 161], "check_mask_img": 176, "check_param": [303, 304], "check_random_st": [43, 44], "checkerboard": [65, 71, 79, 272], "checkmk": 0, "checkout": [141, 161, 176, 184], "chee": [37, 120], "chen": [0, 37, 120, 158, 161, 194, 274], "cheung": [23, 115, 120, 222, 287], "chevali": [0, 146, 149, 161], "chiang": [143, 161], "chieti": 0, "child": [0, 51, 263], "child_adult": [51, 98], "childmind": 193, "children": [48, 98, 149, 161, 182, 203, 263], "china": 0, "chiu": [120, 212], "choic": [9, 19, 65, 66, 69, 111, 116, 136, 161, 162, 163, 169, 171, 172, 175, 176, 236, 247, 303, 304, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 461, 495], "choos": [14, 15, 24, 33, 34, 44, 47, 86, 171, 172, 178, 188, 298, 299, 300, 301, 336, 349, 378, 432, 434, 437, 439, 440, 443, 445, 446, 447, 458, 459, 471, 477, 495], "chose": 168, "chosen": [9, 22, 34, 65, 99, 111, 114, 175, 234, 448, 450, 451, 454, 455, 457, 477], "chri": [0, 124, 134, 149, 161], "christian": [0, 120, 130, 143, 146, 161, 162, 194, 228, 255, 274, 377, 378], "christin": [23, 49, 115, 120, 222, 287], "christina": [0, 58, 120, 132, 161, 205, 260], "christo": [56, 120, 377, 378], "christoph": [22, 23, 114, 115, 120, 143, 146, 161, 202, 248, 256], "chun": [37, 120], "chunk": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 97, 102], "church": [58, 120, 205, 225, 260, 261], "chyzhyk": [51, 98, 120], "ci": [176, 184, 326, 328, 329], "cibit": 0, "cidx": 78, "cing": 51, "cingul": [23, 55, 58, 61, 90, 115, 177], "cingulo": 58, "cinguloopercular": 262, "cionca": [0, 131, 161], "cipollini": [0, 124, 125, 127, 134, 136, 161], "circl": 83, "circleci": [136, 141, 161], "circular": [75, 198], "ciric": [56, 120, 377, 378], "cisler": [99, 120], "citat": [0, 176], "cite": [165, 200, 215, 220, 252, 263, 272], "ciuciu": [70, 120, 206, 305], "civet": [120, 198], "clair": [120, 194, 274], "clare": [23, 115, 120, 194, 222, 228, 255, 274, 287], "clarifi": [65, 154, 161], "clariti": 53, "clark": [0, 120, 129, 161, 173, 197, 245], "class": [3, 11, 28, 32, 42, 43, 45, 49, 51, 54, 56, 58, 90, 93, 97, 98, 101, 118, 128, 129, 130, 132, 134, 136, 142, 143, 144, 147, 149, 152, 154, 155, 156, 158, 161, 167, 168, 172, 175, 176, 177, 180, 188, 189, 191, 192, 234, 235, 236, 266, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 316, 317, 318, 323, 324, 325, 326, 327, 328, 329, 330, 336, 349, 355, 367, 377, 380, 381, 382, 383, 384, 385, 386, 387, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 432, 434, 437, 439, 440, 443, 444, 445, 446, 447, 452, 458, 459, 460, 461, 462, 463, 469, 479, 480, 482, 484, 487, 488, 489, 494, 495], "class_prior": [298, 299, 300, 301], "classes_": [298, 299, 300, 301, 303, 304], "classic": [29, 34, 93, 169, 186, 213], "classif": [3, 30, 31, 32, 33, 35, 43, 46, 49, 59, 97, 99, 118, 120, 122, 132, 152, 161, 162, 167, 168, 172, 173, 174, 181, 182, 183, 193, 234, 242, 252, 263, 298, 299, 300, 301, 303, 378, 380, 385, 434, 444, 452, 493, 494, 495], "classifi": [3, 28, 32, 33, 36, 41, 45, 51, 97, 98, 118, 149, 152, 153, 161, 168, 169, 170, 171, 172, 181, 182, 183, 266, 298, 300, 301, 302, 303, 359, 361, 366, 447, 452, 494, 495], "classification_accuraci": [33, 97], "classification_target": [30, 32], "classifier_nam": 30, "classifiers_data": 30, "classmethod": [399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "claus": 0, "clean": [40, 43, 49, 52, 53, 56, 58, 68, 103, 120, 129, 130, 132, 139, 145, 146, 149, 153, 154, 156, 161, 184, 187, 188, 234, 305, 306, 336, 354, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 433, 459, 461], "clean__": [354, 381, 382, 383, 384, 385, 386, 387], "clean__butterworth__": [354, 381, 382, 383, 384, 385, 386, 387], "clean__butterworth__padtyp": 58, "clean__sample_mask": [132, 161], "clean_img": [68, 132, 139, 141, 146, 156, 161, 187, 473], "clean_kwarg": [33, 49, 52, 53, 56, 58], "clean_map": 6, "cleaned_sign": 473, "cleaner": [48, 65, 146, 161], "clear": [93, 123, 129, 149, 158, 161, 176, 298, 299, 300, 301, 305, 306, 383, 386, 459], "clearer": [42, 176], "clearli": [131, 156, 161, 176], "clever": [122, 175], "clf": [41, 143, 161], "click": [123, 178, 188, 272, 492], "clinic": [0, 51, 98, 169, 183], "clip": [58, 83, 369, 370], "cllip": 370, "clock": 175, "clone": 176, "close": [15, 23, 37, 40, 49, 85, 115, 156, 161, 162, 169, 175, 176, 178, 181, 268, 298, 299, 300, 301, 389, 390, 391, 393, 394, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451, 466, 492], "closer": [40, 49, 175, 470], "closest": [83, 369], "cluster": [6, 19, 31, 32, 33, 39, 46, 59, 62, 73, 78, 80, 81, 85, 90, 118, 120, 129, 130, 149, 152, 156, 157, 158, 161, 164, 170, 171, 173, 178, 180, 181, 182, 183, 195, 201, 246, 247, 263, 272, 300, 301, 331, 336, 345, 349, 351, 352, 359, 361, 366, 373, 384, 397, 417, 437, 444, 446, 447, 452, 458, 459, 460, 464, 466, 467, 470, 471, 478, 479, 494, 495], "cluster_level_infer": [75, 156, 161, 180], "cluster_percentil": [300, 301], "cluster_roi": [201, 247], "cluster_s": [157, 161], "cluster_threshold": [6, 61, 68, 80, 156, 161, 336, 349, 352, 373, 376, 470, 471], "clustering_percentil": [32, 300, 301], "cm": [12, 19, 20, 38, 41, 42, 44, 50, 53, 58, 102, 131, 146, 161, 166, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 437, 443, 444, 445, 446, 447, 453, 454, 455, 457, 492], "cma": 212, "cmap": [3, 9, 11, 12, 14, 19, 20, 22, 23, 31, 35, 36, 38, 40, 41, 42, 44, 50, 53, 75, 76, 78, 79, 80, 85, 102, 105, 106, 111, 114, 115, 116, 131, 147, 149, 158, 161, 166, 200, 270, 271, 272, 432, 433, 437, 438, 439, 442, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 457, 492], "cmap_filenam": [80, 106], "cmap_label": [158, 161, 433], "cmaps_leftauditoryclick": [76, 105], "cmd": [120, 328, 329], "cn": 219, "cn2h9c": [120, 162, 234], "cnr": [0, 195, 244], "co": [5, 24, 83, 120, 177, 194, 207, 208, 209, 210, 211, 231, 257, 286], "coactiv": 167, "coalson": [58, 120, 205, 260], "coars": 37, "cobr": [131, 137, 141, 161], "code": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 118, 120, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 166, 167, 169, 171, 175, 177, 181, 188, 242, 302, 306, 336, 349, 382, 385, 387, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 443, 461, 469, 471, 478, 479, 487, 489, 493], "codebas": [131, 161, 176], "codecov": [141, 161], "coef": [31, 44, 97, 336, 345], "coef_": [3, 40, 44, 97, 116, 122, 176, 298, 299, 300, 301, 303, 304], "coef_img": [3, 30, 43, 116, 122], "coef_img_": [3, 29, 30, 31, 39, 42, 43, 116, 168, 188, 298, 299, 300, 301, 303, 304], "coeffici": [3, 6, 23, 39, 40, 44, 51, 97, 98, 115, 142, 158, 161, 162, 168, 169, 170, 174, 175, 176, 178, 181, 234, 236, 303, 304, 325, 327, 330, 336, 345, 349, 471], "coerc": 11, "coffei": [23, 115, 120, 222, 287], "cognit": [0, 71, 99, 103, 120, 168, 178, 181, 183, 188, 200, 218, 223, 228, 229, 255, 264, 272, 275, 281, 282], "cognitive_paradigm_cogatla": 107, "cohen": [58, 120, 205, 225, 260, 261], "coher": [181, 183], "cohort": [51, 98], "coil": 68, "coimbra": 0, "col": [326, 328, 329], "colcomb": [23, 115, 120, 222, 287], "cold_hot": [116, 145, 161, 442, 447, 451, 454, 455, 457], "colin": [0, 149, 161], "colin27": 215, "colinear": 65, "collect": [58, 99, 103, 107, 120, 121, 176, 181, 193, 197, 201, 219, 221, 277, 278, 279, 280, 315, 377, 495], "collection_658": 2, "collection_filt": [123, 277], "collection_id": [103, 107, 123, 277, 279], "collection_metadata": [123, 277], "collection_term": [123, 277], "collections_meta": [123, 221, 277, 278, 279, 280], "colleg": [0, 181], "collin": [120, 195, 198, 214, 244, 267, 292], "color": [9, 14, 15, 18, 21, 24, 30, 32, 34, 49, 50, 51, 68, 85, 87, 111, 132, 133, 147, 149, 152, 154, 158, 161, 165, 166, 176, 232, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 492], "colorado": 0, "colorbar": [2, 6, 9, 14, 20, 21, 23, 25, 26, 36, 37, 40, 48, 50, 51, 54, 57, 58, 62, 67, 68, 74, 75, 76, 78, 79, 85, 86, 87, 93, 100, 103, 105, 108, 111, 112, 113, 114, 115, 116, 127, 129, 132, 133, 138, 141, 146, 147, 149, 153, 154, 155, 156, 157, 161, 166, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 435, 437, 439, 440, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 454, 455, 457, 492], "colorbar_fonts": [453, 455, 457], "colorbar_height": [453, 455, 457], "colormap": [8, 14, 19, 21, 23, 27, 85, 115, 118, 133, 141, 144, 145, 146, 147, 149, 154, 161, 258, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 432, 433, 434, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 494, 495], "colors_17": [232, 258], "colors_7": [232, 258], "colour": [14, 178], "column": [3, 6, 56, 62, 63, 64, 65, 67, 68, 69, 70, 71, 74, 75, 76, 78, 79, 80, 97, 99, 100, 102, 105, 106, 108, 112, 113, 123, 131, 132, 153, 161, 178, 235, 236, 238, 298, 299, 300, 301, 323, 326, 327, 328, 329, 334, 336, 343, 349, 350, 351, 354, 369, 377, 378, 379, 384, 397, 408, 410, 413, 427, 432, 435, 436, 437, 438, 440, 444, 445, 446, 447, 468, 470, 472, 473, 474], "column_nam": [62, 379], "com": [0, 22, 23, 37, 40, 41, 49, 51, 56, 69, 98, 102, 114, 115, 120, 158, 161, 162, 163, 170, 173, 174, 176, 194, 195, 198, 200, 201, 202, 207, 208, 209, 210, 211, 212, 214, 218, 219, 220, 222, 226, 227, 231, 244, 246, 247, 248, 252, 254, 256, 257, 262, 267, 272, 274, 275, 276, 286, 292, 300, 301, 354, 377, 378, 397, 433, 473, 474, 492, 493], "combin": [6, 15, 40, 41, 70, 102, 104, 120, 129, 132, 155, 161, 168, 173, 178, 181, 188, 194, 198, 212, 215, 219, 227, 242, 276, 298, 299, 300, 301, 303, 304, 305, 306, 336, 349, 351, 377, 416, 417, 420, 421, 422, 423, 435], "come": [2, 3, 6, 16, 42, 52, 54, 58, 74, 79, 93, 122, 130, 133, 161, 163, 168, 169, 175, 176, 183, 184, 187, 188, 263, 492], "comer": 183, "comfort": [122, 176], "comma": 186, "command": [176, 183, 184, 493], "comment": [176, 188], "commerci": [193, 196, 198, 200, 201, 203, 204, 220, 247], "commit": 184, "committe": 194, "commod": 175, "common": [11, 49, 65, 66, 69, 93, 99, 141, 149, 155, 157, 161, 162, 168, 171, 173, 175, 176, 178, 180, 185, 187, 193, 198, 201, 230, 238, 247, 361, 369, 370, 374, 383, 392, 394, 495], "commonli": [51, 165, 177, 181, 183, 188, 378], "commun": [0, 120, 176, 182, 184, 193, 203, 223, 263, 493], "comp": [48, 197, 245], "compact": [2, 93, 187, 268], "compar": [3, 6, 30, 31, 33, 35, 39, 41, 46, 51, 56, 58, 59, 63, 65, 76, 78, 79, 82, 85, 93, 95, 98, 101, 118, 120, 123, 125, 149, 161, 163, 164, 167, 168, 169, 170, 171, 172, 175, 177, 178, 181, 188, 201, 220, 234, 236, 249, 252, 258, 263, 365, 366, 380, 381, 382, 383, 384, 385, 386, 387, 429, 430, 434, 441, 447, 452, 473, 479, 492, 494, 495], "comparison": [42, 49, 51, 57, 62, 65, 80, 92, 98, 99, 102, 120, 123, 162, 165, 172, 173, 174, 179, 181, 197, 201, 245, 495], "compat": [10, 11, 36, 49, 71, 78, 85, 93, 130, 132, 136, 156, 158, 161, 171, 176, 177, 233, 250, 251, 317, 318, 336, 349, 351, 361, 376, 380, 381, 382, 383, 384, 385, 386, 387, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 435, 461, 469, 473], "compcor": [56, 65, 120, 132, 156, 161, 163, 263, 360, 377, 378, 474], "complementari": [120, 218, 275], "complet": [34, 60, 72, 93, 118, 122, 123, 149, 161, 162, 168, 170, 177, 184, 187, 188, 264, 266, 282, 297, 336, 339, 376, 379, 386, 397, 432, 433, 434, 435, 437, 439, 440, 441, 443, 444, 445, 446, 447, 459, 469, 470, 471, 478, 494], "complex": [65, 76, 86, 120, 123, 168, 170, 173, 176, 180, 183, 188], "compli": [194, 377], "complianc": [131, 161, 176], "compliant": [99, 130, 161, 176, 188, 282, 296, 378], "complic": [175, 186, 326, 328, 329], "compon": [48, 50, 54, 65, 91, 93, 96, 109, 118, 120, 134, 141, 142, 144, 152, 161, 163, 164, 165, 166, 178, 181, 186, 187, 197, 198, 234, 235, 236, 245, 255, 263, 274, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 326, 328, 329, 336, 349, 361, 363, 366, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 431, 447, 452, 458, 459, 460, 461, 462, 463, 474, 479, 494, 495], "component_img": 104, "components_": [103, 144, 161, 305, 306], "components_img": [48, 50, 166], "components_img_": [48, 50, 144, 161, 166, 167, 305, 306], "components_mask": [91, 104], "compos": [20, 97, 181, 187, 188, 193, 261, 298, 299, 300, 301], "composit": 34, "comprehens": [120, 176, 183, 198, 200, 272, 296], "compress": [48, 120, 146, 161, 164, 167, 186, 306, 495], "compressed_img_rena": 49, "compris": [63, 65, 85, 462, 470], "compromis": [178, 378], "comptat": 65, "comput": [0, 3, 6, 9, 15, 16, 22, 25, 29, 30, 31, 33, 39, 40, 41, 43, 44, 46, 47, 48, 49, 51, 61, 62, 63, 64, 65, 66, 67, 69, 71, 74, 76, 78, 80, 82, 84, 89, 91, 94, 97, 98, 99, 100, 102, 103, 104, 108, 111, 112, 113, 114, 118, 120, 121, 123, 131, 134, 146, 152, 153, 154, 156, 161, 164, 165, 167, 168, 169, 170, 171, 173, 174, 175, 178, 179, 181, 182, 183, 185, 186, 189, 234, 236, 238, 252, 263, 266, 276, 286, 298, 299, 300, 301, 302, 303, 304, 305, 306, 324, 326, 328, 329, 332, 333, 335, 336, 338, 343, 345, 349, 351, 352, 359, 360, 361, 364, 365, 366, 367, 371, 373, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 431, 434, 437, 444, 445, 446, 447, 452, 453, 455, 458, 459, 460, 461, 469, 471, 472, 474, 477, 478, 485, 492, 495], "computation": [65, 169, 173], "computationnali": 169, "compute_alpha_max": 175, "compute_background_mask": [187, 298, 299, 300, 301, 305, 306, 383, 386, 459], "compute_brain_mask": [152, 155, 161, 187, 298, 299, 300, 301, 305, 306, 386, 393, 459], "compute_contrast": [6, 33, 61, 62, 64, 65, 67, 68, 69, 70, 74, 75, 76, 78, 79, 80, 99, 100, 108, 112, 113, 129, 132, 133, 161, 177, 336, 349, 351, 471], "compute_epi_mask": [11, 25, 68, 88, 187, 188, 298, 299, 300, 301, 305, 306, 383, 386, 459], "compute_fixed_effect": 70, "compute_gray_matter_mask": [152, 156, 161], "compute_multi_background_mask": [159, 161, 187, 383], "compute_multi_brain_mask": [48, 129, 155, 161, 383], "compute_multi_epi_mask": [129, 161, 187, 383], "compute_multi_gray_matter_mask": [129, 161], "compute_multi_grey_matter_mask": [155, 161], "compute_regressor": [66, 130, 156, 161, 177], "computed_regressor": 338, "con": 332, "con_id": [66, 338], "con_val": 332, "concat_img": [2, 6, 11, 68, 69, 99, 140, 161, 187, 361], "concat_niimg": [132, 161], "concaten": [6, 37, 47, 49, 53, 57, 99, 162, 187, 355, 361, 377, 461], "concentr": [43, 176, 178, 181], "concept": [65, 97, 149, 161, 168, 169, 176, 181, 185, 215, 495], "conceptu": 178, "concern": [176, 181], "concis": 277, "concordia": 0, "concret": [64, 176, 178], "concurr": [36, 42, 43, 44, 48, 100, 102, 105, 108, 113], "cond": [93, 99, 338], "cond_": 62, "cond_id": [156, 161], "cond_map": 93, "conda": [176, 493], "condit": [3, 6, 29, 30, 31, 33, 35, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 79, 93, 97, 100, 102, 108, 112, 113, 122, 153, 156, 158, 161, 162, 168, 175, 181, 184, 187, 194, 204, 206, 213, 229, 230, 249, 274, 336, 338, 343, 349, 351, 435], "condition_": 33, "condition_count": 99, "condition_effect": 79, "condition_id": 71, "condition_mask": [3, 29, 30, 31, 34, 36, 37, 97, 102, 122], "condition_mask_test": 31, "condition_mask_train": 31, "condition_nam": [93, 99], "conditions_encod": 102, "conditions_label": 33, "conditions_per_run": 102, "conditions_run": 33, "conditions_test": 3, "conditions_to_modul": 71, "conditions_train": 3, "conduct": [6, 32, 123, 133, 161, 178, 229], "conenctivitymeasur": 47, "conf_int": [326, 328, 329], "confer": [145, 161], "confid": [298, 299, 300, 301, 303, 304, 326, 328, 329], "confidence_interv": [326, 328, 329], "configur": [9, 15, 111, 130, 131, 161, 176, 184, 187, 188, 234, 305, 306, 318, 336, 349, 378, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "confirm": [2, 29, 131, 161, 176], "conform": [158, 161, 178], "confound": [33, 47, 49, 50, 51, 52, 53, 54, 55, 58, 62, 76, 77, 98, 99, 100, 105, 108, 113, 120, 122, 127, 130, 131, 132, 136, 146, 152, 153, 154, 156, 158, 161, 163, 166, 167, 168, 175, 181, 185, 187, 196, 203, 234, 243, 263, 305, 306, 318, 336, 339, 349, 350, 351, 354, 360, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 397, 459, 461, 473, 474, 483, 495], "confound_fil": 51, "confound_filenam": [53, 55], "confounding_var": 397, "confounds_": 339, "confounds_datafram": 163, "confounds_fd_threshold": 339, "confounds_filenam": 58, "confounds_minimal_no_gsr": 56, "confounds_mot": 339, "confounds_scrub": [56, 339], "confounds_simpl": 56, "confounds_std_dvars_threshold": 339, "confounds_strategi": 339, "confounds_wm_csf": 339, "conftest": 176, "confus": [130, 161, 169, 372], "confusion_matrix": [31, 35, 169], "congdon": [120, 264, 282], "conjunct": 93, "connect": [8, 22, 26, 27, 49, 50, 58, 59, 87, 93, 96, 109, 110, 114, 117, 120, 132, 133, 134, 139, 141, 142, 149, 152, 157, 161, 163, 165, 167, 176, 177, 178, 181, 182, 183, 187, 193, 194, 198, 226, 228, 232, 234, 235, 236, 242, 246, 252, 254, 255, 256, 258, 263, 269, 274, 286, 287, 309, 310, 316, 319, 320, 321, 322, 336, 339, 352, 355, 363, 373, 377, 378, 380, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 410, 431, 434, 436, 444, 447, 450, 451, 452, 453, 459, 462, 463, 475, 492, 493, 494, 495], "connect_diag": [85, 462], "connected_compon": [461, 463], "connected_label_region": [85, 141, 161, 165, 187, 461, 463], "connected_region": [87, 134, 147, 161, 166, 187, 461, 462], "connection": 183, "connectivity_": 459, "connectivity__kind": 98, "connectivity_measur": 58, "connectivitymatrix": 234, "connectivitymeasur": [47, 50, 51, 54, 56, 58, 98, 116, 131, 134, 136, 139, 142, 152, 161, 162, 163, 166], "connectom": [0, 8, 12, 22, 27, 46, 48, 49, 51, 54, 56, 57, 59, 98, 114, 116, 118, 120, 125, 134, 138, 139, 143, 146, 147, 149, 152, 154, 161, 164, 166, 167, 181, 182, 183, 188, 193, 194, 196, 198, 220, 242, 249, 252, 258, 260, 261, 263, 274, 305, 306, 361, 378, 380, 381, 382, 384, 385, 387, 410, 429, 430, 431, 432, 434, 443, 444, 445, 447, 452, 453, 454, 456, 461, 469, 479, 494, 495], "connectome_measur": [47, 50, 166], "connectomedb": 194, "connectomeview": [453, 456], "connor": [0, 158, 161], "conscious": 0, "consecut": [133, 161, 244, 246, 248, 254, 257, 258, 458], "consensu": [167, 176, 198], "consequ": [3, 15, 85, 188], "conserv": [6, 76, 78, 102, 173, 178, 198, 235, 240], "consid": [6, 32, 39, 53, 54, 55, 65, 66, 79, 91, 93, 102, 104, 122, 136, 149, 156, 161, 173, 176, 194, 215, 232, 242, 258, 298, 299, 300, 301, 303, 304, 305, 306, 323, 327, 336, 338, 339, 343, 349, 351, 358, 364, 375, 382, 383, 385, 386, 391, 394, 397, 401, 446, 459, 462, 464, 465, 479], "consider": [163, 169, 227, 242, 351, 397], "consist": [3, 6, 34, 40, 44, 65, 67, 108, 122, 130, 131, 139, 145, 146, 147, 156, 161, 168, 169, 172, 173, 175, 176, 178, 181, 193, 198, 203, 229, 236, 246, 274, 304, 339, 381, 384, 458, 460, 463], "consolid": [93, 157, 161], "conson": [100, 216], "consortium": [264, 282], "constant": [23, 65, 115, 116, 175, 187, 298, 299, 300, 301, 303, 304, 351, 397, 472, 492], "constantinputwarn": [23, 115], "constitut": [20, 167], "constrain": [49, 50, 120, 165, 182, 201, 213, 220, 227, 228, 247, 252, 266, 459], "constraint": [49, 165, 175, 374], "construct": [40, 52, 54, 97, 120, 164, 167, 173, 176, 177, 182, 183, 195, 323, 324, 327, 350, 469], "constructor": [2, 123, 159, 161, 328, 329, 361], "consult": [100, 194], "consum": [147, 161, 171, 175, 184, 186, 387], "consumpt": [187, 336, 349, 382, 385, 472], "contact": 229, "contain": [2, 3, 4, 6, 10, 11, 22, 23, 36, 40, 49, 52, 55, 62, 67, 70, 71, 78, 83, 85, 90, 93, 100, 101, 106, 107, 108, 112, 113, 114, 115, 122, 123, 130, 131, 132, 133, 136, 141, 146, 149, 158, 161, 162, 168, 169, 172, 175, 176, 178, 181, 184, 186, 188, 194, 195, 196, 197, 198, 201, 203, 206, 212, 213, 215, 219, 221, 222, 223, 224, 234, 235, 236, 238, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 266, 276, 277, 278, 279, 280, 281, 287, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 316, 318, 325, 326, 328, 329, 330, 336, 339, 349, 350, 351, 354, 355, 363, 369, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 397, 442, 443, 448, 449, 450, 451, 455, 457, 458, 459, 460, 461, 462, 464, 465, 469, 471, 473, 475, 476, 477, 484, 495], "contast": 70, "content": [3, 31, 32, 38, 58, 65, 67, 83, 97, 112, 120, 131, 161, 172, 173, 176, 183, 255, 260, 266, 274, 354, 473], "contest": 206, "context": [93, 99, 120, 131, 132, 161, 176, 181], "contigu": [6, 165, 175, 229, 397], "continu": [21, 39, 43, 52, 56, 163, 168, 169, 170, 174, 176, 181, 188, 277, 364, 368, 369, 370, 381, 382, 383, 384, 385, 386, 387, 439, 440, 445, 446, 447, 454, 462, 463], "contour": [9, 15, 18, 21, 86, 87, 111, 131, 141, 149, 152, 154, 158, 161, 308, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 445, 446, 449, 495], "contour_fil": [399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "contourf": [15, 21, 48, 50, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "contrari": [181, 375, 381, 382, 479], "contrarili": [54, 90, 384, 385, 479], "contrast": [2, 6, 8, 14, 15, 27, 33, 64, 66, 69, 74, 75, 76, 77, 78, 79, 80, 87, 89, 92, 100, 105, 106, 108, 113, 118, 130, 131, 132, 139, 143, 144, 153, 156, 159, 161, 167, 173, 178, 179, 180, 181, 200, 219, 270, 271, 272, 278, 280, 325, 326, 328, 329, 330, 332, 333, 334, 336, 349, 351, 376, 432, 435, 445, 446, 447, 452, 454, 458, 471, 478, 492, 494, 495], "contrast_def": [336, 349, 435, 471], "contrast_definit": 107, "contrast_dim": 324, "contrast_id": [64, 65, 67, 69, 70, 112], "contrast_img": [70, 333], "contrast_map_filenam": [76, 105], "contrast_matrix": [64, 65, 67, 69, 112], "contrast_typ": [62, 132, 161, 324, 332, 376], "contrast_v": [64, 65, 67, 69, 70, 112], "contrast_valu": [108, 113], "contribut": [129, 143, 146, 147, 148, 149, 150, 151, 155, 156, 158, 161, 169, 178, 184, 224, 493], "contributor": [124, 125, 127, 128, 176, 184], "control": [6, 8, 9, 11, 14, 15, 20, 23, 27, 33, 38, 40, 48, 56, 75, 78, 97, 111, 115, 118, 120, 130, 132, 134, 142, 143, 147, 149, 153, 159, 161, 162, 166, 167, 168, 169, 172, 173, 175, 176, 178, 181, 185, 193, 196, 198, 234, 242, 270, 277, 279, 306, 331, 335, 336, 349, 352, 355, 366, 373, 377, 378, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 437, 439, 440, 442, 446, 447, 448, 450, 451, 452, 458, 471, 477, 478, 492, 494, 495], "controversi": 242, "convei": [176, 397], "conveni": [123, 187, 188, 203, 263], "convent": [22, 71, 114, 129, 131, 158, 161, 176, 184, 296, 372, 374, 375, 432, 437, 439, 447, 458, 460], "converg": [34, 91, 104, 175, 235, 238, 303, 304, 458], "convergencewarn": [34, 39, 91, 104], "convers": [188, 244], "convert": [3, 6, 10, 11, 20, 36, 42, 48, 49, 50, 65, 78, 85, 93, 97, 107, 108, 113, 122, 149, 154, 156, 158, 161, 166, 168, 173, 181, 187, 334, 355, 356, 364, 381, 382, 383, 384, 385, 386, 387], "convex": 175, "convolut": [66, 178, 338, 343], "convolv": [177, 338], "coord": [15, 37, 40, 50, 52, 54, 58, 68, 86, 99, 147, 149, 161, 166, 307, 398, 400, 401, 429, 430, 434, 448, 449, 450, 451, 457, 492], "coord_transform": [40, 143, 161], "coordin": [16, 19, 22, 23, 40, 49, 52, 54, 68, 93, 99, 114, 115, 120, 122, 128, 132, 138, 141, 143, 144, 146, 152, 156, 158, 161, 164, 166, 175, 177, 178, 181, 188, 195, 196, 202, 205, 207, 208, 209, 210, 211, 215, 225, 227, 228, 252, 260, 261, 262, 286, 306, 307, 312, 313, 314, 356, 369, 387, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 431, 432, 433, 434, 437, 439, 440, 443, 445, 446, 447, 448, 449, 450, 451, 453, 454, 456, 457, 470, 471, 476, 477, 479, 492, 495], "coords_connectom": [50, 166], "copenhagen": 0, "copi": [3, 20, 33, 36, 40, 53, 83, 87, 96, 99, 109, 116, 118, 122, 133, 149, 159, 161, 175, 176, 186, 194, 243, 281, 282, 305, 306, 353, 357, 358, 359, 364, 365, 366, 367, 368, 369, 370, 373, 380, 383, 386, 472, 494], "copy_head": [3, 6, 15, 16, 18, 25, 30, 31, 33, 36, 40, 49, 52, 65, 68, 69, 70, 74, 80, 83, 87, 88, 91, 92, 93, 94, 101, 102, 104, 353, 358, 366, 367, 368, 369, 370, 373], "copy_header_from": [101, 159, 161, 365], "copy_img": [132, 134, 161], "corbetta": [120, 378], "core": [20, 42, 43, 48, 50, 175, 176, 184, 236, 493], "coregist": [67, 112, 198], "coregistr": [15, 138, 161, 181, 198], "corei": [120, 197, 245], "corner": [44, 139, 161, 176, 371], "coron": [14, 93, 336, 349, 398, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 434, 437, 439, 440, 443, 445, 446, 447, 471], "corr": [22, 114, 441], "corrcoef": 47, "correct": [6, 42, 56, 74, 76, 78, 80, 100, 102, 105, 106, 120, 129, 130, 149, 152, 158, 161, 162, 173, 176, 178, 179, 181, 184, 198, 282, 296, 298, 299, 300, 301, 303, 304, 351, 352, 377, 378, 397, 433, 474, 495], "correctli": [56, 65, 92, 132, 147, 149, 150, 158, 161, 171, 178, 184, 336, 377, 378, 493], "correl": [23, 26, 42, 43, 46, 47, 52, 59, 61, 69, 98, 99, 115, 116, 118, 120, 166, 168, 175, 178, 181, 188, 194, 198, 213, 219, 234, 237, 239, 241, 263, 274, 305, 377, 378, 380, 386, 387, 410, 441, 447, 492, 494], "correlation_matric": [26, 47, 51, 194, 274], "correlation_matrix": [54, 56, 492], "correlation_measur": [51, 54, 56], "correspond": [2, 3, 6, 14, 24, 29, 30, 33, 34, 36, 39, 40, 44, 49, 55, 56, 63, 64, 65, 67, 68, 71, 76, 77, 78, 79, 80, 85, 90, 91, 93, 100, 102, 108, 113, 120, 131, 151, 153, 161, 163, 168, 169, 171, 173, 175, 176, 178, 181, 182, 184, 188, 198, 200, 228, 231, 234, 244, 249, 252, 255, 262, 268, 272, 279, 281, 289, 290, 293, 298, 299, 300, 301, 303, 304, 305, 306, 317, 332, 333, 336, 338, 339, 343, 345, 349, 350, 351, 365, 366, 369, 374, 381, 383, 384, 385, 386, 389, 390, 391, 392, 393, 394, 395, 397, 426, 427, 432, 433, 437, 440, 441, 443, 445, 446, 447, 449, 459, 461, 462, 464, 465, 467, 470, 471, 477], "cort": [10, 21, 56, 90, 163, 250, 251], "cortex": [3, 23, 31, 32, 33, 38, 55, 58, 61, 67, 69, 74, 78, 79, 90, 97, 112, 115, 120, 166, 168, 173, 177, 178, 194, 202, 205, 212, 213, 219, 226, 232, 248, 254, 258, 260, 266, 274, 276], "cortexl": 262, "cortexmid": 262, "cortexr": 262, "cortic": [8, 23, 24, 27, 28, 45, 55, 56, 67, 70, 90, 110, 112, 115, 117, 118, 120, 141, 143, 146, 152, 161, 163, 177, 182, 202, 206, 207, 208, 209, 210, 211, 212, 214, 215, 226, 227, 232, 248, 256, 258, 262, 266, 267, 286, 309, 311, 316, 319, 321, 322, 361, 434, 450, 451, 452, 453, 454, 455, 456, 457, 476, 477, 494, 495], "corticalparcellation_yeo2011": [232, 258], "cortl": 250, "cosin": [6, 33, 65, 67, 68, 69, 108, 112, 129, 131, 154, 161, 198, 336, 339, 343, 377, 473, 478], "cosine00": 56, "cosine01": 56, "cosine02": 56, "cosine03": 56, "cosmo": [0, 131, 161], "cost": [31, 39, 53, 78, 152, 161, 165, 169, 170, 174, 175, 176, 181, 188, 300, 301], "costli": [169, 173, 351, 397], "could": [4, 6, 36, 49, 58, 65, 67, 68, 78, 84, 85, 92, 99, 101, 105, 112, 122, 123, 136, 152, 156, 157, 161, 168, 171, 173, 175, 176, 178, 183, 188, 324, 446, 477], "couldn": 175, "counfound": 47, "count": [49, 100, 131, 161, 277, 279], "counterpart": 169, "countvector": [277, 279], "coupl": [66, 116, 162, 184], "cours": [67, 112, 165, 178, 181, 382, 385], "courtnei": [23, 115, 120, 222, 287], "cov": [53, 326, 328, 329, 493], "cov_estim": 234, "cov_estimator_": 234, "cov_to_corr": [141, 161], "covari": [6, 42, 46, 57, 58, 59, 61, 67, 102, 112, 118, 120, 142, 161, 163, 164, 166, 182, 194, 234, 235, 236, 237, 238, 252, 263, 274, 323, 325, 326, 327, 328, 329, 380, 385, 397, 430, 434, 444, 452, 453, 494, 495], "covariance_": [52, 53, 58, 162], "covariance_estim": 58, "covariances_": [53, 162, 235, 236], "cover": [56, 176, 188, 205, 212, 260, 262, 428], "coverag": [176, 493], "coveral": [141, 161], "covertli": 216, "cox": [23, 115, 120, 222, 287], "cpac": 242, "cpu": [3, 42, 102, 105, 171, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 336, 345, 349, 351, 366, 381, 382, 383, 392, 394, 397, 459], "cr": [120, 214, 267, 292], "craddock": [23, 56, 115, 120, 158, 161, 162, 163, 190, 220, 222, 242, 247, 252, 287], "crash": [149, 161], "creat": [3, 6, 10, 11, 20, 23, 33, 36, 40, 41, 42, 47, 48, 49, 55, 62, 65, 67, 69, 70, 71, 74, 78, 83, 85, 93, 97, 99, 107, 108, 112, 115, 116, 121, 122, 129, 138, 146, 158, 161, 162, 163, 167, 168, 169, 171, 176, 177, 178, 181, 182, 184, 185, 186, 188, 277, 279, 297, 305, 306, 336, 339, 349, 350, 361, 367, 376, 399, 408, 409, 410, 413, 432, 433, 434, 435, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 467, 468, 470, 492, 493, 495], "create_fake_bids_dataset": [130, 161], "create_simulation_data": 44, "creation": [129, 149, 161, 305, 306, 336, 349, 471], "creativ": [198, 201, 247], "creativecommon": 247, "credit": 0, "criteo": 0, "criteria": [123, 176, 181, 227, 242, 277], "criterion": [198, 397, 460], "critic": [173, 175], "criugm": 0, "crivello": [120, 195, 244], "crop": [187, 188, 358], "crop_img": 369, "croppabl": 358, "cross": [28, 32, 33, 36, 37, 40, 42, 44, 45, 51, 55, 96, 98, 109, 118, 120, 123, 130, 131, 152, 161, 162, 169, 172, 223, 236, 266, 277, 281, 289, 298, 299, 300, 301, 302, 303, 304, 361, 371, 380, 386, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 432, 437, 440, 445, 446, 447, 452, 454, 492, 494, 495], "cross_val_scor": [35, 97, 171], "cross_valid": [34, 97, 146, 161, 171, 298, 299, 300, 301], "crossbar": [408, 410, 413, 415, 417, 419, 421, 423, 425], "crowd": 224, "crucial": 173, "csernanski": [120, 223, 281], "csf": [11, 21, 56, 214, 263, 267, 339, 377, 378], "css": [133, 161, 242], "csv": [3, 6, 29, 40, 47, 55, 122, 136, 161, 163, 168, 196, 204, 217, 220, 242, 243, 273, 281, 305, 306, 336, 354, 380, 381, 382, 383, 384, 385, 386, 387, 459, 461, 473], "csv_file": 163, "csv_to_arrai": [136, 161], "ctan": 184, "cube": [188, 470], "cubic": [129, 161, 188, 238, 473], "cubicsplin": [132, 161], "cue": [76, 105, 271, 272], "cumbersom": 178, "cumsum": 63, "cumul": [153, 161, 324], "cuneal": 90, "cur_img": [48, 86], "current": [47, 49, 52, 54, 66, 70, 83, 158, 161, 173, 175, 176, 181, 184, 188, 238, 246, 247, 255, 281, 282, 324, 374, 376, 380, 381, 382, 383, 384, 385, 386, 387, 448, 450, 451, 454, 461], "current_collect": 107, "currentmodul": 184, "curs": 93, "curv": [154, 161, 168, 169, 171, 175, 181, 307, 448, 449, 450, 451, 457, 475], "curv_left": [23, 207, 208, 209, 210, 211, 286], "curv_right": [9, 207, 208, 209, 210, 211, 286], "curv_right_sign": [9, 111], "curvatur": [9, 23, 111, 115, 130, 161, 207, 208, 209, 210, 211, 286], "custom": [9, 15, 22, 23, 47, 66, 111, 114, 115, 130, 146, 154, 156, 161, 173, 185, 336, 338, 343, 411, 448, 450, 451, 469, 492, 495], "custom_funct": [448, 450, 451], "customis": [14, 56, 163, 378], "cut": [14, 49, 65, 93, 132, 133, 134, 144, 146, 147, 158, 161, 182, 198, 336, 349, 390, 393, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 432, 434, 437, 439, 440, 443, 445, 446, 447, 454, 471, 492], "cut_coord": [2, 6, 9, 15, 16, 17, 18, 20, 30, 31, 36, 39, 40, 42, 43, 48, 49, 50, 55, 61, 64, 65, 68, 69, 70, 74, 76, 78, 80, 85, 86, 87, 89, 91, 92, 93, 99, 102, 105, 106, 107, 111, 129, 134, 161, 166, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 432, 437, 440, 445, 446, 447, 454, 471, 492], "cut_scor": 40, "cutax": [415, 417, 419, 421, 423, 425], "cutoff": [6, 65, 67, 69, 88, 108, 112, 154, 161, 185, 298, 299, 300, 301, 303, 304, 354, 381, 382, 383, 384, 385, 386, 387, 459, 461, 472, 473, 495], "cv": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 44, 51, 58, 97, 98, 116, 143, 161, 168, 173, 236, 298, 299, 300, 301, 302, 303, 304], "cv_": [298, 299, 300, 301, 303, 304], "cv_alphas_": 236, "cv_params_": [3, 34, 130, 131, 161, 298, 299, 300, 301], "cv_results_": 98, "cv_score": [34, 97], "cv_scores_": [3, 29, 30, 32, 33, 34, 42, 116, 168, 236, 298, 299, 300, 301, 303, 304], "cv_scores_ova": 35, "cv_scores_ovo": 35, "cwd": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93, 115], "cyan": 492, "cycl": [112, 113, 116, 130, 131, 161, 233], "cytoarchitecton": 215, "cytoarchitectur": 120, "czarina": [0, 131, 161], "c\u00e9line": [0, 149, 161], "d": [0, 26, 41, 50, 51, 56, 58, 69, 75, 99, 120, 123, 162, 166, 175, 176, 183, 195, 198, 204, 205, 214, 221, 225, 228, 244, 255, 260, 261, 264, 267, 277, 279, 282, 292, 324, 331, 354, 377, 378, 433, 444, 473, 481], "d_i": [328, 329], "daan": [120, 377, 378], "daddi": [0, 127, 134, 136, 139, 143, 144, 146, 149, 153, 161], "dadi": [51, 98, 120, 204, 249], "dai": 184, "dale": [22, 23, 114, 115, 120, 202, 207, 208, 209, 210, 211, 212, 248, 256, 286], "dalenberg": [0, 129, 130, 161], "damaraju": [120, 197, 245], "damien": [58, 120, 205, 260], "dan": [0, 120, 146, 149, 161, 231, 257], "danger": [176, 178], "danial": [120, 226, 232, 254, 258], "daniel": [0, 23, 56, 115, 120, 146, 149, 155, 158, 161, 194, 221, 222, 223, 274, 277, 279, 281, 287, 377, 378], "danilo": [0, 124, 125, 127, 128, 134, 136, 161], "danish": 0, "daphn": [120, 175], "dark": [22, 23, 114, 115, 116, 131, 161, 176, 184, 448, 450, 451, 455, 457], "dartel": 281, "dartel_vers": 281, "dartmouth": 0, "darya": [51, 98, 120], "data": [0, 1, 2, 7, 18, 20, 24, 26, 28, 31, 34, 36, 38, 43, 45, 46, 50, 51, 53, 58, 59, 60, 63, 64, 66, 68, 70, 71, 72, 75, 76, 77, 78, 79, 80, 83, 85, 89, 90, 91, 94, 98, 100, 101, 102, 104, 105, 106, 108, 113, 116, 118, 120, 121, 123, 129, 130, 131, 132, 136, 139, 140, 141, 142, 143, 144, 146, 147, 149, 152, 153, 154, 156, 157, 158, 159, 161, 163, 164, 166, 169, 170, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 193, 194, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 234, 235, 236, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 316, 317, 318, 320, 322, 323, 326, 327, 336, 343, 344, 345, 349, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 432, 433, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 471, 473, 475, 477, 479, 480, 481, 483, 492, 494, 495], "data_2d": [398, 400, 401], "data_bound": [398, 400, 401], "data_dir": [62, 99, 100, 108, 113, 155, 161, 186, 216, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288], "data_figure_run01": [41, 88], "data_fil": 31, "data_gen": [57, 130, 158, 161, 175], "data_img": [389, 392], "data_mask": [65, 104], "data_nam": [284, 285], "data_softwar": 227, "data_typ": [56, 90, 101, 111, 112, 113, 114, 115, 116, 322], "data_usage_agr": [223, 281], "databas": [71, 103, 120, 200, 228, 272, 277], "dataconversionwarn": [102, 105, 106], "datad": 12, "datadb": [213, 266], "datafram": [33, 62, 63, 65, 70, 71, 74, 75, 76, 77, 78, 79, 80, 99, 100, 123, 131, 152, 156, 157, 161, 234, 242, 248, 249, 260, 261, 262, 270, 271, 272, 281, 305, 306, 318, 336, 337, 339, 343, 349, 350, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 435, 436, 438, 458, 459, 460, 461, 470, 473], "dataia": 0, "dataset": [1, 3, 4, 7, 9, 10, 13, 14, 19, 20, 21, 22, 23, 24, 25, 26, 28, 40, 45, 47, 52, 54, 55, 56, 57, 60, 65, 67, 68, 69, 70, 72, 73, 76, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 101, 102, 103, 104, 107, 109, 110, 111, 112, 114, 115, 117, 118, 120, 122, 123, 130, 131, 132, 133, 136, 137, 141, 145, 146, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 167, 168, 169, 172, 174, 177, 180, 181, 182, 183, 184, 185, 188, 194, 195, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 218, 220, 223, 224, 225, 226, 227, 228, 231, 232, 298, 299, 300, 301, 304, 305, 310, 316, 321, 322, 324, 332, 336, 339, 343, 345, 349, 352, 353, 355, 356, 359, 361, 365, 366, 370, 374, 376, 378, 379, 380, 386, 387, 397, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 435, 436, 439, 440, 441, 442, 444, 447, 448, 449, 450, 451, 452, 454, 455, 462, 469, 470, 471, 477, 478, 479, 492, 494, 495], "dataset_descript": [62, 74, 376], "dataset_fil": 43, "dataset_ho": 10, "dataset_ju": 10, "dataset_path": 339, "dataset_vers": [282, 283], "datatyp": [56, 90, 101], "date": [0, 155, 161, 245, 248, 267, 277, 279], "davatziko": [56, 120, 377, 378], "david": [0, 23, 56, 115, 120, 123, 158, 161, 183, 194, 202, 212, 221, 222, 228, 248, 255, 274, 277, 279, 287, 377, 378, 397], "davidson": [120, 328, 329], "dawn": [23, 115, 120, 222, 287], "db": [44, 120, 194, 328, 329], "db_name": [56, 90, 101], "dc": [120, 194, 274], "ddof": [381, 382, 383, 384, 385, 386, 387, 473], "de": [0, 120, 146, 149, 161, 194, 328, 329, 344], "deactiv": [70, 478], "deal": [10, 11, 36, 49, 66, 78, 85, 93, 122, 127, 152, 161, 178, 383, 479], "deanna": [58, 120, 194, 205, 227, 260, 262, 274], "debat": 165, "debia": [303, 304], "debian": [128, 161], "debias": [303, 304], "deborah": [120, 212], "debug": [175, 176, 183, 236, 238], "decai": 472, "decemb": [120, 134, 135, 149, 161, 198, 264, 282], "decent": 184, "decid": 178, "decim": [152, 161, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 440], "decis": [99, 120, 169, 173, 298, 299, 300, 301, 303, 304, 324], "decision_funct": [298, 299, 300, 301, 303, 304], "declar": [6, 176, 178, 235, 238], "decod": [1, 7, 36, 39, 40, 42, 44, 45, 49, 96, 109, 120, 122, 123, 130, 131, 132, 141, 142, 146, 149, 152, 153, 154, 155, 156, 157, 161, 169, 173, 177, 181, 182, 183, 188, 219, 221, 266, 269, 276, 286, 336, 339, 355, 359, 361, 366, 380, 386, 387, 410, 436, 437, 444, 446, 447, 451, 452, 454, 469, 471, 476, 477, 493, 494, 495], "decoderregressor": [42, 149, 152, 153, 161, 169, 298, 301], "decompos": [50, 162, 166, 178, 461], "decomposit": [48, 49, 50, 91, 96, 103, 109, 118, 120, 130, 134, 141, 144, 152, 158, 161, 166, 167, 182, 228, 263, 360, 361, 366, 380, 383, 386, 447, 452, 461, 474, 479, 494], "decompositionestim": [305, 306, 459], "decompress": 186, "deconvolv": [99, 120, 168], "decor": [131, 155, 161, 176], "decorrel": 175, "decreas": [53, 65, 94, 120, 175, 176, 212, 432, 445, 446, 447, 454], "dedic": [176, 281], "deem": [129, 161], "deep": [68, 234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "deephealth": 0, "def": [40, 41, 44, 47, 53, 65, 66, 99, 107, 116, 176, 184, 448, 450, 451], "def_dofmax": 324, "def_tini": 324, "default": [3, 8, 9, 11, 14, 15, 16, 23, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 42, 48, 53, 55, 56, 60, 62, 63, 65, 69, 72, 74, 78, 82, 83, 88, 90, 92, 93, 95, 101, 102, 103, 111, 115, 116, 118, 123, 129, 130, 131, 132, 134, 136, 139, 140, 145, 146, 147, 149, 152, 153, 154, 155, 156, 158, 159, 161, 168, 169, 173, 175, 176, 177, 184, 186, 187, 188, 234, 235, 236, 238, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 317, 318, 323, 324, 326, 327, 328, 329, 331, 332, 333, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 360, 361, 364, 365, 366, 367, 368, 369, 370, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 477, 478, 479, 492, 494], "default_rng": 176, "defaultmod": 262, "defin": [3, 6, 9, 21, 23, 29, 30, 32, 33, 36, 37, 42, 47, 49, 54, 58, 61, 65, 67, 69, 70, 71, 75, 76, 79, 80, 90, 97, 100, 111, 112, 115, 120, 129, 130, 153, 154, 155, 156, 161, 163, 165, 166, 167, 168, 173, 176, 177, 178, 180, 181, 184, 187, 188, 194, 195, 215, 219, 227, 242, 244, 248, 262, 274, 276, 298, 299, 300, 301, 303, 304, 323, 327, 331, 336, 338, 339, 343, 369, 377, 432, 433, 434, 437, 439, 440, 442, 443, 445, 446, 447, 461, 462, 463, 464, 465, 467, 468, 479, 486], "definit": [54, 62, 90, 93, 131, 161, 163, 171, 172, 175, 176, 177, 181, 185, 204, 220, 224, 249, 317, 376, 381, 382, 384, 385, 387, 435, 464, 465, 467, 468, 479, 495], "deg_of_freedom": 107, "degre": [56, 66, 99, 107, 178, 242, 324, 327, 333, 378, 448, 450, 451], "degree_binar": 242, "degree_weight": 242, "dehaen": [70, 71, 120, 183, 200, 206, 272], "del": [0, 44], "delai": [66, 133, 161, 184, 336, 338, 343], "delcroix": [120, 195, 244], "deleg": [158, 161], "delettr": [0, 149, 161], "delimit": [3, 40, 41, 97, 99, 122, 186], "delin": 21, "deliv": [178, 181], "demand": 281, "demean": [156, 161, 377, 378], "dement": [120, 223, 281], "dementia": 281, "demian": [0, 120, 127, 146, 161, 204, 249], "demo": [37, 99, 100, 108, 110, 113, 117, 118, 122, 152, 156, 161, 176, 190, 199, 234, 269, 298, 307, 309, 316, 317, 318, 319, 320, 322, 444, 494], "demograph": [120, 194, 274], "demonstr": [14, 39, 40, 56, 62, 64, 93, 104, 157, 159, 161, 167, 168, 227, 397, 492], "den": 339, "denghien": [70, 120, 206], "deni": [70, 71, 120, 168, 200, 206, 272], "denmark": 0, "denois": 378, "denoise_strategi": [56, 132, 161, 378], "denot": [3, 6, 15, 146, 161, 178, 186, 187, 188, 219, 377, 378, 408, 430, 446, 461, 462, 463, 464], "dens": [52, 54, 162, 175, 391], "densiti": [42, 57, 74, 175, 180, 182, 214, 223, 242, 267, 281], "denver": 0, "deoxi": 178, "deoxyhaemoglobin": [178, 181], "depart": [0, 181, 229], "depend": [6, 14, 15, 39, 65, 70, 88, 94, 99, 101, 102, 105, 120, 129, 132, 136, 141, 146, 149, 161, 169, 173, 175, 176, 178, 181, 184, 186, 242, 246, 247, 250, 251, 255, 258, 263, 274, 298, 299, 300, 301, 303, 304, 305, 306, 323, 327, 336, 349, 351, 352, 359, 383, 386, 396, 397, 445, 459, 470, 471, 492], "depict": [55, 176, 187], "deploi": [129, 161], "deploy": 176, "deprec": [112, 113, 116, 129, 130, 131, 132, 136, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 154, 156, 158, 161, 176, 184, 199, 233, 234, 246, 247, 255, 259, 283, 298, 299, 300, 301, 305, 306, 324, 332, 339, 377, 380, 381, 382, 383, 384, 385, 386, 387, 397, 433, 459, 461, 464, 465, 469], "deprecated_cmap": 12, "deprecationwarn": [103, 246, 247, 255, 333, 380, 381, 382, 383, 384, 385, 386, 387, 461], "dept": 0, "depth": [22, 23, 24, 114, 115, 120, 152, 161, 202, 207, 208, 209, 210, 211, 248, 286, 442, 448, 450, 451, 455, 457, 477], "der": [120, 202, 248], "derek": [0, 149, 161], "deriv": [6, 46, 59, 62, 66, 67, 69, 74, 99, 100, 104, 108, 112, 113, 118, 131, 153, 155, 156, 161, 167, 175, 177, 181, 182, 188, 198, 201, 212, 214, 216, 228, 242, 263, 305, 306, 336, 338, 339, 340, 342, 343, 346, 348, 349, 351, 362, 374, 375, 376, 377, 378, 398, 399, 426, 433, 445, 447, 448, 450, 451, 452, 459, 494], "derivatives_fold": [62, 339], "derived_response_funct": 66, "desc": [99, 100, 108, 113, 339, 377, 378], "descent": [175, 306], "describ": [0, 6, 18, 37, 63, 65, 67, 71, 121, 122, 123, 132, 161, 169, 175, 176, 178, 183, 184, 188, 200, 217, 227, 235, 242, 272, 273, 331, 334, 337, 339, 343, 351, 378, 397, 436], "descrip": [56, 90, 101], "descript": [6, 58, 121, 123, 129, 131, 132, 133, 152, 156, 161, 176, 184, 186, 187, 198, 206, 217, 226, 229, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 265, 269, 273, 274, 275, 277, 278, 279, 280, 284, 285, 287, 338, 351, 354, 358, 366, 371, 372, 378, 397, 495], "descriptor": [173, 337, 397], "deserv": [0, 188], "design": [6, 33, 41, 44, 60, 61, 62, 64, 67, 68, 69, 70, 72, 73, 74, 75, 78, 79, 80, 81, 100, 105, 108, 112, 118, 120, 130, 152, 153, 154, 156, 159, 161, 168, 171, 175, 176, 178, 179, 180, 181, 195, 206, 217, 265, 272, 323, 326, 327, 328, 329, 334, 336, 337, 343, 345, 349, 350, 351, 352, 359, 365, 376, 379, 435, 436, 447, 452, 471, 478, 494, 495], "design_column": [62, 334], "design_fil": 70, "design_matric": [61, 62, 69, 70, 99, 177, 336], "design_matrices_": [6, 64, 65, 68, 99, 112, 113], "design_matrix": [6, 41, 61, 62, 64, 65, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 108, 112, 113, 337, 343, 349, 350, 351, 379, 435, 436], "design_matrix1": [70, 206, 265], "design_matrix2": [70, 206, 265], "desikan": [120, 212], "desir": [2, 62, 184, 188, 305, 306, 335, 336, 338, 343, 349, 352, 374, 426, 427, 459], "despit": 183, "destin": [439, 440, 446, 447, 454], "destination_path": 471, "destrieux": [9, 22, 23, 111, 114, 115, 116, 120, 128, 131, 141, 152, 161, 190, 248, 256, 319, 492], "destrieux_atla": [9, 22, 23, 111, 114, 115], "det": [149, 161, 253], "detail": [2, 3, 8, 9, 12, 14, 15, 16, 19, 22, 23, 26, 28, 29, 31, 33, 39, 46, 48, 50, 52, 54, 58, 60, 62, 69, 70, 71, 73, 80, 82, 90, 94, 99, 100, 102, 103, 107, 111, 114, 115, 118, 122, 123, 125, 141, 146, 149, 158, 161, 162, 165, 166, 168, 169, 170, 171, 173, 174, 175, 176, 179, 184, 185, 186, 188, 190, 194, 206, 212, 215, 230, 234, 242, 246, 250, 251, 254, 263, 268, 272, 274, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 305, 306, 329, 336, 339, 349, 354, 358, 366, 371, 372, 376, 378, 380, 381, 382, 383, 384, 385, 386, 387, 397, 455, 458, 459, 461, 463, 478, 479, 484, 485, 492, 493], "details": 48, "detect": [42, 66, 76, 78, 88, 99, 102, 106, 120, 162, 173, 178, 181, 188, 234, 377, 378, 458, 492], "determin": [61, 78, 93, 99, 100, 102, 107, 173, 175, 176, 201, 215, 236, 304, 339, 350, 374, 389, 390, 391, 392, 393, 394, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 439, 440, 442, 446, 447, 454, 458, 477], "determinist": [133, 157, 161, 181, 244, 246, 248, 250, 251, 253, 254, 256, 257, 258, 458], "detrend": [33, 40, 41, 49, 51, 52, 53, 54, 55, 56, 58, 61, 88, 90, 91, 93, 98, 99, 122, 127, 146, 154, 156, 161, 187, 188, 305, 306, 318, 354, 360, 381, 382, 383, 384, 385, 386, 387, 433, 459, 461, 473, 474, 479], "detrended_data": 88, "detriment": [42, 378], "dev": [176, 184, 213, 266], "dev49": 479, "develop": [6, 47, 55, 56, 84, 88, 90, 91, 120, 132, 144, 149, 161, 162, 163, 165, 167, 175, 176, 183, 184, 190, 212, 224, 231, 236, 257, 263, 433], "development_dataset": [51, 98], "development_fmri": [47, 48, 49, 52, 53, 54, 55, 56, 58, 84, 90, 91, 94, 104], "developmental_fmri": [150, 161], "deviat": [51, 162, 298, 299, 300, 301, 303, 304], "devis": 175, "df": [70, 99, 107, 470], "df_den": [325, 326, 328, 329, 330], "df_model": [323, 327], "df_num": [325, 326, 328, 329], "df_resid": [158, 161], "df_residu": 327, "dhrf": [340, 342, 346, 348], "di": 120, "diag": [187, 444], "diagnosi": [181, 183], "diagnost": [168, 172, 196], "diagon": [53, 54, 56, 58, 85, 139, 161, 175, 187, 234, 238, 240, 241, 368, 369, 428, 444, 462], "diagram": [30, 178], "diamagnet": [178, 181], "diamet": 181, "diamond": 83, "dickerson": [120, 212], "dict": [88, 105, 123, 131, 161, 195, 197, 234, 235, 236, 245, 246, 247, 255, 277, 278, 279, 280, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 323, 327, 332, 336, 339, 345, 349, 351, 354, 375, 376, 380, 381, 382, 383, 384, 385, 386, 387, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 433, 434, 442, 443, 450, 451, 455, 458, 459, 460, 461, 469, 471, 473], "dict_init": [48, 306], "dict_kei": 58, "dict_learn": [48, 50, 166], "dict_learning_onlin": 48, "dictionari": [21, 23, 33, 46, 59, 65, 67, 100, 104, 108, 112, 113, 118, 120, 123, 153, 161, 164, 168, 169, 181, 182, 188, 195, 204, 220, 221, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 284, 285, 286, 287, 298, 299, 300, 301, 305, 306, 315, 336, 349, 351, 361, 362, 375, 376, 380, 384, 385, 397, 408, 410, 430, 431, 432, 433, 434, 442, 444, 445, 447, 452, 455, 461, 494, 495], "dictionary_learning_resting_st": 48, "dictlearn": [48, 50, 130, 134, 144, 161, 166, 167], "dictlearning_components_img": 48, "did": [56, 91, 104, 140, 156, 161, 178], "didact": [3, 139, 161, 169, 171, 176], "didn": 176, "diego": [0, 120, 194, 274], "dieterich": [120, 212], "diff": [158, 161], "differ": [2, 6, 9, 15, 19, 20, 21, 22, 23, 28, 29, 45, 46, 51, 52, 54, 55, 58, 59, 63, 65, 66, 67, 68, 69, 70, 71, 74, 78, 79, 80, 88, 90, 93, 97, 98, 99, 101, 102, 103, 111, 112, 114, 115, 118, 120, 122, 129, 131, 132, 147, 153, 155, 161, 163, 164, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 181, 185, 186, 194, 198, 204, 206, 213, 226, 234, 236, 249, 258, 263, 266, 289, 290, 291, 292, 293, 294, 298, 300, 301, 303, 304, 328, 329, 332, 336, 338, 339, 343, 345, 349, 355, 359, 361, 365, 366, 374, 377, 380, 381, 382, 384, 385, 386, 396, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 432, 434, 437, 439, 440, 444, 445, 446, 447, 452, 459, 461, 470, 471, 477, 479, 494, 495], "differenti": [65, 69], "difficult": [85, 162, 169, 174, 188], "difficulti": 34, "diffus": [120, 168, 181], "difumo": [21, 47, 153, 161, 190, 249], "difumo_atlas": 479, "digicosm": 0, "digit": [120, 195], "dil_bin_p_values_and_vt": 93, "dil_bin_p_values_and_vt_img": 93, "dilat": [88, 93, 181, 187, 268, 290, 293, 389, 390, 391, 393, 394], "dillon": [146, 161], "dim": [3, 21, 23, 29, 47, 56, 90, 101, 115, 137, 139, 143, 161, 168, 324, 326, 328, 329, 432, 445, 446, 447, 454], "dim_info": [56, 90, 101], "dimartino": [23, 115, 120, 222, 287], "dimens": [2, 15, 21, 29, 33, 34, 40, 47, 49, 65, 86, 93, 122, 132, 154, 161, 172, 178, 181, 187, 188, 194, 234, 240, 241, 249, 255, 274, 281, 298, 299, 300, 301, 305, 306, 324, 326, 328, 329, 336, 351, 354, 355, 361, 362, 365, 366, 371, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 430, 433, 444, 445, 459, 461, 473, 495], "dimension": [6, 26, 49, 69, 93, 136, 153, 158, 161, 175, 183, 196, 204, 240, 241, 249, 255, 274, 305, 306, 324, 355, 396, 458, 459, 460], "dimitri": [0, 120, 129, 134, 146, 161, 166, 175, 176, 200, 235, 238, 272, 461], "dimitripapadopoulo": 176, "diogo": [0, 158, 161], "dir": [339, 374], "dirac": [336, 338, 343], "direct": [6, 15, 40, 51, 93, 97, 120, 143, 152, 161, 163, 164, 176, 184, 188, 204, 223, 228, 229, 249, 255, 281, 287, 298, 299, 336, 349, 371, 373, 374, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 412, 414, 416, 417, 418, 420, 421, 422, 423, 424, 427, 428, 432, 434, 437, 439, 440, 443, 445, 446, 447, 462, 471, 492, 495], "directli": [3, 6, 32, 33, 47, 48, 51, 70, 85, 88, 108, 112, 113, 138, 142, 144, 146, 161, 165, 168, 171, 176, 178, 186, 188, 277, 339, 397, 445], "directori": [3, 6, 62, 70, 93, 100, 108, 113, 118, 165, 176, 186, 235, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 297, 298, 299, 300, 301, 303, 304, 305, 306, 336, 339, 349, 355, 374, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 441, 459, 460, 461], "disabl": [116, 123, 131, 132, 147, 149, 153, 161, 175, 458], "disadvantag": 188, "discard": [6, 123, 178, 241, 277, 297, 339, 374, 391, 394, 473, 477], "discard_diagon": [234, 240], "discount": 65, "discourag": 176, "discov": [2, 176, 182], "discoveri": [6, 23, 75, 76, 78, 80, 115, 120, 178, 181, 183, 222, 287, 331], "discrep": [65, 175], "discret": [65, 69, 129, 153, 154, 161, 198, 336, 345, 364, 377, 381, 382, 383, 384, 385, 386, 387, 473], "discrete_atlas_img": 11, "discrete_vers": 11, "discrimin": [3, 29, 31, 51, 93, 98, 120, 122, 168, 182, 183], "discriminant_analysi": 97, "discuss": [49, 56, 112, 113, 116, 146, 161, 165, 168, 171, 173, 178, 180, 184, 187, 378, 397, 493], "diseas": 223, "disk": [2, 3, 4, 6, 100, 103, 107, 108, 113, 122, 123, 129, 146, 152, 153, 158, 161, 168, 176, 186, 187, 188, 216, 259, 269, 277, 279, 282, 298, 299, 312, 313, 314, 336, 349, 388, 448, 450, 451, 469, 471], "disord": [120, 181, 183, 212], "dispers": [6, 65, 66, 177, 326, 328, 329, 336, 338, 340, 343, 346], "displac": [56, 198, 263, 377], "displai": [2, 3, 4, 6, 10, 11, 13, 16, 17, 18, 20, 21, 22, 23, 25, 26, 39, 40, 42, 47, 48, 49, 50, 51, 55, 61, 62, 64, 65, 66, 67, 68, 69, 70, 74, 79, 80, 83, 85, 86, 87, 88, 90, 91, 92, 93, 97, 98, 99, 102, 105, 106, 112, 114, 115, 129, 132, 133, 138, 143, 144, 146, 147, 149, 153, 154, 156, 158, 161, 163, 166, 167, 173, 178, 182, 187, 307, 336, 343, 349, 382, 385, 387, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 461, 469, 471, 479, 495], "display_mod": [2, 6, 9, 13, 14, 15, 18, 30, 31, 36, 39, 40, 42, 43, 48, 49, 53, 58, 62, 64, 65, 68, 69, 74, 75, 78, 86, 87, 91, 100, 102, 105, 106, 107, 111, 122, 139, 156, 161, 336, 349, 376, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 434, 437, 439, 440, 443, 445, 446, 447, 471, 492], "displayed_map": [54, 382, 385, 461], "displayed_spher": [58, 387], "disregard": 304, "dist": 184, "distanc": [33, 303, 304, 336, 349, 428, 470, 471, 477, 478], "distinct": [79, 99, 120, 175, 194, 248, 274], "distinguish": [51, 93, 97, 98, 169, 173, 178, 182, 186], "distort": [158, 161, 377], "distribut": [3, 6, 14, 15, 22, 23, 31, 32, 38, 48, 49, 55, 78, 93, 97, 114, 115, 120, 153, 157, 161, 168, 173, 175, 178, 181, 202, 207, 208, 209, 210, 211, 213, 221, 256, 266, 324, 351, 397, 441], "dive": 183, "diverg": 14, "divid": [55, 75, 76, 78, 116, 139, 161, 169, 178, 181, 240, 459], "divis": [0, 90, 227], "dl": [120, 214, 267, 292], "dm_titl": 99, "dmn": [20, 51, 61, 478], "dmn_contrast": 61, "dmn_coord": [58, 188, 492], "dmn_network": 86, "dmn_node": 20, "dmn_z_map": 61, "dni": 219, "do": [0, 3, 6, 9, 22, 24, 25, 30, 31, 33, 34, 40, 42, 49, 50, 51, 57, 61, 64, 65, 66, 68, 74, 76, 78, 79, 93, 97, 99, 100, 101, 108, 111, 113, 114, 116, 122, 133, 143, 147, 152, 156, 161, 162, 166, 167, 168, 169, 171, 173, 175, 178, 183, 184, 186, 187, 188, 234, 244, 268, 298, 299, 300, 301, 302, 303, 304, 305, 306, 336, 345, 349, 351, 354, 366, 381, 382, 383, 384, 385, 386, 387, 392, 394, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 459, 473, 477, 492], "do_cca": 305, "doc": [129, 130, 131, 132, 133, 134, 139, 141, 142, 146, 149, 151, 152, 155, 156, 157, 158, 159, 161, 176], "dock": [0, 131, 132, 139, 143, 145, 146, 147, 149, 150, 158, 161], "docstr": [129, 130, 147, 152, 155, 158, 161, 176, 184, 326, 328, 329], "doctest": [131, 161], "doctre": 176, "document": [0, 2, 3, 4, 6, 19, 26, 43, 44, 49, 50, 52, 53, 56, 58, 97, 99, 103, 107, 120, 121, 122, 125, 127, 130, 132, 133, 134, 136, 138, 139, 140, 141, 146, 149, 151, 156, 157, 161, 163, 165, 166, 167, 168, 169, 170, 171, 173, 174, 182, 183, 186, 188, 194, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 492, 493], "doe": [3, 6, 29, 49, 65, 66, 74, 102, 122, 123, 133, 136, 145, 149, 158, 161, 168, 169, 173, 175, 176, 177, 178, 183, 188, 244, 254, 266, 325, 327, 330, 339, 360, 372, 374, 376, 393, 401, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 458, 474, 492], "doesn": [103, 176], "dof": [178, 324, 333], "dofmax": 324, "dohmatob": [0, 49, 120, 124, 127, 134, 136, 139, 161, 165, 166, 174, 461], "doi": [0, 3, 22, 23, 31, 32, 37, 38, 40, 41, 44, 48, 49, 51, 56, 58, 69, 75, 97, 98, 102, 114, 115, 120, 123, 162, 163, 165, 167, 169, 170, 173, 174, 181, 183, 193, 194, 195, 197, 198, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 234, 242, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 266, 267, 272, 274, 275, 276, 277, 279, 281, 282, 286, 287, 292, 300, 301, 305, 306, 331, 351, 354, 377, 378, 397, 433, 460, 466, 473, 474], "domain": [183, 306], "domin": [168, 287], "don": [9, 24, 33, 65, 80, 111, 123, 132, 161, 176, 183, 184, 277, 279, 442, 477, 492], "donald": 120, "donder": 0, "done": [2, 3, 4, 6, 34, 36, 38, 41, 42, 43, 44, 48, 49, 51, 53, 57, 58, 65, 70, 71, 78, 93, 101, 102, 103, 105, 116, 122, 123, 156, 158, 161, 162, 163, 165, 168, 169, 171, 173, 175, 178, 184, 187, 235, 236, 298, 299, 300, 301, 303, 304, 305, 306, 336, 349, 354, 355, 363, 373, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 459, 460, 461, 473], "dor": 51, "dorsal": [23, 115, 116, 448, 450, 451], "dorsalattent": 262, "dosenbach": [120, 137, 161, 190, 227, 242, 260, 262], "dot": [41, 44, 55, 99, 103, 175, 326, 327, 328, 329, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "doubl": [176, 177, 250, 251], "dougla": [120, 328, 329], "down": [2, 68, 103, 165, 175, 176, 300], "download": [4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 118, 120, 121, 136, 137, 139, 140, 142, 146, 149, 152, 153, 155, 161, 162, 163, 165, 168, 176, 183, 190, 194, 203, 204, 216, 219, 220, 222, 227, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 297, 495], "download_new": [277, 279], "downloaded_fil": [216, 259, 282], "downsampl": [108, 113, 166, 187, 203, 263, 433], "downsid": [56, 65], "downsiz": 165, "downstream": [101, 131, 161], "dp": 116, "dparsf": 242, "dpi": [399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "dr": 223, "draft": 176, "drag": 184, "draw": [14, 15, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 436, 477], "draw_2d": [398, 400, 401], "draw_cross": [402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 437, 440, 445, 446, 447, 454], "draw_left_right": [398, 400, 401], "draw_posit": [398, 400, 401], "draw_scale_bar": [398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "drawback": 65, "drawn": [24, 65, 93, 336, 349, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 437, 440, 445, 446, 447, 454, 471, 477], "drf": 66, "drift": [6, 67, 68, 69, 99, 108, 112, 198, 336, 343, 377, 473], "drift_model": [6, 33, 63, 65, 68, 69, 177, 336, 339, 343, 478], "drift_ord": [33, 63, 65, 177, 336, 339, 343, 478], "drive": 55, "driven": [65, 167, 176, 183, 198, 246, 343], "drop": [65, 68, 99, 141, 142, 143, 147, 161, 176, 183, 184], "ds000005": 218, "ds000030": [62, 264], "ds000030_r1": [282, 283], "ds000228": [203, 263], "dsm_iv_tr": 242, "dsp": 206, "dsp_minus_ssp": [70, 478], "dsp_minus_ssp_for_dst": [70, 478], "dsst": 0, "dst": 206, "dst_minus_sst": [70, 478], "dst_minus_sst_for_dsp": [70, 478], "dstdsp": 206, "dstdsp_minus_sstssp": [70, 478], "dstssp": 206, "dt": 66, "dtseri": [377, 378], "dtype": [3, 10, 11, 20, 23, 33, 36, 40, 41, 44, 49, 52, 53, 54, 56, 58, 66, 76, 78, 85, 88, 90, 91, 93, 100, 103, 115, 140, 141, 142, 146, 147, 161, 186, 337, 340, 341, 342, 346, 347, 348, 353, 355, 363, 364, 367, 369, 381, 382, 383, 384, 385, 386, 387, 388, 458, 460, 467, 479], "dtyulman": [146, 161], "dua": 223, "dual": [34, 51, 53, 97, 98, 120, 175, 235, 242, 298, 300], "dual_regress": 242, "dualiti": 238, "duan": [23, 115, 120, 222, 287], "dubi": [58, 120, 205, 260], "dubnica": 0, "duchi": [120, 175], "due": [10, 11, 14, 34, 36, 39, 49, 65, 69, 78, 85, 93, 129, 133, 149, 155, 156, 157, 158, 161, 165, 169, 171, 176, 178, 242, 303, 304, 492], "duff": [120, 194, 274], "dugr\u00e9": [0, 131, 161], "duke": 0, "dummi": [3, 98, 154, 161, 168, 169, 171, 176, 298, 299, 300, 301, 343], "dummy_classifi": [3, 32, 298, 300], "dummy_decod": 3, "dummy_output_": [298, 299, 300, 301], "dummy_regressor": [169, 299, 301], "dummyclassifi": [97, 98, 154, 161, 171, 298, 299, 300, 301], "dummyregressor": [298, 299, 300, 301], "duplic": [149, 161, 199], "dupr": [0, 143, 147, 149, 150, 151, 161], "duran": [0, 129, 161], "durat": [6, 33, 63, 65, 66, 71, 131, 161, 177, 178, 186, 338, 343, 438], "dure": [3, 6, 55, 56, 64, 93, 99, 100, 120, 122, 132, 146, 153, 161, 168, 169, 175, 176, 178, 181, 183, 184, 188, 216, 217, 228, 236, 238, 242, 255, 349, 351, 389, 390, 391, 393, 394, 442, 458], "dutch": 0, "dvar": [56, 377], "dvipng": 184, "dviwar": 184, "dwi": 62, "dwindl": 175, "dx": [120, 183], "dx_group": 242, "dylan": [23, 37, 115, 120, 173, 222, 287], "dynam": [29, 120, 168, 378], "e": [3, 6, 15, 22, 24, 29, 39, 40, 44, 47, 48, 56, 58, 65, 75, 87, 93, 99, 102, 103, 105, 114, 120, 122, 123, 130, 134, 152, 154, 155, 158, 161, 162, 163, 166, 168, 171, 173, 174, 175, 176, 177, 178, 180, 181, 183, 184, 187, 188, 194, 198, 201, 202, 204, 205, 212, 221, 225, 227, 228, 234, 235, 236, 238, 247, 248, 255, 260, 261, 262, 264, 274, 277, 279, 282, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 326, 328, 329, 336, 343, 349, 351, 352, 353, 354, 355, 356, 358, 373, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 442, 445, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 467, 473, 477, 492], "e29482": [120, 183], "e501": [254, 298, 300], "e_i": [328, 329], "each": [3, 6, 14, 15, 20, 21, 22, 24, 29, 34, 36, 37, 39, 40, 47, 48, 49, 50, 51, 55, 56, 58, 61, 62, 63, 68, 69, 70, 77, 79, 85, 87, 93, 97, 98, 99, 100, 102, 105, 108, 113, 114, 115, 123, 141, 146, 147, 149, 152, 154, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 181, 183, 184, 186, 187, 188, 194, 195, 198, 200, 203, 204, 212, 215, 218, 221, 226, 227, 229, 234, 235, 236, 238, 242, 245, 256, 262, 263, 274, 277, 279, 287, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 317, 318, 326, 328, 329, 336, 338, 339, 343, 349, 351, 354, 360, 366, 371, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 392, 394, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 432, 434, 437, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 473, 474, 476, 477, 492], "each_index_of_map3": [50, 166], "earli": [39, 120, 174, 233, 277, 279, 354, 458, 473], "early_stop": [175, 236], "earlystopprob": 175, "eas": 176, "easi": [16, 61, 67, 74, 93, 112, 122, 123, 166, 167, 169, 172, 176, 177, 181, 183, 188, 377, 495], "easier": [6, 23, 65, 115, 135, 140, 155, 161, 167, 168, 175, 176, 440], "easiest": [163, 168, 169], "easili": [2, 3, 9, 15, 23, 30, 31, 39, 49, 58, 62, 93, 111, 115, 122, 123, 156, 161, 168, 169, 171, 173, 174, 175, 176, 177, 181, 184, 250, 251, 272, 349, 351], "ec": 49, "eccentr": [460, 466], "echo": [181, 339], "econom": [120, 397], "econometr": [120, 323, 327, 328, 329], "econometricanalysi": [120, 323, 327], "ecosystem": 182, "ed": [120, 163, 328, 329], "edg": [15, 47, 52, 54, 58, 93, 149, 161, 162, 163, 181, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 444, 453, 495], "edge_cmap": [147, 149, 161, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 453], "edge_kwarg": [402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434], "edge_threshold": [22, 47, 50, 53, 54, 58, 114, 147, 149, 161, 166, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 453, 492], "edge_vmax": [53, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434], "edge_vmin": [53, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434], "edgecolor": [32, 40, 131, 161, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 434, 437, 439, 440, 443, 445, 446, 447], "edinburgh": 120, "edit": [120, 154, 161, 176, 184, 323, 327], "editor": [120, 162, 214, 234, 267], "edmond": [0, 154, 161], "edu": [120, 223, 227, 228, 232, 255, 258, 281, 323, 327], "educ": [120, 229, 274, 281, 323, 327, 454], "edward": [120, 183], "eeg": 181, "eff_map": 6, "effect": [49, 53, 61, 65, 67, 68, 69, 74, 78, 79, 88, 94, 99, 102, 112, 120, 131, 132, 145, 161, 167, 169, 173, 175, 177, 178, 188, 212, 234, 235, 236, 250, 251, 278, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 324, 325, 326, 328, 329, 330, 332, 333, 336, 339, 349, 351, 378, 380, 381, 382, 383, 384, 385, 386, 387, 397, 432, 445, 446, 447, 452, 454, 458, 459, 460, 461, 469], "effect_s": [6, 70, 79, 99, 181, 324, 336, 349], "effect_statmap": [62, 74, 376], "effect_vari": [70, 79, 324, 336, 349], "effects_map_path": [349, 351], "effects_of_interest": [6, 68, 69, 70, 478], "efficaci": [56, 120, 378], "effici": [29, 65, 120, 131, 161, 167, 169, 175, 176, 235, 238, 277, 300, 301], "effort": [176, 184], "eg": [85, 88, 143, 146, 152, 161, 162, 163, 168, 187, 188, 429, 430, 469], "eger": [44, 49, 120, 174], "ehing": 181, "eichel": [120, 197, 245], "eickenberg": [0, 120, 124, 161, 174], "eickhoff": [56, 120, 226, 228, 254, 255, 377, 378], "eigen": [26, 194, 274], "eigen_regress": [26, 274], "eigenvector": 242, "eigenvector_binar": 242, "eigenvector_weight": 242, "eileen": [120, 212], "either": [2, 4, 9, 32, 35, 36, 39, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 102, 103, 104, 105, 106, 111, 122, 146, 153, 155, 161, 163, 165, 176, 177, 180, 181, 186, 188, 198, 253, 254, 255, 258, 266, 298, 299, 300, 301, 326, 328, 329, 336, 349, 352, 353, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 432, 433, 434, 437, 438, 439, 442, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 457, 461, 471, 475, 476, 477, 492, 493], "ej": [120, 194, 274], "ekman": [0, 124, 161], "elabor": [41, 134, 161, 492], "elaps": [36, 42, 43, 44, 48, 102, 105], "elapsed_tim": 44, "elast": 44, "elasticnetcv": 44, "electr": 181, "electroencephalographi": 181, "electrophysiolog": [69, 120], "element": [20, 48, 49, 50, 101, 139, 158, 161, 167, 173, 181, 234, 240, 241, 244, 298, 299, 300, 301, 302, 317, 318, 354, 371, 380, 381, 382, 383, 384, 385, 386, 387, 393, 442, 461, 467, 473, 477], "elementari": 122, "elena": [120, 197, 245], "elev": [22, 114, 448, 450, 451], "elicit": [63, 71, 78], "elimin": [44, 97, 171, 174, 445, 446], "elizabeth": [0, 120, 143, 147, 149, 150, 151, 161, 328, 329], "ell": [323, 327], "ell_": [120, 175], "ell_1": 30, "ell_2": 30, "elli": [0, 158, 161], "elliott": [37, 56, 120, 377, 378], "els": [44, 47, 66, 68, 71, 93, 99, 275, 298, 299, 300, 301, 303, 304, 449], "elsevi": [120, 162, 198, 212], "elvi": [0, 49, 120, 124, 127, 134, 136, 139, 161, 165, 166, 174, 461], "emb": 492, "embed": [51, 98, 469], "emerg": 176, "emerton": 0, "emiliano": [120, 198], "emit": 452, "emma": [120, 194, 274], "emot": 181, "emp_cov": 238, "emphas": [201, 247], "empir": [49, 165, 172, 173, 174, 175, 235, 238, 378, 495], "emploi": [62, 180, 181, 213, 470, 471], "empti": [14, 102, 108, 113, 123, 131, 133, 149, 157, 161, 176, 184, 250, 251, 266, 298, 299, 300, 301, 315, 374, 384, 385, 431, 444, 464, 465], "empty_filt": 277, "en": [0, 56, 178, 193, 195, 219, 244, 378, 381], "enabl": [14, 78, 104, 131, 132, 152, 156, 161, 168, 171, 182, 188, 233, 377, 402, 403, 404, 405, 406, 407, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 493], "enable_metadata_rout": [234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "encapsul": [65, 234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "enclos": 176, "encod": [28, 41, 45, 69, 74, 83, 118, 120, 169, 170, 188, 276, 300, 301, 356, 373, 380, 383, 386, 425, 447, 479, 494], "encompass": 241, "encount": [58, 76, 78, 116, 448, 450, 451], "encourag": [156, 161, 176], "end": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 132, 143, 153, 161, 173, 175, 176, 187, 198, 288, 375, 376, 472, 473], "endian": [56, 90, 101, 142, 161, 363, 369], "endswith": 12, "energi": [175, 198], "enet_cv": 44, "enforc": [49, 88, 158, 161, 162, 175, 176, 303, 304, 336], "engag": 493, "engemann": [120, 168], "engin": [0, 9, 111, 131, 133, 156, 161, 183, 188, 411, 448, 450, 451, 492, 493], "enh": 176, "enhanc": [23, 65, 66, 70, 115, 120, 181, 184, 190, 287, 320, 324, 351, 397], "enough": [14, 58, 168, 175, 183, 188, 369], "ensembl": [3, 31, 39, 42, 120, 168, 169, 172, 174, 181, 182, 214, 300, 301, 495], "ensur": [56, 58, 99, 133, 146, 153, 161, 173, 175, 176, 178, 184, 282, 324, 349, 351, 384, 398, 400, 401, 464], "ensure_finit": [141, 161, 354, 388, 391, 473], "ensure_ndim": 355, "enter": 178, "entir": [168, 173, 188, 384, 464], "entiti": [131, 161], "entri": [83, 129, 131, 161, 176, 184, 298, 299, 300, 301, 326, 328, 329, 358, 449, 477], "enumer": [3, 12, 22, 34, 40, 47, 48, 51, 57, 64, 65, 66, 67, 69, 70, 71, 78, 93, 99, 100, 102, 103, 105, 112, 114], "environ": [36, 49, 52, 53, 58, 62, 74, 76, 120, 132, 146, 147, 149, 156, 161, 168, 183, 184, 186, 198, 288, 454, 493], "ep": [39, 303, 304], "epi": [3, 6, 11, 15, 25, 30, 31, 91, 93, 94, 104, 181, 183, 187, 188, 229, 298, 299, 300, 301, 305, 306, 383, 386, 391, 437, 440, 447, 459, 479, 492], "epi_filenam": [88, 188], "epi_img": [64, 65, 67, 88, 112, 188, 217, 273, 391, 394, 437], "epoch": [65, 306], "equal": [76, 97, 149, 156, 158, 161, 171, 198, 247, 252, 253, 254, 258, 298, 299, 300, 301, 303, 304, 324, 349, 366, 369, 373, 389, 391, 392, 394, 454, 455, 457, 459], "equip": 229, "equival": [14, 80, 105, 129, 161, 173, 175, 178, 184, 201, 272, 298, 299, 300, 301, 305, 306, 365, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 452, 459], "erhardt": [120, 197, 245], "eric": [0, 22, 23, 58, 114, 115, 120, 133, 143, 146, 147, 149, 161, 202, 205, 248, 256, 260], "erik": [120, 197, 245], "erin": [120, 193, 242], "eros": [88, 181, 268, 290, 293, 389, 390, 391, 393, 394], "erramuzp": [146, 161], "errant": [133, 161], "erron": [152, 161, 254], "error": [3, 6, 42, 43, 65, 75, 78, 80, 83, 93, 103, 129, 131, 136, 143, 146, 149, 158, 159, 161, 163, 168, 169, 173, 176, 178, 181, 234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 326, 328, 336, 343, 349, 351, 352, 354, 355, 376, 380, 381, 382, 383, 384, 385, 386, 387, 393, 458, 459, 460, 461, 493], "errorts_statmap": [62, 74, 376], "especi": [93, 147, 156, 161, 162, 168, 186, 455, 495], "esposito": [99, 120], "essen": [120, 123, 194, 221, 274, 277, 279, 378], "essenc": 177, "essenti": [15, 66, 79, 181], "establish": [93, 174, 176, 227], "esteban": [0, 146, 161], "estim": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 63, 64, 66, 68, 69, 70, 71, 74, 77, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 114, 115, 116, 118, 120, 122, 129, 131, 132, 144, 152, 153, 158, 161, 162, 167, 170, 172, 173, 178, 180, 181, 183, 184, 194, 198, 226, 232, 234, 235, 236, 238, 254, 258, 274, 281, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 323, 324, 326, 327, 328, 329, 332, 333, 336, 349, 351, 355, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 394, 397, 444, 452, 458, 459, 460, 461, 486, 494, 495], "est\u00e8v": [0, 124, 125, 127, 128, 134, 136, 139, 161], "eswar": [120, 197, 245], "et": [3, 22, 23, 28, 31, 37, 44, 45, 48, 49, 51, 56, 58, 65, 69, 70, 71, 75, 97, 98, 99, 102, 114, 115, 118, 141, 146, 161, 162, 165, 168, 169, 170, 173, 174, 175, 183, 188, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 234, 235, 238, 242, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 266, 267, 272, 274, 275, 276, 277, 279, 281, 286, 287, 292, 298, 301, 304, 305, 306, 328, 329, 331, 354, 356, 361, 373, 377, 378, 380, 383, 386, 397, 425, 447, 452, 460, 461, 466, 473, 479, 494], "etard": [120, 195, 244], "etc": [42, 43, 79, 88, 91, 93, 101, 123, 174, 177, 181, 186, 274, 298, 299, 300, 301, 303, 304, 328, 386, 479], "ethic": 194, "etzel": [120, 173], "eugen": [120, 194, 274], "eva": [23, 115, 120, 222, 287], "eval": [336, 349, 351, 435], "evalu": [56, 120, 171, 175, 181, 201, 229, 231, 257, 298, 299, 300, 301, 323, 327, 378, 470, 471], "evan": [0, 120, 154, 161, 195, 198, 214, 226, 231, 246, 254, 257, 267, 292], "evanston": 0, "evelina": [120, 202, 248], "evelyn": [44, 49, 120, 174], "even": [31, 42, 49, 50, 58, 64, 78, 99, 123, 131, 149, 154, 161, 175, 176, 183, 277, 279, 472], "evenli": [175, 354, 473], "event": [6, 60, 62, 63, 64, 65, 66, 67, 68, 69, 72, 99, 100, 108, 112, 113, 118, 120, 131, 152, 153, 159, 161, 168, 178, 179, 217, 273, 336, 337, 338, 339, 343, 438, 493, 494, 495], "events_": 33, "events_df": 99, "events_fil": [64, 65, 67, 112], "eventu": [55, 492], "everi": [123, 162, 163, 167, 168, 169, 173, 175, 176, 178, 184, 188, 236, 250, 251, 277, 382, 385, 432, 437, 440, 445, 446, 447, 449, 464, 465, 471, 493], "everyon": [176, 194], "everyth": [99, 184], "everywher": [68, 174], "evid": [120, 198], "ew": [120, 197, 245], "ex": [156, 161, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 437, 439, 440, 442, 446, 447, 448, 450, 451], "exact": [42, 173, 176, 178, 267, 268, 492], "exactli": [6, 83, 93, 97, 108, 132, 161, 175, 176, 298, 299, 300, 301, 302, 374, 454, 477], "examin": [3, 120, 181, 264, 282], "exampl": [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 68, 69, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 114, 115, 116, 117, 119, 121, 122, 130, 131, 132, 133, 134, 139, 140, 141, 142, 143, 146, 147, 149, 151, 152, 155, 156, 157, 159, 161, 166, 169, 170, 171, 172, 175, 176, 177, 178, 180, 184, 186, 230, 242, 244, 259, 303, 326, 328, 329, 353, 374, 448, 458, 460, 481, 482, 484, 489, 493, 494, 495], "exce": [58, 236], "exceed": [56, 143, 161], "excel": 34, "except": [5, 9, 12, 24, 38, 44, 49, 52, 57, 58, 66, 71, 77, 90, 98, 99, 103, 105, 106, 111, 116, 153, 156, 161, 174, 176, 304, 364, 397], "excerpt": 188, "excess": [198, 377], "exchang": [102, 104, 193, 242], "exclud": [65, 123, 462], "exclude_zero": [159, 161, 391, 394], "exclus": [297, 303, 304], "exclusion_filt": [62, 297], "exclusion_pattern": 62, "exec": 184, "execut": [7, 21, 27, 45, 59, 72, 81, 86, 95, 109, 117, 118, 119, 176, 188, 369, 448, 450, 451, 492, 493, 494], "exemplarili": 55, "exercis": [4, 183], "exhaust": [176, 183], "exhibit": [48, 178, 188], "exist": [4, 20, 48, 102, 166, 173, 176, 187, 227, 234, 235, 236, 277, 279, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 363, 380, 381, 382, 383, 384, 385, 386, 387, 444, 458, 459, 460, 461, 492], "exist_ok": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93, 115], "exp": 44, "exp_condit": [66, 338], "expand": [138, 161, 181, 186, 364, 458, 460], "expans": [185, 495], "expect": [3, 6, 29, 30, 32, 33, 34, 35, 36, 61, 63, 65, 77, 78, 80, 94, 97, 100, 102, 105, 106, 123, 134, 149, 158, 161, 166, 173, 176, 178, 181, 184, 187, 188, 304, 336, 338, 343, 349, 351, 355, 374], "expens": 43, "experi": [3, 6, 29, 33, 34, 41, 65, 68, 70, 93, 120, 121, 172, 177, 178, 181, 206, 229, 495], "experiment": [3, 63, 64, 65, 67, 69, 70, 79, 93, 111, 112, 113, 114, 115, 116, 129, 131, 152, 153, 156, 161, 168, 175, 178, 187, 204, 206, 230, 249, 336, 339, 343, 448, 450, 451], "experimental_paradigm": [71, 131, 161], "expert": [176, 183], "explain": [6, 40, 42, 48, 56, 65, 68, 152, 161, 165, 168, 176, 178, 183, 188, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477], "explan": [34, 83, 102, 168, 169, 170, 171, 176, 186, 188, 196, 243], "explanatori": [351, 397], "explicit": [11, 48, 71, 149, 155, 161, 176, 181, 183, 279, 352, 378, 473], "explicitli": [22, 65, 101, 107, 114, 132, 146, 158, 161, 168, 176, 277, 376, 378, 459], "exploit": [62, 167, 175], "explor": [167, 171, 175, 177, 182, 183, 229, 236, 264, 277, 283, 298, 299, 300, 301], "exploratori": 65, "export": [71, 184, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451], "expos": [44, 49, 123, 131, 132, 138, 142, 143, 161, 176, 186, 277, 278, 279, 280], "express": [123, 129, 134, 161, 181, 186, 277, 303, 304, 334, 336, 339, 364, 445], "ext_var": [42, 43, 74, 76, 78, 105, 223, 281], "extend": [93, 114, 131, 152, 157, 161, 178, 188, 227, 369], "extens": [15, 141, 155, 161, 193, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451], "extent": [56, 90, 94, 101, 181, 410, 413], "extern": [169, 172, 281], "extmath": 48, "extra": [77, 123, 170, 184, 185, 242, 376, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 437, 438, 439, 440, 444, 445, 446, 447, 449, 492, 495], "extra_info_subject": 77, "extract": [4, 6, 22, 28, 30, 32, 38, 40, 43, 45, 46, 48, 49, 59, 60, 62, 71, 72, 82, 85, 91, 93, 95, 97, 99, 100, 101, 104, 114, 118, 123, 128, 129, 130, 132, 134, 141, 142, 144, 145, 146, 147, 153, 157, 158, 161, 164, 165, 168, 171, 179, 181, 183, 184, 185, 194, 197, 204, 234, 243, 249, 250, 252, 255, 260, 261, 263, 266, 274, 278, 281, 298, 299, 300, 301, 302, 305, 306, 317, 318, 336, 343, 349, 350, 351, 360, 361, 363, 366, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 394, 410, 429, 430, 431, 432, 434, 443, 444, 445, 447, 452, 453, 455, 459, 461, 462, 463, 464, 465, 467, 469, 471, 474, 477, 478, 479, 488, 492, 494, 495], "extract_typ": 463, "extractor": [50, 86, 166, 461, 463], "extrapol": [132, 161, 369, 473], "extrem": [55, 127, 161, 470], "extremum": 195, "ey": [24, 41, 44, 64, 65, 67, 69, 70, 79, 83, 88, 112, 120, 176, 183, 214, 267], "eye_mask": [214, 267], "ez": 242, "f": [2, 3, 4, 9, 10, 11, 15, 16, 18, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 65, 67, 69, 70, 71, 74, 76, 77, 78, 79, 80, 84, 85, 87, 88, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 120, 131, 132, 161, 162, 166, 168, 171, 173, 174, 177, 194, 195, 205, 214, 227, 228, 244, 255, 260, 262, 264, 267, 274, 282, 298, 299, 300, 301, 324, 325, 326, 328, 329, 332, 336, 337, 349, 369, 370, 376, 377, 378, 388, 396, 464, 467], "f1": [41, 168, 298, 300], "f1_score": 41, "f401": [9, 111], "f_classif": [35, 36, 41, 93, 97, 171], "f_re": [326, 328, 329], "f_regress": [44, 102, 105, 106, 116], "f_score": [36, 172, 495], "f_score_img": 36, "fa": 168, "fabian": [0, 120, 124, 161, 220, 252], "face": [18, 28, 32, 33, 38, 45, 69, 93, 96, 97, 99, 109, 118, 120, 122, 130, 132, 141, 154, 161, 168, 173, 177, 181, 182, 186, 187, 188, 213, 214, 230, 266, 267, 285, 298, 300, 302, 307, 312, 313, 314, 359, 361, 364, 366, 367, 380, 386, 397, 425, 440, 444, 447, 448, 449, 450, 451, 452, 454, 457, 476, 477, 494], "face_mask": [214, 267], "facebook": 0, "facecolor": [18, 32, 40, 42, 106, 131, 161, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 434, 437, 439, 440, 443, 445, 446, 447], "facilit": [131, 161, 183, 184, 188, 204], "fact": [175, 178, 181], "factor": [66, 68, 99, 104, 120, 143, 161, 170, 181, 198, 204, 206, 326, 328, 329, 338, 340, 341, 342, 343, 346, 347, 348, 352, 432, 445, 446, 447, 454], "faculti": 0, "fail": [34, 103, 129, 130, 132, 149, 158, 159, 161, 175, 176, 277, 279, 461], "failur": [103, 141, 161, 176, 391], "fair": [0, 58, 120, 167, 205, 260], "fairli": [44, 169, 178], "fake": 176, "falff": 242, "fall": [158, 161, 176, 442, 477], "fals": [2, 6, 9, 14, 15, 17, 18, 20, 21, 22, 33, 34, 36, 37, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 62, 68, 71, 74, 75, 76, 78, 79, 80, 85, 86, 87, 88, 90, 91, 93, 98, 99, 100, 102, 103, 105, 106, 108, 111, 113, 114, 116, 123, 131, 149, 152, 153, 154, 156, 158, 161, 166, 173, 177, 178, 181, 188, 234, 235, 236, 238, 240, 242, 248, 249, 250, 251, 260, 261, 262, 263, 266, 272, 275, 277, 279, 281, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 331, 333, 336, 339, 349, 351, 352, 353, 354, 355, 358, 366, 367, 368, 369, 370, 373, 374, 377, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 432, 434, 435, 437, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 470, 471, 472, 473, 478, 479, 492], "famili": [6, 80, 102, 129, 130, 143, 158, 161, 173, 176, 181, 351, 397, 461, 463], "familiar": [65, 176, 183], "fanci": 97, "far": [65, 108, 113, 175, 369, 375], "faraon": [120, 212], "fashion": [198, 214], "fast": [3, 31, 39, 48, 49, 64, 65, 71, 99, 120, 149, 152, 161, 165, 167, 168, 169, 172, 175, 176, 181, 182, 200, 217, 272, 279, 300, 301, 306, 371, 459, 460, 466, 495], "fast_abs_percentil": [134, 161], "fast_ica": 103, "fast_svd": [141, 161], "faster": [48, 49, 104, 143, 161, 174, 175, 176, 277, 306, 369, 370, 439, 440, 446, 447, 454, 477], "fastest": 175, "fastica": [91, 103, 104, 305], "faulti": [149, 161], "favor": [158, 161], "fbw_bibsonomi": [120, 328, 329], "fc": 18, "fcgi": [120, 198, 377, 378], "fcon_1000": [23, 115, 196, 222, 243, 287], "fcontrast": [326, 328, 329], "fcontrastresult": [326, 328, 329], "fd_threshold": [56, 132, 161, 377, 378], "fdr": [6, 74, 76, 80, 180, 181, 335, 336, 349, 352, 471, 478], "feasibl": 175, "feat": 62, "featur": [29, 32, 33, 34, 35, 42, 44, 49, 51, 63, 65, 93, 98, 103, 104, 110, 116, 118, 120, 122, 144, 146, 147, 152, 156, 169, 170, 171, 172, 173, 174, 175, 176, 183, 184, 188, 233, 235, 236, 238, 298, 299, 300, 301, 302, 303, 304, 305, 324, 396, 458, 460, 461, 463, 473, 474, 479, 489, 490, 493, 495], "feature_select": [35, 36, 41, 42, 44, 93, 97, 102, 105, 106, 116, 171], "februari": [44, 120, 124, 125, 130, 136, 137, 141, 151, 161, 174, 183], "feczko": [58, 120, 205, 260], "federico": [120, 198], "feedback": [146, 161, 176, 184, 233], "feel": [146, 161, 176], "feldstein": [120, 197, 245], "femal": [212, 242], "fenna": [120, 226, 232, 254, 258], "fetch": [3, 4, 9, 14, 19, 24, 29, 30, 32, 34, 35, 36, 37, 41, 58, 69, 84, 85, 86, 87, 90, 93, 101, 103, 111, 123, 130, 132, 140, 141, 143, 145, 149, 161, 164, 167, 176, 185, 194, 242, 249, 255, 263, 264, 267, 270, 271, 272, 275, 277, 278, 279, 280, 281, 284, 286, 495], "fetch_abide_pcp": [132, 157, 161, 193], "fetch_adhd": [11, 61, 101, 136, 161, 196], "fetch_atlas_a": [138, 157, 161, 195], "fetch_atlas_allen_2011": [21, 141, 161, 197], "fetch_atlas_basc_multiscale_2015": [19, 130, 131, 137, 161, 198], "fetch_atlas_craddock_2012": [130, 131, 161, 163, 201], "fetch_atlas_destrieux_2009": [9, 111, 163, 202], "fetch_atlas_difumo": [21, 47, 153, 161, 204], "fetch_atlas_harvard_oxford": [10, 21, 56, 90, 136, 157, 161, 163, 176, 212, 251, 462], "fetch_atlas_juelich": [10, 155, 157, 161, 215, 250], "fetch_atlas_msdl": [20, 21, 51, 52, 53, 54, 98, 138, 161, 163, 220], "fetch_atlas_pauli_2017": [21, 146, 149, 161, 224], "fetch_atlas_schaefer_2018": [147, 149, 161, 226], "fetch_atlas_smith_2009": [2, 21, 86, 130, 131, 161, 228], "fetch_atlas_surf_destrieux": [9, 22, 23, 131, 141, 161, 492], "fetch_atlas_talairach": [143, 161, 231], "fetch_atlas_yeo_2011": [47, 85, 163, 232], "fetch_bids_langloc_dataset": [132, 161], "fetch_cobr": [137, 141, 152, 156, 161], "fetch_coords_dosenbach_2010": [58, 137, 140, 161, 205], "fetch_coords_power_2011": [58, 225], "fetch_coords_seitzman_2018": [147, 161, 227], "fetch_destrieux": [111, 114, 115, 116], "fetch_development_fmri": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 84, 88, 90, 91, 94, 98, 104, 149, 161, 162, 163, 165, 166, 183, 188, 203], "fetch_ds000030_url": [62, 158, 161, 282], "fetch_fiac_first_level": [70, 206], "fetch_fil": 176, "fetch_haxbi": [3, 4, 15, 16, 18, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 93, 97, 102, 122, 140, 161, 168, 176, 186, 213], "fetch_icbm152_2009": [11, 21, 74, 214, 268, 292], "fetch_icbm152_brain_gm_mask": [65, 74, 139, 161, 214, 267], "fetch_language_localizer_demo_dataset": [99, 100, 108, 113, 132, 161, 177, 199, 216, 259], "fetch_localizer_button_task": [17, 139, 159, 161, 271, 272, 492], "fetch_localizer_calculation_task": [80, 106, 159, 161, 270, 272], "fetch_localizer_contrast": [75, 76, 78, 79, 105, 139, 159, 161, 200, 270, 271], "fetch_localizer_first_level": [64, 65, 67, 112, 217], "fetch_megatrawls_netmat": [26, 194], "fetch_mixed_gambl": [39, 157, 161, 218], "fetch_miyawaki2008": [40, 41, 88, 219], "fetch_neurosynth_word": [103, 123, 277, 279], "fetch_neurovault": [103, 107, 123, 142, 149, 153, 161, 278, 279, 280], "fetch_neurovault_auditory_computation_task": [87, 146, 161, 280], "fetch_neurovault_id": [107, 123, 142, 161, 277, 278, 280], "fetch_neurovault_motor_task": [2, 14, 146, 161, 278, 492], "fetch_nki": [115, 116], "fetch_nyu_rest": [151, 154, 161], "fetch_oasis_vbm": [42, 43, 74, 223], "fetch_openneuro_dataset": 62, "fetch_openneuro_dataset_index": [158, 161], "fetch_spm_auditori": [6, 68, 229], "fetch_spm_multimodal_fmri": [69, 177, 230], "fetch_stimuli": [38, 266], "fetch_surf_fsaverag": [9, 22, 23, 37, 67, 108, 111, 130, 146, 152, 154, 158, 161, 177, 207, 208, 209, 210, 211, 256, 442, 448, 449, 450, 451, 455, 477, 492], "fetch_surf_fsaverage5": [141, 146, 161], "fetch_surf_nki_enhanc": [23, 141, 149, 161, 222], "fetcher": [30, 32, 131, 132, 136, 137, 138, 141, 146, 149, 150, 153, 155, 156, 157, 158, 161, 177, 242, 248, 249, 259, 260, 261, 262, 263, 270, 271, 272, 281, 285], "few": [2, 14, 15, 25, 39, 40, 49, 76, 80, 90, 101, 102, 144, 145, 161, 167, 169, 172, 174, 176, 177, 184, 187, 459, 477, 495], "fewer": [132, 161, 175, 433], "fiac": [70, 190, 265, 489], "field": [11, 44, 101, 123, 149, 161, 178, 181, 186, 277, 298, 299, 300, 301, 305, 306, 337, 339, 369, 374, 375, 383, 386, 459, 476, 477], "fifth": [101, 120, 268, 323, 327], "fig": [9, 11, 18, 24, 38, 40, 41, 42, 49, 57, 61, 63, 64, 66, 74, 77, 78, 90, 99, 100, 105, 106, 111, 116, 442, 448, 492], "fig1": 68, "fig2": 68, "fig_kwarg": 438, "fight": 188, "figshar": 246, "figsiz": [11, 12, 15, 18, 25, 30, 34, 35, 40, 42, 44, 48, 51, 57, 61, 62, 63, 64, 65, 66, 71, 74, 77, 78, 90, 93, 98, 99, 100, 105, 106, 116, 187, 444], "figur": [2, 4, 9, 12, 14, 15, 18, 22, 23, 24, 25, 30, 31, 32, 34, 35, 36, 40, 41, 42, 43, 44, 48, 49, 51, 52, 56, 57, 61, 62, 64, 65, 66, 68, 74, 78, 83, 90, 93, 98, 99, 100, 105, 106, 108, 111, 113, 114, 115, 116, 131, 143, 152, 153, 156, 157, 158, 161, 176, 177, 178, 187, 376, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 492], "fil": [6, 229, 230, 284, 285], "filbei": [120, 197, 245], "file": [3, 6, 7, 9, 14, 22, 23, 27, 30, 32, 33, 34, 35, 36, 40, 45, 47, 48, 49, 51, 53, 55, 59, 60, 61, 62, 65, 70, 72, 74, 81, 84, 85, 90, 91, 93, 95, 97, 99, 100, 108, 109, 111, 113, 114, 115, 117, 118, 119, 120, 122, 123, 131, 134, 136, 141, 145, 146, 147, 148, 149, 152, 156, 157, 158, 161, 162, 163, 165, 166, 168, 176, 177, 184, 185, 188, 195, 196, 197, 198, 203, 204, 206, 207, 208, 209, 210, 211, 213, 216, 217, 219, 220, 223, 224, 230, 232, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 296, 298, 299, 305, 306, 307, 312, 313, 314, 336, 339, 349, 354, 364, 365, 367, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451, 453, 455, 456, 457, 459, 461, 469, 471, 473, 475, 476, 477, 478, 479, 493, 494, 495], "file_basenam": 375, "file_field": 375, "file_list": 296, "file_nam": [38, 469], "file_path": [312, 375], "file_tag": [374, 375], "file_typ": [374, 375], "filemesh": [114, 115], "filenam": [2, 3, 4, 10, 15, 50, 55, 61, 93, 122, 132, 139, 149, 156, 157, 161, 163, 166, 167, 176, 186, 187, 250, 251, 282, 296, 298, 299, 300, 301, 303, 304, 312, 313, 314, 364, 376, 380, 383, 386, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 437, 445], "filename_pattern": 176, "filesystem": [158, 161], "filippini": [120, 194, 228, 255, 274], "fill": [15, 21, 62, 66, 93, 100, 108, 113, 141, 149, 155, 161, 175, 188, 198, 369, 370, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 445, 446, 469, 495], "fill_diagon": [54, 56], "fill_doc": [155, 161], "fill_valu": [369, 370], "fillard": [120, 162, 234], "filled_contour": [21, 50, 166, 445], "filter": [51, 55, 56, 58, 65, 66, 93, 103, 121, 122, 127, 129, 130, 146, 149, 154, 156, 158, 161, 168, 181, 185, 187, 242, 277, 279, 281, 297, 298, 299, 300, 301, 303, 304, 305, 306, 336, 339, 354, 371, 373, 374, 377, 380, 381, 382, 383, 384, 385, 386, 387, 459, 461, 472, 473, 495], "filtered_img": 371, "filtered_sign": 472, "filtfilt": 472, "final": [3, 4, 6, 14, 15, 30, 41, 48, 53, 55, 56, 57, 63, 67, 83, 92, 93, 99, 112, 154, 161, 162, 169, 175, 176, 177, 183, 184, 187, 188, 198, 212, 236, 349, 374, 381, 382, 384, 385, 492], "find": [4, 30, 32, 44, 50, 56, 69, 78, 99, 127, 161, 166, 167, 168, 170, 172, 175, 176, 178, 181, 184, 188, 198, 221, 230, 238, 246, 356, 391, 392, 394, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 431, 432, 454, 458, 460, 466, 492, 493, 495], "find_cut_coord": [399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "find_cut_slic": [134, 141, 161], "find_parcellation_cut_coord": [47, 58, 146, 156, 161, 163, 430, 434], "find_probabilistic_atlas_cut_coord": [47, 50, 53, 146, 161, 163, 166, 429, 434], "find_xyz_cut_coord": [50, 86, 136, 143, 161, 166], "fine": [9, 88, 111, 120, 140, 161, 163, 188, 204, 249, 302, 305, 306, 377, 383, 386, 459, 492], "finer": [9, 111, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "finish": [36, 42, 43, 44, 48, 102, 105, 131, 161, 175, 176, 353, 373, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 445, 453, 455, 457], "finit": [60, 72, 76, 78, 103, 118, 142, 161, 177, 181, 273, 336, 338, 343, 354, 371, 388, 391, 432, 435, 436, 446, 447, 473, 494], "fino": [75, 120, 331], "fir": [60, 63, 72, 118, 133, 161, 177, 181, 273, 336, 338, 343, 435, 436, 447, 494], "fir_delai": [62, 63, 64, 336, 338, 339, 343], "first": [2, 6, 11, 14, 16, 18, 20, 23, 25, 30, 32, 33, 35, 40, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 64, 68, 70, 72, 74, 76, 79, 80, 83, 85, 88, 90, 91, 92, 93, 94, 96, 104, 105, 109, 110, 117, 120, 122, 123, 124, 130, 132, 146, 147, 149, 152, 154, 156, 157, 161, 162, 163, 165, 166, 167, 169, 171, 172, 175, 176, 178, 179, 180, 184, 185, 186, 187, 190, 198, 236, 238, 264, 265, 268, 269, 273, 274, 277, 279, 282, 286, 289, 290, 293, 297, 298, 299, 300, 301, 305, 306, 307, 310, 316, 321, 322, 324, 332, 336, 339, 343, 345, 349, 351, 355, 360, 361, 370, 371, 374, 376, 377, 379, 382, 385, 386, 387, 393, 397, 435, 436, 439, 441, 446, 447, 448, 449, 450, 451, 452, 457, 458, 459, 461, 469, 470, 471, 473, 477, 479, 489, 494, 495], "first_epi_fil": 94, "first_level": [6, 33, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 77, 99, 100, 108, 112, 113, 131, 154, 156, 158, 159, 161, 177, 438, 471], "first_level_contrast": [100, 156, 161, 349, 351], "first_level_from_bid": [62, 99, 100, 108, 113, 130, 131, 132, 159, 161, 438], "first_level_glm": 113, "first_level_model": [61, 64, 65], "first_pipelin": 97, "first_plot": 49, "first_roi_data": 93, "first_roi_img": 93, "first_rsn": 2, "first_three_imag": 361, "firstlevelmodel": [6, 61, 64, 65, 68, 69, 70, 99, 112, 154, 156, 158, 161, 177, 339, 349, 351, 376, 471], "firstlevelmodelifittedfirstlevelmodel": 62, "firstlevemodel": 65, "firstli": 56, "fischl": [22, 23, 114, 115, 120, 202, 207, 208, 209, 210, 211, 212, 226, 232, 248, 254, 256, 258, 286], "fisher": [97, 120, 324], "fistlevelmodel": 177, "fit": [3, 6, 28, 30, 32, 35, 36, 37, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 63, 64, 65, 67, 69, 72, 74, 75, 76, 78, 79, 80, 86, 88, 90, 91, 93, 97, 98, 99, 103, 112, 116, 118, 122, 131, 132, 146, 154, 156, 158, 161, 162, 164, 165, 166, 168, 169, 171, 173, 175, 176, 178, 179, 181, 182, 183, 188, 234, 235, 236, 258, 265, 266, 298, 299, 300, 301, 302, 303, 304, 305, 306, 317, 318, 323, 326, 327, 328, 329, 333, 336, 339, 345, 349, 351, 361, 366, 380, 381, 382, 383, 384, 385, 386, 387, 393, 397, 410, 413, 435, 447, 452, 458, 459, 460, 461, 464, 469, 471, 478, 479, 494, 495], "fit_intercept": [303, 304], "fit_param": [305, 306, 336, 349, 380, 383, 386, 458, 460], "fit_predict": [458, 460], "fit_transform": [35, 36, 42, 47, 49, 50, 51, 52, 54, 55, 56, 58, 61, 68, 88, 91, 97, 98, 99, 102, 103, 104, 105, 106, 116, 122, 131, 161, 163, 166, 177, 188, 234, 305, 306, 317, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "fitted_pipelin": 97, "fitter": [131, 161], "five": [56, 65, 459], "five_mni_imag": 361, "fix": [16, 30, 58, 69, 101, 126, 175, 176, 184, 187, 323, 324, 327, 333, 336, 339], "fixed_fx_contrast": 70, "fixed_fx_contrast_img": 333, "fixed_fx_stat": 70, "fixed_fx_stat_img": 333, "fixed_fx_vari": 70, "fixed_fx_variance_img": 333, "fixed_fx_z_score_img": 333, "fixur": 176, "fl": 0, "flag": [177, 377, 378], "flake8": [136, 158, 161, 176], "flash": 65, "flat": [23, 41, 115, 130, 161, 187, 207, 208, 209, 210, 211, 286], "flat_left": [23, 207, 208, 209, 210, 211, 286], "flat_right": [207, 208, 209, 210, 211, 286], "flatiron": 0, "flatten": [23, 24, 40, 41, 68, 115, 120, 202, 234, 240, 241], "flavor": [2, 198], "fletcher": [120, 193, 242], "flexibl": [64, 135, 161], "flexibli": 56, "fliem": [23, 115, 222], "flip": [16, 103, 140, 161, 198, 246], "flirt": 212, "flm": 478, "flm_object": [158, 161], "float": [3, 40, 41, 43, 66, 74, 133, 149, 152, 161, 235, 236, 238, 242, 268, 289, 290, 293, 298, 299, 300, 301, 302, 303, 304, 305, 306, 323, 324, 326, 327, 328, 329, 331, 335, 336, 338, 339, 340, 341, 342, 343, 346, 347, 348, 349, 351, 352, 353, 354, 358, 360, 369, 370, 373, 377, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 431, 432, 433, 434, 437, 439, 440, 442, 443, 445, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 466, 469, 470, 471, 472, 473, 474, 477], "float32": [11, 33, 83, 101, 188, 355, 364, 381, 382, 383, 384, 385, 386, 387], "float64": [3, 76, 79, 116], "flore": [120, 162, 234], "florent": [0, 120, 133, 161, 202, 212, 248], "florida": 0, "flow": [154, 161, 178, 181], "fluctuat": [48, 65, 175, 178, 181, 242], "fluenci": 76, "fluid": [11, 56, 214, 267, 377], "fm00223": 6, "fm00223_004": 6, "fm00223_005": 6, "fm00223_006": 6, "fm00223_007": 6, "fm00223_008": 6, "fmr": 48, "fmri": [1, 7, 15, 23, 25, 30, 31, 32, 33, 36, 40, 41, 44, 46, 55, 56, 59, 60, 61, 62, 63, 65, 68, 69, 71, 72, 73, 80, 81, 84, 88, 90, 93, 96, 99, 100, 101, 102, 108, 109, 113, 115, 118, 120, 122, 123, 137, 144, 149, 159, 161, 165, 166, 167, 169, 171, 174, 175, 177, 180, 181, 182, 183, 186, 187, 188, 190, 196, 197, 198, 201, 204, 205, 213, 216, 219, 221, 222, 227, 246, 247, 249, 255, 260, 263, 265, 266, 272, 273, 284, 298, 302, 305, 306, 331, 333, 336, 345, 349, 351, 352, 354, 355, 359, 361, 362, 365, 366, 377, 378, 380, 386, 391, 394, 397, 409, 417, 424, 432, 433, 435, 436, 437, 439, 440, 445, 446, 447, 452, 454, 459, 461, 469, 470, 473, 474, 478, 480, 494, 495], "fmri_compress": 49, "fmri_data": [40, 93, 336, 349], "fmri_fil": 99, "fmri_filenam": [3, 36, 37, 56, 93, 97, 122], "fmri_glm": [6, 68, 69, 70, 177], "fmri_glm_multirun": 70, "fmri_glm_run_1": 70, "fmri_glm_run_2": 70, "fmri_img": [6, 34, 36, 37, 64, 65, 67, 68, 69, 70, 93, 108, 112, 113, 177], "fmri_mask": [36, 91, 97, 102, 105, 106, 122], "fmri_niimg": [3, 30, 34, 97, 168], "fmri_niimgs_condit": 30, "fmri_niimgs_test": 3, "fmri_niimgs_train": 3, "fmri_random_runs_filenam": 40, "fmri_reduc": 49, "fmri_reduced_rena": 49, "fmri_run": [33, 40], "fmrib": [2, 212, 215, 228, 255], "fmriprep": [62, 65, 131, 132, 156, 158, 161, 163, 167, 178, 181, 188, 263, 267, 268, 292, 339], "fmt": 71, "fnhum": [120, 193, 242], "fnin": [23, 49, 115, 120, 165, 222, 287], "fninf": [120, 123, 221, 277, 279], "fnsy": [120, 197, 245], "focu": [14, 78, 163, 165, 175, 461], "focus": [60, 73, 97, 110, 118, 122, 138, 144, 161, 169, 172, 173, 176], "focuss": 162, "fold": [3, 29, 31, 34, 36, 40, 51, 67, 93, 97, 98, 112, 168, 169, 171, 173, 175, 188, 236, 298, 299, 300, 301, 302, 303, 304], "folder": [62, 93, 100, 108, 113, 156, 161, 176, 184, 186, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 287, 288, 339, 364, 374], "follow": [2, 4, 9, 14, 18, 21, 22, 29, 32, 34, 35, 36, 40, 41, 42, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 64, 65, 68, 71, 88, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 105, 106, 111, 114, 116, 118, 122, 123, 143, 146, 147, 148, 149, 150, 151, 155, 161, 162, 163, 166, 167, 173, 176, 177, 178, 181, 183, 184, 186, 198, 206, 217, 281, 286, 288, 354, 360, 374, 376, 377, 378, 382, 385, 387, 389, 390, 391, 393, 394, 455, 461, 473, 474, 492, 493], "fonov": [120, 198, 214, 267, 292], "font": [398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 448, 450, 451], "fontproperti": [398, 400, 401], "fontsiz": [12, 25, 40, 49, 63, 77, 79, 105, 147, 149, 161, 187, 398, 400, 401, 453, 455, 456, 457], "footbibliographi": [154, 156, 158, 161], "footcit": [154, 156, 158, 161, 183], "footer": [159, 161], "forc": [2, 93, 116, 136, 161, 175, 188, 198, 246, 255, 277, 278, 279, 280], "force_resampl": [3, 11, 16, 29, 48, 52, 53, 56, 65, 69, 74, 83, 88, 90, 92, 103, 159, 161, 369, 370], "ford": [120, 197, 245], "foreground": [87, 166], "forget": [93, 176], "fork": 176, "form": [6, 33, 40, 44, 49, 71, 105, 132, 161, 162, 163, 165, 166, 178, 181, 186, 212, 234, 235, 236, 282, 283, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 331, 336, 339, 343, 349, 351, 352, 374, 375, 380, 381, 382, 383, 384, 385, 386, 387, 397, 441, 454, 458, 459, 460, 461, 470, 471], "formal": [6, 229], "format": [2, 49, 99, 122, 130, 131, 153, 156, 158, 161, 176, 177, 188, 198, 202, 204, 234, 242, 305, 306, 307, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 437, 439, 440, 442, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 460, 461, 475, 476, 477, 483], "formatstrformatt": 48, "former": [169, 175, 277, 439, 442, 447, 451], "formerli": [90, 146, 161], "formula": [2, 137, 159, 161, 175, 349, 351, 365, 435], "fornito": [56, 120, 163, 378], "forschungszentrum": 0, "fortran": [175, 369, 370, 397], "fortun": [3, 66], "forum": 176, "forward": [120, 231, 257], "foucault": [146, 161], "found": [3, 6, 49, 52, 55, 63, 71, 80, 99, 100, 103, 107, 108, 113, 122, 123, 146, 161, 162, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 183, 184, 187, 188, 198, 221, 277, 279, 281, 354, 356, 374, 388, 391, 432, 446, 447, 473, 492], "four": [40, 44, 65, 156, 161, 188, 232], "fourth": [80, 83, 154, 161, 336, 351, 361, 362, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 430, 461, 473], "fox": [120, 228, 231, 255, 257, 378], "fpr": [6, 33, 80, 180, 181, 336, 349, 352, 471, 478], "fr": [0, 44, 101, 116, 120, 166, 174, 195, 200, 204, 220, 244, 249, 252, 461], "frac": [178, 304, 323, 327], "frackowiak": [120, 354, 473], "fraction": [242, 336, 339, 391, 392, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 477], "frame": [33, 63, 67, 88, 188, 198, 338, 361, 377, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 469], "frame_ax": [399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "frame_tim": [33, 63, 66, 67, 69, 108, 177, 337, 338, 343], "frameon": [34, 398, 400, 401], "frames_tim": 343, "frametim": 61, "framewis": [56, 263, 377], "framework": [66, 162, 263], "fran": [58, 120, 225, 261], "franc": [0, 176], "francesca": [120, 197, 245], "francisco": [23, 115, 120, 222, 287], "franz": [0, 55, 147, 149, 151, 161], "fran\u00e7oi": [0, 131, 161], "frau": [0, 134, 161], "frazier": [120, 212], "free": [0, 120, 169, 176, 178, 181, 351, 397], "freedman": [120, 397], "freedom": [56, 99, 107, 163, 178, 324, 327, 333, 378], "freeli": [223, 229], "freesurf": [9, 22, 23, 67, 108, 111, 112, 113, 114, 115, 141, 146, 158, 161, 177, 202, 207, 208, 209, 210, 211, 215, 256, 286, 307, 312, 322, 448, 449, 450, 451, 457, 475, 476, 477], "freimer": [120, 264, 282], "freita": [120, 231, 257], "frem": [3, 28, 45, 118, 120, 130, 152, 161, 168, 169, 172, 174, 181, 182, 266, 275, 300, 301, 304, 361, 366, 444, 447, 452, 494, 495], "fremclassifi": [31, 152, 153, 161, 169, 170, 298, 301], "fremregressor": [31, 39, 152, 153, 161, 169, 170, 299, 300], "french": [0, 183], "frequenc": [6, 65, 127, 161, 188, 242, 298, 299, 300, 301, 303, 304, 336, 343, 354, 377, 381, 382, 383, 384, 385, 386, 387, 459, 461, 472, 473], "frequent": 178, "frequentist": 178, "frequentist_infer": 178, "fri": [120, 197, 245], "friedman": [120, 162], "friendli": [129, 161, 493], "frisoni": [120, 194, 274], "friston": [6, 120, 229, 354, 473], "frith": [120, 354, 473], "fritsch": [0, 124, 161], "frmi_fil": 163, "from": [0, 4, 6, 7, 8, 9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 94, 95, 96, 98, 100, 102, 103, 104, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 136, 139, 142, 143, 146, 147, 149, 154, 155, 156, 158, 159, 161, 162, 164, 165, 166, 167, 168, 169, 171, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 190, 193, 194, 196, 197, 198, 201, 203, 204, 205, 206, 212, 213, 214, 215, 217, 219, 221, 226, 227, 228, 233, 234, 235, 236, 238, 242, 243, 244, 246, 248, 249, 250, 251, 253, 254, 255, 257, 258, 260, 262, 263, 264, 266, 267, 268, 270, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 287, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 317, 318, 325, 326, 327, 328, 329, 330, 333, 335, 336, 339, 343, 349, 350, 351, 353, 354, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 435, 437, 438, 439, 441, 442, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 457, 458, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 485, 487, 492, 493, 494, 495], "fromnumer": [3, 16, 29], "front": [123, 323, 326], "frontal": [69, 90, 120, 173, 432, 437, 439, 440, 446, 447], "frontier": [23, 49, 115, 120, 165, 193, 197, 204, 221, 222, 242, 245, 277, 279, 287], "frontiersin": [23, 49, 115, 120, 165, 193, 197, 221, 222, 242, 245, 277, 279, 287], "fronto": [58, 100], "frontopariet": 262, "frouin": [120, 200, 272], "frustrat": 176, "fsaverag": [9, 22, 23, 24, 37, 62, 67, 108, 111, 112, 114, 115, 116, 130, 131, 146, 154, 161, 190, 286, 321, 322, 442, 455, 477, 492], "fsaverag5": 23, "fsaverage3": [154, 161, 190, 286, 455], "fsaverage4": [154, 161, 190, 286, 455], "fsaverage5": [9, 22, 23, 24, 37, 67, 108, 111, 112, 113, 114, 115, 141, 146, 161, 190, 202, 222, 256, 286, 287, 321, 322, 442, 455, 477], "fsaverage5_spher": [158, 161], "fsaverage6": [154, 161, 190, 286, 455], "fsaverage7": [286, 455], "fsaverage_curvatur": [111, 115], "fsaverage_data": [112, 113], "fsaverage_mesh": [111, 114, 115], "fsaverage_sulc": [111, 114, 115, 116], "fsl": [10, 11, 36, 49, 62, 78, 85, 93, 155, 156, 158, 161, 186, 212, 215, 250, 251, 365], "fsl3": [56, 90], "fsl_design_matrix_path": [62, 379], "fsl_z_map": 62, "fslmath": 365, "fslview": 187, "fslwiki": [212, 215], "fswiki": [232, 258], "ftp": [196, 243], "fulcher": [56, 120, 378], "full": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 120, 127, 129, 132, 161, 165, 166, 167, 169, 171, 173, 175, 176, 177, 181, 187, 188, 194, 198, 203, 205, 213, 228, 250, 251, 255, 260, 263, 266, 274, 298, 299, 300, 301, 305, 306, 317, 323, 326, 327, 328, 329, 336, 349, 351, 354, 371, 377, 378, 381, 382, 383, 384, 385, 386, 387, 388, 444, 459, 461, 463, 469, 473], "full_brain_info": [131, 161], "full_coef": 97, "full_correl": 274, "fullbrain": 266, "fulli": [120, 175, 178, 198, 493], "func": [3, 6, 11, 15, 16, 18, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 64, 65, 68, 70, 84, 88, 90, 91, 93, 94, 97, 98, 99, 100, 101, 102, 104, 108, 111, 113, 122, 132, 154, 161, 166, 176, 177, 186, 188, 196, 200, 203, 213, 219, 229, 243, 263, 266, 269, 276, 284, 374, 377, 378], "func1": [69, 70, 206, 230, 265, 285], "func2": [69, 70, 206, 230, 265, 285], "func_fil": 51, "func_filenam": [18, 25, 30, 31, 32, 33, 35, 48, 50, 53, 55, 58, 90, 91, 102, 104, 166, 187], "func_img": [29, 168], "func_left": [23, 222, 287], "func_mask": 242, "func_mean": 242, "func_preproc": [157, 161, 242], "func_reduc": 102, "func_right": [222, 287], "function": [2, 3, 4, 6, 8, 9, 11, 13, 14, 15, 17, 18, 21, 22, 25, 26, 27, 29, 30, 32, 34, 35, 36, 48, 49, 52, 53, 55, 56, 58, 59, 60, 64, 65, 67, 69, 70, 71, 72, 73, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 101, 102, 104, 108, 109, 111, 112, 113, 114, 116, 120, 122, 123, 125, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 165, 168, 169, 172, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 193, 194, 195, 196, 198, 200, 201, 203, 204, 206, 216, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 319, 320, 321, 322, 323, 324, 327, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 485, 486, 487, 488, 490, 491, 493, 494, 495], "functool": 48, "fundament": 181, "furei": [3, 31, 32, 38, 97, 120, 213, 266], "furo": [129, 158, 161], "further": [0, 14, 15, 55, 65, 68, 83, 93, 121, 162, 170, 172, 175, 184, 186, 190, 198, 227, 277, 336, 349, 377, 411, 484, 485, 492, 495], "furthermor": [6, 42, 55], "fusiform": [90, 173], "futur": [0, 6, 140, 146, 152, 158, 159, 161, 175, 181, 186, 188, 324, 469], "futurewarn": [3, 11, 16, 29, 48, 53, 56, 65, 69, 74, 83, 88, 90, 92, 103], "fwe": [105, 397], "fwer": [76, 80, 180, 181, 351], "fwhm": [4, 65, 93, 94, 103, 105, 143, 149, 161, 181, 183, 187, 188, 371], "g": [0, 6, 9, 14, 22, 24, 30, 31, 40, 42, 43, 47, 48, 55, 61, 66, 93, 98, 99, 105, 111, 114, 120, 123, 130, 154, 158, 161, 163, 173, 175, 176, 177, 178, 180, 181, 183, 187, 188, 194, 195, 201, 204, 223, 231, 234, 235, 236, 247, 257, 274, 281, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 328, 329, 336, 343, 349, 353, 356, 373, 377, 380, 381, 382, 383, 384, 385, 386, 387, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 442, 445, 448, 449, 450, 451, 453, 454, 455, 457, 458, 459, 460, 461, 464, 465, 467, 477, 492], "g004": 197, "g4fdc94662": 479, "g_cingul": [23, 115], "g_postcentr": [9, 111], "g_precentr": [9, 111], "ga": [44, 120, 168, 174], "gabriel": [120, 221, 277, 279], "gael": [0, 48, 49, 120, 124, 125, 127, 128, 134, 136, 139, 143, 146, 147, 148, 149, 151, 161, 162, 166, 167, 220, 221, 234, 235, 252, 277, 279, 305, 306, 460, 461, 466], "gagan": [58, 120, 205, 225, 260, 261], "gain": [39, 65, 170, 175, 218, 275], "gale": [0, 146, 149, 161], "gallant": [120, 169], "galleri": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 118, 131, 134, 136, 140, 141, 143, 161, 176, 492, 494], "gambl": [28, 45, 118, 172, 174, 190, 275, 301, 304, 447, 494, 495], "gamma": [66, 158, 161, 177], "ganel": [69, 120], "ganglia": 227, "gap": [53, 235, 238], "gather": [93, 176, 178, 233], "gatsbi": 0, "gau": [0, 130, 131, 132, 133, 159, 161], "gaussian": [6, 44, 78, 93, 120, 162, 175, 178, 188, 189, 198, 235, 238, 371], "gaussian_filt": 44, "gazzalei": [99, 120], "ga\u00ebl": [49, 51, 56, 98, 120, 162, 163, 165, 170, 204, 220, 249, 252, 300, 301, 305], "gbv": [120, 328, 329], "gca": [48, 51, 98], "gcf": 40, "gee": 120, "gender": [203, 263, 281], "gener": [0, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 72, 73, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 118, 122, 129, 131, 132, 133, 146, 147, 149, 151, 152, 154, 156, 161, 168, 169, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 198, 201, 214, 219, 227, 246, 247, 249, 272, 282, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 326, 328, 329, 336, 343, 349, 351, 352, 353, 354, 359, 365, 366, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 395, 397, 438, 442, 447, 448, 449, 450, 451, 452, 458, 459, 461, 469, 473, 479, 483, 492, 493, 494], "generate_group_sparse_gaussian_graph": [57, 175], "generate_report": [54, 58, 70, 88, 90, 91, 131, 132, 156, 161, 188, 336, 349, 376, 381, 382, 383, 384, 385, 386, 387, 461], "genet": [120, 212], "geneva": 0, "genfromtxt": 168, "genom": 0, "gensollen": [0, 132, 153, 154, 155, 156, 157, 158, 161], "gentl": 183, "geoffrei": [120, 328, 329], "geometr": [162, 234], "geometri": [67, 112, 120, 181, 365, 442, 448, 449, 450, 451, 457, 476, 477], "geraint": 6, "gerard": [102, 120, 397], "geriant": 229, "geriatr": 0, "gerloff": [0, 130, 161], "germani": [0, 120, 174], "germnai": 0, "gervai": [0, 124, 161], "get": [3, 4, 6, 14, 21, 22, 33, 35, 40, 41, 51, 52, 56, 58, 62, 65, 66, 67, 69, 74, 77, 80, 85, 87, 99, 100, 104, 108, 112, 113, 114, 123, 141, 146, 161, 163, 166, 167, 168, 173, 175, 177, 180, 182, 188, 234, 235, 236, 244, 250, 251, 253, 254, 279, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 318, 326, 328, 329, 336, 349, 351, 359, 364, 368, 380, 381, 382, 383, 384, 385, 386, 387, 397, 398, 400, 401, 428, 458, 459, 460, 461, 469, 493], "get_affin": [140, 161, 186, 356], "get_anat": 272, "get_bids_fil": [156, 161], "get_clusters_t": [6, 62, 68, 130, 153, 157, 158, 161], "get_cmap": 12, "get_data": [30, 36, 42, 49, 76, 78, 83, 93, 102, 105, 106, 107, 141, 149, 161, 186, 364], "get_data_dir": [2, 4, 139, 161, 186, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 287], "get_dataset_dir": 176, "get_design_from_fslmat": [62, 156, 161], "get_fdata": [11, 79, 101, 149, 161, 186], "get_figur": 31, "get_head": 186, "get_ifram": 469, "get_mask": 272, "get_metadata_rout": [234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "get_object_bound": [398, 400, 401], "get_param": [99, 234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "get_standalon": 469, "get_support": 42, "get_tmap": [78, 272], "get_zoom": 433, "getattr": [18, 21], "geuter": [120, 354, 473], "gezici": [0, 132, 161], "gh": [131, 161, 176], "ghislain": [70, 120, 206], "gholamreza": [120, 162], "ghosh": [120, 123, 221, 277, 279], "giant": [149, 161], "gif": [0, 176], "gifti": [131, 161, 207, 208, 209, 210, 211, 286, 287, 312, 313, 314], "gifti_fil": [312, 313, 314], "gigabyt": 176, "gii": [22, 23, 116, 307, 377, 378, 448, 449, 450, 451, 457, 475, 476, 477], "gili": [120, 198], "gill": [0, 146, 149, 161], "gilmor": [0, 154, 161], "gin": [195, 244], "giov": [120, 198], "giovanni": [120, 194, 274], "gist_ncar": [22, 114, 145, 161, 433, 446, 450, 492], "gist_rainbow": 445, "git": [124, 125, 127, 128, 134, 136, 139, 161, 176, 184], "github": [0, 23, 33, 36, 49, 52, 53, 58, 62, 74, 76, 112, 113, 115, 116, 154, 158, 161, 176, 183, 193, 222, 226, 254, 267, 378, 455, 478, 479, 492, 493], "give": [2, 3, 4, 9, 14, 15, 16, 24, 29, 33, 42, 49, 52, 54, 55, 56, 58, 67, 83, 90, 93, 97, 103, 111, 112, 120, 122, 130, 139, 141, 156, 161, 162, 163, 165, 167, 168, 169, 170, 171, 173, 175, 183, 187, 188, 206, 229, 270, 271, 279, 298, 299, 300, 301, 302, 305, 306, 323, 331, 336, 338, 343, 349, 351, 366, 371, 374, 381, 382, 383, 384, 385, 386, 387, 388, 395, 444, 449, 450, 458, 459, 461, 463, 467, 468, 477], "given": [2, 3, 9, 14, 16, 44, 47, 50, 53, 54, 58, 63, 64, 65, 67, 69, 70, 71, 78, 83, 85, 93, 94, 99, 101, 104, 111, 112, 130, 138, 140, 144, 149, 158, 161, 162, 165, 168, 169, 171, 173, 174, 175, 176, 178, 181, 183, 184, 188, 194, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 250, 251, 271, 272, 274, 275, 281, 287, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 323, 324, 326, 327, 328, 329, 332, 333, 336, 339, 343, 349, 350, 351, 353, 355, 360, 363, 366, 369, 371, 373, 374, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 437, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 471, 472, 474, 479], "gl": [53, 57], "glahn": [120, 228, 255], "glaser": [0, 145, 161], "glass": [8, 9, 27, 47, 61, 107, 111, 118, 139, 140, 141, 143, 144, 149, 152, 161, 182, 280, 295, 336, 349, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 439, 443, 447, 452, 453, 456, 471, 492, 494], "glassbrainax": [402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424], "glasser": [120, 194, 274], "glm": [1, 7, 28, 32, 42, 45, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 99, 100, 108, 112, 113, 129, 131, 132, 133, 152, 153, 154, 156, 158, 159, 161, 168, 177, 180, 181, 182, 183, 184, 266, 284, 298, 355, 361, 366, 373, 376, 432, 435, 436, 438, 440, 447, 469, 470, 471, 489, 493, 494, 495], "glm_paramet": 99, "glm_report": 70, "glmax": [56, 90, 101], "glmin": [56, 90, 101], "glob": [62, 74, 133, 134, 144, 161, 185, 355, 374, 495], "global": [8, 27, 118, 120, 152, 161, 175, 176, 186, 198, 226, 242, 243, 254, 267, 288, 305, 306, 355, 367, 377, 378, 391, 433, 459, 494], "global_sign": [56, 132, 161, 377, 378], "global_signal_regress": 242, "glossari": [133, 157, 161], "glover": [33, 63, 65, 66, 67, 108, 112, 113, 177, 336, 338, 339, 340, 341, 342, 343, 478], "glover_dispersion_deriv": [336, 338, 343], "glover_hrf": [336, 338, 343], "glover_time_deriv": [336, 338, 343], "gm": [11, 21, 88, 155, 161, 188, 214, 267, 268, 298, 299, 300, 301, 305, 306, 383, 386, 390, 393, 459], "gm_img": 43, "gm_imgs_test": [42, 43], "gm_imgs_train": [42, 43], "gm_maps_mask": 42, "gm_mask": 74, "gm_mask_img": [268, 290], "gm_mni152_templ": 291, "gmbh": 0, "gnist_ncar": 457, "go": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 115, 116, 118, 121, 123, 142, 161, 162, 168, 172, 176, 180, 183, 184, 188, 279, 359, 364, 365, 367, 434, 439, 443, 447, 452, 454, 478, 494, 495], "goal": [84, 89, 92, 122, 175, 176], "gobbini": [3, 31, 32, 38, 97, 120, 213, 266], "godfrei": [120, 197, 245], "goe": [0, 14, 40, 85, 93, 99, 175, 235, 238], "goebel": [120, 173, 183, 302], "goeman": [75, 120, 331], "goldstein": [120, 202, 212, 248], "golobal_sign": 378, "gomez": [0, 146, 149, 155, 158, 161], "goncalv": [0, 130, 161], "gonn": [120, 212], "gonzalez": [139, 146, 161], "good": [49, 56, 64, 65, 120, 122, 141, 161, 162, 165, 167, 169, 170, 171, 172, 174, 175, 176, 177, 184, 186, 188, 277, 300, 301, 428, 495], "goodwin": [120, 194, 274], "googl": 0, "gor": [0, 124, 146, 161], "gordon": [120, 226, 254], "gorgolewski": [0, 120, 123, 124, 134, 161, 204, 221, 249, 264, 277, 279, 282], "gorrono": [0, 151, 161], "goshen": [69, 120], "got": [168, 176], "gotim": 120, "gottstein": [69, 120], "gould": [120, 175], "gov": [48, 70, 120, 167, 169, 198, 206, 305, 377, 378], "govern": 175, "grab": [33, 47, 48, 49, 64, 99, 123], "grace": [120, 203, 263], "gracefulli": 369, "grad": 495, "graham": [56, 120, 377, 378], "grai": [11, 38, 40, 41, 42, 43, 74, 88, 133, 146, 161, 173, 180, 182, 214, 223, 281, 298, 299, 300, 301, 305, 306, 383, 386, 432, 433, 459, 477], "grain": [9, 68, 111, 120, 204, 249, 302], "gramfort": [0, 44, 49, 120, 124, 127, 148, 149, 161, 162, 174, 220, 235, 252], "grand": [56, 336], "grant": 0, "graph": [43, 47, 53, 57, 162, 164, 174, 175, 181, 182, 298, 299, 303, 304, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 443, 495], "graph_net": 39, "graph_object": [9, 111], "graphic": [58, 120, 162, 175, 176, 189, 235, 238], "graphical_lasso": 53, "graphicallasso": [53, 162], "graphicallassocv": [52, 53, 57, 58, 162, 175, 236], "graphicallassocvifittedgraphicallassocv": [52, 53, 58], "graphlassocv": [52, 57, 58], "graphnet": [120, 174], "grass": 193, "gratton": [120, 227, 262], "gray_matter_map": [42, 43, 74, 223, 281], "gray_matter_map_filenam": [42, 74], "grayplot": [11, 152, 161, 433], "great": [146, 161], "greater": [65, 99, 154, 156, 161, 178, 198, 336, 345, 353, 360, 373, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 439, 442, 443, 447, 451, 453, 455, 457, 470, 474, 477], "greaterorequ": [123, 277], "greaterthan": [123, 277], "greatli": 183, "green": [40, 49, 88, 91, 120, 154, 161, 227, 262, 323, 327, 479], "greenelab": 227, "greg": [0, 146, 149, 161], "gregori": [99, 120, 168], "grei": [65, 88, 139, 149, 155, 161, 187, 188, 214, 267, 268, 290, 291, 292, 294, 390, 393], "grew": 0, "greydon": [0, 154, 161], "greyscal": [448, 450, 451, 457], "grid": [34, 51, 66, 78, 83, 98, 169, 174, 181, 187, 236, 277, 279, 298, 299, 300, 301, 340, 341, 342, 346, 347, 348, 369, 408, 410, 413, 427, 432, 437, 440, 444, 445, 446, 447, 492], "grid_param": [131, 161], "grid_search": [146, 161, 298, 299, 300, 301], "gridsearchcv": [98, 171], "gridspec": [40, 154, 161], "gridspec_kw": [49, 79, 99], "griffith": [143, 161], "grobler": [0, 124, 161], "groningen": 0, "grosenick": [120, 174], "gross": 281, "ground": [41, 44, 57, 168], "group": [2, 3, 6, 29, 30, 32, 33, 46, 57, 58, 59, 62, 73, 74, 75, 76, 77, 78, 79, 96, 97, 100, 104, 105, 109, 118, 120, 143, 149, 161, 163, 164, 167, 168, 173, 178, 180, 181, 182, 183, 194, 198, 201, 203, 223, 229, 234, 235, 236, 246, 247, 252, 260, 262, 263, 274, 280, 298, 299, 300, 301, 302, 305, 306, 362, 374, 377, 380, 385, 397, 430, 433, 434, 444, 445, 447, 452, 466, 494, 495], "group_connect": 162, "group_mean": 247, "group_sparse_cov": 57, "group_sparse_covari": [134, 161, 175, 236], "group_sparse_covariance_cost": 175, "grouped_conditions_encod": 102, "grouped_fmri_mask": 102, "groupsparsecovari": [53, 162, 175, 236], "groupsparsecovariancecv": [53, 57, 162, 175], "grow": [49, 162, 198], "grp_mask": 395, "grp_mean": 247, "grueschow": [120, 173], "gruner": [120, 197, 245], "gryal": 256, "gs1": 40, "gsc": [53, 57], "gso": [120, 328, 329], "gsr": 56, "gt": [36, 74, 88, 90, 91, 479], "guarante": [0, 6, 80, 169, 175, 286, 296, 364, 369, 370, 376, 383], "guess": [168, 175, 389, 454], "guevara": [0, 134, 139, 161], "gui": [120, 194, 274], "guid": [39, 129, 161, 176, 180, 182, 183, 188, 190, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 482, 484, 485, 493], "guidelin": [56, 93, 120, 129, 155, 158, 161, 168, 184], "guidotti": [0, 139, 149, 161], "guillaum": [0, 70, 120, 146, 149, 161, 206], "gur": [56, 120, 377, 378], "gutman": [23, 115, 120, 222, 287], "gyral": [120, 202, 212], "gyri": [22, 23, 114, 115, 120, 202, 256], "gyru": [9, 90, 111, 257], "gz": [2, 3, 4, 6, 10, 11, 14, 16, 18, 22, 23, 25, 29, 30, 32, 34, 35, 36, 38, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 70, 74, 76, 84, 85, 88, 90, 91, 93, 94, 100, 102, 104, 105, 113, 122, 183, 184, 186, 198, 204, 307, 376, 377, 378, 448, 457, 475, 476, 479], "h": [56, 64, 120, 202, 207, 208, 209, 210, 211, 223, 231, 248, 257, 264, 281, 282, 286, 323, 327, 377, 378], "h0": [324, 397], "h0_fmax": [157, 161, 397], "h0_max_mass": 397, "h0_max_siz": 397, "h0_max_t": 397, "h0_max_tfc": 397, "h1": 90, "h2": 90, "ha": [3, 6, 10, 11, 29, 30, 32, 33, 34, 35, 36, 42, 47, 49, 51, 52, 54, 58, 63, 65, 66, 68, 70, 71, 74, 78, 80, 85, 88, 90, 93, 97, 99, 104, 123, 129, 130, 131, 132, 134, 136, 140, 143, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 167, 169, 170, 173, 175, 176, 178, 180, 184, 188, 198, 229, 234, 235, 236, 244, 245, 246, 248, 253, 257, 277, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 343, 349, 351, 360, 363, 364, 366, 369, 370, 374, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 397, 399, 439, 442, 447, 451, 452, 458, 459, 460, 461, 465, 469, 472, 474, 477, 479, 492], "habib": [120, 198, 246], "had": [131, 145, 161], "haemodynam": [69, 120, 177, 178, 181], "haemoglobin": 178, "hahn": [0, 158, 161], "hairi": 64, "haitz": [0, 151, 161], "hajim": [40, 41, 120, 219, 276], "hal": [44, 120, 166, 174, 204, 249, 461], "halchenko": [0, 143, 146, 161], "half": [23, 49, 65, 93, 115, 149, 161, 175, 181, 188, 298, 299, 300, 301, 305, 306, 336, 349, 351, 371, 381, 382, 383, 384, 385, 386, 387, 388, 448, 450, 451, 455, 457, 459, 461, 463], "halfwai": 477, "halgren": [22, 23, 114, 115, 120, 202, 248, 256], "hammond": [0, 149, 161], "hampshir": 0, "han": 120, "hand": [2, 65, 67, 93, 112, 175, 176, 186, 188, 287], "handed": [203, 263], "handedness_categori": 242, "handedness_scor": 242, "handi": [153, 161, 177], "handl": [1, 7, 49, 70, 118, 130, 131, 133, 136, 142, 158, 161, 168, 183, 186, 187, 188, 255, 280, 288, 324, 328, 355, 361, 362, 363, 364, 369, 375, 377, 436, 447, 452, 460, 466, 494], "hank": [0, 128, 134, 161], "hanov": 0, "hao": [0, 129, 130, 131, 132, 153, 154, 156, 158, 159, 161], "happen": [173, 176, 188, 477], "hard": [55, 163, 175, 181, 186], "hardcod": [71, 129, 161, 296], "harder": 169, "hardest": 175, "hardwar": 175, "harold": [23, 115, 120, 222, 287], "hartmut": 120, "harvard": [0, 21, 90, 163, 190, 223, 232, 242, 250, 258, 429, 430], "harvard_oxford": 21, "harvard_oxford_sub": 21, "harvardoxford": 10, "hasn": [3, 175], "hasti": [120, 162], "hat": [323, 327], "hatch": 184, "hatchl": [130, 161, 184], "have": [0, 2, 3, 6, 9, 11, 15, 16, 18, 24, 29, 31, 32, 33, 39, 41, 42, 43, 44, 49, 52, 54, 55, 56, 57, 61, 62, 63, 64, 65, 69, 70, 74, 84, 85, 92, 93, 97, 99, 100, 101, 103, 108, 111, 113, 118, 122, 123, 129, 130, 131, 132, 134, 136, 138, 139, 140, 143, 144, 145, 146, 149, 152, 153, 154, 156, 157, 161, 162, 165, 166, 167, 168, 169, 171, 174, 175, 176, 177, 178, 180, 181, 183, 184, 186, 187, 188, 194, 198, 201, 203, 216, 230, 233, 234, 235, 236, 238, 241, 246, 253, 254, 258, 262, 263, 277, 281, 298, 299, 300, 301, 302, 303, 304, 305, 306, 314, 318, 328, 329, 336, 339, 343, 344, 349, 350, 351, 353, 354, 356, 365, 369, 370, 371, 374, 376, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 394, 396, 397, 433, 438, 448, 450, 451, 455, 458, 459, 460, 461, 467, 468, 470, 471, 473, 492, 493], "haven": [65, 103], "havlicek": [120, 197, 245], "haxbi": [4, 8, 15, 16, 27, 28, 45, 93, 102, 118, 120, 122, 140, 141, 161, 172, 174, 182, 186, 188, 190, 266, 298, 359, 361, 366, 380, 386, 425, 432, 444, 447, 452, 454, 492, 494, 495], "haxby2001": [3, 4, 16, 18, 25, 29, 30, 32, 34, 35, 36, 38, 93, 102, 122, 186, 213, 266], "haxby_anat_filenam": [15, 16], "haxby_dataset": [3, 15, 16, 18, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 93, 97, 102, 122, 168, 186, 188], "haxby_face_vs_hous": 29, "haxby_func_filenam": [15, 16], "haxby_label": 93, "haxby_mask_filenam": [15, 16], "haxby_svc_weight": 3, "hayn": [37, 120, 173], "hayward": 0, "hbm": [120, 201, 247, 354, 473], "hbm10": [120, 207, 208, 209, 210, 211, 286], "hbm2006": [120, 198], "hbm30": [120, 231, 257], "hbm6": [120, 231, 257], "hcp": [12, 26, 120, 190, 274], "hcp500": 194, "hcp500_megatrawl_april2015": [120, 194, 274], "he": 176, "head": [68, 336, 349, 377, 469, 471], "head_tpl": 469, "head_valu": 469, "header": [3, 11, 29, 30, 32, 33, 34, 35, 36, 83, 93, 96, 97, 100, 109, 118, 127, 131, 133, 147, 149, 157, 159, 161, 186, 243, 353, 354, 357, 358, 364, 365, 366, 367, 368, 369, 370, 373, 433, 473, 494], "health": 0, "healthi": [120, 181, 183, 193, 197, 198, 212, 228, 246], "heart": 65, "heavi": [39, 42, 162, 176, 387], "heavier": 31, "heavili": 0, "hedden": [120, 198], "heidelberg": [0, 120, 162, 214, 220, 234, 252, 267], "heidi": [120, 194, 274], "height": [30, 33, 51, 98, 149, 161, 336, 349, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 437, 439, 440, 443, 444, 445, 446, 447, 453, 455, 457, 469, 471, 478], "height_control": [6, 74, 76, 80, 336, 349, 352, 376, 471], "height_ratio": 49, "height_tf": 41, "height_tf_i": 41, "heinzl": [37, 120], "held": [40, 173, 176, 298, 299, 300, 301, 493], "helen": [120, 201, 247], "help": [15, 33, 58, 93, 120, 142, 146, 147, 161, 163, 169, 177, 188, 238, 493, 495], "helper": [83, 130, 134, 141, 142, 161, 176, 190, 277], "helwegen": [0, 158, 161], "hemi": [9, 22, 23, 37, 67, 108, 111, 112, 113, 114, 115, 116, 307, 308, 309, 310, 311, 448, 450, 451, 492], "hemispher": [9, 22, 23, 37, 58, 78, 85, 93, 108, 111, 112, 113, 114, 115, 116, 139, 140, 144, 161, 166, 187, 202, 207, 208, 209, 210, 211, 219, 222, 248, 256, 257, 286, 287, 316, 317, 318, 321, 336, 349, 372, 398, 406, 429, 432, 434, 437, 439, 440, 442, 443, 445, 446, 447, 448, 450, 451, 455, 471, 492], "hemodyam": 64, "hemodynam": [66, 69, 168, 181], "hemodynamic_model": [158, 161], "henc": [3, 56, 58, 71, 74, 85, 152, 161, 173, 176, 178, 198], "henson": [69, 99, 120, 230], "herbert": [120, 212], "here": [2, 3, 4, 6, 9, 14, 15, 19, 20, 23, 29, 30, 31, 32, 33, 34, 35, 36, 42, 43, 44, 48, 49, 54, 55, 56, 58, 61, 63, 64, 65, 67, 68, 70, 71, 74, 87, 88, 91, 93, 94, 97, 99, 100, 101, 103, 104, 108, 111, 112, 113, 115, 120, 122, 123, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 180, 183, 184, 187, 188, 227, 263, 303, 304, 326, 328, 329, 339, 351, 390, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 412, 416, 417, 420, 421, 422, 423, 448, 450, 451, 478, 479], "herebi": 173, "herholz": [0, 146, 161], "hertz": [298, 299, 300, 301, 303, 304, 354, 381, 382, 383, 384, 385, 386, 387, 459, 461, 472, 473], "heschl": 90, "hesheng": [120, 198, 226, 232, 254, 258], "hesit": [122, 176], "heterogen": 162, "heurist": [141, 161, 174, 175, 236, 391, 432, 445, 446, 447, 454, 492], "hex": 456, "hhmi": 223, "hierarch": [165, 181, 182, 198, 458], "hierarchi": [120, 198, 246], "hierarchical_kmean": [49, 156, 161, 459], "hierarchical_kmeans_parcel": 49, "hierarchicalkmean": [49, 156, 161], "high": [9, 31, 39, 49, 56, 64, 65, 88, 93, 111, 120, 146, 152, 153, 154, 161, 169, 170, 175, 176, 178, 181, 183, 184, 187, 188, 194, 195, 198, 207, 208, 209, 210, 211, 224, 244, 253, 274, 286, 298, 299, 300, 301, 303, 304, 324, 336, 339, 343, 354, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 442, 455, 459, 461, 472, 473], "high_pass": [6, 33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 69, 88, 90, 91, 98, 99, 146, 161, 188, 298, 299, 300, 301, 303, 304, 305, 306, 318, 336, 339, 343, 354, 377, 378, 381, 382, 383, 384, 385, 386, 387, 459, 461, 472, 473, 478, 479], "high_variance_confound": [33, 49, 52, 53, 54, 56, 58, 65, 88, 90, 91, 136, 153, 161, 188, 318, 381, 382, 383, 384, 385, 386, 387, 479], "higher": [6, 70, 122, 141, 161, 162, 173, 178, 235, 255, 298, 299, 300, 301, 303, 304, 305, 306, 336, 349, 355, 366, 381, 382, 383, 384, 385, 386, 387, 459, 460, 461, 472], "highest": [52, 54, 298, 299, 300, 301, 339, 360, 474], "highli": [175, 176], "highlight": [99, 184], "hilari": [120, 203, 263], "himanshu": [0, 133, 159, 161], "himanshupathak21061998": [146, 147, 161], "hint": [65, 162, 163], "hinz": [23, 115, 120, 222, 287], "hippocampu": [227, 262], "hiroki": [40, 41, 120, 219, 276], "hist": [49, 68, 441], "histogram": [336, 345, 391, 394, 441], "histori": 175, "hkmean": 49, "hkmeans_count": 49, "hkmeans_labels_img": 49, "hoc": 175, "hochberg": [178, 335], "hocheberg": [156, 161], "hodg": [120, 212], "hold": [40, 77, 175, 176, 184, 305, 306, 343, 397, 408, 459], "hole": 93, "holland": [0, 146, 149, 161], "hollinshead": [120, 226, 232, 254, 258], "holm": [120, 195, 226, 254, 354, 473], "holtzheim": [120, 201, 247], "home": [2, 3, 4, 6, 10, 11, 15, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 38, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 69, 70, 71, 74, 76, 83, 84, 85, 88, 90, 91, 93, 94, 99, 100, 101, 102, 104, 105, 108, 113, 115, 183, 186, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 287, 288, 364, 479], "homedir": [138, 161], "hommel": [156, 161], "homogen": [88, 132, 161, 165, 187, 201, 242, 247, 298, 299, 300, 301, 305, 306, 369, 383, 386, 459], "homotop": [198, 242, 246], "honorio": [120, 175, 235, 238], "hood": [169, 174], "hook": 176, "hopefulli": 175, "hopkin": 0, "hoptman": [23, 115, 120, 222, 287], "horea": [0, 143, 146, 161], "horizont": [65, 71, 79, 133, 161, 272, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "horizontal_checkerboard": [64, 65, 217], "horton": [120, 194, 274], "hospit": 0, "hospitali": 0, "host": 176, "hostedtoolcach": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 61, 65, 69, 70, 71, 74, 76, 77, 78, 83, 85, 88, 90, 91, 92, 94, 97, 102, 103, 104, 105, 106, 111, 116], "hot": 36, "hot_r": [31, 35], "hough": [120, 194, 274], "hour": [176, 183, 184, 351, 397], "hous": [3, 18, 28, 32, 33, 45, 93, 96, 109, 118, 130, 161, 173, 182, 186, 187, 212, 213, 266, 298, 300, 302, 359, 361, 364, 366, 367, 380, 386, 397, 425, 440, 444, 447, 452, 454, 494], "hover": 88, "how": [0, 1, 2, 3, 4, 5, 6, 9, 14, 19, 21, 26, 34, 40, 44, 47, 48, 49, 50, 53, 55, 56, 58, 61, 62, 63, 65, 66, 68, 70, 77, 78, 83, 85, 86, 87, 88, 90, 93, 94, 99, 101, 103, 106, 107, 111, 112, 113, 118, 122, 130, 141, 152, 153, 156, 157, 159, 161, 163, 165, 166, 167, 168, 169, 171, 173, 175, 178, 181, 182, 183, 185, 187, 203, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 493, 495], "howard": 223, "howev": [0, 48, 49, 65, 68, 70, 85, 93, 99, 162, 168, 171, 175, 178, 188, 244, 369, 376, 378, 495], "hoyo": [0, 49, 120, 149, 161, 168, 170, 300, 301, 460, 466], "hrf": [6, 64, 65, 66, 67, 108, 112, 156, 158, 161, 168, 179, 181, 336, 338, 340, 341, 342, 343, 346, 347, 348, 495], "hrf_model": [6, 33, 61, 63, 64, 65, 67, 69, 108, 112, 113, 336, 338, 339, 343, 478], "hspace": [44, 49, 57], "hstack": [30, 76, 79, 326, 328, 329], "htdoc": [196, 243], "htm": [120, 323, 327], "html": [18, 29, 33, 34, 36, 49, 52, 53, 54, 56, 58, 61, 70, 74, 76, 97, 133, 146, 150, 154, 156, 161, 168, 179, 182, 188, 194, 196, 197, 213, 231, 245, 257, 266, 298, 299, 300, 301, 311, 336, 349, 378, 382, 385, 387, 453, 454, 455, 456, 457, 461, 469, 471, 479, 492, 493], "html_document": 469, "html_report": [382, 385, 387, 461], "html_surfac": [131, 161], "html_view": [454, 492], "htmldocument": 469, "htmlreport": [336, 349, 382, 385, 387, 461, 471], "http": [0, 2, 3, 4, 18, 22, 23, 31, 32, 34, 37, 38, 40, 41, 44, 48, 49, 51, 56, 58, 62, 69, 70, 78, 97, 98, 100, 101, 102, 114, 115, 116, 120, 123, 154, 158, 161, 162, 163, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 178, 181, 183, 184, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 238, 242, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 266, 267, 268, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 292, 298, 299, 300, 301, 305, 323, 327, 328, 329, 351, 354, 377, 378, 397, 433, 455, 456, 460, 461, 466, 473, 474, 492, 493], "httperror": [145, 161], "hu": [120, 201, 247], "huang": [0, 159, 161], "hubbard": [120, 183], "huge": [0, 65, 66, 146, 161, 204], "hugh": 223, "huguet": [0, 132, 161], "human": [0, 8, 22, 23, 27, 31, 32, 39, 40, 41, 43, 58, 66, 70, 114, 115, 118, 120, 123, 173, 176, 181, 193, 198, 201, 202, 206, 207, 208, 209, 210, 211, 212, 219, 221, 224, 225, 226, 231, 232, 242, 247, 248, 253, 254, 256, 257, 258, 261, 274, 276, 277, 279, 286, 354, 378, 444, 452, 473, 494], "humanconnectom": [120, 194, 274], "hunar": [99, 120], "hundr": [6, 49, 459], "huntenburg": [0, 134, 149, 161], "hutchison": [120, 197, 245], "hvidovr": 0, "hybrid": [303, 304], "hyman": [120, 212], "hyper": [169, 170], "hyperparamet": [34, 42], "hyperplan": [303, 304], "hypothalam": [120, 212], "hypothes": [63, 178, 181], "hypothesi": [173, 178, 302, 324, 351, 397], "hz": [6, 33, 65, 69, 188, 198, 336, 343, 478], "i": [0, 2, 4, 6, 9, 10, 11, 14, 15, 16, 18, 20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 112, 113, 114, 115, 116, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 185, 187, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 217, 220, 221, 223, 224, 226, 229, 230, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 482, 492, 493, 495], "i_ax": 99, "i_col": 105, "i_row": 78, "i_trial": 99, "iacovella": [120, 198], "ian": [0, 149, 161], "ic": [48, 103, 197], "ic_img": 103, "ic_map": 103, "ic_term": 103, "ic_threshold": 103, "ica": [21, 46, 50, 54, 59, 86, 91, 96, 104, 109, 118, 120, 123, 134, 161, 163, 164, 181, 182, 183, 192, 194, 197, 220, 228, 245, 255, 263, 274, 277, 289, 305, 306, 362, 371, 377, 378, 380, 382, 385, 386, 445, 447, 452, 465, 479, 492, 494, 495], "ica_aroma": [56, 156, 161, 377, 378], "ica_map": 103, "icbm": [21, 65, 74, 146, 161, 190, 267], "icbm152": [11, 155, 161, 181, 198, 267, 268, 291, 292, 294], "icbm152_2009": 74, "icbm152nlin2009": [214, 267], "icbm_mask": 65, "id": [6, 33, 62, 68, 69, 103, 107, 123, 130, 161, 195, 242, 244, 253, 254, 257, 277, 279, 287, 336, 384, 470, 478], "ida": [3, 31, 32, 38, 97, 120, 213, 266], "idea": [50, 87, 93, 168, 175, 178], "ideal": [78, 105, 165, 178, 184, 198, 246], "idem": [336, 338, 343], "ident": [24, 67, 79, 112, 175, 198, 354, 371, 463, 473], "identif": [71, 93, 120, 181, 194, 200, 242, 272], "identifi": [0, 29, 30, 32, 33, 50, 58, 62, 93, 120, 129, 156, 161, 166, 174, 177, 178, 180, 194, 244, 332, 336, 338, 343, 345], "idp": 204, "idrobo": [0, 49, 120, 149, 161, 168, 170, 300, 301, 460, 466], "idx": [69, 254], "idx_nac": 253, "ie": [16, 158, 161, 162, 167, 186, 326, 328, 329, 382, 385, 387], "ieee": [44, 48, 49, 120, 167, 174, 195, 204, 305, 306, 460, 466], "ignor": [3, 16, 21, 29, 48, 50, 69, 101, 103, 147, 152, 161, 234, 235, 236, 277, 279, 283, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 343, 349, 351, 374, 377, 380, 381, 382, 383, 384, 385, 386, 387, 442, 458, 459, 460, 461, 477], "ignorecas": 123, "ii": [23, 115, 120, 200, 202, 272, 378], "iii": [120, 201, 247], "ikt": [120, 328, 329], "ilinoi": 0, "ill": 169, "illustr": [8, 27, 49, 65, 66, 84, 89, 92, 100, 108, 113, 118, 168, 176, 187, 188, 451, 452, 477, 494], "im": [18, 21, 31, 107], "imag": [2, 6, 10, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 62, 63, 65, 66, 68, 69, 70, 74, 75, 76, 77, 78, 79, 83, 85, 86, 87, 88, 90, 91, 93, 95, 97, 99, 100, 102, 104, 105, 106, 108, 109, 110, 113, 114, 115, 117, 120, 121, 127, 129, 130, 131, 132, 133, 134, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 173, 174, 176, 178, 181, 183, 185, 193, 194, 195, 196, 198, 200, 203, 204, 206, 212, 213, 214, 215, 216, 217, 219, 220, 221, 223, 224, 226, 229, 230, 231, 232, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 263, 266, 267, 268, 270, 272, 273, 274, 276, 277, 278, 279, 280, 281, 284, 285, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 316, 317, 318, 319, 320, 322, 331, 333, 336, 339, 349, 350, 351, 352, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 473, 474, 477, 479, 485, 494, 495], "image_10426": [2, 14], "image_filt": [123, 277], "image_id": [107, 123, 279], "image_m": 197, "image_metadata": 277, "image_path": 103, "image_term": [123, 277], "images_meta": [103, 107, 123, 221, 277, 278, 279, 280], "images_to_plot": 105, "imbalanc": 168, "imcal": 365, "img": [2, 4, 6, 10, 50, 62, 69, 70, 76, 78, 83, 89, 100, 105, 111, 116, 141, 149, 161, 166, 176, 186, 302, 305, 306, 317, 318, 339, 349, 351, 353, 354, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 380, 381, 382, 383, 384, 385, 386, 387, 388, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 431, 433, 440, 441, 459, 461, 464, 465, 467, 468, 470, 477, 492], "img1": [84, 101, 365], "img2": [84, 101, 365], "img_3d_affin": 83, "img_3d_affine_in_mm_spac": 83, "img_4d_affin": 83, "img_4d_affine_in_mm_spac": 83, "img_copi": 357, "img_count": 78, "img_fil": [377, 378], "img_filt": [99, 100, 108, 113, 339], "img_in_mm_spac": 83, "img_length": 428, "img_path": [38, 375], "img_plot": [10, 76, 78], "img_to_signals_label": [130, 132, 146, 149, 161, 465, 467], "img_to_signals_map": [130, 161, 464, 468], "img_valu": 461, "imgs_list": [380, 381, 382, 383, 386], "immedi": [93, 378], "impact": [42, 65, 77, 156, 161, 173, 176, 184, 188, 336, 349, 378], "imperfect": 163, "imperi": 0, "implement": [15, 48, 49, 56, 58, 65, 66, 97, 134, 141, 143, 149, 152, 153, 156, 157, 159, 161, 162, 165, 166, 167, 169, 171, 173, 174, 175, 176, 181, 183, 184, 189, 198, 250, 251, 298, 299, 302, 303, 304, 324, 326, 331, 336, 338, 340, 341, 342, 343, 346, 347, 348, 349, 351, 360, 377, 378, 397, 398, 399, 401, 411, 448, 450, 451, 461, 473, 474, 479, 489], "impli": [15, 153, 161, 175, 234, 369, 388], "implic": [69, 99, 120], "implicit": [31, 39, 152, 161, 170, 181, 300, 301], "implicitli": [65, 67, 79, 102, 108, 112, 168, 175], "implictili": 6, "import": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 122, 123, 139, 145, 146, 147, 149, 154, 156, 161, 162, 163, 166, 168, 169, 170, 171, 173, 175, 176, 177, 180, 181, 183, 184, 186, 187, 188, 194, 219, 233, 324, 326, 328, 329, 336, 349, 353, 356, 361, 365, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 443, 471, 477, 492], "important_term": 103, "importantli": [169, 171, 176], "importerror": [5, 9, 12, 24, 38, 44, 52, 57, 58, 66, 77, 90, 98, 105, 106, 111, 116, 149, 161], "impos": [39, 134, 161], "imposs": 368, "impress": [67, 112], "improv": [31, 63, 74, 120, 129, 130, 131, 133, 139, 142, 145, 146, 149, 156, 157, 158, 161, 168, 169, 170, 174, 175, 176, 178, 181, 186, 188, 214, 227, 262, 267, 354, 381, 384, 458, 473], "impul": [60, 72, 118, 273, 336, 435, 436, 447, 494], "impuls": [64, 66, 177, 178, 181, 336, 338, 343], "imput": [129, 161], "imread": 38, "imshow": [12, 38, 40, 41, 44, 83, 163, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 437, 439, 440, 442, 444, 445, 446, 447, 448, 451], "inact": [6, 178], "inbuilt": [298, 299, 300, 301], "inch": [399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "includ": [14, 37, 39, 42, 43, 54, 58, 63, 65, 68, 76, 78, 79, 90, 99, 100, 105, 108, 113, 127, 130, 131, 132, 133, 139, 149, 151, 152, 156, 158, 161, 166, 168, 173, 174, 176, 177, 181, 183, 184, 186, 192, 194, 196, 197, 198, 206, 213, 217, 226, 227, 229, 233, 234, 241, 244, 245, 246, 253, 254, 263, 268, 282, 289, 290, 293, 298, 299, 300, 301, 317, 318, 323, 327, 336, 349, 351, 361, 375, 376, 377, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 397, 434, 470, 483, 488], "inclus": [65, 297], "inclusion_filt": 297, "incompat": [143, 161, 336], "incomplet": [112, 113, 116, 131, 161, 233], "inconsist": [154, 161, 349, 351], "incorpor": [63, 99, 167], "incorrect": 181, "increas": [34, 43, 44, 65, 68, 78, 88, 91, 103, 104, 130, 143, 161, 172, 173, 175, 178, 181, 187, 224, 238, 351, 378, 391, 397, 432, 445, 446, 447, 454, 459, 472, 495], "increment": [65, 94, 183, 184], "inde": [6, 42, 49, 85, 162, 163, 171, 178, 337, 492], "indent": 93, "independ": [40, 48, 65, 96, 109, 118, 134, 161, 165, 167, 168, 173, 175, 178, 181, 188, 219, 220, 263, 298, 299, 300, 301, 305, 354, 361, 366, 377, 378, 380, 386, 397, 447, 452, 473, 494], "index": [2, 6, 12, 20, 22, 23, 33, 40, 41, 50, 55, 56, 64, 65, 67, 70, 71, 86, 87, 99, 100, 103, 112, 115, 132, 138, 156, 161, 166, 182, 196, 197, 244, 245, 253, 254, 256, 264, 283, 297, 298, 299, 300, 301, 326, 328, 329, 343, 361, 369, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 449, 461, 463, 473, 477], "index_": [50, 86, 166, 461], "index_img": [2, 3, 20, 29, 30, 31, 32, 33, 34, 36, 37, 49, 50, 86, 88, 91, 97, 102, 104, 163, 166, 187, 188, 355, 362], "index_of_each_map": 463, "index_to_xy_coord": 40, "indexerror": [134, 156, 161], "indi": [23, 115, 196, 222, 243, 287], "indic": [9, 23, 30, 32, 41, 50, 54, 58, 65, 71, 78, 85, 111, 115, 138, 141, 146, 161, 166, 173, 176, 181, 184, 186, 197, 226, 231, 242, 244, 245, 248, 250, 251, 253, 254, 257, 258, 266, 277, 284, 285, 298, 299, 300, 301, 303, 304, 305, 306, 307, 336, 339, 355, 367, 369, 370, 372, 380, 382, 383, 384, 385, 386, 387, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 437, 440, 445, 446, 447, 448, 449, 450, 451, 454, 455, 457, 461, 463, 470], "indirect": [162, 163], "individu": [51, 58, 62, 65, 67, 71, 75, 77, 78, 79, 80, 93, 99, 100, 108, 112, 113, 120, 162, 167, 180, 181, 183, 185, 188, 193, 194, 198, 200, 205, 212, 215, 234, 235, 260, 272, 351, 395, 449, 479, 495], "inertia": 458, "inf": [14, 54, 103, 354, 382, 385, 388, 391, 473, 478, 479], "infer": [11, 49, 62, 64, 75, 78, 83, 99, 102, 120, 176, 178, 180, 181, 331, 339, 351, 369, 376, 397, 433], "inferior": 90, "infin": 14, "infinit": 369, "infl_": 37, "infl_left": [22, 23, 67, 108, 207, 208, 209, 210, 211, 286, 442, 455, 492], "infl_mesh": 37, "infl_right": [9, 67, 108, 207, 208, 209, 210, 211, 286, 442, 455], "inflat": [9, 22, 23, 37, 67, 111, 112, 113, 114, 115, 120, 202, 207, 208, 209, 210, 211, 286, 307, 442, 448, 449, 450, 451, 455, 457, 476, 477], "influenc": [68, 175, 242, 304], "info": [176, 184, 199, 277, 279, 442, 448, 449, 450, 451], "inform": [3, 6, 9, 11, 16, 18, 21, 23, 25, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 48, 49, 51, 52, 53, 54, 58, 61, 62, 65, 66, 71, 74, 76, 77, 88, 90, 91, 93, 94, 99, 100, 101, 102, 104, 105, 108, 111, 113, 115, 120, 122, 123, 127, 130, 133, 143, 147, 157, 161, 162, 163, 166, 167, 168, 170, 172, 175, 176, 177, 180, 181, 183, 184, 186, 188, 193, 194, 195, 196, 197, 200, 201, 203, 204, 213, 214, 218, 219, 220, 221, 223, 227, 228, 231, 232, 234, 235, 236, 242, 244, 245, 246, 247, 252, 254, 255, 257, 258, 266, 267, 274, 275, 276, 277, 279, 281, 289, 290, 292, 293, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 329, 336, 349, 351, 363, 365, 369, 375, 376, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461, 471, 472, 473, 479, 482, 493, 495], "informat": [0, 223], "infrastructur": [176, 184], "inher": [154, 161], "inherit": [14, 132, 161, 327, 469], "ini": 184, "init": [176, 458], "init_with_figur": [399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "initi": [0, 3, 12, 48, 49, 50, 67, 93, 99, 112, 131, 161, 166, 174, 177, 186, 188, 193, 216, 236, 238, 305, 306, 323, 327, 381, 382, 384, 385, 387, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 458, 461], "inlin": [175, 469], "inner": [298, 299, 300, 301, 374, 477], "inner_mesh": [24, 477], "innermost": 175, "inplac": 472, "input": [2, 3, 4, 6, 9, 14, 15, 23, 32, 49, 54, 55, 57, 66, 69, 70, 75, 76, 78, 79, 83, 84, 87, 88, 91, 93, 96, 97, 108, 109, 111, 112, 115, 118, 122, 130, 131, 132, 135, 136, 139, 140, 141, 142, 144, 145, 146, 149, 153, 155, 156, 157, 158, 161, 165, 168, 171, 173, 175, 176, 177, 181, 185, 187, 188, 194, 217, 230, 234, 235, 236, 237, 238, 239, 240, 241, 243, 246, 247, 255, 273, 274, 298, 299, 300, 301, 302, 303, 304, 305, 306, 331, 333, 335, 336, 338, 343, 344, 349, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 432, 433, 439, 440, 442, 445, 446, 447, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 473, 477, 479, 492, 494, 495], "input_data": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 102, 103, 104, 105, 106, 122, 156, 161], "input_output": [149, 161], "inria": [0, 44, 120, 166, 174, 204, 220, 249, 252, 461], "insect": [120, 214, 267], "insensit": 169, "insert": [33, 253, 254, 311, 336, 349, 453, 454, 455, 456, 457, 469, 471, 492], "insid": [14, 21, 24, 34, 49, 55, 97, 171, 176, 234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 354, 360, 374, 380, 381, 382, 383, 384, 385, 386, 387, 433, 445, 446, 449, 450, 458, 459, 460, 461, 477], "insight": [0, 56, 155, 161, 162], "inspect": [6, 40, 48, 55, 65, 68, 70, 88, 91, 163, 168, 183, 196, 336, 349, 479], "inspir": [50, 174, 176, 184], "instabl": [57, 65, 175, 472], "instal": [9, 111, 118, 129, 132, 141, 146, 149, 156, 157, 161, 183, 184, 250, 251, 356, 382, 385, 387, 448, 450, 451, 461, 492], "instanc": [3, 4, 6, 15, 31, 49, 51, 65, 66, 85, 112, 115, 143, 149, 156, 161, 162, 163, 165, 167, 168, 176, 177, 178, 180, 181, 183, 186, 187, 234, 235, 236, 241, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 323, 324, 326, 327, 328, 329, 332, 333, 336, 343, 345, 349, 351, 355, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 434, 437, 439, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 458, 459, 460, 461, 493], "instant": [354, 473], "instantan": 71, "instanti": [50, 51, 54, 88, 90, 91, 156, 161, 302, 408, 410, 413, 415, 417, 419, 421, 423, 425, 479], "instead": [9, 14, 32, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 68, 88, 90, 91, 93, 97, 98, 99, 102, 103, 104, 105, 106, 111, 122, 129, 130, 132, 134, 136, 139, 140, 142, 143, 144, 146, 149, 153, 155, 156, 157, 158, 161, 174, 175, 176, 177, 187, 188, 199, 234, 235, 236, 259, 281, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 324, 332, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 397, 458, 459, 460, 461], "institut": [0, 178, 181, 194, 195, 198, 222, 223, 244], "instruct": [65, 67, 71, 112, 118, 129, 157, 161, 176, 182, 184, 278, 493], "insula": 103, "insular": [90, 120, 212], "int": [10, 11, 23, 36, 40, 41, 42, 48, 49, 50, 57, 62, 66, 76, 77, 78, 83, 85, 93, 94, 99, 100, 103, 105, 115, 133, 158, 161, 166, 176, 197, 235, 238, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 323, 324, 326, 328, 329, 336, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 353, 355, 360, 366, 377, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 432, 433, 434, 437, 439, 440, 443, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 466, 469, 470, 471, 472, 474, 477], "int32": [10, 11, 36, 49, 78, 83, 85, 93, 158, 161, 186, 364, 381, 382, 383, 384, 385, 386, 387], "int64": [10, 11, 36, 49, 78, 85, 93, 100, 116, 158, 161, 186, 458, 460], "int8": [158, 161, 367], "integ": [15, 58, 83, 93, 132, 136, 140, 149, 153, 156, 158, 161, 181, 186, 188, 231, 236, 238, 242, 244, 246, 248, 250, 251, 253, 254, 257, 258, 277, 279, 303, 304, 305, 306, 336, 355, 389, 390, 391, 393, 394, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 437, 439, 440, 445, 446, 447, 449, 450, 462, 467, 468, 471], "integr": [97, 134, 149, 161, 176, 187, 383, 479], "intel": [49, 120, 460, 466], "intellig": [0, 83, 120, 196, 198], "intend": [188, 214, 329, 369, 370], "intens": [25, 50, 63, 68, 71, 80, 87, 93, 186, 187, 305, 353, 373, 377, 432, 433, 439, 445, 446, 447, 454, 461, 477, 492], "intent": 176, "intent_cod": [56, 90, 101], "intent_nam": [56, 90, 101], "intent_p1": [56, 90, 101], "intent_p2": [56, 90, 101], "intent_p3": [56, 90, 101], "inter": [99, 105, 163, 187, 188, 198, 215, 392, 394], "interact": [15, 22, 47, 52, 54, 58, 99, 114, 132, 146, 147, 151, 156, 161, 164, 166, 176, 181, 182, 183, 453, 454, 456, 495], "intercept": [42, 74, 75, 76, 78, 79, 80, 102, 106, 130, 161, 173, 298, 299, 300, 301, 303, 304, 350, 351, 397], "intercept_": [298, 299, 300, 301, 303, 304], "interchang": [152, 161], "interest": [3, 6, 14, 15, 16, 23, 35, 42, 49, 51, 55, 66, 68, 69, 70, 82, 95, 97, 98, 99, 100, 104, 107, 115, 118, 120, 123, 134, 152, 161, 162, 168, 170, 171, 173, 175, 176, 177, 178, 181, 183, 187, 188, 201, 205, 212, 242, 243, 249, 252, 254, 263, 265, 266, 267, 269, 270, 271, 272, 275, 276, 281, 284, 285, 286, 287, 326, 328, 329, 359, 364, 366, 367, 371, 374, 380, 384, 437, 446, 447, 449, 452, 461, 494, 495], "interestingli": 65, "interfac": [62, 74, 132, 133, 152, 156, 161, 167, 175, 176, 181, 298, 299], "intermedi": [43, 67, 112, 171, 183], "intermediari": 47, "intern": [0, 34, 48, 120, 167, 174, 175, 176, 178, 193, 198, 224, 236, 246, 305, 306, 363, 365], "internet": [3, 49, 167, 185, 190, 495], "interpol": [9, 24, 40, 41, 44, 52, 65, 74, 83, 111, 132, 138, 161, 198, 277, 368, 369, 370, 439, 440, 446, 447, 454, 473, 477], "interpret": [15, 51, 68, 120, 164, 173, 174, 175, 178, 194, 228, 244, 248, 250, 251, 254, 255, 258, 365, 397, 492, 495], "intersect": [93, 187, 195, 392, 394, 395, 465], "intersect_mask": 187, "intersubject": [120, 207, 208, 209, 210, 211, 286], "interv": [64, 65, 99, 298, 299, 300, 301, 303, 304, 326, 328, 329, 460, 466, 477], "intervent": [120, 162, 234], "intra": [30, 32], "intracalcarin": 90, "intracrani": 281, "intrins": [36, 120, 165, 198, 226, 228, 232, 254, 255, 258, 378], "intro": [1, 7, 65, 118, 183, 284, 336, 352, 355, 366, 432, 435, 436, 440, 447, 470, 494], "introduc": [123, 139, 149, 158, 161, 168, 169, 173, 176, 188, 234, 235, 242, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "introduct": [1, 7, 118, 120, 129, 146, 161, 169, 171, 172, 176, 179, 180, 182, 188, 266, 298, 328, 329, 361, 366, 437, 446, 454, 494, 495], "introductori": [1, 118, 176], "invalid": [58, 116, 129, 136, 161, 385, 465], "invcov": [326, 328, 329], "invers": [6, 46, 58, 59, 97, 118, 120, 151, 161, 163, 164, 168, 175, 182, 185, 236, 241, 252, 263, 326, 328, 329, 333, 380, 385, 430, 434, 443, 444, 452, 453, 458, 494, 495], "inverse_transform": [36, 40, 42, 49, 55, 91, 97, 99, 102, 103, 104, 105, 106, 116, 121, 130, 142, 149, 158, 161, 165, 234, 305, 306, 317, 318, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461, 495], "invert": [97, 104, 131, 152, 161, 175, 188, 234, 326, 328, 329, 380, 383, 386, 398, 432, 434, 437, 439, 440, 443, 445, 446, 447], "invest": 0, "investig": [70, 93, 97, 167, 213, 219, 302], "investiss": 0, "invit": 224, "involv": [65, 67, 69, 99, 112, 120, 178, 183, 193, 242], "inward": 477, "io": [62, 78, 100, 154, 161, 166, 184, 193, 199, 203, 204, 216, 224, 249, 253, 263, 272, 455, 493], "ion": [229, 230, 284, 285], "ip": 51, "ipynb": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116], "ipython": [2, 4, 16, 168, 183, 493], "iq": [181, 196, 298, 299, 300, 301], "irb": 194, "irrespect": [178, 445], "is_us": 103, "is_valid": [123, 149, 161], "isabel": [70, 120, 206], "isbi": [48, 120, 167, 305, 306], "isbn": [120, 323, 327, 328, 329], "isf": [62, 75, 78, 100, 107, 108, 113], "ishai": [3, 31, 32, 38, 97, 120, 213, 266], "isin": [3, 29, 31, 34, 36, 37, 97, 102, 122, 123, 277], "isnan": [44, 76, 93, 102, 105, 106], "isnul": [123, 277], "isol": [6, 68, 69, 99, 168, 178], "isort": [131, 161, 176], "isotrop": [166, 198], "isovoxel": 173, "israel": 0, "issu": [66, 141, 142, 143, 144, 145, 153, 155, 156, 158, 175, 176, 178, 180, 181, 358, 363], "itali": 0, "item": [21, 33, 64, 65, 67, 69, 70, 99, 105, 112, 123, 133, 161, 277, 278, 279, 280, 339, 383, 392, 394], "iter": [34, 53, 67, 69, 91, 104, 112, 149, 161, 168, 173, 198, 235, 236, 238, 298, 299, 300, 301, 303, 304, 305, 306, 355, 359, 362, 363, 366, 371, 428, 459, 460, 466], "iter_img": [2, 48, 187, 361], "iterrow": 99, "itertool": 78, "its": [2, 3, 15, 19, 26, 29, 30, 31, 32, 33, 34, 35, 36, 40, 44, 56, 58, 65, 67, 83, 87, 88, 89, 91, 93, 97, 99, 108, 112, 122, 123, 138, 141, 149, 152, 154, 156, 158, 161, 162, 165, 167, 168, 169, 171, 173, 174, 175, 176, 178, 180, 181, 184, 188, 213, 241, 254, 256, 266, 277, 278, 279, 280, 298, 299, 300, 301, 303, 304, 305, 306, 323, 327, 336, 338, 343, 349, 350, 351, 353, 364, 432, 433, 434, 437, 439, 440, 443, 445, 446, 447, 448, 449, 450, 451, 458, 459, 460, 461, 479, 488], "itself": [19, 34, 65, 165, 198, 234, 235, 236, 305, 306, 359, 459, 477], "ivan": [139, 146, 161], "j": [22, 23, 37, 40, 41, 47, 48, 49, 51, 56, 58, 66, 69, 75, 83, 98, 99, 102, 114, 115, 120, 123, 143, 146, 155, 161, 162, 163, 167, 169, 170, 173, 174, 181, 194, 195, 198, 200, 202, 204, 212, 214, 218, 219, 220, 221, 224, 225, 226, 227, 231, 246, 248, 249, 252, 253, 254, 256, 257, 261, 262, 264, 267, 272, 274, 275, 276, 277, 279, 282, 292, 300, 301, 305, 331, 351, 354, 377, 378, 397, 433, 473, 474, 492], "j_col": 78, "jaakkola": [120, 175, 235, 238], "jack": [120, 169, 231, 257], "jake": [0, 149, 161], "jakob": [37, 120], "jame": [3, 31, 32, 38, 97, 120, 201, 213, 247, 266, 328, 329], "jami": [120, 223, 281], "jan": [0, 120, 124, 161, 377, 378], "janaina": [120, 174, 183, 198], "janet": [120, 193, 242], "jani": [120, 212], "januari": [120, 129, 150, 156, 161, 162], "jaqu": [0, 124, 161], "jare": [120, 193, 242], "jargon": 93, "jason": [0, 124, 146, 161], "javier": [0, 154, 161], "javitt": [23, 115, 120, 222, 287], "jawhar": [0, 158, 161], "jean": [0, 48, 49, 70, 71, 120, 124, 143, 146, 161, 162, 165, 167, 175, 200, 206, 212, 221, 235, 238, 272, 277, 279, 305], "jeanett": [99, 120, 168, 183], "jeff": [143, 161], "jeffrei": [120, 173, 193, 242], "jehan": [146, 161], "jell": [0, 75, 120, 129, 130, 161, 331], "jenkinson": [120, 194, 274], "jennif": [3, 31, 32, 38, 97, 120, 213, 266], "jeremi": [0, 154, 161], "jerom": [0, 131, 132, 139, 143, 145, 146, 147, 149, 150, 158, 161], "jess": [99, 120], "jessica": [58, 120, 197, 205, 225, 228, 245, 255, 260, 261], "jiang": [120, 162, 234], "jill": [120, 194, 197, 202, 212, 245, 248, 274], "jimura": [28, 45, 118, 120, 218, 275, 301, 304, 447, 494], "jitsi": 493, "jn": [120, 226, 232, 254, 258], "jneurosci": [120, 173], "job": [78, 123, 336, 349, 351, 397], "jobert": [70, 71, 120, 200, 206, 272], "joblib": [11, 33, 48, 49, 52, 53, 54, 56, 58, 91, 129, 132, 149, 152, 156, 161, 165, 235, 298, 299, 300, 301, 303, 304, 305, 306, 336, 349, 355, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 459, 460, 461, 479], "jocn": [120, 223, 228, 255, 281], "jocn_a_00077": [120, 228, 255], "joe": [143, 161], "johann": [0, 149, 161], "johansen": [120, 194, 274], "john": [0, 23, 37, 58, 102, 115, 120, 143, 161, 173, 175, 197, 205, 222, 223, 245, 260, 281, 287, 397], "johnson": [0, 130, 161], "joi": [120, 377, 378, 474], "join": [62, 74, 103, 176, 477, 493], "joint_mni_imag": 361, "jointli": [63, 176, 366, 442, 448, 450, 451, 455, 457], "joliot": [120, 195, 244], "jon": [0, 151, 161], "jona": [0, 49, 120, 143, 161, 460, 466], "jonathan": [56, 58, 75, 120, 174, 198, 205, 225, 226, 232, 254, 258, 260, 261, 331, 377, 378, 433], "jordan": [120, 226, 232, 254, 258], "jordi": [0, 132, 161], "jorg": [120, 198, 226, 232, 254, 258], "joseph": [58, 120, 162, 197, 205, 245, 260], "joset": [120, 173], "josh": [99, 120], "joshi": [0, 120, 159, 161], "joshua": [0, 120, 151, 161, 226, 232, 254, 258], "josien": [120, 162, 234], "joulot": [0, 158, 161], "journal": [102, 120, 173, 183, 198, 212, 223, 226, 228, 232, 254, 255, 258, 281, 397], "jp": 219, "jpg": 197, "jqueri": [155, 161], "jr": [120, 212], "js_plotting_util": [146, 161], "json": [62, 74, 99, 100, 108, 113, 123, 133, 161, 339, 374, 376, 377, 378], "json_fil": 108, "juan": [120, 197, 245], "judg": [34, 85], "judith": [120, 197, 245], "juelich": [155, 161, 190, 251], "juli": [120, 128, 161, 162, 378], "julia": [0, 134, 149, 161], "julich": [120, 215], "julien": [71, 120, 200, 272], "julio": [0, 130, 161], "junction": 58, "june": [120, 139, 142, 145, 154, 161, 174, 183], "jung": [120, 197, 245], "jupyt": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 118, 147, 149, 161, 168, 183, 188, 336, 349, 453, 454, 455, 456, 457, 469, 471, 492], "just": [3, 4, 6, 14, 16, 21, 40, 42, 44, 49, 50, 51, 56, 58, 64, 65, 69, 70, 74, 75, 76, 78, 80, 86, 90, 97, 99, 100, 101, 116, 122, 138, 161, 166, 168, 175, 178, 183, 184, 188, 336, 349, 354, 371, 374, 377, 445, 446, 447, 454, 471, 473, 477, 492], "justifi": 0, "justin": [120, 378], "juxtaposit": 90, "j\u00fclich": 0, "k": [9, 18, 22, 30, 32, 34, 35, 41, 42, 49, 51, 66, 80, 83, 90, 97, 111, 114, 116, 120, 168, 171, 173, 175, 194, 212, 236, 264, 274, 282, 298, 299, 300, 301, 303, 304, 328, 329, 336, 345, 354, 377, 378, 384, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 434, 437, 439, 440, 443, 445, 446, 447, 458, 473, 479], "k4jp8": 216, "k_init": 458, "kabani": [120, 195], "kahn": [49, 120, 460, 466], "kahnt": [120, 173], "kai": [120, 169], "kaleido": [9, 111, 156, 161, 448, 450, 451, 492, 493], "kalyanam": [120, 197, 245], "kamalak": [51, 98, 120, 204, 249], "kamalakar": [0, 127, 134, 136, 139, 143, 144, 146, 149, 153, 161], "kamiel": [23, 115, 120, 222, 287], "kamil": [120, 194, 274], "kamitani": [40, 41, 120, 219, 276], "kanaan": [0, 47, 139, 161], "kaplan": [23, 115, 120, 222, 287], "kardiom": 0, "karl": [6, 120, 229], "karla": [120, 162, 194, 228, 255, 274], "karlsgodt": [120, 264, 282], "kate": [23, 115, 120, 222, 228, 255, 287], "kathmandu": 0, "katovich": [120, 174], "katrin": 120, "keep": [3, 31, 33, 34, 36, 50, 51, 54, 58, 65, 67, 68, 83, 85, 93, 97, 102, 103, 112, 123, 127, 130, 132, 146, 153, 161, 166, 168, 169, 170, 173, 174, 176, 277, 281, 297, 303, 304, 305, 354, 360, 373, 375, 389, 390, 391, 392, 393, 394, 395, 461, 462, 473, 474], "keep_masked_label": [49, 56, 90, 131, 161, 384, 464, 479], "keep_masked_map": [52, 53, 54, 131, 161, 385, 465, 479], "kei": [14, 54, 58, 65, 78, 101, 122, 123, 131, 161, 163, 176, 183, 186, 195, 242, 244, 245, 246, 247, 250, 251, 255, 258, 267, 273, 277, 298, 299, 300, 301, 315, 323, 327, 332, 336, 343, 345, 349, 351, 375, 376, 397, 408, 433, 442, 455], "keith": [99, 120], "keller": [120, 305], "kelli": [23, 58, 115, 120, 198, 205, 214, 222, 225, 260, 261, 267, 287, 292, 377, 378], "kendrick": [120, 169], "kennedi": [120, 202, 212, 248], "kent": [120, 197, 245], "kept": [14, 123, 131, 161, 176, 240, 250, 251, 298, 299, 300, 301, 353, 354, 371, 389, 390, 391, 392, 393, 394, 395, 461, 463, 469, 473], "keribin": [49, 120], "kern": 175, "kernel": [3, 29, 33, 34, 35, 44, 55, 93, 97, 168, 198, 299, 301, 304, 340, 341, 342, 346, 347, 348], "kevin": [0, 130, 161], "keyword": [15, 97, 123, 149, 161, 171, 175, 188, 236, 242, 277, 288, 339, 354, 365, 376, 378, 381, 382, 383, 384, 385, 386, 387, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 437, 438, 439, 440, 442, 444, 445, 446, 447, 449, 450, 451, 455, 473], "kfold": [34, 36, 37, 40, 44, 303, 304], "khale": [120, 377, 378, 474], "khanuja": [23, 115, 120, 222, 287], "khorshidi": [120, 162, 194, 274], "kiar": [0, 149, 161], "kiefer": [120, 174], "kiehl": [120, 197, 245], "kiesling": [0, 130, 161], "kill": 65, "kimberli": [120, 228, 255], "kind": [3, 16, 47, 50, 54, 56, 58, 78, 116, 122, 142, 161, 162, 166, 169, 175, 181, 234, 477, 492], "kindli": [184, 212], "king": [0, 23, 115, 120, 143, 146, 161, 222, 287], "kingston": 0, "kit": 198, "kj": 123, "klein": 120, "kleinschmidt": [48, 120, 162, 167, 234, 305], "kline": 222, "klingenberg": [120, 174], "kmean": [156, 158, 161, 165, 182, 187, 336, 345, 458, 459], "kmeans_count": 49, "kmeans_labels_img": 49, "kmeans_parcel": 49, "knive": 188, "knop": [120, 183], "know": [21, 83, 123, 175, 176, 178, 181, 241, 279], "knowledg": [58, 121, 163, 178, 387, 479], "known": [11, 33, 34, 99, 113, 114, 152, 168, 169, 173, 176, 178, 227, 254, 326, 328, 329, 336, 433], "knutson": [120, 174], "kochunov": [120, 231, 257], "kodibagkar": [0, 131, 161], "kodituwakku": [120, 197, 245], "koen": [0, 158, 161], "koji": [120, 218, 275], "koller": [120, 175], "kollokian": [120, 195], "komesu": [120, 197, 245], "koneru": [120, 212], "kong": [120, 226, 254], "konrad": [0, 131, 161], "konstantin": [0, 124, 161], "koplewicz": [23, 115, 120, 222, 287], "kosha": [56, 120, 377, 378], "kossaifi": [0, 124, 161], "kouw": [120, 202, 248], "krain": 120, "kriegeskort": [120, 173, 183, 302], "krienen": [120, 226, 232, 254, 258], "krish": [0, 132, 161], "kristin": 120, "krzysztof": [120, 204, 221, 249, 277, 279], "kshitij": [0, 146, 147, 148, 149, 150, 151, 152, 161], "kth": [3, 16], "kuba": [120, 214, 267], "kun": [0, 158, 161], "kwarg": [11, 18, 58, 116, 130, 132, 133, 149, 159, 161, 242, 307, 308, 309, 310, 311, 314, 318, 319, 320, 339, 354, 376, 378, 380, 381, 382, 383, 384, 385, 386, 387, 393, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 434, 437, 439, 440, 442, 443, 444, 445, 446, 447, 449, 450, 451, 458, 460, 473], "kwarg_image_filt": 277, "kxm045": [120, 162], "l": [3, 14, 31, 32, 37, 38, 41, 44, 51, 56, 58, 68, 69, 93, 97, 120, 131, 149, 156, 161, 162, 168, 169, 174, 183, 194, 195, 198, 205, 212, 213, 223, 225, 226, 227, 228, 231, 232, 242, 244, 254, 255, 257, 258, 260, 261, 262, 266, 274, 281, 336, 349, 377, 378, 398, 400, 401, 402, 403, 404, 405, 406, 407, 426, 432, 434, 437, 439, 440, 443, 445, 446, 447, 471, 492], "l1": [34, 43, 120, 169, 170, 174, 235, 238, 298, 299, 300, 303, 304], "l1_ratio": [44, 303, 304], "l2": [31, 34, 169, 170, 298, 300, 458, 459, 460], "la": 0, "la5c": [264, 282], "lab": 0, "label": [6, 9, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 47, 49, 52, 53, 54, 58, 61, 64, 65, 66, 67, 82, 90, 93, 95, 97, 99, 102, 103, 108, 111, 114, 115, 116, 118, 120, 122, 129, 130, 132, 133, 138, 141, 146, 149, 153, 154, 156, 158, 161, 163, 165, 168, 169, 171, 173, 176, 181, 186, 187, 188, 195, 197, 204, 205, 212, 213, 215, 219, 220, 224, 226, 231, 232, 242, 244, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 260, 262, 266, 276, 298, 299, 300, 301, 302, 303, 304, 307, 317, 332, 336, 339, 343, 345, 350, 374, 377, 378, 381, 384, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 432, 433, 434, 437, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 475, 484, 494], "label_hemispher": 429, "label_idx": 90, "label_map": 470, "label_nam": [111, 116, 317], "label_names_": [116, 317], "label_top": [398, 400, 401], "labelencod": 98, "labelpad": 68, "labels_": [317, 336, 458, 460], "labels_data_": 317, "labels_img": [47, 49, 56, 90, 93, 116, 163, 317, 381, 384, 429, 462, 464, 467, 479], "labels_img_": [49, 165, 381, 384, 459], "labels_list": 429, "labels_mask": 116, "laboratori": 0, "laci": [120, 231, 257], "lack": [132, 161], "ladouceur": [120, 183], "lag": [6, 47, 64, 65], "lag_cor": 47, "lag_correl": 47, "lag_correlation_matrix": 47, "lainhart": [120, 193, 242], "laird": [120, 228, 255], "lambda": 123, "lambertz": [70, 120, 206], "lan": [0, 143, 146, 161], "lancast": [120, 231, 257], "landeau": [120, 195, 244], "lane": [0, 120, 158, 161, 397], "lang": [120, 193, 195, 212, 242, 244], "lang_beta_seri": 99, "lang_corr": 99, "lang_seed_beta_seri": 99, "languag": [51, 70, 99, 100, 108, 113, 120, 123, 190, 200, 206, 259, 269, 272], "language_connectivity_img": 99, "languageloc": [99, 100, 108, 113], "languagelocalizer_desc": [99, 100, 108, 113], "lannuzel": [143, 146, 161], "lapack": [141, 161, 175], "lar": 306, "larg": [3, 30, 31, 36, 39, 41, 49, 54, 56, 64, 68, 69, 71, 120, 123, 147, 161, 165, 168, 169, 170, 171, 173, 175, 176, 178, 181, 182, 183, 186, 188, 200, 214, 221, 272, 277, 279, 336, 338, 343, 382, 385, 389, 390, 391, 393, 394, 428, 459, 479], "larger": [51, 74, 79, 85, 98, 167, 169, 173, 175, 176, 178, 303, 304, 432, 445, 446, 447, 454], "largest": [142, 161, 175, 363, 389, 390, 391, 392, 393, 394, 395, 431], "largest_connected_compon": [142, 161], "largest_connected_component_img": [142, 161], "larri": [120, 202, 212, 248], "lars_path": 306, "larson": [0, 133, 143, 146, 147, 149, 161], "lashkari": [120, 226, 232, 254, 258], "lasso": [40, 57, 58, 120, 162, 169, 174, 175, 299, 301, 303, 304, 306], "lasso_regressor": [169, 299, 301], "lassocv": [131, 161, 298, 299, 300, 301], "lassolarscv": 40, "last": [3, 6, 33, 35, 40, 55, 71, 148, 161, 178, 183, 184, 240, 241, 354, 361, 375, 492, 493], "latent": [104, 181], "later": [3, 6, 9, 22, 23, 40, 62, 67, 69, 90, 99, 100, 103, 111, 114, 115, 116, 178, 186, 198, 248, 250, 251, 358, 429, 432, 437, 439, 440, 442, 446, 447, 448, 450, 451, 469, 492], "latest": [141, 161, 176, 184, 378], "latex": [62, 129, 161, 184], "latter": [47, 169, 175, 234, 235, 236, 250, 251, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "laumann": [58, 120, 225, 226, 254, 261, 377], "launch": [151, 161, 168], "laura": [23, 115, 120, 222, 287], "lausann": 0, "law": 194, "lawrenc": [120, 231, 257], "layer": 88, "layout": [146, 161, 302, 399], "lda": 97, "le": [71, 120, 200, 272], "lead": [34, 47, 48, 57, 83, 129, 131, 132, 133, 152, 161, 174, 175, 176, 178, 181, 236, 324, 336, 382, 385, 472, 492], "leak": [399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "learn": [3, 21, 34, 36, 44, 46, 52, 56, 57, 58, 59, 93, 96, 102, 104, 109, 118, 120, 121, 123, 127, 129, 132, 134, 139, 141, 142, 143, 144, 146, 149, 154, 156, 161, 162, 163, 164, 165, 168, 169, 170, 172, 173, 175, 176, 181, 182, 184, 189, 203, 220, 234, 235, 238, 252, 263, 266, 275, 298, 299, 300, 301, 302, 305, 306, 317, 318, 359, 361, 362, 366, 380, 381, 382, 383, 384, 385, 386, 387, 410, 417, 430, 431, 432, 434, 437, 444, 445, 446, 447, 452, 459, 461, 493, 494, 495], "learner": [298, 299, 300, 301, 303, 304], "learnt": 39, "least": [65, 66, 99, 102, 103, 105, 120, 168, 174, 176, 306, 323, 327, 336, 345, 349, 350, 351, 382, 385, 387, 391, 397, 428, 493], "leav": [17, 29, 33, 168, 173, 358], "leave_spac": [399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "leaveonegroupout": [3, 29, 30, 32, 33, 97, 143, 161, 168, 171, 173, 298, 299, 300, 301], "leavepgroupsout": [298, 299, 300, 301], "lebihan": [70, 120, 206], "lectur": [120, 162, 183, 234], "ledoit": [58, 175], "ledoitwolf": 234, "lee": 120, "lefort": [0, 154, 161], "left": [9, 12, 20, 22, 23, 25, 34, 37, 40, 44, 49, 50, 51, 58, 64, 65, 66, 71, 75, 76, 78, 79, 85, 93, 100, 105, 108, 111, 112, 113, 114, 115, 116, 120, 139, 140, 144, 149, 152, 154, 161, 166, 183, 187, 202, 207, 208, 209, 210, 211, 212, 219, 222, 242, 248, 250, 251, 256, 270, 272, 280, 286, 287, 307, 308, 309, 310, 311, 315, 336, 349, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 432, 433, 434, 437, 439, 440, 442, 443, 444, 445, 446, 447, 448, 450, 451, 455, 471], "left_001": 99, "left_right": [399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "legaci": 397, "legacy_format": [9, 17, 21, 42, 43, 47, 58, 74, 75, 76, 78, 79, 80, 105, 106, 111, 156, 161, 242, 248, 249, 260, 261, 262, 270, 271, 272, 281], "legacy_output": [99, 100, 108, 113, 269], "legarreta": [0, 151, 161], "legend": [9, 18, 30, 32, 34, 42, 43, 49, 58, 61, 66, 90, 111, 133, 161, 449], "legend_guid": 18, "leipzig": 0, "lemaitr": [0, 146, 149, 161], "len": [3, 12, 22, 30, 32, 33, 34, 47, 48, 51, 62, 63, 64, 65, 66, 67, 70, 75, 78, 90, 93, 97, 103, 112, 114, 116, 123, 238, 298, 299, 300, 301, 303, 304, 326, 328, 329, 333, 349, 366, 369, 389, 391, 392, 394, 459], "length": [3, 15, 55, 66, 70, 76, 166, 176, 249, 252, 298, 299, 300, 301, 303, 304, 323, 327, 328, 329, 340, 341, 342, 346, 347, 348, 355, 380, 383, 386, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 432, 437, 440, 443, 444, 445, 446, 447, 459, 471, 477], "leon": [0, 149, 161], "leonard": [0, 156, 161], "less": [20, 48, 49, 50, 56, 63, 65, 67, 70, 71, 76, 78, 87, 93, 99, 112, 123, 146, 147, 154, 161, 173, 175, 176, 178, 184, 233, 327, 373, 428, 495], "lessorequ": [123, 277], "lessov": [58, 120, 205, 260], "lessthan": [123, 277], "let": [2, 3, 4, 6, 15, 40, 49, 56, 63, 65, 67, 69, 71, 74, 76, 77, 78, 85, 92, 97, 101, 112, 116, 169, 176, 183, 353, 365], "leticia": [120, 183], "letter": 470, "level": [6, 9, 14, 15, 18, 33, 39, 48, 49, 51, 56, 63, 68, 69, 72, 74, 81, 96, 104, 105, 109, 110, 111, 117, 120, 129, 130, 131, 132, 133, 152, 153, 158, 159, 161, 164, 165, 169, 172, 175, 176, 178, 179, 181, 184, 186, 190, 192, 198, 200, 230, 234, 235, 236, 238, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 316, 321, 322, 324, 326, 328, 329, 331, 332, 336, 339, 343, 345, 349, 350, 351, 352, 354, 359, 360, 365, 370, 373, 374, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 395, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 435, 436, 439, 440, 441, 445, 446, 447, 448, 449, 450, 451, 452, 454, 458, 459, 460, 461, 466, 469, 470, 471, 473, 477, 489, 492, 494, 495], "level_nam": 257, "leventh": [23, 115, 120, 222, 287], "leverag": [20, 152, 161, 182, 183, 298, 299, 459, 493], "lfcd": 242, "lh": 219, "li": [23, 88, 115, 120, 222, 287], "liam": [120, 212], "liau": [120, 377, 378, 474], "lib": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 61, 65, 69, 70, 71, 74, 76, 77, 78, 83, 85, 88, 90, 91, 92, 94, 97, 102, 103, 104, 105, 106, 111, 116], "liber": [47, 78], "liblinear": [34, 298, 300], "librari": [5, 12, 24, 38, 44, 66, 77, 90, 93, 98, 105, 106, 116, 122, 146, 161, 171, 176, 183, 187, 233, 483, 492, 493], "licenc": [201, 212, 215, 244, 245, 247, 254, 258], "licens": [0, 131, 161, 247], "lie": [55, 235, 238, 384, 464], "liem": [0, 55, 147, 149, 151, 161], "life": [146, 161], "lifespan": 0, "lifetim": 196, "light": [37, 141, 147, 149, 161, 176, 351], "like": [6, 10, 11, 16, 34, 36, 40, 47, 49, 54, 56, 58, 65, 78, 80, 85, 88, 90, 91, 93, 99, 101, 123, 131, 149, 153, 156, 157, 158, 161, 174, 175, 176, 177, 178, 180, 181, 184, 185, 187, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 284, 285, 286, 287, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 313, 314, 323, 326, 327, 328, 329, 331, 333, 336, 338, 339, 349, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 432, 433, 437, 439, 440, 442, 443, 445, 446, 447, 448, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 477, 479, 481, 492, 495], "likelihood": [53, 175, 178, 234, 323, 326, 327, 328, 329], "likelihoodmodel": [323, 326], "likelihoodmodelresult": [158, 159, 161, 328, 329], "likewis": 166, "lilla": [120, 226, 232, 254, 258], "limbic": [120, 212], "limegreen": 18, "limit": [14, 42, 74, 87, 130, 161, 163, 173, 175, 176, 277, 378, 433], "linalg": [44, 175], "linden": [56, 120, 378], "lindquist": [120, 146, 161, 354, 473], "line": [5, 9, 14, 21, 24, 48, 51, 90, 111, 168, 175, 176, 184, 281, 354, 453, 473, 477, 493], "line2d": [5, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434], "line_sample_point": 24, "linear": [3, 6, 29, 33, 34, 35, 37, 44, 65, 67, 97, 102, 120, 143, 161, 168, 172, 177, 178, 179, 181, 182, 187, 188, 198, 214, 238, 277, 298, 299, 300, 301, 303, 304, 305, 306, 326, 328, 329, 336, 349, 354, 368, 369, 370, 378, 397, 441, 473, 477, 486, 493, 495], "linear_model": [37, 40, 41, 44, 116, 306], "linear_svc": 97, "lineardiscriminantanalysi": 97, "linearli": [188, 198], "linearsegmentedcolormap": [402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 432, 433, 434, 437, 444, 445, 446, 447, 453, 454, 455, 457], "linearsvc": [51, 97, 98, 173, 298, 300], "linestyl": 51, "linewidth": [14, 18, 21, 42, 43, 48, 50, 61, 90, 445, 446, 453], "lingual": 90, "lingual_l": 244, "link": [52, 120, 123, 131, 139, 146, 151, 161, 164, 168, 171, 176, 178, 181, 184, 194, 204, 244, 249, 274, 287, 399, 409, 410, 434, 495], "linkag": 444, "linkinghub": [120, 162, 198, 212], "linspac": [5, 49, 61, 66], "lint": [133, 161, 176, 184], "linter": 176, "linux": 184, "liotti": [120, 231, 257], "liquid": 0, "lisandrelli": [120, 203, 263], "list": [0, 2, 3, 6, 9, 14, 15, 16, 21, 30, 33, 44, 47, 48, 49, 51, 53, 55, 58, 61, 62, 69, 70, 71, 74, 75, 78, 79, 84, 93, 98, 99, 100, 103, 108, 111, 113, 115, 122, 123, 129, 131, 132, 133, 134, 137, 139, 140, 141, 145, 146, 149, 155, 156, 158, 161, 162, 168, 176, 183, 184, 186, 187, 188, 197, 212, 215, 219, 221, 226, 231, 234, 235, 236, 238, 240, 241, 242, 244, 245, 248, 250, 251, 252, 253, 254, 256, 257, 259, 260, 263, 264, 266, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 317, 331, 333, 334, 336, 338, 339, 343, 349, 350, 351, 352, 354, 355, 363, 364, 366, 369, 371, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 438, 441, 442, 444, 445, 448, 449, 450, 451, 456, 457, 459, 461, 462, 463, 464, 465, 470, 471, 473, 475, 476, 477, 479, 493], "list_of_2d_arrai": 41, "listedcolormap": 443, "listen": [65, 67, 80, 112, 272], "liter": [349, 351], "literatur": [99, 163, 227, 242, 360, 378, 474], "littl": [67, 74, 168, 169, 176], "liu": [120, 198, 226, 232, 254, 258, 377, 378, 474], "livio": [75, 120, 331], "ll": [2, 6, 49, 58, 303, 304], "llc": 0, "llera": [120, 377, 378], "llf": 326, "lloyd": [37, 120], "llrrrrl": 62, "lo": 0, "load": [2, 4, 6, 8, 9, 21, 23, 27, 49, 52, 53, 54, 58, 61, 62, 67, 68, 70, 76, 87, 88, 90, 92, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 115, 117, 118, 121, 129, 130, 131, 139, 141, 144, 146, 155, 156, 158, 161, 164, 167, 171, 172, 175, 176, 183, 185, 187, 214, 242, 243, 246, 248, 250, 251, 252, 255, 256, 260, 261, 262, 263, 266, 267, 268, 271, 272, 275, 276, 277, 279, 281, 286, 287, 289, 290, 291, 292, 293, 294, 295, 305, 306, 309, 311, 312, 316, 319, 320, 321, 322, 339, 353, 364, 365, 367, 377, 378, 434, 450, 452, 453, 457, 475, 476, 484, 492, 494, 495], "load_confound": [56, 65, 130, 131, 132, 156, 161, 163, 188, 339, 378], "load_confounds_strategi": [56, 132, 156, 161, 163, 188, 377], "load_fsaverag": [111, 112, 113, 114, 115], "load_fsaverage_data": [111, 112, 113, 114, 115, 116], "load_img": [2, 36, 92, 93, 101, 107, 139, 161, 186, 187], "load_mni152_brain_mask": [103, 139, 155, 161, 214, 267], "load_mni152_gm_mask": [155, 161, 214, 267], "load_mni152_gm_templ": [155, 161, 214, 267, 290, 292, 293, 294], "load_mni152_templ": [92, 155, 161, 214, 267, 268, 289, 291, 294, 353, 356, 361, 365, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 477], "load_mni152_wm_mask": [155, 161, 214, 267], "load_mni152_wm_templ": [155, 161, 214, 267, 291, 292, 293], "load_niimg": [147, 161], "load_sample_motor_activation_imag": [9, 13, 14, 15, 16, 89, 92, 111, 130, 161], "load_surf_data": [9, 23, 141, 161], "load_surf_mesh": [22, 37, 114, 141, 158, 161, 492], "loadtxt": [40, 41], "lobe": [69, 257], "lobul": [90, 120, 212], "loc": [18, 32, 34, 42, 43, 49, 61, 66, 68, 90, 99, 398, 400, 401], "local": [21, 40, 41, 49, 60, 64, 65, 72, 75, 76, 78, 79, 80, 87, 96, 99, 100, 103, 107, 108, 109, 113, 118, 120, 149, 150, 158, 161, 176, 177, 178, 181, 184, 186, 188, 190, 194, 219, 226, 242, 250, 251, 254, 259, 269, 270, 271, 272, 273, 276, 277, 279, 302, 359, 371, 374, 380, 386, 397, 425, 438, 439, 447, 452, 494], "local_region": [50, 166, 461, 463], "localis": [120, 181, 351, 397], "localizer_anat_filenam": 17, "localizer_dataset": [17, 76, 80, 105, 106], "localizer_ev": 71, "localizer_tmap_filenam": 17, "locat": [10, 15, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 47, 49, 52, 53, 54, 55, 56, 58, 62, 68, 74, 76, 84, 88, 90, 91, 93, 94, 100, 102, 105, 108, 113, 114, 115, 146, 155, 161, 175, 178, 184, 186, 188, 204, 235, 238, 244, 260, 262, 263, 278, 280, 302, 305, 306, 336, 355, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 479, 492], "lock": [145, 161], "log": [44, 49, 53, 76, 78, 93, 136, 161, 173, 175, 323, 326, 327, 328, 329, 365, 441], "log10": [36, 42, 44, 76, 78, 93, 102, 105, 106, 351, 397, 470], "log_": [42, 102, 105, 106], "log_img": 365, "log_p_valu": 93, "log_p_values_img": 93, "logan": [120, 174], "logarithm": [76, 78, 351], "logic": [93, 123, 176, 297], "logical_and": [93, 102], "logical_not": [30, 36, 76, 105], "logical_or": 30, "logilab": 0, "logist": [30, 31, 120, 169, 170, 174, 298, 300, 303, 304], "logistic_l1": [30, 169, 298, 300], "logistic_l2": [30, 169, 298, 300], "logisticregressioncv": [131, 161, 298, 299, 300, 301], "logl": [323, 326, 327, 328, 329], "loglf": [323, 327], "loglikelihood": [323, 327], "logp_max_mass": [78, 351, 397], "logp_max_s": [78, 351, 397], "logp_max_t": [78, 105, 351, 397], "logp_max_tfc": [105, 351, 397], "loic": [0, 124, 125, 127, 128, 134, 136, 139, 149, 161], "lokybackend": [36, 42, 43, 44, 48, 102, 105], "london": [0, 120, 181, 264, 282], "long": [49, 123, 176, 178, 377, 378, 433], "longer": [43, 104, 127, 129, 130, 131, 132, 143, 147, 149, 152, 154, 156, 158, 161, 178], "longest": 65, "look": [1, 6, 7, 23, 29, 32, 40, 44, 56, 64, 65, 67, 68, 71, 101, 104, 112, 115, 118, 123, 146, 147, 157, 161, 168, 176, 177, 178, 183, 184, 188, 203, 266, 277, 279, 288, 371, 440, 452, 494], "lookup": [120, 162], "loop": [34, 44, 69, 99, 152, 161, 168, 175, 187, 298, 299, 300, 301], "loos": 175, "lorocv": 173, "lorrain": [120, 173], "lose": [14, 94, 492], "loss": [165, 170, 303, 378], "loss_pass": 188, "lost": 175, "lot": [6, 64, 69, 70, 85, 127, 146, 149, 161, 162, 168, 169, 175, 176, 183, 238], "loui": [120, 198, 214, 267, 292], "love": 3, "low": [9, 42, 65, 69, 93, 104, 111, 120, 146, 152, 161, 168, 174, 175, 176, 178, 183, 184, 186, 187, 188, 230, 242, 286, 298, 299, 300, 301, 303, 304, 354, 377, 381, 382, 383, 384, 385, 386, 387, 440, 442, 455, 459, 461, 472, 473], "low_pass": [33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 88, 90, 91, 98, 99, 146, 161, 188, 298, 299, 300, 301, 303, 304, 305, 306, 318, 354, 381, 382, 383, 384, 385, 386, 387, 459, 461, 472, 473, 479], "lower": [18, 31, 32, 39, 51, 68, 76, 88, 93, 136, 161, 167, 170, 174, 175, 181, 187, 234, 240, 241, 298, 299, 300, 301, 326, 328, 329, 391, 394, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 431, 432, 433, 437, 439, 440, 442, 443, 444, 445, 446, 447, 448, 451, 472], "lower_cutoff": [88, 391, 394], "lowest": [148, 161], "lprojector": [14, 412, 426], "lr": [14, 16, 336, 349, 403, 426, 434, 439, 443, 471, 492], "lrprojector": [14, 426], "lsa_beta_map": 99, "lsa_events_df": 99, "lsa_glm": 99, "lss": [132, 161], "lss_beta_map": 99, "lss_design_matric": 99, "lss_events_df": 99, "lss_glm": 99, "lss_transform": 99, "lt": [36, 74, 88, 90, 91, 479], "luc": [70, 120, 206], "luca": [120, 174, 198], "lucina": 120, "luisa": [0, 149, 153, 155, 161], "luke": [0, 154, 161], "lunch": 169, "lund": 0, "luz": 0, "lw": [40, 68], "ly": 461, "lyon": 0, "lyr": [14, 336, 349, 404, 426, 434, 439, 443, 471, 492], "lyrprojector": [14, 406, 426], "lyrz": [13, 14, 58, 336, 349, 405, 426, 434, 439, 443, 471, 492], "lyrzprojector": [14, 407, 426], "lyttelton": [120, 198, 246], "lzr": [14, 53, 336, 349, 406, 426, 434, 439, 443, 471, 492], "lzrprojector": [14, 404, 426], "lzry": [14, 336, 349, 407, 426, 434, 439, 443, 471, 492], "lzryprojector": [14, 405, 426], "m": [3, 12, 23, 30, 31, 32, 38, 41, 49, 58, 65, 69, 74, 97, 99, 102, 115, 120, 139, 161, 162, 173, 174, 176, 181, 183, 184, 194, 195, 198, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 224, 225, 226, 228, 231, 232, 244, 248, 253, 254, 255, 257, 258, 260, 261, 264, 266, 274, 282, 286, 326, 328, 329, 351, 397, 493], "m_cmap": 12, "ma": [20, 36, 40, 48, 50, 106], "maarten": [23, 115, 120, 222, 287, 377, 378], "mac": [136, 161], "macaluso": [120, 198], "macau": 0, "mach": [49, 120, 460, 466], "machin": [0, 29, 34, 44, 49, 93, 121, 153, 161, 169, 170, 171, 176, 181, 182, 203, 275, 493, 495], "machlouzarid": [120, 204, 249], "macintosh": [120, 194, 274], "mackai": [120, 194, 228, 255, 274], "mackinnon": [120, 328, 329], "maco": [159, 161], "macro": [120, 305], "macroscop": [120, 195, 244], "made": [0, 21, 100, 108, 113, 130, 152, 155, 156, 161, 172, 175, 176, 178, 181, 183, 184, 223, 229, 298, 299, 300, 301, 303, 304, 397, 454, 495], "madhyastha": [143, 146, 161], "magenta": [40, 68, 492], "magic": [56, 90, 101, 432, 439, 440, 442, 446, 447], "magnet": [0, 120, 178, 181, 193, 198, 212, 246, 272], "magnetoencephalographi": 181, "magnetom": [6, 229], "magnitud": [181, 436], "maguir": [120, 212], "mai": [3, 17, 29, 30, 32, 33, 34, 35, 36, 43, 49, 56, 63, 65, 70, 71, 79, 85, 97, 99, 103, 120, 122, 123, 127, 147, 149, 157, 161, 162, 168, 169, 171, 176, 178, 181, 186, 188, 194, 200, 233, 234, 242, 272, 277, 304, 324, 339, 351, 369, 376, 378, 382, 384, 385, 397, 448, 450, 451, 464, 470, 477], "main": [30, 56, 62, 65, 66, 69, 93, 125, 158, 161, 168, 173, 176, 177, 181, 184, 186, 188, 244, 336, 338, 343, 374, 392, 394, 399], "main_deriv": 66, "main_path": 374, "mainli": 175, "maint": [128, 129, 130, 131, 132, 133, 134, 136, 139, 140, 141, 143, 146, 149, 151, 154, 155, 156, 157, 158, 161, 176], "maintain": [0, 129, 149, 155, 161, 176, 184], "mainten": [156, 161], "mairal": 204, "major": [54, 93, 176, 183, 228], "make": [4, 6, 8, 15, 22, 23, 27, 30, 31, 36, 41, 47, 49, 51, 56, 58, 65, 66, 67, 68, 69, 74, 76, 78, 79, 83, 97, 104, 110, 112, 114, 115, 117, 118, 120, 123, 129, 131, 132, 133, 134, 135, 140, 146, 155, 156, 158, 161, 166, 168, 169, 173, 174, 177, 180, 181, 182, 183, 186, 188, 223, 248, 256, 266, 277, 281, 286, 295, 298, 299, 300, 301, 303, 304, 308, 310, 311, 316, 319, 321, 322, 324, 369, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 414, 416, 418, 420, 422, 424, 439, 442, 447, 449, 451, 452, 453, 454, 455, 457, 458, 475, 477, 492, 493, 494], "make_first_level_design_matrix": [61, 63, 67, 69, 108, 156, 161, 177], "make_glm_report": [33, 61, 62, 74, 129, 153, 156, 161, 376], "make_localizer_contrast": 65, "make_pipelin": [37, 40, 44, 116], "make_second_level_design_matrix": [77, 180], "make_xi": 275, "makri": [120, 202, 212, 248], "male": [65, 212, 242], "manag": [131, 132, 161, 176, 184, 493], "mandatori": [175, 354], "mani": [3, 4, 10, 11, 15, 23, 36, 38, 39, 41, 42, 43, 48, 49, 51, 56, 69, 78, 85, 93, 97, 98, 99, 106, 115, 123, 154, 161, 164, 165, 166, 168, 169, 170, 171, 174, 175, 176, 178, 181, 184, 187, 188, 236, 277, 279, 298, 299, 300, 301, 302, 351, 358, 387, 397, 442, 467, 468, 477, 492], "manipul": [1, 7, 55, 65, 88, 122, 141, 161, 183, 186, 266, 288, 371, 440, 452, 494, 495], "manner": [183, 439], "mannheim": 0, "manon": [0, 158, 161], "manual": [15, 16, 19, 32, 34, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 80, 82, 88, 90, 91, 95, 97, 98, 99, 102, 103, 104, 105, 106, 118, 122, 162, 168, 183, 185, 188, 253, 254, 266, 305, 306, 359, 364, 366, 367, 371, 380, 384, 437, 446, 447, 448, 450, 451, 452, 492, 494, 495], "map": [2, 3, 8, 11, 14, 15, 19, 20, 22, 23, 27, 33, 37, 39, 44, 46, 50, 51, 52, 53, 54, 56, 59, 61, 62, 65, 67, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 82, 83, 86, 88, 89, 90, 91, 92, 95, 96, 98, 100, 102, 104, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 130, 131, 132, 133, 134, 138, 141, 142, 146, 147, 149, 152, 153, 156, 161, 162, 163, 164, 167, 169, 171, 172, 173, 176, 177, 178, 179, 181, 182, 183, 186, 187, 188, 197, 198, 200, 201, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 220, 224, 226, 228, 231, 234, 235, 236, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 263, 267, 270, 271, 272, 277, 278, 279, 280, 281, 286, 289, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 310, 311, 316, 318, 319, 321, 322, 331, 332, 336, 345, 349, 351, 352, 354, 356, 362, 371, 373, 376, 380, 381, 382, 383, 384, 385, 386, 387, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 431, 433, 439, 440, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 465, 468, 470, 471, 473, 475, 477, 478, 484, 488, 494, 495], "map_": 22, "map_label": 11, "map_left": [22, 23, 202, 256, 492], "map_nam": [349, 351], "map_right": [9, 202, 256], "map_typ": [107, 277], "maps_img": [47, 52, 53, 54, 163, 188, 381, 382, 384, 385, 430, 445, 461, 463, 465, 468, 479], "maps_img_": [382, 385], "maraviglia": [120, 198], "march": [126, 144, 153, 161, 302], "marcu": [120, 173, 194, 223, 274, 281, 378], "marek": [120, 227, 262], "margaret": [23, 115, 120, 222, 287], "margeta": [0, 124, 161], "margin": [51, 369], "marguli": [120, 123, 221, 277, 279], "mari": [120, 183], "mariano": [70, 120, 206], "mario": [120, 231, 257], "marisa": [120, 226, 232, 254, 258], "mark": [40, 56, 99, 120, 162, 194, 274, 377, 378], "markdown": 198, "marked_pixel": 40, "markedli": 68, "marker": [40, 133, 147, 149, 152, 154, 161, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 443, 453, 454, 456, 461, 463, 495], "marker_color": [15, 40, 55, 61, 99, 147, 149, 161, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 456, 492], "marker_coord": [55, 61, 99, 147, 149, 161, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 456], "marker_label": [154, 161, 456], "marker_s": [15, 40, 55, 61, 99, 147, 149, 161, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 456, 492], "markiewicz": [0, 149, 161], "marquand": [120, 183], "marseil": 0, "martha": [120, 212], "marti": [102, 120, 231, 257, 397], "martigni": 0, "martin": [0, 23, 115, 120, 134, 139, 153, 161, 197, 202, 207, 208, 209, 210, 211, 214, 245, 267, 286, 354, 473], "martino": 120, "masa": [40, 41, 120, 219, 276], "mask": [3, 8, 15, 20, 23, 27, 29, 30, 31, 33, 34, 35, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 58, 68, 70, 74, 76, 78, 82, 90, 91, 95, 102, 104, 105, 106, 115, 116, 118, 121, 123, 129, 130, 132, 139, 140, 141, 143, 146, 149, 152, 154, 155, 156, 159, 161, 165, 169, 172, 174, 182, 183, 185, 186, 198, 200, 206, 213, 214, 219, 235, 242, 263, 265, 266, 267, 268, 272, 276, 289, 290, 293, 298, 299, 300, 301, 303, 304, 305, 306, 331, 333, 336, 349, 351, 352, 353, 354, 359, 360, 361, 364, 366, 367, 371, 373, 377, 380, 381, 382, 383, 384, 385, 386, 387, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 431, 432, 433, 437, 439, 441, 442, 446, 447, 452, 459, 460, 461, 463, 464, 465, 466, 469, 471, 473, 477, 478, 479, 484, 492, 494, 495], "mask_": [303, 304], "mask_arg": [88, 91, 188, 305, 306, 383, 386, 459, 479], "mask_atla": 93, "mask_chance_scor": 32, "mask_data": 93, "mask_fac": [18, 32, 122, 186, 213, 266], "mask_face_filenam": 18, "mask_face_littl": [122, 186, 213, 266], "mask_filenam": [3, 30, 32, 35, 39, 97, 102, 122, 168], "mask_hous": [18, 32, 122, 186, 213, 266], "mask_house_filenam": 18, "mask_house_littl": [122, 186, 213, 266], "mask_img": [11, 25, 29, 32, 33, 34, 35, 36, 39, 40, 41, 44, 49, 52, 53, 54, 56, 58, 65, 68, 70, 74, 88, 90, 91, 97, 102, 103, 122, 131, 143, 147, 151, 152, 156, 161, 168, 173, 176, 187, 188, 289, 302, 318, 331, 336, 339, 349, 352, 353, 354, 360, 373, 381, 382, 383, 384, 385, 386, 387, 388, 395, 396, 431, 433, 442, 460, 461, 463, 464, 465, 466, 467, 468, 477, 479], "mask_img_": [49, 65, 76, 78, 88, 91, 122, 188, 298, 299, 300, 301, 303, 304, 305, 306, 318, 381, 383, 384, 386], "mask_label": [11, 433], "mask_nam": 32, "mask_quality_check": [76, 105], "mask_roi": 219, "mask_scor": 32, "mask_strategi": [48, 88, 91, 104, 149, 155, 161, 188, 298, 299, 300, 301, 305, 306, 383, 386, 459, 479], "mask_typ": [48, 390, 393], "mask_vt": [3, 15, 16, 18, 30, 32, 93, 97, 122, 168, 186, 213, 266], "mask_vt_filenam": [18, 93], "masked_atla": [132, 161, 464], "masked_data": [25, 98, 116, 187], "masked_img": [317, 318], "masked_less": [40, 106], "masked_pv": 106, "maskedarrai": [3, 16, 29], "masker": [32, 33, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 102, 103, 104, 105, 106, 110, 117, 118, 122, 128, 129, 130, 131, 132, 133, 134, 149, 152, 153, 154, 155, 156, 158, 159, 161, 163, 165, 168, 171, 176, 177, 185, 187, 234, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 316, 317, 318, 319, 320, 322, 336, 349, 351, 377, 378, 397, 441, 444, 459, 461, 464, 465, 467, 468, 494, 495], "masker_": [62, 65, 76, 78, 298, 299, 300, 301, 303, 304, 305, 306, 459], "masker_valid": 116, "mason": 0, "mass": [0, 58, 78, 158, 161, 351, 397, 429, 470], "mass_univari": [42, 78, 102, 105, 152, 158, 161, 173, 180], "massachusett": 0, "massimiliano": [120, 174, 198], "massiv": [96, 109, 118, 172, 266, 271, 272, 359, 361, 366, 380, 386, 397, 425, 439, 447, 452, 486, 494, 495], "master": [184, 254], "mat": [62, 379, 444], "match": [2, 6, 15, 101, 123, 130, 131, 132, 133, 149, 153, 154, 156, 161, 167, 173, 176, 181, 185, 188, 228, 244, 255, 277, 297, 298, 299, 300, 301, 303, 304, 305, 306, 336, 339, 349, 351, 355, 364, 366, 369, 374, 376, 377, 381, 382, 384, 385, 389, 391, 392, 394, 445, 459, 462, 495], "math_img": [76, 78, 82, 84, 95, 96, 107, 109, 118, 133, 137, 159, 161, 187, 243, 295, 364, 366, 367, 447, 452, 494], "mathbf": 44, "mathemat": [0, 137, 161, 181, 365, 481], "mathia": [0, 130, 161], "mathieu": [0, 131, 161], "matlotlib": 434, "matplolib": [9, 111, 133, 161, 448, 450, 451], "matplotlib": [5, 6, 8, 9, 11, 15, 18, 24, 25, 27, 30, 32, 35, 38, 40, 41, 42, 43, 44, 48, 49, 51, 52, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 68, 71, 74, 77, 78, 79, 83, 90, 93, 98, 99, 100, 102, 105, 106, 111, 116, 118, 127, 131, 132, 136, 141, 143, 144, 146, 149, 151, 156, 157, 161, 163, 168, 187, 382, 385, 387, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 492, 493, 494], "matric": [3, 8, 27, 41, 47, 50, 51, 56, 60, 69, 70, 72, 79, 98, 118, 134, 139, 142, 143, 153, 154, 156, 159, 161, 162, 163, 164, 175, 177, 185, 186, 187, 189, 190, 198, 204, 234, 235, 236, 238, 241, 274, 326, 328, 329, 336, 343, 369, 436, 444, 448, 450, 451, 452, 490, 494, 495], "matrix": [6, 22, 33, 37, 40, 41, 44, 47, 50, 51, 53, 61, 62, 63, 65, 67, 68, 69, 70, 73, 74, 75, 76, 78, 79, 80, 81, 83, 90, 91, 99, 100, 101, 103, 105, 108, 112, 114, 118, 129, 130, 144, 149, 152, 159, 161, 165, 166, 168, 169, 175, 178, 179, 180, 181, 182, 183, 186, 187, 188, 206, 234, 235, 236, 237, 238, 239, 241, 265, 277, 279, 298, 299, 300, 301, 303, 304, 305, 306, 323, 326, 327, 328, 329, 334, 336, 337, 343, 345, 349, 350, 351, 356, 366, 367, 369, 372, 376, 379, 380, 383, 386, 389, 391, 392, 394, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 435, 436, 444, 458, 459, 460, 471, 478, 494, 495], "matter": [11, 24, 42, 43, 56, 65, 74, 88, 139, 152, 155, 161, 168, 173, 175, 176, 180, 182, 187, 188, 198, 214, 223, 263, 267, 268, 281, 290, 291, 292, 293, 294, 298, 299, 300, 301, 305, 306, 339, 377, 383, 386, 390, 393, 459, 477], "matthew": [23, 102, 115, 120, 162, 194, 222, 274, 287, 397], "matthia": [0, 124, 161], "matthieu": [0, 158, 161], "matur": [58, 120, 205, 260], "maumet": [120, 123, 221, 277, 279], "maura": [3, 31, 32, 38, 97, 120, 213, 266], "maurizio": [120, 378], "max": [0, 11, 30, 34, 42, 44, 49, 53, 55, 57, 58, 68, 79, 83, 87, 102, 103, 105, 116, 120, 154, 161, 162, 175, 234, 369, 370, 397, 401, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 432, 433, 437, 439, 440, 442, 445, 446, 447, 448, 450, 451, 454, 455, 457], "max_imag": [103, 107, 123, 277], "max_it": [39, 40, 48, 57, 235, 236, 238, 298, 299, 300, 301, 303, 304], "max_iter_cv": 236, "max_n_sampl": 57, "max_no_improv": 458, "max_precis": 57, "maxim": [34, 181, 326, 328, 329, 358, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "maximilian": [0, 131, 161], "maximum": [15, 65, 78, 88, 91, 93, 101, 104, 132, 133, 149, 161, 173, 181, 188, 215, 234, 235, 236, 238, 243, 250, 251, 277, 287, 298, 299, 300, 301, 305, 306, 323, 324, 327, 336, 345, 349, 351, 353, 371, 373, 381, 382, 383, 384, 385, 386, 387, 388, 401, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 439, 459, 461, 463, 464, 492], "maxprob": [10, 56, 90, 164, 250, 251, 495], "mayb": [65, 123, 397], "mayberg": [120, 201, 247], "mayer": [120, 197, 245], "mazoy": [120, 195, 244], "mazziotta": [120, 231, 257], "mb": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 494], "mccarthi": [120, 194, 274], "mcgill": [0, 120, 198, 214, 267], "mcgovern": 0, "mckai": [120, 228, 255], "mckinstri": [120, 198, 214, 267, 292], "md": [0, 254], "mean": [3, 6, 14, 15, 16, 18, 21, 22, 23, 25, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 49, 50, 51, 55, 56, 58, 61, 65, 68, 69, 70, 76, 82, 88, 90, 91, 93, 94, 95, 97, 101, 102, 103, 104, 114, 115, 116, 118, 123, 139, 143, 146, 149, 153, 155, 161, 162, 165, 166, 168, 175, 176, 178, 181, 183, 187, 188, 194, 201, 234, 235, 236, 238, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 298, 299, 300, 301, 302, 303, 304, 305, 306, 326, 328, 329, 336, 344, 345, 349, 351, 352, 353, 355, 360, 365, 366, 377, 378, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 397, 432, 433, 445, 446, 447, 448, 450, 451, 452, 454, 458, 459, 460, 461, 463, 464, 467, 468, 471, 473, 474, 479, 494], "mean_": [47, 51, 116, 162, 234], "mean_correl": [50, 166], "mean_correlation_matrix": [47, 51], "mean_data": 116, "mean_epi_img": 30, "mean_fmri": 36, "mean_fmri_img": 102, "mean_func": 94, "mean_func_img": [49, 91], "mean_haxbi": [25, 187], "mean_haxby_img": [15, 16], "mean_imag": 69, "mean_img": [3, 6, 15, 16, 18, 25, 30, 31, 33, 36, 49, 68, 69, 70, 84, 88, 91, 93, 94, 102, 104, 116, 187, 365], "mean_img_": [33, 70], "mean_scor": [51, 98], "mean_test_scor": 98, "meaning": [97, 99, 136, 146, 149, 161, 176, 178, 204, 216, 354, 473], "meaningless": [3, 168, 178, 352], "meant": [3, 6, 104, 116, 241, 324, 469], "meanwhil": [131, 132, 161], "measur": [24, 29, 34, 48, 49, 51, 58, 65, 76, 98, 99, 105, 120, 142, 152, 161, 162, 163, 165, 166, 172, 173, 175, 178, 181, 183, 188, 194, 196, 242, 274, 378, 441, 443, 458, 477, 492, 495], "mechan": [31, 168, 234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "med": 244, "media": [120, 194, 274], "medial": [9, 23, 37, 58, 90, 111, 115, 116, 120, 173, 442, 448, 450, 451], "medialtemporallob": 262, "median": [116, 149, 161, 198, 381, 384, 448, 450, 451, 464], "medic": [0, 44, 120, 162, 166, 174, 195, 196, 214, 220, 223, 234, 252, 267, 461], "medicin": 223, "medium": [184, 286, 455], "meet": [120, 158, 161, 194, 198, 274, 493], "meg": 181, "megan": [120, 212], "megatrawl": [8, 27, 118, 120, 136, 161, 190, 274, 444, 452, 494], "meghana": [143, 146, 161], "mehdi": [0, 51, 98, 120, 124, 128, 134, 143, 149, 161], "meisler": [0, 130, 132, 161], "melbourn": 0, "melissa": [23, 115, 120, 222, 287], "mem": [7, 27, 45, 59, 72, 81, 95, 109, 117, 119, 494], "member": [176, 184, 493], "memor": [170, 178], "memori": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 138, 146, 147, 161, 165, 166, 175, 187, 188, 235, 286, 298, 299, 300, 301, 303, 304, 305, 306, 312, 313, 318, 324, 329, 336, 339, 349, 355, 359, 369, 370, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 455, 459, 460, 461, 472, 479, 492], "memory_": [303, 304], "memory_level": [33, 35, 36, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 88, 90, 91, 97, 98, 99, 102, 103, 104, 105, 106, 166, 188, 235, 298, 299, 300, 301, 303, 304, 305, 306, 318, 336, 339, 349, 355, 381, 382, 383, 384, 385, 386, 387, 459, 460, 461, 479], "memoryerror": 186, "menn": [23, 115, 120, 222, 287, 377, 378], "mensch": [0, 48, 120, 128, 134, 136, 139, 161, 167, 204, 249, 306], "mental": [0, 65, 67, 71, 80, 112, 120, 183, 200, 272, 278], "mention": [99, 129, 131, 132, 161, 176, 177, 178], "menuet": [146, 161], "merg": [149, 161, 165, 176, 181, 184, 187, 460], "meriaux": [71, 120, 200, 272], "merlin": [120, 305], "mert": [120, 226, 232, 254, 258], "mesh": [23, 37, 67, 108, 112, 113, 114, 115, 130, 141, 146, 149, 154, 158, 161, 177, 181, 182, 207, 208, 209, 210, 211, 286, 307, 309, 310, 312, 313, 315, 316, 317, 318, 322, 442, 448, 449, 450, 451, 455, 457, 475, 476, 477, 495], "mesh_nam": [111, 321, 322], "mesh_typ": [111, 114, 319, 320, 322], "mess": 36, "messag": [83, 136, 161, 184, 235, 238, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 280, 281, 282, 283, 284, 285, 287, 298, 299, 300, 301, 302, 303, 304, 349, 351, 355, 366, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 397, 459, 460, 461], "met": [130, 161], "meta": [0, 3, 14, 96, 99, 103, 109, 118, 123, 205, 225, 234, 235, 236, 279, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 359, 364, 365, 367, 380, 381, 382, 383, 384, 385, 386, 387, 439, 447, 452, 458, 459, 460, 461, 494], "meta_analysis_img": 107, "metabol": [66, 178, 181], "metadata": [56, 62, 90, 101, 123, 130, 149, 161, 187, 221, 222, 234, 235, 236, 277, 278, 279, 280, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 376, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "metadata_rout": [234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "metadatarequest": [234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "metaprior": 44, "method": [6, 14, 15, 26, 31, 36, 39, 44, 46, 48, 58, 59, 85, 88, 90, 91, 93, 99, 105, 118, 120, 121, 123, 130, 131, 132, 134, 138, 142, 146, 149, 152, 153, 154, 156, 158, 161, 162, 163, 165, 169, 170, 174, 175, 176, 181, 182, 183, 186, 187, 188, 194, 195, 198, 221, 227, 229, 231, 234, 235, 236, 246, 257, 263, 274, 277, 279, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 326, 327, 328, 329, 331, 336, 349, 351, 356, 359, 360, 361, 366, 369, 370, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 437, 446, 453, 455, 456, 457, 458, 459, 460, 461, 469, 473, 474, 492, 494, 495], "methodolog": 201, "methodologi": 215, "metric": [31, 35, 40, 41, 51, 78, 149, 161, 168, 169, 173, 181, 201, 298, 299, 300, 301], "meudec": [0, 129, 153, 154, 155, 156, 157, 158, 161], "mf": [74, 120, 194, 274], "mgh": [56, 90, 232, 258], "mgrid": [24, 83], "mgz": [147, 148, 161, 307, 448, 449, 450, 451, 457, 475], "mi": 65, "mia": [0, 132, 161], "mialab": [197, 245], "miami": 0, "miccai": [120, 162, 234], "michael": [0, 23, 37, 51, 98, 115, 120, 124, 128, 134, 146, 161, 174, 183, 196, 197, 222, 224, 245, 253, 287, 378], "michel": [0, 23, 44, 49, 115, 120, 124, 130, 131, 132, 159, 161, 174, 183, 200, 220, 222, 252, 272, 287], "mickl": [120, 228, 255], "microarchitectur": 178, "middl": [44, 65, 90, 120, 146, 154, 161, 223, 281, 375], "midrul": 62, "midx": 100, "miezin": [58, 120, 225, 261], "might": [6, 34, 61, 101, 104, 167, 171, 173, 178, 181, 184, 186, 194, 248, 263, 343, 365, 372, 378, 387, 389, 390, 391, 393, 394, 440, 457], "migrat": [129, 161], "mikiten": [120, 231, 257], "mil": [120, 194, 274], "mila": 0, "mild": 65, "milham": [23, 51, 98, 115, 120, 196, 222, 287], "miller": [120, 162, 194, 228, 255, 274], "millimet": [83, 173, 188, 298, 299, 300, 301, 302, 305, 306, 336, 349, 351, 371, 381, 382, 383, 384, 385, 386, 387, 388, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 459, 461, 463, 470], "mimic": [171, 250, 251], "min": [2, 4, 38, 49, 53, 55, 58, 78, 101, 102, 103, 116, 154, 155, 161, 369, 370, 432, 433, 437, 439, 440, 442, 443, 445, 446, 447, 448, 450, 451, 454, 455, 457], "min_dist": [61, 336, 349, 376, 470, 471], "min_n_sampl": 57, "min_onset": [336, 338, 339, 343], "min_region_s": [50, 86, 87, 166, 461, 463], "min_siz": 462, "minc": 198, "minctracc": 198, "mind": [0, 51, 168, 169, 176, 181], "mine": [120, 183, 198, 246], "ming": [120, 212], "mini": 458, "minibatchkmean": [49, 458, 459], "miniconda": 493, "minim": [56, 62, 176, 181, 336, 338, 343, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 445], "minimalist": 3, "minimize_memori": [62, 68, 70, 74, 177, 336, 339, 349], "minimum": [33, 76, 78, 88, 101, 127, 129, 132, 134, 139, 141, 142, 143, 146, 149, 152, 154, 156, 161, 166, 198, 336, 349, 353, 373, 381, 384, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 428, 434, 454, 461, 462, 463, 464, 470, 471, 478], "minmaxscal": 39, "minnesota": 0, "minor": [127, 133, 142, 144, 161, 168], "minu": [6, 123, 178], "minut": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 178, 217, 228, 229, 272], "mion": 66, "mion_response_funct": 66, "mion_time_deriv": 66, "miranda": [120, 174, 183, 198], "mirror": [184, 242, 243, 244, 245, 246, 247, 248, 252, 255, 256, 258, 266, 267, 275, 276, 281, 287], "miscellan": [133, 161], "misclassif": [298, 299, 300, 301, 303, 304], "misconcept": 178, "misfit": 65, "mislabel": 184, "misleadingli": 168, "miss": [54, 76, 83, 131, 155, 161, 176, 181, 343, 382, 385, 391, 394, 479], "misspecif": 65, "mit": [0, 120, 223, 226, 228, 254, 255, 281], "mitchel": 204, "mitig": [120, 433], "mitra": [120, 377], "mix": [28, 44, 45, 118, 172, 174, 190, 242, 275, 301, 303, 304, 447, 494, 495], "miyawaki": [28, 45, 118, 120, 188, 190, 276, 356, 373, 380, 383, 386, 425, 447, 452, 479, 494], "miyawaki2008": [41, 88, 479], "miyawaki2008_reconstruction_": 41, "miyawaki_dataset": [41, 88], "miyawaki_filenam": [88, 188], "miyawaki_mean_img": [88, 188], "miykael": [146, 161], "mkdir": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93, 115], "mm": [4, 15, 33, 37, 55, 58, 83, 86, 90, 94, 146, 161, 166, 187, 198, 226, 227, 249, 254, 262, 336, 349, 377, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 461, 462, 463, 471, 477, 478, 479], "mm3": [6, 33, 62, 90, 198, 461, 463, 470, 478], "mmface": [230, 285], "mne": [147, 148, 161], "mni": [15, 48, 52, 54, 65, 67, 92, 100, 108, 112, 113, 120, 123, 139, 149, 152, 158, 161, 163, 180, 181, 183, 187, 188, 195, 198, 204, 205, 214, 215, 216, 225, 227, 244, 246, 252, 260, 261, 262, 267, 291, 292, 294, 298, 299, 300, 301, 339, 356, 387, 390, 393, 432, 434, 437, 439, 440, 445, 446, 447, 453, 454, 456, 471, 492], "mni152": [4, 92, 129, 155, 161, 178, 212, 214, 215, 226, 232, 245, 247, 254, 258, 267, 268, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 303, 304, 305, 306, 361, 383, 386, 390, 393, 445, 446, 447, 454, 459], "mni152_file_path": [4, 183], "mni152_templ": 292, "mni152nlin2009casym": 62, "mni152nlin2009casym_desc": [47, 48, 49, 52, 53, 54, 55, 56, 58, 84, 90, 91, 94, 104], "mni152nlin2009csasym": [267, 268], "mni152nlin2009csym": 267, "mni152nlin6asym": 378, "mni152templ": [90, 336, 349, 432, 445, 446, 447, 471, 479], "mni305": 181, "mni_icbm152_nlin_sym_09a_nifti": 267, "mni_icbm152_t1_tal_nlin_sym_09a_convert": [4, 183], "mo": 3, "mock": 176, "modal": [123, 168, 176, 230, 285, 374], "modality_fold": 374, "mode": [8, 14, 16, 21, 27, 55, 60, 72, 82, 93, 95, 118, 120, 139, 144, 147, 153, 158, 161, 176, 177, 182, 187, 188, 194, 204, 243, 249, 252, 255, 274, 277, 279, 331, 336, 343, 361, 380, 385, 387, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 442, 445, 447, 452, 461, 469, 471, 478, 479, 494, 495], "model": [6, 23, 28, 31, 32, 33, 34, 39, 41, 44, 45, 48, 50, 51, 60, 61, 63, 67, 69, 71, 72, 73, 80, 81, 96, 97, 98, 102, 104, 105, 108, 109, 112, 113, 115, 118, 120, 129, 130, 132, 143, 149, 152, 154, 156, 157, 158, 159, 161, 162, 164, 166, 168, 172, 173, 174, 175, 176, 179, 181, 182, 183, 188, 189, 194, 222, 232, 234, 235, 238, 265, 268, 269, 272, 273, 274, 276, 287, 298, 299, 300, 301, 303, 304, 305, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 355, 356, 359, 360, 365, 366, 370, 373, 376, 377, 378, 380, 383, 386, 387, 397, 409, 410, 424, 425, 435, 436, 439, 446, 447, 452, 469, 471, 478, 479, 486, 493, 494, 495], "model_and_arg": 100, "model_ev": 438, "model_evalu": [298, 299, 300, 301], "model_intercept": [76, 78, 105, 351, 397], "model_select": [3, 29, 30, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 51, 97, 98, 146, 161, 168, 171, 298, 299, 300, 301], "model_titl": 66, "models_confound": [62, 99, 100, 108, 339], "models_ev": [62, 100, 108, 339], "models_run_img": [62, 99, 100, 108, 339], "moder": 175, "modernis": [134, 161], "modif": [176, 178, 181], "modifi": [17, 49, 58, 93, 103, 139, 156, 161, 176, 188, 229, 277, 279, 369, 370, 373, 448, 450, 451, 457, 472, 473], "modify_d": 277, "modul": [5, 19, 26, 32, 34, 35, 36, 40, 41, 42, 47, 50, 51, 52, 53, 54, 55, 56, 58, 61, 86, 87, 88, 90, 91, 92, 93, 97, 98, 99, 102, 103, 104, 105, 106, 112, 113, 116, 120, 122, 123, 129, 130, 131, 132, 134, 141, 143, 144, 152, 156, 158, 159, 161, 171, 176, 179, 183, 184, 188, 192, 277, 281, 298, 299, 300, 301, 326, 328, 329, 343, 351, 353, 363, 365, 483, 487, 488, 489, 490, 492], "modular": [120, 176, 205, 354, 473], "modulated_ev": [63, 71], "mohammad": [0, 130, 131, 132, 161], "mohlberg": 120, "moment": [23, 115, 122], "monitor": 181, "monkei": 66, "monkeypatch_masker_check": 116, "montag": 442, "montgomeri": [120, 328, 329], "month": 184, "montreal": [178, 181, 195, 198, 244], "montr\u00e9al": [0, 183], "mood": [120, 183], "moor": 327, "more": [2, 3, 4, 6, 8, 9, 13, 14, 16, 19, 21, 22, 23, 26, 27, 28, 29, 31, 33, 39, 40, 42, 43, 46, 48, 49, 50, 52, 54, 55, 56, 58, 60, 61, 62, 65, 67, 68, 69, 70, 73, 74, 76, 78, 79, 82, 85, 88, 90, 93, 97, 99, 100, 102, 103, 105, 107, 108, 111, 112, 113, 114, 115, 118, 121, 122, 123, 125, 129, 130, 131, 135, 139, 141, 143, 145, 146, 149, 151, 155, 156, 157, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 181, 183, 184, 186, 187, 188, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 206, 212, 213, 214, 215, 219, 220, 221, 223, 227, 228, 231, 232, 235, 242, 244, 245, 246, 247, 252, 254, 255, 257, 258, 263, 266, 267, 268, 272, 274, 277, 279, 281, 286, 289, 290, 292, 293, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 324, 326, 328, 329, 336, 339, 349, 351, 355, 366, 374, 376, 378, 381, 382, 383, 384, 385, 386, 387, 397, 408, 410, 413, 415, 417, 419, 421, 423, 425, 432, 440, 445, 446, 447, 452, 454, 455, 458, 459, 460, 461, 463, 470, 472, 477, 479, 482, 492, 493, 494, 495], "more_smooth_anat_img": 4, "moreno": [23, 115, 120, 200, 222, 272, 287], "moreov": [62, 100, 108, 113, 158, 161, 176, 183, 233, 374], "morgan": [120, 194, 274], "morito": [40, 41, 120, 219, 276], "moritz": [0, 143, 146, 149, 161], "morpholog": [93, 187, 389, 390, 391, 393, 394], "morphologi": 181, "morphometr": 212, "morphometri": [28, 45, 73, 81, 118, 168, 179, 181, 182, 183, 190, 267, 268, 281, 299, 304, 349, 352, 359, 370, 376, 380, 386, 397, 425, 436, 447, 452, 469, 471, 478, 494, 495], "morri": [120, 223, 281], "mortem": 215, "mosaic": [15, 133, 153, 161, 408, 427, 432, 437, 440, 445, 446, 447, 471, 492], "mosaicslic": [15, 410, 413, 427], "most": [24, 33, 40, 42, 43, 49, 61, 74, 93, 99, 131, 143, 146, 161, 168, 169, 170, 171, 173, 175, 176, 178, 184, 187, 188, 194, 201, 215, 336, 338, 343, 440, 448, 450, 451, 457, 459, 461, 463, 492], "most_frequ": 98, "mostli": [175, 373], "motion": [63, 65, 68, 100, 120, 154, 161, 177, 198, 263, 336, 339, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 461, 473], "motiv": 93, "motor": [2, 14, 15, 16, 17, 51, 65, 67, 76, 78, 89, 90, 92, 96, 109, 112, 118, 200, 272, 295, 359, 380, 386, 397, 439, 492, 494], "motor_imag": [2, 492], "mountain": 0, "mourao": [120, 174, 198], "mour\u00e3o": [120, 183], "move": [70, 130, 131, 132, 134, 141, 154, 161], "movement": [56, 120, 183, 188], "movi": [48, 49, 50, 52, 54, 55, 84, 88, 91, 104, 149, 161, 164, 182, 183, 188, 203, 263, 495], "mpl": [398, 400, 401], "mr": 178, "mrg": 176, "mri": [11, 41, 56, 60, 72, 93, 99, 118, 120, 122, 156, 161, 176, 177, 178, 179, 181, 183, 186, 193, 195, 198, 203, 212, 214, 223, 226, 242, 244, 254, 263, 267, 281, 338, 377, 378, 494], "mriqc": 62, "mrn": [197, 245], "ms_e": [328, 329], "msdl": [8, 21, 27, 52, 54, 118, 163, 187, 190, 252, 361, 410, 429, 445, 447, 452, 492, 494], "msdl_atla": [52, 53, 54, 479], "msdl_atlas_dataset": 53, "msdl_coord": [51, 98], "msdl_data": [51, 98], "msdl_roi": [52, 53, 54, 220, 252, 479], "mse": [43, 303, 304, 328], "mstep": [198, 246], "much": [0, 3, 24, 40, 42, 51, 76, 78, 98, 99, 146, 161, 168, 175, 176, 178, 183, 205, 260, 358, 369, 477], "multi": [21, 28, 41, 42, 43, 45, 46, 48, 58, 59, 99, 118, 120, 132, 161, 162, 163, 164, 166, 172, 175, 181, 183, 186, 187, 188, 189, 198, 220, 230, 235, 236, 238, 246, 252, 263, 266, 285, 305, 336, 380, 383, 385, 386, 430, 434, 444, 452, 479, 494, 495], "multi_nifti_maps_mask": 47, "multi_scal": 41, "multiclass": [35, 169], "multimod": 190, "multimodal_fac": 69, "multiniftilabelsmask": [47, 129, 131, 133, 161, 185, 479, 495], "multiniftimapsmask": [47, 129, 131, 133, 161, 185, 479, 495], "multiniftimask": [40, 41, 48, 49, 132, 153, 155, 159, 161, 185, 298, 299, 300, 301, 303, 304, 305, 306, 349, 351, 397, 459, 479, 495], "multioutput": [40, 304], "multioutputregressor": 304, "multipca": [383, 479], "multipl": [2, 6, 19, 42, 47, 76, 78, 80, 100, 120, 130, 152, 153, 161, 164, 169, 171, 173, 176, 179, 181, 185, 186, 187, 194, 198, 215, 219, 246, 247, 255, 297, 326, 344, 349, 351, 361, 364, 365, 381, 382, 383, 397, 408, 410, 413, 427, 432, 437, 440, 442, 445, 446, 447, 454, 479, 492, 495], "multiple_spatial_regress": 274, "multipli": [65, 83, 89, 139, 161, 173, 175, 241, 323, 326, 328, 329, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 442, 448, 450, 451, 455, 457], "multiscal": [8, 27, 40, 41, 118, 120, 130, 137, 161, 190, 219, 246, 276, 446, 452, 494], "multisit": [120, 193, 242], "multivari": [37, 96, 109, 118, 120, 167, 181, 182, 183, 197, 245, 263, 361, 366, 380, 386, 447, 452, 493, 494], "multivoxel": [99, 120, 168, 218, 275], "mumford": [99, 120, 168, 183, 264, 282], "murat": [56, 120, 378], "must": [6, 34, 71, 93, 158, 161, 168, 169, 171, 173, 175, 176, 177, 178, 184, 186, 188, 194, 235, 236, 238, 244, 266, 298, 299, 300, 301, 302, 303, 304, 305, 315, 323, 327, 336, 349, 350, 351, 354, 360, 366, 369, 371, 376, 377, 380, 381, 383, 384, 386, 389, 391, 392, 393, 394, 395, 396, 397, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 438, 445, 447, 448, 449, 450, 451, 453, 455, 457, 459, 464, 467, 468, 470, 471, 473, 474, 477, 492], "mutual": [303, 304], "mvpa": [28, 118, 181, 183, 219, 495], "mw": [120, 194, 274], "mwrc1oas1_0001_mr1_mpr_anon_fslswapdim_bet": [42, 43, 74], "mwrc1oas1_0002_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0003_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0004_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0005_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0007_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0009_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0010_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0012_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0013_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0015_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0016_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0019_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0022_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0023_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0025_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0026_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0029_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0031_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0032_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0037_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0038_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0039_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0041_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0042_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0044_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0045_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0049_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0050_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0052_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0053_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0054_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0055_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0056_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0059_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0060_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0061_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0064_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0065_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0067_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0069_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0070_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0071_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0072_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0078_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0079_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0080_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0082_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0086_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0090_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0091_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0094_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0096_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0098_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0099_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0101_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0103_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0104_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0106_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0111_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0113_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0114_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0115_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0117_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0119_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0120_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0121_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0123_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0124_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0126_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0131_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0135_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0136_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0138_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0144_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0145_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0146_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0148_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0150_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0155_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0159_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0160_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0162_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0163_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0164_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0165_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0167_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0169_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0173_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0174_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0176_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0177_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0178_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0180_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0181_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0182_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0184_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0188_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0189_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0190_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0193_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0199_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0200_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0202_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0203_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0204_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0205_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0207_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0208_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0209_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0211_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0212_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0214_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0216_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0217_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0218_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0220_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0223_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0226_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc1oas1_0227_mr1_mpr_anon_fslswapdim_bet": 43, "mwrc2oas1_0001_mr1_mpr_anon_fslswapdim_bet": [42, 74], "my_funct": 184, "my_numb": 176, "myeong": [0, 156, 161], "mzayek": [0, 129, 130, 131, 132, 158, 161], "n": [6, 14, 26, 41, 42, 49, 51, 56, 57, 58, 62, 68, 69, 74, 76, 78, 79, 83, 90, 93, 98, 99, 101, 102, 103, 105, 106, 107, 114, 119, 120, 124, 125, 127, 128, 134, 136, 139, 161, 169, 175, 176, 178, 195, 205, 212, 224, 244, 253, 260, 263, 264, 274, 282, 305, 306, 323, 327, 328, 329, 336, 345, 377, 378, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 394, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 443, 461, 464, 465, 473, 493], "n_add_reg": 343, "n_alpha": [236, 303, 304], "n_class": [298, 299, 300, 301, 303, 304], "n_classes_": 303, "n_clf": 41, "n_cluster": [49, 458, 460, 466], "n_clusters_": 460, "n_col": [336, 349, 351, 376, 435], "n_column": [70, 178, 241], "n_compcor": [377, 378], "n_compon": [48, 50, 91, 103, 104, 166, 305, 306, 466], "n_cond": 93, "n_cond_img": 93, "n_condit": 97, "n_confound": [234, 360, 474], "n_covar": 397, "n_cut": [134, 161, 428], "n_descriptor": [351, 397], "n_detect": [42, 102, 105], "n_displai": 57, "n_elements_": [158, 161, 381, 382, 383, 384, 385, 386, 387], "n_epoch": [48, 306], "n_event": [337, 338, 343], "n_featur": [41, 47, 57, 175, 234, 235, 236, 238, 240, 298, 299, 300, 301, 303, 304, 305, 306, 323, 336, 349, 458, 460, 466], "n_features_new": [305, 306, 336, 349, 380, 383, 386, 458, 460], "n_features_to_select": 97, "n_fold": [3, 236, 298, 299, 300, 301, 303, 304], "n_frame": [337, 343], "n_init": [49, 305, 458], "n_iter": [48, 49, 268, 290, 293, 459, 460, 466], "n_job": [3, 31, 33, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 62, 74, 75, 76, 78, 79, 80, 97, 98, 99, 100, 102, 105, 108, 113, 171, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 336, 339, 345, 349, 351, 366, 381, 382, 383, 392, 394, 397, 459, 479], "n_l1_ratio": [303, 304], "n_label": 429, "n_map": 430, "n_marker": [399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "n_node": [453, 456], "n_nonzero_coef": 41, "n_onset": [336, 343], "n_output": [304, 305, 306, 336, 349, 458, 460], "n_outputs_": [298, 299, 300, 301], "n_paramet": [303, 304], "n_parcel": [22, 49, 114, 459], "n_parcels_hemi": [22, 114], "n_perm": [42, 76, 78, 102, 105, 351, 397], "n_point": 24, "n_refin": 236, "n_reg": 338, "n_region": [51, 90], "n_regions_extract": [50, 166], "n_regressor": [337, 345, 351, 397], "n_roi": 254, "n_run": 102, "n_sampl": [9, 44, 76, 80, 102, 105, 106, 111, 234, 235, 236, 298, 299, 300, 301, 303, 304, 305, 306, 336, 349, 354, 380, 383, 386, 397, 458, 460, 466, 472, 473, 477], "n_samples_fit": 304, "n_scan": [33, 61, 63, 67, 69, 108, 178, 338], "n_sourc": 472, "n_split": [3, 34, 36, 37, 40, 44, 51, 98], "n_subject": [11, 23, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 74, 75, 76, 77, 78, 79, 80, 84, 88, 90, 91, 94, 98, 101, 104, 105, 106, 115, 136, 140, 161, 166, 175, 188, 234, 235, 236, 238, 242, 243, 263, 271, 272, 275, 281, 287, 297], "n_t": 24, "n_time_point": [90, 91, 344, 345], "n_timepoint": [97, 168, 171], "n_vertic": [312, 313, 314, 315], "n_volum": 55, "n_voxel": [6, 55, 76, 78, 91, 97, 168, 171, 178, 305, 324, 326, 328, 329, 332, 336, 344, 345, 461], "n_z": 24, "nac": 253, "naiv": 175, "namburi": [37, 120], "name": [2, 3, 4, 6, 14, 21, 22, 23, 26, 30, 32, 44, 51, 58, 62, 64, 71, 74, 75, 76, 78, 79, 90, 93, 99, 100, 103, 108, 113, 114, 122, 129, 131, 138, 147, 149, 154, 156, 158, 161, 165, 169, 173, 176, 177, 181, 183, 184, 185, 188, 194, 195, 197, 204, 205, 224, 227, 234, 235, 236, 244, 245, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 260, 262, 272, 277, 279, 282, 283, 284, 285, 286, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 334, 336, 337, 338, 339, 343, 349, 351, 354, 365, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 458, 459, 460, 461, 462, 464, 471, 473, 479, 495], "named_step": [40, 44, 97], "namedtupl": [476, 477], "nan": [20, 48, 50, 54, 56, 90, 93, 101, 103, 127, 131, 136, 141, 149, 153, 161, 281, 354, 369, 382, 385, 388, 391, 442, 448, 450, 451, 455, 457, 473, 477, 478, 479], "nanci": [23, 115, 120, 222, 287], "nano": [120, 305], "nardo": [58, 120, 205, 260], "narend": [120, 194, 274], "narr": [65, 80, 176], "narrai": [303, 304], "naselari": [120, 169], "nassir": [120, 162, 234], "natasha": [0, 129, 161], "nathan": 222, "nation": [0, 120, 173, 183, 194, 198, 228, 255, 274, 302, 378], "nativ": [6, 60, 72, 118, 130, 142, 161, 177, 230, 285, 336, 343, 355, 363, 366, 369, 387, 447, 452, 494], "natur": [48, 120, 123, 181, 194, 203, 221, 263, 274, 277, 279], "naturalist": [162, 163, 165, 166, 203], "navab": [120, 162, 234], "navi": 68, "navig": [146, 161], "naylor": [120, 203, 263], "nbsp": [36, 49, 52, 53, 58, 62, 74, 76], "nbviewer": [36, 49, 52, 53, 58, 62, 74, 76], "nc": 247, "ncbi": [48, 70, 120, 167, 169, 198, 206, 305, 377, 378], "nclass": [298, 299, 300, 301], "ncol": [30, 63, 78, 99, 100, 105], "ncollect": 107, "ncolorbar": 15, "ncomput": 107, "ncut": 201, "ndarrai": [149, 161, 234, 235, 236, 237, 238, 239, 240, 241, 242, 254, 256, 260, 262, 263, 274, 275, 298, 299, 300, 301, 303, 304, 305, 306, 307, 317, 318, 323, 326, 327, 328, 329, 332, 336, 349, 351, 354, 356, 359, 360, 366, 367, 369, 371, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 435, 441, 444, 448, 449, 450, 451, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477], "ndarray": 235, "ndim": 396, "ndimag": [44, 93, 187, 268, 290, 293, 363, 389, 390, 391, 393, 394], "neach": [50, 166], "nearbi": 37, "nearest": [9, 40, 41, 44, 49, 65, 74, 83, 111, 120, 149, 158, 161, 181, 277, 368, 369, 370, 439, 440, 446, 447, 454, 460, 466, 470, 477], "nearest_neighbor_group": [129, 161], "nearestneighbor": 37, "nearli": [193, 303, 304], "nebraska": 0, "necessari": [4, 62, 88, 91, 100, 108, 113, 129, 149, 156, 161, 162, 165, 168, 176, 177, 184, 188, 244, 277, 279, 298, 299, 300, 301, 329, 336, 349, 386, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 479], "necessarili": [68, 166, 178, 198], "necu": [143, 161], "need": [0, 2, 3, 5, 6, 9, 12, 16, 20, 24, 30, 31, 33, 38, 41, 42, 44, 48, 49, 50, 51, 55, 56, 65, 66, 67, 70, 74, 76, 77, 78, 79, 80, 83, 88, 90, 91, 97, 98, 99, 103, 104, 105, 106, 108, 111, 112, 116, 122, 123, 146, 149, 156, 161, 162, 166, 168, 169, 170, 171, 176, 178, 180, 181, 184, 186, 187, 188, 194, 241, 323, 326, 327, 371, 376, 377, 381, 382, 384, 393, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 434, 437, 439, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 459, 477, 492, 493], "neelai": [0, 156, 161], "neg": [9, 14, 17, 42, 51, 58, 65, 76, 78, 79, 89, 102, 106, 111, 120, 132, 153, 156, 161, 173, 178, 181, 194, 242, 274, 304, 351, 352, 369, 373, 397, 439, 442, 447, 451, 470, 477, 492], "neg_log10_vfwe_pvals_img": 351, "neg_log_pv": [42, 76, 78, 102], "neg_log_pvals_anova": [105, 106], "neg_log_pvals_anova_unmask": [105, 106], "neg_log_pvals_bonferroni": 102, "neg_log_pvals_bonferroni_data": 102, "neg_log_pvals_bonferroni_unmask": 102, "neg_log_pvals_permuted_ols_unmask": [76, 105], "neg_log_pvals_tfce_unmask": 105, "neg_mean_absolute_error": [42, 299, 301], "neg_mean_squared_error": [299, 301], "negat": [52, 82, 95, 118, 295, 365, 447, 452, 494], "negative_edg": 58, "negative_stat_img": 89, "neglig": [175, 358], "neighbor": [9, 37, 49, 93, 111, 149, 161, 182, 302, 439, 440, 446, 447, 454, 459, 460, 466, 477], "neighborhood": 165, "neighbour": 477, "neighbourhood": 477, "nelson": [58, 120, 205, 225, 260, 261], "nepal": 0, "nest": [24, 29, 42, 152, 161, 171, 234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461, 477], "nested_cv_scor": 34, "nested_sample_point": 24, "net": [28, 44, 45, 118, 174, 281, 298, 299, 303, 304, 447, 452, 494], "netherland": 0, "netmat": [26, 136, 161], "neto": [120, 198, 246], "network": [2, 8, 19, 20, 21, 27, 46, 47, 48, 51, 54, 55, 60, 71, 72, 82, 85, 93, 95, 100, 118, 120, 123, 138, 152, 158, 161, 162, 163, 164, 166, 176, 177, 181, 182, 183, 188, 190, 193, 197, 198, 200, 205, 223, 225, 226, 227, 228, 242, 243, 245, 246, 252, 254, 255, 258, 260, 261, 262, 272, 274, 336, 343, 361, 377, 378, 380, 382, 385, 387, 410, 431, 443, 444, 445, 447, 452, 461, 469, 471, 478, 479, 492, 494, 495], "network3": 86, "networks_197": 19, "networks_444": 19, "networks_64": 19, "neural": [6, 66, 120, 167, 178, 181, 183, 188, 200, 213, 264, 282, 302], "neuro": [167, 181, 298, 372], "neuroanatomi": 188, "neurobiolog": 181, "neuroimag": [0, 2, 8, 22, 23, 27, 37, 48, 51, 56, 62, 75, 93, 98, 99, 100, 102, 114, 115, 118, 120, 121, 123, 146, 161, 162, 163, 167, 168, 170, 172, 173, 174, 176, 181, 182, 185, 190, 195, 198, 200, 202, 204, 212, 214, 220, 221, 227, 244, 246, 248, 249, 252, 256, 262, 266, 267, 272, 277, 279, 292, 298, 299, 300, 301, 302, 303, 304, 305, 306, 331, 336, 349, 351, 354, 355, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 372, 374, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 432, 433, 437, 439, 440, 442, 445, 446, 447, 452, 454, 455, 459, 461, 464, 465, 467, 468, 471, 474, 477, 483, 492, 494, 495], "neuroinform": 123, "neuroinformat": [120, 204, 221, 223, 277, 279], "neurolog": [103, 178, 181, 195, 198, 244], "neurologi": [0, 229], "neuromap": 176, "neuron": [40, 41, 58, 120, 173, 219, 225, 261, 276], "neuroparc": 176, "neurophysiologi": [120, 226, 232, 254, 258], "neuropsychiatr": [264, 282], "neuropsychologia": [120, 218, 275], "neurosci": [0, 23, 49, 65, 71, 115, 120, 165, 173, 181, 183, 193, 194, 197, 200, 222, 223, 228, 242, 245, 255, 272, 274, 281, 287, 495], "neurosparse_prni": [120, 174], "neurospin": [0, 60, 64, 72, 118, 176, 177, 217, 438, 494], "neurostar": [176, 183, 184], "neurosynth": [99, 103, 121, 221, 277, 279, 495], "neurovault": [2, 96, 109, 118, 120, 121, 142, 149, 154, 158, 161, 181, 190, 277, 278, 279, 280, 289, 359, 364, 365, 367, 371, 380, 386, 439, 447, 452, 494, 495], "never": [34, 168, 175, 183, 369, 370], "nevertheless": [155, 161], "new": [0, 2, 3, 10, 11, 20, 36, 49, 65, 70, 71, 78, 83, 85, 93, 97, 102, 107, 111, 112, 113, 114, 115, 120, 122, 128, 140, 141, 142, 143, 144, 157, 168, 169, 170, 171, 176, 181, 183, 184, 187, 188, 229, 233, 234, 236, 277, 279, 298, 299, 300, 301, 303, 304, 328, 329, 349, 363, 366, 367, 368, 369, 373, 389, 391, 392, 394, 397, 432, 433, 434, 435, 437, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 459, 462, 469, 492, 493], "new_img_lik": [10, 11, 36, 93, 101, 107, 131, 149, 158, 161, 187], "new_label": 462, "new_labels_img": 462, "new_titl": 105, "newaxi": [40, 44, 79, 83], "newer": [167, 277, 279], "newest": [157, 161, 277], "newli": 444, "newseg": [42, 74], "newton": 175, "next": [6, 14, 54, 55, 58, 63, 64, 65, 67, 68, 70, 74, 77, 78, 79, 80, 108, 112, 144, 147, 156, 161, 163, 174, 175, 176, 178, 184, 479], "nguyen": [0, 149, 152, 154, 161], "niak": [198, 242], "nian": [120, 226, 254], "nib": 62, "nibabel": [4, 33, 36, 44, 49, 52, 56, 62, 74, 80, 83, 90, 101, 129, 130, 132, 140, 141, 143, 149, 154, 156, 158, 161, 175, 186, 187, 305, 306, 355, 356, 357, 364, 369, 370, 371, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 459, 461, 462, 463, 467, 468], "nice": [50, 166], "nicer": [23, 115], "nichol": [102, 120, 123, 162, 181, 183, 194, 221, 274, 277, 279, 351, 391, 397], "nichola": [120, 193, 212, 242], "nickerson": [120, 231, 257], "nico": [58, 120, 205, 227, 260, 262], "nicola": [0, 120, 132, 153, 154, 155, 156, 157, 158, 161, 194, 228, 255, 274], "niconnect": 0, "nielsen": [120, 193, 242], "nifitmask": 377, "nifti": [2, 4, 10, 11, 16, 18, 25, 29, 30, 32, 34, 35, 36, 41, 47, 48, 49, 52, 53, 54, 56, 58, 76, 78, 83, 85, 88, 90, 91, 93, 94, 102, 104, 105, 122, 132, 133, 134, 152, 158, 161, 163, 167, 168, 176, 185, 195, 196, 200, 203, 204, 206, 212, 213, 215, 219, 220, 221, 223, 224, 226, 231, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 258, 263, 265, 266, 270, 271, 272, 275, 276, 281, 298, 299, 303, 304, 305, 306, 355, 356, 359, 363, 364, 365, 369, 372, 437, 459, 462, 477, 484, 492, 495], "nifti1": [4, 33, 36, 49, 52, 56, 74, 80, 90, 101, 149, 161, 371, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 459, 461, 462, 463, 467, 468], "nifti1head": [56, 83, 90, 101, 365], "nifti1imag": [4, 33, 36, 40, 43, 44, 49, 52, 56, 74, 80, 83, 90, 141, 142, 144, 149, 161, 166, 186, 248, 250, 251, 253, 254, 257, 268, 275, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 305, 306, 331, 333, 336, 349, 351, 352, 353, 355, 357, 361, 362, 364, 365, 366, 369, 370, 371, 372, 373, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 408, 413, 415, 419, 425, 429, 430, 431, 459, 461, 462, 463, 467, 468], "nifti2imag": [144, 161], "nifti_labels_mask": [49, 56], "nifti_lik": 441, "nifti_maps_mask": [52, 53], "nifti_mask": [33, 35, 36, 42, 91, 102, 105, 106, 122, 176], "nifti_spheres_mask": 58, "niftiimag": [3, 163, 176, 177, 186, 187], "niftilabelsmask": [49, 54, 56, 82, 93, 95, 118, 131, 146, 147, 149, 152, 153, 154, 156, 158, 161, 163, 185, 250, 263, 380, 381, 382, 385, 464, 467, 469, 479, 494, 495], "niftilablesmask": 90, "niftimapsmask": [51, 52, 53, 54, 90, 98, 126, 131, 146, 153, 156, 161, 163, 185, 381, 382, 384, 461, 465, 468, 479, 495], "niftimask": [29, 32, 34, 35, 36, 40, 41, 42, 43, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 82, 90, 93, 95, 97, 98, 99, 102, 103, 104, 105, 106, 116, 118, 122, 130, 146, 149, 152, 153, 154, 155, 156, 161, 168, 171, 185, 263, 276, 298, 299, 300, 301, 303, 304, 305, 306, 333, 336, 349, 351, 361, 366, 377, 378, 380, 381, 382, 384, 385, 387, 391, 397, 437, 441, 446, 447, 452, 459, 469, 479, 484, 494, 495], "niftispheresmask": [55, 58, 61, 68, 99, 128, 132, 133, 134, 136, 147, 151, 153, 161, 177, 185, 479, 495], "nih": [48, 70, 120, 167, 169, 198, 206, 305, 377, 378], "nii": [2, 3, 4, 6, 10, 11, 14, 16, 18, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 70, 74, 76, 84, 85, 88, 90, 91, 93, 94, 100, 102, 104, 105, 108, 113, 122, 183, 186, 198, 204, 307, 339, 374, 376, 377, 378, 448, 457, 475, 479], "nii_asym": 198, "nii_sym": 198, "niimg": [1, 7, 33, 54, 58, 88, 90, 91, 97, 118, 122, 130, 131, 132, 143, 146, 149, 154, 158, 161, 165, 183, 185, 187, 188, 255, 280, 288, 298, 299, 300, 301, 302, 303, 304, 305, 306, 331, 336, 339, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 432, 433, 439, 440, 442, 445, 446, 447, 452, 454, 455, 459, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 473, 477, 479, 481, 494, 495], "niimg_convers": [132, 161], "nijmegen": 0, "nikhil": [0, 132, 161], "niko": [120, 202, 212, 248], "nikolaidi": [146, 161], "nikolau": [120, 173, 183, 302], "nilearn": [1, 2, 3, 6, 7, 8, 9, 10, 11, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 118, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 136, 137, 139, 140, 141, 144, 146, 147, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 184, 186, 187, 188, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 478, 479, 482, 492, 494, 495], "nilearn_cach": [33, 35, 36, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 91, 97, 98, 99, 102, 103, 104, 105, 106, 166, 479], "nilearn_cmap": 12, "nilearn_data": [2, 3, 4, 6, 10, 11, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 38, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 74, 76, 84, 88, 90, 91, 93, 94, 99, 100, 101, 102, 104, 105, 108, 113, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 287, 288, 479], "nilearn_glm": [62, 74], "nilearn_shared_data": [186, 288], "nili": [120, 224, 253], "nimg": [23, 115, 120, 195, 202, 244], "nipi": [158, 161, 176, 182], "niprep": 378, "nipy_spectr": 437, "nipyp": 178, "nishimoto": [120, 169], "nistat": [129, 135, 152, 161], "nistats_migr": [129, 161], "nitrc": [23, 101, 115, 116, 196, 201, 222, 243, 247, 255, 287], "nki": [23, 115, 116, 120, 141, 161, 190, 287, 320], "nki_dataset": [23, 115], "nki_enhanced_surfac": 23, "nki_nilearn": [23, 115, 222], "nlm": [48, 70, 120, 167, 169, 198, 206, 305, 377, 378], "nmap": 12, "nmr": [232, 258], "nn": 37, "nnn": 198, "nodal": [152, 161, 443, 492], "node": [20, 23, 24, 58, 108, 113, 115, 147, 149, 152, 154, 161, 163, 188, 194, 242, 253, 286, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 442, 443, 453, 455, 456, 477, 492], "node_cmap": [58, 443], "node_color": [144, 154, 161, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 453], "node_coord": [147, 149, 161, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 443, 453], "node_kwarg": [402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 443], "node_s": [58, 147, 149, 156, 161, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 443, 453], "node_strength": 58, "node_strength_neg": 58, "node_strength_posit": 58, "node_threshold": 443, "node_valu": 443, "node_vmax": 443, "node_vmin": 443, "nois": [3, 6, 34, 44, 56, 67, 68, 70, 93, 94, 99, 103, 108, 120, 129, 154, 161, 163, 169, 171, 175, 178, 181, 188, 326, 328, 329, 343, 377, 378, 433, 445, 446, 474], "noise_coef": 44, "noise_model": [6, 33, 65, 336, 339, 345, 478], "noisi": [42, 91, 162], "noisier": [439, 440, 446, 447, 454], "nomenclatur": [22, 23, 114, 115, 120, 202, 256], "nomin": 50, "non": [6, 14, 15, 39, 42, 50, 56, 64, 65, 66, 76, 78, 90, 93, 102, 103, 121, 132, 133, 142, 146, 149, 153, 154, 156, 157, 161, 162, 166, 167, 173, 174, 175, 176, 180, 181, 183, 188, 193, 196, 198, 200, 201, 203, 204, 214, 220, 247, 274, 281, 298, 299, 300, 301, 305, 326, 328, 329, 336, 354, 358, 363, 369, 371, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 432, 442, 446, 447, 448, 450, 451, 455, 457, 461, 467, 473, 479, 492, 495], "non_parametric_infer": [76, 78, 129, 130, 156, 158, 161, 180], "non_rest": 35, "non_steady_st": 377, "nondement": [120, 223, 281], "none": [3, 14, 15, 32, 33, 36, 40, 44, 49, 52, 53, 54, 56, 58, 62, 65, 66, 74, 76, 78, 88, 90, 91, 93, 94, 99, 101, 103, 107, 123, 130, 136, 146, 149, 153, 158, 161, 176, 188, 234, 235, 236, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 317, 318, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 339, 343, 345, 349, 350, 351, 352, 353, 354, 355, 360, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 477, 478, 479, 492], "nonlinear": [120, 198, 214, 267, 292], "nonparametr": 78, "nonpres": 188, "nonstochast": [120, 397], "nonzero": [50, 371, 461], "nooner": [23, 115, 120, 222, 287], "noplot": 176, "noqa": [9, 58, 71, 97, 111, 112, 113, 254, 298, 300, 439], "nor": 188, "norihiro": [40, 41, 120, 219, 276], "norm": [44, 55, 62, 75, 78, 100, 107, 108, 113, 234, 240, 298, 299, 300, 301, 303, 304, 305, 306, 336, 433, 458, 459, 460, 461], "norm_nois": 44, "norm_resid": [158, 161], "normal": [6, 24, 31, 37, 44, 55, 58, 67, 68, 100, 104, 108, 112, 113, 116, 122, 136, 161, 168, 175, 176, 177, 178, 181, 195, 214, 216, 235, 238, 244, 270, 281, 328, 329, 477], "normalis": [132, 161, 371], "normalized_cov_beta": 327, "normalized_residu": [328, 329], "northwestern": 0, "nose": [149, 161], "notabl": [49, 163, 215], "notat": [153, 156, 161, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 437, 439, 440, 442, 446, 447, 448, 450, 451], "notcontain": [123, 277], "note": [2, 3, 4, 6, 14, 15, 20, 23, 42, 43, 44, 48, 49, 52, 54, 55, 56, 58, 64, 65, 67, 68, 70, 74, 75, 78, 83, 85, 88, 90, 91, 93, 94, 100, 102, 104, 108, 113, 115, 120, 122, 123, 130, 156, 161, 162, 163, 167, 173, 174, 175, 176, 177, 178, 184, 186, 187, 188, 198, 234, 235, 236, 241, 242, 244, 245, 246, 249, 254, 255, 258, 263, 266, 267, 268, 270, 271, 274, 276, 277, 278, 279, 280, 281, 282, 288, 289, 290, 293, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 323, 326, 327, 328, 329, 336, 349, 352, 354, 360, 363, 365, 366, 369, 372, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 393, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 432, 433, 437, 439, 446, 447, 458, 459, 460, 461, 462, 473, 474, 477, 479, 492], "notebook": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 118, 134, 146, 149, 161, 168, 183, 188, 336, 349, 378, 453, 454, 455, 456, 457, 469, 471, 492], "notequ": [123, 277], "noteworthi": [147, 161, 169], "noth": [4, 173, 236, 305, 306, 325, 327, 330, 336, 349, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 440, 442, 445, 446, 447, 454], "notic": [49, 58, 65, 100, 108, 110, 113, 118, 233, 374], "notin": [123, 277], "notion": [168, 173, 375, 443], "notnul": [123, 277], "notter": [0, 146, 161], "nov": [58, 120, 225, 261], "nova": 0, "novel": 227, "novemb": [75, 120, 143, 146, 149, 152, 161, 331], "now": [2, 3, 4, 6, 14, 16, 20, 22, 25, 29, 40, 44, 49, 50, 51, 55, 56, 62, 63, 64, 65, 69, 71, 78, 80, 83, 85, 91, 92, 93, 99, 100, 101, 103, 104, 108, 112, 113, 114, 116, 122, 127, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 161, 168, 174, 176, 184, 187, 298, 299, 300, 301, 305, 306, 323, 326, 327, 328, 329, 353, 361, 365, 378, 381, 383, 384, 386, 459], "np": [3, 5, 6, 9, 11, 12, 14, 20, 22, 23, 24, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 74, 76, 78, 79, 83, 84, 86, 88, 90, 93, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 158, 161, 166, 176, 186, 187, 234, 254, 281, 325, 326, 327, 328, 329, 330, 355, 365, 397, 458, 460], "nplot": 107, "npz": [206, 265], "nr": 175, "nreshap": 103, "nrg": 223, "nrow": [49, 63, 78, 99, 100], "ntop": 103, "nuclei": [120, 224, 253], "nuisanc": [169, 181, 196, 198, 203, 243, 323, 326, 327, 328, 378, 473], "null": [71, 78, 157, 161, 168, 173, 178, 181, 324, 351, 397], "null_cv_scor": 97, "null_duration_tri": 71, "number": [3, 6, 29, 31, 33, 34, 39, 42, 43, 49, 50, 53, 54, 55, 58, 64, 65, 67, 70, 71, 76, 78, 85, 88, 91, 93, 97, 99, 103, 104, 105, 112, 123, 132, 133, 134, 146, 149, 152, 153, 154, 156, 161, 162, 165, 166, 168, 169, 170, 173, 176, 178, 181, 183, 184, 188, 194, 198, 201, 224, 226, 232, 234, 235, 236, 238, 242, 243, 246, 249, 250, 251, 254, 255, 257, 263, 266, 268, 271, 272, 275, 277, 281, 287, 290, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 317, 318, 327, 332, 336, 345, 349, 351, 352, 354, 356, 358, 360, 365, 366, 373, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 394, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 432, 433, 434, 435, 437, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 470, 471, 472, 473, 474, 479, 492], "number_of_scan": 360, "number_of_subject": 107, "numer": [1, 7, 29, 33, 35, 57, 118, 153, 161, 176, 177, 188, 238, 324, 326, 328, 329, 337, 445, 446, 472, 494], "numpi": [3, 5, 6, 9, 10, 11, 12, 14, 16, 20, 22, 23, 24, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 74, 76, 78, 79, 83, 85, 86, 88, 93, 97, 99, 102, 103, 104, 105, 106, 108, 111, 112, 113, 114, 115, 116, 127, 129, 131, 132, 133, 137, 141, 143, 146, 149, 152, 154, 156, 161, 165, 166, 168, 175, 176, 184, 186, 187, 234, 235, 236, 237, 238, 239, 240, 241, 242, 248, 249, 254, 256, 260, 261, 262, 263, 298, 299, 300, 301, 303, 304, 305, 306, 307, 313, 317, 318, 326, 328, 329, 332, 336, 338, 343, 345, 349, 351, 354, 355, 356, 359, 360, 361, 365, 366, 367, 369, 371, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 394, 396, 397, 401, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 429, 430, 432, 434, 435, 437, 439, 441, 443, 444, 447, 448, 449, 450, 451, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477], "numpy_convers": [136, 161], "numpydoc": 176, "nunzio": [23, 115, 120, 222, 287], "nutshel": 6, "nv_data": [103, 107], "ny": [120, 328, 329], "nyu": [120, 131, 161, 323, 327], "n\u00e1jera": [0, 124, 127, 134, 136, 161], "o": [58, 99, 120, 136, 161, 168, 176, 194, 195, 212, 225, 226, 242, 244, 254, 261, 274, 377], "oas1_0001_mr1": [42, 43, 74], "oas1_0002_mr1": 43, "oas1_0003_mr1": 43, "oas1_0004_mr1": 43, "oas1_0005_mr1": 43, "oas1_0007_mr1": 43, "oas1_0009_mr1": 43, "oas1_0010_mr1": 43, "oas1_0012_mr1": 43, "oas1_0013_mr1": 43, "oas1_0015_mr1": 43, "oas1_0016_mr1": 43, "oas1_0019_mr1": 43, "oas1_0022_mr1": 43, "oas1_0023_mr1": 43, "oas1_0025_mr1": 43, "oas1_0026_mr1": 43, "oas1_0029_mr1": 43, "oas1_0031_mr1": 43, "oas1_0032_mr1": 43, "oas1_0037_mr1": 43, "oas1_0038_mr1": 43, "oas1_0039_mr1": 43, "oas1_0041_mr1": 43, "oas1_0042_mr1": 43, "oas1_0044_mr1": 43, "oas1_0045_mr1": 43, "oas1_0049_mr1": 43, "oas1_0050_mr1": 43, "oas1_0052_mr1": 43, "oas1_0053_mr1": 43, "oas1_0054_mr1": 43, "oas1_0055_mr1": 43, "oas1_0056_mr1": 43, "oas1_0059_mr1": 43, "oas1_0060_mr1": 43, "oas1_0061_mr1": 43, "oas1_0064_mr1": 43, "oas1_0065_mr1": 43, "oas1_0067_mr1": 43, "oas1_0069_mr1": 43, "oas1_0070_mr1": 43, "oas1_0071_mr1": 43, "oas1_0072_mr1": 43, "oas1_0078_mr1": 43, "oas1_0079_mr1": 43, "oas1_0080_mr1": 43, "oas1_0082_mr1": 43, "oas1_0086_mr1": 43, "oas1_0090_mr1": 43, "oas1_0091_mr1": 43, "oas1_0094_mr1": 43, "oas1_0096_mr1": 43, "oas1_0098_mr1": 43, "oas1_0099_mr1": 43, "oas1_0101_mr1": 43, "oas1_0103_mr1": 43, "oas1_0104_mr1": 43, "oas1_0106_mr1": 43, "oas1_0111_mr1": 43, "oas1_0113_mr1": 43, "oas1_0114_mr1": 43, "oas1_0115_mr1": 43, "oas1_0117_mr1": 43, "oas1_0119_mr1": 43, "oas1_0120_mr1": 43, "oas1_0121_mr1": 43, "oas1_0123_mr1": 43, "oas1_0124_mr1": 43, "oas1_0126_mr1": 43, "oas1_0131_mr1": 43, "oas1_0135_mr1": 43, "oas1_0136_mr1": 43, "oas1_0138_mr1": 43, "oas1_0144_mr1": 43, "oas1_0145_mr1": 43, "oas1_0146_mr1": 43, "oas1_0148_mr1": 43, "oas1_0150_mr1": 43, "oas1_0155_mr1": 43, "oas1_0159_mr1": 43, "oas1_0160_mr1": 43, "oas1_0162_mr1": 43, "oas1_0163_mr1": 43, "oas1_0164_mr1": 43, "oas1_0165_mr1": 43, "oas1_0167_mr1": 43, "oas1_0169_mr1": 43, "oas1_0173_mr1": 43, "oas1_0174_mr1": 43, "oas1_0176_mr1": 43, "oas1_0177_mr1": 43, "oas1_0178_mr1": 43, "oas1_0180_mr1": 43, "oas1_0181_mr1": 43, "oas1_0182_mr1": 43, "oas1_0184_mr1": 43, "oas1_0188_mr1": 43, "oas1_0189_mr1": 43, "oas1_0190_mr1": 43, "oas1_0193_mr1": 43, "oas1_0199_mr1": 43, "oas1_0200_mr1": 43, "oas1_0202_mr1": 43, "oas1_0203_mr1": 43, "oas1_0204_mr1": 43, "oas1_0205_mr1": 43, "oas1_0207_mr1": 43, "oas1_0208_mr1": 43, "oas1_0209_mr1": 43, "oas1_0211_mr1": 43, "oas1_0212_mr1": 43, "oas1_0214_mr1": 43, "oas1_0216_mr1": 43, "oas1_0217_mr1": 43, "oas1_0218_mr1": 43, "oas1_0220_mr1": 43, "oas1_0223_mr1": 43, "oas1_0226_mr1": 43, "oas1_0227_mr1": 43, "oasi": [28, 45, 73, 81, 118, 120, 174, 180, 182, 190, 267, 268, 281, 299, 304, 349, 352, 359, 370, 376, 380, 386, 397, 425, 436, 447, 452, 469, 471, 478, 494], "oasis1": [42, 43, 74], "oasis_dataset": [42, 74], "ob": 246, "obei": [128, 161], "obj": [176, 247, 255], "object": [2, 3, 4, 5, 6, 9, 10, 13, 14, 15, 16, 17, 25, 28, 30, 32, 33, 36, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 68, 70, 74, 80, 85, 87, 88, 90, 91, 93, 97, 101, 111, 112, 114, 115, 118, 120, 122, 123, 130, 131, 138, 141, 149, 152, 155, 156, 158, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 173, 175, 177, 181, 182, 183, 185, 187, 213, 234, 235, 236, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 284, 285, 286, 287, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 317, 318, 319, 320, 326, 328, 329, 331, 336, 339, 349, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 477, 479, 481, 484, 487, 492, 494, 495], "observ": [39, 44, 58, 61, 63, 65, 69, 78, 79, 80, 102, 169, 173, 177, 178, 181, 183, 188, 327, 458], "observed_timeseri": 177, "obtain": [6, 15, 22, 42, 43, 49, 54, 58, 63, 65, 67, 74, 76, 90, 93, 102, 105, 112, 114, 156, 161, 162, 163, 165, 167, 168, 170, 173, 175, 178, 181, 188, 194, 200, 205, 225, 236, 245, 247, 255, 267, 272, 289, 290, 293, 297, 303, 304, 353, 358, 369, 373, 382, 384, 385, 387, 397, 411, 438, 461, 479], "obviou": 65, "obvious": [67, 112], "occ": 51, "occipit": [58, 90], "occur": [66, 134, 161, 178, 181, 242, 493], "occurr": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 102, 103, 104, 105, 106, 122, 173], "octav": 198, "octob": [120, 146, 149, 161, 198], "odc": 216, "odd": 472, "off": [12, 14, 38, 40, 41, 65, 71, 121, 129, 139, 161, 175, 176, 198, 201, 300, 301, 336, 349, 389, 390, 391, 393, 394, 445, 446, 447, 454, 471], "offer": [167, 177, 179, 492], "offici": 493, "offlin": [277, 279, 495], "offset": [40, 51, 83, 152, 161, 187, 253, 254, 369], "often": [11, 30, 32, 35, 36, 85, 93, 122, 167, 168, 169, 173, 178, 181, 183, 186, 187, 188, 242, 326, 328, 329], "oftentim": 183, "ohbm": [120, 145, 161, 194, 274], "ok": 183, "okito": [40, 41, 120, 219, 276], "ol": [102, 105, 326, 328, 329, 336, 345, 397, 486], "old": [131, 149, 155, 156, 161], "older": [32, 35, 36, 40, 41, 42, 47, 48, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 102, 103, 104, 105, 106, 120, 122, 141, 142, 143, 144, 161, 176, 186, 223, 281, 356], "oliv": [0, 68, 120, 131, 161, 173, 198, 246], "oliveira": [120, 183], "olivi": [0, 143, 161], "ols_output": 105, "olsmodel": [158, 161, 326, 328, 329], "omit": 22, "omp": 41, "onc": [4, 36, 49, 57, 70, 123, 156, 161, 162, 167, 168, 175, 177, 178, 180, 181, 184, 188, 458, 477], "one": [3, 4, 6, 9, 14, 15, 16, 20, 24, 29, 30, 31, 33, 35, 36, 40, 44, 47, 48, 49, 55, 56, 57, 58, 63, 65, 67, 68, 69, 70, 71, 73, 76, 77, 79, 80, 81, 85, 90, 91, 93, 99, 100, 101, 103, 105, 108, 111, 112, 113, 118, 122, 123, 129, 130, 132, 138, 140, 143, 152, 154, 155, 156, 161, 162, 163, 166, 167, 168, 169, 173, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 188, 198, 216, 234, 236, 242, 246, 247, 253, 254, 255, 262, 268, 272, 275, 286, 298, 299, 300, 301, 303, 305, 306, 317, 324, 336, 338, 339, 343, 345, 349, 350, 351, 354, 355, 356, 358, 359, 361, 365, 369, 374, 376, 381, 384, 386, 396, 397, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 434, 435, 439, 442, 443, 444, 445, 449, 450, 452, 454, 455, 459, 463, 464, 470, 473, 477, 493, 494, 495], "one_mesh_info": [131, 161], "one_minus_pvalu": [153, 161, 324], "ones": [12, 33, 44, 63, 65, 74, 78, 80, 99, 103, 105, 106, 130, 161, 170, 171, 173, 175, 303, 304, 343, 397, 458], "ones_lik": 76, "onevsoneclassifi": [35, 169], "onevsrestclassifi": [35, 169], "ongo": 176, "onli": [2, 3, 6, 13, 14, 19, 29, 31, 32, 33, 34, 36, 37, 40, 42, 43, 49, 51, 52, 54, 55, 58, 65, 67, 74, 78, 80, 83, 85, 90, 93, 97, 98, 99, 100, 101, 103, 104, 108, 112, 113, 115, 122, 123, 130, 133, 139, 144, 149, 154, 156, 157, 161, 162, 163, 165, 166, 168, 169, 170, 171, 173, 175, 176, 178, 180, 181, 184, 185, 186, 187, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 492, 495], "onlin": [48, 120, 167, 176, 201, 306, 493], "onlinelibrari": [102, 120, 201, 207, 208, 209, 210, 211, 231, 247, 257, 286, 354, 397, 473], "onset": [6, 33, 63, 64, 65, 66, 71, 99, 131, 152, 161, 177, 230, 285, 336, 337, 338, 340, 341, 342, 343, 346, 347, 348, 438], "ontario": 0, "onto": [9, 16, 23, 40, 50, 67, 111, 112, 115, 141, 161, 166, 176, 182, 186, 390, 393, 436, 445, 492], "onward": [83, 159, 161], "oop": 6, "opac": 454, "opaqu": 454, "open": [9, 16, 22, 52, 54, 58, 88, 90, 91, 97, 108, 114, 120, 129, 161, 175, 176, 181, 182, 183, 185, 190, 194, 204, 223, 263, 281, 324, 336, 349, 389, 390, 391, 392, 393, 394, 453, 454, 455, 456, 457, 460, 469, 471, 492, 493, 495], "open_in_brows": [9, 16, 22, 33, 52, 54, 58, 61, 62, 70, 74, 90, 91, 111, 114, 132, 146, 161, 188, 453, 454, 455, 456, 457, 469, 471, 492], "openfmri": 204, "openli": 281, "openneuro": [60, 72, 118, 177, 203, 218, 263, 264, 282, 283, 297, 336, 339, 376, 379, 386, 435, 439, 441, 469, 470, 471, 478, 494], "oper": [85, 88, 90, 93, 101, 104, 122, 154, 161, 168, 175, 176, 178, 181, 185, 186, 188, 234, 235, 268, 297, 336, 349, 351, 363, 365, 366, 389, 390, 391, 393, 394, 435, 481, 485, 495], "opercular": [58, 90], "operculari": 90, "operto": [146, 161], "opinion": 176, "opportun": 49, "oppos": [80, 187, 188], "opposit": [44, 69, 173], "opt": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 61, 65, 69, 70, 71, 74, 76, 77, 78, 83, 85, 88, 90, 91, 92, 94, 97, 102, 103, 104, 105, 106, 111, 116], "optim": [53, 57, 99, 120, 149, 153, 161, 169, 171, 174, 175, 204, 236, 238, 249, 369, 370], "optimist": [34, 168], "optimum": 175, "option": [8, 9, 13, 15, 21, 23, 27, 42, 51, 56, 66, 71, 88, 102, 111, 115, 118, 122, 127, 129, 130, 131, 132, 139, 141, 142, 143, 144, 149, 152, 153, 154, 155, 156, 158, 159, 161, 163, 168, 170, 176, 177, 181, 184, 186, 188, 234, 235, 236, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 318, 323, 324, 326, 327, 328, 329, 331, 332, 333, 336, 338, 339, 343, 349, 351, 352, 354, 355, 364, 366, 367, 368, 369, 371, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 471, 472, 473, 474, 477, 492, 494], "orang": 492, "orbit": 90, "orcid": 176, "order": [0, 2, 3, 6, 15, 16, 23, 30, 32, 35, 36, 40, 41, 42, 49, 54, 56, 70, 78, 79, 90, 99, 102, 107, 115, 122, 129, 140, 146, 149, 154, 156, 161, 167, 173, 175, 176, 177, 181, 182, 183, 184, 186, 187, 188, 238, 260, 262, 270, 271, 289, 290, 293, 323, 327, 336, 343, 345, 349, 350, 351, 354, 356, 358, 363, 364, 368, 369, 370, 381, 382, 384, 385, 386, 387, 389, 390, 391, 393, 394, 396, 397, 432, 437, 439, 440, 442, 446, 447, 454, 461, 462, 464, 467, 472, 473, 477, 492, 493], "ordered_region": [260, 262], "ordinari": [65, 102, 105, 327, 397], "orfano": [0, 120, 129, 134, 146, 161, 176, 200, 272], "org": [0, 3, 4, 18, 22, 23, 31, 32, 34, 36, 37, 38, 40, 41, 49, 51, 52, 53, 56, 58, 62, 69, 74, 76, 97, 98, 101, 102, 114, 115, 116, 120, 123, 162, 163, 165, 168, 170, 173, 174, 175, 176, 178, 181, 183, 184, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 235, 238, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 266, 267, 268, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 286, 287, 292, 298, 299, 300, 301, 351, 354, 377, 378, 397, 433, 456, 460, 466, 473, 474], "organ": [6, 58, 120, 136, 149, 155, 157, 161, 176, 181, 183, 198, 225, 226, 227, 232, 254, 258, 261, 351, 378, 397, 413, 476, 477, 493], "orient": [9, 111, 149, 152, 161, 175, 176, 368], "orig": [307, 448, 449, 450, 451, 457, 476, 477], "origami": 0, "origin": [0, 6, 36, 40, 41, 49, 50, 65, 68, 70, 83, 88, 92, 99, 130, 140, 153, 155, 156, 161, 165, 173, 175, 184, 188, 198, 203, 215, 234, 235, 236, 255, 263, 267, 272, 281, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 353, 373, 380, 381, 382, 383, 384, 385, 386, 387, 433, 448, 450, 451, 455, 457, 458, 459, 460, 461, 473], "original_affin": 92, "original_shap": 92, "original_voxel": 49, "ortho": [14, 15, 62, 336, 349, 409, 410, 426, 427, 432, 434, 437, 439, 440, 443, 445, 446, 447, 471, 492], "orthogon": [146, 161, 181, 336, 338, 343, 349, 354, 399, 408, 409, 410, 413, 427, 432, 434, 437, 439, 440, 443, 445, 446, 447, 471, 473], "orthogonalmatchingpursuit": 41, "orthoprojector": [13, 14, 16, 47, 50, 51, 52, 58, 156, 161, 426, 434, 439, 443], "orthoslic": [2, 3, 4, 6, 10, 15, 16, 17, 25, 48, 50, 68, 70, 74, 80, 85, 88, 93, 97, 156, 161, 408, 413, 415, 417, 419, 421, 423, 425, 427, 432, 437, 440, 445, 446, 447, 492], "oscar": [0, 146, 161], "oscil": [6, 65, 120], "osf": [78, 166, 199, 203, 204, 216, 224, 249, 253, 263, 272], "osram": 0, "ot": [22, 114, 173], "other": [2, 4, 14, 23, 24, 31, 36, 39, 40, 48, 56, 65, 67, 68, 70, 93, 97, 99, 103, 104, 112, 115, 120, 121, 122, 130, 146, 149, 153, 161, 162, 163, 168, 169, 170, 172, 173, 175, 176, 177, 181, 184, 186, 188, 206, 212, 229, 234, 235, 236, 263, 277, 283, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 326, 328, 329, 336, 338, 343, 349, 351, 374, 375, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 393, 397, 440, 452, 458, 459, 460, 461, 492, 495], "otherwis": [93, 102, 103, 146, 161, 178, 184, 234, 235, 236, 240, 242, 248, 249, 260, 261, 262, 270, 271, 272, 274, 281, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 339, 349, 364, 368, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 442, 445, 448, 450, 451, 454, 455, 457, 458, 459, 460, 461, 462, 473, 477], "otten": [69, 120], "oup": [69, 120, 162, 194, 202, 226, 248, 254, 274], "our": [0, 2, 3, 14, 19, 29, 34, 40, 49, 51, 56, 58, 65, 66, 71, 93, 97, 100, 112, 116, 122, 123, 146, 156, 161, 163, 168, 175, 176, 178, 184], "ourselv": [9, 111], "out": [29, 33, 34, 36, 40, 42, 43, 44, 48, 51, 53, 54, 55, 56, 57, 58, 67, 70, 99, 102, 105, 106, 112, 122, 123, 132, 146, 149, 153, 161, 163, 168, 169, 171, 173, 175, 176, 177, 181, 187, 198, 221, 267, 298, 299, 300, 301, 303, 304, 361, 369, 381, 382, 383, 384, 385, 386, 387, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 442, 459, 461, 462, 472, 473, 477, 492], "out_dict": 78, "out_dir": [62, 74, 376], "outcom": [65, 181, 378], "outdat": [129, 140, 161], "outer": [12, 88, 181, 477], "outlier": [181, 281, 377, 378, 380, 383, 386], "outlin": [15, 48, 88, 91, 167, 176, 449, 479, 492], "outperform": [51, 98, 162, 167], "output": [3, 4, 6, 9, 15, 16, 22, 23, 29, 33, 34, 36, 41, 44, 48, 49, 51, 52, 54, 55, 56, 58, 65, 67, 70, 79, 83, 85, 93, 108, 111, 114, 115, 121, 122, 129, 130, 132, 138, 144, 156, 158, 159, 161, 162, 167, 172, 176, 181, 183, 184, 185, 187, 188, 234, 235, 237, 238, 239, 240, 241, 298, 299, 300, 301, 302, 303, 304, 305, 306, 317, 318, 326, 328, 329, 333, 336, 349, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 372, 373, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 432, 433, 439, 440, 442, 445, 446, 447, 454, 455, 458, 459, 460, 461, 464, 465, 467, 468, 470, 471, 477, 492, 495], "output_dimension_": 318, "output_dir": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93, 115, 441], "output_fil": [6, 15, 23, 115, 411, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451, 492], "output_filepath": [90, 91, 188], "output_imag": 349, "output_typ": [6, 61, 64, 65, 68, 69, 70, 74, 75, 76, 78, 79, 80, 99, 105, 336, 349, 397], "outsid": [2, 4, 16, 65, 132, 158, 161, 176, 183, 188, 369, 370, 384, 448, 450, 451, 457, 464, 465, 470, 477], "ova": 35, "over": [3, 20, 48, 49, 51, 67, 69, 88, 101, 112, 122, 130, 152, 153, 161, 167, 168, 173, 174, 175, 180, 184, 187, 198, 204, 249, 306, 317, 336, 362, 366, 377, 398, 400, 401, 445, 449, 477, 492], "overal": [35, 65, 68, 130, 161, 175, 176, 215, 303, 304], "overfit": [34, 169, 173], "overflow": [158, 161], "overhead": 175, "overlai": [15, 20, 21, 50, 166, 187, 454, 495], "overlaid": [16, 69, 88, 91, 152, 154, 161, 445, 479], "overlap": [3, 31, 32, 38, 54, 58, 88, 90, 91, 97, 120, 129, 131, 133, 161, 176, 181, 188, 194, 213, 266, 274, 381, 382, 384, 385, 387, 445, 479], "overrid": [62, 99, 116, 153, 161, 242, 243, 244, 245, 246, 247, 248, 252, 255, 256, 258, 266, 267, 275, 276, 281, 287, 459], "overridden": 176, "oversampl": [66, 336, 338, 340, 341, 342, 343, 346, 347, 348], "overview": [38, 173, 175, 183], "overwhelm": 58, "overwrit": [11, 56, 277, 279, 398, 400, 401], "ovo": 35, "own": [4, 6, 49, 58, 99, 121, 123, 168, 171, 176, 233, 268, 495], "owner": 277, "ox": [2, 212, 215, 228, 255], "oxford": [0, 21, 90, 120, 163, 190, 242, 250, 328, 329, 429, 430], "oxi": 178, "oxygen": [65, 178, 181], "oxyhaemoglobin": [178, 181], "p": [6, 42, 62, 70, 74, 75, 76, 78, 79, 80, 93, 100, 102, 105, 106, 108, 113, 120, 153, 161, 162, 173, 175, 178, 183, 193, 194, 195, 196, 201, 204, 206, 214, 228, 231, 234, 235, 238, 242, 247, 255, 257, 267, 274, 323, 324, 332, 336, 349, 351, 352, 354, 376, 397, 470, 471, 473], "p001_unc": [78, 100], "p001_uncorrect": 75, "p_f": 18, "p_h": 18, "p_ma": 36, "p_statmap": [62, 74], "p_unmask": 36, "p_v": 18, "p_val": [75, 76, 78], "p_valu": [36, 44, 76, 78, 93, 107, 153, 161, 324, 336, 349], "pa": [0, 339], "pace": [23, 115, 120, 222, 287], "packag": [0, 3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 61, 65, 69, 70, 71, 74, 76, 77, 78, 83, 85, 88, 90, 91, 92, 93, 94, 97, 102, 103, 104, 105, 106, 111, 116, 127, 128, 129, 130, 132, 146, 149, 154, 156, 161, 176, 178, 183, 184, 186, 233, 250, 251, 492], "packagenam": 184, "packagevers": 184, "pad": [70, 132, 149, 161, 187, 188, 358, 369, 370, 391, 394, 398, 400, 401, 472], "padlen": 472, "padtyp": 472, "page": [36, 49, 52, 53, 58, 62, 74, 76, 120, 133, 146, 150, 156, 157, 158, 161, 165, 169, 173, 175, 176, 178, 184, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477], "pai": [0, 64], "paid": 0, "pair": [3, 73, 81, 85, 97, 118, 123, 133, 159, 161, 168, 169, 180, 272, 275, 277, 298, 299, 300, 301, 303, 304, 349, 375, 376, 377, 378, 409, 436, 439, 444, 448, 450, 451, 452, 460, 477, 494], "paired_design_matrix": 79, "pairwis": [51, 162], "panda": [3, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 62, 63, 64, 65, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 93, 97, 99, 102, 112, 122, 123, 129, 132, 143, 146, 152, 154, 156, 157, 161, 168, 234, 242, 248, 249, 260, 261, 262, 270, 271, 272, 281, 305, 306, 318, 336, 337, 339, 343, 349, 350, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 435, 436, 438, 458, 459, 460, 461, 470, 473], "panek": [23, 115, 120, 222, 287], "papadopoulo": [0, 120, 129, 134, 146, 161, 176, 200, 272], "papathanassi": [120, 195, 244], "paper": [0, 48, 49, 122, 123, 165, 175, 176, 178, 277], "par": 90, "paracingul": 90, "paradigm": [65, 67, 69, 96, 109, 112, 118, 123, 168, 178, 217, 230, 273, 279, 343, 359, 364, 365, 367, 439, 447, 452, 494], "paragraph": 175, "parahippocamp": 90, "parallel": [36, 42, 43, 44, 47, 48, 78, 102, 105, 129, 161, 175, 178, 351, 383, 397], "param": [234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "param1": 184, "param2": 184, "param_connectivity__kind": 98, "param_grid": [34, 98, 116, 130, 161, 169, 298, 299, 300, 301], "param_valid": [116, 141, 161], "paramagnet": [178, 181], "paramet": [3, 6, 14, 15, 21, 23, 24, 28, 29, 32, 42, 44, 45, 49, 51, 54, 56, 58, 60, 69, 72, 88, 90, 91, 93, 94, 101, 104, 105, 106, 108, 115, 116, 118, 122, 123, 129, 130, 131, 132, 133, 140, 143, 146, 147, 149, 153, 154, 155, 156, 157, 158, 159, 161, 163, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 181, 183, 184, 185, 186, 198, 230, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 317, 318, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 492, 494, 495], "parameter_plot": 62, "parametr": [42, 64, 65, 76, 78, 102, 105, 106, 120, 159, 161, 173, 180, 181, 324, 325, 330, 354, 473], "parcel": [8, 9, 22, 23, 27, 46, 59, 114, 115, 118, 120, 123, 130, 132, 133, 137, 141, 144, 145, 146, 149, 156, 158, 161, 164, 181, 182, 183, 188, 194, 195, 198, 201, 202, 215, 220, 221, 226, 232, 234, 244, 246, 247, 248, 250, 251, 252, 254, 256, 258, 263, 274, 359, 361, 366, 377, 378, 380, 384, 417, 429, 430, 434, 437, 444, 446, 452, 461, 462, 492, 494, 495], "parcellationsifittedparcel": 49, "parent": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93, 115, 176], "pari": [0, 176], "pariet": [20, 58, 90, 220, 252], "parietomedi": 262, "park": [56, 120, 378], "parker": [120, 223, 281], "pars": [158, 161, 375], "parse_bids_filenam": [156, 161], "parser": 375, "parsimoni": 176, "parson": [120, 231, 257], "part": [14, 15, 49, 51, 55, 67, 88, 90, 111, 112, 113, 114, 115, 116, 120, 129, 133, 149, 155, 158, 161, 169, 175, 176, 177, 182, 187, 194, 196, 200, 234, 240, 241, 250, 251, 267, 272, 298, 299, 300, 301, 305, 306, 315, 351, 352, 373, 374, 375, 377, 383, 386, 389, 390, 391, 393, 394, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 444, 459], "partial": [26, 48, 52, 98, 162, 166, 194, 234, 239, 274, 378], "partial_correl": [26, 58, 239, 274], "partial_correlation_matric": 51, "partial_correlation_matrix": 58, "partial_correlation_measur": 51, "particip": [40, 56, 65, 112, 113, 116, 120, 176, 178, 181, 196, 223, 377, 378], "participant_id": 78, "particular": [11, 15, 33, 65, 86, 97, 123, 135, 156, 161, 163, 171, 173, 175, 183, 184, 186, 279, 298, 299, 300, 301, 326, 328, 329, 343, 374, 477], "particularli": [268, 461], "partit": [3, 16, 29, 40, 227], "partli": [40, 42, 175, 178, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 258, 263, 266, 267, 268, 272, 274, 275, 276, 281, 287], "pascual": [0, 134, 161], "pass": [3, 4, 9, 10, 11, 24, 29, 36, 42, 43, 49, 51, 54, 55, 56, 58, 78, 85, 88, 93, 101, 102, 105, 106, 111, 112, 122, 123, 129, 131, 132, 133, 142, 144, 146, 149, 154, 156, 158, 159, 161, 168, 169, 173, 175, 176, 177, 184, 186, 187, 188, 198, 234, 235, 236, 242, 277, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 338, 339, 343, 349, 351, 354, 355, 368, 369, 370, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 389, 391, 392, 394, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 454, 455, 458, 459, 460, 461, 463, 469, 471, 472, 473, 477], "passiv": 65, "past": [0, 56, 122, 163, 378], "patalasingh": [0, 158, 161], "patch": [18, 40, 41, 49, 184], "patch_openneuro_dataset": 282, "patcog": [49, 120], "path": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93, 100, 108, 113, 115, 121, 122, 123, 131, 138, 149, 155, 157, 158, 161, 168, 174, 175, 176, 184, 185, 188, 195, 206, 216, 219, 229, 230, 235, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 295, 298, 299, 300, 301, 303, 304, 305, 306, 312, 313, 314, 336, 339, 349, 355, 364, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 411, 442, 459, 460, 461, 469, 473, 475, 476, 477, 495], "path_to_a_bids_dataset": 339, "path_to_edited_fil": 176, "path_to_new_env": 493, "pathlib": [3, 4, 6, 15, 23, 29, 33, 41, 48, 49, 55, 61, 62, 70, 71, 74, 85, 93, 100, 108, 113, 115, 131, 155, 161, 186, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 287, 288, 298, 299, 300, 301, 303, 304, 336, 339, 349, 376, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 442, 459, 460, 461, 473, 475, 476, 477], "pathlik": 307, "patient": [120, 162, 181, 234], "patrick": [0, 131, 161], "pattern": [0, 4, 8, 27, 28, 45, 49, 51, 99, 118, 120, 123, 144, 152, 161, 162, 167, 168, 171, 174, 175, 181, 183, 186, 194, 198, 202, 213, 218, 220, 236, 238, 243, 246, 256, 267, 274, 275, 277, 296, 302, 355, 367, 391, 396, 433, 452, 460, 466, 494], "paugam": [0, 131, 161], "paul": [0, 120, 129, 131, 161, 194, 201, 212, 247, 274], "paula": [0, 149, 161], "pauli": [21, 120, 190, 253], "pauli2017": 21, "paz": 0, "pb": 0, "pbellec": [146, 161], "pca": [54, 305, 382, 385, 479], "pcc": [20, 23, 51, 55, 115], "pcc_coord": [55, 61, 177], "pcc_label": [23, 115], "pcc_map": [23, 115], "pcc_region": [23, 115], "pcc_seed": 61, "pcc_seed_correl": 55, "pcc_seed_correlation_z": 55, "pcp": [190, 242], "pd": [3, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 63, 64, 65, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 93, 97, 102, 112, 122, 186, 214, 267], "pdf": [3, 15, 31, 32, 38, 55, 58, 66, 69, 97, 102, 120, 131, 158, 161, 168, 173, 174, 194, 198, 201, 202, 205, 207, 208, 209, 210, 211, 213, 223, 226, 228, 231, 247, 248, 254, 255, 257, 260, 266, 274, 281, 286, 354, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451, 473], "pe": 181, "peak": [6, 33, 62, 68, 70, 169, 171, 175, 428, 461, 463, 470, 478], "pearlson": [120, 197, 245], "pearson": [23, 115, 120, 323, 327, 441], "pearsonr": [23, 115], "peck": [120, 328, 329], "pediatr": [120, 198, 212, 214, 267, 292], "pedregosa": [0, 120, 124, 161, 220, 252], "pedro": [120, 198, 246], "peer": [0, 146, 161, 215], "peke": 0, "penal": [169, 175, 236, 303, 304], "penalti": [30, 34, 39, 43, 169, 174, 181, 298, 299, 300, 303, 304], "pend": 78, "pennsylvania": 0, "penros": 327, "peopl": [0, 6, 143, 146, 147, 148, 149, 150, 151, 161, 175, 176], "pep8": [130, 131, 132, 161, 176, 184], "per": [3, 4, 6, 30, 31, 33, 40, 48, 57, 65, 77, 93, 100, 102, 108, 113, 154, 161, 162, 168, 176, 188, 198, 203, 229, 236, 256, 275, 298, 299, 300, 301, 303, 304, 306, 324, 333, 336, 337, 339, 343, 350, 374, 377, 381, 382, 383, 385, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 472], "per_compon": [48, 152, 161, 305, 306, 459], "peraza": [0, 130, 161], "percent": [29, 34, 41, 42, 43, 149, 161, 168, 344, 353, 373, 381, 382, 383, 384, 385, 386, 387, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 445, 453, 455, 457, 473], "percentag": [56, 168, 195, 298, 299, 300, 301], "percentil": [65, 86, 87, 97, 298, 299, 300, 301, 303, 304, 353, 360, 373, 402, 403, 404, 405, 406, 407, 408, 409, 412, 413, 414, 415, 416, 418, 419, 420, 422, 424, 425, 431, 434, 445, 453, 454, 455, 457, 461, 474], "percept": [69, 120, 149, 161, 178, 200, 230, 272], "perceptu": [120, 173], "perez": [0, 134, 139, 161], "perfect": 175, "perfectli": 175, "perform": [3, 30, 33, 34, 44, 51, 54, 62, 65, 69, 78, 79, 88, 90, 91, 93, 94, 98, 99, 100, 102, 105, 106, 116, 122, 123, 130, 152, 153, 154, 156, 161, 162, 167, 169, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 186, 187, 188, 195, 201, 221, 230, 238, 268, 281, 290, 293, 298, 299, 300, 301, 303, 304, 305, 306, 317, 318, 336, 338, 345, 349, 351, 368, 369, 370, 371, 372, 373, 378, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 394, 397, 408, 410, 413, 415, 417, 419, 421, 423, 425, 427, 432, 434, 437, 439, 440, 443, 445, 446, 447, 454, 458, 459, 460, 461, 464, 466, 471, 472, 473, 477, 479, 495], "perfus": [120, 377, 378, 474], "period": [6, 41, 65, 67, 108, 112, 298, 299, 300, 301, 303, 304, 340, 341, 342, 346, 347, 348, 354, 381, 382, 383, 384, 385, 386, 387, 433, 459, 461, 473], "perirhin": [120, 173], "perm": [42, 43], "permiss": [118, 149, 161], "permut": [42, 76, 78, 102, 105, 120, 129, 152, 161, 171, 173, 178, 351, 368, 397, 486], "permutation_test_scor": [97, 171], "permuted_least_squar": [78, 158, 161], "permuted_ol": [42, 78, 102, 105, 129, 130, 152, 157, 158, 161, 173, 180, 351], "person": 229, "pertin": [61, 74], "perturb": 51, "pescara": 0, "peter": [120, 173, 183, 228, 231, 255, 257, 302], "petersburg": 0, "petersen": [58, 120, 198, 205, 225, 227, 260, 261, 262, 377, 378], "petkova": [23, 115, 120, 222, 287], "phantom": [120, 195], "phase": 236, "pheno": 98, "phenom": [120, 264, 282], "phenomena": 65, "phenomenolog": 66, "phenomenon": 173, "phenotyp": [51, 62, 98, 157, 161, 168, 172, 185, 193, 196, 203, 222, 242, 243, 263, 287, 495], "philadelphia": [120, 174], "philip": [23, 115, 120, 222, 287], "philipp": [0, 48, 70, 71, 120, 124, 161, 167, 200, 206, 272, 305], "phillip": [120, 183, 197, 245], "phlypo": [0, 124, 161], "php": [101, 116], "physic": [178, 398, 400, 401], "physio_plot": 62, "physiolog": [56, 65, 68, 378], "physiologi": 378, "pi": [24, 83, 323, 327], "pial": [22, 23, 24, 37, 111, 112, 113, 114, 115, 152, 158, 161, 207, 208, 209, 210, 211, 286, 307, 319, 320, 322, 442, 448, 449, 450, 451, 455, 457, 476, 477], "pial_": [22, 37], "pial_left": [22, 23, 67, 108, 207, 208, 209, 210, 211, 286, 442, 455, 477], "pial_mesh": 37, "pial_right": [9, 67, 108, 207, 208, 209, 210, 211, 286, 442, 455, 492], "pick": [21, 166, 175, 178, 181, 268], "picked_slic": 36, "pictur": [49, 122, 165, 173, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477], "piec": [49, 186, 495], "pierr": [0, 120, 143, 145, 146, 147, 161, 162, 198, 234, 246], "pietrantoni": [0, 158, 161], "pietrini": [3, 31, 32, 38, 97, 120, 213, 266], "pietro": [3, 31, 32, 38, 97, 120, 213, 266], "pii": [22, 23, 37, 40, 41, 49, 51, 56, 98, 102, 114, 115, 120, 162, 163, 170, 173, 174, 195, 198, 200, 202, 212, 214, 218, 219, 220, 227, 244, 246, 252, 256, 262, 267, 272, 275, 276, 292, 300, 301, 377, 378, 397, 433, 474], "pinel": [48, 65, 71, 120, 167, 200, 272, 305], "ping": 184, "pinho": [0, 149, 153, 155, 161], "pip": [132, 141, 146, 149, 161, 176, 184, 493], "pipe": 98, "pipelin": [3, 35, 37, 39, 40, 41, 42, 44, 74, 97, 98, 120, 152, 161, 167, 168, 169, 172, 173, 174, 181, 187, 198, 234, 235, 236, 242, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 354, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461, 473, 495], "pisner": [0, 149, 161], "pitfal": [120, 168, 173], "pittsburgh": 0, "pixar001_task": [48, 53, 84], "pixar002_task": [48, 53], "pixar003_task": [48, 53], "pixar004_task": 48, "pixar005_task": 48, "pixar006_task": 48, "pixar007_task": 48, "pixar008_task": 48, "pixar009_task": 48, "pixar010_task": 48, "pixar011_task": 48, "pixar012_task": 48, "pixar013_task": 48, "pixar014_task": 48, "pixar015_task": 48, "pixar016_task": 48, "pixar017_task": 48, "pixar018_task": 48, "pixar019_task": 48, "pixar020_task": 48, "pixar021_task": 48, "pixar022_task": 48, "pixar023_task": 48, "pixar024_task": 48, "pixar123_task": [47, 48, 49, 52, 53, 54, 55, 56, 58, 84, 90, 91, 94, 104], "pixar124_task": 48, "pixar125_task": 48, "pixar126_task": 48, "pixar127_task": 48, "pixar128_task": 48, "pixar_desc": [47, 52, 53, 55, 56, 58], "pixar_spac": [47, 48, 49, 52, 53, 54, 55, 56, 58, 84, 90, 91, 94, 104], "pixdim": [56, 90, 101], "pixel": [40, 41, 178, 336, 349, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 453, 454, 456, 471], "piyadasa": [120, 197, 245], "pkg": 184, "place": [29, 97, 143, 161, 277, 345, 373, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 433, 440, 477], "placehold": 399, "plai": [178, 188], "plain": 176, "planar": 181, "planck": 0, "plane": 454, "planum": [90, 103], "platform": [123, 142, 161, 184, 221], "pleas": [0, 3, 19, 29, 30, 32, 33, 34, 35, 36, 49, 50, 52, 53, 58, 62, 69, 70, 71, 74, 76, 97, 99, 102, 103, 105, 106, 112, 113, 116, 141, 147, 156, 161, 166, 168, 171, 176, 181, 184, 188, 194, 206, 215, 230, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 482, 493], "plenti": 122, "plo": [120, 183], "plot": [1, 2, 4, 7, 8, 19, 20, 21, 23, 25, 26, 27, 29, 30, 33, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 51, 52, 53, 54, 56, 57, 59, 61, 62, 63, 64, 67, 69, 70, 71, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 102, 103, 104, 105, 106, 108, 110, 112, 113, 115, 116, 117, 118, 122, 125, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 163, 166, 167, 168, 173, 176, 177, 178, 180, 181, 182, 183, 184, 187, 188, 234, 243, 248, 250, 251, 256, 260, 261, 263, 266, 267, 270, 280, 286, 295, 316, 319, 321, 322, 336, 349, 355, 366, 367, 380, 387, 391, 469, 471, 475, 476, 477, 478, 479, 489, 493, 494, 495], "plot_3d_and_4d_niimg": [2, 7, 494], "plot_3d_map_to_surface_project": [9, 27, 154, 161, 182, 455, 494], "plot_3d_map_to_surface_projection_experiment": [111, 117, 494], "plot_ab": [9, 14, 62, 78, 79, 100, 105, 111, 401, 439, 492], "plot_adhd_dmn": [61, 72, 494], "plot_adhd_spher": [149, 161], "plot_advanced_decoding_scikit": [97, 109, 494], "plot_affine_transform": [83, 95, 494], "plot_age_group_prediction_cross_v": [98, 109, 149, 161, 494], "plot_anat": [6, 15, 18, 50, 156, 161, 166, 440, 447, 492], "plot_atla": [10, 27, 494], "plot_atlas_comparison": [47, 59, 494], "plot_beta_seri": [99, 109, 494], "plot_bids_analysi": [100, 109, 494], "plot_bids_featur": [62, 72, 494], "plot_canica_analysi": [149, 161], "plot_carpet": [11, 27, 131, 152, 153, 157, 158, 161, 492, 494], "plot_colormap": [12, 27, 494], "plot_compare_decomposit": [48, 59, 149, 161, 182, 494], "plot_compare_mean_imag": [84, 95, 494], "plot_connectivity_measur": [142, 161], "plot_connectom": [22, 47, 50, 51, 52, 53, 54, 58, 114, 125, 127, 129, 138, 139, 144, 147, 149, 158, 161, 163, 166, 453, 456, 492], "plot_connectome_strength": [149, 152, 156, 161], "plot_contrast": 65, "plot_contrast_matrix": [6, 62, 64, 65], "plot_copy_headers_math_img": [101, 109, 494], "plot_data_driven_parcel": [49, 59, 182, 494], "plot_decoding_tutori": [3, 7, 149, 161, 168, 176, 182, 494], "plot_demo_glass_brain": [13, 27, 182, 494], "plot_demo_glass_brain_extens": [14, 27, 494], "plot_demo_more_plot": [15, 27, 494], "plot_demo_plot": [16, 27, 494], "plot_design_matrix": [6, 63, 64, 65, 72, 74, 77, 79, 99, 177, 180, 494], "plot_dim_plot": [17, 27, 494], "plot_epi": [3, 25, 49, 88, 93, 94, 153, 156, 161, 440, 447, 492], "plot_ev": [71, 152, 159, 161, 177], "plot_extract_regions_dictlearning_map": [50, 59, 494], "plot_extract_regions_labels_imag": [85, 95, 494], "plot_extract_rois_smith_atla": [86, 95, 494], "plot_extract_rois_statistical_map": [87, 95, 494], "plot_fiac_analysi": [132, 161], "plot_fir_model": [64, 72, 494], "plot_first_level_detail": [65, 72, 494], "plot_fixed_effect": [132, 161], "plot_glass_brain": [9, 13, 14, 62, 78, 79, 100, 105, 107, 111, 132, 139, 149, 157, 158, 161, 180, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 447, 492], "plot_group_level_connect": [51, 59, 142, 149, 161, 494], "plot_haxby_anova_svm": [29, 45, 141, 161, 494], "plot_haxby_decod": [149, 161], "plot_haxby_different_estim": [30, 45, 149, 161, 494], "plot_haxby_frem": [31, 45, 182, 494], "plot_haxby_full_analysi": [32, 45, 149, 161, 494], "plot_haxby_glm_decod": [33, 45, 494], "plot_haxby_grid_search": [34, 45, 494], "plot_haxby_mask": [18, 27, 494], "plot_haxby_mass_univari": [102, 109, 494], "plot_haxby_multiclass": [35, 45, 494], "plot_haxby_searchlight": [36, 45, 182, 494], "plot_haxby_searchlight_surfac": [37, 45, 494], "plot_haxby_stimuli": [38, 45, 494], "plot_hist": 441, "plot_hrf": [66, 72, 494], "plot_ica_neurovault": [103, 109, 494], "plot_ica_resting_st": [104, 109, 494], "plot_img": [4, 6, 36, 131, 149, 156, 161, 183, 408, 410, 413, 415, 417, 419, 421, 423, 425, 492], "plot_img_comparison": 62, "plot_img_on_surf": [9, 111, 131, 152, 154, 161], "plot_inverse_covariance_connectom": [52, 59, 182, 494], "plot_localizer_mass_univariate_method": [105, 106, 109, 494], "plot_localizer_new_surface_analysis_experiment": [112, 117, 494], "plot_localizer_simple_analysi": [106, 109, 494], "plot_localizer_surface_analysi": [67, 72, 494], "plot_mark": [58, 152, 156, 158, 161, 492], "plot_mask_comput": [88, 95, 188, 494], "plot_matric": 53, "plot_matrix": [26, 31, 35, 50, 51, 52, 53, 54, 56, 57, 58, 116, 143, 144, 149, 161, 166], "plot_mixed_gambles_frem": [39, 45, 494], "plot_miyawaki_encod": [40, 45, 494], "plot_miyawaki_reconstruct": [41, 45, 494], "plot_multi_subject_connectom": [53, 59, 494], "plot_multiscale_parcel": [19, 27, 494], "plot_negate_imag": [89, 95, 494], "plot_neurovault_meta_analysi": [107, 109, 494], "plot_new_surface_bids_analysis_experiment": [113, 117, 494], "plot_nifti_labels_simpl": [90, 95, 494], "plot_nifti_simpl": [91, 95, 188, 494], "plot_nilearn_101": [4, 7, 494], "plot_oasi": [70, 74, 81, 494], "plot_oasis_vbm": [42, 45, 149, 161, 182, 494], "plot_oasis_vbm_space_net": [43, 45, 494], "plot_overlai": [20, 27, 494], "plot_predictions_residu": [68, 72, 494], "plot_prob_atla": [21, 27, 48, 50, 86, 87, 136, 143, 144, 153, 161, 166, 167, 440, 446, 492, 494], "plot_probabilistic_atlas_extract": [54, 59, 494], "plot_proportion_activated_voxel": [75, 81, 494], "plot_python_101": [5, 7, 494], "plot_resample_to_templ": [92, 95, 494], "plot_roi": [3, 10, 17, 19, 25, 49, 65, 85, 88, 91, 93, 145, 152, 153, 158, 161, 163, 187, 188, 440, 445, 492], "plot_roi_extract": [93, 95, 494], "plot_second_level_association_test": [76, 81, 494], "plot_second_level_design_matrix": [77, 81, 494], "plot_second_level_one_sample_test": [78, 81, 494], "plot_second_level_two_sample_test": [79, 81, 494], "plot_seed_to_voxel_correl": [55, 59, 147, 161, 494], "plot_signal_extract": [56, 59, 188, 494], "plot_simulated_connectom": [57, 59, 494], "plot_simulated_data": [44, 45, 494], "plot_single_subject_single_run": [6, 7, 494], "plot_slic": 44, "plot_smooth_mean_imag": [94, 95, 494], "plot_sphere_based_connectom": [58, 59, 149, 161, 494], "plot_spm_multimodal_fac": [69, 72, 494], "plot_stat_map": [2, 6, 9, 15, 17, 29, 30, 31, 36, 39, 40, 42, 43, 48, 50, 55, 61, 64, 65, 68, 69, 70, 74, 75, 76, 80, 84, 86, 87, 89, 91, 92, 93, 97, 99, 102, 103, 104, 106, 107, 111, 122, 132, 134, 145, 146, 153, 154, 156, 157, 161, 166, 168, 180, 188, 454, 492], "plot_stat_map_from_displai": 15, "plot_surf": [116, 129, 133, 141, 143, 149, 153, 154, 155, 156, 161, 176, 177, 449, 450, 451, 492], "plot_surf_atla": [22, 27, 494], "plot_surf_atlas_experiment": [114, 117, 494], "plot_surf_contour": [9, 111, 131, 152, 161], "plot_surf_roi": [22, 23, 114, 115, 116, 131, 132, 141, 143, 145, 149, 153, 161, 448, 492], "plot_surf_stat_map": [9, 23, 24, 27, 37, 67, 108, 111, 112, 113, 115, 133, 141, 143, 145, 149, 152, 156, 157, 158, 161, 177, 442, 448, 449, 494, 495], "plot_surf_stat_map_experiment": [115, 117, 494], "plot_surface_bids_analysi": [108, 109, 494], "plot_surface_image_and_mask": [116, 117, 494], "plot_surface_projection_strategi": [24, 27, 494], "plot_threshold": [80, 81, 494], "plot_trisurf": 24, "plot_two_runs_model": [70, 72, 132, 161, 494], "plot_typ": [61, 336, 349, 376, 471], "plot_visu": [25, 27, 494], "plot_visualize_megatrawls_netmat": [26, 27, 494], "plot_write_events_fil": [71, 72, 494], "plotli": [131, 132, 133, 156, 161, 411, 448, 450, 451, 492, 493], "plotlysurfacefigur": [9, 111, 156, 161, 448], "plotted_slic": 106, "plt": [5, 6, 11, 12, 15, 18, 24, 25, 30, 32, 34, 35, 38, 40, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 63, 64, 65, 66, 68, 71, 74, 77, 78, 79, 83, 90, 93, 98, 99, 100, 102, 105, 106, 116, 187, 432, 433, 434, 437, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454], "plu": [336, 338, 343], "plug": [177, 188, 323, 327], "pluim": [120, 162, 234], "plunkett": [146, 161], "plural": 181, "pmc": [70, 120, 206], "pmc3254728": [120, 198, 377, 378], "pmc6871319": [70, 120, 206], "pmid": [120, 169, 226, 232, 254, 258], "pna": [120, 173, 183, 194, 198, 228, 255, 274, 378], "pnas_smith09_rsn10": 2, "png": [6, 9, 15, 23, 41, 61, 111, 115, 182, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451, 492], "point": [3, 4, 8, 15, 22, 23, 27, 54, 55, 83, 85, 90, 93, 114, 118, 122, 146, 149, 158, 161, 166, 168, 175, 178, 181, 183, 184, 185, 186, 236, 298, 299, 300, 301, 336, 369, 370, 380, 383, 386, 391, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 434, 437, 440, 443, 445, 446, 447, 451, 452, 454, 464, 465, 471, 477, 494, 495], "pointer": [97, 171], "pokharel": [0, 132, 161], "pokropek": [120, 214, 267], "polar": [90, 234, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "poldrack": [99, 120, 123, 168, 183, 204, 218, 221, 264, 275, 277, 279, 282], "pole": 90, "polici": [156, 161, 193], "polimeni": [120, 226, 232, 254, 258], "polin": [48, 49, 71, 120, 123, 162, 165, 167, 200, 221, 235, 272, 277, 279, 305, 354, 473], "pollet": [0, 133, 161], "polymesh": 307, "polynomi": [63, 65, 177, 336, 343], "pomara": [23, 115, 120, 222, 287], "pone": [120, 183], "pontil": [120, 174, 198], "pool": [198, 206], "pooled_subject": 51, "poorli": [65, 93, 188], "popul": [108, 113, 120, 162, 177, 194, 212, 214, 235, 274, 381, 382, 383, 384, 385, 386, 387, 473], "popular": [6, 48, 182, 186, 298, 299], "portabl": [61, 74, 188], "portion": 69, "portug": 0, "posit": [6, 9, 14, 16, 17, 24, 48, 51, 58, 65, 69, 73, 78, 79, 80, 81, 83, 93, 98, 111, 118, 120, 122, 133, 152, 156, 161, 168, 173, 175, 178, 180, 181, 188, 194, 235, 238, 242, 272, 274, 331, 336, 349, 351, 352, 373, 397, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 431, 432, 434, 437, 439, 440, 442, 443, 445, 446, 447, 451, 452, 454, 455, 470, 471, 477, 479, 492, 494], "positive_edg": 58, "possibl": [4, 6, 14, 15, 16, 44, 67, 69, 79, 80, 83, 93, 99, 112, 122, 123, 139, 156, 158, 161, 162, 165, 168, 173, 175, 176, 178, 181, 183, 184, 187, 188, 221, 234, 235, 236, 242, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 324, 326, 328, 329, 336, 339, 349, 351, 358, 369, 374, 377, 380, 381, 382, 383, 384, 385, 386, 387, 427, 428, 434, 439, 443, 458, 459, 460, 461, 471, 492], "possibli": [6, 65, 188], "post": [23, 51, 65, 93, 115, 120, 134, 161, 162, 176, 187, 215, 234, 268, 461], "postcentr": [9, 90, 111], "poster": [120, 198], "posterior": [22, 23, 55, 58, 61, 90, 103, 114, 115, 116, 143, 161, 177, 260, 262, 448, 450, 451], "potenti": [6, 54, 55, 88, 90, 91, 93, 99, 120, 155, 161, 173, 176, 181, 184, 255, 351, 382, 385, 479], "power": [11, 56, 58, 74, 76, 78, 120, 122, 128, 140, 152, 161, 162, 169, 170, 174, 181, 186, 188, 190, 198, 205, 260, 261, 377, 378, 433], "power2": 377, "power2d": 377, "ppd": 242, "ppi": 99, "ppn": [120, 328, 329], "pqu9r": [204, 249], "pr": [158, 161, 184], "practic": [32, 51, 67, 98, 112, 162, 165, 169, 171, 173, 175, 176, 177, 178, 180, 183, 186, 187], "pradeep": [0, 120, 145, 161, 168], "prafulla": 0, "praneeth": [37, 120], "pre": [39, 70, 93, 100, 130, 141, 146, 158, 161, 178, 188, 203, 327], "prec": [53, 175], "prec_to_parti": [141, 161], "preced": [37, 176, 188, 336], "precentr": [9, 90, 111], "precentral_l": 244, "precis": [15, 41, 52, 57, 61, 90, 130, 161, 162, 165, 166, 175, 183, 188, 200, 224, 234, 235, 236, 238, 239, 272, 298, 300, 326, 328, 329, 351, 397], "precision_": [52, 53, 57, 162], "precision_scor": 41, "precision_weight": 333, "precisions_": [53, 57, 162, 235, 236], "precisions_init": 238, "precomput": [3, 304], "precun": 90, "predefin": [130, 161], "predict": [30, 31, 33, 39, 40, 44, 51, 58, 60, 63, 72, 96, 109, 120, 122, 153, 154, 156, 161, 170, 171, 173, 174, 176, 178, 179, 181, 182, 183, 194, 203, 205, 234, 252, 260, 263, 274, 284, 298, 299, 300, 301, 302, 303, 304, 328, 329, 336, 349, 354, 355, 366, 371, 380, 385, 387, 391, 425, 447, 470, 493, 494, 495], "predicted_timeseri": [68, 177], "prediction_scor": 42, "predicton_accuraci": 3, "predictor": [6, 40, 177, 178, 328, 329, 378], "prefer": [39, 51, 98, 165, 176, 186], "prefix": [62, 74, 339, 354, 376, 381, 382, 383, 384, 385, 386, 387, 473], "prefront": 58, "preliminari": [120, 196, 231, 257], "prematur": 238, "premultipli": 303, "prepar": [42, 58, 93, 98, 100, 108, 113, 122, 136, 161, 172, 185, 317, 318, 381, 382, 383, 384, 385, 387, 461, 495], "prepend": [253, 254, 375, 376], "preprint": [120, 175], "preproc": [99, 100, 108, 113, 339], "preproc_bold": [47, 48, 49, 52, 53, 54, 55, 56, 58, 84, 90, 91, 94, 99, 100, 104, 108, 113], "preprocess": [6, 11, 23, 29, 34, 37, 40, 41, 44, 70, 88, 91, 98, 100, 104, 108, 113, 115, 116, 120, 121, 130, 141, 161, 166, 167, 173, 174, 178, 181, 188, 193, 196, 216, 222, 242, 243, 263, 281, 287, 336, 339, 354, 375, 377, 380, 381, 382, 383, 384, 385, 386, 387, 461, 473, 479, 483, 495], "prescrib": 352, "preselect": 56, "presenc": [40, 65, 102, 461, 463], "present": [0, 3, 6, 40, 41, 54, 56, 64, 67, 68, 100, 108, 122, 130, 142, 161, 166, 167, 168, 175, 177, 178, 179, 184, 186, 188, 215, 216, 217, 229, 238, 242, 248, 266, 298, 299, 300, 301, 305, 306, 364, 377, 378, 382, 383, 384, 385, 386, 458, 459, 460, 464, 479], "preserv": [51, 58, 98, 359, 371, 442, 458, 459, 460], "preset": [155, 156, 161, 378, 492], "prespecifi": 188, "press": [65, 67, 71, 75, 76, 78, 79, 105, 112, 120, 178, 270, 272, 280, 328, 329], "presum": [331, 352], "pretti": [4, 103], "prettier": [4, 133, 161, 176], "pretty_brain": 492, "prevent": [131, 161, 369, 370, 389, 390, 391, 393, 394], "previou": [2, 9, 14, 41, 49, 54, 58, 62, 63, 65, 71, 76, 93, 111, 155, 156, 161, 162, 165, 169, 171, 175, 178, 238, 298, 299, 300, 301, 305, 306, 383, 386, 459, 479], "previous": [3, 23, 97, 115, 122, 149, 152, 156, 158, 161, 168, 178, 193, 227], "price": [64, 173], "primal": 175, "primari": [79, 176, 336, 349, 471], "primarili": 99, "primat": 66, "prime": [69, 120], "primer": [179, 495], "princip": [198, 274, 378], "principl": [97, 165, 168, 172, 174, 181, 302, 495], "print": [2, 3, 4, 6, 9, 10, 11, 15, 16, 18, 20, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 62, 67, 68, 69, 70, 71, 74, 76, 80, 84, 85, 88, 90, 91, 92, 93, 94, 97, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 122, 168, 176, 183, 186, 236, 244, 305, 306, 336, 349, 361], "print_changed_onli": 188, "prior": [28, 45, 48, 54, 58, 65, 90, 118, 120, 154, 161, 162, 174, 177, 233, 235, 254, 281, 298, 299, 303, 304, 336, 349, 382, 384, 385, 387, 433, 447, 452, 479, 494], "priori": 48, "prioriti": [184, 186, 288], "privat": [129, 131, 132, 158, 161], "prni": [120, 174, 198, 246], "prob": [21, 250, 251, 253, 440, 445], "probabilist": [8, 27, 46, 51, 59, 98, 118, 120, 130, 131, 146, 157, 161, 164, 181, 187, 188, 204, 212, 214, 220, 224, 234, 245, 247, 249, 250, 251, 252, 253, 255, 263, 267, 361, 380, 385, 410, 429, 430, 434, 440, 444, 445, 446, 447, 452, 453, 465, 469, 479, 492, 494, 495], "probabilit": 253, "probabl": [6, 11, 21, 31, 32, 39, 43, 61, 65, 76, 78, 80, 93, 163, 173, 175, 178, 181, 183, 184, 212, 215, 223, 250, 251, 281], "probe": [65, 67, 112, 172, 181], "probe_funct": 238, "problem": [3, 6, 31, 33, 39, 93, 120, 168, 169, 170, 173, 174, 175, 176, 178, 181, 183, 184, 238, 303, 304, 306, 323, 326, 327, 328, 329, 351, 397], "problemat": 65, "proce": [40, 55, 64, 122], "procedur": [6, 31, 75, 76, 78, 83, 86, 102, 163, 168, 173, 178, 180, 181, 195, 198, 272, 335, 351, 397, 473, 488], "proceed": [120, 173, 177, 183, 194, 198, 228, 255, 274, 302, 378], "process": [15, 16, 32, 36, 39, 42, 50, 53, 62, 90, 93, 100, 120, 121, 122, 134, 161, 163, 166, 167, 168, 171, 175, 176, 178, 180, 181, 183, 184, 186, 187, 188, 194, 198, 203, 204, 213, 214, 220, 235, 252, 267, 268, 272, 298, 299, 300, 301, 303, 304, 305, 306, 336, 349, 354, 355, 360, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 459, 460, 461, 467, 468, 473], "process_mask": [36, 44, 140, 161], "process_mask_img": [36, 44, 173, 302], "processor": [97, 171], "produc": [14, 24, 46, 59, 62, 70, 78, 99, 105, 118, 156, 158, 161, 178, 181, 188, 263, 296, 378, 380, 381, 382, 383, 384, 385, 386, 387, 410, 447, 461, 477, 492, 494], "product": [23, 55, 78, 115, 175], "profil": [6, 175, 176, 323, 327], "prognosi": [172, 183], "program": [175, 492], "progress": [36, 42, 102, 105, 136, 161, 336], "prohibit": 175, "project": [0, 8, 9, 15, 23, 24, 27, 42, 58, 74, 108, 111, 113, 115, 116, 118, 120, 139, 141, 143, 151, 155, 156, 161, 175, 177, 182, 193, 196, 198, 201, 204, 222, 223, 224, 242, 247, 274, 281, 287, 305, 306, 354, 401, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 439, 442, 444, 448, 449, 450, 451, 452, 453, 456, 473, 477, 492, 494], "projector": [156, 161, 426], "promis": [120, 173], "promot": [169, 170, 184], "prompt": 493, "pronounc": [432, 445, 446, 447, 454], "proper": [3, 34, 156, 161, 175, 253, 254, 493], "properli": [133, 161, 173, 188, 434, 439], "properti": [49, 69, 171, 175, 178, 181, 188, 230, 312, 324, 336, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "proport": [6, 49, 51, 68, 73, 81, 98, 118, 166, 178, 180, 181, 272, 328, 331, 349, 443, 447, 452, 494], "proportion": 178, "proportion_true_discoveries_img": [75, 331], "propos": [66, 99, 176, 177, 184, 195, 201, 391], "protocol": [71, 181, 200, 272], "proton": [214, 267], "prototyp": [176, 233], "prove": [175, 188], "provid": [3, 5, 6, 9, 29, 30, 32, 33, 34, 35, 36, 44, 47, 48, 49, 52, 54, 56, 62, 65, 66, 69, 70, 74, 75, 76, 78, 79, 83, 88, 90, 91, 93, 97, 100, 105, 111, 112, 113, 116, 121, 122, 123, 131, 132, 136, 144, 147, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 165, 167, 168, 175, 176, 177, 178, 180, 181, 182, 183, 184, 186, 188, 193, 194, 195, 204, 212, 213, 223, 226, 228, 230, 232, 233, 234, 235, 236, 238, 241, 242, 244, 245, 246, 247, 254, 255, 258, 266, 277, 281, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 323, 327, 336, 337, 338, 342, 343, 348, 349, 351, 354, 360, 369, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 431, 433, 436, 443, 445, 449, 458, 459, 460, 461, 462, 469, 473, 477, 479, 492, 493], "proximal_oper": [132, 161], "pruett": [58, 120, 205, 260], "pruim": [120, 377, 378], "psc": [132, 149, 153, 161, 381, 382, 383, 384, 385, 386, 387, 473], "pseudo": [76, 105, 305, 306, 328, 351, 353, 459], "pseudoinvers": 327, "psychiatr": 181, "psychiatri": [23, 115, 120, 212, 222, 287], "psychoinformat": 0, "psycholog": 183, "psychologi": 0, "psychophysiolog": 99, "public": [0, 2, 62, 99, 123, 129, 131, 132, 156, 158, 161, 176, 181, 221, 281], "publicli": 166, "publish": [0, 229, 277, 360, 474], "pubm": [48, 120, 167, 169, 198, 244, 305, 377, 378], "pubmedcentr": [120, 198, 377, 378], "pubu": 58, "pull": [136, 158, 161, 181, 183], "pure": [97, 102, 303, 304], "purpl": 68, "purple_green": 492, "purpos": [62, 67, 69, 70, 78, 100, 108, 112, 113, 122, 175, 180, 188, 193, 196, 200, 203, 204, 220, 224, 229, 263, 336, 349, 399, 471, 492], "push": [175, 176, 184], "put": [53, 54, 69, 70, 97, 127, 161, 176, 234, 298, 299, 300, 301, 305, 306, 336, 381, 382, 383, 384, 385, 386, 387, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 433, 459, 461, 473, 479], "pval": 397, "pval_left": [108, 113], "pval_right": [108, 113], "pvals_anova": [105, 106], "pvals_bonferroni": 102, "px": [326, 328, 329], "py": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 130, 131, 149, 154, 155, 156, 158, 161, 176, 184, 188, 494], "pylab": [40, 444], "pymvpa": [4, 38, 213, 266], "pyplot": [5, 6, 11, 12, 15, 18, 24, 25, 30, 32, 34, 35, 38, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 63, 64, 65, 66, 68, 71, 74, 77, 78, 79, 83, 90, 93, 98, 99, 100, 102, 105, 106, 116, 163, 187, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 451, 452, 492], "pyproject": [130, 161, 176, 184, 493], "pytest": [176, 184, 493], "python": [1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 118, 122, 127, 129, 130, 132, 141, 147, 148, 149, 154, 156, 161, 168, 175, 176, 182, 183, 184, 365, 493, 494], "python2": [146, 147, 148, 149, 161], "python3": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 61, 65, 69, 70, 71, 74, 76, 77, 78, 83, 85, 88, 90, 91, 92, 94, 97, 102, 103, 104, 105, 106, 111, 116, 147, 149, 161, 176, 493], "pythoncvers": 184, "pythonvers": 184, "q": [120, 162, 178, 184, 235, 332, 336, 349, 352, 471], "qform_cod": [56, 90, 101], "qi": [303, 304], "qingyang": [23, 115, 120, 222, 287], "qoffset_i": [56, 90, 101], "qoffset_x": [56, 90, 101], "qoffset_z": [56, 90, 101], "quadrat": 377, "qualit": [141, 161], "qualiti": [11, 62, 68, 76, 105, 120, 146, 161, 176, 177, 178, 184, 188, 194, 196, 242, 274, 381, 384, 433, 459], "quality_check": 242, "quantif": [336, 345], "quantifi": 184, "quantil": 178, "quantiti": [175, 324], "quatern_b": [56, 90, 101], "quatern_c": [56, 90, 101], "quatern_d": [56, 90, 101], "quayl": [69, 120], "quebec": 0, "queen": 0, "queri": [107, 277, 279, 297], "question": [3, 51, 64, 65, 98, 165, 183, 184, 188, 196, 263, 493], "quick": [99, 183], "quicker": [165, 176], "quickli": [4, 33, 61, 62, 70, 74, 162, 165, 175, 176, 184], "quickstart": 182, "quinn": [120, 212], "quirion": [0, 143, 161], "quit": [3, 6, 65, 166, 175, 200, 272], "quot": 90, "quotient": 196, "qu\u00e9bec": 0, "r": [2, 4, 9, 14, 15, 24, 30, 34, 40, 41, 47, 51, 56, 58, 69, 90, 93, 101, 102, 111, 120, 131, 149, 156, 161, 162, 163, 177, 184, 201, 204, 205, 212, 220, 226, 228, 232, 242, 247, 252, 254, 255, 258, 260, 264, 282, 303, 304, 336, 349, 354, 376, 377, 378, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 432, 434, 437, 439, 440, 443, 445, 446, 447, 471, 473, 492], "r2": [44, 153, 161, 299, 301, 328], "r2_score": [40, 304], "r2hvk": [224, 253], "r_": 41, "r_squar": [68, 156, 161, 328, 336, 349], "ra": [123, 368], "raamana": [0, 120, 145, 161, 168], "rachakonda": [120, 197, 245], "rachlin": [23, 115, 120, 222, 287], "radio": 372, "radiolog": [16, 131, 161, 398, 400, 401, 432, 434, 437, 439, 440, 443, 445, 446, 447], "radiu": [9, 36, 37, 44, 55, 58, 61, 99, 111, 136, 161, 172, 177, 181, 188, 227, 262, 302, 387, 477, 479, 495], "radius_neighbors_graph": 37, "rahim": [0, 51, 98, 120, 124, 128, 134, 143, 149, 161], "rahul": [0, 120, 131, 161, 212], "rai": [120, 228, 255], "raichl": [120, 378], "raimon": [120, 377, 378], "rainei": [120, 231, 257], "rainer": [120, 173, 183, 302], "rais": [5, 12, 24, 32, 38, 44, 66, 77, 90, 93, 98, 105, 106, 116, 129, 130, 131, 132, 136, 143, 145, 146, 149, 156, 158, 161, 186, 234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 339, 343, 349, 351, 352, 355, 364, 368, 369, 380, 381, 382, 383, 384, 385, 386, 387, 393, 458, 459, 460, 461, 493], "rakuten": 0, "ram": 43, "ramnani": [120, 194, 274], "ramsei": [120, 162], "ran": 42, "randi": [120, 198, 212, 223, 226, 232, 254, 258, 281], "randn": [44, 63], "random": [3, 40, 41, 44, 51, 55, 63, 97, 98, 102, 116, 120, 141, 153, 161, 165, 166, 167, 168, 175, 176, 201, 247, 305, 306, 326, 328, 329, 336, 345, 351, 397, 458, 459, 461, 463], "random_st": [33, 36, 42, 43, 44, 48, 49, 50, 51, 91, 98, 103, 104, 158, 161, 166, 298, 300, 305, 306, 336, 345, 351, 397, 458, 459], "randomized_svd": 48, "randomli": [21, 173], "randomst": [116, 305, 306, 336, 345, 351, 397, 458, 459], "rang": [9, 14, 23, 41, 44, 47, 49, 53, 55, 57, 62, 66, 68, 77, 78, 79, 90, 94, 99, 102, 105, 111, 115, 139, 143, 153, 161, 175, 176, 198, 204, 235, 238, 249, 353, 373, 439, 442, 447, 451, 453, 454, 455, 457], "ranjit": [23, 115, 120, 222, 287], "rank": [159, 161, 173, 326, 327, 328, 329, 373, 397], "raphael": [0, 129, 153, 154, 155, 156, 157, 158, 161], "raphson": 175, "rapid": [99, 120, 216], "rapidli": 175, "raquel": [56, 120, 377, 378], "rare": 175, "rarr": [122, 188], "rasero": [0, 154, 161], "rastko": [56, 120, 377, 378], "rate": [3, 6, 65, 80, 136, 161, 175, 178, 181, 188, 229, 331, 351], "rater": 242, "rather": [15, 54, 65, 93, 99, 123, 139, 141, 143, 145, 149, 154, 156, 161, 162, 175, 186, 187, 220, 235, 244, 277, 279, 305, 306, 351, 382, 385, 470, 479], "ratio": [70, 93, 145, 161, 181, 263, 303, 305, 306, 459, 461], "ratio_n_voxel": [50, 166, 461], "rational": 178, "raut": [120, 227, 262], "ravel": [38, 41, 43, 44, 102, 105, 106], "ravi": [120, 197, 245], "raw": [80, 91, 100, 108, 113, 153, 161, 168, 186, 188, 203, 204, 218, 249, 298, 299, 300, 301, 305, 306, 383, 386, 440, 447, 459, 469], "raw_valu": 40, "rc": [120, 214, 267, 292], "rdbu_r": [42, 44, 102, 444], "rdpu": 40, "re": [2, 6, 21, 23, 40, 64, 65, 67, 69, 83, 115, 123, 155, 161, 176, 277, 289, 290, 291, 292, 293, 294, 326, 328, 329, 339, 462], "reach": [53, 175, 176, 178, 183, 277, 377], "reaction": 181, "read": [4, 23, 37, 44, 65, 67, 76, 80, 100, 103, 105, 107, 112, 115, 120, 123, 152, 161, 174, 176, 182, 183, 200, 216, 221, 270, 271, 272, 388], "read_csv": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 93, 97, 102, 122, 186], "read_tabl": [6, 64, 65, 67, 68, 69, 112], "readabl": [65, 130, 161], "reader": [65, 183, 495], "readi": [61, 74, 122, 140, 161, 167, 176, 184], "readili": [163, 168, 171, 183, 186, 187, 461], "readm": [152, 161, 203], "real": [40, 168, 173, 175, 178, 186, 188], "real_timeseri": 68, "realign": [69, 216, 230, 275], "realist": [120, 195, 263, 448, 450, 451, 457], "realli": [3, 68, 147, 161, 168, 378], "realm": 93, "reason": [31, 65, 123, 169, 171, 173, 175, 176, 178, 184, 477], "reassign": 458, "reassur": 65, "rebecca": [58, 120, 203, 205, 260, 263], "rec": [248, 260, 261, 262, 339], "recal": [41, 298, 300], "recall_scor": 41, "recap": [2, 4], "recapitul": 227, "recarrai": [156, 161, 242, 248, 249, 260, 261, 262, 270, 271, 272, 281], "recast": 188, "receiv": [68, 99, 168, 181, 441], "recent": [9, 111, 140, 143, 144, 146, 156, 161, 167, 184], "recip": 187, "recognit": [0, 3, 28, 30, 45, 49, 69, 96, 109, 118, 120, 130, 161, 171, 173, 174, 182, 183, 198, 246, 266, 300, 302, 359, 361, 364, 366, 367, 380, 386, 396, 397, 425, 440, 444, 447, 452, 494], "recogniz": 176, "recommend": [24, 88, 91, 99, 103, 129, 147, 148, 149, 154, 156, 158, 161, 168, 173, 178, 183, 186, 188, 377, 461, 473, 477, 479, 493], "recomput": [65, 97, 173, 333], "reconstruct": [23, 28, 40, 45, 115, 118, 120, 188, 202, 219, 234, 241, 276, 305, 306, 380, 383, 386, 452, 467, 468, 494], "reconstructed_img": [305, 306], "record": [33, 40, 65, 168, 178, 181], "recov": [44, 58, 142, 161, 162], "recoveri": [120, 305], "recruit": [120, 183], "rectangl": [18, 40, 49, 83], "recurs": [44, 49, 97, 120, 149, 161, 165, 171, 181, 182, 459, 460, 466], "recursive_neighbor_agglomer": [49, 129, 161], "red": [14, 15, 18, 40, 51, 133, 147, 161, 177, 178, 181, 492], "reddi": [0, 120, 127, 134, 136, 139, 143, 144, 145, 146, 149, 153, 161, 168], "redirect": 184, "reduc": [16, 29, 33, 34, 44, 49, 65, 78, 86, 93, 99, 145, 146, 149, 153, 161, 170, 174, 175, 176, 181, 188, 198, 236, 281, 300, 301, 305, 306, 377, 378, 381, 384, 448, 450, 451, 455, 457, 458, 459, 460, 464], "reduce_confound": [56, 263], "reduced_confound": 56, "reducedconfounds_regressor": [47, 52, 53, 55, 56, 58], "reduct": [172, 306, 459, 495], "reduction_ratio": 306, "redund": [149, 161, 176], "ree": [6, 229], "rees": [120, 228, 255], "ref": [54, 90, 479], "ref_img": 441, "ref_label": [62, 441], "ref_niimg": [101, 367], "refactor": [130, 131, 132, 140, 154, 156, 158, 159, 161, 184], "refer": [10, 19, 46, 59, 65, 67, 77, 92, 93, 106, 112, 118, 120, 121, 122, 129, 130, 131, 134, 139, 147, 154, 156, 157, 158, 161, 164, 172, 176, 177, 178, 180, 186, 187, 188, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 492, 494, 495], "referenc": 177, "refin": [53, 57, 58, 236], "refit": 98, "reflect": [51, 100, 162, 176, 178, 198, 242, 246, 445, 446], "reformat": [78, 130, 161], "refresh": [136, 161], "reg_i": 343, "reg_nam": 338, "regard": [63, 152, 161, 174, 268, 292, 378], "regardless": [277, 279, 303], "regim": 49, "region": [6, 10, 15, 16, 19, 23, 40, 42, 43, 44, 46, 48, 49, 52, 55, 56, 58, 59, 65, 68, 69, 82, 95, 98, 115, 118, 120, 129, 131, 133, 134, 138, 140, 141, 144, 149, 152, 154, 156, 161, 162, 164, 167, 168, 174, 177, 178, 181, 183, 185, 187, 195, 198, 201, 204, 205, 212, 213, 215, 218, 220, 224, 227, 232, 234, 242, 244, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 263, 266, 275, 278, 305, 306, 317, 318, 359, 361, 364, 366, 367, 371, 373, 378, 380, 381, 382, 384, 385, 387, 410, 428, 429, 430, 431, 432, 434, 437, 444, 445, 446, 447, 449, 450, 452, 453, 469, 479, 492, 494, 495], "region_atlas_": 384, "region_coord": [51, 52, 54, 98, 138, 161, 252], "region_extractor": [85, 156, 161], "region_id": [133, 161], "region_ids_": 384, "region_label": 85, "region_labels_min_s": 85, "region_labels_not_diag": 85, "region_names_": [133, 161, 384], "region_sign": [380, 381, 382, 383, 384, 385, 386, 387, 459, 461, 465, 468], "region_t": 53, "regionextractor": [50, 86, 134, 136, 142, 147, 161, 166, 462, 463], "regions_dict": [9, 111], "regions_extracted_img": [50, 166, 463], "regions_img": [50, 86, 166], "regions_img_": [50, 86, 166, 461], "regions_index": [50, 166], "regions_indic": [9, 111], "regions_indices_network3": 86, "regions_indices_of_map3": [50, 166], "regions_percentile_img": 87, "regions_value_img": 87, "regist": [178, 194, 198, 212, 246], "registr": [120, 163, 178, 198, 214, 370, 492], "regress": [26, 30, 31, 39, 40, 44, 55, 56, 120, 122, 131, 136, 146, 152, 153, 154, 158, 161, 163, 168, 172, 173, 174, 176, 177, 178, 181, 194, 198, 242, 298, 299, 300, 301, 304, 306, 323, 328, 329, 336, 349, 377, 378, 381, 382, 383, 384, 385, 386, 387, 473, 495], "regression_result": 332, "regressionresult": [158, 161, 323, 327, 332, 336, 345], "regressor": [39, 43, 56, 61, 62, 63, 65, 99, 100, 105, 108, 113, 129, 152, 153, 157, 161, 163, 169, 177, 274, 299, 301, 304, 332, 336, 338, 343, 351, 377, 378, 397], "regul": 194, "regular": [3, 31, 39, 44, 56, 65, 90, 93, 101, 120, 123, 152, 161, 168, 169, 172, 174, 175, 181, 182, 183, 187, 235, 236, 238, 300, 301, 303, 304, 364, 493, 495], "regularli": 477, "reho": 242, "reilli": [120, 194, 274], "reiner": [0, 131, 161], "reining": [0, 149, 161], "reintroduc": [120, 354, 473], "reiss": [23, 115, 120, 222, 287], "reject": [178, 181], "rel": [40, 49, 58, 64, 65, 90, 176, 178, 181, 184, 298, 299, 300, 301, 302, 303, 304, 336, 338, 343, 358, 453, 455, 457, 479], "relabel": [99, 462], "relabeled_yeo_atla": 85, "relat": [39, 46, 49, 50, 63, 64, 65, 66, 67, 69, 80, 99, 106, 112, 118, 120, 123, 140, 141, 161, 163, 164, 166, 168, 169, 172, 175, 176, 181, 182, 183, 184, 188, 217, 234, 263, 268, 289, 290, 293, 305, 306, 324, 336, 360, 374, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 459, 461, 474, 493, 495], "relationship": [40, 42, 74, 173, 180, 182, 183, 194, 274, 397], "relative_to": [62, 74, 113], "relax": [131, 161, 214], "relaxometri": 267, "releas": [26, 83, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 194, 198, 201, 246, 254, 267, 268, 274, 287, 354], "relev": [29, 34, 49, 56, 65, 67, 104, 112, 123, 154, 158, 161, 168, 169, 175, 176, 184, 187, 188, 234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 351, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 397, 458, 459, 460, 461], "reli": [0, 6, 30, 65, 91, 93, 131, 132, 139, 155, 161, 165, 175, 178, 181, 186, 268, 339, 477, 492], "reliabl": [56, 120, 146, 161, 178, 200, 272, 378], "remain": [2, 4, 30, 32, 40, 56, 88, 99, 101, 116, 132, 152, 161, 173, 176, 477], "remark": 178, "rememb": 492, "remi": [146, 161], "remot": [176, 277, 279], "remov": [6, 30, 32, 33, 35, 40, 41, 42, 76, 85, 88, 103, 104, 105, 106, 120, 122, 127, 129, 131, 132, 133, 136, 140, 141, 142, 144, 146, 147, 149, 151, 152, 154, 156, 159, 161, 169, 174, 175, 184, 185, 187, 198, 234, 259, 281, 283, 336, 352, 354, 358, 360, 371, 373, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 394, 397, 433, 445, 461, 462, 464, 465, 469, 472, 473, 474, 495], "rena": [120, 149, 161, 165, 170, 181, 182, 300, 301, 459, 466], "rena_clust": [49, 129, 161], "rena_labels_img": 49, "rena_parcel": 49, "renam": [129, 132, 142, 146, 161, 184], "render": [36, 49, 52, 53, 58, 62, 74, 76, 131, 133, 147, 161, 176, 411, 439, 441, 448, 450, 451, 453, 455, 456, 457], "renew": [136, 161], "renn": 0, "reorder": [56, 144, 161, 368, 428, 444], "reorgan": [156, 161, 176], "repeat": [6, 58, 65, 66, 168, 178, 229], "repetit": [3, 6, 33, 63, 69, 70, 101, 120, 145, 161, 178, 181, 206, 263, 268, 290, 293, 298, 299, 300, 301, 303, 304, 336, 339, 340, 341, 342, 346, 347, 348, 354, 381, 382, 383, 384, 385, 386, 387, 433, 459, 461, 473], "repetitiontim": 108, "replac": [3, 4, 30, 32, 35, 36, 40, 41, 42, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 68, 76, 78, 88, 90, 91, 93, 97, 98, 99, 102, 103, 104, 105, 106, 116, 122, 129, 130, 131, 140, 141, 146, 149, 152, 153, 154, 155, 156, 161, 171, 175, 176, 184, 281, 354, 371, 377, 388, 391, 473], "repli": 184, "replic": 198, "repo": [176, 184, 493], "repons": [213, 266], "report": [6, 49, 52, 53, 54, 56, 68, 88, 90, 91, 103, 120, 132, 133, 149, 154, 156, 158, 159, 161, 178, 179, 184, 188, 204, 231, 257, 331, 336, 349, 376, 381, 382, 383, 384, 385, 386, 387, 397, 448, 450, 451, 461, 484, 493], "report_dim": [336, 349, 471], "report_text": [336, 349, 471], "repositori": [2, 120, 121, 176, 181, 184, 186, 221, 267, 277, 279, 495], "repres": [6, 15, 20, 33, 35, 51, 52, 54, 55, 67, 75, 78, 93, 112, 120, 141, 153, 161, 162, 163, 166, 167, 176, 178, 180, 181, 186, 187, 188, 198, 204, 221, 242, 246, 249, 263, 291, 292, 294, 336, 349, 358, 369, 380, 381, 382, 383, 384, 385, 386, 387, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 429, 434, 439, 443, 461, 464, 471, 475, 477, 492], "represenet": 188, "represent": [3, 16, 31, 32, 33, 36, 38, 52, 53, 56, 58, 62, 74, 76, 83, 93, 97, 99, 104, 120, 122, 164, 167, 173, 181, 185, 187, 213, 227, 262, 266, 298, 299, 300, 301, 302, 303, 304, 305, 306, 336, 349, 354, 355, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 372, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 432, 433, 439, 440, 442, 445, 446, 447, 454, 455, 459, 461, 464, 465, 467, 468, 471, 477, 495], "reproduc": [3, 32, 40, 41, 48, 51, 71, 97, 99, 120, 182, 200, 272, 300, 301], "request": [33, 99, 136, 149, 161, 165, 175, 181, 194, 234, 235, 236, 249, 250, 251, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 351, 373, 374, 380, 381, 382, 383, 384, 385, 386, 387, 397, 426, 427, 454, 458, 459, 460, 461, 478, 479, 492, 493], "request_mock": 176, "requir": [9, 20, 36, 42, 47, 55, 63, 66, 67, 71, 74, 77, 92, 111, 112, 123, 134, 139, 141, 143, 152, 156, 157, 161, 163, 166, 171, 173, 175, 176, 178, 181, 183, 184, 186, 187, 188, 198, 236, 281, 352, 372, 377, 378, 382, 385, 387, 397, 461, 462, 492, 493], "rerun": [36, 49, 52, 53, 58, 62, 74, 76], "resampl": [3, 9, 11, 16, 29, 30, 32, 33, 34, 35, 36, 43, 48, 49, 52, 53, 54, 56, 65, 69, 74, 82, 90, 91, 95, 97, 103, 111, 118, 122, 130, 138, 139, 142, 143, 149, 153, 155, 156, 161, 185, 198, 216, 230, 277, 279, 281, 291, 292, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 349, 355, 359, 364, 366, 368, 369, 370, 381, 382, 383, 384, 385, 386, 389, 391, 392, 393, 394, 439, 440, 446, 447, 452, 454, 459, 464, 477, 479, 494, 495], "resample_img": [52, 54, 69, 83, 88, 92, 130, 143, 149, 158, 159, 161, 187, 188, 277, 305, 306, 336, 349, 368, 370, 383, 386, 389, 391, 392, 394, 459], "resample_to_img": [65, 74, 92, 138, 159, 161, 187, 188, 369], "resampled_affin": 92, "resampled_icbm_mask": 65, "resampled_shap": 92, "resampled_stat_img": 92, "resampling_interpol": [143, 161, 439, 440, 446, 447, 454], "resampling_target": [51, 53, 54, 90, 93, 98, 188, 381, 382, 384, 385, 479], "rescal": [6, 23, 33, 40, 79, 115, 130, 155, 161, 398, 400, 401, 436, 448, 450, 451, 457], "research": [0, 120, 181, 186, 188, 193, 194, 196, 198, 200, 203, 204, 212, 220, 223, 224, 263, 378], "resembl": 167, "reset": [83, 101], "reshap": [40, 41, 44, 50, 66, 76, 105, 132, 142, 161, 166, 234], "resid": [68, 158, 161, 377, 378], "residu": [60, 72, 118, 156, 161, 173, 179, 198, 284, 304, 323, 324, 327, 328, 329, 336, 349, 354, 355, 366, 371, 380, 387, 391, 425, 447, 470, 494, 495], "resili": 65, "resiz": [159, 161, 185, 187, 298, 299, 300, 301, 303, 304, 349, 366, 369, 389, 391, 392, 394, 453, 455, 456, 457, 459, 469, 495], "reslic": [391, 394], "resolut": [19, 21, 74, 75, 92, 103, 120, 122, 129, 130, 142, 154, 155, 161, 166, 185, 195, 198, 203, 204, 207, 208, 209, 210, 211, 224, 226, 244, 246, 249, 253, 254, 255, 263, 286, 289, 290, 291, 292, 293, 294, 331, 386, 390, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 442, 455, 461, 495], "resolution_mm": [21, 47, 249, 254], "resolv": [140, 150, 161], "reson": [0, 120, 178, 181, 193, 198, 212, 246, 272], "resort": [67, 112], "resourc": [0, 186, 224], "resp": 122, "respect": [3, 62, 101, 108, 113, 149, 158, 161, 162, 176, 178, 181, 184, 188, 260, 262, 298, 299, 300, 301, 336, 338, 339, 343, 349, 358, 369, 370, 461, 463], "respir": 65, "respond": 178, "respons": [6, 60, 63, 68, 69, 71, 72, 78, 79, 118, 156, 161, 168, 177, 178, 181, 183, 184, 213, 230, 273, 336, 338, 340, 341, 342, 343, 346, 348, 435, 436, 447, 494], "response_funct": 66, "rest": [2, 3, 6, 21, 23, 30, 32, 33, 35, 41, 48, 50, 51, 54, 55, 56, 62, 68, 70, 86, 88, 91, 97, 98, 99, 115, 120, 131, 137, 141, 161, 165, 166, 167, 171, 175, 176, 181, 183, 186, 193, 194, 196, 197, 198, 201, 205, 220, 222, 227, 228, 229, 233, 242, 243, 245, 246, 255, 274, 287, 297, 306, 375, 377, 378, 386, 444, 461, 479, 495], "rest_dataset": [48, 50, 53, 166], "restart": 305, "resting_st": 30, "restom": [120, 377, 378, 474], "restor": [130, 161], "restrict": [29, 30, 31, 88, 90, 93, 102, 146, 161, 168, 173, 188, 194, 242, 297], "restructur": 187, "restructuredtext": 176, "result": [3, 6, 14, 15, 23, 24, 30, 33, 34, 35, 36, 40, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 64, 65, 67, 69, 70, 71, 74, 76, 77, 78, 83, 85, 86, 87, 91, 92, 93, 94, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 112, 113, 115, 120, 121, 123, 130, 131, 133, 139, 146, 149, 152, 157, 158, 161, 162, 164, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 186, 187, 188, 193, 195, 200, 201, 204, 213, 219, 220, 242, 244, 254, 272, 277, 279, 286, 298, 299, 302, 325, 326, 328, 329, 330, 336, 345, 349, 351, 354, 364, 365, 366, 369, 376, 384, 385, 387, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 448, 450, 451, 455, 464, 465, 470, 477, 489, 492, 495], "result_img": [84, 101, 186, 365], "result_img_with_head": [101, 365], "resultfilt": [123, 277], "results_": 336, "resum": [243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 258, 263, 266, 267, 268, 272, 274, 275, 276, 281, 287], "retain": [70, 156, 161, 168, 169, 178, 234, 235, 236, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 377, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461, 464, 465], "retest": 120, "retinotop": 79, "retriev": [2, 20, 22, 44, 48, 89, 90, 91, 114, 120, 122, 156, 161, 162, 163, 168, 171, 182, 186, 188, 198, 212, 221, 258, 284, 285, 288, 377, 378, 426, 427], "return": [3, 4, 9, 11, 14, 15, 31, 33, 39, 40, 41, 44, 47, 56, 65, 66, 70, 79, 83, 93, 99, 107, 111, 116, 122, 123, 130, 131, 132, 138, 142, 149, 152, 154, 156, 157, 158, 161, 163, 168, 170, 173, 175, 176, 181, 183, 184, 186, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 317, 318, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 487, 492], "return_cod": 48, "return_count": 49, "return_dist": 49, "return_estim": 97, "return_index": 35, "return_invers": 51, "return_label_map": 470, "return_label_nam": 429, "return_masked_atla": [132, 161, 464], "return_offset": 358, "return_raw_data": 275, "return_z_scor": 333, "reus": 70, "reveal": [51, 100, 102, 173], "revers": [91, 142, 149, 161], "review": [149, 161, 173, 184, 194, 215], "revious": 69, "revis": 375, "rewamp": [127, 161], "reward": 262, "rework": [129, 136, 142, 149, 155, 161], "rewritten": 123, "rex": [120, 197, 245], "rf": [40, 66], "rf_model": 66, "rfe": [44, 97, 171], "rfe_svc": 97, "rfmri": [120, 194, 274], "rgb": [32, 456], "rgba": [449, 456], "rgbcmyk": [50, 166], "rh": 219, "rho": 323, "rich": 168, "richard": [99, 120], "richardson": [120, 203, 263], "rid": [336, 349], "ridg": [31, 40, 44, 116, 169, 170, 174, 298, 299, 300, 301], "ridge_classifi": [30, 169, 298, 300], "ridge_cv": 44, "ridge_regressor": [169, 299, 301], "ridgeclassifi": 37, "ridgeclassifiercv": [130, 161, 298, 299, 300, 301], "ridgecv": [44, 130, 161, 298, 299, 300, 301], "ridgwai": [102, 120, 397], "riemannian": 120, "right": [9, 12, 18, 20, 22, 25, 32, 40, 44, 50, 58, 64, 65, 67, 71, 75, 78, 79, 85, 93, 97, 108, 111, 112, 113, 114, 116, 139, 144, 149, 152, 154, 161, 165, 166, 172, 176, 183, 187, 202, 207, 208, 209, 210, 211, 219, 222, 242, 248, 250, 251, 256, 270, 272, 280, 286, 287, 300, 301, 315, 336, 349, 350, 368, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 432, 434, 435, 437, 439, 440, 442, 443, 444, 445, 446, 447, 448, 450, 451, 455, 471, 492, 495], "right_hemispher": [9, 111], "rigid": [63, 198], "rigor": 352, "ring": 472, "rint": 66, "riobueno": [120, 203, 263], "rise": 165, "risk": [6, 120, 183, 233], "rissman": [99, 120], "rivera": [120, 123, 221, 277, 279], "rm": 184, "rng": [43, 176], "roalf": [56, 120, 377, 378], "robert": [0, 120, 129, 130, 154, 161, 175, 197, 198, 214, 245, 267, 292], "roberto": [0, 120, 139, 149, 161, 228, 255], "robinson": [102, 120, 194, 274, 397], "robust": [3, 31, 39, 93, 120, 151, 161, 166, 168, 172, 181, 300, 301, 377, 378, 495], "roc": [168, 181], "roc_auc": [30, 32, 97, 171, 298, 300], "rochel": [23, 115, 120, 222, 287], "rockland": [23, 115, 120, 222, 287], "roelof": [0, 129, 130, 161], "roffman": [120, 226, 232, 254, 258], "roger": [120, 197, 207, 208, 209, 210, 211, 245, 286], "roi": [10, 17, 21, 23, 25, 28, 33, 45, 56, 58, 82, 85, 87, 90, 95, 98, 111, 115, 118, 120, 123, 131, 141, 149, 152, 161, 168, 183, 185, 201, 205, 225, 226, 227, 248, 254, 260, 261, 262, 266, 298, 308, 309, 359, 361, 364, 366, 367, 371, 372, 380, 384, 386, 437, 439, 446, 447, 449, 450, 452, 479, 492, 494, 495], "roi_img": [10, 68, 446], "roi_map": [22, 23, 111, 114, 115, 116, 132, 161, 308, 309, 449, 450], "roi_siz": 44, "rois_aal": 242, "rois_cc200": 242, "rois_cc400": 242, "rois_dosenbach160": 242, "rois_ez": 242, "rois_ho": 242, "rois_tt": 242, "rokem": [0, 134, 146, 161], "role": [6, 156, 161], "romuald": [146, 161], "ronald": [0, 124, 161], "rooij": [120, 377, 378], "room": 444, "root": [49, 175, 193, 234, 250, 251, 327, 377, 458, 459, 460], "rosa": [120, 198, 246], "rosen": [120, 202, 248], "rosenblatt": [75, 120, 331], "rot_i": 56, "rot_x": 56, "rot_z": 56, "rotat": [12, 32, 63, 83, 93, 188, 339, 377], "rotation_matrix": 83, "rothberg": [0, 143, 146, 161], "roti": 100, "rotx": 100, "rotz": 100, "rough": [298, 299, 300, 301, 303, 304, 305, 306, 336, 349, 355, 381, 382, 383, 384, 385, 386, 387, 459, 460, 461], "roughli": [40, 169, 176, 178, 198], "round": [49, 448, 451], "rout": [234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "routin": [65, 88, 186, 275, 492], "row": [3, 6, 40, 56, 65, 71, 97, 99, 123, 153, 161, 181, 277, 279, 326, 327, 328, 329, 336, 349, 350, 351, 408, 410, 413, 427, 432, 437, 440, 442, 444, 445, 446, 447, 458, 470, 477], "row_numb": 99, "ro\u00dfmanith": [0, 132, 161], "rprojector": [14, 402, 426], "rr": [22, 114], "rrid": 0, "rsn": [2, 21, 86, 141, 161, 197, 228, 245, 255], "rsn10": [228, 255], "rsn20": [228, 255], "rsn28": [21, 197, 245], "rsn70": [228, 255], "rsn_indic": [197, 245], "rsn_name": 197, "rsquared_statmap": [62, 74, 376], "rst": [129, 161, 176, 184], "rt": 229, "rtol": 358, "ru": [120, 226, 254], "ruben": [56, 120, 377, 378], "rudimentari": 30, "rugg": [69, 120], "rule": [128, 161, 168, 169, 176, 194, 298, 299, 300, 301], "run": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 71, 72, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 118, 122, 132, 136, 140, 154, 156, 158, 161, 162, 163, 165, 168, 169, 172, 173, 174, 175, 176, 177, 178, 183, 184, 186, 187, 188, 198, 206, 213, 219, 230, 236, 238, 265, 266, 272, 276, 284, 285, 305, 306, 333, 336, 339, 343, 352, 354, 355, 366, 369, 378, 386, 392, 394, 397, 432, 435, 436, 440, 447, 452, 458, 469, 470, 473, 478, 479, 492, 493, 494, 495], "run_face_mask": 102, "run_glm": [33, 67, 108, 154, 158, 161], "run_house_mask": 102, "run_img": [61, 100, 108, 113, 336], "run_label": [3, 29, 30, 32, 33, 97, 168], "run_mask": 102, "run_seri": 388, "run_target": 93, "runnabl": 176, "runner": [2, 3, 4, 6, 10, 11, 15, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 38, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 69, 70, 71, 74, 76, 83, 84, 85, 88, 90, 91, 93, 94, 99, 100, 101, 102, 104, 105, 108, 113, 115, 479], "runtim": [43, 158, 161, 176, 303, 304], "runtimeerror": [5, 12, 24, 38, 44, 66, 77, 90, 98, 105, 106, 116], "runtimewarn": [58, 76, 78, 116], "ruparel": [56, 120, 377, 378], "russel": [23, 56, 99, 115, 120, 123, 168, 183, 218, 221, 222, 275, 277, 279, 287, 328, 329, 377, 378], "rx": 63, "ry": 63, "ryan": [0, 120, 149, 161, 227, 262], "rz": 63, "r\u00e9mi": [0, 130, 131, 132, 133, 143, 159, 161], "s0028393211005070": [120, 218, 275], "s0031320311001439": [49, 120], "s01": [76, 105], "s0165168406001691": 120, "s0730725x09001696": [120, 198], "s0896627308009586": [40, 41, 120, 219, 276], "s0896627311002960": [120, 173], "s0920996405004998": [120, 212], "s1": 79, "s102": [120, 214, 267, 292], "s1053": [120, 202, 214, 248, 267, 292], "s1053811901909784": [120, 195, 244], "s1053811907003837": [120, 377, 378, 474], "s1053811909010167": 120, "s1053811909011525": 120, "s1053811910002697": [120, 198, 246], "s1053811910008542": [22, 23, 114, 115, 120, 202, 256], "s1053811910010062": [120, 198, 214, 267, 292], "s1053811910010086": [37, 120], "s1053811910011602": [120, 162], "s1053811912012487": [120, 174], "s1053811913002917": [120, 173], "s1053811913003340": [56, 120, 162, 163, 220, 252], "s1053811913009117": [120, 377], "s1053811914000913": [102, 120, 397], "s1053811915008745": [120, 200, 272], "s1053811916303871": [120, 433], "s1053811917308182": [120, 170, 300, 301], "s1053811919301594": [51, 98, 120], "s105381191930881x": [120, 227, 262], "s1053811998903950": [23, 115, 120, 202], "s1053811998903962": [23, 115, 120, 202], "s151": [120, 202, 248], "s2": 79, "s3": 62, "s500": [120, 194, 274], "sa": [216, 247], "sabb": [120, 264, 282], "sabuncu": [120, 226, 232, 254, 258], "sachin": [0, 158, 161], "saclai": [0, 176], "sadaghiani": [48, 120, 167, 305], "sadato": [40, 41, 120, 219, 276], "sadek": [120, 197, 245], "sadil": [0, 131, 161], "safe": [70, 101, 141, 161], "sage": [0, 158, 161], "sagit": 372, "sagitt": [14, 93, 336, 349, 406, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 434, 437, 439, 440, 443, 445, 446, 447, 471], "sai": [6, 64, 68, 97, 101, 123, 176, 178, 184, 326], "said": [49, 178], "sake": [65, 78, 105], "salat": [120, 202, 248], "salienc": [51, 262], "salimi": [120, 162, 194, 274], "salma": [0, 124, 127, 134, 136, 143, 146, 147, 161], "salo": [0, 129, 130, 131, 132, 153, 156, 157, 158, 161], "salt": 68, "sam": [0, 130, 161], "samanta": [0, 131, 161], "samantha": [23, 115, 120, 222, 287], "samara": [120, 166, 175, 235, 238, 461], "same": [2, 3, 6, 14, 15, 21, 23, 34, 37, 40, 41, 47, 49, 50, 55, 58, 63, 65, 67, 68, 69, 70, 71, 83, 85, 87, 93, 97, 99, 100, 102, 108, 112, 113, 115, 123, 131, 134, 141, 146, 152, 153, 154, 155, 156, 161, 162, 163, 166, 167, 168, 169, 173, 175, 176, 178, 180, 181, 184, 186, 187, 188, 206, 230, 234, 235, 236, 238, 250, 251, 259, 260, 262, 267, 268, 286, 298, 299, 300, 301, 303, 304, 305, 306, 336, 339, 349, 351, 354, 356, 365, 367, 369, 374, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 393, 395, 397, 403, 404, 405, 406, 407, 416, 417, 420, 421, 422, 423, 428, 432, 434, 437, 439, 440, 444, 445, 446, 447, 455, 458, 459, 462, 467, 468, 470, 471, 473], "sami": [0, 158, 161], "sampl": [3, 8, 23, 27, 31, 34, 36, 40, 49, 58, 63, 65, 67, 69, 73, 74, 76, 77, 80, 81, 83, 93, 100, 105, 108, 112, 113, 115, 118, 120, 122, 152, 154, 155, 159, 161, 163, 168, 173, 175, 177, 178, 180, 188, 193, 198, 204, 215, 222, 234, 235, 236, 238, 263, 272, 287, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 336, 337, 338, 340, 341, 342, 343, 346, 347, 348, 349, 351, 354, 358, 359, 365, 381, 382, 383, 384, 385, 386, 387, 396, 397, 409, 424, 433, 436, 439, 442, 451, 452, 458, 459, 460, 461, 472, 473, 474, 477, 490, 494], "sample_horizont": 79, "sample_mask": [33, 49, 52, 53, 56, 58, 65, 129, 131, 154, 156, 158, 159, 161, 318, 336, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 461, 473], "sample_point": 24, "sample_vert": 79, "sample_weight": [298, 299, 300, 301, 303, 304], "sampling_r": 472, "san": 0, "sandbox": 116, "sane": [303, 304], "sang": 120, "saniti": 188, "sanz": [0, 149, 161], "sarah": [120, 197, 245], "sarang": 120, "saroja": [23, 115, 120, 222, 287], "sass": [0, 156, 161], "sassenhagen": [0, 143, 161], "satisfi": [175, 184], "sato": [40, 41, 120, 219, 276], "satrajit": [120, 221, 277, 279], "satterthwait": [56, 120, 377, 378], "save": [3, 6, 9, 14, 21, 23, 29, 33, 41, 42, 43, 48, 49, 50, 51, 61, 65, 70, 71, 85, 90, 91, 93, 97, 98, 99, 103, 107, 111, 115, 123, 131, 133, 147, 156, 161, 166, 175, 186, 187, 188, 216, 277, 279, 303, 304, 312, 313, 314, 329, 336, 349, 376, 381, 382, 384, 385, 386, 387, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 469, 471, 495], "save_as_html": [33, 61, 62, 70, 74, 90, 91, 188, 453, 454, 455, 456, 457, 469, 471, 492], "save_glm_to_bid": [62, 74, 129, 133, 158, 161], "savefig": [9, 15, 41, 55, 61, 111, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 434, 437, 439, 440, 443, 445, 446, 447, 492], "savio": [0, 124, 161], "saw": 14, "sax": [120, 203, 263], "sayal": [0, 159, 161], "scalabl": [120, 170, 300, 301], "scalar": [100, 173, 188, 323, 324, 326, 327, 328, 329, 371, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 443], "scalarformatt": 49, "scale": [6, 15, 41, 49, 54, 61, 63, 66, 68, 69, 71, 93, 120, 123, 139, 146, 156, 161, 169, 173, 188, 198, 200, 219, 221, 246, 272, 277, 279, 291, 292, 294, 303, 304, 323, 326, 327, 328, 329, 331, 336, 344, 349, 351, 352, 381, 382, 383, 384, 385, 386, 387, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 458, 459, 460, 470, 471, 473, 477, 479, 495], "scale007": [198, 246], "scale012": [198, 246], "scale020": [198, 246], "scale036": [198, 246], "scale064": [198, 246], "scale122": [198, 246], "scale197": [198, 246], "scale325": [198, 246], "scale444": [198, 246], "scale_": 15, "scale_loc": [399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "scale_s": [15, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "scale_unit": [15, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "scalebar": [15, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 492], "scaling_axi": [33, 99, 156, 161, 336, 478], "scan": [6, 23, 33, 36, 55, 58, 63, 64, 65, 66, 93, 99, 115, 120, 154, 161, 165, 173, 181, 186, 196, 198, 212, 216, 229, 272, 305, 306, 336, 338, 343, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 433, 459, 461, 464, 465, 467, 473], "scanner": [65, 101, 178, 181, 377], "scap": 62, "scatter": [24, 93, 158, 161, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 443], "scenario": [65, 177, 178, 188], "schaefer": [120, 190, 254], "schaefer2018_400parcels_7networks_order_fslmni152_1mm": 479, "schaefer2018_localglob": [226, 254], "schaefer_2018": 479, "schemat": [401, 434, 439, 443], "scheme": [8, 27, 29, 33, 36, 37, 97, 118, 152, 161, 162, 168, 169, 171, 175, 236, 298, 299, 300, 301, 397, 451, 452, 477, 494], "schizophrenia": [120, 141, 161, 181, 212], "schlachter": [23, 115, 120, 222, 287], "schlaggar": [58, 120, 198, 205, 225, 227, 260, 261, 262, 377, 378], "school": [0, 223], "schouten": [3, 31, 32, 38, 97, 120, 213, 266], "schre": [120, 212], "schwartz": [120, 123, 124, 161, 168, 170, 200, 272, 300, 301], "schwarz": [120, 221, 277, 279], "scienc": [0, 3, 22, 23, 31, 32, 37, 38, 40, 41, 49, 51, 56, 58, 97, 98, 102, 114, 115, 120, 162, 163, 170, 173, 174, 183, 194, 195, 198, 200, 202, 205, 213, 214, 218, 219, 220, 222, 227, 228, 234, 244, 246, 252, 255, 256, 260, 262, 263, 266, 267, 272, 274, 275, 276, 287, 292, 300, 301, 302, 377, 378, 397, 433, 474, 495], "sciencedirect": [22, 23, 37, 40, 41, 49, 51, 56, 98, 102, 114, 115, 120, 162, 163, 170, 173, 174, 195, 198, 200, 202, 214, 218, 219, 220, 227, 244, 246, 252, 256, 262, 267, 272, 275, 276, 292, 300, 301, 377, 378, 397, 433, 474], "sciencemag": [3, 31, 32, 38, 58, 97, 120, 205, 213, 260, 266], "scientif": [120, 153, 156, 161, 176, 183, 193, 200, 215, 223, 224, 253, 264, 272, 282, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 437, 439, 440, 442, 446, 447, 448, 450, 451], "scientififc": 183, "scikit": [3, 34, 49, 93, 96, 102, 104, 109, 118, 121, 127, 129, 132, 134, 139, 141, 142, 143, 146, 149, 154, 156, 161, 162, 165, 168, 169, 170, 172, 173, 175, 176, 182, 183, 184, 266, 298, 299, 300, 301, 302, 317, 318, 361, 380, 381, 382, 383, 384, 385, 386, 387, 447, 459, 493, 494, 495], "scilifelab": 0, "scipi": [23, 44, 56, 62, 66, 75, 78, 93, 100, 103, 107, 108, 113, 115, 127, 129, 132, 139, 143, 144, 146, 149, 154, 156, 158, 161, 175, 187, 268, 290, 293, 363, 373, 389, 390, 391, 393, 394, 444, 472], "scissor": [30, 32, 33, 186], "scitkit": [52, 57, 58], "scl": 41, "scl_inter": [56, 90, 101], "scl_scope": 101, "scl_slope": [56, 90, 101], "score": [30, 32, 37, 41, 42, 44, 48, 51, 79, 97, 98, 102, 103, 105, 106, 107, 116, 133, 152, 153, 161, 168, 169, 171, 172, 174, 183, 236, 281, 298, 299, 300, 301, 302, 303, 304, 305, 306, 324, 349, 353, 373, 377, 381, 382, 383, 384, 385, 386, 387, 397, 433, 459, 461, 473, 495], "score_ch": 32, "score_func": 116, "score_map_img": 40, "score_mean": [30, 32], "score_orig_data": 397, "scoreatpercentil": [87, 103, 373], "scorer": [298, 299, 300, 301], "scorer_": [298, 299, 300, 301], "scores_": [36, 44, 173], "scores_std": [51, 98], "scorr_2level": [201, 247], "scorr_mean": [201, 247], "scott": [99, 120, 227, 262], "scr_001362": 0, "scrambl": [69, 93, 177, 230], "scrambledpix": [30, 32, 33, 93, 186], "scratch": 122, "screen": [32, 120, 174, 216, 298, 299, 300, 301, 303, 304], "screening_percentil": [29, 32, 33, 34, 42, 43, 116, 168, 298, 299, 300, 301, 303, 304], "screening_percentile_": [298, 299, 300, 301, 303, 304], "screening_percentile_rang": 34, "script": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 155, 161, 170, 176, 186, 187, 188, 201, 492, 493], "scrollabl": [133, 161], "scrub": [65, 129, 154, 156, 161, 163, 198, 336, 339, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 461, 473], "sd": [326, 328, 329, 330], "sdata": [120, 224, 253, 264, 282], "sdist": 184, "se": 374, "search": [37, 88, 130, 161, 176, 184, 236, 298, 299, 300, 301, 374], "search_light": [37, 302], "searchlight": [28, 44, 45, 118, 120, 140, 143, 146, 152, 161, 168, 172, 181, 182, 183, 266, 286, 359, 361, 364, 366, 367, 380, 386, 440, 447, 451, 452, 476, 477, 494, 495], "searchlight_img": 36, "searchlightifittedsearchlight": 36, "seattl": 0, "sebastian": 120, "sec": [51, 263], "second": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 120, 131, 159, 161, 165, 166, 174, 175, 176, 178, 179, 181, 188, 229, 269, 271, 272, 286, 298, 299, 300, 301, 303, 304, 307, 310, 316, 321, 322, 324, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 359, 365, 373, 376, 381, 382, 383, 384, 385, 386, 387, 397, 409, 410, 424, 433, 436, 439, 441, 447, 448, 449, 450, 451, 452, 457, 459, 461, 470, 471, 472, 473, 477, 489, 494, 495], "second_level": [74, 75, 76, 77, 78, 79, 80, 100, 158, 161, 180, 471], "second_level_contrast": [74, 76, 78, 336, 349, 351, 471], "second_level_input": [75, 78, 79, 100, 156, 158, 161, 349, 351], "second_level_model": [74, 75, 78, 80, 100], "second_level_model_pair": 79, "second_level_model_unpair": 79, "second_level_stat_typ": 349, "second_roi_data": 93, "second_roi_img": 93, "secondari": 176, "secondlevelmodel": [74, 75, 76, 78, 79, 80, 100, 132, 156, 161, 180, 336, 376, 471], "secondlevelmodelifittedsecondlevelmodel": [74, 76], "section": [2, 3, 4, 14, 39, 47, 48, 49, 54, 56, 68, 90, 93, 97, 99, 120, 121, 122, 130, 141, 146, 156, 161, 162, 163, 165, 166, 168, 169, 171, 173, 176, 178, 180, 184, 185, 188, 190, 223, 277, 281, 381, 382, 384, 385, 398, 428, 432, 434, 437, 439, 440, 443, 445, 446, 447, 458, 469, 479, 484, 485, 492], "see": [0, 6, 8, 9, 12, 13, 14, 15, 16, 20, 21, 22, 23, 26, 28, 30, 31, 34, 36, 39, 40, 41, 43, 46, 48, 50, 51, 52, 54, 55, 56, 60, 69, 70, 71, 73, 79, 82, 85, 88, 90, 93, 98, 99, 102, 103, 106, 107, 111, 114, 115, 118, 122, 123, 125, 131, 134, 140, 146, 147, 149, 153, 154, 156, 158, 161, 162, 163, 165, 166, 167, 168, 169, 171, 173, 174, 175, 176, 177, 178, 181, 184, 186, 188, 190, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 292, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 324, 326, 328, 329, 332, 336, 338, 343, 349, 354, 355, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 376, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 432, 433, 439, 440, 442, 445, 446, 447, 454, 455, 456, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 471, 472, 473, 477, 479, 484, 485, 492, 493], "seed": [8, 27, 46, 48, 59, 99, 110, 117, 118, 146, 158, 161, 177, 185, 256, 263, 286, 287, 300, 301, 309, 310, 316, 319, 320, 321, 322, 336, 343, 345, 380, 386, 387, 397, 410, 447, 450, 451, 452, 453, 456, 461, 463, 475, 479, 492, 494, 495], "seed_based_glm": [61, 478], "seed_mask": [55, 61, 99, 177], "seed_time_seri": [55, 61, 177], "seed_timeseri": [23, 115], "seed_to_voxel_correl": 55, "seed_to_voxel_correlations_fisher_z": 55, "seed_to_voxel_correlations_fisher_z_img": 55, "seed_to_voxel_correlations_img": 55, "seeds_": 387, "seek": [6, 76, 105, 167, 445], "seem": [65, 74, 97, 175], "seemingli": 168, "seen": [0, 3, 14, 41, 49, 122, 163, 165, 169, 171, 173, 178, 183, 184, 459, 492], "segal": [120, 197, 245], "segment": [23, 56, 115, 120, 166, 181, 198, 202, 212, 214, 220, 252, 258, 267, 281, 377, 461, 463, 477], "segment_half_width": 24, "segreg": [70, 120, 206], "seidman": [120, 202, 212, 248], "seismic": 111, "seitzman": [120, 149, 161, 190, 262], "select": [3, 6, 14, 15, 19, 20, 23, 29, 32, 33, 34, 35, 41, 42, 55, 56, 65, 75, 88, 93, 99, 105, 115, 120, 121, 131, 139, 140, 141, 143, 151, 152, 154, 156, 161, 163, 166, 169, 170, 171, 172, 173, 174, 175, 187, 188, 198, 219, 235, 236, 246, 263, 264, 274, 277, 279, 281, 283, 297, 298, 299, 300, 301, 303, 304, 349, 351, 361, 373, 377, 378, 439, 442, 445, 447, 448, 450, 451, 458, 459, 461, 477, 492, 495], "select_from_index": 62, "selected_volum": 2, "selectkbest": [35, 41, 116, 141, 161], "selectpercentil": [97, 141, 161], "self": [11, 48, 49, 93, 176, 234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 323, 326, 327, 328, 329, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "semant": [120, 154, 156, 161, 173], "semi": [175, 212], "semilogx": 49, "send": [176, 458, 460], "sender": 176, "sens": [104, 168, 183, 298, 299, 300, 301, 326, 328, 329, 401, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424], "sensibl": [34, 168, 171, 235, 238], "sensit": [6, 40, 48, 56, 120, 178, 181, 354, 378, 397, 473], "sensori": 178, "sensorimotor": 58, "sent": 444, "sentenc": [64, 65, 67, 70, 71, 80, 100, 112, 120, 206, 216, 272], "sentence_listen": [64, 65, 67, 112, 217], "sentence_read": [64, 65, 67, 112, 217], "seop": [0, 156, 161], "sep": [6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 71, 93, 102, 186, 398, 400, 401], "separ": [3, 34, 48, 50, 65, 70, 82, 87, 93, 95, 99, 118, 139, 156, 158, 161, 166, 167, 169, 173, 176, 178, 181, 184, 186, 187, 194, 241, 258, 366, 377, 398, 400, 401, 428, 444, 446, 452, 461, 462, 463, 494], "sepideh": [48, 120, 167, 305], "septemb": [120, 131, 140, 155, 161, 166, 461], "sepulcr": [120, 198, 226, 232, 254, 258], "sequenc": [58, 61, 65, 67, 78, 112, 131, 161, 168, 177, 181, 186, 188, 272, 298, 299, 300, 301, 326, 328, 329, 336, 349, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 448, 450, 451, 453, 471, 472, 477], "sequenti": [175, 186, 445], "sereno": [23, 115, 120, 202, 207, 208, 209, 210, 211, 286], "seri": [6, 33, 46, 47, 51, 56, 60, 65, 72, 91, 93, 94, 96, 109, 118, 120, 122, 129, 132, 136, 153, 157, 161, 162, 164, 166, 168, 173, 178, 179, 185, 186, 187, 198, 223, 228, 234, 269, 281, 282, 284, 287, 296, 305, 306, 323, 336, 339, 349, 351, 354, 355, 366, 371, 377, 380, 383, 384, 385, 386, 387, 388, 391, 410, 425, 433, 436, 447, 463, 464, 465, 470, 474, 479, 484, 494, 495], "serial": [133, 161, 175, 216], "seriou": 184, "serr": [71, 120, 200, 272], "serv": [153, 161, 176, 184, 204, 249, 263], "server": [176, 277, 279], "servic": 176, "servicesatlas": [214, 267], "session": [29, 122, 154, 156, 161, 168, 183, 213, 306, 339, 354, 374, 493], "session_error": [56, 90, 101], "session_target": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 93, 97, 102, 122, 186, 213, 266], "set": [3, 6, 11, 14, 15, 16, 21, 22, 28, 29, 30, 31, 33, 36, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 64, 65, 68, 69, 74, 78, 79, 80, 83, 88, 90, 92, 93, 94, 97, 98, 100, 101, 103, 114, 118, 120, 123, 129, 130, 131, 132, 139, 143, 149, 152, 153, 155, 156, 158, 159, 161, 162, 163, 166, 168, 170, 172, 175, 177, 178, 179, 180, 181, 182, 184, 186, 188, 195, 198, 219, 223, 227, 229, 234, 235, 236, 242, 248, 249, 260, 261, 262, 266, 270, 271, 272, 277, 279, 281, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 326, 328, 329, 335, 336, 338, 339, 343, 349, 350, 352, 353, 354, 358, 361, 366, 368, 369, 370, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 454, 455, 457, 458, 459, 460, 461, 463, 466, 471, 473, 477, 479, 492, 494, 495], "set_axis_bgcolor": [141, 161], "set_axisbelow": [51, 98], "set_config": [188, 234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "set_fit_request": [235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 381, 382, 383, 384, 385, 386, 459, 461], "set_index": 68, "set_inverse_transform_request": [234, 305, 306, 318, 381, 382, 384, 385, 387, 458, 459, 460, 461], "set_label_coord": 49, "set_major_formatt": [48, 49], "set_output": [234, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "set_param": [234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "set_score_request": [303, 304, 305, 306, 459], "set_size_inch": [40, 68, 116], "set_titl": [61, 63, 68, 77, 78, 79, 90, 99, 105], "set_transform_request": [234, 305, 306, 318, 380, 381, 382, 383, 384, 385, 386, 387, 459, 461], "set_xlabel": [31, 43, 68], "set_ylabel": [31, 43, 68, 74, 77], "set_ylim": 49, "setup": [61, 67, 108, 130, 157, 161, 180, 242, 243, 244, 245, 246, 247, 248, 252, 255, 256, 258, 266, 267, 275, 276, 281, 287, 461, 493], "setuptool": [130, 161], "sever": [29, 31, 34, 49, 51, 61, 62, 65, 70, 74, 85, 93, 98, 101, 103, 122, 130, 140, 146, 161, 162, 170, 172, 173, 175, 176, 178, 181, 184, 186, 187, 188, 201, 215, 227, 236, 336, 354, 365, 382, 392, 394, 395, 445, 459, 473, 479, 495], "sex": [74, 77, 120, 180, 196, 212, 242, 274, 287, 298, 299, 300, 301, 303, 304, 478], "sex_design": 74, "sex_stat": 74, "sf": 107, "sform": [3, 29, 30, 32, 33, 34, 35, 36, 97, 158, 161], "sform_cod": [56, 90, 101], "sfvnmac": [143, 146, 161], "shade": [22, 114, 448, 450, 451, 457], "shah": [0, 156, 161], "shalit": [120, 204, 249], "shall": 65, "shallow": 315, "shape": [2, 3, 4, 20, 23, 25, 40, 41, 43, 47, 49, 50, 51, 53, 54, 55, 56, 58, 61, 64, 65, 66, 67, 69, 70, 83, 90, 92, 93, 97, 99, 102, 103, 105, 106, 107, 108, 112, 115, 116, 122, 154, 155, 161, 163, 165, 166, 168, 171, 177, 178, 181, 183, 185, 188, 234, 235, 236, 238, 240, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 275, 281, 298, 299, 300, 301, 303, 304, 305, 306, 317, 318, 323, 324, 326, 327, 328, 329, 332, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 354, 355, 356, 359, 360, 361, 365, 366, 369, 370, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 434, 435, 443, 453, 456, 458, 459, 460, 461, 464, 465, 466, 467, 468, 473, 474, 495], "shaquanna": [23, 115, 120, 222, 287], "sharad": [23, 115, 120, 222, 287], "share": [100, 120, 123, 152, 161, 162, 167, 176, 186, 193, 194, 200, 201, 204, 221, 238, 247, 250, 251, 272, 277, 279], "sharex": 49, "sharp": [448, 450, 451, 492], "sharpen": 472, "shawn": [120, 231, 257], "shehzad": 120, "shell": [186, 297], "shift": [65, 152, 158, 161, 381, 382, 383, 384, 385, 386, 387, 473], "shinji": [120, 169], "shinohara": [56, 120, 377, 378], "ship": [4, 12, 93, 146, 161, 492], "shmelkov": [0, 124, 161], "shoe": [30, 32, 33, 34, 186], "short": [65, 99, 110, 117, 118, 123, 175, 176, 181, 226, 234, 253, 254, 257, 277, 278, 279, 280, 298, 307, 309, 316, 317, 318, 319, 320, 322, 444, 494], "shorten": [131, 158, 161], "shorter": [3, 65, 175, 377], "shortlog": [124, 125, 127, 128, 134, 136, 139, 161], "should": [4, 6, 14, 15, 32, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 64, 65, 66, 67, 68, 70, 78, 87, 88, 90, 91, 93, 97, 98, 99, 102, 103, 104, 105, 106, 112, 122, 123, 142, 143, 153, 156, 157, 161, 166, 167, 168, 169, 171, 175, 176, 178, 183, 184, 188, 229, 234, 235, 236, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 287, 288, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 333, 336, 338, 339, 343, 344, 349, 350, 352, 353, 354, 364, 365, 367, 370, 372, 373, 375, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 397, 398, 431, 432, 434, 437, 439, 440, 442, 445, 446, 447, 448, 449, 451, 455, 458, 459, 460, 461, 462, 463, 467, 469, 470, 471, 473, 479, 490, 492, 493], "shouldn": [99, 184, 244], "shout": [146, 161], "show": [2, 4, 6, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 118, 122, 132, 141, 147, 152, 154, 156, 159, 161, 162, 163, 166, 168, 169, 171, 173, 176, 178, 180, 187, 188, 213, 230, 266, 278, 295, 323, 336, 349, 408, 410, 411, 413, 415, 417, 419, 421, 423, 425, 449, 453, 456, 461, 471, 479, 492, 494], "showcas": [51, 60, 73, 75, 98, 110, 118, 165, 170, 176], "shown": [15, 21, 40, 54, 65, 68, 93, 123, 154, 161, 162, 167, 168, 177, 178, 255, 378, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 442, 443, 446, 453, 455, 457, 479], "shrunk": 234, "shuffl": [36, 37, 48, 300, 301], "sici": [120, 207, 208, 209, 210, 211, 231, 257, 286], "side": [50, 53, 63, 65, 71, 93, 102, 129, 153, 161, 173, 277, 324, 389, 392, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 433, 441, 442, 470, 471], "sidecar": 108, "sidti": [23, 115, 120, 222, 287], "siemen": [6, 229], "sig": 105, "sigma": [323, 326, 327, 328, 329], "sigman": [70, 120, 206], "sign": [9, 14, 23, 42, 102, 103, 111, 115, 130, 161, 173, 186, 194, 303, 304, 353, 373, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 439, 445, 453, 455, 457], "signal": [3, 6, 28, 43, 44, 45, 46, 48, 49, 50, 52, 55, 57, 59, 61, 65, 66, 68, 69, 70, 77, 82, 85, 93, 95, 99, 107, 118, 120, 128, 129, 130, 131, 132, 145, 147, 149, 153, 154, 158, 161, 162, 164, 165, 166, 167, 168, 170, 173, 175, 178, 181, 185, 187, 194, 198, 204, 234, 235, 236, 238, 242, 249, 250, 252, 260, 261, 263, 266, 274, 298, 299, 300, 301, 302, 303, 304, 305, 306, 317, 318, 336, 339, 349, 351, 354, 360, 361, 366, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 397, 429, 433, 434, 443, 444, 452, 453, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 471, 479, 494, 495], "signal_sc": [33, 68, 99, 156, 161, 336, 339, 478], "signals_to_img_label": [130, 161, 464, 468], "signals_to_img_map": [130, 161, 465, 467], "signatur": [147, 161, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477], "signed_neg_log_pv": [42, 102], "signed_neg_log_pvals_unmask": [42, 102], "signifi": [181, 298, 299, 300, 301], "signific": [34, 49, 65, 74, 79, 120, 168, 173, 175, 178, 181, 351, 397, 470], "significantli": [42, 65, 146, 161, 173, 175], "sigpro": 120, "sikka": [23, 115, 120, 222, 287], "silent": [147, 156, 161], "silva": [120, 197, 245], "simexp": [0, 492], "similar": [9, 23, 24, 30, 48, 55, 78, 93, 99, 100, 111, 115, 122, 134, 146, 147, 149, 156, 161, 162, 165, 167, 169, 170, 173, 180, 181, 188, 300, 301, 378], "similarli": [15, 55, 93, 186], "simon": [0, 56, 120, 146, 151, 161, 226, 228, 254, 255, 377, 378], "simpl": [3, 5, 25, 29, 31, 35, 37, 40, 47, 56, 60, 64, 69, 72, 74, 75, 76, 78, 79, 82, 83, 86, 88, 90, 93, 95, 97, 99, 100, 101, 118, 120, 122, 123, 139, 141, 146, 156, 161, 162, 163, 169, 171, 172, 175, 176, 177, 180, 181, 183, 187, 188, 213, 230, 234, 235, 236, 263, 265, 272, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 324, 327, 333, 336, 349, 361, 366, 378, 380, 381, 382, 383, 384, 385, 386, 387, 433, 446, 447, 452, 458, 459, 460, 461, 469, 478, 479, 494, 495], "simplefilt": [69, 103], "simpler": 51, "simpleregressionresult": [132, 158, 161, 336], "simplest": [4, 69, 97, 123, 171, 175, 492], "simpli": [3, 65, 66, 67, 70, 88, 100, 101, 103, 105, 108, 112, 113, 123, 178, 184, 188, 198, 246, 353, 365, 371, 440, 445, 446, 447], "simplic": [65, 67, 112, 168], "simplifi": [100, 108, 113, 122, 139, 149, 157, 161, 188, 270, 271], "simuilar": [132, 161], "simul": [28, 45, 46, 59, 63, 66, 99, 118, 159, 161, 164, 173, 236, 302, 396, 444, 452, 494, 495], "simultan": [48, 175, 238], "sin": [24, 83], "sinc": [14, 19, 33, 39, 58, 65, 70, 74, 76, 80, 100, 108, 113, 122, 129, 154, 161, 175, 178, 194, 234, 244, 250, 251, 259, 283, 324, 332, 339, 374, 375, 377, 384, 385, 397, 401, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 433, 464, 465, 469, 492], "singh": [0, 146, 161], "singl": [1, 3, 7, 14, 23, 30, 31, 46, 49, 59, 60, 64, 65, 66, 72, 76, 78, 85, 93, 99, 104, 115, 118, 120, 123, 127, 132, 152, 153, 154, 155, 158, 161, 162, 169, 173, 175, 176, 177, 183, 186, 188, 195, 217, 229, 244, 263, 277, 284, 285, 295, 298, 299, 300, 301, 326, 328, 329, 336, 343, 349, 351, 352, 355, 366, 369, 380, 381, 382, 383, 384, 385, 386, 387, 410, 432, 435, 436, 440, 442, 444, 445, 447, 452, 454, 459, 461, 470, 492, 494], "single_mni_imag": 361, "singleton": [49, 380, 381, 382, 383, 384, 385, 386, 387, 461], "singular": [77, 326, 328, 329, 360, 474], "siong": [37, 120], "site": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 61, 65, 69, 70, 71, 74, 76, 77, 78, 83, 85, 88, 90, 91, 92, 94, 97, 102, 103, 104, 105, 106, 111, 116, 193, 196, 242, 243], "sitek": [0, 130, 161], "sitter": [0, 131, 161], "situat": [15, 58, 162, 168, 169, 186, 371], "six": [41, 198], "size": [6, 9, 15, 22, 23, 26, 33, 40, 44, 48, 49, 53, 58, 62, 67, 76, 78, 79, 80, 83, 90, 93, 101, 102, 103, 105, 108, 111, 112, 114, 115, 116, 131, 133, 136, 146, 147, 149, 156, 161, 166, 173, 174, 175, 178, 198, 216, 274, 281, 336, 349, 351, 352, 373, 381, 382, 384, 385, 389, 392, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 443, 444, 448, 450, 451, 453, 456, 458, 459, 460, 461, 462, 463, 470, 471, 472, 477, 478, 479], "size_vert": [398, 400, 401], "sizeof_hdr": [56, 90, 101], "sizes_": [458, 460], "sketch": 44, "skim": 277, "skip": [38, 49, 56, 131, 161, 449, 452], "sklearn": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 48, 49, 51, 52, 53, 57, 58, 91, 93, 97, 98, 102, 103, 104, 105, 106, 116, 132, 146, 149, 153, 154, 161, 162, 168, 169, 171, 175, 188, 234, 235, 236, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 265, 266, 267, 269, 273, 277, 279, 284, 285, 286, 287, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 345, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "skull": [88, 267, 389, 390, 391, 393, 394], "skullstrip": [155, 161, 181, 292], "sled": [120, 195], "sleep": 0, "slice": [2, 3, 6, 9, 16, 36, 88, 93, 105, 111, 122, 130, 145, 152, 154, 161, 173, 186, 188, 197, 198, 229, 336, 339, 349, 361, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 440, 471, 495], "slice_cod": [56, 90, 101], "slice_dur": [56, 90, 101], "slice_end": [56, 90, 101], "slice_start": [56, 90, 101], "slice_time_ref": [33, 61, 65, 67, 69, 112, 130, 131, 161, 336, 339, 478], "slicer": [156, 161, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 492], "slight": [158, 161], "slightli": [23, 48, 49, 65, 83, 115, 121, 143, 161, 169, 234, 236, 369, 370], "slovakia": 0, "slow": [6, 36, 44, 65, 174, 175, 176, 188, 198, 492], "slower": [97, 171, 175, 369], "slowest": 175, "slowli": 175, "sluggish": 178, "sm": [120, 194, 274], "small": [6, 18, 49, 51, 58, 64, 85, 98, 102, 103, 120, 135, 137, 138, 161, 165, 166, 173, 175, 176, 183, 184, 302, 324, 354, 445, 446, 459, 462, 473, 477, 492], "small_meta_imag": 123, "smaller": [3, 6, 32, 80, 136, 146, 154, 158, 161, 165, 173, 174, 175, 178, 181, 186, 250, 251, 304, 352, 365, 373, 458], "smallest": 175, "smart": 458, "smith": [2, 21, 82, 93, 95, 102, 118, 120, 162, 181, 190, 194, 255, 274, 351, 361, 380, 385, 397, 431, 445, 447, 452, 461, 494], "smith2009": 21, "smith_2009": 2, "smith_bm10": 21, "smith_bm20": 21, "smith_bm70": 21, "smith_rsn10": 21, "smith_rsn20": 21, "smith_rsn70": 21, "smoller": [120, 226, 232, 254, 258], "smooth": [6, 29, 34, 42, 44, 49, 55, 68, 74, 80, 82, 93, 95, 100, 105, 118, 120, 142, 143, 161, 165, 167, 168, 169, 175, 181, 183, 185, 186, 198, 228, 263, 298, 299, 300, 301, 305, 306, 336, 349, 351, 366, 371, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 437, 448, 450, 451, 452, 458, 459, 461, 463, 494, 495], "smooth_anat_img": 4, "smooth_arrai": 463, "smooth_img": [4, 68, 93, 94, 103, 143, 149, 161, 186, 187, 188], "smooth_x": 44, "smootharomanonaggr_bold": [377, 378], "smoothed_img": [94, 186], "smoothen": 176, "smoother": 65, "smoothing_fwhm": [29, 33, 34, 35, 42, 49, 50, 52, 53, 54, 55, 56, 58, 62, 65, 70, 74, 75, 76, 78, 88, 90, 91, 97, 99, 100, 102, 104, 105, 106, 142, 161, 166, 168, 188, 298, 299, 300, 301, 305, 306, 336, 339, 349, 351, 381, 382, 383, 384, 385, 386, 387, 388, 459, 461, 463, 478, 479], "snapshot": 61, "snippet": 123, "snr": [44, 181, 354, 473], "snyder": [120, 198, 377, 378], "so": [3, 6, 10, 11, 14, 22, 33, 36, 40, 43, 49, 52, 65, 67, 68, 70, 71, 75, 78, 79, 80, 85, 88, 93, 99, 100, 101, 103, 108, 112, 113, 114, 123, 131, 154, 161, 173, 174, 175, 176, 178, 184, 186, 188, 194, 234, 235, 236, 244, 250, 251, 258, 277, 282, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 339, 349, 351, 374, 375, 380, 381, 382, 383, 384, 385, 386, 387, 397, 442, 448, 450, 451, 455, 457, 458, 459, 460, 461, 477], "sochat": [120, 123, 221, 277, 279], "social": [120, 203, 263], "socioeconom": 281, "soft": 181, "softwar": [0, 6, 67, 71, 101, 112, 178, 181, 376, 493], "solari": [75, 120, 331], "sole": [65, 123, 175, 317, 318, 381, 382, 383, 384, 385, 386], "solut": [6, 64, 65, 162, 163, 169, 174, 175, 183, 186, 226, 306], "solv": [31, 39, 175, 176, 183, 184, 306, 397], "solver": [39, 120, 174, 298, 300, 303, 304], "somatomotordors": 262, "somatomotorlater": 262, "some": [0, 3, 6, 14, 15, 30, 40, 41, 49, 56, 65, 66, 67, 69, 79, 83, 85, 97, 101, 103, 104, 112, 122, 123, 131, 139, 146, 152, 155, 156, 158, 161, 168, 169, 171, 173, 175, 176, 178, 180, 183, 184, 186, 187, 188, 226, 232, 233, 234, 235, 236, 242, 248, 250, 251, 253, 254, 257, 277, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 326, 336, 349, 352, 354, 376, 380, 381, 382, 383, 384, 385, 386, 387, 439, 440, 443, 446, 447, 454, 458, 459, 460, 461, 464, 470, 473, 492, 493], "some_high_valu": [42, 43], "someth": 65, "sometim": [58, 63, 65, 79, 123, 127, 131, 161, 168, 176, 181, 323, 327], "somewhat": 65, "son": [120, 328, 329], "song": [0, 156, 161], "soon": [37, 69, 120, 184], "sophi": [0, 130, 161], "sophist": [69, 97, 171], "sorri": 64, "sort": [12, 21, 30, 31, 35, 42, 43, 62, 74, 122, 154, 161, 176, 184, 186, 264, 283, 297, 349, 351, 364, 397], "sought": [175, 181], "sound": [40, 178], "sourav": [0, 146, 161], "sourc": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 118, 162, 163, 167, 175, 176, 184, 224, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 493], "source_affin": 83, "source_img": 370, "sourceid": [120, 328, 329], "southern": 0, "sp": 34, "sp1": 41, "sp2": 41, "sp3": 41, "space": [3, 6, 15, 22, 23, 28, 40, 45, 48, 51, 55, 60, 62, 65, 67, 72, 83, 98, 100, 108, 112, 113, 114, 115, 118, 122, 123, 130, 139, 141, 143, 146, 149, 154, 161, 163, 176, 177, 178, 180, 181, 188, 198, 202, 204, 205, 212, 215, 216, 225, 226, 227, 230, 232, 245, 247, 252, 254, 256, 258, 260, 261, 262, 277, 279, 281, 285, 287, 304, 305, 306, 336, 339, 343, 354, 355, 356, 366, 369, 380, 383, 386, 387, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 432, 433, 434, 437, 439, 440, 443, 445, 446, 447, 452, 453, 454, 456, 458, 460, 473, 477, 494], "space_label": [62, 339], "spacenet": [3, 139, 161, 168, 169, 170, 172, 181, 303, 304, 495], "spacenetclassifi": [174, 298, 299, 304], "spacenetregressor": [39, 43, 174, 303], "span": [53, 69, 178, 432, 445, 446, 447, 454], "spars": [30, 39, 40, 46, 48, 49, 57, 58, 59, 118, 120, 163, 164, 166, 167, 169, 174, 181, 182, 189, 220, 235, 236, 238, 252, 263, 303, 304, 305, 306, 380, 385, 430, 434, 444, 448, 450, 451, 452, 453, 461, 494, 495], "sparser": [69, 93, 167, 303, 304, 461, 463], "sparsifi": [136, 161], "sparsiti": [40, 48, 120, 134, 161, 162, 166, 167, 169, 170, 174, 175, 181, 220, 236, 238, 303, 304, 306, 461], "spatial": [3, 6, 31, 39, 43, 46, 49, 50, 54, 59, 67, 85, 93, 94, 97, 104, 108, 113, 118, 120, 130, 152, 156, 161, 165, 167, 168, 171, 172, 178, 181, 182, 185, 188, 194, 195, 198, 201, 213, 214, 216, 220, 226, 228, 244, 247, 252, 254, 263, 266, 274, 298, 299, 300, 301, 302, 303, 304, 305, 306, 336, 349, 351, 362, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 445, 447, 452, 459, 461, 463, 479, 494, 495], "spatial_pattern": 220, "spatialimag": [130, 161, 186, 357], "spatiotempor": [99, 120], "speaker": 206, "special": [123, 130, 149, 161, 176], "specif": [6, 14, 15, 16, 17, 30, 32, 33, 48, 49, 61, 62, 63, 64, 65, 67, 69, 75, 78, 79, 83, 93, 100, 108, 112, 113, 120, 121, 126, 132, 139, 152, 158, 161, 162, 165, 166, 167, 168, 169, 171, 173, 176, 178, 180, 181, 183, 184, 185, 188, 194, 198, 219, 230, 242, 264, 274, 279, 282, 283, 307, 324, 326, 328, 329, 339, 350, 354, 365, 374, 376, 382, 385, 387, 397, 429, 448, 449, 450, 451, 457, 461, 473, 475, 476, 477, 492, 495], "specifi": [9, 14, 15, 32, 56, 61, 62, 65, 67, 69, 70, 74, 77, 78, 79, 80, 83, 88, 93, 94, 100, 101, 107, 108, 111, 112, 113, 123, 128, 131, 132, 133, 143, 146, 147, 149, 152, 153, 154, 155, 156, 158, 161, 162, 163, 173, 175, 177, 178, 184, 186, 187, 188, 204, 220, 250, 251, 255, 277, 278, 280, 282, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 303, 304, 305, 306, 326, 328, 329, 332, 336, 339, 343, 344, 345, 349, 350, 354, 358, 366, 369, 371, 377, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 394, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 437, 439, 440, 442, 444, 445, 446, 447, 448, 450, 451, 454, 455, 456, 457, 459, 461, 471, 472, 473, 477, 492], "speck": [120, 173], "spectral": [12, 23, 115, 120, 201, 247], "spectrum": 175, "speed": [3, 36, 37, 47, 76, 88, 97, 105, 120, 131, 161, 165, 171, 174, 175, 187, 188, 397, 458, 477], "speedup": 175, "spent": 175, "sphere": [15, 36, 37, 46, 55, 59, 118, 133, 151, 154, 161, 172, 188, 195, 207, 208, 209, 210, 211, 234, 260, 261, 263, 286, 307, 380, 387, 429, 434, 443, 444, 448, 449, 450, 451, 452, 453, 457, 469, 476, 477, 484, 492, 494, 495], "sphere_left": [207, 208, 209, 210, 211, 286], "sphere_right": [207, 208, 209, 210, 211, 286], "spheres_mask": 58, "spheric": 58, "sphinx": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 118, 134, 136, 140, 141, 143, 161, 176], "sphinx_gallery_conf": 176, "sphinx_gallery_dummy_imag": [166, 187], "spike": 65, "spline": [129, 161, 439, 440, 446, 447, 454, 473], "split": [3, 30, 31, 32, 34, 36, 39, 40, 41, 42, 43, 44, 49, 51, 85, 93, 98, 99, 152, 161, 166, 168, 170, 175, 176, 181, 187, 250, 251, 298, 299, 300, 301], "split_index": 41, "split_multi_scal": 41, "spm": [6, 10, 11, 36, 49, 61, 65, 66, 69, 78, 85, 93, 120, 157, 158, 161, 172, 177, 181, 186, 190, 195, 244, 284, 285, 336, 338, 343, 346, 347, 348, 365, 495], "spm12": 244, "spm5": 244, "spm8": [42, 74, 244, 281], "spm_auditori": [6, 284], "spm_dispersion_deriv": [336, 338, 343], "spm_hrf": [156, 161, 336, 338, 343], "spm_multimodal_fmri": [177, 285], "spm_time_deriv": [336, 338, 343], "spontan": [120, 220, 252], "sportingli": [146, 161], "spot": 65, "spread": [24, 97, 171, 388], "springer": [120, 162, 214, 220, 234, 252, 267], "spuriou": [65, 120, 166, 176, 198, 377, 378, 462], "sqrt": [107, 139, 161, 240, 241, 328, 329], "squar": [41, 43, 49, 65, 99, 102, 105, 120, 163, 169, 174, 175, 177, 198, 234, 304, 323, 326, 327, 328, 336, 349, 360, 376, 377, 382, 385, 397, 458, 459, 460, 474], "squeez": [305, 306, 459], "src_img": 441, "src_label": [62, 441], "srcha": [120, 328, 329], "sreen": 34, "sriniva": [120, 197, 245], "srow_i": [56, 90, 101], "srow_x": [56, 90, 101], "srow_z": [56, 90, 101], "srt": [120, 328, 329], "srub": 378, "ss": 123, "sse": [323, 327, 328, 329], "ssp": 206, "sst": 206, "sstdsp": 206, "sstssp": 206, "sstssp_minus_dstdsp": [70, 478], "st": 0, "stabil": [153, 161, 167, 198, 300, 301, 324], "stabl": [34, 48, 56, 97, 120, 129, 146, 161, 167, 169, 170, 175, 183, 246, 286, 298, 299, 300, 301, 305, 306, 377, 455, 477, 493], "stable_project": [226, 254], "stack": [40, 51, 58, 154, 161, 181, 241], "staff": [120, 174], "stage": [99, 120, 176, 183], "stall": 184, "stan": [326, 328, 329], "stand": [15, 44, 149, 161, 181, 187, 492], "standalon": [336, 349, 471], "standard": [3, 6, 9, 11, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 65, 67, 68, 71, 74, 88, 90, 91, 93, 97, 98, 100, 104, 105, 106, 108, 111, 112, 113, 114, 115, 116, 120, 122, 130, 131, 146, 149, 153, 155, 156, 161, 163, 166, 168, 169, 173, 176, 177, 178, 181, 186, 187, 188, 202, 207, 208, 209, 210, 211, 234, 256, 281, 298, 299, 300, 301, 303, 304, 305, 306, 318, 328, 329, 336, 338, 339, 343, 354, 374, 377, 381, 382, 383, 384, 385, 386, 387, 433, 459, 461, 473, 478, 479, 493], "standard_devi": [149, 161, 381, 384, 464], "standard_glm": 99, "standard_norm": [326, 328, 329], "standardis": 56, "standardize_confound": [33, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 88, 90, 91, 98, 156, 161, 166, 188, 305, 318, 381, 382, 383, 384, 385, 386, 387, 461, 473, 479], "standardize_sign": [130, 132, 161], "standardscal": [37, 39, 40, 41, 44, 116], "stanford": [0, 120, 174], "stanisla": [70, 71, 120, 183, 200, 206, 272], "stanlei": [23, 115, 120, 222, 287], "start": [2, 3, 6, 30, 40, 49, 56, 58, 67, 69, 83, 90, 93, 158, 161, 168, 175, 176, 181, 182, 184, 188, 229, 246, 247, 255, 257, 333, 336, 338, 343, 380, 381, 382, 383, 384, 385, 386, 387, 397, 461, 477], "starttim": [99, 100, 108, 113], "stat": [6, 23, 33, 62, 66, 70, 75, 78, 93, 100, 103, 107, 108, 113, 115, 120, 158, 161, 162, 175, 179, 187, 235, 238, 310, 324, 333, 336, 349, 373, 376, 451, 455, 457, 470, 471, 478, 492], "stat_img": [9, 13, 14, 15, 16, 89, 92, 111, 331, 336, 349, 352, 470, 471], "stat_map": [23, 111, 112, 113, 115, 310, 352, 442, 450, 451], "stat_map_img": [111, 439, 447, 454, 455], "stat_maps_pair": 79, "stat_maps_unpair": 79, "stat_threshold": [6, 68, 470], "stat_typ": [67, 68, 108, 112, 113, 132, 133, 161, 324, 332, 336], "state": [0, 2, 23, 30, 32, 48, 49, 50, 51, 54, 56, 65, 86, 88, 91, 98, 99, 115, 120, 131, 141, 152, 154, 161, 162, 163, 165, 166, 167, 169, 174, 178, 181, 183, 184, 193, 194, 196, 197, 198, 201, 205, 220, 222, 227, 228, 242, 243, 245, 246, 274, 287, 298, 299, 300, 301, 302, 305, 306, 336, 345, 351, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 459, 461, 473, 479, 495], "statement": 176, "static": [9, 111, 399, 454], "statist": [2, 6, 8, 14, 22, 23, 27, 33, 36, 40, 42, 49, 64, 65, 67, 69, 70, 73, 74, 81, 82, 95, 99, 100, 102, 103, 105, 108, 110, 112, 113, 114, 115, 117, 120, 121, 129, 132, 134, 141, 142, 152, 154, 158, 161, 162, 167, 170, 173, 175, 176, 177, 179, 181, 182, 183, 187, 188, 201, 230, 235, 238, 248, 256, 271, 277, 278, 279, 286, 295, 308, 310, 311, 316, 319, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 336, 349, 351, 352, 354, 373, 376, 397, 410, 411, 439, 442, 445, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 461, 463, 470, 471, 473, 475, 477, 478, 488, 493, 494, 495], "statistician": 173, "statmap": 376, "statstic": 80, "statu": [168, 181, 196, 281], "std": [30, 32, 44, 51, 88, 104, 381, 382, 383, 384, 385, 386, 387, 473], "std_coef_": [298, 299, 300, 301], "std_coef_img_": [298, 299, 300, 301], "std_dvars_threshold": [56, 132, 161, 377, 378], "std_test_scor": 98, "stderr": 41, "steadi": [56, 65, 154, 161, 336, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 461, 473], "steel": [99, 120], "steinkamp": [0, 146, 151, 161], "step": [3, 11, 20, 33, 35, 37, 42, 44, 47, 49, 50, 55, 58, 61, 62, 64, 65, 67, 70, 78, 79, 88, 93, 97, 100, 108, 112, 113, 122, 129, 144, 152, 158, 161, 162, 165, 166, 167, 168, 170, 171, 173, 175, 176, 181, 184, 185, 186, 187, 196, 203, 236, 243, 268, 281, 290, 293, 300, 301, 305, 306, 336, 339, 351, 378, 380, 383, 386, 389, 390, 391, 393, 394, 459, 473, 495], "stephan": [120, 354, 473], "stephani": [23, 115, 120, 222, 287], "stephen": [23, 102, 115, 120, 162, 175, 181, 194, 212, 222, 228, 255, 274, 287, 351, 397], "stereotax": 198, "stern": [120, 323, 327], "steven": [0, 58, 120, 130, 132, 161, 197, 198, 205, 212, 225, 227, 245, 260, 261, 262, 377, 378], "stick": 65, "still": [15, 49, 65, 78, 90, 101, 112, 113, 116, 123, 131, 156, 161, 173, 175, 184, 188, 277, 492], "stim": 66, "stim_typ": 38, "stimui": 178, "stimul": [6, 71, 168, 229], "stimuli": [28, 30, 32, 33, 45, 65, 79, 97, 118, 162, 163, 165, 166, 168, 178, 183, 186, 188, 203, 213, 266, 276, 356, 373, 380, 383, 386, 425, 447, 452, 479, 494], "stimuli_random_runs_filenam": 40, "stimuli_run": 40, "stimulu": [40, 41, 64, 99, 178], "stimulus_inform": 38, "stimulus_run": 40, "stimulus_shap": 40, "stipul": 97, "stochast": 204, "stop": [53, 96, 109, 118, 120, 123, 174, 235, 238, 277, 279, 359, 364, 365, 367, 439, 447, 452, 458, 494], "stop_go_image_id": 107, "stopsign": 62, "stopsignal_contrast": 62, "stopsignal_design": 62, "stopsignal_report": 62, "stopsignal_stat": 62, "stopsignal_statmap": 62, "stopsuccess": [62, 478], "stopsuccessminusgo": 62, "stopsuccessminusgo_design": 62, "stopsuccessminusgo_stat": 62, "storag": [120, 188, 194, 274, 278, 280], "store": [2, 3, 26, 29, 44, 49, 50, 51, 52, 54, 68, 93, 100, 108, 113, 123, 166, 168, 173, 176, 228, 250, 251, 288, 312, 313, 326, 328, 329, 367, 388, 397, 441], "store_precis": 234, "stori": [65, 67, 112, 120, 218, 275], "str": [22, 62, 74, 76, 78, 99, 114, 133, 155, 161, 176, 195, 234, 235, 236, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 313, 314, 317, 318, 336, 338, 339, 343, 349, 350, 351, 353, 354, 365, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 467, 469, 473, 475, 476, 477], "str_": 3, "straightforward": [70, 175, 324], "strategi": [3, 24, 28, 45, 48, 49, 65, 87, 88, 90, 91, 98, 118, 120, 130, 132, 149, 153, 154, 156, 161, 166, 169, 172, 173, 175, 178, 185, 236, 266, 298, 299, 300, 301, 302, 305, 306, 339, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 393, 433, 444, 445, 452, 459, 464, 473, 477, 479, 494, 495], "stratifi": [154, 161, 168, 298, 300, 302], "stratifiedshufflesplit": [51, 98], "stream": [3, 32, 122, 182, 188, 213], "strength": [47, 149, 152, 161, 242, 371, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 492], "stress": 175, "striat": 51, "strict": 176, "strictli": [250, 251], "string": [4, 15, 29, 33, 55, 71, 76, 78, 87, 99, 100, 108, 113, 122, 133, 143, 144, 156, 158, 161, 176, 186, 197, 216, 235, 242, 244, 270, 271, 278, 280, 281, 285, 288, 297, 302, 303, 304, 305, 306, 326, 328, 329, 333, 334, 336, 338, 343, 349, 351, 352, 353, 354, 355, 364, 365, 368, 373, 374, 376, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 432, 433, 434, 435, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 462, 471, 473], "string_beta_seri": 99, "string_connectivity_img": 99, "string_corr": 99, "string_seed_beta_seri": 99, "strive": 3, "stroke": [120, 162, 234], "strong": [63, 65, 88, 175, 176], "stronger": 162, "strongest": 58, "strongli": [168, 176, 181], "struct": [154, 161], "structur": [3, 6, 23, 39, 41, 43, 46, 49, 51, 58, 59, 63, 65, 115, 118, 120, 162, 168, 170, 171, 172, 173, 175, 181, 186, 193, 195, 196, 197, 198, 200, 201, 204, 212, 213, 214, 219, 220, 223, 228, 229, 232, 236, 244, 246, 255, 258, 266, 267, 272, 281, 303, 304, 323, 326, 374, 389, 390, 391, 393, 394, 444, 452, 455, 460, 466, 494, 495], "student": [93, 178, 187, 224, 324, 495], "studi": [0, 2, 6, 9, 31, 33, 40, 42, 56, 65, 69, 74, 96, 98, 109, 111, 118, 120, 123, 164, 169, 171, 172, 174, 175, 178, 182, 186, 195, 198, 205, 213, 214, 219, 223, 230, 246, 267, 277, 279, 281, 289, 292, 302, 359, 364, 365, 367, 371, 377, 378, 380, 386, 439, 447, 452, 494, 495], "stufflebeam": [120, 198], "style": [4, 134, 156, 161, 297], "sub": [21, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 77, 84, 90, 91, 94, 99, 100, 104, 108, 113, 154, 161, 234, 235, 236, 250, 251, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 374, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461, 471], "sub001": [6, 284, 285], "sub_fold": 374, "sub_id": 242, "sub_label": [130, 161, 339, 374], "subcallos": 90, "subclass": [15, 176, 427], "subcompon": 181, "subcort": [21, 120, 146, 161, 212, 215, 224, 227, 250, 251, 253, 262], "subcortex": [21, 120, 227, 262], "subdirectori": [277, 279], "subdivid": [120, 212, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "subfold": 184, "subgradi": [120, 175], "subgroup": 181, "subj": 4, "subj1": [4, 186], "subj1_img": 101, "subj2": [3, 16, 18, 25, 29, 30, 32, 34, 35, 36, 93, 102, 122], "subj2_img": 101, "subject": [1, 3, 4, 7, 11, 15, 16, 17, 18, 21, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 59, 60, 64, 65, 67, 70, 72, 74, 76, 77, 79, 84, 90, 93, 94, 98, 99, 100, 101, 102, 104, 105, 106, 108, 110, 112, 113, 114, 115, 116, 118, 120, 122, 123, 129, 130, 131, 132, 137, 139, 140, 149, 152, 161, 163, 164, 165, 166, 168, 175, 177, 178, 180, 183, 185, 186, 187, 189, 192, 194, 195, 197, 198, 200, 203, 212, 216, 217, 218, 220, 222, 228, 229, 233, 234, 235, 236, 238, 242, 243, 244, 246, 252, 263, 266, 271, 272, 274, 275, 281, 284, 285, 286, 287, 297, 305, 306, 336, 339, 343, 349, 350, 352, 355, 366, 369, 374, 377, 378, 380, 381, 382, 383, 385, 386, 387, 392, 394, 410, 430, 432, 434, 435, 436, 440, 444, 447, 452, 459, 470, 479, 492, 494, 495], "subject1": 186, "subject2": 186, "subject_": 186, "subject_01": 186, "subject_03": 186, "subject_data": [6, 68, 69, 177], "subject_effect": 79, "subject_id": [62, 100, 108, 113, 284, 285], "subject_label": [33, 62, 77, 100, 336, 349, 350, 351, 478], "subject_time_seri": 53, "subjects_label": [77, 350], "submit": [181, 184], "submodul": [156, 158, 161, 176], "subobject": [234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "subpart": [156, 161], "subpeak": [336, 349, 470, 471], "subplot": [11, 12, 24, 38, 40, 41, 43, 44, 49, 51, 57, 63, 64, 65, 66, 68, 74, 77, 78, 79, 93, 99, 100, 105, 116, 129, 161, 438, 448, 449, 450, 451], "subplot_kw": [116, 448, 449, 450, 451], "subplots_adjust": [12, 25, 40, 44, 49, 57, 66, 187], "subsampl": 204, "subsequ": [49, 83, 188, 277, 279, 281, 377, 378], "subset": [23, 36, 44, 93, 115, 169, 173, 176, 198, 297, 315, 326, 339, 361, 377], "substitut": [99, 469], "subtract": [58, 65, 100, 183, 278], "succ": 107, "success": [176, 178, 184, 188, 229], "successfulli": 176, "sufen": [120, 212], "suffer": 378, "suffix": 378, "suggest": [0, 6, 85, 156, 161, 165, 183, 186, 354, 389, 391, 392, 394, 473], "suit": [93, 99, 163, 169, 183, 198, 246], "suitabl": [56, 67, 112, 146, 161, 169, 173, 188, 275, 378], "sulc": [307, 448, 449, 450, 451, 457, 475], "sulc_": 37, "sulc_left": [22, 23, 67, 108, 207, 208, 209, 210, 211, 286, 442, 455], "sulc_right": [9, 67, 108, 207, 208, 209, 210, 211, 286, 442, 455, 492], "sulcal": [22, 23, 111, 112, 113, 114, 115, 116, 120, 202, 207, 208, 209, 210, 211, 248, 286, 322, 442, 448, 450, 451, 455, 457], "sulci": [22, 23, 114, 115, 120, 202, 256], "sulco": [202, 256], "sulcu": 103, "sum": [3, 41, 42, 49, 58, 64, 66, 76, 78, 83, 100, 102, 105, 106, 107, 149, 161, 175, 303, 304, 323, 327, 328, 360, 381, 384, 464, 474], "summar": [54, 58, 90, 168, 176, 328, 382, 384, 385, 387, 470, 479], "summari": [33, 62, 70, 90, 154, 176, 324, 479], "summary_statistics_run_1": 70, "summary_statistics_run_2": 70, "summerlin": [120, 231, 257], "superimpos": 441, "superior": [90, 103, 174, 368], "supervis": [49, 120, 169, 171, 172, 181, 183], "supplement": [120, 202, 214, 248, 267, 292], "supplementari": [90, 122, 173], "suppli": [58, 302, 303, 304, 343, 377, 384, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 464, 473], "support": [0, 4, 9, 15, 29, 32, 33, 34, 35, 44, 97, 105, 111, 116, 122, 127, 129, 130, 132, 141, 142, 143, 146, 147, 148, 149, 153, 154, 156, 157, 158, 161, 168, 169, 171, 173, 178, 181, 182, 298, 299, 300, 301, 324, 376, 377, 381, 384, 448, 450, 451, 467, 477, 493], "supported_loss": [303, 304], "supported_penalti": [303, 304], "suppos": [101, 123, 175, 184, 186, 188, 328, 329], "supposedli": [69, 230], "suppress": [3, 11, 16, 29, 48, 53, 56, 65, 69, 74, 83, 88, 90, 92, 103, 120, 198], "supra": 178, "supracalcarin": 90, "supramargin": 90, "suptitl": [38, 40, 42, 43, 44, 65, 74, 78, 99, 100, 105], "sur": [0, 176], "suramya": [0, 132, 161], "sure": [15, 93, 118, 129, 132, 133, 161, 173, 176, 184, 303, 304, 493], "surf_data": [442, 448, 450, 451, 455, 457, 475, 477], "surf_map": [111, 114, 116, 307, 311, 448, 457], "surf_mesh": [9, 111, 112, 113, 114, 115, 307, 308, 309, 310, 311, 442, 448, 449, 450, 451, 455, 457, 476, 477, 492], "surf_plot": [9, 111, 131, 141, 161], "surfac": [8, 12, 27, 28, 45, 55, 60, 72, 96, 109, 110, 117, 118, 120, 122, 130, 131, 133, 141, 143, 145, 146, 147, 149, 152, 153, 156, 158, 161, 179, 181, 182, 183, 190, 202, 207, 208, 209, 210, 211, 232, 234, 248, 256, 266, 269, 273, 286, 287, 295, 298, 307, 308, 309, 310, 311, 324, 332, 336, 339, 343, 345, 361, 397, 411, 434, 439, 442, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 494, 495], "surface_mesh": 477, "surface_plot": 492, "surfaceimag": [111, 112, 113, 114, 115, 116, 298, 299, 300, 301, 307, 317, 318, 336], "surfacemask": [116, 298, 299, 300, 301, 336], "surfaceview": [455, 457], "surfer": [232, 258], "surpass": 178, "surrog": [36, 102], "surround": [154, 161, 477], "surviv": [50, 153, 161, 324, 461], "sustain": 176, "svc": [3, 29, 30, 31, 32, 33, 34, 35, 122, 149, 161, 168, 169, 171, 298, 300, 302], "svc_coef": 97, "svc_l1": [30, 32, 169, 298, 300], "svc_l2": [30, 169, 298, 300], "svc_ova": 35, "svc_ovo": 35, "svd": [141, 161, 306, 360, 459, 474], "svg": [15, 62, 74, 131, 161, 376, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451], "svm": [28, 34, 35, 39, 42, 44, 45, 51, 98, 118, 122, 141, 161, 170, 172, 174, 181, 188, 266, 298, 361, 447, 452, 454, 494, 495], "svr": [39, 42, 44, 149, 161, 169, 299, 301, 302], "swap": [173, 187, 281, 372], "swap_img_hemispher": 187, "sweden": 0, "swiss": 188, "switch": [132, 141, 148, 161, 176, 184, 439], "switzerland": 0, "sy": [0, 41, 131, 161], "syllab": [6, 229], "sylvain": [0, 143, 146, 149, 161], "sym": [19, 198, 241, 246], "sym_matrix_to_vec": [142, 161, 241], "sym_to_vec": [134, 139, 142, 154, 161], "symbol": [176, 177, 364], "symlink": [282, 296], "symmetr": [9, 19, 47, 78, 111, 142, 161, 175, 198, 240, 241, 246, 250, 251, 267, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434, 442, 447, 448, 451, 453, 454, 455, 457], "symmetri": [173, 175], "symmetric_cbar": [14, 131, 161, 439, 442, 447, 451], "symmetric_cmap": [9, 22, 111, 114, 116, 131, 147, 161, 448, 453, 454, 455, 457, 492], "symmetric_split": [136, 161, 250, 251], "symposium": [48, 120, 167, 305, 306], "symptom": 196, "synchron": 372, "synthes": 175, "synthesi": [120, 123, 175, 221, 277, 279], "synthet": [22, 57, 83, 114, 176], "system": [0, 6, 23, 42, 43, 115, 120, 168, 175, 176, 184, 186, 197, 202, 207, 208, 209, 210, 211, 212, 219, 229, 245, 286, 288], "systemat": [99, 120, 136, 161, 198, 272, 377, 378], "s\u00e9gonn": [120, 202, 248], "t": [3, 5, 6, 9, 16, 22, 24, 33, 37, 41, 55, 56, 58, 62, 65, 66, 67, 69, 70, 71, 74, 75, 76, 78, 79, 82, 89, 91, 92, 93, 95, 98, 99, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 118, 120, 123, 132, 152, 159, 161, 162, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 186, 187, 197, 200, 212, 226, 228, 231, 232, 244, 245, 254, 255, 257, 258, 264, 272, 277, 278, 279, 282, 303, 304, 324, 326, 327, 328, 329, 330, 332, 336, 349, 351, 373, 376, 377, 378, 391, 397, 442, 445, 447, 452, 463, 471, 474, 477, 492, 494], "t0": [30, 41], "t1": [44, 74, 155, 161, 195, 198, 212, 214, 244, 267, 289, 291, 292, 294, 432, 492], "t1w": 62, "t2": [214, 267, 437, 492], "t2_relax": [214, 267], "t_img": 107, "t_map": [336, 349], "t_map001": 186, "t_r": [6, 11, 33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 62, 64, 65, 67, 68, 88, 90, 91, 98, 99, 108, 112, 146, 157, 161, 188, 298, 299, 300, 301, 303, 304, 305, 306, 318, 336, 338, 339, 343, 354, 381, 382, 383, 384, 385, 386, 387, 433, 459, 461, 473, 478, 479], "t_score": 107, "t_scores_original_data": [42, 102], "t_statmap": [62, 74], "t_to_z": 107, "tab": [184, 188], "tab20": [111, 449], "tabl": [6, 33, 62, 68, 90, 100, 130, 133, 157, 161, 378, 470, 478], "tabular": 62, "tackl": [169, 184], "tag": [30, 32, 67, 108, 123, 176, 184, 374, 375], "tail": [69, 326, 328, 329, 470], "tailor": [49, 67, 112, 165], "take": [2, 3, 4, 6, 9, 24, 29, 33, 40, 42, 43, 49, 50, 64, 65, 66, 67, 69, 71, 76, 78, 93, 97, 99, 101, 103, 108, 111, 113, 122, 130, 143, 146, 149, 155, 161, 162, 163, 165, 168, 171, 173, 175, 176, 177, 178, 186, 188, 227, 234, 268, 277, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 306, 336, 338, 343, 351, 365, 384, 396, 397, 401, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 459, 461, 463, 477, 490, 492], "taken": [6, 65, 99, 169, 175, 339, 349, 351, 370, 381, 382, 384, 385, 387, 461], "takerkart": [0, 149, 161], "tal": [120, 123, 188, 221, 277, 279, 387], "talairach": [120, 143, 161, 180, 190, 242, 257], "tall": 41, "tamer": [0, 132, 161], "tanab": [40, 41, 120, 219, 276], "tandfonlin": [120, 397], "tangent": [51, 98, 142, 161, 166, 234], "tangent_matric": 51, "tangent_measur": 51, "tar": [4, 38, 141, 161, 184], "target": [3, 29, 33, 40, 83, 88, 93, 97, 99, 130, 146, 161, 168, 169, 173, 175, 176, 181, 184, 185, 198, 219, 266, 276, 298, 299, 300, 301, 302, 303, 304, 305, 306, 336, 349, 351, 369, 370, 380, 383, 386, 390, 393, 397, 458, 460, 461, 495], "target_affin": [33, 49, 52, 53, 56, 83, 88, 91, 187, 188, 298, 299, 300, 301, 303, 304, 305, 306, 336, 339, 349, 366, 369, 383, 386, 389, 391, 392, 393, 394, 459, 478, 479], "target_affine_3x3": 83, "target_affine_4x4": 83, "target_affine_mm_space_offset_chang": 83, "target_img": [370, 390, 393], "target_shap": [33, 49, 52, 53, 56, 83, 88, 91, 187, 188, 298, 299, 300, 301, 303, 304, 305, 306, 336, 339, 349, 366, 369, 383, 386, 389, 391, 392, 394, 459, 478, 479], "target_var": 397, "targett": [135, 161], "tarun": [0, 131, 161], "task": [2, 3, 17, 29, 30, 31, 34, 39, 48, 49, 60, 62, 65, 67, 72, 76, 80, 88, 91, 96, 103, 109, 112, 118, 120, 132, 146, 157, 161, 167, 168, 169, 172, 175, 177, 178, 181, 182, 183, 184, 188, 204, 228, 235, 238, 266, 269, 271, 272, 297, 336, 339, 355, 359, 374, 380, 386, 387, 397, 410, 425, 436, 438, 439, 447, 452, 479, 494], "task_data": 32, "task_label": [62, 100, 108, 113, 339], "task_mask": [30, 32], "tasknam": 339, "taylor": [0, 120, 129, 130, 131, 132, 153, 156, 157, 158, 161, 174], "tcontrast": [69, 326, 328, 329], "tcontrastresult": [326, 328, 329], "tcorr_2level": [201, 247], "tcorr_mean": [201, 247], "te": 123, "teach": [1, 118, 138, 149, 161, 176, 203], "teal": 68, "team": [176, 183, 184, 220, 252, 493], "technic": [8, 27, 70, 99, 118, 162, 174, 175, 194, 274, 281, 323, 327, 451, 452, 477, 494], "techniqu": [15, 44, 120, 166, 167, 168, 169, 170, 171, 175, 181, 183, 188, 229, 461], "technisch": 0, "technologi": 0, "tel": 0, "tell": [68, 85, 120, 175, 218, 275], "temp_file_lifetim": [132, 161, 469], "templat": [4, 16, 22, 23, 48, 67, 74, 82, 95, 108, 112, 113, 114, 115, 118, 120, 129, 133, 134, 139, 144, 149, 152, 155, 158, 161, 166, 178, 181, 183, 187, 188, 195, 197, 198, 244, 246, 258, 267, 268, 281, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 305, 306, 364, 369, 370, 378, 383, 386, 390, 393, 432, 445, 446, 447, 452, 454, 459, 469, 494], "template_affin": 92, "template_img": 92, "template_shap": 92, "templateflow": [176, 267, 268], "tempor": [3, 6, 16, 31, 32, 33, 38, 51, 55, 65, 66, 90, 93, 97, 100, 103, 120, 122, 146, 154, 161, 167, 168, 181, 185, 201, 213, 247, 266, 306, 336, 340, 341, 342, 343, 345, 346, 347, 348, 354, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 461, 473, 495], "temporal": [90, 103], "temporal_anat_combin": 377, "temporal_anat_separ": 377, "temporari": 469, "temporarili": 176, "temporooccipit": 90, "temporopariet": 58, "ten": [6, 80, 459], "tend": [78, 99, 170, 175, 186], "tensor": 120, "tent": [112, 113, 116], "term": [37, 54, 65, 88, 91, 114, 121, 157, 161, 167, 169, 175, 178, 181, 183, 186, 187, 194, 274, 277, 303, 304, 323, 343, 377, 473, 479], "term_idx": 103, "term_weight": 103, "term_weights_for_compon": 103, "termin": [39, 168, 176, 493], "test": [3, 29, 31, 34, 36, 40, 42, 43, 44, 51, 53, 63, 65, 69, 73, 76, 77, 81, 98, 100, 102, 105, 106, 116, 118, 120, 129, 131, 132, 145, 153, 156, 159, 161, 168, 170, 171, 173, 174, 175, 178, 179, 180, 181, 184, 187, 233, 236, 242, 243, 244, 245, 246, 247, 248, 252, 255, 256, 258, 266, 267, 271, 272, 275, 276, 281, 287, 298, 299, 300, 301, 302, 303, 304, 324, 349, 351, 352, 359, 365, 369, 370, 373, 376, 397, 409, 410, 424, 436, 439, 447, 452, 454, 486, 493, 494], "test_cluster_level_parameters_smok": [129, 161], "test_contrast": 184, "test_data_gen": 184, "test_imag": 176, "test_img_plot": [156, 161], "test_latest": 184, "test_modul": 176, "test_nilearn_standard": [159, 161], "test_plot": 184, "test_scor": 97, "test_sign": [131, 161], "test_siz": [51, 98], "test_someth": 176, "test_surf_plot": 176, "tested_var": [76, 105, 106, 397], "tetrel": [0, 149, 161], "teuscher": [120, 197, 245], "teve": [0, 151, 161], "texa": 0, "texliv": 184, "text": [35, 74, 93, 97, 105, 120, 168, 176, 185, 198, 213, 219, 223, 224, 232, 258, 266, 276, 323, 327, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 495], "textquoteright": [120, 228, 255], "textur": [9, 67, 108, 111, 477], "texture_left": [112, 113], "texture_right": [112, 113], "tfce": [105, 129, 158, 161, 181, 351, 397], "tgz": [101, 196, 243], "th": 454, "thalam": [120, 212], "thalamu": [227, 262], "than": [3, 4, 6, 15, 31, 32, 35, 36, 39, 40, 41, 42, 43, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 67, 68, 70, 76, 78, 80, 85, 87, 88, 90, 91, 93, 97, 98, 99, 102, 103, 104, 105, 106, 112, 121, 122, 123, 132, 136, 139, 140, 141, 142, 143, 145, 149, 154, 156, 161, 162, 165, 167, 168, 169, 170, 171, 173, 175, 176, 178, 181, 184, 186, 187, 188, 198, 220, 233, 250, 251, 277, 279, 283, 298, 299, 300, 301, 305, 306, 336, 345, 351, 352, 353, 360, 365, 373, 374, 377, 378, 380, 382, 383, 385, 386, 397, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 428, 433, 434, 439, 442, 443, 447, 451, 452, 453, 455, 457, 461, 470, 472, 474, 477, 479], "thank": [146, 161, 176, 349, 350, 351], "thei": [3, 6, 24, 39, 42, 44, 49, 58, 64, 65, 67, 69, 93, 97, 108, 113, 122, 123, 130, 133, 156, 158, 161, 167, 170, 171, 173, 175, 176, 178, 181, 183, 184, 186, 188, 194, 198, 205, 216, 233, 258, 266, 277, 282, 336, 339, 349, 351, 355, 369, 387, 435, 462, 473, 479, 492], "them": [2, 3, 6, 14, 19, 30, 32, 39, 42, 44, 49, 50, 54, 55, 58, 62, 64, 67, 69, 70, 71, 78, 79, 85, 88, 93, 99, 103, 104, 108, 112, 113, 118, 122, 123, 127, 131, 133, 134, 146, 152, 153, 155, 158, 161, 162, 163, 167, 169, 171, 176, 178, 181, 182, 183, 186, 188, 244, 277, 279, 339, 396, 397, 459, 492], "theme": [129, 158, 161], "themselv": [65, 123, 188], "theodor": [56, 120, 377, 378], "theoret": 173, "theori": [120, 181, 218, 275, 328, 329], "therapanacea": 0, "therefor": [70, 156, 161, 167, 173, 175, 198, 244, 246], "theta": [326, 328, 329], "thi": [0, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 121, 122, 123, 130, 131, 132, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 206, 213, 219, 220, 223, 224, 226, 228, 229, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 482, 489, 490, 492, 495], "thick": [14, 47, 154, 161, 207, 208, 209, 210, 211, 232, 258, 286, 307, 445, 446, 448, 449, 450, 451, 457, 475, 477], "thick_17": [47, 232, 258], "thick_7": [85, 232, 258], "thick_left": [207, 208, 209, 210, 211, 286], "thick_right": [207, 208, 209, 210, 211, 286], "thin": [232, 258], "thin_17": [232, 258], "thin_7": [232, 258], "thing": [2, 3, 56, 65, 130, 161, 165, 174, 175, 176, 184, 188, 326, 354, 473, 492], "think": [176, 178, 188], "third": [15, 65, 80, 166, 345], "thirion": [0, 44, 48, 49, 51, 71, 98, 120, 124, 127, 131, 134, 139, 143, 146, 147, 149, 156, 157, 161, 162, 165, 166, 167, 168, 170, 174, 183, 200, 204, 220, 234, 235, 249, 252, 272, 300, 301, 305, 306, 460, 461, 466], "this_meta": 107, "thoma": [0, 102, 120, 123, 149, 152, 155, 156, 161, 162, 169, 181, 183, 194, 197, 221, 226, 232, 245, 254, 258, 274, 277, 279, 351, 377, 378, 397, 474], "thomasyeolab": [226, 254], "thompsen": [23, 115, 120, 222, 287], "thorough": 176, "thoroughli": [176, 233], "thorsten": [120, 173], "those": [50, 62, 65, 67, 69, 70, 79, 88, 108, 113, 156, 161, 167, 169, 171, 175, 176, 178, 184, 194, 228, 229, 230, 233, 277, 373, 376, 384, 433, 455, 461, 464, 467, 468, 477], "though": [99, 104, 168, 327, 448, 450, 451, 472], "thousand": [49, 188, 459], "thr0": [10, 250, 251], "thr25": [10, 56, 90, 163, 250, 251], "thr50": [250, 251], "thread": 36, "three": [6, 14, 19, 24, 32, 40, 49, 63, 64, 65, 74, 88, 93, 120, 147, 155, 161, 175, 176, 181, 184, 186, 195, 203, 227, 263, 336, 349, 369, 371, 408, 410, 413, 427, 432, 434, 437, 438, 439, 440, 443, 445, 446, 447, 471, 477], "threshold": [2, 3, 9, 13, 14, 16, 17, 23, 30, 33, 36, 37, 39, 40, 42, 48, 49, 50, 54, 55, 56, 61, 64, 65, 67, 68, 69, 70, 74, 75, 76, 78, 79, 80, 86, 87, 88, 89, 92, 93, 99, 100, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 115, 116, 120, 123, 131, 132, 133, 134, 147, 149, 153, 156, 158, 161, 163, 166, 175, 178, 179, 181, 187, 268, 289, 290, 293, 305, 331, 335, 336, 349, 351, 352, 353, 373, 376, 377, 378, 390, 391, 392, 393, 394, 395, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 431, 432, 434, 439, 440, 442, 445, 446, 447, 448, 450, 451, 453, 454, 455, 457, 460, 461, 466, 470, 471, 478, 492, 495], "threshold1": 80, "threshold2": 80, "threshold3": 80, "threshold_img": [40, 80, 87, 130, 134, 156, 161, 352, 353], "threshold_percentile_img": 87, "threshold_stats_img": [6, 74, 76, 80, 180, 373], "threshold_value_img": 87, "thresholded_map": 352, "thresholded_map1": 80, "thresholded_map2": 80, "thresholded_map3": 80, "thresholded_score_map_img": 40, "thresholding_strategi": [50, 86, 166, 461], "threw": [156, 161], "through": [14, 31, 39, 42, 48, 51, 56, 70, 74, 90, 99, 129, 130, 153, 154, 156, 161, 162, 168, 169, 170, 173, 176, 181, 183, 194, 198, 277, 281, 300, 301, 336, 349, 351, 377, 378, 381, 384, 393, 398, 400, 401, 403, 404, 405, 406, 407, 414, 416, 418, 420, 422, 424, 458, 464, 469, 477], "throughout": 495, "throw": [131, 133, 159, 161, 387], "thu": [15, 31, 34, 39, 102, 104, 163, 168, 169, 170, 173, 174, 175, 181, 187, 188, 300, 301, 302, 303, 304, 324, 358, 378, 397], "thual": [0, 129, 130, 154, 156, 158, 161], "thumb": [168, 176], "tianzi": [120, 162, 234], "tibshirani": [120, 162], "tick": [129, 132, 161, 176, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 437, 439, 440, 442, 446, 447, 448, 450, 451, 453, 455, 457], "tick_17": 258, "tick_7": 258, "tick_posit": [30, 32], "ticker": [48, 49], "ticklabel": [149, 161], "tight": [34, 175], "tight_layout": [30, 31, 32, 48, 51, 55, 58, 68, 77, 79, 98], "tighter": [142, 161, 175], "tile": [15, 147, 161, 413, 427, 432, 437, 440, 445, 446, 447, 471, 492], "tiledslic": [15, 408, 410, 427], "time": [0, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 56, 57, 60, 62, 63, 64, 66, 67, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 116, 118, 120, 122, 123, 129, 130, 131, 136, 145, 146, 152, 153, 154, 156, 158, 161, 162, 164, 165, 166, 167, 168, 171, 173, 176, 178, 179, 181, 182, 184, 185, 186, 187, 198, 216, 228, 229, 234, 236, 238, 263, 284, 286, 287, 298, 299, 300, 301, 303, 304, 305, 306, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 348, 349, 351, 354, 355, 366, 369, 371, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 397, 425, 433, 445, 447, 454, 455, 459, 461, 463, 464, 465, 470, 472, 473, 474, 477, 479, 484, 492, 495], "time_length": [66, 340, 341, 342, 346, 347, 348], "time_seri": [47, 51, 52, 54, 56, 58, 162, 163], "time_series_1": 162, "time_series_2": 162, "time_stamp": 66, "timecours": [177, 377], "timepoint": [25, 187, 339], "timeseri": [23, 26, 48, 50, 58, 88, 104, 115, 140, 153, 161, 162, 166, 194, 196, 204, 249, 274, 354, 378, 381, 382, 383, 384, 385, 386, 387, 473, 474], "timeseries_each_subject": [50, 166], "timon": 0, "timothi": [58, 120, 194, 225, 226, 254, 261, 274, 377], "ting": [0, 129, 130, 131, 132, 153, 154, 156, 158, 159, 161], "tini": 324, "tinput": 101, "tip": [44, 183], "tissu": [21, 181, 257], "titl": [0, 3, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 26, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 69, 70, 74, 75, 76, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 97, 99, 100, 102, 103, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 122, 131, 149, 150, 155, 158, 161, 166, 168, 176, 184, 188, 336, 349, 376, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 437, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 469, 471, 492], "title_font_s": [448, 450, 451], "title_fonts": [453, 455, 456, 457], "tmap": [17, 78, 132, 161, 200, 270, 272, 492], "tmap_filenam": [2, 87], "tmap_img": 92, "tmi": [44, 120, 174], "to_csv": [6, 71], "to_filenam": [3, 4, 6, 29, 48, 49, 55, 70, 85, 93, 187], "to_gifti": [312, 313, 314], "to_latex": 62, "tobe": [23, 115, 120, 222, 287], "todd": [120, 173, 212, 214, 267], "toffset": [56, 90, 101], "toga": [120, 231, 257], "togeth": [33, 48, 58, 66, 67, 68, 79, 112, 162, 170, 171, 178, 181, 198, 260, 262, 297, 300, 301, 305, 339, 354, 461, 479], "toggl": 358, "toi": [24, 104], "tol": [235, 236, 238, 303, 304], "tol_cv": 236, "toler": [53, 91, 104, 175, 235, 236, 238, 303, 304, 358], "tolil": 37, "tolist": [78, 99], "toll": 162, "tom": [0, 120, 154, 161, 197, 245], "tomassini": [120, 194, 274], "toml": [130, 161, 176, 184, 493], "tommaso": [120, 198], "tommi": [120, 175, 235, 238], "too": [24, 34, 38, 40, 42, 52, 54, 56, 69, 85, 123, 169, 175, 277, 279, 387, 492], "took": [6, 101, 229], "tool": [4, 8, 10, 11, 20, 23, 27, 32, 36, 48, 49, 78, 85, 86, 93, 99, 104, 115, 118, 122, 139, 158, 161, 164, 169, 176, 177, 180, 182, 183, 185, 186, 188, 189, 191, 212, 266, 295, 366, 408, 410, 413, 415, 417, 419, 421, 423, 425, 432, 437, 439, 446, 447, 452, 454, 483, 492, 493, 494], "toolbox": [182, 493], "toolkit": [0, 198], "tootel": [120, 207, 208, 209, 210, 211, 286], "top": [6, 12, 15, 17, 25, 44, 56, 103, 152, 161, 176, 183, 187, 297, 434, 439, 440, 443, 445, 446, 447, 454, 492], "topic": [176, 184], "topologi": 175, "toprul": 62, "tor": [120, 123, 221, 277, 279, 354, 473], "torabi": [0, 130, 131, 132, 161], "toro": [120, 228, 255], "toronto": 0, "total": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 164, 166, 168, 174, 194, 212, 253, 263, 304, 317, 318, 391, 392, 394, 445, 462, 479, 494, 495], "total_scor": 103, "touch": 358, "tour": 492, "toward": [93, 156, 161, 204, 234, 364, 381, 382, 383, 384, 385, 386, 387, 495], "tox": [132, 161], "tpami": [49, 120, 460, 466], "tpl": 267, "tpr": 181, "tr": [6, 11, 23, 25, 33, 63, 66, 69, 101, 108, 115, 130, 145, 157, 161, 178, 181, 187, 222, 263, 340, 341, 342, 346, 347, 348, 365], "trace": 102, "traci": [120, 223, 281], "track": [99, 103, 175, 184], "tracker": 184, "trade": [201, 300, 301], "tradition": 181, "trail": 176, "train": [3, 31, 32, 34, 39, 40, 41, 42, 43, 44, 51, 97, 98, 152, 161, 168, 169, 170, 173, 175, 181, 183, 188, 235, 298, 299, 300, 301, 303, 304, 458, 460, 466], "train_siz": [42, 43], "train_test_split": [42, 43], "trait": 169, "trajectori": 175, "tran": [49, 120, 244, 460, 466], "trans_i": 56, "trans_x": 56, "trans_z": 56, "transact": [44, 120, 174, 195, 204], "transfer": 183, "transform": [3, 23, 24, 40, 41, 48, 49, 50, 51, 53, 54, 65, 67, 69, 83, 88, 90, 91, 93, 97, 98, 99, 103, 108, 115, 116, 120, 122, 142, 143, 147, 149, 151, 152, 153, 154, 156, 158, 161, 165, 166, 171, 178, 181, 185, 186, 198, 212, 231, 234, 257, 275, 298, 299, 300, 301, 305, 306, 317, 318, 333, 336, 349, 352, 356, 367, 369, 377, 380, 381, 382, 383, 384, 385, 386, 387, 398, 458, 459, 460, 461, 473, 477, 479, 495], "transform_img": [131, 159, 161, 381, 382, 383], "transform_single_img": [43, 49, 52, 53, 56, 58, 133, 161, 380, 381, 382, 383, 384, 385, 386, 387, 461], "transform_to_2d": [398, 400, 401], "transient": 188, "translat": [63, 149, 161, 187, 336, 339, 349, 352, 377, 471], "transpar": [15, 23, 115, 131, 149, 161, 188, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 434, 439, 440, 442, 443, 445, 446, 447, 448, 451, 453, 454, 455, 456, 457], "transpos": [48, 152, 161, 175], "treat": 123, "treatment": [181, 183], "tree": [165, 226, 254], "trei": [120, 198], "trend": [42, 43, 88, 159, 161, 188], "trended_data": 88, "tresult": 101, "tri": [24, 51, 169, 277, 432, 444, 458], "triag": [156, 161], "trial": [63, 65, 71, 120, 131, 161, 168, 177, 181, 275], "trial_condit": 99, "trial_nam": 99, "trial_numb": 99, "trial_typ": [6, 33, 63, 64, 65, 71, 99, 100, 216, 343, 438], "trial_type_idx": 71, "trial_type_list": 99, "trial_type_seri": 99, "trials_ses1": [230, 285], "trials_ses2": [230, 285], "trialwise_condit": 99, "triangl": [24, 181, 314, 477], "triangul": 24, "triangular": [181, 234, 240, 241, 444], "triangulari": 90, "tribhuvan": 0, "trick": [18, 183], "tricki": 175, "trigger": 184, "trilinear": 477, "trim": [385, 465], "triplet": [337, 338, 387, 456], "triplett": [120, 264, 282], "trivial": 80, "trm": [120, 328, 329], "tronto": 0, "troubleshoot": 176, "true": [2, 3, 4, 6, 9, 11, 13, 14, 15, 16, 18, 21, 22, 23, 25, 26, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 65, 67, 68, 69, 70, 71, 73, 74, 76, 78, 79, 80, 81, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 111, 112, 113, 114, 115, 116, 118, 122, 123, 131, 141, 144, 149, 156, 159, 161, 163, 166, 168, 171, 173, 175, 178, 180, 181, 188, 234, 235, 236, 238, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 258, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 281, 287, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 331, 336, 339, 349, 351, 352, 353, 354, 355, 358, 360, 364, 366, 368, 369, 370, 373, 374, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 467, 470, 472, 473, 474, 479, 492, 494], "truli": [178, 214], "truncat": [149, 161], "trust": [36, 49, 52, 53, 58, 62, 74, 76, 178], "truth": [41, 44, 57, 168], "try": [3, 4, 5, 9, 12, 21, 24, 36, 38, 39, 40, 44, 49, 52, 53, 56, 57, 58, 62, 64, 65, 66, 74, 76, 77, 88, 90, 97, 98, 103, 105, 106, 111, 116, 123, 158, 161, 162, 163, 168, 169, 174, 175, 176, 184, 188, 203, 493], "ts2": 194, "ts3": 194, "tsuang": [120, 212], "tsv": [6, 47, 52, 53, 55, 56, 58, 60, 62, 72, 74, 100, 108, 113, 118, 131, 161, 177, 203, 263, 339, 376, 377, 378, 438, 494], "tsvfile": 71, "ttest_1samp": [108, 113], "ttest_ind": [93, 187], "tube": 122, "tunabl": 378, "tune": [21, 31, 32, 34, 39, 43, 88, 120, 140, 161, 163, 168, 169, 171, 175, 178, 305, 306, 377, 383, 386, 459, 492], "tupl": [15, 188, 245, 252, 287, 298, 299, 300, 301, 303, 304, 305, 306, 326, 328, 329, 336, 339, 349, 358, 366, 369, 371, 374, 377, 383, 386, 389, 391, 392, 394, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 437, 440, 444, 445, 446, 447, 454, 459, 464, 471, 476, 477], "tupleof": [432, 433, 434, 437, 439, 440, 443, 445, 446, 447], "turn": [47, 65, 83, 163, 165, 175, 188, 336, 349, 389, 390, 391, 393, 394, 445, 446, 447, 454, 471], "turner": [99, 120, 168, 197, 228, 245, 255], "tutori": [6, 7, 65, 97, 136, 146, 161, 168, 176, 181, 182, 183, 188, 213, 266, 298, 361, 366, 437, 446, 454, 494], "tv": [43, 120, 174, 298, 299, 303, 304], "tv_l1": 39, "tvl1": 174, "tweak": [58, 88, 166], "twelv": [120, 203, 263], "twine": 184, "two": [6, 14, 24, 25, 34, 40, 48, 55, 56, 58, 60, 65, 72, 73, 76, 81, 85, 87, 88, 93, 97, 99, 100, 102, 108, 113, 118, 123, 129, 141, 144, 149, 152, 153, 159, 161, 162, 165, 167, 168, 170, 172, 173, 175, 176, 177, 178, 180, 181, 182, 183, 184, 186, 187, 188, 194, 198, 230, 236, 240, 246, 265, 272, 285, 298, 299, 300, 301, 305, 306, 307, 326, 328, 329, 333, 336, 343, 349, 350, 351, 355, 361, 366, 369, 377, 378, 382, 385, 387, 397, 409, 436, 439, 441, 442, 447, 448, 449, 450, 451, 452, 457, 459, 461, 462, 463, 469, 470, 471, 476, 477, 478, 492, 494, 495], "two_sid": [80, 132, 153, 156, 161, 352, 353, 373, 470, 471], "two_sided_test": [76, 78, 102, 173, 351, 397], "twpyb1pflj6vrlxgh3rohyqanxbdpelw": 227, "tx": 63, "txt": [93, 281], "ty": 63, "tyler": [120, 173], "type": [3, 6, 15, 18, 21, 29, 34, 42, 49, 63, 64, 65, 67, 71, 87, 93, 99, 102, 112, 123, 129, 131, 132, 135, 138, 140, 143, 146, 149, 155, 156, 157, 158, 161, 170, 173, 176, 177, 178, 181, 184, 186, 194, 217, 242, 246, 250, 251, 257, 274, 302, 324, 332, 336, 349, 354, 358, 359, 361, 363, 364, 366, 367, 371, 372, 374, 375, 376, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 393, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 445, 446, 459, 461, 462, 463, 470, 471, 472, 473], "typeerror": [156, 161, 364], "typic": [6, 71, 77, 78, 99, 165, 167, 169, 173, 176, 178, 181, 186, 187, 188, 193, 288, 300, 301, 304, 326, 376, 387, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 445, 446, 447, 454, 459, 492], "typo": [133, 151, 161], "typograph": [158, 161], "tyszka": [120, 224, 253], "tz": 63, "tziona": [23, 115, 120, 222, 287], "tzourio": [120, 195, 244], "u": [3, 4, 15, 24, 40, 55, 58, 63, 65, 76, 78, 88, 93, 116, 120, 168, 169, 171, 176, 205, 227, 260, 262, 304, 328, 329, 493], "u5mzi": 199, "ubuntu": 175, "uc": 0, "ucc": 224, "uchida": [40, 41, 120, 219, 276], "ucl": [0, 120, 174, 229, 230, 284, 285], "ucla": [264, 282], "uddin": 120, "ugli": 169, "ugurbil": [120, 194, 274], "uint8": [44, 56, 90, 158, 161, 367], "uk": [0, 2, 120, 174, 212, 215, 228, 229, 230, 255, 284, 285], "ultim": [176, 327, 432, 437, 439, 440, 445, 446, 447], "umask": 48, "unabl": [36, 49, 52, 53, 58, 62, 68, 74, 76, 149, 161], "unavail": [176, 266], "unbalanc": 49, "unbias": [120, 168, 198, 214, 267, 292], "unc": [62, 78, 79, 100], "uncach": 186, "uncertainti": [66, 75, 78, 175, 177, 178, 181], "unchang": [17, 65, 173, 234, 235, 236, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "unclear": 97, "uncom": [9, 16, 22, 52, 54, 58, 111, 114], "uncompress": [141, 145, 161], "unconstrain": [120, 228], "uncontrol": 65, "uncorrect": [6, 62, 75, 78, 79, 80, 100], "under": [6, 9, 102, 111, 158, 161, 168, 169, 173, 174, 175, 176, 177, 178, 181, 184, 194, 198, 221, 223, 229, 302, 358, 369, 370, 375, 390, 393, 397], "underflow": 324, "underli": [0, 88, 178, 181, 183, 188, 411], "underneath": [448, 450, 451, 457], "underscor": [132, 161, 176], "undershoot": 65, "understand": [60, 72, 82, 95, 118, 140, 161, 169, 171, 176, 183, 185, 220, 263, 268, 270, 271, 273, 276, 336, 360, 361, 366, 370, 377, 380, 386, 391, 435, 436, 437, 446, 447, 452, 469, 494, 495], "understood": [65, 277], "undirect": [402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 434], "unexpectedli": 70, "unfilt": [158, 161], "unfortun": [171, 175], "uniform": 88, "uniform_averag": 304, "uniformli": [138, 161, 169, 442, 448, 450, 451, 455, 457], "union": [83, 392, 394, 395], "uniqu": [29, 30, 31, 32, 33, 35, 49, 51, 58, 64, 85, 93, 99, 102, 141, 161, 162, 170, 186, 244, 250, 251, 343, 381, 384, 461, 462, 463], "unique_condit": 35, "unique_run": 33, "unit": [0, 6, 15, 55, 57, 120, 166, 168, 174, 175, 176, 188, 302, 328, 329, 351, 354, 381, 382, 383, 384, 385, 386, 387, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 473], "uniti": [146, 161], "univ": [120, 328, 329], "univari": [29, 33, 34, 96, 109, 118, 120, 170, 172, 174, 266, 271, 272, 298, 299, 300, 301, 303, 304, 359, 361, 366, 380, 386, 397, 425, 439, 447, 452, 494, 495], "univers": [0, 181, 183, 223], "universitair": 0, "universiteit": 0, "universit\u00e4t": 0, "universit\u00e9": [0, 176], "unix": [186, 297], "unknown": [22, 56, 90, 101, 114, 159, 161, 168, 195, 197, 198, 202, 206, 207, 208, 209, 210, 211, 213, 214, 217, 218, 219, 222, 225, 227, 228, 230, 231, 232, 244, 245, 258], "unlabel": 181, "unless": [123, 175, 176, 282, 351, 397, 442, 473], "unlik": [14, 20, 173, 178, 186, 378], "unmask": [32, 33, 44, 121, 130, 141, 144, 161, 185, 187, 305, 306, 380, 383, 386, 495], "unmodul": [63, 71], "unnecessari": [3, 131, 161, 329], "unpair": [73, 81, 118, 159, 161, 180, 272, 349, 409, 436, 439, 452, 494], "unpaired_design_matrix": 79, "unpen": 175, "unrealist": 175, "unrel": [176, 188], "unrestrict": [193, 196, 200, 203, 204, 220], "unscrub": 198, "unsign": [351, 397], "unstructur": 39, "unsuit": [149, 161], "unsupervis": [104, 181, 305, 306, 336, 349, 458, 460], "unsurprisingli": 79, "unthreshold": [23, 80, 115, 120, 123, 181, 197, 221, 245, 277, 279], "until": [277, 397], "unus": [133, 159, 161, 317, 318, 381, 382, 383, 384, 385, 386, 387], "unusu": 168, "unwant": [65, 120, 198], "unwarp": 181, "unzip": 184, "up": [0, 3, 6, 33, 36, 47, 83, 85, 88, 93, 97, 103, 120, 129, 131, 132, 146, 147, 149, 154, 156, 161, 165, 171, 172, 174, 175, 177, 178, 179, 181, 184, 188, 198, 229, 282, 323, 326, 350, 397, 433, 458, 477, 495], "updat": [40, 92, 99, 101, 129, 130, 131, 132, 133, 136, 140, 141, 146, 149, 155, 156, 158, 161, 184, 234, 235, 236, 254, 277, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461], "update_20190916_readm": 254, "update_yeo2011_schaefer2018_labelnam": [226, 254], "upgrad": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 68, 88, 90, 91, 93, 97, 98, 99, 102, 103, 104, 105, 106, 122, 129, 141, 143, 149, 154, 156, 161], "upload": 123, "upon": [0, 101, 194, 196, 278, 336, 349, 432, 445, 446, 447, 454, 461, 463, 471], "upper": [14, 40, 175, 326, 328, 329, 391, 394, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 437, 439, 440, 442, 443, 445, 446, 447, 448, 451, 455, 457], "upper_cutoff": [88, 159, 161, 391, 394], "upstream": [176, 184], "urgent": 184, "url": [0, 3, 22, 23, 31, 32, 37, 38, 40, 41, 44, 48, 49, 51, 56, 58, 62, 69, 70, 97, 98, 102, 114, 115, 120, 150, 158, 159, 161, 162, 163, 165, 166, 167, 169, 170, 173, 174, 175, 181, 183, 193, 194, 195, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 235, 238, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 266, 267, 272, 274, 275, 276, 277, 279, 281, 282, 283, 286, 287, 292, 297, 300, 301, 305, 323, 327, 328, 329, 351, 354, 377, 378, 397, 433, 460, 461, 466, 473, 474], "urls_path": [264, 283], "ursina": [120, 197, 245], "us": [0, 1, 2, 4, 6, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 26, 29, 30, 31, 32, 33, 36, 38, 40, 41, 42, 43, 44, 46, 47, 49, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 88, 89, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 112, 113, 114, 115, 118, 120, 121, 122, 129, 130, 131, 132, 133, 134, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 167, 169, 170, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 187, 188, 194, 195, 198, 199, 200, 201, 202, 203, 205, 212, 213, 219, 220, 221, 223, 224, 229, 233, 235, 237, 238, 239, 240, 241, 242, 244, 247, 253, 254, 257, 259, 262, 283, 290, 291, 293, 294, 296, 303, 312, 313, 314, 315, 323, 325, 326, 327, 328, 329, 330, 334, 335, 337, 340, 341, 342, 344, 346, 347, 348, 353, 357, 358, 363, 368, 372, 374, 375, 389, 390, 392, 393, 394, 395, 398, 399, 400, 401, 426, 427, 428, 448, 456, 458, 460, 464, 465, 466, 467, 468, 472, 473, 474, 478, 479, 480, 489, 493, 494, 495], "usa": 0, "usabl": [144, 161, 173, 175, 196, 276, 302], "usag": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 140, 149, 153, 158, 161, 162, 176, 177, 180, 183, 184, 185, 193, 196, 200, 203, 204, 220, 223, 274, 281, 286, 455, 482, 495], "usecas": [97, 165, 169, 171, 176], "useless": 65, "user": [18, 29, 34, 39, 58, 65, 66, 99, 106, 120, 123, 129, 130, 131, 132, 133, 143, 146, 147, 149, 150, 154, 156, 157, 158, 159, 161, 175, 176, 177, 178, 181, 182, 184, 185, 188, 190, 198, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 482, 484, 485, 493], "userguid": 169, "userwarn": [3, 9, 10, 11, 16, 18, 20, 21, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 61, 62, 69, 70, 71, 76, 77, 78, 83, 85, 90, 93, 94, 97, 99, 100, 103, 108, 111, 113, 116], "usr": [250, 251], "usual": [33, 48, 76, 78, 93, 156, 161, 167, 169, 170, 171, 176, 178, 181, 183, 184, 187, 244, 300, 301, 316, 323, 391, 443, 459], "utc": [176, 493], "util": [26, 43, 44, 48, 50, 86, 87, 102, 105, 106, 132, 134, 141, 145, 152, 156, 161, 166, 176, 234, 235, 236, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 287, 288, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 374, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461, 487], "u\u011furbil": [120, 194, 274], "v": [3, 6, 24, 28, 32, 33, 35, 38, 45, 51, 64, 65, 75, 78, 79, 88, 96, 97, 109, 118, 120, 130, 132, 161, 168, 169, 173, 175, 176, 182, 184, 195, 196, 206, 212, 213, 214, 221, 227, 231, 257, 262, 266, 267, 270, 272, 277, 279, 280, 292, 298, 300, 302, 304, 359, 361, 364, 366, 367, 377, 380, 386, 397, 425, 440, 444, 447, 452, 454, 474, 494], "v0": [52, 57, 58, 146, 149, 154, 156, 161, 226, 254], "v1": [129, 132, 146, 154, 156, 161], "v2": [149, 154, 161], "v3": [129, 161], "v4": [62, 132, 161], "va": 12, "val_scor": 34, "valentina": [120, 194, 274], "valid": [6, 28, 32, 33, 36, 37, 40, 42, 44, 45, 51, 98, 102, 105, 106, 107, 118, 120, 130, 131, 136, 139, 152, 156, 157, 161, 162, 164, 169, 172, 176, 188, 198, 227, 236, 246, 249, 255, 266, 274, 298, 299, 300, 301, 302, 303, 304, 307, 336, 337, 338, 343, 354, 358, 361, 366, 371, 372, 377, 378, 381, 384, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 457, 464, 470, 475, 476, 477, 494, 495], "valid_method": 459, "validationerror": 176, "valu": [3, 4, 6, 9, 14, 15, 17, 23, 24, 30, 31, 33, 40, 42, 44, 47, 52, 54, 55, 58, 61, 65, 67, 68, 71, 76, 78, 87, 88, 89, 90, 91, 93, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 113, 115, 116, 123, 127, 129, 130, 132, 133, 134, 138, 141, 142, 146, 149, 153, 154, 156, 161, 162, 165, 166, 169, 170, 172, 173, 174, 176, 178, 180, 181, 183, 186, 188, 195, 226, 231, 234, 235, 236, 238, 240, 242, 244, 246, 247, 248, 250, 251, 253, 254, 255, 257, 258, 268, 272, 277, 281, 283, 286, 289, 290, 293, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 318, 323, 324, 326, 327, 328, 329, 332, 336, 337, 339, 345, 349, 351, 352, 353, 354, 355, 358, 360, 365, 369, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 431, 432, 433, 434, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 469, 470, 471, 472, 473, 474, 477, 479, 492], "valuabl": [65, 176], "value_count": 100, "valueerror": [129, 132, 161, 364, 368, 381, 382, 384, 385, 477], "vamsi": [120, 212], "van": [120, 123, 194, 202, 221, 248, 274, 277, 279, 377, 378], "vanass": [0, 154, 161], "vanessa": [120, 221, 277, 279], "var": 377, "vari": [14, 34, 65, 70, 93, 94, 101, 155, 161, 165, 171, 175, 183, 226, 235, 236, 238, 355], "variabl": [4, 6, 14, 39, 42, 43, 44, 56, 67, 74, 76, 93, 99, 100, 108, 120, 131, 138, 156, 158, 161, 163, 168, 169, 170, 172, 173, 175, 176, 178, 181, 186, 188, 196, 215, 243, 288, 298, 299, 300, 301, 302, 303, 304, 323, 327, 336, 349, 365, 377], "varianc": [6, 33, 40, 42, 48, 55, 56, 57, 58, 65, 68, 79, 149, 152, 153, 161, 168, 173, 175, 181, 188, 234, 238, 298, 299, 300, 301, 305, 306, 324, 326, 328, 329, 332, 333, 336, 345, 349, 354, 360, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 433, 459, 461, 464, 473, 474], "variance_img": [70, 333], "variance_statmap": [62, 74, 376], "variance_threshold": 42, "variancethreshold": 42, "variant": [169, 192, 194, 220], "variat": [44, 76, 100, 105, 106, 120, 130, 161, 173, 174, 181, 281, 335, 351, 397], "varieti": [63, 99, 167, 168, 169, 170, 171, 176, 181], "variou": [3, 20, 30, 31, 39, 48, 105, 106, 149, 152, 156, 161, 168, 170, 171, 176, 178, 181, 187, 246, 300, 301, 378, 459, 477], "varoquaux": [0, 44, 48, 49, 51, 56, 98, 120, 123, 124, 125, 127, 128, 134, 136, 139, 143, 146, 147, 148, 149, 151, 161, 162, 163, 165, 166, 167, 168, 170, 174, 204, 220, 221, 234, 235, 249, 252, 277, 279, 300, 301, 305, 306, 460, 461, 466], "varoquaux2012": 183, "vasco": [0, 158, 161], "vastli": 99, "vaudois": 0, "vbm": [168, 181, 183], "vc": 184, "vcov": [326, 328, 329], "vec": 241, "vec_to_sym_matrix": [142, 161], "vector": [29, 32, 33, 34, 35, 40, 44, 51, 70, 83, 97, 98, 102, 105, 106, 122, 142, 161, 168, 169, 171, 181, 234, 298, 299, 300, 301, 323, 326, 327, 328, 329, 332, 334, 443, 477], "vectorize_word": [123, 277, 279], "vega10": 12, "vega20": 12, "vega20b": 12, "vega20c": 12, "ventral": [3, 16, 22, 31, 32, 33, 38, 93, 97, 114, 116, 120, 122, 168, 182, 188, 213, 266, 448, 450, 451], "ventralattent": 262, "ventricl": [6, 198], "venv": [176, 493], "verbos": [33, 35, 36, 42, 44, 48, 49, 52, 53, 54, 55, 56, 57, 58, 61, 88, 90, 91, 97, 98, 99, 102, 105, 146, 161, 188, 235, 236, 238, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 298, 299, 300, 301, 302, 303, 304, 305, 306, 331, 336, 339, 345, 349, 351, 355, 366, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 397, 458, 459, 460, 461, 466, 479], "veri": [4, 30, 31, 32, 35, 36, 39, 40, 42, 44, 49, 54, 65, 74, 75, 76, 78, 85, 93, 103, 122, 149, 161, 162, 163, 165, 168, 169, 170, 171, 174, 175, 176, 178, 181, 184, 188, 300, 301, 382, 385, 387, 428, 445, 472], "verifi": [65, 100, 176, 188], "vern": [120, 202, 212, 248], "versatil": [171, 182, 493], "version": [9, 19, 20, 22, 32, 35, 36, 40, 41, 42, 47, 48, 51, 52, 53, 54, 55, 56, 58, 61, 68, 69, 70, 88, 90, 91, 93, 97, 98, 99, 102, 103, 104, 105, 106, 111, 114, 122, 127, 129, 132, 133, 134, 136, 139, 140, 141, 142, 143, 144, 146, 148, 149, 152, 154, 155, 156, 157, 158, 161, 174, 175, 176, 184, 186, 188, 193, 198, 203, 213, 218, 226, 232, 234, 235, 236, 240, 241, 242, 244, 246, 247, 249, 251, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 266, 268, 269, 277, 279, 281, 282, 283, 286, 287, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 324, 332, 333, 336, 339, 345, 349, 351, 353, 354, 358, 363, 364, 365, 366, 368, 369, 370, 373, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 390, 393, 397, 433, 444, 445, 448, 450, 451, 458, 459, 460, 461, 463, 464, 465, 467, 469, 470, 473, 477, 479, 492], "versionad": [176, 184], "versionchang": [176, 184, 367], "versiontag": 184, "versu": [6, 65, 67, 78, 79, 93, 97, 112, 168, 169, 181, 213], "vert": [22, 114], "vertex": [9, 24, 111, 181, 256, 307, 312, 314, 448, 449, 450, 451, 477], "vertic": [22, 37, 41, 65, 71, 79, 114, 115, 131, 141, 161, 162, 181, 272, 307, 312, 317, 318, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 448, 449, 450, 451, 457], "vertical_checkerboard": [64, 65, 217], "vetor": 234, "vfonov": 267, "vhtf6": 272, "vi": 51, "via": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 120, 122, 125, 161, 163, 164, 168, 171, 174, 176, 177, 186, 201, 227, 247, 303, 304, 336, 345, 389, 390, 391, 393, 394, 432, 437, 439, 440, 445, 446, 447], "vidaurr": [120, 194, 274], "video": [64, 176], "vienna": 0, "viergev": [120, 162, 234], "view": [0, 6, 13, 14, 16, 22, 23, 33, 37, 42, 52, 54, 58, 61, 62, 65, 69, 70, 74, 83, 102, 114, 115, 116, 130, 131, 133, 143, 152, 154, 158, 161, 168, 173, 175, 183, 184, 188, 230, 298, 299, 300, 301, 305, 306, 369, 383, 386, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 434, 437, 439, 440, 442, 443, 445, 446, 447, 448, 450, 451, 453, 454, 456, 459, 492, 495], "view_connectom": [22, 52, 54, 58, 114, 146, 147, 149, 154, 161, 454, 456, 492], "view_img": [3, 29, 133, 146, 147, 155, 158, 159, 161, 168, 492], "view_img_on_surf": [9, 111, 146, 147, 149, 154, 161, 453, 454, 456, 457, 495], "view_init": 24, "view_mark": [146, 147, 149, 154, 161, 453, 454, 492], "view_stat_map": [146, 161], "view_surf": [9, 22, 111, 114, 146, 149, 161, 453, 454, 455, 456, 495], "view_typ": [10, 50, 86, 87, 152, 161, 166, 445, 446], "viewabl": [149, 161], "viewer": [29, 146, 161, 168, 187, 454, 492], "viginia": 0, "vijayan": [0, 131, 161], "vinc": [120, 197, 245], "vincent": [0, 23, 44, 49, 115, 120, 124, 161, 174, 183, 197, 200, 220, 222, 245, 252, 272, 287, 378], "vine": [120, 328, 329], "virgil": [0, 124, 161], "virginia": 0, "viridi": [14, 154, 161], "viridis_r": 443, "virtual": [176, 493], "visibl": [51, 78, 155, 161, 167, 369, 442, 448, 450, 451, 455, 457, 492], "vision": [6, 229], "visit": [120, 162, 183, 198, 212], "visual": [1, 7, 12, 14, 27, 28, 32, 33, 39, 45, 47, 48, 50, 56, 65, 67, 69, 70, 71, 78, 79, 82, 85, 86, 87, 88, 90, 91, 93, 95, 100, 102, 104, 105, 106, 108, 112, 113, 120, 121, 130, 131, 141, 143, 146, 152, 154, 161, 162, 163, 164, 172, 176, 177, 180, 183, 185, 187, 196, 200, 213, 216, 219, 232, 243, 245, 246, 252, 255, 262, 266, 267, 271, 272, 274, 276, 280, 288, 355, 356, 359, 361, 362, 364, 366, 367, 369, 373, 380, 383, 386, 388, 391, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 436, 437, 438, 444, 445, 446, 447, 450, 451, 452, 479, 494, 495], "visual_comput": [64, 65, 67, 112, 217], "visual_left_hand_button_press": [64, 65, 67, 112, 217], "visual_right_hand_button_press": [64, 65, 67, 112, 217], "visualis": 183, "vittorio": [120, 198], "vivo": [120, 224, 253], "vladimir": [120, 198, 214, 267, 292], "vmax": [14, 40, 44, 49, 50, 52, 53, 54, 55, 56, 57, 58, 75, 78, 79, 83, 89, 99, 102, 105, 107, 116, 127, 129, 149, 161, 166, 432, 433, 437, 439, 440, 442, 445, 446, 447, 448, 450, 451, 453, 454, 455, 457, 492], "vmhc": 242, "vmin": [9, 14, 31, 36, 40, 44, 49, 50, 52, 53, 54, 56, 57, 58, 79, 83, 111, 116, 127, 131, 132, 147, 149, 161, 166, 432, 433, 437, 439, 440, 442, 445, 446, 447, 448, 450, 451, 454, 455, 457], "vocabulari": [103, 123, 181, 183, 221, 277, 279], "vogel": [0, 58, 120, 149, 161, 205, 225, 260, 261], "voic": 65, "vol": 302, "vol_to_surf": [9, 37, 67, 108, 111, 112, 113, 143, 152, 154, 161, 177, 442, 448, 449, 450, 451, 455, 492], "vol_to_surf_kwarg": [9, 111, 154, 161, 455], "volum": [8, 16, 27, 31, 32, 36, 39, 43, 48, 54, 56, 61, 67, 78, 86, 90, 99, 112, 116, 120, 122, 129, 131, 132, 143, 146, 154, 161, 167, 173, 174, 181, 182, 183, 186, 190, 195, 198, 212, 219, 244, 246, 249, 266, 276, 281, 298, 299, 300, 301, 303, 304, 305, 306, 336, 358, 366, 369, 370, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 398, 400, 401, 433, 437, 442, 446, 451, 452, 454, 461, 462, 463, 467, 473, 477, 479, 492, 493, 494, 495], "volumetr": [9, 23, 111, 115, 177, 186, 397], "volumn": [56, 377], "volunt": 173, "vote": 169, "vox_offset": [56, 90, 101], "voxel": [3, 15, 25, 28, 33, 36, 37, 39, 40, 41, 44, 45, 46, 49, 50, 58, 59, 65, 67, 68, 73, 78, 80, 81, 83, 86, 88, 89, 91, 97, 99, 101, 102, 105, 108, 118, 120, 122, 130, 136, 139, 140, 141, 147, 156, 158, 161, 165, 166, 168, 170, 171, 172, 174, 177, 178, 179, 181, 182, 183, 186, 188, 195, 198, 215, 216, 219, 226, 229, 232, 242, 250, 251, 258, 263, 267, 268, 281, 299, 302, 303, 304, 305, 306, 324, 331, 332, 336, 345, 349, 351, 352, 353, 354, 356, 358, 359, 360, 369, 370, 373, 376, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 392, 394, 397, 410, 425, 428, 433, 436, 441, 447, 452, 458, 459, 460, 461, 462, 463, 467, 468, 469, 470, 471, 477, 478, 479, 492, 494, 495], "voxel_ratio": 49, "voxel_sign": [382, 385, 387, 461], "voxel_wis": 16, "voxelwis": [336, 349], "vrije": 0, "vscode": [149, 161], "vstack": [6, 40, 41, 58, 68, 69, 74, 79, 103], "vt": [3, 18, 93], "vu": 0, "vulner": [120, 155, 161, 212], "vv": 123, "vxxx": 219, "w": [37, 44, 58, 106, 120, 162, 194, 205, 226, 231, 232, 234, 236, 254, 257, 258, 260, 264, 274, 282, 303, 304], "w_": [303, 304], "wa": [0, 3, 40, 54, 63, 67, 70, 71, 88, 90, 91, 102, 105, 106, 112, 122, 123, 129, 131, 146, 153, 154, 155, 156, 157, 161, 168, 170, 173, 175, 178, 184, 196, 198, 229, 234, 253, 254, 303, 304, 305, 306, 318, 336, 343, 349, 351, 380, 381, 382, 383, 384, 385, 386, 387, 433, 442, 448, 450, 451, 455, 457, 458, 459, 460, 461, 464, 479], "wager": [120, 123, 221, 277, 279, 354, 473], "wagstyl": [0, 131, 161], "wai": [3, 6, 61, 62, 65, 70, 71, 74, 75, 83, 97, 108, 120, 122, 123, 153, 154, 156, 161, 162, 164, 167, 168, 169, 171, 174, 175, 176, 177, 178, 181, 186, 188, 279, 300, 301, 326, 328, 329, 374, 433, 458, 492, 493], "wait": [123, 175], "wald": [326, 328, 329], "walk": 183, "walker": [166, 461, 463], "wall": [23, 115, 175], "wang": [0, 120, 129, 130, 131, 132, 153, 154, 156, 158, 159, 161, 223, 281], "want": [0, 2, 6, 9, 14, 15, 42, 49, 54, 65, 69, 70, 71, 77, 85, 93, 97, 99, 111, 118, 122, 123, 162, 169, 171, 175, 176, 178, 187, 188, 277, 279, 303, 304, 339, 369, 378, 450, 457, 492, 493], "ward": [90, 165, 181, 182, 198, 384, 459, 479], "ward_labels_img": 49, "ward_parcel": 49, "ward_tre": 49, "warn": [3, 11, 16, 20, 29, 48, 50, 53, 56, 65, 69, 74, 83, 88, 90, 92, 103, 129, 130, 131, 132, 133, 146, 147, 149, 154, 156, 158, 159, 161, 168, 176, 246, 247, 255, 333, 339, 343, 356, 380, 381, 382, 383, 384, 385, 386, 387, 452, 461], "warrington": [0, 131, 161], "washington": [0, 223], "waskom": [0, 124, 161], "wasn": 175, "wassermann": [0, 120, 127, 146, 161, 204, 249], "wast": 175, "watch": [48, 49, 50, 52, 54, 55, 84, 88, 91, 104, 149, 161, 164, 182, 183, 188, 203, 263, 495], "watkin": [120, 228, 255], "wdesign": [158, 161], "we": [0, 2, 3, 4, 6, 9, 11, 14, 18, 19, 20, 22, 23, 24, 25, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 121, 122, 123, 129, 131, 139, 147, 148, 149, 154, 156, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 175, 177, 178, 181, 183, 184, 185, 186, 187, 188, 204, 224, 227, 241, 250, 251, 268, 277, 279, 303, 304, 305, 326, 328, 329, 349, 353, 361, 365, 373, 374, 375, 389, 391, 392, 394, 401, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 436, 461, 463, 479, 492, 493], "weaker": [51, 65, 78], "weakli": 175, "web": [16, 120, 123, 146, 149, 161, 176, 221, 277, 279, 336, 349, 453, 455, 456, 457, 471, 492], "webpag": 123, "websit": [3, 42, 74, 134, 146, 161, 176, 194, 242, 255, 276], "webster": [102, 120, 162, 397], "wednesdai": [176, 493], "weeda": [75, 120, 331], "week": [176, 184], "weekli": [176, 183], "wegrzyn": [0, 153, 161], "weigh": 176, "weight": [6, 29, 39, 42, 43, 44, 122, 123, 149, 161, 162, 169, 171, 172, 175, 176, 178, 188, 212, 214, 221, 242, 267, 277, 279, 298, 299, 300, 301, 303, 304, 333, 376, 453, 465, 495], "weight_img": [29, 42, 97, 168, 188], "weighted_connectivity_graph": [129, 161], "weird": 123, "welcom": [176, 184, 493], "well": [3, 6, 15, 44, 48, 51, 58, 65, 66, 68, 78, 88, 99, 139, 146, 153, 155, 161, 162, 163, 165, 166, 168, 169, 171, 174, 176, 178, 181, 183, 198, 201, 204, 214, 227, 228, 234, 235, 236, 249, 255, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 355, 369, 378, 380, 381, 382, 383, 384, 385, 386, 387, 458, 459, 460, 461, 479], "wellcom": [0, 181, 229], "went": 123, "were": [0, 6, 18, 23, 40, 49, 58, 62, 65, 70, 78, 90, 93, 97, 100, 107, 108, 113, 115, 122, 127, 129, 149, 152, 156, 157, 158, 161, 168, 175, 176, 178, 194, 198, 205, 212, 214, 216, 219, 228, 229, 277, 279, 354, 384, 387, 473, 479], "weren": 175, "western": 0, "wget": 184, "wgreen": [120, 323, 327], "what": [15, 56, 65, 70, 108, 113, 157, 169, 175, 179, 184, 186, 188, 235, 323, 327, 360, 374, 474, 492, 495], "whatev": [153, 161], "whats_new": 184, "whatsnew": [129, 161], "whatsoev": 175, "wheel": 184, "when": [2, 3, 4, 8, 9, 16, 24, 27, 54, 58, 63, 65, 66, 67, 71, 74, 88, 90, 91, 93, 99, 101, 102, 105, 106, 111, 112, 118, 122, 123, 129, 130, 131, 132, 133, 134, 136, 140, 141, 142, 144, 147, 149, 152, 153, 156, 157, 158, 161, 162, 163, 165, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 180, 181, 184, 187, 200, 201, 234, 242, 244, 247, 253, 254, 270, 272, 277, 279, 298, 299, 300, 301, 302, 303, 304, 324, 325, 329, 330, 333, 336, 349, 351, 369, 371, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 388, 397, 398, 400, 401, 429, 439, 440, 445, 446, 447, 448, 450, 451, 452, 454, 455, 457, 459, 464, 471, 472, 473, 477, 479, 492, 494], "whenev": [66, 169, 352], "where": [2, 6, 9, 15, 16, 23, 24, 40, 44, 50, 68, 76, 83, 86, 93, 99, 105, 111, 115, 118, 131, 139, 153, 161, 162, 166, 168, 173, 174, 176, 178, 181, 184, 187, 188, 216, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 287, 288, 298, 299, 300, 301, 303, 304, 323, 326, 327, 328, 329, 332, 336, 349, 351, 388, 408, 410, 413, 415, 417, 419, 421, 423, 425, 429, 432, 435, 437, 440, 441, 442, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 461, 463, 470, 471, 477, 492], "wherea": [15, 49, 155, 161, 165, 169, 187, 392, 394, 395, 459], "wherein": 63, "whether": [6, 9, 68, 88, 93, 102, 111, 133, 147, 161, 168, 176, 178, 184, 188, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 258, 263, 266, 267, 268, 272, 274, 275, 276, 277, 279, 281, 287, 305, 306, 333, 351, 352, 353, 358, 366, 368, 369, 370, 373, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 394, 397, 398, 400, 401, 439, 442, 447, 448, 449, 451, 459, 461, 470, 471, 473, 474], "which": [0, 3, 6, 9, 12, 14, 15, 21, 22, 23, 25, 29, 30, 32, 33, 34, 36, 37, 40, 42, 44, 47, 49, 51, 58, 61, 65, 66, 67, 68, 74, 75, 78, 83, 88, 90, 93, 97, 99, 108, 111, 112, 113, 115, 120, 122, 123, 128, 129, 130, 132, 134, 139, 140, 143, 144, 145, 146, 147, 149, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 166, 167, 168, 169, 171, 173, 174, 175, 176, 177, 178, 181, 183, 184, 186, 187, 188, 194, 198, 241, 248, 250, 251, 253, 254, 257, 258, 263, 277, 278, 279, 280, 284, 285, 286, 288, 298, 299, 300, 301, 302, 303, 304, 305, 306, 315, 323, 326, 327, 328, 329, 335, 336, 343, 344, 349, 351, 353, 358, 364, 369, 373, 375, 376, 381, 382, 383, 384, 385, 386, 387, 390, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 454, 459, 461, 462, 463, 471, 477, 492, 493], "whichev": 176, "while": [3, 4, 6, 48, 55, 56, 65, 83, 93, 97, 99, 100, 103, 108, 113, 122, 129, 131, 134, 144, 146, 161, 167, 168, 173, 175, 176, 177, 183, 187, 188, 198, 246, 298, 299, 300, 301, 343, 397], "white": [11, 24, 40, 42, 56, 65, 74, 88, 137, 152, 154, 155, 161, 175, 187, 188, 198, 207, 208, 209, 210, 211, 214, 223, 263, 267, 281, 286, 291, 292, 293, 294, 298, 299, 300, 301, 305, 306, 307, 339, 377, 383, 386, 390, 393, 448, 449, 450, 451, 454, 455, 457, 459, 476, 477], "white_left": [207, 208, 209, 210, 211, 286, 477], "white_matt": 56, "white_matter_map": [42, 74, 223, 281], "white_right": [207, 208, 209, 210, 211, 286], "whiten": [323, 327, 328, 329], "whitened_design": 327, "whitened_i": 328, "whitened_residu": 328, "whitened_x": [323, 327], "whitening_": 234, "whitespac": [145, 161], "whl": 184, "who": [0, 123, 188, 194, 203, 378], "whole": [4, 6, 14, 42, 48, 50, 68, 88, 93, 120, 123, 131, 155, 161, 173, 174, 176, 177, 182, 187, 188, 201, 214, 215, 229, 247, 267, 277, 279, 289, 292, 298, 299, 300, 301, 305, 306, 383, 386, 390, 393, 397, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 445, 459, 461, 492], "whose": [9, 67, 111, 112, 175, 181, 235, 236, 238, 315, 327, 361, 477], "why": [3, 93, 175, 188], "wide": [55, 69, 105, 120, 168, 169, 171, 175, 176, 213, 264, 282, 302], "width": [14, 32, 51, 65, 93, 159, 161, 181, 188, 298, 299, 300, 301, 305, 306, 336, 349, 351, 371, 381, 382, 383, 384, 385, 386, 387, 388, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 433, 434, 437, 439, 440, 443, 444, 445, 446, 447, 453, 454, 459, 461, 463, 469, 471], "width_ratio": [79, 99], "width_tf": 41, "width_tf_i": 41, "width_view": [159, 161, 454], "wiesner": [0, 149, 161], "wig": [58, 120, 205, 225, 260, 261], "wiht": 40, "wiki": 178, "wikipedia": 178, "wildcard": [4, 186, 187, 297, 364], "wilei": [102, 120, 201, 207, 208, 209, 210, 211, 231, 247, 257, 286, 328, 329, 354, 397, 473], "william": [23, 115, 120, 194, 197, 222, 245, 274, 287, 323, 327], "williamson": [0, 129, 130, 161], "wim": [120, 214, 267], "window": [176, 336, 349, 471, 493], "winkler": [102, 120, 194, 274, 397], "winner": 227, "wip": 176, "wisconsin": 0, "wise": [6, 15, 40, 47, 55, 80, 93, 99, 102, 129, 158, 161, 173, 177, 181, 188, 298, 299, 300, 301, 351, 397], "wish": [65, 78, 105, 156, 161, 176, 181, 184, 229, 267, 268, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 434, 437, 439, 440, 443, 445, 446, 447], "within": [37, 47, 55, 65, 66, 78, 87, 99, 102, 149, 152, 158, 161, 165, 167, 173, 177, 180, 198, 298, 299, 302, 333, 336, 338, 339, 343, 349, 353, 354, 373, 381, 382, 383, 384, 385, 386, 387, 395, 402, 403, 404, 405, 406, 407, 409, 412, 414, 416, 418, 420, 422, 424, 433, 434, 459, 462, 471, 473], "without": [3, 6, 14, 23, 48, 50, 65, 77, 80, 83, 93, 101, 110, 112, 113, 115, 116, 118, 123, 130, 131, 140, 149, 158, 161, 163, 166, 172, 174, 175, 181, 186, 188, 233, 247, 352, 358, 378, 380, 383, 386, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 433, 440, 445, 492, 495], "wjtyq": [203, 263], "wjvd5": [204, 249], "wlsmodel": 327, "wm": [11, 21, 56, 88, 155, 161, 188, 214, 267, 298, 299, 300, 301, 305, 306, 378, 383, 386, 390, 393, 459], "wm_csf": [56, 339, 377, 378], "wm_mask_img": 293, "wm_mni152_templ": 294, "wn": [158, 161], "woldorff": [120, 231, 257], "wolf": [56, 58, 120, 175, 377, 378], "wolfgang": [120, 224, 253], "women": 0, "wood": [23, 115, 120, 222, 287], "woolrich": [120, 162, 194, 274], "wor": 176, "word": [6, 14, 76, 93, 103, 105, 123, 168, 169, 176, 216, 221, 229, 277, 279], "word_frequ": [103, 123, 221, 277, 279], "work": [0, 2, 3, 4, 6, 10, 11, 15, 16, 18, 20, 23, 25, 29, 30, 31, 32, 34, 35, 36, 38, 39, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 61, 62, 69, 70, 71, 74, 76, 83, 84, 85, 88, 90, 91, 93, 94, 97, 99, 100, 101, 102, 104, 105, 108, 111, 113, 114, 115, 131, 141, 142, 149, 156, 157, 161, 162, 167, 168, 169, 171, 175, 176, 177, 178, 184, 186, 187, 188, 194, 198, 234, 235, 236, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 349, 376, 380, 381, 382, 383, 384, 385, 386, 387, 428, 434, 439, 458, 459, 460, 461, 470, 479, 481, 483], "workaround": [142, 161], "workbench": 12, "worker": [36, 42, 43, 44, 48, 102, 105, 397], "workflow": [61, 176, 184, 378], "workshop": [120, 174, 198, 246], "workspac": 184, "world": [40, 186, 188, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 431, 434, 443], "worri": [6, 24, 122], "wors": [65, 304], "worslei": [120, 354, 473], "worst": 168, "worth": 76, "would": [6, 9, 14, 42, 50, 58, 65, 74, 77, 103, 111, 116, 123, 131, 133, 154, 158, 161, 168, 175, 176, 177, 178, 184, 297, 298, 299, 300, 301, 303, 304, 306, 336, 338, 339, 343, 349, 351, 374, 388, 393, 433], "wouter": [75, 120, 331], "wrap": [49, 52, 56, 168, 469], "wrapper": [298, 299, 315, 351], "wresid": [158, 161], "write": [6, 41, 70, 118, 123, 129, 156, 158, 161, 175, 176, 184, 312, 313, 314, 376, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 469], "write_imgs_to_path": [132, 161], "write_tmp_img": [132, 161], "written": [175, 229, 469], "wrong": [139, 157, 161, 178], "wrt": 242, "wspace": [40, 44], "wustl": 227, "www": [0, 2, 22, 23, 37, 40, 41, 49, 51, 56, 70, 98, 101, 102, 114, 115, 116, 120, 123, 162, 163, 165, 170, 173, 174, 183, 193, 194, 195, 196, 197, 198, 200, 201, 202, 206, 213, 214, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 242, 243, 244, 245, 246, 247, 252, 255, 256, 262, 266, 267, 268, 272, 274, 275, 276, 277, 279, 281, 284, 285, 287, 292, 300, 301, 354, 377, 378, 397, 433, 473, 474], "www0": [120, 174], "wy": [158, 161], "x": [3, 6, 9, 13, 14, 15, 24, 31, 33, 35, 37, 40, 41, 44, 52, 54, 56, 58, 62, 65, 68, 70, 74, 83, 90, 91, 93, 100, 103, 111, 120, 131, 132, 136, 141, 143, 149, 154, 156, 158, 161, 168, 173, 176, 181, 184, 187, 188, 194, 198, 206, 229, 234, 246, 252, 274, 275, 298, 299, 300, 301, 303, 304, 305, 306, 307, 312, 323, 326, 327, 328, 329, 336, 345, 349, 356, 377, 380, 381, 383, 384, 386, 387, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 434, 437, 439, 440, 443, 445, 446, 447, 448, 449, 450, 451, 454, 457, 458, 460, 461, 462, 466, 470, 471, 472, 478, 490, 492], "x1": [63, 93, 477], "x1_post": 358, "x1_pre": 358, "x2": [63, 93], "x20": 477, "x27": [49, 62, 88, 90, 479], "x2_post": 358, "x2_pre": 358, "x3": 63, "x4": 63, "x64": [3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 61, 65, 69, 70, 71, 74, 76, 77, 78, 83, 85, 88, 90, 91, 92, 94, 97, 102, 103, 104, 105, 106, 111, 116], "x_figure_filenam": 41, "x_inv": [458, 460], "x_new": [305, 306, 336, 349, 380, 383, 386, 458, 460], "x_random_filenam": 41, "x_red": [458, 460], "x_test": [31, 41, 44, 298, 299, 300, 301, 302], "x_train": [31, 41, 44], "xavier": 120, "xaxi": [48, 49], "xerr": [51, 98], "xi": [44, 120, 226, 254], "xiaop": [120, 201, 247], "xlabel": [6, 25, 30, 32, 34, 42, 48, 49, 51, 55, 58, 66, 98, 187], "xlim": [25, 30, 187], "xmean_": [303, 304], "xmin": [30, 432, 433, 434, 437, 439, 440, 443, 445, 446, 447], "xn_post": 358, "xn_pre": 358, "xor": 123, "xprojector": [14, 418, 424, 426], "xslicer": [9, 15, 111, 419, 425, 427], "xstd_": [303, 304], "xtick": [32, 34, 35, 44, 93], "xu": [120, 194, 274], "xx": 44, "xxxx": 176, "xy_indices_of_special_voxel": 40, "xyz": [15, 368, 408, 413, 415, 419, 425], "xyzt_unit": [56, 90, 101], "xz": [13, 14, 15, 49, 336, 349, 416, 417, 426, 427, 432, 434, 437, 439, 440, 443, 445, 446, 447, 471, 492], "xzprojector": [13, 14, 420, 422, 426], "xzslicer": [15, 49, 421, 423, 427], "y": [6, 14, 15, 24, 31, 33, 34, 35, 36, 37, 40, 41, 44, 52, 54, 58, 62, 68, 69, 83, 91, 93, 100, 102, 105, 106, 116, 120, 123, 141, 143, 146, 158, 161, 168, 169, 173, 176, 181, 184, 187, 188, 218, 234, 235, 236, 252, 275, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 317, 318, 323, 326, 327, 328, 329, 336, 344, 345, 349, 351, 356, 380, 381, 382, 383, 384, 385, 386, 387, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 434, 437, 439, 440, 443, 445, 446, 447, 448, 449, 450, 451, 454, 457, 458, 459, 460, 461, 462, 470, 471, 478, 492], "y_col": 41, "y_figure_filenam": 41, "y_pred": [29, 31, 34, 41, 43, 168, 298, 299, 300, 301, 303, 304], "y_pred_big": 41, "y_pred_larg": 41, "y_pred_ova": 35, "y_pred_ovo": 35, "y_pred_tal": 41, "y_random_filenam": 41, "y_row": 41, "y_shape": 41, "y_test": [31, 34, 41, 44, 298, 299, 300, 301, 302], "y_train": [31, 34, 41, 44], "y_true": 304, "yaddab": [120, 198], "yamashita": [40, 41, 120, 219, 276], "yan": [23, 115, 120, 222, 287], "yannick": [120, 124, 161, 168, 170, 200, 221, 272, 277, 279, 300, 301], "yarkoni": [120, 123, 221, 277, 279], "yaroslav": [0, 143, 146, 161], "yashar": [120, 377, 378, 474], "yasmin": [0, 129, 130, 131, 132, 158, 161, 183], "yasser": [120, 198], "yaxi": 49, "ye": [298, 299, 300, 301], "year": [42, 43, 120, 175, 184, 203, 263, 281], "yellow": 15, "yeo": [120, 190, 226, 254, 258, 429], "yeo2011_17networks_mni152_freesurferconformed1mm_liberalmask": [47, 479], "yeo_2011": [47, 479], "yeo_jneurophysiol11_mni152": [47, 479], "yeo_network": 254, "yet": [64, 79, 104, 120, 156, 161, 168, 176, 183, 445], "yh": 41, "yi": [37, 120], "yichun": [0, 159, 161], "yield": [23, 31, 39, 49, 76, 78, 83, 115, 123, 149, 152, 156, 161, 167, 168, 169, 170, 173, 174, 177, 178, 193, 277, 302, 306, 332, 336, 338, 343, 352, 373, 458], "ylabel": [25, 30, 32, 42, 48, 49, 55, 57, 58, 64, 65, 187], "ylim": 32, "ylorrd": 58, "ymean_": [303, 304], "ymin": [432, 433, 434, 437, 439, 440, 443, 445, 446, 447], "yml": 184, "yoichi": [40, 41, 120, 219, 276], "yop": [120, 328, 329], "york": [0, 120, 328, 329], "you": [0, 2, 4, 6, 9, 14, 15, 22, 23, 24, 32, 35, 36, 39, 40, 41, 42, 43, 44, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 68, 70, 74, 78, 85, 88, 90, 91, 93, 97, 98, 99, 102, 103, 104, 105, 106, 111, 114, 115, 118, 120, 122, 123, 141, 142, 146, 149, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 180, 181, 183, 184, 186, 187, 188, 194, 200, 221, 234, 235, 236, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 263, 266, 267, 268, 272, 275, 276, 277, 281, 282, 287, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 336, 338, 339, 343, 349, 380, 381, 382, 383, 384, 385, 386, 387, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 434, 437, 439, 440, 443, 445, 446, 447, 448, 450, 451, 454, 455, 457, 458, 459, 460, 461, 477, 492, 493, 495], "young": [48, 120, 182, 194, 198, 203, 223, 246, 274, 281], "your": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 121, 123, 163, 167, 168, 169, 171, 173, 184, 186, 188, 194, 233, 250, 251, 263, 268, 298, 299, 300, 301, 305, 306, 327, 383, 386, 459, 492, 495], "your_branch": 176, "your_fork": 176, "your_usernam": 176, "yprojector": [14, 414, 424, 426], "yslicer": [15, 91, 415, 425, 427], "yt_big": 41, "yt_larg": 41, "yt_tall": 41, "ytick": [30, 44, 48, 51, 98], "yukiyasu": [40, 41, 120, 219, 276], "yuko": [120, 197, 245], "yusuk": [40, 41, 120, 219, 276], "yvett": [0, 176], "yw": 41, "yx": [14, 15, 122, 336, 349, 420, 421, 426, 427, 432, 434, 437, 439, 440, 443, 445, 446, 447, 471, 492], "yxprojector": [14, 416, 422, 426], "yxslicer": [15, 417, 423], "yz": [14, 15, 31, 39, 336, 349, 422, 423, 426, 427, 432, 434, 437, 439, 440, 443, 445, 446, 447, 471, 492], "yzprojector": [14, 416, 420, 426], "yzslicer": [15, 39, 417, 421, 427], "y\u00fccel": [56, 120, 378], "z": [2, 13, 14, 15, 18, 24, 30, 33, 36, 40, 42, 43, 48, 52, 54, 58, 61, 62, 64, 65, 67, 68, 69, 74, 75, 78, 79, 80, 83, 86, 87, 93, 100, 102, 105, 106, 108, 113, 120, 133, 141, 143, 147, 158, 161, 176, 178, 181, 184, 187, 188, 198, 252, 277, 307, 312, 324, 331, 333, 335, 336, 349, 352, 356, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 397, 398, 400, 401, 405, 406, 407, 408, 409, 416, 417, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 437, 439, 440, 443, 445, 446, 447, 448, 449, 450, 451, 454, 457, 461, 462, 470, 471, 473, 478, 492], "z_image_path": 70, "z_img": 107, "z_map": [6, 33, 61, 62, 64, 65, 68, 69, 70, 74, 75, 76, 78, 80, 100, 336, 349], "z_map_ftest": 68, "z_score": [6, 61, 64, 65, 67, 68, 69, 70, 74, 75, 76, 78, 79, 80, 108, 112, 113, 324, 336, 349], "z_score_left": [108, 113], "z_scores_left": [108, 113], "z_scores_right": [108, 113], "z_slice": [18, 42, 105], "z_statmap": [62, 74], "z_val": 335, "z_val_left": [108, 113], "z_val_right": [108, 113], "z_valu": 107, "zack": [120, 173], "zaleski": [120, 163], "zarrar": 120, "zavitz": [23, 115, 120, 222, 287], "zealand": [102, 120, 397], "zenodo": 0, "zero": [6, 9, 14, 20, 22, 23, 36, 39, 44, 47, 53, 54, 68, 70, 76, 78, 93, 111, 114, 115, 127, 132, 149, 153, 157, 161, 162, 166, 168, 169, 173, 174, 175, 178, 181, 187, 188, 234, 235, 236, 238, 281, 298, 299, 300, 301, 303, 304, 305, 323, 328, 329, 343, 349, 351, 354, 358, 371, 373, 377, 381, 382, 383, 384, 385, 386, 387, 388, 391, 394, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 432, 446, 447, 449, 450, 459, 460, 461, 464, 465, 467, 468, 473, 479], "zero_divis": 41, "zeros_lik": [40, 66, 83, 102], "zielinski": [120, 193, 242], "zijdenbo": [120, 195, 214, 267], "zill": 120, "zip": [18, 20, 30, 32, 34, 38, 41, 50, 51, 53, 58, 87, 98, 100, 103, 108, 113, 116, 118, 166, 184, 220, 252, 267], "zmap": [39, 100, 218, 275], "zmap_filenam": 39, "zone": [120, 194, 274], "zoom": [154, 161], "zprojector": [14, 414, 418, 426], "zscore": [6, 130, 131, 149, 161, 234, 305, 381, 382, 383, 384, 385, 386, 387, 433, 473], "zscore_sampl": [3, 11, 29, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 90, 91, 97, 98, 99, 104, 130, 161, 166, 168, 381, 382, 383, 384, 385, 386, 387, 473, 479], "zslicer": [15, 68, 87, 415, 419, 427], "zstat12": 62, "zuckerberg": 0, "zuo": [120, 226, 254], "zurich": 0, "zvi": [0, 151, 161], "zwalli": [0, 132, 161], "z\u00f6llei": [120, 226, 232, 254, 258], "\u00e1": [120, 214, 267], "\u00e2": [120, 194, 274], "\u00e9": [71, 120, 168, 200, 212, 214, 267, 272], "\u00eb": [44, 120, 168, 174], "\u00eele": 0, "\u00f3scar": [0, 124, 127, 134, 136, 161], "\u00fc": [120, 174], "\u0161": [120, 214, 267], "\u03b1": [33, 478], "\u03b54": [120, 194, 274]}, "titles": ["Team", "Basic tutorials", "3D and 4D niimgs: handling and visualizing", "A introduction tutorial to fMRI decoding", "Basic nilearn example: manipulating and looking at data", "Basic numerics and plotting with Python", "Intro to GLM Analysis: a single-run, single-subject fMRI dataset", "Computation times", "Visualization of brain images", "Making a surface plot of a 3D statistical map", "Basic Atlas plotting", "Visualizing global patterns with a carpet plot", "Matplotlib colormaps in Nilearn", "Glass brain plotting in nilearn", "Glass brain plotting in nilearn (all options)", "More plotting tools from nilearn", "Plotting tools in nilearn", "Controlling the contrast of the background when plotting", "Plot Haxby masks", "Visualizing multiscale functional brain parcellations", "Visualizing a probabilistic atlas: the default mode in the MSDL atlas", "Visualizing 4D probabilistic atlas maps", "Loading and plotting of a cortical surface atlas", "Seed-based connectivity on the surface", "Technical point: Illustration of the volume to surface sampling schemes", "NeuroImaging volumes visualization", "Visualizing Megatrawls Network Matrices from Human Connectome Project", "Computation times", "Decoding and predicting from brain images", "Decoding with ANOVA + SVM: face vs house in the Haxby dataset", "Different classifiers in decoding the Haxby dataset", "Decoding with FREM: face vs house vs chair object recognition", "ROI-based decoding analysis in Haxby et al. dataset", "Decoding of a dataset after GLM fit for signal extraction", "Setting a parameter by cross-validation", "The haxby dataset: different multi-class strategies", "Searchlight analysis of face vs house recognition", "Cortical surface-based searchlight decoding", "Show stimuli of Haxby et al. dataset", "FREM on Jimura et al \u201cmixed gambles\u201d dataset", "Encoding models for visual stimuli from Miyawaki et al. 2008", "Reconstruction of visual stimuli from Miyawaki et al. 2008", "Voxel-Based Morphometry on Oasis dataset", "Voxel-Based Morphometry on Oasis dataset with Space-Net prior", "Example of pattern recognition on simulated data", "Computation times", "Functional connectivity", "Comparing connectomes on different reference atlases", "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning", "Clustering methods to learn a brain parcellation from fMRI", "Regions extraction using dictionary learning and functional connectomes", "Classification of age groups using functional connectivity", "Computing a connectome with sparse inverse covariance", "Group Sparse inverse covariance for multi-subject connectome", "Extracting signals of a probabilistic atlas of functional regions", "Producing single subject maps of seed-to-voxel correlation", "Extracting signals from a brain parcellation", "Connectivity structure estimation on simulated data", "Extract signals on spheres and plot a connectome", "Computation times", "GLM: First level analysis", "Default Mode Network extraction of ADHD dataset", "First level analysis of a complete BIDS dataset from openneuro", "Examples of design matrices", "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model", "Understanding parameters of the first-level model", "Example of MRI response functions", "Example of surface-based first-level analysis", "Predicted time series and residuals", "Single-subject data (two runs) in native space", "Simple example of two-runs fMRI model fitting", "Generate an events.tsv file for the NeuroSpin localizer task", "Computation times", "GLM: Second level analysis", "Voxel-Based Morphometry on OASIS dataset", "Second-level fMRI model: true positive proportion in clusters", "Example of generic design in second-level models", "Example of second level design matrix", "Second-level fMRI model: one sample test", "Second-level fMRI model: two-sample test, unpaired and paired", "Statistical testing of a second-level analysis", "Computation times", "Manipulating brain image volumes", "Visualization of affine resamplings", "Comparing the means of 2 images", "Breaking an atlas of labels in separated regions", "Regions Extraction of Default Mode Networks using Smith Atlas", "Region Extraction using a t-statistical map (3D)", "Understanding NiftiMasker and mask computation", "Negating an image with math_img", "Extracting signals from brain regions using the NiftiLabelsMasker", "Simple example of NiftiMasker use", "Resample an image to a template", "Computing a Region of Interest (ROI) mask manually", "Smoothing an image", "Computation times", "Advanced statistical analysis of brain images", "Advanced decoding using scikit learn", "Functional connectivity predicts age group", "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding", "BIDS dataset first and second level analysis", "Copying headers from input images with <code class=\"docutils literal notranslate\"><span class=\"pre\">math_img</span></code>", "Massively univariate analysis of face vs house recognition", "NeuroVault cross-study ICA maps", "Multivariate decompositions: Independent component analysis of fMRI", "Massively univariate analysis of a motor task from the Localizer dataset", "Massively univariate analysis of a calculation task from the Localizer dataset", "NeuroVault meta-analysis of stop-go paradigm studies", "Surface-based dataset first and second level analysis of a dataset", "Computation times", "Examples for experimental modules", "Making a surface plot of a 3D statistical map", "Example of surface-based first-level analysis", "Surface-based dataset first and second level analysis of a dataset", "Loading and plotting of a cortical surface atlas", "Seed-based connectivity on the surface", "A short demo of the surface images &amp; maskers", "Computation times", "Examples", "Computation times", "General bibliography", "<span class=\"section-number\">10. </span>Advanced usage: manual pipelines and scaling up", "<span class=\"section-number\">10.1. </span>Building your own neuroimaging machine-learning pipeline", "<span class=\"section-number\">10.2. </span>Downloading statistical maps from the Neurovault repository", "0.1.0", "0.1.1", "0.1.2", "0.1.3", "0.1.4", "0.10.0", "0.10.1", "0.10.2", "0.10.3", "0.10.4", "0.2.0", "0.2.1", "0.2.2", "0.2.3", "0.2.4", "0.2.5.1", "0.2.6", "0.3.0", "0.3.1", "0.4.0", "0.4.1", "0.4.2", "0.5.0", "0.5.1", "0.5.2", "0.6.0", "0.6.1", "0.6.2", "0.7.0", "0.7.1", "0.8.0", "0.8.1", "0.9.0", "0.9.1", "0.9.2", "0.11.0.dev", "&lt;no title&gt;", "What\u2019s new", "<span class=\"section-number\">6.2. </span>Connectome extraction: inverse covariance for direct connections", "<span class=\"section-number\">6.1. </span>Extracting times series to build a functional connectome", "<span class=\"section-number\">6. </span>Functional connectivity and resting state", "<span class=\"section-number\">6.5. </span>Clustering to parcellate the brain in regions", "<span class=\"section-number\">6.4. </span>Region Extraction for better brain parcellations", "<span class=\"section-number\">6.3. </span>Extracting functional brain networks: ICA and related", "<span class=\"section-number\">5.1. </span>An introduction to decoding", "<span class=\"section-number\">5.2. </span>Choosing the right predictive model for neuroimaging", "<span class=\"section-number\">5.3. </span>FREM: fast ensembling of regularized models for robust decoding", "<span class=\"section-number\">5.6. </span>Running scikit-learn functions for more control on the analysis", "<span class=\"section-number\">5. </span>Decoding and MVPA: predicting from brain images", "<span class=\"section-number\">5.5. </span>Searchlight : finding voxels containing information", "<span class=\"section-number\">5.4. </span>SpaceNet: decoding with spatial structure for better maps", "<span class=\"section-number\">6.2.3.1. </span>Group-sparse covariance estimation", "Contributing", "<span class=\"section-number\">8.2. </span>First level models", "<span class=\"section-number\">8.1. </span>An introduction to GLMs in fMRI statistical analysis", "<span class=\"section-number\">8. </span>Analyzing fMRI using GLMs", "<span class=\"section-number\">8.3. </span>Second level models", "Glossary", "Nilearn", "<span class=\"section-number\">1. </span>Introduction", "Maintenance", "<span class=\"section-number\">9. </span>Manipulation brain volumes with nilearn", "<span class=\"section-number\">9.1. </span>Input and output: neuroimaging data representation", "<span class=\"section-number\">9.2. </span>Manipulating images: resampling, smoothing, masking, ROIs\u2026", "<span class=\"section-number\">9.3. </span>From neuroimaging volumes to data matrices: the masker objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.connectome</span></code>: Functional Connectivity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.datasets</span></code>: Automatic Dataset Fetching", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decoding</span></code>: Decoding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decomposition</span></code>: Multivariate Decompositions", "ABIDE PCP dataset", "MegaTrawls Network Matrices HCP", "AAL atlas", "ADHD dataset", "Allen 2011 atlas", "BASC multiscale atlas", "BIDS language localizer", "Brainomics Localizer", "Craddock 2012 atlas", "Destrieux atlas", "development fMRI dataset", "DiFuMo atlas", "Dosenbach 2010 atlas", "fiac first level dataset", "fsaverage template", "fsaverage3 template", "fsaverage4 template", "fsaverage5 template", "fsaverage6 template", "Harvard Oxford atlas", "Haxby dataset", "ICBM 152 template", "Juelich atlas", "language localizer demo dataset", "localizer first level dataset", "Mixed gambles statistical maps", "Miyawaki 2008 dataset", "MSDL atlas", "Neurovault statistical maps", "NKI enhanced surface dataset", "OASIS volume based morphometry maps", "Pauli 2007 atlas", "Power 2011 atlas", "Schaefer 2018 atlas", "Seitzman 2018 atlas", "Smith 2009 atlas", "SPM auditory dataset", "SPM multimodal dataset", "Talairach atlas", "Yeo 2011 atlas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.experimental</span></code>: Experimental Modules", "nilearn.connectome.ConnectivityMeasure", "nilearn.connectome.GroupSparseCovariance", "nilearn.connectome.GroupSparseCovarianceCV", "nilearn.connectome.cov_to_corr", "nilearn.connectome.group_sparse_covariance", "nilearn.connectome.prec_to_partial", "nilearn.connectome.sym_matrix_to_vec", "nilearn.connectome.vec_to_sym_matrix", "nilearn.datasets.fetch_abide_pcp", "nilearn.datasets.fetch_adhd", "nilearn.datasets.fetch_atlas_aal", "nilearn.datasets.fetch_atlas_allen_2011", "nilearn.datasets.fetch_atlas_basc_multiscale_2015", "nilearn.datasets.fetch_atlas_craddock_2012", "nilearn.datasets.fetch_atlas_destrieux_2009", "nilearn.datasets.fetch_atlas_difumo", "nilearn.datasets.fetch_atlas_harvard_oxford", "nilearn.datasets.fetch_atlas_juelich", "nilearn.datasets.fetch_atlas_msdl", "nilearn.datasets.fetch_atlas_pauli_2017", "nilearn.datasets.fetch_atlas_schaefer_2018", "nilearn.datasets.fetch_atlas_smith_2009", "nilearn.datasets.fetch_atlas_surf_destrieux", "nilearn.datasets.fetch_atlas_talairach", "nilearn.datasets.fetch_atlas_yeo_2011", "nilearn.datasets.fetch_bids_langloc_dataset", "nilearn.datasets.fetch_coords_dosenbach_2010", "nilearn.datasets.fetch_coords_power_2011", "nilearn.datasets.fetch_coords_seitzman_2018", "nilearn.datasets.fetch_development_fmri", "nilearn.datasets.fetch_ds000030_urls", "nilearn.datasets.fetch_fiac_first_level", "nilearn.datasets.fetch_haxby", "nilearn.datasets.fetch_icbm152_2009", "nilearn.datasets.fetch_icbm152_brain_gm_mask", "nilearn.datasets.fetch_language_localizer_demo_dataset", "nilearn.datasets.fetch_localizer_button_task", "nilearn.datasets.fetch_localizer_calculation_task", "nilearn.datasets.fetch_localizer_contrasts", "nilearn.datasets.fetch_localizer_first_level", "nilearn.datasets.fetch_megatrawls_netmats", "nilearn.datasets.fetch_mixed_gambles", "nilearn.datasets.fetch_miyawaki2008", "nilearn.datasets.fetch_neurovault", "nilearn.datasets.fetch_neurovault_auditory_computation_task", "nilearn.datasets.fetch_neurovault_ids", "nilearn.datasets.fetch_neurovault_motor_task", "nilearn.datasets.fetch_oasis_vbm", "nilearn.datasets.fetch_openneuro_dataset", "nilearn.datasets.fetch_openneuro_dataset_index", "nilearn.datasets.fetch_spm_auditory", "nilearn.datasets.fetch_spm_multimodal_fmri", "nilearn.datasets.fetch_surf_fsaverage", "nilearn.datasets.fetch_surf_nki_enhanced", "nilearn.datasets.get_data_dirs", "nilearn.datasets.load_mni152_brain_mask", "nilearn.datasets.load_mni152_gm_mask", "nilearn.datasets.load_mni152_gm_template", "nilearn.datasets.load_mni152_template", "nilearn.datasets.load_mni152_wm_mask", "nilearn.datasets.load_mni152_wm_template", "nilearn.datasets.load_sample_motor_activation_image", "nilearn.datasets.patch_openneuro_dataset", "nilearn.datasets.select_from_index", "nilearn.decoding.Decoder", "nilearn.decoding.DecoderRegressor", "nilearn.decoding.FREMClassifier", "nilearn.decoding.FREMRegressor", "nilearn.decoding.SearchLight", "nilearn.decoding.SpaceNetClassifier", "nilearn.decoding.SpaceNetRegressor", "nilearn.decomposition.CanICA", "nilearn.decomposition.DictLearning", "nilearn.experimental.plotting.plot_surf", "nilearn.experimental.plotting.plot_surf_contours", "nilearn.experimental.plotting.plot_surf_roi", "nilearn.experimental.plotting.plot_surf_stat_map", "nilearn.experimental.plotting.view_surf", "nilearn.experimental.surface.FileMesh", "nilearn.experimental.surface.InMemoryMesh", "nilearn.experimental.surface.Mesh", "nilearn.experimental.surface.PolyMesh", "nilearn.experimental.surface.SurfaceImage", "nilearn.experimental.surface.SurfaceLabelsMasker", "nilearn.experimental.surface.SurfaceMasker", "nilearn.experimental.surface.fetch_destrieux", "nilearn.experimental.surface.fetch_nki", "nilearn.experimental.surface.load_fsaverage", "nilearn.experimental.surface.load_fsaverage_data", "nilearn.glm.ARModel", "nilearn.glm.Contrast", "nilearn.glm.FContrastResults", "nilearn.glm.LikelihoodModelResults", "nilearn.glm.OLSModel", "nilearn.glm.RegressionResults", "nilearn.glm.SimpleRegressionResults", "nilearn.glm.TContrastResults", "nilearn.glm.cluster_level_inference", "nilearn.glm.compute_contrast", "nilearn.glm.compute_fixed_effects", "nilearn.glm.expression_to_contrast_vector", "nilearn.glm.fdr_threshold", "nilearn.glm.first_level.FirstLevelModel", "nilearn.glm.first_level.check_design_matrix", "nilearn.glm.first_level.compute_regressor", "nilearn.glm.first_level.first_level_from_bids", "nilearn.glm.first_level.glover_dispersion_derivative", "nilearn.glm.first_level.glover_hrf", "nilearn.glm.first_level.glover_time_derivative", "nilearn.glm.first_level.make_first_level_design_matrix", "nilearn.glm.first_level.mean_scaling", "nilearn.glm.first_level.run_glm", "nilearn.glm.first_level.spm_dispersion_derivative", "nilearn.glm.first_level.spm_hrf", "nilearn.glm.first_level.spm_time_derivative", "nilearn.glm.second_level.SecondLevelModel", "nilearn.glm.second_level.make_second_level_design_matrix", "nilearn.glm.second_level.non_parametric_inference", "nilearn.glm.threshold_stats_img", "nilearn.image.binarize_img", "nilearn.image.clean_img", "nilearn.image.concat_imgs", "nilearn.image.coord_transform", "nilearn.image.copy_img", "nilearn.image.crop_img", "nilearn.image.get_data", "nilearn.image.high_variance_confounds", "nilearn.image.index_img", "nilearn.image.iter_img", "nilearn.image.largest_connected_component_img", "nilearn.image.load_img", "nilearn.image.math_img", "nilearn.image.mean_img", "nilearn.image.new_img_like", "nilearn.image.reorder_img", "nilearn.image.resample_img", "nilearn.image.resample_to_img", "nilearn.image.smooth_img", "nilearn.image.swap_img_hemispheres", "nilearn.image.threshold_img", "nilearn.interfaces.bids.get_bids_files", "nilearn.interfaces.bids.parse_bids_filename", "nilearn.interfaces.bids.save_glm_to_bids", "nilearn.interfaces.fmriprep.load_confounds", "nilearn.interfaces.fmriprep.load_confounds_strategy", "nilearn.interfaces.fsl.get_design_from_fslmat", "nilearn.maskers.BaseMasker", "nilearn.maskers.MultiNiftiLabelsMasker", "nilearn.maskers.MultiNiftiMapsMasker", "nilearn.maskers.MultiNiftiMasker", "nilearn.maskers.NiftiLabelsMasker", "nilearn.maskers.NiftiMapsMasker", "nilearn.maskers.NiftiMasker", "nilearn.maskers.NiftiSpheresMasker", "nilearn.masking.apply_mask", "nilearn.masking.compute_background_mask", "nilearn.masking.compute_brain_mask", "nilearn.masking.compute_epi_mask", "nilearn.masking.compute_multi_background_mask", "nilearn.masking.compute_multi_brain_mask", "nilearn.masking.compute_multi_epi_mask", "nilearn.masking.intersect_masks", "nilearn.masking.unmask", "nilearn.mass_univariate.permuted_ols", "nilearn.plotting.displays.BaseAxes", "nilearn.plotting.displays.BaseSlicer", "nilearn.plotting.displays.CutAxes", "nilearn.plotting.displays.GlassBrainAxes", "nilearn.plotting.displays.LProjector", "nilearn.plotting.displays.LRProjector", "nilearn.plotting.displays.LYRProjector", "nilearn.plotting.displays.LYRZProjector", "nilearn.plotting.displays.LZRProjector", "nilearn.plotting.displays.LZRYProjector", "nilearn.plotting.displays.MosaicSlicer", "nilearn.plotting.displays.OrthoProjector", "nilearn.plotting.displays.OrthoSlicer", "nilearn.plotting.displays.PlotlySurfaceFigure", "nilearn.plotting.displays.RProjector", "nilearn.plotting.displays.TiledSlicer", "nilearn.plotting.displays.XProjector", "nilearn.plotting.displays.XSlicer", "nilearn.plotting.displays.XZProjector", "nilearn.plotting.displays.XZSlicer", "nilearn.plotting.displays.YProjector", "nilearn.plotting.displays.YSlicer", "nilearn.plotting.displays.YXProjector", "nilearn.plotting.displays.YXSlicer", "nilearn.plotting.displays.YZProjector", "nilearn.plotting.displays.YZSlicer", "nilearn.plotting.displays.ZProjector", "nilearn.plotting.displays.ZSlicer", "nilearn.plotting.displays.get_projector", "nilearn.plotting.displays.get_slicer", "nilearn.plotting.find_cut_slices", "nilearn.plotting.find_parcellation_cut_coords", "nilearn.plotting.find_probabilistic_atlas_cut_coords", "nilearn.plotting.find_xyz_cut_coords", "nilearn.plotting.plot_anat", "nilearn.plotting.plot_carpet", "nilearn.plotting.plot_connectome", "nilearn.plotting.plot_contrast_matrix", "nilearn.plotting.plot_design_matrix", "nilearn.plotting.plot_epi", "nilearn.plotting.plot_event", "nilearn.plotting.plot_glass_brain", "nilearn.plotting.plot_img", "nilearn.plotting.plot_img_comparison", "nilearn.plotting.plot_img_on_surf", "nilearn.plotting.plot_markers", "nilearn.plotting.plot_matrix", "nilearn.plotting.plot_prob_atlas", "nilearn.plotting.plot_roi", "nilearn.plotting.plot_stat_map", "nilearn.plotting.plot_surf", "nilearn.plotting.plot_surf_contours", "nilearn.plotting.plot_surf_roi", "nilearn.plotting.plot_surf_stat_map", "nilearn.plotting.show", "nilearn.plotting.view_connectome", "nilearn.plotting.view_img", "nilearn.plotting.view_img_on_surf", "nilearn.plotting.view_markers", "nilearn.plotting.view_surf", "nilearn.regions.HierarchicalKMeans", "nilearn.regions.Parcellations", "nilearn.regions.ReNA", "nilearn.regions.RegionExtractor", "nilearn.regions.connected_label_regions", "nilearn.regions.connected_regions", "nilearn.regions.img_to_signals_labels", "nilearn.regions.img_to_signals_maps", "nilearn.regions.recursive_neighbor_agglomeration", "nilearn.regions.signals_to_img_labels", "nilearn.regions.signals_to_img_maps", "nilearn.reporting.HTMLReport", "nilearn.reporting.get_clusters_table", "nilearn.reporting.make_glm_report", "nilearn.signal.butterworth", "nilearn.signal.clean", "nilearn.signal.high_variance_confounds", "nilearn.surface.load_surf_data", "nilearn.surface.load_surf_mesh", "nilearn.surface.vol_to_surf", "Examples of GLM reports", "Examples masker reports", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.glm</span></code>: Generalized Linear Models", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.image</span></code>: Image Processing and Resampling Utilities", "API References", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.interfaces</span></code>: Loading components from interfaces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.maskers</span></code>: Extracting Signals from Brain Images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.masking</span></code>: Data Masking Utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.mass_univariate</span></code>: Mass-Univariate Analysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.plotting</span></code>: Plotting Brain Data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.regions</span></code>: Operating on Regions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.reporting</span></code>: Reporting Functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.signal</span></code>: Preprocessing Time Series", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.surface</span></code>: Manipulating Surface Data", "<span class=\"section-number\">7. </span>Plotting brain images", "Quickstart", "Computation times", "User guide"], "titleterms": {"": [58, 61, 97, 161, 168], "0": [17, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161], "0a0": [149, 161], "0b0": [149, 161], "0rc": [149, 161], "1": [17, 65, 124, 125, 126, 127, 128, 130, 135, 139, 142, 144, 147, 150, 153, 155, 157, 161], "10": [129, 130, 131, 132, 133, 161], "100": 188, "11": [159, 161], "152": 214, "1rc1": [130, 161], "2": [84, 126, 131, 134, 135, 136, 137, 138, 139, 140, 145, 148, 151, 158, 161], "2001": 168, "2007": 224, "2008": [40, 41, 219], "2009": 228, "2010": 205, "2011": [197, 225, 232], "2012": 201, "2018": [226, 227], "2d": [122, 187], "2x2": 15, "3": [127, 132, 137, 141, 142, 161], "3d": [2, 4, 9, 22, 52, 54, 58, 87, 111, 114, 186, 492], "4": [128, 133, 138, 143, 144, 145, 161], "4d": [2, 21, 122, 186, 187], "5": [15, 17, 139, 146, 147, 148, 161], "6": [68, 140, 149, 150, 151, 161], "7": [152, 153, 161], "8": [154, 155, 161], "9": [156, 157, 158, 161], "A": [3, 4, 44, 65, 116, 163, 168, 178], "And": [52, 54], "The": [6, 35, 56, 65, 85, 168, 174, 188], "Then": 41, "aal": 195, "abid": 193, "access": [21, 187, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232], "accuraci": [3, 168], "across": 70, "actual": 68, "ad": [65, 176, 492], "add_contour": 15, "add_edg": 15, "add_mark": 15, "add_overlai": 20, "addit": 176, "adhd": [11, 61, 196, 478], "adjust": 24, "advanc": [96, 97, 118, 121, 188], "affin": [83, 186, 187], "after": [33, 88], "ag": [42, 51, 74, 98], "aggreg": 99, "al": [32, 38, 39, 40, 41], "algorithm": 175, "all": [2, 14, 168], "allen": 197, "along": 15, "alpha": [146, 161, 175], "also": [3, 49, 58], "altern": 167, "an": [6, 9, 44, 58, 64, 71, 85, 89, 92, 94, 111, 167, 168, 176, 178, 492], "analys": [67, 74], "analysi": [3, 6, 32, 36, 42, 55, 60, 61, 62, 64, 67, 73, 74, 80, 96, 99, 100, 102, 104, 105, 106, 107, 108, 112, 113, 118, 168, 171, 173, 177, 178, 198, 486], "analyz": [179, 186], "anatom": 16, "ani": 171, "annot": [15, 123], "anoth": [15, 187], "anova": [29, 34, 97, 168, 171], "answer": 176, "api": [134, 161, 176, 183, 482], "appli": [25, 48, 122, 165, 187, 188], "applic": [99, 183], "apply_mask": 388, "approach": [99, 162], "ar": [15, 65], "argument": [62, 100, 108, 113, 188], "armodel": 323, "around": [9, 51, 58, 111], "arrai": [122, 187], "asymmetr": 47, "atla": [9, 10, 20, 21, 22, 47, 51, 52, 54, 56, 58, 85, 86, 98, 111, 114, 116, 163, 176, 195, 197, 198, 201, 202, 204, 205, 212, 215, 220, 224, 225, 226, 227, 228, 231, 232], "atlas": [21, 47, 163, 176, 190, 492], "attribut": 176, "auditori": 229, "automat": [62, 100, 108, 113, 122, 190], "avail": 492, "averag": 58, "axial": 15, "background": [13, 17, 88], "bag": 169, "bar": [32, 492], "barplot": 35, "basc": 198, "base": [11, 23, 32, 37, 42, 43, 56, 67, 74, 99, 108, 112, 113, 115, 166, 177, 180, 223], "baseax": 398, "basemask": 380, "baseslic": 399, "basic": [1, 4, 5, 10, 65, 118], "behavior": [3, 29, 33, 186], "beta": [99, 141, 146, 161, 168], "better": [166, 174, 188], "bibliographi": 120, "bid": [62, 100, 108, 113, 199, 374, 375, 376, 478, 483], "binarize_img": 353, "bio": 42, "black": 13, "bold": [37, 178], "bootstrap": 198, "both": [14, 70], "bound": 175, "brain": [8, 13, 14, 16, 19, 25, 28, 40, 42, 47, 48, 49, 50, 51, 56, 58, 82, 90, 96, 98, 118, 163, 165, 166, 167, 172, 185, 187, 484, 487, 492], "brainom": 200, "break": 85, "browser": [9, 22, 52, 54, 58, 111, 114], "bug": [134, 137, 144, 161, 176], "build": [24, 33, 35, 40, 54, 93, 122, 163, 176, 184], "butterworth": 472, "calcul": [23, 68, 106, 115], "canica": [48, 167, 305], "carpet": 11, "case": [176, 187], "cat": 3, "censor": 65, "chair": 31, "chanc": [3, 97, 168, 171], "chang": [15, 17, 65, 97, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 188], "changelog": [124, 125, 126, 127, 134, 135, 137, 161, 176], "check": [100, 493], "check_design_matrix": 337, "children": 51, "choic": 168, "choos": [9, 99, 111, 168, 169], "cite": 0, "class": [35, 169, 233], "classif": [51, 98, 169], "classifi": [30, 173], "clean": 473, "clean_img": 354, "close": 184, "cluster": [49, 68, 75, 165, 198], "cluster_level_infer": 331, "code": [165, 168, 170, 173, 176, 184, 187, 492], "coeffici": 50, "collect": 123, "color": 12, "colorbar": 15, "colormap": [12, 492], "column": 15, "combin": 107, "commit": 176, "common": 188, "compar": [47, 48, 49, 70, 84, 99, 162, 173], "comparison": [9, 111, 170, 178, 180], "complet": 62, "compon": [103, 104, 167, 483], "compress": [49, 165], "comput": [7, 27, 34, 35, 36, 37, 45, 50, 52, 53, 56, 58, 59, 70, 72, 81, 88, 93, 95, 107, 109, 117, 119, 122, 162, 163, 166, 177, 187, 188, 494], "compute_background_mask": 389, "compute_brain_mask": 390, "compute_contrast": 332, "compute_epi_mask": 391, "compute_fixed_effect": 333, "compute_multi_background_mask": 392, "compute_multi_brain_mask": 393, "compute_multi_epi_mask": 394, "compute_regressor": 338, "concat_img": 355, "concept": 188, "conclus": 65, "condit": 99, "conduct": 176, "confound": [56, 65, 188], "confus": [31, 35], "connect": [23, 46, 47, 51, 56, 57, 85, 98, 99, 115, 116, 118, 162, 164, 166, 189], "connected_label_region": 462, "connected_region": 463, "connectivitymeasur": 234, "connectom": [26, 47, 50, 52, 53, 58, 162, 163, 189, 234, 235, 236, 237, 238, 239, 240, 241, 492], "contain": 173, "content": [193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 495], "contour": [10, 14, 492], "contrast": [17, 61, 62, 65, 67, 68, 70, 112, 177, 324], "contribut": 176, "contributor": [0, 134, 136, 139, 143, 146, 147, 148, 149, 150, 151, 161], "control": [17, 171, 188], "coord_transform": 356, "coordin": [15, 47, 58, 163], "copi": 101, "copy_img": 357, "core": 0, "coron": 15, "correct": 180, "correl": [50, 51, 54, 55, 56, 58, 162, 163], "correspond": [25, 52, 54], "cortic": [9, 22, 37, 111, 114, 492], "cours": 61, "cov_to_corr": 237, "covari": [52, 53, 162, 175], "craddock": 201, "creat": [44, 63, 77, 187], "criteria": 175, "criterion": 175, "crop_img": 358, "cross": [3, 29, 34, 35, 97, 103, 168, 171, 173, 175], "css": 176, "csv": 186, "custom": 188, "cut": [13, 15], "cutax": 400, "cutoff": 188, "cylind": 24, "data": [3, 4, 6, 9, 10, 11, 13, 14, 15, 16, 17, 22, 23, 25, 29, 30, 32, 33, 35, 39, 40, 41, 42, 44, 47, 48, 49, 52, 54, 55, 56, 57, 61, 65, 67, 69, 74, 88, 93, 97, 99, 103, 107, 111, 112, 114, 115, 122, 162, 165, 167, 168, 171, 173, 178, 186, 187, 188, 485, 487, 491], "dataset": [2, 6, 11, 15, 16, 17, 18, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 48, 49, 50, 51, 53, 58, 61, 62, 64, 74, 75, 78, 79, 98, 100, 105, 106, 108, 113, 166, 170, 175, 176, 186, 190, 193, 196, 203, 206, 213, 216, 217, 219, 222, 229, 230, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "decid": 176, "decis": 176, "decod": [3, 28, 29, 30, 31, 32, 33, 34, 35, 37, 41, 43, 97, 99, 116, 118, 168, 170, 171, 172, 174, 191, 298, 299, 300, 301, 302, 303, 304], "decoderregressor": 299, "decomposit": [104, 192, 305, 306], "decreas": [17, 186], "default": [20, 58, 61, 86], "defin": [41, 56, 63, 66, 99], "definit": [168, 188], "demo": [14, 116, 216], "demonstr": 15, "depend": 493, "deploi": 184, "deriv": [11, 48, 65, 190], "descript": [122, 175, 190], "design": [63, 65, 76, 77, 99, 177, 188], "destrieux": 202, "detect": 6, "dev": [159, 161], "develop": [0, 48, 49, 50, 51, 58, 98, 203, 493], "dictionari": [48, 50, 166, 167], "dictlearn": 306, "differ": [14, 30, 32, 34, 35, 44, 47, 85, 162, 169, 188, 492], "difumo": 204, "dim": 17, "dimens": [101, 168], "direct": [47, 162], "disclaim": 194, "discrimin": 97, "discuss": 176, "disk": [62, 74], "displai": [9, 14, 15, 52, 53, 54, 56, 58, 78, 111, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 487, 492], "distribut": [68, 184], "dmn": 58, "do": 176, "doc": 184, "document": [176, 184], "dosenbach": [58, 205], "download": [2, 3, 49, 97, 122, 123, 186], "draw": 24, "drift": 65, "drop": 493, "dtype": 188, "dualiti": 175, "dummi": 97, "each": [9, 33, 111], "easi": 168, "edg": 492, "effect": [6, 70], "empir": 170, "encod": 40, "engin": 97, "enhanc": [17, 129, 130, 131, 132, 133, 134, 136, 140, 141, 142, 143, 144, 146, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 161, 176, 222], "ensembl": 170, "environ": 176, "epi": [16, 88], "error": 41, "estim": [40, 44, 57, 58, 61, 62, 65, 67, 75, 76, 78, 79, 97, 100, 112, 168, 169, 171, 175, 176], "et": [32, 38, 39, 40, 41], "event": [33, 71, 177], "exampl": [4, 33, 39, 44, 63, 66, 67, 70, 76, 77, 91, 100, 108, 110, 112, 113, 118, 123, 162, 163, 165, 167, 168, 173, 174, 182, 183, 187, 188, 234, 236, 243, 245, 246, 248, 249, 250, 251, 252, 255, 256, 258, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 292, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 320, 321, 322, 324, 331, 332, 333, 336, 338, 339, 343, 345, 349, 350, 351, 352, 354, 355, 356, 359, 360, 361, 362, 364, 365, 366, 367, 369, 370, 371, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 396, 397, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 457, 459, 461, 462, 463, 469, 470, 471, 475, 476, 477, 478, 479, 492], "execut": 175, "exercis": [44, 162, 163, 188], "expans": 186, "experi": [39, 122, 168], "experiment": [6, 77, 110, 118, 233, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], "expression_to_contrast_vector": 334, "extra": 188, "extract": [3, 23, 25, 33, 47, 50, 51, 52, 53, 54, 55, 56, 58, 61, 68, 86, 87, 88, 90, 115, 162, 163, 166, 167, 177, 187, 188, 484], "f": [6, 36, 68], "f_score": 173, "face": [3, 29, 30, 31, 36, 37, 102], "fashion": 15, "fast": 170, "fcontrastresult": 325, "fdr_threshold": 335, "featur": [3, 15, 97, 134, 137, 161, 168, 182, 478], "fetch": [11, 20, 25, 26, 33, 47, 50, 53, 62, 75, 78, 79, 100, 107, 108, 113, 166, 186, 190], "fetch_abide_pcp": 242, "fetch_adhd": 243, "fetch_atlas_a": 244, "fetch_atlas_allen_2011": 245, "fetch_atlas_basc_multiscale_2015": 246, "fetch_atlas_craddock_2012": 247, "fetch_atlas_destrieux_2009": 248, "fetch_atlas_difumo": 249, "fetch_atlas_harvard_oxford": 250, "fetch_atlas_juelich": 251, "fetch_atlas_msdl": 252, "fetch_atlas_pauli_2017": 253, "fetch_atlas_schaefer_2018": 254, "fetch_atlas_smith_2009": 255, "fetch_atlas_surf_destrieux": 256, "fetch_atlas_talairach": 257, "fetch_atlas_yeo_2011": 258, "fetch_bids_langloc_dataset": 259, "fetch_coords_dosenbach_2010": 260, "fetch_coords_power_2011": 261, "fetch_coords_seitzman_2018": 262, "fetch_destrieux": 319, "fetch_development_fmri": 263, "fetch_ds000030_url": 264, "fetch_fiac_first_level": 265, "fetch_haxbi": 266, "fetch_icbm152_2009": 267, "fetch_icbm152_brain_gm_mask": 268, "fetch_language_localizer_demo_dataset": 269, "fetch_localizer_button_task": 270, "fetch_localizer_calculation_task": 271, "fetch_localizer_contrast": 272, "fetch_localizer_first_level": 273, "fetch_megatrawls_netmat": 274, "fetch_mixed_gambl": 275, "fetch_miyawaki2008": 276, "fetch_neurovault": 277, "fetch_neurovault_auditory_computation_task": 278, "fetch_neurovault_id": 279, "fetch_neurovault_motor_task": 280, "fetch_nki": 320, "fetch_oasis_vbm": 281, "fetch_openneuro_dataset": 282, "fetch_openneuro_dataset_index": 283, "fetch_spm_auditori": 284, "fetch_spm_multimodal_fmri": 285, "fetch_surf_fsaverag": 286, "fetch_surf_nki_enhanc": 287, "fetcher": [22, 114, 176], "few": [99, 168], "fiac": [206, 478], "field": 40, "figur": [103, 487], "file": [2, 4, 15, 29, 56, 71, 186, 492], "filemesh": 312, "fill": [14, 492], "filter": [123, 188], "final": 168, "find": [93, 173, 183], "find_cut_slic": 428, "find_parcellation_cut_coord": 429, "find_probabilistic_atlas_cut_coord": 430, "find_xyz_cut_coord": 431, "finit": 64, "fir": 64, "first": [3, 4, 15, 41, 60, 61, 62, 65, 67, 97, 99, 100, 108, 112, 113, 118, 168, 177, 183, 188, 206, 217, 478], "first_level": [336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 480], "first_level_from_bid": 339, "firstlevelmodel": [33, 62, 100, 108, 113, 336], "fisher": 55, "fit": [29, 31, 33, 34, 39, 43, 62, 68, 70, 100, 108, 113, 167, 177, 180], "fix": [70, 127, 129, 130, 131, 132, 133, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161], "fixtur": 176, "flexibl": 56, "fmri": [3, 6, 35, 48, 49, 51, 58, 64, 67, 70, 75, 78, 79, 97, 98, 104, 112, 162, 163, 168, 178, 179, 203], "fmriprep": [56, 377, 378, 483], "format": 186, "formula": 101, "frem": [31, 39, 170], "fremclassifi": 300, "fremregressor": 301, "from": [2, 3, 11, 15, 16, 24, 26, 28, 33, 39, 40, 41, 48, 49, 50, 56, 58, 62, 88, 90, 93, 97, 99, 101, 105, 106, 118, 122, 123, 163, 172, 186, 187, 188, 483, 484], "fsaverag": 207, "fsaverage3": 208, "fsaverage4": 209, "fsaverage5": 210, "fsaverage6": 211, "fsl": [379, 483], "full": [162, 163, 168], "function": [16, 19, 23, 41, 44, 46, 47, 50, 51, 54, 66, 98, 99, 115, 118, 162, 163, 164, 166, 167, 171, 173, 176, 187, 189, 190, 233, 489, 492], "fund": 0, "further": [44, 97, 122, 171, 173], "gambl": [39, 170, 218], "gap": 175, "gener": [15, 16, 33, 44, 61, 62, 70, 71, 74, 76, 103, 120, 190, 480], "get": [9, 24, 55, 68, 103, 111, 176], "get_bids_fil": 374, "get_clusters_t": 470, "get_data": 359, "get_data_dir": 288, "get_design_from_fslmat": 379, "get_projector": 426, "get_slic": 427, "github": 184, "given": [15, 187], "glass": [13, 14, 16], "glassbrainax": 401, "glm": [6, 33, 60, 70, 73, 118, 178, 179, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 478, 480], "glob": [4, 186], "global": [11, 56], "glossari": 181, "glover_dispersion_deriv": 340, "glover_hrf": 341, "glover_time_deriv": 342, "go": [44, 97, 107, 122, 171], "goe": 176, "good": 168, "graph": [52, 54, 58, 163], "grid": 175, "group": [19, 48, 51, 53, 98, 108, 113, 162, 175], "group_sparse_covari": 238, "groupsparsecovari": 235, "groupsparsecovariancecv": 236, "guid": 495, "guidelin": 176, "handl": 2, "harvard": [10, 212], "haxbi": [3, 18, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 97, 168, 170, 213], "hcp": 194, "header": 101, "help": [176, 183], "hemispher": [13, 14, 67], "hemodynam": 65, "here": [16, 41], "hierarch": 49, "hierarchicalkmean": 458, "high_variance_confound": [360, 474], "higher": [9, 65, 111], "highlight": [128, 129, 131, 132, 133, 141, 142, 143, 146, 149, 152, 153, 154, 155, 156, 158, 161], "hour": 493, "hous": [29, 30, 31, 36, 37, 102], "how": [15, 176, 184, 188], "hrf": 177, "html": [62, 176], "htmlreport": 469, "human": 26, "i": [3, 51, 98, 178, 183, 186, 188], "ica": [48, 103, 167], "icbm": 214, "idea": 176, "illustr": 24, "imag": [3, 4, 8, 9, 16, 17, 28, 67, 80, 82, 84, 89, 92, 94, 96, 101, 103, 107, 111, 112, 116, 118, 122, 123, 172, 186, 187, 188, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 481, 484, 492], "img_to_signals_label": 464, "img_to_signals_map": 465, "impact": [9, 56, 111], "implement": 3, "import": [68, 493], "improv": 93, "impul": 64, "increas": 170, "independ": 104, "index_img": 361, "individu": 187, "infer": 42, "inform": 173, "initi": [70, 175], "inmemorymesh": 313, "input": [101, 186], "inspect": 3, "instal": [176, 493], "instanti": 33, "interact": [9, 16, 111, 162, 163, 487, 492], "interest": [9, 93, 111], "interfac": [56, 374, 375, 376, 377, 378, 379, 483], "internet": [2, 186], "interpret": 167, "intersect_mask": 395, "intro": 6, "introduct": [3, 168, 178, 183], "invers": [52, 53, 162, 188], "inverse_transform": 122, "issu": [147, 161, 184], "iter": [47, 175], "iter_img": 362, "its": 24, "itself": 41, "jimura": 39, "juelich": [10, 215], "kfold": 3, "kind": [51, 98], "kmean": 49, "known": [147, 161], "l1": 39, "label": [3, 11, 56, 85, 184, 479], "languag": [199, 216], "largest": 68, "largest_connected_component_img": 363, "latest": 493, "lean": 97, "learn": [0, 35, 48, 49, 50, 97, 116, 122, 166, 167, 171, 183, 188], "leav": 3, "left": [14, 67], "let": 41, "level": [3, 60, 61, 62, 65, 67, 73, 75, 76, 77, 78, 79, 80, 97, 100, 108, 112, 113, 118, 162, 168, 171, 177, 180, 206, 217, 478], "licens": [193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232], "like": [107, 186], "likelihoodmodelresult": 326, "limit": 15, "linear": [169, 480], "link": [162, 493], "load": [3, 13, 14, 18, 22, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 47, 48, 51, 56, 74, 93, 97, 98, 114, 122, 165, 168, 186, 188, 483], "load_confound": 377, "load_confounds_strategi": 378, "load_fsaverag": 321, "load_fsaverage_data": 322, "load_img": 364, "load_mni152_brain_mask": 289, "load_mni152_gm_mask": 290, "load_mni152_gm_templ": 291, "load_mni152_templ": 292, "load_mni152_wm_mask": 293, "load_mni152_wm_templ": 294, "load_sample_motor_activation_imag": 295, "load_surf_data": 475, "load_surf_mesh": 476, "local": [17, 71, 105, 106, 199, 200, 216, 217], "locat": 24, "look": 4, "loop": [2, 3], "lprojector": 402, "lrprojector": 403, "lsa": 99, "lss": 99, "lyrprojector": 404, "lyrzprojector": 405, "lzrprojector": 406, "lzryprojector": 407, "machin": [3, 122, 183], "made": 168, "mainten": [176, 184], "make": [9, 16, 32, 111, 176, 184], "make_first_level_design_matrix": 343, "make_glm_report": 471, "make_second_level_design_matrix": 350, "manipul": [4, 82, 118, 185, 187, 491], "manual": [3, 93, 121, 184, 187], "map": [6, 9, 12, 16, 17, 21, 30, 40, 42, 43, 47, 48, 55, 87, 93, 99, 103, 107, 111, 123, 166, 168, 170, 174, 180, 190, 218, 221, 223, 479, 492], "marker": [42, 492], "mask": [11, 16, 18, 25, 32, 36, 41, 65, 88, 93, 97, 103, 122, 168, 171, 173, 187, 188, 388, 389, 390, 391, 392, 393, 394, 395, 396, 485], "masker": [116, 188, 380, 381, 382, 383, 384, 385, 386, 387, 479, 484], "mass": [42, 486], "mass_univari": [397, 486], "massiv": [42, 102, 105, 106, 173], "match": [186, 187], "math_img": [89, 101, 365], "matplotlib": [12, 34], "matric": [26, 53, 63, 99, 166, 188, 194], "matrix": [3, 31, 35, 49, 52, 54, 56, 58, 77, 162, 163, 177], "maximum": 175, "maxprob": 163, "mean": 84, "mean_img": 366, "mean_scal": 344, "measur": [3, 47, 97, 168, 171], "megatrawl": [26, 194], "memori": 186, "mesh": [9, 24, 111, 314, 492], "meta": 107, "method": [49, 122], "min_siz": 85, "minu": 107, "mix": [39, 170, 218], "miyawaki": [40, 41, 219], "mni": 88, "mode": [20, 58, 61, 85, 86, 492], "model": [3, 40, 42, 62, 64, 65, 66, 68, 70, 74, 75, 76, 78, 79, 99, 100, 167, 169, 170, 171, 177, 178, 180, 480], "modifi": [101, 175], "modul": [63, 68, 71, 110, 118, 233], "more": [15, 17, 171], "morphometri": [42, 43, 74, 180, 223], "mosaicslic": 408, "most": [51, 68, 98], "motion": 56, "motor": 105, "movi": [165, 166], "mri": 66, "msdl": [20, 51, 98, 220], "multi": [35, 53, 167, 169], "multimod": 230, "multiniftilabelsmask": [188, 381], "multiniftimapsmask": [188, 382], "multiniftimask": [188, 383], "multipl": [4, 9, 15, 111, 162, 178, 180, 188], "multiscal": [19, 198], "multivari": [104, 192], "mvpa": 172, "name": 186, "nativ": 69, "negat": 89, "nest": 34, "net": 43, "network": [26, 50, 58, 61, 86, 167, 194], "neuroimag": [25, 122, 169, 183, 186, 188], "neurospin": 71, "neurosynth": 123, "neurovault": [103, 107, 123, 221], "new": [129, 130, 131, 132, 134, 136, 137, 138, 139, 146, 147, 148, 149, 152, 153, 154, 155, 156, 158, 159, 161], "new_img_lik": 367, "nifti": [3, 55, 186, 187, 479], "niftilabelsmask": [90, 188, 384], "niftimapsmask": [188, 385], "niftimask": [88, 91, 188, 386], "niftispheresmask": [188, 387], "niimg": [2, 186], "nilearn": [0, 4, 12, 13, 14, 15, 16, 21, 29, 34, 167, 168, 176, 182, 183, 185, 189, 190, 191, 192, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493], "nilearn_data": 186, "nki": 222, "node": [9, 111], "nois": 65, "non": 122, "non_parametric_infer": 351, "norm": 175, "note": [193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232], "now": [15, 35, 52, 54], "number": [15, 175], "numer": [5, 175], "oasi": [42, 43, 74, 223], "object": [20, 29, 31, 34, 62, 100, 108, 113, 167, 176, 186, 188], "obtain": [29, 62, 100, 108, 113], "ol": 65, "olsmodel": 327, "one": [2, 50, 62, 78, 187], "onli": [15, 50, 62, 188], "open": [186, 188], "openneuro": 62, "oper": [187, 488], "option": 14, "order": 65, "organ": 184, "origin": 85, "orthoprojector": 409, "orthoslic": 410, "other": [0, 21, 171], "our": [4, 41], "out": 3, "outlin": [9, 111], "output": [62, 74, 123, 186], "over": [4, 11, 47], "overlai": 492, "own": 122, "oxford": [10, 212], "page": [162, 163, 166, 167, 177, 180], "pair": 79, "panda": 186, "paradigm": [6, 77, 107], "paramet": [9, 34, 61, 63, 65, 66, 67, 85, 97, 99, 111, 112, 162, 169, 171, 188], "parametr": [63, 71], "parcel": [19, 47, 49, 56, 163, 165, 166, 459], "parse_bids_filenam": 375, "partial": [51, 58], "patch_openneuro_dataset": 296, "path": 186, "pattern": [11, 44], "pauli": 224, "pcp": 193, "percentil": 34, "perform": [6, 55, 61, 67, 80, 97, 112, 168, 170, 171], "permut": 97, "permuted_ol": 397, "phenotyp": 186, "philosophi": 188, "pipelin": [29, 33, 34, 116, 121, 122, 170, 171, 188], "plot": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 24, 31, 32, 34, 35, 44, 47, 50, 55, 58, 65, 66, 68, 79, 107, 111, 114, 233, 307, 308, 309, 310, 311, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 487, 492], "plot_anat": [16, 432], "plot_carpet": 433, "plot_connectom": 434, "plot_contrast_matrix": 435, "plot_design_matrix": 436, "plot_epi": [16, 437], "plot_ev": 438, "plot_glass_brain": [16, 439], "plot_img": 440, "plot_img_comparison": 441, "plot_img_on_surf": 442, "plot_mark": 443, "plot_matrix": 444, "plot_prob_atla": [20, 445], "plot_roi": [16, 446], "plot_stat_map": [16, 20, 447], "plot_surf": [307, 448], "plot_surf_contour": [308, 449], "plot_surf_roi": [309, 450], "plot_surf_stat_map": [310, 451, 492], "plotli": [9, 111], "plotlysurfacefigur": 411, "point": [24, 188], "polici": 184, "polymesh": 315, "posit": 75, "post": 184, "power": [51, 98, 225], "pr": 176, "pre": 176, "prec_to_parti": 239, "precis": 53, "predefin": 56, "predict": [3, 28, 29, 34, 35, 41, 42, 43, 68, 97, 98, 118, 168, 169, 172, 177], "prepar": [32, 35, 36, 41, 61, 67, 80, 99, 112, 168, 173, 184, 187, 188], "preprocess": [42, 122, 190, 198, 490], "primer": 178, "principl": [173, 175], "prior": 43, "privat": 176, "probabilist": [20, 21, 47, 54, 163], "process": 481, "produc": 55, "project": [14, 26, 67, 112, 176, 184], "proper": 33, "proport": 75, "protocol": 107, "provid": [15, 16], "pull": [176, 184], "purpos": [15, 16], "put": 168, "pypi": 184, "python": [5, 186], "qualiti": [42, 43, 93], "quantifi": 41, "question": 176, "quick": 100, "quickstart": 493, "r": 68, "radiu": 173, "rang": 70, "raw": 88, "rc": [146, 161], "read": [173, 186], "recept": 40, "recognit": [31, 36, 44, 102], "recommend": 176, "reconstruct": 41, "recursive_neighbor_agglomer": 466, "reduct": 168, "refer": [3, 22, 23, 31, 32, 37, 38, 40, 41, 44, 47, 48, 49, 51, 56, 58, 69, 70, 71, 75, 97, 98, 99, 102, 114, 115, 123, 162, 163, 165, 166, 167, 168, 169, 170, 173, 174, 175, 181, 183, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 482], "region": [9, 50, 51, 53, 54, 61, 85, 86, 87, 90, 93, 111, 163, 165, 166, 188, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 488], "regionextractor": 461, "regress": 169, "regressionresult": 328, "regular": 170, "relabel": 85, "relat": [167, 174], "releas": [184, 493], "remov": [56, 65, 188], "rena": [49, 460], "reorder_img": 368, "report": [33, 58, 61, 62, 70, 74, 176, 469, 470, 471, 478, 479, 489], "repositori": 123, "represent": [49, 165, 186], "request": [176, 184], "resampl": [83, 88, 92, 187, 188, 481], "resample_img": 369, "resample_to_img": 370, "reshap": 103, "residu": [68, 177], "resiz": 188, "resolut": [9, 111, 187, 188], "respons": [34, 37, 64, 65, 66], "rest": [162, 163, 164], "restart": 175, "restrict": [3, 36, 37], "result": [4, 9, 29, 32, 50, 53, 79, 80, 111, 122, 165, 166, 167, 168], "retriev": [3, 6, 10, 15, 16, 17, 19, 23, 29, 52, 54, 56, 58, 65, 97, 115], "review": 176, "right": [14, 15, 99, 169], "robust": 170, "roi": [16, 32, 51, 93, 187], "row": 15, "rprojector": 412, "run": [6, 33, 41, 44, 65, 69, 70, 103, 171], "run_glm": 345, "sagitt": [13, 15], "sampl": [9, 24, 66, 78, 79, 111], "saniti": 100, "save": [4, 15, 55, 62, 74, 492], "save_glm_to_bid": 376, "scale": [121, 492], "schaefer": 226, "scheme": 24, "scikit": [0, 35, 97, 116, 122, 171, 188], "scope": 176, "score": [3, 6, 29, 34, 35, 36, 40, 173], "screen": 34, "script": 168, "scrub": 56, "search": 175, "searchlight": [36, 37, 173, 302], "second": [73, 75, 76, 77, 78, 79, 80, 100, 108, 113, 118, 180, 478], "second_level": [349, 350, 351, 480], "secondlevelmodel": 349, "see": [3, 49, 58], "seed": [15, 23, 55, 58, 61, 115, 176, 188], "seitzman": 227, "select": [2, 97, 123, 162, 168], "select_from_index": 297, "separ": [11, 85], "seri": [23, 25, 52, 54, 55, 58, 68, 88, 99, 115, 163, 177, 188, 490], "set": [34, 70, 169, 171, 173, 176], "sever": 169, "shape": [186, 187], "short": 116, "show": [15, 38, 99, 452], "side": 15, "signal": [33, 51, 53, 54, 56, 58, 90, 163, 188, 472, 473, 474, 484, 490], "signals_to_img_label": 467, "signals_to_img_map": 468, "signific": [6, 68], "simpl": [4, 32, 44, 62, 70, 77, 80, 91, 168], "simpleregressionresult": 329, "simul": [44, 57, 162, 171], "singl": [6, 15, 55, 69], "size": 187, "slice": [15, 44, 492], "smith": [86, 228], "smooth": [4, 65, 94, 187, 188], "smooth_img": 371, "some": 80, "space": [43, 69, 162], "spacenet": [39, 43, 174], "spacenetclassifi": 303, "spacenetregressor": 304, "spars": [52, 53, 162, 175], "spatial": [48, 170, 174, 187], "special": 187, "specif": [50, 70, 123, 187], "specifi": 6, "sphere": [58, 173, 479], "spm": [173, 229, 230], "spm_dispersion_deriv": 346, "spm_hrf": 347, "spm_time_deriv": 348, "squar": 68, "stabil": 175, "stabl": [184, 198], "standard": 99, "state": 164, "statist": [9, 16, 62, 80, 87, 93, 96, 107, 111, 118, 123, 178, 180, 190, 218, 221, 492], "step": [4, 183, 188], "stimuli": [38, 40, 41], "stimulu": 66, "stop": [107, 175], "store": 186, "strategi": [35, 56, 168, 188], "strength": 58, "structur": [33, 57, 174, 176], "studi": [3, 51, 97, 103, 107, 108, 113, 170], "style": 176, "subject": [6, 51, 53, 55, 62, 69, 78, 162, 167, 188], "success": 107, "summar": 32, "summari": [58, 134, 161, 162, 163, 166, 167, 177, 180], "support": 3, "surfac": [9, 22, 23, 24, 37, 67, 108, 111, 112, 113, 114, 115, 116, 177, 222, 233, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 475, 476, 477, 491, 492], "surfaceimag": 316, "surfacelabelsmask": [116, 317], "surfacemask": 318, "svc": 97, "svm": [3, 29, 97, 168, 171], "swap_img_hemispher": 372, "sym_matrix_to_vec": 240, "synthet": 175, "t": [80, 87], "t_map": 78, "tabl": 495, "talairach": 231, "tangent": 162, "target": 187, "task": [71, 99, 105, 106], "tcontrastresult": 330, "team": 0, "technic": 24, "templat": [88, 92, 190, 207, 208, 209, 210, 211, 214], "tempor": 188, "term": 103, "test": [6, 68, 78, 79, 80, 93, 97, 176], "text": 186, "them": 184, "thi": 93, "those": 49, "three": [15, 99], "threshold": [6, 62, 180], "threshold_img": 373, "threshold_stats_img": 352, "through": 2, "tiledslic": 413, "time": [7, 11, 23, 25, 27, 45, 52, 54, 55, 58, 59, 61, 65, 68, 72, 81, 88, 95, 109, 115, 117, 119, 163, 175, 177, 183, 188, 490, 494], "tissu": 11, "togeth": 168, "tool": [15, 16], "top": [9, 111], "total": 162, "tox": 184, "train": 30, "transform": [55, 187, 188], "trial": 99, "true": 75, "tsv": 71, "tune": 97, "turn": [3, 49], "tutori": [1, 2, 3, 118], "tv": 39, "two": [15, 69, 70, 79, 169], "type": 11, "u": 41, "understand": [65, 88, 186, 188], "univari": [42, 102, 105, 106, 173, 486], "unmask": [122, 188, 396], "unpair": 79, "up": [70, 121, 173, 176], "upload": 184, "us": [3, 9, 15, 34, 35, 39, 48, 50, 51, 56, 86, 87, 90, 91, 97, 111, 116, 123, 165, 166, 168, 171, 179, 183, 184, 186, 234, 236, 243, 245, 246, 248, 249, 250, 251, 252, 255, 256, 258, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 292, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 316, 317, 318, 319, 320, 321, 322, 324, 331, 332, 333, 336, 338, 339, 343, 345, 349, 350, 351, 352, 354, 355, 356, 359, 360, 361, 362, 364, 365, 366, 367, 369, 370, 371, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 396, 397, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 457, 459, 461, 462, 463, 469, 470, 471, 475, 476, 477, 492], "usag": [121, 188], "user": [186, 495], "util": [481, 485], "v": [29, 30, 31, 36, 102], "valid": [3, 29, 34, 35, 97, 166, 168, 171, 173, 175], "valu": [34, 175], "variabl": 51, "variat": 175, "variou": 15, "vbm": [42, 43, 74], "vec_to_sym_matrix": 241, "vector": 3, "version": 493, "via": 29, "view": [9, 15, 111], "view_connectom": 453, "view_img": [16, 454], "view_img_on_surf": [455, 492], "view_mark": 456, "view_surf": [311, 457, 492], "visual": [2, 3, 8, 9, 10, 11, 15, 16, 19, 20, 21, 22, 25, 26, 29, 30, 31, 36, 37, 40, 41, 42, 43, 49, 52, 54, 58, 80, 83, 97, 107, 111, 114, 118, 122, 165, 166, 167, 168, 173, 188, 492], "vol_to_surf": [24, 477], "volum": [2, 3, 4, 9, 24, 25, 65, 82, 111, 118, 185, 187, 188, 223], "voxel": [6, 42, 43, 55, 74, 93, 173, 180, 187], "wai": 15, "ward": 49, "warm": 175, "watch": [165, 166], "we": [15, 32, 35, 41, 176], "web": [9, 22, 52, 54, 58, 111, 114], "weight": [3, 31, 97, 168], "what": [3, 51, 98, 161, 176, 178, 183], "when": [17, 186], "where": 186, "which": [24, 165], "who": 176, "whole": 13, "within": 58, "without": [15, 56, 97, 168, 171], "would": 24, "xprojector": 414, "xslicer": 415, "xzprojector": 416, "xzslicer": 417, "yeo": [47, 85, 232], "your": [99, 122, 176], "yprojector": 418, "yslicer": 419, "yxprojector": 420, "yxslicer": 421, "yzprojector": 422, "yzslicer": 423, "z": [6, 55, 107], "zprojector": 424, "zslicer": 425}})