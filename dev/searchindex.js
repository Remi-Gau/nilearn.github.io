Search.setIndex({"docnames": ["authors", "auto_examples/00_tutorials/index", "auto_examples/00_tutorials/plot_3d_and_4d_niimg", "auto_examples/00_tutorials/plot_decoding_tutorial", "auto_examples/00_tutorials/plot_nilearn_101", "auto_examples/00_tutorials/plot_python_101", "auto_examples/00_tutorials/plot_single_subject_single_run", "auto_examples/00_tutorials/sg_execution_times", "auto_examples/01_plotting/index", "auto_examples/01_plotting/plot_3d_map_to_surface_projection", "auto_examples/01_plotting/plot_atlas", "auto_examples/01_plotting/plot_carpet", "auto_examples/01_plotting/plot_colormaps", "auto_examples/01_plotting/plot_demo_glass_brain", "auto_examples/01_plotting/plot_demo_glass_brain_extensive", "auto_examples/01_plotting/plot_demo_more_plotting", "auto_examples/01_plotting/plot_demo_plotting", "auto_examples/01_plotting/plot_dim_plotting", "auto_examples/01_plotting/plot_haxby_masks", "auto_examples/01_plotting/plot_multiscale_parcellations", "auto_examples/01_plotting/plot_overlay", "auto_examples/01_plotting/plot_prob_atlas", "auto_examples/01_plotting/plot_surf_atlas", "auto_examples/01_plotting/plot_surf_stat_map", "auto_examples/01_plotting/plot_surface_projection_strategies", "auto_examples/01_plotting/plot_visualization", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats", "auto_examples/01_plotting/sg_execution_times", "auto_examples/02_decoding/index", "auto_examples/02_decoding/plot_haxby_anova_svm", "auto_examples/02_decoding/plot_haxby_different_estimators", "auto_examples/02_decoding/plot_haxby_frem", "auto_examples/02_decoding/plot_haxby_full_analysis", "auto_examples/02_decoding/plot_haxby_glm_decoding", "auto_examples/02_decoding/plot_haxby_grid_search", "auto_examples/02_decoding/plot_haxby_multiclass", "auto_examples/02_decoding/plot_haxby_searchlight", "auto_examples/02_decoding/plot_haxby_searchlight_surface", "auto_examples/02_decoding/plot_haxby_stimuli", "auto_examples/02_decoding/plot_mixed_gambles_frem", "auto_examples/02_decoding/plot_miyawaki_encoding", "auto_examples/02_decoding/plot_miyawaki_reconstruction", "auto_examples/02_decoding/plot_oasis_vbm", "auto_examples/02_decoding/plot_oasis_vbm_space_net", "auto_examples/02_decoding/plot_simulated_data", "auto_examples/02_decoding/sg_execution_times", "auto_examples/03_connectivity/index", "auto_examples/03_connectivity/plot_atlas_comparison", "auto_examples/03_connectivity/plot_compare_decomposition", "auto_examples/03_connectivity/plot_data_driven_parcellations", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps", "auto_examples/03_connectivity/plot_group_level_connectivity", "auto_examples/03_connectivity/plot_inverse_covariance_connectome", "auto_examples/03_connectivity/plot_multi_subject_connectome", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation", "auto_examples/03_connectivity/plot_signal_extraction", "auto_examples/03_connectivity/plot_simulated_connectome", "auto_examples/03_connectivity/plot_sphere_based_connectome", "auto_examples/03_connectivity/sg_execution_times", "auto_examples/04_glm_first_level/index", "auto_examples/04_glm_first_level/plot_adhd_dmn", "auto_examples/04_glm_first_level/plot_bids_features", "auto_examples/04_glm_first_level/plot_design_matrix", "auto_examples/04_glm_first_level/plot_fiac_analysis", "auto_examples/04_glm_first_level/plot_fir_model", "auto_examples/04_glm_first_level/plot_first_level_details", "auto_examples/04_glm_first_level/plot_fixed_effects", "auto_examples/04_glm_first_level/plot_hrf", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis", "auto_examples/04_glm_first_level/plot_predictions_residuals", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces", "auto_examples/04_glm_first_level/plot_write_events_file", "auto_examples/04_glm_first_level/sg_execution_times", "auto_examples/05_glm_second_level/index", "auto_examples/05_glm_second_level/plot_oasis", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels", "auto_examples/05_glm_second_level/plot_second_level_association_test", "auto_examples/05_glm_second_level/plot_second_level_design_matrix", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test", "auto_examples/05_glm_second_level/plot_thresholding", "auto_examples/05_glm_second_level/sg_execution_times", "auto_examples/06_manipulating_images/index", "auto_examples/06_manipulating_images/plot_affine_transformation", "auto_examples/06_manipulating_images/plot_compare_mean_image", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps", "auto_examples/06_manipulating_images/plot_mask_computation", "auto_examples/06_manipulating_images/plot_negate_image", "auto_examples/06_manipulating_images/plot_nifti_labels_simple", "auto_examples/06_manipulating_images/plot_nifti_simple", "auto_examples/06_manipulating_images/plot_resample_to_template", "auto_examples/06_manipulating_images/plot_roi_extraction", "auto_examples/06_manipulating_images/plot_smooth_mean_image", "auto_examples/06_manipulating_images/sg_execution_times", "auto_examples/07_advanced/index", "auto_examples/07_advanced/plot_advanced_decoding_scikit", "auto_examples/07_advanced/plot_age_group_prediction_cross_val", "auto_examples/07_advanced/plot_beta_series", "auto_examples/07_advanced/plot_bids_analysis", "auto_examples/07_advanced/plot_haxby_mass_univariate", "auto_examples/07_advanced/plot_ica_neurovault", "auto_examples/07_advanced/plot_ica_resting_state", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods", "auto_examples/07_advanced/plot_localizer_simple_analysis", "auto_examples/07_advanced/plot_neurovault_meta_analysis", "auto_examples/07_advanced/plot_surface_bids_analysis", "auto_examples/07_advanced/sg_execution_times", "auto_examples/index", "bibliography", "building_blocks/index", "building_blocks/manual_pipeline", "building_blocks/neurovault", "changes/0.1.0", "changes/0.1.1", "changes/0.1.2", "changes/0.1.3", "changes/0.1.4", "changes/0.10.0", "changes/0.2.0", "changes/0.2.1", "changes/0.2.2", "changes/0.2.3", "changes/0.2.4", "changes/0.2.5", "changes/0.2.6", "changes/0.3.0", "changes/0.3.1", "changes/0.4.0", "changes/0.4.1", "changes/0.4.2", "changes/0.5.0", "changes/0.5.1", "changes/0.5.2", "changes/0.6.0", "changes/0.6.1", "changes/0.6.2", "changes/0.7.0", "changes/0.7.1", "changes/0.8.0", "changes/0.8.1", "changes/0.9.0", "changes/0.9.1", "changes/0.9.2", "changes/latest", "changes/names", "changes/whats_new", "connectivity/connectome_extraction", "connectivity/functional_connectomes", "connectivity/index", "connectivity/parcellating", "connectivity/region_extraction", "connectivity/resting_state_networks", "decoding/decoding_intro", "decoding/estimator_choice", "decoding/frem", "decoding/going_further", "decoding/index", "decoding/searchlight", "decoding/space_net", "developers/group_sparse_covariance", "development", "glm/first_level_model", "glm/glm_intro", "glm/index", "glm/second_level_model", "glossary", "index", "introduction", "maintenance", "manipulating_images/index", "manipulating_images/input_output", "manipulating_images/manipulating_images", "manipulating_images/masker_objects", "modules/connectome", "modules/datasets", "modules/decoding", "modules/decomposition", "modules/generated/nilearn.connectome.ConnectivityMeasure", "modules/generated/nilearn.connectome.GroupSparseCovariance", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV", "modules/generated/nilearn.connectome.cov_to_corr", "modules/generated/nilearn.connectome.group_sparse_covariance", "modules/generated/nilearn.connectome.prec_to_partial", "modules/generated/nilearn.connectome.sym_matrix_to_vec", "modules/generated/nilearn.connectome.vec_to_sym_matrix", "modules/generated/nilearn.datasets.fetch_abide_pcp", "modules/generated/nilearn.datasets.fetch_adhd", "modules/generated/nilearn.datasets.fetch_atlas_aal", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009", "modules/generated/nilearn.datasets.fetch_atlas_difumo", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford", "modules/generated/nilearn.datasets.fetch_atlas_juelich", "modules/generated/nilearn.datasets.fetch_atlas_msdl", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux", "modules/generated/nilearn.datasets.fetch_atlas_talairach", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010", "modules/generated/nilearn.datasets.fetch_coords_power_2011", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018", "modules/generated/nilearn.datasets.fetch_development_fmri", "modules/generated/nilearn.datasets.fetch_ds000030_urls", "modules/generated/nilearn.datasets.fetch_fiac_first_level", "modules/generated/nilearn.datasets.fetch_haxby", "modules/generated/nilearn.datasets.fetch_icbm152_2009", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset", "modules/generated/nilearn.datasets.fetch_localizer_button_task", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task", "modules/generated/nilearn.datasets.fetch_localizer_contrasts", "modules/generated/nilearn.datasets.fetch_localizer_first_level", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats", "modules/generated/nilearn.datasets.fetch_mixed_gambles", "modules/generated/nilearn.datasets.fetch_miyawaki2008", "modules/generated/nilearn.datasets.fetch_neurovault", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task", "modules/generated/nilearn.datasets.fetch_neurovault_ids", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task", "modules/generated/nilearn.datasets.fetch_oasis_vbm", "modules/generated/nilearn.datasets.fetch_openneuro_dataset", "modules/generated/nilearn.datasets.fetch_openneuro_dataset_index", "modules/generated/nilearn.datasets.fetch_spm_auditory", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri", "modules/generated/nilearn.datasets.fetch_surf_fsaverage", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced", "modules/generated/nilearn.datasets.get_data_dirs", "modules/generated/nilearn.datasets.load_mni152_brain_mask", "modules/generated/nilearn.datasets.load_mni152_gm_mask", "modules/generated/nilearn.datasets.load_mni152_gm_template", "modules/generated/nilearn.datasets.load_mni152_template", "modules/generated/nilearn.datasets.load_mni152_wm_mask", "modules/generated/nilearn.datasets.load_mni152_wm_template", "modules/generated/nilearn.datasets.patch_openneuro_dataset", "modules/generated/nilearn.datasets.select_from_index", "modules/generated/nilearn.decoding.Decoder", "modules/generated/nilearn.decoding.DecoderRegressor", "modules/generated/nilearn.decoding.FREMClassifier", "modules/generated/nilearn.decoding.FREMRegressor", "modules/generated/nilearn.decoding.SearchLight", "modules/generated/nilearn.decoding.SpaceNetClassifier", "modules/generated/nilearn.decoding.SpaceNetRegressor", "modules/generated/nilearn.decomposition.CanICA", "modules/generated/nilearn.decomposition.DictLearning", "modules/generated/nilearn.glm.ARModel", "modules/generated/nilearn.glm.Contrast", "modules/generated/nilearn.glm.FContrastResults", "modules/generated/nilearn.glm.LikelihoodModelResults", "modules/generated/nilearn.glm.OLSModel", "modules/generated/nilearn.glm.RegressionResults", "modules/generated/nilearn.glm.SimpleRegressionResults", "modules/generated/nilearn.glm.TContrastResults", "modules/generated/nilearn.glm.cluster_level_inference", "modules/generated/nilearn.glm.compute_contrast", "modules/generated/nilearn.glm.compute_fixed_effects", "modules/generated/nilearn.glm.expression_to_contrast_vector", "modules/generated/nilearn.glm.fdr_threshold", "modules/generated/nilearn.glm.first_level.FirstLevelModel", "modules/generated/nilearn.glm.first_level.check_design_matrix", "modules/generated/nilearn.glm.first_level.compute_regressor", "modules/generated/nilearn.glm.first_level.first_level_from_bids", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative", "modules/generated/nilearn.glm.first_level.glover_hrf", "modules/generated/nilearn.glm.first_level.glover_time_derivative", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix", "modules/generated/nilearn.glm.first_level.mean_scaling", "modules/generated/nilearn.glm.first_level.run_glm", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative", "modules/generated/nilearn.glm.first_level.spm_hrf", "modules/generated/nilearn.glm.first_level.spm_time_derivative", "modules/generated/nilearn.glm.second_level.SecondLevelModel", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix", "modules/generated/nilearn.glm.second_level.non_parametric_inference", "modules/generated/nilearn.glm.threshold_stats_img", "modules/generated/nilearn.image.binarize_img", "modules/generated/nilearn.image.clean_img", "modules/generated/nilearn.image.concat_imgs", "modules/generated/nilearn.image.coord_transform", "modules/generated/nilearn.image.copy_img", "modules/generated/nilearn.image.crop_img", "modules/generated/nilearn.image.get_data", "modules/generated/nilearn.image.high_variance_confounds", "modules/generated/nilearn.image.index_img", "modules/generated/nilearn.image.iter_img", "modules/generated/nilearn.image.largest_connected_component_img", "modules/generated/nilearn.image.load_img", "modules/generated/nilearn.image.math_img", "modules/generated/nilearn.image.mean_img", "modules/generated/nilearn.image.new_img_like", "modules/generated/nilearn.image.reorder_img", "modules/generated/nilearn.image.resample_img", "modules/generated/nilearn.image.resample_to_img", "modules/generated/nilearn.image.smooth_img", "modules/generated/nilearn.image.swap_img_hemispheres", "modules/generated/nilearn.image.threshold_img", "modules/generated/nilearn.interfaces.bids.get_bids_files", "modules/generated/nilearn.interfaces.bids.parse_bids_filename", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids", "modules/generated/nilearn.interfaces.fmriprep.load_confounds", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat", "modules/generated/nilearn.maskers.BaseMasker", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker", "modules/generated/nilearn.maskers.MultiNiftiMasker", "modules/generated/nilearn.maskers.NiftiLabelsMasker", "modules/generated/nilearn.maskers.NiftiMapsMasker", "modules/generated/nilearn.maskers.NiftiMasker", "modules/generated/nilearn.maskers.NiftiSpheresMasker", "modules/generated/nilearn.masking.apply_mask", "modules/generated/nilearn.masking.compute_background_mask", "modules/generated/nilearn.masking.compute_brain_mask", "modules/generated/nilearn.masking.compute_epi_mask", "modules/generated/nilearn.masking.compute_multi_background_mask", "modules/generated/nilearn.masking.compute_multi_brain_mask", "modules/generated/nilearn.masking.compute_multi_epi_mask", "modules/generated/nilearn.masking.intersect_masks", "modules/generated/nilearn.masking.unmask", "modules/generated/nilearn.mass_univariate.permuted_ols", "modules/generated/nilearn.plotting.displays.BaseAxes", "modules/generated/nilearn.plotting.displays.BaseSlicer", "modules/generated/nilearn.plotting.displays.CutAxes", "modules/generated/nilearn.plotting.displays.GlassBrainAxes", "modules/generated/nilearn.plotting.displays.LProjector", "modules/generated/nilearn.plotting.displays.LRProjector", "modules/generated/nilearn.plotting.displays.LYRProjector", "modules/generated/nilearn.plotting.displays.LYRZProjector", "modules/generated/nilearn.plotting.displays.LZRProjector", "modules/generated/nilearn.plotting.displays.LZRYProjector", "modules/generated/nilearn.plotting.displays.MosaicSlicer", "modules/generated/nilearn.plotting.displays.OrthoProjector", "modules/generated/nilearn.plotting.displays.OrthoSlicer", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure", "modules/generated/nilearn.plotting.displays.RProjector", "modules/generated/nilearn.plotting.displays.TiledSlicer", "modules/generated/nilearn.plotting.displays.XProjector", "modules/generated/nilearn.plotting.displays.XSlicer", "modules/generated/nilearn.plotting.displays.XZProjector", "modules/generated/nilearn.plotting.displays.XZSlicer", "modules/generated/nilearn.plotting.displays.YProjector", "modules/generated/nilearn.plotting.displays.YSlicer", "modules/generated/nilearn.plotting.displays.YXProjector", "modules/generated/nilearn.plotting.displays.YXSlicer", "modules/generated/nilearn.plotting.displays.YZProjector", "modules/generated/nilearn.plotting.displays.YZSlicer", "modules/generated/nilearn.plotting.displays.ZProjector", "modules/generated/nilearn.plotting.displays.ZSlicer", "modules/generated/nilearn.plotting.displays.get_projector", "modules/generated/nilearn.plotting.displays.get_slicer", "modules/generated/nilearn.plotting.find_cut_slices", "modules/generated/nilearn.plotting.find_parcellation_cut_coords", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords", "modules/generated/nilearn.plotting.find_xyz_cut_coords", "modules/generated/nilearn.plotting.plot_anat", "modules/generated/nilearn.plotting.plot_carpet", "modules/generated/nilearn.plotting.plot_connectome", "modules/generated/nilearn.plotting.plot_contrast_matrix", "modules/generated/nilearn.plotting.plot_design_matrix", "modules/generated/nilearn.plotting.plot_epi", "modules/generated/nilearn.plotting.plot_event", "modules/generated/nilearn.plotting.plot_glass_brain", "modules/generated/nilearn.plotting.plot_img", "modules/generated/nilearn.plotting.plot_img_comparison", "modules/generated/nilearn.plotting.plot_img_on_surf", "modules/generated/nilearn.plotting.plot_markers", "modules/generated/nilearn.plotting.plot_matrix", "modules/generated/nilearn.plotting.plot_prob_atlas", "modules/generated/nilearn.plotting.plot_roi", "modules/generated/nilearn.plotting.plot_stat_map", "modules/generated/nilearn.plotting.plot_surf", "modules/generated/nilearn.plotting.plot_surf_contours", "modules/generated/nilearn.plotting.plot_surf_roi", "modules/generated/nilearn.plotting.plot_surf_stat_map", "modules/generated/nilearn.plotting.show", "modules/generated/nilearn.plotting.view_connectome", "modules/generated/nilearn.plotting.view_img", "modules/generated/nilearn.plotting.view_img_on_surf", "modules/generated/nilearn.plotting.view_markers", "modules/generated/nilearn.plotting.view_surf", "modules/generated/nilearn.regions.HierarchicalKMeans", "modules/generated/nilearn.regions.Parcellations", "modules/generated/nilearn.regions.ReNA", "modules/generated/nilearn.regions.RegionExtractor", "modules/generated/nilearn.regions.connected_label_regions", "modules/generated/nilearn.regions.connected_regions", "modules/generated/nilearn.regions.img_to_signals_labels", "modules/generated/nilearn.regions.img_to_signals_maps", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration", "modules/generated/nilearn.regions.signals_to_img_labels", "modules/generated/nilearn.regions.signals_to_img_maps", "modules/generated/nilearn.reporting.HTMLReport", "modules/generated/nilearn.reporting.get_clusters_table", "modules/generated/nilearn.reporting.make_glm_report", "modules/generated/nilearn.signal.butterworth", "modules/generated/nilearn.signal.clean", "modules/generated/nilearn.signal.high_variance_confounds", "modules/generated/nilearn.surface.load_surf_data", "modules/generated/nilearn.surface.load_surf_mesh", "modules/generated/nilearn.surface.vol_to_surf", "modules/glm", "modules/image", "modules/index", "modules/interfaces", "modules/maskers", "modules/masking", "modules/mass_univariate", "modules/plotting", "modules/regions", "modules/reporting", "modules/signal", "modules/surface", "plotting/index", "quickstart", "user_guide"], "filenames": ["authors.rst", "auto_examples/00_tutorials/index.rst", "auto_examples/00_tutorials/plot_3d_and_4d_niimg.rst", "auto_examples/00_tutorials/plot_decoding_tutorial.rst", "auto_examples/00_tutorials/plot_nilearn_101.rst", "auto_examples/00_tutorials/plot_python_101.rst", "auto_examples/00_tutorials/plot_single_subject_single_run.rst", "auto_examples/00_tutorials/sg_execution_times.rst", "auto_examples/01_plotting/index.rst", "auto_examples/01_plotting/plot_3d_map_to_surface_projection.rst", "auto_examples/01_plotting/plot_atlas.rst", "auto_examples/01_plotting/plot_carpet.rst", "auto_examples/01_plotting/plot_colormaps.rst", "auto_examples/01_plotting/plot_demo_glass_brain.rst", "auto_examples/01_plotting/plot_demo_glass_brain_extensive.rst", "auto_examples/01_plotting/plot_demo_more_plotting.rst", "auto_examples/01_plotting/plot_demo_plotting.rst", "auto_examples/01_plotting/plot_dim_plotting.rst", "auto_examples/01_plotting/plot_haxby_masks.rst", "auto_examples/01_plotting/plot_multiscale_parcellations.rst", "auto_examples/01_plotting/plot_overlay.rst", "auto_examples/01_plotting/plot_prob_atlas.rst", "auto_examples/01_plotting/plot_surf_atlas.rst", "auto_examples/01_plotting/plot_surf_stat_map.rst", "auto_examples/01_plotting/plot_surface_projection_strategies.rst", "auto_examples/01_plotting/plot_visualization.rst", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats.rst", "auto_examples/01_plotting/sg_execution_times.rst", "auto_examples/02_decoding/index.rst", "auto_examples/02_decoding/plot_haxby_anova_svm.rst", "auto_examples/02_decoding/plot_haxby_different_estimators.rst", "auto_examples/02_decoding/plot_haxby_frem.rst", "auto_examples/02_decoding/plot_haxby_full_analysis.rst", "auto_examples/02_decoding/plot_haxby_glm_decoding.rst", "auto_examples/02_decoding/plot_haxby_grid_search.rst", "auto_examples/02_decoding/plot_haxby_multiclass.rst", "auto_examples/02_decoding/plot_haxby_searchlight.rst", "auto_examples/02_decoding/plot_haxby_searchlight_surface.rst", "auto_examples/02_decoding/plot_haxby_stimuli.rst", "auto_examples/02_decoding/plot_mixed_gambles_frem.rst", "auto_examples/02_decoding/plot_miyawaki_encoding.rst", "auto_examples/02_decoding/plot_miyawaki_reconstruction.rst", "auto_examples/02_decoding/plot_oasis_vbm.rst", "auto_examples/02_decoding/plot_oasis_vbm_space_net.rst", "auto_examples/02_decoding/plot_simulated_data.rst", "auto_examples/02_decoding/sg_execution_times.rst", "auto_examples/03_connectivity/index.rst", "auto_examples/03_connectivity/plot_atlas_comparison.rst", "auto_examples/03_connectivity/plot_compare_decomposition.rst", "auto_examples/03_connectivity/plot_data_driven_parcellations.rst", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps.rst", "auto_examples/03_connectivity/plot_group_level_connectivity.rst", "auto_examples/03_connectivity/plot_inverse_covariance_connectome.rst", "auto_examples/03_connectivity/plot_multi_subject_connectome.rst", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction.rst", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation.rst", "auto_examples/03_connectivity/plot_signal_extraction.rst", "auto_examples/03_connectivity/plot_simulated_connectome.rst", "auto_examples/03_connectivity/plot_sphere_based_connectome.rst", "auto_examples/03_connectivity/sg_execution_times.rst", "auto_examples/04_glm_first_level/index.rst", "auto_examples/04_glm_first_level/plot_adhd_dmn.rst", "auto_examples/04_glm_first_level/plot_bids_features.rst", "auto_examples/04_glm_first_level/plot_design_matrix.rst", "auto_examples/04_glm_first_level/plot_fiac_analysis.rst", "auto_examples/04_glm_first_level/plot_fir_model.rst", "auto_examples/04_glm_first_level/plot_first_level_details.rst", "auto_examples/04_glm_first_level/plot_fixed_effects.rst", "auto_examples/04_glm_first_level/plot_hrf.rst", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis.rst", "auto_examples/04_glm_first_level/plot_predictions_residuals.rst", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces.rst", "auto_examples/04_glm_first_level/plot_write_events_file.rst", "auto_examples/04_glm_first_level/sg_execution_times.rst", "auto_examples/05_glm_second_level/index.rst", "auto_examples/05_glm_second_level/plot_oasis.rst", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels.rst", "auto_examples/05_glm_second_level/plot_second_level_association_test.rst", "auto_examples/05_glm_second_level/plot_second_level_design_matrix.rst", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test.rst", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test.rst", "auto_examples/05_glm_second_level/plot_thresholding.rst", "auto_examples/05_glm_second_level/sg_execution_times.rst", "auto_examples/06_manipulating_images/index.rst", "auto_examples/06_manipulating_images/plot_affine_transformation.rst", "auto_examples/06_manipulating_images/plot_compare_mean_image.rst", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image.rst", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas.rst", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps.rst", "auto_examples/06_manipulating_images/plot_mask_computation.rst", "auto_examples/06_manipulating_images/plot_negate_image.rst", "auto_examples/06_manipulating_images/plot_nifti_labels_simple.rst", "auto_examples/06_manipulating_images/plot_nifti_simple.rst", "auto_examples/06_manipulating_images/plot_resample_to_template.rst", "auto_examples/06_manipulating_images/plot_roi_extraction.rst", "auto_examples/06_manipulating_images/plot_smooth_mean_image.rst", "auto_examples/06_manipulating_images/sg_execution_times.rst", "auto_examples/07_advanced/index.rst", "auto_examples/07_advanced/plot_advanced_decoding_scikit.rst", "auto_examples/07_advanced/plot_age_group_prediction_cross_val.rst", "auto_examples/07_advanced/plot_beta_series.rst", "auto_examples/07_advanced/plot_bids_analysis.rst", "auto_examples/07_advanced/plot_haxby_mass_univariate.rst", "auto_examples/07_advanced/plot_ica_neurovault.rst", "auto_examples/07_advanced/plot_ica_resting_state.rst", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods.rst", "auto_examples/07_advanced/plot_localizer_simple_analysis.rst", "auto_examples/07_advanced/plot_neurovault_meta_analysis.rst", "auto_examples/07_advanced/plot_surface_bids_analysis.rst", "auto_examples/07_advanced/sg_execution_times.rst", "auto_examples/index.rst", "bibliography.rst", "building_blocks/index.rst", "building_blocks/manual_pipeline.rst", "building_blocks/neurovault.rst", "changes/0.1.0.rst", "changes/0.1.1.rst", "changes/0.1.2.rst", "changes/0.1.3.rst", "changes/0.1.4.rst", "changes/0.10.0.rst", "changes/0.2.0.rst", "changes/0.2.1.rst", "changes/0.2.2.rst", "changes/0.2.3.rst", "changes/0.2.4.rst", "changes/0.2.5.rst", "changes/0.2.6.rst", "changes/0.3.0.rst", "changes/0.3.1.rst", "changes/0.4.0.rst", "changes/0.4.1.rst", "changes/0.4.2.rst", "changes/0.5.0.rst", "changes/0.5.1.rst", "changes/0.5.2.rst", "changes/0.6.0.rst", "changes/0.6.1.rst", "changes/0.6.2.rst", "changes/0.7.0.rst", "changes/0.7.1.rst", "changes/0.8.0.rst", "changes/0.8.1.rst", "changes/0.9.0.rst", "changes/0.9.1.rst", "changes/0.9.2.rst", "changes/latest.rst", "changes/names.rst", "changes/whats_new.rst", "connectivity/connectome_extraction.rst", "connectivity/functional_connectomes.rst", "connectivity/index.rst", "connectivity/parcellating.rst", "connectivity/region_extraction.rst", "connectivity/resting_state_networks.rst", "decoding/decoding_intro.rst", "decoding/estimator_choice.rst", "decoding/frem.rst", "decoding/going_further.rst", "decoding/index.rst", "decoding/searchlight.rst", "decoding/space_net.rst", "developers/group_sparse_covariance.rst", "development.rst", "glm/first_level_model.rst", "glm/glm_intro.rst", "glm/index.rst", "glm/second_level_model.rst", "glossary.rst", "index.rst", "introduction.rst", "maintenance.rst", "manipulating_images/index.rst", "manipulating_images/input_output.rst", "manipulating_images/manipulating_images.rst", "manipulating_images/masker_objects.rst", "modules/connectome.rst", "modules/datasets.rst", "modules/decoding.rst", "modules/decomposition.rst", "modules/generated/nilearn.connectome.ConnectivityMeasure.rst", "modules/generated/nilearn.connectome.GroupSparseCovariance.rst", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV.rst", "modules/generated/nilearn.connectome.cov_to_corr.rst", "modules/generated/nilearn.connectome.group_sparse_covariance.rst", "modules/generated/nilearn.connectome.prec_to_partial.rst", "modules/generated/nilearn.connectome.sym_matrix_to_vec.rst", "modules/generated/nilearn.connectome.vec_to_sym_matrix.rst", "modules/generated/nilearn.datasets.fetch_abide_pcp.rst", "modules/generated/nilearn.datasets.fetch_adhd.rst", "modules/generated/nilearn.datasets.fetch_atlas_aal.rst", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011.rst", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015.rst", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012.rst", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_difumo.rst", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford.rst", "modules/generated/nilearn.datasets.fetch_atlas_juelich.rst", "modules/generated/nilearn.datasets.fetch_atlas_msdl.rst", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017.rst", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018.rst", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux.rst", "modules/generated/nilearn.datasets.fetch_atlas_talairach.rst", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011.rst", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset.rst", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010.rst", "modules/generated/nilearn.datasets.fetch_coords_power_2011.rst", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018.rst", "modules/generated/nilearn.datasets.fetch_development_fmri.rst", "modules/generated/nilearn.datasets.fetch_ds000030_urls.rst", "modules/generated/nilearn.datasets.fetch_fiac_first_level.rst", "modules/generated/nilearn.datasets.fetch_haxby.rst", "modules/generated/nilearn.datasets.fetch_icbm152_2009.rst", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask.rst", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset.rst", "modules/generated/nilearn.datasets.fetch_localizer_button_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_contrasts.rst", "modules/generated/nilearn.datasets.fetch_localizer_first_level.rst", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats.rst", "modules/generated/nilearn.datasets.fetch_mixed_gambles.rst", "modules/generated/nilearn.datasets.fetch_miyawaki2008.rst", "modules/generated/nilearn.datasets.fetch_neurovault.rst", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task.rst", "modules/generated/nilearn.datasets.fetch_neurovault_ids.rst", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task.rst", "modules/generated/nilearn.datasets.fetch_oasis_vbm.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset_index.rst", "modules/generated/nilearn.datasets.fetch_spm_auditory.rst", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri.rst", "modules/generated/nilearn.datasets.fetch_surf_fsaverage.rst", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced.rst", "modules/generated/nilearn.datasets.get_data_dirs.rst", "modules/generated/nilearn.datasets.load_mni152_brain_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_template.rst", "modules/generated/nilearn.datasets.load_mni152_template.rst", "modules/generated/nilearn.datasets.load_mni152_wm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_wm_template.rst", "modules/generated/nilearn.datasets.patch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.select_from_index.rst", "modules/generated/nilearn.decoding.Decoder.rst", "modules/generated/nilearn.decoding.DecoderRegressor.rst", "modules/generated/nilearn.decoding.FREMClassifier.rst", "modules/generated/nilearn.decoding.FREMRegressor.rst", "modules/generated/nilearn.decoding.SearchLight.rst", "modules/generated/nilearn.decoding.SpaceNetClassifier.rst", "modules/generated/nilearn.decoding.SpaceNetRegressor.rst", "modules/generated/nilearn.decomposition.CanICA.rst", "modules/generated/nilearn.decomposition.DictLearning.rst", "modules/generated/nilearn.glm.ARModel.rst", "modules/generated/nilearn.glm.Contrast.rst", "modules/generated/nilearn.glm.FContrastResults.rst", "modules/generated/nilearn.glm.LikelihoodModelResults.rst", "modules/generated/nilearn.glm.OLSModel.rst", "modules/generated/nilearn.glm.RegressionResults.rst", "modules/generated/nilearn.glm.SimpleRegressionResults.rst", "modules/generated/nilearn.glm.TContrastResults.rst", "modules/generated/nilearn.glm.cluster_level_inference.rst", "modules/generated/nilearn.glm.compute_contrast.rst", "modules/generated/nilearn.glm.compute_fixed_effects.rst", "modules/generated/nilearn.glm.expression_to_contrast_vector.rst", "modules/generated/nilearn.glm.fdr_threshold.rst", "modules/generated/nilearn.glm.first_level.FirstLevelModel.rst", "modules/generated/nilearn.glm.first_level.check_design_matrix.rst", "modules/generated/nilearn.glm.first_level.compute_regressor.rst", "modules/generated/nilearn.glm.first_level.first_level_from_bids.rst", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.glover_hrf.rst", "modules/generated/nilearn.glm.first_level.glover_time_derivative.rst", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix.rst", "modules/generated/nilearn.glm.first_level.mean_scaling.rst", "modules/generated/nilearn.glm.first_level.run_glm.rst", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.spm_hrf.rst", "modules/generated/nilearn.glm.first_level.spm_time_derivative.rst", "modules/generated/nilearn.glm.second_level.SecondLevelModel.rst", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix.rst", "modules/generated/nilearn.glm.second_level.non_parametric_inference.rst", "modules/generated/nilearn.glm.threshold_stats_img.rst", "modules/generated/nilearn.image.binarize_img.rst", "modules/generated/nilearn.image.clean_img.rst", "modules/generated/nilearn.image.concat_imgs.rst", "modules/generated/nilearn.image.coord_transform.rst", "modules/generated/nilearn.image.copy_img.rst", "modules/generated/nilearn.image.crop_img.rst", "modules/generated/nilearn.image.get_data.rst", "modules/generated/nilearn.image.high_variance_confounds.rst", "modules/generated/nilearn.image.index_img.rst", "modules/generated/nilearn.image.iter_img.rst", "modules/generated/nilearn.image.largest_connected_component_img.rst", "modules/generated/nilearn.image.load_img.rst", "modules/generated/nilearn.image.math_img.rst", "modules/generated/nilearn.image.mean_img.rst", "modules/generated/nilearn.image.new_img_like.rst", "modules/generated/nilearn.image.reorder_img.rst", "modules/generated/nilearn.image.resample_img.rst", "modules/generated/nilearn.image.resample_to_img.rst", "modules/generated/nilearn.image.smooth_img.rst", "modules/generated/nilearn.image.swap_img_hemispheres.rst", "modules/generated/nilearn.image.threshold_img.rst", "modules/generated/nilearn.interfaces.bids.get_bids_files.rst", "modules/generated/nilearn.interfaces.bids.parse_bids_filename.rst", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy.rst", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat.rst", "modules/generated/nilearn.maskers.BaseMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.NiftiMapsMasker.rst", "modules/generated/nilearn.maskers.NiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiSpheresMasker.rst", "modules/generated/nilearn.masking.apply_mask.rst", "modules/generated/nilearn.masking.compute_background_mask.rst", "modules/generated/nilearn.masking.compute_brain_mask.rst", "modules/generated/nilearn.masking.compute_epi_mask.rst", "modules/generated/nilearn.masking.compute_multi_background_mask.rst", "modules/generated/nilearn.masking.compute_multi_brain_mask.rst", "modules/generated/nilearn.masking.compute_multi_epi_mask.rst", "modules/generated/nilearn.masking.intersect_masks.rst", "modules/generated/nilearn.masking.unmask.rst", "modules/generated/nilearn.mass_univariate.permuted_ols.rst", "modules/generated/nilearn.plotting.displays.BaseAxes.rst", "modules/generated/nilearn.plotting.displays.BaseSlicer.rst", "modules/generated/nilearn.plotting.displays.CutAxes.rst", "modules/generated/nilearn.plotting.displays.GlassBrainAxes.rst", "modules/generated/nilearn.plotting.displays.LProjector.rst", "modules/generated/nilearn.plotting.displays.LRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRZProjector.rst", "modules/generated/nilearn.plotting.displays.LZRProjector.rst", "modules/generated/nilearn.plotting.displays.LZRYProjector.rst", "modules/generated/nilearn.plotting.displays.MosaicSlicer.rst", "modules/generated/nilearn.plotting.displays.OrthoProjector.rst", "modules/generated/nilearn.plotting.displays.OrthoSlicer.rst", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure.rst", "modules/generated/nilearn.plotting.displays.RProjector.rst", "modules/generated/nilearn.plotting.displays.TiledSlicer.rst", "modules/generated/nilearn.plotting.displays.XProjector.rst", "modules/generated/nilearn.plotting.displays.XSlicer.rst", "modules/generated/nilearn.plotting.displays.XZProjector.rst", "modules/generated/nilearn.plotting.displays.XZSlicer.rst", "modules/generated/nilearn.plotting.displays.YProjector.rst", "modules/generated/nilearn.plotting.displays.YSlicer.rst", "modules/generated/nilearn.plotting.displays.YXProjector.rst", "modules/generated/nilearn.plotting.displays.YXSlicer.rst", "modules/generated/nilearn.plotting.displays.YZProjector.rst", "modules/generated/nilearn.plotting.displays.YZSlicer.rst", "modules/generated/nilearn.plotting.displays.ZProjector.rst", "modules/generated/nilearn.plotting.displays.ZSlicer.rst", "modules/generated/nilearn.plotting.displays.get_projector.rst", "modules/generated/nilearn.plotting.displays.get_slicer.rst", "modules/generated/nilearn.plotting.find_cut_slices.rst", "modules/generated/nilearn.plotting.find_parcellation_cut_coords.rst", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords.rst", "modules/generated/nilearn.plotting.find_xyz_cut_coords.rst", "modules/generated/nilearn.plotting.plot_anat.rst", "modules/generated/nilearn.plotting.plot_carpet.rst", "modules/generated/nilearn.plotting.plot_connectome.rst", "modules/generated/nilearn.plotting.plot_contrast_matrix.rst", "modules/generated/nilearn.plotting.plot_design_matrix.rst", "modules/generated/nilearn.plotting.plot_epi.rst", "modules/generated/nilearn.plotting.plot_event.rst", "modules/generated/nilearn.plotting.plot_glass_brain.rst", "modules/generated/nilearn.plotting.plot_img.rst", "modules/generated/nilearn.plotting.plot_img_comparison.rst", "modules/generated/nilearn.plotting.plot_img_on_surf.rst", "modules/generated/nilearn.plotting.plot_markers.rst", "modules/generated/nilearn.plotting.plot_matrix.rst", "modules/generated/nilearn.plotting.plot_prob_atlas.rst", "modules/generated/nilearn.plotting.plot_roi.rst", "modules/generated/nilearn.plotting.plot_stat_map.rst", "modules/generated/nilearn.plotting.plot_surf.rst", "modules/generated/nilearn.plotting.plot_surf_contours.rst", "modules/generated/nilearn.plotting.plot_surf_roi.rst", "modules/generated/nilearn.plotting.plot_surf_stat_map.rst", "modules/generated/nilearn.plotting.show.rst", "modules/generated/nilearn.plotting.view_connectome.rst", "modules/generated/nilearn.plotting.view_img.rst", "modules/generated/nilearn.plotting.view_img_on_surf.rst", "modules/generated/nilearn.plotting.view_markers.rst", "modules/generated/nilearn.plotting.view_surf.rst", "modules/generated/nilearn.regions.HierarchicalKMeans.rst", "modules/generated/nilearn.regions.Parcellations.rst", "modules/generated/nilearn.regions.ReNA.rst", "modules/generated/nilearn.regions.RegionExtractor.rst", "modules/generated/nilearn.regions.connected_label_regions.rst", "modules/generated/nilearn.regions.connected_regions.rst", "modules/generated/nilearn.regions.img_to_signals_labels.rst", "modules/generated/nilearn.regions.img_to_signals_maps.rst", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration.rst", "modules/generated/nilearn.regions.signals_to_img_labels.rst", "modules/generated/nilearn.regions.signals_to_img_maps.rst", "modules/generated/nilearn.reporting.HTMLReport.rst", "modules/generated/nilearn.reporting.get_clusters_table.rst", "modules/generated/nilearn.reporting.make_glm_report.rst", "modules/generated/nilearn.signal.butterworth.rst", "modules/generated/nilearn.signal.clean.rst", "modules/generated/nilearn.signal.high_variance_confounds.rst", "modules/generated/nilearn.surface.load_surf_data.rst", "modules/generated/nilearn.surface.load_surf_mesh.rst", "modules/generated/nilearn.surface.vol_to_surf.rst", "modules/glm.rst", "modules/image.rst", "modules/index.rst", "modules/interfaces.rst", "modules/maskers.rst", "modules/masking.rst", "modules/mass_univariate.rst", "modules/plotting.rst", "modules/regions.rst", "modules/reporting.rst", "modules/signal.rst", "modules/surface.rst", "plotting/index.rst", "quickstart.md", "user_guide.rst"], "titles": ["Team", "Basic tutorials", "3D and 4D niimgs: handling and visualizing", "A introduction tutorial to fMRI decoding", "Basic nilearn example: manipulating and looking at data", "Basic numerics and plotting with Python", "Intro to GLM Analysis: a single-session, single-subject fMRI dataset", "Computation times", "Visualization of brain images", "Making a surface plot of a 3D statistical map", "Basic Atlas plotting", "Visualizing global patterns with a carpet plot", "Matplotlib colormaps in Nilearn", "Glass brain plotting in nilearn", "Glass brain plotting in nilearn (all options)", "More plotting tools from nilearn", "Plotting tools in nilearn", "Controlling the contrast of the background when plotting", "Plot Haxby masks", "Visualizing multiscale functional brain parcellations", "Visualizing a probabilistic atlas: the default mode in the MSDL atlas", "Visualizing 4D probabilistic atlas maps", "Loading and plotting of a cortical surface atlas", "Seed-based connectivity on the surface", "Technical point: Illustration of the volume to surface sampling schemes", "NeuroImaging volumes visualization", "Visualizing Megatrawls Network Matrices from Human Connectome Project", "Computation times", "Decoding and predicting from brain images", "Decoding with ANOVA + SVM: face vs house in the Haxby dataset", "Different classifiers in decoding the Haxby dataset", "Decoding with FREM: face vs house object recognition", "ROI-based decoding analysis in Haxby et al. dataset", "Decoding of a dataset after GLM fit for signal extraction", "Setting a parameter by cross-validation", "The haxby dataset: different multi-class strategies", "Searchlight analysis of face vs house recognition", "Cortical surface-based searchlight decoding", "Show stimuli of Haxby et al. dataset", "FREM on Jimura et al \u201cmixed gambles\u201d dataset.", "Encoding models for visual stimuli from Miyawaki et al. 2008", "Reconstruction of visual stimuli from Miyawaki et al. 2008", "Voxel-Based Morphometry on Oasis dataset", "Voxel-Based Morphometry on Oasis dataset with Space-Net prior", "Example of pattern recognition on simulated data", "Computation times", "Functional connectivity", "Comparing connectomes on different reference atlases", "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning", "Clustering methods to learn a brain parcellation from fMRI", "Regions extraction using dictionary learning and functional connectomes", "Classification of age groups using functional connectivity", "Computing a connectome with sparse inverse covariance", "Group Sparse inverse covariance for multi-subject connectome", "Extracting signals of a probabilistic atlas of functional regions", "Producing single subject maps of seed-to-voxel correlation", "Extracting signals from a brain parcellation", "Connectivity structure estimation on simulated data", "Extract signals on spheres and plot a connectome", "Computation times", "GLM: First level analysis", "Default Mode Network extraction of ADHD dataset", "First level analysis of a complete BIDS dataset from openneuro", "Examples of design matrices", "Simple example of two-session fMRI model fitting", "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model", "Understanding parameters of the first-level model", "Example of explicit fixed effects fMRI model fitting", "Example of MRI response functions", "Example of surface-based first-level analysis", "Predicted time series and residuals", "Single-subject data (two sessions) in native space", "Generate an events.tsv file for the NeuroSpin localizer task", "Computation times", "GLM: Second level analysis", "Voxel-Based Morphometry on OASIS dataset", "Second-level fMRI model: true positive proportion in clusters", "Example of generic design in second-level models", "Example of second level design matrix", "Second-level fMRI model: one sample test", "Second-level fMRI model: two-sample test, unpaired and paired", "Statistical testing of a second-level analysis", "Computation times", "Manipulating brain image volumes", "Visualization of affine resamplings", "Comparing the means of 2 images", "Breaking an atlas of labels in separated regions", "Regions Extraction of Default Mode Networks using Smith Atlas", "Region Extraction using a t-statistical map (3D)", "Understanding NiftiMasker and mask computation", "Negating an image with math_img", "Extracting signals from brain regions using the NiftiLabelsMasker", "Simple example of NiftiMasker use", "Resample an image to a template", "Computing a Region of Interest (ROI) mask manually", "Smoothing an image", "Computation times", "Advanced statistical analysis of brain images", "Advanced decoding using scikit learn", "Functional connectivity predicts age group", "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding", "BIDS dataset first and second level analysis", "Massively univariate analysis of face vs house recognition", "NeuroVault cross-study ICA maps.", "Multivariate decompositions: Independent component analysis of fMRI", "Massively univariate analysis of a motor task from the Localizer dataset", "Massively univariate analysis of a calculation task from the Localizer dataset", "NeuroVault meta-analysis of stop-go paradigm studies.", "Surface-based dataset first and second level analysis of a dataset", "Computation times", "Examples", "General bibliography", "<span class=\"section-number\">7. </span>Advanced usage: manual pipelines and scaling up", "<span class=\"section-number\">7.1. </span>Building your own neuroimaging machine-learning pipeline", "<span class=\"section-number\">7.2. </span>Downloading statistical maps from the Neurovault repository", "0.1.0", "0.1.1", "0.1.2", "0.1.3", "0.1.4", "0.10.0", "0.2.0", "0.2.1", "0.2.2", "0.2.3", "0.2.4", "0.2.5.1", "0.2.6", "0.3.0", "0.3.1", "0.4.0", "0.4.1", "0.4.2", "0.5.0", "0.5.1", "0.5.2", "0.6.0", "0.6.1", "0.6.2", "0.7.0", "0.7.1", "0.8.0", "0.8.1", "0.9.0", "0.9.1", "0.9.2", "0.10.1.dev", "&lt;no title&gt;", "What\u2019s new", "<span class=\"section-number\">3.2. </span>Connectome extraction: inverse covariance for direct connections", "<span class=\"section-number\">3.1. </span>Extracting times series to build a functional connectome", "<span class=\"section-number\">3. </span>Functional connectivity and resting state", "<span class=\"section-number\">3.5. </span>Clustering to parcellate the brain in regions", "<span class=\"section-number\">3.4. </span>Region Extraction for better brain parcellations", "<span class=\"section-number\">3.3. </span>Extracting functional brain networks: ICA and related", "<span class=\"section-number\">2.1. </span>An introduction to decoding", "<span class=\"section-number\">2.2. </span>Choosing the right predictive model for neuroimaging", "<span class=\"section-number\">2.3. </span>FREM: fast ensembling of regularized models for robust decoding", "<span class=\"section-number\">2.6. </span>Running scikit-learn functions for more control on the analysis", "<span class=\"section-number\">2. </span>Decoding and MVPA: predicting from brain images", "<span class=\"section-number\">2.5. </span>Searchlight : finding voxels containing information", "<span class=\"section-number\">2.4. </span>SpaceNet: decoding with spatial structure for better maps", "<span class=\"section-number\">3.2.3.1. </span>Group-sparse covariance estimation", "Contributing", "<span class=\"section-number\">5.2. </span>First level models", "<span class=\"section-number\">5.1. </span>An introduction to GLMs in fMRI statistical analysis", "<span class=\"section-number\">5. </span>Analyzing fMRI using GLMs", "<span class=\"section-number\">5.3. </span>Second level models", "Glossary", "Nilearn", "<span class=\"section-number\">1. </span>Introduction", "Maintenance", "<span class=\"section-number\">6. </span>Manipulation brain volumes with nilearn", "<span class=\"section-number\">6.1. </span>Input and output: neuroimaging data representation", "<span class=\"section-number\">6.2. </span>Manipulating images: resampling, smoothing, masking, ROIs\u2026", "<span class=\"section-number\">6.3. </span>From neuroimaging volumes to data matrices: the masker objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.connectome</span></code>: Functional Connectivity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.datasets</span></code>: Automatic Dataset Fetching", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decoding</span></code>: Decoding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decomposition</span></code>: Multivariate Decompositions", "nilearn.connectome.ConnectivityMeasure", "nilearn.connectome.GroupSparseCovariance", "nilearn.connectome.GroupSparseCovarianceCV", "nilearn.connectome.cov_to_corr", "nilearn.connectome.group_sparse_covariance", "nilearn.connectome.prec_to_partial", "nilearn.connectome.sym_matrix_to_vec", "nilearn.connectome.vec_to_sym_matrix", "nilearn.datasets.fetch_abide_pcp", "nilearn.datasets.fetch_adhd", "nilearn.datasets.fetch_atlas_aal", "nilearn.datasets.fetch_atlas_allen_2011", "nilearn.datasets.fetch_atlas_basc_multiscale_2015", "nilearn.datasets.fetch_atlas_craddock_2012", "nilearn.datasets.fetch_atlas_destrieux_2009", "nilearn.datasets.fetch_atlas_difumo", "nilearn.datasets.fetch_atlas_harvard_oxford", "nilearn.datasets.fetch_atlas_juelich", "nilearn.datasets.fetch_atlas_msdl", "nilearn.datasets.fetch_atlas_pauli_2017", "nilearn.datasets.fetch_atlas_schaefer_2018", "nilearn.datasets.fetch_atlas_smith_2009", "nilearn.datasets.fetch_atlas_surf_destrieux", "nilearn.datasets.fetch_atlas_talairach", "nilearn.datasets.fetch_atlas_yeo_2011", "nilearn.datasets.fetch_bids_langloc_dataset", "nilearn.datasets.fetch_coords_dosenbach_2010", "nilearn.datasets.fetch_coords_power_2011", "nilearn.datasets.fetch_coords_seitzman_2018", "nilearn.datasets.fetch_development_fmri", "nilearn.datasets.fetch_ds000030_urls", "nilearn.datasets.fetch_fiac_first_level", "nilearn.datasets.fetch_haxby", "nilearn.datasets.fetch_icbm152_2009", "nilearn.datasets.fetch_icbm152_brain_gm_mask", "nilearn.datasets.fetch_language_localizer_demo_dataset", "nilearn.datasets.fetch_localizer_button_task", "nilearn.datasets.fetch_localizer_calculation_task", "nilearn.datasets.fetch_localizer_contrasts", "nilearn.datasets.fetch_localizer_first_level", "nilearn.datasets.fetch_megatrawls_netmats", "nilearn.datasets.fetch_mixed_gambles", "nilearn.datasets.fetch_miyawaki2008", "nilearn.datasets.fetch_neurovault", "nilearn.datasets.fetch_neurovault_auditory_computation_task", "nilearn.datasets.fetch_neurovault_ids", "nilearn.datasets.fetch_neurovault_motor_task", "nilearn.datasets.fetch_oasis_vbm", "nilearn.datasets.fetch_openneuro_dataset", "nilearn.datasets.fetch_openneuro_dataset_index", "nilearn.datasets.fetch_spm_auditory", "nilearn.datasets.fetch_spm_multimodal_fmri", "nilearn.datasets.fetch_surf_fsaverage", "nilearn.datasets.fetch_surf_nki_enhanced", "nilearn.datasets.get_data_dirs", "nilearn.datasets.load_mni152_brain_mask", "nilearn.datasets.load_mni152_gm_mask", "nilearn.datasets.load_mni152_gm_template", "nilearn.datasets.load_mni152_template", "nilearn.datasets.load_mni152_wm_mask", "nilearn.datasets.load_mni152_wm_template", "nilearn.datasets.patch_openneuro_dataset", "nilearn.datasets.select_from_index", "nilearn.decoding.Decoder", "nilearn.decoding.DecoderRegressor", "nilearn.decoding.FREMClassifier", "nilearn.decoding.FREMRegressor", "nilearn.decoding.SearchLight", "nilearn.decoding.SpaceNetClassifier", "nilearn.decoding.SpaceNetRegressor", "nilearn.decomposition.CanICA", "nilearn.decomposition.DictLearning", "nilearn.glm.ARModel", "nilearn.glm.Contrast", "nilearn.glm.FContrastResults", "nilearn.glm.LikelihoodModelResults", "nilearn.glm.OLSModel", "nilearn.glm.RegressionResults", "nilearn.glm.SimpleRegressionResults", "nilearn.glm.TContrastResults", "nilearn.glm.cluster_level_inference", "nilearn.glm.compute_contrast", "nilearn.glm.compute_fixed_effects", "nilearn.glm.expression_to_contrast_vector", "nilearn.glm.fdr_threshold", "nilearn.glm.first_level.FirstLevelModel", "nilearn.glm.first_level.check_design_matrix", "nilearn.glm.first_level.compute_regressor", "nilearn.glm.first_level.first_level_from_bids", "nilearn.glm.first_level.glover_dispersion_derivative", "nilearn.glm.first_level.glover_hrf", "nilearn.glm.first_level.glover_time_derivative", "nilearn.glm.first_level.make_first_level_design_matrix", "nilearn.glm.first_level.mean_scaling", "nilearn.glm.first_level.run_glm", "nilearn.glm.first_level.spm_dispersion_derivative", "nilearn.glm.first_level.spm_hrf", "nilearn.glm.first_level.spm_time_derivative", "nilearn.glm.second_level.SecondLevelModel", "nilearn.glm.second_level.make_second_level_design_matrix", "nilearn.glm.second_level.non_parametric_inference", "nilearn.glm.threshold_stats_img", "nilearn.image.binarize_img", "nilearn.image.clean_img", "nilearn.image.concat_imgs", "nilearn.image.coord_transform", "nilearn.image.copy_img", "nilearn.image.crop_img", "nilearn.image.get_data", "nilearn.image.high_variance_confounds", "nilearn.image.index_img", "nilearn.image.iter_img", "nilearn.image.largest_connected_component_img", "nilearn.image.load_img", "nilearn.image.math_img", "nilearn.image.mean_img", "nilearn.image.new_img_like", "nilearn.image.reorder_img", "nilearn.image.resample_img", "nilearn.image.resample_to_img", "nilearn.image.smooth_img", "nilearn.image.swap_img_hemispheres", "nilearn.image.threshold_img", "nilearn.interfaces.bids.get_bids_files", "nilearn.interfaces.bids.parse_bids_filename", "nilearn.interfaces.bids.save_glm_to_bids", "nilearn.interfaces.fmriprep.load_confounds", "nilearn.interfaces.fmriprep.load_confounds_strategy", "nilearn.interfaces.fsl.get_design_from_fslmat", "nilearn.maskers.BaseMasker", "nilearn.maskers.MultiNiftiLabelsMasker", "nilearn.maskers.MultiNiftiMapsMasker", "nilearn.maskers.MultiNiftiMasker", "nilearn.maskers.NiftiLabelsMasker", "nilearn.maskers.NiftiMapsMasker", "nilearn.maskers.NiftiMasker", "nilearn.maskers.NiftiSpheresMasker", "nilearn.masking.apply_mask", "nilearn.masking.compute_background_mask", "nilearn.masking.compute_brain_mask", "nilearn.masking.compute_epi_mask", "nilearn.masking.compute_multi_background_mask", "nilearn.masking.compute_multi_brain_mask", "nilearn.masking.compute_multi_epi_mask", "nilearn.masking.intersect_masks", "nilearn.masking.unmask", "nilearn.mass_univariate.permuted_ols", "nilearn.plotting.displays.BaseAxes", "nilearn.plotting.displays.BaseSlicer", "nilearn.plotting.displays.CutAxes", "nilearn.plotting.displays.GlassBrainAxes", "nilearn.plotting.displays.LProjector", "nilearn.plotting.displays.LRProjector", "nilearn.plotting.displays.LYRProjector", "nilearn.plotting.displays.LYRZProjector", "nilearn.plotting.displays.LZRProjector", "nilearn.plotting.displays.LZRYProjector", "nilearn.plotting.displays.MosaicSlicer", "nilearn.plotting.displays.OrthoProjector", "nilearn.plotting.displays.OrthoSlicer", "nilearn.plotting.displays.PlotlySurfaceFigure", "nilearn.plotting.displays.RProjector", "nilearn.plotting.displays.TiledSlicer", "nilearn.plotting.displays.XProjector", "nilearn.plotting.displays.XSlicer", "nilearn.plotting.displays.XZProjector", "nilearn.plotting.displays.XZSlicer", "nilearn.plotting.displays.YProjector", "nilearn.plotting.displays.YSlicer", "nilearn.plotting.displays.YXProjector", "nilearn.plotting.displays.YXSlicer", "nilearn.plotting.displays.YZProjector", "nilearn.plotting.displays.YZSlicer", "nilearn.plotting.displays.ZProjector", "nilearn.plotting.displays.ZSlicer", "nilearn.plotting.displays.get_projector", "nilearn.plotting.displays.get_slicer", "nilearn.plotting.find_cut_slices", "nilearn.plotting.find_parcellation_cut_coords", "nilearn.plotting.find_probabilistic_atlas_cut_coords", "nilearn.plotting.find_xyz_cut_coords", "nilearn.plotting.plot_anat", "nilearn.plotting.plot_carpet", "nilearn.plotting.plot_connectome", "nilearn.plotting.plot_contrast_matrix", "nilearn.plotting.plot_design_matrix", "nilearn.plotting.plot_epi", "nilearn.plotting.plot_event", "nilearn.plotting.plot_glass_brain", "nilearn.plotting.plot_img", "nilearn.plotting.plot_img_comparison", "nilearn.plotting.plot_img_on_surf", "nilearn.plotting.plot_markers", "nilearn.plotting.plot_matrix", "nilearn.plotting.plot_prob_atlas", "nilearn.plotting.plot_roi", "nilearn.plotting.plot_stat_map", "nilearn.plotting.plot_surf", "nilearn.plotting.plot_surf_contours", "nilearn.plotting.plot_surf_roi", "nilearn.plotting.plot_surf_stat_map", "nilearn.plotting.show", "nilearn.plotting.view_connectome", "nilearn.plotting.view_img", "nilearn.plotting.view_img_on_surf", "nilearn.plotting.view_markers", "nilearn.plotting.view_surf", "nilearn.regions.HierarchicalKMeans", "nilearn.regions.Parcellations", "nilearn.regions.ReNA", "nilearn.regions.RegionExtractor", "nilearn.regions.connected_label_regions", "nilearn.regions.connected_regions", "nilearn.regions.img_to_signals_labels", "nilearn.regions.img_to_signals_maps", "nilearn.regions.recursive_neighbor_agglomeration", "nilearn.regions.signals_to_img_labels", "nilearn.regions.signals_to_img_maps", "nilearn.reporting.HTMLReport", "nilearn.reporting.get_clusters_table", "nilearn.reporting.make_glm_report", "nilearn.signal.butterworth", "nilearn.signal.clean", "nilearn.signal.high_variance_confounds", "nilearn.surface.load_surf_data", "nilearn.surface.load_surf_mesh", "nilearn.surface.vol_to_surf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.glm</span></code>: Generalized Linear Models", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.image</span></code>: Image Processing and Resampling Utilities", "API References", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.interfaces</span></code>: Loading components from interfaces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.maskers</span></code>: Extracting Signals from Brain Images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.masking</span></code>: Data Masking Utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.mass_univariate</span></code>: Mass-Univariate Analysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.plotting</span></code>: Plotting Brain Data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.regions</span></code>: Operating on Regions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.reporting</span></code>: Reporting Functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.signal</span></code>: Preprocessing Time Series", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.surface</span></code>: Manipulating Surface Data", "<span class=\"section-number\">4. </span>Plotting brain images", "Quickstart", "User guide"], "terms": {"thi": [0, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 417, 419, 421], "work": [0, 2, 3, 6, 10, 11, 14, 16, 18, 20, 23, 25, 29, 30, 31, 32, 34, 35, 36, 39, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 61, 62, 64, 75, 77, 84, 85, 89, 91, 92, 94, 95, 98, 100, 101, 102, 104, 105, 108, 128, 129, 136, 143, 144, 148, 149, 154, 155, 156, 158, 162, 163, 164, 165, 171, 173, 174, 175, 180, 181, 182, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 278, 305, 309, 310, 311, 312, 313, 314, 315, 316, 357, 363, 368, 387, 388, 389, 390, 399, 408, 410], "i": [0, 2, 4, 6, 9, 10, 11, 14, 15, 16, 18, 20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 111, 112, 113, 114, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 166, 167, 168, 169, 171, 172, 174, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 419, 420, 421], "made": [0, 21, 101, 108, 139, 142, 143, 148, 159, 162, 163, 165, 168, 170, 171, 243, 244, 245, 246, 248, 249, 326, 383, 421], "avail": [0, 3, 15, 23, 24, 31, 39, 42, 62, 75, 80, 89, 94, 101, 106, 108, 114, 136, 141, 148, 150, 153, 156, 158, 162, 164, 167, 170, 171, 188, 192, 195, 209, 218, 220, 222, 227, 248, 249, 373, 378, 406, 420, 421], "commun": [0, 111, 163, 169, 171, 209, 420], "peopl": [0, 6, 130, 133, 134, 135, 136, 137, 138, 148, 162, 163], "which": [0, 3, 6, 9, 12, 14, 15, 21, 22, 23, 25, 29, 30, 32, 33, 34, 36, 37, 40, 42, 44, 47, 49, 51, 58, 61, 62, 66, 68, 69, 70, 75, 76, 79, 84, 89, 91, 94, 98, 100, 108, 113, 114, 119, 120, 121, 126, 127, 130, 131, 132, 133, 134, 136, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 168, 170, 171, 173, 174, 175, 187, 194, 196, 197, 199, 200, 203, 204, 209, 223, 224, 225, 226, 230, 231, 232, 234, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 264, 265, 268, 272, 273, 278, 280, 282, 287, 293, 298, 302, 304, 305, 310, 311, 312, 313, 314, 315, 316, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 383, 388, 390, 391, 392, 398, 400, 406, 419, 420], "origin": [0, 6, 36, 40, 41, 49, 50, 66, 70, 84, 89, 93, 100, 127, 140, 142, 143, 148, 152, 160, 162, 171, 175, 201, 209, 213, 218, 227, 310, 311, 312, 313, 314, 315, 316, 362, 377, 379, 380, 387, 389, 390, 402], "from": [0, 4, 6, 8, 9, 10, 12, 14, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 99, 101, 102, 103, 104, 107, 108, 109, 111, 112, 115, 116, 118, 119, 120, 121, 123, 126, 129, 130, 133, 134, 136, 141, 142, 143, 145, 148, 149, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 177, 180, 181, 182, 184, 189, 190, 192, 194, 195, 196, 197, 199, 200, 201, 203, 204, 206, 208, 209, 210, 212, 213, 214, 216, 217, 218, 220, 222, 223, 224, 225, 226, 227, 228, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 262, 264, 265, 268, 272, 278, 279, 280, 282, 283, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 361, 362, 364, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 402, 403, 406, 412, 414, 419, 420, 421], "inria": [0, 42, 75, 102, 105, 106, 111, 161, 198, 390], "mind": [0, 51, 155, 156, 163, 168], "project": [0, 8, 9, 15, 23, 24, 27, 42, 58, 75, 108, 110, 111, 126, 128, 130, 138, 142, 143, 148, 162, 164, 169, 188, 193, 220, 227, 233, 250, 251, 283, 330, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 368, 371, 373, 377, 378, 379, 380, 381, 382, 385, 402, 406, 419], "grew": 0, "much": [0, 3, 24, 40, 42, 51, 77, 79, 99, 100, 133, 148, 155, 162, 163, 165, 170, 206, 287, 298, 406], "further": [0, 14, 15, 55, 66, 70, 84, 94, 112, 149, 157, 159, 162, 171, 173, 177, 223, 265, 278, 306, 340, 411, 412, 419, 421], "an": [0, 2, 3, 4, 11, 14, 15, 16, 20, 21, 22, 23, 25, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 54, 55, 56, 60, 62, 63, 66, 68, 69, 70, 71, 73, 75, 79, 80, 83, 84, 88, 89, 91, 92, 94, 96, 100, 101, 103, 105, 108, 110, 111, 113, 114, 120, 121, 124, 125, 126, 128, 129, 130, 131, 133, 136, 138, 139, 140, 141, 143, 145, 148, 149, 150, 151, 153, 156, 157, 158, 159, 160, 161, 162, 164, 166, 167, 168, 170, 171, 173, 174, 175, 180, 182, 186, 190, 194, 198, 204, 209, 218, 219, 221, 223, 225, 226, 227, 228, 238, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 261, 265, 272, 274, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 292, 293, 294, 295, 297, 298, 299, 300, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 398, 400, 402, 403, 404, 406, 408, 421], "up": [0, 3, 6, 33, 36, 47, 84, 86, 89, 94, 98, 103, 111, 120, 133, 134, 136, 141, 143, 148, 152, 158, 159, 161, 162, 164, 165, 166, 168, 175, 228, 252, 255, 279, 326, 362, 387, 406, 421], "date": [0, 142, 148, 191, 194, 213, 223, 225], "list": [0, 2, 3, 6, 9, 14, 15, 16, 30, 33, 44, 47, 48, 49, 51, 53, 55, 61, 62, 64, 67, 71, 72, 75, 76, 79, 80, 85, 94, 99, 100, 101, 103, 108, 113, 114, 120, 121, 124, 126, 127, 128, 132, 133, 136, 142, 143, 145, 148, 149, 155, 163, 170, 173, 174, 175, 180, 181, 182, 184, 186, 187, 188, 190, 191, 194, 196, 197, 198, 199, 200, 202, 203, 205, 206, 209, 210, 212, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 260, 262, 263, 265, 267, 268, 272, 278, 279, 280, 281, 283, 284, 292, 293, 295, 298, 300, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 364, 367, 370, 371, 373, 374, 377, 378, 379, 380, 385, 386, 388, 390, 391, 392, 393, 394, 400, 402, 404, 405, 406, 420], "can": [0, 2, 3, 4, 6, 9, 11, 12, 14, 15, 20, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 61, 62, 64, 65, 66, 68, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 86, 88, 89, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 112, 113, 114, 120, 121, 124, 126, 128, 133, 134, 136, 139, 140, 141, 142, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 170, 171, 173, 174, 175, 181, 182, 184, 187, 188, 191, 194, 195, 196, 197, 198, 199, 200, 204, 218, 220, 223, 227, 243, 244, 245, 246, 247, 248, 249, 255, 257, 258, 265, 267, 272, 278, 280, 283, 284, 285, 290, 293, 294, 295, 298, 299, 302, 303, 306, 307, 312, 315, 318, 319, 320, 321, 322, 323, 325, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 364, 366, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 388, 390, 391, 392, 398, 399, 400, 401, 402, 406, 419, 420, 421], "seen": [0, 3, 14, 41, 49, 113, 150, 152, 156, 158, 160, 165, 170, 171, 388, 419], "github": [0, 23, 33, 36, 49, 52, 53, 58, 62, 75, 77, 103, 141, 145, 148, 163, 170, 171, 188, 200, 213, 250, 251, 307, 368, 384, 388, 419, 420], "addit": [0, 14, 15, 55, 62, 63, 66, 69, 70, 79, 86, 89, 101, 113, 114, 116, 128, 133, 139, 148, 155, 158, 162, 164, 168, 170, 171, 190, 212, 222, 250, 251, 253, 265, 272, 278, 280, 303, 306, 307, 312, 315, 387, 388, 389, 398, 419], "credit": 0, "goe": [0, 14, 40, 86, 94, 100, 162, 181, 184], "michael": [0, 111, 115, 119, 121, 133, 148, 161, 191, 199, 233, 307], "hank": [0, 119, 121, 148], "yaroslav": [0, 130, 133, 148], "halchenko": [0, 130, 133, 148], "data": [0, 1, 2, 7, 18, 20, 21, 24, 26, 28, 31, 34, 36, 43, 45, 46, 50, 51, 53, 58, 59, 60, 63, 65, 68, 70, 73, 76, 77, 78, 79, 80, 81, 84, 86, 87, 88, 90, 91, 92, 95, 99, 101, 102, 104, 105, 106, 108, 110, 111, 112, 114, 120, 123, 126, 127, 128, 129, 130, 131, 133, 134, 136, 139, 140, 141, 143, 144, 145, 148, 150, 151, 153, 156, 157, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 181, 182, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 265, 272, 273, 274, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 361, 362, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 400, 402, 404, 406, 407, 408, 410, 419, 421], "packag": [0, 3, 4, 9, 10, 11, 15, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 66, 71, 77, 78, 79, 84, 86, 87, 88, 91, 92, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 118, 119, 120, 133, 136, 141, 143, 148, 163, 165, 170, 171, 173, 196, 197, 419], "The": [0, 2, 3, 11, 14, 15, 17, 18, 19, 20, 21, 22, 23, 28, 29, 30, 32, 33, 34, 36, 40, 41, 42, 43, 45, 47, 48, 49, 51, 52, 54, 55, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 75, 76, 77, 79, 80, 81, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 106, 108, 110, 111, 113, 114, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 199, 200, 201, 203, 204, 209, 210, 212, 213, 214, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 289, 293, 294, 295, 296, 297, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 395, 396, 398, 399, 400, 402, 403, 406, 410, 411, 415, 419, 420, 421], "ar": [0, 2, 3, 4, 6, 9, 10, 14, 19, 20, 21, 23, 24, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 86, 87, 89, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 118, 120, 126, 128, 129, 131, 133, 134, 136, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 170, 171, 173, 174, 175, 180, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 261, 265, 267, 268, 272, 274, 278, 280, 282, 283, 287, 289, 295, 297, 298, 299, 300, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 396, 397, 398, 399, 400, 402, 404, 405, 406, 414, 419, 420], "alexi": [0, 77, 111, 120, 133, 136, 141, 143, 145, 148, 233], "thual": [0, 120, 141, 143, 145, 148], "bertrand": [0, 49, 75, 77, 111, 115, 118, 121, 126, 130, 133, 134, 136, 143, 144, 148, 157, 161, 180, 181, 195, 198, 218, 245, 246, 251, 389, 390, 395], "thirion": [0, 49, 72, 75, 77, 111, 115, 118, 121, 126, 130, 133, 134, 136, 143, 144, 148, 152, 157, 161, 180, 181, 195, 198, 218, 245, 246, 251, 389, 390, 395], "elizabeth": [0, 111, 130, 134, 136, 137, 138, 148, 257, 258], "dupr": [0, 130, 134, 136, 137, 138, 148], "hao": [0, 120, 140, 141, 143, 145, 148], "ting": [0, 120, 140, 141, 143, 145, 148], "wang": [0, 111, 120, 140, 141, 143, 145, 148, 227], "jerom": [0, 77, 126, 130, 132, 133, 134, 136, 137, 145, 148], "dock": [0, 126, 130, 132, 133, 134, 136, 137, 145, 148], "nicola": [0, 111, 140, 141, 142, 143, 144, 145, 148, 201, 220], "gensollen": [0, 140, 141, 142, 143, 144, 145, 148], "taylor": [0, 111, 120, 140, 143, 144, 145, 148, 161], "salo": [0, 120, 140, 143, 144, 145, 148], "yasmin": [0, 120, 145, 148, 170], "mzayek": [0, 120, 145, 148], "some": [0, 3, 6, 14, 15, 30, 40, 41, 43, 48, 49, 56, 66, 68, 69, 71, 80, 84, 86, 92, 98, 103, 104, 113, 114, 126, 133, 139, 142, 143, 145, 148, 155, 156, 158, 160, 162, 163, 165, 167, 170, 171, 173, 174, 175, 182, 188, 194, 196, 197, 199, 200, 203, 223, 243, 244, 245, 246, 249, 255, 265, 278, 281, 283, 305, 368, 369, 372, 375, 376, 383, 393, 399, 402, 419, 420], "past": [0, 56, 113, 150, 307], "present": [0, 3, 6, 40, 41, 54, 56, 65, 69, 70, 101, 108, 113, 129, 148, 153, 154, 155, 162, 164, 165, 166, 171, 173, 175, 184, 194, 212, 243, 244, 245, 246, 250, 251, 293, 306, 307, 311, 312, 314, 315, 387, 388, 389], "alexandr": [0, 49, 111, 115, 116, 118, 119, 121, 123, 126, 133, 135, 136, 148, 161, 181, 198, 390], "gramfort": [0, 49, 111, 115, 118, 135, 136, 148, 161, 181, 198], "binh": [0, 136, 139, 141, 148], "nguyen": [0, 136, 139, 141, 148], "gael": [0, 42, 49, 75, 103, 111, 115, 116, 118, 119, 121, 123, 126, 130, 133, 134, 135, 136, 138, 148, 180, 181, 198, 223, 225, 251, 389, 390, 395], "varoquaux": [0, 42, 48, 49, 56, 75, 103, 111, 114, 115, 116, 118, 119, 121, 123, 126, 130, 133, 134, 135, 136, 138, 148, 149, 150, 154, 155, 157, 161, 170, 180, 181, 195, 198, 223, 225, 245, 246, 250, 251, 389, 390, 395], "julia": [0, 121, 136, 148], "huntenburg": [0, 121, 136, 148], "thoma": [0, 111, 114, 136, 139, 142, 143, 148, 156, 170, 191, 200, 204, 220, 223, 225, 280, 306, 307, 326, 403], "bazeil": [0, 136, 139, 142, 143, 148], "abadi": [0, 121, 123, 126, 133, 148], "abraham": [0, 111, 115, 116, 118, 119, 121, 123, 126, 136, 148, 153, 306, 307, 390], "andr\u00e9": [0, 111, 136, 148, 157, 194, 245, 246], "hoyo": [0, 42, 49, 111, 136, 148, 157, 245, 246, 389, 395], "idrobo": [0, 42, 49, 111, 136, 148, 157, 245, 246, 389, 395], "ben": [0, 56, 103, 107, 111, 115, 116, 118, 121, 123, 148, 307], "cipollini": [0, 103, 107, 115, 116, 118, 121, 123, 148], "chri": [0, 103, 115, 121, 136, 148], "gorgolewski": [0, 103, 111, 114, 115, 121, 148, 195, 210, 223, 225, 228], "danilo": [0, 115, 116, 118, 119, 121, 123, 148], "bzdok": [0, 115, 116, 118, 119, 121, 123, 148], "elvi": [0, 42, 49, 75, 111, 115, 118, 121, 123, 126, 148, 161, 390], "dohmatob": [0, 42, 49, 75, 111, 115, 118, 121, 123, 126, 148, 161, 390], "fabian": [0, 111, 115, 148, 198], "pedregosa": [0, 111, 115, 148, 198], "jean": [0, 49, 111, 115, 130, 133, 148, 162, 181, 184, 218, 223, 225], "kossaifi": [0, 115, 148], "chevali": [0, 77, 133, 136, 148], "kamalakar": [0, 118, 121, 123, 126, 130, 131, 133, 136, 140, 148], "reddi": [0, 118, 121, 123, 126, 130, 131, 132, 133, 136, 140, 148], "daddi": [0, 118, 121, 123, 126, 130, 131, 133, 136, 140, 148], "kshitij": [0, 133, 134, 135, 136, 137, 138, 139, 148], "chawla": [0, 133, 134, 135, 136, 137, 138, 139, 148], "loic": [0, 115, 116, 118, 119, 121, 123, 126, 136, 148], "est\u00e8v": [0, 115, 116, 118, 119, 121, 123, 126, 148], "martin": [0, 111, 121, 126, 140, 148, 191, 213, 232, 283, 402], "perez": [0, 121, 126, 148], "guevara": [0, 121, 126, 148], "eickenberg": [0, 111, 115, 148, 161], "philipp": [0, 111, 115, 148, 218], "gervai": [0, 115, 148], "pierr": [0, 111, 130, 132, 133, 134, 148, 180, 192], "bellec": [0, 111, 133, 134, 148, 192], "salma": [0, 115, 118, 121, 123, 130, 133, 134, 148], "bougacha": [0, 115, 118, 121, 123, 130, 133, 134, 148], "vincent": [0, 49, 111, 115, 148, 161, 191, 198, 218, 233, 307], "michel": [0, 44, 49, 111, 115, 148, 161, 198, 218, 233], "virgil": [0, 42, 75, 77, 102, 105, 106, 115, 148], "fritsch": [0, 42, 75, 77, 102, 105, 106, 115, 148], "mehdi": [0, 115, 119, 121, 130, 136, 148], "rahim": [0, 115, 119, 121, 130, 136, 148], "were": [0, 6, 10, 15, 18, 21, 23, 40, 48, 49, 50, 62, 64, 66, 67, 79, 87, 88, 91, 94, 98, 101, 107, 108, 113, 118, 120, 136, 139, 143, 144, 145, 148, 155, 162, 163, 165, 223, 225, 283, 313, 316, 402], "paid": 0, "niconnect": 0, "french": [0, 170], "investiss": 0, "d": [0, 26, 34, 37, 41, 42, 48, 50, 51, 56, 57, 58, 64, 67, 71, 77, 100, 102, 105, 106, 111, 114, 153, 162, 163, 190, 201, 206, 207, 210, 213, 223, 225, 228, 238, 253, 260, 283, 306, 307, 362, 373, 402, 408], "avenir": 0, "wa": [0, 3, 40, 41, 64, 67, 69, 91, 102, 105, 106, 113, 114, 120, 133, 140, 141, 142, 143, 144, 148, 155, 157, 160, 162, 165, 199, 200, 248, 249, 250, 251, 272, 278, 280, 362, 393], "human": [0, 8, 22, 23, 27, 31, 32, 39, 40, 41, 43, 58, 68, 110, 111, 114, 160, 163, 168, 188, 193, 194, 199, 200, 202, 203, 204, 207, 220, 222, 223, 225, 232, 283, 307, 373, 381, 402], "brain": [0, 2, 3, 4, 6, 9, 12, 15, 20, 21, 22, 23, 27, 31, 32, 36, 39, 41, 43, 44, 46, 52, 54, 55, 59, 64, 66, 67, 69, 70, 76, 78, 79, 80, 85, 89, 92, 94, 96, 98, 100, 104, 107, 111, 113, 114, 121, 124, 126, 127, 128, 130, 131, 133, 134, 136, 139, 141, 142, 148, 149, 151, 155, 156, 157, 158, 160, 161, 163, 164, 165, 168, 169, 170, 173, 175, 180, 181, 188, 190, 192, 193, 195, 196, 198, 199, 201, 203, 206, 207, 208, 209, 213, 214, 220, 222, 223, 225, 226, 227, 232, 234, 235, 238, 243, 244, 245, 246, 247, 248, 249, 250, 251, 260, 283, 285, 288, 290, 295, 306, 307, 309, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 326, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 363, 366, 368, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 390, 391, 392, 398, 402, 412, 420, 421], "previous": [0, 3, 23, 98, 113, 136, 139, 143, 145, 148, 155, 165], "hbp": 0, "also": [0, 3, 4, 11, 14, 15, 17, 22, 23, 29, 31, 34, 39, 40, 41, 42, 43, 49, 50, 51, 55, 56, 62, 63, 66, 68, 70, 71, 72, 75, 77, 79, 86, 89, 91, 93, 94, 95, 98, 108, 113, 114, 118, 120, 121, 126, 127, 129, 133, 136, 139, 142, 143, 145, 148, 149, 150, 153, 154, 156, 157, 158, 160, 162, 163, 164, 165, 167, 168, 170, 171, 173, 174, 175, 176, 182, 196, 197, 198, 223, 225, 228, 243, 244, 245, 246, 248, 249, 265, 267, 272, 278, 290, 294, 298, 303, 304, 306, 317, 318, 319, 320, 321, 322, 323, 361, 362, 366, 367, 369, 374, 375, 376, 377, 388, 391, 392, 396, 397, 400, 419, 421], "support": [0, 9, 15, 29, 32, 33, 34, 35, 44, 98, 105, 113, 118, 120, 128, 129, 130, 133, 134, 135, 136, 140, 141, 143, 144, 145, 148, 155, 156, 158, 160, 165, 168, 169, 243, 244, 245, 246, 253, 306, 310, 313, 377, 379, 380, 396, 406, 420], "digicosm": 0, "dataia": 0, "There": [0, 4, 21, 66, 152, 155, 156, 157, 163, 168, 198, 255, 257, 258, 279, 306, 397, 419], "paper": [0, 48, 49, 113, 114, 152, 162, 163, 165, 223], "publish": [0, 223, 289, 403], "yet": [0, 65, 80, 104, 111, 143, 148, 155, 163, 170, 374], "about": [0, 2, 3, 6, 14, 19, 24, 49, 62, 76, 78, 79, 94, 100, 101, 108, 113, 114, 120, 121, 136, 144, 148, 152, 155, 156, 158, 160, 162, 163, 164, 165, 168, 169, 170, 173, 192, 201, 203, 212, 213, 214, 227, 235, 236, 237, 238, 239, 240, 307, 406], "we": [0, 2, 3, 4, 6, 9, 11, 14, 18, 19, 20, 22, 23, 24, 25, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 120, 126, 134, 135, 136, 141, 143, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 162, 164, 165, 168, 170, 171, 172, 173, 174, 175, 187, 196, 197, 214, 223, 225, 248, 249, 250, 255, 257, 258, 278, 282, 290, 294, 302, 303, 304, 318, 320, 321, 323, 330, 365, 390, 392, 419, 420], "wait": [0, 114, 162], "matur": [0, 58, 111, 206], "bit": [0, 10, 11, 36, 41, 49, 65, 66, 75, 79, 86, 94, 102, 121, 134, 145, 148, 149, 161, 173, 174, 214], "howev": [0, 48, 49, 66, 67, 70, 86, 94, 100, 149, 155, 158, 162, 165, 175, 190, 298, 307, 421], "pattern": [0, 8, 27, 28, 45, 49, 51, 100, 110, 111, 114, 131, 139, 148, 149, 154, 155, 158, 161, 162, 168, 170, 173, 182, 184, 189, 192, 202, 213, 220, 221, 223, 241, 247, 284, 296, 320, 325, 362, 381, 389, 395], "underli": [0, 89, 165, 168, 170, 175, 340], "have": [0, 2, 3, 6, 9, 11, 15, 16, 18, 24, 29, 31, 32, 33, 39, 41, 42, 43, 44, 49, 52, 54, 55, 56, 57, 61, 62, 64, 65, 66, 67, 71, 75, 85, 86, 93, 94, 98, 100, 101, 103, 108, 110, 113, 114, 120, 121, 123, 125, 126, 127, 130, 131, 132, 133, 136, 139, 140, 141, 143, 144, 148, 149, 152, 153, 154, 155, 156, 158, 161, 162, 163, 164, 165, 167, 168, 170, 171, 173, 174, 175, 180, 181, 182, 184, 187, 192, 199, 200, 204, 208, 209, 223, 227, 243, 244, 245, 246, 247, 248, 249, 250, 251, 257, 258, 265, 272, 273, 278, 279, 280, 282, 283, 285, 294, 298, 299, 300, 302, 303, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 322, 323, 325, 326, 362, 367, 377, 379, 380, 384, 387, 388, 389, 390, 396, 397, 399, 400, 402, 419, 420], "been": [0, 6, 10, 11, 32, 36, 39, 42, 47, 49, 52, 54, 55, 61, 66, 71, 72, 75, 79, 81, 85, 86, 89, 91, 93, 94, 104, 108, 120, 121, 123, 126, 127, 133, 135, 136, 138, 139, 141, 142, 143, 144, 145, 148, 154, 161, 162, 163, 164, 167, 168, 171, 175, 181, 192, 223, 227, 265, 278, 280, 289, 318, 319, 320, 322, 323, 326, 394, 403, 406], "describ": [0, 6, 18, 37, 63, 64, 66, 69, 72, 112, 113, 114, 156, 162, 163, 165, 170, 171, 175, 181, 218, 219, 260, 263, 266, 272, 280, 307, 326, 365], "machin": [0, 29, 34, 44, 49, 94, 112, 140, 148, 156, 157, 158, 163, 168, 169, 221, 420, 421], "neuroimag": [0, 2, 8, 22, 23, 27, 37, 48, 56, 62, 76, 94, 100, 101, 102, 110, 111, 112, 114, 133, 148, 149, 150, 154, 155, 157, 159, 160, 161, 163, 168, 169, 172, 177, 190, 192, 194, 195, 198, 202, 208, 212, 213, 218, 223, 225, 238, 243, 244, 245, 246, 247, 248, 249, 250, 251, 260, 265, 278, 280, 283, 284, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 303, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 361, 362, 366, 368, 369, 371, 374, 375, 376, 381, 383, 384, 388, 390, 393, 394, 396, 397, 400, 403, 406, 410, 419, 421], "suggest": [0, 6, 86, 143, 148, 152, 170, 173, 283, 318, 320, 321, 323, 402], "you": [0, 2, 4, 6, 9, 14, 15, 22, 23, 24, 32, 35, 36, 39, 40, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 66, 70, 75, 79, 86, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 110, 111, 113, 114, 128, 129, 133, 136, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 167, 168, 170, 171, 173, 174, 175, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 209, 212, 213, 214, 216, 217, 218, 221, 222, 223, 227, 228, 233, 265, 267, 272, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 363, 366, 368, 369, 372, 374, 375, 376, 377, 379, 380, 383, 384, 386, 406, 419, 420, 421], "read": [0, 44, 66, 69, 77, 81, 101, 103, 105, 107, 111, 114, 139, 148, 161, 163, 169, 170, 216, 217, 218, 317], "thank": [0, 133, 148, 163, 278, 279], "A": [0, 1, 5, 6, 7, 11, 15, 16, 21, 23, 40, 41, 42, 43, 47, 48, 49, 53, 56, 61, 64, 67, 69, 71, 75, 76, 79, 80, 84, 86, 89, 92, 98, 100, 102, 105, 106, 110, 111, 114, 128, 129, 133, 136, 142, 148, 149, 151, 152, 154, 156, 158, 159, 160, 162, 163, 164, 166, 168, 170, 171, 173, 174, 175, 180, 182, 191, 193, 194, 199, 201, 203, 206, 207, 208, 210, 212, 220, 221, 223, 224, 225, 226, 228, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 256, 257, 258, 261, 264, 265, 268, 274, 278, 283, 284, 290, 295, 296, 303, 305, 306, 307, 308, 318, 319, 320, 321, 322, 323, 326, 337, 338, 339, 342, 358, 359, 362, 366, 371, 375, 378, 383, 388, 390, 391, 392, 397, 398, 400, 401, 402, 403, 419, 421], "huge": [0, 66, 68, 133, 148], "amount": [0, 24, 34, 36, 50, 66, 95, 156, 158, 163, 169, 170, 171, 223, 243, 244, 245, 246, 248, 249, 250, 251, 265, 278, 284, 295, 310, 311, 312, 315, 388, 389, 390], "upon": [0, 224, 265, 278, 361, 374, 375, 376, 383, 390, 392, 400], "reli": [0, 6, 30, 66, 92, 94, 126, 142, 148, 152, 162, 165, 168, 173, 214, 406, 419], "heavili": 0, "research": [0, 168, 173, 175, 209, 307], "who": [0, 114, 175, 307], "invest": 0, "time": [0, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 56, 57, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 120, 123, 132, 133, 139, 140, 141, 143, 145, 148, 149, 151, 152, 153, 154, 155, 158, 160, 163, 165, 166, 168, 169, 171, 172, 173, 174, 180, 182, 184, 209, 230, 232, 233, 243, 244, 245, 246, 248, 249, 250, 251, 265, 266, 267, 269, 270, 271, 272, 275, 276, 277, 278, 280, 283, 284, 295, 298, 300, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 326, 354, 362, 374, 376, 383, 384, 388, 390, 392, 398, 399, 401, 402, 403, 406, 411, 419, 421], "maintain": [0, 120, 136, 142, 148, 163, 171], "deserv": [0, 175], "recognit": [0, 3, 28, 30, 45, 49, 71, 97, 109, 110, 111, 158, 160, 161, 169, 192, 212, 245, 247, 288, 290, 293, 295, 296, 309, 315, 325, 326, 354, 369, 376, 381], "citat": 0, "In": [0, 4, 6, 9, 14, 15, 16, 22, 24, 32, 33, 36, 38, 39, 40, 42, 47, 49, 50, 51, 52, 53, 54, 58, 62, 65, 66, 68, 72, 75, 77, 79, 81, 86, 87, 89, 91, 94, 95, 99, 100, 111, 112, 113, 114, 120, 128, 133, 143, 145, 148, 149, 150, 152, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 168, 170, 171, 172, 173, 174, 175, 180, 187, 190, 192, 196, 197, 198, 213, 220, 223, 225, 227, 243, 244, 245, 246, 248, 249, 252, 255, 257, 258, 265, 267, 272, 278, 280, 281, 298, 299, 300, 302, 320, 326, 362, 363, 374, 387, 396, 399, 406, 419, 420], "need": [0, 2, 3, 6, 9, 16, 20, 30, 31, 33, 40, 41, 42, 48, 49, 50, 51, 55, 56, 62, 63, 66, 69, 75, 77, 78, 79, 80, 81, 84, 89, 91, 92, 98, 99, 100, 101, 103, 104, 108, 113, 114, 133, 136, 143, 148, 149, 153, 155, 156, 157, 158, 163, 165, 167, 168, 171, 173, 174, 175, 187, 252, 255, 256, 300, 305, 306, 310, 311, 313, 322, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 363, 366, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 388, 406, 419, 420], "order": [0, 2, 3, 6, 15, 16, 30, 32, 35, 36, 40, 41, 42, 49, 54, 56, 79, 80, 91, 100, 102, 107, 113, 120, 127, 133, 136, 141, 143, 148, 154, 160, 162, 163, 164, 168, 169, 170, 171, 173, 174, 175, 184, 206, 208, 216, 217, 235, 236, 239, 252, 256, 265, 272, 274, 278, 279, 280, 283, 285, 287, 292, 293, 297, 298, 299, 310, 311, 313, 314, 315, 318, 319, 320, 322, 323, 325, 326, 361, 366, 368, 369, 371, 375, 376, 383, 390, 391, 393, 396, 401, 402, 406, 419, 420], "justifi": 0, "pai": [0, 65], "softwar": [0, 6, 69, 72, 165, 168, 305, 420], "engin": [0, 9, 143, 148, 170, 175, 340, 377, 379, 380, 419, 420], "To": [0, 2, 3, 4, 6, 15, 22, 23, 31, 33, 37, 39, 40, 42, 43, 48, 49, 50, 51, 52, 54, 55, 62, 66, 68, 70, 76, 77, 79, 80, 87, 89, 94, 98, 101, 104, 108, 113, 114, 128, 133, 145, 148, 149, 150, 152, 155, 156, 157, 158, 160, 163, 164, 165, 167, 171, 173, 174, 199, 200, 223, 255, 257, 258, 265, 274, 278, 282, 294, 306, 374, 375, 376, 377, 379, 380, 383, 387, 400, 419], "guarante": [0, 6, 81, 156, 162, 232, 241, 293, 298, 299, 312], "futur": [0, 6, 62, 127, 133, 139, 145, 148, 162, 168, 173, 175, 253], "toolkit": 0, "us": [0, 1, 2, 4, 6, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 26, 29, 30, 31, 32, 33, 36, 38, 40, 41, 42, 43, 44, 46, 47, 49, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 89, 90, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 120, 121, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 139, 140, 141, 142, 143, 145, 148, 149, 150, 151, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 171, 174, 175, 181, 183, 184, 185, 186, 187, 188, 190, 193, 200, 203, 205, 208, 229, 236, 237, 239, 240, 241, 248, 252, 254, 255, 256, 257, 258, 259, 263, 264, 266, 269, 270, 271, 273, 275, 276, 277, 282, 286, 287, 292, 297, 301, 303, 304, 318, 319, 321, 322, 323, 324, 327, 328, 329, 330, 355, 356, 357, 377, 385, 387, 389, 393, 394, 395, 396, 397, 401, 402, 403, 407, 420, 421], "pleas": [0, 3, 19, 29, 30, 32, 33, 34, 35, 36, 40, 41, 49, 50, 52, 53, 58, 62, 64, 67, 71, 72, 75, 77, 98, 100, 102, 103, 105, 106, 128, 134, 143, 148, 153, 155, 158, 163, 168, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 420], "see": [0, 3, 6, 8, 9, 12, 13, 14, 15, 16, 20, 21, 22, 23, 26, 28, 30, 31, 34, 36, 39, 40, 41, 43, 46, 48, 49, 50, 51, 52, 54, 55, 56, 60, 64, 67, 71, 72, 74, 80, 83, 86, 89, 94, 99, 100, 102, 103, 106, 107, 110, 113, 114, 116, 121, 127, 133, 134, 136, 140, 141, 143, 145, 148, 149, 150, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 168, 171, 173, 175, 177, 180, 182, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 212, 213, 218, 220, 221, 222, 223, 225, 227, 230, 231, 232, 233, 238, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 257, 258, 265, 267, 272, 278, 283, 284, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 361, 362, 368, 369, 371, 374, 375, 376, 383, 384, 385, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 400, 402, 406, 411, 412, 419, 420], "document": [0, 2, 3, 4, 6, 19, 26, 43, 44, 49, 50, 56, 98, 100, 103, 107, 111, 112, 113, 116, 118, 121, 123, 125, 126, 127, 128, 133, 136, 138, 143, 144, 148, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 169, 170, 173, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 419, 420], "how": [0, 1, 2, 3, 4, 5, 6, 9, 14, 19, 21, 26, 34, 40, 44, 47, 48, 49, 50, 53, 55, 56, 58, 62, 64, 66, 67, 68, 70, 78, 79, 84, 86, 87, 88, 89, 91, 94, 95, 100, 103, 106, 107, 110, 113, 128, 139, 140, 143, 144, 148, 150, 152, 153, 154, 155, 156, 158, 160, 162, 165, 168, 169, 170, 172, 174, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 420, 421], "introductori": [1, 110], "exampl": [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 65, 66, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 112, 113, 121, 126, 127, 128, 129, 130, 133, 134, 136, 138, 139, 142, 143, 144, 148, 153, 156, 157, 158, 159, 162, 163, 164, 165, 167, 171, 173, 188, 190, 205, 248, 255, 257, 258, 282, 303, 377, 387, 389, 409, 420, 421], "teach": [1, 110, 125, 136, 148, 163], "nilearn": [1, 2, 3, 6, 7, 8, 9, 10, 11, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 114, 115, 119, 120, 121, 123, 124, 126, 127, 128, 131, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 171, 173, 174, 175, 409, 419, 421], "numer": [1, 7, 29, 33, 35, 57, 110, 140, 148, 163, 164, 175, 184, 253, 255, 257, 258, 266, 374, 375, 401], "plot": [1, 2, 4, 7, 8, 19, 20, 21, 23, 25, 26, 27, 29, 30, 31, 33, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 51, 52, 53, 54, 56, 57, 59, 61, 62, 63, 64, 65, 67, 69, 71, 72, 75, 76, 77, 78, 79, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 110, 113, 116, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 145, 148, 150, 153, 154, 155, 160, 163, 164, 165, 167, 168, 169, 170, 171, 174, 175, 180, 189, 194, 196, 197, 202, 206, 207, 209, 212, 213, 216, 226, 232, 234, 265, 278, 284, 295, 296, 309, 316, 320, 398, 400, 405, 406, 420, 421], "python": [1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 118, 120, 128, 134, 135, 136, 141, 143, 148, 155, 162, 163, 169, 170, 171, 294, 420], "manipul": [1, 7, 55, 66, 89, 113, 128, 148, 170, 173, 300, 369, 381, 421], "look": [1, 6, 7, 29, 32, 40, 44, 56, 65, 66, 69, 70, 72, 104, 110, 114, 133, 134, 144, 148, 155, 163, 164, 165, 170, 171, 175, 223, 225, 234, 300, 369, 381], "3d": [1, 3, 4, 6, 7, 8, 15, 16, 18, 19, 23, 24, 25, 27, 29, 30, 32, 34, 36, 37, 42, 44, 47, 71, 75, 77, 83, 84, 94, 96, 100, 102, 104, 105, 110, 113, 118, 123, 130, 132, 133, 134, 136, 140, 141, 145, 148, 165, 168, 169, 170, 172, 174, 175, 194, 196, 197, 200, 201, 202, 203, 224, 226, 232, 234, 243, 244, 245, 246, 247, 248, 249, 250, 251, 280, 282, 284, 285, 288, 290, 291, 292, 293, 302, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 362, 363, 368, 371, 372, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 390, 391, 392, 396, 406, 421], "4d": [1, 3, 4, 6, 7, 8, 11, 16, 18, 20, 25, 27, 29, 30, 31, 32, 34, 36, 41, 47, 48, 49, 52, 53, 54, 56, 58, 84, 85, 87, 89, 91, 92, 94, 95, 98, 100, 102, 104, 110, 112, 120, 123, 130, 133, 134, 139, 148, 150, 153, 154, 155, 158, 168, 170, 172, 175, 191, 193, 195, 196, 197, 198, 199, 201, 209, 213, 219, 226, 234, 247, 250, 251, 280, 282, 283, 284, 288, 289, 290, 291, 293, 295, 302, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 358, 359, 362, 374, 375, 376, 381, 383, 390, 392, 406, 412, 415, 419, 421], "niimg": [1, 7, 33, 54, 77, 79, 89, 91, 92, 98, 110, 113, 130, 133, 136, 141, 145, 148, 152, 170, 172, 174, 175, 201, 226, 234, 243, 244, 245, 246, 247, 248, 249, 250, 251, 260, 265, 268, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 361, 362, 368, 369, 371, 374, 375, 376, 381, 383, 384, 388, 389, 390, 392, 393, 394, 395, 396, 397, 399, 400, 402, 406, 408, 421], "handl": [1, 7, 49, 64, 110, 123, 129, 145, 148, 155, 170, 173, 174, 175, 201, 226, 234, 253, 257, 284, 290, 291, 292, 293, 298, 304, 306, 365, 376, 381, 389, 395], "visual": [1, 7, 12, 14, 27, 28, 32, 33, 39, 45, 47, 48, 50, 56, 64, 66, 69, 71, 72, 79, 80, 83, 86, 87, 88, 89, 91, 92, 94, 96, 101, 102, 104, 105, 106, 108, 111, 112, 128, 130, 133, 139, 141, 148, 149, 150, 151, 159, 163, 164, 167, 170, 172, 174, 189, 191, 192, 195, 196, 198, 199, 201, 208, 212, 213, 217, 218, 220, 222, 226, 234, 284, 285, 288, 290, 291, 293, 295, 296, 298, 302, 309, 312, 315, 317, 320, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 365, 366, 367, 373, 374, 375, 376, 379, 380, 381, 421], "introduct": [1, 7, 110, 111, 120, 133, 148, 156, 158, 159, 163, 166, 167, 169, 175, 212, 243, 257, 258, 290, 295, 366, 375, 383, 421], "fmri": [1, 7, 15, 23, 25, 30, 31, 32, 33, 36, 40, 41, 44, 46, 55, 56, 59, 60, 61, 62, 63, 66, 70, 71, 73, 74, 81, 82, 85, 89, 91, 94, 97, 100, 101, 102, 108, 109, 110, 111, 113, 114, 124, 131, 136, 148, 152, 153, 154, 156, 158, 161, 162, 164, 167, 168, 169, 170, 173, 174, 175, 192, 193, 195, 201, 206, 209, 211, 212, 218, 219, 230, 243, 247, 250, 251, 260, 262, 265, 274, 278, 280, 281, 283, 284, 288, 290, 291, 294, 295, 306, 307, 309, 315, 320, 323, 326, 338, 346, 353, 361, 362, 364, 365, 366, 368, 369, 374, 375, 376, 381, 383, 388, 390, 398, 399, 400, 402, 403, 407, 421], "decod": [1, 7, 36, 39, 40, 42, 44, 45, 97, 109, 111, 113, 114, 128, 129, 133, 136, 139, 140, 141, 142, 143, 144, 148, 156, 160, 164, 168, 169, 170, 175, 212, 215, 222, 232, 265, 268, 284, 288, 290, 295, 309, 315, 316, 339, 365, 366, 375, 376, 380, 381, 383, 398, 400, 405, 406, 420, 421], "intro": [1, 7, 66, 110, 170, 230, 265, 281, 284, 295, 361, 364, 365, 369, 376, 399], "glm": [1, 7, 28, 32, 42, 45, 61, 62, 63, 65, 66, 68, 69, 70, 71, 75, 76, 77, 78, 79, 80, 81, 100, 101, 108, 120, 139, 140, 141, 143, 145, 148, 155, 164, 167, 168, 169, 170, 171, 212, 230, 243, 284, 290, 295, 302, 305, 361, 364, 365, 367, 369, 376, 398, 399, 400, 420, 421], "analysi": [1, 7, 15, 23, 28, 29, 34, 45, 48, 49, 63, 66, 68, 71, 73, 77, 78, 79, 80, 82, 95, 98, 109, 111, 112, 114, 149, 150, 154, 156, 159, 161, 166, 167, 168, 169, 170, 174, 175, 192, 195, 209, 210, 212, 215, 217, 218, 219, 221, 225, 228, 230, 232, 242, 243, 247, 250, 252, 253, 256, 257, 258, 261, 265, 268, 272, 274, 278, 281, 284, 288, 290, 293, 294, 295, 296, 302, 305, 306, 307, 308, 309, 315, 326, 339, 354, 361, 364, 365, 368, 369, 370, 371, 375, 376, 380, 381, 390, 398, 399, 400, 406, 420, 421], "singl": [1, 3, 7, 14, 23, 30, 31, 46, 49, 59, 60, 64, 65, 66, 67, 68, 73, 77, 79, 86, 94, 100, 104, 110, 111, 114, 118, 139, 140, 141, 142, 145, 148, 149, 156, 160, 162, 163, 164, 170, 173, 175, 190, 209, 223, 230, 231, 243, 244, 245, 246, 255, 257, 258, 265, 272, 278, 280, 281, 284, 295, 298, 309, 310, 311, 312, 313, 314, 315, 316, 339, 361, 364, 365, 369, 371, 373, 374, 376, 381, 383, 388, 390, 399, 419], "session": [1, 3, 7, 29, 34, 35, 36, 37, 60, 66, 67, 73, 102, 110, 113, 141, 143, 148, 149, 155, 156, 164, 165, 170, 173, 174, 211, 212, 222, 230, 231, 251, 265, 268, 272, 281, 283, 284, 295, 298, 303, 321, 323, 361, 364, 365, 369, 376, 381, 398, 399, 400, 420], "subject": [1, 3, 7, 11, 15, 16, 17, 18, 21, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 59, 60, 64, 65, 66, 69, 73, 75, 77, 78, 80, 85, 91, 94, 95, 99, 100, 101, 102, 104, 105, 106, 108, 110, 111, 113, 114, 120, 124, 126, 127, 136, 139, 148, 150, 151, 152, 153, 155, 162, 164, 165, 167, 170, 172, 173, 174, 176, 179, 180, 181, 182, 184, 188, 189, 190, 192, 198, 209, 212, 217, 218, 220, 221, 227, 230, 231, 232, 233, 242, 250, 251, 265, 268, 272, 278, 279, 281, 284, 295, 298, 303, 306, 307, 309, 310, 311, 312, 314, 315, 316, 321, 323, 339, 359, 361, 363, 364, 365, 369, 373, 376, 381, 388, 399, 419, 421], "dataset": [1, 3, 4, 7, 9, 10, 13, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 40, 45, 47, 52, 54, 55, 56, 57, 60, 64, 66, 67, 69, 70, 71, 73, 74, 77, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 107, 109, 110, 113, 114, 123, 124, 128, 132, 133, 136, 137, 138, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 154, 155, 156, 159, 161, 164, 167, 168, 169, 170, 171, 172, 175, 243, 244, 245, 246, 249, 250, 253, 261, 265, 268, 272, 274, 278, 281, 282, 284, 285, 288, 290, 294, 295, 299, 303, 305, 307, 308, 309, 315, 316, 326, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 364, 365, 368, 369, 370, 371, 373, 376, 377, 378, 379, 380, 381, 383, 384, 391, 398, 399, 400, 406, 419, 421], "click": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 114, 165, 175, 218, 419], "here": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 114, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 170, 171, 174, 175, 209, 248, 249, 255, 257, 258, 280, 319, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 341, 345, 346, 349, 350, 351, 352, 377], "full": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 118, 120, 148, 152, 153, 154, 156, 158, 160, 162, 163, 164, 168, 174, 175, 196, 197, 201, 206, 209, 212, 220, 243, 244, 245, 246, 250, 251, 252, 255, 256, 257, 258, 265, 278, 280, 283, 300, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 373, 388, 390, 392, 398, 402], "code": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 122, 139, 143, 145, 148, 149, 153, 154, 156, 158, 162, 164, 168, 175, 188, 247, 251, 265, 278, 311, 314, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 372, 390, 398, 400, 414, 416, 420], "run": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 113, 123, 127, 141, 143, 145, 148, 149, 150, 152, 156, 159, 160, 161, 162, 163, 164, 170, 171, 173, 175, 182, 184, 212, 218, 250, 251, 265, 268, 283, 307, 315, 326, 364, 387, 402, 419, 420, 421], "your": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 112, 114, 150, 154, 155, 156, 158, 160, 171, 173, 175, 196, 197, 209, 214, 243, 244, 245, 246, 250, 251, 256, 312, 315, 388, 419, 421], "browser": [2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 133, 136, 138, 148, 175, 265, 278, 340, 382, 383, 384, 385, 386, 398, 400, 419], "via": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 116, 148, 150, 151, 155, 158, 161, 164, 173, 193, 248, 249, 265, 274, 318, 319, 320, 322, 323], "binder": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 138, 148], "discov": [2, 163, 169], "come": [2, 3, 6, 14, 16, 42, 52, 54, 58, 75, 80, 94, 113, 150, 155, 156, 162, 163, 170, 171, 174, 175, 209, 419], "function": [2, 3, 4, 6, 8, 9, 11, 13, 14, 15, 17, 18, 21, 22, 25, 26, 27, 29, 30, 32, 34, 35, 36, 43, 48, 49, 52, 53, 55, 56, 58, 59, 60, 62, 64, 65, 66, 67, 69, 71, 72, 73, 74, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 102, 104, 108, 109, 111, 113, 114, 116, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 148, 152, 155, 156, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 417, 418, 420, 421], "public": [2, 14, 62, 100, 114, 120, 143, 145, 148, 163, 168, 227], "let": [2, 3, 4, 6, 14, 15, 40, 49, 56, 63, 64, 66, 69, 71, 75, 77, 78, 79, 86, 93, 98, 156, 170, 282, 294], "": [2, 3, 4, 6, 9, 10, 11, 16, 18, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 77, 78, 79, 80, 85, 86, 89, 91, 92, 93, 94, 95, 100, 102, 103, 104, 105, 108, 111, 114, 126, 133, 143, 144, 149, 152, 156, 159, 160, 162, 163, 165, 166, 167, 168, 170, 171, 173, 174, 175, 180, 181, 182, 190, 192, 193, 201, 203, 204, 206, 207, 213, 218, 220, 223, 225, 227, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 257, 258, 265, 278, 282, 283, 292, 294, 298, 299, 300, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 362, 363, 372, 378, 382, 387, 388, 389, 390, 400, 402, 419, 421], "first": [2, 6, 11, 14, 16, 18, 20, 23, 25, 30, 32, 33, 34, 35, 40, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 64, 65, 67, 70, 73, 75, 77, 80, 81, 84, 86, 89, 91, 92, 93, 94, 95, 97, 104, 105, 109, 111, 113, 114, 115, 133, 134, 136, 139, 141, 143, 144, 148, 149, 150, 152, 153, 154, 156, 158, 159, 162, 163, 165, 166, 167, 171, 172, 173, 174, 182, 184, 210, 211, 214, 215, 219, 220, 223, 225, 228, 232, 235, 236, 239, 242, 243, 244, 245, 246, 250, 251, 253, 261, 265, 268, 272, 274, 278, 280, 284, 289, 290, 299, 300, 303, 305, 306, 308, 311, 314, 315, 322, 326, 364, 365, 368, 370, 375, 376, 377, 378, 379, 380, 381, 386, 387, 388, 390, 398, 399, 400, 402, 406, 421], "check": [2, 3, 15, 29, 30, 32, 33, 34, 35, 36, 77, 93, 94, 98, 105, 113, 123, 126, 148, 150, 155, 158, 162, 163, 170, 171, 173, 175, 182, 184, 214, 234, 243, 244, 245, 246, 266, 293, 306, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 419], "where": [2, 6, 9, 14, 15, 16, 23, 24, 40, 44, 50, 70, 77, 84, 87, 94, 100, 105, 110, 126, 140, 148, 149, 153, 155, 160, 161, 163, 165, 168, 171, 174, 175, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 227, 228, 229, 230, 231, 232, 233, 234, 243, 244, 245, 246, 248, 249, 252, 255, 256, 257, 258, 261, 265, 278, 280, 317, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 361, 364, 366, 369, 370, 371, 374, 375, 376, 377, 378, 380, 381, 383, 390, 392, 399, 400, 406, 419], "our": [2, 3, 14, 19, 29, 34, 40, 49, 51, 56, 58, 66, 68, 94, 98, 101, 113, 114, 133, 143, 148, 150, 155, 162, 163, 165, 420], "disk": [2, 3, 4, 6, 14, 101, 103, 107, 108, 113, 114, 120, 133, 139, 140, 145, 148, 155, 163, 173, 174, 175, 205, 215, 223, 225, 228, 243, 244, 265, 278, 317, 377, 379, 380, 398, 400], "import": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 113, 114, 126, 132, 133, 134, 136, 141, 143, 148, 149, 150, 153, 155, 156, 157, 158, 160, 162, 163, 164, 167, 168, 170, 171, 173, 174, 175, 253, 255, 257, 258, 265, 278, 282, 285, 290, 294, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 372, 400, 406, 419], "print": [2, 3, 4, 6, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 62, 64, 69, 70, 71, 72, 75, 77, 81, 85, 89, 91, 92, 93, 94, 95, 98, 101, 102, 103, 104, 105, 107, 108, 113, 155, 162, 170, 173, 182, 190, 250, 251, 265, 278, 290, 312, 313, 314, 315, 316], "store": [2, 3, 14, 26, 29, 44, 49, 50, 51, 52, 54, 70, 94, 101, 108, 114, 153, 155, 160, 163, 196, 197, 234, 255, 257, 258, 296, 317, 326, 370], "r": [2, 4, 9, 14, 15, 24, 30, 34, 40, 41, 47, 51, 56, 71, 94, 108, 111, 136, 143, 148, 164, 171, 188, 193, 198, 200, 201, 204, 206, 210, 228, 248, 249, 265, 278, 283, 305, 306, 307, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 363, 368, 372, 400, 402, 419], "get_data_dir": [2, 14, 126, 148, 173], "home": [2, 3, 6, 10, 11, 14, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 75, 77, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108, 170, 173, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 227, 228, 229, 230, 231, 232, 233, 234, 293], "runner": [2, 3, 6, 10, 11, 14, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 75, 77, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108], "nilearn_data": [2, 3, 6, 10, 11, 14, 16, 18, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 75, 77, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108, 196, 197, 234], "now": [2, 3, 6, 14, 16, 20, 22, 25, 29, 40, 44, 49, 50, 51, 55, 56, 63, 65, 66, 71, 79, 81, 84, 86, 92, 93, 94, 100, 101, 103, 104, 108, 113, 118, 120, 121, 123, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 148, 155, 161, 163, 171, 174, 243, 244, 245, 246, 250, 251, 252, 255, 256, 257, 258, 282, 290, 294, 310, 312, 313, 315, 388], "retriev": [2, 20, 22, 44, 48, 90, 91, 92, 113, 143, 148, 150, 155, 158, 169, 173, 175, 204, 230, 231, 234, 306, 307, 355, 356], "motor": [2, 14, 16, 17, 51, 66, 69, 77, 79, 91, 97, 109, 110, 218, 288, 309, 315, 326, 368, 419], "contrast": [2, 6, 8, 14, 15, 16, 27, 33, 64, 65, 67, 68, 71, 75, 76, 77, 78, 79, 80, 81, 88, 90, 101, 105, 106, 108, 110, 126, 130, 131, 140, 143, 148, 154, 160, 165, 166, 167, 168, 216, 217, 218, 224, 226, 254, 255, 257, 258, 259, 261, 262, 263, 265, 278, 280, 305, 361, 364, 374, 375, 376, 381, 383, 387, 400, 419, 421], "neurovault": [2, 14, 16, 97, 109, 110, 111, 112, 129, 136, 141, 145, 148, 168, 223, 224, 225, 226, 235, 288, 293, 294, 296, 300, 309, 315, 368, 376, 381, 421], "repositori": [2, 111, 112, 163, 168, 171, 173, 213, 223, 225, 421], "motor_imag": [2, 9, 13, 14, 15, 16, 90, 93, 419], "fetch_neurovault_motor_task": [2, 9, 13, 14, 15, 16, 90, 93, 133, 148, 224, 419], "imag": [2, 6, 10, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 62, 63, 64, 66, 67, 68, 70, 71, 75, 76, 77, 78, 79, 80, 84, 86, 87, 88, 89, 91, 92, 94, 96, 98, 100, 101, 102, 104, 105, 106, 108, 111, 112, 118, 120, 121, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136, 140, 141, 142, 143, 144, 145, 148, 150, 152, 153, 154, 155, 156, 160, 161, 163, 165, 168, 170, 172, 180, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 209, 212, 213, 214, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 230, 231, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 260, 262, 265, 268, 278, 279, 280, 281, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 399, 400, 402, 403, 406, 412, 421], "collection_658": [2, 14], "image_10426": [2, 14], "nii": [2, 3, 4, 6, 10, 11, 14, 16, 18, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 64, 75, 77, 85, 86, 89, 91, 92, 94, 95, 101, 102, 104, 105, 108, 113, 170, 173, 268, 303, 305, 306, 307, 377, 378, 379, 380, 386, 404], "gz": [2, 3, 4, 6, 10, 11, 14, 16, 18, 22, 23, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 64, 75, 77, 85, 86, 89, 91, 92, 94, 95, 101, 102, 104, 105, 113, 170, 171, 173, 305, 306, 307, 377, 378, 379, 380, 386, 404, 405], "filenam": [2, 3, 4, 10, 15, 50, 55, 61, 94, 113, 126, 136, 143, 144, 148, 150, 153, 154, 173, 174, 196, 197, 228, 241, 243, 244, 245, 246, 248, 249, 293, 305, 309, 312, 315, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 366, 374], "take": [2, 3, 4, 6, 9, 24, 29, 33, 40, 42, 43, 49, 50, 65, 66, 68, 69, 71, 72, 77, 79, 94, 98, 100, 103, 108, 113, 130, 133, 136, 142, 148, 149, 150, 152, 155, 158, 160, 162, 163, 164, 165, 173, 175, 180, 214, 223, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 251, 265, 267, 272, 280, 325, 326, 330, 388, 390, 392, 406, 417, 419], "tmap_filenam": [2, 88], "0": [2, 3, 4, 5, 6, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 149, 150, 153, 155, 161, 162, 163, 164, 165, 173, 174, 175, 180, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 260, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 302, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 361, 362, 363, 368, 372, 373, 374, 375, 376, 377, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 395, 396, 399, 400, 402, 403, 406, 419, 420], "contain": [2, 3, 4, 6, 10, 11, 22, 23, 36, 40, 49, 52, 55, 62, 64, 69, 79, 84, 86, 91, 94, 101, 106, 107, 108, 113, 114, 123, 128, 133, 136, 145, 148, 149, 155, 156, 159, 162, 163, 165, 168, 171, 173, 175, 180, 181, 182, 184, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 212, 222, 223, 224, 225, 226, 227, 233, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 257, 258, 259, 265, 268, 278, 279, 280, 283, 284, 292, 298, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 326, 371, 372, 377, 378, 379, 380, 384, 386, 387, 388, 389, 390, 391, 398, 400, 402, 404, 405, 406, 411, 421], "easili": [2, 3, 9, 15, 30, 31, 39, 49, 58, 94, 113, 114, 143, 148, 155, 156, 158, 160, 161, 162, 163, 164, 168, 171, 196, 197, 218, 278], "statist": [2, 6, 8, 14, 22, 23, 27, 33, 36, 40, 42, 49, 64, 65, 66, 67, 69, 71, 74, 75, 82, 83, 96, 100, 101, 102, 103, 105, 108, 111, 112, 120, 121, 128, 129, 139, 141, 145, 148, 149, 154, 157, 160, 163, 164, 166, 168, 169, 170, 174, 175, 181, 184, 194, 202, 217, 223, 224, 225, 226, 232, 253, 254, 255, 257, 258, 259, 260, 261, 265, 278, 280, 281, 283, 302, 305, 326, 339, 340, 368, 371, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 390, 392, 399, 400, 402, 406, 415, 420, 421], "map": [2, 3, 8, 11, 14, 15, 19, 20, 22, 23, 27, 33, 37, 39, 44, 46, 50, 51, 52, 53, 54, 56, 59, 61, 62, 64, 66, 67, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 83, 84, 87, 89, 90, 91, 92, 93, 96, 97, 99, 101, 102, 104, 108, 109, 110, 111, 112, 121, 125, 128, 129, 133, 134, 136, 139, 140, 143, 148, 150, 151, 154, 156, 158, 159, 160, 163, 164, 165, 166, 168, 169, 170, 173, 174, 175, 180, 181, 182, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 209, 213, 216, 217, 218, 223, 224, 225, 226, 227, 232, 235, 243, 244, 245, 246, 247, 248, 249, 250, 251, 260, 261, 265, 274, 278, 280, 281, 283, 285, 291, 300, 302, 305, 309, 310, 311, 312, 313, 314, 315, 316, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 360, 362, 368, 369, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 394, 397, 399, 400, 402, 406, 415, 421], "plot_stat_map": [2, 6, 9, 15, 17, 29, 30, 31, 36, 39, 40, 42, 43, 48, 50, 55, 61, 64, 65, 66, 67, 70, 71, 75, 76, 77, 81, 85, 87, 88, 90, 92, 93, 94, 98, 100, 102, 103, 104, 106, 107, 113, 121, 132, 133, 140, 141, 143, 144, 148, 153, 155, 167, 175, 383, 419], "displai": [2, 3, 4, 6, 10, 11, 13, 16, 17, 18, 20, 21, 22, 23, 25, 26, 39, 40, 42, 47, 48, 49, 50, 51, 55, 57, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 75, 80, 81, 84, 86, 87, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 105, 106, 120, 125, 130, 131, 133, 134, 136, 140, 141, 143, 145, 148, 150, 153, 154, 160, 165, 169, 174, 265, 272, 278, 311, 314, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 390, 398, 400, 421], "_slicer": [2, 3, 4, 6, 9, 10, 15, 16, 17, 25, 39, 48, 49, 50, 64, 67, 70, 75, 81, 86, 88, 89, 92, 94, 98, 143, 148], "orthoslic": [2, 3, 4, 6, 10, 15, 16, 17, 25, 48, 50, 64, 67, 70, 75, 81, 86, 89, 94, 98, 143, 148, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 419], "object": [2, 3, 4, 5, 6, 9, 10, 13, 14, 15, 16, 17, 25, 28, 30, 32, 33, 36, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 64, 67, 70, 75, 81, 86, 88, 89, 91, 92, 94, 98, 110, 111, 113, 114, 125, 128, 136, 139, 142, 143, 145, 146, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 162, 163, 164, 168, 169, 170, 172, 174, 180, 181, 182, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 257, 258, 260, 265, 268, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 405, 406, 408, 411, 414, 419, 421], "0x7f13532cb160": 2, "better": [2, 3, 30, 33, 42, 43, 49, 66, 94, 100, 103, 111, 119, 124, 127, 133, 141, 148, 150, 151, 152, 154, 155, 156, 157, 158, 159, 162, 164, 174, 181, 374, 390, 406, 421], "threshold": [2, 3, 9, 13, 14, 16, 17, 23, 30, 33, 36, 37, 39, 40, 42, 48, 49, 50, 54, 55, 56, 61, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77, 79, 80, 81, 87, 88, 89, 90, 93, 94, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 114, 121, 134, 136, 140, 143, 145, 148, 150, 153, 162, 165, 166, 168, 174, 214, 235, 236, 239, 250, 260, 264, 265, 278, 280, 281, 282, 302, 306, 307, 319, 320, 321, 322, 323, 324, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 360, 361, 363, 368, 369, 371, 374, 375, 376, 377, 379, 380, 382, 383, 384, 386, 389, 390, 395, 399, 400, 419, 421], "3": [2, 3, 4, 6, 7, 11, 12, 13, 14, 15, 16, 17, 20, 21, 23, 25, 27, 30, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 77, 80, 81, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 111, 115, 119, 120, 123, 126, 127, 130, 133, 134, 135, 136, 141, 142, 143, 144, 153, 160, 161, 164, 165, 174, 175, 181, 182, 184, 186, 187, 188, 192, 193, 195, 198, 199, 200, 202, 203, 204, 209, 210, 213, 220, 223, 225, 228, 232, 233, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 257, 258, 260, 265, 267, 272, 278, 281, 290, 292, 294, 295, 298, 300, 306, 307, 311, 312, 314, 315, 318, 320, 321, 323, 325, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 361, 363, 366, 368, 369, 372, 374, 375, 376, 377, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 395, 400, 406, 408, 419, 420], "0x7f13554ecf40": 2, "rest": [2, 3, 6, 23, 30, 32, 33, 35, 41, 48, 50, 54, 55, 56, 62, 70, 85, 87, 89, 92, 98, 100, 111, 124, 128, 148, 152, 153, 154, 158, 162, 168, 170, 173, 189, 191, 192, 201, 220, 233, 242, 251, 304, 306, 307, 315, 373, 390, 421], "state": [2, 23, 30, 32, 48, 49, 50, 54, 56, 66, 85, 87, 89, 92, 100, 111, 128, 139, 141, 148, 149, 150, 152, 153, 154, 156, 161, 165, 168, 170, 171, 189, 191, 192, 220, 233, 243, 244, 245, 246, 247, 250, 251, 265, 274, 280, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 388, 390, 402, 421], "network": [2, 8, 19, 20, 21, 27, 46, 47, 48, 51, 54, 55, 60, 72, 73, 83, 86, 94, 96, 101, 110, 111, 114, 125, 139, 145, 148, 149, 150, 151, 153, 163, 164, 168, 169, 170, 175, 189, 191, 192, 198, 200, 201, 204, 206, 207, 208, 218, 220, 265, 272, 290, 306, 307, 309, 314, 316, 339, 360, 372, 373, 374, 376, 381, 390, 398, 400, 419, 421], "smith": [2, 21, 83, 94, 96, 110, 111, 149, 168, 201, 220, 280, 290, 309, 314, 326, 360, 374, 376, 381, 390], "2009": [2, 21, 111, 119, 139, 142, 148, 168, 170, 194, 201, 213, 214, 220, 238, 280, 326], "studi": [2, 6, 31, 33, 40, 42, 56, 66, 71, 75, 97, 99, 109, 110, 111, 114, 151, 156, 158, 159, 161, 162, 165, 169, 173, 192, 213, 223, 225, 227, 235, 238, 247, 288, 293, 294, 296, 300, 306, 307, 309, 315, 368, 376, 381, 421], "correspond": [2, 3, 6, 14, 24, 29, 30, 33, 34, 36, 39, 40, 44, 49, 55, 56, 63, 65, 66, 69, 70, 72, 77, 78, 79, 80, 81, 86, 91, 92, 94, 101, 102, 108, 111, 138, 140, 148, 150, 155, 156, 158, 160, 162, 163, 165, 168, 169, 171, 175, 180, 190, 195, 198, 201, 208, 214, 218, 225, 227, 235, 236, 239, 243, 244, 245, 246, 248, 249, 250, 251, 261, 265, 267, 268, 272, 274, 278, 279, 280, 294, 295, 298, 303, 310, 312, 313, 315, 318, 319, 320, 321, 322, 323, 324, 326, 355, 356, 361, 362, 366, 369, 370, 372, 374, 375, 376, 378, 388, 390, 391, 393, 396, 399, 400, 406], "between": [2, 6, 9, 22, 23, 24, 30, 40, 42, 49, 50, 51, 55, 62, 66, 69, 71, 72, 75, 77, 79, 80, 86, 89, 92, 99, 100, 102, 105, 121, 128, 133, 136, 139, 142, 148, 149, 150, 151, 153, 155, 156, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 188, 200, 220, 238, 245, 246, 251, 265, 278, 283, 320, 326, 327, 329, 330, 357, 361, 363, 368, 370, 372, 374, 375, 376, 377, 379, 380, 383, 388, 399, 400, 402, 406], "task": [2, 3, 14, 17, 29, 30, 31, 34, 39, 49, 60, 62, 66, 69, 73, 77, 81, 89, 92, 97, 103, 109, 110, 111, 133, 144, 148, 154, 155, 156, 159, 162, 164, 165, 168, 169, 170, 171, 175, 181, 184, 212, 215, 217, 218, 242, 265, 268, 284, 288, 303, 309, 315, 316, 326, 339, 354, 365, 367, 368, 376, 381], "rsn": [2, 21, 87, 128, 148, 191, 201], "fetch_atlas_smith_2009": [2, 21, 87], "rsn10": [2, 21, 87, 201], "smith_2009": 2, "pnas_smith09_rsn10": 2, "It": [2, 3, 6, 9, 14, 15, 22, 34, 41, 42, 44, 48, 51, 61, 62, 65, 66, 71, 75, 77, 81, 86, 89, 94, 98, 100, 101, 108, 112, 113, 114, 118, 123, 126, 127, 129, 140, 141, 142, 143, 148, 149, 150, 155, 156, 158, 159, 160, 162, 163, 165, 168, 169, 170, 171, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 420], "nifti": [2, 4, 10, 11, 16, 18, 25, 29, 30, 32, 34, 35, 36, 41, 47, 48, 49, 52, 53, 54, 56, 58, 77, 79, 84, 86, 89, 91, 92, 94, 95, 102, 104, 105, 113, 121, 139, 145, 148, 150, 154, 155, 163, 172, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 204, 209, 212, 216, 217, 218, 221, 222, 227, 243, 244, 248, 249, 250, 251, 284, 285, 288, 292, 293, 294, 298, 301, 366, 388, 391, 406, 419, 421], "load": [2, 4, 6, 8, 21, 23, 27, 49, 52, 53, 54, 58, 61, 62, 64, 67, 69, 70, 77, 88, 89, 91, 93, 102, 103, 104, 105, 106, 107, 108, 110, 112, 120, 126, 128, 131, 133, 142, 143, 145, 148, 151, 154, 158, 159, 162, 163, 170, 172, 174, 188, 189, 192, 194, 196, 197, 198, 201, 202, 206, 207, 208, 209, 212, 213, 214, 217, 218, 221, 222, 223, 225, 227, 232, 233, 235, 236, 237, 238, 239, 240, 250, 251, 268, 282, 293, 294, 296, 306, 307, 363, 379, 381, 382, 386, 404, 405, 411, 419, 421], "memori": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 125, 133, 134, 148, 152, 153, 162, 174, 175, 181, 232, 243, 244, 245, 246, 248, 249, 250, 251, 253, 258, 265, 268, 278, 284, 288, 298, 299, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 384, 388, 389, 390, 401, 419], "its": [2, 3, 15, 19, 26, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 44, 48, 50, 56, 66, 69, 84, 88, 89, 90, 92, 94, 98, 100, 108, 113, 114, 125, 128, 136, 139, 141, 143, 145, 148, 149, 152, 154, 155, 156, 158, 160, 161, 162, 163, 165, 167, 168, 171, 175, 187, 200, 202, 212, 223, 224, 225, 226, 243, 244, 245, 246, 248, 249, 250, 251, 252, 256, 265, 267, 272, 278, 279, 280, 282, 293, 361, 362, 363, 366, 368, 369, 372, 374, 375, 376, 377, 378, 379, 380, 387, 388, 389, 390, 415], "shape": [2, 3, 20, 23, 25, 40, 41, 43, 47, 49, 50, 51, 53, 54, 55, 56, 58, 61, 64, 65, 66, 67, 68, 69, 71, 84, 91, 93, 94, 98, 100, 102, 103, 105, 106, 107, 108, 113, 141, 142, 148, 150, 152, 153, 155, 158, 164, 165, 168, 170, 172, 175, 180, 181, 182, 184, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 221, 227, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 261, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 283, 284, 285, 288, 289, 290, 294, 295, 298, 299, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 363, 364, 372, 382, 385, 387, 388, 389, 390, 393, 394, 395, 396, 397, 402, 403, 421], "load_img": [2, 36, 93, 94, 107, 126, 148, 173, 174], "91": [2, 30, 33, 42, 43, 44, 56, 72, 77, 91, 102, 142, 148, 190, 201], "109": [2, 33, 41, 43, 56, 91, 105, 142, 148, 190, 201], "10": [2, 5, 6, 9, 11, 12, 15, 21, 22, 23, 24, 27, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 66, 71, 72, 73, 76, 77, 79, 81, 87, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 108, 111, 114, 119, 133, 143, 149, 152, 155, 156, 157, 160, 161, 162, 164, 165, 180, 181, 184, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 212, 213, 218, 220, 221, 222, 223, 225, 227, 228, 232, 233, 238, 243, 244, 245, 246, 247, 248, 249, 250, 251, 260, 268, 280, 283, 306, 307, 311, 314, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 362, 387, 388, 389, 390, 395, 402, 403, 406, 419], "note": [2, 3, 4, 6, 14, 15, 20, 23, 42, 43, 44, 48, 49, 52, 54, 55, 56, 58, 64, 65, 66, 67, 69, 70, 75, 76, 79, 84, 86, 91, 94, 95, 101, 104, 108, 111, 113, 114, 143, 148, 149, 150, 154, 160, 161, 162, 163, 164, 165, 170, 171, 173, 174, 175, 180, 182, 187, 188, 190, 191, 192, 195, 200, 201, 204, 209, 212, 213, 214, 216, 217, 220, 222, 223, 224, 225, 226, 227, 228, 234, 235, 236, 239, 243, 244, 245, 246, 247, 248, 249, 252, 255, 256, 257, 258, 281, 283, 289, 292, 294, 295, 298, 301, 305, 306, 307, 311, 314, 317, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 361, 362, 366, 368, 375, 376, 387, 388, 391, 402, 403, 406, 419], "index": [2, 6, 12, 20, 22, 23, 33, 40, 41, 50, 55, 56, 64, 65, 66, 69, 72, 87, 88, 100, 101, 103, 125, 143, 148, 153, 190, 191, 199, 200, 202, 210, 229, 242, 243, 244, 245, 246, 255, 257, 258, 272, 290, 298, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 378, 390, 392, 402, 406], "start": [2, 6, 30, 40, 48, 49, 50, 56, 58, 69, 71, 84, 91, 92, 94, 103, 104, 145, 148, 155, 162, 163, 168, 169, 171, 175, 203, 265, 267, 272, 309, 310, 311, 312, 313, 314, 315, 316, 326, 390, 406], "first_rsn": 2, "index_img": [2, 3, 20, 29, 30, 31, 32, 33, 34, 36, 37, 49, 50, 87, 89, 92, 98, 102, 104, 150, 153, 174, 175, 284, 291], "0x7f13553c9bb0": 2, "If": [2, 9, 14, 15, 24, 32, 35, 36, 40, 41, 42, 43, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 62, 70, 75, 79, 84, 86, 89, 91, 92, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 113, 114, 133, 140, 141, 143, 148, 149, 153, 155, 156, 158, 160, 162, 163, 165, 168, 170, 171, 173, 174, 175, 180, 181, 182, 184, 186, 187, 188, 189, 194, 195, 196, 197, 199, 206, 207, 208, 209, 213, 214, 216, 217, 218, 221, 223, 225, 227, 228, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 261, 262, 265, 272, 274, 278, 279, 280, 281, 282, 283, 284, 288, 289, 293, 295, 296, 297, 298, 299, 300, 302, 303, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 396, 398, 399, 400, 401, 402, 406, 419, 420], "want": [2, 6, 9, 14, 15, 42, 49, 54, 66, 71, 72, 78, 86, 94, 98, 100, 110, 113, 114, 149, 156, 158, 162, 163, 165, 171, 174, 175, 223, 225, 248, 249, 298, 307, 379, 386, 419, 420], "iter_img": [2, 48, 174, 290], "them": [2, 3, 6, 14, 19, 30, 32, 39, 42, 44, 49, 50, 54, 55, 58, 62, 64, 65, 67, 69, 71, 72, 79, 80, 86, 89, 94, 100, 103, 104, 108, 110, 113, 114, 118, 121, 133, 139, 140, 142, 145, 148, 149, 150, 154, 156, 158, 163, 165, 168, 169, 170, 173, 175, 190, 223, 225, 268, 325, 326, 388, 419], "Then": [2, 3, 14, 30, 40, 42, 50, 51, 55, 62, 63, 69, 94, 95, 153, 155, 157, 158, 163, 174, 175, 180, 182, 214, 387], "give": [2, 3, 4, 9, 14, 15, 16, 24, 29, 33, 42, 49, 52, 54, 55, 56, 58, 69, 84, 91, 94, 98, 103, 113, 126, 128, 143, 148, 149, 150, 152, 154, 155, 156, 157, 158, 160, 162, 170, 174, 175, 216, 217, 225, 243, 244, 245, 246, 247, 250, 251, 252, 260, 265, 267, 272, 278, 280, 295, 300, 303, 310, 311, 312, 313, 314, 315, 316, 317, 324, 373, 378, 379, 387, 388, 390, 392, 396, 397, 406], "few": [2, 14, 15, 25, 39, 40, 49, 77, 81, 91, 102, 131, 132, 148, 154, 156, 159, 161, 163, 164, 171, 174, 388, 406, 421], "argument": [2, 6, 9, 14, 15, 17, 43, 48, 55, 68, 70, 80, 89, 92, 94, 114, 125, 126, 128, 129, 130, 131, 133, 134, 136, 139, 140, 141, 142, 143, 145, 148, 155, 156, 158, 160, 162, 163, 164, 167, 173, 184, 188, 196, 197, 223, 234, 243, 244, 245, 246, 247, 268, 278, 280, 294, 297, 307, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 367, 369, 371, 373, 379, 380, 384, 419], "more": [2, 3, 4, 6, 8, 9, 13, 14, 16, 19, 21, 22, 23, 26, 27, 28, 29, 31, 33, 39, 40, 42, 43, 46, 48, 49, 50, 52, 54, 55, 56, 58, 60, 61, 62, 64, 66, 69, 70, 71, 74, 75, 77, 79, 80, 83, 86, 89, 91, 94, 98, 100, 101, 102, 103, 105, 107, 108, 110, 112, 113, 114, 116, 120, 122, 126, 128, 130, 132, 133, 136, 138, 142, 143, 144, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 168, 170, 171, 173, 174, 175, 181, 188, 190, 191, 192, 193, 198, 200, 201, 203, 204, 209, 212, 213, 214, 218, 220, 223, 225, 226, 227, 232, 235, 236, 238, 239, 242, 243, 244, 245, 246, 248, 249, 250, 251, 253, 255, 257, 258, 265, 278, 280, 284, 295, 303, 307, 310, 311, 312, 315, 326, 337, 339, 342, 344, 346, 348, 350, 352, 354, 361, 374, 375, 376, 381, 383, 384, 387, 388, 389, 390, 392, 399, 406, 409, 419, 420, 421], "compact": [2, 94, 174, 214], "img": [2, 4, 6, 10, 50, 62, 71, 77, 79, 84, 90, 101, 105, 128, 136, 148, 153, 173, 247, 250, 251, 278, 280, 282, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 309, 310, 311, 312, 313, 314, 315, 316, 317, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 360, 362, 369, 370, 388, 390, 393, 394, 396, 397, 399, 406, 419], "display_mod": [2, 6, 9, 13, 14, 15, 18, 30, 31, 36, 39, 40, 42, 43, 48, 49, 53, 58, 62, 65, 66, 70, 71, 75, 76, 79, 87, 88, 92, 101, 102, 105, 106, 107, 113, 126, 143, 148, 265, 278, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 361, 363, 366, 368, 369, 372, 374, 375, 376, 400, 419], "z": [2, 13, 14, 15, 18, 24, 30, 33, 36, 40, 42, 43, 48, 52, 54, 58, 61, 62, 65, 66, 67, 69, 70, 71, 75, 76, 79, 80, 81, 84, 87, 88, 94, 101, 102, 105, 106, 108, 111, 128, 130, 134, 145, 148, 165, 168, 171, 174, 175, 198, 223, 253, 260, 264, 265, 278, 281, 285, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 326, 327, 329, 330, 334, 335, 336, 337, 338, 345, 346, 351, 352, 353, 354, 355, 356, 357, 360, 361, 362, 363, 366, 368, 369, 372, 374, 375, 376, 377, 378, 379, 380, 383, 386, 391, 399, 400, 402, 419], "cut_coord": [2, 6, 9, 15, 16, 17, 18, 20, 30, 31, 36, 39, 40, 42, 43, 48, 49, 50, 55, 61, 65, 66, 67, 70, 71, 75, 77, 79, 81, 86, 87, 88, 90, 92, 93, 94, 100, 102, 105, 106, 107, 120, 121, 148, 153, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 361, 366, 369, 374, 375, 376, 383, 400, 419], "1": [2, 3, 5, 6, 9, 10, 11, 12, 15, 18, 21, 22, 23, 24, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 114, 120, 121, 123, 127, 128, 130, 133, 135, 136, 143, 145, 149, 153, 155, 156, 157, 158, 160, 161, 162, 165, 171, 173, 175, 180, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 260, 265, 268, 272, 274, 278, 280, 282, 283, 287, 290, 292, 295, 298, 300, 306, 307, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 362, 363, 368, 370, 372, 373, 374, 375, 377, 379, 380, 383, 388, 389, 390, 395, 397, 402, 403, 406, 419, 420], "colorbar": [2, 6, 9, 14, 20, 21, 23, 25, 26, 36, 37, 40, 48, 50, 51, 54, 57, 58, 62, 69, 70, 75, 76, 77, 79, 80, 86, 87, 88, 94, 101, 103, 105, 108, 118, 120, 125, 128, 133, 134, 136, 140, 141, 142, 143, 144, 148, 153, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 364, 366, 368, 369, 371, 372, 373, 374, 375, 376, 377, 379, 380, 382, 383, 384, 386, 419], "fals": [2, 6, 9, 14, 15, 17, 18, 20, 21, 22, 33, 34, 36, 37, 40, 41, 42, 43, 47, 48, 49, 50, 51, 54, 56, 57, 58, 62, 70, 72, 75, 76, 77, 79, 80, 81, 86, 87, 88, 89, 91, 92, 94, 99, 101, 102, 103, 105, 106, 114, 136, 139, 140, 141, 143, 145, 148, 153, 160, 164, 165, 168, 175, 180, 182, 184, 186, 188, 194, 195, 196, 197, 206, 207, 208, 209, 212, 218, 221, 223, 225, 227, 243, 245, 248, 249, 250, 251, 260, 262, 265, 268, 278, 280, 281, 283, 284, 287, 296, 298, 299, 302, 303, 306, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 361, 363, 364, 366, 368, 369, 371, 372, 373, 374, 375, 377, 378, 379, 380, 383, 384, 386, 387, 388, 389, 390, 391, 396, 397, 399, 400, 401, 402, 419], "slice": [2, 3, 6, 9, 16, 36, 62, 89, 94, 100, 101, 105, 106, 108, 113, 132, 139, 141, 148, 160, 173, 175, 265, 278, 290, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 369, 400, 421], "constructor": [2, 114, 257, 258, 290, 398], "desir": [2, 62, 171, 175, 250, 251, 264, 265, 267, 272, 278, 281, 303, 355, 356, 364, 388], "afterward": [2, 162, 171], "ll": [2, 6, 49, 58, 248, 249], "follow": [2, 4, 9, 14, 18, 22, 29, 32, 34, 35, 36, 40, 41, 42, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 66, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 110, 113, 114, 130, 133, 134, 135, 136, 137, 138, 142, 148, 149, 150, 153, 154, 160, 163, 164, 165, 168, 170, 171, 173, 227, 232, 234, 283, 289, 303, 305, 306, 307, 311, 314, 318, 319, 320, 322, 323, 384, 390, 402, 403, 419, 420], "same": [2, 3, 6, 14, 15, 21, 23, 34, 37, 40, 41, 47, 49, 50, 55, 58, 63, 64, 66, 69, 70, 71, 84, 86, 88, 94, 98, 100, 101, 102, 108, 114, 121, 128, 133, 139, 140, 141, 142, 143, 148, 149, 150, 153, 154, 155, 156, 160, 162, 163, 165, 167, 168, 173, 174, 175, 180, 181, 182, 184, 196, 197, 206, 208, 213, 214, 232, 243, 244, 245, 246, 248, 249, 250, 251, 265, 268, 278, 280, 283, 285, 294, 296, 298, 303, 306, 307, 309, 311, 312, 314, 315, 316, 322, 324, 326, 332, 333, 334, 335, 336, 345, 346, 349, 350, 351, 352, 357, 361, 363, 364, 366, 368, 369, 373, 374, 375, 376, 384, 387, 388, 391, 396, 397, 399, 400, 402], "formula": [2, 124, 148, 162, 278, 294, 364], "befor": [2, 15, 49, 55, 56, 89, 94, 98, 103, 113, 120, 133, 136, 139, 141, 143, 145, 148, 152, 153, 155, 156, 158, 163, 164, 165, 167, 170, 171, 173, 174, 175, 184, 223, 225, 250, 251, 265, 267, 272, 283, 287, 289, 306, 307, 310, 311, 313, 314, 316, 362, 377, 379, 380, 388, 393, 394, 402, 403, 419], "selected_volum": 2, "5": [2, 3, 6, 12, 18, 20, 22, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 81, 82, 88, 89, 91, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 111, 120, 123, 130, 136, 141, 142, 143, 144, 149, 153, 155, 160, 161, 162, 165, 174, 175, 191, 193, 196, 197, 199, 200, 203, 208, 209, 212, 213, 214, 218, 220, 222, 235, 238, 248, 249, 255, 257, 258, 283, 289, 290, 293, 306, 307, 319, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 374, 375, 377, 379, 380, 382, 384, 385, 386, 401, 402, 403, 406, 419], "re": [2, 6, 21, 23, 40, 65, 66, 69, 71, 84, 114, 142, 148, 163, 223, 235, 236, 237, 238, 239, 240, 255, 257, 258, 268, 391], "new": [2, 3, 10, 11, 20, 36, 49, 66, 72, 79, 84, 86, 94, 98, 102, 107, 111, 113, 119, 127, 128, 129, 130, 131, 144, 155, 156, 157, 158, 163, 168, 170, 171, 174, 175, 180, 182, 186, 187, 192, 195, 197, 200, 202, 203, 208, 209, 210, 214, 223, 225, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 249, 250, 251, 257, 258, 265, 274, 278, 280, 282, 283, 292, 293, 294, 295, 296, 297, 298, 299, 302, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 326, 361, 362, 363, 364, 366, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 388, 390, 391, 392, 398, 402, 406, 419, 420], "thing": [2, 3, 56, 66, 152, 161, 162, 163, 171, 175, 255, 283, 402, 419], "base": [2, 8, 20, 27, 28, 29, 34, 45, 47, 48, 49, 55, 60, 61, 62, 66, 67, 71, 73, 74, 81, 82, 88, 89, 91, 92, 97, 98, 105, 109, 110, 111, 114, 120, 124, 128, 136, 139, 141, 144, 148, 149, 150, 151, 152, 154, 155, 158, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 175, 181, 184, 189, 194, 200, 202, 209, 212, 213, 214, 215, 218, 219, 220, 223, 225, 227, 230, 231, 232, 233, 243, 244, 245, 246, 247, 249, 250, 251, 253, 261, 265, 268, 272, 274, 278, 280, 281, 282, 283, 284, 288, 290, 294, 299, 302, 305, 306, 307, 309, 315, 316, 320, 326, 327, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 365, 374, 375, 376, 379, 380, 381, 383, 387, 388, 390, 391, 392, 398, 400, 402, 403, 404, 405, 406, 419, 420, 421], "confirm": [2, 29, 163], "match": [2, 6, 15, 41, 114, 136, 140, 141, 143, 148, 154, 160, 168, 172, 175, 190, 201, 223, 242, 243, 244, 245, 246, 248, 249, 250, 251, 265, 268, 278, 280, 284, 293, 295, 298, 303, 305, 310, 311, 313, 314, 318, 320, 321, 323, 374, 388, 391, 421], "previou": [2, 9, 14, 41, 49, 54, 62, 66, 77, 94, 142, 143, 148, 149, 152, 156, 158, 162, 165, 184, 243, 244, 245, 246, 250, 251, 312, 315, 388], "abov": [2, 3, 4, 14, 21, 33, 42, 48, 49, 56, 66, 69, 86, 94, 100, 114, 128, 148, 149, 150, 152, 154, 155, 160, 162, 163, 164, 168, 173, 174, 175, 190, 214, 235, 236, 239, 243, 244, 245, 246, 248, 249, 252, 255, 256, 257, 258, 298, 299, 306, 310, 311, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 374, 382, 384, 386, 388, 390, 401, 402], "show": [2, 4, 6, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 128, 134, 139, 141, 143, 148, 149, 150, 153, 155, 156, 158, 160, 165, 167, 174, 175, 212, 224, 252, 265, 278, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 378, 382, 385, 390, 400, 419], "forc": [2, 94, 123, 148, 162, 175, 192, 201, 223, 224, 225, 226], "figur": [2, 4, 9, 12, 14, 15, 18, 22, 23, 24, 25, 30, 32, 34, 35, 36, 40, 41, 42, 43, 44, 48, 49, 51, 52, 56, 57, 62, 65, 66, 68, 70, 79, 84, 91, 94, 99, 100, 101, 105, 106, 108, 130, 139, 140, 143, 144, 145, 148, 163, 164, 165, 174, 305, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 419], "when": [2, 3, 4, 8, 9, 16, 24, 27, 54, 66, 67, 68, 69, 75, 89, 91, 92, 94, 100, 102, 105, 106, 110, 113, 114, 120, 121, 123, 127, 128, 129, 131, 134, 136, 139, 140, 143, 144, 145, 148, 149, 150, 152, 154, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 168, 171, 174, 180, 190, 193, 199, 200, 216, 218, 223, 225, 243, 244, 245, 246, 247, 248, 249, 253, 254, 258, 259, 265, 278, 280, 298, 300, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 326, 327, 329, 330, 358, 364, 368, 369, 374, 375, 376, 377, 379, 380, 381, 383, 384, 386, 388, 400, 401, 402, 406, 419], "outsid": [2, 4, 16, 66, 145, 148, 163, 170, 175, 298, 299, 393, 394, 399, 406], "ipython": [2, 4, 16, 155, 170, 420], "recap": [2, 4], "call": [2, 4, 6, 14, 15, 16, 33, 43, 48, 49, 50, 53, 54, 56, 58, 66, 69, 72, 76, 81, 87, 89, 91, 94, 98, 104, 113, 114, 136, 148, 149, 150, 152, 153, 155, 156, 160, 162, 163, 164, 165, 167, 168, 173, 175, 179, 182, 184, 192, 204, 223, 225, 228, 249, 251, 254, 259, 265, 278, 293, 322, 363, 372, 388, 419], "differ": [2, 6, 9, 15, 19, 20, 21, 22, 23, 28, 29, 45, 46, 51, 52, 54, 55, 58, 59, 63, 66, 67, 68, 69, 70, 71, 72, 75, 79, 80, 81, 89, 91, 94, 98, 99, 100, 102, 103, 110, 111, 113, 120, 134, 140, 142, 148, 150, 151, 153, 154, 155, 157, 158, 159, 160, 162, 163, 164, 165, 168, 172, 173, 180, 182, 195, 204, 209, 212, 235, 236, 237, 238, 239, 240, 243, 245, 246, 248, 249, 257, 258, 261, 265, 267, 268, 272, 274, 278, 284, 288, 290, 295, 303, 306, 309, 310, 311, 313, 314, 315, 325, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 361, 363, 366, 368, 369, 373, 374, 375, 376, 381, 388, 390, 399, 400, 406, 421], "flavor": 2, "onli": [2, 3, 6, 13, 14, 19, 29, 31, 32, 33, 34, 36, 37, 40, 42, 43, 49, 51, 52, 54, 55, 58, 66, 69, 75, 79, 81, 84, 86, 91, 94, 98, 99, 100, 101, 103, 104, 108, 113, 114, 126, 131, 136, 141, 143, 144, 148, 149, 150, 152, 153, 155, 156, 157, 158, 160, 162, 163, 165, 167, 168, 172, 173, 174, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 419, 421], "multipl": [2, 6, 19, 42, 47, 77, 79, 81, 101, 139, 140, 148, 151, 156, 158, 160, 163, 166, 168, 172, 173, 174, 192, 242, 255, 273, 278, 280, 290, 293, 294, 312, 326, 337, 339, 342, 356, 361, 366, 369, 371, 374, 375, 376, 383, 419, 421], "detail": [2, 3, 8, 9, 12, 14, 15, 16, 19, 22, 23, 26, 28, 29, 31, 33, 39, 46, 48, 50, 52, 54, 58, 60, 62, 64, 67, 71, 72, 74, 81, 83, 95, 100, 101, 102, 103, 107, 110, 113, 114, 116, 128, 133, 136, 145, 148, 149, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 166, 171, 172, 173, 175, 177, 180, 188, 192, 196, 197, 200, 209, 214, 218, 220, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 250, 251, 258, 265, 278, 283, 287, 295, 300, 301, 307, 309, 310, 311, 312, 313, 314, 315, 316, 326, 384, 387, 388, 390, 392, 411, 412, 419, 420], "input": [2, 3, 4, 6, 9, 14, 15, 23, 32, 43, 48, 49, 54, 55, 57, 64, 67, 68, 71, 76, 77, 79, 80, 85, 88, 89, 92, 94, 98, 108, 113, 122, 123, 126, 127, 128, 129, 131, 132, 133, 136, 140, 142, 143, 144, 145, 148, 152, 155, 158, 160, 162, 163, 164, 168, 172, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 219, 220, 243, 244, 245, 246, 247, 248, 249, 250, 251, 260, 262, 264, 265, 267, 272, 273, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 361, 362, 368, 369, 371, 374, 375, 376, 383, 384, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 402, 406, 419, 421], "format": [2, 3, 21, 33, 40, 47, 49, 51, 56, 58, 61, 62, 67, 70, 71, 77, 79, 91, 93, 98, 100, 103, 107, 113, 140, 143, 145, 148, 163, 164, 175, 180, 250, 251, 265, 278, 309, 310, 311, 312, 313, 314, 315, 316, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 366, 368, 369, 375, 376, 377, 378, 379, 380, 385, 386, 387, 388, 389, 390, 404, 405, 406, 410], "given": [2, 3, 9, 14, 16, 44, 47, 50, 53, 54, 64, 65, 66, 69, 71, 79, 84, 86, 94, 95, 100, 104, 125, 127, 131, 136, 145, 148, 149, 152, 155, 156, 158, 160, 161, 162, 165, 168, 170, 171, 175, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 196, 197, 217, 218, 220, 221, 227, 233, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 261, 262, 265, 268, 272, 278, 279, 280, 282, 284, 289, 292, 295, 298, 300, 302, 303, 306, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 366, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 386, 388, 389, 390, 391, 392, 393, 400, 401, 403], "section": [2, 3, 4, 14, 39, 47, 48, 49, 56, 70, 94, 98, 100, 111, 112, 113, 128, 133, 143, 148, 149, 150, 152, 153, 155, 156, 158, 160, 163, 165, 167, 171, 172, 175, 177, 223, 227, 357, 387, 398, 411, 412, 419], "name": [2, 3, 4, 6, 11, 14, 21, 22, 23, 26, 30, 32, 44, 51, 58, 62, 65, 72, 75, 76, 77, 79, 80, 91, 94, 100, 101, 103, 108, 113, 120, 125, 134, 136, 141, 143, 145, 148, 152, 156, 160, 163, 164, 168, 170, 171, 172, 175, 180, 181, 182, 190, 191, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 206, 208, 218, 223, 225, 228, 229, 230, 231, 232, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 263, 265, 266, 267, 268, 272, 278, 280, 283, 294, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 387, 388, 389, 390, 391, 393, 400, 402, 421], "accept": [2, 3, 47, 65, 120, 127, 128, 130, 133, 134, 136, 139, 140, 141, 142, 143, 144, 145, 148, 163, 164, 173, 278, 280, 281, 303, 317, 318, 319, 320, 321, 322, 323, 361, 371, 373, 374, 375, 376, 383, 385, 396, 397], "either": [2, 4, 9, 32, 35, 36, 39, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 133, 140, 142, 148, 150, 152, 163, 164, 167, 168, 173, 199, 200, 204, 212, 255, 257, 258, 265, 278, 281, 282, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 361, 362, 363, 366, 367, 368, 371, 373, 374, 375, 376, 377, 378, 379, 380, 383, 390, 400, 404, 405, 406, 419, 420], "hand": [2, 66, 69, 94, 162, 163, 173, 175, 233], "break": [2, 83, 96, 110, 128, 148, 152, 160, 163, 204, 375, 381, 391], "down": [2, 70, 103, 152, 162, 163, 245], "other": [2, 4, 14, 23, 24, 31, 33, 36, 39, 40, 48, 56, 66, 69, 70, 94, 98, 100, 103, 104, 112, 113, 133, 136, 140, 148, 149, 150, 155, 156, 157, 159, 160, 162, 163, 164, 168, 171, 173, 175, 180, 182, 209, 223, 229, 242, 245, 246, 250, 251, 255, 257, 258, 265, 267, 268, 272, 278, 280, 303, 304, 306, 307, 322, 326, 381, 419, 421], "concat_img": [2, 6, 11, 70, 71, 100, 127, 148, 174, 290], "group": [2, 3, 6, 14, 29, 30, 32, 33, 46, 57, 58, 59, 62, 74, 76, 77, 78, 79, 80, 97, 98, 101, 104, 105, 109, 110, 111, 130, 136, 148, 150, 151, 154, 155, 160, 165, 167, 168, 169, 170, 180, 181, 182, 192, 193, 198, 206, 208, 209, 220, 226, 243, 244, 245, 246, 247, 250, 251, 291, 303, 306, 309, 314, 326, 359, 362, 363, 373, 374, 376, 381, 395, 421], "total": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 151, 153, 155, 161, 199, 209, 249, 320, 321, 323, 374, 391, 421], "script": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 142, 148, 157, 163, 173, 174, 175, 419, 420], "minut": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 165, 218], "207": [2, 7, 19, 27, 33, 41, 72], "second": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 111, 152, 153, 161, 162, 163, 165, 166, 168, 175, 215, 217, 218, 232, 243, 244, 245, 246, 248, 249, 253, 260, 261, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 283, 288, 294, 302, 305, 310, 311, 326, 338, 339, 353, 362, 365, 368, 370, 376, 377, 378, 379, 380, 381, 386, 388, 390, 398, 400, 402, 406, 421], "estim": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 63, 65, 68, 70, 71, 72, 75, 78, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 120, 131, 139, 140, 145, 148, 149, 154, 157, 159, 160, 163, 165, 167, 168, 170, 171, 180, 181, 182, 184, 200, 204, 220, 227, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 261, 262, 265, 278, 280, 284, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 322, 323, 326, 373, 381, 387, 388, 389, 390, 413, 421], "usag": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 127, 136, 140, 145, 148, 149, 163, 164, 167, 170, 171, 172, 220, 227, 232, 384, 409, 421], "410": [2, 7, 33, 36, 42, 44, 102, 111, 156], "mb": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "sourc": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 149, 150, 154, 162, 163, 171, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 420], "plot_3d_and_4d_niimg": [2, 7], "py": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 136, 141, 142, 143, 145, 148, 163, 171, 175], "jupyt": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 134, 136, 148, 155, 170, 175, 265, 278, 382, 383, 384, 385, 386, 398, 400, 419], "notebook": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 121, 133, 136, 148, 155, 170, 175, 265, 278, 307, 382, 383, 384, 385, 386, 398, 400, 419], "ipynb": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "galleri": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 121, 123, 127, 128, 130, 148, 163, 419], "gener": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 113, 120, 133, 134, 136, 138, 139, 141, 143, 148, 155, 156, 158, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 192, 193, 195, 218, 228, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 257, 258, 265, 272, 278, 280, 281, 282, 283, 288, 294, 295, 305, 306, 307, 311, 312, 314, 324, 326, 367, 371, 376, 377, 378, 379, 380, 381, 387, 388, 390, 398, 402, 410, 419, 420], "sphinx": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 121, 123, 127, 128, 130, 148, 163], "simpl": [3, 5, 25, 29, 31, 35, 37, 40, 47, 56, 60, 65, 67, 71, 73, 75, 76, 77, 79, 80, 83, 84, 87, 89, 91, 94, 96, 98, 100, 101, 110, 111, 113, 114, 126, 128, 133, 143, 148, 149, 150, 156, 158, 159, 162, 163, 164, 167, 168, 170, 174, 175, 180, 181, 182, 209, 211, 218, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 256, 265, 278, 290, 295, 307, 309, 310, 311, 312, 313, 314, 315, 316, 362, 375, 376, 381, 387, 388, 389, 390, 398, 400, 421], "reproduc": [3, 32, 40, 41, 48, 51, 72, 98, 100, 111, 169, 218, 245, 246], "2001": [3, 31, 38, 98, 102, 111, 113, 159, 169, 173, 190, 212, 326, 421], "v": [3, 6, 24, 28, 35, 45, 51, 65, 66, 76, 79, 80, 89, 97, 98, 109, 110, 111, 155, 156, 160, 162, 163, 169, 171, 203, 208, 212, 213, 216, 218, 223, 225, 226, 238, 243, 245, 247, 249, 288, 290, 293, 295, 296, 306, 309, 315, 326, 354, 369, 376, 381, 383, 403], "discrimin": [3, 29, 31, 51, 94, 99, 113, 155, 169, 170], "mask": [3, 8, 15, 20, 21, 23, 27, 29, 30, 31, 33, 34, 35, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 64, 67, 70, 75, 77, 79, 83, 91, 92, 96, 102, 104, 105, 106, 110, 112, 114, 120, 126, 127, 128, 130, 133, 136, 139, 141, 142, 143, 148, 152, 156, 159, 161, 169, 170, 172, 173, 181, 209, 212, 213, 214, 218, 222, 223, 235, 236, 239, 243, 244, 245, 246, 248, 249, 250, 251, 260, 262, 265, 278, 280, 281, 282, 283, 288, 289, 290, 293, 295, 296, 300, 302, 306, 309, 310, 311, 312, 313, 314, 315, 316, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 360, 361, 362, 366, 368, 370, 371, 375, 376, 381, 388, 389, 390, 392, 393, 394, 395, 398, 400, 402, 406, 411, 419, 421], "ventral": [3, 16, 22, 32, 33, 38, 94, 98, 111, 113, 155, 169, 175, 212, 377, 379, 380], "stream": [3, 32, 113, 169, 175], "j": [3, 22, 23, 37, 41, 47, 49, 56, 68, 71, 76, 84, 98, 100, 102, 111, 114, 130, 133, 142, 148, 156, 157, 160, 161, 192, 194, 195, 198, 199, 200, 202, 203, 207, 208, 210, 213, 218, 220, 221, 222, 223, 225, 228, 238, 245, 246, 260, 280, 283, 306, 307, 326, 362, 402, 403, 419], "et": [3, 22, 23, 28, 44, 45, 48, 51, 58, 66, 72, 98, 99, 100, 102, 110, 128, 133, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 175, 190, 199, 202, 206, 207, 208, 212, 221, 222, 243, 246, 249, 250, 283, 285, 290, 302, 309, 312, 315, 326, 354, 376, 381], "al": [3, 22, 23, 28, 44, 45, 48, 51, 58, 66, 72, 98, 99, 100, 102, 110, 128, 133, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 175, 190, 199, 202, 206, 207, 208, 212, 221, 222, 243, 246, 249, 250, 283, 285, 290, 302, 309, 312, 315, 326, 354, 376, 381], "distribut": [3, 6, 22, 23, 32, 38, 48, 49, 55, 79, 94, 98, 111, 140, 144, 148, 155, 160, 162, 165, 168, 202, 212, 253, 280, 326, 370], "overlap": [3, 32, 38, 54, 58, 89, 91, 92, 98, 111, 120, 148, 163, 168, 175, 212, 220, 310, 311, 313, 314, 316, 374], "represent": [3, 16, 32, 33, 36, 38, 52, 53, 56, 58, 62, 75, 77, 84, 94, 98, 100, 104, 111, 113, 151, 154, 160, 168, 172, 174, 208, 212, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 278, 283, 284, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 361, 362, 368, 369, 371, 374, 375, 376, 383, 384, 388, 390, 393, 394, 396, 397, 400, 406, 421], "tempor": [3, 6, 16, 32, 33, 38, 51, 55, 66, 68, 91, 94, 98, 101, 103, 111, 113, 133, 141, 148, 154, 155, 168, 172, 193, 212, 251, 265, 269, 270, 271, 272, 274, 275, 276, 277, 283, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 390, 402, 421], "cortex": [3, 23, 32, 33, 38, 55, 58, 61, 69, 71, 75, 79, 80, 91, 98, 111, 153, 155, 160, 164, 165, 194, 200, 204, 206, 212, 220, 222], "scienc": [3, 23, 38, 48, 58, 98, 111, 154, 157, 160, 161, 170, 180, 190, 192, 195, 198, 201, 202, 206, 208, 209, 212, 213, 218, 220, 221, 222, 233, 238, 245, 246, 247, 306, 307, 326, 362, 403, 421], "vol": [3, 48, 49, 98, 154, 247, 250], "293": [3, 33, 41, 66, 72, 98, 111, 212], "p": [3, 6, 37, 42, 48, 62, 64, 67, 72, 75, 76, 77, 79, 80, 81, 94, 98, 101, 102, 105, 106, 108, 111, 140, 148, 154, 160, 162, 165, 180, 181, 184, 188, 193, 201, 203, 213, 220, 250, 252, 253, 261, 265, 278, 280, 281, 283, 305, 326, 399, 400, 402], "2425": [3, 98, 111, 212], "2430": [3, 98, 102, 111, 212], "meant": [3, 6, 104, 187, 253, 398], "variou": [3, 20, 30, 31, 39, 48, 105, 106, 136, 139, 143, 148, 155, 157, 158, 163, 165, 168, 174, 192, 245, 246, 307, 388, 406], "step": [3, 11, 20, 33, 35, 37, 42, 44, 47, 49, 50, 55, 58, 61, 62, 64, 65, 66, 69, 79, 80, 89, 94, 98, 101, 108, 113, 120, 131, 139, 145, 148, 149, 152, 153, 154, 155, 157, 158, 160, 162, 163, 168, 171, 172, 173, 174, 182, 189, 214, 227, 236, 239, 245, 246, 250, 251, 265, 280, 307, 312, 315, 318, 319, 320, 322, 323, 388, 402, 421], "meta": [3, 14, 97, 100, 103, 109, 110, 114, 225, 288, 293, 294, 296, 368, 376, 381], "minimalist": 3, "strive": 3, "didact": [3, 126, 148, 156, 158, 163], "copi": [3, 10, 18, 20, 21, 33, 36, 40, 53, 88, 100, 110, 113, 136, 148, 162, 163, 173, 227, 228, 250, 251, 286, 287, 288, 298, 299, 302, 309, 312, 315, 401], "analyz": [3, 33, 49, 60, 74, 94, 110, 154, 163, 165, 168, 170, 172, 326, 421], "mani": [3, 10, 11, 15, 23, 36, 38, 39, 41, 42, 43, 48, 49, 51, 56, 71, 79, 86, 94, 98, 99, 100, 106, 114, 141, 148, 151, 152, 153, 155, 156, 157, 158, 161, 162, 165, 168, 171, 174, 175, 182, 223, 225, 243, 244, 245, 246, 247, 280, 287, 326, 371, 396, 397, 406, 419], "unnecessari": [3, 258], "fetch_haxbi": [3, 15, 16, 18, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 94, 98, 102, 113, 127, 148, 155, 163, 173], "directori": [3, 6, 62, 64, 94, 101, 108, 110, 152, 163, 173, 181, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 248, 249, 250, 251, 265, 268, 278, 284, 303, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 370, 388, 389, 390], "while": [3, 4, 6, 48, 55, 56, 66, 84, 94, 98, 100, 101, 103, 108, 113, 120, 121, 131, 133, 148, 154, 155, 160, 162, 163, 164, 170, 174, 175, 192, 243, 244, 245, 246, 272, 326], "310": [3, 33, 36, 41, 42, 44, 102], "mo": 3, "internet": [3, 14, 49, 154, 172, 177, 421], "By": [3, 14, 15, 25, 29, 33, 35, 70, 71, 140, 148, 156, 163, 171, 175, 180, 181, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 227, 228, 229, 230, 231, 232, 233, 234, 243, 244, 245, 246, 248, 249, 250, 251, 265, 278, 284, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 361, 370, 372, 374, 375, 376, 383, 388, 389, 390, 393, 419], "default": [3, 8, 9, 14, 15, 23, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 40, 41, 42, 49, 55, 56, 60, 62, 66, 73, 79, 83, 89, 92, 94, 96, 102, 103, 104, 110, 114, 120, 121, 123, 126, 127, 132, 133, 134, 136, 139, 140, 141, 142, 143, 145, 148, 155, 156, 160, 162, 164, 173, 174, 175, 180, 181, 182, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 260, 261, 262, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 289, 290, 293, 295, 296, 297, 298, 299, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 398, 399, 400, 401, 402, 403, 406, 419], "2nd": [3, 25, 29, 30, 32, 33, 34, 35, 36, 37, 212], "fetch": [3, 9, 14, 19, 24, 29, 30, 32, 34, 35, 36, 37, 41, 58, 71, 85, 86, 87, 88, 91, 94, 103, 114, 127, 128, 130, 132, 136, 148, 151, 154, 172, 188, 195, 209, 210, 213, 216, 217, 218, 221, 223, 224, 225, 226, 227, 230, 232, 421], "haxby_dataset": [3, 15, 16, 18, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 94, 98, 102, 113, 155, 173, 175], "func": [3, 6, 11, 15, 16, 18, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 64, 65, 66, 67, 70, 85, 89, 91, 92, 94, 95, 98, 99, 100, 101, 102, 104, 108, 113, 141, 148, 153, 163, 164, 173, 175, 189, 209, 212, 222, 230, 303, 306, 307], "one": [3, 4, 6, 9, 14, 15, 16, 20, 24, 29, 30, 31, 33, 35, 36, 40, 44, 47, 48, 49, 55, 56, 57, 58, 64, 66, 69, 70, 71, 72, 74, 77, 78, 80, 81, 82, 86, 91, 92, 94, 100, 101, 103, 105, 108, 110, 113, 114, 120, 125, 127, 130, 139, 141, 142, 143, 148, 149, 150, 153, 154, 155, 156, 160, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 175, 180, 182, 188, 199, 200, 208, 214, 218, 221, 232, 243, 244, 245, 246, 248, 250, 251, 253, 265, 267, 268, 272, 274, 278, 279, 280, 283, 284, 285, 287, 288, 290, 294, 298, 303, 305, 310, 312, 313, 315, 325, 326, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 363, 364, 368, 371, 372, 373, 374, 378, 379, 381, 383, 384, 388, 392, 393, 399, 402, 406, 420, 421], "each": [3, 6, 14, 15, 20, 21, 22, 24, 29, 34, 36, 37, 39, 40, 47, 48, 49, 50, 51, 55, 56, 58, 62, 64, 70, 71, 78, 80, 86, 88, 94, 98, 99, 100, 101, 102, 105, 108, 114, 128, 133, 134, 136, 139, 141, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 165, 168, 170, 171, 173, 174, 175, 180, 181, 182, 184, 191, 202, 208, 209, 220, 223, 225, 233, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 257, 258, 265, 267, 268, 272, 278, 280, 283, 289, 295, 300, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 321, 323, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 361, 363, 366, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 387, 388, 389, 390, 391, 392, 393, 394, 396, 400, 402, 403, 405, 406, 419], "fmri_filenam": [3, 36, 37, 56, 94, 98, 113], "basic": [3, 7, 8, 11, 15, 16, 18, 25, 27, 29, 30, 32, 34, 35, 36, 41, 42, 48, 49, 52, 53, 56, 58, 69, 71, 75, 77, 85, 89, 91, 92, 94, 95, 98, 100, 102, 104, 105, 106, 162, 164, 165, 168, 170, 171, 175, 196, 197, 278, 300, 306, 307, 364, 369, 375, 381], "inform": [3, 6, 11, 16, 18, 21, 23, 25, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 48, 49, 51, 52, 53, 58, 61, 62, 66, 68, 72, 75, 77, 78, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108, 111, 113, 114, 118, 130, 134, 144, 148, 149, 150, 153, 154, 155, 157, 159, 162, 163, 164, 167, 168, 170, 171, 173, 175, 180, 190, 191, 192, 193, 198, 200, 201, 203, 204, 212, 213, 220, 221, 222, 223, 225, 227, 235, 236, 238, 239, 243, 244, 245, 246, 247, 258, 265, 278, 280, 292, 298, 304, 305, 400, 402, 409, 420, 421], "haxby2001": [3, 16, 18, 25, 29, 30, 32, 34, 35, 36, 94, 102, 113, 173, 212], "subj2": [3, 16, 18, 25, 29, 30, 32, 34, 35, 36, 94, 102, 113], "bold": [3, 6, 16, 18, 25, 29, 30, 32, 34, 35, 36, 48, 65, 66, 76, 79, 94, 100, 101, 102, 108, 111, 113, 114, 136, 140, 148, 154, 155, 164, 166, 168, 173, 195, 212, 222, 268, 303, 306, 307, 403, 421], "One": [3, 6, 14, 34, 35, 48, 49, 56, 64, 71, 79, 141, 148, 149, 150, 155, 156, 160, 162, 164, 165, 167, 171, 173, 175, 265, 298, 306, 307, 311, 312, 314, 393], "wai": [3, 6, 33, 61, 62, 64, 66, 75, 76, 84, 98, 108, 111, 113, 114, 140, 141, 143, 148, 149, 151, 154, 155, 156, 158, 161, 162, 163, 164, 165, 168, 173, 175, 225, 245, 246, 255, 257, 258, 303, 362, 387, 419, 420], "plot_epi": [3, 25, 49, 89, 94, 95, 140, 143, 148, 376, 419], "becaus": [3, 6, 11, 15, 18, 30, 31, 32, 36, 39, 42, 43, 44, 54, 66, 70, 71, 79, 84, 101, 102, 120, 136, 148, 150, 155, 160, 162, 163, 165, 171, 223, 248, 249, 406], "thei": [3, 6, 24, 39, 42, 43, 44, 48, 49, 65, 66, 69, 71, 92, 94, 98, 108, 113, 114, 143, 145, 148, 154, 157, 158, 160, 162, 163, 165, 168, 170, 171, 173, 175, 204, 212, 223, 228, 265, 268, 278, 280, 284, 298, 310, 311, 313, 314, 316, 364, 391, 419], "consist": [3, 6, 34, 40, 44, 66, 69, 108, 113, 126, 132, 133, 134, 143, 148, 155, 156, 159, 160, 162, 163, 165, 168, 182, 192, 220, 249, 310, 313, 387, 389, 392], "epi": [3, 6, 11, 15, 25, 30, 31, 92, 94, 95, 104, 168, 170, 174, 175, 243, 244, 245, 246, 250, 251, 312, 315, 320, 366, 376, 388, 419], "cannot": [3, 9, 10, 11, 36, 48, 49, 51, 56, 79, 86, 92, 94, 102, 114, 133, 145, 148, 149, 155, 158, 163, 175, 182, 383, 384, 386], "directli": [3, 6, 32, 33, 47, 48, 51, 64, 86, 89, 108, 125, 129, 131, 133, 148, 152, 155, 158, 165, 173, 175, 223, 268, 326, 374], "just": [3, 4, 6, 14, 21, 40, 42, 44, 49, 50, 51, 56, 58, 65, 66, 71, 75, 76, 77, 79, 81, 87, 91, 98, 100, 101, 113, 125, 148, 153, 155, 162, 165, 170, 171, 175, 265, 278, 283, 300, 303, 306, 374, 375, 376, 383, 400, 402, 406, 419], "mean_img": [3, 6, 15, 16, 18, 25, 30, 31, 33, 36, 49, 64, 67, 70, 71, 85, 89, 92, 94, 95, 102, 104, 174, 294], "view_img": [3, 29, 133, 134, 142, 145, 148, 155, 419], "none": [3, 14, 15, 32, 33, 36, 40, 43, 44, 49, 53, 54, 56, 58, 62, 66, 68, 77, 79, 89, 91, 92, 94, 95, 100, 103, 107, 114, 123, 133, 136, 140, 145, 148, 175, 180, 181, 182, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 267, 268, 272, 274, 278, 279, 280, 281, 282, 283, 284, 289, 293, 295, 296, 297, 298, 300, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 406, 419], "usr": [3, 4, 9, 10, 11, 15, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 66, 71, 77, 78, 79, 84, 86, 87, 88, 91, 92, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 196, 197], "share": [3, 4, 9, 10, 11, 15, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 66, 71, 77, 78, 79, 84, 86, 87, 88, 91, 92, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 111, 114, 139, 148, 149, 154, 173, 184, 193, 196, 197, 218, 223, 225], "miniconda3": [3, 4, 9, 10, 11, 15, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 66, 71, 77, 78, 79, 84, 86, 87, 88, 91, 92, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108], "env": [3, 4, 9, 10, 11, 15, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 66, 71, 77, 78, 79, 84, 86, 87, 88, 91, 92, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108], "testenv": [3, 4, 9, 10, 11, 15, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 66, 71, 77, 78, 79, 84, 86, 87, 88, 91, 92, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108], "lib": [3, 4, 9, 10, 11, 15, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 66, 71, 77, 78, 79, 84, 86, 87, 88, 91, 92, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108], "python3": [3, 4, 9, 10, 11, 15, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 66, 71, 77, 78, 79, 84, 86, 87, 88, 91, 92, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 134, 136, 148, 163, 420], "9": [3, 4, 5, 6, 7, 9, 10, 11, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 68, 70, 71, 72, 73, 77, 78, 79, 80, 82, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 113, 114, 115, 118, 130, 139, 141, 168, 200, 209, 210, 223, 225, 227, 229, 252, 256, 265, 274, 280, 296, 302, 305, 306, 307, 310, 312, 313, 314, 315, 316, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 362, 377, 379, 380, 396, 399, 419, 420], "site": [3, 4, 9, 10, 11, 15, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 66, 71, 77, 78, 79, 84, 86, 87, 88, 91, 92, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 188, 189], "numpi": [3, 5, 6, 9, 10, 11, 12, 14, 16, 20, 21, 22, 23, 24, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 77, 79, 80, 84, 86, 87, 89, 94, 98, 100, 102, 103, 104, 105, 106, 108, 118, 120, 124, 128, 130, 133, 136, 139, 141, 143, 148, 152, 153, 155, 162, 171, 173, 174, 180, 181, 182, 183, 184, 185, 186, 187, 194, 195, 200, 202, 206, 207, 208, 209, 243, 244, 245, 246, 248, 249, 250, 251, 255, 257, 258, 261, 265, 267, 272, 274, 278, 283, 284, 285, 288, 289, 290, 294, 295, 296, 298, 300, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 323, 325, 326, 330, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 358, 359, 361, 363, 364, 366, 368, 370, 372, 373, 376, 377, 378, 379, 380, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406], "core": [3, 16, 20, 21, 29, 42, 43, 48, 50, 54, 58, 162, 163, 171, 182, 420], "fromnumer": [3, 16, 29], "784": [3, 16, 29, 121, 148], "userwarn": [3, 9, 10, 11, 15, 16, 18, 20, 21, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 61, 62, 64, 71, 77, 78, 79, 84, 86, 87, 88, 91, 92, 94, 95, 98, 100, 101, 103, 108], "warn": [3, 9, 11, 16, 20, 21, 23, 29, 40, 41, 48, 49, 50, 54, 66, 71, 103, 120, 133, 134, 136, 141, 143, 145, 148, 155, 272, 285, 309, 310, 311, 312, 313, 314, 315, 316, 381, 390], "partit": [3, 16, 29, 40], "ignor": [3, 16, 21, 29, 48, 50, 71, 103, 134, 139, 148, 223, 225, 229, 243, 244, 245, 246, 265, 272, 278, 280, 303, 306, 313, 371, 387, 389, 406], "maskedarrai": [3, 16, 29], "kth": [3, 16], "axi": [3, 11, 12, 16, 22, 23, 25, 30, 34, 38, 40, 41, 44, 47, 50, 58, 84, 85, 94, 103, 104, 107, 143, 145, 148, 153, 174, 192, 243, 244, 245, 246, 248, 249, 273, 298, 300, 327, 329, 330, 357, 364], "kind": [3, 16, 47, 50, 54, 56, 58, 79, 113, 129, 148, 149, 153, 156, 162, 168, 180, 406, 419], "These": [3, 4, 6, 15, 55, 58, 60, 72, 74, 77, 79, 81, 89, 94, 107, 110, 113, 136, 139, 140, 143, 148, 155, 158, 159, 161, 162, 163, 167, 168, 175, 195, 206, 208, 241, 414, 419, 420], "realli": [3, 70, 134, 148, 155, 307], "love": 3, "learn": [3, 21, 34, 36, 44, 46, 52, 53, 56, 57, 58, 59, 94, 97, 102, 104, 109, 110, 111, 112, 114, 118, 120, 121, 126, 128, 129, 130, 131, 133, 136, 141, 143, 148, 149, 150, 151, 152, 155, 156, 157, 159, 160, 162, 163, 168, 169, 171, 176, 180, 181, 184, 198, 209, 212, 221, 243, 244, 245, 246, 247, 250, 251, 288, 290, 291, 295, 309, 310, 311, 312, 313, 314, 315, 316, 339, 346, 359, 360, 361, 363, 366, 373, 374, 375, 376, 381, 388, 390, 420, 421], "matric": [3, 8, 27, 41, 47, 50, 51, 56, 60, 64, 67, 71, 73, 80, 99, 110, 121, 126, 129, 130, 140, 141, 143, 148, 149, 150, 151, 162, 164, 172, 173, 174, 176, 180, 181, 182, 184, 187, 220, 255, 257, 258, 265, 272, 298, 365, 373, 377, 381, 417, 421], "actual": [3, 6, 42, 66, 68, 71, 77, 86, 105, 162, 163, 165, 168, 173, 182, 227, 265, 278, 281, 400], "fortun": [3, 68], "later": [3, 6, 9, 22, 23, 40, 62, 69, 71, 91, 100, 101, 103, 165, 173, 194, 196, 197, 287, 358, 361, 366, 368, 369, 371, 375, 376, 377, 379, 380, 398, 419], "automat": [3, 15, 16, 19, 22, 23, 33, 34, 40, 54, 89, 92, 94, 111, 112, 118, 126, 128, 140, 141, 142, 148, 153, 160, 173, 174, 175, 194, 202, 243, 244, 245, 246, 248, 249, 250, 251, 265, 278, 280, 298, 305, 311, 314, 326, 337, 357, 361, 366, 369, 374, 375, 376, 383, 388, 390, 392, 400, 419, 421], "transform": [3, 23, 24, 40, 41, 48, 49, 50, 51, 53, 54, 66, 69, 71, 84, 91, 92, 94, 98, 99, 100, 103, 108, 111, 113, 129, 130, 134, 136, 138, 139, 140, 141, 143, 145, 148, 152, 153, 158, 165, 168, 172, 173, 180, 203, 221, 243, 244, 245, 246, 250, 251, 265, 278, 281, 285, 296, 298, 306, 309, 310, 311, 312, 313, 314, 315, 316, 387, 388, 389, 390, 402, 406, 421], "all": [3, 4, 6, 8, 15, 19, 23, 27, 30, 32, 35, 36, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 66, 67, 69, 70, 71, 72, 76, 77, 79, 80, 87, 89, 91, 92, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 113, 114, 120, 121, 126, 133, 136, 139, 141, 143, 144, 146, 148, 149, 150, 152, 153, 154, 156, 158, 160, 162, 163, 165, 167, 170, 171, 173, 174, 175, 181, 182, 184, 188, 189, 191, 192, 193, 209, 217, 218, 221, 223, 226, 227, 228, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 257, 258, 260, 265, 268, 274, 278, 279, 280, 283, 284, 289, 294, 295, 298, 299, 300, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 361, 363, 364, 366, 368, 369, 371, 372, 374, 375, 376, 378, 381, 388, 390, 393, 400, 402, 406, 417, 419, 420], "do": [3, 6, 9, 22, 24, 25, 30, 31, 34, 40, 41, 42, 49, 50, 51, 57, 61, 64, 65, 66, 67, 68, 70, 75, 77, 79, 80, 94, 98, 100, 101, 106, 108, 113, 130, 134, 139, 143, 148, 149, 153, 154, 155, 156, 158, 160, 162, 165, 170, 171, 173, 174, 175, 180, 190, 214, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 274, 278, 280, 283, 295, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 388, 402, 406, 419], "defin": [3, 6, 21, 23, 29, 30, 32, 33, 36, 37, 42, 47, 49, 54, 58, 61, 64, 66, 67, 69, 71, 72, 76, 77, 80, 81, 91, 98, 101, 111, 120, 140, 141, 142, 143, 148, 150, 152, 153, 154, 155, 160, 163, 164, 165, 167, 168, 174, 175, 190, 194, 208, 220, 222, 243, 244, 245, 246, 248, 249, 252, 256, 260, 265, 267, 272, 298, 306, 362, 371, 377, 379, 380, 390, 391, 392, 393, 394, 396, 397, 413], "vt": [3, 18, 94], "mask_filenam": [3, 30, 32, 35, 39, 98, 102, 113, 155], "mask_vt": [3, 15, 16, 18, 30, 32, 94, 98, 113, 155, 173, 212], "anatom": [3, 6, 11, 15, 17, 18, 22, 23, 25, 30, 32, 36, 94, 102, 111, 114, 129, 148, 153, 160, 168, 175, 190, 192, 194, 202, 209, 212, 213, 216, 218, 223, 306, 361, 374, 376, 383, 419], "background": [3, 6, 8, 14, 15, 16, 22, 23, 27, 30, 31, 40, 44, 49, 56, 69, 91, 92, 94, 104, 110, 113, 124, 126, 128, 129, 130, 131, 133, 136, 139, 145, 148, 163, 168, 174, 175, 190, 196, 197, 199, 200, 203, 204, 216, 222, 243, 244, 245, 246, 250, 251, 265, 278, 310, 312, 313, 315, 318, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 361, 363, 366, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 386, 388, 391, 393, 394, 400, 419, 421], "plot_roi": [3, 10, 17, 19, 25, 49, 66, 86, 89, 92, 94, 132, 139, 140, 145, 148, 150, 174, 175, 374, 419], "bg_img": [3, 6, 16, 17, 29, 30, 33, 36, 40, 42, 64, 67, 70, 71, 75, 88, 93, 113, 130, 136, 142, 148, 155, 175, 265, 278, 369, 374, 375, 376, 383, 400], "anat": [3, 6, 15, 16, 17, 18, 25, 29, 30, 32, 42, 43, 94, 113, 155, 173, 175, 204, 212, 216, 218, 230, 231, 303], "cmap": [3, 9, 11, 12, 19, 20, 22, 23, 35, 36, 38, 40, 41, 42, 44, 50, 53, 76, 77, 79, 80, 81, 86, 102, 105, 106, 134, 136, 145, 148, 153, 216, 217, 218, 361, 362, 366, 367, 368, 371, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 386, 419], "pair": [3, 74, 82, 86, 98, 110, 114, 155, 156, 167, 218, 221, 223, 243, 244, 245, 246, 248, 249, 278, 304, 305, 306, 307, 338, 365, 368, 373, 381, 389, 406], "0x7f1355123eb0": 3, "convert": [3, 6, 10, 11, 20, 21, 36, 42, 48, 49, 50, 54, 66, 79, 86, 94, 98, 107, 108, 113, 136, 141, 143, 145, 148, 153, 155, 160, 168, 174, 263, 284, 285, 293, 310, 311, 312, 313, 314, 315, 316], "appli": [3, 29, 31, 32, 42, 44, 50, 56, 61, 64, 66, 69, 79, 80, 89, 92, 94, 98, 100, 101, 103, 104, 112, 114, 120, 124, 126, 130, 133, 136, 141, 142, 143, 148, 149, 150, 151, 154, 156, 157, 158, 160, 164, 167, 168, 172, 180, 188, 223, 242, 243, 244, 245, 246, 250, 251, 256, 265, 278, 280, 281, 282, 283, 294, 300, 302, 303, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 325, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 361, 371, 374, 375, 376, 377, 379, 380, 383, 387, 388, 389, 390, 392, 393, 394, 399, 401, 402, 406, 411, 421], "instanc": [3, 4, 6, 15, 31, 49, 51, 66, 68, 86, 130, 136, 143, 148, 149, 150, 152, 154, 155, 163, 164, 165, 167, 168, 170, 173, 174, 180, 181, 182, 187, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 257, 258, 261, 262, 265, 272, 274, 278, 280, 284, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 373, 377, 378, 379, 380, 387, 388, 389, 390, 420], "csv": [3, 6, 29, 40, 41, 47, 55, 113, 123, 148, 150, 155, 188, 189, 219, 227, 250, 251, 265, 283, 309, 310, 311, 312, 313, 314, 315, 316, 388, 390, 402], "file": [3, 6, 7, 9, 14, 22, 23, 27, 30, 32, 33, 34, 35, 36, 40, 41, 45, 47, 48, 49, 51, 53, 55, 59, 60, 62, 64, 66, 73, 82, 86, 91, 92, 94, 96, 98, 100, 101, 108, 109, 110, 111, 113, 114, 121, 123, 128, 132, 133, 134, 135, 136, 139, 143, 144, 145, 148, 149, 150, 152, 153, 155, 163, 164, 171, 172, 175, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 243, 244, 250, 251, 265, 268, 278, 283, 293, 294, 296, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 388, 390, 398, 400, 402, 404, 405, 406, 420, 421], "separ": [3, 34, 48, 50, 64, 66, 67, 83, 88, 94, 96, 100, 110, 126, 143, 145, 148, 153, 154, 156, 160, 163, 165, 168, 171, 173, 174, 187, 204, 295, 306, 327, 329, 330, 357, 373, 375, 381, 390, 391, 392], "space": [3, 6, 15, 22, 23, 28, 40, 45, 48, 51, 55, 60, 62, 66, 69, 73, 84, 99, 101, 108, 110, 113, 114, 126, 128, 130, 133, 136, 141, 148, 150, 163, 164, 165, 167, 168, 175, 191, 193, 198, 200, 202, 204, 206, 207, 208, 223, 225, 227, 231, 233, 249, 250, 251, 265, 268, 272, 283, 284, 285, 295, 298, 309, 312, 315, 316, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 358, 359, 361, 362, 363, 366, 368, 369, 372, 374, 375, 376, 381, 382, 383, 385, 387, 389, 402, 406], "panda": [3, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 94, 98, 100, 102, 113, 114, 120, 130, 133, 139, 141, 143, 144, 148, 155, 180, 188, 194, 195, 206, 207, 208, 216, 217, 218, 227, 250, 251, 265, 266, 268, 272, 278, 279, 280, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 364, 365, 367, 387, 388, 389, 390, 399, 402], "arrai": [3, 5, 6, 9, 10, 11, 20, 21, 22, 23, 26, 33, 34, 36, 40, 41, 42, 43, 44, 48, 49, 50, 51, 53, 54, 55, 56, 58, 61, 68, 70, 72, 79, 84, 86, 87, 89, 94, 98, 102, 105, 106, 108, 112, 128, 130, 136, 139, 142, 143, 145, 148, 149, 152, 153, 155, 158, 162, 172, 173, 175, 180, 181, 182, 184, 186, 187, 194, 195, 200, 206, 207, 208, 220, 221, 233, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 283, 288, 290, 298, 299, 302, 305, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 323, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 361, 363, 364, 366, 368, 372, 376, 377, 378, 379, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 400, 402, 403, 404, 405, 406, 412, 421], "pd": [3, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 63, 64, 65, 66, 67, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 94, 98, 102, 113, 173, 213], "read_csv": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 94, 98, 102, 113, 173], "session_target": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 94, 98, 102, 113, 173, 212], "delimit": [3, 40, 41, 98, 100, 113, 173], "chunk": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 98, 102], "2": [3, 6, 7, 9, 11, 12, 14, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 111, 114, 116, 118, 119, 120, 128, 130, 131, 133, 134, 141, 142, 143, 153, 156, 160, 161, 162, 163, 165, 170, 171, 174, 175, 180, 181, 182, 186, 187, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 209, 210, 211, 212, 213, 214, 218, 220, 223, 225, 227, 229, 231, 232, 233, 235, 236, 238, 239, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 265, 267, 272, 274, 278, 280, 281, 283, 289, 290, 293, 294, 295, 296, 299, 300, 302, 305, 306, 307, 310, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 325, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 363, 370, 372, 373, 374, 375, 376, 377, 381, 383, 389, 390, 392, 396, 399, 402, 403, 406, 419, 420], "4": [3, 6, 7, 12, 13, 14, 15, 18, 20, 21, 24, 27, 29, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 62, 64, 65, 66, 67, 68, 69, 72, 73, 75, 76, 77, 79, 81, 84, 86, 91, 92, 95, 96, 98, 99, 100, 101, 102, 103, 107, 111, 115, 121, 126, 129, 133, 134, 135, 136, 141, 153, 155, 160, 161, 162, 170, 182, 188, 203, 207, 210, 220, 221, 227, 228, 229, 232, 243, 244, 245, 246, 248, 249, 250, 251, 278, 283, 298, 299, 306, 307, 318, 320, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 366, 368, 369, 372, 373, 374, 375, 376, 388, 402, 406, 419], "1447": [3, 98], "11": [3, 6, 20, 27, 30, 33, 35, 36, 42, 43, 44, 48, 49, 53, 56, 62, 65, 66, 72, 91, 96, 98, 102, 103, 111, 115, 121, 130, 133, 134, 135, 143, 148, 181, 193, 194, 220, 221, 222, 229], "1448": [3, 98], "1449": [3, 98], "1450": [3, 42, 98, 102], "1451": [3, 98], "1452": [3, 94, 98], "row": [3, 6, 40, 56, 66, 72, 98, 100, 114, 140, 148, 168, 223, 225, 255, 256, 257, 258, 265, 278, 279, 280, 337, 339, 342, 356, 361, 366, 369, 371, 373, 374, 375, 376, 387, 399, 406], "x": [3, 6, 9, 13, 14, 15, 24, 31, 33, 35, 37, 40, 41, 44, 52, 54, 56, 58, 62, 64, 66, 67, 70, 84, 91, 92, 94, 101, 103, 111, 123, 128, 130, 136, 141, 143, 145, 148, 155, 160, 168, 171, 174, 175, 180, 192, 198, 220, 221, 243, 244, 245, 246, 248, 249, 250, 251, 252, 255, 256, 257, 258, 265, 274, 278, 285, 306, 309, 310, 312, 313, 315, 316, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 360, 361, 363, 366, 368, 369, 372, 374, 375, 376, 377, 378, 379, 380, 383, 386, 387, 389, 390, 391, 395, 399, 400, 401, 417, 419], "column": [3, 6, 56, 62, 65, 66, 69, 70, 71, 72, 75, 76, 77, 79, 80, 81, 98, 100, 101, 102, 105, 106, 108, 114, 140, 148, 165, 181, 182, 184, 243, 244, 245, 246, 252, 255, 256, 257, 258, 263, 265, 272, 278, 279, 280, 283, 298, 306, 307, 308, 326, 337, 339, 342, 356, 361, 364, 365, 366, 367, 369, 373, 374, 375, 376, 397, 399, 401, 402, 403], "denot": [3, 6, 15, 133, 148, 165, 173, 174, 175, 306, 307, 337, 359, 375, 390, 391, 392, 393], "experiment": [3, 63, 64, 65, 66, 69, 71, 80, 94, 120, 139, 140, 143, 148, 155, 162, 165, 174, 195, 265, 272, 377, 379, 380], "condit": [3, 6, 29, 30, 31, 33, 35, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 80, 94, 98, 101, 102, 108, 113, 140, 143, 145, 148, 149, 155, 162, 168, 171, 174, 195, 220, 265, 267, 272, 278, 364], "type": [3, 6, 10, 15, 18, 21, 29, 34, 42, 49, 63, 65, 66, 69, 72, 88, 94, 100, 102, 114, 120, 122, 125, 127, 130, 133, 136, 142, 143, 144, 145, 148, 157, 160, 163, 164, 165, 168, 173, 188, 192, 196, 197, 203, 220, 247, 253, 261, 265, 278, 283, 287, 288, 290, 292, 293, 295, 296, 300, 301, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 374, 375, 388, 390, 391, 392, 399, 400, 402], "go": [3, 9, 34, 55, 56, 58, 62, 64, 66, 68, 86, 97, 104, 108, 109, 110, 112, 114, 129, 148, 149, 155, 159, 163, 167, 170, 171, 175, 225, 288, 293, 294, 296, 363, 368, 372, 376, 381, 383, 421], "try": [3, 4, 9, 36, 39, 40, 49, 52, 53, 56, 57, 58, 62, 63, 65, 66, 75, 77, 78, 89, 98, 103, 114, 145, 148, 149, 150, 155, 156, 161, 162, 163, 171, 175, 420], "length": [3, 15, 55, 68, 77, 153, 163, 195, 198, 243, 244, 245, 246, 248, 249, 252, 256, 257, 258, 269, 270, 271, 275, 276, 277, 284, 309, 312, 315, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 361, 366, 369, 372, 373, 374, 375, 376, 388, 400, 406], "dtype": [3, 10, 11, 20, 21, 23, 33, 36, 40, 41, 44, 49, 53, 54, 56, 58, 68, 77, 79, 86, 89, 91, 92, 94, 101, 103, 127, 128, 129, 133, 134, 148, 173, 266, 269, 270, 271, 275, 276, 277, 282, 284, 292, 293, 296, 298, 310, 311, 312, 313, 314, 315, 316, 317, 387, 389, 396], "As": [3, 15, 34, 36, 44, 49, 52, 54, 66, 79, 81, 92, 94, 95, 98, 101, 103, 113, 120, 136, 148, 149, 150, 152, 154, 155, 156, 160, 162, 163, 165, 167, 173, 268, 306, 307], "target": [3, 29, 33, 40, 84, 89, 94, 98, 100, 133, 148, 155, 156, 160, 162, 163, 168, 171, 172, 212, 222, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 278, 280, 298, 299, 309, 312, 315, 319, 322, 326, 387, 389, 390, 421], "experi": [3, 6, 29, 33, 34, 41, 66, 70, 94, 111, 112, 159, 164, 165, 168, 421], "consequ": [3, 15, 86, 175], "quit": [3, 6, 66, 153, 162, 218], "big": [3, 41, 49, 133, 148, 152, 155, 163, 173, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406], "Not": [3, 64, 66, 67, 196, 197, 330, 387, 389], "ha": [3, 6, 10, 11, 29, 30, 32, 33, 34, 35, 36, 42, 47, 49, 51, 52, 54, 58, 66, 68, 70, 72, 75, 79, 81, 86, 89, 91, 94, 98, 100, 104, 114, 120, 121, 123, 127, 130, 133, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 154, 156, 157, 160, 162, 163, 165, 167, 171, 175, 181, 182, 190, 191, 192, 194, 199, 203, 223, 265, 272, 278, 280, 289, 292, 293, 295, 298, 299, 303, 306, 307, 312, 326, 328, 381, 394, 401, 403, 406, 419], "interest": [3, 6, 14, 15, 16, 35, 42, 49, 51, 55, 68, 70, 71, 83, 96, 98, 99, 100, 101, 104, 107, 110, 114, 121, 139, 148, 149, 155, 157, 158, 160, 162, 163, 164, 165, 168, 170, 174, 175, 189, 195, 198, 200, 209, 212, 213, 216, 217, 218, 221, 222, 227, 230, 231, 232, 233, 255, 257, 258, 288, 293, 295, 296, 300, 303, 309, 313, 366, 375, 376, 378, 381, 390, 421], "u": [3, 4, 14, 15, 24, 40, 55, 58, 63, 66, 77, 79, 89, 94, 111, 155, 156, 158, 163, 206, 208, 249, 257, 258, 420], "so": [3, 6, 10, 11, 14, 22, 33, 36, 40, 43, 48, 49, 52, 64, 66, 67, 69, 70, 72, 76, 79, 80, 81, 86, 89, 92, 94, 100, 101, 103, 108, 114, 141, 148, 160, 161, 162, 163, 165, 171, 173, 175, 180, 181, 182, 190, 196, 197, 204, 223, 228, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 278, 280, 303, 304, 309, 310, 311, 312, 313, 314, 315, 316, 326, 377, 379, 380, 387, 388, 389, 390, 406], "keep": [3, 31, 33, 34, 36, 50, 51, 54, 58, 66, 69, 70, 84, 86, 94, 98, 102, 103, 114, 118, 133, 140, 148, 153, 155, 156, 157, 160, 161, 163, 223, 227, 242, 248, 249, 250, 283, 289, 304, 318, 319, 320, 321, 322, 323, 324, 390, 391, 402, 403], "signal": [3, 6, 28, 43, 44, 45, 46, 48, 49, 50, 55, 57, 59, 64, 66, 67, 68, 70, 71, 78, 83, 86, 94, 96, 100, 107, 110, 111, 119, 120, 132, 134, 136, 140, 141, 145, 148, 149, 151, 152, 153, 154, 155, 157, 160, 162, 164, 165, 168, 172, 174, 180, 181, 182, 184, 188, 195, 196, 198, 206, 207, 209, 212, 220, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 278, 280, 283, 289, 290, 295, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 326, 358, 363, 372, 373, 381, 382, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 400, 421], "creat": [3, 6, 10, 11, 20, 23, 33, 36, 40, 41, 42, 47, 48, 49, 55, 62, 64, 66, 67, 69, 71, 72, 75, 79, 84, 86, 94, 98, 100, 107, 108, 112, 113, 120, 125, 133, 145, 148, 149, 150, 154, 155, 156, 158, 163, 164, 165, 168, 169, 171, 172, 173, 175, 223, 225, 242, 250, 251, 265, 268, 278, 279, 290, 296, 328, 337, 338, 339, 342, 361, 362, 363, 364, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 396, 397, 398, 399, 419, 420, 421], "sampl": [3, 8, 14, 23, 27, 31, 34, 36, 40, 49, 58, 63, 66, 69, 71, 74, 75, 77, 78, 81, 82, 84, 94, 101, 105, 108, 110, 111, 113, 139, 141, 142, 148, 150, 155, 160, 162, 164, 165, 167, 175, 180, 181, 182, 184, 209, 218, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 266, 267, 269, 270, 271, 272, 275, 276, 277, 278, 280, 283, 287, 288, 294, 310, 311, 325, 326, 338, 353, 362, 365, 368, 371, 380, 381, 387, 388, 389, 390, 401, 402, 403, 406, 417], "belong": [3, 30, 32, 143, 148, 155, 168, 175], "classif": [3, 30, 31, 32, 33, 35, 43, 46, 49, 59, 98, 100, 110, 111, 113, 139, 148, 149, 154, 155, 159, 160, 161, 168, 169, 170, 180, 188, 198, 209, 243, 244, 245, 246, 248, 307, 309, 314, 363, 373, 381, 420, 421], "becom": [3, 66, 114, 156, 157, 158, 165], "smaller": [3, 6, 32, 81, 123, 133, 141, 145, 148, 152, 160, 161, 162, 165, 168, 173, 196, 197, 249, 281, 294, 302, 387], "e": [3, 6, 15, 24, 29, 39, 40, 43, 44, 47, 48, 56, 66, 76, 86, 88, 92, 94, 100, 102, 103, 105, 111, 113, 114, 121, 139, 141, 142, 145, 148, 150, 153, 155, 158, 160, 161, 162, 163, 164, 165, 167, 168, 170, 174, 175, 181, 182, 184, 193, 194, 201, 206, 207, 208, 210, 220, 223, 225, 228, 243, 244, 245, 246, 248, 255, 257, 258, 265, 272, 278, 280, 281, 282, 283, 284, 285, 287, 302, 306, 307, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 363, 374, 377, 378, 379, 380, 382, 383, 384, 385, 386, 393, 394, 396, 402, 406, 419], "shorter": [3, 66, 162, 306], "condition_mask": [3, 29, 30, 31, 34, 36, 37, 98, 102, 113], "isin": [3, 29, 31, 34, 36, 37, 98, 102, 113, 114, 223], "larg": [3, 30, 31, 36, 39, 41, 43, 48, 49, 54, 56, 65, 70, 71, 72, 92, 111, 114, 134, 148, 152, 155, 156, 157, 158, 160, 162, 163, 165, 168, 169, 170, 173, 175, 218, 223, 225, 265, 267, 272, 311, 314, 318, 319, 320, 322, 323, 357, 388], "split": [3, 30, 31, 32, 34, 36, 39, 40, 41, 42, 43, 44, 49, 51, 86, 94, 99, 100, 139, 148, 153, 155, 157, 162, 163, 168, 174, 196, 197, 243, 244, 245, 246], "fmri_niimg": [3, 30, 34, 98, 155], "valu": [3, 4, 6, 9, 14, 15, 17, 24, 30, 31, 33, 40, 41, 42, 44, 47, 49, 52, 54, 55, 58, 61, 66, 69, 70, 72, 77, 79, 88, 89, 90, 91, 92, 94, 98, 100, 101, 102, 103, 105, 106, 107, 108, 114, 118, 120, 121, 125, 128, 129, 133, 136, 140, 141, 143, 148, 149, 152, 153, 156, 157, 159, 160, 161, 163, 165, 167, 168, 170, 173, 175, 180, 181, 182, 184, 186, 188, 190, 192, 194, 196, 197, 199, 200, 203, 204, 214, 218, 223, 227, 229, 232, 235, 236, 239, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 261, 265, 266, 274, 278, 280, 281, 282, 283, 284, 287, 289, 298, 299, 300, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 358, 360, 361, 362, 363, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 383, 384, 386, 387, 388, 389, 390, 392, 398, 399, 400, 402, 403, 406, 419], "216": [3, 30, 33, 41], "classifi": [3, 28, 32, 33, 36, 41, 45, 51, 98, 99, 110, 136, 139, 140, 148, 155, 156, 157, 158, 159, 168, 169, 170, 212, 243, 245, 246, 247, 248, 288, 290, 295, 376, 381, 421], "linear": [3, 6, 29, 33, 34, 35, 37, 44, 66, 69, 98, 102, 111, 130, 148, 155, 159, 164, 165, 166, 168, 169, 174, 175, 184, 223, 243, 244, 245, 246, 248, 249, 250, 251, 255, 257, 258, 265, 278, 283, 297, 298, 299, 307, 326, 370, 402, 406, 413, 420, 421], "kernel": [3, 29, 33, 34, 35, 44, 55, 94, 98, 155, 244, 246, 249, 269, 270, 271, 275, 276, 277], "svc": [3, 29, 30, 31, 32, 33, 34, 35, 113, 136, 148, 155, 156, 158, 243, 245, 247], "standard": [3, 6, 9, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 66, 69, 70, 72, 75, 89, 91, 92, 94, 98, 99, 101, 104, 105, 106, 108, 111, 113, 133, 136, 140, 142, 143, 148, 150, 153, 155, 156, 160, 163, 164, 165, 168, 173, 174, 175, 202, 227, 243, 244, 245, 246, 248, 249, 250, 251, 257, 258, 265, 267, 268, 272, 283, 303, 306, 310, 311, 312, 313, 314, 315, 316, 388, 390, 402, 420], "true": [3, 6, 9, 13, 14, 15, 21, 22, 23, 25, 26, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 64, 67, 69, 70, 71, 74, 75, 77, 79, 80, 81, 82, 86, 89, 91, 92, 94, 98, 99, 100, 101, 102, 103, 104, 105, 108, 110, 113, 114, 128, 131, 136, 143, 148, 150, 153, 155, 158, 160, 162, 165, 167, 168, 175, 180, 181, 182, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 206, 207, 208, 209, 212, 213, 214, 216, 217, 218, 220, 221, 222, 223, 225, 227, 233, 243, 244, 245, 246, 247, 248, 249, 250, 251, 260, 265, 268, 278, 280, 281, 283, 284, 287, 289, 293, 298, 299, 302, 303, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 396, 401, 402, 403, 419], "fit": [3, 6, 28, 30, 32, 35, 36, 37, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 65, 66, 69, 71, 73, 75, 76, 77, 79, 80, 81, 87, 89, 91, 92, 94, 98, 99, 100, 103, 110, 113, 133, 141, 143, 145, 148, 149, 151, 152, 153, 155, 156, 158, 160, 162, 165, 166, 168, 169, 170, 175, 180, 181, 182, 204, 211, 212, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 262, 265, 268, 274, 278, 280, 290, 295, 309, 310, 311, 312, 313, 314, 315, 316, 322, 326, 339, 342, 364, 376, 381, 387, 388, 389, 390, 393, 398, 400, 421], "train": [3, 31, 32, 34, 39, 40, 41, 42, 43, 44, 51, 98, 99, 139, 148, 155, 156, 157, 160, 162, 168, 170, 175, 181, 243, 244, 245, 246, 248, 249, 387, 389, 395], "without": [3, 6, 14, 23, 48, 50, 66, 78, 81, 84, 94, 114, 127, 136, 145, 148, 150, 153, 159, 161, 162, 168, 173, 281, 287, 307, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 362, 369, 374, 419, 421], "resampl": [3, 9, 11, 29, 30, 32, 33, 34, 35, 36, 43, 48, 49, 52, 53, 54, 56, 66, 71, 75, 83, 91, 92, 96, 98, 110, 113, 125, 126, 129, 130, 136, 140, 142, 143, 148, 172, 223, 225, 226, 227, 237, 238, 240, 243, 244, 245, 246, 248, 249, 250, 251, 278, 284, 288, 293, 295, 297, 298, 299, 310, 311, 312, 313, 314, 315, 318, 320, 321, 322, 323, 368, 369, 375, 376, 381, 383, 388, 393, 406, 421], "454": [3, 29, 30, 32, 33, 34, 35, 36, 98], "provid": [3, 5, 6, 9, 29, 30, 32, 33, 34, 35, 36, 43, 44, 47, 48, 49, 52, 54, 56, 62, 64, 66, 67, 68, 71, 75, 76, 77, 79, 80, 84, 91, 92, 94, 98, 101, 105, 112, 113, 114, 123, 131, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 149, 151, 152, 154, 155, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 175, 180, 184, 187, 188, 190, 191, 193, 200, 204, 212, 223, 227, 243, 244, 245, 246, 248, 249, 250, 251, 252, 256, 265, 266, 267, 271, 272, 277, 278, 280, 283, 289, 298, 303, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 360, 362, 364, 365, 372, 374, 378, 388, 390, 391, 398, 402, 406, 419, 420], "sform": [3, 29, 30, 32, 33, 34, 35, 36, 98, 145, 148], "header": [3, 11, 29, 30, 32, 33, 34, 35, 36, 94, 98, 101, 118, 134, 136, 144, 148, 173, 283, 286, 296, 362, 402], "result": [3, 6, 14, 15, 23, 24, 30, 33, 34, 35, 36, 40, 42, 43, 44, 48, 49, 51, 55, 58, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 75, 77, 78, 79, 84, 86, 87, 88, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 108, 111, 112, 114, 126, 133, 136, 139, 144, 145, 148, 149, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 173, 174, 175, 188, 190, 200, 218, 223, 225, 232, 243, 244, 247, 254, 255, 257, 258, 259, 265, 274, 278, 280, 283, 293, 294, 295, 298, 305, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 377, 384, 399, 406, 419, 421], "mai": [3, 17, 29, 30, 32, 33, 34, 35, 36, 43, 49, 56, 62, 66, 72, 80, 86, 98, 100, 103, 105, 106, 111, 113, 114, 118, 134, 136, 144, 148, 149, 155, 156, 158, 165, 168, 173, 175, 180, 218, 223, 249, 253, 280, 298, 305, 307, 311, 314, 326, 377, 379, 380, 399, 406], "expect": [3, 6, 29, 30, 32, 33, 34, 35, 36, 61, 62, 66, 78, 79, 81, 95, 98, 101, 102, 105, 106, 114, 121, 136, 145, 148, 153, 160, 163, 165, 168, 171, 174, 175, 249, 265, 267, 272, 278, 280, 284, 303], "both": [3, 9, 15, 24, 39, 47, 49, 51, 58, 69, 79, 80, 89, 94, 100, 105, 108, 114, 136, 143, 148, 149, 152, 154, 160, 161, 163, 164, 168, 173, 174, 175, 180, 187, 199, 209, 265, 267, 272, 280, 281, 283, 302, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 373, 392, 402, 406, 420], "class": [3, 11, 28, 32, 42, 43, 45, 49, 51, 54, 56, 91, 94, 98, 99, 110, 119, 120, 121, 123, 129, 130, 131, 134, 136, 139, 141, 142, 143, 145, 148, 154, 155, 159, 162, 163, 164, 167, 175, 176, 178, 179, 180, 181, 182, 212, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 265, 278, 284, 296, 306, 309, 310, 311, 312, 313, 314, 315, 316, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 373, 381, 387, 388, 389, 390, 391, 392, 398, 407, 409, 411, 414, 415, 416, 421], "number": [3, 6, 29, 31, 33, 34, 39, 42, 43, 48, 49, 50, 53, 54, 55, 57, 58, 65, 66, 69, 72, 77, 79, 86, 89, 92, 94, 98, 100, 103, 104, 105, 114, 121, 133, 136, 139, 140, 141, 143, 148, 149, 152, 153, 155, 156, 157, 160, 163, 165, 168, 170, 171, 175, 180, 181, 182, 184, 188, 189, 192, 195, 196, 197, 200, 203, 209, 212, 214, 217, 218, 221, 223, 227, 233, 236, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 256, 261, 265, 274, 278, 280, 281, 283, 285, 287, 289, 295, 302, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 361, 362, 363, 364, 366, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 399, 400, 401, 402, 403, 419], "problem": [3, 6, 31, 33, 39, 43, 48, 92, 94, 111, 155, 156, 157, 160, 161, 162, 163, 165, 168, 170, 171, 184, 248, 249, 251, 252, 255, 256, 257, 258, 280, 326], "balanc": [3, 49, 143, 148, 152], "perform": [3, 30, 33, 34, 43, 44, 48, 51, 62, 66, 71, 79, 80, 89, 91, 92, 94, 95, 99, 100, 101, 102, 105, 106, 113, 114, 139, 140, 141, 143, 148, 149, 154, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 173, 174, 175, 184, 214, 227, 236, 239, 243, 244, 245, 246, 248, 249, 250, 251, 265, 267, 274, 278, 280, 297, 298, 299, 300, 301, 302, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 322, 323, 326, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 361, 363, 366, 368, 369, 372, 374, 375, 376, 383, 387, 388, 389, 390, 393, 395, 400, 401, 402, 406, 421], "done": [3, 6, 34, 35, 36, 41, 42, 43, 44, 48, 49, 51, 53, 57, 58, 64, 66, 94, 98, 102, 103, 105, 113, 114, 143, 145, 148, 149, 150, 152, 155, 156, 158, 160, 162, 165, 171, 174, 181, 182, 243, 244, 245, 246, 248, 249, 250, 251, 265, 278, 283, 284, 292, 302, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 388, 389, 390, 402], "sum": [3, 41, 42, 49, 58, 65, 68, 77, 79, 84, 101, 102, 105, 106, 107, 136, 148, 162, 248, 249, 252, 256, 257, 289, 310, 313, 393, 403], "float": [3, 40, 41, 43, 68, 75, 136, 139, 148, 181, 182, 184, 188, 214, 235, 236, 239, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 260, 264, 265, 267, 269, 270, 271, 272, 275, 276, 277, 278, 280, 281, 282, 283, 287, 289, 298, 299, 302, 306, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 360, 361, 362, 363, 366, 368, 369, 371, 372, 374, 375, 376, 377, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 395, 398, 399, 400, 401, 402, 403, 406], "len": [3, 12, 22, 30, 32, 33, 34, 47, 48, 51, 62, 63, 64, 65, 66, 68, 69, 76, 79, 91, 94, 98, 103, 114, 184, 243, 244, 245, 246, 248, 249, 255, 257, 258, 278, 295, 298, 318, 320, 321, 323, 388], "meaningless": [3, 155, 165, 281], "why": [3, 94, 162, 175], "proper": [3, 34, 143, 148, 162, 199, 200, 420], "error": [3, 6, 42, 43, 66, 76, 79, 81, 84, 94, 103, 120, 123, 130, 133, 136, 145, 148, 150, 155, 156, 160, 163, 165, 168, 255, 257, 272, 278, 280, 281, 283, 284, 305, 311, 314, 316, 322, 420], "rate": [3, 6, 66, 81, 123, 148, 162, 165, 168, 175, 260, 280], "test": [3, 14, 29, 31, 34, 36, 40, 42, 43, 44, 51, 53, 66, 71, 74, 77, 78, 82, 99, 101, 102, 105, 106, 110, 111, 120, 132, 140, 143, 148, 155, 157, 158, 160, 161, 162, 165, 166, 167, 168, 171, 174, 182, 188, 189, 190, 191, 192, 193, 194, 198, 201, 202, 204, 212, 213, 216, 217, 218, 221, 222, 227, 233, 243, 244, 245, 246, 247, 248, 249, 253, 262, 278, 280, 281, 288, 294, 298, 299, 302, 305, 326, 338, 339, 353, 365, 368, 376, 381, 383, 413, 420], "30": [3, 6, 32, 33, 36, 40, 41, 42, 43, 44, 48, 51, 57, 62, 63, 68, 91, 99, 102, 103, 105, 107, 111, 123, 133, 148, 161, 189, 245, 246, 255, 257, 258, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 398], "last": [3, 6, 33, 35, 40, 55, 72, 135, 148, 165, 170, 171, 186, 187, 283, 290, 304, 419, 420], "point": [3, 4, 8, 15, 22, 23, 27, 54, 55, 84, 86, 91, 94, 110, 113, 133, 136, 145, 148, 153, 155, 162, 165, 170, 171, 172, 173, 182, 243, 244, 245, 246, 265, 298, 299, 309, 312, 315, 320, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 363, 366, 369, 372, 374, 375, 376, 380, 381, 383, 393, 394, 400, 406, 421], "dure": [3, 6, 55, 56, 65, 94, 100, 101, 111, 113, 133, 140, 148, 155, 156, 162, 163, 165, 168, 175, 182, 184, 201, 278, 280, 318, 319, 320, 322, 323, 371, 387], "fmri_niimgs_train": 3, "fmri_niimgs_test": 3, "conditions_train": 3, "conditions_test": 3, "calcul": [3, 41, 47, 48, 58, 92, 97, 109, 110, 134, 148, 164, 217, 218, 243, 244, 245, 246, 250, 251, 255, 257, 258, 273, 280, 288, 306, 309, 312, 315, 319, 322, 326, 337, 354, 361, 366, 369, 374, 375, 376, 381, 383, 388, 400], "hasn": [3, 162], "t": [3, 5, 6, 9, 14, 16, 22, 24, 33, 37, 41, 55, 56, 58, 62, 66, 67, 68, 69, 71, 72, 75, 76, 77, 79, 80, 83, 90, 92, 93, 94, 96, 99, 100, 102, 103, 104, 105, 107, 108, 110, 111, 114, 139, 148, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 173, 174, 190, 191, 200, 201, 203, 204, 210, 218, 223, 224, 225, 228, 248, 249, 253, 255, 256, 257, 258, 259, 261, 262, 265, 278, 280, 302, 305, 306, 307, 320, 326, 371, 374, 376, 381, 392, 400, 403, 406, 419], "examin": [3, 111, 168, 210, 228], "well": [3, 6, 15, 44, 48, 51, 58, 66, 68, 70, 79, 89, 100, 126, 133, 140, 142, 148, 149, 150, 152, 153, 155, 156, 158, 161, 163, 165, 168, 170, 180, 181, 182, 195, 201, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 278, 284, 298, 307, 309, 310, 311, 312, 313, 314, 315, 316, 387, 388, 389, 390], "3f": [3, 6, 34, 44, 48, 55, 98], "767": 3, "set": [3, 6, 14, 15, 16, 21, 28, 29, 30, 31, 33, 36, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 62, 65, 66, 70, 79, 80, 81, 89, 94, 95, 98, 99, 100, 101, 108, 110, 111, 114, 120, 126, 130, 136, 139, 140, 142, 143, 145, 148, 149, 150, 153, 155, 157, 159, 162, 164, 165, 166, 167, 168, 169, 173, 175, 180, 181, 182, 188, 194, 195, 206, 207, 208, 212, 216, 217, 218, 223, 225, 227, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 257, 258, 264, 265, 267, 272, 278, 279, 281, 283, 290, 302, 303, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 386, 387, 388, 389, 390, 392, 395, 400, 402, 406, 419, 421], "repetit": [3, 6, 33, 62, 63, 64, 67, 71, 100, 101, 108, 132, 148, 165, 168, 209, 214, 236, 239, 243, 244, 245, 246, 248, 249, 265, 283, 310, 311, 362, 388, 390, 402], "strategi": [3, 24, 28, 45, 48, 49, 66, 88, 89, 91, 92, 99, 110, 111, 136, 140, 141, 143, 148, 153, 156, 159, 160, 162, 165, 172, 182, 212, 243, 244, 245, 246, 247, 250, 251, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 322, 362, 373, 374, 381, 388, 393, 402, 406, 421], "scikit": [3, 34, 49, 94, 97, 102, 104, 109, 110, 112, 118, 120, 121, 126, 128, 129, 130, 133, 136, 141, 143, 148, 149, 152, 155, 156, 157, 159, 160, 162, 163, 169, 170, 171, 212, 243, 244, 245, 246, 247, 290, 309, 310, 311, 312, 313, 314, 315, 316, 376, 388, 420, 421], "sklearn": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 57, 58, 66, 92, 94, 98, 99, 102, 103, 104, 105, 106, 133, 136, 140, 141, 148, 149, 155, 156, 158, 162, 175, 182, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 212, 213, 219, 223, 225, 230, 231, 232, 233, 243, 244, 245, 246, 251, 265, 274], "model_select": [3, 29, 30, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 51, 98, 99, 133, 148, 155, 158, 243, 244, 245, 246], "cv": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 44, 51, 58, 98, 99, 130, 148, 155, 160, 182, 243, 244, 245, 246, 247, 248, 249], "n_split": [3, 34, 36, 37, 40, 44, 51, 99], "method": [3, 6, 14, 15, 26, 31, 36, 39, 44, 46, 48, 58, 59, 86, 89, 91, 92, 94, 100, 105, 110, 111, 112, 114, 121, 125, 129, 133, 136, 139, 140, 141, 143, 145, 148, 149, 150, 152, 156, 157, 161, 162, 163, 168, 169, 170, 173, 174, 175, 180, 181, 182, 192, 203, 209, 220, 223, 225, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 256, 257, 258, 260, 265, 278, 280, 285, 288, 289, 290, 295, 298, 299, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 366, 375, 382, 384, 385, 386, 387, 388, 389, 390, 398, 402, 403, 419, 421], "yield": [3, 31, 39, 49, 77, 79, 84, 114, 136, 139, 143, 148, 154, 155, 156, 157, 160, 161, 164, 165, 223, 247, 251, 261, 265, 267, 272, 281, 302, 387], "fold": [3, 29, 31, 34, 36, 40, 51, 69, 94, 98, 99, 155, 156, 158, 160, 162, 175, 182, 243, 244, 245, 246, 247, 248, 249], "01d": 3, "886": 3, "698": [3, 33], "744": [3, 33], "return": [3, 4, 9, 14, 15, 31, 33, 39, 40, 41, 44, 47, 56, 64, 66, 68, 80, 84, 94, 100, 107, 113, 114, 125, 129, 136, 139, 141, 143, 144, 145, 148, 150, 155, 157, 160, 162, 163, 168, 170, 171, 173, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 337, 342, 344, 348, 354, 355, 356, 357, 358, 359, 360, 362, 364, 365, 367, 370, 371, 373, 377, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 414, 419], "paramet": [3, 6, 14, 15, 21, 23, 24, 28, 29, 32, 40, 41, 42, 44, 45, 49, 51, 54, 56, 60, 71, 73, 89, 91, 92, 94, 95, 104, 105, 106, 108, 110, 113, 114, 120, 127, 130, 133, 134, 136, 140, 141, 142, 143, 144, 145, 148, 150, 152, 153, 154, 155, 157, 159, 160, 161, 162, 163, 164, 165, 168, 170, 172, 173, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 419, 421], "n_fold": [3, 182, 243, 244, 245, 246, 248, 249], "pipelin": [3, 35, 37, 39, 40, 41, 42, 44, 75, 98, 99, 111, 139, 148, 154, 155, 156, 159, 160, 161, 168, 174, 180, 181, 182, 188, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 278, 283, 309, 310, 311, 312, 313, 314, 315, 316, 387, 388, 389, 390, 402, 421], "found": [3, 6, 10, 15, 18, 21, 48, 49, 50, 52, 55, 62, 81, 87, 88, 100, 101, 103, 107, 108, 113, 114, 133, 148, 149, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 170, 171, 174, 175, 223, 225, 227, 283, 285, 303, 317, 320, 361, 375, 376, 402, 419], "websit": [3, 42, 75, 121, 133, 148, 188, 201, 222], "best": [3, 34, 42, 43, 44, 95, 139, 145, 148, 155, 156, 157, 160, 162, 163, 165, 174, 243, 244, 245, 246, 248, 249, 339, 342, 387, 388], "per": [3, 6, 30, 31, 33, 40, 48, 57, 66, 78, 94, 101, 102, 108, 141, 148, 149, 155, 163, 175, 182, 202, 221, 243, 244, 245, 246, 248, 249, 251, 253, 265, 266, 268, 272, 279, 303, 306, 310, 311, 312, 314, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 364, 401], "cv_params_": [3, 34, 243, 244, 245, 246], "c": [3, 34, 37, 40, 41, 42, 43, 44, 49, 56, 64, 67, 70, 98, 99, 100, 102, 111, 114, 156, 160, 161, 181, 184, 192, 194, 201, 203, 206, 207, 213, 214, 220, 222, 223, 225, 227, 238, 257, 258, 283, 298, 299, 306, 307, 326, 393, 396, 402], "100": [3, 15, 31, 33, 34, 36, 40, 41, 42, 43, 44, 49, 55, 63, 75, 77, 82, 86, 89, 102, 105, 114, 156, 165, 172, 182, 188, 200, 220, 223, 243, 244, 245, 246, 248, 249, 265, 273, 274, 282, 289, 302, 403, 419, 421], "speed": [3, 36, 37, 47, 77, 89, 98, 105, 111, 152, 158, 161, 162, 174, 175, 326, 387, 406], "cpu": [3, 42, 102, 105, 158, 182, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 274, 278, 280, 295, 310, 311, 312, 321, 322, 323, 326, 388], "comput": [3, 6, 9, 15, 16, 22, 25, 29, 30, 31, 33, 39, 40, 41, 43, 44, 46, 47, 48, 49, 51, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 77, 79, 81, 83, 85, 90, 92, 95, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 114, 121, 133, 139, 140, 141, 143, 148, 151, 152, 154, 155, 156, 157, 158, 160, 161, 162, 165, 166, 168, 169, 170, 172, 173, 176, 180, 182, 184, 198, 209, 212, 222, 232, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 257, 258, 261, 262, 264, 265, 267, 272, 274, 278, 280, 281, 288, 289, 290, 293, 294, 295, 296, 300, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 358, 360, 363, 366, 373, 374, 375, 376, 381, 382, 384, 387, 388, 389, 390, 398, 400, 401, 403, 406, 412, 419, 421], "n_job": [3, 33, 35, 36, 37, 42, 43, 44, 47, 48, 53, 57, 58, 77, 79, 98, 99, 102, 105, 158, 182, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 268, 274, 278, 280, 295, 310, 311, 312, 321, 322, 323, 326, 388], "respect": [3, 62, 108, 136, 145, 148, 149, 163, 165, 168, 171, 175, 206, 208, 243, 244, 245, 246, 265, 268, 278, 287, 298, 299, 390, 392], "structur": [3, 6, 23, 39, 41, 43, 46, 49, 51, 58, 59, 63, 66, 110, 111, 149, 155, 157, 158, 159, 160, 162, 168, 173, 182, 190, 192, 201, 204, 212, 213, 218, 227, 248, 249, 252, 255, 303, 318, 319, 320, 322, 323, 373, 381, 384, 389, 395, 421], "acquisit": [3, 6, 30, 32, 63, 66, 71, 101, 111, 160, 165, 168, 218, 272, 362], "select": [3, 6, 14, 15, 19, 20, 23, 29, 32, 33, 34, 35, 41, 42, 55, 56, 66, 76, 89, 94, 100, 105, 111, 112, 126, 127, 128, 130, 138, 139, 141, 143, 148, 150, 153, 156, 157, 158, 159, 160, 161, 162, 174, 175, 181, 182, 192, 209, 210, 220, 223, 225, 227, 229, 242, 243, 244, 245, 246, 248, 249, 278, 280, 290, 302, 306, 307, 368, 374, 376, 377, 379, 380, 387, 388, 390, 406, 419, 421], "session_label": [3, 29, 30, 32, 33, 98, 155], "acquir": [3, 6, 66, 68, 113, 165, 168, 170], "nois": [3, 6, 34, 44, 56, 64, 67, 69, 70, 94, 95, 100, 103, 108, 111, 120, 141, 148, 150, 156, 158, 162, 165, 168, 175, 255, 257, 258, 272, 306, 307, 362, 374, 375, 403], "autocorrel": [3, 69, 108], "henc": [3, 56, 58, 72, 75, 86, 139, 148, 160, 163, 165], "across": [3, 6, 15, 16, 47, 50, 51, 56, 64, 65, 66, 80, 94, 98, 99, 100, 103, 111, 136, 142, 148, 149, 150, 153, 154, 155, 156, 158, 160, 165, 168, 180, 198, 232, 243, 244, 245, 246, 248, 249, 250, 251, 301, 317, 362, 388, 390, 406, 419], "pass": [3, 4, 9, 10, 11, 24, 29, 36, 42, 43, 49, 51, 54, 55, 56, 58, 79, 86, 89, 94, 102, 105, 106, 113, 114, 120, 129, 131, 133, 136, 141, 143, 145, 148, 155, 156, 160, 162, 163, 164, 173, 174, 175, 180, 182, 188, 223, 243, 244, 245, 246, 248, 249, 250, 251, 265, 267, 272, 278, 280, 283, 297, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 320, 321, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 383, 384, 387, 388, 390, 392, 400, 401, 402, 406], "leaveonegroupout": [3, 29, 30, 32, 33, 98, 130, 148, 155, 158, 160, 243, 244, 245, 246], "cv_scores_": [3, 29, 30, 32, 33, 34, 42, 155, 182, 243, 244, 245, 246, 248, 249], "9629629629629629": 3, "8518518518518519": 3, "9753086419753086": 3, "40740740740740744": 3, "9876543209876543": 3, "9259259259259259": 3, "8765432098765432": 3, "final": [3, 4, 6, 14, 15, 30, 41, 48, 53, 55, 56, 57, 63, 69, 84, 93, 94, 100, 141, 148, 149, 156, 162, 163, 164, 170, 171, 174, 175, 182, 278, 303, 310, 311, 313, 314, 419], "coef_": [3, 40, 44, 98, 113, 243, 244, 245, 246, 248, 249], "88470607e": 3, "02": [3, 7, 30, 33, 36, 44, 45, 49, 53, 59, 73, 82, 96, 109, 111, 160, 192, 306, 307], "86752512e": 3, "22275021e": 3, "88103993e": 3, "17749260e": 3, "10474810e": 3, "69628890e": 3, "49689671e": 3, "93774732e": 3, "50417249e": 3, "08279398e": 3, "28501492e": 3, "54318369e": 3, "78045025e": 3, "68278815e": 3, "27559077e": 3, "6": [3, 4, 6, 17, 20, 23, 24, 27, 30, 31, 33, 34, 36, 38, 40, 41, 42, 43, 44, 48, 49, 50, 51, 53, 54, 55, 58, 59, 62, 63, 64, 66, 72, 73, 80, 82, 85, 91, 94, 96, 99, 100, 102, 103, 104, 106, 107, 111, 115, 118, 120, 126, 128, 130, 133, 134, 135, 141, 142, 143, 153, 160, 161, 162, 164, 174, 188, 206, 209, 212, 233, 250, 306, 307, 311, 314, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 376, 382, 383, 390, 392], "55000723e": 3, "03": [3, 27, 30, 32, 33, 44, 45, 53, 56, 59, 91, 111, 160, 280, 306, 307, 326], "7": [3, 6, 15, 24, 25, 27, 33, 36, 38, 42, 43, 44, 45, 48, 49, 52, 53, 54, 57, 58, 59, 62, 63, 64, 66, 70, 71, 72, 73, 82, 86, 87, 91, 94, 96, 102, 103, 105, 107, 109, 111, 114, 115, 118, 120, 121, 123, 128, 130, 133, 134, 136, 141, 143, 161, 173, 174, 188, 192, 194, 195, 200, 204, 255, 257, 258, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 363, 368, 372, 374, 375, 377, 379, 380, 389, 395, 419], "64039295e": 3, "66729392e": 3, "8": [3, 6, 7, 9, 12, 14, 24, 27, 33, 34, 36, 38, 40, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 66, 68, 72, 73, 76, 79, 80, 82, 84, 86, 89, 91, 92, 93, 96, 99, 100, 101, 102, 103, 104, 106, 107, 109, 111, 114, 118, 121, 126, 134, 136, 138, 144, 152, 153, 161, 193, 197, 203, 212, 214, 223, 225, 232, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 249, 250, 251, 265, 278, 282, 287, 306, 309, 310, 311, 312, 313, 314, 315, 316, 319, 322, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 388, 390, 399, 400, 402], "00464656e": 3, "28261188e": 3, "15728138e": 3, "35570962e": 3, "40756233e": 3, "58822306e": 3, "22077268e": 3, "76884436e": 3, "21688160e": 3, "51048927e": 3, "74704553e": 3, "13813656e": 3, "12122388e": 3, "02840621e": 3, "88625034e": 3, "88124268e": 3, "34317909e": 3, "20846000e": 3, "71170087e": 3, "36652694e": 3, "40697691e": 3, "80080704e": 3, "65045920e": 3, "70138465e": 3, "55155402e": 3, "21379533e": 3, "46414042e": 3, "11541371e": 3, "60127671e": 3, "52386204e": 3, "01267010e": 3, "28206851e": 3, "07522845e": 3, "09181281e": 3, "71552212e": 3, "76544125e": 3, "03609977e": 3, "37697937e": 3, "47604137e": 3, "41998959e": 3, "47077316e": 3, "01": [3, 6, 7, 12, 27, 30, 32, 33, 36, 42, 45, 48, 51, 53, 55, 58, 59, 61, 71, 73, 82, 96, 99, 100, 101, 108, 109, 111, 182, 194, 198, 265, 268, 272, 303, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "33518178e": 3, "86653024e": 3, "64352417e": 3, "05549002e": 3, "21725747e": 3, "94674734e": 3, "21324607e": 3, "03307830e": 3, "13951192e": 3, "12011471e": 3, "93353398e": 3, "30258900e": 3, "41939417e": 3, "22555536e": 3, "86546413e": 3, "69012693e": 3, "78552007e": 3, "00063290e": 3, "98481434e": 3, "51580992e": 3, "05948732e": 3, "30472485e": 3, "21084167e": 3, "22817251e": 3, "42260261e": 3, "52784758e": 3, "97786490e": 3, "31617190e": 3, "54073863e": 3, "40811717e": 3, "78551037e": 3, "80247484e": 3, "69302075e": 3, "70139493e": 3, "97323508e": 3, "19237201e": 3, "33513016e": 3, "36855851e": 3, "03555255e": 3, "66307671e": 3, "17992215e": 3, "92800062e": 3, "05107758e": 3, "48580661e": 3, "43214868e": 3, "08762511e": 3, "67057410e": 3, "72688774e": 3, "95716099e": 3, "08742180e": 3, "57551122e": 3, "16004101e": 3, "99189622e": 3, "38977795e": 3, "81973472e": 3, "11834100e": 3, "44116618e": 3, "30731588e": 3, "49667306e": 3, "47162507e": 3, "55571260e": 3, "83423792e": 3, "19704564e": 3, "71288841e": 3, "24785822e": 3, "57569347e": 3, "78066394e": 3, "51055336e": 3, "30720298e": 3, "33660957e": 3, "75657471e": 3, "39172774e": 3, "19811459e": 3, "34817881e": 3, "67904362e": 3, "91880087e": 3, "23724022e": 3, "28199428e": 3, "97907297e": 3, "16655548e": 3, "92077209e": 3, "32899820e": 3, "79642652e": 3, "74906624e": 3, "15533756e": 3, "08033265e": 3, "42699271e": 3, "05702085e": 3, "84398157e": 3, "70413461e": 3, "72191009e": 3, "75572910e": 3, "07214761e": 3, "04": [3, 27, 30, 32, 33, 41, 44, 53, 59, 96, 111, 162, 198, 283, 306, 307, 402, 403], "99828132e": 3, "52269456e": 3, "24247472e": 3, "81498090e": 3, "49523366e": 3, "60352561e": 3, "14532554e": 3, "94961723e": 3, "57077668e": 3, "88175773e": 3, "82080102e": 3, "22476159e": 3, "12261157e": 3, "68379088e": 3, "66159380e": 3, "34740042e": 3, "79793993e": 3, "45396985e": 3, "52426609e": 3, "66474002e": 3, "61412229e": 3, "85717046e": 3, "38888870e": 3, "20129472e": 3, "73237956e": 3, "01274088e": 3, "16578618e": 3, "90731748e": 3, "37271188e": 3, "83611704e": 3, "20497571e": 3, "81968904e": 3, "13305550e": 3, "80406944e": 3, "78568116e": 3, "76556587e": 3, "11160920e": 3, "64706591e": 3, "88446535e": 3, "42268586e": 3, "22079135e": 3, "92193872e": 3, "89202974e": 3, "38762167e": 3, "64223469e": 3, "64728747e": 3, "57033243e": 3, "92018586e": 3, "13147631e": 3, "08698350e": 3, "48928646e": 3, "38040866e": 3, "11182813e": 3, "41179796e": 3, "09947360e": 3, "32574280e": 3, "11839245e": 3, "35989073e": 3, "12817786e": 3, "63614036e": 3, "21910228e": 3, "30671401e": 3, "97748727e": 3, "29431107e": 3, "27320969e": 3, "89008252e": 3, "11560980e": 3, "26987658e": 3, "70176498e": 3, "33424377e": 3, "04147614e": 3, "24862545e": 3, "69636956e": 3, "28570377e": 3, "32903670e": 3, "77469389e": 3, "72663579e": 3, "75691147e": 3, "37285920e": 3, "27746467e": 3, "77374967e": 3, "31668602e": 3, "21909301e": 3, "27496480e": 3, "56846487e": 3, "03156014e": 3, "88053952e": 3, "14294572e": 3, "81002100e": 3, "11808891e": 3, "16458150e": 3, "22036214e": 3, "55452612e": 3, "72171227e": 3, "52439207e": 3, "06279915e": 3, "21491914e": 3, "98227557e": 3, "85105956e": 3, "04760401e": 3, "02129605e": 3, "08212220e": 3, "40773429e": 3, "92687286e": 3, "01544815e": 3, "09171714e": 3, "48198781e": 3, "92093248e": 3, "03576473e": 3, "06287591e": 3, "82929623e": 3, "48267374e": 3, "99976200e": 3, "62550341e": 3, "63550470e": 3, "88406806e": 3, "04605601e": 3, "67696265e": 3, "35720997e": 3, "08621821e": 3, "09744364e": 3, "40929615e": 3, "15755071e": 3, "97069080e": 3, "59639012e": 3, "95095944e": 3, "02619033e": 3, "55187185e": 3, "98208915e": 3, "11943392e": 3, "21182859e": 3, "14238897e": 3, "30015399e": 3, "66640832e": 3, "13670687e": 3, "65644919e": 3, "28393265e": 3, "19675388e": 3, "67231406e": 3, "25086793e": 3, "04145306e": 3, "09073220e": 3, "84696692e": 3, "81224174e": 3, "46488843e": 3, "18112024e": 3, "18215229e": 3, "09899253e": 3, "11042553e": 3, "61313727e": 3, "24108690e": 3, "11480377e": 3, "55859183e": 3, "67735514e": 3, "32030896e": 3, "05485584e": 3, "21000060e": 3, "26566296e": 3, "32639453e": 3, "75123652e": 3, "87120416e": 3, "44346738e": 3, "01687335e": 3, "16269854e": 3, "30872907e": 3, "15657166e": 3, "38544374e": 3, "30757801e": 3, "17254677e": 3, "75482516e": 3, "17385672e": 3, "15195125e": 3, "33275944e": 3, "22247912e": 3, "99736808e": 3, "73821808e": 3, "12284189e": 3, "97808783e": 3, "02666149e": 3, "63979673e": 3, "02754458e": 3, "05402233e": 3, "80352673e": 3, "75047829e": 3, "70569139e": 3, "00429911e": 3, "45195744e": 3, "45126020e": 3, "11978374e": 3, "81055113e": 3, "40643696e": 3, "13916038e": 3, "63458005e": 3, "65699161e": 3, "14598670e": 3, "44761413e": 3, "34380854e": 3, "34022562e": 3, "79030947e": 3, "13934124e": 3, "39021044e": 3, "06771626e": 3, "14575734e": 3, "14252657e": 3, "88097379e": 3, "59905475e": 3, "09223059e": 3, "28410101e": 3, "58828007e": 3, "59115960e": 3, "63770527e": 3, "12593045e": 3, "16793342e": 3, "51321296e": 3, "81034046e": 3, "42021111e": 3, "44817582e": 3, "62430234e": 3, "16222121e": 3, "23306476e": 3, "17020462e": 3, "83630755e": 3, "22099903e": 3, "86171770e": 3, "54274661e": 3, "49529725e": 3, "19231256e": 3, "19519905e": 3, "59131130e": 3, "10294423e": 3, "91136972e": 3, "53357028e": 3, "23197393e": 3, "03209613e": 3, "36741514e": 3, "81955484e": 3, "97581031e": 3, "65828508e": 3, "23003031e": 3, "10093287e": 3, "17590995e": 3, "18215322e": 3, "62921965e": 3, "05029157e": 3, "84181647e": 3, "31931786e": 3, "63443364e": 3, "48615515e": 3, "48988278e": 3, "11347570e": 3, "67408909e": 3, "99598499e": 3, "98118473e": 3, "01189003e": 3, "09587517e": 3, "10855325e": 3, "71430479e": 3, "16142236e": 3, "55126865e": 3, "26914581e": 3, "94583302e": 3, "47094058e": 3, "19427159e": 3, "86320507e": 3, "60583899e": 3, "75928254e": 3, "89645402e": 3, "57029813e": 3, "31009381e": 3, "24391653e": 3, "35395691e": 3, "06400815e": 3, "08607556e": 3, "12545251e": 3, "61358770e": 3, "03812954e": 3, "06311250e": 3, "88498991e": 3, "70354885e": 3, "12218475e": 3, "09448930e": 3, "22989868e": 3, "49838495e": 3, "84588984e": 3, "04721989e": 3, "40683004e": 3, "18250680e": 3, "81869091e": 3, "81118495e": 3, "15447290e": 3, "03018061e": 3, "07935746e": 3, "22632496e": 3, "18664748e": 3, "53436243e": 3, "19995461e": 3, "55243623e": 3, "92793904e": 3, "92077065e": 3, "76310195e": 3, "67380918e": 3, "75230654e": 3, "37856456e": 3, "59815332e": 3, "50060926e": 3, "27145152e": 3, "28689191e": 3, "06428909e": 3, "79316478e": 3, "76402417e": 3, "63870133e": 3, "coeffici": [3, 6, 23, 39, 40, 44, 51, 98, 99, 129, 145, 148, 149, 155, 156, 157, 161, 162, 165, 168, 180, 182, 248, 249, 254, 256, 259, 265, 274, 278, 400], "voxel": [3, 15, 25, 28, 33, 36, 37, 39, 40, 41, 44, 45, 46, 49, 50, 59, 66, 69, 70, 74, 79, 81, 82, 84, 87, 89, 90, 92, 98, 100, 102, 105, 108, 110, 111, 113, 123, 126, 127, 128, 134, 143, 145, 148, 152, 153, 155, 157, 158, 159, 161, 164, 165, 166, 168, 169, 170, 173, 175, 196, 197, 204, 209, 213, 214, 227, 244, 247, 248, 249, 250, 251, 253, 260, 261, 265, 274, 278, 280, 281, 282, 283, 285, 287, 288, 289, 298, 299, 302, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 323, 326, 339, 354, 357, 362, 365, 370, 376, 381, 387, 388, 389, 390, 391, 392, 396, 397, 398, 399, 400, 406, 419, 421], "464": [3, 33, 98], "get": [3, 6, 14, 22, 33, 35, 40, 41, 51, 52, 56, 58, 62, 66, 68, 69, 71, 75, 78, 81, 86, 88, 100, 101, 104, 108, 114, 128, 133, 148, 150, 153, 154, 155, 160, 162, 164, 167, 169, 175, 180, 181, 182, 190, 196, 197, 199, 200, 225, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 257, 258, 265, 278, 280, 288, 293, 297, 309, 310, 311, 312, 313, 314, 315, 316, 326, 327, 329, 330, 357, 387, 388, 389, 390, 398, 420], "coef_img_": [3, 29, 30, 31, 39, 42, 43, 155, 175, 243, 244, 245, 246, 248, 249], "coef_img": [3, 30, 43, 113], "niftiimag": [3, 150, 164, 173, 174], "save": [3, 6, 9, 14, 23, 29, 42, 43, 48, 49, 50, 51, 61, 66, 72, 86, 91, 92, 94, 98, 99, 100, 103, 107, 114, 134, 143, 148, 153, 162, 173, 174, 175, 223, 225, 248, 249, 258, 265, 278, 305, 310, 311, 313, 314, 315, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 398, 400, 421], "to_filenam": [3, 4, 6, 29, 48, 49, 55, 64, 86, 94, 174], "haxby_svc_weight": 3, "titl": [3, 6, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 26, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 68, 69, 71, 75, 76, 77, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 98, 100, 101, 102, 103, 105, 106, 107, 108, 113, 136, 137, 142, 145, 148, 153, 155, 163, 171, 175, 265, 278, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 366, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 398, 400, 419], "dim": [3, 21, 23, 29, 47, 56, 91, 124, 126, 130, 148, 155, 253, 255, 257, 258, 361, 374, 375, 376, 383], "doe": [3, 6, 29, 49, 66, 68, 75, 102, 113, 114, 123, 132, 136, 145, 148, 155, 156, 160, 162, 163, 164, 165, 170, 175, 190, 200, 212, 254, 256, 259, 268, 289, 301, 303, 322, 330, 387, 403, 419], "than": [3, 4, 6, 15, 31, 32, 35, 36, 39, 40, 41, 42, 43, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 64, 66, 67, 69, 70, 77, 79, 81, 86, 88, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 112, 113, 114, 123, 126, 127, 128, 129, 130, 132, 136, 141, 143, 148, 149, 152, 154, 155, 156, 157, 158, 160, 162, 163, 165, 168, 171, 173, 174, 175, 196, 197, 223, 225, 229, 243, 244, 245, 246, 250, 251, 265, 274, 280, 281, 282, 289, 294, 302, 303, 306, 307, 309, 311, 312, 314, 315, 326, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 357, 362, 363, 372, 381, 382, 384, 386, 390, 399, 401, 403, 406], "answer": [3, 420], "question": [3, 51, 65, 66, 99, 152, 170, 171, 175, 209, 420], "random": [3, 40, 41, 44, 51, 55, 63, 98, 99, 102, 128, 140, 148, 152, 153, 154, 155, 162, 163, 193, 250, 251, 255, 257, 258, 265, 274, 280, 326, 387, 388, 390, 392], "compar": [3, 6, 30, 31, 33, 35, 39, 41, 46, 51, 56, 58, 59, 64, 66, 77, 79, 80, 83, 86, 94, 96, 99, 110, 111, 114, 116, 136, 148, 150, 151, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 168, 175, 180, 182, 195, 198, 204, 209, 294, 295, 309, 310, 311, 312, 313, 314, 315, 316, 358, 359, 363, 370, 376, 381, 402, 419, 421], "dummi": [3, 99, 141, 148, 155, 156, 158, 163, 243, 244, 245, 246, 272], "replac": [3, 4, 30, 32, 35, 36, 40, 41, 42, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 70, 77, 79, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 120, 127, 128, 133, 136, 139, 140, 141, 142, 143, 148, 158, 162, 163, 171, 227, 283, 300, 306, 317, 320, 402], "initi": [3, 12, 48, 49, 50, 67, 69, 94, 100, 153, 161, 164, 173, 175, 182, 184, 250, 251, 252, 256, 310, 311, 313, 314, 316, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 387, 390], "dummy_decod": 3, "dummy_classifi": [3, 32, 243, 245], "simpli": [3, 64, 66, 67, 68, 69, 89, 101, 103, 105, 108, 114, 165, 175, 192, 282, 294, 300, 374, 375, 376], "mean": [3, 6, 14, 15, 16, 18, 21, 22, 23, 25, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 49, 50, 51, 55, 56, 58, 61, 64, 66, 67, 70, 71, 77, 83, 89, 91, 92, 94, 95, 96, 98, 102, 103, 104, 110, 114, 126, 130, 133, 136, 140, 142, 148, 149, 152, 153, 155, 162, 163, 165, 168, 170, 174, 175, 180, 181, 182, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 257, 258, 265, 273, 274, 278, 280, 281, 282, 284, 289, 294, 295, 302, 306, 307, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 326, 361, 374, 375, 376, 377, 381, 383, 387, 388, 389, 390, 392, 393, 396, 397, 400, 402, 403], "over": [3, 20, 48, 49, 51, 69, 71, 89, 113, 139, 140, 148, 154, 155, 160, 161, 162, 167, 171, 174, 195, 251, 265, 291, 295, 306, 327, 329, 330, 374, 378, 406, 419], "38888888888888895": 3, "6111111111111112": [3, 29], "anova": [3, 28, 35, 42, 45, 105, 106, 110, 128, 148, 159, 160, 161, 168, 175, 212, 243, 244, 245, 246, 248, 249, 290, 376, 381, 383, 421], "hous": [3, 18, 28, 32, 33, 45, 94, 97, 109, 110, 160, 169, 173, 174, 212, 243, 245, 247, 288, 290, 293, 295, 296, 309, 315, 326, 354, 369, 376, 381, 383], "For": [3, 6, 9, 14, 15, 19, 23, 24, 29, 30, 32, 34, 35, 36, 40, 48, 50, 51, 63, 64, 66, 67, 69, 71, 72, 79, 80, 86, 89, 98, 100, 103, 105, 108, 113, 114, 133, 143, 148, 149, 150, 152, 154, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 168, 170, 173, 174, 175, 180, 187, 190, 191, 192, 196, 197, 199, 200, 201, 203, 204, 213, 223, 225, 227, 238, 242, 243, 244, 245, 246, 248, 249, 250, 251, 255, 256, 257, 258, 265, 272, 278, 280, 295, 303, 306, 307, 311, 313, 314, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 361, 366, 369, 371, 374, 375, 376, 377, 378, 379, 380, 388, 390, 391, 392, 398, 399, 400, 406, 419, 420], "precomput": [3, 249], "frem": [3, 28, 45, 110, 111, 139, 148, 155, 156, 159, 161, 168, 169, 212, 221, 245, 246, 249, 290, 295, 376, 381, 421], "fast": [3, 31, 39, 48, 49, 65, 66, 72, 100, 111, 136, 139, 148, 152, 154, 155, 156, 159, 162, 163, 168, 169, 218, 225, 245, 246, 251, 300, 388, 389, 395, 421], "ensembl": [3, 31, 39, 42, 111, 155, 156, 159, 161, 168, 169, 245, 246, 421], "regular": [3, 31, 39, 56, 66, 91, 94, 111, 114, 139, 148, 155, 156, 159, 161, 162, 168, 169, 170, 174, 181, 182, 184, 245, 246, 248, 249, 293, 420, 421], "robust": [3, 31, 39, 94, 111, 138, 148, 153, 155, 159, 168, 245, 246, 306, 307, 421], "spacenet": [3, 126, 148, 155, 156, 157, 159, 168, 248, 249, 421], "spatial": [3, 6, 31, 39, 43, 46, 49, 50, 54, 59, 69, 86, 94, 95, 98, 104, 108, 110, 111, 139, 143, 148, 152, 154, 155, 158, 159, 165, 168, 169, 172, 175, 190, 193, 198, 200, 209, 220, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 278, 280, 291, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 374, 376, 381, 388, 390, 392, 421], "48": [3, 6, 7, 20, 33, 36, 42, 43, 44, 45, 53, 62, 72, 91, 99, 102, 109, 191, 196, 198, 221, 285], "258": [3, 7, 33, 41, 94], "978": [3, 111, 257, 258], "plot_decoding_tutori": [3, 7, 136, 148, 155, 163], "download": [4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 123, 124, 126, 127, 129, 133, 136, 139, 140, 142, 148, 149, 150, 152, 155, 163, 170, 177, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 421], "exist": [4, 6, 20, 48, 64, 72, 102, 153, 160, 163, 174, 223, 225, 292, 373, 419], "ship": [4, 12, 14, 94, 133, 148, 419], "mni152_file_path": [4, 170], "variabl": [4, 6, 14, 39, 42, 43, 44, 56, 69, 75, 77, 94, 100, 101, 108, 111, 125, 143, 145, 148, 150, 155, 156, 157, 159, 160, 162, 163, 165, 168, 173, 175, 189, 234, 243, 244, 245, 246, 247, 248, 249, 252, 256, 265, 278, 294, 306], "path": [4, 6, 15, 62, 64, 72, 86, 94, 101, 108, 112, 113, 114, 125, 136, 142, 144, 145, 148, 155, 161, 162, 163, 171, 172, 175, 181, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 243, 244, 245, 246, 248, 249, 250, 251, 265, 268, 278, 284, 293, 303, 304, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 340, 388, 389, 390, 398, 402, 404, 405, 406, 421], "mni152": [4, 93, 120, 142, 148, 165, 191, 193, 200, 204, 213, 214, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 249, 250, 251, 265, 278, 290, 312, 315, 319, 322, 374, 375, 376, 383, 388], "templat": [4, 16, 22, 23, 48, 69, 75, 83, 96, 108, 110, 111, 120, 121, 126, 131, 136, 139, 142, 145, 148, 153, 165, 168, 170, 174, 175, 190, 192, 204, 213, 214, 226, 227, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 250, 251, 265, 278, 293, 298, 299, 307, 312, 315, 319, 322, 361, 374, 375, 376, 381, 383, 388, 398], "mni_icbm152_t1_tal_nlin_sym_09a_convert": [4, 170], "quickli": [4, 33, 61, 62, 64, 75, 149, 152, 162, 163, 171], "plot_img": [4, 6, 36, 136, 143, 148, 170, 337, 339, 342, 344, 346, 348, 350, 352, 354, 419], "0x7f1355636bb0": 4, "veri": [4, 30, 31, 32, 35, 36, 39, 40, 42, 44, 49, 54, 66, 75, 76, 77, 79, 86, 94, 103, 113, 136, 148, 149, 150, 152, 155, 156, 157, 158, 161, 162, 163, 165, 168, 171, 175, 245, 246, 311, 314, 357, 374, 401], "pretti": [4, 103], "simplest": [4, 71, 98, 114, 158, 162, 419], "possibl": [4, 6, 14, 15, 44, 69, 71, 80, 81, 84, 86, 94, 100, 113, 114, 126, 143, 145, 148, 149, 152, 155, 160, 162, 163, 165, 168, 170, 171, 174, 175, 180, 181, 182, 188, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 257, 258, 265, 268, 278, 280, 287, 298, 303, 306, 309, 310, 311, 312, 313, 314, 315, 316, 356, 357, 363, 368, 372, 387, 388, 389, 390, 400, 419], "whole": [4, 6, 14, 42, 48, 50, 70, 89, 94, 111, 114, 142, 148, 160, 161, 163, 164, 169, 174, 175, 193, 213, 223, 225, 235, 238, 243, 244, 245, 246, 250, 251, 312, 315, 319, 322, 326, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 368, 374, 376, 380, 388, 390, 419], "make": [4, 6, 8, 15, 22, 27, 30, 36, 41, 47, 49, 51, 56, 58, 66, 68, 69, 70, 71, 75, 77, 79, 80, 84, 98, 104, 110, 111, 114, 120, 121, 122, 127, 133, 142, 143, 145, 148, 153, 155, 156, 160, 161, 164, 167, 168, 169, 170, 173, 175, 194, 202, 212, 223, 226, 227, 232, 243, 244, 245, 246, 248, 249, 253, 298, 330, 340, 368, 371, 376, 378, 380, 381, 382, 383, 384, 386, 387, 406, 419, 420], "prettier": 4, "exercis": [4, 170], "own": [4, 6, 49, 58, 100, 112, 114, 155, 158, 163, 214, 421], "noth": [4, 160, 182, 250, 251, 254, 256, 259, 265, 278, 312, 313, 314, 315, 316, 369, 371, 374, 375, 376, 383], "string": [4, 15, 29, 33, 43, 48, 55, 72, 77, 79, 88, 92, 100, 101, 108, 113, 130, 131, 143, 145, 148, 163, 173, 181, 188, 190, 205, 212, 215, 216, 217, 218, 222, 224, 226, 227, 228, 230, 231, 234, 242, 247, 248, 249, 250, 251, 255, 257, 258, 262, 263, 265, 267, 272, 278, 281, 282, 283, 284, 293, 294, 297, 302, 303, 305, 306, 312, 313, 314, 315, 316, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 391, 400, 402], "should": [4, 6, 14, 15, 32, 35, 36, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 65, 66, 68, 69, 70, 79, 88, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 114, 129, 130, 140, 143, 144, 148, 153, 154, 155, 156, 158, 162, 163, 165, 170, 171, 175, 182, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 227, 228, 229, 230, 231, 232, 233, 234, 247, 250, 251, 262, 265, 267, 268, 272, 273, 279, 281, 282, 283, 293, 294, 296, 299, 301, 302, 304, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 326, 327, 360, 361, 363, 366, 368, 369, 374, 375, 376, 377, 378, 380, 384, 387, 388, 390, 391, 392, 396, 398, 399, 400, 402, 417, 419, 420], "volum": [4, 8, 27, 31, 32, 36, 39, 43, 54, 56, 61, 64, 69, 79, 87, 91, 100, 111, 113, 120, 130, 133, 141, 148, 160, 161, 168, 169, 170, 173, 190, 192, 195, 212, 222, 227, 243, 244, 245, 246, 248, 249, 250, 265, 287, 295, 298, 299, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 327, 329, 330, 362, 366, 371, 375, 380, 381, 383, 390, 391, 392, 396, 402, 406, 419, 420, 421], "smooth_img": [4, 70, 94, 95, 103, 130, 136, 148, 173, 174, 175], "mm": [4, 15, 33, 37, 55, 84, 87, 91, 133, 148, 153, 174, 195, 200, 208, 265, 278, 306, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 390, 391, 392, 400, 406], "smooth_anat_img": 4, "fwhm": [4, 66, 94, 95, 103, 105, 130, 136, 148, 168, 170, 174, 175, 300], "nibabel": [4, 33, 36, 44, 49, 54, 56, 62, 75, 84, 91, 120, 127, 128, 130, 136, 141, 143, 145, 146, 148, 162, 173, 174, 250, 251, 284, 285, 286, 293, 298, 299, 300, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 388, 390, 391, 392, 396, 397], "nifti1": [4, 33, 36, 49, 54, 56, 75, 91, 136, 148, 300, 310, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 388, 390, 391, 392, 396, 397], "nifti1imag": [4, 33, 36, 40, 43, 44, 48, 49, 54, 56, 75, 84, 91, 128, 129, 131, 136, 148, 153, 173, 194, 196, 197, 199, 200, 203, 214, 221, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 250, 251, 260, 262, 265, 278, 280, 281, 282, 284, 286, 290, 291, 293, 294, 295, 298, 299, 300, 301, 302, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 337, 342, 344, 348, 354, 358, 359, 360, 388, 390, 391, 392, 396, 397], "0x7f135e988bb0": 4, "0x7f1355565310": 4, "could": [4, 6, 36, 49, 58, 66, 69, 70, 79, 85, 86, 93, 100, 105, 113, 114, 123, 139, 143, 144, 148, 155, 158, 160, 162, 163, 165, 170, 175, 253, 375, 406], "more_smooth_anat_img": 4, "0x7f1355596d60": 4, "ani": [4, 6, 40, 41, 49, 56, 58, 75, 80, 81, 100, 103, 104, 113, 120, 137, 139, 145, 148, 150, 152, 155, 156, 159, 160, 162, 163, 164, 165, 168, 175, 188, 212, 223, 225, 229, 285, 290, 294, 300, 303, 304, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 371, 374, 390, 394, 399, 402, 406, 419, 420, 421], "necessari": [4, 62, 89, 92, 101, 108, 120, 136, 143, 148, 149, 152, 155, 163, 164, 171, 175, 190, 223, 225, 243, 244, 245, 246, 258, 265, 278, 315, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 398], "tool": [4, 8, 10, 11, 20, 23, 27, 32, 36, 48, 49, 79, 86, 87, 94, 100, 104, 110, 113, 126, 145, 148, 151, 156, 163, 164, 167, 169, 170, 172, 173, 175, 176, 178, 212, 226, 295, 337, 339, 342, 344, 346, 348, 350, 352, 354, 361, 366, 368, 375, 376, 381, 383, 410, 419, 420], "752": [4, 7, 100, 111], "228": [4, 7, 33, 41], "plot_nilearn_101": [4, 7], "matplotlib": [5, 6, 8, 9, 11, 18, 24, 25, 27, 30, 32, 35, 38, 40, 41, 42, 43, 44, 48, 49, 51, 52, 54, 55, 56, 57, 58, 62, 63, 65, 66, 68, 70, 72, 78, 79, 80, 84, 91, 94, 99, 100, 101, 102, 105, 106, 110, 118, 123, 128, 130, 131, 133, 136, 138, 143, 144, 148, 150, 155, 174, 311, 314, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 390, 419, 420], "line": [5, 9, 14, 21, 24, 48, 51, 91, 155, 162, 163, 171, 227, 283, 382, 402, 406, 420], "line2d": [5, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363], "0x7f13633d9df0": 5, "modul": [5, 19, 26, 32, 34, 35, 36, 40, 41, 42, 47, 50, 51, 52, 53, 54, 55, 56, 58, 61, 87, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 103, 104, 105, 106, 111, 113, 114, 120, 121, 128, 130, 131, 139, 143, 145, 148, 158, 163, 166, 170, 171, 175, 179, 223, 227, 243, 244, 245, 246, 255, 257, 258, 272, 280, 282, 292, 294, 410, 414, 415, 417, 419], "np": [5, 6, 9, 11, 12, 14, 20, 21, 22, 23, 24, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 77, 79, 80, 84, 85, 87, 89, 94, 98, 100, 102, 103, 104, 105, 106, 107, 108, 145, 148, 153, 163, 173, 174, 180, 200, 227, 254, 255, 256, 257, 258, 259, 284, 294, 387, 389], "linspac": [5, 49, 61, 68], "2000": [5, 42, 49, 102, 111, 136, 139, 148, 152, 173, 203], "pyplot": [5, 6, 11, 12, 18, 24, 25, 30, 32, 34, 35, 38, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 62, 63, 65, 66, 68, 70, 72, 78, 79, 80, 84, 91, 94, 99, 100, 101, 102, 105, 106, 150, 174, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 366, 367, 368, 369, 371, 372, 374, 375, 376, 377, 380, 381, 419], "scientif": [5, 111, 140, 143, 148, 163, 170, 199, 210, 218, 228, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 366, 368, 369, 375, 376, 377, 379, 380], "plt": [5, 6, 11, 12, 18, 24, 25, 30, 32, 34, 35, 38, 40, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 62, 63, 65, 66, 68, 70, 72, 78, 79, 80, 84, 91, 94, 99, 100, 101, 102, 105, 106, 174, 361, 362, 363, 366, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383], "co": [5, 24, 84, 111, 164, 203, 232], "202": [5, 7, 33, 41], "plot_python_101": [5, 7], "tutori": [6, 7, 66, 98, 123, 133, 148, 155, 163, 168, 169, 170, 175, 212, 243, 290, 295, 366, 375, 383], "model": [6, 23, 28, 31, 32, 33, 34, 39, 41, 44, 45, 48, 50, 51, 60, 61, 63, 69, 71, 73, 74, 75, 81, 82, 97, 98, 102, 104, 105, 108, 109, 110, 111, 120, 130, 136, 139, 141, 143, 144, 145, 148, 149, 151, 153, 155, 159, 160, 161, 162, 163, 166, 168, 169, 170, 175, 176, 180, 181, 184, 211, 214, 215, 218, 219, 220, 222, 233, 243, 244, 245, 246, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 280, 281, 284, 285, 288, 289, 294, 295, 299, 302, 305, 306, 307, 309, 312, 315, 316, 326, 338, 339, 353, 354, 364, 365, 368, 375, 376, 381, 398, 400, 413, 420, 421], "period": [6, 41, 66, 69, 108, 243, 244, 245, 246, 248, 249, 283, 310, 311, 362, 388, 390, 402], "auditori": [6, 66, 69, 72, 77, 103, 105, 165, 208, 217, 218, 224, 230], "stimul": [6, 72, 155], "versu": [6, 66, 69, 79, 80, 94, 98, 155, 156, 168], "analys": [6, 100, 111, 155, 160, 164, 165, 166, 167, 168, 169, 173, 175, 221, 407, 420], "nativ": [6, 60, 73, 110, 129, 148, 164, 231, 265, 272, 284, 292, 295, 298, 316, 376, 381], "scan": [6, 23, 33, 36, 55, 58, 63, 65, 66, 68, 94, 100, 111, 141, 148, 152, 160, 168, 173, 218, 250, 251, 265, 267, 269, 270, 271, 272, 275, 276, 277, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 362, 388, 390, 393, 394, 396, 402], "preprocess": [6, 11, 23, 29, 34, 37, 40, 41, 44, 89, 92, 99, 101, 104, 108, 111, 112, 128, 148, 153, 154, 160, 161, 165, 168, 175, 188, 189, 209, 227, 233, 265, 268, 283, 304, 306, 309, 310, 311, 312, 313, 314, 315, 316, 390, 402, 410, 421], "sensit": [6, 40, 48, 56, 111, 165, 168, 283, 307, 326, 402], "would": [6, 9, 14, 42, 50, 58, 64, 66, 67, 75, 78, 103, 114, 141, 145, 148, 155, 162, 163, 164, 165, 171, 242, 243, 244, 245, 246, 248, 249, 251, 265, 267, 268, 272, 278, 280, 303, 317, 322, 362], "like": [6, 10, 11, 16, 34, 36, 40, 47, 49, 54, 56, 66, 79, 81, 86, 89, 91, 92, 94, 100, 114, 136, 140, 143, 144, 145, 148, 161, 162, 163, 164, 165, 167, 168, 171, 172, 174, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 260, 265, 267, 268, 278, 280, 281, 282, 283, 284, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 361, 362, 366, 368, 369, 371, 372, 374, 375, 376, 377, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 406, 408, 419, 421], "obtain": [6, 15, 22, 42, 43, 49, 54, 58, 63, 66, 69, 75, 77, 91, 94, 102, 105, 143, 148, 149, 150, 152, 154, 155, 157, 160, 162, 165, 168, 175, 182, 191, 193, 201, 213, 218, 235, 236, 239, 242, 248, 249, 282, 287, 298, 302, 313, 314, 316, 326, 340, 367, 390], "correct": [6, 42, 43, 48, 56, 75, 77, 79, 81, 92, 101, 102, 105, 106, 111, 120, 136, 139, 145, 148, 149, 160, 165, 166, 168, 171, 228, 241, 243, 244, 245, 246, 248, 249, 280, 281, 306, 307, 326, 362, 403, 421], "normal": [6, 24, 37, 40, 41, 44, 55, 58, 69, 70, 101, 104, 108, 113, 123, 148, 155, 162, 163, 164, 165, 168, 171, 181, 184, 190, 216, 227, 257, 258, 406], "smooth": [6, 29, 34, 42, 44, 48, 49, 55, 70, 75, 81, 83, 94, 96, 101, 105, 110, 111, 129, 130, 148, 152, 154, 155, 156, 162, 170, 172, 173, 209, 243, 244, 245, 246, 250, 251, 265, 278, 280, 295, 300, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 326, 366, 377, 381, 387, 388, 390, 392, 421], "conduct": [6, 32, 114, 165], "fil": [6, 230, 231], "geraint": 6, "ree": 6, "under": [6, 102, 145, 148, 155, 156, 160, 161, 162, 163, 164, 165, 168, 171, 247, 287, 298, 299, 304, 319, 322, 326], "direct": [6, 15, 40, 51, 94, 98, 111, 130, 139, 148, 150, 151, 163, 171, 175, 195, 201, 227, 233, 243, 244, 265, 278, 300, 302, 303, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 345, 346, 347, 349, 350, 351, 352, 353, 356, 357, 361, 363, 366, 368, 369, 372, 374, 375, 376, 391, 400, 419, 421], "karl": 6, "friston": [6, 111, 283, 402], "develop": [6, 47, 55, 56, 85, 89, 91, 92, 111, 131, 136, 148, 149, 150, 152, 154, 162, 163, 170, 171, 182, 203, 209, 362], "spm": [6, 10, 11, 36, 49, 61, 66, 68, 71, 79, 86, 94, 111, 144, 145, 148, 159, 164, 168, 173, 190, 230, 231, 265, 267, 272, 275, 276, 277, 294, 421], "accord": [6, 41, 44, 69, 94, 100, 108, 120, 128, 129, 130, 133, 139, 141, 145, 148, 153, 160, 163, 181, 188, 200, 241, 243, 244, 245, 246, 248, 249, 252, 283, 303, 326, 372, 377, 379, 380, 389, 390, 401, 402, 419], "96": [6, 30, 32, 33, 36, 42, 43, 44, 49, 54, 63, 72, 84, 102], "tr": [6, 11, 23, 25, 33, 63, 68, 71, 108, 132, 144, 148, 165, 168, 174, 209, 269, 270, 271, 275, 276, 277], "altern": [6, 9, 16, 20, 22, 52, 54, 58, 66, 151, 152, 160, 168, 175, 255, 257, 258, 326, 421], "42": [6, 24, 33, 36, 42, 43, 48, 49, 59, 62, 91, 92, 100, 102, 104, 419], "block": [6, 33, 51, 56, 58, 63, 100, 101, 112, 155, 162, 174, 373, 408], "bi": 6, "syllab": 6, "word": [6, 14, 77, 94, 103, 105, 114, 155, 156, 163, 223, 225], "binaur": 6, "60": [6, 15, 33, 36, 40, 41, 42, 43, 44, 63, 99, 102, 105, 111, 222, 419], "fm00223_004": 6, "2t": 6, "siemen": 6, "magnetom": 6, "vision": 6, "system": [6, 23, 42, 43, 111, 155, 162, 171, 173, 191, 232, 234], "64": [6, 10, 11, 19, 21, 31, 33, 34, 36, 42, 43, 44, 47, 49, 66, 79, 84, 86, 94, 102, 105, 140, 145, 148, 173, 188, 191, 192, 195], "contigu": [6, 152, 162, 326], "64x64x64": 6, "3mm": 6, "took": [6, 43, 48, 92], "05": [6, 7, 12, 27, 30, 32, 33, 44, 51, 53, 73, 75, 76, 77, 79, 81, 96, 99, 165, 189, 190, 193, 198, 199, 200, 203, 204, 227, 230, 231, 233, 255, 257, 258, 260], "repeat": [6, 58, 66, 68, 155, 165, 269, 270, 271, 275, 276, 277], "arbitrarili": [6, 249], "subject_data": [6, 70, 71, 164], "abid": [6, 111, 127, 148, 163, 188], "bid": [6, 60, 72, 73, 97, 100, 109, 110, 120, 136, 139, 141, 143, 145, 148, 164, 168, 205, 210, 215, 228, 229, 241, 242, 265, 268, 278, 306, 307, 308, 315, 364, 368, 370, 381, 398, 399, 400], "organ": [6, 58, 111, 123, 136, 142, 144, 148, 163, 168, 170, 200, 204, 207, 280, 307, 326, 342, 405, 406, 420], "fetch_spm_auditori": [6, 70], "spm_auditori": [6, 230], "sub001": [6, 230, 231], "fm00223": 6, "fm00223_005": 6, "fm00223_006": 6, "fm00223_007": 6, "fm00223_008": 6, "fm00223_009": 6, "fm00223_010": 6, "fm00223_011": 6, "fm00223_012": 6, "fm00223_013": 6, "fm00223_014": 6, "fm00223_015": 6, "fm00223_016": 6, "fm00223_017": 6, "fm00223_018": 6, "fm00223_019": 6, "fm00223_020": 6, "fm00223_021": 6, "fm00223_022": 6, "fm00223_023": 6, "fm00223_024": 6, "fm00223_025": 6, "fm00223_026": 6, "fm00223_027": 6, "fm00223_028": 6, "fm00223_029": 6, "fm00223_030": 6, "fm00223_031": 6, "fm00223_032": 6, "fm00223_033": 6, "fm00223_034": 6, "fm00223_035": 6, "fm00223_036": 6, "fm00223_037": 6, "fm00223_038": 6, "fm00223_039": 6, "fm00223_040": 6, "fm00223_041": 6, "fm00223_042": 6, "fm00223_043": 6, "fm00223_044": 6, "fm00223_045": 6, "fm00223_046": 6, "fm00223_047": 6, "fm00223_048": 6, "fm00223_049": 6, "fm00223_050": 6, "fm00223_051": 6, "fm00223_052": 6, "fm00223_053": 6, "fm00223_054": 6, "fm00223_055": 6, "fm00223_056": 6, "fm00223_057": 6, "fm00223_058": 6, "fm00223_059": 6, "fm00223_060": 6, "fm00223_061": 6, "fm00223_062": 6, "fm00223_063": 6, "fm00223_064": 6, "fm00223_065": 6, "fm00223_066": 6, "fm00223_067": 6, "fm00223_068": 6, "fm00223_069": 6, "fm00223_070": 6, "fm00223_071": 6, "fm00223_072": 6, "fm00223_073": 6, "fm00223_074": 6, "fm00223_075": 6, "fm00223_076": 6, "fm00223_077": 6, "fm00223_078": 6, "fm00223_079": 6, "fm00223_080": 6, "fm00223_081": 6, "fm00223_082": 6, "fm00223_083": 6, "fm00223_084": 6, "fm00223_085": 6, "fm00223_086": 6, "fm00223_087": 6, "fm00223_088": 6, "fm00223_089": 6, "fm00223_090": 6, "fm00223_091": 6, "fm00223_092": 6, "fm00223_093": 6, "fm00223_094": 6, "fm00223_095": 6, "fm00223_096": 6, "fm00223_097": 6, "fm00223_098": 6, "fm00223_099": 6, "anatomi": [6, 42, 69, 75, 204], "plot_anat": [6, 15, 18, 50, 143, 148, 153, 376, 419], "cbar_tick_format": [6, 25, 140, 143, 148, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 366, 368, 369, 375, 376, 377, 379, 380], "0x7f135557df70": 6, "next": [6, 14, 54, 55, 58, 63, 64, 65, 66, 69, 70, 75, 78, 79, 80, 81, 108, 131, 134, 143, 148, 150, 161, 162, 163, 165, 171], "concaten": [6, 37, 47, 49, 53, 57, 100, 149, 174, 284, 290, 306, 390], "averag": [6, 9, 24, 30, 37, 49, 51, 70, 94, 111, 139, 142, 148, 152, 156, 157, 167, 168, 213, 221, 232, 238, 243, 244, 295, 300, 306, 373, 377, 388, 406], "activ": [6, 14, 15, 30, 32, 40, 41, 49, 64, 66, 69, 70, 71, 76, 77, 79, 80, 81, 100, 108, 111, 113, 149, 150, 153, 154, 155, 159, 160, 162, 163, 164, 165, 167, 168, 170, 171, 175, 182, 190, 198, 201, 220, 221, 222, 260, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 360, 390, 392, 420], "fmri_img": [6, 34, 36, 37, 64, 65, 66, 67, 69, 70, 71, 94, 108, 164], "must": [6, 34, 72, 94, 145, 148, 155, 156, 158, 160, 162, 163, 164, 165, 171, 173, 175, 181, 182, 184, 190, 212, 243, 244, 245, 246, 247, 248, 249, 250, 252, 256, 265, 278, 279, 280, 283, 289, 295, 298, 300, 305, 306, 309, 310, 312, 313, 315, 318, 320, 321, 322, 323, 324, 325, 326, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 367, 374, 376, 377, 378, 379, 380, 382, 384, 386, 388, 393, 396, 397, 399, 400, 402, 403, 406, 419], "descript": [6, 58, 112, 114, 120, 139, 143, 148, 163, 171, 173, 174, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 220, 223, 224, 225, 226, 233, 267, 280, 283, 287, 295, 300, 301, 307, 326, 421], "typic": [6, 72, 78, 79, 100, 152, 154, 156, 160, 163, 165, 168, 173, 174, 175, 234, 245, 246, 249, 255, 305, 316, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 374, 375, 376, 383, 388, 419], "event": [6, 60, 62, 63, 65, 66, 68, 69, 70, 71, 73, 100, 101, 108, 110, 111, 139, 140, 148, 155, 165, 166, 219, 265, 266, 267, 272, 367, 420, 421], "tsv": [6, 47, 53, 54, 55, 56, 58, 60, 62, 73, 101, 108, 110, 209, 305, 306, 307, 367], "read_tabl": [6, 65, 66, 69, 70, 71], "onset": [6, 33, 63, 65, 66, 68, 72, 100, 139, 148, 164, 231, 265, 266, 267, 269, 270, 271, 272, 275, 276, 277, 367], "durat": [6, 33, 63, 66, 68, 72, 164, 165, 173, 267, 272, 367], "trial_typ": [6, 33, 63, 65, 66, 72, 100, 101, 272], "84": [6, 30, 33, 36, 42, 43, 91, 100, 102, 111, 285, 306], "126": [6, 33, 41, 43, 56, 67, 91, 142, 148], "168": [6, 33, 41, 54, 55, 56, 58, 89, 91, 153], "210": [6, 33, 36, 41, 42, 44, 69, 72, 73, 102, 111, 213, 283, 402], "252": [6, 33, 41], "294": [6, 33, 41], "336": [6, 33, 41], "378": [6, 33], "420": [6, 33, 36, 42, 44, 102], "462": [6, 33], "12": [6, 19, 25, 27, 32, 33, 36, 40, 41, 42, 43, 44, 48, 49, 53, 54, 56, 59, 62, 63, 68, 70, 75, 77, 78, 80, 91, 98, 101, 102, 103, 105, 107, 109, 111, 115, 118, 120, 121, 123, 139, 144, 145, 148, 161, 162, 174, 175, 190, 192, 199, 201, 209, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 390], "504": [6, 33, 62], "13": [6, 30, 33, 36, 41, 42, 43, 44, 45, 56, 59, 62, 71, 77, 91, 102, 103, 107, 111, 115, 121, 148, 152, 160, 208, 227, 252, 256, 326], "546": [6, 11, 33, 84, 86], "14": [6, 18, 30, 33, 36, 42, 43, 53, 62, 67, 69, 70, 73, 76, 77, 82, 91, 92, 96, 102, 103, 105, 109, 111, 116, 118, 126, 128, 129, 130, 133, 136, 148, 160, 194, 200, 379], "588": [6, 33], "15": [6, 24, 30, 33, 36, 42, 43, 44, 48, 49, 51, 53, 58, 61, 62, 66, 72, 77, 78, 84, 88, 91, 94, 96, 102, 103, 105, 107, 111, 115, 119, 129, 133, 143, 148, 190, 202, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "630": [6, 33, 36, 38, 42, 45, 102], "firstlevelmodel": [6, 61, 64, 65, 66, 67, 70, 71, 100, 141, 143, 145, 148, 164, 268, 278, 305, 400], "design": [6, 33, 41, 44, 60, 61, 62, 64, 65, 67, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 101, 105, 108, 110, 111, 139, 140, 141, 143, 148, 155, 158, 162, 163, 165, 166, 167, 168, 218, 252, 255, 256, 257, 258, 263, 265, 266, 272, 274, 278, 279, 280, 281, 288, 294, 305, 308, 364, 365, 376, 381, 400, 421], "matrix": [6, 22, 33, 37, 40, 41, 44, 47, 50, 51, 53, 61, 62, 63, 64, 66, 69, 70, 71, 74, 75, 76, 77, 79, 80, 81, 82, 84, 91, 92, 100, 101, 103, 105, 108, 110, 120, 131, 136, 139, 148, 152, 153, 155, 156, 162, 165, 166, 167, 168, 169, 170, 173, 174, 175, 180, 181, 182, 183, 184, 185, 187, 223, 225, 243, 244, 245, 246, 248, 249, 250, 251, 252, 255, 256, 257, 258, 263, 265, 266, 272, 274, 278, 279, 280, 285, 295, 296, 298, 301, 305, 308, 309, 312, 315, 318, 320, 321, 323, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 364, 365, 373, 387, 388, 389, 400, 421], "first_level": [6, 33, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 78, 100, 101, 108, 141, 143, 145, 148, 164, 367, 400], "level": [6, 9, 10, 14, 15, 18, 21, 33, 39, 48, 49, 50, 51, 56, 63, 70, 71, 73, 75, 82, 87, 88, 97, 104, 105, 109, 111, 120, 139, 140, 145, 148, 151, 152, 156, 159, 162, 165, 166, 168, 171, 173, 179, 180, 181, 182, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 257, 258, 260, 261, 265, 268, 272, 274, 278, 279, 280, 281, 283, 288, 289, 294, 299, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 322, 324, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 363, 364, 365, 368, 370, 374, 375, 376, 377, 378, 379, 380, 381, 383, 387, 388, 389, 390, 395, 398, 399, 400, 402, 406, 419, 421], "t_r": [6, 11, 33, 49, 51, 53, 54, 55, 56, 58, 61, 62, 65, 66, 69, 70, 89, 91, 92, 99, 100, 108, 133, 144, 148, 175, 243, 244, 245, 246, 248, 249, 250, 251, 265, 267, 268, 272, 283, 310, 311, 312, 313, 314, 315, 316, 362, 388, 390, 402], "noise_model": [6, 33, 66, 265, 268, 274], "ar1": [6, 33, 66, 265, 268, 274], "covari": [6, 42, 46, 57, 58, 59, 61, 64, 69, 102, 110, 111, 129, 148, 150, 151, 153, 169, 180, 181, 182, 183, 184, 198, 209, 220, 252, 254, 255, 256, 257, 258, 309, 314, 326, 359, 363, 373, 381, 382, 421], "lag": [6, 47, 65, 66], "depend": [6, 14, 15, 39, 66, 89, 95, 100, 102, 105, 111, 120, 123, 128, 133, 136, 148, 156, 160, 162, 163, 165, 168, 171, 173, 188, 196, 197, 204, 209, 220, 243, 244, 245, 246, 248, 249, 250, 251, 252, 256, 265, 278, 280, 281, 288, 312, 315, 325, 326, 374, 388, 399, 400, 419], "rescal": [6, 33, 40, 80, 142, 148, 327, 329, 330, 365], "seri": [6, 33, 46, 47, 51, 56, 60, 66, 73, 92, 94, 95, 97, 109, 110, 111, 113, 120, 123, 140, 144, 148, 149, 151, 153, 155, 160, 165, 166, 172, 173, 174, 180, 215, 227, 228, 230, 233, 241, 250, 251, 252, 265, 268, 283, 284, 295, 300, 306, 309, 315, 316, 317, 320, 339, 354, 362, 365, 376, 392, 399, 403, 411, 421], "varianc": [6, 33, 40, 42, 48, 50, 55, 56, 57, 58, 66, 70, 80, 92, 103, 104, 136, 139, 140, 148, 155, 160, 162, 168, 175, 184, 243, 244, 245, 246, 250, 251, 253, 255, 257, 258, 261, 262, 265, 274, 278, 283, 289, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 388, 390, 393, 402, 403], "hrf_model": [6, 33, 61, 63, 65, 66, 69, 71, 108, 265, 267, 268, 272], "canon": [6, 50, 66, 71, 84, 126, 148, 168, 179, 250], "hrf": [6, 65, 66, 68, 69, 108, 143, 145, 148, 155, 166, 168, 265, 267, 269, 270, 271, 272, 275, 276, 277, 421], "dispers": [6, 66, 68, 164, 255, 257, 258, 265, 267, 269, 272, 275], "deriv": [6, 46, 59, 62, 68, 69, 71, 100, 101, 104, 108, 110, 140, 142, 143, 148, 154, 162, 164, 168, 169, 175, 188, 209, 250, 251, 265, 267, 268, 269, 271, 272, 275, 277, 278, 280, 291, 303, 304, 306, 307, 327, 328, 355, 362, 374, 376, 377, 381, 388], "drift_model": [6, 33, 63, 66, 70, 71, 164, 265, 268, 272], "cosin": [6, 33, 66, 69, 70, 71, 108, 120, 141, 148, 265, 268, 272, 306, 402], "drift": [6, 69, 70, 71, 100, 108, 265, 272, 306, 402], "slow": [6, 36, 44, 66, 161, 162, 163, 175, 419], "oscil": [6, 66, 111], "high_pass": [6, 33, 49, 51, 53, 54, 55, 56, 58, 61, 66, 71, 89, 91, 92, 99, 100, 133, 148, 175, 243, 244, 245, 246, 248, 249, 250, 251, 265, 268, 272, 283, 306, 307, 310, 311, 312, 313, 314, 315, 316, 388, 390, 401, 402], "hz": [6, 33, 66, 71, 175, 265, 272], "cutoff": [6, 66, 69, 71, 89, 108, 141, 148, 172, 243, 244, 245, 246, 248, 249, 283, 310, 311, 388, 390, 401, 402, 421], "frequenc": [6, 66, 118, 148, 175, 243, 244, 245, 246, 248, 249, 265, 272, 283, 306, 310, 311, 388, 390, 401, 402], "invers": [6, 46, 58, 59, 98, 110, 138, 148, 150, 151, 155, 162, 169, 172, 182, 187, 198, 209, 255, 257, 258, 262, 309, 314, 359, 363, 372, 373, 381, 382, 387, 421], "fmri_glm": [6, 64, 67, 70, 71, 164], "inspect": [6, 40, 48, 55, 66, 67, 70, 89, 92, 150, 155, 170, 265, 278], "repres": [6, 15, 20, 33, 35, 51, 52, 54, 55, 69, 76, 79, 94, 111, 128, 140, 148, 149, 150, 153, 154, 163, 165, 167, 168, 173, 174, 175, 192, 195, 209, 237, 238, 240, 265, 278, 287, 298, 309, 310, 311, 312, 313, 314, 315, 316, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 358, 363, 368, 372, 390, 393, 400, 404, 406, 419], "predictor": [6, 40, 164, 165, 257, 258, 307], "design_matrix": [6, 41, 61, 62, 65, 66, 69, 70, 71, 75, 76, 77, 78, 79, 80, 81, 108, 266, 272, 278, 279, 280, 308, 364, 365], "design_matrices_": [6, 65, 66, 70, 100], "formal": 6, "taken": [6, 66, 100, 156, 162, 268, 278, 280, 299, 310, 311, 313, 314, 316, 390], "implictili": 6, "plot_design_matrix": [6, 63, 65, 66, 73, 75, 78, 80, 100, 164, 167], "write": [6, 41, 64, 110, 114, 120, 143, 145, 148, 162, 163, 171, 305, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 398], "o": [6, 40, 41, 62, 64, 72, 86, 100, 101, 108, 111, 123, 148, 163, 188, 190, 200, 207, 220, 306], "outdir": [6, 72], "mkdir": [6, 64, 72], "join": [6, 62, 64, 86, 103, 108, 163, 406, 420], "output_fil": [6, 15, 23, 340, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380, 419], "png": [6, 9, 15, 23, 61, 169, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380, 419], "respons": [6, 60, 70, 71, 73, 79, 80, 110, 143, 148, 155, 164, 165, 168, 170, 171, 219, 265, 267, 269, 270, 271, 272, 275, 277, 364, 365, 376], "profil": [6, 162, 163, 252, 256], "region": [6, 10, 15, 16, 19, 23, 40, 42, 43, 44, 46, 48, 49, 52, 55, 56, 58, 59, 66, 70, 71, 83, 96, 99, 110, 111, 120, 121, 125, 127, 128, 131, 136, 139, 141, 143, 148, 149, 151, 154, 155, 161, 164, 165, 168, 170, 172, 174, 180, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 212, 221, 224, 250, 251, 288, 290, 293, 295, 296, 300, 302, 307, 309, 310, 311, 313, 314, 316, 339, 357, 358, 359, 360, 361, 363, 366, 373, 374, 375, 376, 378, 379, 381, 382, 398, 419, 421], "xlabel": [6, 25, 30, 32, 34, 42, 48, 49, 51, 55, 58, 68, 99, 174], "access": [6, 33, 48, 56, 61, 62, 64, 66, 75, 111, 113, 143, 148, 150, 154, 162, 163, 164, 172, 173, 175, 189, 190, 193, 198, 199, 200, 203, 204, 227, 230, 231, 233, 253, 340, 410, 421], "beta": [6, 26, 39, 42, 66, 71, 97, 109, 110, 111, 144, 164, 168, 215, 220, 243, 244, 245, 246, 252, 255, 256, 257, 258, 265, 268, 284, 309, 315, 316, 339, 365, 376], "role": [6, 143, 148], "potenti": [6, 55, 91, 94, 100, 111, 142, 148, 160, 163, 168, 171, 201, 280], "weight": [6, 29, 39, 42, 43, 44, 113, 114, 136, 148, 149, 156, 158, 159, 162, 163, 165, 175, 213, 223, 225, 243, 244, 245, 246, 248, 249, 262, 305, 382, 394, 421], "associ": [6, 14, 47, 72, 75, 77, 105, 120, 148, 155, 160, 165, 167, 168, 190, 228, 247, 253, 280, 306, 307, 326, 399, 406], "nutshel": 6, "combin": [6, 15, 40, 41, 102, 104, 111, 120, 142, 148, 155, 160, 165, 168, 175, 222, 243, 244, 245, 246, 248, 249, 250, 251, 265, 278, 306, 345, 346, 349, 350, 351, 352, 364], "consid": [6, 32, 39, 48, 53, 54, 55, 66, 68, 80, 92, 94, 102, 104, 113, 123, 136, 143, 148, 160, 163, 204, 243, 244, 245, 246, 248, 249, 250, 251, 252, 256, 265, 267, 268, 272, 278, 280, 287, 293, 304, 311, 312, 314, 315, 320, 323, 326, 330, 375, 388, 391, 393, 394], "two": [6, 14, 24, 25, 34, 40, 48, 55, 56, 58, 60, 66, 67, 73, 74, 77, 82, 86, 88, 89, 94, 98, 100, 101, 102, 108, 110, 114, 120, 128, 131, 136, 139, 140, 148, 149, 152, 154, 155, 157, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 175, 182, 186, 192, 211, 218, 231, 243, 244, 245, 246, 250, 251, 255, 257, 258, 265, 272, 278, 279, 280, 284, 290, 295, 298, 306, 307, 311, 314, 316, 326, 338, 365, 368, 370, 371, 376, 377, 378, 379, 380, 381, 386, 388, 390, 391, 392, 398, 399, 400, 405, 406, 419, 421], "isol": [6, 70, 71, 100, 155, 165], "active_minus_rest": 6, "plot_contrast_matrix": [6, 62, 65, 66], "axessubplot": [6, 65, 66], "label": [6, 9, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 47, 49, 52, 53, 54, 58, 65, 66, 68, 69, 83, 91, 94, 96, 98, 100, 102, 103, 108, 110, 111, 113, 120, 125, 128, 133, 136, 140, 141, 143, 145, 148, 150, 152, 155, 156, 158, 160, 163, 168, 173, 174, 175, 190, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 208, 212, 222, 243, 244, 245, 246, 247, 248, 249, 261, 265, 268, 272, 274, 279, 303, 306, 307, 310, 313, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 361, 362, 366, 368, 369, 373, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 404], "below": [6, 9, 16, 20, 22, 39, 44, 49, 52, 54, 58, 65, 70, 94, 111, 128, 148, 152, 155, 156, 160, 162, 163, 164, 165, 167, 174, 175, 181, 182, 184, 188, 209, 243, 244, 245, 246, 248, 249, 251, 303, 310, 311, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 368, 369, 371, 375, 376, 377, 380, 383, 388, 390, 401, 402, 419], "unit": [6, 15, 55, 57, 92, 103, 104, 111, 153, 155, 161, 162, 163, 175, 247, 257, 258, 280, 283, 310, 311, 312, 313, 314, 315, 316, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 401, 402], "account": [6, 66, 76, 94, 160, 171, 175, 306, 310, 311, 313, 314, 316, 390], "eff_map": 6, "compute_contrast": [6, 33, 61, 62, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77, 79, 80, 81, 100, 101, 108, 120, 148, 164, 265, 278, 280, 400], "output_typ": [6, 61, 64, 65, 66, 67, 70, 71, 75, 76, 77, 79, 80, 81, 100, 105, 265, 278, 326], "effect_s": [6, 67, 80, 100, 168, 253, 265, 278], "form": [6, 33, 40, 44, 49, 72, 105, 149, 150, 152, 153, 165, 168, 173, 180, 181, 182, 228, 229, 243, 244, 245, 246, 247, 248, 249, 250, 251, 260, 265, 268, 272, 278, 280, 281, 303, 304, 309, 310, 311, 312, 313, 314, 315, 316, 326, 370, 383, 387, 388, 389, 390, 399, 400], "scale": [6, 15, 41, 49, 54, 61, 68, 70, 71, 72, 94, 111, 114, 126, 133, 143, 148, 156, 160, 175, 192, 218, 223, 225, 237, 238, 240, 248, 249, 252, 255, 256, 257, 258, 260, 265, 273, 278, 280, 281, 310, 311, 312, 313, 314, 315, 316, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 387, 388, 389, 399, 400, 402, 406, 421], "gaussian": [6, 44, 79, 94, 111, 149, 162, 165, 175, 176, 181, 184, 300], "z_map": [6, 33, 61, 62, 64, 65, 66, 70, 71, 75, 76, 77, 79, 81, 101, 265, 278], "z_score": [6, 61, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77, 79, 80, 81, 108, 253, 265, 278], "top": [6, 12, 15, 17, 25, 44, 56, 63, 103, 139, 148, 163, 170, 174, 242, 363, 368, 369, 372, 374, 375, 376, 383, 419], "axial": [6, 14, 94, 265, 278, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 361, 363, 366, 368, 369, 372, 374, 375, 376, 400], "view": [6, 13, 14, 16, 22, 23, 33, 37, 42, 52, 54, 58, 61, 62, 64, 66, 71, 75, 84, 102, 130, 139, 141, 145, 148, 155, 160, 162, 170, 175, 243, 244, 245, 246, 250, 251, 298, 312, 315, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 371, 374, 377, 379, 380, 382, 383, 385, 388, 419, 421], "black_bg": [6, 13, 14, 36, 71, 142, 148, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 363, 366, 368, 369, 372, 374, 375, 376, 383, 384, 386], "minu": [6, 114, 165], "worri": [6, 24, 113], "valid": [6, 28, 32, 33, 36, 37, 40, 42, 44, 45, 51, 99, 102, 105, 106, 107, 110, 123, 126, 139, 143, 144, 148, 149, 151, 156, 159, 175, 182, 195, 212, 220, 243, 244, 245, 246, 247, 248, 249, 265, 266, 267, 272, 283, 287, 290, 295, 300, 301, 306, 307, 310, 313, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 386, 393, 399, 404, 405, 406, 421], "procedur": [6, 31, 76, 77, 79, 84, 87, 102, 150, 155, 160, 165, 167, 168, 218, 264, 280, 326, 402, 415], "arbitrari": [6, 48, 50, 65, 76, 165, 247, 278], "risk": 6, "aka": [6, 66, 108, 152, 165, 260], "control": [6, 8, 9, 11, 14, 15, 20, 23, 27, 33, 38, 40, 48, 56, 76, 79, 98, 110, 111, 121, 129, 130, 134, 136, 140, 148, 149, 153, 154, 155, 156, 159, 160, 162, 163, 165, 168, 172, 188, 216, 223, 225, 251, 260, 264, 265, 278, 281, 284, 295, 302, 306, 307, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 366, 368, 369, 375, 376, 377, 379, 380, 381, 387, 400, 406, 419, 421], "posit": [6, 14, 16, 17, 24, 48, 51, 58, 66, 71, 74, 79, 80, 81, 82, 84, 94, 99, 110, 111, 113, 139, 143, 148, 155, 160, 162, 165, 167, 168, 175, 181, 184, 188, 218, 220, 260, 265, 278, 280, 281, 302, 326, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 360, 361, 363, 366, 368, 369, 372, 374, 375, 376, 380, 381, 383, 384, 399, 400, 406, 419], "fpr": [6, 33, 81, 167, 168, 265, 278, 281, 400], "alpha": [6, 15, 23, 24, 37, 39, 40, 44, 48, 57, 68, 75, 76, 77, 81, 106, 145, 149, 154, 161, 165, 181, 182, 184, 248, 249, 251, 255, 257, 258, 260, 264, 265, 278, 281, 302, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 363, 368, 372, 374, 375, 377, 379, 380, 400, 419], "certain": [6, 56, 133, 148, 155, 165, 223, 298, 374], "g": [6, 9, 14, 24, 30, 31, 40, 42, 43, 47, 48, 49, 55, 61, 64, 67, 68, 92, 94, 99, 100, 105, 111, 114, 141, 145, 148, 150, 154, 160, 162, 163, 164, 165, 167, 168, 170, 174, 175, 193, 203, 220, 227, 243, 244, 245, 246, 250, 257, 258, 265, 272, 278, 282, 285, 302, 306, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 363, 374, 377, 378, 379, 380, 382, 383, 384, 386, 393, 394, 396, 406, 419], "001": [6, 41, 43, 44, 62, 76, 79, 80, 81, 101, 165, 181, 182, 184, 248, 249, 265, 278, 281, 400], "chanc": [6, 33, 37, 51, 77, 79, 140, 148, 159, 160, 165, 421], "declar": [6, 165, 181, 184], "inact": [6, 165, 171], "threshold_stats_img": [6, 75, 77, 81, 167, 302], "_": [6, 22, 30, 37, 42, 49, 51, 62, 75, 77, 80, 94, 98, 100, 101, 102, 105, 106, 108, 120, 141, 145, 148, 155, 163, 228, 229, 268, 305], "height_control": [6, 75, 77, 81, 265, 278, 281, 400], "uncorrect": [6, 62, 76, 79, 80, 81, 101], "291": [6, 33, 41, 66, 72], "n_voxel": [6, 55, 77, 79, 92, 98, 155, 158, 165, 250, 253, 255, 257, 258, 261, 265, 273, 274, 390], "ten": [6, 81, 388], "hundr": [6, 49, 388], "conserv": [6, 77, 79, 102, 160, 165, 181, 186], "solut": [6, 65, 66, 149, 150, 156, 161, 162, 170, 173, 251], "famili": [6, 81, 102, 120, 130, 145, 148, 160, 168, 280, 326, 390, 392], "wise": [6, 15, 40, 47, 55, 81, 94, 100, 102, 120, 145, 148, 160, 164, 168, 175, 243, 244, 245, 246, 280, 326], "probabl": [6, 11, 21, 31, 32, 39, 43, 48, 61, 66, 77, 79, 81, 92, 94, 150, 160, 162, 165, 168, 170, 171, 196, 197, 227], "sai": [6, 65, 70, 98, 114, 165, 255], "bonferroni": [6, 81, 102, 105, 106, 160, 165, 168, 265, 278, 281, 400], "934": [6, 63, 73], "inde": [6, 42, 49, 86, 149, 150, 158, 165, 266, 419], "popular": [6, 48, 169, 173, 243, 244], "proport": [6, 49, 51, 70, 74, 82, 99, 110, 153, 165, 167, 168, 218, 257, 260, 278, 372, 376, 381], "discoveri": [6, 23, 76, 77, 79, 81, 111, 165, 168, 170, 233], "among": [6, 79, 165, 168, 192, 243, 244, 245, 246], "fdr": [6, 75, 77, 81, 167, 168, 264, 265, 278, 281, 400], "904": 6, "discard": [6, 114, 165, 187, 223, 242, 268, 303, 320, 323, 406], "small": [6, 18, 49, 51, 58, 64, 65, 86, 99, 102, 103, 122, 124, 125, 148, 152, 153, 160, 162, 163, 170, 171, 247, 253, 283, 374, 375, 388, 391, 402, 406, 419], "cluster": [6, 19, 31, 32, 33, 39, 46, 59, 62, 66, 74, 79, 81, 82, 86, 91, 110, 111, 120, 136, 139, 143, 144, 145, 148, 151, 157, 158, 160, 165, 167, 168, 169, 170, 192, 193, 209, 218, 245, 246, 260, 265, 274, 278, 280, 281, 288, 290, 295, 302, 313, 326, 346, 366, 373, 375, 376, 381, 387, 388, 389, 393, 395, 396, 399, 400, 421], "remov": [6, 30, 32, 33, 35, 40, 41, 42, 48, 50, 77, 86, 89, 103, 104, 105, 106, 111, 113, 118, 120, 123, 127, 128, 129, 131, 133, 134, 136, 138, 139, 141, 143, 148, 156, 161, 162, 171, 172, 174, 227, 229, 265, 281, 283, 287, 289, 300, 302, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 322, 323, 326, 374, 390, 391, 398, 401, 402, 403, 421], "cluster_threshold": [6, 61, 70, 81, 143, 148, 265, 278, 281, 302, 399, 400], "clean_map": 6, "zscore": [6, 136, 148, 250, 310, 311, 312, 313, 314, 315, 316, 402], "active_vs_rest_z_map": 6, "active_vs_rest_eff_map": 6, "furthermor": [6, 42, 55], "extract": [6, 22, 28, 30, 32, 40, 43, 45, 46, 48, 49, 59, 60, 62, 72, 73, 83, 86, 92, 94, 96, 98, 100, 101, 104, 110, 114, 119, 120, 121, 128, 129, 131, 132, 133, 134, 140, 144, 145, 148, 151, 152, 155, 158, 166, 168, 170, 172, 180, 189, 195, 196, 198, 201, 206, 207, 209, 212, 220, 224, 227, 243, 244, 245, 246, 247, 250, 251, 265, 272, 278, 279, 280, 289, 290, 292, 295, 302, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 323, 339, 358, 359, 360, 361, 363, 372, 373, 374, 376, 381, 382, 384, 388, 390, 391, 392, 393, 394, 396, 398, 400, 403, 406, 415, 419, 421], "report": [6, 49, 53, 54, 56, 70, 89, 91, 92, 103, 111, 136, 141, 143, 145, 148, 165, 166, 171, 175, 203, 260, 265, 278, 310, 311, 313, 314, 315, 326, 377, 379, 380, 390, 420], "tabl": [6, 33, 62, 70, 91, 101, 144, 148, 307, 399], "get_clusters_t": [6, 62, 70, 140, 144, 145, 148], "stat_threshold": [6, 70, 399], "20": [6, 7, 16, 21, 24, 27, 33, 36, 39, 42, 43, 44, 48, 50, 52, 53, 54, 57, 58, 62, 70, 72, 78, 80, 81, 82, 91, 94, 100, 102, 103, 105, 106, 111, 118, 121, 126, 148, 149, 153, 155, 192, 201, 220, 243, 244, 245, 246, 248, 249, 250, 251, 406], "id": [6, 33, 62, 70, 71, 103, 107, 114, 188, 190, 199, 200, 203, 223, 225, 233, 265, 399], "y": [6, 14, 15, 24, 31, 33, 34, 35, 36, 37, 40, 41, 42, 44, 52, 54, 58, 62, 70, 71, 84, 92, 94, 101, 102, 105, 106, 114, 128, 130, 133, 145, 148, 155, 156, 160, 168, 171, 174, 175, 180, 181, 182, 198, 221, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 265, 273, 274, 278, 280, 285, 309, 310, 311, 312, 313, 314, 315, 316, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 360, 361, 363, 366, 368, 369, 372, 374, 375, 376, 377, 378, 379, 380, 383, 386, 387, 388, 389, 390, 391, 399, 400, 419], "peak": [6, 33, 62, 64, 67, 70, 156, 158, 162, 357, 390, 392, 399], "stat": [6, 23, 33, 62, 64, 68, 76, 79, 94, 101, 103, 107, 108, 111, 145, 148, 166, 174, 181, 184, 253, 265, 278, 305, 380, 384, 386, 399, 400, 419], "size": [6, 9, 15, 22, 23, 26, 33, 40, 44, 48, 49, 53, 62, 69, 77, 79, 80, 81, 84, 91, 94, 102, 103, 105, 108, 123, 133, 134, 136, 143, 148, 153, 160, 161, 162, 165, 220, 227, 265, 278, 280, 281, 302, 310, 311, 313, 314, 318, 321, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 363, 372, 373, 377, 379, 380, 382, 385, 387, 388, 389, 390, 391, 392, 399, 400, 406], "mm3": [6, 33, 62, 91, 390, 392, 399], "811979": 6, "4050": [6, 102], "1a": [6, 33, 62], "63": [6, 32, 33, 36, 42, 43, 44, 62, 77, 79, 93, 102, 111, 191, 199], "36": [6, 15, 16, 17, 33, 36, 42, 43, 62, 90, 91, 93, 102, 130, 133, 148, 192, 419], "601922": 6, "1b": [6, 62], "435063": 6, "1c": [6, 62], "39": [6, 15, 33, 36, 42, 43, 44, 51, 54, 72, 91, 102, 121, 123, 126, 148, 191, 198, 209], "364058": 6, "605128": 6, "1512": 6, "2a": [6, 62], "45": [6, 10, 27, 31, 32, 33, 34, 42, 43, 45, 55, 62, 91, 102, 105, 106], "590200": 6, "27": [6, 15, 16, 17, 33, 36, 42, 43, 44, 62, 64, 67, 82, 90, 91, 93, 102, 103, 111, 307, 390, 392, 419], "253889": 6, "972": 6, "3a": [6, 62, 111, 203, 232], "51": [6, 9, 33, 36, 42, 43, 48, 53, 62, 101, 102, 109, 111, 154, 192, 250], "968355": 6, "3b": 6, "54": [6, 33, 36, 42, 43, 44, 62, 91, 100, 102, 111, 192, 213, 238], "565609": 6, "087451": 6, "1188": 6, "18": [6, 25, 27, 30, 33, 36, 41, 42, 43, 44, 45, 55, 58, 62, 72, 91, 102, 103, 107, 111, 116, 126, 133, 143, 148, 175, 209, 220, 247, 377, 379, 380, 419], "807510": 6, "594": [6, 33, 48, 59], "5a": [6, 33, 62], "21": [6, 22, 33, 36, 42, 43, 48, 54, 59, 62, 63, 66, 77, 91, 102, 103, 105, 123, 141, 148, 233], "646352": 6, "5b": [6, 33, 62], "33": [6, 33, 36, 42, 43, 44, 62, 72, 91, 102, 111, 193, 209], "416271": 6, "57": [6, 33, 42, 43, 44, 62, 91, 102, 105, 111, 115, 118, 133, 148, 192], "710963": 6, "702": [6, 33], "6a": [6, 62], "633746": 6, "6b": 6, "66": [6, 16, 17, 33, 36, 42, 43, 62, 90, 92, 93, 102], "796135": 6, "16": [6, 25, 30, 32, 33, 34, 35, 36, 39, 42, 43, 44, 47, 48, 49, 54, 59, 62, 66, 68, 73, 76, 77, 79, 80, 84, 91, 102, 103, 105, 134, 141, 148, 162, 174, 199, 311, 314, 390, 419], "6c": 6, "69": [6, 33, 36, 42, 43, 44, 48, 72, 79, 102], "254544": 6, "17": [6, 13, 15, 27, 30, 32, 33, 36, 42, 43, 44, 47, 55, 59, 62, 77, 80, 91, 102, 103, 111, 133, 148, 162, 190, 200, 204, 220], "93": [6, 30, 32, 33, 36, 42, 43, 44, 77, 91, 102, 194], "522477": 6, "621": [6, 33], "7a": [6, 33, 62], "99": [6, 12, 30, 32, 33, 42, 43, 44, 58, 102, 142, 148, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "713852": 6, "19": [6, 12, 27, 33, 36, 42, 43, 44, 53, 62, 77, 89, 91, 96, 102, 103, 107, 109, 111, 120, 121, 123, 136, 148, 189, 190, 198, 199, 200, 203, 204, 227, 230, 231, 257, 258], "7b": 6, "90": [6, 9, 12, 22, 30, 32, 33, 36, 42, 43, 44, 47, 50, 53, 56, 63, 77, 79, 91, 102, 103, 105, 111, 121, 134, 142, 148, 153, 306, 307, 383, 403, 419], "270733": 6, "7c": 6, "085568": 6, "24": [6, 33, 36, 42, 43, 44, 51, 59, 61, 62, 70, 73, 79, 91, 102, 103, 141, 148, 265, 267, 268, 272, 306], "331806": 6, "648": [6, 33, 62], "22": [6, 33, 36, 42, 43, 44, 62, 73, 91, 102, 103, 107, 111, 123, 134, 143, 148, 194, 285], "8a": [6, 33], "700088": 6, "23": [6, 33, 36, 42, 43, 44, 62, 65, 71, 72, 73, 82, 91, 98, 100, 102, 103, 109, 111, 192, 201, 249], "8b": 6, "037845": 6, "8c": 6, "527477": 6, "25": [6, 15, 30, 32, 33, 36, 40, 41, 42, 43, 44, 45, 62, 77, 91, 94, 95, 98, 102, 103, 105, 109, 115, 148, 150, 220, 255, 257, 258, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 374, 382, 384, 385, 386], "835099": 6, "837": 6, "26": [6, 30, 33, 36, 42, 43, 44, 45, 61, 62, 72, 75, 81, 82, 91, 102, 103, 126, 148, 391], "9a": 6, "615642": 6, "9b": 6, "091568": 6, "to_csv": [6, 72], "baselin": [6, 30, 32, 111, 139, 140, 148, 156, 158, 191, 253, 273], "anoth": [6, 39, 66, 69, 79, 89, 125, 130, 148, 155, 162, 163, 165, 170, 172, 173, 180, 248, 249, 284, 285, 304, 398, 419, 421], "seek": [6, 77, 105, 154, 374], "whether": [6, 9, 70, 89, 94, 102, 134, 148, 155, 163, 165, 171, 175, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 209, 212, 213, 214, 218, 220, 221, 222, 223, 225, 227, 233, 250, 251, 262, 280, 281, 287, 302, 309, 310, 311, 312, 315, 318, 319, 320, 322, 323, 326, 327, 329, 330, 368, 376, 377, 378, 380, 388, 390, 399, 400, 402, 403], "possibli": [6, 66, 175], "three": [6, 14, 19, 24, 32, 40, 49, 63, 65, 66, 75, 89, 94, 111, 134, 142, 148, 162, 163, 171, 173, 209, 265, 278, 298, 300, 337, 339, 342, 356, 361, 363, 366, 367, 368, 369, 372, 374, 375, 376, 400, 406], "higher": [6, 64, 67, 113, 128, 148, 149, 160, 165, 181, 201, 243, 244, 245, 246, 248, 249, 250, 251, 265, 278, 284, 295, 310, 311, 312, 313, 314, 315, 316, 388, 389, 390, 401], "dimension": [6, 26, 49, 71, 94, 123, 140, 145, 148, 162, 170, 186, 187, 195, 201, 220, 250, 251, 253, 284, 325, 387, 388, 389], "explain": [6, 40, 42, 48, 56, 66, 70, 139, 148, 152, 155, 163, 165, 170, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406], "might": [6, 34, 61, 104, 154, 158, 160, 165, 168, 171, 173, 194, 209, 272, 301, 307, 318, 319, 320, 322, 323, 386], "specif": [6, 14, 15, 16, 17, 30, 32, 33, 48, 49, 61, 62, 63, 64, 65, 66, 67, 69, 71, 76, 79, 80, 84, 94, 101, 108, 111, 112, 117, 126, 139, 145, 148, 149, 152, 153, 154, 155, 156, 158, 160, 163, 165, 167, 168, 170, 171, 172, 175, 210, 220, 225, 228, 229, 253, 255, 257, 258, 279, 283, 303, 305, 311, 314, 326, 358, 377, 378, 379, 380, 386, 390, 402, 404, 405, 406, 419, 421], "exactli": [6, 84, 94, 98, 108, 162, 163, 243, 244, 245, 246, 247, 303, 383, 406], "effects_of_interest": [6, 64, 70, 71], "vstack": [6, 40, 41, 58, 70, 71, 75, 80, 103], "easier": [6, 66, 122, 127, 142, 148, 154, 155, 162, 163], "oop": 6, "lot": [6, 65, 71, 86, 118, 133, 136, 148, 149, 155, 156, 162, 163, 170, 184], "non": [6, 15, 39, 42, 50, 56, 65, 66, 68, 77, 79, 91, 94, 102, 103, 112, 129, 133, 136, 140, 141, 143, 144, 148, 149, 153, 154, 160, 161, 162, 163, 167, 168, 170, 175, 193, 220, 227, 243, 244, 245, 246, 250, 255, 257, 258, 265, 283, 287, 292, 298, 300, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 361, 375, 376, 377, 379, 380, 390, 396, 402, 419, 421], "neural": [6, 68, 111, 154, 165, 168, 170, 175, 210, 228, 247], "ventricl": 6, "arteri": 6, "396": [6, 7, 33], "301": [6, 7, 33, 41], "plot_single_subject_single_run": [6, 7], "815": 7, "execut": [7, 27, 45, 59, 73, 82, 87, 96, 109, 110, 163, 175, 298, 377, 419, 420], "auto_examples_00_tutori": 7, "00": [7, 27, 30, 32, 33, 36, 42, 44, 45, 48, 53, 59, 73, 82, 89, 96, 102, 105, 109], "977": 7, "06": [7, 22, 23, 27, 30, 32, 33, 36, 91, 96, 109, 111, 192, 202, 247, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 376, 383], "glass": [8, 9, 27, 47, 61, 107, 110, 126, 127, 128, 130, 131, 136, 139, 148, 169, 226, 234, 265, 278, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 368, 372, 376, 381, 382, 385, 400, 419], "megatrawl": [8, 27, 110, 111, 123, 148, 220, 373, 381], "connectom": [8, 12, 22, 27, 46, 48, 49, 51, 54, 56, 57, 59, 99, 110, 111, 116, 121, 125, 126, 130, 133, 134, 136, 139, 141, 148, 151, 153, 154, 168, 169, 170, 175, 188, 195, 198, 204, 206, 207, 209, 220, 250, 251, 290, 307, 309, 310, 311, 313, 314, 316, 339, 358, 359, 360, 361, 363, 372, 373, 374, 376, 381, 382, 383, 385, 390, 421], "atla": [8, 11, 27, 46, 48, 50, 59, 83, 91, 94, 96, 110, 111, 114, 119, 124, 125, 127, 128, 129, 130, 133, 136, 139, 140, 141, 142, 144, 145, 148, 151, 153, 162, 168, 174, 175, 180, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 223, 232, 290, 302, 309, 310, 311, 313, 314, 339, 358, 359, 360, 362, 363, 373, 374, 375, 376, 379, 381, 382, 383, 384, 386, 390, 391, 392, 398, 405, 415, 419, 421], "multiscal": [8, 27, 40, 41, 110, 111, 124, 148, 192, 222, 375, 381], "parcel": [8, 9, 22, 23, 27, 46, 59, 110, 111, 114, 124, 128, 131, 132, 133, 136, 143, 145, 148, 151, 168, 169, 170, 175, 180, 190, 192, 193, 194, 196, 197, 198, 200, 202, 204, 209, 220, 223, 288, 290, 295, 306, 307, 309, 313, 346, 358, 359, 363, 366, 373, 375, 381, 390, 391, 419, 421], "colormap": [8, 19, 21, 23, 27, 86, 110, 128, 131, 132, 133, 134, 136, 141, 148, 204, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 361, 362, 363, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 421], "probabilist": [8, 27, 46, 51, 59, 99, 110, 111, 133, 144, 148, 151, 168, 174, 175, 180, 191, 193, 195, 196, 197, 198, 199, 201, 209, 213, 290, 309, 314, 339, 358, 359, 363, 373, 374, 375, 376, 381, 382, 394, 398, 419, 421], "mode": [8, 14, 16, 21, 27, 55, 60, 73, 83, 94, 96, 110, 111, 126, 131, 134, 140, 145, 148, 163, 164, 169, 174, 175, 189, 195, 198, 201, 220, 223, 225, 260, 265, 272, 290, 309, 314, 316, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 360, 371, 374, 376, 381, 390, 398, 400, 421], "msdl": [8, 21, 27, 52, 54, 110, 150, 174, 198, 290, 339, 358, 374, 376, 381, 419], "global": [8, 27, 110, 111, 139, 148, 162, 173, 188, 189, 200, 213, 234, 250, 251, 284, 296, 306, 307, 320, 362, 388], "carpet": [8, 27, 110, 139, 148, 189, 213, 284, 296, 320, 362], "haxbi": [8, 15, 16, 27, 28, 45, 94, 102, 110, 111, 113, 127, 128, 148, 159, 161, 169, 173, 175, 212, 243, 288, 290, 295, 309, 315, 354, 361, 373, 376, 381, 383, 419, 421], "technic": [8, 27, 64, 67, 100, 110, 149, 161, 162, 220, 227, 252, 256, 380, 381, 406], "illustr": [8, 27, 49, 66, 67, 68, 85, 90, 93, 101, 108, 110, 155, 163, 174, 175, 380, 381, 406], "surfac": [8, 12, 27, 28, 45, 55, 60, 73, 97, 109, 110, 111, 113, 128, 130, 132, 133, 134, 136, 139, 140, 143, 145, 148, 166, 168, 169, 170, 194, 202, 212, 215, 219, 226, 232, 233, 253, 261, 268, 272, 274, 290, 326, 340, 363, 368, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 421], "scheme": [8, 27, 29, 33, 36, 37, 98, 110, 139, 148, 149, 155, 156, 158, 162, 182, 243, 244, 245, 246, 326, 380, 381, 406], "seed": [8, 27, 46, 48, 59, 61, 100, 110, 133, 145, 148, 163, 164, 172, 202, 209, 232, 233, 245, 246, 265, 272, 274, 309, 315, 316, 326, 339, 376, 379, 380, 381, 382, 385, 390, 392, 404, 419, 421], "connect": [8, 22, 26, 27, 49, 50, 58, 59, 88, 94, 97, 109, 111, 121, 126, 128, 129, 136, 139, 144, 148, 150, 152, 154, 163, 164, 165, 168, 169, 170, 174, 180, 181, 182, 188, 192, 198, 200, 201, 202, 204, 209, 215, 220, 232, 233, 265, 268, 281, 284, 292, 302, 306, 307, 309, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 339, 360, 363, 365, 373, 376, 379, 380, 381, 382, 388, 391, 392, 404, 419, 420, 421], "cortic": [8, 23, 24, 27, 28, 45, 55, 64, 67, 69, 110, 111, 128, 130, 133, 139, 148, 150, 164, 169, 194, 202, 204, 208, 212, 213, 232, 290, 363, 379, 380, 381, 382, 383, 384, 385, 386, 405, 406, 421], "option": [8, 9, 13, 15, 21, 23, 27, 42, 51, 56, 68, 72, 89, 102, 105, 106, 110, 113, 118, 120, 126, 128, 129, 130, 131, 136, 139, 140, 141, 142, 143, 145, 148, 150, 155, 157, 163, 164, 168, 171, 173, 175, 180, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 260, 261, 262, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 289, 293, 295, 296, 297, 298, 299, 300, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 419], "onto": [9, 16, 23, 40, 50, 69, 128, 148, 153, 163, 169, 173, 319, 322, 365, 374, 419], "vol_to_surf": [9, 37, 69, 108, 130, 139, 141, 148, 164, 371, 377, 378, 379, 380, 384, 419], "plot_surf_stat_map": [9, 23, 24, 27, 37, 69, 108, 128, 130, 132, 136, 139, 143, 144, 145, 148, 164, 371, 377, 378, 421], "add": [9, 14, 15, 20, 40, 41, 50, 56, 63, 69, 102, 114, 119, 120, 126, 128, 129, 131, 133, 136, 141, 145, 148, 153, 155, 158, 160, 163, 168, 171, 182, 199, 200, 223, 225, 241, 283, 306, 315, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 382, 384, 386, 402, 419], "contour": [9, 15, 18, 21, 48, 50, 87, 88, 128, 136, 139, 141, 145, 148, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 374, 375, 378, 421], "plot_surf_contour": [9, 139, 148], "stat_img": [9, 13, 14, 15, 16, 90, 93, 260, 265, 278, 281, 399, 400], "fsaverag": [9, 22, 23, 24, 37, 62, 69, 108, 133, 141, 148, 232, 371, 384, 406, 419], "fetch_surf_fsaverag": [9, 22, 23, 37, 69, 108, 133, 139, 141, 145, 148, 164, 202, 371, 377, 378, 379, 380, 384, 406, 419], "textur": [9, 69, 108, 406], "pial_right": [9, 69, 108, 232, 371, 384, 419], "fig": [9, 11, 18, 24, 38, 40, 41, 42, 49, 57, 63, 65, 66, 68, 79, 91, 100, 101, 105, 106, 371, 377, 419], "infl_right": [9, 69, 108, 232, 371, 384], "hemi": [9, 22, 23, 37, 69, 108, 377, 379, 380, 419], "right": [9, 12, 20, 22, 25, 32, 40, 44, 50, 58, 63, 65, 66, 69, 72, 76, 79, 80, 86, 94, 98, 108, 126, 131, 136, 139, 141, 148, 152, 153, 159, 163, 170, 174, 188, 194, 196, 197, 202, 216, 218, 226, 232, 233, 245, 246, 265, 278, 279, 297, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 361, 363, 364, 366, 368, 369, 371, 372, 373, 374, 375, 376, 377, 379, 380, 384, 400, 419, 421], "hemispher": [9, 22, 23, 37, 58, 79, 86, 94, 108, 126, 127, 131, 148, 153, 174, 194, 202, 203, 232, 233, 265, 278, 301, 335, 358, 363, 368, 371, 372, 377, 379, 380, 384, 400, 419], "bg_map": [9, 22, 23, 37, 69, 108, 377, 379, 380, 386, 419], "sulc_right": [9, 69, 108, 232, 371, 384, 419], "recent": [9, 127, 130, 131, 133, 143, 148, 154, 171], "version": [9, 19, 20, 22, 32, 35, 36, 40, 41, 42, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 64, 67, 70, 71, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 118, 120, 121, 123, 126, 127, 128, 129, 130, 131, 133, 135, 136, 139, 141, 142, 143, 144, 145, 148, 161, 162, 163, 171, 173, 175, 180, 186, 187, 188, 190, 192, 195, 197, 199, 200, 202, 203, 204, 208, 209, 210, 214, 223, 225, 227, 228, 229, 232, 233, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 249, 250, 251, 265, 274, 278, 280, 282, 283, 287, 292, 293, 294, 299, 302, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 319, 322, 326, 362, 373, 374, 377, 379, 380, 387, 388, 389, 390, 392, 396, 399, 402, 406, 419], "instal": [9, 110, 120, 128, 133, 136, 143, 144, 148, 170, 171, 196, 197, 285, 311, 314, 377, 379, 380, 390, 419], "configur": [9, 15, 163, 171, 174, 175, 180, 250, 251, 265, 278, 307, 309, 310, 311, 312, 313, 314, 315, 316, 387, 388, 389, 390], "instead": [9, 32, 35, 36, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 66, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 120, 121, 123, 126, 127, 129, 130, 131, 133, 136, 140, 142, 143, 144, 145, 148, 161, 162, 163, 164, 174, 175, 227, 249, 255, 326], "graph_object": 9, "noqa": 9, "f401": 9, "except": [9, 49, 52, 53, 57, 58, 63, 78, 100, 103, 140, 143, 148, 161, 249, 293, 326], "importerror": [9, 52, 53, 57, 58, 63, 78, 136, 148], "f": [9, 29, 34, 40, 41, 42, 64, 66, 71, 72, 75, 80, 98, 100, 102, 105, 106, 108, 111, 155, 158, 160, 161, 164, 190, 201, 206, 208, 210, 213, 220, 228, 243, 244, 245, 246, 253, 254, 255, 257, 258, 261, 265, 266, 278, 298, 299, 305, 306, 307, 317, 325, 393, 396], "specifi": [9, 14, 15, 32, 48, 50, 56, 61, 62, 66, 69, 71, 75, 78, 79, 80, 81, 84, 86, 89, 94, 95, 101, 107, 108, 114, 119, 130, 133, 134, 136, 139, 140, 141, 142, 143, 145, 148, 149, 150, 160, 162, 164, 165, 171, 173, 174, 175, 196, 197, 201, 223, 224, 226, 228, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 249, 250, 251, 255, 257, 258, 261, 265, 268, 272, 273, 274, 278, 279, 283, 287, 295, 298, 300, 306, 310, 311, 317, 318, 320, 321, 323, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 366, 368, 369, 371, 373, 374, 375, 376, 377, 379, 380, 383, 385, 388, 390, 400, 401, 402, 406, 419], "js_plotting_util": [9, 133, 148], "81": [9, 33, 36, 41, 42, 43, 44, 102, 116, 148], "vmin": [9, 36, 40, 44, 49, 50, 52, 53, 54, 56, 57, 58, 80, 84, 118, 134, 136, 148, 153, 361, 362, 366, 368, 369, 374, 375, 376, 377, 379, 380, 383, 384, 386], "chosen": [9, 22, 66, 100, 162, 180, 377, 380, 383, 384, 386, 406], "symmetr": [9, 19, 47, 79, 129, 148, 162, 186, 187, 192, 196, 197, 213, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 371, 376, 377, 380, 382, 383, 384, 386], "matplolib": 9, "With": [9, 14, 32, 56, 78, 89, 158, 162, 165, 181, 184, 261, 307, 402, 405, 420], "custom": [9, 15, 23, 47, 68, 133, 141, 143, 148, 160, 172, 265, 267, 272, 340, 377, 398, 419, 421], "plotlysurfacefigur": [9, 143, 148, 377], "similar": [9, 23, 24, 30, 48, 55, 79, 94, 100, 101, 113, 121, 133, 134, 136, 143, 148, 149, 152, 154, 156, 157, 160, 167, 168, 175, 245, 246, 307], "api": [9, 44, 104, 120, 143, 145, 163, 171, 180, 250, 251, 265, 278, 309, 310, 311, 312, 313, 314, 315, 316, 322, 387, 388, 389, 390, 421], "static": [9, 328, 383], "requir": [9, 20, 36, 42, 47, 55, 63, 68, 69, 72, 75, 78, 93, 114, 121, 126, 128, 130, 139, 143, 144, 148, 150, 153, 158, 160, 162, 163, 165, 168, 170, 171, 173, 174, 175, 182, 227, 281, 301, 306, 307, 311, 314, 326, 390, 391, 419, 420], "kaleido": [9, 143, 148, 377, 379, 380, 419, 420], "uncom": [9, 16, 22, 52, 54, 58], "savefig": [9, 15, 41, 55, 61, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 363, 366, 368, 369, 372, 374, 375, 376, 419], "right_hemispher": 9, "plot_glass_brain": [9, 13, 14, 62, 79, 80, 101, 105, 107, 126, 136, 144, 145, 148, 167, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 376, 419], "plot_ab": [9, 14, 62, 79, 80, 101, 105, 330, 368, 419], "rang": [9, 10, 15, 18, 21, 23, 41, 44, 47, 48, 49, 50, 53, 55, 57, 62, 68, 70, 78, 79, 80, 87, 88, 91, 95, 100, 102, 105, 126, 130, 140, 148, 162, 163, 181, 184, 195, 282, 302, 368, 376, 380, 382, 383, 384, 386], "xslicer": [9, 15, 348, 354, 356], "0x7f13545f66a0": 9, "destrieux_atla": [9, 22, 23], "fetch_atlas_surf_destrieux": [9, 22, 23, 128, 148, 419], "map_right": [9, 202], "regions_dict": 9, "b": [9, 14, 15, 23, 30, 40, 41, 49, 56, 58, 72, 91, 111, 114, 163, 171, 190, 194, 200, 201, 204, 210, 220, 228, 232, 256, 306, 307, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 419], "g_postcentr": 9, "postcentr": [9, 91], "gyru": [9, 91, 203], "g_precentr": 9, "precentr": [9, 91], "indic": [9, 23, 30, 32, 41, 50, 54, 66, 72, 79, 86, 125, 128, 133, 148, 153, 160, 168, 171, 173, 188, 190, 191, 194, 196, 197, 199, 200, 203, 204, 212, 223, 230, 231, 243, 244, 245, 246, 248, 249, 250, 251, 265, 284, 296, 298, 299, 301, 309, 311, 312, 313, 314, 315, 316, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 366, 369, 374, 375, 376, 377, 378, 379, 380, 383, 386, 390, 392, 399], "regions_indic": 9, "legend": [9, 18, 30, 32, 34, 42, 43, 49, 58, 68, 91, 378], "color": [9, 14, 15, 18, 21, 24, 30, 32, 34, 49, 50, 51, 70, 86, 88, 134, 136, 139, 141, 145, 148, 152, 153, 163, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 366, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 419], "k": [9, 18, 22, 30, 32, 34, 35, 41, 42, 49, 51, 68, 81, 84, 91, 98, 111, 155, 158, 160, 162, 182, 210, 220, 228, 243, 244, 245, 246, 248, 249, 257, 258, 265, 274, 283, 306, 307, 313, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 363, 366, 368, 369, 372, 374, 375, 376, 387, 402], "low": [9, 42, 66, 71, 94, 104, 133, 139, 148, 155, 161, 162, 163, 165, 171, 173, 174, 175, 232, 243, 244, 245, 246, 248, 249, 283, 306, 310, 311, 371, 384, 388, 390, 401, 402], "fsaverage5": [9, 22, 23, 24, 37, 69, 108, 128, 133, 148, 202, 232, 233, 371, 384, 406], "high": [9, 31, 39, 49, 56, 65, 66, 89, 94, 111, 133, 139, 140, 141, 148, 156, 157, 162, 163, 165, 168, 170, 171, 174, 175, 190, 199, 220, 232, 243, 244, 245, 246, 248, 249, 253, 265, 272, 283, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 371, 384, 388, 390, 401, 402], "finer": [9, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "big_fsaverag": 9, "big_textur": 9, "fine": [9, 89, 111, 127, 148, 150, 175, 195, 247, 250, 251, 306, 312, 315, 388, 419], "470x400": [9, 23, 108], "ax": [9, 10, 11, 18, 21, 22, 23, 24, 38, 40, 49, 51, 57, 63, 65, 66, 70, 75, 78, 79, 80, 84, 91, 100, 101, 105, 108, 130, 140, 141, 148, 297, 298, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380], "plot_img_on_surf": [9, 139, 141, 148], "choic": [9, 19, 66, 68, 71, 123, 148, 149, 150, 156, 158, 159, 162, 163, 182, 248, 249, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 390, 421], "orient": [9, 136, 139, 148, 162, 163, 297], "surf_mesh": [9, 371, 377, 378, 379, 380, 384, 386, 405, 406, 419], "freesurf": [9, 22, 23, 69, 108, 128, 133, 145, 148, 164, 202, 232, 377, 378, 379, 380, 386, 404, 405, 406], "medial": [9, 23, 37, 58, 91, 111, 160, 371, 377, 379, 380], "left": [9, 12, 20, 22, 23, 25, 30, 34, 37, 40, 44, 49, 50, 51, 58, 63, 65, 66, 68, 72, 76, 77, 79, 80, 86, 94, 101, 105, 108, 126, 127, 131, 136, 139, 141, 148, 153, 170, 174, 188, 194, 196, 197, 202, 216, 218, 226, 232, 233, 265, 278, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 361, 362, 363, 366, 368, 369, 371, 372, 373, 374, 375, 376, 377, 379, 380, 384, 400], "view_surf": [9, 22, 133, 136, 148, 382, 383, 384, 385, 421], "view_img_on_surf": [9, 133, 134, 136, 141, 148, 382, 383, 385, 386, 421], "atlas": [9, 10, 21, 22, 46, 58, 59, 110, 111, 114, 140, 141, 148, 151, 154, 163, 165, 168, 173, 174, 175, 180, 195, 196, 197, 204, 209, 213, 238, 309, 310, 311, 313, 314, 358, 359, 363, 374, 375, 378, 379, 381, 382, 383, 385, 421], "output": [9, 16, 22, 33, 34, 36, 41, 44, 51, 52, 54, 56, 58, 66, 67, 69, 80, 94, 108, 112, 113, 120, 125, 131, 143, 145, 148, 149, 154, 159, 163, 168, 170, 172, 174, 175, 180, 181, 183, 184, 185, 186, 187, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 257, 258, 265, 278, 280, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 361, 362, 368, 369, 371, 374, 375, 376, 383, 384, 387, 388, 389, 390, 393, 394, 396, 397, 400, 406, 419, 421], "cell": [9, 16, 22, 36, 49, 52, 53, 54, 58, 62, 75, 77, 165, 168], "open": [9, 16, 22, 52, 54, 58, 89, 91, 92, 98, 108, 111, 120, 148, 162, 163, 168, 169, 170, 172, 177, 209, 227, 253, 265, 278, 318, 319, 320, 321, 322, 323, 382, 383, 384, 385, 386, 389, 398, 400, 419, 420, 421], "open_in_brows": [9, 16, 22, 33, 52, 54, 58, 61, 62, 64, 75, 91, 92, 133, 148, 175, 382, 383, 384, 385, 386, 398, 400, 419], "don": [9, 24, 33, 66, 81, 114, 163, 170, 171, 223, 225, 371, 406, 419], "ourselv": 9, "vol_to_surf_kwarg": [9, 141, 148, 384], "allow": [9, 20, 24, 40, 48, 51, 58, 63, 89, 99, 100, 101, 102, 113, 127, 129, 134, 136, 140, 141, 144, 145, 148, 149, 155, 162, 163, 164, 166, 168, 175, 210, 218, 229, 243, 244, 245, 246, 268, 278, 303, 306, 373], "grain": [9, 70, 111, 195, 247], "interpol": [9, 24, 40, 41, 44, 54, 66, 75, 84, 125, 148, 223, 297, 298, 299, 368, 369, 375, 376, 383, 402, 406], "volumetr": [9, 23, 164, 173, 326], "avoid": [9, 52, 53, 54, 58, 71, 131, 136, 145, 148, 160, 162, 163, 165, 173, 243, 244, 245, 246, 253, 278, 280, 287, 292, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 401, 419], "neighbor": [9, 37, 49, 94, 136, 148, 169, 247, 368, 369, 375, 376, 383, 388, 389, 395, 406], "nearest": [9, 40, 41, 44, 49, 66, 75, 84, 111, 136, 145, 148, 168, 223, 297, 298, 299, 368, 369, 375, 376, 383, 389, 395, 399, 406], "zero": [9, 20, 22, 23, 36, 39, 44, 47, 53, 54, 64, 67, 70, 77, 79, 94, 118, 136, 140, 144, 148, 149, 153, 155, 156, 160, 161, 162, 165, 168, 174, 175, 180, 181, 182, 184, 227, 243, 244, 245, 246, 248, 249, 250, 252, 257, 258, 272, 278, 280, 283, 287, 300, 306, 310, 311, 312, 313, 314, 315, 316, 317, 320, 323, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 375, 376, 378, 379, 388, 389, 390, 393, 396, 397, 402], "radiu": [9, 36, 37, 44, 55, 58, 61, 100, 123, 148, 159, 164, 168, 175, 208, 247, 316, 406, 421], "achiev": [9, 15, 55, 71, 93, 155, 162, 170, 174, 175, 184], "destrieux": [9, 22, 23, 111, 119, 128, 139, 148, 194, 202, 419], "fetch_atlas_destrieux_2009": [9, 150], "legacy_format": [9, 17, 21, 42, 43, 47, 58, 75, 76, 77, 79, 80, 81, 105, 106, 143, 148, 188, 194, 195, 206, 207, 208, 216, 217, 218, 227], "n_sampl": [9, 44, 47, 77, 81, 102, 105, 106, 180, 181, 182, 243, 244, 245, 246, 248, 249, 250, 251, 265, 278, 283, 309, 312, 315, 326, 387, 389, 395, 401, 402, 406], "symmetric_cmap": [9, 22, 134, 148, 377, 382, 383, 384, 386, 419], "40": [9, 20, 27, 33, 36, 42, 43, 44, 53, 59, 63, 91, 94, 102, 105, 189, 198, 223, 406], "850": [9, 27, 42, 102], "737": [9, 27, 33], "plot_3d_map_to_surface_project": [9, 27, 141, 148, 384], "refer": [10, 19, 46, 48, 59, 62, 66, 69, 78, 93, 94, 98, 101, 106, 108, 110, 111, 112, 113, 120, 121, 126, 134, 141, 143, 144, 145, 148, 155, 159, 163, 164, 165, 167, 168, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 419, 421], "dataset_ho": 10, "fetch_atlas_harvard_oxford": [10, 21, 56, 91, 123, 144, 148, 150, 163, 197, 391], "cort": [10, 21, 56, 91, 150, 196, 197], "maxprob": [10, 56, 91, 151, 196, 197, 421], "thr25": [10, 56, 91, 150, 196, 197], "2mm": [10, 21, 56, 91, 120, 142, 148, 150, 160, 195, 196, 197], "dataset_ju": 10, "fetch_atlas_juelich": [10, 142, 144, 148, 196], "thr0": [10, 196, 197], "1mm": [10, 120, 142, 148, 196, 197, 200, 237, 238, 240, 319], "atlas_ho_filenam": 10, "atlas_ju_filenam": 10, "roi": [10, 17, 21, 23, 25, 28, 33, 45, 56, 58, 83, 86, 88, 91, 96, 99, 110, 111, 114, 128, 136, 139, 148, 155, 170, 172, 194, 200, 206, 207, 208, 212, 223, 243, 288, 290, 293, 295, 296, 300, 301, 309, 313, 315, 366, 368, 375, 376, 378, 379, 381, 419, 421], "locat": [10, 15, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 47, 49, 53, 54, 55, 56, 58, 70, 75, 77, 89, 91, 92, 94, 95, 101, 102, 105, 108, 133, 142, 148, 162, 165, 171, 173, 175, 181, 184, 190, 206, 208, 209, 224, 226, 247, 248, 249, 250, 251, 265, 268, 278, 284, 310, 311, 312, 313, 314, 315, 316, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 388, 390, 419], "fsl": [10, 11, 36, 49, 62, 79, 86, 94, 142, 143, 145, 148, 173, 196, 197, 294], "harvardoxford": 10, "0x7f1355677430": 10, "0x7f135d2e6fa0": 10, "view_typ": [10, 50, 87, 88, 139, 148, 153, 374, 375], "img_plot": 10, "572": [10, 33], "int": [10, 11, 23, 36, 40, 41, 49, 68, 78, 79, 84, 86, 94, 100, 101, 145, 148, 163, 181, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 265, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 284, 289, 295, 306, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 358, 361, 362, 363, 366, 368, 369, 372, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 390, 395, 398, 399, 400, 401, 403, 406], "due": [10, 11, 34, 36, 39, 49, 66, 71, 79, 86, 94, 120, 136, 142, 143, 144, 145, 148, 152, 156, 158, 163, 165, 171, 188, 248, 249, 419], "deal": [10, 11, 36, 49, 68, 79, 86, 94, 113, 118, 139, 148, 165, 312], "int64": [10, 11, 36, 49, 79, 86, 94, 101, 145, 148, 173, 387, 389], "compat": [10, 11, 36, 49, 72, 79, 86, 94, 123, 143, 145, 146, 148, 158, 163, 164, 196, 197, 265, 278, 280, 290, 309, 310, 311, 312, 313, 314, 315, 316, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 364, 390, 402], "int32": [10, 11, 36, 49, 79, 84, 86, 94, 145, 148, 173, 293, 310, 311, 312, 313, 314, 315, 316], "new_img_lik": [10, 11, 36, 94, 107, 136, 145, 148, 174], "roi_img": [10, 70, 375], "affin": [10, 40, 43, 49, 56, 71, 83, 89, 91, 93, 94, 96, 110, 127, 142, 148, 168, 172, 175, 243, 244, 245, 246, 248, 249, 250, 251, 265, 278, 283, 284, 285, 286, 288, 293, 294, 295, 296, 297, 298, 299, 301, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 327, 329, 330, 381, 388, 393, 396, 397, 406, 408, 421], "_ax": [10, 15, 18, 21, 48, 50, 87, 88], "71": [10, 15, 18, 21, 32, 33, 36, 42, 43, 44, 48, 50, 72, 87, 88, 102, 105], "No": [10, 15, 18, 21, 48, 50, 56, 66, 77, 87, 88, 91, 105, 162, 163], "within": [10, 15, 18, 21, 37, 47, 48, 50, 55, 66, 68, 79, 87, 88, 100, 102, 136, 139, 145, 148, 152, 154, 160, 164, 167, 243, 244, 247, 262, 265, 267, 272, 278, 282, 302, 324, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 362, 363, 388, 391, 400], "im": [10, 18, 21, 107], "getattr": [10, 18, 21], "data_2d": [10, 18, 21, 327, 329, 330], "041": [10, 27, 41, 111, 160], "290": [10, 33, 36, 41, 42, 44, 94, 102], "plot_atla": [10, 27], "common": [11, 49, 66, 68, 71, 94, 100, 128, 136, 142, 144, 148, 149, 155, 158, 160, 162, 163, 165, 167, 172, 174, 184, 193, 290, 298, 299, 303, 312, 321, 323, 421], "qualiti": [11, 62, 70, 77, 105, 111, 133, 148, 163, 164, 165, 171, 175, 188, 220, 310, 313, 362, 388], "mri": [11, 41, 56, 60, 73, 94, 100, 110, 111, 113, 143, 148, 163, 164, 165, 166, 168, 170, 173, 188, 190, 200, 209, 213, 227, 267, 306, 307], "known": [11, 33, 34, 100, 139, 155, 156, 160, 163, 165, 200, 255, 257, 258, 265, 362], "power": [11, 56, 58, 75, 77, 79, 111, 113, 119, 127, 139, 148, 149, 156, 157, 161, 168, 173, 175, 206, 207, 306, 307, 362], "grayplot": [11, 139, 148, 362], "plot_carpet": [11, 27, 139, 140, 144, 145, 148, 419], "adhd_dataset": [11, 61, 164], "fetch_adhd": [11, 61, 123, 148], "n_subject": [11, 23, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 75, 76, 77, 78, 79, 80, 81, 85, 89, 91, 92, 95, 99, 104, 105, 106, 123, 127, 148, 153, 162, 175, 180, 181, 182, 184, 188, 189, 209, 217, 218, 221, 227, 233, 242], "infer": [11, 49, 62, 65, 76, 79, 84, 100, 102, 111, 165, 167, 168, 260, 280, 298, 305, 326, 362], "often": [11, 30, 32, 35, 36, 43, 48, 86, 92, 94, 113, 154, 155, 156, 160, 165, 168, 170, 173, 174, 175, 255, 257, 258], "overwrit": [11, 56, 223, 225, 327, 329, 330], "particular": [11, 15, 33, 66, 87, 98, 114, 122, 143, 148, 150, 158, 160, 162, 170, 171, 173, 225, 243, 244, 245, 246, 255, 257, 258, 272, 303, 406], "field": [11, 44, 114, 136, 148, 165, 168, 173, 223, 243, 244, 245, 246, 250, 251, 266, 268, 298, 303, 304, 312, 315, 388, 405, 406], "explicit": [11, 48, 60, 72, 73, 110, 136, 142, 148, 163, 168, 170, 211, 225, 262, 265, 281, 295, 307, 376, 381, 402], "0010042": 11, "0010042_rest_tshift_rpi_voreg_mni": 11, "build": [11, 18, 41, 46, 49, 50, 51, 58, 71, 100, 110, 112, 120, 128, 148, 151, 156, 158, 160, 165, 173, 175, 265, 388, 421], "mask_img": [11, 25, 29, 32, 33, 34, 35, 36, 39, 40, 41, 44, 49, 53, 54, 56, 58, 64, 66, 67, 70, 75, 89, 91, 92, 98, 102, 103, 113, 130, 134, 138, 139, 143, 148, 155, 160, 174, 175, 235, 247, 260, 265, 268, 278, 281, 282, 283, 289, 302, 310, 311, 312, 313, 314, 315, 316, 317, 324, 325, 360, 362, 371, 389, 390, 392, 393, 394, 395, 396, 397, 406], "compute_epi_mask": [11, 25, 70, 89, 174, 175, 243, 244, 245, 246, 250, 251, 312, 315, 388], "grai": [11, 38, 40, 41, 42, 43, 75, 89, 133, 148, 160, 167, 169, 227, 243, 244, 245, 246, 250, 251, 312, 315, 361, 362, 388, 406], "matter": [11, 24, 42, 43, 56, 66, 75, 89, 126, 139, 142, 148, 155, 160, 162, 163, 167, 169, 174, 175, 209, 213, 214, 227, 236, 237, 238, 239, 240, 243, 244, 245, 246, 250, 251, 306, 312, 315, 319, 322, 388, 406], "white": [11, 24, 40, 42, 56, 66, 75, 89, 124, 139, 141, 142, 148, 162, 174, 175, 209, 213, 227, 232, 237, 238, 239, 240, 243, 244, 245, 246, 250, 251, 306, 312, 315, 319, 322, 377, 378, 379, 380, 383, 384, 386, 388, 405, 406], "cerebrospin": [11, 56, 213, 306], "fluid": [11, 56, 213, 306], "icbm152": [11, 142, 148, 168, 213, 214, 237, 238, 240], "fetch_icbm152_2009": [11, 21, 75, 214, 238], "atlas_img": [11, 53], "gm": [11, 21, 89, 142, 148, 175, 213, 214, 243, 244, 245, 246, 250, 251, 312, 315, 319, 322, 388], "wm": [11, 21, 56, 89, 142, 148, 175, 213, 243, 244, 245, 246, 250, 251, 307, 312, 315, 319, 322, 388], "csf": [11, 21, 56, 209, 213, 306, 307], "map_label": 11, "atlas_data": [11, 20], "get_fdata": [11, 80, 136, 148, 173], "discrete_vers": 11, "argmax": 11, "max": [11, 30, 34, 42, 44, 49, 53, 55, 57, 58, 70, 80, 84, 88, 102, 103, 105, 111, 141, 148, 162, 180, 298, 299, 326, 330, 361, 362, 366, 368, 369, 371, 374, 375, 376, 377, 380, 383, 384, 386], "discrete_atlas_img": 11, "01_plot": [11, 141, 148, 368, 384], "61": [11, 33, 42, 43, 44, 61, 68, 102], "subplot": [11, 12, 24, 38, 40, 41, 43, 44, 49, 51, 57, 63, 65, 66, 68, 70, 79, 80, 94, 100, 101, 105, 120, 148, 367, 377, 378, 379, 380], "figsiz": [11, 12, 18, 25, 30, 34, 35, 40, 42, 44, 48, 51, 57, 62, 63, 65, 66, 68, 72, 79, 91, 94, 99, 100, 101, 105, 106, 174, 373], "mask_label": [11, 362], "cast": [11, 84, 123, 136, 148, 175, 190, 296], "float32": [11, 33, 84, 175, 284, 293, 310, 311, 312, 313, 314, 315, 316], "aux": 11, "coerc": 11, "atlas_valu": 11, "340": [11, 27, 33, 36, 41, 42, 44, 102], "1043": 11, "hcp": [12, 26, 111, 220], "workbench": 12, "cm": [12, 19, 20, 38, 41, 42, 44, 50, 53, 58, 102, 133, 148, 153, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 366, 372, 373, 374, 375, 376, 382, 383, 384, 386, 419], "_cmap_d": 12, "nilearn_cmap": 12, "nmap": 12, "outer": [12, 89, 406], "arang": [12, 22, 30, 32, 33, 34, 48, 51, 63, 66, 69, 71, 94, 108], "ones": [12, 33, 44, 63, 66, 75, 79, 81, 100, 103, 105, 106, 157, 158, 160, 162, 248, 249, 272, 326, 387], "subplots_adjust": [12, 25, 40, 44, 49, 57, 63, 68, 174], "bottom": [12, 15, 25, 40, 63, 68, 174, 373], "enumer": [12, 22, 30, 34, 40, 47, 48, 51, 57, 64, 65, 66, 68, 69, 71, 79, 94, 100, 101, 102, 103, 105], "imshow": [12, 38, 40, 41, 44, 84, 150, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 366, 368, 369, 371, 373, 374, 375, 376, 377, 380], "off": [12, 14, 38, 40, 41, 66, 112, 120, 126, 148, 162, 163, 245, 246, 265, 278, 318, 319, 320, 322, 323, 374, 375, 376, 383, 400], "fontsiz": [12, 25, 40, 49, 63, 75, 78, 80, 105, 134, 136, 148, 174, 327, 329, 330, 382, 384, 385, 386], "va": 12, "rotat": [12, 32, 63, 84, 94, 175, 306], "deprecated_cmap": 12, "vega10": 12, "vega20": 12, "vega20b": 12, "vega20c": 12, "spectral": [12, 23, 111, 193], "m_cmap": 12, "m": [12, 30, 37, 40, 41, 49, 64, 66, 67, 71, 75, 100, 102, 111, 126, 148, 160, 161, 163, 171, 190, 194, 199, 200, 201, 203, 204, 206, 207, 210, 212, 220, 228, 232, 255, 257, 258, 280, 326, 420], "datad": 12, "endswith": 12, "_r": 12, "append": [12, 22, 33, 34, 40, 41, 44, 50, 51, 53, 64, 71, 100, 103, 107, 108, 153, 171], "sort": [12, 21, 30, 35, 42, 43, 62, 113, 141, 148, 171, 173, 210, 229, 242, 278, 280, 293, 326], "get_cmap": 12, "aspect": [12, 40, 132, 148, 158, 162, 175, 265, 278, 306, 400], "auto": [12, 49, 66, 126, 141, 148, 175, 250, 251, 293, 310, 311, 312, 313, 314, 315, 316, 328, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 357, 361, 363, 366, 368, 369, 371, 372, 374, 375, 376, 377, 379, 380, 382, 383, 385, 406], "584": [12, 27, 33], "plot_colormap": [12, 27], "_projector": [13, 14, 16, 47, 50, 51, 52, 58, 143, 148], "orthoprojector": [13, 14, 16, 47, 50, 51, 52, 58, 143, 148, 355], "0x7f13532e3d30": 13, "On": [13, 36, 49, 52, 53, 56, 58, 62, 66, 69, 75, 77, 111, 134, 148, 150, 162, 170, 174, 175, 181, 184], "xz": [13, 14, 15, 49, 265, 278, 345, 346, 355, 356, 361, 363, 366, 368, 369, 372, 374, 375, 376, 400, 419], "xzprojector": [13, 14, 349, 351, 355], "0x7f13553b4f10": 13, "lyrz": [13, 14, 58, 265, 278, 334, 355, 363, 368, 372, 400, 419], "309": [13, 27, 33, 41, 111, 218], "plot_demo_glass_brain": [13, 27], "part": [14, 15, 49, 51, 55, 69, 89, 91, 111, 120, 136, 142, 145, 148, 156, 162, 163, 164, 169, 174, 180, 186, 187, 196, 197, 213, 218, 243, 244, 245, 246, 250, 251, 280, 281, 302, 303, 304, 306, 312, 315, 318, 319, 320, 322, 323, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 373, 388], "through": [14, 31, 39, 42, 48, 51, 56, 64, 75, 91, 100, 120, 140, 141, 143, 148, 149, 155, 156, 157, 160, 163, 168, 170, 223, 227, 245, 246, 265, 278, 280, 306, 307, 310, 313, 322, 327, 329, 330, 332, 333, 334, 335, 336, 343, 345, 347, 349, 351, 353, 387, 398, 406], "includ": [14, 37, 39, 42, 43, 54, 58, 63, 66, 70, 77, 79, 80, 91, 100, 101, 105, 108, 118, 126, 136, 138, 139, 143, 145, 148, 153, 155, 160, 161, 163, 164, 168, 170, 171, 173, 179, 180, 187, 190, 191, 192, 199, 200, 209, 214, 228, 235, 236, 239, 252, 256, 265, 278, 280, 290, 304, 305, 306, 312, 315, 318, 319, 320, 322, 323, 326, 363, 399, 410, 415], "neg": [14, 17, 42, 51, 58, 66, 77, 79, 80, 90, 102, 106, 111, 140, 143, 148, 160, 165, 168, 188, 220, 249, 280, 281, 298, 302, 326, 368, 376, 380, 406, 419], "ortho": [14, 15, 62, 265, 278, 338, 339, 355, 356, 361, 363, 366, 368, 369, 372, 374, 375, 376, 400, 419], "equival": [14, 81, 105, 120, 148, 160, 162, 165, 171, 218, 243, 244, 245, 246, 250, 251, 294, 312, 313, 314, 315, 318, 319, 320, 322, 323, 381, 388], "sagitt": [14, 94, 265, 278, 335, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 361, 363, 366, 368, 369, 372, 374, 375, 376, 400], "cut": [14, 49, 66, 94, 121, 131, 133, 134, 145, 148, 169, 265, 278, 319, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 361, 363, 366, 368, 369, 372, 374, 375, 376, 383, 400, 419], "0x7f133eaa5d00": 14, "produc": [14, 24, 46, 59, 62, 64, 79, 100, 105, 110, 143, 145, 148, 165, 168, 175, 209, 241, 307, 309, 310, 311, 312, 313, 314, 315, 316, 339, 376, 390, 406, 419], "0x7f1353e71070": 14, "black": [14, 40, 104, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 363, 366, 368, 369, 372, 374, 375, 376, 383, 384, 386], "0x7f133d8dd4f0": 14, "sign": [14, 42, 102, 103, 160, 173, 248, 249, 282, 302, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 368, 374, 382, 384, 386], "addition": [14, 15, 58, 70, 142, 148, 163, 167, 171, 174, 175, 326], "coron": [14, 94, 265, 278, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 361, 363, 366, 368, 369, 372, 374, 375, 376, 400], "yz": [14, 15, 31, 39, 265, 278, 351, 352, 355, 356, 361, 363, 366, 368, 369, 372, 374, 375, 376, 400, 419], "yzprojector": [14, 345, 349, 355], "0x7f135484e850": 14, "yx": [14, 15, 113, 265, 278, 349, 350, 355, 356, 361, 363, 366, 368, 369, 372, 374, 375, 376, 400, 419], "yxprojector": [14, 345, 351, 355], "0x7f135553e430": 14, "saw": 14, "lzr": [14, 53, 265, 278, 335, 355, 363, 368, 372, 400, 419], "enabl": [14, 79, 104, 139, 143, 148, 155, 158, 169, 175, 306, 331, 332, 333, 334, 335, 336, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 420], "lzrprojector": [14, 333, 355], "0x7f1354b9d0d0": 14, "lyrzprojector": [14, 336, 355], "0x7f135475ad90": 14, "xprojector": [14, 347, 353, 355], "yprojector": [14, 343, 353, 355], "zprojector": [14, 343, 347, 355], "l": [14, 37, 41, 51, 56, 70, 71, 76, 94, 111, 136, 143, 148, 156, 161, 188, 190, 200, 201, 203, 204, 206, 207, 208, 212, 220, 227, 265, 278, 306, 307, 327, 329, 330, 331, 332, 333, 334, 335, 336, 355, 363, 368, 372, 400, 419], "lprojector": [14, 341, 355], "rprojector": [14, 331, 355], "0x7f1354eb7c10": 14, "inherit": [14, 256, 398], "customis": [14, 56, 150, 307], "focu": [14, 79, 150, 152, 162, 390], "add_contour": [14, 18, 129, 136, 148, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 419], "lzryprojector": [14, 334, 355], "sinc": [14, 19, 33, 39, 58, 64, 66, 75, 77, 81, 101, 108, 113, 120, 141, 148, 162, 165, 190, 196, 197, 229, 303, 304, 326, 330, 419], "empti": [14, 102, 108, 114, 136, 144, 148, 163, 196, 197, 212, 243, 244, 245, 246, 303, 360, 373], "lzry": [14, 265, 278, 336, 355, 363, 368, 372, 400, 419], "choos": [14, 15, 24, 33, 34, 44, 47, 87, 158, 159, 165, 175, 243, 244, 245, 246, 265, 278, 307, 361, 363, 366, 368, 369, 372, 374, 375, 376, 387, 388, 400, 406, 421], "red": [14, 15, 18, 40, 51, 134, 148, 164, 165, 168, 419], "demonstr": [14, 39, 40, 56, 62, 65, 94, 104, 144, 148, 154, 155, 326, 419], "insid": [14, 21, 24, 34, 49, 55, 98, 158, 283, 289, 303, 312, 315, 362, 374, 375, 378, 379, 387, 406], "kei": [14, 43, 54, 58, 66, 79, 113, 114, 150, 163, 170, 173, 190, 191, 192, 193, 196, 197, 204, 213, 219, 223, 243, 244, 245, 246, 252, 256, 261, 265, 272, 274, 278, 280, 304, 305, 326, 337, 362, 371, 384], "vari": [14, 34, 66, 94, 95, 142, 148, 152, 158, 162, 170, 181, 182, 184, 284], "lr": [14, 265, 278, 332, 355, 363, 368, 372, 400, 419], "lrprojector": [14, 355], "ad": [14, 15, 20, 21, 30, 40, 68, 69, 84, 120, 129, 130, 140, 142, 143, 144, 145, 148, 158, 162, 163, 164, 171, 199, 200, 243, 244, 245, 246, 248, 249, 280, 287, 298, 302, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 326, 327, 329, 330, 361, 362, 363, 366, 368, 369, 372, 374, 375, 376, 383, 390, 421], "chang": [14, 19, 40, 42, 49, 51, 62, 68, 102, 105, 106, 116, 156, 158, 162, 163, 165, 171, 172, 232, 273, 292, 296, 298, 301, 302, 310, 311, 312, 313, 314, 315, 316, 317, 326, 377, 379, 380, 386, 393, 396, 399, 402, 420, 421], "lyr": [14, 265, 278, 333, 355, 363, 368, 372, 400, 419], "lyrprojector": [14, 335, 355], "draw": [14, 15, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 365, 406], "thick": [14, 47, 141, 148, 204, 232, 374, 375, 377, 380, 386, 404, 406], "width": [14, 32, 51, 66, 94, 168, 175, 243, 244, 245, 246, 250, 251, 265, 278, 280, 300, 310, 311, 312, 313, 314, 315, 316, 317, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 366, 368, 369, 372, 373, 374, 375, 376, 382, 388, 390, 392, 398, 400], "linewidth": [14, 18, 21, 42, 43, 48, 50, 91, 374, 375, 382], "enough": [14, 58, 155, 162, 170, 175, 298], "unlik": [14, 20, 160, 165, 173, 307], "upper": [14, 40, 162, 255, 257, 258, 320, 323, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 366, 368, 369, 371, 372, 374, 375, 376, 377, 380, 384, 386], "bound": [14, 84, 89, 129, 136, 148, 174, 250, 298, 327, 329, 330, 361, 362, 366, 368, 369, 371, 372, 374, 375, 376, 377, 380, 384, 386], "kept": [14, 114, 186, 196, 197, 243, 244, 245, 246, 282, 283, 300, 302, 318, 319, 320, 321, 322, 323, 324, 390, 392, 402], "infin": 14, "inf": [14, 54, 103, 283, 311, 314, 317, 320, 402], "31": [14, 27, 33, 36, 40, 42, 43, 44, 48, 70, 73, 91, 102, 105, 109, 111, 161, 201], "012": [14, 27, 41], "plot_demo_glass_brain_extens": [14, 27, 368], "techniqu": [15, 44, 111, 153, 154, 155, 156, 157, 158, 162, 168, 170, 175, 390], "essenti": [15, 68, 80, 168], "what": [15, 56, 66, 108, 144, 156, 162, 166, 171, 173, 175, 181, 252, 256, 289, 303, 403, 419, 421], "shown": [15, 21, 40, 54, 66, 70, 94, 114, 141, 148, 149, 154, 155, 164, 165, 201, 307, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 371, 372, 375, 382, 384, 386], "subclass": [15, 356], "implement": [15, 48, 49, 56, 62, 66, 68, 98, 121, 128, 130, 136, 139, 140, 143, 144, 148, 149, 152, 153, 154, 156, 158, 160, 161, 162, 163, 168, 170, 171, 176, 196, 197, 243, 244, 247, 248, 249, 253, 255, 260, 265, 267, 269, 270, 271, 272, 275, 276, 277, 278, 280, 289, 306, 307, 326, 327, 328, 330, 340, 377, 379, 380, 390, 402, 403], "interact": [15, 22, 47, 52, 54, 58, 100, 133, 134, 138, 143, 148, 151, 153, 163, 168, 169, 170, 382, 383, 385, 421], "precis": [15, 41, 52, 57, 91, 149, 152, 153, 162, 170, 175, 180, 181, 182, 184, 185, 218, 243, 245, 255, 257, 258, 280, 326], "overlai": [15, 20, 21, 50, 153, 174, 383, 421], "tile": [15, 134, 148, 342, 356, 361, 366, 369, 374, 375, 376, 400, 419], "mosaic": [15, 140, 148, 337, 356, 361, 366, 369, 374, 375, 376, 400, 419], "wherea": [15, 49, 142, 148, 152, 156, 174, 321, 323, 324, 388], "mni": [15, 48, 52, 54, 66, 69, 93, 101, 108, 111, 114, 126, 136, 139, 145, 148, 150, 167, 168, 170, 174, 175, 190, 192, 198, 206, 207, 208, 213, 237, 238, 240, 243, 244, 245, 246, 285, 316, 319, 322, 361, 363, 366, 368, 369, 374, 375, 376, 382, 383, 385, 400, 419], "accordingli": [15, 143, 148, 303], "help": [15, 33, 58, 67, 94, 129, 133, 134, 148, 150, 156, 164, 175, 184, 420, 421], "haxby_anat_filenam": [15, 16], "haxby_mask_filenam": [15, 16], "haxby_func_filenam": [15, 16], "local": [15, 40, 41, 49, 60, 65, 66, 73, 76, 77, 79, 80, 81, 88, 90, 93, 97, 100, 101, 103, 107, 108, 109, 110, 111, 136, 137, 145, 148, 163, 165, 168, 171, 173, 175, 196, 197, 200, 205, 215, 216, 217, 218, 219, 222, 223, 225, 247, 288, 300, 303, 309, 315, 326, 354, 367, 368, 376, 381], "xyz": [15, 297, 337, 342, 344, 348, 354], "integ": [15, 84, 94, 123, 127, 136, 140, 143, 145, 148, 168, 173, 175, 182, 184, 188, 190, 192, 194, 196, 197, 199, 200, 203, 204, 223, 225, 248, 249, 250, 251, 265, 284, 318, 319, 320, 322, 323, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 366, 368, 369, 374, 375, 376, 378, 379, 391, 396, 397, 400], "0x7f1354aeda00": 15, "zslicer": [15, 70, 88, 344, 348, 356], "rather": [15, 54, 66, 94, 100, 114, 126, 128, 130, 132, 136, 141, 143, 148, 149, 162, 163, 173, 174, 181, 190, 223, 225, 250, 251, 280, 311, 314, 399], "impli": [15, 140, 148, 162, 180, 298, 317], "maximum": [15, 48, 66, 79, 89, 92, 94, 104, 136, 148, 160, 168, 175, 180, 181, 182, 184, 189, 196, 197, 223, 233, 243, 244, 245, 246, 250, 251, 252, 253, 256, 265, 274, 278, 280, 282, 300, 302, 310, 311, 312, 313, 314, 315, 316, 317, 330, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 368, 388, 390, 392, 393, 419], "0x7f135497d9a0": 15, "0x7f1354f45250": 15, "yslicer": [15, 92, 344, 354, 356], "again": [15, 49, 91, 103, 113, 167, 170, 223, 225], "0x7f13532e39d0": 15, "0x7f1343ac9ac0": 15, "stand": [15, 44, 136, 148, 168, 174, 419], "thu": [15, 31, 34, 39, 102, 104, 150, 155, 156, 157, 160, 161, 162, 168, 174, 175, 245, 246, 247, 248, 249, 253, 287, 307, 326], "xzslicer": [15, 49, 350, 352, 356], "0x7f1354662ac0": 15, "similarli": [15, 55, 94, 173], "yxslicer": [15, 346, 352], "assign": [15, 86, 94, 152, 153, 165, 196, 197, 206, 208, 390, 391, 395], "0x7f1354aed7f0": 15, "yzslicer": [15, 39, 346, 350, 356], "0x7f13548f2130": 15, "case": [15, 23, 34, 40, 43, 48, 49, 50, 54, 62, 65, 66, 68, 72, 84, 89, 91, 92, 100, 101, 108, 114, 126, 136, 139, 148, 149, 150, 152, 155, 156, 160, 162, 170, 171, 173, 187, 190, 194, 196, 197, 243, 244, 245, 246, 248, 249, 265, 267, 272, 278, 280, 281, 290, 298, 299, 300, 301, 304, 312, 313, 314, 315, 316, 320, 358, 361, 362, 363, 366, 368, 369, 371, 374, 375, 376, 383, 399, 400, 406, 419], "tiledslic": [15, 337, 339, 356], "0x7f1345d1ccd0": 15, "situat": [15, 58, 149, 155, 156, 173, 300], "mosaicslic": [15, 339, 342, 356], "0x7f135e9888e0": 15, "still": [15, 49, 66, 79, 91, 114, 143, 148, 160, 162, 171, 175, 223, 419], "0x7f135ebc3d90": 15, "tupl": [15, 175, 191, 198, 233, 243, 244, 245, 246, 248, 249, 250, 251, 255, 257, 258, 265, 268, 278, 287, 295, 298, 300, 303, 306, 312, 315, 318, 320, 321, 323, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 366, 369, 373, 374, 375, 376, 383, 388, 393, 400, 405, 406], "0x7f1353d004c0": 15, "interpret": [15, 51, 70, 111, 151, 160, 161, 162, 165, 190, 194, 196, 197, 200, 201, 204, 294, 326, 419, 421], "process": [15, 16, 32, 36, 39, 42, 44, 50, 53, 62, 91, 94, 101, 102, 105, 111, 112, 113, 121, 148, 150, 153, 154, 155, 158, 162, 163, 165, 167, 168, 170, 171, 173, 174, 175, 181, 198, 213, 214, 218, 243, 244, 245, 246, 248, 249, 250, 251, 265, 278, 283, 284, 289, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 388, 389, 390, 396, 397, 402], "dimens": [15, 21, 29, 33, 34, 40, 47, 49, 66, 94, 113, 141, 148, 159, 165, 168, 174, 175, 186, 187, 195, 220, 227, 243, 244, 245, 246, 250, 251, 253, 255, 257, 258, 265, 280, 283, 284, 290, 291, 294, 295, 300, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 359, 373, 374, 388, 390, 402, 421], "mean_haxby_img": [15, 16], "coregistr": [15, 125, 148, 168], "edg": [15, 47, 52, 54, 58, 94, 136, 148, 149, 150, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 363, 373, 382, 421], "being": [15, 89, 94, 120, 133, 136, 143, 148, 149, 162, 165, 168, 171, 250, 272, 305, 311, 314, 321, 323, 362, 377, 379, 380, 390], "outlin": [15, 48, 89, 92, 154, 163, 378, 419], "manual": [15, 16, 19, 32, 34, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 62, 70, 81, 83, 89, 91, 92, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 113, 149, 155, 170, 172, 175, 199, 200, 212, 250, 251, 288, 293, 295, 296, 300, 309, 313, 366, 375, 376, 381, 419, 421], "34": [15, 30, 33, 42, 43, 44, 62, 91, 94, 96, 102, 111, 160], "blue": [15, 18, 40, 49, 70, 86], "fill": [15, 21, 62, 68, 94, 101, 108, 128, 136, 142, 148, 162, 175, 298, 299, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 374, 375, 398, 421], "transpar": [15, 23, 136, 148, 175, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 363, 368, 369, 371, 372, 374, 375, 376, 377, 380, 382, 383, 384, 385, 386], "contourf": [15, 21, 48, 50, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "sphere": [15, 36, 37, 46, 55, 59, 110, 138, 141, 148, 159, 175, 180, 206, 207, 209, 232, 309, 316, 358, 363, 372, 373, 377, 378, 379, 380, 381, 382, 386, 405, 406, 419, 421], "marker_color": [15, 40, 55, 61, 100, 134, 136, 148, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 385, 419], "yellow": 15, "third": [15, 66, 81, 153, 274], "marker_s": [15, 40, 55, 61, 100, 134, 136, 148, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 385, 419], "coord": [15, 37, 40, 50, 52, 54, 58, 70, 87, 100, 134, 136, 148, 153, 327, 329, 330, 358, 359, 363, 377, 378, 379, 380, 386, 419], "alter": [15, 140, 148], "bar": [15, 42, 102, 105, 133, 148, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 421], "scalebar": [15, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 419], "scale_": 15, "keyword": [15, 62, 98, 114, 136, 148, 158, 162, 175, 182, 188, 223, 234, 294, 307, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 367, 369, 371, 373, 379, 380, 384], "arg": [15, 243, 244, 245, 246, 309], "scale_s": [15, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "scale_unit": [15, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "built": [15, 33, 42, 48, 165, 171, 388], "extens": [15, 128, 142, 148, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380], "pdf": [15, 55, 68, 102, 111, 145, 148, 160, 161, 193, 194, 200, 201, 203, 206, 212, 220, 227, 232, 283, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380, 402], "svg": [15, 62, 305, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380], "plot_stat_map_from_displai": 15, "sure": [15, 94, 110, 120, 148, 160, 163, 171, 248, 249, 420], "close": [15, 23, 37, 40, 49, 86, 143, 148, 149, 156, 162, 163, 165, 168, 214, 243, 244, 245, 246, 318, 319, 320, 322, 323, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380, 395, 419], "413": [15, 27, 33], "916": [15, 18, 29, 34, 36, 37, 98], "plot_demo_more_plot": [15, 27], "easi": [16, 61, 69, 75, 94, 113, 114, 153, 154, 156, 159, 163, 164, 168, 170, 175, 306, 421], "coordin": [16, 19, 22, 23, 40, 49, 52, 54, 70, 94, 100, 111, 113, 119, 125, 128, 130, 131, 133, 139, 143, 145, 148, 151, 153, 162, 164, 165, 175, 198, 206, 207, 208, 232, 251, 285, 298, 316, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 360, 361, 362, 363, 366, 368, 369, 372, 374, 375, 376, 377, 378, 379, 380, 382, 383, 385, 386, 399, 400, 405, 406, 419, 421], "0x7f1355590220": 16, "web": [16, 111, 114, 133, 136, 148, 163, 223, 225, 265, 278, 382, 384, 385, 386, 400, 419], "alwai": [16, 100, 155, 158, 162, 163, 165, 175, 249, 255, 257, 258, 306, 368, 376, 380, 383, 384, 386, 419], "fix": [16, 30, 43, 48, 58, 60, 64, 71, 73, 92, 110, 117, 162, 163, 171, 174, 211, 252, 253, 256, 262, 265, 268, 295, 376, 381], "0x7f13632eba00": 16, "0x7f13552d3580": 16, "overlaid": [16, 71, 89, 92, 139, 141, 148, 374], "0x7f1355157430": 16, "voxel_wis": 16, "reduc": [16, 29, 33, 34, 44, 49, 66, 79, 87, 94, 100, 132, 133, 136, 140, 148, 157, 161, 162, 163, 168, 175, 182, 227, 245, 246, 250, 251, 306, 307, 310, 313, 377, 379, 380, 387, 388, 389, 393], "0x7f1354608850": 16, "ie": [16, 145, 148, 149, 154, 173, 255, 257, 258, 311, 314, 316], "898": [16, 27], "895": [16, 27], "plot_demo_plot": [16, 27], "modifi": [17, 49, 94, 103, 126, 143, 148, 163, 175, 223, 225, 298, 299, 302, 401, 402], "leav": [17, 29, 33, 40, 41, 155, 160, 287], "unchang": [17, 66, 160, 180, 250, 251, 265, 278, 309, 310, 311, 312, 313, 314, 315, 316, 387, 388, 389, 390], "localizer_dataset": [17, 77, 81, 105, 106], "fetch_localizer_button_task": [17, 126, 148, 217, 218, 419], "localizer_tmap_filenam": 17, "tmap": [17, 79, 216, 218, 419], "localizer_anat_filenam": 17, "0x7f1355232430": 17, "0x7f1353d1fac0": 17, "0x7f1354dc0c10": 17, "931": [17, 27], "plot_dim_plot": [17, 27], "kwarg": [18, 136, 148, 188, 307, 309, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 363, 366, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383], "func_filenam": [18, 25, 30, 31, 32, 33, 35, 48, 50, 53, 55, 58, 91, 92, 102, 104, 153, 174], "z_slice": [18, 42, 105, 106], "facecolor": [18, 32, 40, 42, 106, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 363, 366, 368, 369, 372, 374, 375, 376], "mask_vt_filenam": [18, 94], "mask_house_filenam": 18, "mask_hous": [18, 32, 113, 173, 212], "mask_face_filenam": 18, "mask_fac": [18, 32, 113, 173, 212], "antialias": 18, "limegreen": 18, "trick": [18, 170], "http": [18, 22, 23, 34, 49, 56, 62, 64, 67, 71, 72, 98, 101, 102, 103, 111, 114, 141, 145, 148, 153, 156, 157, 160, 161, 162, 163, 165, 170, 171, 181, 184, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 238, 243, 244, 245, 246, 250, 251, 252, 256, 257, 258, 280, 283, 306, 307, 326, 362, 368, 384, 385, 388, 389, 390, 395, 402, 403, 419, 420], "sourceforg": 18, "net": [18, 28, 44, 45, 110, 161, 227, 243, 244, 248, 249, 376, 381], "user": [18, 29, 34, 39, 58, 66, 68, 100, 106, 114, 120, 130, 133, 134, 136, 137, 141, 143, 144, 145, 148, 162, 163, 164, 165, 168, 169, 171, 172, 175, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 411, 412, 420], "legend_guid": 18, "httpml": 18, "proxi": 18, "artist": 18, "patch": [18, 40, 41, 49, 171], "rectangl": [18, 40, 49, 84], "p_v": 18, "fc": 18, "p_h": 18, "p_f": 18, "face": [18, 28, 32, 33, 38, 45, 71, 94, 97, 98, 100, 109, 110, 111, 113, 128, 141, 148, 155, 160, 164, 169, 173, 174, 175, 212, 213, 231, 243, 245, 247, 288, 290, 293, 295, 296, 309, 315, 326, 354, 369, 376, 377, 378, 379, 380, 381, 383, 386, 405, 406], "614": [18, 27, 33], "plot_haxby_mask": [18, 27], "fetch_atlas_basc_multiscale_2015": [19, 124, 148], "sym": [19, 187, 192], "197": [19, 31, 32, 33, 39, 41, 93, 109, 192, 290], "444": [19, 33, 192], "networks_64": 19, "scale064": [19, 192], "networks_197": 19, "scale197": [19, 192], "networks_444": 19, "scale444": [19, 192], "itself": [19, 34, 66, 152, 180, 181, 182, 250, 251, 288, 388, 406], "bwr": [19, 53, 134, 148, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 382], "bwr_r": 19, "151": [19, 27, 33, 41, 107], "plot_multiscale_parcel": [19, 27], "compos": [20, 98, 168, 174, 175, 207, 243, 244, 245, 246], "node": [20, 23, 24, 58, 108, 134, 136, 139, 141, 148, 150, 175, 199, 232, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 371, 372, 382, 384, 385, 406, 419], "constitut": [20, 154], "leverag": [20, 139, 148, 169, 170, 243, 244, 388, 420], "less": [20, 48, 49, 50, 56, 66, 69, 77, 79, 88, 94, 100, 114, 133, 134, 141, 148, 160, 162, 163, 165, 171, 256, 357, 421], "fetch_atlas_msdl": [20, 21, 51, 52, 53, 54, 99, 125, 148, 150], "atlas_filenam": [20, 52, 54, 56, 150], "pcc": [20, 23, 51, 55], "dmn": [20, 51, 61], "acc": 20, "pariet": [20, 58, 91, 103, 198], "black_blu": 20, "black_green": 20, "black_pink": 20, "ma": [20, 21, 36, 40, 48, 50, 54, 64, 106], "2820": [20, 21, 48, 50, 54, 102], "element": [20, 21, 48, 49, 50, 54, 126, 145, 148, 154, 160, 168, 180, 186, 187, 190, 243, 244, 245, 246, 247, 283, 300, 309, 310, 311, 312, 313, 314, 315, 316, 322, 371, 390, 396, 402, 406], "nan": [20, 21, 48, 50, 54, 56, 91, 94, 103, 118, 123, 128, 136, 140, 148, 227, 283, 298, 311, 314, 317, 320, 402, 406], "_data": [20, 21], "3rd": [20, 368, 369, 375, 376, 383], "4th": [20, 94, 111, 161, 168, 174, 257, 258, 295, 298, 374], "5th": 20, "6th": 20, "dmn_node": 20, "35": [20, 33, 36, 42, 43, 44, 53, 72, 91, 102, 105, 115, 148, 198, 223], "55": [20, 33, 36, 42, 43, 44, 68, 102, 105, 126, 148], "29": [20, 30, 33, 36, 42, 43, 62, 72, 75, 81, 91, 102, 103, 121, 148], "203": [20, 27, 33, 41, 72], "407": [20, 27, 33], "plot_overlai": [20, 27], "delin": 21, "filled_contour": [21, 50, 153, 374], "continu": [21, 39, 43, 54, 56, 150, 155, 156, 157, 161, 163, 168, 175, 223, 293, 297, 298, 299, 310, 311, 312, 313, 314, 315, 316, 368, 369, 374, 375, 376, 383, 391, 392], "plot_prob_atla": [21, 27, 48, 50, 87, 88, 123, 130, 131, 140, 148, 153, 154, 375, 419], "pick": [21, 153, 162, 165, 168, 214], "randomli": [21, 160], "alreadi": [21, 22, 33, 34, 49, 64, 89, 94, 101, 103, 107, 108, 114, 136, 143, 148, 153, 155, 156, 163, 170, 175, 223, 225, 278, 280, 299, 326, 390], "know": [21, 84, 114, 162, 165, 168, 187, 225], "tune": [21, 31, 32, 34, 39, 43, 89, 127, 148, 150, 155, 156, 158, 162, 165, 250, 251, 306, 312, 315, 388, 419], "readi": [21, 61, 75, 113, 127, 148, 154, 163, 171], "harvard": [21, 91, 150, 196, 204, 358, 359], "oxford": [21, 91, 111, 150, 196, 257, 258, 358, 359], "atlasf": 21, "harvard_oxford": 21, "prob": [21, 196, 197, 199, 374], "harvard_oxford_sub": 21, "sub": [21, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 78, 85, 91, 92, 95, 100, 101, 104, 108, 141, 148, 196, 197, 265, 278, 303, 400], "multi": [21, 28, 41, 42, 43, 45, 46, 48, 58, 59, 100, 110, 111, 149, 150, 151, 153, 159, 162, 170, 173, 174, 175, 176, 181, 182, 184, 192, 198, 209, 212, 231, 250, 265, 309, 312, 314, 315, 359, 363, 373, 381, 421], "dictionari": [21, 23, 33, 46, 59, 66, 69, 101, 104, 108, 110, 111, 114, 140, 148, 151, 155, 156, 168, 169, 175, 180, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 243, 244, 245, 246, 250, 251, 265, 278, 280, 290, 291, 304, 305, 309, 314, 326, 337, 339, 359, 360, 361, 362, 363, 371, 373, 374, 376, 381, 384, 390, 421], "ica": [21, 46, 50, 54, 59, 87, 92, 97, 104, 109, 110, 111, 114, 121, 148, 150, 151, 168, 169, 170, 179, 191, 201, 209, 220, 223, 235, 250, 251, 291, 300, 306, 307, 309, 314, 315, 374, 376, 381, 394, 419, 421], "icbm": [21, 66, 75, 133, 148, 213], "tissu": [21, 168, 203], "allen": [21, 111, 128, 148, 191], "fetch_atlas_allen_2011": [21, 128, 148], "pauli": [21, 111, 199], "subcort": [21, 111, 133, 148, 196, 197, 199, 208], "subcortex": [21, 111, 208], "fetch_atlas_pauli_2017": [21, 133, 136, 148], "difumo": [21, 47, 140, 148, 195], "fetch_atlas_difumo": [21, 47, 140, 148], "resolution_mm": [21, 47, 195, 200], "atlas_typ": 21, "smith2009": 21, "rsn20": [21, 201], "70": [21, 30, 32, 33, 36, 42, 43, 44, 63, 102, 105, 111, 160, 201], "rsn70": [21, 201], "brainmap": [21, 201], "bm20": [21, 201], "bm70": [21, 201], "allen2011": 21, "rsn28": [21, 191], "pauli2017": 21, "resolut": [21, 75, 76, 93, 111, 113, 120, 129, 141, 142, 148, 153, 172, 190, 195, 199, 200, 209, 232, 235, 236, 237, 238, 239, 240, 260, 315, 319, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 371, 384, 390, 421], "item": [21, 64, 65, 66, 69, 71, 100, 105, 114, 223, 224, 225, 226, 268, 312, 321, 323], "bm10": [21, 201], "37": [21, 27, 33, 36, 42, 43, 44, 81, 91, 94, 102, 111, 118, 148, 306, 307, 403], "386": [21, 27, 33], "1182": [21, 27], "2010": [22, 23, 48, 58, 102, 111, 128, 148, 149, 154, 156, 180, 181, 192, 202, 206, 213, 238, 250], "plot_surf_roi": [22, 23, 128, 130, 132, 136, 140, 148, 377, 419], "pial": [22, 23, 24, 37, 139, 145, 148, 232, 371, 377, 378, 379, 380, 384, 386, 405, 406], "gyri": [22, 23, 111, 202], "sulci": [22, 23, 111, 202], "nomenclatur": [22, 23, 111, 202], "53": [22, 23, 33, 36, 38, 42, 43, 44, 45, 61, 86, 91, 93, 96, 102, 111, 191, 192, 202], "url": [22, 23, 62, 111, 137, 145, 148, 156, 157, 160, 161, 181, 184, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 212, 213, 216, 217, 218, 220, 221, 222, 223, 225, 227, 228, 229, 232, 233, 238, 242, 245, 246, 252, 256, 257, 258, 280, 283, 306, 307, 326, 362, 389, 390, 395, 402, 403], "dx": [22, 23, 71], "doi": [22, 23, 56, 71, 72, 76, 111, 114, 156, 157, 160, 161, 180, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 212, 213, 218, 220, 221, 222, 223, 225, 227, 228, 232, 233, 238, 245, 246, 260, 280, 283, 306, 307, 326, 362, 389, 395, 402, 403], "org": [22, 23, 34, 36, 49, 52, 53, 56, 58, 62, 71, 72, 75, 77, 98, 111, 114, 157, 160, 161, 162, 165, 170, 171, 181, 184, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 232, 233, 238, 243, 244, 245, 246, 280, 283, 306, 307, 326, 362, 385, 389, 395, 402, 403], "1016": [22, 23, 56, 76, 111, 156, 157, 160, 161, 192, 194, 195, 198, 202, 207, 208, 213, 218, 221, 222, 238, 245, 246, 257, 258, 260, 280, 306, 307, 326, 362, 403], "010": [22, 23, 41, 111, 202], "map_left": [22, 23, 202, 419], "inflat": [22, 23, 37, 69, 232, 371, 377, 378, 379, 380, 384, 386, 405, 406], "sulcal": [22, 23, 111, 194, 232, 377, 379, 380, 384, 386], "depth": [22, 23, 24, 111, 139, 148, 194, 232, 377, 379, 380, 384, 386, 406], "shade": [22, 377, 379, 380, 386], "pial_left": [22, 23, 69, 108, 232, 371, 384, 406], "infl_left": [22, 23, 69, 108, 232, 371, 384, 419], "sulc_left": [22, 23, 69, 108, 232, 371, 384], "gii": [22, 23, 306, 307, 377, 378, 379, 380, 386, 404, 405, 406], "roi_map": [22, 23, 378, 379], "bg_on_data": [22, 23, 377, 379, 380], "dark": [22, 23, 377, 379, 380], "400x400": [22, 23], "posterior": [22, 23, 55, 58, 61, 91, 103, 130, 148, 164, 206, 208, 377, 379, 380], "convent": [22, 72, 120, 145, 148, 163, 171, 241, 301, 303, 304, 361, 366, 368, 376, 387, 389], "vertic": [22, 37, 41, 66, 72, 80, 128, 148, 149, 218, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 377, 378, 379, 380, 386], "vert": 22, "map_": 22, "rr": 22, "load_surf_mesh": [22, 37, 128, 145, 148, 419], "pial_": [22, 37], "unknown": [22, 56, 91, 155, 190, 191, 204], "str": [22, 77, 79, 100, 142, 148, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 248, 249, 265, 267, 268, 272, 278, 279, 280, 282, 283, 294, 298, 299, 302, 303, 304, 305, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 391, 393, 396, 398, 402, 404, 405, 406], "omit": 22, "synthet": [22, 57, 84, 163], "n_parcel": [22, 49, 388], "corr": [22, 370], "n_parcels_hemi": 22, "plot_connectom": [22, 47, 50, 51, 52, 53, 54, 58, 116, 118, 120, 125, 126, 131, 134, 136, 145, 148, 150, 153, 382, 385, 419], "edge_threshold": [22, 47, 50, 53, 54, 58, 134, 136, 148, 153, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 382, 419], "gist_ncar": [22, 132, 148, 362, 375, 379, 419], "view_connectom": [22, 52, 54, 58, 133, 134, 136, 141, 148, 383, 385, 419], "570": [22, 27, 33, 36, 42, 67, 102], "plot_surf_atla": [22, 27], "subset": [23, 36, 44, 94, 156, 160, 163, 242, 255, 290, 306], "enhanc": [23, 64, 66, 67, 68, 111, 168, 171, 233, 253, 280, 326], "nki": [23, 111, 128, 148, 233], "rockland": [23, 111, 233], "fcon_1000": [23, 189, 233], "nitrc": [23, 189, 193, 201, 233], "indi": [23, 189, 233], "nooner": [23, 111, 233], "2012": [23, 44, 100, 111, 145, 148, 150, 155, 161, 162, 170, 193, 221, 233, 306, 307], "645m": 23, "102": [23, 33, 40, 41, 43, 111, 233, 307], "com": [23, 103, 111, 145, 148, 157, 160, 161, 163, 190, 192, 193, 194, 195, 198, 200, 202, 203, 208, 213, 218, 220, 221, 222, 232, 238, 245, 246, 283, 306, 307, 326, 362, 402, 403, 419, 420], "fliem": 23, "nki_nilearn": 23, "dale": [23, 111, 194, 202, 232], "1999": [23, 111, 213, 232], "fischl": [23, 111, 194, 200, 202, 204, 232], "cingul": [23, 55, 58, 61, 91, 164], "pearson": [23, 111, 252, 256, 370], "product": [23, 55, 162], "moment": [23, 113], "correl": [23, 26, 42, 43, 46, 47, 52, 59, 71, 99, 100, 110, 111, 153, 155, 162, 165, 168, 175, 180, 183, 185, 187, 209, 220, 250, 306, 307, 309, 315, 316, 339, 370, 376, 419], "acceler": [23, 111, 233], "pace": [23, 111, 233], "psychiatri": [23, 111, 233], "frontier": [23, 49, 111, 152, 188, 191, 223, 225, 233], "neurosci": [23, 49, 66, 72, 111, 152, 160, 168, 170, 188, 191, 201, 218, 220, 227, 233, 421], "152": [23, 33, 41, 56, 111, 168, 233], "3389": [23, 111, 114, 188, 191, 223, 225, 233], "fnin": [23, 111, 233], "00152": [23, 111, 233], "segment": [23, 56, 111, 153, 168, 198, 204, 213, 227, 306, 390, 392, 406], "reconstruct": [23, 28, 40, 45, 110, 111, 175, 180, 187, 222, 250, 251, 309, 312, 315, 381, 396, 397], "1006": [23, 111, 190], "nimg": [23, 111, 190], "1998": [23, 190], "0395": 23, "ii": [23, 111, 218, 307], "flatten": [23, 24, 40, 41, 70, 180, 186, 187], "0396": 23, "nki_dataset": 23, "fetch_surf_nki_enhanc": [23, 128, 136, 148], "fsaverag5": 23, "func_left": [23, 233], "nki_enhanced_surfac": 23, "a00028185": 23, "a00028185_left_preprocessed_fwhm6": 23, "timeseri": [23, 26, 48, 50, 58, 89, 104, 127, 140, 148, 149, 153, 195, 220, 283, 307, 310, 311, 312, 313, 314, 315, 316, 402, 403], "load_surf_data": [23, 128, 148], "pcc_region": 23, "g_cingul": 23, "post": [23, 51, 66, 94, 111, 121, 148, 174, 180, 214, 390], "dorsal": [23, 377, 379, 380], "pcc_label": 23, "seed_timeseri": 23, "scipi": [23, 44, 56, 62, 68, 76, 79, 94, 101, 103, 107, 108, 118, 120, 126, 130, 131, 133, 136, 141, 143, 145, 148, 162, 170, 174, 214, 236, 239, 292, 318, 319, 320, 322, 323, 373], "stat_map": [23, 281, 371, 379, 380], "pearsonr": 23, "wall": [23, 162], "_stats_pi": 23, "4424": 23, "constantinputwarn": 23, "constant": [23, 31, 66, 162, 174, 243, 244, 245, 246, 248, 249, 280, 326, 419], "msg": 23, "pcc_map": 23, "unthreshold": [23, 81, 111, 114, 168, 191, 223, 225], "slightli": [23, 48, 49, 66, 84, 112, 130, 148, 156, 180, 182, 298, 299], "captur": [23, 51, 58, 66, 103, 150, 151, 152, 155, 180, 218], "half": [23, 49, 66, 94, 136, 148, 162, 168, 175, 243, 244, 245, 246, 250, 251, 265, 278, 280, 300, 310, 311, 312, 313, 314, 315, 316, 317, 377, 379, 380, 388, 390, 392], "after": [23, 28, 32, 34, 40, 45, 50, 56, 66, 67, 77, 94, 98, 100, 105, 110, 144, 148, 152, 153, 155, 160, 162, 163, 164, 165, 168, 171, 174, 175, 184, 212, 243, 244, 245, 246, 250, 265, 273, 274, 278, 283, 287, 290, 295, 306, 307, 315, 391, 398, 399, 400], "193": [23, 27, 33, 41, 199], "68": [23, 33, 42, 43, 58, 102, 175, 419], "measur": [24, 29, 34, 48, 49, 51, 58, 66, 77, 99, 100, 105, 111, 129, 139, 148, 149, 150, 152, 153, 159, 160, 162, 165, 168, 170, 175, 220, 307, 370, 372, 387, 406, 419, 421], "toi": [24, 104], "drawn": [24, 66, 94, 265, 278, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 366, 369, 374, 375, 376, 383, 400, 406], "around": [24, 34, 84, 86, 132, 134, 148, 162, 163, 182, 280, 287, 298, 316, 327, 329, 330, 406], "vertex": [24, 202, 377, 378, 379, 380, 406], "spread": [24, 98, 158, 317], "nest": [24, 29, 42, 139, 148, 158, 180, 181, 182, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 278, 309, 310, 311, 312, 313, 314, 315, 316, 387, 388, 389, 390, 406], "along": [24, 25, 66, 84, 86, 100, 136, 141, 148, 154, 161, 163, 168, 174, 175, 248, 249, 265, 273, 298, 300, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 327, 329, 330, 339, 342, 356, 357, 361, 366, 369, 370, 374, 375, 376, 390, 391, 402, 406, 419], "ball": [24, 119, 148, 160, 162, 168, 247, 406], "too": [24, 38, 40, 42, 52, 54, 56, 71, 86, 114, 156, 162, 223, 225, 419], "almost": [24, 39, 49, 104, 162, 175], "ident": [24, 69, 80, 162, 283, 300, 392, 402], "most": [24, 33, 40, 42, 43, 49, 61, 75, 94, 100, 130, 133, 148, 155, 156, 157, 158, 160, 162, 163, 165, 171, 174, 175, 265, 267, 272, 377, 379, 380, 386, 388, 390, 392, 419], "recommend": [24, 62, 89, 92, 100, 103, 120, 134, 135, 136, 141, 143, 145, 148, 155, 160, 165, 170, 173, 175, 306, 390, 402, 406, 420], "n_z": 24, "n_t": 24, "mgrid": [24, 84], "triangul": 24, "tri": [24, 51, 156, 223, 361, 373, 387], "angl": [24, 84, 251], "pi": [24, 84, 252, 256], "sin": [24, 84], "asarrai": [24, 41, 51, 103, 254, 259], "triangl": [24, 406], "inner_mesh": [24, 406], "nested_sample_point": 24, "_sample_locations_between_surfac": 24, "ey": [24, 41, 44, 64, 65, 66, 69, 71, 80, 84, 89, 163, 170, 213], "line_sample_point": 24, "_line_sample_loc": 24, "segment_half_width": 24, "n_point": 24, "ball_sample_point": 24, "_ball_sample_loc": 24, "ball_radiu": 24, "view_init": 24, "67": [24, 27, 32, 33, 36, 42, 43, 44, 102, 105, 109, 118, 148, 191], "plot_trisurf": 24, "scatter": [24, 94, 145, 148, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 372], "sample_point": 24, "983": [24, 27], "plot_surface_projection_strategi": [24, 27], "mean_haxbi": [25, 174], "0x7f1354b57820": 25, "0x7f1353d00be0": 25, "apply_mask": [25, 174, 312, 315], "masked_data": [25, 99, 174], "timepoint": [25, 174], "150": [25, 33, 36, 41, 42, 44, 80, 82, 102, 105, 111, 174, 362], "And": [25, 41, 149, 164, 171, 174], "ylabel": [25, 30, 32, 42, 48, 49, 55, 57, 58, 65, 66, 174], "intens": [25, 50, 70, 81, 88, 94, 173, 174, 250, 282, 302, 306, 361, 362, 368, 374, 375, 376, 383, 390, 406, 419], "xlim": [25, 30, 174], "95": [25, 33, 36, 42, 43, 44, 91, 102, 105, 142, 148, 174, 255, 257, 258], "897": [25, 27], "1353": [25, 27], "plot_visu": [25, 27], "releas": [26, 111, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 192, 200, 213, 214, 220, 233, 283], "fetch_megatrawls_netmat": 26, "partial": [26, 48, 52, 99, 149, 153, 180, 185, 220, 307], "300": [26, 33, 36, 41, 42, 44, 55, 61, 70, 100, 102, 200, 208, 220], "eigen": [26, 220], "regress": [26, 30, 31, 39, 40, 44, 55, 56, 111, 113, 123, 133, 139, 140, 141, 145, 148, 150, 155, 159, 160, 161, 163, 164, 165, 168, 188, 243, 244, 245, 246, 249, 251, 252, 257, 258, 265, 278, 306, 307, 310, 311, 312, 313, 314, 315, 316, 402, 421], "netmat": [26, 123, 148], "eigen_regress": [26, 220], "partial_correl": [26, 58, 185, 220], "correlation_matric": [26, 47, 51, 220], "util": [26, 43, 44, 48, 50, 87, 88, 102, 105, 106, 121, 128, 132, 139, 143, 148, 153, 163, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 303, 414], "n": [26, 41, 42, 49, 51, 56, 57, 58, 62, 70, 71, 77, 79, 80, 84, 88, 91, 93, 94, 99, 100, 102, 103, 105, 106, 107, 111, 115, 116, 118, 119, 121, 123, 126, 148, 156, 162, 163, 165, 190, 199, 206, 209, 210, 220, 228, 250, 251, 252, 256, 257, 258, 265, 274, 306, 307, 311, 314, 318, 319, 320, 322, 323, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 372, 390, 393, 394, 420], "plot_matrix": [26, 35, 50, 51, 52, 53, 54, 56, 57, 58, 130, 131, 136, 148, 153], "496": [26, 27, 33, 35, 45], "plot_visualize_megatrawls_netmat": [26, 27], "871": 27, "auto_examples_01_plot": 27, "289": [27, 33, 41, 111, 190], "915": [27, 40, 41, 45, 109, 111, 222], "09": [27, 30, 32, 33, 44, 59, 96, 111, 194, 207, 213, 218, 227, 238, 265, 278, 283, 400, 402], "1042": [27, 100, 111], "mvpa": [28, 110, 168, 170, 421], "stimuli": [28, 30, 32, 33, 45, 66, 80, 98, 110, 149, 150, 152, 153, 155, 165, 170, 173, 175, 212, 222, 285, 302, 309, 312, 315, 354, 376, 381], "jimura": [28, 45, 110, 111, 221, 246, 249, 376], "mix": [28, 44, 45, 110, 159, 161, 188, 221, 246, 248, 249, 376, 421], "gambl": [28, 45, 110, 159, 161, 221, 246, 249, 376, 421], "morphometri": [28, 45, 74, 82, 110, 155, 166, 168, 169, 170, 213, 214, 227, 244, 249, 278, 281, 288, 299, 309, 315, 326, 354, 365, 376, 381, 398, 400, 421], "oasi": [28, 45, 74, 82, 110, 111, 161, 167, 169, 213, 214, 227, 244, 249, 278, 281, 288, 299, 309, 315, 326, 354, 365, 376, 381, 398, 400], "prior": [28, 45, 48, 54, 66, 91, 110, 111, 141, 148, 149, 161, 164, 181, 200, 227, 243, 244, 248, 249, 265, 278, 313, 314, 316, 362, 376, 381], "svm": [28, 34, 35, 39, 42, 44, 45, 51, 99, 110, 113, 128, 148, 157, 159, 161, 168, 175, 212, 243, 290, 376, 381, 383, 421], "searchlight": [28, 44, 45, 110, 111, 127, 130, 133, 139, 148, 155, 159, 168, 169, 170, 212, 232, 288, 290, 293, 295, 296, 309, 315, 369, 376, 380, 381, 405, 406, 421], "cross": [28, 32, 33, 36, 37, 40, 42, 44, 45, 51, 55, 97, 99, 109, 110, 111, 114, 139, 148, 149, 156, 159, 182, 212, 223, 227, 235, 243, 244, 245, 246, 247, 248, 249, 290, 300, 309, 315, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 361, 366, 369, 374, 375, 376, 381, 383, 419, 421], "simul": [28, 45, 46, 59, 63, 68, 100, 110, 151, 160, 182, 247, 325, 373, 381, 421], "encod": [28, 41, 45, 71, 75, 84, 110, 111, 156, 157, 175, 222, 245, 246, 285, 302, 306, 309, 312, 315, 354, 376], "miyawaki": [28, 45, 89, 110, 111, 175, 222, 285, 302, 309, 312, 315, 354, 376, 381], "2008": [28, 45, 110, 111, 175, 222, 280, 285, 302, 309, 312, 315, 326, 354, 376, 381], "effici": [29, 66, 111, 154, 156, 162, 163, 181, 184, 223, 245, 246], "featur": [29, 31, 32, 33, 34, 35, 42, 44, 49, 51, 66, 94, 99, 103, 104, 111, 113, 131, 133, 134, 139, 143, 156, 157, 158, 159, 160, 161, 162, 163, 170, 171, 175, 181, 182, 184, 243, 244, 245, 246, 247, 248, 249, 250, 253, 325, 387, 389, 390, 392, 402, 403, 417, 420, 421], "func_img": [29, 155], "identifi": [29, 30, 32, 33, 50, 58, 62, 94, 111, 120, 143, 148, 153, 161, 164, 165, 167, 190, 261, 265, 267, 272, 274], "sep": [29, 30, 31, 32, 33, 34, 35, 36, 37, 72, 94, 102, 153, 173, 327, 329, 330], "restrict": [29, 30, 31, 89, 91, 94, 102, 133, 148, 155, 160, 175, 188, 242], "place": [29, 98, 130, 148, 223, 274, 302, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 362, 369, 406], "uniqu": [29, 30, 32, 33, 35, 49, 51, 58, 65, 86, 94, 100, 102, 128, 148, 149, 157, 173, 190, 196, 197, 272, 313, 390, 391, 392], "aim": [29, 34, 123, 148, 155, 163, 168, 248, 249], "act": [29, 34, 111, 129, 148, 168, 186, 187, 257, 258], "sever": [29, 31, 33, 34, 49, 51, 61, 62, 64, 66, 75, 86, 94, 99, 103, 113, 127, 133, 148, 149, 157, 159, 160, 162, 163, 165, 168, 171, 173, 174, 175, 182, 265, 283, 294, 321, 323, 324, 364, 374, 388, 402, 421], "niftimask": [29, 32, 34, 35, 36, 40, 41, 42, 43, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 83, 91, 94, 96, 98, 99, 100, 102, 103, 104, 105, 106, 110, 113, 133, 136, 139, 140, 141, 142, 143, 148, 155, 158, 172, 209, 222, 243, 244, 245, 246, 248, 249, 250, 251, 262, 265, 278, 280, 290, 295, 306, 307, 309, 310, 311, 313, 314, 316, 320, 326, 366, 370, 375, 376, 381, 388, 398, 411, 421], "relev": [29, 34, 49, 56, 66, 69, 104, 114, 141, 145, 148, 155, 156, 162, 163, 171, 174, 175, 280, 306, 307, 326], "classic": [29, 34, 94, 156, 173], "univari": [29, 33, 34, 97, 109, 110, 111, 157, 159, 161, 212, 217, 218, 243, 244, 245, 246, 248, 249, 288, 290, 295, 309, 315, 326, 354, 368, 376, 381, 421], "vector": [29, 32, 33, 34, 35, 40, 44, 51, 64, 84, 98, 99, 102, 105, 106, 113, 129, 148, 155, 156, 158, 168, 180, 243, 244, 245, 246, 252, 255, 256, 257, 258, 261, 263, 306, 372, 406], "screening_percentil": [29, 32, 33, 34, 42, 43, 155, 243, 244, 245, 246, 248, 249], "percent": [29, 34, 41, 42, 43, 62, 100, 101, 108, 136, 148, 155, 273, 282, 302, 310, 311, 312, 313, 314, 315, 316, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 374, 382, 384, 386, 402], "smoothing_fwhm": [29, 33, 34, 35, 42, 49, 50, 53, 54, 55, 56, 58, 62, 66, 67, 75, 76, 77, 79, 89, 91, 92, 98, 100, 101, 102, 104, 105, 106, 129, 148, 153, 155, 175, 243, 244, 245, 246, 250, 251, 265, 268, 278, 280, 310, 311, 312, 313, 314, 315, 316, 317, 388, 390, 392], "accuraci": [29, 30, 31, 32, 33, 35, 37, 41, 51, 98, 99, 140, 148, 159, 160, 168, 170, 243, 245, 247, 248, 421], "y_pred": [29, 31, 34, 41, 43, 155, 243, 244, 245, 246, 248, 249], "out": [29, 33, 34, 35, 36, 40, 42, 43, 44, 48, 51, 53, 54, 55, 56, 57, 58, 64, 69, 98, 100, 102, 105, 106, 113, 114, 133, 136, 140, 148, 150, 155, 156, 158, 160, 162, 163, 164, 168, 174, 213, 243, 244, 245, 246, 248, 249, 290, 298, 310, 311, 312, 313, 314, 315, 316, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 371, 388, 390, 391, 401, 402, 406, 419], "9444444444444444": 29, "weight_img": [29, 42, 98, 155, 175], "Or": [29, 114, 155, 199, 200, 419], "dynam": [29, 111, 155, 307], "html": [29, 33, 34, 36, 49, 52, 53, 54, 56, 58, 61, 62, 64, 75, 77, 98, 133, 137, 141, 143, 148, 155, 163, 166, 175, 191, 203, 212, 243, 244, 245, 246, 250, 251, 265, 278, 307, 311, 314, 368, 382, 383, 384, 385, 386, 388, 390, 398, 400, 419, 420], "viewer": [29, 133, 148, 155, 174, 383, 419], "haxby_face_vs_hous": 29, "28": [29, 33, 36, 42, 43, 44, 45, 62, 89, 91, 102, 103, 105, 111, 115, 133, 148, 191, 200], "463": [29, 33, 45, 190], "plot_haxby_anova_svm": [29, 45, 128, 148], "fetcher": [30, 32, 123, 124, 125, 128, 133, 136, 137, 140, 142, 143, 144, 145, 148, 164, 188, 194, 195, 206, 207, 208, 209, 216, 217, 218, 227, 231], "get_data": [30, 36, 42, 49, 77, 79, 84, 94, 102, 105, 106, 107, 128, 136, 148, 173, 293], "abl": [30, 32, 163, 171, 303, 377, 379, 380, 419], "resting_st": 30, "task_mask": [30, 32], "logical_not": [30, 36, 77, 105], "find": [30, 32, 44, 50, 56, 71, 79, 100, 118, 148, 153, 154, 155, 157, 159, 162, 163, 165, 168, 171, 175, 184, 192, 285, 320, 321, 323, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 360, 361, 383, 387, 389, 395, 419, 420, 421], "remain": [30, 32, 36, 40, 42, 43, 44, 48, 53, 56, 89, 100, 102, 105, 139, 148, 160, 163, 406], "categori": [30, 32, 33, 98, 102, 113, 155, 157, 163, 173, 212], "tag": [30, 32, 69, 108, 114, 163, 171, 303, 304], "classification_target": [30, 32], "svc_l2": [30, 156, 243, 245], "svc_l1": [30, 32, 156, 243, 245], "logistic_l1": [30, 156, 243, 245], "logistic_l2": [30, 156, 243, 245], "ridge_classifi": [30, 156, 243, 245], "predict": [30, 31, 33, 39, 40, 44, 51, 58, 60, 73, 97, 109, 111, 113, 140, 141, 143, 148, 157, 158, 160, 161, 163, 165, 166, 168, 169, 170, 180, 198, 206, 209, 220, 230, 243, 244, 245, 246, 247, 248, 249, 257, 258, 265, 278, 283, 284, 295, 300, 309, 314, 316, 320, 354, 376, 399, 420, 421], "score": [30, 32, 37, 41, 42, 44, 48, 51, 80, 98, 99, 102, 103, 105, 106, 139, 140, 148, 155, 156, 158, 159, 161, 170, 182, 227, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 278, 282, 302, 306, 310, 311, 312, 313, 314, 315, 316, 326, 362, 388, 390, 402, 421], "classifiers_data": 30, "classifier_nam": 30, "roc_auc": [30, 32, 98, 158, 243, 245], "t0": [30, 41], "2f": [30, 32, 41, 42, 43, 44, 49, 57, 89], "auc": [30, 32, 155, 168], "std": [30, 32, 44, 51, 89, 104], "______________________________________________________________________": 30, "73": [30, 32, 33, 36, 42, 43, 91, 102], "scissor": [30, 32, 33, 173], "92": [30, 32, 33, 36, 42, 43, 44, 77, 82, 102, 111, 326], "98": [30, 32, 33, 36, 42, 43, 44, 87, 91, 93, 101, 102, 109, 111, 142, 148, 280, 326], "cat": [30, 32, 33, 98, 113, 155, 169, 173], "shoe": [30, 32, 33, 34, 173], "08": [30, 32, 33, 36, 45, 49, 63, 96, 111, 220, 287, 306, 362], "scrambledpix": [30, 32, 33, 94, 173], "bottl": [30, 32, 33, 34, 173], "chair": [30, 32, 33, 173], "44": [30, 33, 36, 42, 43, 44, 72, 91, 102, 111, 118, 148, 280, 326], "97": [30, 33, 36, 42, 43, 44, 88, 102], "82": [30, 32, 33, 36, 42, 43, 89, 102], "89": [30, 32, 33, 36, 42, 43, 44, 49, 72, 77, 102, 105], "07": [30, 32, 33, 36, 44, 45, 49, 76, 82, 91, 96, 111, 156, 200, 213, 238, 260, 389, 395], "85": [30, 33, 36, 42, 43, 44, 47, 91, 102, 105, 121, 148, 320, 321, 323], "62": [30, 33, 36, 42, 43, 44, 62, 72, 100, 102, 107, 111, 130, 148, 197], "75": [30, 33, 36, 40, 42, 43, 66, 72, 76, 81, 82, 88, 90, 91, 102, 105, 106, 111, 191, 326], "87": [30, 32, 33, 36, 42, 43, 44, 72, 91, 102, 111], "rudimentari": 30, "diagram": [30, 165], "all_categori": 30, "hstack": [30, 64, 67, 77, 80, 255, 257, 258], "tick_posit": [30, 32], "ytick": [30, 44, 48, 51, 99], "height": [30, 33, 51, 99, 136, 148, 265, 278, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 362, 363, 366, 368, 369, 372, 373, 374, 375, 376, 382, 384, 386, 398, 400], "zip": [30, 32, 34, 38, 41, 50, 51, 53, 58, 99, 101, 103, 108, 110, 153, 171, 198, 213], "score_mean": [30, 32], "barh": [30, 48, 51, 99], "xmin": [30, 361, 362, 363, 366, 368, 369, 372, 374, 375, 376], "loc": [30, 32, 34, 42, 43, 49, 68, 70, 91, 100, 327, 329, 330], "lower": [30, 31, 32, 39, 51, 70, 77, 89, 94, 123, 148, 154, 157, 161, 162, 168, 174, 180, 186, 187, 243, 244, 245, 246, 255, 257, 258, 320, 323, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 360, 361, 362, 366, 368, 369, 372, 373, 374, 375, 377, 401], "ncol": [30, 63, 79, 100, 101, 105], "tight_layout": [30, 32, 48, 51, 55, 58, 70, 78, 80, 99], "penalti": [30, 39, 43, 156, 161, 168, 243, 244, 245, 248, 249], "logist": [30, 31, 111, 156, 157, 161, 243, 245, 248, 249], "main": [30, 56, 66, 67, 68, 71, 94, 116, 145, 148, 155, 160, 163, 164, 168, 173, 175, 190, 265, 267, 272, 303, 321, 323, 328], "ell_1": 30, "ell_2": 30, "spars": [30, 39, 40, 46, 48, 49, 57, 58, 59, 110, 111, 150, 151, 153, 154, 156, 161, 168, 169, 176, 181, 182, 184, 198, 209, 243, 244, 245, 246, 248, 249, 250, 251, 309, 314, 359, 363, 373, 377, 381, 382, 390, 421], "intra": [30, 32], "logical_or": 30, "assert": 30, "fmri_niimgs_condit": 30, "mean_epi_img": 30, "ab": [30, 43, 44, 53, 58, 81, 84, 102, 103, 104, 111, 162, 181, 184, 193, 203, 232, 283, 326, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 402], "1e": [30, 39, 40, 49, 181, 182, 184, 227, 248, 249, 253, 287, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 376, 379, 383, 389, 395], "507": [30, 33, 45], "1340": [30, 42, 102, 111, 161], "plot_haxby_different_estim": [30, 45, 136, 148], "implicit": [31, 39, 139, 148, 157, 168, 245, 246], "aggreg": [31, 39, 58, 139, 148, 157, 168, 191, 245, 246], "cost": [31, 39, 53, 79, 139, 148, 152, 156, 157, 161, 162, 163, 168, 175, 245, 246], "data_fil": 31, "behavior": [31, 34, 35, 40, 41, 48, 50, 75, 77, 98, 111, 113, 123, 130, 140, 145, 148, 155, 156, 158, 159, 163, 168, 172, 175, 201, 220, 309, 310, 311, 312, 313, 314, 315, 316, 390, 421], "condition_mask_train": 31, "condition_mask_test": 31, "x_train": [31, 41, 44], "x_test": [31, 41, 44, 243, 244, 245, 246, 247], "y_train": [31, 34, 41, 44], "y_test": [31, 34, 41, 44, 243, 244, 245, 246, 247], "background_img": [31, 43], "fremclassifi": [31, 139, 140, 148, 156, 157, 243, 246], "_util": [31, 32, 39, 47, 49, 52, 54, 57, 62, 77, 79, 123, 142, 145, 148, 162], "param_valid": [31, 32, 39, 128, 148], "bigger": [31, 39, 43], "feature_select": [31, 35, 36, 41, 42, 44, 94, 98, 102, 105, 106, 158], "_univariate_select": 31, "112": [31, 33, 41, 43, 92, 93, 111, 306, 307], "10420": 31, "113": [31, 33, 41, 43], "runtimewarn": [31, 58, 77, 79], "invalid": [31, 58, 120, 123, 148], "encount": [31, 58, 77, 79, 377, 379, 380], "divid": [31, 55, 76, 77, 79, 126, 148, 156, 165, 168, 186, 388], "4444": [31, 34], "coef": [31, 44, 98, 265, 274], "52": [31, 33, 36, 42, 43, 44, 48, 55, 58, 77, 82, 91, 102, 175, 192, 419], "improv": [31, 63, 75, 111, 120, 126, 129, 132, 133, 136, 143, 144, 145, 148, 155, 156, 157, 161, 162, 163, 165, 168, 173, 175, 208, 213, 283, 310, 313, 387, 402], "mechan": [31, 155], "reason": [31, 43, 48, 66, 92, 114, 156, 158, 160, 162, 163, 165, 171, 406], "even": [31, 42, 49, 50, 65, 79, 100, 114, 136, 141, 148, 162, 163, 170, 223, 225], "heavier": 31, "l2": [31, 156, 157, 243, 245, 387, 388, 389], "ridg": [31, 40, 44, 156, 157, 161, 243, 244, 245, 246], "fremregressor": [31, 39, 139, 140, 148, 156, 157, 244, 245], "solv": [31, 39, 162, 163, 170, 171, 251, 326], "823": [31, 45, 98], "1346": 31, "plot_haxby_frem": [31, 45], "area": [32, 64, 67, 80, 94, 141, 148, 153, 155, 160, 164, 165, 168, 169, 175, 203, 213, 232, 287, 327, 329, 330, 339, 342, 377, 380, 386], "older": [32, 35, 36, 40, 41, 42, 47, 48, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 111, 113, 128, 129, 130, 131, 148, 163, 173, 227, 285], "upgrad": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 120, 128, 130, 136, 141, 143, 148], "masker": [32, 33, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 119, 120, 121, 136, 139, 140, 141, 142, 143, 145, 148, 150, 152, 155, 158, 164, 172, 174, 243, 244, 245, 246, 248, 249, 250, 251, 265, 278, 280, 306, 307, 326, 370, 388, 390, 393, 394, 396, 397, 421], "input_data": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 143, 148], "That": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 140, 148, 168, 252, 256, 265, 267, 272], "occurr": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 160], "practic": [32, 51, 69, 99, 149, 152, 156, 158, 160, 162, 163, 164, 165, 167, 170, 173, 174], "unmask": [32, 33, 44, 112, 128, 131, 148, 172, 174, 250, 251, 421], "task_data": 32, "mask_nam": 32, "mask_scor": 32, "mask_chance_scor": 32, "tobe": [32, 111, 233], "518": [32, 33], "screen": [32, 111, 161, 243, 244, 245, 246, 248, 249], "rais": [32, 48, 50, 63, 78, 94, 120, 123, 130, 132, 133, 136, 143, 145, 148, 173, 272, 278, 280, 281, 284, 293, 297, 298, 310, 311, 313, 314, 316, 322, 420], "clustering_percentil": [32, 245, 246], "76": [32, 33, 41, 42, 43, 44, 66, 72, 102, 194, 202], "83": [32, 33, 36, 42, 43, 44, 72, 102, 111, 115, 148, 280, 326], "86": [32, 33, 36, 42, 43, 102, 105], "xtick": [32, 34, 35, 44, 94], "rgb": [32, 385], "score_ch": 32, "edgecolor": [32, 40, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 363, 366, 368, 369, 372, 374, 375, 376], "ylim": 32, "59": [32, 33, 36, 42, 43, 44, 45, 49, 54, 72, 91, 100, 102, 111, 115, 148, 191, 306, 307], "121": [32, 33, 41, 45, 66], "1348": [32, 45], "plot_haxby_full_analysi": [32, 45, 136, 148], "record": [33, 40, 66, 155, 165, 168], "unique_sess": 33, "datafram": [33, 62, 63, 64, 66, 67, 72, 75, 76, 77, 78, 79, 80, 81, 100, 101, 114, 139, 143, 144, 148, 180, 188, 194, 195, 206, 207, 208, 216, 217, 218, 227, 250, 251, 265, 266, 268, 272, 278, 279, 280, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 364, 365, 367, 387, 388, 389, 390, 399, 402], "conditions_sess": 33, "frame": [33, 63, 69, 89, 175, 267, 290, 306, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 398], "n_scan": [33, 61, 63, 69, 71, 108, 165, 267], "frame_tim": [33, 63, 68, 69, 71, 108, 164, 266, 267, 272], "events_": 33, "insert": [33, 199, 200, 265, 278, 382, 383, 384, 385, 386, 398, 400, 419], "togeth": [33, 48, 68, 69, 70, 80, 149, 157, 158, 165, 168, 206, 208, 242, 245, 246, 250, 268, 283, 390], "conditions_label": 33, "008": [33, 41], "nilearn_cach": [33, 35, 36, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 92, 98, 99, 100, 102, 103, 104, 105, 106, 153], "grab": [33, 47, 48, 49, 65, 100, 114], "fmri_sess": 33, "condition_": 33, "________________________________________________________________________________": [33, 43, 48, 49, 53, 54, 56, 58], "nifti_mask": [33, 35, 36, 42, 92, 102, 105, 106, 113], "_filter_and_mask": 33, "0x7f1354afe490": 33, "0x7f1343aa7a90": 33, "detrend": [33, 40, 41, 49, 51, 53, 54, 55, 56, 58, 61, 89, 91, 92, 94, 99, 100, 113, 118, 133, 141, 143, 148, 174, 175, 250, 251, 283, 289, 310, 311, 312, 313, 314, 315, 316, 362, 388, 390, 402, 403], "high_variance_confound": [33, 49, 53, 54, 56, 58, 66, 89, 91, 92, 123, 140, 148, 175, 310, 311, 312, 313, 314, 315, 316], "low_pass": [33, 49, 51, 53, 54, 55, 56, 58, 61, 89, 91, 92, 99, 100, 133, 148, 175, 243, 244, 245, 246, 248, 249, 250, 251, 283, 310, 311, 312, 313, 314, 315, 316, 388, 390, 401, 402], "standardize_confound": [33, 49, 53, 54, 56, 58, 89, 91, 92, 143, 148, 175, 250, 310, 311, 312, 313, 314, 315, 316, 402], "target_affin": [33, 49, 53, 54, 56, 84, 89, 92, 174, 175, 243, 244, 245, 246, 248, 249, 250, 251, 265, 268, 278, 295, 298, 312, 315, 318, 320, 321, 322, 323, 388], "target_shap": [33, 49, 53, 54, 56, 84, 89, 92, 174, 175, 243, 244, 245, 246, 248, 249, 250, 251, 265, 268, 278, 295, 298, 312, 315, 318, 320, 321, 323, 388], "memory_level": [33, 35, 36, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 89, 91, 92, 98, 99, 100, 102, 103, 104, 105, 106, 153, 175, 181, 243, 244, 245, 246, 248, 249, 250, 251, 265, 268, 278, 284, 310, 311, 312, 313, 314, 315, 316, 388, 389, 390], "joblib": [33, 43, 48, 49, 53, 54, 56, 58, 92, 120, 136, 139, 143, 148, 152, 181, 243, 244, 245, 246, 248, 249, 250, 251, 265, 278, 284, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 388, 389, 390], "verbos": [33, 35, 36, 42, 43, 44, 48, 49, 52, 53, 54, 55, 56, 57, 58, 61, 89, 91, 92, 98, 99, 100, 102, 105, 133, 148, 175, 181, 182, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 243, 244, 245, 246, 247, 248, 249, 250, 251, 260, 265, 268, 274, 278, 280, 284, 295, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 326, 387, 388, 389, 390, 395], "confound": [33, 47, 49, 50, 51, 52, 53, 54, 55, 58, 62, 77, 78, 99, 100, 101, 105, 108, 111, 113, 118, 123, 133, 139, 140, 141, 143, 145, 148, 150, 153, 154, 155, 162, 168, 172, 174, 180, 189, 209, 250, 251, 265, 278, 279, 280, 283, 289, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 326, 388, 390, 402, 403, 410, 421], "sample_mask": [33, 49, 53, 54, 56, 58, 66, 120, 141, 143, 145, 148, 265, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 390, 402], "__________________________________________________filter_and_mask": 33, "0min": [33, 48, 49, 52, 53, 54, 56, 58], "run_glm": [33, 69, 108, 141, 145, 148], "114769": 33, "149296": 33, "367151": 33, "779998": 33, "bin": [33, 49, 163, 265, 274, 420], "random_st": [33, 36, 42, 43, 44, 48, 49, 50, 51, 92, 99, 103, 104, 145, 148, 153, 243, 245, 250, 251, 265, 274, 280, 326, 387, 388], "__________________________________________________________run_glm": 33, "44475": 33, "379275": 33, "___________________________________________________________unmask": 33, "013524": 33, "844135": 33, "217486": 33, "430348": 33, "106474": 33, "182434": 33, "747494": 33, "660679": 33, "080159": 33, "32614": 33, "253894": 33, "452682": 33, "240914": 33, "244136": 33, "0x7f13548efcd0": 33, "0x7f1345d9c1f0": 33, "660587": 33, "536042": 33, "254408": 33, "842804": 33, "871458": 33, "990755": 33, "627194": 33, "290147": 33, "153013": 33, "320123": 33, "15748": 33, "082416": 33, "997775": 33, "754066": 33, "109412": 33, "330079": 33, "030863": 33, "731439": 33, "559734": 33, "720924": 33, "0x7f13548da430": 33, "0x7f1353dee4f0": 33, "205584": 33, "587189": 33, "836576": 33, "676956": 33, "695564": 33, "455092": 33, "457214": 33, "537178": 33, "803925": 33, "570463": 33, "614932": 33, "232909": 33, "527175": 33, "062723": 33, "126756": 33, "274819": 33, "635166": 33, "395548": 33, "250365": 33, "364311": 33, "0x7f135532c1c0": 33, "0x7f13548bd670": 33, "026206": 33, "974948": 33, "616334": 33, "104535": 33, "503142": 33, "639351": 33, "271132": 33, "047089": 33, "318104": 33, "724813": 33, "073279": 33, "316956": 33, "380183": 33, "690685": 33, "631912": 33, "753286": 33, "155784": 33, "065658": 33, "186135": 33, "69267": 33, "0x7f1345d08df0": 33, "0x7f13632c3790": 33, "033577": 33, "45955": 33, "57195": 33, "994713": 33, "158342": 33, "068131": 33, "396497": 33, "424937": 33, "091867": 33, "463109": 33, "054041": 33, "122921": 33, "025223": 33, "562991": 33, "001653": 33, "968729": 33, "274665": 33, "667": 33, "564329": 33, "496068": 33, "0x7f13548ef8b0": 33, "0x7f135492ff40": 33, "150482": 33, "81308": 33, "204891": 33, "417917": 33, "987059": 33, "41717": 33, "24774": 33, "674399": 33, "731234": 33, "341998": 33, "714869": 33, "182988": 33, "222674": 33, "480354": 33, "366899": 33, "091153": 33, "2708": 33, "247146": 33, "251249": 33, "413063": 33, "0x7f1353c8f580": 33, "0x7f1354884130": 33, "129": [33, 41, 67, 118, 148], "51173": 33, "279282": 33, "911755": 33, "839058": 33, "290412": 33, "609221": 33, "090297": 33, "822602": 33, "747918": 33, "108861": 33, "095788": 33, "376995": 33, "807425": 33, "826947": 33, "017351": 33, "622242": 33, "625042": 33, "231224": 33, "056424": 33, "672737": 33, "0x7f135532ca00": 33, "0x7f1355232820": 33, "915996": 33, "07737": 33, "981215": 33, "372383": 33, "200737": 33, "008536": 33, "066075": 33, "168487": 33, "636238": 33, "145684": 33, "932773": 33, "580823": 33, "455655": 33, "685537": 33, "715791": 33, "245273": 33, "099707": 33, "79538": 33, "913842": 33, "519925": 33, "629218": 33, "0x7f1354eb7f70": 33, "0x7f1343aa7910": 33, "292987": 33, "392956": 33, "935719": 33, "602484": 33, "425611": 33, "348025": 33, "31867": 33, "408223": 33, "534932": 33, "150519": 33, "149007": 33, "640215": 33, "640699": 33, "50369": 33, "246384": 33, "346316": 33, "162243": 33, "519251": 33, "203695": 33, "335337": 33, "0x7f133bfc4610": 33, "0x7f135554c910": 33, "223948": 33, "959582": 33, "677519": 33, "024363": 33, "034515": 33, "612397": 33, "62798": 33, "160445": 33, "506632": 33, "459388": 33, "261016": 33, "747236": 33, "231796": 33, "098904": 33, "148582": 33, "999934": 33, "548262": 33, "09934": 33, "222824": 33, "318977": 33, "0x7f135d29dfd0": 33, "0x7f1353c8fe20": 33, "66533": 33, "299562": 33, "647343": 33, "331865": 33, "175763": 33, "429485": 33, "146358": 33, "947626": 33, "806852": 33, "720554": 33, "008926": 33, "4544": 33, "279543": 33, "828183": 33, "463642": 33, "26599": 33, "058735": 33, "191442": 33, "390268": 33, "112207": 33, "0x7f13552323d0": 33, "0x7f1353dee940": 33, "095605": 33, "449202": 33, "59974": 33, "179998": 33, "340751": 33, "056108": 33, "043261": 33, "144442": 33, "517954": 33, "611394": 33, "797134e": 33, "317655e": 33, "398581": 33, "488427": 33, "714396": 33, "869941": 33, "924894": 33, "723724": 33, "145297": 33, "821272": 33, "summari": [33, 62, 64, 91, 141, 163, 253], "make_glm_report": [33, 61, 62, 64, 75, 120, 140, 143, 148], "mean_img_": [33, 64, 67], "drift_ord": [33, 63, 66, 164, 265, 268, 272], "fir_delai": [33, 63, 65, 265, 267, 268, 272], "glover": [33, 63, 66, 68, 69, 108, 164, 265, 267, 268, 269, 270, 271, 272], "scaling_axi": [33, 100, 143, 148, 265], "signal_sc": [33, 70, 100, 143, 148, 265, 268], "slice_time_ref": [33, 61, 66, 69, 71, 265, 268], "subject_label": [33, 62, 78, 101, 265, 278, 279, 280], "\u03b1": 33, "minimum": [33, 77, 79, 89, 118, 120, 121, 126, 128, 129, 130, 133, 136, 139, 141, 143, 148, 153, 265, 278, 282, 302, 310, 313, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 357, 363, 383, 390, 391, 392, 393, 399, 400], "distanc": [33, 248, 249, 265, 278, 357, 399, 400, 406], "46": [33, 36, 42, 43, 44, 58, 62, 75, 79, 82, 91, 93, 100, 102, 107, 109, 115, 148, 175, 191, 193, 419], "88": [33, 36, 42, 43, 81, 89, 91, 102, 111, 326], "147": [33, 41], "38": [33, 42, 43, 62, 77, 91, 102, 133, 148], "393": 33, "196": [33, 41], "43": [33, 36, 41, 42, 43, 44, 48, 91, 102, 105, 111, 121, 148, 193, 326], "2264": 33, "50": [33, 36, 42, 43, 44, 45, 49, 54, 57, 58, 62, 66, 73, 93, 98, 102, 105, 111, 114, 160, 162, 175, 182, 184, 220, 221, 245, 246, 253, 267, 269, 270, 271, 272, 275, 276, 277, 285, 306, 307, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 388, 390, 392, 419], "77": [33, 36, 42, 43, 66, 72, 102], "246": [33, 41, 64, 72], "541": 33, "94": [33, 36, 42, 43, 44, 77, 91, 102, 105, 106, 217, 218], "344": [33, 41], "492": 33, "12a": 33, "58": [33, 36, 37, 39, 42, 43, 45, 58, 59, 91, 102, 133, 148], "1132": 33, "639": 33, "984": 33, "16a": 33, "47": [33, 36, 42, 43, 48, 91, 98, 102, 108, 109, 111, 188, 193, 194, 213, 238], "49": [33, 42, 43, 67, 86, 91, 102, 111, 133, 148], "787": 33, "23a": 33, "65": [33, 36, 42, 43, 44, 91, 102, 105, 121, 148], "27a": 33, "295": [33, 41, 111, 203], "590": [33, 36, 42, 102, 108, 109], "31a": 33, "31b": 33, "32": [33, 34, 36, 40, 42, 43, 44, 58, 66, 84, 91, 102, 175, 269, 270, 271, 275, 276, 277, 419], "41": [33, 36, 42, 43, 44, 45, 49, 51, 59, 72, 91, 102, 111, 389, 395], "41a": 33, "2214": [33, 136, 148], "42a": 33, "42b": 33, "442": 33, "43a": 33, "56": [33, 35, 36, 37, 42, 43, 44, 45, 64, 72, 73, 102, 111, 156, 193], "58a": 33, "64a": 33, "67a": 33, "72": [33, 36, 42, 43, 44, 56, 58, 62, 91, 93, 102, 111, 142, 148, 161, 207], "80": [33, 36, 42, 43, 44, 47, 54, 65, 66, 72, 84, 102, 103, 105, 111, 163, 198, 282, 302, 337, 342, 344, 348, 354, 360, 406], "74": [33, 36, 42, 43, 44, 82, 91, 96, 102, 109], "79": [33, 36, 42, 43, 66, 72, 91, 102, 105], "78": [33, 36, 42, 43, 44, 49, 53, 54, 66, 72, 93, 102, 111, 160], "96a": 33, "101": [33, 40, 41, 43, 105, 111, 306, 307, 403], "103": [33, 41, 43, 111, 160, 247], "104": [33, 41, 43, 195], "105": [33, 41, 43], "106": [33, 41, 43, 111, 200, 201, 204, 220], "107": [33, 41, 43], "108": [33, 41, 43, 72], "110": [33, 36, 41, 42, 43, 44, 86, 102, 105, 111, 203, 210, 228], "111": [33, 41, 43, 53, 91], "114": [33, 41, 43, 44, 95, 96, 133, 148], "115": [33, 41, 43, 133, 148], "116": [33, 40, 41, 43, 72, 105, 190], "117": [33, 41, 43, 142, 148, 190], "118": [33, 41, 43], "119": [33, 41, 43, 56, 72, 121, 148], "120": [33, 36, 41, 42, 43, 44, 84, 99, 102, 105, 111, 203], "122": [33, 41, 66, 72, 115, 148, 192, 209], "123": [33, 41, 48, 92, 104, 195], "124": [33, 40, 41], "124a": 33, "125": [33, 40, 41, 72, 100, 105, 111], "127": [33, 41, 130, 148], "128": [33, 41, 63, 66, 69, 84, 108, 140, 148, 195], "130": [33, 36, 41, 42, 44, 102, 105], "131": [33, 41, 72, 111, 203], "132": [33, 41, 49, 54], "133": [33, 41], "134": [33, 41, 93, 105, 142, 148], "135": [33, 41, 72], "136": [33, 41], "137": [33, 41, 72], "138": [33, 41], "139": [33, 41], "140": [33, 36, 40, 41, 42, 44, 72, 102, 105], "141": [33, 41, 119, 148, 203], "142": [33, 41, 44, 121, 148], "143": [33, 41, 62, 72], "144": [33, 41, 111, 218], "144a": 33, "145": [33, 41, 61, 73], "146": [33, 41, 72, 124, 148], "146a": 33, "148": [33, 41], "149": [33, 41, 72, 105], "153": [33, 41, 72], "154": [33, 41, 56, 111, 306, 307, 362], "155": [33, 41, 209], "156": [33, 41, 72], "157": [33, 41], "158": [33, 41, 111, 362], "159": [33, 41, 72], "160": [33, 36, 41, 42, 44, 58, 84, 102, 105, 109, 111, 157, 206, 245, 246, 406], "161": [33, 41, 107], "162": [33, 41, 72], "163": [33, 41, 56], "164": [33, 41, 56, 72], "165": [33, 41, 56], "166": [33, 41, 47, 56], "167": [33, 41, 56, 72, 152], "169": [33, 41], "170": [33, 36, 41, 42, 44, 72, 102, 105], "171": [33, 41, 56, 111, 307], "172": [33, 41, 111, 157, 203, 245, 246], "173": [33, 41, 72], "174": [33, 41, 56, 111, 306, 307], "175": [33, 41], "176": [33, 41, 61, 72], "177": [33, 41], "178": [33, 41], "179": [33, 41, 91, 96], "180": [33, 36, 41, 42, 44, 84, 102, 105, 111, 133, 148, 157, 245, 246], "181": [33, 39, 41, 45, 76, 111, 260], "182": [33, 41, 100, 109, 196, 197, 200], "183": [33, 41], "184": [33, 41], "185": [33, 41], "186": [33, 41], "187": [33, 41, 56, 111, 306, 307], "188": [33, 41, 72], "189": [33, 41, 93, 111, 283, 290, 402], "190": [33, 36, 41, 42, 44, 102, 105], "191": [33, 41, 72], "192": [33, 41, 84], "194": [33, 41, 66, 73], "195": [33, 41, 70, 72, 73], "198": [33, 41, 72, 104, 199], "199": [33, 41], "200": [33, 36, 41, 42, 43, 44, 94, 102, 103, 105, 111, 180, 192, 200, 220, 248, 249], "201": [33, 41, 72], "204": [33, 41], "738": [33, 34], "204a": 33, "205": [33, 41], "206": [33, 41, 111, 208], "208": [33, 41, 111, 180], "209": [33, 41], "211": [33, 41, 43, 89, 93, 95, 96], "212": [33, 41, 43, 72, 199], "213": [33, 41], "214": [33, 41], "215": [33, 41, 72], "217": [33, 41, 43, 190], "218": [33, 41, 72, 196, 197, 200], "219": [33, 41], "220": [33, 36, 41, 42, 44, 102], "221": [33, 41, 72, 111, 195], "222": [33, 41], "223": [33, 41, 47, 49, 52, 54, 111, 213], "224": [33, 41, 72], "225": [33, 41, 42], "226": [33, 41], "227": [33, 41, 72], "229": [33, 41, 199], "230": [33, 36, 41, 42, 44, 72, 102], "231": [33, 41], "232": [33, 41], "233": [33, 41, 93, 290], "234": [33, 41, 72], "235": [33, 41, 94], "236": [33, 41, 58, 72], "237": [33, 41], "238": [33, 41, 111, 203], "239": [33, 41], "240": [33, 36, 41, 42, 44, 102], "241": [33, 41], "242": [33, 41, 111, 203], "243": [33, 41], "244": [33, 41], "245": [33, 41, 57, 73], "247": [33, 41], "248": [33, 41, 72], "249": [33, 41], "250": [33, 36, 41, 42, 44, 66, 102, 111], "251": [33, 41, 72], "253": [33, 41], "254": [33, 41, 72, 115, 148], "255": [33, 41, 142, 148], "256": [33, 41, 84, 140, 148, 195, 204], "257": [33, 41, 72], "259": [33, 41], "260": [33, 36, 41, 42, 44, 72, 102], "261": [33, 41, 111, 160], "262": [33, 41, 111], "263": [33, 41, 199], "264": [33, 41, 58, 72, 207], "265": [33, 41], "266": [33, 41, 72], "267": [33, 41, 111, 306, 307], "268": [33, 41], "269": [33, 41, 72, 111, 160], "270": [33, 36, 41, 42, 44, 102], "271": [33, 41], "272": [33, 41, 111, 232], "273": [33, 41, 111, 190], "274": [33, 41], "275": [33, 41, 72], "276": [33, 41], "277": [33, 41, 111, 306, 307], "278": [33, 41, 72], "279": [33, 41, 59], "280": [33, 36, 41, 42, 44, 52, 102], "281": [33, 41], "282": [33, 41], "283": [33, 41], "284": [33, 41, 66, 72, 94, 111, 232], "285": [33, 41], "286": [33, 41], "287": [33, 41], "288": [33, 41, 43, 48, 66, 72, 154, 250], "292": [33, 41, 111, 326], "296": [33, 41, 66, 72], "297": [33, 41, 73], "297a": 33, "298": [33, 41, 65, 111, 232, 326], "299": [33, 39, 41, 48, 154, 250], "302": [33, 41, 115, 148], "303": [33, 41], "304": [33, 41, 111, 161], "305": [33, 41], "306": [33, 41], "307": [33, 41], "308": [33, 41], "311": [33, 41], "312": [33, 41], "313": [33, 41, 111, 213, 238], "314": [33, 41, 111, 218], "315": [33, 41], "316": [33, 41], "317": [33, 41, 88, 96], "318": [33, 41], "319": [33, 41], "320": [33, 36, 41, 42, 44, 102, 111, 306], "321": [33, 41, 111, 161], "322": [33, 41, 48, 50, 103, 109], "323": [33, 41], "324": [33, 41], "325": [33, 41, 192], "326": [33, 41], "327": [33, 41, 111, 213, 238], "328": [33, 41, 43, 44], "329": [33, 41, 58, 111, 206], "330": [33, 36, 41, 42, 44, 102], "331": [33, 41], "332": [33, 41], "333": [33, 41, 94, 96], "334": [33, 41], "335": [33, 41], "337": [33, 41], "338": [33, 41], "339": [33, 41, 92, 96], "341": [33, 41, 111, 306], "342": [33, 41], "343": [33, 41, 91], "345": [33, 41, 44], "346": [33, 41, 64, 71], "347": [33, 41], "348": [33, 41, 56, 91], "349": [33, 41], "350": [33, 36, 41, 42, 44, 57, 59, 102], "351": [33, 41], "352": [33, 41], "353": [33, 41], "354": [33, 41], "355": [33, 41], "356": [33, 41], "357": [33, 41], "358": [33, 41], "359": [33, 41], "360": [33, 36, 41, 42, 44, 62, 64, 67, 102], "361": [33, 41], "362": 33, "363": [33, 62, 73, 96], "364": [33, 95], "365": 33, "366": 33, "367": 33, "368": [33, 59], "369": 33, "370": [33, 36, 42, 44, 102], "371": [33, 64, 67], "372": 33, "373": [33, 96], "373a": 33, "374": [33, 89], "375": [33, 66, 73], "376": 33, "377": 33, "379": [33, 36], "380": [33, 36, 42, 44, 102], "381": [33, 111, 326], "382": 33, "383": 33, "384": 33, "385": 33, "387": 33, "388": 33, "389": 33, "390": [33, 36, 42, 44, 102], "391": 33, "392": 33, "394": 33, "395": 33, "397": [33, 111, 326], "398": 33, "399": 33, "400": [33, 36, 42, 44, 102, 111, 156, 200], "401": 33, "402": 33, "403": 33, "404": 33, "405": [33, 111, 198], "406": 33, "408": 33, "409": 33, "411": 33, "412": 33, "414": 33, "415": [33, 56, 111, 198, 307], "416": [33, 41, 45, 227], "417": 33, "418": 33, "419": 33, "421": 33, "422": 33, "423": [33, 71, 73], "424": 33, "425": 33, "426": 33, "427": 33, "428": [33, 43, 45, 81, 82], "429": 33, "430": [33, 36, 42, 44, 102], "431": 33, "432": [33, 44, 62, 101, 109], "433": 33, "434": [33, 75, 82], "435": 33, "436": [33, 56, 111, 307], "437": [33, 96], "438": [33, 91], "439": 33, "440": [33, 36, 42, 102], "441": 33, "443": 33, "445": 33, "446": 33, "447": 33, "448": 33, "449": 33, "450": [33, 36, 42, 102], "451": 33, "452": 33, "453": 33, "455": 33, "456": 33, "457": 33, "458": [33, 104, 108, 109], "459": [33, 44, 45], "460": [33, 36, 42, 84, 96, 102], "461": [33, 220], "465": 33, "466": 33, "467": 33, "468": [33, 62, 190], "469": 33, "470": [33, 36, 42, 102], "471": 33, "472": 33, "473": 33, "474": 33, "475": 33, "476": [33, 78], "477": 33, "478": 33, "479": 33, "480": [33, 36, 42, 102], "481": 33, "482": [33, 40, 45], "483": [33, 115, 148], "484": 33, "485": [33, 49], "486": 33, "487": 33, "488": 33, "489": 33, "490": [33, 36, 42, 102], "491": 33, "493": 33, "494": 33, "495": 33, "497": 33, "498": 33, "499": 33, "500": [33, 35, 36, 41, 42, 49, 79, 98, 102, 200], "501": 33, "502": [33, 48, 98], "503": 33, "505": 33, "506": 33, "508": 33, "509": 33, "510": [33, 36, 42, 98, 102, 109], "511": 33, "512": [33, 84, 140, 148, 195], "513": 33, "514": 33, "515": 33, "516": 33, "517": 33, "519": 33, "520": [33, 36, 42, 102], "521": 33, "522": 33, "523": 33, "524": 33, "525": 33, "526": 33, "527": 33, "528": [33, 44], "529": 33, "530": [33, 36, 42, 102], "531": 33, "532": 33, "533": 33, "534": 33, "535": 33, "536": 33, "537": 33, "538": 33, "539": [33, 78, 82], "540": [33, 36, 42, 62, 102], "542": [33, 92, 103, 104], "543": [33, 68, 73], "544": [33, 111, 221], "545": 33, "547": 33, "548": 33, "549": [33, 111, 160], "550": [33, 36, 42, 102], "551": 33, "552": [33, 89, 111, 221], "553": 33, "554": 33, "555": 33, "556": 33, "557": 33, "558": [33, 100, 109], "559": [33, 111, 160], "560": [33, 36, 42, 53, 59, 102], "561": 33, "562": [33, 111, 198], "563": 33, "564": [33, 96], "565": 33, "566": 33, "567": 33, "568": 33, "569": [33, 45, 73], "571": 33, "573": [33, 111, 198], "574": 33, "575": 33, "576": 33, "577": 33, "578": 33, "579": 33, "580": [33, 36, 42, 102], "581": 33, "582": [33, 37, 59], "583": [33, 58], "585": 33, "586": [33, 56, 59, 73], "587": [33, 61], "589": 33, "591": 33, "592": [33, 37], "593": 33, "595": 33, "596": [33, 99, 109], "597": 33, "598": 33, "599": [33, 111, 188], "600": [33, 36, 42, 49, 102, 115, 148, 200], "601": 33, "602": 33, "603": 33, "604": 33, "605": 33, "606": 33, "607": 33, "608": 33, "609": 33, "610": [33, 36, 42, 102], "611": 33, "612": [33, 54, 59], "613": 33, "615": 33, "616": [33, 73], "617": [33, 70], "618": 33, "619": 33, "620": [33, 36, 42, 102], "622": 33, "623": 33, "624": 33, "625": 33, "626": 33, "627": 33, "628": [33, 62, 73, 90, 96], "629": 33, "631": 33, "632": [33, 48, 109], "633": 33, "634": 33, "635": 33, "636": 33, "637": 33, "638": 33, "640": [33, 36, 42, 102], "641": 33, "642": [33, 232, 384], "643": 33, "644": 33, "645": 33, "646": [33, 55], "647": 33, "649": 33, "650": [33, 36, 42, 102], "651": 33, "652": 33, "653": 33, "654": 33, "655": 33, "656": 33, "657": 33, "658": 33, "659": 33, "660": [33, 36, 42, 87, 96, 102], "661": 33, "662": 33, "663": 33, "664": 33, "665": [33, 58, 111, 114, 207, 223, 225], "666": [33, 82], "668": 33, "669": [33, 49, 111, 389, 395], "670": [33, 36, 42, 102, 111, 114, 223, 225], "671": 33, "672": 33, "673": 33, "674": 33, "675": 33, "676": 33, "677": 33, "678": [33, 58, 111, 207], "679": 33, "680": [33, 36, 42, 102], "681": [33, 49, 111, 389, 395], "682": 33, "683": 33, "684": 33, "685": 33, "686": 33, "687": 33, "688": [33, 64, 71], "689": 33, "690": [33, 36, 42, 102], "691": 33, "692": 33, "693": 33, "694": 33, "695": [33, 36, 45], "696": 33, "697": 33, "699": 33, "700": [33, 36, 42, 86, 96, 102, 136, 148, 200], "701": 33, "703": 33, "704": 33, "705": 33, "706": 33, "707": 33, "708": 33, "709": 33, "710": [33, 36, 42, 102], "711": 33, "712": 33, "713": [33, 47, 59], "714": 33, "715": 33, "716": 33, "717": 33, "718": 33, "719": 33, "720": [33, 36, 42, 102], "721": 33, "722": 33, "723": 33, "724": 33, "725": 33, "726": 33, "727": 33, "728": 33, "729": 33, "730": [33, 36, 42, 102], "731": 33, "732": 33, "733": [33, 50, 59], "734": 33, "735": 33, "736": [33, 34], "739": [33, 36, 48, 50], "740": [33, 42, 102], "741": 33, "742": 33, "743": 33, "745": 33, "746": 33, "13a": 33, "32a": 33, "bug": [33, 118, 126, 127, 128, 132, 145, 170, 171, 377, 379, 380], "request": [33, 100, 123, 136, 148, 152, 162, 168, 195, 196, 197, 280, 303, 326, 355, 356, 383, 419, 420], "save_as_html": [33, 61, 62, 64, 75, 91, 92, 175, 382, 383, 384, 385, 386, 398, 400, 419], "although": [33, 39, 49, 79, 156, 168, 171, 175], "usual": [33, 48, 77, 79, 94, 143, 148, 154, 156, 157, 158, 163, 165, 168, 170, 171, 174, 190, 245, 246, 252, 255, 320, 372, 388], "classification_accuraci": [33, 98], "chance_level": 33, "4f": [33, 34, 98], "7173": 33, "838": [33, 45], "967": [33, 45, 72, 73], "plot_haxby_glm_decod": [33, 45], "approach": [34, 40, 41, 48, 49, 66, 69, 111, 133, 148, 151, 154, 155, 156, 160, 162, 163, 164, 165, 169, 247, 283, 306, 307, 402, 406, 420, 421], "maxim": [34, 168, 255, 257, 258, 287, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "signific": [34, 49, 66, 75, 80, 111, 155, 160, 162, 165, 168, 280, 326, 399], "optimist": [34, 155], "lead": [34, 47, 48, 57, 84, 120, 139, 148, 161, 162, 163, 165, 168, 182, 253, 311, 314, 401, 419], "overfit": [34, 156, 160], "loop": [34, 44, 71, 100, 139, 148, 155, 162, 174, 243, 244, 245, 246], "judg": [34, 86], "never": [34, 155, 162, 170, 298, 299, 398], "grid": [34, 51, 68, 79, 84, 99, 156, 161, 168, 174, 182, 223, 225, 243, 244, 245, 246, 269, 270, 271, 275, 276, 277, 298, 337, 339, 342, 356, 361, 366, 369, 373, 374, 375, 376, 419], "difficulti": 34, "composit": 34, "800": [34, 42, 87, 102, 200, 265, 278, 362, 400], "complet": [34, 60, 73, 94, 110, 113, 114, 136, 148, 149, 155, 157, 164, 171, 174, 175, 210, 212, 228, 242, 265, 268, 305, 308, 315, 326, 361, 362, 363, 364, 366, 368, 369, 370, 372, 373, 374, 375, 376, 388, 398, 399, 400], "stabl": [34, 48, 56, 98, 111, 120, 133, 148, 154, 156, 157, 162, 170, 192, 232, 243, 244, 245, 246, 250, 251, 306, 384, 406, 420], "cross_valid": [34, 98, 133, 148, 158, 243, 244, 245, 246], "excel": 34, "explan": [34, 84, 102, 155, 156, 157, 158, 163, 173, 175, 189], "param": [34, 180, 181, 182, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 278, 309, 310, 311, 312, 313, 314, 315, 316, 387, 388, 389, 390], "cv_score": [34, 98], "1f": [34, 44, 377, 380], "901": 34, "918": 34, "749": 34, "screening_percentile_rang": 34, "val_scor": 34, "sp": 34, "sreen": 34, "000": [34, 42, 79, 94, 160], "8107": 34, "6111": 34, "8493": 34, "3889": 34, "8437": 34, "8389": 34, "5000": [34, 49, 55, 98, 102], "8059": 34, "8141": 34, "kfold": [34, 36, 37, 40, 44, 248, 249], "nested_cv_scor": 34, "5880": [34, 102], "tight": [34, 162], "axhlin": [34, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "frameon": [34, 327, 329, 330], "024": [34, 41, 45], "plot_haxby_grid_search": [34, 45], "overal": [35, 66, 70, 162, 163, 248, 249], "non_rest": 35, "unique_condit": 35, "return_index": 35, "appear": [35, 54, 89, 265, 278, 364, 399], "argsort": [35, 42, 43, 103], "fit_transform": [35, 36, 42, 47, 49, 50, 51, 52, 54, 55, 56, 58, 61, 70, 89, 92, 98, 99, 100, 102, 103, 104, 105, 106, 113, 150, 153, 164, 175, 180, 250, 251, 265, 278, 309, 310, 311, 312, 313, 314, 315, 316, 387, 388, 389, 390], "selectkbest": [35, 41, 128, 148], "f_classif": [35, 36, 41, 94, 98, 158], "multiclass": [35, 156], "onevsoneclassifi": [35, 156], "onevsrestclassifi": [35, 156], "svc_ovo": 35, "svc_ova": 35, "cross_val_scor": [35, 98, 158], "cv_scores_ovo": 35, "cv_scores_ova": 35, "ovo": 35, "ova": 35, "parallel": [35, 36, 42, 43, 44, 47, 48, 53, 57, 58, 79, 98, 102, 105, 120, 148, 162, 165, 280, 312, 326], "backend": [35, 36, 42, 43, 44, 48, 53, 57, 58, 98, 102, 105, 123, 133, 138, 143, 148, 251, 381], "sequentialbackend": [35, 36, 42, 43, 44, 48, 53, 57, 58, 98, 102, 105], "concurr": [35, 36, 42, 43, 44, 48, 53, 57, 58, 98, 101, 102, 105, 108], "worker": [35, 36, 42, 43, 44, 48, 53, 57, 58, 98, 102, 105, 326], "elaps": [35, 36, 42, 43, 44, 48, 53, 57, 58, 98, 102, 105], "finish": [35, 36, 42, 43, 44, 48, 53, 57, 58, 98, 102, 105, 162, 163, 282, 302, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 374, 382, 384, 386], "601855088049469": 35, "6712058072321548": 35, "boxplot": [35, 94], "text": [35, 63, 75, 94, 98, 105, 111, 155, 163, 172, 204, 212, 222, 252, 256, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 421], "metric": [35, 40, 41, 51, 79, 136, 148, 155, 156, 160, 168, 243, 244, 245, 246], "confusion_matrix": [35, 156], "y_pred_ovo": 35, "hot_r": 35, "y_pred_ova": 35, "3155": 35, "plot_haxby_multiclass": [35, 45], "intrins": [36, 111, 152, 200, 201, 204, 307], "process_mask_img": [36, 44, 160, 247], "back": [36, 41, 42, 48, 55, 98, 100, 102, 104, 113, 121, 129, 130, 148, 152, 160, 163, 175, 250, 251, 309, 312, 315, 325, 357, 387, 388, 389], "astyp": [36, 40, 41, 43, 44, 68, 75, 84, 94], "process_mask": [36, 44, 127, 148], "picked_slic": 36, "02_decod": 36, "plot_haxby_searchlight": [36, 45], "thread": 36, "progress": [36, 42, 102, 105, 123, 148, 265], "mess": 36, "onc": [36, 49, 57, 114, 143, 148, 149, 154, 155, 162, 164, 165, 167, 168, 171, 175, 387, 406], "job": [36, 42, 44, 79, 102, 105, 114, 265, 278, 280, 326], "shuffl": [36, 37, 48, 245, 246], "lt": [36, 75, 89, 91, 92], "0x7f1345d6e520": 36, "gt": [36, 75, 89, 91, 92], "0x7f1354d34130": 36, "environ": [36, 49, 52, 53, 58, 62, 75, 77, 133, 134, 136, 143, 148, 155, 170, 173, 234, 383, 420], "rerun": [36, 49, 52, 53, 58, 62, 75, 77], "trust": [36, 49, 52, 53, 58, 62, 75, 77, 165], "unabl": [36, 49, 52, 53, 58, 62, 70, 75, 77, 136, 148], "render": [36, 49, 52, 53, 58, 62, 75, 77, 134, 148, 163, 340, 368, 370, 377, 379, 380, 382, 384, 385, 386], "page": [36, 49, 52, 53, 58, 62, 75, 77, 111, 133, 137, 143, 144, 145, 148, 152, 156, 160, 162, 163, 165, 171, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406], "nbviewer": [36, 49, 52, 53, 58, 62, 75, 77], "searchlightsearchlight": 36, "fmri_mask": [36, 92, 98, 102, 105, 106, 113], "f_valu": [36, 44], "p_valu": [36, 44, 77, 79, 94, 107, 140, 148, 253, 265, 278], "log10": [36, 42, 44, 77, 79, 94, 102, 105, 106, 280, 326, 399], "p_unmask": 36, "inverse_transform": [36, 40, 42, 49, 55, 92, 98, 100, 102, 103, 104, 105, 106, 112, 129, 136, 145, 148, 152, 180, 250, 251, 309, 310, 311, 312, 313, 314, 315, 316, 387, 388, 389, 390, 421], "surrog": [36, 102], "mean_fmri": 36, "searchlight_img": 36, "scores_": [36, 44, 160], "center": [36, 47, 50, 51, 55, 58, 61, 79, 99, 105, 106, 134, 145, 148, 150, 153, 175, 182, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 360, 387, 388, 390, 399, 406], "hot": [36, 306], "f_score": [36, 159, 421], "p_ma": 36, "f_score_img": 36, "demo": [37, 100, 101, 108, 113, 139, 143, 148, 163, 215], "chen": [37, 111, 145, 148, 220], "namburi": 37, "elliott": [37, 56, 111, 306, 307], "heinzl": 37, "soon": [37, 71, 171], "chee": 37, "w": [37, 44, 106, 111, 180, 182, 200, 203, 204, 206, 210, 220, 228, 248, 249], "hayn": [37, 111, 160], "2011": [37, 49, 58, 111, 114, 119, 128, 148, 149, 156, 160, 161, 191, 198, 200, 201, 204, 207, 213, 221, 223, 225, 238, 306, 307], "coars": 37, "mesh": [37, 69, 108, 128, 133, 136, 141, 145, 148, 164, 169, 232, 371, 377, 378, 379, 380, 384, 386, 404, 405, 406, 421], "pial_mesh": 37, "term": [37, 54, 66, 89, 92, 112, 144, 148, 154, 156, 162, 165, 168, 170, 173, 174, 220, 223, 248, 249, 252, 272, 306, 402], "adjac": [37, 136, 148], "nearbi": 37, "infl_mesh": 37, "infl_": 37, "nn": 37, "nearestneighbor": 37, "radius_neighbors_graph": 37, "tolil": 37, "make_pipelin": [37, 40, 44], "standardscal": [37, 39, 40, 41, 44], "linear_model": [37, 40, 41, 44, 251], "ridgeclassifi": 37, "search_light": [37, 247], "preced": [37, 163, 175, 265], "search": [37, 89, 163, 171, 182, 243, 244, 245, 246, 303], "light": [37, 128, 134, 136, 148, 163, 280], "sulc_": 37, "958": [37, 45, 79], "plot_haxby_searchlight_surfac": [37, 45], "overview": [38, 160, 162, 170], "fetch_stimuli": [38, 212], "stimulus_inform": 38, "stim_typ": 38, "skip": [38, 49, 56, 378, 381], "file_nam": [38, 398], "suptitl": [38, 40, 42, 43, 44, 66, 79, 100, 101, 105], "img_path": [38, 304], "ravel": [38, 41, 43, 44, 102, 105, 106], "imread": 38, "plot_haxby_stimuli": [38, 45], "gain": [39, 66, 157, 162, 221], "fetch_mixed_gambl": [39, 144, 148], "zmap_filenam": 39, "zmap": [39, 101, 221], "behavioral_target": 39, "svr": [39, 42, 44, 136, 148, 156, 244, 246, 247], "_base": [39, 40, 41, 48], "convergencewarn": [39, 48, 92, 104], "solver": [39, 111, 161, 243, 245, 248, 249], "termin": [39, 155, 420], "earli": [39, 111, 161, 223, 225, 283, 387, 402], "max_it": [39, 40, 43, 48, 50, 57, 181, 182, 184, 243, 244, 245, 246, 248, 249], "10000": [39, 42, 49, 55, 102, 105, 280, 326], "pre": [39, 64, 67, 94, 101, 128, 133, 145, 148, 165, 175, 256], "minmaxscal": 39, "0x7f13548f2a60": 39, "observ": [39, 44, 58, 61, 63, 66, 71, 79, 80, 81, 102, 156, 160, 164, 165, 168, 170, 175, 256, 387], "learnt": 39, "impos": [39, 121, 148], "relat": [39, 46, 49, 50, 63, 64, 65, 66, 67, 68, 69, 71, 81, 100, 106, 110, 111, 114, 127, 128, 148, 150, 151, 153, 155, 156, 159, 162, 163, 168, 169, 170, 171, 175, 180, 209, 214, 235, 236, 239, 250, 251, 253, 265, 289, 303, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 388, 390, 403, 420, 421], "guid": [39, 120, 148, 163, 167, 169, 170, 175, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 411, 412, 420], "unstructur": 39, "graph_net": 39, "heavi": [39, 42, 149, 163], "spacenetregressor": [39, 43, 161, 248], "regressor": [39, 43, 56, 62, 63, 66, 100, 101, 105, 108, 120, 139, 140, 144, 148, 150, 156, 164, 220, 244, 246, 249, 261, 265, 267, 272, 280, 306, 307, 326], "tv_l1": 39, "ep": [39, 43, 248, 249], "prefer": [39, 51, 99, 152, 163, 173], "1831": 39, "plot_mixed_gambles_frem": [39, 45], "partli": [40, 42, 162, 165, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 209, 212, 213, 214, 218, 220, 221, 222, 227, 233], "uchida": [40, 41, 111, 222], "h": [40, 41, 56, 65, 111, 194, 203, 210, 227, 228, 232, 252, 256, 306, 307], "yamashita": [40, 41, 111, 222], "sato": [40, 41, 111, 222], "morito": [40, 41, 111, 222], "tanab": [40, 41, 111, 222], "kamitani": [40, 41, 111, 222], "neuron": [40, 41, 58, 111, 160, 207, 222], "929": [40, 41, 111, 222], "sound": [40, 165], "real": [40, 155, 160, 162, 165, 173, 175], "world": [40, 173, 175, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 360, 363, 372], "stimulu": [40, 41, 65, 100, 165], "particip": [40, 56, 66, 111, 163, 165, 168, 306, 307], "10x10": [40, 41], "binari": [40, 41, 66, 75, 120, 145, 148, 168, 171, 175, 214, 243, 244, 245, 246, 248, 249, 375, 399, 402], "pixel": [40, 41, 165, 265, 278, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 382, 385, 400], "fetch_miyawaki2008": [40, 41, 89], "fmri_random_runs_filenam": 40, "stimuli_random_runs_filenam": 40, "multiniftimask": [40, 41, 48, 49, 140, 142, 148, 172, 243, 244, 245, 246, 248, 249, 250, 251, 278, 280, 326, 388, 421], "clean": [40, 43, 48, 49, 53, 54, 56, 58, 70, 103, 111, 120, 126, 132, 133, 136, 140, 141, 143, 148, 171, 174, 175, 180, 250, 251, 265, 283, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 362, 388, 390], "fmri_data": [40, 94, 265, 278], "wiht": 40, "stimulus_shap": 40, "stimulus_run": 40, "reshap": [40, 41, 44, 50, 68, 77, 105, 129, 148, 153, 180], "loadtxt": [40, 41], "pylab": [40, 373], "wspace": [40, 44, 63], "stack": [40, 51, 58, 141, 148, 168, 187], "offset": [40, 51, 84, 139, 148, 174, 199, 200, 298], "begin": [40, 62, 66, 71, 139, 148, 168], "end": [40, 44, 49, 62, 86, 94, 102, 130, 140, 148, 160, 162, 163, 174, 234, 304, 305], "fmri_run": 40, "stimuli_run": 40, "2860": [40, 102], "5438": 40, "proce": [40, 55, 65, 113], "independ": [40, 48, 66, 97, 109, 110, 121, 148, 152, 154, 155, 160, 162, 165, 168, 175, 209, 243, 244, 245, 246, 250, 283, 290, 295, 306, 307, 309, 315, 326, 376, 381, 402], "hold": [40, 78, 162, 163, 171, 250, 251, 272, 326, 337, 388], "held": [40, 160, 163, 243, 244, 245, 246, 420], "10th": 40, "r2_score": [40, 249], "multioutput": [40, 249], "raw_valu": 40, "threshold_img": [40, 81, 88, 121, 143, 148, 281, 282], "cut_scor": 40, "bring": [40, 48, 157, 163, 170, 325], "score_map_img": 40, "thresholded_score_map_img": 40, "mark": [40, 56, 100, 111, 220, 306, 307], "four": [40, 44, 66, 143, 148, 175], "coord_transform": [40, 130, 148], "def": [40, 41, 44, 47, 53, 64, 66, 68, 100, 107, 377], "index_to_xy_coord": 40, "newaxi": [40, 44, 80, 84], "xy_indices_of_special_voxel": 40, "marker": [40, 134, 136, 139, 141, 148, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 363, 372, 382, 383, 385, 390, 392, 421], "add_mark": [40, 55, 61, 70, 100, 125, 131, 134, 148, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 419], "magenta": [40, 70, 419], "lw": [40, 70], "construct": [40, 52, 54, 98, 151, 154, 160, 163, 164, 169, 170, 279], "gcf": 40, "set_size_inch": [40, 70], "closer": [40, 49, 162, 399], "presenc": [40, 66, 102, 390, 392], "lasso": [40, 57, 58, 149, 161, 162, 248, 249, 251], "lassolarscv": 40, "sparsiti": [40, 48, 111, 121, 148, 149, 153, 154, 156, 157, 161, 162, 168, 182, 184, 248, 249, 251, 390], "marked_pixel": 40, "gridspec": [40, 141, 148], "gs1": 40, "1780": [40, 42, 102], "1951": [40, 136, 148], "2131": [40, 136, 148], "rf": [40, 68], "named_step": [40, 44, 98], "zeros_lik": [40, 68, 84, 102], "vmax": [40, 44, 49, 50, 52, 53, 54, 55, 56, 57, 58, 76, 79, 80, 84, 90, 100, 102, 105, 107, 118, 120, 136, 148, 153, 361, 362, 366, 368, 369, 371, 374, 375, 376, 377, 379, 380, 382, 383, 384, 386, 419], "ax_im": 40, "masked_less": [40, 106], "green": [40, 49, 89, 92, 111, 141, 148, 208, 252, 256], "add_patch": 40, "updat": [40, 93, 100, 120, 123, 127, 128, 133, 136, 142, 143, 145, 148, 171, 180, 181, 182, 200, 223, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 278, 309, 310, 311, 312, 313, 314, 315, 316, 387, 388, 389, 390], "1935": [40, 111], "rdpu": 40, "futurewarn": [40, 41, 48, 49, 50, 62, 66, 92, 103, 104], "deprec": [40, 41, 48, 50, 62, 120, 123, 127, 128, 129, 130, 131, 133, 136, 138, 139, 141, 143, 145, 148, 171, 229, 243, 244, 245, 246, 250, 251, 309, 310, 311, 312, 313, 314, 315, 316, 326, 388, 390], "silenc": [40, 41], "0x7f1354ce16d0": 40, "rel": [40, 49, 65, 66, 91, 163, 165, 168, 171, 243, 244, 245, 246, 247, 248, 249, 265, 267, 272, 287, 382, 384, 386], "roughli": [40, 156, 163, 165], "relationship": [40, 42, 75, 160, 167, 169, 170, 220, 326], "079": [40, 41, 45], "plot_miyawaki_encod": [40, 45], "elabor": [41, 121, 148, 419], "articl": [41, 111, 157, 160, 161, 162, 170, 188, 190, 191, 192, 194, 195, 198, 200, 201, 202, 208, 213, 218, 220, 221, 222, 223, 225, 227, 233, 238, 245, 246, 306, 307, 326, 362, 403], "sy": 41, "stderr": 41, "miyawaki_dataset": [41, 89], "x_random_filenam": 41, "x_figure_filenam": 41, "y_random_filenam": 41, "y_figure_filenam": 41, "y_shape": 41, "miyawaki2008": [41, 89], "data_figure_run01": [41, 89], "n_pixel": 41, "n_featur": [41, 47, 57, 162, 180, 181, 182, 184, 186, 243, 244, 245, 246, 248, 249, 250, 251, 252, 265, 278, 387, 389, 395], "list_of_2d_arrai": 41, "squar": [41, 43, 49, 66, 100, 102, 105, 111, 150, 156, 161, 162, 164, 180, 249, 252, 255, 256, 257, 265, 278, 289, 305, 306, 311, 314, 326, 387, 388, 389, 403], "y_row": 41, "y_col": 41, "height_tf": 41, "width_tf": 41, "yt_tall": 41, "dot": [41, 44, 55, 100, 103, 162, 255, 256, 257, 258, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "yt_larg": 41, "yt_big": 41, "r_": 41, "omp": 41, "orthogon": [41, 133, 148, 168, 265, 267, 272, 278, 283, 328, 337, 338, 339, 342, 356, 361, 363, 366, 368, 369, 372, 374, 375, 376, 400, 402], "pursuit": 41, "orthogonalmatchingpursuit": 41, "clf": [41, 130, 148], "n_clf": 41, "03d": [41, 100], "scl": 41, "n_nonzero_coef": 41, "002": 41, "003": 41, "004": [41, 111, 222], "005": [41, 111, 157, 245, 246], "006": [41, 111, 207], "007": [41, 111, 198, 221], "009": [41, 111, 362], "011": 41, "013": 41, "014": 41, "015": 41, "016": [41, 66], "017": 41, "018": [41, 111, 306, 307], "019": 41, "020": [41, 56, 111, 306, 307], "021": 41, "022": 41, "023": 41, "025": 41, "026": 41, "027": 41, "028": 41, "029": 41, "030": 41, "031": 41, "032": 41, "033": [41, 111, 213, 238], "034": 41, "035": [41, 49, 59], "036": 41, "037": [41, 111], "038": 41, "039": 41, "040": 41, "042": [41, 111, 306, 307, 403], "043": 41, "044": 41, "045": 41, "046": 41, "047": 41, "048": [41, 111, 306], "049": 41, "050": 41, "051": 41, "052": [41, 76, 82, 111, 218], "053": 41, "054": [41, 111, 160], "055": 41, "056": 41, "057": 41, "058": 41, "059": 41, "060": [41, 76, 111, 260, 326], "061": [41, 111, 280, 326], "062": [41, 55, 59, 111, 161], "063": 41, "064": [41, 111, 306, 307], "065": 41, "066": 41, "067": 41, "068": 41, "069": [41, 69, 73], "070": 41, "071": 41, "072": 41, "073": [41, 56, 65, 73, 111, 156, 307], "074": 41, "075": 41, "076": 41, "077": 41, "078": 41, "080": [41, 111], "081": 41, "082": [41, 111, 192], "083": 41, "084": [41, 73], "085": 41, "086": 41, "087": 41, "088": 41, "089": 41, "090": 41, "091": 41, "092": 41, "093": 41, "094": 41, "095": 41, "096": 41, "097": 41, "098": 41, "099": 41, "split_multi_scal": 41, "multi_scal": 41, "yw": 41, "yh": 41, "split_index": 41, "tall": 41, "y_pred_tal": 41, "1x2": 41, "applic": [41, 141, 148, 150, 156, 162, 169, 265, 278, 312, 326, 393, 394, 400, 419, 420, 421], "calculu": 41, "height_tf_i": 41, "flat": [41, 174], "y_pred_larg": 41, "2x1": 41, "width_tf_i": 41, "y_pred_big": 41, "2x2": [41, 134, 148, 337, 339, 342, 356, 361, 366, 369, 374, 375, 376, 419], "accuracy_scor": [41, 51], "precision_scor": 41, "recall_scor": 41, "f1_score": 41, "recal": [41, 243, 245], "zero_divis": 41, "f1": [41, 155, 243, 245], "801208": 41, "413969": 41, "572388": 41, "465973": 41, "six": 41, "ground": [41, 44, 57, 155], "truth": [41, 44, 57, 155], "sp1": 41, "sp2": 41, "sp3": 41, "binar": [41, 94, 142, 148, 282], "miyawaki2008_reconstruction_": 41, "973": [41, 45], "plot_miyawaki_reconstruct": [41, 45], "densiti": [42, 57, 75, 162, 167, 169, 213, 227], "agre": [42, 75, 163, 227, 278, 280], "agreement": [42, 62, 75, 227], "spm8": [42, 75, 190, 227], "newseg": [42, 75], "limit": [42, 75, 88, 150, 160, 162, 163, 223, 307, 362], "ran": 42, "prepar": [42, 58, 94, 99, 101, 108, 113, 123, 148, 159, 172, 310, 311, 312, 313, 314, 316, 390, 421], "impact": [42, 66, 78, 143, 148, 160, 163, 171, 175, 265, 278, 307], "significantli": [42, 66, 133, 148, 160, 162], "noisi": [42, 92, 149], "detriment": [42, 307], "permut": [42, 77, 79, 102, 105, 111, 120, 139, 148, 158, 160, 165, 280, 297, 326, 413], "exact": [42, 160, 163, 165, 213, 214, 419], "comparison": [42, 49, 51, 57, 62, 66, 81, 93, 99, 100, 102, 111, 114, 149, 152, 159, 160, 161, 166, 168, 191, 421], "clearer": [42, 163], "author": [42, 47, 55, 75, 77, 102, 103, 105, 106, 107, 111, 162, 163, 171], "dhomatob": [42, 75], "fr": [42, 49, 75, 102, 105, 106, 111, 161, 190, 198, 390], "apr": [42, 75, 111, 199], "2014": [42, 49, 75, 77, 100, 102, 105, 106, 111, 152, 153, 160, 161, 220, 306, 326, 390], "andr": [42, 111, 389, 395], "2017": [42, 56, 111, 128, 129, 130, 148, 155, 157, 199, 200, 218, 245, 246, 306, 307, 362], "oasis_dataset": [42, 75], "fetch_oasis_vbm": [42, 43, 75], "gray_matter_map_filenam": [42, 75], "gray_matter_map": [42, 43, 75, 227], "ext_var": [42, 43, 75, 77, 79, 105, 227], "train_test_split": [42, 43], "gm_imgs_train": [42, 43], "gm_imgs_test": [42, 43], "age_train": [42, 43], "age_test": [42, 43], "train_siz": [42, 43], "white_matter_map": [42, 75, 227], "oasis1": [42, 43, 75], "oas1_0001_mr1": [42, 43, 75], "mwrc1oas1_0001_mr1_mpr_anon_fslswapdim_bet": [42, 43, 75], "mwrc2oas1_0001_mr1_mpr_anon_fslswapdim_bet": [42, 75], "cach": [42, 43, 49, 52, 56, 102, 105, 106, 119, 121, 148, 152, 181, 243, 244, 245, 246, 248, 249, 250, 251, 265, 278, 284, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 388, 389, 390, 406], "gm_maps_mask": 42, "variancethreshold": 42, "variance_threshold": 42, "gm_maps_threshold": 42, "get_support": 42, "decoderregressor": [42, 136, 139, 140, 148, 156, 243, 246], "benefit": [42, 49, 56, 66, 136, 148, 163, 174], "some_high_valu": [42, 43], "advantag": [42, 43, 69, 162, 175], "hyperparamet": 42, "neg_mean_absolute_error": [42, 244, 246], "trend": [42, 43, 89, 175], "etc": [42, 43, 80, 89, 92, 94, 114, 161, 164, 168, 173, 220, 243, 244, 245, 246, 248, 249, 257, 315], "perm": [42, 43], "age_pr": 42, "prediction_scor": 42, "670598": 42, "bg_filenam": 42, "absolut": [42, 43, 58, 136, 148, 160, 162, 163, 205, 215, 228, 287, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 360, 361, 363, 368, 369, 371, 375, 376, 377, 380, 383, 384, 386, 419], "year": [42, 43, 111, 162, 171, 209, 227], "0x7f1354e62ee0": 42, "mass_univari": [42, 79, 102, 105, 139, 145, 148, 160, 167], "permuted_ol": [42, 79, 102, 105, 120, 139, 144, 145, 148, 160, 167, 280], "neg_log_pv": [42, 77, 79, 102], "t_scores_original_data": [42, 102], "intercept": [42, 75, 76, 77, 79, 80, 81, 102, 106, 160, 243, 244, 245, 246, 248, 249, 279, 280, 326], "n_perm": [42, 77, 79, 102, 105, 280, 326], "signed_neg_log_pv": [42, 102], "signed_neg_log_pvals_unmask": [42, 102], "rdbu_r": [42, 44, 102, 373], "log_": [42, 102, 105, 106], "parametr": [42, 65, 66, 77, 79, 102, 105, 106, 111, 160, 167, 168, 253, 254, 259, 283, 402], "n_detect": [42, 102, 105], "detect": [42, 68, 77, 79, 89, 100, 102, 106, 111, 160, 165, 168, 175, 180, 306, 307, 387, 419], "982666015625": 42, "617616176605225": 42, "98810291290283": 42, "91775131225586": 42, "39942145347595": 42, "1154088973999": 42, "157894929250084": 42, "913179976599558": 42, "672250747680664": 42, "40577247407701": 42, "12416100502014": 42, "885922193527225": 42, "688174168268837": 42, "475254884132973": 42, "262140921183995": 42, "220042943954468": 42, "996148824691772": 42, "778282291748948": 42, "620751751793755": 42, "537530986886278": 42, "375555276870728": 42, "191051698866346": 42, "021414886821404": 42, "867042095764827": 42, "68670399983724": 42, "491551637649536": 42, "310896506676308": 42, "14247269983645": 42, "980124473571777": 42, "806559636675075": 42, "659006992975872": 42, "500925756269883": 42, "35025465488434": 42, "186737551833644": 42, "013951694264133": 42, "833527292524067": 42, "646988815731472": 42, "485841738211143": 42, "31685728775828": 42, "145488775693455": 42, "964799880981445": 42, "796451138287054": 42, "61928425516401": 42, "45196055257043": 42, "310184066945855": 42, "150637918048435": 42, "976568273876026": 42, "80675627322907": 42, "64003535111745": 42, "48160438148343": 42, "307462692260742": 42, "143128292233335": 42, "982906616651096": 42, "81141696785981": 42, "648803755089087": 42, "494484359567814": 42, "338253157479425": 42, "17991140850803": 42, "014115547311714": 42, "84992015159736": 42, "681796948115032": 42, "52079511470482": 42, "35617067736964": 42, "193142652511593": 42, "02703246474266": 42, "86469807991615": 42, "697254614396527": 42, "53174029535322": 42, "377325843362247": 42, "213850442913994": 42, "052458899361746": 42, "88614958104953": 42, "7185427347819": 42, "550455214226083": 42, "388984995919305": 42, "750": [42, 102], "223981936772667": 42, "760": [42, 102], "058098893416556": 42, "770": [42, 102], "89678454399109": 42, "780": [42, 102], "730264095159676": 42, "790": [42, 102], "566281505777866": 42, "405808329582214": 42, "810": [42, 48, 102], "252455882084224": 42, "820": [42, 102, 105, 109], "093774847868012": 42, "830": [42, 85, 102], "931010984512696": 42, "840": [42, 102], "767471983319236": 42, "602534097783707": 42, "860": [42, 102], "445042515909947": 42, "870": [42, 49, 66, 102], "284460407564012": 42, "880": [42, 102], "121013728055086": 42, "890": [42, 102], "957396651921645": 42, "900": [42, 102, 136, 148, 200], "79475005467733": 42, "910": [42, 102], "628625539632942": 42, "920": [42, 102], "46404752524003": 42, "930": [42, 102], "301341236278578": 42, "940": [42, 102], "147816678310964": 42, "950": [42, 102], "98753359443263": 42, "960": [42, 55, 102], "82348346710205": 42, "970": [42, 102], "658615006613978": 42, "980": [42, 102], "493804046085902": 42, "990": [42, 102], "33112676215894": 42, "1000": [42, 49, 77, 94, 102, 152, 165, 200, 387], "169588088989258": 42, "1010": [42, 102], "005274404393564": 42, "1020": [42, 102], "84094071855732": 42, "1030": [42, 102], "676096724075022": 42, "1040": [42, 102], "513561762296238": 42, "1050": [42, 102], "35200792267209": 42, "1060": [42, 102], "18918940706073": 42, "1070": [42, 102], "027957983106097": 42, "1080": [42, 102, 111, 326], "864653799268934": 42, "1090": [42, 48, 102], "701793355679293": 42, "1100": [42, 102], "539341948249124": 42, "1110": [42, 102], "38000883282842": 42, "1120": [42, 102], "217478479657855": 42, "1130": [42, 102], "055705823729523": 42, "1140": [42, 102], "892902424460964": 42, "1150": [42, 102], "731081361355988": 42, "1160": [42, 102], "567576942772702": 42, "1170": [42, 102], "405463182009184": 42, "1180": [42, 102], "245619357642482": 42, "1190": [42, 102], "08769385954913": 42, "1200": [42, 102], "927335421244303": 42, "1210": [42, 99, 102], "765231495061197": 42, "1220": [42, 102], "602850519242836": 42, "1230": [42, 54, 59, 102], "443177201883579": 42, "1240": [42, 102], "281758069992065": 42, "1250": [42, 102], "12025065422058": 42, "1260": [42, 102], "957962800586035": 42, "1270": [42, 102], "79476848361999": 42, "1280": [42, 102], "632410049438477": 42, "1290": [42, 102], "469766605732053": 42, "1300": [42, 102], "313027620315552": 42, "1310": [42, 102], "151258590567203": 42, "1320": [42, 102], "988484288706923": 42, "1330": [42, 102], "826307133624429": 42, "663598811448509": 42, "1350": [42, 50, 102, 153, 390, 392], "500620797828391": 42, "1360": [42, 102], "338772717644186": 42, "1370": [42, 102, 131, 148], "17647653252539": 42, "1380": [42, 102], "013917525609335": 42, "1390": [42, 102], "851497662153175": 42, "1400": [42, 102], "689155544553484": 42, "1410": [42, 102], "527750221550042": 42, "1420": [42, 102], "367686775368703": 42, "1430": [42, 102], "20444780963284": 42, "1440": [42, 102], "043979432847765": 42, "883117766215882": 42, "1460": [42, 102], "721269307071214": 42, "1470": [42, 102], "55943758309293": 42, "1480": [42, 102], "397595044728872": 42, "1490": [42, 102], "235615688682403": 42, "1500": [42, 88, 102], "073402404785156": 42, "1510": [42, 102], "911977831101575": 42, "1520": [42, 102], "7511445095664575": 42, "1530": [42, 102], "588392330930124": 42, "1540": [42, 102], "426541641161039": 42, "1550": [42, 102], "264180437211068": 42, "1560": [42, 102], "105429686032808": 42, "1570": [42, 102], "944299787472767": 42, "1580": [42, 102], "78175862227814": 42, "1590": [42, 102], "6198099259310546": 42, "1600": [42, 102, 265, 278, 400], "458058774471283": 42, "1610": [42, 102], "297041753804462": 42, "1620": [42, 102], "136006455362579": 42, "1630": [42, 102], "974875262909872": 42, "1640": [42, 102], "8129527219911905": 42, "1650": [42, 102], "651745196544763": 42, "1660": [42, 102], "491589462900736": 42, "1670": [42, 102], "329814899467423": 42, "1680": [42, 102], "168214570908319": 42, "1690": [42, 102], "006557631069386": 42, "1700": [42, 102], "844542180790621": 42, "1710": [42, 102], "682860445557979": 42, "1720": [42, 102], "520977430565413": 42, "1730": [42, 102], "359469562596669": 42, "1740": [42, 102], "197700133268861": 42, "1750": [42, 102], "036202124186924": 42, "1760": [42, 102], "874368700114163": 42, "1770": [42, 102], "7126930056318725": 42, "551018251461929": 42, "1790": [42, 102], "3895052225230127": 42, "1800": [42, 102], "2281552685631643": 42, "1810": [42, 102], "0666838798733704": 42, "1820": [42, 102], "905175662302709": 42, "1830": [42, 45, 102], "7436286660491445": 42, "1840": [42, 102], "5824749366096826": 42, "1850": [42, 102], "420858976003286": 42, "1860": [42, 102], "259414267796342": 42, "1870": [42, 102], "0981906442081226": 42, "1880": [42, 102], "936632825973186": 42, "1890": [42, 102], "7751491763604381": 42, "1900": [42, 102], "6136598587036133": 42, "1910": [42, 102], "452237453760277": 42, "1920": [42, 102], "291032612323761": 42, "1930": [42, 102], "1298307544826842": 42, "1940": [42, 102], "9683362896909419": 42, "1950": [42, 102], "8068884825095152": 42, "1960": [42, 102], "6454695584822674": 42, "1970": [42, 102], "4840556558618691": 42, "1980": [42, 102], "32270838756753945": 42, "1990": [42, 102], "16134933131424026": 42, "1987": 42, "892": [42, 45], "1885": 42, "plot_oasis_vbm": [42, 45, 136, 148], "ag": [43, 46, 59, 78, 97, 109, 110, 111, 136, 148, 149, 156, 157, 161, 167, 168, 169, 170, 180, 188, 198, 209, 213, 220, 227, 233, 238, 243, 244, 245, 246, 248, 249, 309, 314, 363, 373, 381], "concentr": [43, 163, 165, 168], "increas": [43, 44, 48, 66, 70, 79, 89, 92, 103, 104, 130, 148, 159, 160, 162, 165, 168, 171, 174, 184, 280, 307, 320, 326, 361, 374, 375, 376, 383, 388, 401, 421], "ram": 43, "box": [43, 84, 98, 104, 129, 148, 156, 163, 174, 298], "dataset_fil": 43, "gm_img": 43, "check_random_st": [43, 44], "rng": [43, 163], "intermedi": [43, 69, 158, 170], "graph": [43, 47, 53, 57, 149, 151, 161, 162, 168, 169, 243, 244, 248, 249, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 372, 421], "beauti": 43, "tv": [43, 111, 161, 243, 244, 248, 249], "l1": [43, 111, 156, 157, 161, 181, 184, 243, 244, 245, 248, 249], "expens": 43, "longer": [43, 104, 118, 120, 130, 134, 136, 139, 141, 143, 145, 148, 165], "runtim": [43, 145, 148, 163, 248, 249], "mse": [43, 248, 249, 257], "oas1_0003_mr1": 43, "mwrc1oas1_0003_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0086_mr1": 43, "mwrc1oas1_0086_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0052_mr1": 43, "mwrc1oas1_0052_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0211_mr1": 43, "mwrc1oas1_0211_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0216_mr1": 43, "mwrc1oas1_0216_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0096_mr1": 43, "mwrc1oas1_0096_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0182_mr1": 43, "mwrc1oas1_0182_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0041_mr1": 43, "mwrc1oas1_0041_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0214_mr1": 43, "mwrc1oas1_0214_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0069_mr1": 43, "mwrc1oas1_0069_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0025_mr1": 43, "mwrc1oas1_0025_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0159_mr1": 43, "mwrc1oas1_0159_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0113_mr1": 43, "mwrc1oas1_0113_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0038_mr1": 43, "mwrc1oas1_0038_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0013_mr1": 43, "mwrc1oas1_0013_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0220_mr1": 43, "mwrc1oas1_0220_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0180_mr1": 43, "mwrc1oas1_0180_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0007_mr1": 43, "mwrc1oas1_0007_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0031_mr1": 43, "mwrc1oas1_0031_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0135_mr1": 43, "mwrc1oas1_0135_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0005_mr1": 43, "mwrc1oas1_0005_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0037_mr1": 43, "mwrc1oas1_0037_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0160_mr1": 43, "mwrc1oas1_0160_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0163_mr1": 43, "mwrc1oas1_0163_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0123_mr1": 43, "mwrc1oas1_0123_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0162_mr1": 43, "mwrc1oas1_0162_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0012_mr1": 43, "mwrc1oas1_0012_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0070_mr1": 43, "mwrc1oas1_0070_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0126_mr1": 43, "mwrc1oas1_0126_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0164_mr1": 43, "mwrc1oas1_0164_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0188_mr1": 43, "mwrc1oas1_0188_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0226_mr1": 43, "mwrc1oas1_0226_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0173_mr1": 43, "mwrc1oas1_0173_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0078_mr1": 43, "mwrc1oas1_0078_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0138_mr1": 43, "mwrc1oas1_0138_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0072_mr1": 43, "mwrc1oas1_0072_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0050_mr1": 43, "mwrc1oas1_0050_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0184_mr1": 43, "mwrc1oas1_0184_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0032_mr1": 43, "mwrc1oas1_0032_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0045_mr1": 43, "mwrc1oas1_0045_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0121_mr1": 43, "mwrc1oas1_0121_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0176_mr1": 43, "mwrc1oas1_0176_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0177_mr1": 43, "mwrc1oas1_0177_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0029_mr1": 43, "mwrc1oas1_0029_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0026_mr1": 43, "mwrc1oas1_0026_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0208_mr1": 43, "mwrc1oas1_0208_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0165_mr1": 43, "mwrc1oas1_0165_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0091_mr1": 43, "mwrc1oas1_0091_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0044_mr1": 43, "mwrc1oas1_0044_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0190_mr1": 43, "mwrc1oas1_0190_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0053_mr1": 43, "mwrc1oas1_0053_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0106_mr1": 43, "mwrc1oas1_0106_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0174_mr1": 43, "mwrc1oas1_0174_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0049_mr1": 43, "mwrc1oas1_0049_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0155_mr1": 43, "mwrc1oas1_0155_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0004_mr1": 43, "mwrc1oas1_0004_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0117_mr1": 43, "mwrc1oas1_0117_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0060_mr1": 43, "mwrc1oas1_0060_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0148_mr1": 43, "mwrc1oas1_0148_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0204_mr1": 43, "mwrc1oas1_0204_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0202_mr1": 43, "mwrc1oas1_0202_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0209_mr1": 43, "mwrc1oas1_0209_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0055_mr1": 43, "mwrc1oas1_0055_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0090_mr1": 43, "mwrc1oas1_0090_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0039_mr1": 43, "mwrc1oas1_0039_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0009_mr1": 43, "mwrc1oas1_0009_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0124_mr1": 43, "mwrc1oas1_0124_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0103_mr1": 43, "mwrc1oas1_0103_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0094_mr1": 43, "mwrc1oas1_0094_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0200_mr1": 43, "mwrc1oas1_0200_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0205_mr1": 43, "mwrc1oas1_0205_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0101_mr1": 43, "mwrc1oas1_0101_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0010_mr1": 43, "mwrc1oas1_0010_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0015_mr1": 43, "mwrc1oas1_0015_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0067_mr1": 43, "mwrc1oas1_0067_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0193_mr1": 43, "mwrc1oas1_0193_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0146_mr1": 43, "mwrc1oas1_0146_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0019_mr1": 43, "mwrc1oas1_0019_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0080_mr1": 43, "mwrc1oas1_0080_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0199_mr1": 43, "mwrc1oas1_0199_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0150_mr1": 43, "mwrc1oas1_0150_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0189_mr1": 43, "mwrc1oas1_0189_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0207_mr1": 43, "mwrc1oas1_0207_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0071_mr1": 43, "mwrc1oas1_0071_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0061_mr1": 43, "mwrc1oas1_0061_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0120_mr1": 43, "mwrc1oas1_0120_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0056_mr1": 43, "mwrc1oas1_0056_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0223_mr1": 43, "mwrc1oas1_0223_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0065_mr1": 43, "mwrc1oas1_0065_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0054_mr1": 43, "mwrc1oas1_0054_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0099_mr1": 43, "mwrc1oas1_0099_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0023_mr1": 43, "mwrc1oas1_0023_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0064_mr1": 43, "mwrc1oas1_0064_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0181_mr1": 43, "mwrc1oas1_0181_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0217_mr1": 43, "mwrc1oas1_0217_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0144_mr1": 43, "mwrc1oas1_0144_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0042_mr1": 43, "mwrc1oas1_0042_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0178_mr1": 43, "mwrc1oas1_0178_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0218_mr1": 43, "mwrc1oas1_0218_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0002_mr1": 43, "mwrc1oas1_0002_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0059_mr1": 43, "mwrc1oas1_0059_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0167_mr1": 43, "mwrc1oas1_0167_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0145_mr1": 43, "mwrc1oas1_0145_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0169_mr1": 43, "mwrc1oas1_0169_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0115_mr1": 43, "mwrc1oas1_0115_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0111_mr1": 43, "mwrc1oas1_0111_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0131_mr1": 43, "mwrc1oas1_0131_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0098_mr1": 43, "mwrc1oas1_0098_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0082_mr1": 43, "mwrc1oas1_0082_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0136_mr1": 43, "mwrc1oas1_0136_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0227_mr1": 43, "mwrc1oas1_0227_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0022_mr1": 43, "mwrc1oas1_0022_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0212_mr1": 43, "mwrc1oas1_0212_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0079_mr1": 43, "mwrc1oas1_0079_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0119_mr1": 43, "mwrc1oas1_0119_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0016_mr1": 43, "mwrc1oas1_0016_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0104_mr1": 43, "mwrc1oas1_0104_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0203_mr1": 43, "mwrc1oas1_0203_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0114_mr1": 43, "mwrc1oas1_0114_mr1_mpr_anon_fslswapdim_bet": 43, "transform_single_img": [43, 48, 49, 53, 54, 56, 58, 309, 310, 311, 312, 313, 314, 315, 316, 390], "space_net": 43, "841": 43, "path_scor": 43, "_graph_net_squared_loss": 43, "0x7f13553d8790": 43, "tol": [43, 181, 182, 184, 248, 249], "0001": [43, 248, 249], "n_alpha": [43, 182, 248, 249], "is_classif": 43, "debia": [43, 248, 249], "2652228933482088": 43, "persist": [43, 48, 92], "happen": [43, 48, 92, 160, 175, 406], "caus": [43, 48, 49, 84, 92, 121, 148, 301], "wrap": [43, 48, 49, 52, 56, 92, 155, 398], "issu": [43, 48, 68, 92, 128, 129, 130, 131, 132, 140, 142, 143, 145, 162, 163, 165, 167, 168, 287, 292], "kindli": [43, 48, 92, 171], "team": [43, 48, 92, 163, 170, 171, 198, 420], "_____________________________________________________path_scor": 43, "4min": [43, 48, 105], "3min": 43, "ax1": [43, 63, 370], "set_ylabel": [43, 70, 75, 78], "ax2": [43, 63, 370], "set_xlabel": [43, 70], "2485": 43, "plot_oasis_vbm_space_net": [43, 45], "sketch": 44, "mathbf": 44, "opposit": [44, 71, 160], "corner": [44, 126, 148, 163, 300], "middl": [44, 66, 91, 111, 133, 141, 148, 227, 304], "licenc": [44, 190, 191, 193, 200, 204], "bsd": [44, 103, 107], "__doc__": [44, 71, 72], "linalg": [44, 162], "ndimag": [44, 94, 174, 214, 236, 239, 292, 318, 319, 320, 322, 323], "gaussian_filt": 44, "f_regress": [44, 102, 105, 106], "create_simulation_data": 44, "snr": [44, 168, 283, 402], "roi_siz": 44, "smooth_x": 44, "xx": 44, "randn": [44, 63], "xi": [44, 111, 200], "norm_nois": 44, "norm": [44, 55, 62, 76, 79, 101, 107, 108, 186, 243, 244, 245, 246, 248, 249, 250, 251, 265, 387, 388, 389, 390], "exp": 44, "noise_coef": 44, "log": [44, 49, 53, 77, 79, 94, 123, 148, 160, 162, 252, 255, 256, 257, 258, 294, 370], "db": [44, 111, 257, 258], "plot_slic": 44, "hspace": [44, 49, 57], "bool": [44, 94, 103, 180, 181, 182, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 206, 207, 208, 209, 212, 213, 214, 216, 217, 218, 220, 221, 222, 223, 225, 227, 233, 243, 244, 245, 246, 247, 248, 249, 250, 251, 260, 262, 265, 278, 280, 281, 283, 287, 289, 293, 296, 298, 299, 302, 303, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 361, 362, 363, 364, 365, 366, 368, 369, 371, 372, 373, 374, 375, 376, 377, 379, 380, 382, 383, 384, 386, 387, 388, 389, 390, 391, 399, 400, 401, 402, 403], "uint8": [44, 56, 91, 145, 148, 296], "recov": [44, 58, 129, 148, 149], "elast": 44, "bayesian": [44, 165], "metaprior": 44, "ridgecv": [44, 244, 246], "elasticnetcv": 44, "bayesian_ridg": 44, "bayesianridg": 44, "enet_cv": 44, "l1_ratio": [44, 248, 249], "ridge_cv": 44, "r2": [44, 140, 148, 244, 246, 257], "expos": [44, 49, 114, 125, 129, 130, 148, 163, 173, 223, 224, 225, 226], "fairli": [44, 156, 165], "attribut": [44, 48, 49, 50, 84, 89, 113, 114, 131, 140, 141, 143, 144, 145, 148, 149, 152, 153, 154, 160, 163, 173, 175, 180, 181, 182, 189, 193, 195, 198, 209, 212, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 243, 244, 245, 246, 248, 249, 250, 251, 255, 256, 257, 258, 265, 285, 293, 306, 307, 312, 313, 314, 315, 316, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 377, 379, 380, 387, 388, 389, 390, 405, 406], "t1": [44, 75, 142, 148, 190, 213, 235, 237, 238, 240, 361, 419], "els": [44, 47, 68, 70, 94, 100, 221, 243, 244, 245, 246, 248, 249, 378], "del": 44, "elapsed_tim": 44, "__class__": [44, 48, 49], "__name__": [44, 48, 49], "isnan": [44, 77, 94, 102, 105, 106], "recurs": [44, 49, 98, 111, 136, 148, 152, 158, 168, 169, 388, 389, 395], "elimin": [44, 98, 158, 161, 374, 375], "rfe": [44, 98, 158], "tip": [44, 170], "plot_simulated_data": [44, 45], "auto_examples_02_decod": 45, "2484": 45, "1339": 45, "1345": 45, "1884": 45, "3154": 45, "turn": [47, 66, 84, 150, 152, 162, 175, 265, 278, 318, 319, 320, 322, 323, 374, 375, 376, 383, 400], "find_parcellation_cut_coord": [47, 58, 133, 143, 148, 150, 359, 363], "find_probabilistic_atlas_cut_coord": [47, 50, 53, 133, 148, 150, 153, 358, 363], "intermediari": 47, "multiniftilabelsmask": [47, 120, 148, 172, 421], "multiniftimapsmask": [47, 120, 148, 172, 421], "connectivitymeasur": [47, 50, 51, 54, 56, 58, 99, 121, 123, 126, 129, 139, 148, 149, 150, 153], "amadeu": [47, 126, 148], "kanaan": [47, 126, 148], "fetch_atlas_yeo_2011": [47, 86, 150], "liber": [47, 79], "thick_17": [47, 204], "yeo_2011": 47, "yeo_jneurophysiol11_mni152": 47, "yeo2011_17networks_mni152_freesurferconformed1mm_liberalmask": 47, "fetch_development_fmri": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 85, 89, 91, 92, 95, 99, 104, 136, 148, 149, 150, 152, 153, 170, 175], "counfound": 47, "development_fmri": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "pixar123_task": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "pixar_spac": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "mni152nlin2009casym_desc": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "preproc_bold": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 100, 101, 104, 108], "pixar_desc": [47, 53, 54, 55, 56, 58], "reducedconfounds_regressor": [47, 53, 54, 55, 56, 58], "conenctivitymeasur": 47, "connectome_measur": [47, 50, 153], "labels_img": [47, 49, 56, 91, 94, 150, 310, 313, 358, 391, 393, 396], "time_seri": [47, 51, 52, 54, 56, 58, 149, 150], "mean_correlation_matrix": [47, 51], "mean_": [47, 51, 149, 180], "strength": [47, 136, 139, 148, 300, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 419], "0x7f1343667d00": 47, "latter": [47, 156, 162, 180, 181, 182, 196, 197, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 278, 309, 310, 311, 312, 313, 314, 315, 316, 368, 376, 380, 387, 388, 389, 390], "lag_correl": 47, "lag_cor": 47, "corrcoef": 47, "lag_correlation_matrix": 47, "adjacency_matrix": [47, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 382], "maps_img": [47, 52, 53, 54, 150, 175, 310, 311, 313, 314, 359, 374, 390, 392, 394, 397], "cache_mixin": [47, 49, 52, 54], "current": [47, 48, 49, 50, 52, 54, 64, 68, 86, 145, 148, 160, 162, 163, 168, 171, 175, 184, 227, 228, 253, 303, 305, 309, 310, 311, 312, 313, 314, 315, 316, 377, 379, 380, 383, 390], "1728": 47, "plot_atlas_comparison": [47, 59], "fmr": 48, "exhibit": [48, 165, 175], "fluctuat": [48, 66, 162, 165, 168], "decomposit": [48, 50, 92, 97, 103, 109, 110, 111, 121, 128, 131, 139, 145, 148, 153, 154, 169, 209, 289, 290, 295, 309, 312, 315, 376, 381, 390, 403], "simultan": [48, 162, 184], "priori": 48, "children": [48, 99, 136, 148, 169, 209], "young": [48, 111, 169, 192, 220, 227], "adult": [48, 51, 99, 111, 136, 148, 169, 209, 227], "watch": [48, 49, 50, 52, 54, 55, 85, 89, 92, 104, 136, 148, 151, 169, 170, 175, 209, 421], "movi": [48, 49, 50, 52, 54, 55, 85, 89, 92, 104, 136, 148, 151, 169, 170, 175, 209, 421], "algorithm": [48, 49, 89, 92, 94, 102, 104, 105, 113, 149, 152, 153, 154, 157, 158, 160, 168, 175, 176, 178, 181, 184, 227, 250, 251, 289, 321, 323, 387, 390, 392, 403], "preprint": 48, "rest_dataset": [48, 50, 53, 153], "faster": [48, 49, 104, 130, 148, 161, 162, 163, 223, 251, 298, 299, 368, 369, 375, 376, 383, 406], "n_compon": [48, 50, 92, 103, 104, 153, 250, 251, 395], "mask_strategi": [48, 89, 92, 104, 136, 142, 148, 175, 243, 244, 245, 246, 250, 251, 312, 315, 388], "compon": [48, 50, 54, 66, 92, 94, 97, 109, 110, 111, 121, 128, 129, 131, 139, 148, 150, 151, 152, 153, 165, 168, 173, 174, 180, 181, 182, 191, 201, 209, 220, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 257, 258, 265, 278, 290, 292, 295, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 360, 376, 381, 387, 388, 389, 390, 391, 392, 403, 421], "components_img_": [48, 50, 131, 148, 153, 154, 250, 251], "canica_components_img": 48, "components_img": [48, 50, 153], "canica_resting_st": 48, "pixar124_task": 48, "pixar125_task": 48, "pixar126_task": 48, "pixar127_task": 48, "pixar128_task": 48, "pixar001_task": [48, 53, 85], "pixar002_task": [48, 53], "pixar003_task": [48, 53], "pixar004_task": 48, "pixar005_task": 48, "pixar006_task": 48, "pixar007_task": 48, "pixar008_task": 48, "pixar009_task": 48, "pixar010_task": 48, "pixar011_task": 48, "pixar012_task": 48, "pixar013_task": 48, "pixar014_task": 48, "pixar015_task": 48, "pixar016_task": 48, "pixar017_task": 48, "pixar018_task": 48, "pixar019_task": 48, "pixar020_task": 48, "pixar021_task": 48, "pixar022_task": 48, "pixar023_task": 48, "pixar024_task": 48, "self": [48, 49, 94, 163, 180, 181, 182, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 265, 278, 309, 310, 311, 312, 313, 314, 315, 316, 387, 388, 389, 390], "functool": 48, "compute_multi_brain_mask": [48, 120, 142, 148, 312], "0x7f1355c52f70": 48, "mask_typ": [48, 319, 322], "extmath": 48, "randomized_svd": 48, "003659": 48, "013254": 48, "012477": 48, "002881": 48, "transpos": [48, 139, 148, 162], "n_iter": [48, 49, 50, 214, 236, 239, 388, 389, 395], "___________________________________________________randomized_svd": 48, "_fastica": [48, 50, 92, 103, 104], "fastica": [48, 92, 103, 104, 250], "004071": 48, "000497": 48, "005856": 48, "004765": 48, "whiten": [48, 50, 92, 103, 104, 252, 256, 257, 258], "fun": 48, "cube": [48, 175, 399], "209652396": 48, "v1": [48, 50, 92, 103, 104, 120, 133, 141, 143, 148], "behaviour": [48, 50, 111, 121, 133, 140, 145, 148, 161, 175, 220], "valueerror": [48, 50, 120, 148, 293, 297, 310, 311, 313, 314, 406], "did": [48, 56, 92, 104, 127, 143, 148, 165], "converg": [48, 92, 104, 162, 181, 184, 248, 249, 387], "toler": [48, 53, 92, 104, 162, 181, 182, 184, 248, 249, 287], "iter": [48, 53, 69, 71, 92, 104, 136, 148, 155, 160, 181, 182, 184, 243, 244, 245, 246, 248, 249, 250, 251, 284, 288, 291, 292, 295, 300, 357, 388, 389, 395], "_________________________________________________________fastica": 48, "2min": [48, 56], "398764591": 48, "__________________________________________________________fastica": 48, "924231285": 48, "1478610112": 48, "441365315": 48, "1537364731": 48, "192771779": 48, "1491434855": 48, "1819583497": 48, "6min": 48, "530702035": 48, "8min": 48, "0x7f134a245b50": 48, "cur_img": [48, 87], "ic": [48, 103], "natur": [48, 111, 114, 168, 209, 220, 223, 225], "cleaner": [48, 66, 133, 148], "arthur": [48, 111, 119, 121, 123, 126, 148, 154, 195, 251], "mensch": [48, 111, 119, 121, 123, 126, 148, 154, 195, 251], "compress": [48, 133, 148, 151, 154, 173, 251, 421], "onlin": [48, 154, 163, 251, 420], "isbi": [48, 154, 250, 251], "2016": [48, 100, 111, 123, 124, 125, 126, 127, 148, 154, 210, 228, 251, 362], "lectur": [48, 111, 154, 170, 180], "dictlearn": [48, 50, 121, 131, 148, 153, 154], "dict_learn": [48, 50, 153], "n_epoch": [48, 251], "umask": 48, "dictlearning_components_img": 48, "dictionary_learning_resting_st": 48, "001315": 48, "004387": 48, "011243": 48, "004194": 48, "00289": 48, "002135": 48, "005107": 48, "012507": 48, "_compute_load": 48, "000374": 48, "00513": 48, "001294": 48, "002512": 48, "624512": 48, "338654": 48, "779528": 48, "745343": 48, "_________________________________________________compute_load": 48, "_dict_learn": [48, 50], "dict_learning_onlin": 48, "batch_siz": [48, 251, 387], "cd": [48, 171, 251], "dict_init": [48, 251], "426936": 48, "279754": 48, "427151": 48, "176086": 48, "return_cod": 48, "_____________________________________________dict_learning_onlin": 48, "0x7f135d3b5970": 48, "comp": [48, 191], "per_compon": [48, 139, 148, 250, 251, 388], "ticker": [48, 49], "formatstrformatt": 48, "gca": [48, 51, 99], "xaxi": [48, 49], "set_major_formatt": [48, 49], "_explained_vari": 48, "245714e": 48, "338591e": 48, "410084e": 48, "451895e": 48, "02066": 48, "______________________________________________explained_vari": 48, "2649": 48, "plot_compare_decomposit": [48, 59, 136, 148], "constrain": [49, 50, 111, 152, 169, 193, 198, 388], "agglomer": [49, 111, 168, 169, 245, 246, 387, 388, 389, 395], "regim": 49, "subsequ": [49, 84, 175, 223, 225, 227, 306, 307], "empir": [49, 152, 159, 160, 161, 162, 181, 184, 307, 421], "baptist": [49, 111, 181, 218, 223, 225], "polin": [49, 64, 67, 111, 114, 181, 218, 223, 225, 283, 402], "good": [49, 56, 65, 66, 113, 128, 148, 149, 152, 154, 156, 157, 158, 159, 161, 162, 163, 164, 171, 173, 175, 223, 245, 246, 357, 421], "supervis": [49, 156, 158, 159, 168, 170], "evelyn": [49, 111, 161], "eger": [49, 111, 161], "christin": [49, 111, 233], "keribin": 49, "elsevi": 49, "pictur": [49, 113, 152, 160, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406], "discuss": [49, 56, 133, 148, 152, 155, 158, 160, 165, 167, 171, 174, 307, 326, 420], "long": [49, 114, 163, 165, 306, 307, 362], "agglom": [49, 136, 148, 152, 388], "_estimator_fit": 49, "005457": 49, "005033": 49, "009986": 49, "000234": 49, "agglomerativeclust": [49, 388], "24256x24256": 49, "162682": 49, "n_cluster": [49, 387, 389, 395], "_agglom": 49, "ward_tre": 49, "return_dist": 49, "________________________________________________________ward_tre": 49, "____________________________________________________estimator_fit": 49, "858": [49, 79, 98], "labels_img_": [49, 152, 313, 388], "ward_labels_img": 49, "ward_parcel": 49, "first_plot": 49, "effect": [49, 53, 60, 61, 64, 66, 69, 70, 71, 73, 75, 79, 80, 89, 95, 100, 102, 110, 111, 132, 148, 154, 156, 160, 162, 164, 165, 175, 180, 196, 197, 211, 224, 243, 244, 245, 246, 247, 253, 254, 255, 257, 258, 259, 261, 262, 265, 268, 278, 280, 295, 307, 326, 361, 374, 375, 376, 381, 383], "approxim": [49, 64, 71, 111, 152, 257, 258, 389, 395], "mask_img_": [49, 66, 77, 79, 89, 92, 113, 175, 243, 244, 245, 246, 248, 249, 250, 251, 312, 313, 315], "original_voxel": 49, "mean_func_img": [49, 92], "min": [49, 53, 55, 58, 102, 103, 141, 142, 148, 298, 299, 361, 362, 366, 368, 369, 372, 374, 375, 377, 383, 384, 386], "opportun": 49, "fmri_reduc": 49, "fmri_compress": 49, "60000": 49, "base_mask": [49, 53, 54, 56, 58, 92], "_filter_and_extract": [49, 52, 53, 54, 56, 58], "0x7f135542e8b0": 49, "nifti_labels_mask": [49, 56, 91], "_extractionfunctor": [49, 53, 54, 56, 58], "0x7f134ae163d0": 49, "background_label": [49, 56, 91, 175, 310, 313, 358, 393, 396], "0x7f135542e1f0": 49, "0x7f135542e5e0": 49, "niftilabelsmask": [49, 54, 56, 83, 94, 96, 110, 133, 134, 136, 139, 140, 141, 143, 145, 148, 150, 172, 196, 209, 309, 310, 311, 314, 393, 396, 398, 421], "_______________________________________________filter_and_extract": [49, 53, 54, 56, 58], "0x7f1353a4b520": 49, "But": [49, 80, 98, 153, 162, 165, 175], "10mm": 49, "ON": 49, "002516": 49, "002639": 49, "003959": 49, "004212": 49, "minibatchkmean": [49, 387, 388], "_kmean": [49, 66], "n_init": [49, 66, 250, 387], "explicitli": [49, 66, 67, 107, 133, 145, 148, 155, 223, 305, 307, 388], "suppress": [49, 66], "kmeans_labels_img": 49, "kmeans_parcel": 49, "grow": [49, 149], "unbalanc": 49, "singleton": [49, 309, 310, 311, 312, 313, 314, 315, 316, 390], "tailor": [49, 69, 152], "enforc": [49, 89, 145, 148, 149, 162, 163, 248, 249, 265], "root": [49, 162, 180, 196, 197, 256, 306, 387, 388, 389], "piec": [49, 173, 421], "adapt": [49, 65, 113, 153, 156, 163, 265, 274, 306], "hierarchical_kmean": [49, 143, 148, 388], "hkmean": 49, "hierarchicalkmean": [49, 143, 148], "x27": [49, 62, 89, 91], "parcellationsparcel": 49, "hkmeans_labels_img": 49, "hierarchical_kmeans_parcel": 49, "count": [49, 223, 225, 255], "kmeans_label": 49, "kmeans_count": 49, "return_count": 49, "hkmeans_count": 49, "voxel_ratio": 49, "round": [49, 377, 380], "3000": [49, 102], "nrow": [49, 63, 79, 100, 101], "sharex": 49, "gridspec_kw": [49, 80, 100], "height_ratio": 49, "semilogx": 49, "hist": [49, 70, 370], "set_ylim": 49, "scalarformatt": 49, "yaxi": 49, "set_label_coord": 49, "ec": 49, "0x7f13537e1fd0": 49, "thousand": [49, 175, 388], "properti": [49, 71, 158, 162, 165, 168, 175, 265, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "notabl": [49, 150], "constraint": [49, 152, 162, 303], "kahn": [49, 111, 389, 395], "ieee": [49, 111, 161, 250, 251, 389, 395], "transact": [49, 111, 161], "intellig": [49, 84], "pp": [49, 251], "march": [49, 117, 131, 140, 148, 247], "2019": [49, 51, 77, 99, 111, 134, 135, 136, 148, 208, 389, 395], "hal": [49, 111, 161, 390], "archiv": [49, 227], "ouvert": 49, "01366651": 49, "0x7f134a3a4280": 49, "rena_clust": [49, 120, 148], "recursive_neighbor_agglomer": [49, 120, 148], "_________________________________recursive_neighbor_agglomer": 49, "0x7f134c379e80": 49, "0x7f135476d580": 49, "0x7f134c379f40": 49, "0x7f134c379790": 49, "rena_labels_img": 49, "rena_parcel": 49, "0x7f1354282460": 49, "fmri_reduced_rena": 49, "compressed_img_rena": 49, "0x7f1345d08bb0": 49, "0x7f134ae16a90": 49, "0x7f1345d08340": 49, "0x7f1345d08520": 49, "0x7f134c65f220": 49, "notic": [49, 58, 66, 101, 108, 303], "accur": [49, 58, 66, 69, 136, 144, 148, 160, 164, 165], "said": [49, 165], "2320": [49, 59, 102], "plot_data_driven_parcel": [49, 59], "regionextractor": [50, 87, 121, 123, 129, 134, 148, 153, 391, 392], "decompos": [50, 149, 153, 165, 390], "inspir": [50, 161, 163, 171], "idea": [50, 88, 94, 155, 162, 165], "canica": [50, 120, 131, 142, 148, 151, 168, 251, 312, 421], "instanti": [50, 51, 91, 143, 148, 247, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "0x7f134bc62550": 50, "nomin": 50, "nonzero": [50, 300, 390], "surviv": [50, 140, 148, 253, 390], "extractor": [50, 87, 153, 390, 392], "thresholding_strategi": [50, 87, 153, 390], "ratio_n_voxel": [50, 153, 390], "local_region": [50, 153, 390, 392], "min_region_s": [50, 87, 88, 153, 390, 392], "regions_img_": [50, 87, 153, 390], "regions_extracted_img": [50, 153, 392], "index_": [50, 87, 153, 390], "regions_index": [50, 153], "n_regions_extract": [50, 153], "neach": [50, 153], "0x7f13549100d0": 50, "those": [50, 62, 66, 69, 71, 80, 89, 108, 143, 148, 154, 156, 158, 162, 163, 165, 171, 223, 305, 362, 384, 390, 396, 397, 406], "timeseries_each_subject": [50, 153], "mean_correl": [50, 153], "regions_img": [50, 87, 153], "coords_connectom": [50, 153], "0x7f13540f8be0": 50, "find_xyz_cut_coord": [50, 87, 123, 130, 148, 153], "side": [50, 53, 63, 66, 94, 102, 120, 140, 148, 160, 223, 253, 318, 321, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 362, 370, 371, 399, 400], "nice": [50, 153], "regions_indices_of_map3": [50, 153], "rgbcmyk": [50, 153], "each_index_of_map3": [50, 153], "add_overlai": [50, 118, 148, 153, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 419], "alpha_cmap": [50, 153], "1223": [50, 59], "plot_extract_regions_dictlearning_map": [50, 59], "tangent": [51, 99, 129, 148, 153, 180], "embed": [51, 99, 398], "outperform": [51, 99, 149, 154], "dadi": [51, 99, 111, 195], "care": [51, 99, 113, 155, 156, 158, 162, 199, 200, 252], "development_dataset": [51, 99], "msdl_data": [51, 99], "msdl_coord": [51, 99], "region_coord": [51, 52, 54, 99, 125, 148, 198], "n_region": [51, 91], "aud": 51, "striat": 51, "occ": 51, "att": 51, "basal": 51, "vi": 51, "sec": [51, 209], "salienc": [51, 208], "languag": [51, 64, 67, 100, 101, 108, 114, 205, 215, 218], "cereb": [51, 71], "dor": 51, "cing": 51, "Ins": 51, "ant": 51, "ip": 51, "niftimapsmask": [51, 52, 53, 54, 91, 99, 117, 133, 140, 143, 148, 150, 172, 311, 313, 390, 394, 397, 421], "filter": [51, 55, 56, 58, 66, 68, 94, 103, 112, 113, 118, 120, 133, 136, 141, 143, 145, 148, 155, 168, 172, 174, 188, 223, 225, 227, 242, 243, 244, 245, 246, 248, 249, 250, 251, 265, 268, 283, 300, 302, 303, 306, 310, 311, 312, 388, 390, 401, 402, 421], "band": [51, 58, 145, 148, 188, 306, 401], "resampling_target": [51, 53, 54, 91, 94, 99, 175, 310, 311, 313, 314], "phenotyp": [51, 62, 99, 144, 148, 155, 159, 172, 188, 189, 209, 233, 421], "pooled_subject": 51, "child": [51, 209], "func_fil": 51, "confound_fil": 51, "child_adult": [51, 99], "simpler": 51, "commonli": [51, 152, 164, 168, 170, 171, 175, 307], "margin": [51, 298], "pairwis": [51, 149], "correlation_measur": [51, 54, 56], "individu": [51, 58, 62, 66, 69, 72, 76, 78, 79, 80, 81, 94, 100, 101, 108, 111, 149, 154, 167, 168, 170, 172, 175, 180, 181, 206, 218, 280, 324, 378, 421], "2d": [51, 54, 84, 91, 92, 98, 103, 112, 145, 148, 155, 158, 172, 175, 181, 182, 183, 184, 185, 250, 251, 252, 261, 285, 305, 309, 310, 311, 312, 313, 314, 315, 316, 317, 327, 329, 330, 331, 332, 333, 334, 335, 336, 341, 343, 345, 347, 349, 351, 353, 368, 387, 388, 389, 390, 396, 397, 404, 406, 412, 421], "reflect": [51, 101, 149, 163, 165, 192, 374, 375], "visibl": [51, 79, 142, 148, 154, 298, 377, 379, 380, 419], "0x7f134a2d7370": 51, "reveal": [51, 101, 102, 160], "partial_correlation_measur": 51, "partial_correlation_matric": 51, "weaker": [51, 66, 79], "0x7f1353bde6a0": 51, "tangent_measur": 51, "deviat": [51, 149, 243, 244, 245, 246, 248, 249], "tangent_matric": 51, "perturb": 51, "anticorrel": [51, 111, 307], "distinguish": [51, 94, 98, 99, 156, 160, 165, 169, 173], "stratifiedshufflesplit": [51, 99], "preserv": [51, 58, 99, 288, 300, 371, 387, 388, 389], "linearsvc": [51, 98, 99, 160, 243, 245], "return_invers": 51, "test_siz": [51, 99], "1d": [51, 102, 105, 106, 113, 145, 148, 173, 175, 180, 247, 255, 257, 258, 261, 267, 283, 305, 309, 310, 311, 312, 313, 314, 315, 316, 337, 344, 348, 354, 357, 390, 391, 396, 401, 402, 404, 406], "mean_scor": [51, 99], "scores_std": [51, 99], "align": [51, 56, 91, 99, 299, 301, 368], "xerr": [51, 99], "set_axisbelow": [51, 99], "axvlin": 51, "linestyl": 51, "showcas": [51, 60, 74, 76, 99, 110, 152, 157, 163], "larger": [51, 75, 80, 86, 99, 154, 156, 160, 162, 163, 165, 248, 249, 361, 374, 375, 376, 383], "cohort": [51, 99], "clinic": [51, 99, 156, 170], "747": [51, 59], "1276": 51, "plot_group_level_connect": [51, 59, 129, 136, 148], "link": [52, 111, 114, 126, 133, 138, 148, 151, 155, 158, 163, 165, 168, 171, 190, 195, 220, 233, 328, 338, 339, 363, 421], "negat": [52, 83, 96, 110, 226, 294, 376, 381], "dens": [52, 54, 149, 162, 320], "highest": [52, 54, 243, 244, 245, 246, 268, 289, 403], "msdl_atla": [52, 53, 54], "msdl_roi": [52, 53, 54, 198], "resample_img": [52, 54, 71, 84, 89, 93, 130, 136, 145, 146, 148, 174, 175, 223, 250, 251, 265, 278, 297, 299, 312, 315, 318, 320, 321, 323, 388], "________________________________________resample_img": 52, "__________________________________filter_and_extract": [52, 56], "graphicallassocv": [52, 53, 57, 58, 149, 162, 182], "scitkit": [52, 53, 57, 58], "v0": [52, 53, 57, 58, 133, 136, 141, 143, 148, 200], "graphlassocv": [52, 53, 57, 58], "graphicallassocvgraphicallassocv": [52, 53, 58], "covariance_": [52, 53, 58, 149], "axesimag": [52, 54, 56], "0x7f1353db0d60": 52, "0x7f1355406a00": 52, "precision_": [52, 53, 57, 149], "0x7f133e086580": 52, "976": [52, 59], "plot_inverse_covariance_connectom": [52, 59], "plot_matric": 53, "cov": [53, 255, 257, 258, 420], "prec": [53, 162], "put": [53, 54, 64, 67, 71, 98, 118, 148, 163, 243, 244, 245, 246, 250, 251, 265, 310, 311, 312, 313, 314, 315, 316, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 388, 390, 402], "diagon": [53, 54, 56, 58, 86, 126, 148, 162, 174, 180, 184, 186, 187, 297, 298, 357, 373, 391], "clariti": 53, "span": [53, 71, 165, 361, 374, 375, 376, 383], "msdl_atlas_dataset": 53, "recomput": [53, 66, 98, 160, 262], "mem": 53, "subject_time_seri": 53, "confound_filenam": [53, 55], "region_t": 53, "__________________________________________high_variance_confound": 53, "nifti_maps_mask": [53, 54], "0x7f1354e92340": 53, "allow_overlap": [53, 54, 58, 311, 314, 316], "174325": 53, "048779": 53, "044073": 53, "155444": 53, "1min": 53, "0x7f1353c902b0": 53, "151677": 53, "057023": 53, "206928": 53, "102714": 53, "0x7f1353c90bb0": 53, "127944": 53, "087084": 53, "015679": 53, "02587": 53, "0x7f1353c90820": 53, "089762": 53, "062316": 53, "065223": 53, "022868": 53, "groupsparsecovariancecv": [53, 57, 149, 162], "gsc": [53, 57], "gl": [53, 57], "likelihood": [53, 162, 165, 180, 252, 255, 256, 257, 258], "decreas": [53, 66, 95, 162, 163, 361, 374, 375, 376, 383], "stop": [53, 97, 109, 110, 111, 114, 161, 181, 184, 223, 225, 288, 293, 294, 296, 368, 376, 381, 387], "refin": [53, 57, 58, 182], "optim": [53, 57, 100, 111, 136, 140, 148, 156, 158, 161, 162, 182, 184, 195], "reach": [53, 162, 163, 165, 170, 223, 306], "789e": 53, "graphical_lasso": 53, "68e": 53, "dual": [53, 111, 162, 181, 243, 245], "gap": [53, 181, 184], "123e": 53, "664e": 53, "158e": 53, "389e": 53, "530e": 53, "318e": 53, "844e": 53, "atlas_region_coord": [53, 150], "graphicallasso": [53, 149], "edge_vmax": [53, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363], "edge_vmin": [53, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363], "groupsparsecovari": [53, 149, 162, 182], "precisions_": [53, 57, 149, 181, 182], "covariances_": [53, 149, 181, 182], "919": [53, 59], "plot_multi_subject_connectom": [53, 59], "0x7f1354bb3a60": 54, "_____________________________________________________resample_img": 54, "0x7f1354bb39a0": 54, "generate_report": [54, 89, 91, 92, 143, 148, 175, 265, 278, 310, 311, 312, 313, 314, 315, 390], "displayed_map": [54, 311, 314, 390], "contrarili": [54, 91, 313, 314], "summar": [54, 91, 155, 163, 257, 313, 314, 316, 399], "pca": [54, 250, 314], "miss": [54, 77, 84, 142, 148, 163, 168, 272, 311, 314, 320, 323], "correlation_matrix": [54, 56, 419], "major": [54, 94, 163, 170], "fill_diagon": [54, 56], "0x7f13401ec1f0": 54, "plot_probabilistic_atlas_extract": [54, 59], "depict": [55, 163, 174], "advanc": [55, 109, 111, 155, 157, 158, 163, 164, 170, 174, 212, 243, 245, 246, 290, 309, 315, 362, 376, 421], "lie": [55, 181, 184], "franz": [55, 134, 136, 138, 148], "liem": [55, 134, 136, 138, 148], "1st": 55, "hard": [55, 150, 162, 168, 173], "drive": 55, "wide": [55, 71, 105, 111, 155, 156, 158, 162, 163, 210, 228, 247], "pcc_coord": [55, 61, 164], "niftispheresmask": [55, 58, 61, 70, 100, 119, 121, 123, 134, 138, 140, 148, 164, 172, 421], "bandpass": 55, "seed_mask": [55, 61, 100, 164], "seed_time_seri": [55, 61, 164], "brain_mask": [55, 100], "brain_time_seri": 55, "n_volum": 55, "32504": 55, "exemplarili": 55, "seed_to_voxel_correl": 55, "extrem": [55, 118, 148, 399], "seed_to_voxel_correlations_img": 55, "marker_coord": [55, 61, 100, 134, 136, 148, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 385], "At": [55, 63, 65, 69, 77, 80, 91, 153, 170, 171, 278, 280], "pcc_seed_correl": 55, "seed_to_voxel_correlations_fisher_z": 55, "arctanh": 55, "768": 55, "941": [55, 86, 96], "eventu": [55, 419], "seed_to_voxel_correlations_fisher_z_img": 55, "pcc_seed_correlation_z": 55, "766": [55, 100, 111], "plot_seed_to_voxel_correl": [55, 59, 134, 148], "movement": [56, 170, 175], "load_confound": [56, 66, 143, 148, 150, 175, 307], "flexibli": 56, "guidelin": [56, 94, 120, 142, 145, 148, 155, 171], "en": [56, 165, 190, 307, 310], "craddock": [56, 111, 145, 148, 149, 150, 193, 198, 233], "2013": [56, 111, 136, 148, 149, 150, 160, 161, 188, 192, 198, 306], "reorder": [56, 131, 148, 297, 357, 373], "reduce_confound": [56, 209], "reduced_confound": 56, "preselect": 56, "metadata": [56, 91, 114, 136, 148, 174, 223, 224, 225, 226, 305], "nifti1head": [56, 91], "endian": [56, 91, 129, 148, 292, 298], "sizeof_hdr": [56, 91], "data_typ": [56, 91], "db_name": [56, 91], "extent": [56, 91, 95, 168, 339, 342], "session_error": [56, 91], "dim_info": [56, 91], "intent_p1": [56, 91], "intent_p2": [56, 91], "intent_p3": [56, 91], "intent_cod": [56, 91], "datatyp": [56, 91], "bitpix": [56, 91], "slice_start": [56, 91], "pixdim": [56, 91], "vox_offset": [56, 91], "scl_slope": [56, 91], "scl_inter": [56, 91], "slice_end": [56, 91], "slice_cod": [56, 91], "xyzt_unit": [56, 91], "cal_max": [56, 91], "cal_min": [56, 91], "slice_dur": [56, 91], "toffset": [56, 91], "glmax": [56, 91], "glmin": [56, 91], "descrip": [56, 91], "aux_fil": [56, 91], "qform_cod": [56, 91], "sform_cod": [56, 91], "quatern_b": [56, 91], "quatern_c": [56, 91], "quatern_d": [56, 91], "qoffset_x": [56, 91], "qoffset_i": [56, 91], "qoffset_z": [56, 91], "srow_x": [56, 91], "srow_i": [56, 91], "srow_z": [56, 91], "intent_nam": [56, 91], "magic": [56, 91, 361, 368, 369, 371, 375, 376], "0x7f134aa8b760": 56, "0x7f134aa80eb0": 56, "0x7f134ac99610": 56, "cover": [56, 163, 175, 206, 208, 357], "firstli": 56, "bad": [56, 105, 162], "0x7f1354ea54f0": 56, "0x7f1349cca940": 56, "ensur": [56, 58, 100, 133, 140, 148, 160, 162, 163, 165, 228, 253, 278, 280, 327, 329, 330], "steadi": [56, 66, 141, 148, 265, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 390, 402], "correctli": [56, 66, 93, 134, 136, 137, 145, 148, 158, 165, 171, 265, 306, 307, 420], "confounds_simpl": 56, "wm_csf": [56, 306, 307], "cosine00": 56, "cosine01": 56, "cosine02": 56, "cosine03": 56, "rot_x": 56, "rot_i": 56, "rot_z": 56, "trans_x": 56, "trans_i": 56, "trans_z": 56, "white_matt": 56, "0x7f1354638c40": 56, "109104": 56, "109090": 56, "109066": 56, "026078": 56, "055006": 56, "876886": 56, "108937": 56, "108723": 56, "027587": 56, "049458": 56, "418909": 56, "108990": 56, "108632": 56, "108038": 56, "019085": 56, "075787": 56, "540842": 56, "108875": 56, "108176": 56, "107012": 56, "023900": 56, "053022": 56, "922085": 56, "107567": 56, "105651": 56, "033396": 56, "077764": 56, "843388": 56, "064873": 56, "022169": 56, "221217": 56, "064266": 56, "042248": 56, "237783": 56, "053241": 56, "029500": 56, "590905": 56, "081559": 56, "034236": 56, "122246": 56, "069287": 56, "007294": 56, "000828": 56, "0x7f1336c02d60": 56, "exceed": [56, 130, 148], "framewis": [56, 209, 306], "displac": [56, 209, 306], "standardis": 56, "dvar": [56, 306], "five": [56, 66, 388], "percentag": [56, 155, 243, 244, 245, 246, 265], "volumn": [56, 306], "suitabl": [56, 69, 133, 148, 156, 160, 175, 221, 307], "confounds_scrub": 56, "fd_threshold": [56, 306, 307], "std_dvars_threshold": [56, 306, 307], "0x7f1343ab3f40": 56, "097319": 56, "110228": 56, "100980": 56, "024472": 56, "048861": 56, "796008": 56, "097281": 56, "110075": 56, "100637": 56, "025982": 56, "043313": 56, "338031": 56, "097205": 56, "109770": 56, "099952": 56, "017480": 56, "069643": 56, "459963": 56, "097090": 56, "109313": 56, "098926": 56, "022294": 56, "046877": 56, "841207": 56, "096938": 56, "108705": 56, "097565": 56, "031791": 56, "071620": 56, "762509": 56, "120508": 56, "113737": 56, "066478": 56, "028314": 56, "302095": 56, "120661": 56, "115099": 56, "062660": 56, "048393": 56, "318661": 56, "120775": 56, "116124": 56, "054846": 56, "035645": 56, "671784": 56, "120851": 56, "116809": 56, "079953": 56, "040381": 56, "203124": 56, "120889": 56, "117152": 56, "070892": 56, "013439": 56, "081706": 56, "0x7f135402c8e0": 56, "grand": [56, 265], "physiolog": [56, 66, 70, 307], "artifact": [56, 111, 175, 283, 306, 307, 402], "minim": [56, 62, 163, 168, 265, 267, 272, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 374], "degre": [56, 68, 100, 107, 165, 253, 256, 307], "freedom": [56, 100, 107, 150, 165, 253, 256, 307], "downsid": [56, 66], "insight": [56, 142, 148, 149], "confounds_minimal_no_gsr": 56, "global_sign": [56, 306, 307], "gsr": 56, "0x7f135495a640": 56, "0x7f134ad02cd0": 56, "load_confounds_strategi": [56, 143, 148, 150, 175, 306], "benchmark": [56, 111, 161, 306, 307], "compcor": [56, 66, 111, 143, 148, 150, 209, 289, 306, 307, 403], "ica_aroma": [56, 143, 148, 306, 307], "denoise_strategi": [56, 307], "rastko": [56, 111, 306, 307], "ciric": [56, 111, 306, 307], "daniel": [56, 111, 133, 136, 142, 145, 148, 220, 223, 225, 227, 233, 306, 307], "wolf": [56, 58, 111, 162, 306, 307], "jonathan": [56, 58, 111, 161, 200, 204, 206, 207, 260, 306, 307, 362], "david": [56, 111, 114, 145, 148, 194, 201, 220, 223, 225, 233, 306, 307, 326], "roalf": [56, 111, 306, 307], "graham": [56, 111, 306, 307], "baum": [56, 111, 306, 307], "kosha": [56, 111, 306, 307], "ruparel": [56, 111, 306, 307], "russel": [56, 100, 111, 114, 170, 221, 223, 225, 233, 257, 258, 306, 307], "shinohara": [56, 111, 306, 307], "simon": [56, 111, 133, 138, 148, 200, 201, 306, 307], "eickhoff": [56, 111, 200, 201, 306, 307], "christo": [56, 111, 306, 307], "davatziko": [56, 111, 306, 307], "ruben": [56, 111, 306, 307], "gur": [56, 111, 306, 307], "raquel": [56, 111, 306, 307], "bassett": [56, 111, 306, 307], "theodor": [56, 111, 306, 307], "satterthwait": [56, 111, 306, 307], "linden": [56, 111, 307], "park": [56, 111, 307], "fulcher": [56, 111, 307], "murat": [56, 111, 307], "y\u00fccel": [56, 111, 307], "alex": [56, 111, 130, 133, 148, 160, 213, 307], "fornito": [56, 111, 307], "evalu": [56, 111, 158, 162, 168, 203, 243, 244, 245, 246, 252, 256, 307, 399, 400], "efficaci": [56, 111, 307], "reliabl": [56, 111, 133, 148, 165, 218, 307], "2018": [56, 75, 76, 77, 111, 131, 132, 133, 148, 157, 199, 200, 209, 245, 246, 260, 283, 307, 389, 395, 402], "772": [56, 59], "plot_signal_extract": [56, 59, 175], "group_sparse_cov": 57, "instabl": [57, 66, 162, 401], "data_gen": [57, 145, 148, 162], "generate_group_sparse_gaussian_graph": [57, 162], "n_displai": 57, "topologi": [57, 162], "min_n_sampl": 57, "max_n_sampl": 57, "max_precis": 57, "alpha_": [57, 182], "plot_simulated_connectom": [57, 59], "spheric": 58, "nardo": [58, 111, 206], "1358": [58, 111, 206], "1361": [58, 111, 206], "dmn_coord": [58, 175, 419], "temporopariet": 58, "junction": 58, "prefront": 58, "sequenc": [58, 61, 64, 66, 69, 79, 155, 164, 168, 173, 175, 218, 243, 244, 245, 246, 255, 257, 258, 265, 278, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 382, 400, 401, 406], "confounds_filenam": 58, "nifti_spheres_mask": 58, "0x7f1345d5abb0": 58, "Its": [58, 149, 157, 162, 247, 258, 265, 278, 281, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 400], "ledoit": [58, 162], "connectivity_measur": 58, "partial_correlation_matrix": 58, "0x7f1354bef220": 58, "suppli": [58, 247, 248, 249, 272, 306, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 402], "mass": [58, 79, 145, 148, 280, 326, 358, 399], "fetch_coords_power_2011": 58, "dict_kei": 58, "collect": [58, 100, 103, 107, 111, 112, 163, 168, 223, 224, 225, 226, 306, 421], "spheres_mask": 58, "exce": [58, 182], "graphic": [58, 111, 149, 162, 163, 176, 181, 184], "covariance_estim": 58, "_method": 58, "subtract": [58, 66, 101, 170, 224], "tweak": [58, 89, 153], "strongest": 58, "node_s": [58, 134, 136, 143, 148, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 372, 382], "0x7f1354ea5730": 58, "sometim": [58, 66, 80, 114, 118, 148, 155, 163, 168, 252, 256], "overwhelm": 58, "plot_mark": [58, 139, 143, 145, 148, 419], "node_strength": 58, "0x7f1353dc03d0": 58, "clip": [58, 84, 298, 299], "positive_edg": 58, "negative_edg": 58, "node_strength_posit": 58, "node_strength_neg": 58, "node_cmap": [58, 372], "ylorrd": 58, "pubu": 58, "0x7f1355018c40": 58, "fetch_coords_dosenbach_2010": [58, 124, 127, 148], "0x7f134a1eec10": 58, "cerebellum": [58, 111, 206, 208, 220], "cingulo": 58, "opercular": [58, 91], "fronto": [58, 101], "occipit": [58, 91], "sensorimotor": 58, "857": [58, 59], "plot_sphere_based_connectom": [58, 59, 136, 148], "auto_examples_03_connect": 59, "2648": 59, "1727": 59, "1275": 59, "765": [59, 92], "focus": [60, 74, 98, 110, 113, 125, 131, 148, 156, 159, 160, 163], "neurospin": [60, 65, 73, 110, 367], "adhd": [60, 73, 85, 110, 136, 145, 148, 149, 164, 189, 265, 272, 309, 316, 339, 376, 398, 400], "finit": [60, 73, 77, 79, 103, 110, 129, 148, 164, 168, 219, 265, 267, 272, 283, 300, 317, 320, 361, 364, 365, 375, 376, 402], "impul": [60, 73, 110, 219, 265, 364, 365, 376], "fir": [60, 63, 73, 110, 164, 168, 219, 265, 267, 272, 364, 365, 376], "residu": [60, 62, 73, 110, 143, 148, 160, 166, 230, 249, 252, 253, 256, 257, 258, 265, 278, 283, 284, 295, 300, 309, 316, 320, 354, 376, 399, 421], "openneuro": [60, 73, 110, 164, 209, 210, 228, 229, 242, 265, 268, 305, 308, 315, 364, 368, 370, 398, 399, 400], "understand": [60, 73, 83, 96, 110, 127, 148, 156, 158, 163, 170, 172, 209, 214, 216, 217, 219, 222, 265, 289, 290, 295, 299, 306, 309, 315, 320, 364, 365, 366, 375, 376, 381, 398, 421], "workflow": [61, 163, 307], "make_first_level_design_matrix": [61, 63, 69, 71, 108, 143, 148, 164], "frametim": 61, "add_reg": [61, 63, 108, 164, 272], "add_reg_nam": [61, 63, 272], "pcc_seed": 61, "dmn_contrast": 61, "seed_based_glm": 61, "setup": [61, 69, 108, 144, 148, 163, 167, 171, 188, 189, 190, 191, 192, 193, 194, 198, 201, 202, 204, 212, 213, 216, 217, 218, 221, 222, 227, 233, 390, 420], "first_level_model": [61, 65, 66], "run_img": [61, 101, 108, 265], "design_matric": [61, 62, 64, 67, 71, 100, 164, 265], "snapshot": 61, "dmn_z_map": 61, "portabl": [61, 75, 175], "pertin": [61, 75], "min_dist": [61, 265, 278, 399, 400], "plot_typ": [61, 265, 278, 400], "plot_adhd_dmn": [61, 73], "exploit": [62, 154, 162], "io": [62, 101, 141, 148, 153, 188, 195, 199, 209, 218, 250, 251, 368, 384, 388, 420], "s3": 62, "bucket": 62, "assur": 62, "nistat": [62, 120, 122, 139, 148], "against": [62, 155, 164, 168, 223, 280, 326, 373], "stopsign": 62, "ds000030": [62, 210], "v4": 62, "emploi": [62, 167, 168, 399, 400], "fetch_ds000030_url": [62, 145, 148, 228], "fetch_openneuro_dataset": 62, "select_from_index": 62, "exclusion_pattern": 62, "mriqc": 62, "parameter_plot": 62, "physio_plot": 62, "t1w": 62, "dwi": 62, "beh": 62, "bart": 62, "scap": 62, "exclusion_filt": [62, 242], "data_dir": [62, 100, 101, 108, 142, 148, 173, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234], "subject_id": [62, 101, 108, 230, 231], "moreov": [62, 101, 108, 145, 148, 163, 170, 303], "task_label": [62, 101, 108, 268], "space_label": [62, 268], "folder": [62, 86, 94, 101, 108, 143, 148, 163, 171, 173, 196, 197, 234, 268, 293, 303], "fmriprep": [62, 66, 143, 145, 148, 150, 154, 165, 168, 175, 209, 213, 214, 238, 268], "app": [62, 111, 220, 227, 268], "first_level_from_bid": [62, 100, 101, 108, 367], "mni152nlin2009casym": 62, "derivatives_fold": [62, 268], "models_run_img": [62, 100, 101, 108, 268], "models_ev": [62, 101, 108, 268], "models_confound": [62, 100, 101, 108, 268], "932": [62, 100, 101, 108], "slicetimingref": [62, 100, 101, 108], "ds000030_r1": [62, 228, 229], "uncompress": [62, 128, 132, 148], "10159": 62, "10159_task": 62, "stopsignal_bold": 62, "json": [62, 100, 101, 108, 114, 268, 303, 305, 306, 307], "assum": [62, 64, 66, 71, 78, 79, 100, 101, 108, 160, 165, 171, 187, 228, 229, 255, 256, 257, 258, 265, 278, 280, 283, 298, 301, 325, 364, 373, 401, 402], "minimize_memori": [62, 64, 67, 70, 164, 265, 268, 278], "overrid": [62, 100, 140, 148, 188, 189, 190, 191, 192, 193, 194, 198, 201, 202, 204, 212, 213, 216, 217, 218, 221, 222, 227, 233, 388], "interfac": [62, 139, 143, 148, 154, 162, 163, 168, 243, 244], "get_design_from_fslmat": [62, 143, 148], "fsl_design_matrix_path": [62, 308], "feat": 62, "mat": [62, 308, 373], "column_nam": [62, 308], "stopsuccess": 62, "definit": [62, 94, 150, 158, 159, 162, 164, 168, 172, 195, 305, 310, 313, 316, 364, 393, 394, 396, 397, 421], "design_column": [62, 263], "cond_": 62, "02d": [62, 78, 80], "firstlevelmodelfirstlevelmodel": 62, "nib": 62, "fsl_z_map": 62, "zstat12": 62, "isf": [62, 76, 79, 101, 107, 108], "unc": [62, 79, 80, 101], "plot_img_comparison": 62, "masker_": [62, 66, 77, 79, 243, 244, 245, 246, 248, 249, 250, 251, 388], "ref_label": [62, 370], "src_label": [62, 370], "latex": [62, 120, 148, 171], "purpos": [62, 64, 67, 69, 71, 79, 101, 108, 113, 162, 167, 175, 209, 265, 278, 328, 400, 419], "to_latex": 62, "04_glm_first_level": 62, "plot_bids_featur": [62, 73], "utilis": 62, "styler": 62, "signatur": [62, 134, 148, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406], "therefor": [62, 143, 148, 154, 160, 162, 190, 192], "style": [62, 121, 143, 148, 242], "tabular": 62, "llrrrrl": 62, "toprul": 62, "midrul": 62, "307532": 62, "6300": [62, 102], "668929": 62, "534376": 62, "254210": 62, "918703": 62, "2520": [62, 102], "715845": 62, "2b": 62, "683343": 62, "2c": 62, "587956": 62, "692869": 62, "664250": 62, "461193": 62, "257986": 62, "078390": 62, "815609": 62, "5c": 62, "798387": 62, "208105": 62, "348351": 62, "190472": 62, "385929": 62, "163956": 62, "079389": 62, "056165": 62, "792": 62, "10a": 62, "726486": 62, "10b": 62, "710553": 62, "043724": 62, "950054": 62, "937283": 62, "906274": 62, "756": [62, 100, 111], "14a": 62, "882906": 62, "776293": 62, "bottomrul": 62, "save_glm_to_bid": [62, 120, 145, 148], "contrast_typ": [62, 69, 108, 253, 261, 305], "out_dir": [62, 305], "nilearn_glm": 62, "prefix": [62, 305], "_task": [62, 268], "line_termin": 62, "linetermin": 62, "stopsuccessminusgo": 62, "r_squar": [62, 70, 143, 148, 257, 265, 278], "glob": [62, 121, 131, 148, 172, 284, 303, 421], "dataset_descript": [62, 305], "stopsignal_contrast": 62, "stopsuccessminusgo_design": 62, "stopsuccessminusgo_stat": 62, "effect_statmap": [62, 305], "p_statmap": 62, "t_statmap": 62, "variance_statmap": [62, 305], "z_statmap": 62, "stopsignal_design": 62, "stopsignal_stat": 62, "errorts_statmap": [62, 305], "rsquare_statmap": [62, 305], "stopsignal_statmap": 62, "runtimeerror": [63, 78], "librari": [63, 78, 94, 113, 133, 148, 158, 163, 170, 174, 410, 419, 420], "compris": [63, 66, 86, 391, 399], "trial": [63, 66, 72, 111, 155, 164, 168, 221], "c0": 63, "c1": 63, "c3": 63, "motion": [63, 66, 70, 101, 111, 141, 148, 164, 209, 265, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 390, 402], "jointli": [63, 163, 295], "cumsum": 63, "translat": [63, 136, 148, 174, 265, 278, 281, 306, 400], "rigid": 63, "bodi": [63, 398], "tx": 63, "ty": 63, "tz": 63, "rx": 63, "ry": 63, "rz": 63, "varieti": [63, 100, 154, 155, 156, 157, 158, 163, 168], "x1": [63, 94, 406], "polynomi": [63, 66, 164, 265, 272], "x2": [63, 94], "x3": 63, "ax3": 63, "set_titl": [63, 70, 75, 78, 79, 80, 91, 100, 105], "1753015208063937": 63, "layout": [63, 133, 148, 247, 328], "fiac": [64, 211], "dehaen": [64, 67, 111, 218], "lambertz": [64, 67], "anton": [64, 67], "jl": [64, 67], "campagn": [64, 67], "ciuciu": [64, 67], "denghien": [64, 67], "jobert": [64, 67, 111, 218], "lebihan": [64, 67], "sigman": [64, 67], "pallier": [64, 67], "jb": [64, 67], "segreg": [64, 67], "sentenc": [64, 65, 66, 67, 69, 72, 81, 101, 218], "hum": [64, 67], "mapp": [64, 67], "2006": [64, 67, 111, 160, 170, 247, 257, 258], "www": [64, 67, 71, 111, 114, 157, 160, 161, 188, 189, 190, 191, 192, 193, 195, 198, 201, 202, 208, 212, 213, 214, 218, 220, 221, 222, 223, 225, 227, 230, 231, 233, 238, 245, 246, 283, 306, 307, 326, 362, 402, 403], "pubmedcentr": [64, 67, 111, 306, 307], "nih": [64, 67, 111, 156, 306, 307], "gov": [64, 67, 111, 156, 306, 307], "articlerend": [64, 67, 111, 306, 307], "fcgi": [64, 67, 111, 306, 307], "artid": [64, 67, 111, 306, 307], "2653076": [64, 67], "r11": [64, 67], "subdirectori": [64, 223, 225], "getcwd": 64, "write_dir": 64, "fetch_fiac_first_level": [64, 67], "func1": [64, 67, 71, 231], "func2": [64, 67, 71, 231], "design_fil": [64, 67], "design_matrix1": [64, 67], "design_matrix2": [64, 67], "df": [64, 67, 100, 107, 399], "n_column": [64, 67, 165, 187], "pad_vector": 64, "contrast_": 64, "routin": [64, 66, 89, 173, 221, 419], "sstssp_minus_dstdsp": 64, "dstdsp_minus_sstssp": 64, "dst_minus_sst": [64, 67], "dsp_minus_ssp": 64, "dst_minus_sst_for_dsp": 64, "dsp_minus_ssp_for_dst": 64, "deactiv": 64, "contrast_id": [64, 65, 66, 67, 69, 71], "contrast_v": [64, 65, 66, 67, 69, 71], "2i": 64, "contast": 64, "implicitli": [64, 66, 69, 80, 102, 108, 155, 162], "z_image_path": 64, "s_z_map": 64, "0x7f134affc4f0": 64, "0x7f135d023a30": 64, "unexpectedli": [64, 67], "ratio": [64, 67, 94, 132, 148, 168, 209, 248, 250, 251, 388, 390], "842": [64, 73], "plot_fiac_analysi": [64, 73], "hemodyam": 65, "audio_comput": [65, 66, 69], "audio_left_hand_button_press": [65, 66, 69], "audio_right_hand_button_press": [65, 66, 69], "horizontal_checkerboard": [65, 66], "sentence_listen": [65, 66, 69], "sentence_read": [65, 66, 69], "vertical_checkerboard": [65, 66], "visual_comput": [65, 66, 69], "visual_left_hand_button_press": [65, 66, 69], "visual_right_hand_button_press": [65, 66, 69], "fetch_localizer_first_level": [65, 66, 69], "epi_img": [65, 66, 69, 89, 175, 219, 320, 323, 366], "events_fil": [65, 66, 69], "impuls": [65, 68, 164, 165, 168, 265, 267, 272], "behind": 65, "concret": [65, 163, 165], "interv": [65, 66, 100, 243, 244, 245, 246, 248, 249, 255, 257, 258, 389, 395, 406], "character": [65, 66, 111, 170, 306], "hairi": 65, "sorri": 65, "price": [65, 160], "flexibl": [65, 122, 148], "contrast_matrix": [65, 66, 69, 71], "dict": [65, 66, 69, 71, 89, 105, 114, 180, 181, 182, 191, 223, 224, 225, 226, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 261, 265, 274, 278, 280, 304, 305, 309, 310, 311, 312, 313, 314, 315, 316, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 362, 363, 371, 372, 379, 380, 384, 387, 388, 389, 390, 398, 400], "audio": [65, 66, 69], "video": 65, "breath": [65, 66], "ask": [65, 114, 133, 136, 148, 163, 171], "plot_fir_model": [65, 73], "clarifi": [66, 141, 148], "exploratori": 66, "increment": [66, 95, 170, 171], "outcom": [66, 168, 307], "reader": [66, 170, 421], "familiar": [66, 163, 170], "concept": [66, 98, 136, 148, 155, 156, 163, 168, 172, 421], "paradigm": [66, 69, 71, 97, 109, 110, 114, 155, 165, 225, 272, 288, 293, 294, 296, 368, 376, 381], "pinel": [66, 72, 111, 218], "bmc": [66, 72, 111, 218], "2007": [66, 72, 111, 149, 218, 227, 289, 306, 307, 403], "probe": [66, 69, 159, 168], "button": [66, 69, 72, 76, 77, 79, 80, 105, 143, 148, 163, 165, 216, 218, 226], "press": [66, 69, 72, 76, 77, 79, 80, 105, 111, 165, 216, 218, 226, 257, 258], "horizont": [66, 72, 80, 218, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "checkerboard": [66, 72, 80, 218], "listen": [66, 69, 81, 218], "short": [66, 100, 114, 162, 163, 168, 199, 200, 203, 223, 224, 225, 226], "mental": [66, 69, 72, 81, 218, 224], "subract": 66, "epoch": [66, 251], "100m": 66, "male": [66, 188], "voic": 66, "instruct": [66, 69, 72, 110, 120, 144, 148, 163, 169, 224, 420], "passiv": 66, "verifi": [66, 101, 163, 175], "understood": [66, 223], "flash": 66, "narr": [66, 81, 163], "000000": 66, "400000": 66, "700000": 66, "399994": 66, "700012": 66, "make_localizer_contrast": 66, "involv": [66, 69, 71, 100, 165], "differenti": [66, 71], "content": [66, 69, 84, 111, 159, 160, 163, 170, 201, 206, 212, 220, 283, 402], "stori": [66, 69, 111, 221], "comptat": 66, "encapsul": 66, "plot_contrast": 66, "discret": [66, 71, 120, 140, 141, 148, 265, 274, 293, 306, 310, 311, 312, 313, 314, 315, 316, 402], "spuriou": [66, 111, 153, 163, 306, 307, 391], "heart": 66, "scanner": [66, 165, 168, 306], "01hz": [66, 188], "longest": 66, "multipli": [66, 84, 90, 126, 148, 160, 162, 187, 252, 255, 257, 258, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 377, 379, 380], "shall": 66, "wors": [66, 249], "poorli": [66, 94, 175], "mayb": [66, 114, 326], "useless": 66, "haven": [66, 103], "basi": [66, 69, 108, 164, 265, 267, 272, 306], "undershoot": 66, "strong": [66, 89, 162, 163], "seem": [66, 75, 98, 162], "someth": 66, "inclus": [66, 242], "sole": [66, 114, 162, 312, 315], "discount": 66, "misspecif": 66, "hint": [66, 149, 150], "misfit": 66, "valuabl": [66, 163], "adjust": [66, 68, 120, 131, 148, 307, 328, 339, 342], "shift": [66, 139, 145, 148, 310, 311, 312, 313, 314, 315, 316, 402], "mi": 66, "sake": [66, 79, 105], "simplic": [66, 69, 155], "readabl": 66, "drop": [66, 70, 100, 128, 129, 130, 134, 148, 163, 170, 171], "far": [66, 108, 162, 298, 304], "autoregress": [66, 265, 274], "ordinari": [66, 102, 105, 256, 326], "least": [66, 68, 100, 102, 103, 105, 111, 155, 161, 163, 251, 252, 256, 265, 274, 278, 279, 280, 311, 314, 316, 320, 326, 357, 420], "obviou": 66, "stick": 66, "arguabl": 66, "greater": [66, 100, 141, 143, 148, 165, 265, 274, 282, 289, 302, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 372, 382, 384, 386, 399, 403, 406], "complex": [66, 77, 87, 111, 114, 155, 157, 160, 163, 167, 170, 175], "ar3": [66, 274], "wish": [66, 79, 105, 143, 148, 163, 168, 171, 213, 214, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 363, 366, 368, 369, 372, 374, 375, 376], "computation": [66, 156, 160], "problemat": 66, "uncontrol": 66, "spike": 66, "phenomena": 66, "respir": 66, "blood": [66, 165, 168], "oxygen": [66, 165, 168], "themselv": [66, 114, 175], "percentil": [66, 87, 88, 98, 243, 244, 245, 246, 248, 249, 282, 289, 302, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 347, 348, 349, 351, 353, 354, 360, 363, 374, 382, 383, 384, 386, 390, 403], "kill": 66, "somewhat": 66, "colinear": 66, "scrub": [66, 120, 141, 143, 148, 150, 265, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 390, 402], "scenario": [66, 164, 165, 175], "exclud": [66, 114, 171, 391], "unwant": 66, "wecan": 66, "discrep": [66, 162], "drawback": 66, "bias": 66, "mild": 66, "5mm": [66, 95, 170], "smoother": 66, "firstlevemodel": 66, "grei": [66, 89, 126, 136, 142, 148, 174, 175, 213, 214, 236, 237, 238, 240, 319, 322], "data_mask": [66, 104], "fetch_icbm152_brain_gm_mask": [66, 75, 126, 148, 213], "icbm_mask": 66, "driven": [66, 154, 163, 170, 192, 272], "resample_to_img": [66, 75, 93, 125, 148, 174, 175, 298], "resampled_icbm_mask": 66, "spot": 66, "interestingli": 66, "resili": 66, "reassur": 66, "plot_first_level_detail": [66, 73], "summary_statistics_session1": 67, "0x7f1354a0c5e0": 67, "summary_statistics_session2": 67, "0x7f1355354280": 67, "compute_fixed_effect": 67, "contrast_img": [67, 262], "variance_img": [67, 262], "effect_vari": [67, 80, 253, 265, 278], "fixed_fx_contrast": 67, "fixed_fx_vari": 67, "fixed_fx_stat": 67, "0x7f13548ce640": 67, "891": [67, 73], "plot_fixed_effect": [67, 73], "hemodynam": [68, 71, 155, 168], "propos": [68, 100, 163, 164, 171, 320], "primat": 68, "agent": 68, "mion": 68, "monkei": 68, "coupl": [68, 149, 171], "metabol": [68, 165, 168], "phenomenolog": 68, "framework": [68, 149, 209], "whenev": [68, 156, 281], "uncertainti": [68, 76, 79, 162, 164, 165, 168], "occur": [68, 121, 148, 165, 168, 420], "time_length": [68, 269, 270, 271, 275, 276, 277], "amplitud": [68, 267, 272, 382, 384, 386], "exp_condit": [68, 267], "stim": 68, "oversampl": [68, 265, 267, 269, 270, 271, 272, 275, 276, 277], "gamma": [68, 145, 148, 164], "mion_response_funct": 68, "factor": [68, 70, 100, 104, 130, 148, 157, 168, 255, 257, 258, 267, 269, 270, 271, 272, 275, 276, 277, 281, 361, 374, 375, 376, 383], "response_funct": 68, "dt": 68, "time_stamp": 68, "rint": 68, "delai": [68, 171, 265, 267, 272], "mion_time_deriv": 68, "drf": 68, "derived_response_funct": 68, "rf_model": 68, "main_deriv": 68, "compute_regressor": [68, 143, 148, 164], "model_titl": 68, "convolut": [68, 165, 267, 272], "_label": 68, "con_id": [68, 267], "plot_hrf": [68, 73], "capabl": [69, 143, 148, 175], "coregist": 69, "obvious": 69, "geometri": [69, 111, 294, 371, 377, 378, 379, 380, 386, 405, 406], "resort": 69, "whose": [69, 162, 168, 181, 182, 184, 256, 290, 406], "basic_contrast": [69, 71, 164], "Of": 69, "cours": [69, 152, 165, 168, 311, 314], "impress": 69, "littl": [69, 75, 155, 156, 163], "plot_localizer_surface_analysi": [69, 73], "assess": [70, 78, 111, 155, 162, 163, 164, 188, 247, 326, 362], "clean_img": [70, 126, 128, 133, 143, 148, 174, 402], "0x7f13543b91c0": 70, "set_index": 70, "head": [70, 265, 278, 306, 398, 400], "real_timeseri": 70, "predicted_timeseri": [70, 164], "navi": 70, "purpl": 70, "oliv": [70, 111, 160, 192], "teal": 70, "fig1": 70, "axs1": 70, "labelpad": 70, "resid": [70, 145, 148, 306, 307], "fig2": 70, "axs2": 70, "006256025894389561": 70, "07049870657347272": 70, "0034931346633929974": 70, "0008347353074654359": 70, "01560692294143525": 70, "005982784657046168": 70, "markedli": 70, "deep": [70, 180, 181, 182, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 278, 309, 310, 311, 312, 313, 314, 315, 316, 387, 388, 389, 390], "awai": [70, 162, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "receiv": [70, 100, 155, 168, 370], "coil": 70, "salt": 70, "necessarili": [70, 153, 165], "influenc": [70, 162, 249], "0x7f1353cef220": 70, "tell": [70, 86, 111, 162, 221], "everywher": [70, 161], "z_map_ftest": 70, "stat_typ": [70, 265], "0x7f13540f9d00": 70, "plot_predictions_residu": [70, 73], "percept": [71, 136, 148, 165, 218], "realign": [71, 221], "scrambl": [71, 94, 164], "supposedli": 71, "henson": [71, 100, 111], "goshen": 71, "gottstein": 71, "ganel": 71, "otten": 71, "quayl": 71, "rugg": 71, "electrophysiolog": 71, "haemodynam": [71, 164, 165, 168], "prime": 71, "2003": [71, 111, 252, 256], "jul": 71, "793": [71, 121, 148], "805": 71, "1093": [71, 111, 194, 200, 220], "cercor": [71, 111, 194, 200, 220], "multimodal_fac": 71, "fetch_spm_multimodal_fmri": [71, 164], "specfii": 71, "catch_warn": [71, 103], "simplefilt": [71, 103], "auto_resampl": [71, 284], "mean_imag": 71, "idx": [71, 200], "revious": 71, "tail": [71, 255, 257, 258], "tcontrast": [71, 255, 257, 258], "sophist": [71, 98, 158], "implic": [71, 100, 111], "portion": 71, "sparser": [71, 94, 154, 248, 249, 390, 392], "anterior": [71, 91, 103, 130, 148, 206, 208, 297, 377, 379, 380], "frontal": [71, 91, 111, 160, 361, 366, 368, 369, 375, 376], "lobe": [71, 203], "959": [71, 73], "plot_spm_multimodal_fac": [71, 73], "protocol": [72, 168, 218], "archi": 72, "meriaux": [72, 111, 218], "identif": [72, 94, 111, 168, 218], "databas": [72, 103, 111, 218, 223], "cognit": [72, 100, 103, 111, 155, 165, 168, 170, 175, 201, 210, 218, 221, 227, 228], "1186": 72, "1471": 72, "2202": 72, "hardcod": [72, 120, 148, 241], "trial_type_idx": 72, "condition_id": 72, "ones_lik": [72, 77], "export": [72, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380], "tsvfile": 72, "localizer_ev": 72, "plot_ev": [72, 139, 148, 164], "plot_write_events_fil": [72, 73], "auto_examples_04_glm_first_level": 73, "unpair": [74, 82, 110, 167, 218, 278, 338, 365, 368, 381], "sex": [75, 78, 167, 188, 220, 233, 243, 244, 245, 246, 248, 249], "juli": [75, 111, 119, 148, 162, 307], "mf": [75, 111, 220], "gm_mask": 75, "adequ": 75, "000000000000007": 75, "second_level": [75, 76, 77, 78, 79, 80, 81, 101, 145, 148, 167, 400], "secondlevelmodel": [75, 76, 77, 79, 80, 81, 101, 143, 148, 167, 265, 305, 400], "second_level_model": [75, 76, 79, 81, 101], "0x7f1354d34df0": 75, "secondlevelmodelsecondlevelmodel": [75, 77], "second_level_contrast": [75, 77, 79, 265, 278, 280, 400], "03g": 75, "40175": 75, "0x7f133d8c3ee0": 75, "icbm152_2009": 75, "1416": 75, "plot_oasi": [75, 82], "circular": 76, "rosenblatt": [76, 111, 260], "jd": 76, "fino": [76, 111, 260], "weeda": [76, 111, 260], "wd": 76, "solari": [76, 111, 260], "goeman": [76, 111, 260], "jj": 76, "nov": [76, 111, 207], "786": [76, 111, 260], "796": [76, 111, 260], "fetch_localizer_contrast": [76, 77, 79, 80, 105, 126, 148, 216, 217], "get_tmap": [76, 79, 80, 218], "second_level_input": [76, 79, 80, 101, 143, 145, 148, 278, 280], "p_val": [76, 77, 79], "p001_uncorrect": 76, "cluster_level_infer": [76, 143, 148, 167], "proportion_true_discoveries_img": [76, 260], "plot_proportion_activated_voxel": [76, 82], "cue": [77, 105, 217, 218], "variat": [77, 101, 105, 106, 111, 160, 161, 168, 227, 264, 280, 326], "pseudo": [77, 105, 250, 251, 257, 280, 282, 388], "brainomics_loc": [77, 105], "brainomics_data": [77, 105], "s01": [77, 105], "cmaps_leftauditoryclick": [77, 105], "tested_var": [77, 105, 106, 326], "float64": 77, "worth": 77, "aualiti": 77, "mask_quality_check": [77, 105], "contrast_map_filenam": [77, 105], "fluenci": 77, "math_img": [77, 79, 83, 85, 96, 107, 110, 124, 148, 174, 226, 295, 376, 381], "logarithm": [77, 79, 280], "equal": [77, 98, 136, 143, 145, 148, 158, 193, 198, 199, 200, 204, 243, 244, 245, 246, 248, 249, 253, 278, 295, 298, 318, 320, 321, 323, 383, 384, 386, 388], "fwer": [77, 81, 167, 168, 280], "non_parametric_infer": [77, 79, 120, 143, 145, 148, 167], "neg_log_pvals_permuted_ols_unmask": [77, 105], "model_intercept": [77, 79, 105, 280, 326], "two_sided_test": [77, 79, 102, 160, 280, 326], "cap": [77, 79], "1e3": 77, "plot_second_level_association_test": [77, 82], "characterist": [78, 155, 168, 307], "subjects_label": [78, 279], "extra": [78, 114, 157, 171, 172, 188, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 367, 369, 373, 419, 421], "extra_info_subject": 78, "make_second_level_design_matrix": [78, 167], "attent": [78, 272], "singular": [78, 255, 257, 258, 289, 403], "aberr": 78, "plot_second_level_design_matrix": [78, 82], "elicit": 79, "participant_id": 79, "tolist": [79, 100], "cidx": 79, "determin": [79, 94, 100, 101, 102, 107, 160, 162, 163, 182, 249, 268, 279, 303, 318, 319, 320, 321, 322, 323, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 368, 369, 371, 375, 376, 383, 387, 406], "p001_unc": [79, 101], "nonparametr": 79, "pend": 79, "reformat": 79, "assumpt": [79, 160, 165], "null": [79, 144, 148, 155, 160, 165, 168, 253, 280, 326], "out_dict": 79, "ideal": [79, 105, 152, 165, 171, 192], "permuted_least_squar": [79, 145, 148], "tend": [79, 100, 157, 162, 173], "logp_max_t": [79, 105, 280, 326], "logp_max_s": [79, 280, 326], "logp_max_mass": [79, 280, 326], "img_count": 79, "i_row": 79, "j_col": 79, "963": [79, 82], "plot_second_level_one_sample_test": [79, 82], "retinotop": 80, "distinct": [80, 100, 111, 162, 194, 220], "border": [80, 287, 318, 321, 327, 329, 330], "primari": [80, 265, 278, 400], "sample_vert": 80, "sample_horizont": 80, "s1": 80, "s2": 80, "condition_effect": 80, "doesn": [80, 103, 163], "subject_effect": 80, "assembl": [80, 112, 165], "unpaired_design_matrix": 80, "paired_design_matrix": 80, "ax_unpair": 80, "ax_pair": 80, "width_ratio": [80, 100], "second_level_model_unpair": 80, "second_level_model_pair": 80, "stat_maps_unpair": 80, "stat_maps_pair": 80, "992007221626409e": 80, "unsurprisingli": 80, "plot_second_level_two_sample_test": [80, 82], "bunch": [81, 113, 128, 148, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233], "oppos": [81, 174, 175], "fetch_localizer_calculation_task": [81, 106, 216, 218], "statstic": 81, "cmap_filenam": [81, 106], "trivial": 81, "thresholded_map": [81, 281], "two_sid": [81, 140, 143, 148, 281, 302, 399, 400], "thresholded_map1": 81, "threshold1": 81, "thresholded_map2": 81, "threshold2": 81, "3g": 81, "thresholded_map3": 81, "threshold3": 81, "raw": [81, 92, 101, 108, 140, 148, 155, 173, 175, 195, 243, 244, 245, 246, 250, 251, 312, 315, 376, 388, 398], "0x7f1353f1a820": 81, "0x7f134c36b0d0": 81, "fourth": [81, 84, 141, 148, 265, 280, 290, 291, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 359, 390, 402], "0x7f13542c07c0": 81, "plot_threshold": [81, 82], "auto_examples_05_glm_second_level": 82, "1415": 82, "4x4": [84, 174, 243, 244, 245, 246, 248, 249, 250, 251, 265, 278, 285, 295, 296, 298, 312, 315, 318, 320, 321, 323, 329, 330, 388], "millimet": [84, 160, 175, 243, 244, 245, 246, 247, 250, 251, 265, 278, 280, 300, 310, 311, 312, 313, 314, 315, 316, 317, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 388, 390, 392, 399], "entri": [84, 120, 148, 163, 243, 244, 245, 246, 255, 257, 258, 287, 378, 406], "3x3": [84, 174, 243, 244, 245, 246, 248, 249, 250, 251, 265, 278, 295, 298, 312, 315, 318, 320, 321, 323, 388], "closest": [84, 298], "union": [84, 321, 323, 324], "messag": [84, 123, 148, 171, 181, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 226, 227, 228, 229, 230, 231, 233, 243, 244, 245, 246, 247, 248, 249, 278, 280, 284, 295, 310, 311, 318, 319, 320, 322, 326, 388, 389, 390], "circl": 84, "diamond": 84, "source_affin": 84, "rotation_matrix": 84, "0mm": [84, 170], "img_in_mm_spac": 84, "target_affine_3x3": 84, "target_affine_4x4": 84, "img_3d_affin": 84, "img_4d_affin": 84, "target_affine_mm_space_offset_chang": 84, "img_3d_affine_in_mm_spac": 84, "img_4d_affine_in_mm_spac": 84, "anchor": 84, "plot_affine_transform": [84, 96], "goal": [85, 90, 93, 113, 162, 163], "result_img": [85, 173, 294], "img1": [85, 294], "img2": [85, 294], "848": [85, 96], "plot_compare_mean_imag": [85, 96], "connected_label_region": [86, 128, 148, 152, 174, 390, 392], "oper": [86, 89, 91, 94, 104, 113, 141, 148, 155, 162, 163, 165, 168, 172, 173, 175, 180, 181, 214, 242, 265, 278, 292, 294, 295, 318, 319, 320, 322, 323, 364, 408, 412, 421], "atlas_yeo_2011": 86, "atlas_yeo": 86, "thick_7": [86, 204], "0x7f134bc2a280": 86, "apart": [86, 128, 148, 152, 153, 162], "region_label": 86, "region_extractor": [86, 143, 148], "0x7f133bfcf0a0": 86, "difficult": [86, 149, 156, 161, 175], "eg": [86, 89, 130, 133, 139, 148, 149, 150, 155, 174, 175, 358, 359, 398], "broken": [86, 126, 134, 148, 160], "relabeled_yeo_atla": 86, "folder_path": 86, "connect_diag": [86, 391], "region_labels_not_diag": 86, "0x7f1354d26a30": 86, "100mm": 86, "region_labels_min_s": 86, "plot_extract_regions_labels_imag": [86, 96], "smith_atla": 87, "atlas_network": 87, "dmn_network": 87, "regions_indices_network3": 87, "blob": [87, 94, 154, 174, 200], "network3": 87, "982": [87, 96], "plot_extract_rois_smith_atla": [87, 96], "fetch_neurovault_auditory_computation_task": [88, 133, 148, 226], "foreground": [88, 153], "connected_region": [88, 121, 134, 148, 153, 174, 390, 391], "scoreatpercentil": [88, 103], "threshold_percentile_img": 88, "threshold_value_img": 88, "0x7f13545b75b0": 88, "regions_percentile_img": 88, "regions_value_img": 88, "plot_extract_rois_statistical_map": [88, 96], "li": [89, 111, 233], "homogen": [89, 152, 174, 193, 243, 244, 245, 246, 250, 251, 298, 312, 315, 388], "miyawaki_filenam": [89, 175], "miyawaki_mean_img": [89, 175], "0x7f134c59beb0": 89, "0x7f1345d1c520": 89, "mask_arg": [89, 92, 175, 250, 251, 312, 315, 388], "uniform": 89, "epi_filenam": [89, 175], "0x7f13536487f0": 89, "eros": [89, 168, 214, 236, 239, 318, 319, 320, 322, 323], "dilat": [89, 94, 168, 174, 214, 236, 239, 318, 319, 320, 322, 323], "layer": 89, "skull": [89, 213, 318, 319, 320, 322, 323], "lower_cutoff": [89, 320, 323], "upper_cutoff": [89, 320, 321, 323], "bright": 89, "hover": 89, "trended_data": 89, "detrended_data": 89, "plot_mask_comput": [89, 96, 175], "negative_stat_img": 90, "plot_negate_imag": [90, 96], "output_filepath": [91, 92, 175], "mni152templ": [91, 265, 278, 361, 374, 375, 376, 400], "ward": [91, 152, 168, 169, 313, 388], "pole": 91, "123176": 91, "insular": 91, "18728": 91, "superior": [91, 103, 161, 297], "40640": 91, "42528": 91, "inferior": 91, "par": 91, "triangulari": 91, "8824": 91, "operculari": 91, "11072": 91, "68584": 91, "37688": 91, "divis": 91, "4168": 91, "14640": 91, "6784": 91, "20200": 91, "temporooccipit": 91, "16032": 91, "5176": 91, "15536": 91, "11760": 91, "55160": 91, "lobul": 91, "23264": 91, "supramargin": 91, "13936": 91, "18072": 91, "angular": 91, "19272": 91, "78232": 91, "32712": 91, "intracalcarin": 91, "11208": 91, "7808": 91, "juxtaposit": 91, "formerli": [91, 133, 148], "supplementari": [91, 113, 160], "11872": 91, "subcallos": 91, "9136": 91, "paracingul": 91, "23552": 91, "20736": 91, "19296": 91, "precun": 91, "44984": 91, "cuneal": 91, "9816": 91, "orbit": 91, "25184": 91, "parahippocamp": 91, "9984": 91, "5680": [91, 102], "lingual": 91, "27048": 91, "fusiform": [91, 160], "4880": [91, 102], "12752": 91, "11752": 91, "14448": 91, "operculum": 91, "5496": 91, "central": 91, "15088": 91, "8952": 91, "planum": [91, 103], "polar": 91, "5992": 91, "heschl": 91, "h1": 91, "h2": 91, "4832": 91, "temporal": [91, 103], "7616": 91, "supracalcarin": 91, "2088": 91, "42208": 91, "quot": 91, "niftilablesmask": 91, "n_time_point": [91, 92, 273, 274], "add_subplot": 91, "label_idx": 91, "plot_nifti_labels_simpl": [91, 96], "0x7f133ea99af0": 92, "components_mask": [92, 104], "revers": [92, 129, 136, 148], "plot_nifti_simpl": [92, 96, 175], "load_mni152_templ": [93, 142, 148, 213, 214, 235, 237, 240, 282, 285, 290, 294, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 406], "resampled_stat_img": 93, "tmap_img": 93, "original_shap": 93, "original_affin": 93, "resampled_shap": 93, "resampled_affin": 93, "template_img": 93, "template_shap": 93, "template_affin": 93, "plot_resample_to_templ": [93, 96], "allevi": 94, "curs": 94, "aris": [94, 111, 165, 306, 307], "context": [94, 100, 111, 163, 168], "chain": [94, 174, 180, 181], "clear": [94, 114, 120, 136, 145, 148, 163, 243, 244, 245, 246, 250, 251, 312, 315, 388], "student": [94, 165, 174, 253, 421], "haxby_label": 94, "txt": [94, 227], "especi": [94, 134, 143, 148, 149, 155, 173, 384, 421], "Such": [94, 149, 303], "4mm": [94, 153, 160, 209, 251], "12mm": 94, "anisotropi": 94, "indent": 94, "analog": 94, "0x7f1354912a60": 94, "brief": [94, 163, 165], "motiv": 94, "realm": 94, "ttest_ind": [94, 174], "establish": [94, 161, 163], "log_p_valu": 94, "log_p_values_img": 94, "0x7f132fbd9c40": 94, "extend": [94, 139, 144, 148, 165, 175, 298], "annot": [94, 112, 128, 139, 148, 200, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 363, 366, 368, 369, 372, 374, 375, 376, 377, 378, 379, 380, 383, 386, 404, 419, 421], "0x7f134aa84520": 94, "intersect": [94, 174, 321, 323, 324, 394], "investig": [94, 98, 154, 171, 247], "bin_p_valu": 94, "boolean": [94, 114, 140, 145, 148, 186, 188, 212, 218, 227, 247, 250, 251, 265, 284, 296, 306, 309, 318, 319, 320, 322, 323, 361, 366, 368, 370, 375, 378, 383, 396, 397, 402], "logic": [94, 114, 163, 242], "logical_and": [94, 102], "jargon": 94, "AND": [94, 114], "conjunct": 94, "bin_p_values_and_vt": 94, "otherwis": [94, 102, 103, 133, 148, 165, 171, 186, 188, 194, 195, 206, 207, 208, 216, 217, 218, 220, 227, 250, 251, 268, 293, 297, 306, 307, 374, 383, 384, 386, 390, 391, 406], "bin_p_values_and_vt_img": 94, "06_manipulating_imag": 94, "plot_roi_extract": [94, 96], "0x7f13553ecbb0": 94, "consolid": [94, 144, 148], "toward": [94, 143, 148, 180, 293, 310, 311, 312, 313, 314, 315, 316, 421], "morpholog": [94, 174, 318, 319, 320, 322, 323], "forget": [94, 163, 419], "hole": 94, "binary_dil": [94, 174, 318, 319, 320, 322, 323], "dil_bin_p_values_and_vt": 94, "dil_bin_p_values_and_vt_img": 94, "0x7f1353d001c0": 94, "immedi": [94, 307], "n_label": [94, 358], "first_roi_data": 94, "second_roi_data": 94, "first_roi_img": 94, "second_roi_img": 94, "0x7f135495a9a0": 94, "suit": [94, 100, 150, 156, 170, 192], "condition_nam": [94, 100], "n_cond_img": 94, "n_cond": 94, "gather": [94, 163, 165], "cond": [94, 100, 267], "cond_map": 94, "mask_data": 94, "mask_atla": 94, "2250": [94, 96, 102], "lose": [95, 419], "first_epi_fil": 95, "mean_func": 95, "20mm": [95, 170], "smoothed_img": [95, 173], "imm": 95, "plot_smooth_mean_imag": [95, 96], "auto_examples_06_manipulating_imag": 96, "764": 96, "829": 96, "multivari": [97, 109, 110, 111, 154, 168, 169, 170, 191, 209, 290, 295, 309, 315, 376, 381, 420], "massiv": [97, 109, 110, 159, 212, 217, 218, 288, 290, 295, 309, 315, 326, 354, 368, 376, 381, 413, 421], "bridg": 98, "integr": [98, 121, 136, 148, 163, 174, 312], "usecas": [98, 152, 156, 158, 163], "pointer": [98, 158], "unclear": 98, "n_timepoint": [98, 155, 158], "meaning": [98, 100, 123, 133, 136, 148, 163, 165, 283, 402], "stipul": 98, "processor": [98, 158], "dummyclassifi": [98, 99, 141, 148, 158, 243, 244, 245, 246], "pure": [98, 102, 248, 249], "slower": [98, 158, 162, 298], "permutation_test_scor": [98, 158], "null_cv_scor": 98, "selectpercentil": [98, 128, 148], "anova_svc": 98, "return_estim": 98, "fitted_pipelin": 98, "test_scor": 98, "801": 98, "first_pipelin": 98, "svc_coef": 98, "invert": [98, 104, 139, 148, 162, 180, 255, 257, 258], "full_coef": 98, "0x7f1354a809a0": 98, "fisher": [98, 111, 253], "lda": 98, "discriminant_analysi": 98, "lineardiscriminantanalysi": 98, "anova_lda": 98, "n_condit": 98, "8009": 98, "principl": [98, 152, 155, 159, 161, 168, 247, 421], "fanci": 98, "n_features_to_select": 98, "rfe_svc": 98, "awar": [98, 182, 401], "plot_advanced_decoding_scikit": [98, 109], "gridsearchcv": [99, 158], "pipe": [99, 163], "param_grid": [99, 156, 243, 244, 245, 246], "most_frequ": 99, "connectivity__kind": 99, "labelencod": 99, "pheno": 99, "refit": 99, "cv_results_": 99, "mean_test_scor": 99, "std_test_scor": 99, "candid": 99, "param_connectivity__kind": 99, "plot_age_group_prediction_cross_v": [99, 109, 136, 148], "substitut": [100, 398], "psychophysiolog": 100, "ppi": 100, "cisler": [100, 111], "everyth": [100, 171], "systemat": [100, 111, 123, 148, 218, 306, 307], "incorpor": [100, 154], "literatur": [100, 150, 188, 289, 307, 403], "mention": [100, 120, 148, 163, 164, 165], "appropri": [100, 111, 163, 175, 190, 209, 213, 238, 265, 267, 272, 391], "abdulrahman": [100, 111], "decis": [100, 111, 156, 160, 243, 244, 245, 246, 248, 249, 253], "inter": [100, 105, 150, 174, 175, 321, 323], "mumford": [100, 111, 155, 170, 210, 228], "primarili": 100, "fetch_language_localizer_demo_dataset": [100, 101, 108, 164], "events_df": 100, "languageloc": [100, 101, 108], "img_filt": [100, 101, 108, 268], "desc": [100, 101, 108, 268, 306, 307], "preproc": [100, 101, 108, 268], "standard_glm": 100, "fmri_fil": 100, "glm_paramet": 100, "get_param": [100, 180, 181, 182, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 278, 309, 310, 311, 312, 313, 314, 315, 316, 387, 388, 389, 390], "01_task": [100, 101, 108], "languagelocalizer_desc": [100, 101, 108], "highlight": [100, 171], "lsa_events_df": 100, "condition_count": 100, "i_trial": 100, "iterrow": 100, "trial_condit": 100, "__": [100, 180, 181, 182, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 278, 309, 310, 311, 312, 313, 314, 315, 316, 387, 388, 389, 390], "shouldn": [100, 171, 190], "trial_nam": 100, "lsa_glm": 100, "lsa_beta_map": 100, "trialwise_condit": 100, "beta_map": 100, "relabel": [100, 391], "lss_transform": 100, "row_numb": 100, "compliant": [100, 163, 175, 228, 241, 307], "trial_type_seri": 100, "trial_type_list": 100, "trial_numb": 100, "left_001": 100, "track": [100, 103, 162, 171], "lss_beta_map": 100, "lss_design_matric": 100, "lss_events_df": 100, "lss_glm": 100, "dm_titl": 100, "i_ax": 100, "though": [100, 104, 155, 256, 377, 401], "vastli": 100, "quick": [100, 170], "neurosynth": [100, 103, 112, 223, 225, 421], "lang_seed_beta_seri": 100, "lang_beta_seri": 100, "lang_corr": 100, "language_connectivity_img": 100, "string_seed_beta_seri": 100, "string_beta_seri": 100, "string_corr": 100, "string_connectivity_img": 100, "josh": [100, 111], "keith": [100, 111], "bush": [100, 111], "scott": [100, 111, 208], "steel": [100, 111], "1052": [100, 111], "jess": [100, 111], "rissman": [100, 111], "adam": [100, 111], "gazzalei": [100, 111], "esposito": [100, 111], "stage": [100, 111, 170], "763": [100, 111], "2004": [100, 111, 194, 257, 258], "jeanett": [100, 111, 170], "benjamin": [100, 111, 208], "turner": [100, 111, 191, 201], "gregori": [100, 111], "ashbi": [100, 111], "poldrack": [100, 111, 114, 170, 210, 221, 223, 225, 228], "deconvolv": [100, 111, 155], "multivoxel": [100, 111, 155, 221], "2636": [100, 111], "2643": [100, 111, 140, 148], "spatiotempor": [100, 111], "rapid": [100, 111], "1429": [100, 111], "1438": [100, 111], "hunar": [100, 111], "richard": [100, 111], "plot_beta_seri": [100, 109], "consult": 101, "simplifi": [101, 108, 113, 126, 136, 144, 148, 175, 216, 217], "basenam": 101, "rotx": 101, "roti": 101, "rotz": 101, "conson": 101, "value_count": 101, "scalar": [101, 160, 175, 252, 253, 255, 256, 257, 258, 300, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 363, 372], "model_and_arg": 101, "midx": 101, "8mm": [101, 265, 278, 400], "first_level_contrast": [101, 143, 148, 278, 280], "plot_bids_analysi": [101, 109], "behav": [102, 265, 267, 272], "exchang": [102, 104, 188], "winkler": [102, 111, 220, 326], "anderson": [102, 111, 188, 220, 326], "robinson": [102, 111, 220, 326], "australian": [102, 111, 326], "zealand": [102, 111, 326], "journal": [102, 111, 160, 200, 201, 204, 227, 326], "avesbiodiv": 102, "mncn": 102, "csic": 102, "estadistica": 102, "permut2": 102, "feb": 102, "conditions_encod": 102, "func_reduc": 102, "n_session": 102, "grouped_fmri_mask": 102, "grouped_conditions_encod": 102, "session_mask": 102, "session_house_mask": 102, "session_face_mask": 102, "ol": [102, 105, 255, 257, 258, 265, 274, 326, 413], "tracepvals_bonferroni": 102, "neg_log_pvals_bonferroni": 102, "neg_log_pvals_bonferroni_unmask": 102, "1143": [102, 105, 106], "dataconversionwarn": [102, 105, 106], "mean_fmri_img": 102, "neg_log_pvals_bonferroni_data": 102, "771": [102, 109], "949": 102, "plot_haxby_mass_univari": [102, 109], "fetch_neurovault": [103, 107, 114, 129, 136, 140, 148, 224, 225, 226], "licens": [103, 107, 193], "port": 103, "filo": 103, "neurovault_analysi": 103, "load_mni152_brain_mask": [103, 126, 142, 148, 213], "nv_data": [103, 107], "max_imag": [103, 107, 114, 223], "fetch_neurosynth_word": [103, 114, 223, 225], "term_weight": 103, "word_frequ": [103, 114, 223, 225], "vocabulari": [103, 114, 168, 170, 223, 225], "total_scor": 103, "ntop": 103, "term_idx": 103, "1307": 103, "insula": 103, "nreshap": 103, "deprecationwarn": [103, 309, 310, 311, 312, 313, 314, 315, 316, 390], "fail": [103, 120, 136, 145, 148, 162, 163, 223, 225, 390], "failur": [103, 128, 148, 163, 320], "is_us": 103, "image_path": 103, "images_meta": [103, 107, 114, 223, 224, 225, 226], "collection_id": [103, 107, 114, 223, 225], "fast_ica": 103, "ica_map": 103, "term_weights_for_compon": 103, "components_": [103, 131, 148, 250, 251], "ic_map": 103, "ic_term": 103, "flip": [103, 127, 148, 192], "ic_threshold": 103, "ic_img": 103, "important_term": 103, "neurolog": [103, 165, 168, 190], "1706": [103, 109], "plot_ica_neurovault": [103, 109], "advis": [104, 163, 173, 214, 320, 388], "unsupervis": [104, 168, 250, 251, 265, 278, 387, 389], "latent": [104, 168], "sens": [104, 155, 170, 243, 244, 245, 246, 255, 257, 258, 330], "component_img": 104, "plot_ica_resting_st": [104, 109], "pvals_anova": [105, 106], "neg_log_pvals_anova": [105, 106], "neg_log_pvals_anova_unmask": [105, 106], "fwe": [105, 326], "tfce": [105, 120, 145, 148, 168, 280, 326], "ols_output": 105, "neg_log_pvals_tfce_unmask": 105, "logp_max_tfc": [105, 280, 326], "7152": 105, "762413024902": 105, "34057331085205": 105, "8938488960266": 105, "4207448164622": 105, "95595645904541": 105, "17479252815247": 105, "56799610455832": 105, "0699109349932": 105, "66521525382996": 105, "29115147060818": 105, "99406409263611": 105, "73478490656073": 105, "51110521952311": 105, "27786071483905": 105, "056088072913035": 105, "85352365175883": 105, "674423098564148": 105, "49971085436204": 105, "327133470111422": 105, "162726715991371": 105, "amax": 105, "images_to_plot": 105, "i_col": 105, "new_titl": 105, "sig": 105, "plot_localizer_mass_univariate_method": [105, 106, 109], "masked_pv": 106, "753": [106, 109], "plot_localizer_simple_analysi": [106, 109], "fetch_neurovault_id": [107, 114, 129, 148, 223, 224, 226], "stop_go_image_id": 107, "3041": 107, "3042": [107, 143, 148], "2676": 107, "2675": 107, "2818": 107, "2834": 107, "queri": [107, 223, 225, 242], "cognitive_paradigm_cogatla": 107, "contrast_definit": 107, "succ": 107, "map_typ": [107, 223], "image_id": [107, 114, 225], "collections_meta": [107, 114, 223, 224, 225, 226], "nplot": 107, "absolute_path": 107, "t_to_z": 107, "t_score": 107, "deg_of_freedom": 107, "sf": 107, "z_valu": 107, "mean_map": 107, "z_img": 107, "current_collect": 107, "ncomput": 107, "this_meta": 107, "ncollect": 107, "t_img": 107, "number_of_subject": 107, "meta_analysis_img": 107, "sqrt": [107, 126, 148, 186, 187, 257, 258], "822": [107, 109, 121, 148], "plot_neurovault_meta_analysi": [107, 109], "downsampl": [108, 153, 174, 209, 362], "10k": 108, "sidecar": 108, "json_fil": 108, "repetitiontim": 108, "z_scores_right": 108, "z_scores_left": 108, "contrast_valu": 108, "accumul": [108, 419], "z_score_left": 108, "az_scores_right": 108, "popul": [108, 111, 149, 164, 181, 220], "ttest_1samp": 108, "t_left": 108, "pval_left": 108, "t_right": 108, "pval_right": 108, "z_val_left": 108, "z_val_right": 108, "plot_surface_bids_analysi": [108, 109], "auto_examples_07_advanc": 109, "1209": 109, "948": 109, "permiss": [110, 136, 148], "auto_examples_python": 110, "auto_examples_jupyt": 110, "arrang": [111, 134, 148, 337, 339, 342, 356, 361, 366, 369, 374, 375, 376, 419], "alphabet": [111, 136, 148, 173], "bib": 111, "dimitri": [111, 120, 121, 133, 148, 162, 163, 181, 184, 218, 390], "samara": [111, 162, 181, 184, 390], "medic": [111, 153, 161, 180, 198, 213, 390], "septemb": [111, 127, 142, 148, 390], "01093944": [111, 390], "elena": [111, 191], "erik": [111, 191], "erhardt": [111, 191], "eswar": [111, 191], "damaraju": [111, 191], "william": [111, 191, 220, 233, 252, 256], "gruner": [111, 191], "judith": [111, 191], "segal": [111, 191], "roger": [111, 191, 232], "silva": [111, 191], "havlicek": [111, 191], "sriniva": [111, 191], "rachakonda": [111, 191], "jill": [111, 191, 194, 220], "fri": [111, 191], "ravi": [111, 191], "kalyanam": [111, 191], "andrew": [111, 188, 191, 193, 213], "arvind": [111, 191], "caprihan": [111, 191], "jessica": [111, 191, 201, 206, 207], "tom": [111, 141, 148, 191], "eichel": [111, 191], "steven": [111, 191, 206, 207, 208, 306, 307], "adelsheim": [111, 191], "angela": [111, 191, 201], "bryan": [111, 191], "juan": [111, 191], "bustillo": [111, 191], "clark": [111, 120, 148, 160, 191], "sarah": [111, 191], "feldstein": [111, 191], "ew": [111, 191], "francesca": [111, 191], "filbei": [111, 191], "corei": [111, 191], "ford": [111, 191], "kent": [111, 191], "hutchison": [111, 191], "rex": [111, 191], "jung": [111, 191], "kiehl": [111, 191], "piyadasa": [111, 191], "kodituwakku": [111, 191], "yuko": [111, 191], "komesu": [111, 191], "mayer": [111, 191], "godfrei": [111, 191], "pearlson": [111, 191], "john": [111, 130, 148, 160, 162, 191, 206, 227, 233, 326], "phillip": [111, 191], "joseph": [111, 191, 206], "sadek": [111, 191], "ursina": [111, 191], "teuscher": [111, 191], "robert": [111, 120, 141, 148, 162, 191, 213, 238], "vinc": [111, 191], "calhoun": [111, 191, 233], "frontiersin": [111, 188, 191, 223, 225, 233], "fnsy": [111, 191], "00002": [111, 191], "marti": [111, 203, 326], "onlinelibrari": [111, 193, 203, 232, 283, 326, 402], "wilei": [111, 193, 203, 232, 257, 258, 283, 326, 402], "1111": [111, 326], "1467": [111, 326], "842x": [111, 326], "00156": [111, 326], "arxiv": [111, 160, 162, 181, 184, 193, 194, 200, 201, 203, 204, 206, 212, 220, 227, 232, 283, 326, 402], "luca": [111, 161], "baldassarr": [111, 161], "janaina": [111, 161], "mourao": [111, 161, 170], "miranda": [111, 161, 170], "massimiliano": [111, 161], "pontil": [111, 161], "intern": [111, 161, 162, 163, 165, 182, 192, 251, 292, 294], "workshop": [111, 161, 192], "www0": [111, 161], "ucl": [111, 161, 230, 231], "ac": [111, 161, 201, 213, 230, 231, 238], "uk": [111, 161, 201, 230, 231], "staff": [111, 161], "neurosparse_prni": [111, 161], "1109": [111, 161, 192, 389, 395], "prni": [111, 161, 192], "yashar": [111, 306, 307, 403], "behzadi": [111, 289, 306, 307, 403], "khale": [111, 306, 307, 403], "restom": [111, 306, 307, 403], "joi": [111, 306, 307, 403], "liau": [111, 306, 307, 403], "liu": [111, 200, 204, 306, 307, 403], "perfus": [111, 306, 307, 403], "sciencedirect": [111, 157, 160, 161, 190, 192, 195, 198, 202, 208, 213, 218, 221, 222, 238, 245, 246, 306, 307, 326, 362, 403], "pii": [111, 157, 160, 161, 190, 192, 195, 198, 202, 208, 213, 218, 221, 222, 238, 245, 246, 306, 307, 326, 362, 403], "s1053811907003837": [111, 306, 307, 403], "mine": [111, 170, 192], "hierarchi": [111, 192], "pedro": [111, 192], "rosa": [111, 192], "neto": [111, 192], "lyttelton": [111, 192], "habib": [111, 192], "benali": [111, 192], "alan": [111, 192, 213, 238], "evan": [111, 141, 148, 192, 200, 203, 213, 238], "bootstrap": [111, 192], "1126": [111, 192, 206, 212], "1139": [111, 192], "s1053811910002697": [111, 192], "lorrain": [111, 160], "tyler": [111, 160], "semant": [111, 141, 143, 148, 160], "perirhin": [111, 160], "4766": [111, 160], "4775": [111, 160], "jneurosci": [111, 160], "1523": [111, 130, 148, 160], "2828": [111, 160], "loui": [111, 213, 238], "collin": [111, 190, 213, 238], "zijdenbo": [111, 213], "wim": [111, 213], "baar": [111, 213], "\u00e9": [111, 213, 218], "anim": [111, 213], "insect": [111, 213], "attila": [111, 213], "kuba": [111, 213], "\u0161": [111, 213], "\u00e1": [111, 213], "amal": [111, 213], "todd": [111, 160, 213], "pokropek": [111, 213], "editor": [111, 180, 213], "berlin": [111, 180, 198, 213], "heidelberg": [111, 180, 198, 213], "springer": [111, 180, 198, 213], "cameron": [111, 193, 198, 233], "jame": [111, 193, 212, 257, 258], "paul": [111, 120, 148, 193, 220], "holtzheim": [111, 193], "iii": [111, 193], "xiaop": [111, 193], "hu": [111, 193], "helen": [111, 193], "mayberg": [111, 193], "1914": [111, 193], "1928": [111, 193], "1002": [111, 193, 203, 232, 283, 402], "hbm": [111, 193, 283, 402], "21333": [111, 193], "kamalak": [111, 195], "ga\u00ebl": [111, 157, 195, 198, 245, 246], "antonia": [111, 195], "machlouzarid": [111, 195], "shalit": [111, 195], "krzysztof": [111, 195, 223, 225], "demian": [111, 118, 133, 148, 195], "wassermann": [111, 118, 133, 148, 195], "117126": [111, 195], "s1053811920306121": [111, 195], "davidson": [111, 257, 258], "mackinnon": [111, 257, 258], "econometr": [111, 252, 256, 257, 258], "theori": [111, 168, 221, 257, 258], "univ": [111, 257, 258], "york": [111, 257, 258], "ny": [111, 257, 258], "isbn": [111, 252, 256, 257, 258], "512372": [111, 257, 258], "gso": [111, 257, 258], "gbv": [111, 257, 258], "de": [111, 133, 136, 148, 257, 258, 273], "cmd": [111, 257, 258], "srcha": [111, 257, 258], "srt": [111, 257, 258], "yop": [111, 257, 258], "ikt": [111, 257, 258], "trm": [111, 257, 258], "ppn": [111, 257, 258], "393847152": [111, 257, 258], "sourceid": [111, 257, 258], "fbw_bibsonomi": [111, 257, 258], "am": [111, 194], "halgren": [111, 194, 202], "cerebr": [111, 165, 194, 200, 204, 206, 218, 220], "supplement": [111, 194, 213, 238], "s151": [111, 194], "s1053": [111, 194, 213, 238], "8119": [111, 194, 213, 238], "71561": [111, 194], "christoph": [111, 130, 133, 148, 194, 202], "bruce": [111, 194, 200, 202, 204, 232], "ander": [111, 194, 202, 232], "eric": [111, 130, 133, 134, 136, 148, 194, 202, 206], "s1053811910008542": [111, 202], "ga": [111, 161], "\u00eb": [111, 161], "graphnet": [111, 161], "stanford": [111, 161], "june": [111, 126, 129, 132, 141, 148, 161, 162], "2015": [111, 114, 115, 116, 117, 118, 119, 121, 122, 148, 161, 181, 184, 198, 218, 220, 223, 225, 306, 307], "01147731": [111, 161], "\u00fc": [111, 161], "bingen": [111, 161], "germani": [111, 161], "00991743": [111, 161], "nico": [111, 206, 208], "dosenbach": [111, 124, 148, 206, 208], "binyam": [111, 206], "alexand": [111, 188, 200, 206, 207], "cohen": [111, 206, 207], "damien": [111, 206], "fair": [111, 154, 206], "church": [111, 206, 207], "nelson": [111, 206, 207], "gagan": [111, 206, 207], "wig": [111, 206, 207], "alecia": [111, 206, 207], "vogel": [111, 136, 148, 206, 207], "christina": [111, 206], "lessov": [111, 206], "schlaggar": [111, 206, 207, 208, 306, 307], "kelli": [111, 206, 207, 213, 233, 238, 306, 307], "ann": [111, 206, 207], "barn": [111, 206, 207, 306, 307], "dubi": [111, 206], "feczko": [111, 206], "rebecca": [111, 206, 209], "coalson": [111, 206], "pruett": [111, 206], "deanna": [111, 206, 208, 220], "barch": [111, 206, 220], "petersen": [111, 206, 207, 208, 306, 307], "bradlei": [111, 206, 207, 208, 220, 306, 307], "5997": [111, 206], "sciencemag": [111, 206, 212], "1194144": [111, 206], "duchi": [111, 162], "stephen": [111, 162, 201, 220, 233, 280, 326], "gould": [111, 162], "daphn": [111, 162], "koller": [111, 162], "subgradi": [111, 162], "1206": [111, 162], "3249": [111, 162], "joset": [111, 160], "etzel": [111, 160], "jeffrei": [111, 160, 188], "zack": [111, 160], "braver": [111, 160], "promis": [111, 160], "pitfal": [111, 155, 160], "s1053811913002917": [111, 160], "filippini": [111, 201, 220], "macintosh": [111, 220], "morgan": [111, 220], "hough": [111, 220], "gui": [111, 220], "goodwin": [111, 220], "giovanni": [111, 220], "frisoni": [111, 220], "matthew": [111, 220, 233, 326], "christian": [111, 130, 133, 148, 201, 220, 306, 307], "beckmann": [111, 201, 220, 306, 307], "clare": [111, 201, 220, 233], "mackai": [111, 201, 220], "carrier": [111, 220], "apo": [111, 220], "\u03b54": [111, 220], "allel": [111, 220], "proceed": [111, 160, 164, 201, 220, 247, 307], "nation": [111, 160, 201, 220, 247, 307], "academi": [111, 160, 201, 220, 247, 307], "7209": [111, 220], "7214": [111, 220], "pna": [111, 160, 201, 220, 307], "1073": [111, 160, 201, 220, 307], "0811879106": [111, 220], "sereno": [111, 232], "tootel": [111, 232], "intersubject": [111, 232], "28sici": [111, 203, 232], "291097": [111, 203, 232], "0193": [111, 203, 232], "281999": [111, 232], "3a4": [111, 203, 232], "3c272": [111, 232], "3aaid": [111, 203, 232], "hbm10": [111, 232], "3e3": [111, 203, 232], "3b2": [111, 203, 232], "sici": [111, 203, 232], "1097": [111, 203, 232], "aid": [111, 203, 232], "van": [111, 114, 194, 220, 223, 225, 306, 307], "der": [111, 194], "kouw": [111, 194], "florent": [111, 194], "s\u00e9gonn": [111, 194], "salat": [111, 194], "evelina": [111, 194], "busa": [111, 194], "larri": [111, 194], "seidman": [111, 194], "goldstein": [111, 194], "kennedi": [111, 194], "vern": [111, 194], "cavi": [111, 194], "niko": [111, 194], "makri": [111, 194], "rosen": [111, 194], "bhg087": [111, 194], "academ": [111, 194, 200, 220], "oup": [111, 194, 200, 220], "1193353": [111, 194], "boyd": 111, "edinburgh": 111, "fletcher": [111, 188], "sarang": 111, "joshi": 111, "riemannian": 111, "diffus": [111, 155, 168], "tensor": 111, "s0165168406001691": 111, "sigpro": 111, "2005": [111, 307], "vladimir": [111, 213, 238], "fonov": [111, 213, 238], "botteron": [111, 213, 238], "almli": [111, 213, 238], "mckinstri": [111, 213, 238], "unbias": [111, 155, 213, 238], "pediatr": [111, 213, 238], "s1053811910010062": [111, 213, 238], "rc": [111, 213, 238], "cr": [111, 213, 238], "dl": [111, 213, 238], "nonlinear": [111, 213, 238], "birth": [111, 213, 238], "adulthood": [111, 213, 238], "s102": [111, 213, 238], "70884": [111, 213, 238], "fox": [111, 201, 203, 307], "snyder": [111, 306, 307], "justin": [111, 307], "maurizio": [111, 307], "corbetta": [111, 307], "essen": [111, 114, 220, 223, 225, 307], "marcu": [111, 160, 220, 227, 307], "raichl": [111, 307], "9673": [111, 307], "9678": [111, 307], "0504136102": [111, 307], "freedman": [111, 326], "lane": [111, 145, 148, 326], "nonstochast": [111, 326], "busi": [111, 326], "econom": [111, 326], "1983": [111, 326], "tandfonlin": [111, 326], "07350015": [111, 326], "10509354": [111, 326], "holm": [111, 200, 283, 402], "worslei": [111, 283, 402], "frith": [111, 283, 402], "frackowiak": [111, 283, 402], "1994": [111, 283, 402], "460020402": [111, 283, 402], "gabriel": [111, 223, 225], "rivera": [111, 114, 223, 225], "yannick": [111, 115, 148, 157, 218, 223, 225, 245, 246], "schwarz": [111, 223, 225], "satrajit": [111, 223, 225], "ghosh": [111, 114, 223, 225], "camil": [111, 223, 225], "maumet": [111, 114, 223, 225], "vanessa": [111, 223, 225], "sochat": [111, 114, 223, 225], "nichol": [111, 114, 168, 170, 220, 223, 225, 280, 320, 326], "tal": [111, 114, 175, 223, 225, 316], "yarkoni": [111, 114, 223, 225], "marguli": [111, 114, 223, 225], "neuroinformat": [111, 223, 225], "fninf": [111, 114, 223, 225], "00008": [111, 114, 223, 225], "philadelphia": [111, 161], "00839984": [111, 161], "educ": [111, 220, 227, 252, 256, 383], "fifth": [111, 214, 252, 256], "edit": [111, 141, 148, 171, 252, 256], "066189": [111, 252, 256], "stern": [111, 252, 256], "nyu": [111, 252, 256], "edu": [111, 201, 204, 227, 252, 256], "wgreen": [111, 252, 256], "econometricanalysi": [111, 252, 256], "htm": [111, 252, 256], "logan": [111, 161], "grosenick": [111, 161], "brad": [111, 161], "klingenberg": [111, 161], "kiefer": [111, 161], "katovich": [111, 161], "brian": [111, 161, 233, 283, 402], "knutson": [111, 161], "s1053811912012487": [111, 161], "ida": [111, 212], "gobbini": [111, 212], "maura": [111, 212], "furei": [111, 212], "alumit": [111, 212], "ishai": [111, 212], "jennif": [111, 212], "schouten": [111, 212], "pietro": [111, 212], "pietrini": [111, 212], "5539": [111, 212], "1063736": [111, 212], "honorio": [111, 162, 181, 184], "tommi": [111, 181, 184], "jaakkola": [111, 181, 184], "1207": [111, 162, 181, 184], "4255": [111, 162, 181, 184], "jona": [111, 130, 148, 389, 395], "rena": [111, 136, 148, 152, 157, 168, 169, 245, 246, 388, 395], "tran": [111, 190, 389, 395], "anal": [111, 389, 395], "mach": [111, 389, 395], "intel": [111, 389, 395], "tpami": [111, 389, 395], "2815524": [111, 389, 395], "schwartz": [111, 114, 115, 148, 157, 218, 245, 246], "scalabl": [111, 157, 245, 246], "s1053811917308182": [111, 157, 245, 246], "koji": [111, 221], "complementari": [111, 221], "neuropsychologia": [111, 221], "s0028393211005070": [111, 221], "thorsten": [111, 160], "kahnt": [111, 160], "grueschow": [111, 160], "speck": [111, 160], "dylan": [111, 160, 233], "perceptu": [111, 160], "s0896627311002960": [111, 160], "nikolau": [111, 160, 247], "kriegeskort": [111, 160, 170, 247], "rainer": [111, 160, 247], "goebel": [111, 160, 247], "peter": [111, 160, 201, 203, 247], "bandettini": [111, 160, 247], "3863": [111, 160, 247], "3868": [111, 160, 247], "0600244103": [111, 160], "laird": [111, 201], "mickl": [111, 201], "kimberli": [111, 201], "rai": [111, 201], "rees": [111, 201], "mckai": [111, 201], "glahn": [111, 201], "4022": [111, 201], "4037": [111, 201], "1162": [111, 201, 227], "jocn": [111, 201, 227], "_a": [111, 201], "_00077": [111, 201], "mit": [111, 200, 201, 227], "1777164": [111, 201], "jocn_a_00077": [111, 201], "lancast": [111, 203], "rainei": [111, 203], "summerlin": [111, 203], "freita": [111, 203], "toga": [111, 203], "mazziotta": [111, 203], "autom": [111, 114, 190, 203, 223, 225], "preliminari": [111, 203], "forward": [111, 203], "1997": [111, 136, 148, 203], "281997": [111, 203], "3c238": [111, 203], "hbm6": [111, 203], "jack": [111, 156, 203], "woldorff": [111, 203], "lawrenc": [111, 203], "parson": [111, 203], "mario": [111, 203], "liotti": [111, 203], "catarina": [111, 203], "laci": [111, 203], "kochunov": [111, 203], "dan": [111, 133, 136, 148, 203], "nickerson": [111, 203], "shawn": [111, 203], "mikiten": [111, 203], "talairach": [111, 130, 148, 167, 203], "28200007": [111, 203], "3a3": [111, 203], "3c120": [111, 203], "hbm30": [111, 203], "200007": [111, 203], "lindquist": [111, 133, 148, 283, 402], "stephan": [111, 283, 402], "geuter": [111, 283, 402], "tor": [111, 114, 223, 225, 283, 402], "wager": [111, 114, 223, 225, 283, 402], "caffo": [111, 283, 402], "modular": [111, 163, 283, 402], "reintroduc": [111, 283, 402], "biorxiv": [111, 283, 402], "407676": [111, 283, 402], "1101": [111, 283, 402], "traci": [111, 227], "jami": [111, 227], "parker": [111, 227], "csernanski": [111, 227], "morri": [111, 227], "randi": [111, 200, 204, 227], "buckner": [111, 200, 204, 227], "nondement": [111, 227], "dement": [111, 227], "1498": [111, 227], "1507": [111, 227], "1756878": [111, 227], "1328": [111, 161], "februari": [111, 115, 116, 123, 124, 128, 138, 148, 161], "00563468": [111, 161], "tmi": [111, 161], "2113378": [111, 161], "yoichi": [111, 222], "hajim": [111, 222], "okito": [111, 222], "masa": [111, 222], "aki": [111, 133, 148, 222], "yusuk": [111, 222], "hiroki": [111, 222], "norihiro": [111, 222], "sadato": [111, 222], "yukiyasu": [111, 222], "s0896627308009586": [111, 222], "dougla": [111, 257, 258], "montgomeri": [111, 257, 258], "peck": [111, 257, 258], "geoffrei": [111, 257, 258], "vine": [111, 257, 258], "ed": [111, 257, 258], "son": [111, 257, 258], "0471754951": [111, 257, 258], "naselari": [111, 156], "kendrick": [111, 156], "kai": [111, 156], "shinji": [111, 156], "nishimoto": [111, 156], "gallant": [111, 156], "20691790": [111, 156], "pmid": [111, 156, 200, 204], "pubm": [111, 156, 190, 306, 307], "ncbi": [111, 156, 306, 307], "nlm": [111, 156, 306, 307], "jare": [111, 188], "nielsen": [111, 188], "brandon": [111, 188], "zielinski": [111, 188], "nichola": [111, 188], "lang": [111, 188, 190], "erin": [111, 188], "bigler": [111, 188], "janet": [111, 188], "lainhart": [111, 188], "multisit": [111, 188], "autism": [111, 188], "fnhum": [111, 188], "00599": [111, 188], "kate": [111, 201, 233], "stanlei": [111, 233], "colcomb": [111, 233], "maarten": [111, 233, 306, 307], "menn": [111, 233, 306, 307], "melissa": [111, 233], "benedict": [111, 233], "moreno": [111, 218, 233], "laura": [111, 233], "panek": [111, 233], "shaquanna": [111, 233], "brown": [111, 233], "zavitz": [111, 233], "qingyang": [111, 233], "sharad": [111, 233], "sikka": [111, 233], "gutman": [111, 233], "saroja": [111, 233], "bangaru": [111, 233], "rochel": [111, 233], "tziona": [111, 233], "schlachter": [111, 233], "stephani": [111, 233], "kamiel": [111, 233], "ayesha": [111, 233], "anwar": [111, 233], "caitlin": [111, 233], "hinz": [111, 233], "kaplan": [111, 233], "anna": [111, 233], "rachlin": [111, 233], "samantha": [111, 233], "adelsberg": [111, 233], "cheung": [111, 233], "ranjit": [111, 233], "khanuja": [111, 233], "chaogan": [111, 233], "yan": [111, 233], "courtnei": [111, 233], "margaret": [111, 233], "king": [111, 130, 133, 148, 233], "wood": [111, 233], "cox": [111, 233], "adriana": [111, 233], "dimartino": [111, 233], "eva": [111, 233], "petkova": [111, 233], "philip": [111, 233], "reiss": [111, 233], "nanci": [111, 233], "duan": [111, 233], "dawn": [111, 233], "thompsen": [111, 233], "bharat": [111, 233], "biswal": [111, 233], "barbara": [111, 233], "coffei": [111, 233], "hoptman": [111, 233], "javitt": [111, 233], "nunzio": [111, 233], "pomara": [111, 233], "sidti": [111, 233], "harold": [111, 233], "koplewicz": [111, 233], "francisco": [111, 233], "castellano": [111, 233], "bennett": [111, 233], "leventh": [111, 233], "milham": [111, 233], "reilli": [111, 220], "valentina": [111, 220], "tomassini": [111, 220], "narend": [111, 220], "ramnani": [111, 220], "heidi": [111, 220], "johansen": [111, 220], "berg": [111, 220], "zone": [111, 220], "953": [111, 220], "965": [111, 220], "bhp157": [111, 220], "17303287": [111, 220], "wolfgang": [111, 199], "amanda": [111, 199], "nili": [111, 199], "tyszka": [111, 199], "vivo": [111, 199], "nuclei": [111, 199], "180063": [111, 199], "1038": [111, 199, 210, 228], "sdata": [111, 199, 210, 228], "bastien": [111, 218], "antoinett": [111, 218], "julien": [111, 218], "serr": [111, 218], "deni": [111, 218], "le": [111, 218], "bihan": [111, 218], "stanisla": [111, 218], "congdon": [111, 210, 228], "triplett": [111, 210, 228], "karlsgodt": [111, 210, 228], "sabb": [111, 210, 228], "freimer": [111, 210, 228], "london": [111, 168, 210, 228], "cannon": [111, 210, 228], "bilder": [111, 210, 228], "phenom": [111, 210, 228], "160110": [111, 210, 228], "decemb": [111, 121, 122, 136, 148, 210, 228], "mitig": [111, 362], "s1053811916303871": [111, 362], "2142": [111, 306, 307], "2154": [111, 306, 307], "22019881": [111, 306, 307], "pmc3254728": [111, 306, 307], "timothi": [111, 200, 207, 220, 306], "laumann": [111, 200, 207, 306], "fran": [111, 207], "miezin": [111, 207], "anish": [111, 306], "mitra": [111, 306], "s1053811913009117": [111, 306], "raimon": [111, 306, 307], "pruim": [111, 306, 307], "daan": [111, 306, 307], "rooij": [111, 306, 307], "alberto": [111, 306, 307], "llera": [111, 306, 307], "jan": [111, 115, 148, 306, 307], "buitelaar": [111, 306, 307], "aroma": [111, 150, 306, 307], "hilari": [111, 209], "richardson": [111, 209], "grace": [111, 209], "lisandrelli": [111, 209], "alexa": [111, 209], "riobueno": [111, 209], "naylor": [111, 209], "sax": [111, 209], "social": [111, 209], "twelv": [111, 209], "livio": [111, 260], "wouter": [111, 260], "aldo": [111, 260], "jell": [111, 120, 148, 260], "novemb": [111, 130, 133, 136, 139, 148, 260], "schaefer": [111, 200], "ru": [111, 200], "kong": [111, 200], "gordon": [111, 200], "nian": [111, 200], "zuo": [111, 200], "avram": [111, 200], "yeo": [111, 200, 204, 358], "3095": [111, 200], "3114": [111, 200], "bhx179": [111, 200], "25696344": [111, 200], "_schaeferfullsupp": [111, 200], "seitzman": [111, 136, 148, 208], "caterina": [111, 208], "gratton": [111, 208], "marek": [111, 208], "ryan": [111, 136, 148, 208], "raut": [111, 208], "116290": [111, 208], "s105381191930881x": [111, 208], "zarrar": 111, "shehzad": 111, "gee": 111, "kristin": 111, "gotim": 111, "lucina": 111, "q": [111, 165, 171, 181, 261, 265, 278, 281, 400], "uddin": 111, "sang": 111, "han": 111, "lee": 111, "ami": 111, "krain": 111, "xavier": 111, "unconstrain": 111, "2209": 111, "2229": 111, "bhn256": 111, "17300841": 111, "sm": [111, 220], "glasser": [111, 220], "salimi": [111, 220], "khorshidi": [111, 220], "duff": [111, 220], "dc": [111, 220], "mw": [111, 220], "woolrich": [111, 220], "jenkinson": [111, 220], "cf": [111, 175, 220], "rfmri": [111, 220], "ohbm": [111, 132, 148, 220], "annual": [111, 220], "meet": [111, 145, 148, 220], "free": [111, 156, 163, 165, 168, 280, 326], "address": [111, 165, 167, 171, 280, 326], "localis": [111, 280, 326], "diego": [111, 220], "vidaurr": [111, 220], "ej": [111, 220], "behren": [111, 220], "kamil": [111, 220], "ugurbil": [111, 220], "karla": [111, 201, 220], "miller": [111, 201, 220], "demograph": [111, 220], "1565": [111, 220], "1567": [111, 220], "watkin": [111, 201], "roberto": [111, 126, 136, 148, 201], "toro": [111, 201], "textquoteright": [111, 201], "architectur": [111, 152, 201], "13040": [111, 201], "13045": [111, 201], "0905267106": [111, 201], "mccarthi": [111, 220], "emma": [111, 220], "clair": [111, 220], "xu": [111, 220], "horton": [111, 220], "eugen": [111, 220], "\u00e2": [111, 220], "mil": [111, 220], "u\u011furbil": [111, 220], "humanconnectom": [111, 220], "storag": [111, 175, 220, 224, 226], "media": [111, 220], "s500": [111, 220], "hcp500_megatrawl_april2015": [111, 220], "fenna": [111, 200, 204], "krienen": [111, 200, 204], "jorg": [111, 200, 204], "sepulcr": [111, 200, 204], "mert": [111, 200, 204], "sabuncu": [111, 200, 204], "danial": [111, 200, 204], "lashkari": [111, 200, 204], "marisa": [111, 200, 204], "hollinshead": [111, 200, 204], "joshua": [111, 138, 148, 200, 204], "roffman": [111, 200, 204], "jordan": [111, 200, 204], "smoller": [111, 200, 204], "lilla": [111, 200, 204], "z\u00f6llei": [111, 200, 204], "polimeni": [111, 200, 204], "hesheng": [111, 200, 204], "neurophysiologi": [111, 200, 204], "1125": [111, 200, 204], "1165": [111, 200, 204], "21653723": [111, 200, 204], "1152": [111, 200, 204], "jn": [111, 200, 204], "00338": [111, 200, 204], "tzourio": [111, 190], "mazoy": [111, 190], "landeau": [111, 190], "papathanassi": [111, 190], "crivello": [111, 190], "etard": [111, 190], "delcroix": [111, 190], "joliot": [111, 190], "macroscop": [111, 190], "2002": [111, 190], "s1053811901909784": [111, 190], "0978": [111, 190], "flore": [111, 180], "baronnet": [111, 180], "andrea": [111, 180], "kleinschmidt": [111, 180], "fillard": [111, 180], "stroke": [111, 180], "patient": [111, 168, 180], "tianzi": [111, 180], "jiang": [111, 180], "nassir": [111, 180], "navab": [111, 180], "josien": [111, 180], "pluim": [111, 180], "viergev": [111, 180], "assist": [111, 180], "intervent": [111, 180], "miccai": [111, 149, 180], "cn2h9c": [111, 180], "spontan": [111, 198], "1008": [111, 181], "5071": [111, 181], "bio": [111, 181], "s1053811913003340": [111, 198], "gerard": [111, 326], "ridgwai": [111, 326], "webster": [111, 326], "s1053811914000913": [111, 326], "synthesi": [111, 114, 162, 223, 225], "adelstein": 111, "donald": 111, "klein": 111, "retest": 111, "2163": 111, "2177": [111, 136, 148], "s1053811909011525": 111, "di": 111, "martino": 111, "1432": 111, "1445": 111, "s1053811909010167": 111, "papadopoulo": [111, 120, 121, 133, 148, 163, 218], "orfano": [111, 120, 121, 133, 148, 163, 218], "antonio": [111, 218], "frouin": [111, 218], "brainom": [111, 133, 148, 218], "s1053811915008745": [111, 218], "abstract": [112, 309], "knowledg": [112, 150, 165, 316], "beaten": 112, "mask_face_littl": [113, 173, 212], "mask_house_littl": [113, 173, 212], "comfort": [113, 163], "plenti": 113, "hesit": [113, 163], "rarr": [113, 175], "tube": 113, "clever": [113, 162], "resp": 113, "brighter": 113, "scratch": 113, "elementari": 113, "brows": [114, 143, 148], "introduc": [114, 126, 136, 145, 148, 155, 156, 160, 163, 175, 180, 181, 250, 251, 265, 278, 309, 310, 311, 312, 313, 314, 315, 316, 387, 388, 389, 390], "upload": 114, "modal": [114, 155, 163, 231, 303], "went": 114, "webpag": 114, "brainpedia": 114, "1952": [114, 136, 148], "brainpedia_subset": 114, "32015": 114, "32016": 114, "criteria": [114, 163, 168, 188, 223], "collection_term": [114, 223], "collection_metadata": [114, 223], "everi": [114, 149, 150, 154, 155, 156, 160, 162, 163, 165, 175, 182, 196, 197, 223, 311, 314, 361, 366, 369, 374, 375, 376, 378, 393, 394, 400, 420], "image_term": [114, 223], "snippet": 114, "is_valid": [114, 136, 148], "treat": 114, "cbf": 114, "cbv": 114, "express": [114, 120, 121, 148, 168, 173, 223, 248, 249, 263, 265, 293, 374], "ignorecas": 114, "special": [114, 136, 148], "isnul": [114, 223], "notnul": [114, 223], "notequ": [114, 223], "greaterorequ": [114, 223], "greaterthan": [114, 223], "lessorequ": [114, 223], "lessthan": [114, 223], "notin": [114, 223], "notcontain": [114, 223], "resultfilt": [114, 223], "OR": 114, "xor": 114, "NOT": 114, "conveni": [114, 174, 175, 209, 371], "collection_filt": [114, 223], "callabl": [114, 143, 148, 184, 223, 243, 244, 245, 246, 247], "image_filt": [114, 223], "anyth": [114, 162, 163], "lambda": 114, "disabl": [114, 134, 136, 140, 148, 162, 387], "rewritten": 114, "suppos": [114, 162, 171, 173, 175, 257, 258], "weird": 114, "small_meta_imag": 114, "platform": [114, 129, 148, 171], "unless": [114, 162, 163, 228, 280, 326, 371, 402], "vectorize_word": [114, 223, 225], "kj": 114, "ss": 114, "vv": 114, "te": 114, "ra": [114, 297], "front": [114, 252, 255], "neuroinform": 114, "contributor": [115, 116, 118, 119, 163, 171], "git": [115, 116, 118, 119, 121, 123, 126, 148, 163, 171], "shortlog": [115, 116, 118, 119, 121, 123, 126, 148], "jaqu": [115, 148], "grobler": [115, 148], "ronald": [115, 148], "phlypo": [115, 148], "\u00f3scar": [115, 118, 121, 123, 148], "n\u00e1jera": [115, 118, 121, 123, 148], "konstantin": [115, 148], "shmelkov": [115, 148], "jason": [115, 133, 148], "gor": [115, 133, 148], "savio": [115, 148], "margeta": [115, 148], "matthia": [115, 148], "ekman": [115, 148], "waskom": [115, 148], "bugfix": [117, 118, 122, 123, 126, 144, 148, 163], "minor": [118, 129, 131, 148, 155], "rewamp": [118, 148], "brok": [118, 148], "obei": [119, 148], "debian": [119, 148], "rule": [119, 148, 155, 156, 163, 243, 244, 245, 246], "januari": [120, 137, 143, 148], "2023": [120, 148], "bump": [120, 133, 136, 141, 142, 143, 148, 156, 158, 171], "v3": [120, 148], "3237": [120, 148], "doc": [120, 126, 142, 145, 148, 163, 171], "theme": [120, 145, 148], "furo": [120, 145, 148], "3125": [120, 145, 148], "3196": [120, 145, 148], "3181": [120, 145, 148], "2715": [120, 145, 148], "tick": [120, 148, 163, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 366, 368, 369, 375, 376, 377, 379, 380, 382, 384, 386], "plot_surf": [120, 128, 130, 136, 140, 141, 142, 143, 148, 163, 164, 379, 380, 419], "3105": [120, 148, 163], "3374": [120, 148], "bogdan": [120, 148], "3385": [120, 148], "compute_multi_epi_mask": [120, 148, 174, 312], "3412": [120, 148], "natasha": [120, 148], "3403": [120, 148], "raphael": [120, 140, 141, 142, 143, 144, 145, 148], "meudec": [120, 140, 141, 142, 143, 144, 145, 148], "test_cluster_level_parameters_smok": [120, 148], "3436": [120, 148], "roelof": [120, 148], "dalenberg": [120, 148], "creation": [120, 136, 148, 250, 251, 265, 278, 400], "3453": [120, 148], "imput": [120, 148], "cubic": [120, 148, 175, 184, 402], "spline": [120, 148, 368, 369, 375, 376, 383, 402], "butterworth": [120, 141, 145, 148, 402], "friendli": [120, 148, 420], "rework": [120, 123, 129, 136, 142, 148], "deploi": [120, 148], "3426": [120, 148], "3439": [120, 148], "contribut": [120, 130, 133, 134, 135, 136, 137, 138, 142, 143, 145, 148, 156, 165, 171, 420], "changelog": [120, 128, 163], "whatsnew": [120, 148], "3446": [120, 148], "williamson": [120, 148], "3452": [120, 148], "audrei": [120, 148], "duran": [120, 148], "privat": [120, 145, 148, 163], "weighted_connectivity_graph": [120, 148], "nearest_neighbor_group": [120, 148], "renam": [120, 129, 133, 148, 171], "3347": [120, 148], "ahmad": [120, 142, 143, 145, 148], "chamma": [120, 142, 143, 145, 148], "alias": [120, 148], "builtin": [120, 148], "3422": [120, 148], "compute_multi_gray_matter_mask": [120, 148], "3427": [120, 148], "3424": [120, 148], "3429": [120, 148], "_safe_cach": [120, 148], "deem": [120, 148], "outdat": [120, 127, 148], "anymor": [120, 145, 148], "3375": [120, 148], "3433": [120, 148], "docstr": [120, 134, 139, 142, 145, 148, 163, 255, 257, 258], "migrat": [120, 148], "nistats_migr": [120, 148], "rst": [120, 148, 163, 171], "3449": [120, 148], "sym_to_vec": [121, 126, 129, 141, 148], "helper": [121, 128, 129, 148, 163, 177, 223], "modernis": [121, 148], "copy_img": [121, 148], "indexerror": [121, 143, 148], "fast_abs_percentil": [121, 148], "875": [121, 148], "group_sparse_covari": [121, 148, 162, 182], "move": [121, 128, 141, 148], "n_cut": [121, 148, 357], "find_cut_slic": [121, 128, 148], "aina": [121, 148], "frau": [121, 148], "pascual": [121, 148], "ariel": [121, 133, 148], "rokem": [121, 133, 148], "targett": [122, 148], "renew": [123, 148], "flake8": [123, 145, 148, 163], "pull": [123, 145, 148, 168, 170], "symmetric_split": [123, 148, 196, 197], "mac": [123, 148], "numpy_convers": [123, 148], "csv_to_arrai": [123, 148], "refresh": [123, 148], "sparsifi": [123, 148], "circleci": [123, 128, 148], "brainhack": [124, 129, 148], "mathemat": [124, 148, 168, 294, 408], "cobr": [124, 128, 148], "fetch_cobr": [124, 128, 139, 143, 148], "basc": [124, 148, 192], "april": [125, 128, 134, 135, 144, 148], "expand": [125, 148, 168, 173, 293, 387, 389], "homedir": [125, 148], "uniformli": [125, 148, 156, 377, 379, 380], "aal": [125, 148, 190], "fetch_atlas_a": [125, 144, 148], "august": [126, 133, 145, 148], "wrong": [126, 144, 148, 165], "ivan": [126, 133, 148], "gonzalez": [126, 133, 148], "guidotti": [126, 136, 148], "refactor": [127, 141, 143, 145, 148, 171], "resolv": [127, 137, 148], "1238": [127, 148], "get_affin": [127, 148, 173, 285], "checkout": [128, 148, 163, 171], "latest": [128, 148, 163, 171, 307], "_get_mask_volum": [128, 148], "_adjust_screening_percentil": [128, 148], "tar": [128, 148, 171], "set_axis_bgcolor": [128, 148], "fast_svd": [128, 148], "switch": [128, 135, 148, 163, 171, 368], "lapack": [128, 148, 162], "svd": [128, 148, 251, 289, 388, 403], "heurist": [128, 148, 161, 162, 182, 320, 361, 374, 375, 376, 383, 419], "pip": [128, 133, 136, 148, 163, 171, 420], "_safe_get_data": [128, 148], "safe": [128, 148], "ensure_finit": [128, 148, 283, 317, 320, 402], "cov_to_corr": [128, 148], "prec_to_parti": [128, 148], "qualit": [128, 148], "fetch_surf_fsaverage5": [128, 133, 148], "surf_plot": [128, 148], "schizophrenia": [128, 148, 168], "coveral": [128, 148], "codecov": [128, 148], "sym_matrix_to_vec": [129, 148, 187], "largest_connected_compon": [129, 148], "workaround": [129, 148], "vec_to_sym_matrix": [129, 148], "plot_connectivity_measur": [129, 148], "tighter": [129, 148, 162], "largest_connected_component_img": [129, 148], "largest": [129, 148, 162, 292, 318, 319, 320, 321, 322, 323, 324, 360], "joe": [130, 148], "necu": [130, 148], "fetch_atlas_talairach": [130, 148], "resampling_interpol": [130, 148, 368, 369, 375, 376, 383], "backward": [130, 143, 148, 163, 196, 197], "incompat": [130, 148, 265], "cautious": [130, 148], "anat_img": [130, 148, 361], "jeff": [130, 148], "chiang": [130, 148], "sassenhagen": [130, 148], "sylvain": [130, 133, 136, 148], "lan": [130, 133, 148], "olivi": [130, 148], "quirion": [130, 148], "analu": [130, 133, 148], "r\u00e9mi": [130, 148], "madhyastha": [130, 133, 148], "meghana": [130, 133, 148], "sfvnmac": [130, 133, 148], "larson": [130, 133, 134, 136, 148], "horea": [130, 133, 148], "moritz": [130, 133, 136, 148], "boo": [130, 133, 136, 148], "rothberg": [130, 133, 148], "bedetti": [130, 133, 148], "griffith": [130, 148], "lannuzel": [130, 133, 148], "1536": [131, 148], "usabl": [131, 148, 160, 162, 222, 247], "node_color": [131, 141, 148, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 382], "1595": [131, 148], "nifti2imag": [131, 148], "confer": [132, 148], "cold_hot": [132, 148, 371, 376, 380, 383, 384, 386], "lock": [132, 148], "whitespac": [132, 148], "had": [132, 148], "pradeep": [132, 148], "raamana": [132, 148], "attributeerror": [132, 148], "httperror": [132, 148], "glaser": [132, 148], "view_mark": [133, 134, 136, 141, 148, 382, 383, 419], "view_stat_map": [133, 148], "python2": [133, 134, 135, 136, 148], "navig": [133, 148], "anaconda": [133, 148, 420], "feel": [133, 148, 163], "shout": [133, 148], "pbellec": [133, 148], "great": [133, 148], "awesom": [133, 148], "sportingli": [133, 148], "accommod": [133, 148], "feedback": [133, 148, 163, 171], "notter": [133, 148], "miykael": [133, 148], "brainsprit": [133, 134, 148, 419], "himanshupathak21061998": [133, 134, 148], "octob": [133, 136, 148], "oscar": [133, 148], "esteban": [133, 148], "uniti": [133, 148], "channel": [133, 148], "life": [133, 148], "gale": [133, 136, 148], "img_to_signals_label": [133, 136, 148, 394, 396], "sourav": [133, 148], "singh": [133, 148], "remi": [133, 148], "steinkamp": [133, 138, 148], "akshai": [133, 148], "gomez": [133, 136, 142, 145, 148], "guillaum": [133, 136, 148], "lemaitr": [133, 136, 148], "erramuzp": [133, 148], "foucault": [133, 148], "jehan": [133, 148], "nikolaidi": [133, 148], "dillon": [133, 148], "plunkett": [133, 148], "greg": [133, 136, 148], "operto": [133, 148], "dtyulman": [133, 148], "0a0": 133, "1705": [133, 148], "grid_search": [133, 148, 243, 244, 245, 246], "gill": [133, 136, 148], "holland": [133, 136, 148], "menuet": [133, 148], "romuald": [133, 148], "peer": [133, 148], "herholz": [133, 148], "consum": [134, 148, 158, 162, 171, 173], "noteworthi": [134, 148, 156], "fetch_atlas_schaefer_2018": [134, 136, 148], "fetch_coords_seitzman_2018": [134, 148], "node_coord": [134, 136, 148, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 372, 382], "edge_cmap": [134, 136, 148, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 382], "load_niimg": [134, 148], "silent": [134, 143, 148], "book": [134, 148], "mgz": [134, 135, 148, 377, 378, 379, 380, 386, 404], "mne": [134, 135, 148], "lowest": [135, 148], "broke": [135, 148], "v2": [136, 141, 148], "viewabl": [136, 148], "vscode": [136, 148], "biap8": [136, 148], "input_output": [136, 148, 250, 251, 388], "2172": [136, 148], "giant": [136, 148], "1336": [136, 148], "plot_connectome_strength": [136, 139, 143, 148], "2028": [136, 148], "pad": [136, 148, 174, 175, 287, 298, 299, 320, 323, 327, 329, 330], "2025": [136, 148], "kiar": [136, 148], "1953": [136, 148], "ticklabel": [136, 148], "psc": [136, 140, 148, 310, 311, 312, 313, 314, 315, 316, 402], "median": [136, 148, 310, 313, 377, 393], "standard_devi": [136, 148, 310, 313, 393], "2221": [136, 148], "2057": [136, 148], "2157": [136, 148], "truncat": [136, 148], "2195": [136, 148], "det": [136, 148, 199], "2235": [136, 148], "hammond": [136, 148], "old": [136, 142, 143, 148], "2255": [136, 148], "ndarrai": [136, 148, 180, 181, 182, 183, 184, 185, 186, 187, 200, 202, 206, 208, 209, 220, 221, 243, 244, 245, 246, 248, 249, 250, 251, 252, 255, 256, 257, 258, 261, 265, 278, 283, 285, 288, 289, 295, 296, 298, 300, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 323, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 364, 370, 373, 377, 378, 379, 380, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406], "2107": [136, 148], "paula": [136, 148], "sanz": [136, 148], "leon": [136, 148], "attempt": [136, 148, 268], "2212": [136, 148], "nose": [136, 148], "2231": [136, 148], "2248": [136, 148], "markiewicz": [136, 148], "derek": [136, 148], "pisner": [136, 148], "johann": [136, 148], "wiesner": [136, 148], "tetrel": [136, 148], "2169": [136, 148], "jake": [136, 148], "05_advanc": [136, 148], "03_connect": [136, 148], "2063": [136, 148], "merg": [136, 148, 152, 163, 168, 171, 174, 389], "plot_adhd_spher": [136, 148], "duplic": [136, 148], "review": [136, 148, 160, 171], "plot_canica_analysi": [136, 148], "plot_haxby_decod": [136, 148], "2166": [136, 148], "unsuit": [136, 148], "redund": [136, 148, 163], "crash": [136, 148], "1888": [136, 148], "2083": [136, 148], "2052": [136, 148], "ian": [136, 148], "aben": [136, 148], "2118": [136, 148], "2138": [136, 148], "faulti": [136, 148], "ana": [136, 140, 142, 148], "luisa": [136, 140, 142, 148], "pinho": [136, 140, 142, 148], "colin": [136, 148], "reining": [136, 148], "c\u00e9line": [136, 148], "delettr": [136, 148], "takerkart": [136, 148], "2272": [137, 148], "developmental_fmri": [137, 148], "launch": [138, 148, 155], "2429": [138, 148], "2302": [138, 148], "typo": [138, 148], "2312": [138, 148], "jon": [138, 148], "haitz": [138, 148], "legarreta": [138, 148], "gorrono": [138, 148], "fetch_nyu_rest": [138, 141, 148], "2308": [138, 148], "teve": [138, 148], "zvi": [138, 148], "baratz": [138, 148], "2299": [139, 148], "2304": [139, 148], "2307": [139, 148], "2509": [139, 148], "2327": [139, 148], "art": [139, 148, 156, 243, 244, 245, 246], "nodal": [139, 148, 372, 419], "decim": [139, 148, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 369], "interchang": [139, 148], "compute_brain_mask": [139, 142, 148, 174, 243, 244, 245, 246, 250, 251, 315, 322, 388], "compute_gray_matter_mask": [139, 143, 148], "regard": [139, 148, 161, 214, 238, 307], "erron": [139, 148, 200], "readm": [139, 148], "2021": [140, 141, 142, 148, 189, 190, 193, 198, 199, 200, 203, 204, 227, 230, 231, 233], "serv": [140, 148, 163, 171, 195, 209], "1024": [140, 148, 195], "2619": [140, 148], "2622": [140, 148], "2684": [140, 148], "2702": [140, 148], "one_minus_pvalu": [140, 148, 253], "stabil": [140, 148, 154, 245, 246, 253], "cumul": [140, 148, 253], "2567": [140, 148], "2674": [140, 148], "2553": [140, 148], "wegrzyn": [140, 148], "arm": [140, 148], "2606": [140, 148], "whatev": [140, 148], "2669": [140, 148], "notat": [140, 143, 148, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 366, 368, 369, 375, 376, 377, 379, 380], "2697": [140, 148], "2712": [140, 148], "handi": [140, 148, 164], "2696": [140, 148], "2714": [140, 148], "2719": [140, 148], "2707": [141, 148], "2858": [141, 148], "inher": [141, 148], "basemask": [141, 148], "fsaverage3": [141, 148, 232, 384], "fsaverage4": [141, 148, 232, 384], "fsaverage6": [141, 148, 232, 384], "2815": [141, 148], "curv": [141, 148, 155, 156, 158, 162, 168, 377, 380, 386, 404], "2532": [141, 148], "luke": [141, 148], "struct": [141, 148], "footcit": [141, 143, 145, 148], "footbibliographi": [141, 143, 145, 148], "2806": [141, 148], "jeremi": [141, 148], "lefort": [141, 148], "besnard": [141, 148], "2732": [141, 148], "javier": [141, 148], "rasero": [141, 148], "_get_voxelwise_model_attribut": [141, 148], "2792": [141, 148], "ascend": [141, 148, 293], "1155": [141, 148], "2831": [141, 148], "edmond": [141, 148], "zoom": [141, 148], "surround": [141, 148, 406], "2798": [141, 148], "vanass": [141, 148], "inconsist": [141, 148, 278, 280], "2767": [141, 148], "2826": [141, 148], "marker_label": [141, 148, 385], "2745": [141, 148], "greydon": [141, 148], "gilmor": [141, 148], "avg_method": [141, 148, 377], "auto_exampl": [141, 148, 163, 368, 384], "2805": [141, 148], "viridi": [141, 148], "flow": [141, 148, 165, 168], "2821": [141, 143, 148], "butterwoth": [141, 148], "stratifi": [141, 148, 155, 243, 245, 247], "2869": [141, 148], "2867": [141, 148], "2868": [141, 148], "juelich": [142, 148, 197], "2723": [142, 148], "load_mni152_gm_templ": [142, 148, 213, 236, 238, 239, 240], "load_mni152_wm_templ": [142, 148, 213, 237, 238, 239], "load_mni152_gm_mask": [142, 148, 213], "load_mni152_wm_mask": [142, 148, 213], "2738": [142, 148], "2755": [142, 148], "binarize_img": [142, 148], "skullstrip": [142, 148, 168, 238], "2904": [142, 148], "compute_multi_grey_matter_mask": [142, 148], "2876": [142, 148], "2941": [142, 148], "preset": [142, 143, 148, 307, 419], "nevertheless": [142, 148], "8339": [142, 148], "decor": [142, 148], "fill_doc": [142, 148], "2875": [142, 148], "pathlib": [142, 148, 173, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 227, 228, 229, 230, 231, 232, 233, 234, 243, 244, 245, 246, 248, 249, 265, 278, 310, 311, 318, 319, 320, 321, 322, 323, 388, 389, 390, 402, 404, 405, 406], "affect": [142, 148, 165, 168], "2928": [142, 148], "jqueri": [142, 148], "vulner": [142, 148], "2944": [142, 148], "2022": [143, 144, 145, 148], "plotli": [143, 148, 340, 377, 379, 380, 419, 420], "2902": [143, 148], "3061": [143, 148], "2946": [143, 148], "3016": [143, 148], "kmean": [143, 145, 148, 152, 169, 174, 265, 274, 387, 388], "2282": [143, 148], "3065": [143, 148], "mainten": [143, 148], "encourag": [143, 148, 163], "3026": [143, 148], "submodul": [143, 145, 148, 163], "3126": [143, 148], "get_bids_fil": [143, 148], "parse_bids_filenam": [143, 148], "subpart": [143, 148], "3036": [143, 148], "3009": [143, 148], "3013": [143, 148], "leonard": [143, 148], "sass": [143, 148], "threw": [143, 148], "typeerror": [143, 148, 293], "3035": [143, 148], "3078": [143, 148], "myeong": [143, 148], "seop": [143, 148], "song": [143, 148], "3111": [143, 148], "neelai": [143, 148], "shah": [143, 148], "hommel": [143, 148], "3109": [143, 148], "benjamini": [143, 148, 165, 264], "hocheberg": [143, 148], "3137": [143, 148], "3135": [143, 148], "retain": [143, 148, 155, 156, 165, 242, 265, 306], "2965": [143, 148], "demean": [143, 148, 306, 307], "3003": [143, 148], "triag": [143, 148], "clearli": [143, 148, 163], "polici": [143, 148], "spm_hrf": [143, 148, 265, 267, 272], "2942": [143, 148], "3008": [143, 148], "test_img_plot": [143, 148], "reorgan": [143, 148, 163], "3015": [143, 148], "3033": [143, 148], "3077": [143, 148], "2859": [143, 148], "3106": [143, 148], "3081": [143, 148], "3082": [143, 148], "3093": [143, 148], "3133": [143, 148], "cond_id": [143, 148], "ex": [143, 148, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 366, 368, 369, 375, 376, 377, 379, 380], "3025": [143, 148], "3039": [143, 148], "slicer": [143, 148, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 419], "projector": [143, 148, 355], "3073": [143, 148], "byte": [143, 148, 163, 292, 298], "2655": [143, 148], "recarrai": [143, 148, 188, 194, 195, 206, 207, 208, 216, 217, 218, 227], "2829": [143, 148], "h0_fmax": [144, 148, 326], "3184": [144, 148], "fetch_abide_pcp": [144, 148], "func_preproc": [144, 148, 188], "3174": [144, 148], "3179": [144, 148], "_apply_cluster_size_threshold": [144, 148], "cluster_s": [144, 148], "3201": [144, 148], "beyond": [144, 148], "newest": [144, 148, 223], "3188": [144, 148], "3098": [144, 148], "3127": [144, 148], "3165": [144, 148], "determinist": [144, 148, 168, 190, 192, 194, 196, 197, 199, 200, 202, 203, 204, 387], "glossari": [144, 148], "3152": [144, 148], "3207": [144, 148], "3178": [144, 148], "cfg": [144, 148, 163, 420], "2953": [144, 148], "_neurovault_base_url": [145, 148], "_neurosynth_fetch_words_url": [145, 148], "3281": [145, 148], "manon": [145, 148], "pietrantoni": [145, 148], "bibtex": [145, 148], "3222": [145, 148], "3233": [145, 148], "vasco": [145, 148], "diogo": [145, 148], "3241": [145, 148], "3255": [145, 148], "caglar": [145, 148], "cakan": [145, 148], "c_ra": [145, 148], "3235": [145, 148], "_check_second_level_input": [145, 148], "flm_object": [145, 148], "3283": [145, 148], "matthieu": [145, 148], "joulot": [145, 148], "3284": [145, 148], "_gamma_difference_hrf": [145, 148], "hemodynamic_model": [145, 148], "slight": [145, 148], "distort": [145, 148, 306], "3297": [145, 148], "kun": [145, 148], "0rc1": [145, 148], "wn": [145, 148], "unfilt": [145, 148], "3293": [145, 148], "3306": [145, 148], "koen": [145, 148], "helwegen": [145, 148], "3312": [145, 148], "typograph": [145, 148], "3337": [145, 148], "sachin": [145, 148], "patalasingh": [145, 148], "censor": [145, 148, 402], "3193": [145, 148], "3185": [145, 148], "sami": [145, 148], "jawhar": [145, 148], "conform": [145, 148, 165], "3262": [145, 148], "fall": [145, 148, 163, 371, 406], "3292": [145, 148], "connor": [145, 148], "n_elements_": [145, 148, 312, 313, 314, 315, 316], "3311": [145, 148], "filesystem": [145, 148], "branch": [145, 148, 163, 171], "diff": [145, 148, 163], "3317": [145, 148], "3333": [145, 148], "sage": [145, 148], "hahn": [145, 148], "3322": [145, 148], "carpet_plot": [145, 148], "deleg": [145, 148], "cmap_label": [145, 148, 362], "3209": [145, 148], "fsaverage5_spher": [145, 148], "3229": [145, 148], "regressionresult": [145, 148, 252, 256, 261, 265, 274], "simpleregressionresult": [145, 148, 265], "olsmodel": [145, 148, 255, 257, 258], "likelihoodmodelresult": [145, 148, 257, 258], "shorten": [145, 148], "df_resid": [145, 148], "wdesign": [145, 148], "wresid": [145, 148], "norm_resid": [145, 148], "wy": [145, 148], "fetch_openneuro_dataset_index": [145, 148], "favor": [145, 148], "3216": [145, 148], "afni": [145, 148], "nipi": [145, 148, 163, 169], "1046": [145, 148], "pr": [145, 148, 171], "1082": [145, 148], "overflow": [145, 148], "3227": [145, 148], "pars": [145, 148, 304], "3274": [145, 148], "elli": [145, 148], "charact": [145, 148, 274], "3141": [145, 148], "3302": [145, 148], "int8": [145, 148, 296], "3286": [145, 148], "restor": [146, 148], "spatialimag": [146, 148, 173, 286], "3462": [146, 148], "mathia": [146, 148], "goncalv": [146, 148], "focuss": 149, "naturalist": [149, 150, 152, 153], "indirect": [149, 150], "friedman": 149, "biostatist": 149, "time_series_1": 149, "time_series_2": 149, "challeng": 149, "toll": 149, "stronger": 149, "nip": 149, "geometr": [149, 180], "group_connect": 149, "heterogen": 149, "fetch_atlas_craddock_2012": 150, "easiest": [150, 155, 156], "frmi_fil": 150, "confounds_datafram": 150, "imperfect": 150, "boundari": [150, 160, 174, 374, 375, 377], "registr": [150, 165, 299, 419], "csv_file": 150, "consider": [150, 156, 280, 326], "readili": [150, 155, 158, 170, 173, 174, 390], "zaleski": 150, "rise": 152, "debat": 152, "cite": [152, 198, 209, 218], "quicker": [152, 163], "loss": [152, 157, 248, 307], "downsiz": 152, "hierarch": [152, 168, 169, 387], "neighborhood": 152, "tree": [152, 200], "admittedli": 152, "isotrop": 153, "publicli": 153, "osf": [153, 195, 199, 209, 218], "5hju4": [153, 209], "walker": [153, 390, 392], "likewis": 153, "newer": [154, 223, 225], "arriv": 154, "consensu": [154, 163], "explor": [154, 158, 162, 164, 169, 170, 182, 210, 223, 229, 243, 244, 245, 246], "resembl": 154, "coactiv": 154, "neuro": [154, 168, 243, 301], "offer": [154, 164, 166, 419], "articul": 155, "diagnost": [155, 159], "statu": [155, 168, 227], "vbm": [155, 168, 170], "fa": 155, "unusu": 155, "rich": 155, "strongli": [155, 163, 168], "recfromcsv": 155, "seemingli": 155, "misleadingli": 155, "chose": 155, "Be": [155, 156, 163, 182, 252, 401], "got": 155, "thumb": [155, 163], "advic": 155, "worst": 155, "caveat": 155, "entir": [155, 160, 175, 393], "sensibl": [155, 158, 181, 184], "imbalanc": 155, "domin": [155, 233], "roc": [155, 168], "guess": [155, 162, 318, 383], "notion": [155, 160, 304, 372], "00_tutori": 155, "tackl": [156, 171], "extern": [156, 159, 227], "trait": 156, "userguid": 156, "categor": [156, 171], "harder": 156, "vote": 156, "costli": [156, 160, 280, 326], "former": [156, 162, 223], "confus": [156, 301], "penal": [156, 162, 182, 248, 249], "variant": [156, 179], "counterpart": 156, "ridge_regressor": [156, 244, 246], "dummy_regressor": [156, 244, 246], "lunch": 156, "insensit": 156, "cheap": 156, "ill": 156, "importantli": [156, 158, 163], "ugli": 156, "nuisanc": [156, 168, 189, 252, 255, 256, 257, 307, 402], "hyper": [156, 157], "computationnali": 156, "bia": [156, 243, 244, 245, 246, 248, 249], "cancel": 156, "hood": [156, 161], "promot": [156, 157, 171], "memor": [157, 165], "versatil": [158, 169, 420], "mimic": [158, 196, 197], "unfortun": [158, 162], "prognosi": [159, 170], "reduct": [159, 251, 388, 421], "bag": [159, 248, 249, 421], "briefli": 160, "critic": [160, 162], "lorocv": 160, "properli": [160, 175, 363, 368], "isovoxel": 160, "volunt": 160, "ot": 160, "theoret": 160, "hypothesi": [160, 165, 247, 253, 280, 326], "swap": [160, 174, 227, 301], "descriptor": [160, 266, 326], "herebi": 160, "rank": [160, 255, 256, 257, 258, 326], "phenomenon": 160, "statistician": 160, "crucial": 160, "symmetri": [160, 162], "adopt": [160, 168], "spacenetclassifi": [161, 243, 244, 249], "tvl1": 161, "blobbi": 161, "mainli": 162, "devis": 162, "descent": [162, 251], "innermost": 162, "hoc": 162, "histori": 162, "prove": [162, 175], "amplifi": 162, "mandatori": [162, 283], "_update_submatrix": 162, "perfect": 162, "newton": 162, "raphson": 162, "debug": [162, 163, 170, 182, 184], "kern": 162, "bottleneck": 162, "overhead": 162, "neglig": [162, 287], "evenli": [162, 283, 402], "highli": [162, 163], "serial": 162, "boil": 162, "written": [162, 398], "inlin": [162, 398], "naiv": 162, "clock": 162, "nr": 162, "loos": 162, "fortran": [162, 298, 299, 326], "couldn": 162, "weren": 162, "ubuntu": 162, "synthes": 162, "wasn": 162, "hopefulli": 162, "govern": 162, "hardest": 162, "unrealist": 162, "perfectli": 162, "spectrum": 162, "decorrel": 162, "whatsoev": 162, "mostli": [162, 302], "weakli": 162, "optimum": 162, "wast": 162, "convex": 162, "group_sparse_covariance_cost": 162, "feasibl": 162, "semi": 162, "primal": 162, "satisfi": [162, 171], "quantiti": [162, 253], "lost": 162, "rapidli": 162, "prohibit": 162, "slowli": 162, "tricki": 162, "paragraph": 162, "fewer": [162, 362], "dwindl": 162, "speedup": 162, "complic": [162, 173, 255, 257, 258], "program": [162, 419], "earlystopprob": 162, "unpen": 162, "fastest": 162, "fulli": [162, 165, 420], "compute_alpha_max": 162, "straightforward": [162, 253], "sequenti": [162, 173, 374], "trajectori": 162, "smallest": 162, "fact": [162, 165, 168], "energi": 162, "brute": 162, "slowest": 162, "hardwar": 162, "commod": 162, "moder": 162, "sought": [162, 168], "push": [162, 163, 171], "stress": 162, "rare": 162, "spent": 162, "early_stop": [162, 182], "neurostar": [163, 170, 171], "forum": 163, "weekli": [163, 170], "hour": [163, 170, 171, 280, 326], "wednesdai": [163, 420], "4pm": [163, 420], "5pm": [163, 420], "utc": [163, 420], "troubleshoot": 163, "appreci": [163, 173], "topic": [163, 171], "burn": 163, "board": 163, "welcom": [163, 171, 420], "think": [163, 165, 175], "runnabl": 163, "ongo": 163, "comment": [163, 175], "opinion": 163, "approv": 163, "burden": 163, "member": [163, 171, 420], "expert": [163, 170], "eas": 163, "prototyp": 163, "beginn": [163, 170], "parsimoni": 163, "concern": [163, 168], "sustain": 163, "weigh": 163, "thoroughli": 163, "codebas": 163, "discourag": 163, "exhaust": [163, 170], "modif": [163, 165, 168], "ultim": [163, 256], "emerg": 163, "host": 163, "effort": [163, 171], "everyon": 163, "send": [163, 387, 389], "infrastructur": [163, 171], "gigabyt": 163, "deploy": 163, "xxxx": 163, "unrel": [163, 175], "pep8": [163, 171], "numpydoc": 163, "versionad": [163, 171], "versionchang": [163, 171, 296], "dev": [163, 171, 212], "coverag": [163, 420], "mock": 163, "atom": [163, 168], "convei": [163, 326], "smoothen": 163, "wip": 163, "draft": 163, "mrg": 163, "enh": 163, "maint": 163, "adher": 163, "gh": 163, "underscor": 163, "a_nice_funct": 163, "parent": 163, "init": [163, 387], "camelcas": 163, "randomst": [163, 250, 251, 265, 274, 280, 387, 388], "my_numb": 163, "didn": 163, "pytest": [163, 420], "test_modul": 163, "he": 163, "plain": 163, "repo": [163, 171, 420], "fork": 163, "clone": 163, "your_usernam": 163, "virtual": [163, 420], "whichev": 163, "manag": [163, 171, 420], "venv": [163, 420], "conda": [163, 420], "your_branch": 163, "lint": 163, "complianc": 163, "ancestor": 163, "commit": [163, 171], "test_surf_plot": 163, "your_fork": 163, "restructuredtext": 163, "strict": 163, "window": [163, 265, 278, 400, 420], "_build": 163, "doctre": 163, "noplot": 163, "ci": [163, 171, 255, 257, 258], "filename_pattern": 163, "sphinx_gallery_conf": 163, "thorough": 163, "comprehens": [163, 170, 218, 241], "servic": 163, "temporarili": 163, "unavail": [163, 212], "frustrat": 163, "successfulli": 163, "_get_dataset_dir": 163, "_fetch_fil": 163, "server": [163, 223, 225, 420], "fake": 163, "request_mock": 163, "fixtur": 163, "_test": 163, "sender": 163, "essenc": 164, "timecours": [164, 306], "convolv": [164, 267], "doubl": [164, 196, 197], "plug": [164, 175, 252, 256], "ascertain": 164, "spm_multimodal_fmri": [164, 231], "referenc": 164, "symbol": [164, 293], "fistlevelmodel": 164, "flag": [164, 306, 307], "observed_timeseri": 164, "magnet": [165, 168, 192, 218], "reson": [165, 168, 192, 218], "oxyhaemoglobin": [165, 168], "carri": [165, 168], "deoxyhaemoglobin": [165, 168], "deliv": [165, 168], "diamagnet": [165, 168], "paramagnet": [165, 168], "success": [165, 175], "mr": 165, "irrespect": [165, 374], "microarchitectur": 165, "regist": [165, 192], "montreal": [165, 168, 190], "institut": [165, 168, 190], "nipyp": 165, "action": [165, 218], "sensori": 165, "stimui": 165, "hypothes": [165, 168], "oxi": 165, "deoxi": 165, "haemoglobin": 165, "sluggish": 165, "plai": [165, 175], "remark": 165, "respond": 165, "alon": [165, 419], "colour": 165, "enter": 165, "conceptu": 165, "physic": [165, 327, 329, 330], "decid": 165, "dof": [165, 253], "_scan": 165, "_column": 165, "quantil": 165, "reject": [165, 168], "frequent": 165, "misconcept": 165, "frequentist": 165, "wikipedia": 165, "wiki": 165, "frequentist_infer": 165, "cumbersom": 165, "absenc": [165, 171, 393], "_voxel": 165, "danger": 165, "frac": [165, 249, 252, 256], "truli": 165, "surpass": 165, "proportion": 165, "compromis": [165, 307], "hochberg": [165, 264], "supra": 165, "rational": 165, "primer": [166, 421], "broader": 167, "morphologi": 168, "treatment": [168, 170], "contrari": [168, 304, 310, 311], "fundament": 168, "eeg": 168, "electroencephalographi": 168, "monitor": 168, "electr": 168, "echo": [168, 268], "planar": 168, "incorrect": 168, "unwarp": 168, "submit": [168, 171], "diamet": 168, "tradition": 168, "subcompon": 168, "meg": 168, "magnetoencephalographi": 168, "mni305": 168, "mutli": 168, "pe": 168, "signifi": [168, 243, 244, 245, 246], "soft": 168, "tpr": 168, "wellcom": 168, "depart": 168, "univers": [168, 170], "colleg": 168, "unlabel": 168, "emot": 168, "reaction": 168, "iq": [168, 243, 244, 245, 246], "diagnosi": [168, 170], "healthi": [168, 192], "outlier": [168, 227, 306, 307, 309, 312, 315], "magnitud": [168, 365], "benedikt": 168, "ehing": 168, "coher": [168, 170], "neurobiolog": 168, "subgroup": 168, "psychiatr": 168, "disord": 168, "toolbox": [169, 420], "quickstart": 169, "ecosystem": 169, "domain": [170, 251], "ok": 170, "walk": 170, "manner": [170, 368], "dive": 170, "command": [170, 171, 420], "oftentim": 170, "comer": 170, "montr\u00e9al": 170, "gentl": 170, "greatli": 170, "facilit": [170, 175], "visualis": 170, "besid": 170, "transfer": 170, "psycholog": 170, "knop": 170, "despit": 170, "connection": 170, "tracker": 171, "mislabel": 171, "seriou": 171, "dai": 171, "decent": 171, "quantifi": 171, "prioriti": [171, 173, 234], "urgent": 171, "month": 171, "medium": [171, 232, 384], "stall": 171, "repli": 171, "week": 171, "redirect": 171, "ping": 171, "beforehand": 171, "currentmodul": 171, "whats_new": 171, "_latest": 171, "_vx": 171, "__version__": 171, "manifest": 171, "touch": [171, 287], "master": [171, 200], "upstream": 171, "workspac": 171, "dist": 171, "rm": 171, "wheel": 171, "twine": 171, "sdist": 171, "bdist_wheel": 171, "subfold": 171, "packagenam": 171, "packagevers": 171, "pythonvers": 171, "pythoncvers": 171, "whl": 171, "tab": [171, 175], "drag": 171, "dvipng": 171, "texliv": 171, "wget": 171, "mirror": [171, 188, 189, 190, 191, 192, 193, 194, 198, 201, 202, 204, 212, 213, 216, 217, 218, 221, 222, 227, 233], "ctan": 171, "dviwar": 171, "unzip": 171, "linux": 171, "pkg": 171, "bewar": [171, 173], "expans": [172, 421], "resiz": [172, 174, 243, 244, 245, 246, 248, 249, 278, 295, 298, 318, 320, 321, 323, 382, 384, 385, 386, 388, 398, 421], "t_map001": 173, "abbrevi": 173, "subject1": 173, "subject2": 173, "wildcard": [173, 174, 242, 293], "unix": [173, 242], "shell": [173, 242], "subject_01": 173, "subject_03": 173, "subject_": 173, "subj1": 173, "resourc": 173, "nilearn_shared_data": [173, 234], "get_head": 173, "memoryerror": 173, "decompress": 173, "uncach": 173, "comma": 173, "aren": 173, "chapter": [174, 175], "swap_img_hemispher": 174, "fslview": 174, "crop": [174, 175, 287], "consumpt": [174, 265, 278, 311, 314, 401], "3x3x3": [174, 223, 225, 390, 392], "diag": [174, 373], "compute_background_mask": [174, 243, 244, 245, 246, 250, 251, 312, 315, 388], "compute_multi_background_mask": [174, 312], "intersect_mask": 174, "restructur": 174, "recip": 174, "swiss": 175, "armi": 175, "knive": 175, "intend": [175, 258, 298, 299], "set_config": 175, "print_changed_onli": 175, "fight": 175, "neuroanatomi": 175, "anisotrop": 175, "convers": [175, 190], "loss_pass": 175, "prespecifi": 175, "abrupt": 175, "transient": 175, "acquis": 175, "saniti": 175, "recast": 175, "excerpt": 175, "disadvantag": 175, "nonpres": 175, "linearli": 175, "nor": 175, "5d": 175, "cov_estim": 180, "ledoitwolf": 180, "store_precis": 180, "discard_diagon": [180, 186], "shrunk": 180, "triangular": [180, 186, 187, 373], "cov_estimator_": 180, "whitening_": 180, "__init__": [180, 181, 182, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 265, 278, 309, 310, 311, 312, 313, 314, 315, 316, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 387, 388, 389, 390, 398], "connectivitymatrix": 180, "n_confound": [180, 289, 403], "vetor": 180, "subobject": [180, 181, 182, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 278, 309, 310, 311, 312, 313, 314, 315, 316, 387, 388, 389, 390], "set_output": [180, 250, 251, 265, 278, 309, 310, 311, 312, 313, 314, 315, 316, 387, 388, 389, 390], "set_param": [180, 181, 182, 243, 244, 245, 246, 247, 248, 249, 250, 251, 265, 278, 309, 310, 311, 312, 313, 314, 315, 316, 387, 388, 389, 390], "aggress": [181, 307, 313, 314, 316], "ndarray": 181, "n_refin": 182, "tol_cv": 182, "max_iter_cv": 182, "phase": 182, "cv_alphas_": 182, "probe_funct": 184, "precisions_init": 184, "dualiti": 184, "prematur": 184, "emp_cov": 184, "vec": 187, "encompass": 187, "cpac": 188, "band_pass_filt": 188, "global_signal_regress": 188, "quality_check": 188, "wrt": [188, 249, 265, 267, 272], "pcp": 188, "css": 188, "dparsf": 188, "niak": 188, "cc": 188, "controversi": 188, "1hz": 188, "alff": 188, "degree_binar": 188, "degree_weight": 188, "dual_regress": 188, "eigenvector_binar": 188, "eigenvector_weight": 188, "falff": 188, "func_mask": 188, "func_mean": 188, "lfcd": 188, "reho": 188, "rois_aal": 188, "rois_cc200": 188, "rois_cc400": 188, "rois_dosenbach160": 188, "rois_ez": 188, "rois_ho": 188, "rois_tt": 188, "vmhc": 188, "rater": 188, "sub_id": 188, "50001": 188, "50607": 188, "dx_group": 188, "dsm_iv_tr": 188, "asperg": 188, "ppd": 188, "NOS": 188, "age_at_scan": 188, "femal": 188, "handedness_categori": 188, "ambi": 188, "ambidextr": 188, "handedness_scor": 188, "resum": [189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 209, 212, 213, 214, 218, 220, 221, 222, 227, 233], "ftp": 189, "htdoc": 189, "adhd200": 189, "adhd200_40sub_preprocess": 189, "tgz": 189, "spm12": 190, "med": 190, "consecut": [190, 192, 194, 200, 203, 204, 387], "5021": 190, "lingual_l": 190, "precentral_l": 190, "spm5": 190, "gin": 190, "cnr": 190, "mialab": 191, "rsn_indic": 191, "mrn": 191, "mstep": 192, "asym": 192, "asymmetr": [192, 213, 214], "homotop": 192, "scale007": 192, "scale012": 192, "scale020": 192, "scale036": 192, "scale122": 192, "scale325": 192, "figshar": 192, "1285615": 192, "scorr_mean": 193, "obj": [193, 388], "emphas": 193, "tcorr_mean": 193, "scorr_2level": 193, "tcorr_2level": 193, "creativ": 193, "commerci": 193, "alik": 193, "creativecommon": 193, "nc": 193, "sa": 193, "cluster_roi": 193, "rec": [194, 206, 207, 208, 268], "pqu9r": 195, "wjvd5": 195, "3vrct": 195, "9b76y": 195, "34792": 195, "atlas_nam": [196, 197], "cortl": 196, "thr50": [196, 197], "strictli": [196, 197], "probabilit": 199, "prepend": [199, 200, 304, 305], "nac": 199, "idx_nac": 199, "r2hvk": 199, "n_roi": 200, "yeo_network": 200, "base_url": 200, "7networks_lh_vis_3": 200, "thomasyeolab": 200, "cbig": 200, "stable_project": 200, "brain_parcel": 200, "schaefer2018_localglob": 200, "update_20190916_readm": 200, "md": 200, "update_yeo2011_schaefer2018_labelnam": 200, "bandwidth": 201, "fmrib": 201, "ox": 201, "sulco": 202, "gryal": 202, "level_nam": 203, "ba": 203, "brodmann": 203, "thin_7": 204, "thin": 204, "colors_7": 204, "thin_17": 204, "colors_17": 204, "tick_7": 204, "tick_17": 204, "surfer": 204, "nmr": 204, "mgh": 204, "fswiki": 204, "corticalparcellation_yeo2011": 204, "downloaded_fil": [205, 215, 228], "ordered_region": [206, 208], "cerebellar": 208, "cinguloopercular": 208, "defaultmod": 208, "dorsalattent": 208, "frontopariet": 208, "medialtemporallob": 208, "parietomedi": 208, "reward": 208, "somatomotordors": 208, "somatomotorlater": 208, "ventralattent": 208, "cortexl": 208, "cortexr": 208, "thalamu": 208, "hippocampu": 208, "basalganglia": 208, "amygdala": 208, "cortexmid": 208, "age_group": 209, "realist": [209, 377, 379, 380, 386], "gender": [209, 227], "handed": 209, "ds000228": 209, "wjtyq": 209, "ucla": [210, 228], "consortium": [210, 228], "neuropsychiatr": [210, 228], "la5c": [210, 228], "urls_path": [210, 229], "fullbrain": 212, "pymvpa": 212, "datadb": 212, "mni152nlin2009csasym": [213, 214], "templateflow": [213, 214], "t2": [213, 366, 419], "t2_relax": 213, "relaxometri": 213, "proton": 213, "eye_mask": 213, "face_mask": 213, "bic": [213, 255], "mcgill": 213, "ca": 213, "servicesatlas": 213, "icbm152nlin2009": 213, "vfonov": 213, "mni_icbm152_nlin_sym_09a_nifti": 213, "tpl": 213, "mni152nlin2009csym": 213, "binary_clos": [214, 236, 239], "gm_mask_img": [214, 236], "particularli": [214, 390], "caller": [216, 217], "get_mask": 218, "get_anat": 218, "vhtf6": 218, "paardigm": 219, "multiple_spatial_regress": 220, "princip": [220, 307], "full_correl": 220, "return_raw_data": 221, "betamap": 221, "make_xi": 221, "153mb": 222, "brainlin": 222, "number_of_imag": 223, "_empty_filt": 223, "image_typ": 223, "is_threshold": 223, "not_mni": 223, "download_new": [223, 225], "kwarg_image_filt": 223, "until": [223, 326], "skim": 223, "basic_collection_term": 223, "empty_filt": 223, "image_metadata": 223, "basic_image_term": 223, "offlin": [223, 225, 421], "regardless": [223, 225, 248], "countvector": [223, 225], "info": [223, 225, 371, 377, 378, 379, 380], "remot": [223, 225], "concis": 223, "_col_filters_available_on_serv": 223, "owner": 223, "modify_d": 223, "auditory_calculation_vs_baselin": 224, "32980": 224, "10426": 226, "dartel_vers": 227, "dartel": 227, "data_usage_agr": 227, "gross": 227, "intracrani": 227, "socioeconom": 227, "dementia": 227, "demand": 227, "dedic": 227, "openli": 227, "usageagr": 227, "vm": 227, "dataset_vers": [228, 229], "patch_openneuro_dataset": 228, "symlink": [228, 241], "data_nam": [230, 231], "ion": [230, 231], "trials_ses1": 231, "trials_ses2": 231, "mmface": 231, "2562": [232, 384], "10242": [232, 371, 384], "40962": [232, 384], "fsaverage7": [232, 384], "163842": [232, 371, 384], "area_left": 232, "gifti": [232, 233], "area_right": 232, "curv_left": 232, "curvatur": 232, "curv_right": 232, "sphere_left": 232, "sphere_right": 232, "thick_left": 232, "thick_right": 232, "white_left": [232, 406], "white_right": 232, "func_right": 233, "gm_mni152_templ": 237, "mni152_templ": 238, "wm_mask_img": 239, "wm_mni152_templ": 240, "file_list": 241, "inclusion_filt": 242, "exclus": [242, 248, 249], "wrapper": [243, 244, 280], "1e4": [243, 244, 245, 246], "logisticregress": [243, 245], "liblinear": [243, 245], "ridgeclassifiercv": [243, 245], "inbuilt": [243, 244, 245, 246], "model_evalu": [243, 244, 245, 246], "scorer": [243, 244, 245, 246], "hertz": [243, 244, 245, 246, 248, 249, 283, 310, 311, 388, 390, 401, 402], "rough": [243, 244, 245, 246, 248, 249, 250, 251, 265, 278, 284, 310, 311, 312, 315, 388, 389, 390], "decision_funct": [243, 244, 245, 246, 248, 249], "learner": [243, 244, 245, 246, 248, 249], "ye": [243, 244, 245, 246], "leavepgroupsout": [243, 244, 245, 246], "classes_": [243, 244, 245, 246, 248, 249], "screening_percentile_": [243, 244, 245, 246, 248, 249], "n_class": [243, 244, 245, 246, 248, 249], "intercept_": [243, 244, 245, 246, 248, 249], "nclass": [243, 244, 245, 246], "cv_": [243, 244, 245, 246, 248, 249], "std_coef_": [243, 244, 245, 246], "std_coef_img_": [243, 244, 245, 246], "inner": [243, 244, 245, 246, 303, 406], "scorer_": [243, 244, 245, 246], "misclassif": [243, 244, 245, 246, 248, 249], "n_outputs_": [243, 244, 245, 246], "dummy_output_": [243, 244, 245, 246], "class_prior": [243, 244, 245, 246], "dummyregressor": [243, 244, 245, 246], "confid": [243, 244, 245, 246, 248, 249, 255, 257, 258], "sample_weight": [243, 244, 245, 246, 249], "neg_mean_squared_error": [244, 246], "trade": [245, 246], "cluster_percentil": [245, 246], "america": 247, "fit_intercept": [248, 249], "hybrid": [248, 249], "mutual": [248, 249], "alpha_min": [248, 249], "alpha_max": [248, 249], "premultipli": 248, "nearli": [248, 249], "debias": [248, 249], "all_coef_": [248, 249], "n_l1_ratio": [248, 249], "alpha_grids_": [248, 249], "best_model_params_": [248, 249], "n_paramet": [248, 249], "n_classes_": 248, "mask_": [248, 249], "memory_": [248, 249], "narrai": [248, 249], "w_": [248, 249], "ymean_": [248, 249], "xmean_": [248, 249], "xstd_": [248, 249], "supported_loss": [248, 249], "supported_penalti": [248, 249], "check_param": [248, 249], "sane": [248, 249], "hyperplan": [248, 249], "qi": [248, 249], "y_true": 249, "disregard": 249, "n_samples_fit": 249, "n_output": [249, 250, 251, 265, 278, 387, 389], "uniform_averag": 249, "multioutputregressor": 249, "do_cca": 250, "6mm": [250, 390], "restart": 250, "recoveri": 250, "1177": 250, "manipulating_imag": [250, 251, 388], "fit_param": [250, 251, 265, 278, 309, 312, 315, 387, 389], "x_new": [250, 251, 265, 278, 309, 312, 315, 387, 389], "n_features_new": [250, 251, 265, 278, 309, 312, 315, 387, 389], "reconstructed_img": [250, 251], "decompositionestim": [250, 251, 388], "squeez": [250, 251, 388], "reduction_ratio": 251, "batch": [251, 387], "lar": 251, "lars_path": 251, "13th": 251, "symposium": 251, "biomed": 251, "1282": 251, "1285": 251, "rho": 252, "likelihoodmodel": [252, 255], "sigma": [252, 255, 256, 257, 258], "whitened_x": [252, 256], "logl": [252, 255, 256, 257, 258], "loglikelihood": [252, 256], "df_model": [252, 255, 256], "loglf": [252, 256], "ell": [252, 256], "hat": [252, 256], "sse": [252, 256, 257, 258], "10000000000": 253, "tini": 253, "dofmax": 253, "breakag": 253, "contrast_dim": 253, "def_dofmax": 253, "underflow": 253, "def_tini": 253, "h0": [253, 326], "df_num": [254, 255, 257, 258], "df_den": [254, 255, 257, 258, 259], "theta": [255, 257, 258], "aic": 255, "llf": 255, "wald": [255, 257, 258], "vcov": [255, 257, 258], "sd": [255, 257, 258, 259], "tcontrastresult": [255, 257, 258], "fcontrast": [255, 257, 258], "invcov": [255, 257, 258], "px": [255, 257, 258], "f_re": [255, 257, 258], "fcontrastresult": [255, 257, 258], "conf_int": [255, 257, 258], "col": [255, 257, 258], "standard_norm": [255, 257, 258], "stan": [255, 257, 258], "confidence_interv": [255, 257, 258], "whitened_design": 256, "calc_beta": 256, "moor": 256, "penros": 256, "pseudoinvers": 256, "normalized_cov_beta": 256, "df_residu": 256, "__init___": 256, "wlsmodel": 256, "armodel": 256, "whitened_i": 257, "whitened_residu": 257, "normalized_residu": [257, 258], "stanard": [257, 258], "d_i": [257, 258], "e_i": [257, 258], "ms_e": [257, 258], "presum": [260, 281], "dsicoveri": 260, "regression_result": 261, "con_val": 261, "con": 261, "precision_weight": 262, "fixed_fx_contrast_img": 262, "fixed_fx_variance_img": 262, "fixed_fx_t_img": 262, "z_val": 264, "min_onset": [265, 267, 268, 272], "plu": [265, 267, 272], "spm_time_deriv": [265, 267, 272], "idem": [265, 267, 272], "spm_dispersion_deriv": [265, 267, 272], "glover_hrf": [265, 267, 272], "glover_time_deriv": [265, 267, 272], "glover_dispersion_deriv": [265, 267, 272], "dirac": [265, 267, 272], "n_onset": [265, 272], "rid": [265, 278], "labels_": [265, 387, 389], "results_": 265, "array_lik": [265, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 372], "histogram": [265, 274, 320, 323, 370], "quantif": [265, 274], "contrast_def": [265, 278, 364, 400], "t_map": [265, 278], "n_col": [265, 278, 280, 305, 364], "eval": [265, 278, 364], "report_dim": [265, 278, 400], "htmlreport": [265, 278, 311, 314, 390, 400], "standalon": [265, 278, 400], "ce": [265, 268, 278, 400], "autogener": [265, 278, 400], "subpeak": [265, 278, 399, 400], "report_text": [265, 278, 400], "voxelwis": [265, 278], "triplet": [266, 267, 316, 385], "n_frame": [266, 272], "n_regressor": [266, 274, 280, 326], "n_event": [266, 267, 272], "computed_regressor": 267, "n_reg": 267, "reg_nam": 267, "dataset_path": 268, "alongsid": 268, "_space": 268, "acq": 268, "dir": [268, 303], "den": 268, "pa": 268, "dhrf": [269, 271, 275, 277], "n_add_reg": 272, "reg_i": 272, "frames_tim": 272, "map_nam": [278, 280], "effects_map_path": [278, 280], "liter": [278, 280], "second_level_stat_typ": 278, "output_imag": 278, "unsign": [280, 326], "neg_log10_vfwe_pvals_img": 280, "explanatori": [280, 326], "n_descriptor": [280, 326], "prescrib": 281, "rigor": 281, "anatomical_imag": [282, 294], "brainmask": 282, "instant": [283, 402], "ensure_ndim": 284, "img_copi": 286, "rtol": 287, "return_offset": 287, "Will": [287, 331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363], "croppabl": 287, "toggl": 287, "x1_pre": 287, "x1_post": 287, "x2_pre": 287, "x2_post": 287, "xn_pre": 287, "xn_post": 287, "number_of_scan": 289, "joint_mni_imag": 290, "single_mni_imag": 290, "five_mni_imag": 290, "first_three_imag": 290, "imcal": 294, "fslmath": 294, "log_img": 294, "ref_niimg": 296, "copy_head": 296, "imposs": 297, "fill_valu": [298, 299], "force_resampl": [298, 299], "extrapol": 298, "prevent": [298, 299, 318, 319, 320, 322, 323], "optimz": [298, 299], "boundingboxerror": 298, "crop_img": 298, "infinit": 298, "gracefulli": 298, "source_img": 299, "target_img": [299, 319, 322], "arr": 300, "normalis": 300, "filtered_img": 300, "synchron": 301, "sagit": 301, "caution": 301, "radio": 301, "main_path": 303, "file_tag": [303, 304], "file_typ": [303, 304], "sub_label": 303, "modality_fold": 303, "sub_fold": 303, "se": 303, "ap": 303, "file_path": 304, "file_basenam": 304, "file_field": 304, "_tag": 304, "revis": 304, "parser": 304, "statmap": 305, "_stat": 305, "_statmap": 305, "_design": 305, "img_fil": [306, 307], "anat_combin": [306, 307], "n_compcor": [306, 307], "dtseri": [306, 307], "compli": 306, "non_steady_st": 306, "power2": 306, "quadrat": 306, "power2d": 306, "excess": 306, "temov": 306, "var": 306, "anat_separ": 306, "temporal_anat_combin": 306, "temporal_anat_separ": 306, "acompcor_combin": 306, "smootharomanonaggr_bold": [306, 307], "nifitmask": 306, "srub": 307, "denois": 307, "physiologi": 307, "suffer": 307, "aggres": 307, "suffix": 307, "mni152nlin6asym": 307, "niprep": 307, "region_sign": [309, 310, 311, 312, 313, 314, 315, 316, 388, 390, 394, 397], "imgs_list": [309, 310, 311, 312, 315], "transform_img": [310, 311, 312], "unus": [310, 311, 312, 313, 314, 315, 316], "html_report": [311, 314, 390], "voxel_sign": [311, 314, 316, 390], "multipca": 312, "affine_": [312, 315], "maps_img_": 314, "seeds_": 316, "throw": 316, "session_seri": 317, "data_img": [318, 321], "border_s": [318, 321], "binary_eros": [318, 319, 320, 322, 323], "exclude_zero": [320, 321, 323], "fraction": [320, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 406], "reslic": [320, 323], "grp_mask": 324, "ndim": 325, "target_var": 326, "confounding_var": 326, "legaci": 326, "criterion": [326, 389], "amongst": [326, 419], "n_covar": 326, "pval": 326, "score_orig_data": 326, "h0_max_t": 326, "h0_max_tfc": 326, "h0_max_siz": 326, "h0_max_mass": 326, "mpl": [327, 329, 330], "transform_to_2d": [327, 329, 330], "add_object_bound": [327, 329, 330], "draw_2d": [327, 329, 330], "data_bound": [327, 329, 330], "bounding_box": [327, 329, 330], "get_object_bound": [327, 329, 330], "draw_left_right": [327, 329, 330], "bg_color": [327, 329, 330], "draw_scale_bar": [327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "fontproperti": [327, 329, 330], "borderpad": [327, 329, 330], "size_vert": [327, 329, 330], "label_top": [327, 329, 330], "font": [327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 377, 379, 380], "anchoredoffsetbox": [327, 329, 330], "draw_posit": [327, 329, 330], "brain_color": [328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "frame_ax": [328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "subdivid": [328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "find_cut_coord": [328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "classmethod": [328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "init_with_figur": [328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "leave_spac": [328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "bgcolor": [328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "2g": [328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 366, 368, 369, 375, 376, 377, 379, 380], "cbar_vmin": [328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 377], "cbar_vmax": [328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 377], "contour_fil": [328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "add_edg": [328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 419], "n_marker": [328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "left_right": [328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "scale_loc": [328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "leak": [328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "dpi": [328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "inch": [328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "schemat": [330, 363, 368, 372], "glassbrainax": [331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353], "add_graph": [331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353], "linearsegmentedcolormap": [331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 361, 362, 363, 366, 373, 374, 375, 376, 382, 383, 384, 386], "edge_kwarg": [331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363], "node_kwarg": [331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363, 372], "undirect": [331, 332, 333, 334, 335, 336, 338, 341, 343, 345, 347, 349, 351, 353, 363], "draw_cross": [331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 361, 366, 369, 374, 375, 376, 383], "crossbar": [331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "cutax": [344, 346, 348, 350, 352, 354], "baseslic": 356, "img_length": 357, "return_label_nam": 358, "label_hemispher": 358, "labels_list": 358, "n_map": 359, "activation_threshold": 360, "tupleof": [361, 362, 363, 366, 368, 369, 372, 374, 375, 376], "ymin": [361, 362, 363, 366, 368, 369, 372, 374, 375, 376], "pronounc": [361, 374, 375, 376, 383], "get_zoom": 362, "matlotlib": 363, "nipy_spectr": 366, "model_ev": 367, "fig_kwarg": 367, "event_typ": 367, "stat_map_img": [368, 376, 383, 384], "symmetric_cbar": [368, 376, 380], "destin": [368, 369, 375, 376, 383], "noisier": [368, 369, 375, 376, 383], "ref_img": 370, "src_img": 370, "plot_hist": 370, "output_dir": 370, "superimpos": 370, "nifti_lik": 370, "montag": 371, "node_valu": 372, "listedcolormap": 372, "node_vmin": 372, "node_vmax": 372, "node_threshold": 372, "viridis_r": 372, "auto_fit": 373, "newli": 373, "room": 373, "linkag": 373, "sent": 373, "gist_rainbow": 374, "surf_map": [377, 386], "title_font_s": [377, 379, 380], "orig": [377, 378, 379, 380, 386, 405, 406], "sulc": [377, 380, 386, 404], "underneath": [377, 379, 380, 386], "surf_data": [377, 379, 380, 386, 404, 406], "greyscal": [377, 379, 380, 386], "sharp": [377, 419], "apply_along_axi": 377, "custom_funct": 377, "beneath": [377, 379, 380], "subplot_kw": [377, 378, 379, 380], "tab20": 378, "rgba": [378, 385], "agg": 381, "emit": 381, "colorbar_height": [382, 384, 386], "colorbar_fonts": [382, 384, 386], "title_fonts": [382, 384, 385, 386], "n_node": [382, 385], "connectomeview": [382, 385], "opac": 383, "th": 383, "opaqu": 383, "html_view": [383, 419], "plane": 383, "surfaceview": [384, 386], "hex": 385, "gnist_ncar": 386, "max_no_improv": 387, "smart": 387, "k_init": 387, "centroid": 387, "mini": 387, "inertia": 387, "reassign": 387, "sizes_": [387, 389], "x_red": [387, 389], "x_inv": [387, 389], "fit_predict": [387, 389], "connectivity_": 388, "valid_method": 388, "eccentr": [389, 395], "n_clusters_": 389, "27mm": [390, 392], "1350mm": [390, 392], "img_valu": 390, "connected_compon": [390, 392], "ly": 390, "min_siz": 391, "new_labels_img": 391, "new_label": 391, "extract_typ": 392, "_smooth_arrai": 392, "index_of_each_map": 392, "signals_to_img_label": [393, 397], "img_to_signals_map": [393, 397], "signals_to_img_map": [394, 396], "head_tpl": 398, "head_valu": 398, "html_document": 398, "htmldocument": 398, "get_ifram": 398, "get_standalon": 398, "temp_file_lifetim": 398, "temporari": 398, "remove_temp_fil": 398, "letter": 399, "destination_path": 400, "sampling_r": 401, "n_sourc": 401, "decai": 401, "ring": 401, "sharpen": 401, "inplac": 401, "filtered_sign": 401, "cleaned_sign": 402, "namedtupl": [405, 406], "neighbourhood": 406, "trilinear": 406, "x20": 406, "regularli": 406, "halfwai": 406, "inward": 406, "surface_mesh": 406, "neighbour": 406, "tour": 419, "canni": 419, "purple_green": 419, "alia": 419, "pretty_brain": 419, "emb": 419, "surface_plot": 419, "cyan": 419, "orang": 419, "simexp": 419, "offici": 420, "miniconda": 420, "path_to_new_env": 420, "bat": 420, "prompt": 420, "discord": 420, "anyon": 420, "engag": 420, "grad": 421, "biologi": 421, "throughout": 421}, "objects": {"nilearn": [[176, 0, 0, "-", "connectome"], [177, 0, 0, "-", "datasets"], [178, 0, 0, "-", "decoding"], [179, 0, 0, "-", "decomposition"], [407, 0, 0, "-", "glm"], [408, 0, 0, "-", "image"], [410, 0, 0, "-", "interfaces"], [411, 0, 0, "-", "maskers"], [412, 0, 0, "-", "masking"], [413, 0, 0, "-", "mass_univariate"], [414, 0, 0, "-", "plotting"], [415, 0, 0, "-", "regions"], [416, 0, 0, "-", "reporting"], [417, 0, 0, "-", "signal"], [418, 0, 0, "-", "surface"]], "nilearn.connectome": [[180, 1, 1, "", "ConnectivityMeasure"], [181, 1, 1, "", "GroupSparseCovariance"], [182, 1, 1, "", "GroupSparseCovarianceCV"], [183, 3, 1, "", "cov_to_corr"], [184, 3, 1, "", "group_sparse_covariance"], [185, 3, 1, "", "prec_to_partial"], [186, 3, 1, "", "sym_matrix_to_vec"], [187, 3, 1, "", "vec_to_sym_matrix"]], "nilearn.connectome.ConnectivityMeasure": [[180, 2, 1, "", "__init__"], [180, 2, 1, "", "fit"], [180, 2, 1, "", "fit_transform"], [180, 2, 1, "", "get_params"], [180, 2, 1, "", "inverse_transform"], [180, 2, 1, "", "set_output"], [180, 2, 1, "", "set_params"], [180, 2, 1, "", "transform"]], "nilearn.connectome.GroupSparseCovariance": [[181, 2, 1, "", "__init__"], [181, 2, 1, "", "fit"], [181, 2, 1, "", "get_params"], [181, 2, 1, "", "set_params"]], "nilearn.connectome.GroupSparseCovarianceCV": [[182, 2, 1, "", "__init__"], [182, 2, 1, "", "fit"], [182, 2, 1, "", "get_params"], [182, 2, 1, "", "set_params"]], "nilearn.datasets": [[188, 3, 1, "", "fetch_abide_pcp"], [189, 3, 1, "", "fetch_adhd"], [190, 3, 1, "", "fetch_atlas_aal"], [191, 3, 1, "", "fetch_atlas_allen_2011"], [192, 3, 1, "", "fetch_atlas_basc_multiscale_2015"], [193, 3, 1, "", "fetch_atlas_craddock_2012"], [194, 3, 1, "", "fetch_atlas_destrieux_2009"], [195, 3, 1, "", "fetch_atlas_difumo"], [196, 3, 1, "", "fetch_atlas_harvard_oxford"], [197, 3, 1, "", "fetch_atlas_juelich"], [198, 3, 1, "", "fetch_atlas_msdl"], [199, 3, 1, "", "fetch_atlas_pauli_2017"], [200, 3, 1, "", "fetch_atlas_schaefer_2018"], [201, 3, 1, "", "fetch_atlas_smith_2009"], [202, 3, 1, "", "fetch_atlas_surf_destrieux"], [203, 3, 1, "", "fetch_atlas_talairach"], [204, 3, 1, "", "fetch_atlas_yeo_2011"], [205, 3, 1, "", "fetch_bids_langloc_dataset"], [206, 3, 1, "", "fetch_coords_dosenbach_2010"], [207, 3, 1, "", "fetch_coords_power_2011"], [208, 3, 1, "", "fetch_coords_seitzman_2018"], [209, 3, 1, "", "fetch_development_fmri"], [210, 3, 1, "", "fetch_ds000030_urls"], [211, 3, 1, "", "fetch_fiac_first_level"], [212, 3, 1, "", "fetch_haxby"], [213, 3, 1, "", "fetch_icbm152_2009"], [214, 3, 1, "", "fetch_icbm152_brain_gm_mask"], [215, 3, 1, "", "fetch_language_localizer_demo_dataset"], [216, 3, 1, "", "fetch_localizer_button_task"], [217, 3, 1, "", "fetch_localizer_calculation_task"], [218, 3, 1, "", "fetch_localizer_contrasts"], [219, 3, 1, "", "fetch_localizer_first_level"], [220, 3, 1, "", "fetch_megatrawls_netmats"], [221, 3, 1, "", "fetch_mixed_gambles"], [222, 3, 1, "", "fetch_miyawaki2008"], [223, 3, 1, "", "fetch_neurovault"], [224, 3, 1, "", "fetch_neurovault_auditory_computation_task"], [225, 3, 1, "", "fetch_neurovault_ids"], [226, 3, 1, "", "fetch_neurovault_motor_task"], [227, 3, 1, "", "fetch_oasis_vbm"], [228, 3, 1, "", "fetch_openneuro_dataset"], [229, 3, 1, "", "fetch_openneuro_dataset_index"], [230, 3, 1, "", "fetch_spm_auditory"], [231, 3, 1, "", "fetch_spm_multimodal_fmri"], [232, 3, 1, "", "fetch_surf_fsaverage"], [233, 3, 1, "", "fetch_surf_nki_enhanced"], [234, 3, 1, "", "get_data_dirs"], [235, 3, 1, "", "load_mni152_brain_mask"], [236, 3, 1, "", "load_mni152_gm_mask"], [237, 3, 1, "", "load_mni152_gm_template"], [238, 3, 1, "", "load_mni152_template"], [239, 3, 1, "", "load_mni152_wm_mask"], [240, 3, 1, "", "load_mni152_wm_template"], [241, 3, 1, "", "patch_openneuro_dataset"], [242, 3, 1, "", "select_from_index"]], "nilearn.decoding": [[243, 1, 1, "", "Decoder"], [244, 1, 1, "", "DecoderRegressor"], [245, 1, 1, "", "FREMClassifier"], [246, 1, 1, "", "FREMRegressor"], [247, 1, 1, "", "SearchLight"], [248, 1, 1, "", "SpaceNetClassifier"], [249, 1, 1, "", "SpaceNetRegressor"]], "nilearn.decoding.Decoder": [[243, 2, 1, "", "__init__"], [243, 2, 1, "", "decision_function"], [243, 2, 1, "", "fit"], [243, 2, 1, "", "get_params"], [243, 2, 1, "", "predict"], [243, 2, 1, "", "score"], [243, 2, 1, "", "set_params"]], "nilearn.decoding.DecoderRegressor": [[244, 2, 1, "", "__init__"], [244, 2, 1, "", "decision_function"], [244, 2, 1, "", "fit"], [244, 2, 1, "", "get_params"], [244, 2, 1, "", "predict"], [244, 2, 1, "", "score"], [244, 2, 1, "", "set_params"]], "nilearn.decoding.FREMClassifier": [[245, 2, 1, "", "__init__"], [245, 2, 1, "", "decision_function"], [245, 2, 1, "", "fit"], [245, 2, 1, "", "get_params"], [245, 2, 1, "", "predict"], [245, 2, 1, "", "score"], [245, 2, 1, "", "set_params"]], "nilearn.decoding.FREMRegressor": [[246, 2, 1, "", "__init__"], [246, 2, 1, "", "decision_function"], [246, 2, 1, "", "fit"], [246, 2, 1, "", "get_params"], [246, 2, 1, "", "predict"], [246, 2, 1, "", "score"], [246, 2, 1, "", "set_params"]], "nilearn.decoding.SearchLight": [[247, 2, 1, "", "__init__"], [247, 2, 1, "", "fit"], [247, 2, 1, "", "get_params"], [247, 2, 1, "", "set_params"]], "nilearn.decoding.SpaceNetClassifier": [[248, 4, 1, "", "SUPPORTED_LOSSES"], [248, 4, 1, "", "SUPPORTED_PENALTIES"], [248, 2, 1, "", "__init__"], [248, 2, 1, "", "check_params"], [248, 2, 1, "", "decision_function"], [248, 2, 1, "", "fit"], [248, 2, 1, "", "get_params"], [248, 2, 1, "", "predict"], [248, 2, 1, "", "score"], [248, 2, 1, "", "set_params"]], "nilearn.decoding.SpaceNetRegressor": [[249, 4, 1, "", "SUPPORTED_LOSSES"], [249, 4, 1, "", "SUPPORTED_PENALTIES"], [249, 2, 1, "", "__init__"], [249, 2, 1, "", "check_params"], [249, 2, 1, "", "decision_function"], [249, 2, 1, "", "fit"], [249, 2, 1, "", "get_params"], [249, 2, 1, "", "predict"], [249, 2, 1, "", "score"], [249, 2, 1, "", "set_params"]], "nilearn.decomposition": [[250, 1, 1, "", "CanICA"], [251, 1, 1, "", "DictLearning"]], "nilearn.decomposition.CanICA": [[250, 2, 1, "", "__init__"], [250, 2, 1, "", "fit"], [250, 2, 1, "", "fit_transform"], [250, 2, 1, "", "get_params"], [250, 2, 1, "", "inverse_transform"], [250, 2, 1, "", "score"], [250, 2, 1, "", "set_output"], [250, 2, 1, "", "set_params"], [250, 2, 1, "", "transform"]], "nilearn.decomposition.DictLearning": [[251, 2, 1, "", "__init__"], [251, 2, 1, "", "fit"], [251, 2, 1, "", "fit_transform"], [251, 2, 1, "", "get_params"], [251, 2, 1, "", "inverse_transform"], [251, 2, 1, "", "score"], [251, 2, 1, "", "set_output"], [251, 2, 1, "", "set_params"], [251, 2, 1, "", "transform"]], "nilearn.glm": [[252, 1, 1, "", "ARModel"], [253, 1, 1, "", "Contrast"], [254, 1, 1, "", "FContrastResults"], [255, 1, 1, "", "LikelihoodModelResults"], [256, 1, 1, "", "OLSModel"], [257, 1, 1, "", "RegressionResults"], [258, 1, 1, "", "SimpleRegressionResults"], [259, 1, 1, "", "TContrastResults"], [260, 3, 1, "", "cluster_level_inference"], [261, 3, 1, "", "compute_contrast"], [262, 3, 1, "", "compute_fixed_effects"], [263, 3, 1, "", "expression_to_contrast_vector"], [264, 3, 1, "", "fdr_threshold"], [407, 0, 0, "-", "first_level"], [407, 0, 0, "-", "second_level"], [281, 3, 1, "", "threshold_stats_img"]], "nilearn.glm.ARModel": [[252, 2, 1, "", "__init__"], [252, 2, 1, "", "fit"], [252, 2, 1, "", "initialize"], [252, 2, 1, "", "logL"], [252, 2, 1, "", "whiten"]], "nilearn.glm.Contrast": [[253, 2, 1, "", "__init__"], [253, 2, 1, "", "effect_size"], [253, 2, 1, "", "effect_variance"], [253, 2, 1, "", "one_minus_pvalue"], [253, 2, 1, "", "p_value"], [253, 2, 1, "", "stat"], [253, 2, 1, "", "z_score"]], "nilearn.glm.FContrastResults": [[254, 2, 1, "", "__init__"]], "nilearn.glm.LikelihoodModelResults": [[255, 2, 1, "", "Fcontrast"], [255, 2, 1, "", "Tcontrast"], [255, 2, 1, "", "__init__"], [255, 2, 1, "", "conf_int"], [255, 2, 1, "", "logL"], [255, 2, 1, "", "t"], [255, 2, 1, "", "vcov"]], "nilearn.glm.OLSModel": [[256, 2, 1, "", "__init__"], [256, 2, 1, "", "fit"], [256, 2, 1, "", "initialize"], [256, 2, 1, "", "logL"], [256, 2, 1, "", "whiten"]], "nilearn.glm.RegressionResults": [[257, 2, 1, "", "Fcontrast"], [257, 2, 1, "", "MSE"], [257, 2, 1, "", "SSE"], [257, 2, 1, "", "Tcontrast"], [257, 2, 1, "", "__init__"], [257, 2, 1, "", "conf_int"], [257, 2, 1, "", "logL"], [257, 2, 1, "", "normalized_residuals"], [257, 2, 1, "", "predicted"], [257, 2, 1, "", "r_square"], [257, 2, 1, "", "residuals"], [257, 2, 1, "", "t"], [257, 2, 1, "", "vcov"]], "nilearn.glm.SimpleRegressionResults": [[258, 2, 1, "", "Fcontrast"], [258, 2, 1, "", "Tcontrast"], [258, 2, 1, "", "__init__"], [258, 2, 1, "", "conf_int"], [258, 2, 1, "", "logL"], [258, 2, 1, "", "normalized_residuals"], [258, 2, 1, "", "predicted"], [258, 2, 1, "", "residuals"], [258, 2, 1, "", "t"], [258, 2, 1, "", "vcov"]], "nilearn.glm.TContrastResults": [[259, 2, 1, "", "__init__"]], "nilearn.glm.first_level": [[265, 1, 1, "", "FirstLevelModel"], [266, 3, 1, "", "check_design_matrix"], [267, 3, 1, "", "compute_regressor"], [268, 3, 1, "", "first_level_from_bids"], [269, 3, 1, "", "glover_dispersion_derivative"], [270, 3, 1, "", "glover_hrf"], [271, 3, 1, "", "glover_time_derivative"], [272, 3, 1, "", "make_first_level_design_matrix"], [273, 3, 1, "", "mean_scaling"], [274, 3, 1, "", "run_glm"], [275, 3, 1, "", "spm_dispersion_derivative"], [276, 3, 1, "", "spm_hrf"], [277, 3, 1, "", "spm_time_derivative"]], "nilearn.glm.first_level.FirstLevelModel": [[265, 2, 1, "", "__init__"], [265, 2, 1, "", "compute_contrast"], [265, 2, 1, "", "fit"], [265, 2, 1, "", "fit_transform"], [265, 2, 1, "", "generate_report"], [265, 2, 1, "", "get_params"], [265, 2, 1, "", "predicted"], [265, 2, 1, "", "r_square"], [265, 2, 1, "", "residuals"], [265, 5, 1, "", "scaling_axis"], [265, 2, 1, "", "set_output"], [265, 2, 1, "", "set_params"]], "nilearn.glm.second_level": [[278, 1, 1, "", "SecondLevelModel"], [279, 3, 1, "", "make_second_level_design_matrix"], [280, 3, 1, "", "non_parametric_inference"]], "nilearn.glm.second_level.SecondLevelModel": [[278, 2, 1, "", "__init__"], [278, 2, 1, "", "compute_contrast"], [278, 2, 1, "", "fit"], [278, 2, 1, "", "fit_transform"], [278, 2, 1, "", "generate_report"], [278, 2, 1, "", "get_params"], [278, 2, 1, "", "predicted"], [278, 2, 1, "", "r_square"], [278, 2, 1, "", "residuals"], [278, 2, 1, "", "set_output"], [278, 2, 1, "", "set_params"]], "nilearn.image": [[282, 3, 1, "", "binarize_img"], [283, 3, 1, "", "clean_img"], [284, 3, 1, "", "concat_imgs"], [285, 3, 1, "", "coord_transform"], [286, 3, 1, "", "copy_img"], [287, 3, 1, "", "crop_img"], [288, 3, 1, "", "get_data"], [289, 3, 1, "", "high_variance_confounds"], [290, 3, 1, "", "index_img"], [291, 3, 1, "", "iter_img"], [292, 3, 1, "", "largest_connected_component_img"], [293, 3, 1, "", "load_img"], [294, 3, 1, "", "math_img"], [295, 3, 1, "", "mean_img"], [296, 3, 1, "", "new_img_like"], [297, 3, 1, "", "reorder_img"], [298, 3, 1, "", "resample_img"], [299, 3, 1, "", "resample_to_img"], [300, 3, 1, "", "smooth_img"], [301, 3, 1, "", "swap_img_hemispheres"], [302, 3, 1, "", "threshold_img"]], "nilearn.interfaces": [[410, 0, 0, "-", "bids"], [410, 0, 0, "-", "fmriprep"], [410, 0, 0, "-", "fsl"]], "nilearn.interfaces.bids": [[303, 3, 1, "", "get_bids_files"], [304, 3, 1, "", "parse_bids_filename"], [305, 3, 1, "", "save_glm_to_bids"]], "nilearn.interfaces.fmriprep": [[306, 3, 1, "", "load_confounds"], [307, 3, 1, "", "load_confounds_strategy"]], "nilearn.interfaces.fsl": [[308, 3, 1, "", "get_design_from_fslmat"]], "nilearn.maskers": [[309, 1, 1, "", "BaseMasker"], [310, 1, 1, "", "MultiNiftiLabelsMasker"], [311, 1, 1, "", "MultiNiftiMapsMasker"], [312, 1, 1, "", "MultiNiftiMasker"], [313, 1, 1, "", "NiftiLabelsMasker"], [314, 1, 1, "", "NiftiMapsMasker"], [315, 1, 1, "", "NiftiMasker"], [316, 1, 1, "", "NiftiSpheresMasker"]], "nilearn.maskers.BaseMasker": [[309, 2, 1, "", "__init__"], [309, 2, 1, "", "fit_transform"], [309, 2, 1, "", "get_params"], [309, 2, 1, "", "inverse_transform"], [309, 2, 1, "", "set_output"], [309, 2, 1, "", "set_params"], [309, 2, 1, "", "transform"], [309, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[310, 2, 1, "", "__init__"], [310, 2, 1, "", "fit"], [310, 2, 1, "", "fit_transform"], [310, 2, 1, "", "generate_report"], [310, 2, 1, "", "get_params"], [310, 2, 1, "", "inverse_transform"], [310, 2, 1, "", "set_output"], [310, 2, 1, "", "set_params"], [310, 2, 1, "", "transform"], [310, 2, 1, "", "transform_imgs"], [310, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMapsMasker": [[311, 2, 1, "", "__init__"], [311, 2, 1, "", "fit"], [311, 2, 1, "", "fit_transform"], [311, 2, 1, "", "generate_report"], [311, 2, 1, "", "get_params"], [311, 2, 1, "", "inverse_transform"], [311, 2, 1, "", "set_output"], [311, 2, 1, "", "set_params"], [311, 2, 1, "", "transform"], [311, 2, 1, "", "transform_imgs"], [311, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMasker": [[312, 2, 1, "", "__init__"], [312, 2, 1, "", "fit"], [312, 2, 1, "", "fit_transform"], [312, 2, 1, "", "generate_report"], [312, 2, 1, "", "get_params"], [312, 2, 1, "", "inverse_transform"], [312, 2, 1, "", "set_output"], [312, 2, 1, "", "set_params"], [312, 2, 1, "", "transform"], [312, 2, 1, "", "transform_imgs"], [312, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiLabelsMasker": [[313, 2, 1, "", "__init__"], [313, 2, 1, "", "fit"], [313, 2, 1, "", "fit_transform"], [313, 2, 1, "", "generate_report"], [313, 2, 1, "", "get_params"], [313, 2, 1, "", "inverse_transform"], [313, 2, 1, "", "set_output"], [313, 2, 1, "", "set_params"], [313, 2, 1, "", "transform"], [313, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMapsMasker": [[314, 2, 1, "", "__init__"], [314, 2, 1, "", "fit"], [314, 2, 1, "", "fit_transform"], [314, 2, 1, "", "generate_report"], [314, 2, 1, "", "get_params"], [314, 2, 1, "", "inverse_transform"], [314, 2, 1, "", "set_output"], [314, 2, 1, "", "set_params"], [314, 2, 1, "", "transform"], [314, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMasker": [[315, 2, 1, "", "__init__"], [315, 2, 1, "", "fit"], [315, 2, 1, "", "fit_transform"], [315, 2, 1, "", "generate_report"], [315, 2, 1, "", "get_params"], [315, 2, 1, "", "inverse_transform"], [315, 2, 1, "", "set_output"], [315, 2, 1, "", "set_params"], [315, 2, 1, "", "transform"], [315, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiSpheresMasker": [[316, 2, 1, "", "__init__"], [316, 2, 1, "", "fit"], [316, 2, 1, "", "fit_transform"], [316, 2, 1, "", "get_params"], [316, 2, 1, "", "inverse_transform"], [316, 2, 1, "", "set_output"], [316, 2, 1, "", "set_params"], [316, 2, 1, "", "transform"], [316, 2, 1, "", "transform_single_imgs"]], "nilearn.masking": [[317, 3, 1, "", "apply_mask"], [318, 3, 1, "", "compute_background_mask"], [319, 3, 1, "", "compute_brain_mask"], [320, 3, 1, "", "compute_epi_mask"], [321, 3, 1, "", "compute_multi_background_mask"], [322, 3, 1, "", "compute_multi_brain_mask"], [323, 3, 1, "", "compute_multi_epi_mask"], [324, 3, 1, "", "intersect_masks"], [325, 3, 1, "", "unmask"]], "nilearn.mass_univariate": [[326, 3, 1, "", "permuted_ols"]], "nilearn.plotting": [[414, 0, 0, "-", "displays"], [357, 3, 1, "", "find_cut_slices"], [358, 3, 1, "", "find_parcellation_cut_coords"], [359, 3, 1, "", "find_probabilistic_atlas_cut_coords"], [360, 3, 1, "", "find_xyz_cut_coords"], [361, 3, 1, "", "plot_anat"], [362, 3, 1, "", "plot_carpet"], [363, 3, 1, "", "plot_connectome"], [364, 3, 1, "", "plot_contrast_matrix"], [365, 3, 1, "", "plot_design_matrix"], [366, 3, 1, "", "plot_epi"], [367, 3, 1, "", "plot_event"], [368, 3, 1, "", "plot_glass_brain"], [369, 3, 1, "", "plot_img"], [370, 3, 1, "", "plot_img_comparison"], [371, 3, 1, "", "plot_img_on_surf"], [372, 3, 1, "", "plot_markers"], [373, 3, 1, "", "plot_matrix"], [374, 3, 1, "", "plot_prob_atlas"], [375, 3, 1, "", "plot_roi"], [376, 3, 1, "", "plot_stat_map"], [377, 3, 1, "", "plot_surf"], [378, 3, 1, "", "plot_surf_contours"], [379, 3, 1, "", "plot_surf_roi"], [380, 3, 1, "", "plot_surf_stat_map"], [381, 3, 1, "", "show"], [382, 3, 1, "", "view_connectome"], [383, 3, 1, "", "view_img"], [384, 3, 1, "", "view_img_on_surf"], [385, 3, 1, "", "view_markers"], [386, 3, 1, "", "view_surf"]], "nilearn.plotting.displays": [[327, 1, 1, "", "BaseAxes"], [328, 1, 1, "", "BaseSlicer"], [329, 1, 1, "", "CutAxes"], [330, 1, 1, "", "GlassBrainAxes"], [331, 1, 1, "", "LProjector"], [332, 1, 1, "", "LRProjector"], [333, 1, 1, "", "LYRProjector"], [334, 1, 1, "", "LYRZProjector"], [335, 1, 1, "", "LZRProjector"], [336, 1, 1, "", "LZRYProjector"], [337, 1, 1, "", "MosaicSlicer"], [338, 1, 1, "", "OrthoProjector"], [339, 1, 1, "", "OrthoSlicer"], [340, 1, 1, "", "PlotlySurfaceFigure"], [341, 1, 1, "", "RProjector"], [342, 1, 1, "", "TiledSlicer"], [343, 1, 1, "", "XProjector"], [344, 1, 1, "", "XSlicer"], [345, 1, 1, "", "XZProjector"], [346, 1, 1, "", "XZSlicer"], [347, 1, 1, "", "YProjector"], [348, 1, 1, "", "YSlicer"], [349, 1, 1, "", "YXProjector"], [350, 1, 1, "", "YXSlicer"], [351, 1, 1, "", "YZProjector"], [352, 1, 1, "", "YZSlicer"], [353, 1, 1, "", "ZProjector"], [354, 1, 1, "", "ZSlicer"], [355, 3, 1, "", "get_projector"], [356, 3, 1, "", "get_slicer"]], "nilearn.plotting.displays.BaseAxes": [[327, 2, 1, "", "__init__"], [327, 2, 1, "", "add_object_bounds"], [327, 2, 1, "", "draw_2d"], [327, 2, 1, "", "draw_left_right"], [327, 2, 1, "", "draw_position"], [327, 2, 1, "", "draw_scale_bar"], [327, 2, 1, "", "get_object_bounds"], [327, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.BaseSlicer": [[328, 2, 1, "", "__init__"], [328, 2, 1, "", "add_contours"], [328, 2, 1, "", "add_edges"], [328, 2, 1, "", "add_markers"], [328, 2, 1, "", "add_overlay"], [328, 2, 1, "", "annotate"], [328, 5, 1, "", "black_bg"], [328, 5, 1, "", "brain_color"], [328, 2, 1, "", "close"], [328, 2, 1, "", "find_cut_coords"], [328, 2, 1, "", "init_with_figure"], [328, 2, 1, "", "savefig"], [328, 2, 1, "", "title"]], "nilearn.plotting.displays.CutAxes": [[329, 2, 1, "", "__init__"], [329, 2, 1, "", "add_object_bounds"], [329, 2, 1, "", "draw_2d"], [329, 2, 1, "", "draw_left_right"], [329, 2, 1, "", "draw_position"], [329, 2, 1, "", "draw_scale_bar"], [329, 2, 1, "", "get_object_bounds"], [329, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.GlassBrainAxes": [[330, 2, 1, "", "__init__"], [330, 2, 1, "", "add_object_bounds"], [330, 2, 1, "", "draw_2d"], [330, 2, 1, "", "draw_left_right"], [330, 2, 1, "", "draw_position"], [330, 2, 1, "", "draw_scale_bar"], [330, 2, 1, "", "get_object_bounds"], [330, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.LProjector": [[331, 2, 1, "", "__init__"], [331, 2, 1, "", "add_contours"], [331, 2, 1, "", "add_edges"], [331, 2, 1, "", "add_graph"], [331, 2, 1, "", "add_markers"], [331, 2, 1, "", "add_overlay"], [331, 2, 1, "", "annotate"], [331, 5, 1, "", "black_bg"], [331, 5, 1, "", "brain_color"], [331, 2, 1, "", "close"], [331, 2, 1, "", "draw_cross"], [331, 2, 1, "", "find_cut_coords"], [331, 2, 1, "", "init_with_figure"], [331, 2, 1, "", "savefig"], [331, 2, 1, "", "title"]], "nilearn.plotting.displays.LRProjector": [[332, 2, 1, "", "__init__"], [332, 2, 1, "", "add_contours"], [332, 2, 1, "", "add_edges"], [332, 2, 1, "", "add_graph"], [332, 2, 1, "", "add_markers"], [332, 2, 1, "", "add_overlay"], [332, 2, 1, "", "annotate"], [332, 5, 1, "", "black_bg"], [332, 5, 1, "", "brain_color"], [332, 2, 1, "", "close"], [332, 2, 1, "", "draw_cross"], [332, 2, 1, "", "find_cut_coords"], [332, 2, 1, "", "init_with_figure"], [332, 2, 1, "", "savefig"], [332, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRProjector": [[333, 2, 1, "", "__init__"], [333, 2, 1, "", "add_contours"], [333, 2, 1, "", "add_edges"], [333, 2, 1, "", "add_graph"], [333, 2, 1, "", "add_markers"], [333, 2, 1, "", "add_overlay"], [333, 2, 1, "", "annotate"], [333, 5, 1, "", "black_bg"], [333, 5, 1, "", "brain_color"], [333, 2, 1, "", "close"], [333, 2, 1, "", "draw_cross"], [333, 2, 1, "", "find_cut_coords"], [333, 2, 1, "", "init_with_figure"], [333, 2, 1, "", "savefig"], [333, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRZProjector": [[334, 2, 1, "", "__init__"], [334, 2, 1, "", "add_contours"], [334, 2, 1, "", "add_edges"], [334, 2, 1, "", "add_graph"], [334, 2, 1, "", "add_markers"], [334, 2, 1, "", "add_overlay"], [334, 2, 1, "", "annotate"], [334, 5, 1, "", "black_bg"], [334, 5, 1, "", "brain_color"], [334, 2, 1, "", "close"], [334, 2, 1, "", "draw_cross"], [334, 2, 1, "", "find_cut_coords"], [334, 2, 1, "", "init_with_figure"], [334, 2, 1, "", "savefig"], [334, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRProjector": [[335, 2, 1, "", "__init__"], [335, 2, 1, "", "add_contours"], [335, 2, 1, "", "add_edges"], [335, 2, 1, "", "add_graph"], [335, 2, 1, "", "add_markers"], [335, 2, 1, "", "add_overlay"], [335, 2, 1, "", "annotate"], [335, 5, 1, "", "black_bg"], [335, 5, 1, "", "brain_color"], [335, 2, 1, "", "close"], [335, 2, 1, "", "draw_cross"], [335, 2, 1, "", "find_cut_coords"], [335, 2, 1, "", "init_with_figure"], [335, 2, 1, "", "savefig"], [335, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRYProjector": [[336, 2, 1, "", "__init__"], [336, 2, 1, "", "add_contours"], [336, 2, 1, "", "add_edges"], [336, 2, 1, "", "add_graph"], [336, 2, 1, "", "add_markers"], [336, 2, 1, "", "add_overlay"], [336, 2, 1, "", "annotate"], [336, 5, 1, "", "black_bg"], [336, 5, 1, "", "brain_color"], [336, 2, 1, "", "close"], [336, 2, 1, "", "draw_cross"], [336, 2, 1, "", "find_cut_coords"], [336, 2, 1, "", "init_with_figure"], [336, 2, 1, "", "savefig"], [336, 2, 1, "", "title"]], "nilearn.plotting.displays.MosaicSlicer": [[337, 2, 1, "", "__init__"], [337, 2, 1, "", "add_contours"], [337, 2, 1, "", "add_edges"], [337, 2, 1, "", "add_markers"], [337, 2, 1, "", "add_overlay"], [337, 2, 1, "", "annotate"], [337, 5, 1, "", "black_bg"], [337, 5, 1, "", "brain_color"], [337, 2, 1, "", "close"], [337, 2, 1, "", "draw_cross"], [337, 2, 1, "", "find_cut_coords"], [337, 2, 1, "", "init_with_figure"], [337, 2, 1, "", "savefig"], [337, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoProjector": [[338, 2, 1, "", "__init__"], [338, 2, 1, "", "add_contours"], [338, 2, 1, "", "add_edges"], [338, 2, 1, "", "add_graph"], [338, 2, 1, "", "add_markers"], [338, 2, 1, "", "add_overlay"], [338, 2, 1, "", "annotate"], [338, 5, 1, "", "black_bg"], [338, 5, 1, "", "brain_color"], [338, 2, 1, "", "close"], [338, 2, 1, "", "draw_cross"], [338, 2, 1, "", "find_cut_coords"], [338, 2, 1, "", "init_with_figure"], [338, 2, 1, "", "savefig"], [338, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoSlicer": [[339, 2, 1, "", "__init__"], [339, 2, 1, "", "add_contours"], [339, 2, 1, "", "add_edges"], [339, 2, 1, "", "add_markers"], [339, 2, 1, "", "add_overlay"], [339, 2, 1, "", "annotate"], [339, 5, 1, "", "black_bg"], [339, 5, 1, "", "brain_color"], [339, 2, 1, "", "close"], [339, 2, 1, "", "draw_cross"], [339, 2, 1, "", "find_cut_coords"], [339, 2, 1, "", "init_with_figure"], [339, 2, 1, "", "savefig"], [339, 2, 1, "", "title"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[340, 2, 1, "", "__init__"], [340, 2, 1, "", "savefig"], [340, 2, 1, "", "show"]], "nilearn.plotting.displays.RProjector": [[341, 2, 1, "", "__init__"], [341, 2, 1, "", "add_contours"], [341, 2, 1, "", "add_edges"], [341, 2, 1, "", "add_graph"], [341, 2, 1, "", "add_markers"], [341, 2, 1, "", "add_overlay"], [341, 2, 1, "", "annotate"], [341, 5, 1, "", "black_bg"], [341, 5, 1, "", "brain_color"], [341, 2, 1, "", "close"], [341, 2, 1, "", "draw_cross"], [341, 2, 1, "", "find_cut_coords"], [341, 2, 1, "", "init_with_figure"], [341, 2, 1, "", "savefig"], [341, 2, 1, "", "title"]], "nilearn.plotting.displays.TiledSlicer": [[342, 2, 1, "", "__init__"], [342, 2, 1, "", "add_contours"], [342, 2, 1, "", "add_edges"], [342, 2, 1, "", "add_markers"], [342, 2, 1, "", "add_overlay"], [342, 2, 1, "", "annotate"], [342, 5, 1, "", "black_bg"], [342, 5, 1, "", "brain_color"], [342, 2, 1, "", "close"], [342, 2, 1, "", "draw_cross"], [342, 2, 1, "", "find_cut_coords"], [342, 2, 1, "", "init_with_figure"], [342, 2, 1, "", "savefig"], [342, 2, 1, "", "title"]], "nilearn.plotting.displays.XProjector": [[343, 2, 1, "", "__init__"], [343, 2, 1, "", "add_contours"], [343, 2, 1, "", "add_edges"], [343, 2, 1, "", "add_graph"], [343, 2, 1, "", "add_markers"], [343, 2, 1, "", "add_overlay"], [343, 2, 1, "", "annotate"], [343, 5, 1, "", "black_bg"], [343, 5, 1, "", "brain_color"], [343, 2, 1, "", "close"], [343, 2, 1, "", "draw_cross"], [343, 2, 1, "", "find_cut_coords"], [343, 2, 1, "", "init_with_figure"], [343, 2, 1, "", "savefig"], [343, 2, 1, "", "title"]], "nilearn.plotting.displays.XSlicer": [[344, 2, 1, "", "__init__"], [344, 2, 1, "", "add_contours"], [344, 2, 1, "", "add_edges"], [344, 2, 1, "", "add_markers"], [344, 2, 1, "", "add_overlay"], [344, 2, 1, "", "annotate"], [344, 5, 1, "", "black_bg"], [344, 5, 1, "", "brain_color"], [344, 2, 1, "", "close"], [344, 2, 1, "", "draw_cross"], [344, 2, 1, "", "find_cut_coords"], [344, 2, 1, "", "init_with_figure"], [344, 2, 1, "", "savefig"], [344, 2, 1, "", "title"]], "nilearn.plotting.displays.XZProjector": [[345, 2, 1, "", "__init__"], [345, 2, 1, "", "add_contours"], [345, 2, 1, "", "add_edges"], [345, 2, 1, "", "add_graph"], [345, 2, 1, "", "add_markers"], [345, 2, 1, "", "add_overlay"], [345, 2, 1, "", "annotate"], [345, 5, 1, "", "black_bg"], [345, 5, 1, "", "brain_color"], [345, 2, 1, "", "close"], [345, 2, 1, "", "draw_cross"], [345, 2, 1, "", "find_cut_coords"], [345, 2, 1, "", "init_with_figure"], [345, 2, 1, "", "savefig"], [345, 2, 1, "", "title"]], "nilearn.plotting.displays.XZSlicer": [[346, 2, 1, "", "__init__"], [346, 2, 1, "", "add_contours"], [346, 2, 1, "", "add_edges"], [346, 2, 1, "", "add_markers"], [346, 2, 1, "", "add_overlay"], [346, 2, 1, "", "annotate"], [346, 5, 1, "", "black_bg"], [346, 5, 1, "", "brain_color"], [346, 2, 1, "", "close"], [346, 2, 1, "", "draw_cross"], [346, 2, 1, "", "find_cut_coords"], [346, 2, 1, "", "init_with_figure"], [346, 2, 1, "", "savefig"], [346, 2, 1, "", "title"]], "nilearn.plotting.displays.YProjector": [[347, 2, 1, "", "__init__"], [347, 2, 1, "", "add_contours"], [347, 2, 1, "", "add_edges"], [347, 2, 1, "", "add_graph"], [347, 2, 1, "", "add_markers"], [347, 2, 1, "", "add_overlay"], [347, 2, 1, "", "annotate"], [347, 5, 1, "", "black_bg"], [347, 5, 1, "", "brain_color"], [347, 2, 1, "", "close"], [347, 2, 1, "", "draw_cross"], [347, 2, 1, "", "find_cut_coords"], [347, 2, 1, "", "init_with_figure"], [347, 2, 1, "", "savefig"], [347, 2, 1, "", "title"]], "nilearn.plotting.displays.YSlicer": [[348, 2, 1, "", "__init__"], [348, 2, 1, "", "add_contours"], [348, 2, 1, "", "add_edges"], [348, 2, 1, "", "add_markers"], [348, 2, 1, "", "add_overlay"], [348, 2, 1, "", "annotate"], [348, 5, 1, "", "black_bg"], [348, 5, 1, "", "brain_color"], [348, 2, 1, "", "close"], [348, 2, 1, "", "draw_cross"], [348, 2, 1, "", "find_cut_coords"], [348, 2, 1, "", "init_with_figure"], [348, 2, 1, "", "savefig"], [348, 2, 1, "", "title"]], "nilearn.plotting.displays.YXProjector": [[349, 2, 1, "", "__init__"], [349, 2, 1, "", "add_contours"], [349, 2, 1, "", "add_edges"], [349, 2, 1, "", "add_graph"], [349, 2, 1, "", "add_markers"], [349, 2, 1, "", "add_overlay"], [349, 2, 1, "", "annotate"], [349, 5, 1, "", "black_bg"], [349, 5, 1, "", "brain_color"], [349, 2, 1, "", "close"], [349, 2, 1, "", "draw_cross"], [349, 2, 1, "", "find_cut_coords"], [349, 2, 1, "", "init_with_figure"], [349, 2, 1, "", "savefig"], [349, 2, 1, "", "title"]], "nilearn.plotting.displays.YXSlicer": [[350, 2, 1, "", "__init__"], [350, 2, 1, "", "add_contours"], [350, 2, 1, "", "add_edges"], [350, 2, 1, "", "add_markers"], [350, 2, 1, "", "add_overlay"], [350, 2, 1, "", "annotate"], [350, 5, 1, "", "black_bg"], [350, 5, 1, "", "brain_color"], [350, 2, 1, "", "close"], [350, 2, 1, "", "draw_cross"], [350, 2, 1, "", "find_cut_coords"], [350, 2, 1, "", "init_with_figure"], [350, 2, 1, "", "savefig"], [350, 2, 1, "", "title"]], "nilearn.plotting.displays.YZProjector": [[351, 2, 1, "", "__init__"], [351, 2, 1, "", "add_contours"], [351, 2, 1, "", "add_edges"], [351, 2, 1, "", "add_graph"], [351, 2, 1, "", "add_markers"], [351, 2, 1, "", "add_overlay"], [351, 2, 1, "", "annotate"], [351, 5, 1, "", "black_bg"], [351, 5, 1, "", "brain_color"], [351, 2, 1, "", "close"], [351, 2, 1, "", "draw_cross"], [351, 2, 1, "", "find_cut_coords"], [351, 2, 1, "", "init_with_figure"], [351, 2, 1, "", "savefig"], [351, 2, 1, "", "title"]], "nilearn.plotting.displays.YZSlicer": [[352, 2, 1, "", "__init__"], [352, 2, 1, "", "add_contours"], [352, 2, 1, "", "add_edges"], [352, 2, 1, "", "add_markers"], [352, 2, 1, "", "add_overlay"], [352, 2, 1, "", "annotate"], [352, 5, 1, "", "black_bg"], [352, 5, 1, "", "brain_color"], [352, 2, 1, "", "close"], [352, 2, 1, "", "draw_cross"], [352, 2, 1, "", "find_cut_coords"], [352, 2, 1, "", "init_with_figure"], [352, 2, 1, "", "savefig"], [352, 2, 1, "", "title"]], "nilearn.plotting.displays.ZProjector": [[353, 2, 1, "", "__init__"], [353, 2, 1, "", "add_contours"], [353, 2, 1, "", "add_edges"], [353, 2, 1, "", "add_graph"], [353, 2, 1, "", "add_markers"], [353, 2, 1, "", "add_overlay"], [353, 2, 1, "", "annotate"], [353, 5, 1, "", "black_bg"], [353, 5, 1, "", "brain_color"], [353, 2, 1, "", "close"], [353, 2, 1, "", "draw_cross"], [353, 2, 1, "", "find_cut_coords"], [353, 2, 1, "", "init_with_figure"], [353, 2, 1, "", "savefig"], [353, 2, 1, "", "title"]], "nilearn.plotting.displays.ZSlicer": [[354, 2, 1, "", "__init__"], [354, 2, 1, "", "add_contours"], [354, 2, 1, "", "add_edges"], [354, 2, 1, "", "add_markers"], [354, 2, 1, "", "add_overlay"], [354, 2, 1, "", "annotate"], [354, 5, 1, "", "black_bg"], [354, 5, 1, "", "brain_color"], [354, 2, 1, "", "close"], [354, 2, 1, "", "draw_cross"], [354, 2, 1, "", "find_cut_coords"], [354, 2, 1, "", "init_with_figure"], [354, 2, 1, "", "savefig"], [354, 2, 1, "", "title"]], "nilearn.regions": [[387, 1, 1, "", "HierarchicalKMeans"], [388, 1, 1, "", "Parcellations"], [389, 1, 1, "", "ReNA"], [390, 1, 1, "", "RegionExtractor"], [391, 3, 1, "", "connected_label_regions"], [392, 3, 1, "", "connected_regions"], [393, 3, 1, "", "img_to_signals_labels"], [394, 3, 1, "", "img_to_signals_maps"], [395, 3, 1, "", "recursive_neighbor_agglomeration"], [396, 3, 1, "", "signals_to_img_labels"], [397, 3, 1, "", "signals_to_img_maps"]], "nilearn.regions.HierarchicalKMeans": [[387, 2, 1, "", "__init__"], [387, 2, 1, "", "fit"], [387, 2, 1, "", "fit_predict"], [387, 2, 1, "", "fit_transform"], [387, 2, 1, "", "get_params"], [387, 2, 1, "", "inverse_transform"], [387, 2, 1, "", "set_output"], [387, 2, 1, "", "set_params"], [387, 2, 1, "", "transform"]], "nilearn.regions.Parcellations": [[388, 4, 1, "", "VALID_METHODS"], [388, 2, 1, "", "__init__"], [388, 2, 1, "", "fit"], [388, 2, 1, "", "fit_transform"], [388, 2, 1, "", "get_params"], [388, 2, 1, "", "inverse_transform"], [388, 2, 1, "", "score"], [388, 2, 1, "", "set_output"], [388, 2, 1, "", "set_params"], [388, 2, 1, "", "transform"]], "nilearn.regions.ReNA": [[389, 2, 1, "", "__init__"], [389, 2, 1, "", "fit"], [389, 2, 1, "", "fit_predict"], [389, 2, 1, "", "fit_transform"], [389, 2, 1, "", "get_params"], [389, 2, 1, "", "inverse_transform"], [389, 2, 1, "", "set_output"], [389, 2, 1, "", "set_params"], [389, 2, 1, "", "transform"]], "nilearn.regions.RegionExtractor": [[390, 2, 1, "", "__init__"], [390, 2, 1, "", "fit"], [390, 2, 1, "", "fit_transform"], [390, 2, 1, "", "generate_report"], [390, 2, 1, "", "get_params"], [390, 2, 1, "", "inverse_transform"], [390, 2, 1, "", "set_output"], [390, 2, 1, "", "set_params"], [390, 2, 1, "", "transform"], [390, 2, 1, "", "transform_single_imgs"]], "nilearn.reporting": [[398, 1, 1, "", "HTMLReport"], [399, 3, 1, "", "get_clusters_table"], [400, 3, 1, "", "make_glm_report"]], "nilearn.reporting.HTMLReport": [[398, 2, 1, "", "__init__"], [398, 2, 1, "", "get_iframe"], [398, 2, 1, "", "get_standalone"], [398, 2, 1, "", "open_in_browser"], [398, 2, 1, "", "remove_temp_file"], [398, 2, 1, "", "resize"], [398, 2, 1, "", "save_as_html"]], "nilearn.signal": [[401, 3, 1, "", "butterworth"], [402, 3, 1, "", "clean"], [403, 3, 1, "", "high_variance_confounds"]], "nilearn.surface": [[404, 3, 1, "", "load_surf_data"], [405, 3, 1, "", "load_surf_mesh"], [406, 3, 1, "", "vol_to_surf"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"]}, "titleterms": {"team": 0, "core": 0, "develop": [0, 48, 49, 50, 51, 58, 99, 420], "other": [0, 158], "contributor": [0, 121, 123, 126, 130, 133, 134, 135, 136, 137, 138, 148], "fund": 0, "cite": 0, "nilearn": [0, 4, 12, 13, 14, 15, 16, 29, 34, 154, 155, 163, 169, 170, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420], "scikit": [0, 35, 98, 113, 158, 175], "learn": [0, 35, 48, 49, 50, 98, 113, 153, 154, 158, 170, 175], "basic": [1, 4, 5, 10, 66, 110], "tutori": [1, 2, 3, 110], "3d": [2, 9, 22, 52, 54, 58, 88, 173, 419], "4d": [2, 21, 113, 173, 174], "niimg": [2, 173], "handl": 2, "visual": [2, 3, 8, 9, 10, 11, 15, 16, 19, 20, 21, 22, 25, 26, 29, 30, 31, 36, 37, 40, 41, 42, 43, 49, 52, 54, 58, 81, 84, 98, 107, 110, 113, 152, 153, 154, 155, 160, 175, 419], "download": [2, 3, 49, 98, 113, 114, 173], "dataset": [2, 6, 11, 15, 16, 17, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 48, 49, 50, 51, 53, 58, 61, 62, 65, 75, 76, 79, 80, 99, 101, 105, 106, 108, 153, 157, 162, 163, 173, 177, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], "from": [2, 3, 11, 13, 15, 16, 24, 26, 28, 33, 39, 40, 41, 48, 49, 50, 56, 58, 62, 89, 91, 94, 98, 100, 105, 106, 110, 113, 114, 150, 159, 173, 174, 175, 410, 411], "internet": [2, 13, 173], "file": [2, 4, 15, 29, 56, 72, 173, 419], "one": [2, 50, 62, 79, 174], "volum": [2, 3, 9, 24, 25, 66, 83, 110, 172, 174, 175], "loop": [2, 3], "all": [2, 14, 155], "through": 2, "select": [2, 98, 114, 149, 155], "A": [3, 4, 44, 66, 150, 155, 165], "introduct": [3, 155, 165, 170], "fmri": [3, 6, 35, 48, 49, 51, 58, 64, 65, 67, 69, 76, 79, 80, 98, 99, 104, 149, 150, 155, 165, 166], "decod": [3, 28, 29, 30, 31, 32, 33, 34, 35, 37, 41, 43, 98, 100, 110, 155, 157, 158, 159, 161, 178, 243, 244, 245, 246, 247, 248, 249], "retriev": [3, 6, 10, 13, 14, 15, 16, 17, 19, 23, 29, 52, 54, 56, 58, 66, 98], "load": [3, 22, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 47, 48, 51, 56, 75, 94, 98, 99, 113, 152, 155, 173, 175, 410], "data": [3, 4, 6, 9, 10, 11, 13, 14, 15, 16, 17, 22, 23, 25, 29, 30, 32, 33, 35, 39, 40, 41, 42, 44, 47, 48, 49, 52, 54, 55, 56, 57, 61, 64, 66, 67, 69, 71, 75, 89, 94, 98, 100, 103, 107, 113, 149, 152, 154, 155, 158, 160, 165, 173, 174, 175, 412, 414, 418], "haxbi": [3, 18, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 98, 155, 157], "studi": [3, 51, 98, 103, 107, 108, 157], "first": [3, 4, 15, 41, 60, 61, 62, 66, 69, 98, 100, 101, 108, 110, 155, 164, 170, 175], "featur": [3, 15, 98, 121, 124, 148, 155, 169], "extract": [3, 23, 25, 33, 47, 50, 51, 52, 53, 54, 55, 56, 58, 61, 70, 87, 88, 89, 91, 149, 150, 153, 154, 164, 174, 175, 411], "matrix": [3, 35, 49, 52, 54, 56, 58, 78, 149, 150, 164], "behavior": [3, 29, 33, 173], "label": [3, 11, 56, 86, 171], "restrict": [3, 36, 37], "analysi": [3, 6, 32, 36, 42, 55, 60, 61, 62, 64, 65, 67, 69, 74, 75, 81, 97, 100, 101, 102, 104, 105, 106, 107, 108, 110, 155, 158, 160, 164, 165, 413], "cat": 3, "face": [3, 29, 30, 31, 36, 37, 102], "support": 3, "vector": 3, "machin": [3, 113, 170], "measur": [3, 47, 98, 155, 158], "predict": [3, 28, 29, 34, 35, 41, 42, 43, 70, 98, 99, 110, 155, 156, 159, 164], "score": [3, 6, 29, 34, 35, 36, 40, 160], "us": [3, 9, 15, 34, 35, 39, 48, 50, 51, 56, 87, 88, 91, 92, 98, 114, 152, 153, 155, 158, 166, 170, 173, 180, 182, 189, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 238, 242, 243, 244, 245, 246, 247, 249, 250, 251, 253, 260, 261, 262, 265, 267, 268, 272, 274, 278, 279, 280, 281, 283, 284, 285, 288, 289, 290, 291, 293, 294, 295, 296, 298, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 325, 326, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 386, 388, 390, 391, 392, 398, 399, 400, 404, 405, 406, 419], "cross": [3, 29, 34, 35, 98, 103, 155, 158, 160, 162], "valid": [3, 29, 34, 35, 98, 153, 155, 158, 160, 162], "manual": [3, 94, 112, 174], "leav": 3, "out": 3, "implement": 3, "kfold": 3, "inspect": 3, "model": [3, 40, 42, 62, 64, 65, 66, 67, 68, 70, 76, 77, 79, 80, 100, 101, 154, 156, 157, 158, 164, 165, 167, 407], "weight": [3, 31, 98, 155], "turn": [3, 49], "nifti": [3, 55, 173, 174], "imag": [3, 4, 8, 9, 16, 17, 28, 69, 81, 83, 85, 90, 93, 95, 97, 103, 107, 110, 113, 114, 159, 173, 174, 175, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 408, 411, 419], "plot": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 24, 32, 34, 35, 44, 47, 50, 55, 58, 66, 68, 70, 80, 107, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 414, 419], "svm": [3, 29, 98, 155, 158], "what": [3, 51, 99, 148, 163, 165, 170], "i": [3, 51, 99, 165, 170, 173, 175], "chanc": [3, 98, 155, 158], "level": [3, 60, 61, 62, 66, 69, 74, 76, 77, 78, 79, 80, 81, 98, 101, 108, 110, 149, 155, 158, 164, 167], "accuraci": [3, 155], "further": [3, 44, 98, 113, 158, 160], "read": [3, 160, 173], "exampl": [4, 33, 39, 44, 63, 64, 67, 68, 69, 77, 78, 92, 101, 108, 110, 114, 149, 150, 152, 154, 155, 160, 161, 169, 170, 174, 175, 180, 182, 189, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 238, 242, 243, 244, 245, 246, 247, 249, 250, 251, 253, 260, 261, 262, 265, 267, 268, 272, 274, 278, 279, 280, 281, 283, 284, 285, 288, 289, 290, 291, 293, 294, 295, 296, 298, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 325, 326, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 386, 388, 390, 391, 392, 398, 399, 400, 404, 405, 406, 419], "manipul": [4, 83, 110, 172, 174, 418], "look": 4, "step": [4, 170, 175], "our": [4, 41], "simpl": [4, 32, 44, 62, 64, 78, 81, 92, 155], "smooth": [4, 66, 95, 174, 175], "save": [4, 15, 55, 62, 419], "result": [4, 9, 29, 32, 50, 53, 80, 81, 113, 152, 153, 154, 155], "numer": [5, 162], "python": [5, 173], "intro": 6, "glm": [6, 33, 60, 64, 67, 74, 110, 165, 166, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 407], "singl": [6, 15, 55, 71], "session": [6, 33, 64, 71], "subject": [6, 51, 53, 55, 62, 71, 79, 149, 154, 175], "The": [6, 35, 56, 66, 86, 155, 161, 175], "specifi": 6, "experiment": [6, 78], "paradigm": [6, 78, 107], "perform": [6, 55, 61, 69, 81, 98, 155, 157, 158], "detect": 6, "voxel": [6, 42, 43, 55, 75, 94, 160, 167, 174], "signific": [6, 70], "effect": [6, 67], "threshold": [6, 62, 167], "z": [6, 55, 107], "map": [6, 9, 12, 16, 17, 21, 30, 40, 42, 43, 47, 48, 55, 88, 94, 100, 103, 107, 114, 153, 155, 157, 161, 167, 177, 419], "an": [6, 9, 44, 58, 65, 72, 86, 90, 93, 95, 154, 155, 163, 165, 419], "f": [6, 36, 70], "test": [6, 70, 79, 80, 81, 94, 98, 163], "comput": [7, 27, 34, 35, 36, 37, 45, 50, 52, 53, 56, 58, 59, 73, 82, 89, 94, 96, 107, 109, 113, 149, 150, 153, 164, 174, 175], "time": [7, 11, 23, 25, 27, 45, 52, 54, 55, 58, 59, 66, 70, 73, 82, 89, 96, 109, 150, 162, 164, 170, 175, 417], "brain": [8, 13, 14, 16, 19, 25, 28, 40, 42, 47, 48, 49, 50, 51, 56, 58, 83, 91, 97, 99, 110, 150, 152, 153, 154, 159, 172, 174, 411, 414, 419], "make": [9, 16, 32, 163, 171], "surfac": [9, 22, 23, 24, 37, 69, 108, 164, 404, 405, 406, 418, 419], "statist": [9, 16, 62, 81, 88, 94, 97, 107, 110, 114, 165, 167, 177, 419], "get": [9, 24, 55, 70, 103, 163], "cortic": [9, 22, 37, 419], "mesh": [9, 24, 419], "sampl": [9, 24, 68, 79, 80], "around": [9, 51, 58], "each": [9, 33], "node": 9, "interact": [9, 16, 149, 150, 414, 419], "plotli": 9, "comparison": [9, 157, 165, 167], "atla": [9, 10, 20, 21, 22, 47, 51, 52, 54, 56, 58, 86, 87, 99, 150, 163], "choos": [9, 100, 155, 156], "region": [9, 50, 51, 53, 54, 86, 87, 88, 91, 94, 150, 152, 153, 175, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 415], "outlin": 9, "displai": [9, 14, 15, 52, 53, 54, 56, 58, 79, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 414, 419], "interest": [9, 94], "top": 9, "higher": [9, 66], "resolut": [9, 174, 175], "multipl": [9, 15, 149, 165, 167, 175], "view": [9, 15], "web": [9, 22, 52, 54, 58], "browser": [9, 22, 52, 54, 58], "impact": [9, 56], "paramet": [9, 34, 61, 63, 64, 66, 67, 68, 69, 86, 98, 100, 149, 156, 158, 175], "harvard": 10, "oxford": 10, "juelich": 10, "contour": [10, 14, 419], "global": [11, 56], "pattern": [11, 44], "carpet": 11, "fetch": [11, 20, 25, 26, 33, 47, 50, 53, 62, 76, 79, 80, 101, 107, 108, 153, 173, 177], "adhd": [11, 61], "deriv": [11, 48, 66, 177], "mask": [11, 16, 18, 25, 32, 36, 41, 66, 89, 94, 98, 103, 113, 155, 158, 160, 174, 175, 317, 318, 319, 320, 321, 322, 323, 324, 325, 412], "over": [11, 47], "base": [11, 23, 32, 37, 42, 43, 56, 69, 75, 100, 108, 153, 164, 167], "separ": [11, 86], "tissu": 11, "type": 11, "matplotlib": [12, 34], "colormap": [12, 419], "color": 12, "glass": [13, 14, 16], "whole": 13, "sagitt": [13, 15], "cut": [13, 15], "black": 13, "background": [13, 17, 89], "hemispher": [13, 14, 69], "option": 14, "demo": 14, "differ": [14, 30, 32, 34, 35, 44, 47, 86, 149, 156, 175, 419], "project": [14, 26, 69, 163, 171], "left": [14, 69], "right": [14, 15, 100, 156], "fill": [14, 419], "both": 14, "more": [15, 17, 158], "tool": [15, 16], "we": [15, 32, 35, 41, 163], "provid": [15, 16], "gener": [15, 16, 33, 44, 61, 62, 64, 72, 75, 77, 103, 111, 177, 407], "purpos": [15, 16], "coron": 15, "axial": 15, "given": [15, 174], "coordin": [15, 47, 58, 150], "number": [15, 162], "5": [15, 17, 126, 133, 134, 135, 148], "onli": [15, 50, 175], "two": [15, 64, 71, 80, 156], "slice": [15, 44, 419], "without": [15, 56, 98, 155, 158], "colorbar": 15, "side": 15, "chang": [15, 17, 66, 98, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 141, 142, 143, 144, 145, 146, 148, 175], "now": [15, 35, 52, 54], "ar": [15, 66], "three": [15, 100], "2x2": 15, "fashion": 15, "along": 15, "row": 15, "column": 15, "anoth": [15, 174], "wai": 15, "limit": 15, "demonstr": 15, "variou": 15, "show": [15, 38, 100, 381], "how": [15, 163, 171, 175], "add_edg": 15, "add_contour": 15, "seed": [15, 23, 55, 58, 175], "add_mark": 15, "annot": [15, 114], "function": [16, 19, 23, 41, 44, 46, 47, 50, 51, 54, 68, 99, 100, 110, 149, 150, 151, 153, 154, 158, 160, 174, 176, 177, 416, 419], "plot_stat_map": [16, 20, 376], "view_img": [16, 383], "plot_glass_brain": [16, 368], "anatom": 16, "plot_anat": [16, 361], "roi": [16, 32, 51, 94, 174], "here": [16, 41], "plot_roi": [16, 375], "epi": [16, 89], "plot_epi": [16, 366], "control": [17, 158, 175], "contrast": [17, 61, 62, 66, 69, 70, 164, 253], "when": [17, 173], "local": [17, 72, 105, 106], "enhanc": [17, 120, 121, 123, 127, 128, 129, 130, 131, 133, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 163], "dim": 17, "0": [17, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148], "decreas": [17, 173], "1": [17, 66, 115, 116, 117, 118, 119, 122, 126, 129, 131, 134, 137, 140, 142, 144, 146, 148], "multiscal": 19, "parcel": [19, 47, 49, 56, 150, 152, 153, 388], "group": [19, 48, 51, 53, 99, 108, 149, 162], "probabilist": [20, 21, 47, 54, 150], "default": [20, 58, 61, 87], "mode": [20, 58, 61, 86, 87, 419], "msdl": [20, 51, 99], "add_overlai": 20, "object": [20, 29, 31, 34, 62, 101, 108, 154, 173, 175], "plot_prob_atla": [20, 374], "refer": [22, 23, 47, 49, 56, 58, 100, 102, 114, 149, 150, 152, 153, 154, 156, 157, 160, 161, 170, 409], "fetcher": [22, 163], "connect": [23, 46, 47, 51, 56, 57, 86, 99, 100, 110, 149, 151, 153, 176], "seri": [23, 25, 52, 54, 55, 58, 70, 89, 100, 150, 164, 175, 417], "calcul": [23, 70, 106], "technic": 24, "point": [24, 175], "illustr": 24, "scheme": 24, "build": [24, 33, 35, 40, 54, 94, 113, 150, 163, 171], "cylind": 24, "locat": 24, "which": [24, 152], "vol_to_surf": [24, 406], "would": 24, "draw": 24, "its": 24, "adjust": 24, "neuroimag": [25, 113, 156, 170, 173, 175], "appli": [25, 48, 113, 152, 174, 175], "correspond": [25, 52, 54], "megatrawl": 26, "network": [26, 50, 58, 61, 87, 154], "matric": [26, 53, 63, 100, 153, 175], "human": 26, "connectom": [26, 47, 50, 52, 53, 58, 149, 150, 176, 180, 181, 182, 183, 184, 185, 186, 187, 419], "anova": [29, 34, 98, 155, 158], "v": [29, 30, 31, 36, 102], "hous": [29, 30, 31, 36, 37, 102], "pipelin": [29, 33, 34, 112, 113, 157, 158, 175], "fit": [29, 31, 33, 34, 39, 43, 62, 64, 67, 70, 101, 108, 154, 164, 167], "obtain": [29, 62, 101, 108], "via": 29, "classifi": [30, 160], "train": 30, "frem": [31, 39, 157], "recognit": [31, 36, 44, 102], "et": [32, 38, 39, 40, 41], "al": [32, 38, 39, 40, 41], "prepar": [32, 35, 36, 41, 61, 64, 67, 69, 81, 100, 155, 160, 171, 174, 175], "bar": [32, 419], "summar": 32, "after": [33, 89], "signal": [33, 51, 53, 54, 56, 58, 91, 150, 175, 401, 402, 403, 411, 417], "proper": 33, "event": [33, 72, 164], "structur": [33, 57, 161, 163], "instanti": 33, "run": [33, 41, 44, 66, 103, 158], "firstlevelmodel": [33, 62, 101, 108, 265], "report": [33, 61, 62, 64, 75, 163, 398, 399, 400, 416], "set": [34, 156, 158, 160, 163], "respons": [34, 37, 65, 66, 68], "valu": [34, 162], "screen": 34, "percentil": 34, "nest": 34, "multi": [35, 53, 154, 156], "class": [35, 156], "strategi": [35, 56, 155, 175], "barplot": 35, "confus": 35, "searchlight": [36, 37, 160, 247], "bold": [37, 165], "stimuli": [38, 40, 41], "jimura": 39, "mix": [39, 157], "gambl": [39, 157], "experi": [39, 113, 155], "tv": 39, "l1": 39, "spacenet": [39, 43, 161], "encod": 40, "miyawaki": [40, 41], "2008": [40, 41], "estim": [40, 44, 57, 58, 61, 62, 64, 66, 67, 69, 76, 77, 79, 80, 98, 101, 155, 156, 158, 162], "recept": 40, "field": 40, "reconstruct": 41, "Then": 41, "defin": [41, 56, 63, 68, 100], "itself": 41, "let": 41, "u": 41, "quantifi": 41, "error": 41, "morphometri": [42, 43, 75, 167], "oasi": [42, 43, 75], "vbm": [42, 43, 75], "bio": 42, "marker": [42, 419], "ag": [42, 51, 75, 99], "mass": [42, 413], "univari": [42, 102, 105, 106, 160, 413], "preprocess": [42, 113, 177, 417], "qualiti": [42, 43, 94], "infer": 42, "massiv": [42, 102, 105, 106, 160], "space": [43, 71, 149], "net": 43, "prior": 43, "simul": [44, 57, 149, 158], "creat": [44, 63, 78, 174], "exercic": 44, "go": [44, 98, 107, 113, 158], "compar": [47, 48, 49, 85, 100, 149, 160], "atlas": [47, 150, 177, 419], "yeo": [47, 86], "direct": [47, 149], "asymmetr": 47, "iter": [47, 162], "spatial": [48, 157, 161, 174], "ica": [48, 103, 154], "dictionari": [48, 50, 153, 154], "canica": [48, 154, 250], "cluster": [49, 70, 76, 152], "method": [49, 113], "ward": 49, "compress": [49, 152], "represent": [49, 152, 173], "kmean": 49, "hierarch": 49, "those": 49, "rena": [49, 389], "correl": [50, 51, 54, 55, 56, 58, 149, 150], "coeffici": 50, "specif": [50, 114, 174], "classif": [51, 99, 156], "children": 51, "partial": [51, 58], "variabl": 51, "kind": [51, 99], "most": [51, 70, 99], "power": [51, 99], "spars": [52, 53, 149, 162], "invers": [52, 53, 149, 175], "covari": [52, 53, 149, 162], "And": [52, 54], "graph": [52, 54, 58, 150], "precis": 53, "produc": 55, "fisher": 55, "transform": [55, 174, 175], "confound": [56, 66, 175], "remov": [56, 66, 175], "flexibl": 56, "fmriprep": [56, 306, 307, 410], "interfac": [56, 303, 304, 305, 306, 307, 308, 410], "motion": 56, "scrub": 56, "predefin": 56, "sphere": [58, 160], "dmn": 58, "within": 58, "averag": 58, "strength": 58, "dosenbach": 58, "": [58, 98, 148, 155], "see": 58, "also": 58, "complet": 62, "bid": [62, 101, 108, 303, 304, 305, 410], "openneuro": 62, "automat": [62, 101, 108, 113, 177], "argument": [62, 101, 108, 175], "output": [62, 114, 173], "disk": 62, "design": [63, 66, 77, 78, 100, 164, 175], "finit": 65, "impul": 65, "fir": 65, "understand": [66, 89, 173, 175], "drift": 66, "hemodynam": 66, "ad": [66, 419], "nois": 66, "ol": 66, "order": 66, "censor": 66, "conclus": 66, "explicit": 67, "fix": [67, 118, 120, 121, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148], "mri": 68, "stimulu": 68, "analys": [69, 75], "residu": [70, 164], "import": [70, 420], "modul": 70, "largest": 70, "actual": 70, "6": [70, 127, 136, 137, 138, 148], "distribut": [70, 171], "r": 70, "squar": 70, "nativ": 71, "tsv": 72, "neurospin": 72, "task": [72, 100, 105, 106], "second": [74, 76, 77, 78, 79, 80, 81, 101, 108, 110, 167], "true": 76, "posit": 76, "proport": 76, "t_map": 79, "unpair": 80, "pair": 80, "some": 81, "t": [81, 88], "affin": [84, 173, 174], "resampl": [84, 89, 93, 174, 175, 408], "mean": 85, "2": [85, 117, 121, 122, 123, 124, 125, 126, 127, 132, 135, 138, 145, 148], "break": 86, "origin": 86, "relabel": 86, "min_siz": 86, "smith": 87, "niftimask": [89, 92, 175, 315], "raw": 89, "mni": 89, "templat": [89, 93, 177], "negat": 90, "math_img": [90, 294], "niftilabelsmask": [91, 175, 313], "find": [94, 160, 170], "thi": 94, "improv": 94, "advanc": [97, 98, 110, 112, 175], "tune": 98, "dummi": 98, "permut": 98, "lean": 98, "svc": 98, "discrimin": 98, "engin": 98, "beta": [100, 128, 133, 148, 155], "your": [100, 113, 163], "standard": 100, "lsa": 100, "aggreg": 100, "condit": 100, "lss": 100, "few": [100, 155], "trial": 100, "approach": [100, 149], "applic": [100, 170], "quick": 101, "saniti": 101, "check": [101, 420], "neurovault": [103, 107, 114], "term": 103, "reshap": 103, "compon": [103, 104, 154, 410], "figur": [103, 414], "multivari": [104, 179], "decomposit": [104, 179, 250, 251], "independ": 104, "motor": 105, "meta": 107, "stop": [107, 162], "success": 107, "minu": 107, "like": [107, 173], "protocol": 107, "combin": 107, "bibliographi": 111, "usag": [112, 175], "scale": [112, 419], "up": [112, 160, 163], "own": 113, "non": 113, "descript": [113, 162], "2d": [113, 174], "arrai": [113, 174], "unmask": [113, 175, 325], "inverse_transform": 113, "repositori": 114, "collect": 114, "filter": [114, 175], "neurosynth": 114, "changelog": [115, 116, 117, 118, 121, 122, 124, 148], "3": [118, 124, 128, 129, 148], "4": [119, 125, 130, 131, 132, 148], "highlight": [119, 120, 128, 129, 130, 133, 136, 139, 140, 141, 142, 143, 145, 148], "10": [120, 146, 148], "new": [120, 121, 123, 124, 125, 126, 133, 134, 135, 136, 139, 140, 141, 142, 143, 145, 146, 148], "bug": [121, 124, 131, 148, 163], "api": [121, 148, 170, 409], "summari": [121, 148, 149, 150, 153, 154, 164, 167], "rc": [133, 148], "alpha": [133, 148, 162], "known": [134, 148], "issu": [134, 148, 171], "0rc": [136, 148], "0b0": [136, 148], "0a0": [136, 148], "7": [139, 140, 148], "8": [141, 142, 148], "9": [143, 144, 145, 148], "dev": [146, 148], "page": [149, 150, 153, 154, 164, 167], "full": [149, 150, 155], "exercis": [149, 150, 175], "rest": [149, 150, 151], "link": [149, 420], "total": 149, "tangent": 149, "maxprob": 150, "state": 151, "movi": [152, 153], "watch": [152, 153], "code": [152, 155, 157, 160, 163, 171, 174, 419], "better": [153, 161, 175], "relat": [154, 161], "interpret": 154, "altern": 154, "2001": 155, "definit": [155, 175], "made": 155, "easi": 155, "good": 155, "choic": 155, "put": 155, "togeth": 155, "dimens": 155, "reduct": 155, "final": 155, "script": 155, "regress": 156, "linear": [156, 407], "bag": 156, "sever": 156, "fast": 157, "ensembl": 157, "regular": 157, "robust": 157, "empir": 157, "increas": 157, "ani": 158, "mvpa": 159, "contain": 160, "inform": 160, "principl": [160, 162], "radiu": 160, "f_score": 160, "spm": 160, "stabil": 162, "execut": 162, "synthet": 162, "criteria": 162, "maximum": 162, "dualiti": 162, "gap": 162, "variat": 162, "norm": 162, "initi": 162, "modifi": 162, "criterion": 162, "algorithm": 162, "bound": 162, "grid": 162, "search": 162, "warm": 162, "restart": 162, "contribut": 163, "conduct": 163, "help": [163, 170], "discuss": 163, "idea": 163, "answer": 163, "question": 163, "review": 163, "pull": [163, 171], "request": [163, 171], "do": 163, "decid": 163, "goe": 163, "scope": 163, "who": 163, "decis": 163, "guidelin": 163, "pr": 163, "style": 163, "document": [163, 171], "environ": 163, "instal": [163, 420], "recommend": 163, "addit": 163, "case": [163, 174], "mainten": [163, 171], "hrf": 164, "primer": 165, "analyz": [166, 173], "correct": 167, "glossari": 168, "organ": 171, "close": 171, "polici": 171, "releas": [171, 420], "upload": 171, "them": 171, "pypi": 171, "deploi": 171, "post": 171, "input": 173, "name": 173, "match": [173, 174], "glob": 173, "user": [173, 421], "path": 173, "expans": 173, "open": [173, 175], "nilearn_data": 173, "where": 173, "store": 173, "format": 173, "shape": [173, 174], "memori": 173, "text": 173, "phenotyp": 173, "csv": 173, "panda": 173, "target": 174, "special": 174, "size": 174, "access": 174, "individu": 174, "oper": [174, 415], "masker": [175, 309, 310, 311, 312, 313, 314, 315, 316, 411], "concept": 175, "philosophi": 175, "custom": 175, "100": 175, "extra": 175, "cutoff": 175, "common": 175, "dtype": 175, "tempor": 175, "resiz": 175, "niftimapsmask": [175, 314], "multiniftimask": [175, 312], "multiniftilabelsmask": [175, 310], "multiniftimapsmask": [175, 311], "niftispheresmask": [175, 316], "connectivitymeasur": 180, "groupsparsecovari": 181, "groupsparsecovariancecv": 182, "cov_to_corr": 183, "group_sparse_covari": 184, "prec_to_parti": 185, "sym_matrix_to_vec": 186, "vec_to_sym_matrix": 187, "fetch_abide_pcp": 188, "fetch_adhd": 189, "fetch_atlas_a": 190, "fetch_atlas_allen_2011": 191, "fetch_atlas_basc_multiscale_2015": 192, "fetch_atlas_craddock_2012": 193, "fetch_atlas_destrieux_2009": 194, "fetch_atlas_difumo": 195, "fetch_atlas_harvard_oxford": 196, "fetch_atlas_juelich": 197, "fetch_atlas_msdl": 198, "fetch_atlas_pauli_2017": 199, "fetch_atlas_schaefer_2018": 200, "fetch_atlas_smith_2009": 201, "fetch_atlas_surf_destrieux": 202, "fetch_atlas_talairach": 203, "fetch_atlas_yeo_2011": 204, "fetch_bids_langloc_dataset": 205, "fetch_coords_dosenbach_2010": 206, "fetch_coords_power_2011": 207, "fetch_coords_seitzman_2018": 208, "fetch_development_fmri": 209, "fetch_ds000030_url": 210, "fetch_fiac_first_level": 211, "fetch_haxbi": 212, "fetch_icbm152_2009": 213, "fetch_icbm152_brain_gm_mask": 214, "fetch_language_localizer_demo_dataset": 215, "fetch_localizer_button_task": 216, "fetch_localizer_calculation_task": 217, "fetch_localizer_contrast": 218, "fetch_localizer_first_level": 219, "fetch_megatrawls_netmat": 220, "fetch_mixed_gambl": 221, "fetch_miyawaki2008": 222, "fetch_neurovault": 223, "fetch_neurovault_auditory_computation_task": 224, "fetch_neurovault_id": 225, "fetch_neurovault_motor_task": 226, "fetch_oasis_vbm": 227, "fetch_openneuro_dataset": 228, "fetch_openneuro_dataset_index": 229, "fetch_spm_auditori": 230, "fetch_spm_multimodal_fmri": 231, "fetch_surf_fsaverag": 232, "fetch_surf_nki_enhanc": 233, "get_data_dir": 234, "load_mni152_brain_mask": 235, "load_mni152_gm_mask": 236, "load_mni152_gm_templ": 237, "load_mni152_templ": 238, "load_mni152_wm_mask": 239, "load_mni152_wm_templ": 240, "patch_openneuro_dataset": 241, "select_from_index": 242, "decoderregressor": 244, "fremclassifi": 245, "fremregressor": 246, "spacenetclassifi": 248, "spacenetregressor": 249, "dictlearn": 251, "armodel": 252, "fcontrastresult": 254, "likelihoodmodelresult": 255, "olsmodel": 256, "regressionresult": 257, "simpleregressionresult": 258, "tcontrastresult": 259, "cluster_level_infer": 260, "compute_contrast": 261, "compute_fixed_effect": 262, "expression_to_contrast_vector": 263, "fdr_threshold": 264, "first_level": [265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 407], "check_design_matrix": 266, "compute_regressor": 267, "first_level_from_bid": 268, "glover_dispersion_deriv": 269, "glover_hrf": 270, "glover_time_deriv": 271, "make_first_level_design_matrix": 272, "mean_scal": 273, "run_glm": 274, "spm_dispersion_deriv": 275, "spm_hrf": 276, "spm_time_deriv": 277, "second_level": [278, 279, 280, 407], "secondlevelmodel": 278, "make_second_level_design_matrix": 279, "non_parametric_infer": 280, "threshold_stats_img": 281, "binarize_img": 282, "clean_img": 283, "concat_img": 284, "coord_transform": 285, "copy_img": 286, "crop_img": 287, "get_data": 288, "high_variance_confound": [289, 403], "index_img": 290, "iter_img": 291, "largest_connected_component_img": 292, "load_img": 293, "mean_img": 295, "new_img_lik": 296, "reorder_img": 297, "resample_img": 298, "resample_to_img": 299, "smooth_img": 300, "swap_img_hemispher": 301, "threshold_img": 302, "get_bids_fil": 303, "parse_bids_filenam": 304, "save_glm_to_bid": 305, "load_confound": 306, "load_confounds_strategi": 307, "fsl": [308, 410], "get_design_from_fslmat": 308, "basemask": 309, "apply_mask": 317, "compute_background_mask": 318, "compute_brain_mask": 319, "compute_epi_mask": 320, "compute_multi_background_mask": 321, "compute_multi_brain_mask": 322, "compute_multi_epi_mask": 323, "intersect_mask": 324, "mass_univari": [326, 413], "permuted_ol": 326, "baseax": 327, "baseslic": 328, "cutax": 329, "glassbrainax": 330, "lprojector": 331, "lrprojector": 332, "lyrprojector": 333, "lyrzprojector": 334, "lzrprojector": 335, "lzryprojector": 336, "mosaicslic": 337, "orthoprojector": 338, "orthoslic": 339, "plotlysurfacefigur": 340, "rprojector": 341, "tiledslic": 342, "xprojector": 343, "xslicer": 344, "xzprojector": 345, "xzslicer": 346, "yprojector": 347, "yslicer": 348, "yxprojector": 349, "yxslicer": 350, "yzprojector": 351, "yzslicer": 352, "zprojector": 353, "zslicer": 354, "get_projector": 355, "get_slic": 356, "find_cut_slic": 357, "find_parcellation_cut_coord": 358, "find_probabilistic_atlas_cut_coord": 359, "find_xyz_cut_coord": 360, "plot_carpet": 362, "plot_connectom": 363, "plot_contrast_matrix": 364, "plot_design_matrix": 365, "plot_ev": 367, "plot_img": 369, "plot_img_comparison": 370, "plot_img_on_surf": 371, "plot_mark": 372, "plot_matrix": 373, "plot_surf": 377, "plot_surf_contour": 378, "plot_surf_roi": 379, "plot_surf_stat_map": [380, 419], "view_connectom": 382, "view_img_on_surf": [384, 419], "view_mark": 385, "view_surf": [386, 419], "hierarchicalkmean": 387, "regionextractor": 390, "connected_label_region": 391, "connected_region": 392, "img_to_signals_label": 393, "img_to_signals_map": 394, "recursive_neighbor_agglomer": 395, "signals_to_img_label": 396, "signals_to_img_map": 397, "htmlreport": 398, "get_clusters_t": 399, "make_glm_report": 400, "butterworth": 401, "clean": 402, "load_surf_data": 404, "load_surf_mesh": 405, "process": 408, "util": [408, 412], "avail": 419, "overlai": 419, "edg": 419, "quickstart": 420, "latest": 420, "version": 420, "drop": 420, "hour": 420, "depend": 420, "guid": 421, "tabl": 421, "content": 421}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"Team": [[0, "team"]], "Core developers": [[0, "core-developers"]], "Other contributors": [[0, "other-contributors"]], "Funding": [[0, "funding"]], "Citing nilearn": [[0, "citing-nilearn"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Basic tutorials": [[1, "basic-tutorials"], [110, "basic-tutorials"]], "3D and 4D niimgs: handling and visualizing": [[2, "d-and-4d-niimgs-handling-and-visualizing"]], "Downloading tutorial datasets from Internet": [[2, "downloading-tutorial-datasets-from-internet"]], "Visualizing a 3D file": [[2, "visualizing-a-3d-file"]], "Visualizing one volume in a 4D file": [[2, "visualizing-one-volume-in-a-4d-file"]], "Looping on all volumes in a 4D file": [[2, "looping-on-all-volumes-in-a-4d-file"]], "Looping through selected volumes in a 4D file": [[2, "looping-through-selected-volumes-in-a-4d-file"]], "A introduction tutorial to fMRI decoding": [[3, "a-introduction-tutorial-to-fmri-decoding"]], "Retrieve and load the fMRI data from the Haxby study": [[3, "retrieve-and-load-the-fmri-data-from-the-haxby-study"], [98, "retrieve-and-load-the-fmri-data-from-the-haxby-study"]], "First download the data": [[3, "first-download-the-data"], [98, "first-download-the-data"]], "Visualizing the fmri volume": [[3, "visualizing-the-fmri-volume"]], "Feature extraction: from fMRI volumes to a data matrix": [[3, "feature-extraction-from-fmri-volumes-to-a-data-matrix"]], "Load the behavioral labels": [[3, "load-the-behavioral-labels"]], "Restrict the analysis to cats and faces": [[3, "restrict-the-analysis-to-cats-and-faces"]], "Decoding with Support Vector Machine": [[3, "decoding-with-support-vector-machine"]], "Measuring prediction scores using cross-validation": [[3, "measuring-prediction-scores-using-cross-validation"]], "Manually leaving out data": [[3, "manually-leaving-out-data"]], "Implementing a KFold loop": [[3, "implementing-a-kfold-loop"]], "Cross-validation with the decoder": [[3, "cross-validation-with-the-decoder"]], "Inspecting the model weights": [[3, "inspecting-the-model-weights"]], "Turning the weights into a nifti image": [[3, "turning-the-weights-into-a-nifti-image"]], "Plotting the SVM weights": [[3, "plotting-the-svm-weights"]], "What is the chance level accuracy?": [[3, "what-is-the-chance-level-accuracy"]], "Further reading": [[3, "further-reading"]], "Basic nilearn example: manipulating and looking at data": [[4, "basic-nilearn-example-manipulating-and-looking-at-data"]], "A first step: looking at our data": [[4, "a-first-step-looking-at-our-data"]], "Simple image manipulation: smoothing": [[4, "simple-image-manipulation-smoothing"]], "Saving results to a file": [[4, "saving-results-to-a-file"]], "Basic numerics and plotting with Python": [[5, "basic-numerics-and-plotting-with-python"]], "Intro to GLM Analysis: a single-session, single-subject fMRI dataset": [[6, "intro-to-glm-analysis-a-single-session-single-subject-fmri-dataset"]], "The data": [[6, "the-data"]], "Retrieving the data": [[6, "retrieving-the-data"], [23, "retrieving-the-data"], [66, "retrieving-the-data"]], "Specifying the experimental paradigm": [[6, "specifying-the-experimental-paradigm"]], "Performing the GLM analysis": [[6, "performing-the-glm-analysis"]], "Detecting voxels with significant effects": [[6, "detecting-voxels-with-significant-effects"]], "Plot thresholded z scores map": [[6, "plot-thresholded-z-scores-map"]], "Performing an F-test": [[6, "performing-an-f-test"]], "Computation times": [[7, "computation-times"], [27, "computation-times"], [45, "computation-times"], [59, "computation-times"], [73, "computation-times"], [82, "computation-times"], [96, "computation-times"], [109, "computation-times"]], "Visualization of brain images": [[8, "visualization-of-brain-images"], [110, "visualization-of-brain-images"]], "Making a surface plot of a 3D statistical map": [[9, "making-a-surface-plot-of-a-3d-statistical-map"]], "Get a statistical map": [[9, "get-a-statistical-map"]], "Get a cortical mesh": [[9, "get-a-cortical-mesh"]], "Sample the 3D data around each node of the mesh": [[9, "sample-the-3d-data-around-each-node-of-the-mesh"]], "Plot the result": [[9, "plot-the-result"]], "Interactive plotting with Plotly": [[9, "interactive-plotting-with-plotly"]], "Plot 3D image for comparison": [[9, "plot-3d-image-for-comparison"]], "Use an atlas and choose regions to outline": [[9, "use-an-atlas-and-choose-regions-to-outline"]], "Display outlines of the regions of interest on top of a statistical map": [[9, "display-outlines-of-the-regions-of-interest-on-top-of-a-statistical-map"]], "Plot with higher-resolution mesh": [[9, "plot-with-higher-resolution-mesh"]], "Plot multiple views of the 3D volume on a surface": [[9, "plot-multiple-views-of-the-3d-volume-on-a-surface"]], "3D visualization in a web browser": [[9, "d-visualization-in-a-web-browser"], [22, "d-visualization-in-a-web-browser"], [52, "d-visualization-in-a-web-browser"], [54, "d-visualization-in-a-web-browser"], [58, "d-visualization-in-a-web-browser"]], "Impact of plot parameters on visualization": [[9, "impact-of-plot-parameters-on-visualization"]], "Basic Atlas plotting": [[10, "basic-atlas-plotting"]], "Retrieving the atlas data": [[10, "retrieving-the-atlas-data"]], "Visualizing the Harvard-Oxford atlas": [[10, "visualizing-the-harvard-oxford-atlas"]], "Visualizing the Juelich atlas": [[10, "visualizing-the-juelich-atlas"]], "Visualizing the Harvard-Oxford atlas with contours": [[10, "visualizing-the-harvard-oxford-atlas-with-contours"]], "Visualizing the Juelich atlas with contours": [[10, "visualizing-the-juelich-atlas-with-contours"]], "Visualizing global patterns with a carpet plot": [[11, "visualizing-global-patterns-with-a-carpet-plot"]], "Fetching data from ADHD dataset": [[11, "fetching-data-from-adhd-dataset"]], "Deriving a mask": [[11, "deriving-a-mask"]], "Visualizing global patterns over time": [[11, "visualizing-global-patterns-over-time"]], "Deriving a label-based mask": [[11, "deriving-a-label-based-mask"]], "Visualizing global patterns, separated by tissue type": [[11, "visualizing-global-patterns-separated-by-tissue-type"]], "Matplotlib colormaps in Nilearn": [[12, "matplotlib-colormaps-in-nilearn"]], "Plot color maps": [[12, "plot-color-maps"]], "Plot matplotlib color maps": [[12, "plot-matplotlib-color-maps"]], "Glass brain plotting in nilearn": [[13, "glass-brain-plotting-in-nilearn"]], "Retrieve data from Internet": [[13, "retrieve-data-from-internet"]], "Glass brain plotting: whole brain sagittal cuts": [[13, "glass-brain-plotting-whole-brain-sagittal-cuts"]], "Glass brain plotting: black background": [[13, "glass-brain-plotting-black-background"]], "Glass brain plotting: Hemispheric sagittal cuts": [[13, "glass-brain-plotting-hemispheric-sagittal-cuts"]], "Glass brain plotting in nilearn (all options)": [[14, "glass-brain-plotting-in-nilearn-all-options"]], "Retrieve the data": [[14, "retrieve-the-data"]], "Demo glass brain plotting": [[14, "demo-glass-brain-plotting"]], "Different projections for the left and right hemispheres": [[14, "different-projections-for-the-left-and-right-hemispheres"]], "Demo glass brain plotting with contours and with fillings": [[14, "demo-glass-brain-plotting-with-contours-and-with-fillings"]], "Display contour projections in both hemispheres": [[14, "display-contour-projections-in-both-hemispheres"]], "More plotting tools from nilearn": [[15, "more-plotting-tools-from-nilearn"]], "First, we retrieve data from nilearn provided (general-purpose) datasets": [[15, "first-we-retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Visualizing in - \u2018sagittal\u2019, \u2018coronal\u2019 and \u2018axial\u2019 with given coordinates": [[15, "visualizing-in-sagittal-coronal-and-axial-with-given-coordinates"]], "Visualizing in - single view \u2018axial\u2019 with number of cuts=5": [[15, "visualizing-in-single-view-axial-with-number-of-cuts-5"]], "Visualizing in - single view \u2018sagittal\u2019 with only two slices": [[15, "visualizing-in-single-view-sagittal-with-only-two-slices"]], "Visualizing in - \u2018coronal\u2019 view with single cut": [[15, "visualizing-in-coronal-view-with-single-cut"]], "Visualizing without a colorbar on the right side": [[15, "visualizing-without-a-colorbar-on-the-right-side"]], "Visualize in - two views \u2018sagittal\u2019 and \u2018axial\u2019 with given coordinates": [[15, "visualize-in-two-views-sagittal-and-axial-with-given-coordinates"]], "Changing the views to \u2018coronal\u2019, \u2018sagittal\u2019 views with coordinates": [[15, "changing-the-views-to-coronal-sagittal-views-with-coordinates"]], "Now, views are changed to \u2018coronal\u2019 and \u2018axial\u2019 views with coordinates": [[15, "now-views-are-changed-to-coronal-and-axial-views-with-coordinates"]], "Visualizing three views in 2x2 fashion": [[15, "visualizing-three-views-in-2x2-fashion"]], "Visualizing three views along multiple rows and columns": [[15, "visualizing-three-views-along-multiple-rows-and-columns"]], "Now, changing the number of slices along columns": [[15, "now-changing-the-number-of-slices-along-columns"]], "Now, another way of limiting the number of slices along rows and columns": [[15, "now-another-way-of-limiting-the-number-of-slices-along-rows-and-columns"]], "Demonstrating various display features": [[15, "demonstrating-various-display-features"]], "Showing how to use add_edges": [[15, "showing-how-to-use-add-edges"]], "How to use add_contours": [[15, "how-to-use-add-contours"]], "Plotting seeds using add_markers": [[15, "plotting-seeds-using-add-markers"]], "Annotating plots": [[15, "annotating-plots"]], "Saving plots to file": [[15, "saving-plots-to-file"]], "Plotting tools in nilearn": [[16, "plotting-tools-in-nilearn"]], "Retrieve data from nilearn provided (general-purpose) datasets": [[16, "retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Plotting statistical maps with function plot_stat_map": [[16, "plotting-statistical-maps-with-function-plot-stat-map"]], "Making interactive visualizations with function view_img": [[16, "making-interactive-visualizations-with-function-view-img"]], "Plotting statistical maps in a glass brain with function plot_glass_brain": [[16, "plotting-statistical-maps-in-a-glass-brain-with-function-plot-glass-brain"]], "Plotting anatomical images with function plot_anat": [[16, "plotting-anatomical-images-with-function-plot-anat"]], "Plotting ROIs (here the mask) with function plot_roi": [[16, "plotting-rois-here-the-mask-with-function-plot-roi"]], "Plotting EPI image with function plot_epi": [[16, "plotting-epi-image-with-function-plot-epi"]], "Controlling the contrast of the background when plotting": [[17, "controlling-the-contrast-of-the-background-when-plotting"]], "Retrieve the data: the localizer dataset with contrast maps": [[17, "retrieve-the-data-the-localizer-dataset-with-contrast-maps"]], "Plotting with enhancement of background image with dim=-.5": [[17, "plotting-with-enhancement-of-background-image-with-dim-5"]], "Plotting with no change of contrast in background image with dim=0": [[17, "plotting-with-no-change-of-contrast-in-background-image-with-dim-0"]], "Plotting with decrease of contrast in background image with dim=.5": [[17, "plotting-with-decrease-of-contrast-in-background-image-with-dim-5"]], "Plotting with more decrease in contrast with dim=1": [[17, "plotting-with-more-decrease-in-contrast-with-dim-1"]], "Plot Haxby masks": [[18, "plot-haxby-masks"]], "Visualizing multiscale functional brain parcellations": [[19, "visualizing-multiscale-functional-brain-parcellations"]], "Retrieving multiscale group brain parcellations": [[19, "retrieving-multiscale-group-brain-parcellations"]], "Visualizing brain parcellations": [[19, "visualizing-brain-parcellations"]], "Visualizing a probabilistic atlas: the default mode in the MSDL atlas": [[20, "visualizing-a-probabilistic-atlas-the-default-mode-in-the-msdl-atlas"]], "Fetching probabilistic atlas - MSDL atlas": [[20, "fetching-probabilistic-atlas-msdl-atlas"]], "Visualizing a probabilistic atlas with plot_stat_map and add_overlay object": [[20, "visualizing-a-probabilistic-atlas-with-plot-stat-map-and-add-overlay-object"]], "Visualizing a probabilistic atlas with plot_prob_atlas": [[20, "visualizing-a-probabilistic-atlas-with-plot-prob-atlas"]], "Visualizing 4D probabilistic atlas maps": [[21, "visualizing-4d-probabilistic-atlas-maps"]], "Loading and plotting of a cortical surface atlas": [[22, "loading-and-plotting-of-a-cortical-surface-atlas"]], "References": [[22, "references"], [23, "references"], [49, "references"], [49, "id1"], [56, "references"], [58, "references"], [100, "references"], [102, "references"], [114, "references"], [149, null], [150, null], [150, null], [153, null], [154, null], [154, null], [156, "references"], [157, "references"], [160, "references"], [161, "references"]], "Data fetcher": [[22, "data-fetcher"]], "Visualization": [[22, "visualization"], [25, "visualization"], [26, "visualization"], [30, "visualization"], [36, "visualization"], [37, "visualization"], [42, "visualization"], [160, "visualization"]], "Seed-based connectivity on the surface": [[23, "seed-based-connectivity-on-the-surface"]], "Extracting the seed time series": [[23, "extracting-the-seed-time-series"]], "Calculating seed-based functional connectivity": [[23, "calculating-seed-based-functional-connectivity"]], "Technical point: Illustration of the volume to surface sampling schemes": [[24, "technical-point-illustration-of-the-volume-to-surface-sampling-schemes"]], "Build a mesh (of a cylinder)": [[24, "build-a-mesh-of-a-cylinder"]], "Get the locations from which vol_to_surf would draw its samples": [[24, "get-the-locations-from-which-vol-to-surf-would-draw-its-samples"]], "Plot the mesh and the sample locations": [[24, "plot-the-mesh-and-the-sample-locations"]], "Adjust the sample locations": [[24, "adjust-the-sample-locations"]], "NeuroImaging volumes visualization": [[25, "neuroimaging-volumes-visualization"]], "Fetch data": [[25, "fetch-data"]], "Extracting a brain mask": [[25, "extracting-a-brain-mask"], [174, "extracting-a-brain-mask"]], "Applying the mask to extract the corresponding time series": [[25, "applying-the-mask-to-extract-the-corresponding-time-series"]], "Visualizing Megatrawls Network Matrices from Human Connectome Project": [[26, "visualizing-megatrawls-network-matrices-from-human-connectome-project"]], "Fetching the Megatrawls Network matrices": [[26, "fetching-the-megatrawls-network-matrices"]], "Decoding and predicting from brain images": [[28, "decoding-and-predicting-from-brain-images"], [110, "decoding-and-predicting-from-brain-images"]], "Decoding with ANOVA + SVM: face vs house in the Haxby dataset": [[29, "decoding-with-anova-svm-face-vs-house-in-the-haxby-dataset"]], "Retrieve the files of the Haxby dataset": [[29, "retrieve-the-files-of-the-haxby-dataset"]], "Load the behavioral data": [[29, "load-the-behavioral-data"], [33, "load-the-behavioral-data"]], "ANOVA pipeline with nilearn.decoding.Decoder object": [[29, "anova-pipeline-with-nilearn-decoding-decoder-object"], [34, "anova-pipeline-with-nilearn-decoding-decoder-object"]], "Fit the decoder and predict": [[29, "fit-the-decoder-and-predict"]], "Obtain prediction scores via cross validation": [[29, "obtain-prediction-scores-via-cross-validation"]], "Visualize the results": [[29, "visualize-the-results"], [81, "visualize-the-results"]], "Different classifiers in decoding the Haxby dataset": [[30, "different-classifiers-in-decoding-the-haxby-dataset"]], "Loading the data": [[30, "loading-the-data"], [40, "loading-the-data"], [94, "loading-the-data"]], "Training the decoder": [[30, "training-the-decoder"]], "Visualizing the face vs house map": [[30, "visualizing-the-face-vs-house-map"]], "Decoding with FREM: face vs house object recognition": [[31, "decoding-with-frem-face-vs-house-object-recognition"]], "Load the Haxby dataset": [[31, "load-the-haxby-dataset"], [34, "load-the-haxby-dataset"]], "Fit FREM": [[31, "fit-frem"], [39, "fit-frem"]], "Visualization of FREM weights": [[31, "visualization-of-frem-weights"]], "ROI-based decoding analysis in Haxby et al. dataset": [[32, "roi-based-decoding-analysis-in-haxby-et-al-dataset"]], "Load and prepare the data": [[32, "load-and-prepare-the-data"]], "Decoding on the different masks": [[32, "decoding-on-the-different-masks"]], "We make a simple bar plot to summarize the results": [[32, "we-make-a-simple-bar-plot-to-summarize-the-results"]], "Decoding of a dataset after GLM fit for signal extraction": [[33, "decoding-of-a-dataset-after-glm-fit-for-signal-extraction"]], "Fetch example Haxby dataset": [[33, "fetch-example-haxby-dataset"]], "Build a proper event structure for each session": [[33, "build-a-proper-event-structure-for-each-session"]], "Instantiate and run FirstLevelModel": [[33, "instantiate-and-run-firstlevelmodel"]], "Run the glm on data from each session": [[33, "run-the-glm-on-data-from-each-session"]], "Generating a report": [[33, "generating-a-report"], [61, "generating-a-report"], [62, "generating-a-report"], [64, "generating-a-report"], [75, "generating-a-report"]], "Build the decoding pipeline": [[33, "build-the-decoding-pipeline"]], "Setting a parameter by cross-validation": [[34, "setting-a-parameter-by-cross-validation"]], "Fit the Decoder and predict the responses": [[34, "fit-the-decoder-and-predict-the-responses"]], "Compute prediction scores with different values of screening percentile": [[34, "compute-prediction-scores-with-different-values-of-screening-percentile"]], "Nested cross-validation": [[34, "nested-cross-validation"]], "Plot the prediction scores using matplotlib": [[34, "plot-the-prediction-scores-using-matplotlib"]], "The haxby dataset: different multi-class strategies": [[35, "the-haxby-dataset-different-multi-class-strategies"]], "Load the Haxby data dataset": [[35, "load-the-haxby-data-dataset"]], "Prepare the fMRI data": [[35, "prepare-the-fmri-data"]], "Build the decoders, using scikit-learn": [[35, "build-the-decoders-using-scikit-learn"]], "Now we compute cross-validation scores": [[35, "now-we-compute-cross-validation-scores"]], "Plot barplots of the prediction scores": [[35, "plot-barplots-of-the-prediction-scores"]], "Plot a confusion matrix": [[35, "plot-a-confusion-matrix"]], "Searchlight analysis of face vs house recognition": [[36, "searchlight-analysis-of-face-vs-house-recognition"]], "Load Haxby dataset": [[36, "load-haxby-dataset"], [37, "load-haxby-dataset"]], "Restrict to faces and houses": [[36, "restrict-to-faces-and-houses"], [37, "restrict-to-faces-and-houses"]], "Prepare masks": [[36, "prepare-masks"]], "Searchlight computation": [[36, "searchlight-computation"], [37, "searchlight-computation"]], "F-scores computation": [[36, "f-scores-computation"]], "Cortical surface-based searchlight decoding": [[37, "cortical-surface-based-searchlight-decoding"]], "Surface bold response": [[37, "surface-bold-response"]], "Show stimuli of Haxby et al. dataset": [[38, "show-stimuli-of-haxby-et-al-dataset"]], "FREM on Jimura et al \u201cmixed gambles\u201d dataset.": [[39, "frem-on-jimura-et-al-mixed-gambles-dataset"]], "Load the data from the Jimura mixed-gamble experiment": [[39, "load-the-data-from-the-jimura-mixed-gamble-experiment"]], "Example use of TV-L1 SpaceNet": [[39, "example-use-of-tv-l1-spacenet"]], "Encoding models for visual stimuli from Miyawaki et al. 2008": [[40, "encoding-models-for-visual-stimuli-from-miyawaki-et-al-2008"]], "Building the encoding models": [[40, "building-the-encoding-models"]], "Mapping the encoding scores on the brain": [[40, "mapping-the-encoding-scores-on-the-brain"]], "Estimating receptive fields": [[40, "estimating-receptive-fields"]], "Reconstruction of visual stimuli from Miyawaki et al. 2008": [[41, "reconstruction-of-visual-stimuli-from-miyawaki-et-al-2008"]], "First we load the Miyawaki dataset": [[41, "first-we-load-the-miyawaki-dataset"]], "Then we prepare and mask the data": [[41, "then-we-prepare-and-mask-the-data"]], "We define our prediction function": [[41, "we-define-our-prediction-function"]], "Here we run the prediction: the decoding itself": [[41, "here-we-run-the-prediction-the-decoding-itself"]], "Let us quantify our prediction error": [[41, "let-us-quantify-our-prediction-error"]], "Voxel-Based Morphometry on Oasis dataset": [[42, "voxel-based-morphometry-on-oasis-dataset"]], "Predictive modeling analysis: VBM bio-markers of aging?": [[42, "predictive-modeling-analysis-vbm-bio-markers-of-aging"]], "Brain mapping with mass univariate": [[42, "brain-mapping-with-mass-univariate"]], "Load Oasis dataset": [[42, "load-oasis-dataset"], [75, "load-oasis-dataset"]], "Preprocess data": [[42, "preprocess-data"]], "Visualize the quality of predictions": [[42, "visualize-the-quality-of-predictions"]], "Inference with massively univariate model": [[42, "inference-with-massively-univariate-model"]], "Voxel-Based Morphometry on Oasis dataset with Space-Net prior": [[43, "voxel-based-morphometry-on-oasis-dataset-with-space-net-prior"]], "Load the Oasis VBM dataset": [[43, "load-the-oasis-vbm-dataset"]], "Fit the SpaceNet and predict with it": [[43, "fit-the-spacenet-and-predict-with-it"]], "Visualize the decoding maps and quality of predictions": [[43, "visualize-the-decoding-maps-and-quality-of-predictions"]], "Example of pattern recognition on simulated data": [[44, "example-of-pattern-recognition-on-simulated-data"]], "A function to generate data": [[44, "a-function-to-generate-data"]], "A simple function to plot slices": [[44, "a-simple-function-to-plot-slices"]], "Create data": [[44, "create-data"]], "Run different estimators": [[44, "run-different-estimators"]], "An exercice to go further": [[44, "an-exercice-to-go-further"]], "Functional connectivity": [[46, "functional-connectivity"], [110, "functional-connectivity"]], "Comparing connectomes on different reference atlases": [[47, "comparing-connectomes-on-different-reference-atlases"]], "Load atlases": [[47, "load-atlases"]], "Load functional data": [[47, "load-functional-data"]], "Extract coordinates on Yeo atlas - parcellations": [[47, "extract-coordinates-on-yeo-atlas-parcellations"]], "Plot a directed connectome - asymmetric connectivity measure": [[47, "plot-a-directed-connectome-asymmetric-connectivity-measure"]], "Load probabilistic atlases - extracting coordinates on brain maps": [[47, "load-probabilistic-atlases-extracting-coordinates-on-brain-maps"]], "Iterate over fetched atlases to extract coordinates - probabilistic": [[47, "iterate-over-fetched-atlases-to-extract-coordinates-probabilistic"]], "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning": [[48, "deriving-spatial-maps-from-group-fmri-data-using-ica-and-dictionary-learning"]], "Load brain development fmri dataset": [[48, "load-brain-development-fmri-dataset"]], "Apply CanICA on the data": [[48, "apply-canica-on-the-data"]], "Compare CanICA to dictionary learning": [[48, "compare-canica-to-dictionary-learning"]], "Clustering methods to learn a brain parcellation from fMRI": [[49, "clustering-methods-to-learn-a-brain-parcellation-from-fmri"]], "Download a brain development fmri dataset and turn it to a data matrix": [[49, "download-a-brain-development-fmri-dataset-and-turn-it-to-a-data-matrix"]], "Brain parcellations with Ward Clustering": [[49, "brain-parcellations-with-ward-clustering"]], "Visualize: Brain parcellations (Ward)": [[49, "visualize-brain-parcellations-ward"]], "Compressed representation of Ward clustering": [[49, "compressed-representation-of-ward-clustering"]], "Brain parcellations with KMeans Clustering": [[49, "brain-parcellations-with-kmeans-clustering"]], "Visualize: Brain parcellations (KMeans)": [[49, "visualize-brain-parcellations-kmeans"]], "Brain parcellations with Hierarchical KMeans Clustering": [[49, "brain-parcellations-with-hierarchical-kmeans-clustering"]], "Visualize: Brain parcellations (Hierarchical KMeans)": [[49, "visualize-brain-parcellations-hierarchical-kmeans"]], "Compare Hierarchical Kmeans clusters with those from Kmeans": [[49, "compare-hierarchical-kmeans-clusters-with-those-from-kmeans"]], "Brain parcellations with ReNA Clustering": [[49, "brain-parcellations-with-rena-clustering"]], "Visualize: Brain parcellations (ReNA)": [[49, "visualize-brain-parcellations-rena"]], "Compressed representation of ReNA clustering": [[49, "compressed-representation-of-rena-clustering"]], "Regions extraction using dictionary learning and functional connectomes": [[50, "regions-extraction-using-dictionary-learning-and-functional-connectomes"]], "Fetch brain development functional datasets": [[50, "fetch-brain-development-functional-datasets"]], "Extract functional networks with Dictionary learning": [[50, "extract-functional-networks-with-dictionary-learning"]], "Extract regions from networks": [[50, "extract-regions-from-networks"]], "Compute correlation coefficients": [[50, "compute-correlation-coefficients"]], "Plot resulting connectomes": [[50, "plot-resulting-connectomes"]], "Plot regions extracted for only one specific network": [[50, "plot-regions-extracted-for-only-one-specific-network"]], "Classification of age groups using functional connectivity": [[51, "classification-of-age-groups-using-functional-connectivity"]], "Load brain development fMRI dataset and MSDL atlas": [[51, "load-brain-development-fmri-dataset-and-msdl-atlas"], [99, "load-brain-development-fmri-dataset-and-msdl-atlas"]], "Region signals extraction": [[51, "region-signals-extraction"]], "ROI-to-ROI correlations of children": [[51, "roi-to-roi-correlations-of-children"]], "Studying partial correlations": [[51, "studying-partial-correlations"]], "Extract subjects variabilities around a group connectivity": [[51, "extract-subjects-variabilities-around-a-group-connectivity"]], "What kind of connectivity is most powerful for classification?": [[51, "what-kind-of-connectivity-is-most-powerful-for-classification"], [99, "what-kind-of-connectivity-is-most-powerful-for-classification"]], "Computing a connectome with sparse inverse covariance": [[52, "computing-a-connectome-with-sparse-inverse-covariance"]], "Retrieve the atlas and the data": [[52, "retrieve-the-atlas-and-the-data"], [54, "retrieve-the-atlas-and-the-data"], [56, "retrieve-the-atlas-and-the-data"]], "Extract time series": [[52, "extract-time-series"]], "Compute the sparse inverse covariance": [[52, "compute-the-sparse-inverse-covariance"]], "Display the connectome matrix": [[52, "display-the-connectome-matrix"]], "And now display the corresponding graph": [[52, "and-now-display-the-corresponding-graph"], [52, "id1"], [54, "and-now-display-the-corresponding-graph"]], "Display the sparse inverse covariance": [[52, "display-the-sparse-inverse-covariance"]], "Group Sparse inverse covariance for multi-subject connectome": [[53, "group-sparse-inverse-covariance-for-multi-subject-connectome"]], "Fetching datasets": [[53, "fetching-datasets"]], "Extracting region signals": [[53, "extracting-region-signals"]], "Computing group-sparse precision matrices": [[53, "computing-group-sparse-precision-matrices"]], "Displaying results": [[53, "displaying-results"]], "Extracting signals of a probabilistic atlas of functional regions": [[54, "extracting-signals-of-a-probabilistic-atlas-of-functional-regions"]], "Extract the time series": [[54, "extract-the-time-series"]], "Build and display a correlation matrix": [[54, "build-and-display-a-correlation-matrix"]], "Producing single subject maps of seed-to-voxel correlation": [[55, "producing-single-subject-maps-of-seed-to-voxel-correlation"]], "Getting the data": [[55, "getting-the-data"]], "Time series extraction": [[55, "time-series-extraction"]], "Performing the seed-to-voxel correlation analysis": [[55, "performing-the-seed-to-voxel-correlation-analysis"]], "Plotting the seed-to-voxel correlation map": [[55, "plotting-the-seed-to-voxel-correlation-map"]], "Fisher-z transformation and save nifti": [[55, "fisher-z-transformation-and-save-nifti"]], "Extracting signals from a brain parcellation": [[56, "extracting-signals-from-a-brain-parcellation"]], "Extract signals on a parcellation defined by labels": [[56, "extract-signals-on-a-parcellation-defined-by-labels"]], "Compute and display a correlation matrix": [[56, "compute-and-display-a-correlation-matrix"]], "Extract signals and compute a connectivity matrix without confounds removal": [[56, "extract-signals-and-compute-a-connectivity-matrix-without-confounds-removal"]], "Load confounds from file using a flexible strategy with fmriprep interface": [[56, "load-confounds-from-file-using-a-flexible-strategy-with-fmriprep-interface"]], "Motion-based scrubbing": [[56, "motion-based-scrubbing"]], "The impact of global signal removal": [[56, "the-impact-of-global-signal-removal"]], "Using predefined strategies": [[56, "using-predefined-strategies"]], "Connectivity structure estimation on simulated data": [[57, "connectivity-structure-estimation-on-simulated-data"]], "Extract signals on spheres and plot a connectome": [[58, "extract-signals-on-spheres-and-plot-a-connectome"]], "Retrieve the brain development fmri dataset": [[58, "retrieve-the-brain-development-fmri-dataset"]], "Coordinates of Default Mode Network": [[58, "coordinates-of-default-mode-network"]], "Extracts signal from sphere around DMN seeds": [[58, "extracts-signal-from-sphere-around-dmn-seeds"]], "Display time series": [[58, "display-time-series"]], "Compute partial correlation matrix": [[58, "compute-partial-correlation-matrix"]], "Display connectome": [[58, "display-connectome"]], "Extract signals on spheres from an atlas": [[58, "extract-signals-on-spheres-from-an-atlas"]], "Compute within spheres averaged time-series": [[58, "compute-within-spheres-averaged-time-series"]], "Estimate correlations": [[58, "estimate-correlations"]], "Plot matrix, graph, and strength": [[58, "plot-matrix-graph-and-strength"]], "Connectome extracted from Dosenbach\u2019s atlas": [[58, "connectome-extracted-from-dosenbach-s-atlas"]], "See also": [[58, "see-also"]], "GLM: First level analysis": [[60, "glm-first-level-analysis"], [110, "glm-first-level-analysis"]], "Default Mode Network extraction of ADHD dataset": [[61, "default-mode-network-extraction-of-adhd-dataset"]], "Prepare data and analysis parameters": [[61, "prepare-data-and-analysis-parameters"], [64, "prepare-data-and-analysis-parameters"], [67, "prepare-data-and-analysis-parameters"], [69, "prepare-data-and-analysis-parameters"], [100, "prepare-data-and-analysis-parameters"]], "Estimate contrasts": [[61, "estimate-contrasts"], [69, "estimate-contrasts"]], "Perform first level analysis": [[61, "perform-first-level-analysis"], [69, "perform-first-level-analysis"]], "First level analysis of a complete BIDS dataset from openneuro": [[62, "first-level-analysis-of-a-complete-bids-dataset-from-openneuro"]], "Fetch openneuro BIDS dataset": [[62, "fetch-openneuro-bids-dataset"]], "Obtain FirstLevelModel objects automatically and fit arguments": [[62, "obtain-firstlevelmodel-objects-automatically-and-fit-arguments"]], "First level model estimation (one subject)": [[62, "first-level-model-estimation-one-subject"]], "Simple statistical report of thresholded contrast": [[62, "simple-statistical-report-of-thresholded-contrast"]], "Saving model outputs to disk": [[62, "saving-model-outputs-to-disk"]], "Examples of design matrices": [[63, "examples-of-design-matrices"]], "Define parameters": [[63, "define-parameters"]], "Create design matrices": [[63, "create-design-matrices"]], "Simple example of two-session fMRI model fitting": [[64, "simple-example-of-two-session-fmri-model-fitting"]], "GLM estimation": [[64, "glm-estimation"], [67, "glm-estimation"]], "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model": [[65, "analysis-of-an-fmri-dataset-with-a-finite-impule-response-fir-model"]], "Understanding parameters of the first-level model": [[66, "understanding-parameters-of-the-first-level-model"]], "Running a basic model": [[66, "running-a-basic-model"]], "A first contrast estimation and plotting": [[66, "a-first-contrast-estimation-and-plotting"]], "Changing the drift model": [[66, "changing-the-drift-model"]], "Changing the hemodynamic response model": [[66, "changing-the-hemodynamic-response-model"]], "Adding a time derivative to the design": [[66, "adding-a-time-derivative-to-the-design"]], "The noise model: ar(1), ols, or higher order ar?": [[66, "the-noise-model-ar-1-ols-or-higher-order-ar"]], "Removing confounds": [[66, "removing-confounds"]], "Volume censoring": [[66, "volume-censoring"]], "Smoothing": [[66, "smoothing"], [175, "smoothing"]], "Masking": [[66, "masking"], [160, "masking"]], "Conclusion": [[66, "conclusion"]], "Example of explicit fixed effects fMRI model fitting": [[67, "example-of-explicit-fixed-effects-fmri-model-fitting"]], "Example of MRI response functions": [[68, "example-of-mri-response-functions"]], "Define stimulus parameters and response models": [[68, "define-stimulus-parameters-and-response-models"]], "Sample and plot response functions": [[68, "sample-and-plot-response-functions"]], "Example of surface-based first-level analysis": [[69, "example-of-surface-based-first-level-analysis"]], "Project the fMRI image to the surface": [[69, "project-the-fmri-image-to-the-surface"]], "Analysing the left hemisphere": [[69, "analysing-the-left-hemisphere"]], "Predicted time series and residuals": [[70, "predicted-time-series-and-residuals"]], "Import modules": [[70, "import-modules"]], "Fit model": [[70, "fit-model"]], "Calculate and plot contrast": [[70, "calculate-and-plot-contrast"]], "Extract the largest clusters": [[70, "extract-the-largest-clusters"]], "Plot predicted and actual time series for 6 most significant clusters": [[70, "plot-predicted-and-actual-time-series-for-6-most-significant-clusters"]], "Get residuals": [[70, "get-residuals"]], "Plot distribution of residuals": [[70, "plot-distribution-of-residuals"]], "Plot R-squared": [[70, "plot-r-squared"]], "Calculate and Plot F-test": [[70, "calculate-and-plot-f-test"]], "Single-subject data (two sessions) in native space": [[71, "single-subject-data-two-sessions-in-native-space"]], "Generate an events.tsv file for the NeuroSpin localizer task": [[72, "generate-an-events-tsv-file-for-the-neurospin-localizer-task"]], "GLM: Second level analysis": [[74, "glm-second-level-analysis"], [110, "glm-second-level-analysis"]], "Voxel-Based Morphometry on OASIS dataset": [[75, "voxel-based-morphometry-on-oasis-dataset"]], "VBM analysis of aging": [[75, "vbm-analysis-of-aging"]], "Analyse data": [[75, "analyse-data"]], "Second-level fMRI model: true positive proportion in clusters": [[76, "second-level-fmri-model-true-positive-proportion-in-clusters"]], "Fetch dataset": [[76, "fetch-dataset"], [79, "fetch-dataset"], [80, "fetch-dataset"]], "Estimate second level model": [[76, "estimate-second-level-model"], [77, "estimate-second-level-model"], [79, "estimate-second-level-model"]], "Example of generic design in second-level models": [[77, "example-of-generic-design-in-second-level-models"]], "Example of second level design matrix": [[78, "example-of-second-level-design-matrix"]], "Create a simple experimental paradigm": [[78, "create-a-simple-experimental-paradigm"]], "Create a second level design matrix": [[78, "create-a-second-level-design-matrix"]], "Second-level fMRI model: one sample test": [[79, "second-level-fmri-model-one-sample-test"]], "Display subject t_maps": [[79, "display-subject-t-maps"]], "Second-level fMRI model: two-sample test, unpaired and paired": [[80, "second-level-fmri-model-two-sample-test-unpaired-and-paired"]], "Estimate second level models": [[80, "estimate-second-level-models"]], "Plot the results": [[80, "plot-the-results"]], "Statistical testing of a second-level analysis": [[81, "statistical-testing-of-a-second-level-analysis"]], "Prepare some images for a simple t test": [[81, "prepare-some-images-for-a-simple-t-test"]], "Perform the second level analysis": [[81, "perform-the-second-level-analysis"]], "Manipulating brain image volumes": [[83, "manipulating-brain-image-volumes"], [110, "manipulating-brain-image-volumes"]], "Visualization of affine resamplings": [[84, "visualization-of-affine-resamplings"]], "Comparing the means of 2 images": [[85, "comparing-the-means-of-2-images"]], "Breaking an atlas of labels in separated regions": [[86, "breaking-an-atlas-of-labels-in-separated-regions"]], "The original Yeo atlas": [[86, "the-original-yeo-atlas"]], "Relabeling the atlas into separated regions": [[86, "relabeling-the-atlas-into-separated-regions"]], "Different connectivity modes": [[86, "different-connectivity-modes"]], "Parameter min_size": [[86, "parameter-min-size"]], "Regions Extraction of Default Mode Networks using Smith Atlas": [[87, "regions-extraction-of-default-mode-networks-using-smith-atlas"]], "Region Extraction using a t-statistical map (3D)": [[88, "region-extraction-using-a-t-statistical-map-3d"]], "Understanding NiftiMasker and mask computation": [[89, "understanding-niftimasker-and-mask-computation"]], "Computing a mask from the background": [[89, "computing-a-mask-from-the-background"]], "Computing a mask from raw EPI data": [[89, "computing-a-mask-from-raw-epi-data"]], "Computing the mask from the MNI template": [[89, "computing-the-mask-from-the-mni-template"]], "Compute and resample a mask": [[89, "compute-and-resample-a-mask"]], "After mask computation: extracting time series": [[89, "after-mask-computation-extracting-time-series"]], "Negating an image with math_img": [[90, "negating-an-image-with-math-img"]], "Extracting signals from brain regions using the NiftiLabelsMasker": [[91, "extracting-signals-from-brain-regions-using-the-niftilabelsmasker"]], "Simple example of NiftiMasker use": [[92, "simple-example-of-niftimasker-use"]], "Resample an image to a template": [[93, "resample-an-image-to-a-template"]], "Computing a Region of Interest (ROI) mask manually": [[94, "computing-a-region-of-interest-roi-mask-manually"]], "Build a statistical test to find voxels of interest": [[94, "build-a-statistical-test-to-find-voxels-of-interest"]], "Build a mask from this statistical map (Improving the quality of the mask)": [[94, "build-a-mask-from-this-statistical-map-improving-the-quality-of-the-mask"]], "Smoothing an image": [[95, "smoothing-an-image"]], "Advanced statistical analysis of brain images": [[97, "advanced-statistical-analysis-of-brain-images"], [110, "advanced-statistical-analysis-of-brain-images"]], "Advanced decoding using scikit learn": [[98, "advanced-decoding-using-scikit-learn"]], "Performing decoding with scikit-learn": [[98, "performing-decoding-with-scikit-learn"], [158, "performing-decoding-with-scikit-learn"]], "Masking the data": [[98, "masking-the-data"]], "Cross-validation with scikit-learn": [[98, "cross-validation-with-scikit-learn"], [158, "cross-validation-with-scikit-learn"]], "Tuning cross-validation parameters": [[98, "tuning-cross-validation-parameters"]], "Measuring the chance level": [[98, "measuring-the-chance-level"], [158, "measuring-the-chance-level"]], "Dummy estimator": [[98, "dummy-estimator"]], "Permutation test": [[98, "permutation-test"]], "Decoding without a mask: Anova-SVM in scikit-lean": [[98, "decoding-without-a-mask-anova-svm-in-scikit-lean"]], "Visualize the ANOVA + SVC\u2019s discriminating weights": [[98, "visualize-the-anova-svc-s-discriminating-weights"]], "Going further with scikit-learn": [[98, "going-further-with-scikit-learn"], [158, "going-further-with-scikit-learn"]], "Changing the prediction engine": [[98, "changing-the-prediction-engine"]], "Changing the feature selection": [[98, "changing-the-feature-selection"]], "Functional connectivity predicts age group": [[99, "functional-connectivity-predicts-age-group"]], "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding": [[100, "beta-series-modeling-for-task-based-functional-connectivity-and-decoding"]], "Choosing the right model for your analysis": [[100, null]], "Define the standard model": [[100, "define-the-standard-model"]], "Define the LSA model": [[100, "define-the-lsa-model"]], "Aggregate beta maps from the LSA model based on condition": [[100, "aggregate-beta-maps-from-the-lsa-model-based-on-condition"]], "Define the LSS models": [[100, "define-the-lss-models"]], "Show the design matrices for the first few trials": [[100, "show-the-design-matrices-for-the-first-few-trials"]], "Compare the three modeling approaches": [[100, "compare-the-three-modeling-approaches"]], "Applications of beta series": [[100, "applications-of-beta-series"]], "BIDS dataset first and second level analysis": [[101, "bids-dataset-first-and-second-level-analysis"]], "Fetch example BIDS dataset": [[101, "fetch-example-bids-dataset"], [108, "fetch-example-bids-dataset"]], "Obtain automatically FirstLevelModel objects and fit arguments": [[101, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"], [108, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"]], "Quick sanity check on fit arguments": [[101, "quick-sanity-check-on-fit-arguments"]], "First level model estimation": [[101, "first-level-model-estimation"]], "Second level model estimation": [[101, "second-level-model-estimation"]], "Massively univariate analysis of face vs house recognition": [[102, "massively-univariate-analysis-of-face-vs-house-recognition"]], "NeuroVault cross-study ICA maps.": [[103, "neurovault-cross-study-ica-maps"]], "Get image and term data": [[103, "get-image-and-term-data"]], "Reshape and mask images": [[103, "reshape-and-mask-images"]], "Run ICA and map components to terms": [[103, "run-ica-and-map-components-to-terms"]], "Generate figures": [[103, "generate-figures"]], "Multivariate decompositions: Independent component analysis of fMRI": [[104, "multivariate-decompositions-independent-component-analysis-of-fmri"]], "Massively univariate analysis of a motor task from the Localizer dataset": [[105, "massively-univariate-analysis-of-a-motor-task-from-the-localizer-dataset"]], "Massively univariate analysis of a calculation task from the Localizer dataset": [[106, "massively-univariate-analysis-of-a-calculation-task-from-the-localizer-dataset"]], "NeuroVault meta-analysis of stop-go paradigm studies.": [[107, "neurovault-meta-analysis-of-stop-go-paradigm-studies"]], "Fetch images for \u201csuccessful stop minus go\u201d-like protocols.": [[107, "fetch-images-for-successful-stop-minus-go-like-protocols"]], "Visualize the data": [[107, "visualize-the-data"]], "Compute statistics": [[107, "compute-statistics"]], "Plot the combined z maps": [[107, "plot-the-combined-z-maps"]], "Surface-based dataset first and second level analysis of a dataset": [[108, "surface-based-dataset-first-and-second-level-analysis-of-a-dataset"]], "Group study": [[108, "group-study"]], "Examples": [[110, "examples"], [174, null], [175, null], [175, null], [175, null], [175, null], [175, null], [175, null]], "General bibliography": [[111, "general-bibliography"]], "Advanced usage: manual pipelines and scaling up": [[112, "advanced-usage-manual-pipelines-and-scaling-up"]], "Building your own neuroimaging machine-learning pipeline": [[113, "building-your-own-neuroimaging-machine-learning-pipeline"]], "Data loading and preprocessing": [[113, "data-loading-and-preprocessing"]], "Downloading the data": [[113, "downloading-the-data"]], "Loading non image data: experiment description": [[113, "loading-non-image-data-experiment-description"]], "Masking the data: from 4D image to 2D array": [[113, "masking-the-data-from-4d-image-to-2d-array"]], "Applying a mask": [[113, "applying-a-mask"]], "Automatically computing a mask": [[113, "automatically-computing-a-mask"]], "Applying a scikit-learn machine learning method": [[113, "applying-a-scikit-learn-machine-learning-method"]], "Unmasking (inverse_transform)": [[113, "unmasking-inverse-transform"]], "Visualizing results": [[113, "visualizing-results"], [154, "visualizing-results"]], "Going further": [[113, "going-further"]], "Downloading statistical maps from the Neurovault repository": [[114, "downloading-statistical-maps-from-the-neurovault-repository"]], "Specific images or collections": [[114, "specific-images-or-collections"]], "Selection filters": [[114, "selection-filters"]], "Output": [[114, "output"]], "Neurosynth annotations": [[114, "neurosynth-annotations"]], "Examples using Neurovault": [[114, "examples-using-neurovault"]], "0.1.0": [[115, "id1"], [148, "id3737"]], "Changelog": [[115, "changelog"], [116, "changelog"], [117, "changelog"], [118, "changelog"], [121, "changelog"], [122, "changelog"], [124, "changelog"], [148, "changelog"], [148, "id3007"], [148, "id3128"], [148, "id3374"], [148, "id3496"], [148, "id3617"], [148, "id3738"]], "0.1.1": [[116, "id1"], [148, "id3616"]], "0.1.2": [[117, "id1"], [148, "id3495"]], "0.1.3": [[118, "id1"], [148, "id3373"]], "Fixes": [[118, "fixes"], [120, "fixes"], [123, "fixes"], [126, "fixes"], [127, "fixes"], [128, "fixes"], [128, "id3"], [129, "fixes"], [130, "fixes"], [132, "fixes"], [133, "fixes"], [134, "fixes"], [135, "fixes"], [136, "id4"], [136, "id9"], [136, "id13"], [137, "fixes"], [138, "fixes"], [139, "fixes"], [140, "fixes"], [141, "fixes"], [142, "fixes"], [143, "fixes"], [144, "fixes"], [145, "fixes"], [146, "fixes"], [148, "fixes"], [148, "id122"], [148, "id249"], [148, "id372"], [148, "id497"], [148, "id622"], [148, "id747"], [148, "id872"], [148, "id997"], [148, "id1120"], [148, "id1243"], [148, "id1372"], [148, "id1378"], [148, "id1382"], [148, "id1505"], [148, "id1629"], [148, "id1761"], [148, "id1889"], [148, "id2134"], [148, "id2259"], [148, "id2382"], [148, "id2387"], [148, "id2509"], [148, "id2634"], [148, "id3003"], [148, "id3375"]], "0.1.4": [[119, "id1"], [148, "id3252"]], "Highlights": [[119, "highlights"], [128, "highlights"], [129, "highlights"], [130, "highlights"], [133, "highlights"], [133, "id4"], [133, "id8"], [148, "id1755"], [148, "id1759"], [148, "id1764"], [148, "id2132"], [148, "id2257"], [148, "id2385"], [148, "id3253"]], "0.10.0": [[120, "id1"], [148, "id120"]], "HIGHLIGHTS": [[120, "highlights"], [136, "highlights"], [139, "highlights"], [140, "highlights"], [141, "highlights"], [142, "highlights"], [143, "highlights"], [145, "highlights"], [148, "highlights"], [148, "id245"], [148, "id495"], [148, "id620"], [148, "id745"], [148, "id870"], [148, "id994"], [148, "id1365"]], "NEW": [[120, "new"], [133, "new"], [134, "new"], [135, "new"], [136, "new"], [136, "id2"], [136, "id5"], [136, "id11"], [139, "new"], [140, "new"], [141, "new"], [142, "new"], [143, "new"], [145, "new"], [146, "new"], [148, "new"], [148, "id121"], [148, "id247"], [148, "id496"], [148, "id621"], [148, "id746"], [148, "id871"], [148, "id995"], [148, "id1366"], [148, "id1370"], [148, "id1374"], [148, "id1380"], [148, "id1504"], [148, "id1627"], [148, "id1751"]], "Enhancements": [[120, "enhancements"], [121, "enhancements"], [123, "enhancements"], [127, "enhancements"], [128, "enhancements"], [128, "id4"], [129, "enhancements"], [130, "enhancements"], [131, "enhancements"], [133, "id2"], [133, "id5"], [133, "id9"], [140, "enhancements"], [141, "enhancements"], [142, "enhancements"], [143, "enhancements"], [144, "enhancements"], [145, "enhancements"], [146, "enhancements"], [148, "enhancements"], [148, "id123"], [148, "id250"], [148, "id373"], [148, "id498"], [148, "id623"], [148, "id748"], [148, "id873"], [148, "id1756"], [148, "id1760"], [148, "id1765"], [148, "id2010"], [148, "id2133"], [148, "id2260"], [148, "id2383"], [148, "id2388"], [148, "id2510"], [148, "id3002"], [148, "id3130"]], "Changes": [[120, "changes"], [123, "changes"], [125, "changes"], [126, "changes"], [127, "changes"], [128, "changes"], [128, "id2"], [129, "changes"], [130, "changes"], [131, "changes"], [132, "changes"], [133, "changes"], [133, "id3"], [133, "id6"], [133, "id10"], [134, "changes"], [136, "id3"], [136, "id8"], [136, "id12"], [138, "changes"], [139, "changes"], [141, "changes"], [142, "changes"], [143, "changes"], [144, "changes"], [145, "changes"], [146, "changes"], [148, "changes"], [148, "id124"], [148, "id251"], [148, "id374"], [148, "id499"], [148, "id624"], [148, "id749"], [148, "id998"], [148, "id1121"], [148, "id1371"], [148, "id1377"], [148, "id1381"], [148, "id1628"], [148, "id1753"], [148, "id1757"], [148, "id1762"], [148, "id1766"], [148, "id1888"], [148, "id2011"], [148, "id2135"], [148, "id2258"], [148, "id2381"], [148, "id2386"], [148, "id2511"], [148, "id2632"], [148, "id2759"], [148, "id3004"]], "0.2.0": [[121, "id1"], [148, "id3127"]], "New features": [[121, "new-features"], [124, "new-features"], [148, "new-features"], [148, "id3129"]], "Bug fixes": [[121, "bug-fixes"], [124, "bug-fixes"], [131, "bug-fixes"], [148, "bug-fixes"], [148, "id2880"], [148, "id3131"]], "API changes summary": [[121, "api-changes-summary"], [148, "api-changes-summary"]], "Contributors": [[121, "contributors"], [123, "contributors"], [126, "contributors"], [130, "contributors"], [133, "contributors"], [133, "id7"], [133, "id11"], [134, "contributors"], [135, "contributors"], [136, "contributors"], [136, "id10"], [136, "id14"], [137, "contributors"], [138, "contributors"], [148, "contributors"], [148, "id1244"], [148, "id1373"], [148, "id1379"], [148, "id1383"], [148, "id1506"], [148, "id1630"], [148, "id1758"], [148, "id1763"], [148, "id1767"], [148, "id2136"], [148, "id2637"], [148, "id3005"], [148, "id3132"]], "0.2.1": [[122, "id1"], [148, "v0-2-1"]], "0.2.2": [[123, "id1"], [148, "id3000"]], "New": [[123, "new"], [125, "new"], [126, "new"], [126, "id3"], [148, "id2633"], [148, "id2636"], [148, "id2758"], [148, "id3001"]], "0.2.3": [[124, "id1"], [148, "id2879"]], "0.2.4": [[125, "id1"], [148, "id2757"]], "0.2.5.1": [[126, "id1"], [148, "id2631"]], "0.2.5": [[126, "id2"], [148, "id2635"]], "0.2.6": [[127, "id1"], [148, "id2508"]], "0.3.0": [[128, "id1"], [148, "id2380"]], "0.3.0 beta": [[128, "beta"], [148, "id2384"]], "0.3.1": [[129, "id1"], [148, "id2256"]], "0.4.0": [[130, "id1"], [148, "id2131"]], "0.4.1": [[131, "id1"], [148, "id2009"]], "0.4.2": [[132, "id1"], [148, "id1887"]], "0.5.0": [[133, "id1"], [148, "id1750"]], "ENHANCEMENTS": [[133, "enhancements"], [136, "enhancements"], [137, "enhancements"], [138, "enhancements"], [148, "id1119"], [148, "id1242"], [148, "id1367"], [148, "id1752"]], "0.5.0 rc": [[133, "rc"], [148, "id1754"]], "0.5.0 beta": [[133, "beta"], [148, "beta"]], "0.5.0 alpha": [[133, "alpha"], [148, "alpha"]], "0.5.1": [[134, "id1"], [148, "id1626"]], "Known Issues": [[134, "known-issues"], [148, "known-issues"]], "0.5.2": [[135, "id1"], [148, "id1503"]], "0.6.0": [[136, "id1"], [148, "id1364"]], "CHANGES": [[136, "changes"], [148, "id1368"]], "FIXES": [[136, "fixes"], [148, "id1369"]], "0.6.0rc": [[136, "rc"], [148, "rc"]], "0.6.0b0": [[136, "b0"], [148, "b0"]], "0.6.0a0": [[136, "a0"], [148, "a0"]], "0.6.1": [[137, "id1"], [148, "id1241"]], "0.6.2": [[138, "id1"], [148, "id1118"]], "0.7.0": [[139, "id1"], [148, "id993"]], "0.7.1": [[140, "id1"], [148, "id869"]], "0.8.0": [[141, "id1"], [148, "id744"]], "0.8.1": [[142, "id1"], [148, "id619"]], "0.9.0": [[143, "id1"], [148, "id494"]], "0.9.1": [[144, "id1"], [148, "id371"]], "0.9.2": [[145, "id1"], [148, "id244"]], "0.10.1.dev": [[146, "dev"], [148, "dev"]], "What\u2019s new": [[148, "what-s-new"]], "Connectome extraction: inverse covariance for direct connections": [[149, "connectome-extraction-inverse-covariance-for-direct-connections"]], "Page summary": [[149, null], [150, null], [153, null], [154, null], [164, null], [167, null]], "Sparse inverse covariance for functional connectomes": [[149, "sparse-inverse-covariance-for-functional-connectomes"]], "Parameter selection": [[149, null]], "Full example": [[149, null], [149, null], [149, null], [150, null], [150, null]], "Exercise: computing sparse inverse covariance": [[149, null]], "Reference": [[149, null], [149, null], [149, null], [149, null], [152, null]], "Sparse inverse covariance on multiple subjects": [[149, "sparse-inverse-covariance-on-multiple-subjects"]], "Exercise: computing the correlation matrix of rest fmri": [[149, null], [150, null]], "Comparing the different approaches on simulated data": [[149, "comparing-the-different-approaches-on-simulated-data"]], "Full Example": [[149, null]], "Linking total and direct interactions at the group level": [[149, "linking-total-and-direct-interactions-at-the-group-level"]], "Exercise: computing connectivity in tangent space": [[149, null]], "Extracting times series to build a functional connectome": [[150, "extracting-times-series-to-build-a-functional-connectome"]], "Time-series from a brain parcellation or \u201cMaxProb\u201d atlas": [[150, "time-series-from-a-brain-parcellation-or-maxprob-atlas"]], "Brain parcellations": [[150, "brain-parcellations"]], "Extracting signals on a parcellation": [[150, "extracting-signals-on-a-parcellation"]], "Time-series from a probabilistic atlas": [[150, "time-series-from-a-probabilistic-atlas"]], "Probabilistic atlases": [[150, "probabilistic-atlases"]], "Extracting signals from a probabilistic atlas": [[150, "extracting-signals-from-a-probabilistic-atlas"]], "Exercise: correlation matrix of rest fMRI on probabilistic atlas": [[150, null]], "A functional connectome: a graph of interactions": [[150, "a-functional-connectome-a-graph-of-interactions"]], "A functional connectome: extracting coordinates of regions": [[150, "a-functional-connectome-extracting-coordinates-of-regions"]], "Functional connectivity and resting state": [[151, "functional-connectivity-and-resting-state"]], "Clustering to parcellate the brain in regions": [[152, "clustering-to-parcellate-the-brain-in-regions"]], "Data loading: movie-watching data": [[152, "data-loading-movie-watching-data"]], "Applying clustering": [[152, "applying-clustering"]], "Which clustering to use": [[152, null]], "Using and visualizing the resulting parcellation": [[152, "using-and-visualizing-the-resulting-parcellation"]], "Visualizing the parcellation": [[152, "visualizing-the-parcellation"]], "Compressed representation": [[152, "compressed-representation"]], "Example code": [[152, null], [160, null]], "Region Extraction for better brain parcellations": [[153, "region-extraction-for-better-brain-parcellations"]], "Fetching movie-watching based functional datasets": [[153, "fetching-movie-watching-based-functional-datasets"]], "Brain maps using Dictionary learning": [[153, "brain-maps-using-dictionary-learning"]], "Visualization of Dictionary learning maps": [[153, "visualization-of-dictionary-learning-maps"]], "Region Extraction with Dictionary learning maps": [[153, "region-extraction-with-dictionary-learning-maps"]], "Visualization of Region Extraction results": [[153, "visualization-of-region-extraction-results"]], "Computing functional connectivity matrices": [[153, "computing-functional-connectivity-matrices"]], "Visualization of functional connectivity matrices": [[153, "visualization-of-functional-connectivity-matrices"]], "Validating results": [[153, "validating-results"]], "Extracting functional brain networks: ICA and related": [[154, "extracting-functional-brain-networks-ica-and-related"]], "Multi-subject ICA: CanICA": [[154, "multi-subject-ica-canica"]], "Objective": [[154, "objective"]], "Nilearn data for examples": [[154, null]], "Fitting CanICA model with nilearn": [[154, "fitting-canica-model-with-nilearn"]], "Interpreting such components": [[154, "interpreting-such-components"]], "An alternative to ICA: Dictionary learning": [[154, "an-alternative-to-ica-dictionary-learning"]], "An introduction to decoding": [[155, "an-introduction-to-decoding"]], "Loading and preparing the data": [[155, "loading-and-preparing-the-data"]], "The Haxby 2001 experiment": [[155, "the-haxby-2001-experiment"]], "fMRI: using beta maps of a first-level analysis": [[155, null]], "Loading the data into nilearn": [[155, "loading-the-data-into-nilearn"]], "Full code example": [[155, null]], "Performing a simple decoding analysis": [[155, "performing-a-simple-decoding-analysis"]], "A few definitions": [[155, "a-few-definitions"]], "A first estimator": [[155, "a-first-estimator"]], "Decoding made easy": [[155, "decoding-made-easy"]], "Measuring prediction performance": [[155, "measuring-prediction-performance"]], "Cross-validation": [[155, "cross-validation"]], "Choosing a good cross-validation strategy": [[155, "choosing-a-good-cross-validation-strategy"]], "Choice of the prediction accuracy measure": [[155, "choice-of-the-prediction-accuracy-measure"]], "Prediction accuracy at chance using simple strategies": [[155, "prediction-accuracy-at-chance-using-simple-strategies"]], "Putting it all together": [[155, null]], "Visualizing the decoder\u2019s weights": [[155, "visualizing-the-decoder-s-weights"]], "Decoding without a mask: Anova-SVM": [[155, "decoding-without-a-mask-anova-svm"]], "Dimension reduction with feature selection": [[155, "dimension-reduction-with-feature-selection"]], "Visualizing the results": [[155, "visualizing-the-results"]], "Final script": [[155, null]], "Choosing the right predictive model for neuroimaging": [[156, "choosing-the-right-predictive-model-for-neuroimaging"]], "Predictions: regression, classification and multi-class": [[156, "predictions-regression-classification-and-multi-class"]], "Regression": [[156, "regression"]], "Classification: two classes or multi-class": [[156, "classification-two-classes-or-multi-class"]], "Different linear models": [[156, "different-linear-models"]], "Setting estimator parameters": [[156, "setting-estimator-parameters"], [158, "setting-estimator-parameters"]], "Bagging several models": [[156, "bagging-several-models"]], "FREM: fast ensembling of regularized models for robust decoding": [[157, "frem-fast-ensembling-of-regularized-models-for-robust-decoding"]], "FREM pipeline": [[157, "frem-pipeline"]], "Empirical comparisons": [[157, "empirical-comparisons"]], "Decoding performance increase on Haxby dataset": [[157, "decoding-performance-increase-on-haxby-dataset"]], "Code": [[157, null], [157, null], [174, null]], "Spatial regularization of decoding maps on mixed gambles study": [[157, "spatial-regularization-of-decoding-maps-on-mixed-gambles-study"]], "Running scikit-learn functions for more control on the analysis": [[158, "running-scikit-learn-functions-for-more-control-on-the-analysis"]], "Using scikit-learn estimators": [[158, "using-scikit-learn-estimators"]], "Decoding on simulated data": [[158, null]], "Decoding without a mask: Anova-SVM using scikit-learn": [[158, "decoding-without-a-mask-anova-svm-using-scikit-learn"]], "Using any other model in the pipeline": [[158, "using-any-other-model-in-the-pipeline"]], "Decoding and MVPA: predicting from brain images": [[159, "decoding-and-mvpa-predicting-from-brain-images"]], "Searchlight : finding voxels containing information": [[160, "searchlight-finding-voxels-containing-information"]], "Principle of the Searchlight": [[160, "principle-of-the-searchlight"]], "Further Reading": [[160, null]], "Preparing the data": [[160, "preparing-the-data"]], "Setting up the searchlight": [[160, "setting-up-the-searchlight"]], "Classifier": [[160, "classifier"]], "Score function": [[160, "score-function"]], "Cross validation": [[160, "cross-validation"]], "Sphere radius": [[160, "sphere-radius"]], "Searchlight": [[160, "id6"]], "Comparing to massively univariate analysis: F_score or SPM": [[160, "comparing-to-massively-univariate-analysis-f-score-or-spm"]], "SpaceNet: decoding with spatial structure for better maps": [[161, "spacenet-decoding-with-spatial-structure-for-better-maps"]], "The SpaceNet decoder": [[161, "the-spacenet-decoder"]], "Related example": [[161, "related-example"]], "Group-sparse covariance estimation": [[162, "group-sparse-covariance-estimation"]], "Description": [[162, "description"]], "Numerical stability": [[162, "numerical-stability"]], "Execution time": [[162, "execution-time"]], "Synthetic dataset": [[162, "synthetic-dataset"]], "Stopping criteria": [[162, "stopping-criteria"]], "Maximum number of iterations": [[162, "maximum-number-of-iterations"]], "Duality gap": [[162, "duality-gap"]], "Variation of norm of estimate": [[162, "variation-of-norm-of-estimate"]], "Initial estimate value": [[162, "initial-estimate-value"]], "Modifying the stopping criterion": [[162, "modifying-the-stopping-criterion"]], "Cross-validation algorithm": [[162, "cross-validation-algorithm"]], "Principle of cross-validation": [[162, "principle-of-cross-validation"]], "Bounds on alpha": [[162, "bounds-on-alpha"]], "Iterative grid search": [[162, "iterative-grid-search"]], "Warm restart": [[162, "warm-restart"]], "Stopping criterion": [[162, "stopping-criterion"]], "Contributing": [[163, "contributing"], [163, "id3"]], "Code of Conduct": [[163, "code-of-conduct"]], "How to get help?": [[163, "how-to-get-help"]], "How to help the project?": [[163, "how-to-help-the-project"]], "Report bugs or discuss enhancement ideas": [[163, "report-bugs-or-discuss-enhancement-ideas"]], "Answer questions": [[163, "answer-questions"]], "Review Pull Requests": [[163, "review-pull-requests"]], "Contribute code": [[163, "contribute-code"]], "How do we decide what code goes in?": [[163, "how-do-we-decide-what-code-goes-in"]], "Scope of the project": [[163, "scope-of-the-project"]], "Who makes decisions": [[163, "who-makes-decisions"]], "How to contribute to nilearn": [[163, "how-to-contribute-to-nilearn"]], "Contribution Guidelines": [[163, "contribution-guidelines"]], "PR Structure": [[163, "pr-structure"]], "Coding Style": [[163, "coding-style"]], "Tests": [[163, "tests"]], "Documentation": [[163, "documentation"]], "Setting up your environment": [[163, "setting-up-your-environment"]], "Installing": [[163, "installing"]], "Recommendation": [[163, null]], "Building documentation": [[163, "building-documentation"]], "Additional cases": [[163, "additional-cases"]], "How to contribute an atlas": [[163, "how-to-contribute-an-atlas"]], "How to contribute a dataset fetcher": [[163, "how-to-contribute-a-dataset-fetcher"]], "Maintenance": [[163, "maintenance"], [171, "maintenance"]], "First level models": [[164, "first-level-models"]], "HRF models": [[164, "hrf-models"]], "Design matrix: event-based and time series-based": [[164, "design-matrix-event-based-and-time-series-based"]], "Event-based": [[164, "event-based"]], "Time series-based": [[164, "time-series-based"]], "Fitting a first level model": [[164, "fitting-a-first-level-model"]], "Computing contrasts": [[164, "computing-contrasts"]], "Extracting predicted time series and residuals": [[164, "extracting-predicted-time-series-and-residuals"]], "Surface-based analysis": [[164, "surface-based-analysis"]], "An introduction to GLMs in fMRI statistical analysis": [[165, "an-introduction-to-glms-in-fmri-statistical-analysis"]], "A primer on BOLD-fMRI data analysis": [[165, "a-primer-on-bold-fmri-data-analysis"]], "What is fMRI ?": [[165, "what-is-fmri"]], "fMRI data modelling": [[165, "fmri-data-modelling"]], "fMRI statistical analysis": [[165, "fmri-statistical-analysis"]], "Multiple Comparisons": [[165, "multiple-comparisons"]], "Analyzing fMRI using GLMs": [[166, "analyzing-fmri-using-glms"]], "Second level models": [[167, "second-level-models"]], "Fitting a second level model": [[167, "fitting-a-second-level-model"]], "Thresholding statistical maps": [[167, "thresholding-statistical-maps"]], "Multiple comparisons correction": [[167, "multiple-comparisons-correction"]], "Voxel based morphometry": [[167, "voxel-based-morphometry"]], "Glossary": [[168, "glossary"]], "Nilearn": [[169, "nilearn"]], "Featured examples": [[169, "featured-examples"]], "Introduction": [[170, "introduction"]], "What is nilearn?": [[170, "what-is-nilearn"]], "Using nilearn for the first time": [[170, "using-nilearn-for-the-first-time"]], "First steps with nilearn": [[170, "first-steps-with-nilearn"]], "Learning with the API references": [[170, "learning-with-the-api-references"]], "Learning with examples": [[170, "learning-with-examples"]], "Finding help": [[170, "finding-help"]], "Machine learning applications to Neuroimaging": [[170, "machine-learning-applications-to-neuroimaging"]], "Project Organization": [[171, "project-organization"]], "Issues": [[171, "issues"]], "Labels": [[171, "labels"]], "Closing policy": [[171, "closing-policy"]], "Pull Requests": [[171, "pull-requests"]], "How to make a release?": [[171, "how-to-make-a-release"]], "Prepare code for the release": [[171, "prepare-code-for-the-release"]], "Prepare the release": [[171, "prepare-the-release"]], "Build the distributions and upload them to Pypi": [[171, "build-the-distributions-and-upload-them-to-pypi"]], "Build and deploy the documentation": [[171, "build-and-deploy-the-documentation"]], "Post-release": [[171, "post-release"]], "Manipulation brain volumes with nilearn": [[172, "manipulation-brain-volumes-with-nilearn"]], "Input and output: neuroimaging data representation": [[173, "input-and-output-neuroimaging-data-representation"]], "Inputing data: file names or image objects": [[173, "inputing-data-file-names-or-image-objects"]], "File names and objects, 3D and 4D images": [[173, "file-names-and-objects-3d-and-4d-images"]], "File name matching: \u201cglobbing\u201d and user path expansion": [[173, "file-name-matching-globbing-and-user-path-expansion"]], "Python globbing": [[173, null]], "Fetching open datasets from Internet": [[173, "fetching-open-datasets-from-internet"]], "nilearn_data: Where is the downloaded data stored?": [[173, null]], "Understanding neuroimaging data": [[173, "understanding-neuroimaging-data"]], "Nifti and Analyze data": [[173, "nifti-and-analyze-data"]], "Dataset formatting: data shape": [[173, null]], "Niimg-like objects": [[173, "niimg-like-objects"]], "Image affines": [[173, null]], "Decreasing memory used when loading Nifti images": [[173, null]], "Text files: phenotype or behavior": [[173, "text-files-phenotype-or-behavior"]], "Reading CSV with pandas": [[173, null]], "Manipulating images: resampling, smoothing, masking, ROIs\u2026": [[174, "manipulating-images-resampling-smoothing-masking-rois"]], "Functions for data preparation and image transformation": [[174, "functions-for-data-preparation-and-image-transformation"]], "Resampling images": [[174, "resampling-images"]], "Resampling one image to match another one": [[174, "resampling-one-image-to-match-another-one"]], "Example": [[174, null]], "Resampling to a specific target affine, shape, or resolution": [[174, "resampling-to-a-specific-target-affine-shape-or-resolution"]], "Special case: resampling to a given voxel size": [[174, null]], "Accessing individual volumes in 4D images": [[174, "accessing-individual-volumes-in-4d-images"]], "Computing and applying spatial masks": [[174, "computing-and-applying-spatial-masks"]], "Masking data: from 4D Nifti images to 2D data arrays": [[174, "masking-data-from-4d-nifti-images-to-2d-data-arrays"]], "Image operations: creating a ROI mask manually": [[174, "image-operations-creating-a-roi-mask-manually"]], "From neuroimaging volumes to data matrices: the masker objects": [[175, "from-neuroimaging-volumes-to-data-matrices-the-masker-objects"]], "The concept of \u201cmasker\u201d objects": [[175, "the-concept-of-masker-objects"]], "Advanced: Design philosophy of \u201cMaskers\u201d": [[175, null]], "NiftiMasker: applying a mask to load time-series": [[175, "niftimasker-applying-a-mask-to-load-time-series"]], "Advanced: scikit-learn Pipelines": [[175, null]], "Custom data loading: loading only the first 100 time points": [[175, "custom-data-loading-loading-only-the-first-100-time-points"]], "Controlling how the mask is computed from the data": [[175, "controlling-how-the-mask-is-computed-from-the-data"]], "Visualizing the computed mask": [[175, "visualizing-the-computed-mask"]], "Different masking strategies": [[175, "different-masking-strategies"]], "Extra mask parameters: opening, cutoff\u2026": [[175, "extra-mask-parameters-opening-cutoff"]], "Common data preparation steps: smoothing, filtering, resampling": [[175, "common-data-preparation-steps-smoothing-filtering-resampling"]], "`dtype` argument": [[175, null]], "Temporal Filtering and confound removal": [[175, "temporal-filtering-and-confound-removal"]], "Exercise": [[175, null]], "Resampling: resizing and changing resolutions of images": [[175, "resampling-resizing-and-changing-resolutions-of-images"]], "Inverse transform: unmasking data": [[175, "inverse-transform-unmasking-data"]], "Examples to better understand the NiftiMasker": [[175, null]], "Extraction of signals from regions: NiftiLabelsMasker, NiftiMapsMasker": [[175, "extraction-of-signals-from-regions-niftilabelsmasker-niftimapsmasker"]], "Regions definition": [[175, "regions-definition"]], "NiftiLabelsMasker Usage": [[175, "niftilabelsmasker-usage"]], "NiftiMapsMasker Usage": [[175, "niftimapsmasker-usage"]], "Extraction of signals from regions for multiple subjects: MultiNiftiMasker, MultiNiftiLabelsMasker, MultiNiftiMapsMasker": [[175, "extraction-of-signals-from-regions-for-multiple-subjects-multiniftimasker-multiniftilabelsmasker-multiniftimapsmasker"]], "MultiNiftiMasker Usage": [[175, "multiniftimasker-usage"]], "MultiNiftiLabelsMasker Usage": [[175, "multiniftilabelsmasker-usage"]], "MultiNiftiMapsMasker Usage": [[175, "multiniftimapsmasker-usage"]], "Extraction of signals from seeds: NiftiSpheresMasker": [[175, "extraction-of-signals-from-seeds-niftispheresmasker"]], "nilearn.connectome: Functional Connectivity": [[176, "module-nilearn.connectome"]], "nilearn.datasets: Automatic Dataset Fetching": [[177, "module-nilearn.datasets"]], "Templates": [[177, "templates"]], "Atlases": [[177, "atlases"]], "Preprocessed datasets": [[177, "preprocessed-datasets"]], "Statistical maps/derivatives": [[177, "statistical-maps-derivatives"]], "General functions": [[177, "general-functions"]], "nilearn.decoding: Decoding": [[178, "module-nilearn.decoding"]], "nilearn.decomposition: Multivariate Decompositions": [[179, "module-nilearn.decomposition"]], "nilearn.connectome.ConnectivityMeasure": [[180, "nilearn-connectome-connectivitymeasure"]], "Examples using nilearn.connectome.ConnectivityMeasure": [[180, "examples-using-nilearn-connectome-connectivitymeasure"]], "nilearn.connectome.GroupSparseCovariance": [[181, "nilearn-connectome-groupsparsecovariance"]], "nilearn.connectome.GroupSparseCovarianceCV": [[182, "nilearn-connectome-groupsparsecovariancecv"]], "Examples using nilearn.connectome.GroupSparseCovarianceCV": [[182, "examples-using-nilearn-connectome-groupsparsecovariancecv"]], "nilearn.connectome.cov_to_corr": [[183, "nilearn-connectome-cov-to-corr"]], "nilearn.connectome.group_sparse_covariance": [[184, "nilearn-connectome-group-sparse-covariance"]], "nilearn.connectome.prec_to_partial": [[185, "nilearn-connectome-prec-to-partial"]], "nilearn.connectome.sym_matrix_to_vec": [[186, "nilearn-connectome-sym-matrix-to-vec"]], "nilearn.connectome.vec_to_sym_matrix": [[187, "nilearn-connectome-vec-to-sym-matrix"]], "nilearn.datasets.fetch_abide_pcp": [[188, "nilearn-datasets-fetch-abide-pcp"]], "nilearn.datasets.fetch_adhd": [[189, "nilearn-datasets-fetch-adhd"]], "Examples using nilearn.datasets.fetch_adhd": [[189, "examples-using-nilearn-datasets-fetch-adhd"]], "nilearn.datasets.fetch_atlas_aal": [[190, "nilearn-datasets-fetch-atlas-aal"]], "nilearn.datasets.fetch_atlas_allen_2011": [[191, "nilearn-datasets-fetch-atlas-allen-2011"]], "Examples using nilearn.datasets.fetch_atlas_allen_2011": [[191, "examples-using-nilearn-datasets-fetch-atlas-allen-2011"]], "nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[192, "nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "Examples using nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[192, "examples-using-nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "nilearn.datasets.fetch_atlas_craddock_2012": [[193, "nilearn-datasets-fetch-atlas-craddock-2012"]], "nilearn.datasets.fetch_atlas_destrieux_2009": [[194, "nilearn-datasets-fetch-atlas-destrieux-2009"]], "Examples using nilearn.datasets.fetch_atlas_destrieux_2009": [[194, "examples-using-nilearn-datasets-fetch-atlas-destrieux-2009"]], "nilearn.datasets.fetch_atlas_difumo": [[195, "nilearn-datasets-fetch-atlas-difumo"]], "Examples using nilearn.datasets.fetch_atlas_difumo": [[195, "examples-using-nilearn-datasets-fetch-atlas-difumo"]], "nilearn.datasets.fetch_atlas_harvard_oxford": [[196, "nilearn-datasets-fetch-atlas-harvard-oxford"]], "Examples using nilearn.datasets.fetch_atlas_harvard_oxford": [[196, "examples-using-nilearn-datasets-fetch-atlas-harvard-oxford"]], "nilearn.datasets.fetch_atlas_juelich": [[197, "nilearn-datasets-fetch-atlas-juelich"]], "Examples using nilearn.datasets.fetch_atlas_juelich": [[197, "examples-using-nilearn-datasets-fetch-atlas-juelich"]], "nilearn.datasets.fetch_atlas_msdl": [[198, "nilearn-datasets-fetch-atlas-msdl"]], "Examples using nilearn.datasets.fetch_atlas_msdl": [[198, "examples-using-nilearn-datasets-fetch-atlas-msdl"]], "nilearn.datasets.fetch_atlas_pauli_2017": [[199, "nilearn-datasets-fetch-atlas-pauli-2017"]], "Examples using nilearn.datasets.fetch_atlas_pauli_2017": [[199, "examples-using-nilearn-datasets-fetch-atlas-pauli-2017"]], "nilearn.datasets.fetch_atlas_schaefer_2018": [[200, "nilearn-datasets-fetch-atlas-schaefer-2018"]], "nilearn.datasets.fetch_atlas_smith_2009": [[201, "nilearn-datasets-fetch-atlas-smith-2009"]], "Examples using nilearn.datasets.fetch_atlas_smith_2009": [[201, "examples-using-nilearn-datasets-fetch-atlas-smith-2009"]], "nilearn.datasets.fetch_atlas_surf_destrieux": [[202, "nilearn-datasets-fetch-atlas-surf-destrieux"]], "Examples using nilearn.datasets.fetch_atlas_surf_destrieux": [[202, "examples-using-nilearn-datasets-fetch-atlas-surf-destrieux"]], "nilearn.datasets.fetch_atlas_talairach": [[203, "nilearn-datasets-fetch-atlas-talairach"]], "nilearn.datasets.fetch_atlas_yeo_2011": [[204, "nilearn-datasets-fetch-atlas-yeo-2011"]], "Examples using nilearn.datasets.fetch_atlas_yeo_2011": [[204, "examples-using-nilearn-datasets-fetch-atlas-yeo-2011"]], "nilearn.datasets.fetch_bids_langloc_dataset": [[205, "nilearn-datasets-fetch-bids-langloc-dataset"]], "nilearn.datasets.fetch_coords_dosenbach_2010": [[206, "nilearn-datasets-fetch-coords-dosenbach-2010"]], "Examples using nilearn.datasets.fetch_coords_dosenbach_2010": [[206, "examples-using-nilearn-datasets-fetch-coords-dosenbach-2010"]], "nilearn.datasets.fetch_coords_power_2011": [[207, "nilearn-datasets-fetch-coords-power-2011"]], "Examples using nilearn.datasets.fetch_coords_power_2011": [[207, "examples-using-nilearn-datasets-fetch-coords-power-2011"]], "nilearn.datasets.fetch_coords_seitzman_2018": [[208, "nilearn-datasets-fetch-coords-seitzman-2018"]], "nilearn.datasets.fetch_development_fmri": [[209, "nilearn-datasets-fetch-development-fmri"]], "Examples using nilearn.datasets.fetch_development_fmri": [[209, "examples-using-nilearn-datasets-fetch-development-fmri"]], "nilearn.datasets.fetch_ds000030_urls": [[210, "nilearn-datasets-fetch-ds000030-urls"]], "Examples using nilearn.datasets.fetch_ds000030_urls": [[210, "examples-using-nilearn-datasets-fetch-ds000030-urls"]], "nilearn.datasets.fetch_fiac_first_level": [[211, "nilearn-datasets-fetch-fiac-first-level"]], "Examples using nilearn.datasets.fetch_fiac_first_level": [[211, "examples-using-nilearn-datasets-fetch-fiac-first-level"]], "nilearn.datasets.fetch_haxby": [[212, "nilearn-datasets-fetch-haxby"]], "Examples using nilearn.datasets.fetch_haxby": [[212, "examples-using-nilearn-datasets-fetch-haxby"]], "nilearn.datasets.fetch_icbm152_2009": [[213, "nilearn-datasets-fetch-icbm152-2009"]], "Examples using nilearn.datasets.fetch_icbm152_2009": [[213, "examples-using-nilearn-datasets-fetch-icbm152-2009"]], "nilearn.datasets.fetch_icbm152_brain_gm_mask": [[214, "nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "Examples using nilearn.datasets.fetch_icbm152_brain_gm_mask": [[214, "examples-using-nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "nilearn.datasets.fetch_language_localizer_demo_dataset": [[215, "nilearn-datasets-fetch-language-localizer-demo-dataset"]], "Examples using nilearn.datasets.fetch_language_localizer_demo_dataset": [[215, "examples-using-nilearn-datasets-fetch-language-localizer-demo-dataset"]], "nilearn.datasets.fetch_localizer_button_task": [[216, "nilearn-datasets-fetch-localizer-button-task"]], "Examples using nilearn.datasets.fetch_localizer_button_task": [[216, "examples-using-nilearn-datasets-fetch-localizer-button-task"]], "nilearn.datasets.fetch_localizer_calculation_task": [[217, "nilearn-datasets-fetch-localizer-calculation-task"]], "Examples using nilearn.datasets.fetch_localizer_calculation_task": [[217, "examples-using-nilearn-datasets-fetch-localizer-calculation-task"]], "nilearn.datasets.fetch_localizer_contrasts": [[218, "nilearn-datasets-fetch-localizer-contrasts"]], "Examples using nilearn.datasets.fetch_localizer_contrasts": [[218, "examples-using-nilearn-datasets-fetch-localizer-contrasts"]], "nilearn.datasets.fetch_localizer_first_level": [[219, "nilearn-datasets-fetch-localizer-first-level"]], "Examples using nilearn.datasets.fetch_localizer_first_level": [[219, "examples-using-nilearn-datasets-fetch-localizer-first-level"]], "nilearn.datasets.fetch_megatrawls_netmats": [[220, "nilearn-datasets-fetch-megatrawls-netmats"]], "Examples using nilearn.datasets.fetch_megatrawls_netmats": [[220, "examples-using-nilearn-datasets-fetch-megatrawls-netmats"]], "nilearn.datasets.fetch_mixed_gambles": [[221, "nilearn-datasets-fetch-mixed-gambles"]], "Examples using nilearn.datasets.fetch_mixed_gambles": [[221, "examples-using-nilearn-datasets-fetch-mixed-gambles"]], "nilearn.datasets.fetch_miyawaki2008": [[222, "nilearn-datasets-fetch-miyawaki2008"]], "Examples using nilearn.datasets.fetch_miyawaki2008": [[222, "examples-using-nilearn-datasets-fetch-miyawaki2008"]], "nilearn.datasets.fetch_neurovault": [[223, "nilearn-datasets-fetch-neurovault"]], "Examples using nilearn.datasets.fetch_neurovault": [[223, "examples-using-nilearn-datasets-fetch-neurovault"]], "nilearn.datasets.fetch_neurovault_auditory_computation_task": [[224, "nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "Examples using nilearn.datasets.fetch_neurovault_auditory_computation_task": [[224, "examples-using-nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "nilearn.datasets.fetch_neurovault_ids": [[225, "nilearn-datasets-fetch-neurovault-ids"]], "Examples using nilearn.datasets.fetch_neurovault_ids": [[225, "examples-using-nilearn-datasets-fetch-neurovault-ids"]], "nilearn.datasets.fetch_neurovault_motor_task": [[226, "nilearn-datasets-fetch-neurovault-motor-task"]], "Examples using nilearn.datasets.fetch_neurovault_motor_task": [[226, "examples-using-nilearn-datasets-fetch-neurovault-motor-task"]], "nilearn.datasets.fetch_oasis_vbm": [[227, "nilearn-datasets-fetch-oasis-vbm"]], "Examples using nilearn.datasets.fetch_oasis_vbm": [[227, "examples-using-nilearn-datasets-fetch-oasis-vbm"]], "nilearn.datasets.fetch_openneuro_dataset": [[228, "nilearn-datasets-fetch-openneuro-dataset"]], "Examples using nilearn.datasets.fetch_openneuro_dataset": [[228, "examples-using-nilearn-datasets-fetch-openneuro-dataset"]], "nilearn.datasets.fetch_openneuro_dataset_index": [[229, "nilearn-datasets-fetch-openneuro-dataset-index"]], "nilearn.datasets.fetch_spm_auditory": [[230, "nilearn-datasets-fetch-spm-auditory"]], "Examples using nilearn.datasets.fetch_spm_auditory": [[230, "examples-using-nilearn-datasets-fetch-spm-auditory"]], "nilearn.datasets.fetch_spm_multimodal_fmri": [[231, "nilearn-datasets-fetch-spm-multimodal-fmri"]], "Examples using nilearn.datasets.fetch_spm_multimodal_fmri": [[231, "examples-using-nilearn-datasets-fetch-spm-multimodal-fmri"]], "nilearn.datasets.fetch_surf_fsaverage": [[232, "nilearn-datasets-fetch-surf-fsaverage"]], "Examples using nilearn.datasets.fetch_surf_fsaverage": [[232, "examples-using-nilearn-datasets-fetch-surf-fsaverage"]], "nilearn.datasets.fetch_surf_nki_enhanced": [[233, "nilearn-datasets-fetch-surf-nki-enhanced"]], "Examples using nilearn.datasets.fetch_surf_nki_enhanced": [[233, "examples-using-nilearn-datasets-fetch-surf-nki-enhanced"]], "nilearn.datasets.get_data_dirs": [[234, "nilearn-datasets-get-data-dirs"]], "Examples using nilearn.datasets.get_data_dirs": [[234, "examples-using-nilearn-datasets-get-data-dirs"]], "nilearn.datasets.load_mni152_brain_mask": [[235, "nilearn-datasets-load-mni152-brain-mask"]], "Examples using nilearn.datasets.load_mni152_brain_mask": [[235, "examples-using-nilearn-datasets-load-mni152-brain-mask"]], "nilearn.datasets.load_mni152_gm_mask": [[236, "nilearn-datasets-load-mni152-gm-mask"]], "nilearn.datasets.load_mni152_gm_template": [[237, "nilearn-datasets-load-mni152-gm-template"]], "nilearn.datasets.load_mni152_template": [[238, "nilearn-datasets-load-mni152-template"]], "Examples using nilearn.datasets.load_mni152_template": [[238, "examples-using-nilearn-datasets-load-mni152-template"]], "nilearn.datasets.load_mni152_wm_mask": [[239, "nilearn-datasets-load-mni152-wm-mask"]], "nilearn.datasets.load_mni152_wm_template": [[240, "nilearn-datasets-load-mni152-wm-template"]], "nilearn.datasets.patch_openneuro_dataset": [[241, "nilearn-datasets-patch-openneuro-dataset"]], "nilearn.datasets.select_from_index": [[242, "nilearn-datasets-select-from-index"]], "Examples using nilearn.datasets.select_from_index": [[242, "examples-using-nilearn-datasets-select-from-index"]], "nilearn.decoding.Decoder": [[243, "nilearn-decoding-decoder"]], "Examples using nilearn.decoding.Decoder": [[243, "examples-using-nilearn-decoding-decoder"]], "nilearn.decoding.DecoderRegressor": [[244, "nilearn-decoding-decoderregressor"]], "Examples using nilearn.decoding.DecoderRegressor": [[244, "examples-using-nilearn-decoding-decoderregressor"]], "nilearn.decoding.FREMClassifier": [[245, "nilearn-decoding-fremclassifier"]], "Examples using nilearn.decoding.FREMClassifier": [[245, "examples-using-nilearn-decoding-fremclassifier"]], "nilearn.decoding.FREMRegressor": [[246, "nilearn-decoding-fremregressor"]], "Examples using nilearn.decoding.FREMRegressor": [[246, "examples-using-nilearn-decoding-fremregressor"]], "nilearn.decoding.SearchLight": [[247, "nilearn-decoding-searchlight"]], "Examples using nilearn.decoding.SearchLight": [[247, "examples-using-nilearn-decoding-searchlight"]], "nilearn.decoding.SpaceNetClassifier": [[248, "nilearn-decoding-spacenetclassifier"]], "nilearn.decoding.SpaceNetRegressor": [[249, "nilearn-decoding-spacenetregressor"]], "Examples using nilearn.decoding.SpaceNetRegressor": [[249, "examples-using-nilearn-decoding-spacenetregressor"]], "nilearn.decomposition.CanICA": [[250, "nilearn-decomposition-canica"]], "Examples using nilearn.decomposition.CanICA": [[250, "examples-using-nilearn-decomposition-canica"]], "nilearn.decomposition.DictLearning": [[251, "nilearn-decomposition-dictlearning"]], "Examples using nilearn.decomposition.DictLearning": [[251, "examples-using-nilearn-decomposition-dictlearning"]], "nilearn.glm.ARModel": [[252, "nilearn-glm-armodel"]], "nilearn.glm.Contrast": [[253, "nilearn-glm-contrast"]], "Examples using nilearn.glm.Contrast": [[253, "examples-using-nilearn-glm-contrast"]], "nilearn.glm.FContrastResults": [[254, "nilearn-glm-fcontrastresults"]], "nilearn.glm.LikelihoodModelResults": [[255, "nilearn-glm-likelihoodmodelresults"]], "nilearn.glm.OLSModel": [[256, "nilearn-glm-olsmodel"]], "nilearn.glm.RegressionResults": [[257, "nilearn-glm-regressionresults"]], "nilearn.glm.SimpleRegressionResults": [[258, "nilearn-glm-simpleregressionresults"]], "nilearn.glm.TContrastResults": [[259, "nilearn-glm-tcontrastresults"]], "nilearn.glm.cluster_level_inference": [[260, "nilearn-glm-cluster-level-inference"]], "Examples using nilearn.glm.cluster_level_inference": [[260, "examples-using-nilearn-glm-cluster-level-inference"]], "nilearn.glm.compute_contrast": [[261, "nilearn-glm-compute-contrast"]], "Examples using nilearn.glm.compute_contrast": [[261, "examples-using-nilearn-glm-compute-contrast"]], "nilearn.glm.compute_fixed_effects": [[262, "nilearn-glm-compute-fixed-effects"]], "Examples using nilearn.glm.compute_fixed_effects": [[262, "examples-using-nilearn-glm-compute-fixed-effects"]], "nilearn.glm.expression_to_contrast_vector": [[263, "nilearn-glm-expression-to-contrast-vector"]], "nilearn.glm.fdr_threshold": [[264, "nilearn-glm-fdr-threshold"]], "nilearn.glm.first_level.FirstLevelModel": [[265, "nilearn-glm-first-level-firstlevelmodel"]], "Examples using nilearn.glm.first_level.FirstLevelModel": [[265, "examples-using-nilearn-glm-first-level-firstlevelmodel"]], "nilearn.glm.first_level.check_design_matrix": [[266, "nilearn-glm-first-level-check-design-matrix"]], "nilearn.glm.first_level.compute_regressor": [[267, "nilearn-glm-first-level-compute-regressor"]], "Examples using nilearn.glm.first_level.compute_regressor": [[267, "examples-using-nilearn-glm-first-level-compute-regressor"]], "nilearn.glm.first_level.first_level_from_bids": [[268, "nilearn-glm-first-level-first-level-from-bids"]], "Examples using nilearn.glm.first_level.first_level_from_bids": [[268, "examples-using-nilearn-glm-first-level-first-level-from-bids"]], "nilearn.glm.first_level.glover_dispersion_derivative": [[269, "nilearn-glm-first-level-glover-dispersion-derivative"]], "nilearn.glm.first_level.glover_hrf": [[270, "nilearn-glm-first-level-glover-hrf"]], "nilearn.glm.first_level.glover_time_derivative": [[271, "nilearn-glm-first-level-glover-time-derivative"]], "nilearn.glm.first_level.make_first_level_design_matrix": [[272, "nilearn-glm-first-level-make-first-level-design-matrix"]], "Examples using nilearn.glm.first_level.make_first_level_design_matrix": [[272, "examples-using-nilearn-glm-first-level-make-first-level-design-matrix"]], "nilearn.glm.first_level.mean_scaling": [[273, "nilearn-glm-first-level-mean-scaling"]], "nilearn.glm.first_level.run_glm": [[274, "nilearn-glm-first-level-run-glm"]], "Examples using nilearn.glm.first_level.run_glm": [[274, "examples-using-nilearn-glm-first-level-run-glm"]], "nilearn.glm.first_level.spm_dispersion_derivative": [[275, "nilearn-glm-first-level-spm-dispersion-derivative"]], "nilearn.glm.first_level.spm_hrf": [[276, "nilearn-glm-first-level-spm-hrf"]], "nilearn.glm.first_level.spm_time_derivative": [[277, "nilearn-glm-first-level-spm-time-derivative"]], "nilearn.glm.second_level.SecondLevelModel": [[278, "nilearn-glm-second-level-secondlevelmodel"]], "Examples using nilearn.glm.second_level.SecondLevelModel": [[278, "examples-using-nilearn-glm-second-level-secondlevelmodel"]], "nilearn.glm.second_level.make_second_level_design_matrix": [[279, "nilearn-glm-second-level-make-second-level-design-matrix"]], "Examples using nilearn.glm.second_level.make_second_level_design_matrix": [[279, "examples-using-nilearn-glm-second-level-make-second-level-design-matrix"]], "nilearn.glm.second_level.non_parametric_inference": [[280, "nilearn-glm-second-level-non-parametric-inference"]], "Examples using nilearn.glm.second_level.non_parametric_inference": [[280, "examples-using-nilearn-glm-second-level-non-parametric-inference"]], "nilearn.glm.threshold_stats_img": [[281, "nilearn-glm-threshold-stats-img"]], "Examples using nilearn.glm.threshold_stats_img": [[281, "examples-using-nilearn-glm-threshold-stats-img"]], "nilearn.image.binarize_img": [[282, "nilearn-image-binarize-img"]], "nilearn.image.clean_img": [[283, "nilearn-image-clean-img"]], "Examples using nilearn.image.clean_img": [[283, "examples-using-nilearn-image-clean-img"]], "nilearn.image.concat_imgs": [[284, "nilearn-image-concat-imgs"]], "Examples using nilearn.image.concat_imgs": [[284, "examples-using-nilearn-image-concat-imgs"]], "nilearn.image.coord_transform": [[285, "nilearn-image-coord-transform"]], "Examples using nilearn.image.coord_transform": [[285, "examples-using-nilearn-image-coord-transform"]], "nilearn.image.copy_img": [[286, "nilearn-image-copy-img"]], "nilearn.image.crop_img": [[287, "nilearn-image-crop-img"]], "nilearn.image.get_data": [[288, "nilearn-image-get-data"]], "Examples using nilearn.image.get_data": [[288, "examples-using-nilearn-image-get-data"]], "nilearn.image.high_variance_confounds": [[289, "nilearn-image-high-variance-confounds"]], "Examples using nilearn.image.high_variance_confounds": [[289, "examples-using-nilearn-image-high-variance-confounds"]], "nilearn.image.index_img": [[290, "nilearn-image-index-img"]], "Examples using nilearn.image.index_img": [[290, "examples-using-nilearn-image-index-img"]], "nilearn.image.iter_img": [[291, "nilearn-image-iter-img"]], "Examples using nilearn.image.iter_img": [[291, "examples-using-nilearn-image-iter-img"]], "nilearn.image.largest_connected_component_img": [[292, "nilearn-image-largest-connected-component-img"]], "nilearn.image.load_img": [[293, "nilearn-image-load-img"]], "Examples using nilearn.image.load_img": [[293, "examples-using-nilearn-image-load-img"]], "nilearn.image.math_img": [[294, "nilearn-image-math-img"]], "Examples using nilearn.image.math_img": [[294, "examples-using-nilearn-image-math-img"]], "nilearn.image.mean_img": [[295, "nilearn-image-mean-img"]], "Examples using nilearn.image.mean_img": [[295, "examples-using-nilearn-image-mean-img"]], "nilearn.image.new_img_like": [[296, "nilearn-image-new-img-like"]], "Examples using nilearn.image.new_img_like": [[296, "examples-using-nilearn-image-new-img-like"]], "nilearn.image.reorder_img": [[297, "nilearn-image-reorder-img"]], "nilearn.image.resample_img": [[298, "nilearn-image-resample-img"]], "Examples using nilearn.image.resample_img": [[298, "examples-using-nilearn-image-resample-img"]], "nilearn.image.resample_to_img": [[299, "nilearn-image-resample-to-img"]], "Examples using nilearn.image.resample_to_img": [[299, "examples-using-nilearn-image-resample-to-img"]], "nilearn.image.smooth_img": [[300, "nilearn-image-smooth-img"]], "Examples using nilearn.image.smooth_img": [[300, "examples-using-nilearn-image-smooth-img"]], "nilearn.image.swap_img_hemispheres": [[301, "nilearn-image-swap-img-hemispheres"]], "nilearn.image.threshold_img": [[302, "nilearn-image-threshold-img"]], "Examples using nilearn.image.threshold_img": [[302, "examples-using-nilearn-image-threshold-img"]], "nilearn.interfaces.bids.get_bids_files": [[303, "nilearn-interfaces-bids-get-bids-files"]], "nilearn.interfaces.bids.parse_bids_filename": [[304, "nilearn-interfaces-bids-parse-bids-filename"]], "nilearn.interfaces.bids.save_glm_to_bids": [[305, "nilearn-interfaces-bids-save-glm-to-bids"]], "Examples using nilearn.interfaces.bids.save_glm_to_bids": [[305, "examples-using-nilearn-interfaces-bids-save-glm-to-bids"]], "nilearn.interfaces.fmriprep.load_confounds": [[306, "nilearn-interfaces-fmriprep-load-confounds"]], "Examples using nilearn.interfaces.fmriprep.load_confounds": [[306, "examples-using-nilearn-interfaces-fmriprep-load-confounds"]], "nilearn.interfaces.fmriprep.load_confounds_strategy": [[307, "nilearn-interfaces-fmriprep-load-confounds-strategy"]], "Examples using nilearn.interfaces.fmriprep.load_confounds_strategy": [[307, "examples-using-nilearn-interfaces-fmriprep-load-confounds-strategy"]], "nilearn.interfaces.fsl.get_design_from_fslmat": [[308, "nilearn-interfaces-fsl-get-design-from-fslmat"]], "Examples using nilearn.interfaces.fsl.get_design_from_fslmat": [[308, "examples-using-nilearn-interfaces-fsl-get-design-from-fslmat"]], "nilearn.maskers.BaseMasker": [[309, "nilearn-maskers-basemasker"]], "Examples using nilearn.maskers.BaseMasker": [[309, "examples-using-nilearn-maskers-basemasker"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[310, "nilearn-maskers-multiniftilabelsmasker"]], "Examples using nilearn.maskers.MultiNiftiLabelsMasker": [[310, "examples-using-nilearn-maskers-multiniftilabelsmasker"]], "nilearn.maskers.MultiNiftiMapsMasker": [[311, "nilearn-maskers-multiniftimapsmasker"]], "Examples using nilearn.maskers.MultiNiftiMapsMasker": [[311, "examples-using-nilearn-maskers-multiniftimapsmasker"]], "nilearn.maskers.MultiNiftiMasker": [[312, "nilearn-maskers-multiniftimasker"]], "Examples using nilearn.maskers.MultiNiftiMasker": [[312, "examples-using-nilearn-maskers-multiniftimasker"]], "nilearn.maskers.NiftiLabelsMasker": [[313, "nilearn-maskers-niftilabelsmasker"]], "Examples using nilearn.maskers.NiftiLabelsMasker": [[313, "examples-using-nilearn-maskers-niftilabelsmasker"]], "nilearn.maskers.NiftiMapsMasker": [[314, "nilearn-maskers-niftimapsmasker"]], "Examples using nilearn.maskers.NiftiMapsMasker": [[314, "examples-using-nilearn-maskers-niftimapsmasker"]], "nilearn.maskers.NiftiMasker": [[315, "nilearn-maskers-niftimasker"]], "Examples using nilearn.maskers.NiftiMasker": [[315, "examples-using-nilearn-maskers-niftimasker"]], "nilearn.maskers.NiftiSpheresMasker": [[316, "nilearn-maskers-niftispheresmasker"]], "Examples using nilearn.maskers.NiftiSpheresMasker": [[316, "examples-using-nilearn-maskers-niftispheresmasker"]], "nilearn.masking.apply_mask": [[317, "nilearn-masking-apply-mask"]], "Examples using nilearn.masking.apply_mask": [[317, "examples-using-nilearn-masking-apply-mask"]], "nilearn.masking.compute_background_mask": [[318, "nilearn-masking-compute-background-mask"]], "nilearn.masking.compute_brain_mask": [[319, "nilearn-masking-compute-brain-mask"]], "nilearn.masking.compute_epi_mask": [[320, "nilearn-masking-compute-epi-mask"]], "Examples using nilearn.masking.compute_epi_mask": [[320, "examples-using-nilearn-masking-compute-epi-mask"]], "nilearn.masking.compute_multi_background_mask": [[321, "nilearn-masking-compute-multi-background-mask"]], "nilearn.masking.compute_multi_brain_mask": [[322, "nilearn-masking-compute-multi-brain-mask"]], "nilearn.masking.compute_multi_epi_mask": [[323, "nilearn-masking-compute-multi-epi-mask"]], "nilearn.masking.intersect_masks": [[324, "nilearn-masking-intersect-masks"]], "nilearn.masking.unmask": [[325, "nilearn-masking-unmask"]], "Examples using nilearn.masking.unmask": [[325, "examples-using-nilearn-masking-unmask"]], "nilearn.mass_univariate.permuted_ols": [[326, "nilearn-mass-univariate-permuted-ols"]], "Examples using nilearn.mass_univariate.permuted_ols": [[326, "examples-using-nilearn-mass-univariate-permuted-ols"]], "nilearn.plotting.displays.BaseAxes": [[327, "nilearn-plotting-displays-baseaxes"]], "nilearn.plotting.displays.BaseSlicer": [[328, "nilearn-plotting-displays-baseslicer"]], "nilearn.plotting.displays.CutAxes": [[329, "nilearn-plotting-displays-cutaxes"]], "nilearn.plotting.displays.GlassBrainAxes": [[330, "nilearn-plotting-displays-glassbrainaxes"]], "nilearn.plotting.displays.LProjector": [[331, "nilearn-plotting-displays-lprojector"]], "Examples using nilearn.plotting.displays.LProjector": [[331, "examples-using-nilearn-plotting-displays-lprojector"]], "nilearn.plotting.displays.LRProjector": [[332, "nilearn-plotting-displays-lrprojector"]], "Examples using nilearn.plotting.displays.LRProjector": [[332, "examples-using-nilearn-plotting-displays-lrprojector"]], "nilearn.plotting.displays.LYRProjector": [[333, "nilearn-plotting-displays-lyrprojector"]], "Examples using nilearn.plotting.displays.LYRProjector": [[333, "examples-using-nilearn-plotting-displays-lyrprojector"]], "nilearn.plotting.displays.LYRZProjector": [[334, "nilearn-plotting-displays-lyrzprojector"]], "Examples using nilearn.plotting.displays.LYRZProjector": [[334, "examples-using-nilearn-plotting-displays-lyrzprojector"]], "nilearn.plotting.displays.LZRProjector": [[335, "nilearn-plotting-displays-lzrprojector"]], "Examples using nilearn.plotting.displays.LZRProjector": [[335, "examples-using-nilearn-plotting-displays-lzrprojector"]], "nilearn.plotting.displays.LZRYProjector": [[336, "nilearn-plotting-displays-lzryprojector"]], "Examples using nilearn.plotting.displays.LZRYProjector": [[336, "examples-using-nilearn-plotting-displays-lzryprojector"]], "nilearn.plotting.displays.MosaicSlicer": [[337, "nilearn-plotting-displays-mosaicslicer"]], "Examples using nilearn.plotting.displays.MosaicSlicer": [[337, "examples-using-nilearn-plotting-displays-mosaicslicer"]], "nilearn.plotting.displays.OrthoProjector": [[338, "nilearn-plotting-displays-orthoprojector"]], "Examples using nilearn.plotting.displays.OrthoProjector": [[338, "examples-using-nilearn-plotting-displays-orthoprojector"]], "nilearn.plotting.displays.OrthoSlicer": [[339, "nilearn-plotting-displays-orthoslicer"]], "Examples using nilearn.plotting.displays.OrthoSlicer": [[339, "examples-using-nilearn-plotting-displays-orthoslicer"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[340, "nilearn-plotting-displays-plotlysurfacefigure"]], "Examples using nilearn.plotting.displays.PlotlySurfaceFigure": [[340, "examples-using-nilearn-plotting-displays-plotlysurfacefigure"]], "nilearn.plotting.displays.RProjector": [[341, "nilearn-plotting-displays-rprojector"]], "Examples using nilearn.plotting.displays.RProjector": [[341, "examples-using-nilearn-plotting-displays-rprojector"]], "nilearn.plotting.displays.TiledSlicer": [[342, "nilearn-plotting-displays-tiledslicer"]], "Examples using nilearn.plotting.displays.TiledSlicer": [[342, "examples-using-nilearn-plotting-displays-tiledslicer"]], "nilearn.plotting.displays.XProjector": [[343, "nilearn-plotting-displays-xprojector"]], "Examples using nilearn.plotting.displays.XProjector": [[343, "examples-using-nilearn-plotting-displays-xprojector"]], "nilearn.plotting.displays.XSlicer": [[344, "nilearn-plotting-displays-xslicer"]], "Examples using nilearn.plotting.displays.XSlicer": [[344, "examples-using-nilearn-plotting-displays-xslicer"]], "nilearn.plotting.displays.XZProjector": [[345, "nilearn-plotting-displays-xzprojector"]], "Examples using nilearn.plotting.displays.XZProjector": [[345, "examples-using-nilearn-plotting-displays-xzprojector"]], "nilearn.plotting.displays.XZSlicer": [[346, "nilearn-plotting-displays-xzslicer"]], "Examples using nilearn.plotting.displays.XZSlicer": [[346, "examples-using-nilearn-plotting-displays-xzslicer"]], "nilearn.plotting.displays.YProjector": [[347, "nilearn-plotting-displays-yprojector"]], "Examples using nilearn.plotting.displays.YProjector": [[347, "examples-using-nilearn-plotting-displays-yprojector"]], "nilearn.plotting.displays.YSlicer": [[348, "nilearn-plotting-displays-yslicer"]], "Examples using nilearn.plotting.displays.YSlicer": [[348, "examples-using-nilearn-plotting-displays-yslicer"]], "nilearn.plotting.displays.YXProjector": [[349, "nilearn-plotting-displays-yxprojector"]], "Examples using nilearn.plotting.displays.YXProjector": [[349, "examples-using-nilearn-plotting-displays-yxprojector"]], "nilearn.plotting.displays.YXSlicer": [[350, "nilearn-plotting-displays-yxslicer"]], "Examples using nilearn.plotting.displays.YXSlicer": [[350, "examples-using-nilearn-plotting-displays-yxslicer"]], "nilearn.plotting.displays.YZProjector": [[351, "nilearn-plotting-displays-yzprojector"]], "Examples using nilearn.plotting.displays.YZProjector": [[351, "examples-using-nilearn-plotting-displays-yzprojector"]], "nilearn.plotting.displays.YZSlicer": [[352, "nilearn-plotting-displays-yzslicer"]], "Examples using nilearn.plotting.displays.YZSlicer": [[352, "examples-using-nilearn-plotting-displays-yzslicer"]], "nilearn.plotting.displays.ZProjector": [[353, "nilearn-plotting-displays-zprojector"]], "Examples using nilearn.plotting.displays.ZProjector": [[353, "examples-using-nilearn-plotting-displays-zprojector"]], "nilearn.plotting.displays.ZSlicer": [[354, "nilearn-plotting-displays-zslicer"]], "Examples using nilearn.plotting.displays.ZSlicer": [[354, "examples-using-nilearn-plotting-displays-zslicer"]], "nilearn.plotting.displays.get_projector": [[355, "nilearn-plotting-displays-get-projector"]], "nilearn.plotting.displays.get_slicer": [[356, "nilearn-plotting-displays-get-slicer"]], "nilearn.plotting.find_cut_slices": [[357, "nilearn-plotting-find-cut-slices"]], "nilearn.plotting.find_parcellation_cut_coords": [[358, "nilearn-plotting-find-parcellation-cut-coords"]], "Examples using nilearn.plotting.find_parcellation_cut_coords": [[358, "examples-using-nilearn-plotting-find-parcellation-cut-coords"]], "nilearn.plotting.find_probabilistic_atlas_cut_coords": [[359, "nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "Examples using nilearn.plotting.find_probabilistic_atlas_cut_coords": [[359, "examples-using-nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "nilearn.plotting.find_xyz_cut_coords": [[360, "nilearn-plotting-find-xyz-cut-coords"]], "Examples using nilearn.plotting.find_xyz_cut_coords": [[360, "examples-using-nilearn-plotting-find-xyz-cut-coords"]], "nilearn.plotting.plot_anat": [[361, "nilearn-plotting-plot-anat"]], "Examples using nilearn.plotting.plot_anat": [[361, "examples-using-nilearn-plotting-plot-anat"]], "nilearn.plotting.plot_carpet": [[362, "nilearn-plotting-plot-carpet"]], "Examples using nilearn.plotting.plot_carpet": [[362, "examples-using-nilearn-plotting-plot-carpet"]], "nilearn.plotting.plot_connectome": [[363, "nilearn-plotting-plot-connectome"]], "Examples using nilearn.plotting.plot_connectome": [[363, "examples-using-nilearn-plotting-plot-connectome"]], "nilearn.plotting.plot_contrast_matrix": [[364, "nilearn-plotting-plot-contrast-matrix"]], "Examples using nilearn.plotting.plot_contrast_matrix": [[364, "examples-using-nilearn-plotting-plot-contrast-matrix"]], "nilearn.plotting.plot_design_matrix": [[365, "nilearn-plotting-plot-design-matrix"]], "Examples using nilearn.plotting.plot_design_matrix": [[365, "examples-using-nilearn-plotting-plot-design-matrix"]], "nilearn.plotting.plot_epi": [[366, "nilearn-plotting-plot-epi"]], "Examples using nilearn.plotting.plot_epi": [[366, "examples-using-nilearn-plotting-plot-epi"]], "nilearn.plotting.plot_event": [[367, "nilearn-plotting-plot-event"]], "Examples using nilearn.plotting.plot_event": [[367, "examples-using-nilearn-plotting-plot-event"]], "nilearn.plotting.plot_glass_brain": [[368, "nilearn-plotting-plot-glass-brain"]], "Examples using nilearn.plotting.plot_glass_brain": [[368, "examples-using-nilearn-plotting-plot-glass-brain"]], "nilearn.plotting.plot_img": [[369, "nilearn-plotting-plot-img"]], "Examples using nilearn.plotting.plot_img": [[369, "examples-using-nilearn-plotting-plot-img"]], "nilearn.plotting.plot_img_comparison": [[370, "nilearn-plotting-plot-img-comparison"]], "Examples using nilearn.plotting.plot_img_comparison": [[370, "examples-using-nilearn-plotting-plot-img-comparison"]], "nilearn.plotting.plot_img_on_surf": [[371, "nilearn-plotting-plot-img-on-surf"]], "Examples using nilearn.plotting.plot_img_on_surf": [[371, "examples-using-nilearn-plotting-plot-img-on-surf"]], "nilearn.plotting.plot_markers": [[372, "nilearn-plotting-plot-markers"]], "Examples using nilearn.plotting.plot_markers": [[372, "examples-using-nilearn-plotting-plot-markers"]], "nilearn.plotting.plot_matrix": [[373, "nilearn-plotting-plot-matrix"]], "Examples using nilearn.plotting.plot_matrix": [[373, "examples-using-nilearn-plotting-plot-matrix"]], "nilearn.plotting.plot_prob_atlas": [[374, "nilearn-plotting-plot-prob-atlas"]], "Examples using nilearn.plotting.plot_prob_atlas": [[374, "examples-using-nilearn-plotting-plot-prob-atlas"]], "nilearn.plotting.plot_roi": [[375, "nilearn-plotting-plot-roi"]], "Examples using nilearn.plotting.plot_roi": [[375, "examples-using-nilearn-plotting-plot-roi"]], "nilearn.plotting.plot_stat_map": [[376, "nilearn-plotting-plot-stat-map"]], "Examples using nilearn.plotting.plot_stat_map": [[376, "examples-using-nilearn-plotting-plot-stat-map"]], "nilearn.plotting.plot_surf": [[377, "nilearn-plotting-plot-surf"]], "nilearn.plotting.plot_surf_contours": [[378, "nilearn-plotting-plot-surf-contours"]], "Examples using nilearn.plotting.plot_surf_contours": [[378, "examples-using-nilearn-plotting-plot-surf-contours"]], "nilearn.plotting.plot_surf_roi": [[379, "nilearn-plotting-plot-surf-roi"]], "Examples using nilearn.plotting.plot_surf_roi": [[379, "examples-using-nilearn-plotting-plot-surf-roi"]], "nilearn.plotting.plot_surf_stat_map": [[380, "nilearn-plotting-plot-surf-stat-map"]], "Examples using nilearn.plotting.plot_surf_stat_map": [[380, "examples-using-nilearn-plotting-plot-surf-stat-map"]], "nilearn.plotting.show": [[381, "nilearn-plotting-show"]], "Examples using nilearn.plotting.show": [[381, "examples-using-nilearn-plotting-show"]], "nilearn.plotting.view_connectome": [[382, "nilearn-plotting-view-connectome"]], "Examples using nilearn.plotting.view_connectome": [[382, "examples-using-nilearn-plotting-view-connectome"]], "nilearn.plotting.view_img": [[383, "nilearn-plotting-view-img"]], "Examples using nilearn.plotting.view_img": [[383, "examples-using-nilearn-plotting-view-img"]], "nilearn.plotting.view_img_on_surf": [[384, "nilearn-plotting-view-img-on-surf"]], "Examples using nilearn.plotting.view_img_on_surf": [[384, "examples-using-nilearn-plotting-view-img-on-surf"]], "nilearn.plotting.view_markers": [[385, "nilearn-plotting-view-markers"]], "nilearn.plotting.view_surf": [[386, "nilearn-plotting-view-surf"]], "Examples using nilearn.plotting.view_surf": [[386, "examples-using-nilearn-plotting-view-surf"]], "nilearn.regions.HierarchicalKMeans": [[387, "nilearn-regions-hierarchicalkmeans"]], "nilearn.regions.Parcellations": [[388, "nilearn-regions-parcellations"]], "Examples using nilearn.regions.Parcellations": [[388, "examples-using-nilearn-regions-parcellations"]], "nilearn.regions.ReNA": [[389, "nilearn-regions-rena"]], "nilearn.regions.RegionExtractor": [[390, "nilearn-regions-regionextractor"]], "Examples using nilearn.regions.RegionExtractor": [[390, "examples-using-nilearn-regions-regionextractor"]], "nilearn.regions.connected_label_regions": [[391, "nilearn-regions-connected-label-regions"]], "Examples using nilearn.regions.connected_label_regions": [[391, "examples-using-nilearn-regions-connected-label-regions"]], "nilearn.regions.connected_regions": [[392, "nilearn-regions-connected-regions"]], "Examples using nilearn.regions.connected_regions": [[392, "examples-using-nilearn-regions-connected-regions"]], "nilearn.regions.img_to_signals_labels": [[393, "nilearn-regions-img-to-signals-labels"]], "nilearn.regions.img_to_signals_maps": [[394, "nilearn-regions-img-to-signals-maps"]], "nilearn.regions.recursive_neighbor_agglomeration": [[395, "nilearn-regions-recursive-neighbor-agglomeration"]], "nilearn.regions.signals_to_img_labels": [[396, "nilearn-regions-signals-to-img-labels"]], "nilearn.regions.signals_to_img_maps": [[397, "nilearn-regions-signals-to-img-maps"]], "nilearn.reporting.HTMLReport": [[398, "nilearn-reporting-htmlreport"]], "Examples using nilearn.reporting.HTMLReport": [[398, "examples-using-nilearn-reporting-htmlreport"]], "nilearn.reporting.get_clusters_table": [[399, "nilearn-reporting-get-clusters-table"]], "Examples using nilearn.reporting.get_clusters_table": [[399, "examples-using-nilearn-reporting-get-clusters-table"]], "nilearn.reporting.make_glm_report": [[400, "nilearn-reporting-make-glm-report"]], "Examples using nilearn.reporting.make_glm_report": [[400, "examples-using-nilearn-reporting-make-glm-report"]], "nilearn.signal.butterworth": [[401, "nilearn-signal-butterworth"]], "nilearn.signal.clean": [[402, "nilearn-signal-clean"]], "nilearn.signal.high_variance_confounds": [[403, "nilearn-signal-high-variance-confounds"]], "nilearn.surface.load_surf_data": [[404, "nilearn-surface-load-surf-data"]], "Examples using nilearn.surface.load_surf_data": [[404, "examples-using-nilearn-surface-load-surf-data"]], "nilearn.surface.load_surf_mesh": [[405, "nilearn-surface-load-surf-mesh"]], "Examples using nilearn.surface.load_surf_mesh": [[405, "examples-using-nilearn-surface-load-surf-mesh"]], "nilearn.surface.vol_to_surf": [[406, "nilearn-surface-vol-to-surf"]], "Examples using nilearn.surface.vol_to_surf": [[406, "examples-using-nilearn-surface-vol-to-surf"]], "nilearn.glm: Generalized Linear Models": [[407, "module-nilearn.glm"]], "nilearn.glm.first_level": [[407, "module-nilearn.glm.first_level"]], "nilearn.glm.second_level": [[407, "module-nilearn.glm.second_level"]], "nilearn.image: Image Processing and Resampling Utilities": [[408, "module-nilearn.image"]], "API References": [[409, "api-references"]], "nilearn.interfaces: Loading components from interfaces": [[410, "module-nilearn.interfaces"]], "nilearn.interfaces.bids": [[410, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.fmriprep": [[410, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fsl": [[410, "module-nilearn.interfaces.fsl"]], "nilearn.maskers: Extracting Signals from Brain Images": [[411, "module-nilearn.maskers"]], "nilearn.masking: Data Masking Utilities": [[412, "module-nilearn.masking"]], "nilearn.mass_univariate: Mass-Univariate Analysis": [[413, "module-nilearn.mass_univariate"]], "nilearn.plotting: Plotting Brain Data": [[414, "module-nilearn.plotting"]], "nilearn.plotting.displays: Interacting with figures": [[414, "module-nilearn.plotting.displays"]], "nilearn.regions: Operating on Regions": [[415, "module-nilearn.regions"]], "nilearn.reporting: Reporting Functions": [[416, "module-nilearn.reporting"]], "nilearn.signal: Preprocessing Time Series": [[417, "module-nilearn.signal"]], "nilearn.surface: Manipulating Surface Data": [[418, "module-nilearn.surface"]], "Plotting brain images": [[419, "plotting-brain-images"]], "Code examples": [[419, null]], "Different plotting functions": [[419, "different-plotting-functions"]], "Different display modes": [[419, "different-display-modes"]], "Available Colormaps": [[419, "available-colormaps"]], "Adding overlays, edges, contours, contour fillings, markers, scale bar": [[419, "adding-overlays-edges-contours-contour-fillings-markers-scale-bar"]], "Displaying or saving to an image file": [[419, "displaying-or-saving-to-an-image-file"]], "Surface plotting": [[419, "surface-plotting"]], "Interactive plots": [[419, "interactive-plots"]], "3D Plots of statistical maps or atlases on the cortical surface": [[419, "d-plots-of-statistical-maps-or-atlases-on-the-cortical-surface"]], "view_img_on_surf: Surface plot using a 3D statistical map": [[419, "view-img-on-surf-surface-plot-using-a-3d-statistical-map"]], "view_surf: Surface plot using a surface map and a cortical mesh": [[419, "view-surf-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "plot_surf_stat_map: Surface plot using a surface map and a cortical mesh": [[419, "plot-surf-stat-map-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "3D Plots of connectomes": [[419, "d-plots-of-connectomes"]], "3D Plots of markers": [[419, "d-plots-of-markers"]], "Interactive visualization of statistical map slices": [[419, "interactive-visualization-of-statistical-map-slices"]], "Quickstart": [[420, "quickstart"]], "nilearn": [[420, "nilearn"]], "Important links": [[420, "important-links"]], "Install": [[420, "install"]], "Latest release": [[420, "latest-release"]], "Development version": [[420, "development-version"]], "Check installation": [[420, "check-installation"]], "Drop-in Hours": [[420, "drop-in-hours"]], "Dependencies": [[420, "dependencies"]], "Development": [[420, "development"]], "User guide": [[421, "user-guide"]], "Table of contents": [[421, "table-of-contents"]]}, "indexentries": {"anova": [[168, "term-ANOVA"]], "auc": [[168, "term-AUC"]], "bids": [[168, "term-BIDS"]], "bold": [[168, "term-BOLD"]], "beta": [[168, "term-Beta"]], "canica": [[168, "term-CanICA"]], "closing": [[168, "term-Closing"]], "decoding": [[168, "term-Decoding"]], "deterministic atlas": [[168, "term-Deterministic-atlas"]], "dictionary learning": [[168, "term-Dictionary-learning"]], "dilation": [[168, "term-Dilation"]], "eeg": [[168, "term-EEG"]], "epi": [[168, "term-EPI"]], "erosion": [[168, "term-Erosion"]], "fdr correction": [[168, "term-FDR-correction"]], "fir": [[168, "term-FIR"]], "fpr correction": [[168, "term-FPR-correction"]], "frem": [[168, "term-FREM"]], "fwer correction": [[168, "term-FWER-correction"]], "fwhm": [[168, "term-FWHM"]], "glm": [[168, "term-GLM"]], "hrf": [[168, "term-HRF"]], "ica": [[168, "term-ICA"]], "meg": [[168, "term-MEG"]], "mni": [[168, "term-MNI"]], "mvpa": [[168, "term-MVPA"]], "neurovault": [[168, "term-Neurovault"]], "opening": [[168, "term-Opening"]], "parameter estimate": [[168, "term-Parameter-estimate"]], "probabilistic atlas": [[168, "term-Probabilistic-atlas"]], "roc": [[168, "term-ROC"]], "rena": [[168, "term-ReNA"]], "snr": [[168, "term-SNR"]], "spm": [[168, "term-SPM"]], "svm": [[168, "term-SVM"]], "searchlight": [[168, "term-Searchlight"]], "spacenet": [[168, "term-SpaceNet"]], "tfce": [[168, "term-TFCE"]], "tr": [[168, "term-TR"]], "unsupervised learning": [[168, "term-Unsupervised-learning"]], "vbm": [[168, "term-VBM"]], "ward clustering": [[168, "term-Ward-clustering"]], "classification": [[168, "term-classification"]], "contrast": [[168, "term-contrast"]], "fmri": [[168, "term-fMRI"]], "fmriprep": [[168, "term-fMRIPrep"]], "functional connectivity": [[168, "term-functional-connectivity"]], "functional connectome": [[168, "term-functional-connectome"]], "parcellation": [[168, "term-parcellation"]], "predictive modelling": [[168, "term-predictive-modelling"]], "regression": [[168, "term-regression"]], "resting-state": [[168, "term-resting-state"]], "supervised learning": [[168, "term-supervised-learning"]], "voxel": [[168, "term-voxel"]], "module": [[176, "module-nilearn.connectome"], [177, "module-nilearn.datasets"], [178, "module-nilearn.decoding"], [179, "module-nilearn.decomposition"], [407, "module-nilearn.glm"], [407, "module-nilearn.glm.first_level"], [407, "module-nilearn.glm.second_level"], [408, "module-nilearn.image"], [410, "module-nilearn.interfaces"], [410, "module-nilearn.interfaces.bids"], [410, "module-nilearn.interfaces.fmriprep"], [410, "module-nilearn.interfaces.fsl"], [411, "module-nilearn.maskers"], [412, "module-nilearn.masking"], [413, "module-nilearn.mass_univariate"], [414, "module-nilearn.plotting"], [414, "module-nilearn.plotting.displays"], [415, "module-nilearn.regions"], [416, "module-nilearn.reporting"], [417, "module-nilearn.signal"], [418, "module-nilearn.surface"]], "nilearn.connectome": [[176, "module-nilearn.connectome"]], "nilearn.datasets": [[177, "module-nilearn.datasets"]], "nilearn.decoding": [[178, "module-nilearn.decoding"]], "nilearn.decomposition": [[179, "module-nilearn.decomposition"]], "connectivitymeasure (class in nilearn.connectome)": [[180, "nilearn.connectome.ConnectivityMeasure"]], "__init__() (nilearn.connectome.connectivitymeasure method)": [[180, "nilearn.connectome.ConnectivityMeasure.__init__"]], "fit() (nilearn.connectome.connectivitymeasure method)": [[180, "nilearn.connectome.ConnectivityMeasure.fit"]], "fit_transform() (nilearn.connectome.connectivitymeasure method)": [[180, "nilearn.connectome.ConnectivityMeasure.fit_transform"]], "get_params() (nilearn.connectome.connectivitymeasure method)": [[180, "nilearn.connectome.ConnectivityMeasure.get_params"]], "inverse_transform() (nilearn.connectome.connectivitymeasure method)": [[180, "nilearn.connectome.ConnectivityMeasure.inverse_transform"]], "set_output() (nilearn.connectome.connectivitymeasure method)": [[180, "nilearn.connectome.ConnectivityMeasure.set_output"]], "set_params() (nilearn.connectome.connectivitymeasure method)": [[180, "nilearn.connectome.ConnectivityMeasure.set_params"]], "transform() (nilearn.connectome.connectivitymeasure method)": [[180, "nilearn.connectome.ConnectivityMeasure.transform"]], "groupsparsecovariance (class in nilearn.connectome)": [[181, "nilearn.connectome.GroupSparseCovariance"]], "__init__() (nilearn.connectome.groupsparsecovariance method)": [[181, "nilearn.connectome.GroupSparseCovariance.__init__"]], "fit() (nilearn.connectome.groupsparsecovariance method)": [[181, "nilearn.connectome.GroupSparseCovariance.fit"]], "get_params() (nilearn.connectome.groupsparsecovariance method)": [[181, "nilearn.connectome.GroupSparseCovariance.get_params"]], "set_params() (nilearn.connectome.groupsparsecovariance method)": [[181, "nilearn.connectome.GroupSparseCovariance.set_params"]], "groupsparsecovariancecv (class in nilearn.connectome)": [[182, "nilearn.connectome.GroupSparseCovarianceCV"]], "__init__() (nilearn.connectome.groupsparsecovariancecv method)": [[182, "nilearn.connectome.GroupSparseCovarianceCV.__init__"]], "fit() (nilearn.connectome.groupsparsecovariancecv method)": [[182, "nilearn.connectome.GroupSparseCovarianceCV.fit"]], "get_params() (nilearn.connectome.groupsparsecovariancecv method)": [[182, "nilearn.connectome.GroupSparseCovarianceCV.get_params"]], "set_params() (nilearn.connectome.groupsparsecovariancecv method)": [[182, "nilearn.connectome.GroupSparseCovarianceCV.set_params"]], "cov_to_corr() (in module nilearn.connectome)": [[183, "nilearn.connectome.cov_to_corr"]], "group_sparse_covariance() (in module nilearn.connectome)": [[184, "nilearn.connectome.group_sparse_covariance"]], "prec_to_partial() (in module nilearn.connectome)": [[185, "nilearn.connectome.prec_to_partial"]], "sym_matrix_to_vec() (in module nilearn.connectome)": [[186, "nilearn.connectome.sym_matrix_to_vec"]], "vec_to_sym_matrix() (in module nilearn.connectome)": [[187, "nilearn.connectome.vec_to_sym_matrix"]], "fetch_abide_pcp() (in module nilearn.datasets)": [[188, "nilearn.datasets.fetch_abide_pcp"]], "fetch_adhd() (in module nilearn.datasets)": [[189, "nilearn.datasets.fetch_adhd"]], "fetch_atlas_aal() (in module nilearn.datasets)": [[190, "nilearn.datasets.fetch_atlas_aal"]], "fetch_atlas_allen_2011() (in module nilearn.datasets)": [[191, "nilearn.datasets.fetch_atlas_allen_2011"]], "fetch_atlas_basc_multiscale_2015() (in module nilearn.datasets)": [[192, "nilearn.datasets.fetch_atlas_basc_multiscale_2015"]], "fetch_atlas_craddock_2012() (in module nilearn.datasets)": [[193, "nilearn.datasets.fetch_atlas_craddock_2012"]], "fetch_atlas_destrieux_2009() (in module nilearn.datasets)": [[194, "nilearn.datasets.fetch_atlas_destrieux_2009"]], "fetch_atlas_difumo() (in module nilearn.datasets)": [[195, "nilearn.datasets.fetch_atlas_difumo"]], "fetch_atlas_harvard_oxford() (in module nilearn.datasets)": [[196, "nilearn.datasets.fetch_atlas_harvard_oxford"]], "fetch_atlas_juelich() (in module nilearn.datasets)": [[197, "nilearn.datasets.fetch_atlas_juelich"]], "fetch_atlas_msdl() (in module nilearn.datasets)": [[198, "nilearn.datasets.fetch_atlas_msdl"]], "fetch_atlas_pauli_2017() (in module nilearn.datasets)": [[199, "nilearn.datasets.fetch_atlas_pauli_2017"]], "fetch_atlas_schaefer_2018() (in module nilearn.datasets)": [[200, "nilearn.datasets.fetch_atlas_schaefer_2018"]], "fetch_atlas_smith_2009() (in module nilearn.datasets)": [[201, "nilearn.datasets.fetch_atlas_smith_2009"]], "fetch_atlas_surf_destrieux() (in module nilearn.datasets)": [[202, "nilearn.datasets.fetch_atlas_surf_destrieux"]], "fetch_atlas_talairach() (in module nilearn.datasets)": [[203, "nilearn.datasets.fetch_atlas_talairach"]], "fetch_atlas_yeo_2011() (in module nilearn.datasets)": [[204, "nilearn.datasets.fetch_atlas_yeo_2011"]], "fetch_bids_langloc_dataset() (in module nilearn.datasets)": [[205, "nilearn.datasets.fetch_bids_langloc_dataset"]], "fetch_coords_dosenbach_2010() (in module nilearn.datasets)": [[206, "nilearn.datasets.fetch_coords_dosenbach_2010"]], "fetch_coords_power_2011() (in module nilearn.datasets)": [[207, "nilearn.datasets.fetch_coords_power_2011"]], "fetch_coords_seitzman_2018() (in module nilearn.datasets)": [[208, "nilearn.datasets.fetch_coords_seitzman_2018"]], "fetch_development_fmri() (in module nilearn.datasets)": [[209, "nilearn.datasets.fetch_development_fmri"]], "fetch_ds000030_urls() (in module nilearn.datasets)": [[210, "nilearn.datasets.fetch_ds000030_urls"]], "fetch_fiac_first_level() (in module nilearn.datasets)": [[211, "nilearn.datasets.fetch_fiac_first_level"]], "fetch_haxby() (in module nilearn.datasets)": [[212, "nilearn.datasets.fetch_haxby"]], "fetch_icbm152_2009() (in module nilearn.datasets)": [[213, "nilearn.datasets.fetch_icbm152_2009"]], "fetch_icbm152_brain_gm_mask() (in module nilearn.datasets)": [[214, "nilearn.datasets.fetch_icbm152_brain_gm_mask"]], "fetch_language_localizer_demo_dataset() (in module nilearn.datasets)": [[215, "nilearn.datasets.fetch_language_localizer_demo_dataset"]], "fetch_localizer_button_task() (in module nilearn.datasets)": [[216, "nilearn.datasets.fetch_localizer_button_task"]], "fetch_localizer_calculation_task() (in module nilearn.datasets)": [[217, "nilearn.datasets.fetch_localizer_calculation_task"]], "fetch_localizer_contrasts() (in module nilearn.datasets)": [[218, "nilearn.datasets.fetch_localizer_contrasts"]], "fetch_localizer_first_level() (in module nilearn.datasets)": [[219, "nilearn.datasets.fetch_localizer_first_level"]], "fetch_megatrawls_netmats() (in module nilearn.datasets)": [[220, "nilearn.datasets.fetch_megatrawls_netmats"]], "fetch_mixed_gambles() (in module nilearn.datasets)": [[221, "nilearn.datasets.fetch_mixed_gambles"]], "fetch_miyawaki2008() (in module nilearn.datasets)": [[222, "nilearn.datasets.fetch_miyawaki2008"]], "fetch_neurovault() (in module nilearn.datasets)": [[223, "nilearn.datasets.fetch_neurovault"]], "fetch_neurovault_auditory_computation_task() (in module nilearn.datasets)": [[224, "nilearn.datasets.fetch_neurovault_auditory_computation_task"]], "fetch_neurovault_ids() (in module nilearn.datasets)": [[225, "nilearn.datasets.fetch_neurovault_ids"]], "fetch_neurovault_motor_task() (in module nilearn.datasets)": [[226, "nilearn.datasets.fetch_neurovault_motor_task"]], "fetch_oasis_vbm() (in module nilearn.datasets)": [[227, "nilearn.datasets.fetch_oasis_vbm"]], "fetch_openneuro_dataset() (in module nilearn.datasets)": [[228, "nilearn.datasets.fetch_openneuro_dataset"]], "fetch_openneuro_dataset_index() (in module nilearn.datasets)": [[229, "nilearn.datasets.fetch_openneuro_dataset_index"]], "fetch_spm_auditory() (in module nilearn.datasets)": [[230, "nilearn.datasets.fetch_spm_auditory"]], "fetch_spm_multimodal_fmri() (in module nilearn.datasets)": [[231, "nilearn.datasets.fetch_spm_multimodal_fmri"]], "fetch_surf_fsaverage() (in module nilearn.datasets)": [[232, "nilearn.datasets.fetch_surf_fsaverage"]], "fetch_surf_nki_enhanced() (in module nilearn.datasets)": [[233, "nilearn.datasets.fetch_surf_nki_enhanced"]], "get_data_dirs() (in module nilearn.datasets)": [[234, "nilearn.datasets.get_data_dirs"]], "load_mni152_brain_mask() (in module nilearn.datasets)": [[235, "nilearn.datasets.load_mni152_brain_mask"]], "load_mni152_gm_mask() (in module nilearn.datasets)": [[236, "nilearn.datasets.load_mni152_gm_mask"]], "load_mni152_gm_template() (in module nilearn.datasets)": [[237, "nilearn.datasets.load_mni152_gm_template"]], "load_mni152_template() (in module nilearn.datasets)": [[238, "nilearn.datasets.load_mni152_template"]], "load_mni152_wm_mask() (in module nilearn.datasets)": [[239, "nilearn.datasets.load_mni152_wm_mask"]], "load_mni152_wm_template() (in module nilearn.datasets)": [[240, "nilearn.datasets.load_mni152_wm_template"]], "patch_openneuro_dataset() (in module nilearn.datasets)": [[241, "nilearn.datasets.patch_openneuro_dataset"]], "select_from_index() (in module nilearn.datasets)": [[242, "nilearn.datasets.select_from_index"]], "decoder (class in nilearn.decoding)": [[243, "nilearn.decoding.Decoder"]], "__init__() (nilearn.decoding.decoder method)": [[243, "nilearn.decoding.Decoder.__init__"]], "decision_function() (nilearn.decoding.decoder method)": [[243, "nilearn.decoding.Decoder.decision_function"]], "fit() (nilearn.decoding.decoder method)": [[243, "nilearn.decoding.Decoder.fit"]], "get_params() (nilearn.decoding.decoder method)": [[243, "nilearn.decoding.Decoder.get_params"]], "predict() (nilearn.decoding.decoder method)": [[243, "nilearn.decoding.Decoder.predict"]], "score() (nilearn.decoding.decoder method)": [[243, "nilearn.decoding.Decoder.score"]], "set_params() (nilearn.decoding.decoder method)": [[243, "nilearn.decoding.Decoder.set_params"]], "decoderregressor (class in nilearn.decoding)": [[244, "nilearn.decoding.DecoderRegressor"]], "__init__() (nilearn.decoding.decoderregressor method)": [[244, "nilearn.decoding.DecoderRegressor.__init__"]], "decision_function() (nilearn.decoding.decoderregressor method)": [[244, "nilearn.decoding.DecoderRegressor.decision_function"]], "fit() (nilearn.decoding.decoderregressor method)": [[244, "nilearn.decoding.DecoderRegressor.fit"]], "get_params() (nilearn.decoding.decoderregressor method)": [[244, "nilearn.decoding.DecoderRegressor.get_params"]], "predict() (nilearn.decoding.decoderregressor method)": [[244, "nilearn.decoding.DecoderRegressor.predict"]], "score() (nilearn.decoding.decoderregressor method)": [[244, "nilearn.decoding.DecoderRegressor.score"]], "set_params() (nilearn.decoding.decoderregressor method)": [[244, "nilearn.decoding.DecoderRegressor.set_params"]], "fremclassifier (class in nilearn.decoding)": [[245, "nilearn.decoding.FREMClassifier"]], "__init__() (nilearn.decoding.fremclassifier method)": [[245, "nilearn.decoding.FREMClassifier.__init__"]], "decision_function() (nilearn.decoding.fremclassifier method)": [[245, "nilearn.decoding.FREMClassifier.decision_function"]], "fit() (nilearn.decoding.fremclassifier method)": [[245, "nilearn.decoding.FREMClassifier.fit"]], "get_params() (nilearn.decoding.fremclassifier method)": [[245, "nilearn.decoding.FREMClassifier.get_params"]], "predict() (nilearn.decoding.fremclassifier method)": [[245, "nilearn.decoding.FREMClassifier.predict"]], "score() (nilearn.decoding.fremclassifier method)": [[245, "nilearn.decoding.FREMClassifier.score"]], "set_params() (nilearn.decoding.fremclassifier method)": [[245, "nilearn.decoding.FREMClassifier.set_params"]], "fremregressor (class in nilearn.decoding)": [[246, "nilearn.decoding.FREMRegressor"]], "__init__() (nilearn.decoding.fremregressor method)": [[246, "nilearn.decoding.FREMRegressor.__init__"]], "decision_function() (nilearn.decoding.fremregressor method)": [[246, "nilearn.decoding.FREMRegressor.decision_function"]], "fit() (nilearn.decoding.fremregressor method)": [[246, "nilearn.decoding.FREMRegressor.fit"]], "get_params() (nilearn.decoding.fremregressor method)": [[246, "nilearn.decoding.FREMRegressor.get_params"]], "predict() (nilearn.decoding.fremregressor method)": [[246, "nilearn.decoding.FREMRegressor.predict"]], "score() (nilearn.decoding.fremregressor method)": [[246, "nilearn.decoding.FREMRegressor.score"]], "set_params() (nilearn.decoding.fremregressor method)": [[246, "nilearn.decoding.FREMRegressor.set_params"]], "searchlight (class in nilearn.decoding)": [[247, "nilearn.decoding.SearchLight"]], "__init__() (nilearn.decoding.searchlight method)": [[247, "nilearn.decoding.SearchLight.__init__"]], "fit() (nilearn.decoding.searchlight method)": [[247, "nilearn.decoding.SearchLight.fit"]], "get_params() (nilearn.decoding.searchlight method)": [[247, "nilearn.decoding.SearchLight.get_params"]], "set_params() (nilearn.decoding.searchlight method)": [[247, "nilearn.decoding.SearchLight.set_params"]], "supported_losses (nilearn.decoding.spacenetclassifier attribute)": [[248, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_LOSSES"]], "supported_penalties (nilearn.decoding.spacenetclassifier attribute)": [[248, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_PENALTIES"]], "spacenetclassifier (class in nilearn.decoding)": [[248, "nilearn.decoding.SpaceNetClassifier"]], "__init__() (nilearn.decoding.spacenetclassifier method)": [[248, "nilearn.decoding.SpaceNetClassifier.__init__"]], "check_params() (nilearn.decoding.spacenetclassifier method)": [[248, "nilearn.decoding.SpaceNetClassifier.check_params"]], "decision_function() (nilearn.decoding.spacenetclassifier method)": [[248, "nilearn.decoding.SpaceNetClassifier.decision_function"]], "fit() (nilearn.decoding.spacenetclassifier method)": [[248, "nilearn.decoding.SpaceNetClassifier.fit"]], "get_params() (nilearn.decoding.spacenetclassifier method)": [[248, "nilearn.decoding.SpaceNetClassifier.get_params"]], "predict() (nilearn.decoding.spacenetclassifier method)": [[248, "nilearn.decoding.SpaceNetClassifier.predict"]], "score() (nilearn.decoding.spacenetclassifier method)": [[248, "nilearn.decoding.SpaceNetClassifier.score"]], "set_params() (nilearn.decoding.spacenetclassifier method)": [[248, "nilearn.decoding.SpaceNetClassifier.set_params"]], "supported_losses (nilearn.decoding.spacenetregressor attribute)": [[249, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_LOSSES"]], "supported_penalties (nilearn.decoding.spacenetregressor attribute)": [[249, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_PENALTIES"]], "spacenetregressor (class in nilearn.decoding)": [[249, "nilearn.decoding.SpaceNetRegressor"]], "__init__() (nilearn.decoding.spacenetregressor method)": [[249, "nilearn.decoding.SpaceNetRegressor.__init__"]], "check_params() (nilearn.decoding.spacenetregressor method)": [[249, "nilearn.decoding.SpaceNetRegressor.check_params"]], "decision_function() (nilearn.decoding.spacenetregressor method)": [[249, "nilearn.decoding.SpaceNetRegressor.decision_function"]], "fit() (nilearn.decoding.spacenetregressor method)": [[249, "nilearn.decoding.SpaceNetRegressor.fit"]], "get_params() (nilearn.decoding.spacenetregressor method)": [[249, "nilearn.decoding.SpaceNetRegressor.get_params"]], "predict() (nilearn.decoding.spacenetregressor method)": [[249, "nilearn.decoding.SpaceNetRegressor.predict"]], "score() (nilearn.decoding.spacenetregressor method)": [[249, "nilearn.decoding.SpaceNetRegressor.score"]], "set_params() (nilearn.decoding.spacenetregressor method)": [[249, "nilearn.decoding.SpaceNetRegressor.set_params"]], "canica (class in nilearn.decomposition)": [[250, "nilearn.decomposition.CanICA"]], "__init__() (nilearn.decomposition.canica method)": [[250, "nilearn.decomposition.CanICA.__init__"]], "fit() (nilearn.decomposition.canica method)": [[250, "nilearn.decomposition.CanICA.fit"]], "fit_transform() (nilearn.decomposition.canica method)": [[250, "nilearn.decomposition.CanICA.fit_transform"]], "get_params() (nilearn.decomposition.canica method)": [[250, "nilearn.decomposition.CanICA.get_params"]], "inverse_transform() (nilearn.decomposition.canica method)": [[250, "nilearn.decomposition.CanICA.inverse_transform"]], "score() (nilearn.decomposition.canica method)": [[250, "nilearn.decomposition.CanICA.score"]], "set_output() (nilearn.decomposition.canica method)": [[250, "nilearn.decomposition.CanICA.set_output"]], "set_params() (nilearn.decomposition.canica method)": [[250, "nilearn.decomposition.CanICA.set_params"]], "transform() (nilearn.decomposition.canica method)": [[250, "nilearn.decomposition.CanICA.transform"]], "dictlearning (class in nilearn.decomposition)": [[251, "nilearn.decomposition.DictLearning"]], "__init__() (nilearn.decomposition.dictlearning method)": [[251, "nilearn.decomposition.DictLearning.__init__"]], "fit() (nilearn.decomposition.dictlearning method)": [[251, "nilearn.decomposition.DictLearning.fit"]], "fit_transform() (nilearn.decomposition.dictlearning method)": [[251, "nilearn.decomposition.DictLearning.fit_transform"]], "get_params() (nilearn.decomposition.dictlearning method)": [[251, "nilearn.decomposition.DictLearning.get_params"]], "inverse_transform() (nilearn.decomposition.dictlearning method)": [[251, "nilearn.decomposition.DictLearning.inverse_transform"]], "score() (nilearn.decomposition.dictlearning method)": [[251, "nilearn.decomposition.DictLearning.score"]], "set_output() (nilearn.decomposition.dictlearning method)": [[251, "nilearn.decomposition.DictLearning.set_output"]], "set_params() (nilearn.decomposition.dictlearning method)": [[251, "nilearn.decomposition.DictLearning.set_params"]], "transform() (nilearn.decomposition.dictlearning method)": [[251, "nilearn.decomposition.DictLearning.transform"]], "armodel (class in nilearn.glm)": [[252, "nilearn.glm.ARModel"]], "__init__() (nilearn.glm.armodel method)": [[252, "nilearn.glm.ARModel.__init__"]], "fit() (nilearn.glm.armodel method)": [[252, "nilearn.glm.ARModel.fit"]], "initialize() (nilearn.glm.armodel method)": [[252, "nilearn.glm.ARModel.initialize"]], "logl() (nilearn.glm.armodel method)": [[252, "nilearn.glm.ARModel.logL"]], "whiten() (nilearn.glm.armodel method)": [[252, "nilearn.glm.ARModel.whiten"]], "contrast (class in nilearn.glm)": [[253, "nilearn.glm.Contrast"]], "__init__() (nilearn.glm.contrast method)": [[253, "nilearn.glm.Contrast.__init__"]], "effect_size() (nilearn.glm.contrast method)": [[253, "nilearn.glm.Contrast.effect_size"]], "effect_variance() (nilearn.glm.contrast method)": [[253, "nilearn.glm.Contrast.effect_variance"]], "one_minus_pvalue() (nilearn.glm.contrast method)": [[253, "nilearn.glm.Contrast.one_minus_pvalue"]], "p_value() (nilearn.glm.contrast method)": [[253, "nilearn.glm.Contrast.p_value"]], "stat() (nilearn.glm.contrast method)": [[253, "nilearn.glm.Contrast.stat"]], "z_score() (nilearn.glm.contrast method)": [[253, "nilearn.glm.Contrast.z_score"]], "fcontrastresults (class in nilearn.glm)": [[254, "nilearn.glm.FContrastResults"]], "__init__() (nilearn.glm.fcontrastresults method)": [[254, "nilearn.glm.FContrastResults.__init__"]], "fcontrast() (nilearn.glm.likelihoodmodelresults method)": [[255, "nilearn.glm.LikelihoodModelResults.Fcontrast"]], "likelihoodmodelresults (class in nilearn.glm)": [[255, "nilearn.glm.LikelihoodModelResults"]], "tcontrast() (nilearn.glm.likelihoodmodelresults method)": [[255, "nilearn.glm.LikelihoodModelResults.Tcontrast"]], "__init__() (nilearn.glm.likelihoodmodelresults method)": [[255, "nilearn.glm.LikelihoodModelResults.__init__"]], "conf_int() (nilearn.glm.likelihoodmodelresults method)": [[255, "nilearn.glm.LikelihoodModelResults.conf_int"]], "logl() (nilearn.glm.likelihoodmodelresults method)": [[255, "nilearn.glm.LikelihoodModelResults.logL"]], "t() (nilearn.glm.likelihoodmodelresults method)": [[255, "nilearn.glm.LikelihoodModelResults.t"]], "vcov() (nilearn.glm.likelihoodmodelresults method)": [[255, "nilearn.glm.LikelihoodModelResults.vcov"]], "olsmodel (class in nilearn.glm)": [[256, "nilearn.glm.OLSModel"]], "__init__() (nilearn.glm.olsmodel method)": [[256, "nilearn.glm.OLSModel.__init__"]], "fit() (nilearn.glm.olsmodel method)": [[256, "nilearn.glm.OLSModel.fit"]], "initialize() (nilearn.glm.olsmodel method)": [[256, "nilearn.glm.OLSModel.initialize"]], "logl() (nilearn.glm.olsmodel method)": [[256, "nilearn.glm.OLSModel.logL"]], "whiten() (nilearn.glm.olsmodel method)": [[256, "nilearn.glm.OLSModel.whiten"]], "fcontrast() (nilearn.glm.regressionresults method)": [[257, "nilearn.glm.RegressionResults.Fcontrast"]], "mse() (nilearn.glm.regressionresults method)": [[257, "nilearn.glm.RegressionResults.MSE"]], "regressionresults (class in nilearn.glm)": [[257, "nilearn.glm.RegressionResults"]], "sse() (nilearn.glm.regressionresults method)": [[257, "nilearn.glm.RegressionResults.SSE"]], "tcontrast() (nilearn.glm.regressionresults method)": [[257, "nilearn.glm.RegressionResults.Tcontrast"]], "__init__() (nilearn.glm.regressionresults method)": [[257, "nilearn.glm.RegressionResults.__init__"]], "conf_int() (nilearn.glm.regressionresults method)": [[257, "nilearn.glm.RegressionResults.conf_int"]], "logl() (nilearn.glm.regressionresults method)": [[257, "nilearn.glm.RegressionResults.logL"]], "normalized_residuals() (nilearn.glm.regressionresults method)": [[257, "nilearn.glm.RegressionResults.normalized_residuals"]], "predicted() (nilearn.glm.regressionresults method)": [[257, "nilearn.glm.RegressionResults.predicted"]], "r_square() (nilearn.glm.regressionresults method)": [[257, "nilearn.glm.RegressionResults.r_square"]], "residuals() (nilearn.glm.regressionresults method)": [[257, "nilearn.glm.RegressionResults.residuals"]], "t() (nilearn.glm.regressionresults method)": [[257, "nilearn.glm.RegressionResults.t"]], "vcov() (nilearn.glm.regressionresults method)": [[257, "nilearn.glm.RegressionResults.vcov"]], "fcontrast() (nilearn.glm.simpleregressionresults method)": [[258, "nilearn.glm.SimpleRegressionResults.Fcontrast"]], "simpleregressionresults (class in nilearn.glm)": [[258, "nilearn.glm.SimpleRegressionResults"]], "tcontrast() (nilearn.glm.simpleregressionresults method)": [[258, "nilearn.glm.SimpleRegressionResults.Tcontrast"]], "__init__() (nilearn.glm.simpleregressionresults method)": [[258, "nilearn.glm.SimpleRegressionResults.__init__"]], "conf_int() (nilearn.glm.simpleregressionresults method)": [[258, "nilearn.glm.SimpleRegressionResults.conf_int"]], "logl() (nilearn.glm.simpleregressionresults method)": [[258, "nilearn.glm.SimpleRegressionResults.logL"]], "normalized_residuals() (nilearn.glm.simpleregressionresults method)": [[258, "nilearn.glm.SimpleRegressionResults.normalized_residuals"]], "predicted() (nilearn.glm.simpleregressionresults method)": [[258, "nilearn.glm.SimpleRegressionResults.predicted"]], "residuals() (nilearn.glm.simpleregressionresults method)": [[258, "nilearn.glm.SimpleRegressionResults.residuals"]], "t() (nilearn.glm.simpleregressionresults method)": [[258, "nilearn.glm.SimpleRegressionResults.t"]], "vcov() (nilearn.glm.simpleregressionresults method)": [[258, "nilearn.glm.SimpleRegressionResults.vcov"]], "tcontrastresults (class in nilearn.glm)": [[259, "nilearn.glm.TContrastResults"]], "__init__() (nilearn.glm.tcontrastresults method)": [[259, "nilearn.glm.TContrastResults.__init__"]], "cluster_level_inference() (in module nilearn.glm)": [[260, "nilearn.glm.cluster_level_inference"]], "compute_contrast() (in module nilearn.glm)": [[261, "nilearn.glm.compute_contrast"]], "compute_fixed_effects() (in module nilearn.glm)": [[262, "nilearn.glm.compute_fixed_effects"]], "expression_to_contrast_vector() (in module nilearn.glm)": [[263, "nilearn.glm.expression_to_contrast_vector"]], "fdr_threshold() (in module nilearn.glm)": [[264, "nilearn.glm.fdr_threshold"]], "firstlevelmodel (class in nilearn.glm.first_level)": [[265, "nilearn.glm.first_level.FirstLevelModel"]], "__init__() (nilearn.glm.first_level.firstlevelmodel method)": [[265, "nilearn.glm.first_level.FirstLevelModel.__init__"]], "compute_contrast() (nilearn.glm.first_level.firstlevelmodel method)": [[265, "nilearn.glm.first_level.FirstLevelModel.compute_contrast"]], "fit() (nilearn.glm.first_level.firstlevelmodel method)": [[265, "nilearn.glm.first_level.FirstLevelModel.fit"]], "fit_transform() (nilearn.glm.first_level.firstlevelmodel method)": [[265, "nilearn.glm.first_level.FirstLevelModel.fit_transform"]], "generate_report() (nilearn.glm.first_level.firstlevelmodel method)": [[265, "nilearn.glm.first_level.FirstLevelModel.generate_report"]], "get_params() (nilearn.glm.first_level.firstlevelmodel method)": [[265, "nilearn.glm.first_level.FirstLevelModel.get_params"]], "predicted() (nilearn.glm.first_level.firstlevelmodel method)": [[265, "nilearn.glm.first_level.FirstLevelModel.predicted"]], "r_square() (nilearn.glm.first_level.firstlevelmodel method)": [[265, "nilearn.glm.first_level.FirstLevelModel.r_square"]], "residuals() (nilearn.glm.first_level.firstlevelmodel method)": [[265, "nilearn.glm.first_level.FirstLevelModel.residuals"]], "scaling_axis (nilearn.glm.first_level.firstlevelmodel property)": [[265, "nilearn.glm.first_level.FirstLevelModel.scaling_axis"]], "set_output() (nilearn.glm.first_level.firstlevelmodel method)": [[265, "nilearn.glm.first_level.FirstLevelModel.set_output"]], "set_params() (nilearn.glm.first_level.firstlevelmodel method)": [[265, "nilearn.glm.first_level.FirstLevelModel.set_params"]], "check_design_matrix() (in module nilearn.glm.first_level)": [[266, "nilearn.glm.first_level.check_design_matrix"]], "compute_regressor() (in module nilearn.glm.first_level)": [[267, "nilearn.glm.first_level.compute_regressor"]], "first_level_from_bids() (in module nilearn.glm.first_level)": [[268, "nilearn.glm.first_level.first_level_from_bids"]], "glover_dispersion_derivative() (in module nilearn.glm.first_level)": [[269, "nilearn.glm.first_level.glover_dispersion_derivative"]], "glover_hrf() (in module nilearn.glm.first_level)": [[270, "nilearn.glm.first_level.glover_hrf"]], "glover_time_derivative() (in module nilearn.glm.first_level)": [[271, "nilearn.glm.first_level.glover_time_derivative"]], "make_first_level_design_matrix() (in module nilearn.glm.first_level)": [[272, "nilearn.glm.first_level.make_first_level_design_matrix"]], "mean_scaling() (in module nilearn.glm.first_level)": [[273, "nilearn.glm.first_level.mean_scaling"]], "run_glm() (in module nilearn.glm.first_level)": [[274, "nilearn.glm.first_level.run_glm"]], "spm_dispersion_derivative() (in module nilearn.glm.first_level)": [[275, "nilearn.glm.first_level.spm_dispersion_derivative"]], "spm_hrf() (in module nilearn.glm.first_level)": [[276, "nilearn.glm.first_level.spm_hrf"]], "spm_time_derivative() (in module nilearn.glm.first_level)": [[277, "nilearn.glm.first_level.spm_time_derivative"]], "secondlevelmodel (class in nilearn.glm.second_level)": [[278, "nilearn.glm.second_level.SecondLevelModel"]], "__init__() (nilearn.glm.second_level.secondlevelmodel method)": [[278, "nilearn.glm.second_level.SecondLevelModel.__init__"]], "compute_contrast() (nilearn.glm.second_level.secondlevelmodel method)": [[278, "nilearn.glm.second_level.SecondLevelModel.compute_contrast"]], "fit() (nilearn.glm.second_level.secondlevelmodel method)": [[278, "nilearn.glm.second_level.SecondLevelModel.fit"]], "fit_transform() (nilearn.glm.second_level.secondlevelmodel method)": [[278, "nilearn.glm.second_level.SecondLevelModel.fit_transform"]], "generate_report() (nilearn.glm.second_level.secondlevelmodel method)": [[278, "nilearn.glm.second_level.SecondLevelModel.generate_report"]], "get_params() (nilearn.glm.second_level.secondlevelmodel method)": [[278, "nilearn.glm.second_level.SecondLevelModel.get_params"]], "predicted() (nilearn.glm.second_level.secondlevelmodel method)": [[278, "nilearn.glm.second_level.SecondLevelModel.predicted"]], "r_square() (nilearn.glm.second_level.secondlevelmodel method)": [[278, "nilearn.glm.second_level.SecondLevelModel.r_square"]], "residuals() (nilearn.glm.second_level.secondlevelmodel method)": [[278, "nilearn.glm.second_level.SecondLevelModel.residuals"]], "set_output() (nilearn.glm.second_level.secondlevelmodel method)": [[278, "nilearn.glm.second_level.SecondLevelModel.set_output"]], "set_params() (nilearn.glm.second_level.secondlevelmodel method)": [[278, "nilearn.glm.second_level.SecondLevelModel.set_params"]], "make_second_level_design_matrix() (in module nilearn.glm.second_level)": [[279, "nilearn.glm.second_level.make_second_level_design_matrix"]], "non_parametric_inference() (in module nilearn.glm.second_level)": [[280, "nilearn.glm.second_level.non_parametric_inference"]], "threshold_stats_img() (in module nilearn.glm)": [[281, "nilearn.glm.threshold_stats_img"]], "binarize_img() (in module nilearn.image)": [[282, "nilearn.image.binarize_img"]], "clean_img() (in module nilearn.image)": [[283, "nilearn.image.clean_img"]], "concat_imgs() (in module nilearn.image)": [[284, "nilearn.image.concat_imgs"]], "coord_transform() (in module nilearn.image)": [[285, "nilearn.image.coord_transform"]], "copy_img() (in module nilearn.image)": [[286, "nilearn.image.copy_img"]], "crop_img() (in module nilearn.image)": [[287, "nilearn.image.crop_img"]], "get_data() (in module nilearn.image)": [[288, "nilearn.image.get_data"]], "high_variance_confounds() (in module nilearn.image)": [[289, "nilearn.image.high_variance_confounds"]], "index_img() (in module nilearn.image)": [[290, "nilearn.image.index_img"]], "iter_img() (in module nilearn.image)": [[291, "nilearn.image.iter_img"]], "largest_connected_component_img() (in module nilearn.image)": [[292, "nilearn.image.largest_connected_component_img"]], "load_img() (in module nilearn.image)": [[293, "nilearn.image.load_img"]], "math_img() (in module nilearn.image)": [[294, "nilearn.image.math_img"]], "mean_img() (in module nilearn.image)": [[295, "nilearn.image.mean_img"]], "new_img_like() (in module nilearn.image)": [[296, "nilearn.image.new_img_like"]], "reorder_img() (in module nilearn.image)": [[297, "nilearn.image.reorder_img"]], "resample_img() (in module nilearn.image)": [[298, "nilearn.image.resample_img"]], "resample_to_img() (in module nilearn.image)": [[299, "nilearn.image.resample_to_img"]], "smooth_img() (in module nilearn.image)": [[300, "nilearn.image.smooth_img"]], "swap_img_hemispheres() (in module nilearn.image)": [[301, "nilearn.image.swap_img_hemispheres"]], "threshold_img() (in module nilearn.image)": [[302, "nilearn.image.threshold_img"]], "get_bids_files() (in module nilearn.interfaces.bids)": [[303, "nilearn.interfaces.bids.get_bids_files"]], "parse_bids_filename() (in module nilearn.interfaces.bids)": [[304, "nilearn.interfaces.bids.parse_bids_filename"]], "save_glm_to_bids() (in module nilearn.interfaces.bids)": [[305, "nilearn.interfaces.bids.save_glm_to_bids"]], "load_confounds() (in module nilearn.interfaces.fmriprep)": [[306, "nilearn.interfaces.fmriprep.load_confounds"]], "load_confounds_strategy() (in module nilearn.interfaces.fmriprep)": [[307, "nilearn.interfaces.fmriprep.load_confounds_strategy"]], "get_design_from_fslmat() (in module nilearn.interfaces.fsl)": [[308, "nilearn.interfaces.fsl.get_design_from_fslmat"]], "basemasker (class in nilearn.maskers)": [[309, "nilearn.maskers.BaseMasker"]], "__init__() (nilearn.maskers.basemasker method)": [[309, "nilearn.maskers.BaseMasker.__init__"]], "fit_transform() (nilearn.maskers.basemasker method)": [[309, "nilearn.maskers.BaseMasker.fit_transform"]], "get_params() (nilearn.maskers.basemasker method)": [[309, "nilearn.maskers.BaseMasker.get_params"]], "inverse_transform() (nilearn.maskers.basemasker method)": [[309, "nilearn.maskers.BaseMasker.inverse_transform"]], "set_output() (nilearn.maskers.basemasker method)": [[309, "nilearn.maskers.BaseMasker.set_output"]], "set_params() (nilearn.maskers.basemasker method)": [[309, "nilearn.maskers.BaseMasker.set_params"]], "transform() (nilearn.maskers.basemasker method)": [[309, "nilearn.maskers.BaseMasker.transform"]], "transform_single_imgs() (nilearn.maskers.basemasker method)": [[309, "nilearn.maskers.BaseMasker.transform_single_imgs"]], "multiniftilabelsmasker (class in nilearn.maskers)": [[310, "nilearn.maskers.MultiNiftiLabelsMasker"]], "__init__() (nilearn.maskers.multiniftilabelsmasker method)": [[310, "nilearn.maskers.MultiNiftiLabelsMasker.__init__"]], "fit() (nilearn.maskers.multiniftilabelsmasker method)": [[310, "nilearn.maskers.MultiNiftiLabelsMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[310, "nilearn.maskers.MultiNiftiLabelsMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftilabelsmasker method)": [[310, "nilearn.maskers.MultiNiftiLabelsMasker.generate_report"]], "get_params() (nilearn.maskers.multiniftilabelsmasker method)": [[310, "nilearn.maskers.MultiNiftiLabelsMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[310, "nilearn.maskers.MultiNiftiLabelsMasker.inverse_transform"]], "set_output() (nilearn.maskers.multiniftilabelsmasker method)": [[310, "nilearn.maskers.MultiNiftiLabelsMasker.set_output"]], "set_params() (nilearn.maskers.multiniftilabelsmasker method)": [[310, "nilearn.maskers.MultiNiftiLabelsMasker.set_params"]], "transform() (nilearn.maskers.multiniftilabelsmasker method)": [[310, "nilearn.maskers.MultiNiftiLabelsMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[310, "nilearn.maskers.MultiNiftiLabelsMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[310, "nilearn.maskers.MultiNiftiLabelsMasker.transform_single_imgs"]], "multiniftimapsmasker (class in nilearn.maskers)": [[311, "nilearn.maskers.MultiNiftiMapsMasker"]], "__init__() (nilearn.maskers.multiniftimapsmasker method)": [[311, "nilearn.maskers.MultiNiftiMapsMasker.__init__"]], "fit() (nilearn.maskers.multiniftimapsmasker method)": [[311, "nilearn.maskers.MultiNiftiMapsMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftimapsmasker method)": [[311, "nilearn.maskers.MultiNiftiMapsMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftimapsmasker method)": [[311, "nilearn.maskers.MultiNiftiMapsMasker.generate_report"]], "get_params() (nilearn.maskers.multiniftimapsmasker method)": [[311, "nilearn.maskers.MultiNiftiMapsMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftimapsmasker method)": [[311, "nilearn.maskers.MultiNiftiMapsMasker.inverse_transform"]], "set_output() (nilearn.maskers.multiniftimapsmasker method)": [[311, "nilearn.maskers.MultiNiftiMapsMasker.set_output"]], "set_params() (nilearn.maskers.multiniftimapsmasker method)": [[311, "nilearn.maskers.MultiNiftiMapsMasker.set_params"]], "transform() (nilearn.maskers.multiniftimapsmasker method)": [[311, "nilearn.maskers.MultiNiftiMapsMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[311, "nilearn.maskers.MultiNiftiMapsMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[311, "nilearn.maskers.MultiNiftiMapsMasker.transform_single_imgs"]], "multiniftimasker (class in nilearn.maskers)": [[312, "nilearn.maskers.MultiNiftiMasker"]], "__init__() (nilearn.maskers.multiniftimasker method)": [[312, "nilearn.maskers.MultiNiftiMasker.__init__"]], "fit() (nilearn.maskers.multiniftimasker method)": [[312, "nilearn.maskers.MultiNiftiMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftimasker method)": [[312, "nilearn.maskers.MultiNiftiMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftimasker method)": [[312, "nilearn.maskers.MultiNiftiMasker.generate_report"]], "get_params() (nilearn.maskers.multiniftimasker method)": [[312, "nilearn.maskers.MultiNiftiMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftimasker method)": [[312, "nilearn.maskers.MultiNiftiMasker.inverse_transform"]], "set_output() (nilearn.maskers.multiniftimasker method)": [[312, "nilearn.maskers.MultiNiftiMasker.set_output"]], "set_params() (nilearn.maskers.multiniftimasker method)": [[312, "nilearn.maskers.MultiNiftiMasker.set_params"]], "transform() (nilearn.maskers.multiniftimasker method)": [[312, "nilearn.maskers.MultiNiftiMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftimasker method)": [[312, "nilearn.maskers.MultiNiftiMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftimasker method)": [[312, "nilearn.maskers.MultiNiftiMasker.transform_single_imgs"]], "niftilabelsmasker (class in nilearn.maskers)": [[313, "nilearn.maskers.NiftiLabelsMasker"]], "__init__() (nilearn.maskers.niftilabelsmasker method)": [[313, "nilearn.maskers.NiftiLabelsMasker.__init__"]], "fit() (nilearn.maskers.niftilabelsmasker method)": [[313, "nilearn.maskers.NiftiLabelsMasker.fit"]], "fit_transform() (nilearn.maskers.niftilabelsmasker method)": [[313, "nilearn.maskers.NiftiLabelsMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftilabelsmasker method)": [[313, "nilearn.maskers.NiftiLabelsMasker.generate_report"]], "get_params() (nilearn.maskers.niftilabelsmasker method)": [[313, "nilearn.maskers.NiftiLabelsMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftilabelsmasker method)": [[313, "nilearn.maskers.NiftiLabelsMasker.inverse_transform"]], "set_output() (nilearn.maskers.niftilabelsmasker method)": [[313, "nilearn.maskers.NiftiLabelsMasker.set_output"]], "set_params() (nilearn.maskers.niftilabelsmasker method)": [[313, "nilearn.maskers.NiftiLabelsMasker.set_params"]], "transform() (nilearn.maskers.niftilabelsmasker method)": [[313, "nilearn.maskers.NiftiLabelsMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftilabelsmasker method)": [[313, "nilearn.maskers.NiftiLabelsMasker.transform_single_imgs"]], "niftimapsmasker (class in nilearn.maskers)": [[314, "nilearn.maskers.NiftiMapsMasker"]], "__init__() (nilearn.maskers.niftimapsmasker method)": [[314, "nilearn.maskers.NiftiMapsMasker.__init__"]], "fit() (nilearn.maskers.niftimapsmasker method)": [[314, "nilearn.maskers.NiftiMapsMasker.fit"]], "fit_transform() (nilearn.maskers.niftimapsmasker method)": [[314, "nilearn.maskers.NiftiMapsMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftimapsmasker method)": [[314, "nilearn.maskers.NiftiMapsMasker.generate_report"]], "get_params() (nilearn.maskers.niftimapsmasker method)": [[314, "nilearn.maskers.NiftiMapsMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftimapsmasker method)": [[314, "nilearn.maskers.NiftiMapsMasker.inverse_transform"]], "set_output() (nilearn.maskers.niftimapsmasker method)": [[314, "nilearn.maskers.NiftiMapsMasker.set_output"]], "set_params() (nilearn.maskers.niftimapsmasker method)": [[314, "nilearn.maskers.NiftiMapsMasker.set_params"]], "transform() (nilearn.maskers.niftimapsmasker method)": [[314, "nilearn.maskers.NiftiMapsMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftimapsmasker method)": [[314, "nilearn.maskers.NiftiMapsMasker.transform_single_imgs"]], "niftimasker (class in nilearn.maskers)": [[315, "nilearn.maskers.NiftiMasker"]], "__init__() (nilearn.maskers.niftimasker method)": [[315, "nilearn.maskers.NiftiMasker.__init__"]], "fit() (nilearn.maskers.niftimasker method)": [[315, "nilearn.maskers.NiftiMasker.fit"]], "fit_transform() (nilearn.maskers.niftimasker method)": [[315, "nilearn.maskers.NiftiMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftimasker method)": [[315, "nilearn.maskers.NiftiMasker.generate_report"]], "get_params() (nilearn.maskers.niftimasker method)": [[315, "nilearn.maskers.NiftiMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftimasker method)": [[315, "nilearn.maskers.NiftiMasker.inverse_transform"]], "set_output() (nilearn.maskers.niftimasker method)": [[315, "nilearn.maskers.NiftiMasker.set_output"]], "set_params() (nilearn.maskers.niftimasker method)": [[315, "nilearn.maskers.NiftiMasker.set_params"]], "transform() (nilearn.maskers.niftimasker method)": [[315, "nilearn.maskers.NiftiMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftimasker method)": [[315, "nilearn.maskers.NiftiMasker.transform_single_imgs"]], "niftispheresmasker (class in nilearn.maskers)": [[316, "nilearn.maskers.NiftiSpheresMasker"]], "__init__() (nilearn.maskers.niftispheresmasker method)": [[316, "nilearn.maskers.NiftiSpheresMasker.__init__"]], "fit() (nilearn.maskers.niftispheresmasker method)": [[316, "nilearn.maskers.NiftiSpheresMasker.fit"]], "fit_transform() (nilearn.maskers.niftispheresmasker method)": [[316, "nilearn.maskers.NiftiSpheresMasker.fit_transform"]], "get_params() (nilearn.maskers.niftispheresmasker method)": [[316, "nilearn.maskers.NiftiSpheresMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftispheresmasker method)": [[316, "nilearn.maskers.NiftiSpheresMasker.inverse_transform"]], "set_output() (nilearn.maskers.niftispheresmasker method)": [[316, "nilearn.maskers.NiftiSpheresMasker.set_output"]], "set_params() (nilearn.maskers.niftispheresmasker method)": [[316, "nilearn.maskers.NiftiSpheresMasker.set_params"]], "transform() (nilearn.maskers.niftispheresmasker method)": [[316, "nilearn.maskers.NiftiSpheresMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftispheresmasker method)": [[316, "nilearn.maskers.NiftiSpheresMasker.transform_single_imgs"]], "apply_mask() (in module nilearn.masking)": [[317, "nilearn.masking.apply_mask"]], "compute_background_mask() (in module nilearn.masking)": [[318, "nilearn.masking.compute_background_mask"]], "compute_brain_mask() (in module nilearn.masking)": [[319, "nilearn.masking.compute_brain_mask"]], "compute_epi_mask() (in module nilearn.masking)": [[320, "nilearn.masking.compute_epi_mask"]], "compute_multi_background_mask() (in module nilearn.masking)": [[321, "nilearn.masking.compute_multi_background_mask"]], "compute_multi_brain_mask() (in module nilearn.masking)": [[322, "nilearn.masking.compute_multi_brain_mask"]], "compute_multi_epi_mask() (in module nilearn.masking)": [[323, "nilearn.masking.compute_multi_epi_mask"]], "intersect_masks() (in module nilearn.masking)": [[324, "nilearn.masking.intersect_masks"]], "unmask() (in module nilearn.masking)": [[325, "nilearn.masking.unmask"]], "permuted_ols() (in module nilearn.mass_univariate)": [[326, "nilearn.mass_univariate.permuted_ols"]], "baseaxes (class in nilearn.plotting.displays)": [[327, "nilearn.plotting.displays.BaseAxes"]], "__init__() (nilearn.plotting.displays.baseaxes method)": [[327, "nilearn.plotting.displays.BaseAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[327, "nilearn.plotting.displays.BaseAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.baseaxes method)": [[327, "nilearn.plotting.displays.BaseAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.baseaxes method)": [[327, "nilearn.plotting.displays.BaseAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.baseaxes method)": [[327, "nilearn.plotting.displays.BaseAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.baseaxes method)": [[327, "nilearn.plotting.displays.BaseAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[327, "nilearn.plotting.displays.BaseAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.baseaxes method)": [[327, "nilearn.plotting.displays.BaseAxes.transform_to_2d"]], "baseslicer (class in nilearn.plotting.displays)": [[328, "nilearn.plotting.displays.BaseSlicer"]], "__init__() (nilearn.plotting.displays.baseslicer method)": [[328, "nilearn.plotting.displays.BaseSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.baseslicer method)": [[328, "nilearn.plotting.displays.BaseSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.baseslicer method)": [[328, "nilearn.plotting.displays.BaseSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.baseslicer method)": [[328, "nilearn.plotting.displays.BaseSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.baseslicer method)": [[328, "nilearn.plotting.displays.BaseSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.baseslicer method)": [[328, "nilearn.plotting.displays.BaseSlicer.annotate"]], "black_bg (nilearn.plotting.displays.baseslicer property)": [[328, "nilearn.plotting.displays.BaseSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.baseslicer property)": [[328, "nilearn.plotting.displays.BaseSlicer.brain_color"]], "close() (nilearn.plotting.displays.baseslicer method)": [[328, "nilearn.plotting.displays.BaseSlicer.close"]], "find_cut_coords() (nilearn.plotting.displays.baseslicer static method)": [[328, "nilearn.plotting.displays.BaseSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.baseslicer class method)": [[328, "nilearn.plotting.displays.BaseSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.baseslicer method)": [[328, "nilearn.plotting.displays.BaseSlicer.savefig"]], "title() (nilearn.plotting.displays.baseslicer method)": [[328, "nilearn.plotting.displays.BaseSlicer.title"]], "cutaxes (class in nilearn.plotting.displays)": [[329, "nilearn.plotting.displays.CutAxes"]], "__init__() (nilearn.plotting.displays.cutaxes method)": [[329, "nilearn.plotting.displays.CutAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[329, "nilearn.plotting.displays.CutAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.cutaxes method)": [[329, "nilearn.plotting.displays.CutAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.cutaxes method)": [[329, "nilearn.plotting.displays.CutAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.cutaxes method)": [[329, "nilearn.plotting.displays.CutAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.cutaxes method)": [[329, "nilearn.plotting.displays.CutAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[329, "nilearn.plotting.displays.CutAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.cutaxes method)": [[329, "nilearn.plotting.displays.CutAxes.transform_to_2d"]], "glassbrainaxes (class in nilearn.plotting.displays)": [[330, "nilearn.plotting.displays.GlassBrainAxes"]], "__init__() (nilearn.plotting.displays.glassbrainaxes method)": [[330, "nilearn.plotting.displays.GlassBrainAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[330, "nilearn.plotting.displays.GlassBrainAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[330, "nilearn.plotting.displays.GlassBrainAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.glassbrainaxes method)": [[330, "nilearn.plotting.displays.GlassBrainAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.glassbrainaxes method)": [[330, "nilearn.plotting.displays.GlassBrainAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.glassbrainaxes method)": [[330, "nilearn.plotting.displays.GlassBrainAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[330, "nilearn.plotting.displays.GlassBrainAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[330, "nilearn.plotting.displays.GlassBrainAxes.transform_to_2d"]], "lprojector (class in nilearn.plotting.displays)": [[331, "nilearn.plotting.displays.LProjector"]], "__init__() (nilearn.plotting.displays.lprojector method)": [[331, "nilearn.plotting.displays.LProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lprojector method)": [[331, "nilearn.plotting.displays.LProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lprojector method)": [[331, "nilearn.plotting.displays.LProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lprojector method)": [[331, "nilearn.plotting.displays.LProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lprojector method)": [[331, "nilearn.plotting.displays.LProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lprojector method)": [[331, "nilearn.plotting.displays.LProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lprojector method)": [[331, "nilearn.plotting.displays.LProjector.annotate"]], "black_bg (nilearn.plotting.displays.lprojector property)": [[331, "nilearn.plotting.displays.LProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lprojector property)": [[331, "nilearn.plotting.displays.LProjector.brain_color"]], "close() (nilearn.plotting.displays.lprojector method)": [[331, "nilearn.plotting.displays.LProjector.close"]], "draw_cross() (nilearn.plotting.displays.lprojector method)": [[331, "nilearn.plotting.displays.LProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lprojector class method)": [[331, "nilearn.plotting.displays.LProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lprojector class method)": [[331, "nilearn.plotting.displays.LProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lprojector method)": [[331, "nilearn.plotting.displays.LProjector.savefig"]], "title() (nilearn.plotting.displays.lprojector method)": [[331, "nilearn.plotting.displays.LProjector.title"]], "lrprojector (class in nilearn.plotting.displays)": [[332, "nilearn.plotting.displays.LRProjector"]], "__init__() (nilearn.plotting.displays.lrprojector method)": [[332, "nilearn.plotting.displays.LRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lrprojector method)": [[332, "nilearn.plotting.displays.LRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lrprojector method)": [[332, "nilearn.plotting.displays.LRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lrprojector method)": [[332, "nilearn.plotting.displays.LRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lrprojector method)": [[332, "nilearn.plotting.displays.LRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lrprojector method)": [[332, "nilearn.plotting.displays.LRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lrprojector method)": [[332, "nilearn.plotting.displays.LRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lrprojector property)": [[332, "nilearn.plotting.displays.LRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lrprojector property)": [[332, "nilearn.plotting.displays.LRProjector.brain_color"]], "close() (nilearn.plotting.displays.lrprojector method)": [[332, "nilearn.plotting.displays.LRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lrprojector method)": [[332, "nilearn.plotting.displays.LRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lrprojector class method)": [[332, "nilearn.plotting.displays.LRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lrprojector class method)": [[332, "nilearn.plotting.displays.LRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lrprojector method)": [[332, "nilearn.plotting.displays.LRProjector.savefig"]], "title() (nilearn.plotting.displays.lrprojector method)": [[332, "nilearn.plotting.displays.LRProjector.title"]], "lyrprojector (class in nilearn.plotting.displays)": [[333, "nilearn.plotting.displays.LYRProjector"]], "__init__() (nilearn.plotting.displays.lyrprojector method)": [[333, "nilearn.plotting.displays.LYRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lyrprojector method)": [[333, "nilearn.plotting.displays.LYRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lyrprojector method)": [[333, "nilearn.plotting.displays.LYRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lyrprojector method)": [[333, "nilearn.plotting.displays.LYRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lyrprojector method)": [[333, "nilearn.plotting.displays.LYRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lyrprojector method)": [[333, "nilearn.plotting.displays.LYRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lyrprojector method)": [[333, "nilearn.plotting.displays.LYRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lyrprojector property)": [[333, "nilearn.plotting.displays.LYRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lyrprojector property)": [[333, "nilearn.plotting.displays.LYRProjector.brain_color"]], "close() (nilearn.plotting.displays.lyrprojector method)": [[333, "nilearn.plotting.displays.LYRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lyrprojector method)": [[333, "nilearn.plotting.displays.LYRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lyrprojector class method)": [[333, "nilearn.plotting.displays.LYRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lyrprojector class method)": [[333, "nilearn.plotting.displays.LYRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lyrprojector method)": [[333, "nilearn.plotting.displays.LYRProjector.savefig"]], "title() (nilearn.plotting.displays.lyrprojector method)": [[333, "nilearn.plotting.displays.LYRProjector.title"]], "lyrzprojector (class in nilearn.plotting.displays)": [[334, "nilearn.plotting.displays.LYRZProjector"]], "__init__() (nilearn.plotting.displays.lyrzprojector method)": [[334, "nilearn.plotting.displays.LYRZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lyrzprojector method)": [[334, "nilearn.plotting.displays.LYRZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lyrzprojector method)": [[334, "nilearn.plotting.displays.LYRZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lyrzprojector method)": [[334, "nilearn.plotting.displays.LYRZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lyrzprojector method)": [[334, "nilearn.plotting.displays.LYRZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lyrzprojector method)": [[334, "nilearn.plotting.displays.LYRZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lyrzprojector method)": [[334, "nilearn.plotting.displays.LYRZProjector.annotate"]], "black_bg (nilearn.plotting.displays.lyrzprojector property)": [[334, "nilearn.plotting.displays.LYRZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lyrzprojector property)": [[334, "nilearn.plotting.displays.LYRZProjector.brain_color"]], "close() (nilearn.plotting.displays.lyrzprojector method)": [[334, "nilearn.plotting.displays.LYRZProjector.close"]], "draw_cross() (nilearn.plotting.displays.lyrzprojector method)": [[334, "nilearn.plotting.displays.LYRZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lyrzprojector class method)": [[334, "nilearn.plotting.displays.LYRZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lyrzprojector class method)": [[334, "nilearn.plotting.displays.LYRZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lyrzprojector method)": [[334, "nilearn.plotting.displays.LYRZProjector.savefig"]], "title() (nilearn.plotting.displays.lyrzprojector method)": [[334, "nilearn.plotting.displays.LYRZProjector.title"]], "lzrprojector (class in nilearn.plotting.displays)": [[335, "nilearn.plotting.displays.LZRProjector"]], "__init__() (nilearn.plotting.displays.lzrprojector method)": [[335, "nilearn.plotting.displays.LZRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lzrprojector method)": [[335, "nilearn.plotting.displays.LZRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lzrprojector method)": [[335, "nilearn.plotting.displays.LZRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lzrprojector method)": [[335, "nilearn.plotting.displays.LZRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lzrprojector method)": [[335, "nilearn.plotting.displays.LZRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lzrprojector method)": [[335, "nilearn.plotting.displays.LZRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lzrprojector method)": [[335, "nilearn.plotting.displays.LZRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lzrprojector property)": [[335, "nilearn.plotting.displays.LZRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lzrprojector property)": [[335, "nilearn.plotting.displays.LZRProjector.brain_color"]], "close() (nilearn.plotting.displays.lzrprojector method)": [[335, "nilearn.plotting.displays.LZRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lzrprojector method)": [[335, "nilearn.plotting.displays.LZRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lzrprojector class method)": [[335, "nilearn.plotting.displays.LZRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lzrprojector class method)": [[335, "nilearn.plotting.displays.LZRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lzrprojector method)": [[335, "nilearn.plotting.displays.LZRProjector.savefig"]], "title() (nilearn.plotting.displays.lzrprojector method)": [[335, "nilearn.plotting.displays.LZRProjector.title"]], "lzryprojector (class in nilearn.plotting.displays)": [[336, "nilearn.plotting.displays.LZRYProjector"]], "__init__() (nilearn.plotting.displays.lzryprojector method)": [[336, "nilearn.plotting.displays.LZRYProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lzryprojector method)": [[336, "nilearn.plotting.displays.LZRYProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lzryprojector method)": [[336, "nilearn.plotting.displays.LZRYProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lzryprojector method)": [[336, "nilearn.plotting.displays.LZRYProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lzryprojector method)": [[336, "nilearn.plotting.displays.LZRYProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lzryprojector method)": [[336, "nilearn.plotting.displays.LZRYProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lzryprojector method)": [[336, "nilearn.plotting.displays.LZRYProjector.annotate"]], "black_bg (nilearn.plotting.displays.lzryprojector property)": [[336, "nilearn.plotting.displays.LZRYProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lzryprojector property)": [[336, "nilearn.plotting.displays.LZRYProjector.brain_color"]], "close() (nilearn.plotting.displays.lzryprojector method)": [[336, "nilearn.plotting.displays.LZRYProjector.close"]], "draw_cross() (nilearn.plotting.displays.lzryprojector method)": [[336, "nilearn.plotting.displays.LZRYProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lzryprojector class method)": [[336, "nilearn.plotting.displays.LZRYProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lzryprojector class method)": [[336, "nilearn.plotting.displays.LZRYProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lzryprojector method)": [[336, "nilearn.plotting.displays.LZRYProjector.savefig"]], "title() (nilearn.plotting.displays.lzryprojector method)": [[336, "nilearn.plotting.displays.LZRYProjector.title"]], "mosaicslicer (class in nilearn.plotting.displays)": [[337, "nilearn.plotting.displays.MosaicSlicer"]], "__init__() (nilearn.plotting.displays.mosaicslicer method)": [[337, "nilearn.plotting.displays.MosaicSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.mosaicslicer method)": [[337, "nilearn.plotting.displays.MosaicSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.mosaicslicer method)": [[337, "nilearn.plotting.displays.MosaicSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.mosaicslicer method)": [[337, "nilearn.plotting.displays.MosaicSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.mosaicslicer method)": [[337, "nilearn.plotting.displays.MosaicSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.mosaicslicer method)": [[337, "nilearn.plotting.displays.MosaicSlicer.annotate"]], "black_bg (nilearn.plotting.displays.mosaicslicer property)": [[337, "nilearn.plotting.displays.MosaicSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.mosaicslicer property)": [[337, "nilearn.plotting.displays.MosaicSlicer.brain_color"]], "close() (nilearn.plotting.displays.mosaicslicer method)": [[337, "nilearn.plotting.displays.MosaicSlicer.close"]], "draw_cross() (nilearn.plotting.displays.mosaicslicer method)": [[337, "nilearn.plotting.displays.MosaicSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.mosaicslicer class method)": [[337, "nilearn.plotting.displays.MosaicSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.mosaicslicer class method)": [[337, "nilearn.plotting.displays.MosaicSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.mosaicslicer method)": [[337, "nilearn.plotting.displays.MosaicSlicer.savefig"]], "title() (nilearn.plotting.displays.mosaicslicer method)": [[337, "nilearn.plotting.displays.MosaicSlicer.title"]], "orthoprojector (class in nilearn.plotting.displays)": [[338, "nilearn.plotting.displays.OrthoProjector"]], "__init__() (nilearn.plotting.displays.orthoprojector method)": [[338, "nilearn.plotting.displays.OrthoProjector.__init__"]], "add_contours() (nilearn.plotting.displays.orthoprojector method)": [[338, "nilearn.plotting.displays.OrthoProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.orthoprojector method)": [[338, "nilearn.plotting.displays.OrthoProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.orthoprojector method)": [[338, "nilearn.plotting.displays.OrthoProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.orthoprojector method)": [[338, "nilearn.plotting.displays.OrthoProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.orthoprojector method)": [[338, "nilearn.plotting.displays.OrthoProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.orthoprojector method)": [[338, "nilearn.plotting.displays.OrthoProjector.annotate"]], "black_bg (nilearn.plotting.displays.orthoprojector property)": [[338, "nilearn.plotting.displays.OrthoProjector.black_bg"]], "brain_color (nilearn.plotting.displays.orthoprojector property)": [[338, "nilearn.plotting.displays.OrthoProjector.brain_color"]], "close() (nilearn.plotting.displays.orthoprojector method)": [[338, "nilearn.plotting.displays.OrthoProjector.close"]], "draw_cross() (nilearn.plotting.displays.orthoprojector method)": [[338, "nilearn.plotting.displays.OrthoProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.orthoprojector class method)": [[338, "nilearn.plotting.displays.OrthoProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.orthoprojector class method)": [[338, "nilearn.plotting.displays.OrthoProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.orthoprojector method)": [[338, "nilearn.plotting.displays.OrthoProjector.savefig"]], "title() (nilearn.plotting.displays.orthoprojector method)": [[338, "nilearn.plotting.displays.OrthoProjector.title"]], "orthoslicer (class in nilearn.plotting.displays)": [[339, "nilearn.plotting.displays.OrthoSlicer"]], "__init__() (nilearn.plotting.displays.orthoslicer method)": [[339, "nilearn.plotting.displays.OrthoSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.orthoslicer method)": [[339, "nilearn.plotting.displays.OrthoSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.orthoslicer method)": [[339, "nilearn.plotting.displays.OrthoSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.orthoslicer method)": [[339, "nilearn.plotting.displays.OrthoSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.orthoslicer method)": [[339, "nilearn.plotting.displays.OrthoSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.orthoslicer method)": [[339, "nilearn.plotting.displays.OrthoSlicer.annotate"]], "black_bg (nilearn.plotting.displays.orthoslicer property)": [[339, "nilearn.plotting.displays.OrthoSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.orthoslicer property)": [[339, "nilearn.plotting.displays.OrthoSlicer.brain_color"]], "close() (nilearn.plotting.displays.orthoslicer method)": [[339, "nilearn.plotting.displays.OrthoSlicer.close"]], "draw_cross() (nilearn.plotting.displays.orthoslicer method)": [[339, "nilearn.plotting.displays.OrthoSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.orthoslicer class method)": [[339, "nilearn.plotting.displays.OrthoSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.orthoslicer class method)": [[339, "nilearn.plotting.displays.OrthoSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.orthoslicer method)": [[339, "nilearn.plotting.displays.OrthoSlicer.savefig"]], "title() (nilearn.plotting.displays.orthoslicer method)": [[339, "nilearn.plotting.displays.OrthoSlicer.title"]], "plotlysurfacefigure (class in nilearn.plotting.displays)": [[340, "nilearn.plotting.displays.PlotlySurfaceFigure"]], "__init__() (nilearn.plotting.displays.plotlysurfacefigure method)": [[340, "nilearn.plotting.displays.PlotlySurfaceFigure.__init__"]], "savefig() (nilearn.plotting.displays.plotlysurfacefigure method)": [[340, "nilearn.plotting.displays.PlotlySurfaceFigure.savefig"]], "show() (nilearn.plotting.displays.plotlysurfacefigure method)": [[340, "nilearn.plotting.displays.PlotlySurfaceFigure.show"]], "rprojector (class in nilearn.plotting.displays)": [[341, "nilearn.plotting.displays.RProjector"]], "__init__() (nilearn.plotting.displays.rprojector method)": [[341, "nilearn.plotting.displays.RProjector.__init__"]], "add_contours() (nilearn.plotting.displays.rprojector method)": [[341, "nilearn.plotting.displays.RProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.rprojector method)": [[341, "nilearn.plotting.displays.RProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.rprojector method)": [[341, "nilearn.plotting.displays.RProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.rprojector method)": [[341, "nilearn.plotting.displays.RProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.rprojector method)": [[341, "nilearn.plotting.displays.RProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.rprojector method)": [[341, "nilearn.plotting.displays.RProjector.annotate"]], "black_bg (nilearn.plotting.displays.rprojector property)": [[341, "nilearn.plotting.displays.RProjector.black_bg"]], "brain_color (nilearn.plotting.displays.rprojector property)": [[341, "nilearn.plotting.displays.RProjector.brain_color"]], "close() (nilearn.plotting.displays.rprojector method)": [[341, "nilearn.plotting.displays.RProjector.close"]], "draw_cross() (nilearn.plotting.displays.rprojector method)": [[341, "nilearn.plotting.displays.RProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.rprojector class method)": [[341, "nilearn.plotting.displays.RProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.rprojector class method)": [[341, "nilearn.plotting.displays.RProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.rprojector method)": [[341, "nilearn.plotting.displays.RProjector.savefig"]], "title() (nilearn.plotting.displays.rprojector method)": [[341, "nilearn.plotting.displays.RProjector.title"]], "tiledslicer (class in nilearn.plotting.displays)": [[342, "nilearn.plotting.displays.TiledSlicer"]], "__init__() (nilearn.plotting.displays.tiledslicer method)": [[342, "nilearn.plotting.displays.TiledSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.tiledslicer method)": [[342, "nilearn.plotting.displays.TiledSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.tiledslicer method)": [[342, "nilearn.plotting.displays.TiledSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.tiledslicer method)": [[342, "nilearn.plotting.displays.TiledSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.tiledslicer method)": [[342, "nilearn.plotting.displays.TiledSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.tiledslicer method)": [[342, "nilearn.plotting.displays.TiledSlicer.annotate"]], "black_bg (nilearn.plotting.displays.tiledslicer property)": [[342, "nilearn.plotting.displays.TiledSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.tiledslicer property)": [[342, "nilearn.plotting.displays.TiledSlicer.brain_color"]], "close() (nilearn.plotting.displays.tiledslicer method)": [[342, "nilearn.plotting.displays.TiledSlicer.close"]], "draw_cross() (nilearn.plotting.displays.tiledslicer method)": [[342, "nilearn.plotting.displays.TiledSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.tiledslicer class method)": [[342, "nilearn.plotting.displays.TiledSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.tiledslicer class method)": [[342, "nilearn.plotting.displays.TiledSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.tiledslicer method)": [[342, "nilearn.plotting.displays.TiledSlicer.savefig"]], "title() (nilearn.plotting.displays.tiledslicer method)": [[342, "nilearn.plotting.displays.TiledSlicer.title"]], "xprojector (class in nilearn.plotting.displays)": [[343, "nilearn.plotting.displays.XProjector"]], "__init__() (nilearn.plotting.displays.xprojector method)": [[343, "nilearn.plotting.displays.XProjector.__init__"]], "add_contours() (nilearn.plotting.displays.xprojector method)": [[343, "nilearn.plotting.displays.XProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.xprojector method)": [[343, "nilearn.plotting.displays.XProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.xprojector method)": [[343, "nilearn.plotting.displays.XProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.xprojector method)": [[343, "nilearn.plotting.displays.XProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.xprojector method)": [[343, "nilearn.plotting.displays.XProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.xprojector method)": [[343, "nilearn.plotting.displays.XProjector.annotate"]], "black_bg (nilearn.plotting.displays.xprojector property)": [[343, "nilearn.plotting.displays.XProjector.black_bg"]], "brain_color (nilearn.plotting.displays.xprojector property)": [[343, "nilearn.plotting.displays.XProjector.brain_color"]], "close() (nilearn.plotting.displays.xprojector method)": [[343, "nilearn.plotting.displays.XProjector.close"]], "draw_cross() (nilearn.plotting.displays.xprojector method)": [[343, "nilearn.plotting.displays.XProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xprojector class method)": [[343, "nilearn.plotting.displays.XProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xprojector class method)": [[343, "nilearn.plotting.displays.XProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.xprojector method)": [[343, "nilearn.plotting.displays.XProjector.savefig"]], "title() (nilearn.plotting.displays.xprojector method)": [[343, "nilearn.plotting.displays.XProjector.title"]], "xslicer (class in nilearn.plotting.displays)": [[344, "nilearn.plotting.displays.XSlicer"]], "__init__() (nilearn.plotting.displays.xslicer method)": [[344, "nilearn.plotting.displays.XSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.xslicer method)": [[344, "nilearn.plotting.displays.XSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.xslicer method)": [[344, "nilearn.plotting.displays.XSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.xslicer method)": [[344, "nilearn.plotting.displays.XSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.xslicer method)": [[344, "nilearn.plotting.displays.XSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.xslicer method)": [[344, "nilearn.plotting.displays.XSlicer.annotate"]], "black_bg (nilearn.plotting.displays.xslicer property)": [[344, "nilearn.plotting.displays.XSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.xslicer property)": [[344, "nilearn.plotting.displays.XSlicer.brain_color"]], "close() (nilearn.plotting.displays.xslicer method)": [[344, "nilearn.plotting.displays.XSlicer.close"]], "draw_cross() (nilearn.plotting.displays.xslicer method)": [[344, "nilearn.plotting.displays.XSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xslicer class method)": [[344, "nilearn.plotting.displays.XSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xslicer class method)": [[344, "nilearn.plotting.displays.XSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.xslicer method)": [[344, "nilearn.plotting.displays.XSlicer.savefig"]], "title() (nilearn.plotting.displays.xslicer method)": [[344, "nilearn.plotting.displays.XSlicer.title"]], "xzprojector (class in nilearn.plotting.displays)": [[345, "nilearn.plotting.displays.XZProjector"]], "__init__() (nilearn.plotting.displays.xzprojector method)": [[345, "nilearn.plotting.displays.XZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.xzprojector method)": [[345, "nilearn.plotting.displays.XZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.xzprojector method)": [[345, "nilearn.plotting.displays.XZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.xzprojector method)": [[345, "nilearn.plotting.displays.XZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.xzprojector method)": [[345, "nilearn.plotting.displays.XZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.xzprojector method)": [[345, "nilearn.plotting.displays.XZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.xzprojector method)": [[345, "nilearn.plotting.displays.XZProjector.annotate"]], "black_bg (nilearn.plotting.displays.xzprojector property)": [[345, "nilearn.plotting.displays.XZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.xzprojector property)": [[345, "nilearn.plotting.displays.XZProjector.brain_color"]], "close() (nilearn.plotting.displays.xzprojector method)": [[345, "nilearn.plotting.displays.XZProjector.close"]], "draw_cross() (nilearn.plotting.displays.xzprojector method)": [[345, "nilearn.plotting.displays.XZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xzprojector class method)": [[345, "nilearn.plotting.displays.XZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xzprojector class method)": [[345, "nilearn.plotting.displays.XZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.xzprojector method)": [[345, "nilearn.plotting.displays.XZProjector.savefig"]], "title() (nilearn.plotting.displays.xzprojector method)": [[345, "nilearn.plotting.displays.XZProjector.title"]], "xzslicer (class in nilearn.plotting.displays)": [[346, "nilearn.plotting.displays.XZSlicer"]], "__init__() (nilearn.plotting.displays.xzslicer method)": [[346, "nilearn.plotting.displays.XZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.xzslicer method)": [[346, "nilearn.plotting.displays.XZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.xzslicer method)": [[346, "nilearn.plotting.displays.XZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.xzslicer method)": [[346, "nilearn.plotting.displays.XZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.xzslicer method)": [[346, "nilearn.plotting.displays.XZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.xzslicer method)": [[346, "nilearn.plotting.displays.XZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.xzslicer property)": [[346, "nilearn.plotting.displays.XZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.xzslicer property)": [[346, "nilearn.plotting.displays.XZSlicer.brain_color"]], "close() (nilearn.plotting.displays.xzslicer method)": [[346, "nilearn.plotting.displays.XZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.xzslicer method)": [[346, "nilearn.plotting.displays.XZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xzslicer class method)": [[346, "nilearn.plotting.displays.XZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xzslicer class method)": [[346, "nilearn.plotting.displays.XZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.xzslicer method)": [[346, "nilearn.plotting.displays.XZSlicer.savefig"]], "title() (nilearn.plotting.displays.xzslicer method)": [[346, "nilearn.plotting.displays.XZSlicer.title"]], "yprojector (class in nilearn.plotting.displays)": [[347, "nilearn.plotting.displays.YProjector"]], "__init__() (nilearn.plotting.displays.yprojector method)": [[347, "nilearn.plotting.displays.YProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yprojector method)": [[347, "nilearn.plotting.displays.YProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yprojector method)": [[347, "nilearn.plotting.displays.YProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yprojector method)": [[347, "nilearn.plotting.displays.YProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yprojector method)": [[347, "nilearn.plotting.displays.YProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yprojector method)": [[347, "nilearn.plotting.displays.YProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yprojector method)": [[347, "nilearn.plotting.displays.YProjector.annotate"]], "black_bg (nilearn.plotting.displays.yprojector property)": [[347, "nilearn.plotting.displays.YProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yprojector property)": [[347, "nilearn.plotting.displays.YProjector.brain_color"]], "close() (nilearn.plotting.displays.yprojector method)": [[347, "nilearn.plotting.displays.YProjector.close"]], "draw_cross() (nilearn.plotting.displays.yprojector method)": [[347, "nilearn.plotting.displays.YProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yprojector class method)": [[347, "nilearn.plotting.displays.YProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yprojector class method)": [[347, "nilearn.plotting.displays.YProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yprojector method)": [[347, "nilearn.plotting.displays.YProjector.savefig"]], "title() (nilearn.plotting.displays.yprojector method)": [[347, "nilearn.plotting.displays.YProjector.title"]], "yslicer (class in nilearn.plotting.displays)": [[348, "nilearn.plotting.displays.YSlicer"]], "__init__() (nilearn.plotting.displays.yslicer method)": [[348, "nilearn.plotting.displays.YSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yslicer method)": [[348, "nilearn.plotting.displays.YSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yslicer method)": [[348, "nilearn.plotting.displays.YSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yslicer method)": [[348, "nilearn.plotting.displays.YSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yslicer method)": [[348, "nilearn.plotting.displays.YSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yslicer method)": [[348, "nilearn.plotting.displays.YSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yslicer property)": [[348, "nilearn.plotting.displays.YSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yslicer property)": [[348, "nilearn.plotting.displays.YSlicer.brain_color"]], "close() (nilearn.plotting.displays.yslicer method)": [[348, "nilearn.plotting.displays.YSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yslicer method)": [[348, "nilearn.plotting.displays.YSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yslicer class method)": [[348, "nilearn.plotting.displays.YSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yslicer class method)": [[348, "nilearn.plotting.displays.YSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yslicer method)": [[348, "nilearn.plotting.displays.YSlicer.savefig"]], "title() (nilearn.plotting.displays.yslicer method)": [[348, "nilearn.plotting.displays.YSlicer.title"]], "yxprojector (class in nilearn.plotting.displays)": [[349, "nilearn.plotting.displays.YXProjector"]], "__init__() (nilearn.plotting.displays.yxprojector method)": [[349, "nilearn.plotting.displays.YXProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yxprojector method)": [[349, "nilearn.plotting.displays.YXProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yxprojector method)": [[349, "nilearn.plotting.displays.YXProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yxprojector method)": [[349, "nilearn.plotting.displays.YXProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yxprojector method)": [[349, "nilearn.plotting.displays.YXProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yxprojector method)": [[349, "nilearn.plotting.displays.YXProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yxprojector method)": [[349, "nilearn.plotting.displays.YXProjector.annotate"]], "black_bg (nilearn.plotting.displays.yxprojector property)": [[349, "nilearn.plotting.displays.YXProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yxprojector property)": [[349, "nilearn.plotting.displays.YXProjector.brain_color"]], "close() (nilearn.plotting.displays.yxprojector method)": [[349, "nilearn.plotting.displays.YXProjector.close"]], "draw_cross() (nilearn.plotting.displays.yxprojector method)": [[349, "nilearn.plotting.displays.YXProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yxprojector class method)": [[349, "nilearn.plotting.displays.YXProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yxprojector class method)": [[349, "nilearn.plotting.displays.YXProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yxprojector method)": [[349, "nilearn.plotting.displays.YXProjector.savefig"]], "title() (nilearn.plotting.displays.yxprojector method)": [[349, "nilearn.plotting.displays.YXProjector.title"]], "yxslicer (class in nilearn.plotting.displays)": [[350, "nilearn.plotting.displays.YXSlicer"]], "__init__() (nilearn.plotting.displays.yxslicer method)": [[350, "nilearn.plotting.displays.YXSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yxslicer method)": [[350, "nilearn.plotting.displays.YXSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yxslicer method)": [[350, "nilearn.plotting.displays.YXSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yxslicer method)": [[350, "nilearn.plotting.displays.YXSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yxslicer method)": [[350, "nilearn.plotting.displays.YXSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yxslicer method)": [[350, "nilearn.plotting.displays.YXSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yxslicer property)": [[350, "nilearn.plotting.displays.YXSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yxslicer property)": [[350, "nilearn.plotting.displays.YXSlicer.brain_color"]], "close() (nilearn.plotting.displays.yxslicer method)": [[350, "nilearn.plotting.displays.YXSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yxslicer method)": [[350, "nilearn.plotting.displays.YXSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yxslicer class method)": [[350, "nilearn.plotting.displays.YXSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yxslicer class method)": [[350, "nilearn.plotting.displays.YXSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yxslicer method)": [[350, "nilearn.plotting.displays.YXSlicer.savefig"]], "title() (nilearn.plotting.displays.yxslicer method)": [[350, "nilearn.plotting.displays.YXSlicer.title"]], "yzprojector (class in nilearn.plotting.displays)": [[351, "nilearn.plotting.displays.YZProjector"]], "__init__() (nilearn.plotting.displays.yzprojector method)": [[351, "nilearn.plotting.displays.YZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yzprojector method)": [[351, "nilearn.plotting.displays.YZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yzprojector method)": [[351, "nilearn.plotting.displays.YZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yzprojector method)": [[351, "nilearn.plotting.displays.YZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yzprojector method)": [[351, "nilearn.plotting.displays.YZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yzprojector method)": [[351, "nilearn.plotting.displays.YZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yzprojector method)": [[351, "nilearn.plotting.displays.YZProjector.annotate"]], "black_bg (nilearn.plotting.displays.yzprojector property)": [[351, "nilearn.plotting.displays.YZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yzprojector property)": [[351, "nilearn.plotting.displays.YZProjector.brain_color"]], "close() (nilearn.plotting.displays.yzprojector method)": [[351, "nilearn.plotting.displays.YZProjector.close"]], "draw_cross() (nilearn.plotting.displays.yzprojector method)": [[351, "nilearn.plotting.displays.YZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yzprojector class method)": [[351, "nilearn.plotting.displays.YZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yzprojector class method)": [[351, "nilearn.plotting.displays.YZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yzprojector method)": [[351, "nilearn.plotting.displays.YZProjector.savefig"]], "title() (nilearn.plotting.displays.yzprojector method)": [[351, "nilearn.plotting.displays.YZProjector.title"]], "yzslicer (class in nilearn.plotting.displays)": [[352, "nilearn.plotting.displays.YZSlicer"]], "__init__() (nilearn.plotting.displays.yzslicer method)": [[352, "nilearn.plotting.displays.YZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yzslicer method)": [[352, "nilearn.plotting.displays.YZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yzslicer method)": [[352, "nilearn.plotting.displays.YZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yzslicer method)": [[352, "nilearn.plotting.displays.YZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yzslicer method)": [[352, "nilearn.plotting.displays.YZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yzslicer method)": [[352, "nilearn.plotting.displays.YZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yzslicer property)": [[352, "nilearn.plotting.displays.YZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yzslicer property)": [[352, "nilearn.plotting.displays.YZSlicer.brain_color"]], "close() (nilearn.plotting.displays.yzslicer method)": [[352, "nilearn.plotting.displays.YZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yzslicer method)": [[352, "nilearn.plotting.displays.YZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yzslicer class method)": [[352, "nilearn.plotting.displays.YZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yzslicer class method)": [[352, "nilearn.plotting.displays.YZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yzslicer method)": [[352, "nilearn.plotting.displays.YZSlicer.savefig"]], "title() (nilearn.plotting.displays.yzslicer method)": [[352, "nilearn.plotting.displays.YZSlicer.title"]], "zprojector (class in nilearn.plotting.displays)": [[353, "nilearn.plotting.displays.ZProjector"]], "__init__() (nilearn.plotting.displays.zprojector method)": [[353, "nilearn.plotting.displays.ZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.zprojector method)": [[353, "nilearn.plotting.displays.ZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.zprojector method)": [[353, "nilearn.plotting.displays.ZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.zprojector method)": [[353, "nilearn.plotting.displays.ZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.zprojector method)": [[353, "nilearn.plotting.displays.ZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.zprojector method)": [[353, "nilearn.plotting.displays.ZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.zprojector method)": [[353, "nilearn.plotting.displays.ZProjector.annotate"]], "black_bg (nilearn.plotting.displays.zprojector property)": [[353, "nilearn.plotting.displays.ZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.zprojector property)": [[353, "nilearn.plotting.displays.ZProjector.brain_color"]], "close() (nilearn.plotting.displays.zprojector method)": [[353, "nilearn.plotting.displays.ZProjector.close"]], "draw_cross() (nilearn.plotting.displays.zprojector method)": [[353, "nilearn.plotting.displays.ZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.zprojector class method)": [[353, "nilearn.plotting.displays.ZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.zprojector class method)": [[353, "nilearn.plotting.displays.ZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.zprojector method)": [[353, "nilearn.plotting.displays.ZProjector.savefig"]], "title() (nilearn.plotting.displays.zprojector method)": [[353, "nilearn.plotting.displays.ZProjector.title"]], "zslicer (class in nilearn.plotting.displays)": [[354, "nilearn.plotting.displays.ZSlicer"]], "__init__() (nilearn.plotting.displays.zslicer method)": [[354, "nilearn.plotting.displays.ZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.zslicer method)": [[354, "nilearn.plotting.displays.ZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.zslicer method)": [[354, "nilearn.plotting.displays.ZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.zslicer method)": [[354, "nilearn.plotting.displays.ZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.zslicer method)": [[354, "nilearn.plotting.displays.ZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.zslicer method)": [[354, "nilearn.plotting.displays.ZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.zslicer property)": [[354, "nilearn.plotting.displays.ZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.zslicer property)": [[354, "nilearn.plotting.displays.ZSlicer.brain_color"]], "close() (nilearn.plotting.displays.zslicer method)": [[354, "nilearn.plotting.displays.ZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.zslicer method)": [[354, "nilearn.plotting.displays.ZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.zslicer class method)": [[354, "nilearn.plotting.displays.ZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.zslicer class method)": [[354, "nilearn.plotting.displays.ZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.zslicer method)": [[354, "nilearn.plotting.displays.ZSlicer.savefig"]], "title() (nilearn.plotting.displays.zslicer method)": [[354, "nilearn.plotting.displays.ZSlicer.title"]], "get_projector() (in module nilearn.plotting.displays)": [[355, "nilearn.plotting.displays.get_projector"]], "get_slicer() (in module nilearn.plotting.displays)": [[356, "nilearn.plotting.displays.get_slicer"]], "find_cut_slices() (in module nilearn.plotting)": [[357, "nilearn.plotting.find_cut_slices"]], "find_parcellation_cut_coords() (in module nilearn.plotting)": [[358, "nilearn.plotting.find_parcellation_cut_coords"]], "find_probabilistic_atlas_cut_coords() (in module nilearn.plotting)": [[359, "nilearn.plotting.find_probabilistic_atlas_cut_coords"]], "find_xyz_cut_coords() (in module nilearn.plotting)": [[360, "nilearn.plotting.find_xyz_cut_coords"]], "plot_anat() (in module nilearn.plotting)": [[361, "nilearn.plotting.plot_anat"]], "plot_carpet() (in module nilearn.plotting)": [[362, "nilearn.plotting.plot_carpet"]], "plot_connectome() (in module nilearn.plotting)": [[363, "nilearn.plotting.plot_connectome"]], "plot_contrast_matrix() (in module nilearn.plotting)": [[364, "nilearn.plotting.plot_contrast_matrix"]], "plot_design_matrix() (in module nilearn.plotting)": [[365, "nilearn.plotting.plot_design_matrix"]], "plot_epi() (in module nilearn.plotting)": [[366, "nilearn.plotting.plot_epi"]], "plot_event() (in module nilearn.plotting)": [[367, "nilearn.plotting.plot_event"]], "plot_glass_brain() (in module nilearn.plotting)": [[368, "nilearn.plotting.plot_glass_brain"]], "plot_img() (in module nilearn.plotting)": [[369, "nilearn.plotting.plot_img"]], "plot_img_comparison() (in module nilearn.plotting)": [[370, "nilearn.plotting.plot_img_comparison"]], "plot_img_on_surf() (in module nilearn.plotting)": [[371, "nilearn.plotting.plot_img_on_surf"]], "plot_markers() (in module nilearn.plotting)": [[372, "nilearn.plotting.plot_markers"]], "plot_matrix() (in module nilearn.plotting)": [[373, "nilearn.plotting.plot_matrix"]], "plot_prob_atlas() (in module nilearn.plotting)": [[374, "nilearn.plotting.plot_prob_atlas"]], "plot_roi() (in module nilearn.plotting)": [[375, "nilearn.plotting.plot_roi"]], "plot_stat_map() (in module nilearn.plotting)": [[376, "nilearn.plotting.plot_stat_map"]], "plot_surf() (in module nilearn.plotting)": [[377, "nilearn.plotting.plot_surf"]], "plot_surf_contours() (in module nilearn.plotting)": [[378, "nilearn.plotting.plot_surf_contours"]], "plot_surf_roi() (in module nilearn.plotting)": [[379, "nilearn.plotting.plot_surf_roi"]], "plot_surf_stat_map() (in module nilearn.plotting)": [[380, "nilearn.plotting.plot_surf_stat_map"]], "show() (in module nilearn.plotting)": [[381, "nilearn.plotting.show"]], "view_connectome() (in module nilearn.plotting)": [[382, "nilearn.plotting.view_connectome"]], "view_img() (in module nilearn.plotting)": [[383, "nilearn.plotting.view_img"]], "view_img_on_surf() (in module nilearn.plotting)": [[384, "nilearn.plotting.view_img_on_surf"]], "view_markers() (in module nilearn.plotting)": [[385, "nilearn.plotting.view_markers"]], "view_surf() (in module nilearn.plotting)": [[386, "nilearn.plotting.view_surf"]], "hierarchicalkmeans (class in nilearn.regions)": [[387, "nilearn.regions.HierarchicalKMeans"]], "__init__() (nilearn.regions.hierarchicalkmeans method)": [[387, "nilearn.regions.HierarchicalKMeans.__init__"]], "fit() (nilearn.regions.hierarchicalkmeans method)": [[387, "nilearn.regions.HierarchicalKMeans.fit"]], "fit_predict() (nilearn.regions.hierarchicalkmeans method)": [[387, "nilearn.regions.HierarchicalKMeans.fit_predict"]], "fit_transform() (nilearn.regions.hierarchicalkmeans method)": [[387, "nilearn.regions.HierarchicalKMeans.fit_transform"]], "get_params() (nilearn.regions.hierarchicalkmeans method)": [[387, "nilearn.regions.HierarchicalKMeans.get_params"]], "inverse_transform() (nilearn.regions.hierarchicalkmeans method)": [[387, "nilearn.regions.HierarchicalKMeans.inverse_transform"]], "set_output() (nilearn.regions.hierarchicalkmeans method)": [[387, "nilearn.regions.HierarchicalKMeans.set_output"]], "set_params() (nilearn.regions.hierarchicalkmeans method)": [[387, "nilearn.regions.HierarchicalKMeans.set_params"]], "transform() (nilearn.regions.hierarchicalkmeans method)": [[387, "nilearn.regions.HierarchicalKMeans.transform"]], "parcellations (class in nilearn.regions)": [[388, "nilearn.regions.Parcellations"]], "valid_methods (nilearn.regions.parcellations attribute)": [[388, "nilearn.regions.Parcellations.VALID_METHODS"]], "__init__() (nilearn.regions.parcellations method)": [[388, "nilearn.regions.Parcellations.__init__"]], "fit() (nilearn.regions.parcellations method)": [[388, "nilearn.regions.Parcellations.fit"]], "fit_transform() (nilearn.regions.parcellations method)": [[388, "nilearn.regions.Parcellations.fit_transform"]], "get_params() (nilearn.regions.parcellations method)": [[388, "nilearn.regions.Parcellations.get_params"]], "inverse_transform() (nilearn.regions.parcellations method)": [[388, "nilearn.regions.Parcellations.inverse_transform"]], "score() (nilearn.regions.parcellations method)": [[388, "nilearn.regions.Parcellations.score"]], "set_output() (nilearn.regions.parcellations method)": [[388, "nilearn.regions.Parcellations.set_output"]], "set_params() (nilearn.regions.parcellations method)": [[388, "nilearn.regions.Parcellations.set_params"]], "transform() (nilearn.regions.parcellations method)": [[388, "nilearn.regions.Parcellations.transform"]], "rena (class in nilearn.regions)": [[389, "nilearn.regions.ReNA"]], "__init__() (nilearn.regions.rena method)": [[389, "nilearn.regions.ReNA.__init__"]], "fit() (nilearn.regions.rena method)": [[389, "nilearn.regions.ReNA.fit"]], "fit_predict() (nilearn.regions.rena method)": [[389, "nilearn.regions.ReNA.fit_predict"]], "fit_transform() (nilearn.regions.rena method)": [[389, "nilearn.regions.ReNA.fit_transform"]], "get_params() (nilearn.regions.rena method)": [[389, "nilearn.regions.ReNA.get_params"]], "inverse_transform() (nilearn.regions.rena method)": [[389, "nilearn.regions.ReNA.inverse_transform"]], "set_output() (nilearn.regions.rena method)": [[389, "nilearn.regions.ReNA.set_output"]], "set_params() (nilearn.regions.rena method)": [[389, "nilearn.regions.ReNA.set_params"]], "transform() (nilearn.regions.rena method)": [[389, "nilearn.regions.ReNA.transform"]], "regionextractor (class in nilearn.regions)": [[390, "nilearn.regions.RegionExtractor"]], "__init__() (nilearn.regions.regionextractor method)": [[390, "nilearn.regions.RegionExtractor.__init__"]], "fit() (nilearn.regions.regionextractor method)": [[390, "nilearn.regions.RegionExtractor.fit"]], "fit_transform() (nilearn.regions.regionextractor method)": [[390, "nilearn.regions.RegionExtractor.fit_transform"]], "generate_report() (nilearn.regions.regionextractor method)": [[390, "nilearn.regions.RegionExtractor.generate_report"]], "get_params() (nilearn.regions.regionextractor method)": [[390, "nilearn.regions.RegionExtractor.get_params"]], "inverse_transform() (nilearn.regions.regionextractor method)": [[390, "nilearn.regions.RegionExtractor.inverse_transform"]], "set_output() (nilearn.regions.regionextractor method)": [[390, "nilearn.regions.RegionExtractor.set_output"]], "set_params() (nilearn.regions.regionextractor method)": [[390, "nilearn.regions.RegionExtractor.set_params"]], "transform() (nilearn.regions.regionextractor method)": [[390, "nilearn.regions.RegionExtractor.transform"]], "transform_single_imgs() (nilearn.regions.regionextractor method)": [[390, "nilearn.regions.RegionExtractor.transform_single_imgs"]], "connected_label_regions() (in module nilearn.regions)": [[391, "nilearn.regions.connected_label_regions"]], "connected_regions() (in module nilearn.regions)": [[392, "nilearn.regions.connected_regions"]], "img_to_signals_labels() (in module nilearn.regions)": [[393, "nilearn.regions.img_to_signals_labels"]], "img_to_signals_maps() (in module nilearn.regions)": [[394, "nilearn.regions.img_to_signals_maps"]], "recursive_neighbor_agglomeration() (in module nilearn.regions)": [[395, "nilearn.regions.recursive_neighbor_agglomeration"]], "signals_to_img_labels() (in module nilearn.regions)": [[396, "nilearn.regions.signals_to_img_labels"]], "signals_to_img_maps() (in module nilearn.regions)": [[397, "nilearn.regions.signals_to_img_maps"]], "htmlreport (class in nilearn.reporting)": [[398, "nilearn.reporting.HTMLReport"]], "__init__() (nilearn.reporting.htmlreport method)": [[398, "nilearn.reporting.HTMLReport.__init__"]], "get_iframe() (nilearn.reporting.htmlreport method)": [[398, "nilearn.reporting.HTMLReport.get_iframe"]], "get_standalone() (nilearn.reporting.htmlreport method)": [[398, "nilearn.reporting.HTMLReport.get_standalone"]], "open_in_browser() (nilearn.reporting.htmlreport method)": [[398, "nilearn.reporting.HTMLReport.open_in_browser"]], "remove_temp_file() (nilearn.reporting.htmlreport method)": [[398, "nilearn.reporting.HTMLReport.remove_temp_file"]], "resize() (nilearn.reporting.htmlreport method)": [[398, "nilearn.reporting.HTMLReport.resize"]], "save_as_html() (nilearn.reporting.htmlreport method)": [[398, "nilearn.reporting.HTMLReport.save_as_html"]], "get_clusters_table() (in module nilearn.reporting)": [[399, "nilearn.reporting.get_clusters_table"]], "make_glm_report() (in module nilearn.reporting)": [[400, "nilearn.reporting.make_glm_report"]], "butterworth() (in module nilearn.signal)": [[401, "nilearn.signal.butterworth"]], "clean() (in module nilearn.signal)": [[402, "nilearn.signal.clean"]], "high_variance_confounds() (in module nilearn.signal)": [[403, "nilearn.signal.high_variance_confounds"]], "load_surf_data() (in module nilearn.surface)": [[404, "nilearn.surface.load_surf_data"]], "load_surf_mesh() (in module nilearn.surface)": [[405, "nilearn.surface.load_surf_mesh"]], "vol_to_surf() (in module nilearn.surface)": [[406, "nilearn.surface.vol_to_surf"]], "nilearn.glm": [[407, "module-nilearn.glm"]], "nilearn.glm.first_level": [[407, "module-nilearn.glm.first_level"]], "nilearn.glm.second_level": [[407, "module-nilearn.glm.second_level"]], "nilearn.image": [[408, "module-nilearn.image"]], "nilearn.interfaces": [[410, "module-nilearn.interfaces"]], "nilearn.interfaces.bids": [[410, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.fmriprep": [[410, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fsl": [[410, "module-nilearn.interfaces.fsl"]], "nilearn.maskers": [[411, "module-nilearn.maskers"]], "nilearn.masking": [[412, "module-nilearn.masking"]], "nilearn.mass_univariate": [[413, "module-nilearn.mass_univariate"]], "nilearn.plotting": [[414, "module-nilearn.plotting"]], "nilearn.plotting.displays": [[414, "module-nilearn.plotting.displays"]], "nilearn.regions": [[415, "module-nilearn.regions"]], "nilearn.reporting": [[416, "module-nilearn.reporting"]], "nilearn.signal": [[417, "module-nilearn.signal"]], "nilearn.surface": [[418, "module-nilearn.surface"]]}})