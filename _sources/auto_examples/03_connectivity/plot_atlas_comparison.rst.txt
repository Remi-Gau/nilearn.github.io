.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_03_connectivity_plot_atlas_comparison.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_03_connectivity_plot_atlas_comparison.py:


Comparing connectomes on different reference atlases
====================================================

This examples shows how to turn a parcellation into connectome for
visualization. This requires choosing centers for each parcel
or network, via :func:`nilearn.plotting.find_parcellation_cut_coords` for
parcellation based on labels and
:func:`nilearn.plotting.find_probabilistic_atlas_cut_coords` for
parcellation based on probabilistic values.

In the intermediary steps, we make use of
:class:`nilearn.input_data.NiftiLabelsMasker` and
:class:`nilearn.input_data.NiftiMapsMasker` to extract time series from nifti
objects using different parcellation atlases.

The time series of all subjects of the brain development dataset are concatenated and
given directly to :class:`nilearn.connectome.ConnectivityMeasure` for
computing parcel-wise correlation matrices for each atlas across all subjects.

Mean correlation matrix is displayed on glass brain on extracted coordinates.

# author: Amadeus Kanaan

Load atlases
-------------


.. code-block:: default

    from nilearn import datasets

    yeo = datasets.fetch_atlas_yeo_2011()
    print('Yeo atlas nifti image (3D) with 17 parcels and liberal mask is located '
          'at: %s' % yeo['thick_17'])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Yeo atlas nifti image (3D) with 17 parcels and liberal mask is located at: /home/kc/nilearn_data/yeo_2011/Yeo_JNeurophysiol11_MNI152/Yeo2011_17Networks_MNI152_FreeSurferConformed1mm_LiberalMask.nii.gz




Load functional data
--------------------


.. code-block:: default

    data = datasets.fetch_development_fmri(n_subjects=10)

    print('Functional nifti images (4D, e.g., one subject) are located at : %r'
          % data['func'][0])
    print('Counfound csv files (of same subject) are located at : %r'
          % data['confounds'][0])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Functional nifti images (4D, e.g., one subject) are located at : '/home/kc/nilearn_data/development_fmri/development_fmri/sub-pixar123_task-pixar_space-MNI152NLin2009cAsym_desc-preproc_bold.nii.gz'
    Counfound csv files (of same subject) are located at : '/home/kc/nilearn_data/development_fmri/development_fmri/sub-pixar123_task-pixar_desc-reducedConfounds_regressors.tsv'




Extract coordinates on Yeo atlas - parcellations
------------------------------------------------


.. code-block:: default

    from nilearn.input_data import NiftiLabelsMasker
    from nilearn.connectome import ConnectivityMeasure

    # ConenctivityMeasure from Nilearn uses simple 'correlation' to compute
    # connectivity matrices for all subjects in a list
    connectome_measure = ConnectivityMeasure(kind='correlation')

    # useful for plotting connectivity interactions on glass brain
    from nilearn import plotting

    # create masker to extract functional data within atlas parcels
    masker = NiftiLabelsMasker(labels_img=yeo['thick_17'], standardize=True,
                               memory='nilearn_cache')

    # extract time series from all subjects and concatenate them
    time_series = []
    for func, confounds in zip(data.func, data.confounds):
        time_series.append(masker.fit_transform(func, confounds=confounds))

    # calculate correlation matrices across subjects and display
    correlation_matrices = connectome_measure.fit_transform(time_series)

    # Mean correlation matrix across 10 subjects can be grabbed like this,
    # using connectome measure object
    mean_correlation_matrix = connectome_measure.mean_

    # grab center coordinates for atlas labels
    coordinates = plotting.find_parcellation_cut_coords(labels_img=yeo['thick_17'])

    # plot connectome with 80% edge strength in the connectivity
    plotting.plot_connectome(mean_correlation_matrix, coordinates,
                             edge_threshold="80%",
                             title='Yeo Atlas 17 thick (func)')




.. image:: /auto_examples/03_connectivity/images/sphx_glr_plot_atlas_comparison_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <nilearn.plotting.displays.OrthoProjector object at 0x7f5e82270250>



Load probabilistic atlases - extracting coordinates on brain maps
-----------------------------------------------------------------


.. code-block:: default


    msdl = datasets.fetch_atlas_msdl()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/kc/miniconda3/envs/nilearn-py37-latest/lib/python3.7/site-packages/numpy/lib/npyio.py:2358: VisibleDeprecationWarning: Reading unicode strings without specifying the encoding argument is deprecated. Set the encoding, use None for the system default.
      output = genfromtxt(fname, **kwargs)




Iterate over fetched atlases to extract coordinates - probabilistic
-------------------------------------------------------------------


.. code-block:: default

    from nilearn.input_data import NiftiMapsMasker

    # create masker to extract functional data within atlas parcels
    masker = NiftiMapsMasker(maps_img=msdl['maps'], standardize=True,
                             memory='nilearn_cache')

    # extract time series from all subjects and concatenate them
    time_series = []
    for func, confounds in zip(data.func, data.confounds):
        time_series.append(masker.fit_transform(func, confounds=confounds))

    # calculate correlation matrices across subjects and display
    correlation_matrices = connectome_measure.fit_transform(time_series)

    # Mean correlation matrix across 10 subjects can be grabbed like this,
    # using connectome measure object
    mean_correlation_matrix = connectome_measure.mean_

    # grab center coordinates for probabilistic atlas
    coordinates = plotting.find_probabilistic_atlas_cut_coords(maps_img=msdl['maps'])

    # plot connectome with 80% edge strength in the connectivity
    plotting.plot_connectome(mean_correlation_matrix, coordinates,
                             edge_threshold="80%", title='MSDL (probabilistic)')
    plotting.show()



.. image:: /auto_examples/03_connectivity/images/sphx_glr_plot_atlas_comparison_002.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /mnt/c/Users/kshit/workspace/nilearn-org/nilearn-repo/kchawla-pi/nilearn/nilearn/_utils/cache_mixin.py:296: UserWarning: memory_level is currently set to 0 but a Memory object has been provided. Setting memory_level to 1.
      warnings.warn("memory_level is currently set to 0 but "





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  18.413 seconds)


.. _sphx_glr_download_auto_examples_03_connectivity_plot_atlas_comparison.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_atlas_comparison.py <plot_atlas_comparison.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_atlas_comparison.ipynb <plot_atlas_comparison.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
