.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_03_connectivity_plot_adhd_spheres.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_03_connectivity_plot_adhd_spheres.py:


Extracting brain signal from spheres
====================================

This example extract brain signals from spheres described by the coordinates
of their center in MNI space and a given radius in millimeters. In particular,
this example extracts signals from Default Mode Network regions and compute a
connectome from them.


Retrieve the dataset
---------------------


.. code-block:: default

    from nilearn import datasets
    adhd_dataset = datasets.fetch_adhd(n_subjects=1)

    # print basic information on the dataset
    print('First subject functional nifti image (4D) is at: %s' %
          adhd_dataset.func[0])  # 4D data






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    First subject functional nifti image (4D) is at: /home/kshitij/nilearn_data/adhd/data/0010042/0010042_rest_tshift_RPI_voreg_mni.nii.gz


Coordinates of Default Mode Network
------------------------------------


.. code-block:: default

    dmn_coords = [(0, -52, 18), (-46, -68, 32), (46, -68, 32), (1, 50, -5)]
    labels = [
              'Posterior Cingulate Cortex',
              'Left Temporoparietal junction',
              'Right Temporoparietal junction',
              'Medial prefrontal cortex',
             ]








Extracts signal from sphere around DMN seeds
---------------------------------------------


.. code-block:: default

    from nilearn import input_data

    masker = input_data.NiftiSpheresMasker(
        dmn_coords, radius=8,
        detrend=True, standardize=True,
        low_pass=0.1, high_pass=0.01, t_r=2.5,
        memory='nilearn_cache', memory_level=1, verbose=2)

    func_filename = adhd_dataset.func[0]
    confound_filename = adhd_dataset.confounds[0]

    time_series = masker.fit_transform(func_filename,
                                       confounds=[confound_filename])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ________________________________________________________________________________
    [Memory] Calling nilearn.input_data.base_masker.filter_and_extract...
    filter_and_extract('/home/kshitij/nilearn_data/adhd/data/0010042/0010042_rest_tshift_RPI_voreg_mni.nii.gz', 
    <nilearn.input_data.nifti_spheres_masker._ExtractionFunctor object at 0x7f3fef21b3c8>, 
    { 'allow_overlap': False,
      'detrend': True,
      'dtype': None,
      'high_pass': 0.01,
      'low_pass': 0.1,
      'mask_img': None,
      'radius': 8,
      'seeds': [(0, -52, 18), (-46, -68, 32), (46, -68, 32), (1, 50, -5)],
      'smoothing_fwhm': None,
      'standardize': True,
      't_r': 2.5}, confounds=['/home/kshitij/nilearn_data/adhd/data/0010042/0010042_regressors.csv'], dtype=None, memory=Memory(location=nilearn_cache/joblib), memory_level=1, verbose=2)
    [NiftiSpheresMasker.transform_single_imgs] Loading data from /home/kshitij/nilearn_data/adhd/data/0010042/0010042_rest_tshift_RPI_voreg_mni.nii.gz
    [NiftiSpheresMasker.transform_single_imgs] Extracting region signals
    [NiftiSpheresMasker.transform_single_imgs] Cleaning extracted signals
    _______________________________________________filter_and_extract - 3.3s, 0.1min


Display time series
--------------------


.. code-block:: default

    import matplotlib.pyplot as plt
    for time_serie, label in zip(time_series.T, labels):
        plt.plot(time_serie, label=label)

    plt.title('Default Mode Network Time Series')
    plt.xlabel('Scan number')
    plt.ylabel('Normalized signal')
    plt.legend()
    plt.tight_layout()





.. image:: /auto_examples/03_connectivity/images/sphx_glr_plot_adhd_spheres_001.png
    :class: sphx-glr-single-img




Compute partial correlation matrix
-----------------------------------
Using object :class:`nilearn.connectome.ConnectivityMeasure`: Its
default covariance estimator is Ledoit-Wolf, allowing to obtain accurate
partial correlations.


.. code-block:: default

    from nilearn.connectome import ConnectivityMeasure
    connectivity_measure = ConnectivityMeasure(kind='partial correlation')
    partial_correlation_matrix = connectivity_measure.fit_transform(
        [time_series])[0]







Display connectome
-------------------


.. code-block:: default

    from nilearn import plotting

    plotting.plot_connectome(partial_correlation_matrix, dmn_coords,
                             title="Default Mode Network Connectivity")




.. image:: /auto_examples/03_connectivity/images/sphx_glr_plot_adhd_spheres_002.png
    :class: sphx-glr-single-img




Display connectome with hemispheric projections.
Notice (0, -52, 18) is included in both hemispheres since x == 0.


.. code-block:: default

    plotting.plot_connectome(partial_correlation_matrix, dmn_coords,
                             title="Connectivity projected on hemispheres",
                             display_mode='lyrz')

    plotting.show()




.. image:: /auto_examples/03_connectivity/images/sphx_glr_plot_adhd_spheres_003.png
    :class: sphx-glr-single-img




3D visualization in a web browser
---------------------------------
An alternative to :func:`nilearn.plotting.plot_connectome` is to use
:func:`nilearn.plotting.view_connectome` that gives more interactive
visualizations in a web browser. See :ref:`interactive-connectome-plotting`
for more details.


.. code-block:: default



    view = plotting.view_connectome(partial_correlation_matrix, dmn_coords)

    # uncomment this to open the plot in a web browser:
    # view.open_in_browser()







In a Jupyter notebook, if ``view`` is the output of a cell, it will
be displayed below the cell


.. code-block:: default


    view







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.276 seconds)


.. _sphx_glr_download_auto_examples_03_connectivity_plot_adhd_spheres.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_adhd_spheres.py <plot_adhd_spheres.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_adhd_spheres.ipynb <plot_adhd_spheres.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
